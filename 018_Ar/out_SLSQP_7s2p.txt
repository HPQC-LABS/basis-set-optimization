#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((9, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.5476253398322024e+03,6.8630785798847160e+02,1.5555024230205126e+02,4.2742815896802767e+01,4.7505784169783016e+00,3.9162204394177752e-01,8.5974230426361959e+00,4.9072756124177219e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "7s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:52:53 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  18190.5013593        1
[INPUT] 0    0    [1    /1   ]  4547.62533983        1
[INPUT] 0    0    [1    /1   ]  686.307857988        1
[INPUT] 0    0    [1    /1   ]  155.550242302        1
[INPUT] 0    0    [1    /1   ]  42.7428158968        1
[INPUT] 0    0    [1    /1   ]  4.75057841698        1
[INPUT] 0    0    [1    /1   ]  0.391622043942       1
[INPUT] 1    0    [1    /1   ]  8.59742304264        1
[INPUT] 1    0    [1    /1   ]  0.490727561242       1

nuclear repulsion = 0
number of shells = 9
number of NR pGTOs = 13
number of NR cGTOs = 13
basis = {'Ar': [[0, [18190.50135932881, 1.0]], [0, [4547.625339832202, 1.0]], [0, [686.3078579884716, 1.0]], [0, [155.55024230205126, 1.0]], [0, [42.74281589680277, 1.0]], [0, [4.750578416978302, 1.0]], [0, [0.3916220439417775, 1.0]], [1, [8.597423042636196, 1.0]], [1, [0.4907275612417722, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [18190.50135933]
bas 1, expnt(s) = [4547.62533983]
bas 2, expnt(s) = [686.30785799]
bas 3, expnt(s) = [155.5502423]
bas 4, expnt(s) = [42.7428159]
bas 5, expnt(s) = [4.75057842]
bas 6, expnt(s) = [0.39162204]
bas 7, expnt(s) = [8.59742304]
bas 8, expnt(s) = [0.49072756]
CPU time:         1.98
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  1  1  1  0 38 39  0]
 [ 0  1  1  1  0 40 41  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.81905014e+04 3.95729591e+03 4.54762534e+03 1.39911539e+03
 6.86307858e+02 3.38769461e+02 1.55550242e+02 1.11280237e+02
 4.27428159e+01 4.22340152e+01 4.75057842e+00 8.12970698e+00
 3.91622044e-01 1.25073520e+00 8.59742304e+00 4.29481799e+01
 4.90727561e-01 1.19821556e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319451828209296
cond(S) = 28.53380060487247
E1 = -688.921052169114  E_coul = 184.91763895062908
init E= -504.003413218485
    CPU time for initialize scf      0.16 sec, wall time      0.16 sec
  HOMO = -0.681154753155011  LUMO = 112.685366906806
  mo_energy =
[-1.21551038e+02 -1.32756566e+01 -7.62079215e+00 -7.62079215e+00
 -7.62079215e+00 -1.65103775e+00 -6.81154753e-01 -6.81154753e-01
 -6.81154753e-01  1.12685367e+02  9.94791243e+02  7.26424507e+03
  3.94036709e+04]
E1 = -706.3762104567242  E_coul = 198.94743805449994
cycle= 1 E= -507.428772402224  delta_E= -3.43  |g|= 0.298  |ddm|=  0.3
    CPU time for cycle= 1      0.37 sec, wall time      0.37 sec
diis-norm(errvec)=0.395574
diis-c [-0.15647874  1.        ]
  HOMO = -0.23612767700298  LUMO = 114.042171918282
  mo_energy =
[-1.20168014e+02 -1.22464501e+01 -6.65166080e+00 -6.65166080e+00
 -6.65166080e+00 -1.16297486e+00 -2.36127677e-01 -2.36127677e-01
 -2.36127677e-01  1.14042172e+02  9.96140535e+02  7.26543080e+03
  3.94047280e+04]
E1 = -706.3553854782485  E_coul = 198.92633606015497
cycle= 2 E= -507.429049418094  delta_E= -0.000277  |g|= 0.00371  |ddm|= 0.00903
    CPU time for cycle= 2      0.12 sec, wall time      0.12 sec
diis-norm(errvec)=0.00392422
diis-c [-1.50830941e-05 -1.42409312e-03  1.00142409e+00]
  HOMO = -0.236233977102832  LUMO = 114.039371448618
  mo_energy =
[-1.20174055e+02 -1.22471888e+01 -6.65280395e+00 -6.65280395e+00
 -6.65280395e+00 -1.16301459e+00 -2.36233977e-01 -2.36233977e-01
 -2.36233977e-01  1.14039371e+02  9.96131820e+02  7.26541770e+03
  3.94047132e+04]
E1 = -706.3551455459884  E_coul = 198.9260960752811
cycle= 3 E= -507.429049470707  delta_E= -5.26e-08  |g|= 6.08e-05  |ddm|= 0.000109
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=8.09569e-05
diis-c [-1.49191183e-10  3.82156267e-05 -2.10613882e-02  1.02102317e+00]
  HOMO = -0.236235004649148  LUMO = 114.03934746767
  mo_energy =
[-1.20174112e+02 -1.22471962e+01 -6.65281694e+00 -6.65281694e+00
 -6.65281694e+00 -1.16301488e+00 -2.36235005e-01 -2.36235005e-01
 -2.36235005e-01  1.14039347e+02  9.96131761e+02  7.26541763e+03
  3.94047131e+04]
E1 = -706.3551425210951  E_coul = 198.92609305037516
cycle= 4 E= -507.42904947072  delta_E= -1.26e-11  |g|= 1.74e-07  |ddm|= 1.5e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.3551425210951  E_coul = 198.92609305037516
  HOMO = -0.23623499883537  LUMO = 114.039347649138
  mo_energy =
[-1.20174112e+02 -1.22471962e+01 -6.65281688e+00 -6.65281688e+00
 -6.65281688e+00 -1.16301488e+00 -2.36234999e-01 -2.36234999e-01
 -2.36234999e-01  1.14039348e+02  9.96131761e+02  7.26541763e+03
  3.94047131e+04]
E1 = -706.3551425337807  E_coul = 198.92609306306082
Extra cycle  E= -507.42904947072  delta_E= 5.68e-14  |g|= 2.51e-09  |ddm|= 5.24e-09
    CPU time for scf_cycle      0.69 sec, wall time      0.70 sec
exp = [1.81905014e+04 4.54762534e+03 6.86307858e+02 1.55550242e+02
 4.27428159e+01 4.75057842e+00 3.91622044e-01 8.59742304e+00
 4.90727561e-01]
E = -507.4290494707199
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((9, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.5476253398322024e+03,6.8630785798847160e+02,1.5555024230205126e+02,4.2742815896802767e+01,4.7505784169783016e+00,3.9162204394177752e-01,8.5974230426361959e+00,4.9072756124177219e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "7s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:52:54 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  18190.5013593        1
[INPUT] 0    0    [1    /1   ]  4547.62533983        1
[INPUT] 0    0    [1    /1   ]  686.307857988        1
[INPUT] 0    0    [1    /1   ]  155.550242302        1
[INPUT] 0    0    [1    /1   ]  42.7428158968        1
[INPUT] 0    0    [1    /1   ]  4.75057841698        1
[INPUT] 0    0    [1    /1   ]  0.391622043942       1
[INPUT] 1    0    [1    /1   ]  8.59742304264        1
[INPUT] 1    0    [1    /1   ]  0.490727561242       1

nuclear repulsion = 0
number of shells = 9
number of NR pGTOs = 13
number of NR cGTOs = 13
basis = {'Ar': [[0, [18190.50135932881, 1.0]], [0, [4547.625339832202, 1.0]], [0, [686.3078579884716, 1.0]], [0, [155.55024230205126, 1.0]], [0, [42.74281589680277, 1.0]], [0, [4.750578416978302, 1.0]], [0, [0.3916220439417775, 1.0]], [1, [8.597423042636196, 1.0]], [1, [0.4907275612417722, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [18190.50135933]
bas 1, expnt(s) = [4547.62533983]
bas 2, expnt(s) = [686.30785799]
bas 3, expnt(s) = [155.5502423]
bas 4, expnt(s) = [42.7428159]
bas 5, expnt(s) = [4.75057842]
bas 6, expnt(s) = [0.39162204]
bas 7, expnt(s) = [8.59742304]
bas 8, expnt(s) = [0.49072756]
CPU time:         2.87
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  1  1  1  0 38 39  0]
 [ 0  1  1  1  0 40 41  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.81905014e+04 3.95729591e+03 4.54762534e+03 1.39911539e+03
 6.86307858e+02 3.38769461e+02 1.55550242e+02 1.11280237e+02
 4.27428159e+01 4.22340152e+01 4.75057842e+00 8.12970698e+00
 3.91622044e-01 1.25073520e+00 8.59742304e+00 4.29481799e+01
 4.90727561e-01 1.19821556e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319451828209296
cond(S) = 28.53380060487247
E1 = -688.921052169114  E_coul = 184.91763895062908
init E= -504.003413218485
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.681154753155011  LUMO = 112.685366906806
  mo_energy =
[-1.21551038e+02 -1.32756566e+01 -7.62079215e+00 -7.62079215e+00
 -7.62079215e+00 -1.65103775e+00 -6.81154753e-01 -6.81154753e-01
 -6.81154753e-01  1.12685367e+02  9.94791243e+02  7.26424507e+03
  3.94036709e+04]
E1 = -706.3762104567242  E_coul = 198.94743805449994
cycle= 1 E= -507.428772402224  delta_E= -3.43  |g|= 0.298  |ddm|=  0.3
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.395574
diis-c [-0.15647874  1.        ]
  HOMO = -0.23612767700298  LUMO = 114.042171918282
  mo_energy =
[-1.20168014e+02 -1.22464501e+01 -6.65166080e+00 -6.65166080e+00
 -6.65166080e+00 -1.16297486e+00 -2.36127677e-01 -2.36127677e-01
 -2.36127677e-01  1.14042172e+02  9.96140535e+02  7.26543080e+03
  3.94047280e+04]
E1 = -706.3553854782485  E_coul = 198.92633606015497
cycle= 2 E= -507.429049418094  delta_E= -0.000277  |g|= 0.00371  |ddm|= 0.00903
    CPU time for cycle= 2      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.00392422
diis-c [-1.50830941e-05 -1.42409312e-03  1.00142409e+00]
  HOMO = -0.236233977102832  LUMO = 114.039371448618
  mo_energy =
[-1.20174055e+02 -1.22471888e+01 -6.65280395e+00 -6.65280395e+00
 -6.65280395e+00 -1.16301459e+00 -2.36233977e-01 -2.36233977e-01
 -2.36233977e-01  1.14039371e+02  9.96131820e+02  7.26541770e+03
  3.94047132e+04]
E1 = -706.3551455459884  E_coul = 198.9260960752811
cycle= 3 E= -507.429049470707  delta_E= -5.26e-08  |g|= 6.08e-05  |ddm|= 0.000109
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=8.09569e-05
diis-c [-1.49191183e-10  3.82156267e-05 -2.10613882e-02  1.02102317e+00]
  HOMO = -0.236235004649148  LUMO = 114.03934746767
  mo_energy =
[-1.20174112e+02 -1.22471962e+01 -6.65281694e+00 -6.65281694e+00
 -6.65281694e+00 -1.16301488e+00 -2.36235005e-01 -2.36235005e-01
 -2.36235005e-01  1.14039347e+02  9.96131761e+02  7.26541763e+03
  3.94047131e+04]
E1 = -706.3551425210951  E_coul = 198.92609305037516
cycle= 4 E= -507.42904947072  delta_E= -1.26e-11  |g|= 1.74e-07  |ddm|= 1.5e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.3551425210951  E_coul = 198.92609305037516
  HOMO = -0.23623499883537  LUMO = 114.039347649138
  mo_energy =
[-1.20174112e+02 -1.22471962e+01 -6.65281688e+00 -6.65281688e+00
 -6.65281688e+00 -1.16301488e+00 -2.36234999e-01 -2.36234999e-01
 -2.36234999e-01  1.14039348e+02  9.96131761e+02  7.26541763e+03
  3.94047131e+04]
E1 = -706.3551425337807  E_coul = 198.92609306306082
Extra cycle  E= -507.42904947072  delta_E= 5.68e-14  |g|= 2.51e-09  |ddm|= 5.24e-09
    CPU time for scf_cycle      0.09 sec, wall time      0.10 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 28.53380060487247
E1 = -706.3551425337807  E_coul = 198.92609306306082
init E= -507.42904947072
    CPU time for initialize scf      0.36 sec, wall time      0.36 sec
  HOMO = -0.236234998778411  LUMO = 114.039347650881
  mo_energy =
[-1.20174112e+02 -1.22471962e+01 -6.65281688e+00 -6.65281688e+00
 -6.65281688e+00 -1.16301488e+00 -2.36234999e-01 -2.36234999e-01
 -2.36234999e-01  1.14039348e+02  9.96131761e+02  7.26541763e+03
  3.94047131e+04]
E1 = -706.3551425339367  E_coul = 198.92609306321722
cycle= 1 E= -507.42904947072  delta_E= 3.98e-13  |g|= 4.43e-11  |ddm|= 6.91e-11
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -706.3551425339367  E_coul = 198.92609306321722
  HOMO = -0.236234998777726  LUMO = 114.039347650902
  mo_energy =
[-1.20174112e+02 -1.22471962e+01 -6.65281688e+00 -6.65281688e+00
 -6.65281688e+00 -1.16301488e+00 -2.36234999e-01 -2.36234999e-01
 -2.36234999e-01  1.14039348e+02  9.96131761e+02  7.26541763e+03
  3.94047131e+04]
E1 = -706.3551425339397  E_coul = 198.92609306321955
Extra cycle  E= -507.42904947072  delta_E= -5.68e-13  |g|= 5.15e-12  |ddm|= 1.02e-12
    CPU time for scf_cycle      1.37 sec, wall time      1.37 sec
exp = [1.81905014e+04 4.54762534e+03 6.86307858e+02 1.55550242e+02
 4.27428159e+01 4.75057842e+00 3.91622044e-01 8.59742304e+00
 4.90727561e-01]
grad_E = [-6.65160530e-06  1.25054662e-04 -6.31399423e-04  1.55056557e-03
 -2.40103134e-03 -1.69068121e-03 -1.04471679e-03 -5.50419198e-05
 -1.57533196e-05]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((9, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.5476253398322024e+03,6.8630785798847160e+02,1.5555024230205126e+02,4.2742815896802767e+01,4.7505784169783016e+00,3.9162204394177752e-01,8.5974230426361959e+00,4.9072756124177219e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "7s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:53:01 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  18190.501366         1
[INPUT] 0    0    [1    /1   ]  4547.62521478        1
[INPUT] 0    0    [1    /1   ]  686.308489388        1
[INPUT] 0    0    [1    /1   ]  155.548691736        1
[INPUT] 0    0    [1    /1   ]  42.7452169281        1
[INPUT] 0    0    [1    /1   ]  4.75226909819        1
[INPUT] 0    0    [1    /1   ]  0.392666760727       1
[INPUT] 1    0    [1    /1   ]  8.59747808456        1
[INPUT] 1    0    [1    /1   ]  0.490743314561       1

nuclear repulsion = 0
number of shells = 9
number of NR pGTOs = 13
number of NR cGTOs = 13
basis = {'Ar': [[0, [18190.501365980414, 1.0]], [0, [4547.625214777541, 1.0]], [0, [686.3084893878951, 1.0]], [0, [155.54869173648504, 1.0]], [0, [42.745216928145865, 1.0]], [0, [4.752269098190137, 1.0]], [0, [0.392666760727207, 1.0]], [1, [8.597478084555982, 1.0]], [1, [0.4907433145614165, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [18190.50136598]
bas 1, expnt(s) = [4547.62521478]
bas 2, expnt(s) = [686.30848939]
bas 3, expnt(s) = [155.54869174]
bas 4, expnt(s) = [42.74521693]
bas 5, expnt(s) = [4.7522691]
bas 6, expnt(s) = [0.39266676]
bas 7, expnt(s) = [8.59747808]
bas 8, expnt(s) = [0.49074331]
CPU time:         9.42
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  1  1  1  0 38 39  0]
 [ 0  1  1  1  0 40 41  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.81905014e+04 3.95729591e+03 4.54762521e+03 1.39911536e+03
 6.86308489e+02 3.38769694e+02 1.55548692e+02 1.11279405e+02
 4.27452169e+01 4.22357945e+01 4.75226910e+00 8.13187685e+00
 3.92666761e-01 1.25323677e+00 8.59747808e+00 4.29485236e+01
 4.90743315e-01 1.19826364e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319275678467505
cond(S) = 28.53852013305714
E1 = -688.9428722825315  E_coul = 184.9369774954809
init E= -504.005894787051
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.680644264340621  LUMO = 112.703152719818
  mo_energy =
[-1.21549197e+02 -1.32742563e+01 -7.61919437e+00 -7.61919437e+00
 -7.61919437e+00 -1.65103893e+00 -6.80644264e-01 -6.80644264e-01
 -6.80644264e-01  1.12703153e+02  9.94806380e+02  7.26425769e+03
  3.94036820e+04]
E1 = -706.4023929902027  E_coul = 198.9736175888017
cycle= 1 E= -507.428775401401  delta_E= -3.42  |g|= 0.298  |ddm|=  0.3
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.395645
diis-c [-0.15653466  1.        ]
  HOMO = -0.235471484887473  LUMO = 114.060580326833
  mo_energy =
[-1.20165185e+02 -1.22446928e+01 -6.64966056e+00 -6.64966056e+00
 -6.64966056e+00 -1.16244189e+00 -2.35471485e-01 -2.35471485e-01
 -2.35471485e-01  1.14060580e+02  9.96156887e+02  7.26544489e+03
  3.94047407e+04]
E1 = -706.3815841707825  E_coul = 198.9525323578304
cycle= 2 E= -507.429051812952  delta_E= -0.000276  |g|= 0.00371  |ddm|= 0.00903
    CPU time for cycle= 2      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.00391851
diis-c [-1.50402570e-05 -1.41946367e-03  1.00141946e+00]
  HOMO = -0.23557770801971  LUMO = 114.057781778983
  mo_energy =
[-1.20171221e+02 -1.22454310e+01 -6.65080253e+00 -6.65080253e+00
 -6.65080253e+00 -1.16248171e+00 -2.35577708e-01 -2.35577708e-01
 -2.35577708e-01  1.14057782e+02  9.96148177e+02  7.26543179e+03
  3.94047259e+04]
E1 = -706.3813444618168  E_coul = 198.95229259637313
cycle= 3 E= -507.429051865444  delta_E= -5.25e-08  |g|= 6.07e-05  |ddm|= 0.000109
    CPU time for cycle= 3      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=8.0877e-05
diis-c [-1.48981774e-10  3.82517965e-05 -2.10700762e-02  1.02103182e+00]
  HOMO = -0.235578735466943  LUMO = 114.057757805009
  mo_energy =
[-1.20171279e+02 -1.22454384e+01 -6.65081551e+00 -6.65081551e+00
 -6.65081551e+00 -1.16248200e+00 -2.35578735e-01 -2.35578735e-01
 -2.35578735e-01  1.14057758e+02  9.96148117e+02  7.26543172e+03
  3.94047258e+04]
E1 = -706.3813414390279  E_coul = 198.95228957357145
cycle= 4 E= -507.429051865456  delta_E= -1.28e-11  |g|= 1.74e-07  |ddm|= 1.5e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.3813414390279  E_coul = 198.95228957357145
  HOMO = -0.235578729655124  LUMO = 114.057757986362
  mo_energy =
[-1.20171278e+02 -1.22454384e+01 -6.65081545e+00 -6.65081545e+00
 -6.65081545e+00 -1.16248200e+00 -2.35578730e-01 -2.35578730e-01
 -2.35578730e-01  1.14057758e+02  9.96148118e+02  7.26543172e+03
  3.94047258e+04]
E1 = -706.3813414517077  E_coul = 198.95228958625108
Extra cycle  E= -507.429051865457  delta_E= -1.71e-13  |g|= 2.51e-09  |ddm|= 5.24e-09
    CPU time for scf_cycle      0.10 sec, wall time      0.10 sec
exp = [1.81905014e+04 4.54762521e+03 6.86308489e+02 1.55548692e+02
 4.27452169e+01 4.75226910e+00 3.92666761e-01 8.59747808e+00
 4.90743315e-01]
E = -507.42905186545664
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((9, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.5476253398322024e+03,6.8630785798847160e+02,1.5555024230205126e+02,4.2742815896802767e+01,4.7505784169783016e+00,3.9162204394177752e-01,8.5974230426361959e+00,4.9072756124177219e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "7s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:53:01 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  18190.501366         1
[INPUT] 0    0    [1    /1   ]  4547.62521478        1
[INPUT] 0    0    [1    /1   ]  686.308489388        1
[INPUT] 0    0    [1    /1   ]  155.548691736        1
[INPUT] 0    0    [1    /1   ]  42.7452169281        1
[INPUT] 0    0    [1    /1   ]  4.75226909819        1
[INPUT] 0    0    [1    /1   ]  0.392666760727       1
[INPUT] 1    0    [1    /1   ]  8.59747808456        1
[INPUT] 1    0    [1    /1   ]  0.490743314561       1

nuclear repulsion = 0
number of shells = 9
number of NR pGTOs = 13
number of NR cGTOs = 13
basis = {'Ar': [[0, [18190.501365980414, 1.0]], [0, [4547.625214777541, 1.0]], [0, [686.3084893878951, 1.0]], [0, [155.54869173648504, 1.0]], [0, [42.745216928145865, 1.0]], [0, [4.752269098190137, 1.0]], [0, [0.392666760727207, 1.0]], [1, [8.597478084555982, 1.0]], [1, [0.4907433145614165, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [18190.50136598]
bas 1, expnt(s) = [4547.62521478]
bas 2, expnt(s) = [686.30848939]
bas 3, expnt(s) = [155.54869174]
bas 4, expnt(s) = [42.74521693]
bas 5, expnt(s) = [4.7522691]
bas 6, expnt(s) = [0.39266676]
bas 7, expnt(s) = [8.59747808]
bas 8, expnt(s) = [0.49074331]
CPU time:         9.57
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  1  1  1  0 38 39  0]
 [ 0  1  1  1  0 40 41  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.81905014e+04 3.95729591e+03 4.54762521e+03 1.39911536e+03
 6.86308489e+02 3.38769694e+02 1.55548692e+02 1.11279405e+02
 4.27452169e+01 4.22357945e+01 4.75226910e+00 8.13187685e+00
 3.92666761e-01 1.25323677e+00 8.59747808e+00 4.29485236e+01
 4.90743315e-01 1.19826364e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319275678467505
cond(S) = 28.53852013305714
E1 = -688.9428722825315  E_coul = 184.9369774954809
init E= -504.005894787051
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.680644264340621  LUMO = 112.703152719818
  mo_energy =
[-1.21549197e+02 -1.32742563e+01 -7.61919437e+00 -7.61919437e+00
 -7.61919437e+00 -1.65103893e+00 -6.80644264e-01 -6.80644264e-01
 -6.80644264e-01  1.12703153e+02  9.94806380e+02  7.26425769e+03
  3.94036820e+04]
E1 = -706.4023929902027  E_coul = 198.9736175888017
cycle= 1 E= -507.428775401401  delta_E= -3.42  |g|= 0.298  |ddm|=  0.3
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.395645
diis-c [-0.15653466  1.        ]
  HOMO = -0.235471484887473  LUMO = 114.060580326833
  mo_energy =
[-1.20165185e+02 -1.22446928e+01 -6.64966056e+00 -6.64966056e+00
 -6.64966056e+00 -1.16244189e+00 -2.35471485e-01 -2.35471485e-01
 -2.35471485e-01  1.14060580e+02  9.96156887e+02  7.26544489e+03
  3.94047407e+04]
E1 = -706.3815841707825  E_coul = 198.9525323578304
cycle= 2 E= -507.429051812952  delta_E= -0.000276  |g|= 0.00371  |ddm|= 0.00903
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00391851
diis-c [-1.50402570e-05 -1.41946367e-03  1.00141946e+00]
  HOMO = -0.23557770801971  LUMO = 114.057781778983
  mo_energy =
[-1.20171221e+02 -1.22454310e+01 -6.65080253e+00 -6.65080253e+00
 -6.65080253e+00 -1.16248171e+00 -2.35577708e-01 -2.35577708e-01
 -2.35577708e-01  1.14057782e+02  9.96148177e+02  7.26543179e+03
  3.94047259e+04]
E1 = -706.3813444618168  E_coul = 198.95229259637313
cycle= 3 E= -507.429051865444  delta_E= -5.25e-08  |g|= 6.07e-05  |ddm|= 0.000109
    CPU time for cycle= 3      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=8.0877e-05
diis-c [-1.48981774e-10  3.82517965e-05 -2.10700762e-02  1.02103182e+00]
  HOMO = -0.235578735466943  LUMO = 114.057757805009
  mo_energy =
[-1.20171279e+02 -1.22454384e+01 -6.65081551e+00 -6.65081551e+00
 -6.65081551e+00 -1.16248200e+00 -2.35578735e-01 -2.35578735e-01
 -2.35578735e-01  1.14057758e+02  9.96148117e+02  7.26543172e+03
  3.94047258e+04]
E1 = -706.3813414390279  E_coul = 198.95228957357145
cycle= 4 E= -507.429051865456  delta_E= -1.28e-11  |g|= 1.74e-07  |ddm|= 1.5e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.3813414390279  E_coul = 198.95228957357145
  HOMO = -0.235578729655124  LUMO = 114.057757986362
  mo_energy =
[-1.20171278e+02 -1.22454384e+01 -6.65081545e+00 -6.65081545e+00
 -6.65081545e+00 -1.16248200e+00 -2.35578730e-01 -2.35578730e-01
 -2.35578730e-01  1.14057758e+02  9.96148118e+02  7.26543172e+03
  3.94047258e+04]
E1 = -706.3813414517077  E_coul = 198.95228958625108
Extra cycle  E= -507.429051865457  delta_E= -1.71e-13  |g|= 2.51e-09  |ddm|= 5.24e-09
    CPU time for scf_cycle      0.09 sec, wall time      0.10 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 28.53852013305714
E1 = -706.3813414517077  E_coul = 198.95228958625108
init E= -507.429051865457
    CPU time for initialize scf      0.06 sec, wall time      0.06 sec
  HOMO = -0.235578729598167  LUMO = 114.057757988105
  mo_energy =
[-1.20171278e+02 -1.22454384e+01 -6.65081545e+00 -6.65081545e+00
 -6.65081545e+00 -1.16248200e+00 -2.35578730e-01 -2.35578730e-01
 -2.35578730e-01  1.14057758e+02  9.96148118e+02  7.26543172e+03
  3.94047258e+04]
E1 = -706.3813414518639  E_coul = 198.95228958640746
cycle= 1 E= -507.429051865456  delta_E= 1.71e-13  |g|= 4.24e-11  |ddm|= 6.91e-11
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -706.3813414518639  E_coul = 198.95228958640746
  HOMO = -0.235578729597476  LUMO = 114.057757988123
  mo_energy =
[-1.20171278e+02 -1.22454384e+01 -6.65081545e+00 -6.65081545e+00
 -6.65081545e+00 -1.16248200e+00 -2.35578730e-01 -2.35578730e-01
 -2.35578730e-01  1.14057758e+02  9.96148118e+02  7.26543172e+03
  3.94047258e+04]
E1 = -706.3813414518664  E_coul = 198.95228958640985
Extra cycle  E= -507.429051865457  delta_E= -1.14e-13  |g|= 9.43e-12  |ddm|= 1.07e-12
    CPU time for scf_cycle      0.13 sec, wall time      0.13 sec
exp = [1.81905014e+04 4.54762521e+03 6.86308489e+02 1.55548692e+02
 4.27452169e+01 4.75226910e+00 3.92666761e-01 8.59747808e+00
 4.90743315e-01]
grad_E = [-6.65171048e-06  1.25042361e-04 -6.30492821e-04  1.53741320e-03
 -2.34981164e-03 -2.37447207e-04  1.58000369e-02  1.77718659e-04
  3.77818610e-03]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((9, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.5476253398322024e+03,6.8630785798847160e+02,1.5555024230205126e+02,4.2742815896802767e+01,4.7505784169783016e+00,3.9162204394177752e-01,8.5974230426361959e+00,4.9072756124177219e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "7s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:53:04 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  18190.5014244        1
[INPUT] 0    0    [1    /1   ]  4547.62411678        1
[INPUT] 0    0    [1    /1   ]  686.31403264         1
[INPUT] 0    0    [1    /1   ]  155.535085595        1
[INPUT] 0    0    [1    /1   ]  42.7662667864        1
[INPUT] 0    0    [1    /1   ]  4.76621488058        1
[INPUT] 0    0    [1    /1   ]  0.391422134962       1
[INPUT] 1    0    [1    /1   ]  8.59781741545        1
[INPUT] 1    0    [1    /1   ]  0.488535312859       1

nuclear repulsion = 0
number of shells = 9
number of NR pGTOs = 13
number of NR cGTOs = 13
basis = {'Ar': [[0, [18190.501424382903, 1.0]], [0, [4547.624116780255, 1.0]], [0, [686.314032640203, 1.0]], [0, [155.53508559520245, 1.0]], [0, [42.76626678641637, 1.0]], [0, [4.766214880584519, 1.0]], [0, [0.39142213496160083, 1.0]], [1, [8.59781741544834, 1.0]], [1, [0.48853531285887847, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [18190.50142438]
bas 1, expnt(s) = [4547.62411678]
bas 2, expnt(s) = [686.31403264]
bas 3, expnt(s) = [155.5350856]
bas 4, expnt(s) = [42.76626679]
bas 5, expnt(s) = [4.76621488]
bas 6, expnt(s) = [0.39142213]
bas 7, expnt(s) = [8.59781742]
bas 8, expnt(s) = [0.48853531]
CPU time:        12.35
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  1  1  1  0 38 39  0]
 [ 0  1  1  1  0 40 41  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.81905014e+04 3.95729592e+03 4.54762412e+03 1.39911510e+03
 6.86314033e+02 3.38771747e+02 1.55535086e+02 1.11272105e+02
 4.27662668e+01 4.22513928e+01 4.76621488e+00 8.14976785e+00
 3.91422135e-01 1.25025632e+00 8.59781742e+00 4.29506425e+01
 4.88535313e-01 1.19152825e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.322000884580525
cond(S) = 28.563493509351815
E1 = -688.8652659530624  E_coul = 184.86294992443814
init E= -504.002316028624
    CPU time for initialize scf      0.02 sec, wall time      0.03 sec
  HOMO = -0.683881975903189  LUMO = 112.797062793678
  mo_energy =
[-1.21554057e+02 -1.32808534e+01 -7.62344897e+00 -7.62344897e+00
 -7.62344897e+00 -1.65356127e+00 -6.83881976e-01 -6.83881976e-01
 -6.83881976e-01  1.12797063e+02  9.94889458e+02  7.26432522e+03
  3.94037393e+04]
E1 = -706.3006419756247  E_coul = 198.87195777034103
cycle= 1 E= -507.428684205284  delta_E= -3.43  |g|= 0.296  |ddm|= 0.297
    CPU time for cycle= 1      0.02 sec, wall time      0.03 sec
diis-norm(errvec)=0.395856
diis-c [-0.15670191  1.        ]
  HOMO = -0.240906001278377  LUMO = 114.153640745266
  mo_energy =
[-1.20169411e+02 -1.22530734e+01 -6.65550575e+00 -6.65550575e+00
 -6.65550575e+00 -1.16677825e+00 -2.40906001e-01 -2.40906001e-01
 -2.40906001e-01  1.14153641e+02  9.96241819e+02  7.26551540e+03
  3.94048015e+04]
E1 = -706.2800025985913  E_coul = 198.85104631489486
cycle= 2 E= -507.428956283696  delta_E= -0.000272  |g|= 0.00367  |ddm|= 0.00895
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00387072
diis-c [-1.46780875e-05 -1.39579403e-03  1.00139579e+00]
  HOMO = -0.241010616565065  LUMO = 114.1508644332
  mo_energy =
[-1.20175399e+02 -1.22538066e+01 -6.65663797e+00 -6.65663797e+00
 -6.65663797e+00 -1.16681775e+00 -2.41010617e-01 -2.41010617e-01
 -2.41010617e-01  1.14150864e+02  9.96233169e+02  7.26550238e+03
  3.94047867e+04]
E1 = -706.2797651420036  E_coul = 198.8508088068358
cycle= 3 E= -507.428956335168  delta_E= -5.15e-08  |g|= 6.02e-05  |ddm|= 0.000108
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=8.01005e-05
diis-c [-1.47175609e-10  3.85912178e-05 -2.11193911e-02  1.02108080e+00]
  HOMO = -0.241011628340016  LUMO = 114.150840612367
  mo_energy =
[-1.20175456e+02 -1.22538140e+01 -6.65665086e+00 -6.65665086e+00
 -6.65665086e+00 -1.16681805e+00 -2.41011628e-01 -2.41011628e-01
 -2.41011628e-01  1.14150841e+02  9.96233110e+02  7.26550231e+03
  3.94047866e+04]
E1 = -706.279762143859  E_coul = 198.85080580867867
cycle= 4 E= -507.42895633518  delta_E= -1.25e-11  |g|= 1.72e-07  |ddm|= 1.49e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.279762143859  E_coul = 198.85080580867867
  HOMO = -0.241011622623282  LUMO = 114.150840791885
  mo_energy =
[-1.20175456e+02 -1.22538140e+01 -6.65665080e+00 -6.65665080e+00
 -6.65665080e+00 -1.16681804e+00 -2.41011623e-01 -2.41011623e-01
 -2.41011623e-01  1.14150841e+02  9.96233110e+02  7.26550231e+03
  3.94047866e+04]
E1 = -706.2797621564201  E_coul = 198.85080582124013
Extra cycle  E= -507.42895633518  delta_E= 2.84e-13  |g|= 2.49e-09  |ddm|= 5.2e-09
    CPU time for scf_cycle      0.10 sec, wall time      0.12 sec
exp = [1.81905014e+04 4.54762412e+03 6.86314033e+02 1.55535086e+02
 4.27662668e+01 4.76621488e+00 3.91422135e-01 8.59781742e+00
 4.88535313e-01]
E = -507.42895633518003
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((9, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.5476253398322024e+03,6.8630785798847160e+02,1.5555024230205126e+02,4.2742815896802767e+01,4.7505784169783016e+00,3.9162204394177752e-01,8.5974230426361959e+00,4.9072756124177219e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "7s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:53:04 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  18190.5013813        1
[INPUT] 0    0    [1    /1   ]  4547.62492696        1
[INPUT] 0    0    [1    /1   ]  686.309942436        1
[INPUT] 0    0    [1    /1   ]  155.54512517         1
[INPUT] 0    0    [1    /1   ]  42.7507347105        1
[INPUT] 0    0    [1    /1   ]  4.7559246949         1
[INPUT] 0    0    [1    /1   ]  0.392340507978       1
[INPUT] 1    0    [1    /1   ]  8.59756703309        1
[INPUT] 1    0    [1    /1   ]  0.490164532853       1

nuclear repulsion = 0
number of shells = 9
number of NR pGTOs = 13
number of NR cGTOs = 13
basis = {'Ar': [[0, [18190.50138128941, 1.0]], [0, [4547.624926960397, 1.0]], [0, [686.3099424361586, 1.0]], [0, [155.54512516962737, 1.0]], [0, [42.75073471054329, 1.0]], [0, [4.755924694898925, 1.0]], [0, [0.39234050797754016, 1.0]], [1, [8.59756703308954, 1.0]], [1, [0.4901645328531885, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [18190.50138129]
bas 1, expnt(s) = [4547.62492696]
bas 2, expnt(s) = [686.30994244]
bas 3, expnt(s) = [155.54512517]
bas 4, expnt(s) = [42.75073471]
bas 5, expnt(s) = [4.75592469]
bas 6, expnt(s) = [0.39234051]
bas 7, expnt(s) = [8.59756703]
bas 8, expnt(s) = [0.49016453]
CPU time:        12.52
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  1  1  1  0 38 39  0]
 [ 0  1  1  1  0 40 41  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.81905014e+04 3.95729591e+03 4.54762493e+03 1.39911529e+03
 6.86309942e+02 3.38770232e+02 1.55545125e+02 1.11277492e+02
 4.27507347e+01 4.22398835e+01 4.75592469e+00 8.13656787e+00
 3.92340508e-01 1.25245574e+00 8.59756703e+00 4.29490791e+01
 4.90164533e-01 1.19649737e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.31999960728318
cond(S) = 28.54506088438843
E1 = -688.9228017758834  E_coul = 184.9177441043407
init E= -504.005057671543
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.681490298238647  LUMO = 112.727783988936
  mo_energy =
[-1.21550458e+02 -1.32759823e+01 -7.62029657e+00 -7.62029657e+00
 -7.62029657e+00 -1.65169486e+00 -6.81490298e-01 -6.81490298e-01
 -6.81490298e-01  1.12727784e+02  9.94828168e+02  7.26427540e+03
  3.94036971e+04]
E1 = -706.3758123658425  E_coul = 198.94702201850657
cycle= 1 E= -507.428790347336  delta_E= -3.42  |g|= 0.297  |ddm|= 0.299
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.395699
diis-c [-0.15657745  1.        ]
  HOMO = -0.236898311556089  LUMO = 114.084979784149
  mo_energy =
[-1.20166288e+02 -1.22468941e+01 -6.65118815e+00 -6.65118815e+00
 -6.65118815e+00 -1.16357862e+00 -2.36898312e-01 -2.36898312e-01
 -2.36898312e-01  1.14084980e+02  9.96179153e+02  7.26546337e+03
  3.94047566e+04]
E1 = -706.3550480293532  E_coul = 198.92598241224297
cycle= 2 E= -507.42906561711  delta_E= -0.000275  |g|= 0.0037  |ddm|= 0.00901
    CPU time for cycle= 2      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.00390596
diis-c [-1.49447627e-05 -1.41311842e-03  1.00141312e+00]
  HOMO = -0.237004111301054  LUMO = 114.08218707297
  mo_energy =
[-1.20172312e+02 -1.22476309e+01 -6.65232756e+00 -6.65232756e+00
 -6.65232756e+00 -1.16361835e+00 -2.37004111e-01 -2.37004111e-01
 -2.37004111e-01  1.14082187e+02  9.96170458e+02  7.26545029e+03
  3.94047418e+04]
E1 = -706.35480891163  E_coul = 198.92574324229682
cycle= 3 E= -507.429065669333  delta_E= -5.22e-08  |g|= 6.06e-05  |ddm|= 0.000109
    CPU time for cycle= 3      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=8.06739e-05
diis-c [-1.48504506e-10  3.83406463e-05 -2.10831372e-02  1.02104480e+00]
  HOMO = -0.237005134639959  LUMO = 114.082163138695
  mo_energy =
[-1.20172369e+02 -1.22476384e+01 -6.65234051e+00 -6.65234051e+00
 -6.65234051e+00 -1.16361864e+00 -2.37005135e-01 -2.37005135e-01
 -2.37005135e-01  1.14082163e+02  9.96170399e+02  7.26545023e+03
  3.94047417e+04]
E1 = -706.3548058952664  E_coul = 198.925740225921
cycle= 4 E= -507.429065669345  delta_E= -1.22e-11  |g|= 1.73e-07  |ddm|= 1.5e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.3548058952664  E_coul = 198.925740225921
  HOMO = -0.237005128853179  LUMO = 114.082163319565
  mo_energy =
[-1.20172369e+02 -1.22476383e+01 -6.65234045e+00 -6.65234045e+00
 -6.65234045e+00 -1.16361864e+00 -2.37005129e-01 -2.37005129e-01
 -2.37005129e-01  1.14082163e+02  9.96170400e+02  7.26545023e+03
  3.94047417e+04]
E1 = -706.3548059079155  E_coul = 198.92574023856972
Extra cycle  E= -507.429065669346  delta_E= -4.55e-13  |g|= 2.5e-09  |ddm|= 5.23e-09
    CPU time for scf_cycle      0.09 sec, wall time      0.10 sec
exp = [1.81905014e+04 4.54762493e+03 6.86309942e+02 1.55545125e+02
 4.27507347e+01 4.75592469e+00 3.92340508e-01 8.59756703e+00
 4.90164533e-01]
E = -507.42906566934585
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((9, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.5476253398322024e+03,6.8630785798847160e+02,1.5555024230205126e+02,4.2742815896802767e+01,4.7505784169783016e+00,3.9162204394177752e-01,8.5974230426361959e+00,4.9072756124177219e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "7s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:53:04 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  18190.5013813        1
[INPUT] 0    0    [1    /1   ]  4547.62492696        1
[INPUT] 0    0    [1    /1   ]  686.309942436        1
[INPUT] 0    0    [1    /1   ]  155.54512517         1
[INPUT] 0    0    [1    /1   ]  42.7507347105        1
[INPUT] 0    0    [1    /1   ]  4.7559246949         1
[INPUT] 0    0    [1    /1   ]  0.392340507978       1
[INPUT] 1    0    [1    /1   ]  8.59756703309        1
[INPUT] 1    0    [1    /1   ]  0.490164532853       1

nuclear repulsion = 0
number of shells = 9
number of NR pGTOs = 13
number of NR cGTOs = 13
basis = {'Ar': [[0, [18190.50138128941, 1.0]], [0, [4547.624926960397, 1.0]], [0, [686.3099424361586, 1.0]], [0, [155.54512516962737, 1.0]], [0, [42.75073471054329, 1.0]], [0, [4.755924694898925, 1.0]], [0, [0.39234050797754016, 1.0]], [1, [8.59756703308954, 1.0]], [1, [0.4901645328531885, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [18190.50138129]
bas 1, expnt(s) = [4547.62492696]
bas 2, expnt(s) = [686.30994244]
bas 3, expnt(s) = [155.54512517]
bas 4, expnt(s) = [42.75073471]
bas 5, expnt(s) = [4.75592469]
bas 6, expnt(s) = [0.39234051]
bas 7, expnt(s) = [8.59756703]
bas 8, expnt(s) = [0.49016453]
CPU time:        12.68
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  1  1  1  0 38 39  0]
 [ 0  1  1  1  0 40 41  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.81905014e+04 3.95729591e+03 4.54762493e+03 1.39911529e+03
 6.86309942e+02 3.38770232e+02 1.55545125e+02 1.11277492e+02
 4.27507347e+01 4.22398835e+01 4.75592469e+00 8.13656787e+00
 3.92340508e-01 1.25245574e+00 8.59756703e+00 4.29490791e+01
 4.90164533e-01 1.19649737e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.31999960728318
cond(S) = 28.54506088438843
E1 = -688.9228017758834  E_coul = 184.9177441043407
init E= -504.005057671543
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.681490298238647  LUMO = 112.727783988936
  mo_energy =
[-1.21550458e+02 -1.32759823e+01 -7.62029657e+00 -7.62029657e+00
 -7.62029657e+00 -1.65169486e+00 -6.81490298e-01 -6.81490298e-01
 -6.81490298e-01  1.12727784e+02  9.94828168e+02  7.26427540e+03
  3.94036971e+04]
E1 = -706.3758123658425  E_coul = 198.94702201850657
cycle= 1 E= -507.428790347336  delta_E= -3.42  |g|= 0.297  |ddm|= 0.299
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.395699
diis-c [-0.15657745  1.        ]
  HOMO = -0.236898311556089  LUMO = 114.084979784149
  mo_energy =
[-1.20166288e+02 -1.22468941e+01 -6.65118815e+00 -6.65118815e+00
 -6.65118815e+00 -1.16357862e+00 -2.36898312e-01 -2.36898312e-01
 -2.36898312e-01  1.14084980e+02  9.96179153e+02  7.26546337e+03
  3.94047566e+04]
E1 = -706.3550480293532  E_coul = 198.92598241224297
cycle= 2 E= -507.42906561711  delta_E= -0.000275  |g|= 0.0037  |ddm|= 0.00901
    CPU time for cycle= 2      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.00390596
diis-c [-1.49447627e-05 -1.41311842e-03  1.00141312e+00]
  HOMO = -0.237004111301054  LUMO = 114.08218707297
  mo_energy =
[-1.20172312e+02 -1.22476309e+01 -6.65232756e+00 -6.65232756e+00
 -6.65232756e+00 -1.16361835e+00 -2.37004111e-01 -2.37004111e-01
 -2.37004111e-01  1.14082187e+02  9.96170458e+02  7.26545029e+03
  3.94047418e+04]
E1 = -706.35480891163  E_coul = 198.92574324229682
cycle= 3 E= -507.429065669333  delta_E= -5.22e-08  |g|= 6.06e-05  |ddm|= 0.000109
    CPU time for cycle= 3      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=8.06739e-05
diis-c [-1.48504506e-10  3.83406463e-05 -2.10831372e-02  1.02104480e+00]
  HOMO = -0.237005134639959  LUMO = 114.082163138695
  mo_energy =
[-1.20172369e+02 -1.22476384e+01 -6.65234051e+00 -6.65234051e+00
 -6.65234051e+00 -1.16361864e+00 -2.37005135e-01 -2.37005135e-01
 -2.37005135e-01  1.14082163e+02  9.96170399e+02  7.26545023e+03
  3.94047417e+04]
E1 = -706.3548058952664  E_coul = 198.925740225921
cycle= 4 E= -507.429065669345  delta_E= -1.22e-11  |g|= 1.73e-07  |ddm|= 1.5e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.3548058952664  E_coul = 198.925740225921
  HOMO = -0.237005128853179  LUMO = 114.082163319565
  mo_energy =
[-1.20172369e+02 -1.22476383e+01 -6.65234045e+00 -6.65234045e+00
 -6.65234045e+00 -1.16361864e+00 -2.37005129e-01 -2.37005129e-01
 -2.37005129e-01  1.14082163e+02  9.96170400e+02  7.26545023e+03
  3.94047417e+04]
E1 = -706.3548059079155  E_coul = 198.92574023856972
Extra cycle  E= -507.429065669346  delta_E= -4.55e-13  |g|= 2.5e-09  |ddm|= 5.23e-09
    CPU time for scf_cycle      0.09 sec, wall time      0.10 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 28.54506088438843
E1 = -706.3548059079155  E_coul = 198.92574023856972
init E= -507.429065669346
    CPU time for initialize scf      0.06 sec, wall time      0.06 sec
  HOMO = -0.237005128796474  LUMO = 114.082163321305
  mo_energy =
[-1.20172369e+02 -1.22476383e+01 -6.65234045e+00 -6.65234045e+00
 -6.65234045e+00 -1.16361864e+00 -2.37005129e-01 -2.37005129e-01
 -2.37005129e-01  1.14082163e+02  9.96170400e+02  7.26545023e+03
  3.94047417e+04]
E1 = -706.3548059080716  E_coul = 198.9257402387259
cycle= 1 E= -507.429065669346  delta_E= 1.14e-13  |g|= 4.18e-11  |ddm|= 6.9e-11
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -706.3548059080716  E_coul = 198.9257402387259
  HOMO = -0.237005128795786  LUMO = 114.082163321324
  mo_energy =
[-1.20172369e+02 -1.22476383e+01 -6.65234045e+00 -6.65234045e+00
 -6.65234045e+00 -1.16361864e+00 -2.37005129e-01 -2.37005129e-01
 -2.37005129e-01  1.14082163e+02  9.96170400e+02  7.26545023e+03
  3.94047417e+04]
E1 = -706.3548059080737  E_coul = 198.92574023872817
Extra cycle  E= -507.429065669346  delta_E= 2.27e-13  |g|= 2.42e-12  |ddm|= 1.04e-12
    CPU time for scf_cycle      0.13 sec, wall time      0.13 sec
exp = [1.81905014e+04 4.54762493e+03 6.86309942e+02 1.55545125e+02
 4.27507347e+01 4.75592469e+00 3.92340508e-01 8.59756703e+00
 4.90164533e-01]
grad_E = [-6.65167459e-06  1.25006648e-04 -6.28220118e-04  1.50418244e-03
 -2.21019383e-03  2.92027527e-03  8.66615790e-03  1.02369646e-03
 -1.82443622e-02]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((9, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.5476253398322024e+03,6.8630785798847160e+02,1.5555024230205126e+02,4.2742815896802767e+01,4.7505784169783016e+00,3.9162204394177752e-01,8.5974230426361959e+00,4.9072756124177219e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "7s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:53:07 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  18190.5016097        1
[INPUT] 0    0    [1    /1   ]  4547.62063313        1
[INPUT] 0    0    [1    /1   ]  686.33161721         1
[INPUT] 0    0    [1    /1   ]  155.491958638        1
[INPUT] 0    0    [1    /1   ]  42.8328786238        1
[INPUT] 0    0    [1    /1   ]  4.80631440388        1
[INPUT] 0    0    [1    /1   ]  0.383154211086       1
[INPUT] 1    0    [1    /1   ]  8.59788944076        1
[INPUT] 1    0    [1    /1   ]  0.500980621169       1

nuclear repulsion = 0
number of shells = 9
number of NR pGTOs = 13
number of NR cGTOs = 13
basis = {'Ar': [[0, [18190.50160968055, 1.0]], [0, [4547.620633132409, 1.0]], [0, [686.3316172100932, 1.0]], [0, [155.49195863758607, 1.0]], [0, [42.83287862379198, 1.0]], [0, [4.806314403884323, 1.0]], [0, [0.38315421108632985, 1.0]], [1, [8.597889440759113, 1.0]], [1, [0.5009806211690097, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [18190.50160968]
bas 1, expnt(s) = [4547.62063313]
bas 2, expnt(s) = [686.33161721]
bas 3, expnt(s) = [155.49195864]
bas 4, expnt(s) = [42.83287862]
bas 5, expnt(s) = [4.8063144]
bas 6, expnt(s) = [0.38315421]
bas 7, expnt(s) = [8.59788944]
bas 8, expnt(s) = [0.50098062]
CPU time:        15.55
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  1  1  1  0 38 39  0]
 [ 0  1  1  1  0 40 41  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.81905016e+04 3.95729595e+03 4.54762063e+03 1.39911430e+03
 6.86331617e+02 3.38778257e+02 1.55491959e+02 1.11248964e+02
 4.28328786e+01 4.23007406e+01 4.80631440e+00 8.20113870e+00
 3.83154211e-01 1.23039690e+00 8.59788944e+00 4.29510923e+01
 5.00980621e-01 1.22959065e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.30526506450043
cond(S) = 28.63220884529791
E1 = -689.2182271930171  E_coul = 185.18010470512573
init E= -504.038122487891
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.6727635375793  LUMO = 113.107683382231
  mo_energy =
[-1.21522526e+02 -1.32538500e+01 -7.60554875e+00 -7.60554875e+00
 -7.60554875e+00 -1.64365659e+00 -6.72763538e-01 -6.72763538e-01
 -6.72763538e-01  1.13107683e+02  9.95174920e+02  7.26456692e+03
  3.94039514e+04]
E1 = -706.893033407451  E_coul = 199.46772686208712
cycle= 1 E= -507.425306545364  delta_E= -3.39  |g|= 0.293  |ddm|= 0.305
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.397072
diis-c [-0.15766633  1.        ]
  HOMO = -0.215905666700418  LUMO = 114.48663134244
  mo_energy =
[-1.20111409e+02 -1.22082931e+01 -6.62080150e+00 -6.62080150e+00
 -6.62080150e+00 -1.14909727e+00 -2.15905667e-01 -2.15905667e-01
 -2.15905667e-01  1.14486631e+02  9.96557140e+02  7.26578992e+03
  3.94050476e+04]
E1 = -706.8727156033534  E_coul = 199.4471442315056
cycle= 2 E= -507.425571371848  delta_E= -0.000265  |g|= 0.0036  |ddm|= 0.00882
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00375991
diis-c [-1.38555899e-05 -1.33765376e-03  1.00133765e+00]
  HOMO = -0.216013605051144  LUMO = 114.483898583641
  mo_energy =
[-1.20117302e+02 -1.22090187e+01 -6.62190984e+00 -6.62190984e+00
 -6.62190984e+00 -1.14913591e+00 -2.16013605e-01 -2.16013605e-01
 -2.16013605e-01  1.14483899e+02  9.96548605e+02  7.26577702e+03
  3.94050330e+04]
E1 = -706.872482908174  E_coul = 199.44691148703293
cycle= 3 E= -507.425571421141  delta_E= -4.93e-08  |g|= 5.91e-05  |ddm|= 0.000106
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=7.83229e-05
diis-c [-1.44842329e-10  3.95116181e-05 -2.12387066e-02  1.02119920e+00]
  HOMO = -0.216014650207955  LUMO = 114.483875074828
  mo_energy =
[-1.20117359e+02 -1.22090260e+01 -6.62192245e+00 -6.62192245e+00
 -6.62192245e+00 -1.14913619e+00 -2.16014650e-01 -2.16014650e-01
 -2.16014650e-01  1.14483875e+02  9.96548546e+02  7.26577695e+03
  3.94050329e+04]
E1 = -706.8724799636007  E_coul = 199.44690854244735
cycle= 4 E= -507.425571421153  delta_E= -1.23e-11  |g|= 1.68e-07  |ddm|= 1.46e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.8724799636007  E_coul = 199.44690854244735
  HOMO = -0.216014644347113  LUMO = 114.483875250178
  mo_energy =
[-1.20117358e+02 -1.22090259e+01 -6.62192239e+00 -6.62192239e+00
 -6.62192239e+00 -1.14913619e+00 -2.16014644e-01 -2.16014644e-01
 -2.16014644e-01  1.14483875e+02  9.96548547e+02  7.26577695e+03
  3.94050329e+04]
E1 = -706.8724799758879  E_coul = 199.44690855473476
Extra cycle  E= -507.425571421153  delta_E= 1.71e-13  |g|= 2.44e-09  |ddm|= 5.09e-09
    CPU time for scf_cycle      0.10 sec, wall time      0.10 sec
exp = [1.81905016e+04 4.54762063e+03 6.86331617e+02 1.55491959e+02
 4.28328786e+01 4.80631440e+00 3.83154211e-01 8.59788944e+00
 5.00980621e-01]
E = -507.42557142115317
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((9, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.5476253398322024e+03,6.8630785798847160e+02,1.5555024230205126e+02,4.2742815896802767e+01,4.7505784169783016e+00,3.9162204394177752e-01,8.5974230426361959e+00,4.9072756124177219e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "7s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:53:07 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  18190.5014041        1
[INPUT] 0    0    [1    /1   ]  4547.62449758        1
[INPUT] 0    0    [1    /1   ]  686.312109914        1
[INPUT] 0    0    [1    /1   ]  155.539808516        1
[INPUT] 0    0    [1    /1   ]  42.7589491019        1
[INPUT] 0    0    [1    /1   ]  4.7609636658         1
[INPUT] 0    0    [1    /1   ]  0.391421878288       1
[INPUT] 1    0    [1    /1   ]  8.59759927386        1
[INPUT] 1    0    [1    /1   ]  0.491246141685       1

nuclear repulsion = 0
number of shells = 9
number of NR pGTOs = 13
number of NR cGTOs = 13
basis = {'Ar': [[0, [18190.501404128525, 1.0]], [0, [4547.624497577598, 1.0]], [0, [686.312109913552, 1.0]], [0, [155.53980851642325, 1.0]], [0, [42.75894910186816, 1.0]], [0, [4.760963665797465, 1.0]], [0, [0.3914218782884191, 1.0]], [1, [8.597599273856497, 1.0]], [1, [0.4912461416847706, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [18190.50140413]
bas 1, expnt(s) = [4547.62449758]
bas 2, expnt(s) = [686.31210991]
bas 3, expnt(s) = [155.53980852]
bas 4, expnt(s) = [42.7589491]
bas 5, expnt(s) = [4.76096367]
bas 6, expnt(s) = [0.39142188]
bas 7, expnt(s) = [8.59759927]
bas 8, expnt(s) = [0.49124614]
CPU time:        15.73
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  1  1  1  0 38 39  0]
 [ 0  1  1  1  0 40 41  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.81905014e+04 3.95729592e+03 4.54762450e+03 1.39911519e+03
 6.86312110e+02 3.38771035e+02 1.55539809e+02 1.11274639e+02
 4.27589491e+01 4.22459705e+01 4.76096367e+00 8.14303262e+00
 3.91421878e-01 1.25025571e+00 8.59759927e+00 4.29492804e+01
 4.91246142e-01 1.19979855e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.318643221903656
cond(S) = 28.553737023764754
E1 = -688.9552324452943  E_coul = 184.94604965544863
init E= -504.009182789846
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.680574659913786  LUMO = 112.765929132652
  mo_energy =
[-1.21547514e+02 -1.32736829e+01 -7.61866677e+00 -7.61866677e+00
 -7.61866677e+00 -1.65083258e+00 -6.80574660e-01 -6.80574660e-01
 -6.80574660e-01  1.12765929e+02  9.94862979e+02  7.26430469e+03
  3.94037226e+04]
E1 = -706.4285284034431  E_coul = 198.99973555227612
cycle= 1 E= -507.428792851167  delta_E= -3.42  |g|= 0.297  |ddm|=  0.3
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.395828
diis-c [-0.15667981  1.        ]
  HOMO = -0.23481966407649  LUMO = 114.125193615323
  mo_energy =
[-1.20160753e+02 -1.22430453e+01 -6.64809373e+00 -6.64809373e+00
 -6.64809373e+00 -1.16212572e+00 -2.34819664e-01 -2.34819664e-01
 -2.34819664e-01  1.14125194e+02  9.96216983e+02  7.26549606e+03
  3.94047857e+04]
E1 = -706.4078090762978  E_coul = 198.97874202851148
cycle= 2 E= -507.429067047786  delta_E= -0.000274  |g|= 0.00369  |ddm|= 0.00899
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.0038912
diis-c [-1.48331068e-05 -1.40481225e-03  1.00140481e+00]
  HOMO = -0.234925681390309  LUMO = 114.122406945064
  mo_energy =
[-1.20166764e+02 -1.22437810e+01 -6.64923000e+00 -6.64923000e+00
 -6.64923000e+00 -1.16216534e+00 -2.34925681e-01 -2.34925681e-01
 -2.34925681e-01  1.14122407e+02  9.96208305e+02  7.26548300e+03
  3.94047710e+04]
E1 = -706.4075706053071  E_coul = 198.9785035055967
cycle= 3 E= -507.42906709971  delta_E= -5.19e-08  |g|= 6.04e-05  |ddm|= 0.000108
    CPU time for cycle= 3      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=8.04407e-05
diis-c [-1.48120981e-10  3.84573009e-05 -2.10995039e-02  1.02106105e+00]
  HOMO = -0.234926707044997  LUMO = 114.122383051137
  mo_energy =
[-1.20166821e+02 -1.22437884e+01 -6.64924292e+00 -6.64924292e+00
 -6.64924292e+00 -1.16216563e+00 -2.34926707e-01 -2.34926707e-01
 -2.34926707e-01  1.14122383e+02  9.96208246e+02  7.26548293e+03
  3.94047709e+04]
E1 = -706.407567595957  E_coul = 198.97850049623412
cycle= 4 E= -507.429067099723  delta_E= -1.24e-11  |g|= 1.73e-07  |ddm|= 1.49e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.407567595957  E_coul = 198.97850049623412
  HOMO = -0.234926701250331  LUMO = 114.122383231455
  mo_energy =
[-1.20166821e+02 -1.22437884e+01 -6.64924286e+00 -6.64924286e+00
 -6.64924286e+00 -1.16216563e+00 -2.34926701e-01 -2.34926701e-01
 -2.34926701e-01  1.14122383e+02  9.96208246e+02  7.26548293e+03
  3.94047709e+04]
E1 = -706.4075676085694  E_coul = 198.97850050884676
Extra cycle  E= -507.429067099723  delta_E= 2.27e-13  |g|= 2.5e-09  |ddm|= 5.22e-09
    CPU time for scf_cycle      0.09 sec, wall time      0.10 sec
exp = [1.81905014e+04 4.54762450e+03 6.86312110e+02 1.55539809e+02
 4.27589491e+01 4.76096367e+00 3.91421878e-01 8.59759927e+00
 4.91246142e-01]
E = -507.4290670997226
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((9, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.5476253398322024e+03,6.8630785798847160e+02,1.5555024230205126e+02,4.2742815896802767e+01,4.7505784169783016e+00,3.9162204394177752e-01,8.5974230426361959e+00,4.9072756124177219e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "7s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:53:07 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  18190.5013931        1
[INPUT] 0    0    [1    /1   ]  4547.62470441        1
[INPUT] 0    0    [1    /1   ]  686.311065837        1
[INPUT] 0    0    [1    /1   ]  155.542369554        1
[INPUT] 0    0    [1    /1   ]  42.7549922201        1
[INPUT] 0    0    [1    /1   ]  4.75853638773        1
[INPUT] 0    0    [1    /1   ]  0.391864383264       1
[INPUT] 1    0    [1    /1   ]  8.59758374344        1
[INPUT] 1    0    [1    /1   ]  0.490725129469       1

nuclear repulsion = 0
number of shells = 9
number of NR pGTOs = 13
number of NR cGTOs = 13
basis = {'Ar': [[0, [18190.501393126895, 1.0]], [0, [4547.624704411785, 1.0]], [0, [686.3110658372038, 1.0]], [0, [155.5423695543742, 1.0]], [0, [42.75499222013838, 1.0]], [0, [4.7585363877318345, 1.0]], [0, [0.3918643832640852, 1.0]], [1, [8.597583743442048, 1.0]], [1, [0.49072512946911123, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [18190.50139313]
bas 1, expnt(s) = [4547.62470441]
bas 2, expnt(s) = [686.31106584]
bas 3, expnt(s) = [155.54236955]
bas 4, expnt(s) = [42.75499222]
bas 5, expnt(s) = [4.75853639]
bas 6, expnt(s) = [0.39186438]
bas 7, expnt(s) = [8.59758374]
bas 8, expnt(s) = [0.49072513]
CPU time:        15.91
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  1  1  1  0 38 39  0]
 [ 0  1  1  1  0 40 41  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.81905014e+04 3.95729591e+03 4.54762470e+03 1.39911524e+03
 6.86311066e+02 3.38770648e+02 1.55542370e+02 1.11276013e+02
 4.27549922e+01 4.22430384e+01 4.75853639e+00 8.13991876e+00
 3.91864383e-01 1.25131563e+00 8.59758374e+00 4.29491834e+01
 4.90725129e-01 1.19820814e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319299882901046
cond(S) = 28.549556646383376
E1 = -688.9396910503023  E_coul = 184.932472578243
init E= -504.007218472059
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.681014538838705  LUMO = 112.747558901722
  mo_energy =
[-1.21548928e+02 -1.32747881e+01 -7.61944752e+00 -7.61944752e+00
 -7.61944752e+00 -1.65124627e+00 -6.81014539e-01 -6.81014539e-01
 -6.81014539e-01  1.12747559e+02  9.94846214e+02  7.26429058e+03
  3.94037103e+04]
E1 = -706.4031626722764  E_coul = 198.97436126984323
cycle= 1 E= -507.428801402433  delta_E= -3.42  |g|= 0.297  |ddm|= 0.299
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.395765
diis-c [-0.15663032  1.        ]
  HOMO = -0.235821534117219  LUMO = 114.105823923054
  mo_energy =
[-1.20163418e+02 -1.22448995e+01 -6.64958276e+00 -6.64958276e+00
 -6.64958276e+00 -1.16282543e+00 -2.35821534e-01 -2.35821534e-01
 -2.35821534e-01  1.14105824e+02  9.96198761e+02  7.26548031e+03
  3.94047717e+04]
E1 = -706.3824216740796  E_coul = 198.9533455588941
cycle= 2 E= -507.429076115186  delta_E= -0.000275  |g|= 0.00369  |ddm|= 0.009
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.0038983
diis-c [-1.48868153e-05 -1.40879201e-03  1.00140879e+00]
  HOMO = -0.235927446728964  LUMO = 114.103034344155
  mo_energy =
[-1.20169435e+02 -1.22456358e+01 -6.65072054e+00 -6.65072054e+00
 -6.65072054e+00 -1.16286511e+00 -2.35927447e-01 -2.35927447e-01
 -2.35927447e-01  1.14103034e+02  9.96190075e+02  7.26546725e+03
  3.94047569e+04]
E1 = -706.3821828916823  E_coul = 198.95310672442886
cycle= 3 E= -507.429076167253  delta_E= -5.21e-08  |g|= 6.05e-05  |ddm|= 0.000109
    CPU time for cycle= 3      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=8.05531e-05
diis-c [-1.48305206e-10  3.84010887e-05 -2.10916424e-02  1.02105324e+00]
  HOMO = -0.235928471271809  LUMO = 114.103010430729
  mo_energy =
[-1.20169492e+02 -1.22456432e+01 -6.65073348e+00 -6.65073348e+00
 -6.65073348e+00 -1.16286540e+00 -2.35928471e-01 -2.35928471e-01
 -2.35928471e-01  1.14103010e+02  9.96190016e+02  7.26546718e+03
  3.94047568e+04]
E1 = -706.3821798789494  E_coul = 198.9531037116833
cycle= 4 E= -507.429076167266  delta_E= -1.26e-11  |g|= 1.73e-07  |ddm|= 1.49e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.3821798789494  E_coul = 198.9531037116833
  HOMO = -0.235928465480925  LUMO = 114.103010611314
  mo_energy =
[-1.20169492e+02 -1.22456432e+01 -6.65073342e+00 -6.65073342e+00
 -6.65073342e+00 -1.16286540e+00 -2.35928465e-01 -2.35928465e-01
 -2.35928465e-01  1.14103011e+02  9.96190016e+02  7.26546718e+03
  3.94047568e+04]
E1 = -706.3821798915787  E_coul = 198.95310372431297
Extra cycle  E= -507.429076167266  delta_E= 3.41e-13  |g|= 2.5e-09  |ddm|= 5.22e-09
    CPU time for scf_cycle      0.09 sec, wall time      0.10 sec
exp = [1.81905014e+04 4.54762470e+03 6.86311066e+02 1.55542370e+02
 4.27549922e+01 4.75853639e+00 3.91864383e-01 8.59758374e+00
 4.90725129e-01]
E = -507.42907616726575
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((9, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.5476253398322024e+03,6.8630785798847160e+02,1.5555024230205126e+02,4.2742815896802767e+01,4.7505784169783016e+00,3.9162204394177752e-01,8.5974230426361959e+00,4.9072756124177219e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "7s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:53:08 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  18190.5013931        1
[INPUT] 0    0    [1    /1   ]  4547.62470441        1
[INPUT] 0    0    [1    /1   ]  686.311065837        1
[INPUT] 0    0    [1    /1   ]  155.542369554        1
[INPUT] 0    0    [1    /1   ]  42.7549922201        1
[INPUT] 0    0    [1    /1   ]  4.75853638773        1
[INPUT] 0    0    [1    /1   ]  0.391864383264       1
[INPUT] 1    0    [1    /1   ]  8.59758374344        1
[INPUT] 1    0    [1    /1   ]  0.490725129469       1

nuclear repulsion = 0
number of shells = 9
number of NR pGTOs = 13
number of NR cGTOs = 13
basis = {'Ar': [[0, [18190.501393126895, 1.0]], [0, [4547.624704411785, 1.0]], [0, [686.3110658372038, 1.0]], [0, [155.5423695543742, 1.0]], [0, [42.75499222013838, 1.0]], [0, [4.7585363877318345, 1.0]], [0, [0.3918643832640852, 1.0]], [1, [8.597583743442048, 1.0]], [1, [0.49072512946911123, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [18190.50139313]
bas 1, expnt(s) = [4547.62470441]
bas 2, expnt(s) = [686.31106584]
bas 3, expnt(s) = [155.54236955]
bas 4, expnt(s) = [42.75499222]
bas 5, expnt(s) = [4.75853639]
bas 6, expnt(s) = [0.39186438]
bas 7, expnt(s) = [8.59758374]
bas 8, expnt(s) = [0.49072513]
CPU time:        16.09
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  1  1  1  0 38 39  0]
 [ 0  1  1  1  0 40 41  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.81905014e+04 3.95729591e+03 4.54762470e+03 1.39911524e+03
 6.86311066e+02 3.38770648e+02 1.55542370e+02 1.11276013e+02
 4.27549922e+01 4.22430384e+01 4.75853639e+00 8.13991876e+00
 3.91864383e-01 1.25131563e+00 8.59758374e+00 4.29491834e+01
 4.90725129e-01 1.19820814e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319299882901046
cond(S) = 28.549556646383376
E1 = -688.9396910503023  E_coul = 184.932472578243
init E= -504.007218472059
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.681014538838705  LUMO = 112.747558901722
  mo_energy =
[-1.21548928e+02 -1.32747881e+01 -7.61944752e+00 -7.61944752e+00
 -7.61944752e+00 -1.65124627e+00 -6.81014539e-01 -6.81014539e-01
 -6.81014539e-01  1.12747559e+02  9.94846214e+02  7.26429058e+03
  3.94037103e+04]
E1 = -706.4031626722764  E_coul = 198.97436126984323
cycle= 1 E= -507.428801402433  delta_E= -3.42  |g|= 0.297  |ddm|= 0.299
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.395765
diis-c [-0.15663032  1.        ]
  HOMO = -0.235821534117219  LUMO = 114.105823923054
  mo_energy =
[-1.20163418e+02 -1.22448995e+01 -6.64958276e+00 -6.64958276e+00
 -6.64958276e+00 -1.16282543e+00 -2.35821534e-01 -2.35821534e-01
 -2.35821534e-01  1.14105824e+02  9.96198761e+02  7.26548031e+03
  3.94047717e+04]
E1 = -706.3824216740796  E_coul = 198.9533455588941
cycle= 2 E= -507.429076115186  delta_E= -0.000275  |g|= 0.00369  |ddm|= 0.009
    CPU time for cycle= 2      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.0038983
diis-c [-1.48868153e-05 -1.40879201e-03  1.00140879e+00]
  HOMO = -0.235927446728964  LUMO = 114.103034344155
  mo_energy =
[-1.20169435e+02 -1.22456358e+01 -6.65072054e+00 -6.65072054e+00
 -6.65072054e+00 -1.16286511e+00 -2.35927447e-01 -2.35927447e-01
 -2.35927447e-01  1.14103034e+02  9.96190075e+02  7.26546725e+03
  3.94047569e+04]
E1 = -706.3821828916823  E_coul = 198.95310672442886
cycle= 3 E= -507.429076167253  delta_E= -5.21e-08  |g|= 6.05e-05  |ddm|= 0.000109
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=8.05531e-05
diis-c [-1.48305206e-10  3.84010887e-05 -2.10916424e-02  1.02105324e+00]
  HOMO = -0.235928471271809  LUMO = 114.103010430729
  mo_energy =
[-1.20169492e+02 -1.22456432e+01 -6.65073348e+00 -6.65073348e+00
 -6.65073348e+00 -1.16286540e+00 -2.35928471e-01 -2.35928471e-01
 -2.35928471e-01  1.14103010e+02  9.96190016e+02  7.26546718e+03
  3.94047568e+04]
E1 = -706.3821798789494  E_coul = 198.9531037116833
cycle= 4 E= -507.429076167266  delta_E= -1.26e-11  |g|= 1.73e-07  |ddm|= 1.49e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.3821798789494  E_coul = 198.9531037116833
  HOMO = -0.235928465480925  LUMO = 114.103010611314
  mo_energy =
[-1.20169492e+02 -1.22456432e+01 -6.65073342e+00 -6.65073342e+00
 -6.65073342e+00 -1.16286540e+00 -2.35928465e-01 -2.35928465e-01
 -2.35928465e-01  1.14103011e+02  9.96190016e+02  7.26546718e+03
  3.94047568e+04]
E1 = -706.3821798915787  E_coul = 198.95310372431297
Extra cycle  E= -507.429076167266  delta_E= 3.41e-13  |g|= 2.5e-09  |ddm|= 5.22e-09
    CPU time for scf_cycle      0.09 sec, wall time      0.10 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 28.549556646383376
E1 = -706.3821798915787  E_coul = 198.95310372431297
init E= -507.429076167266
    CPU time for initialize scf      0.06 sec, wall time      0.06 sec
  HOMO = -0.235928465424186  LUMO = 114.103010613049
  mo_energy =
[-1.20169492e+02 -1.22456432e+01 -6.65073342e+00 -6.65073342e+00
 -6.65073342e+00 -1.16286540e+00 -2.35928465e-01 -2.35928465e-01
 -2.35928465e-01  1.14103011e+02  9.96190016e+02  7.26546718e+03
  3.94047568e+04]
E1 = -706.3821798917348  E_coul = 198.95310372446912
cycle= 1 E= -507.429076167266  delta_E=    0  |g|= 4.25e-11  |ddm|= 6.89e-11
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -706.3821798917348  E_coul = 198.95310372446912
  HOMO = -0.235928465423497  LUMO = 114.103010613069
  mo_energy =
[-1.20169492e+02 -1.22456432e+01 -6.65073342e+00 -6.65073342e+00
 -6.65073342e+00 -1.16286540e+00 -2.35928465e-01 -2.35928465e-01
 -2.35928465e-01  1.14103011e+02  9.96190016e+02  7.26546718e+03
  3.94047568e+04]
E1 = -706.3821798917367  E_coul = 198.9531037244711
Extra cycle  E= -507.429076167266  delta_E= 2.27e-13  |g|= 5.42e-12  |ddm|= 1.03e-12
    CPU time for scf_cycle      0.13 sec, wall time      0.13 sec
exp = [1.81905014e+04 4.54762470e+03 6.86311066e+02 1.55542370e+02
 4.27549922e+01 4.75853639e+00 3.91864383e-01 8.59758374e+00
 4.90725129e-01]
grad_E = [-6.65160358e-06  1.24978056e-04 -6.26443297e-04  1.47828308e-03
 -2.10033439e-03  5.33624836e-03  2.40924672e-03  6.25408028e-04
  1.69216953e-03]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((9, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.5476253398322024e+03,6.8630785798847160e+02,1.5555024230205126e+02,4.2742815896802767e+01,4.7505784169783016e+00,3.9162204394177752e-01,8.5974230426361959e+00,4.9072756124177219e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "7s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:53:10 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  18190.5014176        1
[INPUT] 0    0    [1    /1   ]  4547.6242437         1
[INPUT] 0    0    [1    /1   ]  686.313387126        1
[INPUT] 0    0    [1    /1   ]  155.53673243         1
[INPUT] 0    0    [1    /1   ]  42.7635222902        1
[INPUT] 0    0    [1    /1   ]  4.75734670963        1
[INPUT] 0    0    [1    /1   ]  0.391537677346       1
[INPUT] 1    0    [1    /1   ]  8.59701343365        1
[INPUT] 1    0    [1    /1   ]  0.490700775478       1

nuclear repulsion = 0
number of shells = 9
number of NR pGTOs = 13
number of NR cGTOs = 13
basis = {'Ar': [[0, [18190.501417636053, 1.0]], [0, [4547.624243703863, 1.0]], [0, [686.3133871258599, 1.0]], [0, [155.53673242965522, 1.0]], [0, [42.76352229024808, 1.0]], [0, [4.757346709626333, 1.0]], [0, [0.39153767734604594, 1.0]], [1, [8.597013433653668, 1.0]], [1, [0.4907007754777984, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [18190.50141764]
bas 1, expnt(s) = [4547.6242437]
bas 2, expnt(s) = [686.31338713]
bas 3, expnt(s) = [155.53673243]
bas 4, expnt(s) = [42.76352229]
bas 5, expnt(s) = [4.75734671]
bas 6, expnt(s) = [0.39153768]
bas 7, expnt(s) = [8.59701343]
bas 8, expnt(s) = [0.49070078]
CPU time:        18.95
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  1  1  1  0 38 39  0]
 [ 0  1  1  1  0 40 41  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.81905014e+04 3.95729592e+03 4.54762424e+03 1.39911513e+03
 6.86313387e+02 3.38771508e+02 1.55536732e+02 1.11272989e+02
 4.27635223e+01 4.22493592e+01 4.75734671e+00 8.13839242e+00
 3.91537677e-01 1.25053311e+00 8.59701343e+00 4.29456222e+01
 4.90700775e-01 1.19813381e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319390092371137
cond(S) = 28.552772676526182
E1 = -688.9286655851673  E_coul = 184.92261619326968
init E= -504.006049391898
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.681193916160856  LUMO = 112.757118306222
  mo_energy =
[-1.21550110e+02 -1.32756061e+01 -7.62022593e+00 -7.62022593e+00
 -7.62022593e+00 -1.65126519e+00 -6.81193916e-01 -6.81193916e-01
 -6.81193916e-01  1.12757118e+02  9.94857683e+02  7.26430072e+03
  3.94037189e+04]
E1 = -706.3901237409989  E_coul = 198.96128978710934
cycle= 1 E= -507.42883395389  delta_E= -3.42  |g|= 0.297  |ddm|=  0.3
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.395791
diis-c [-0.15665073  1.        ]
  HOMO = -0.236083403128173  LUMO = 114.115133634813
  mo_energy =
[-1.20165006e+02 -1.22459019e+01 -6.65056691e+00 -6.65056691e+00
 -6.65056691e+00 -1.16304849e+00 -2.36083403e-01 -2.36083403e-01
 -2.36083403e-01  1.14115134e+02  9.96209840e+02  7.26548997e+03
  3.94047798e+04]
E1 = -706.3693831948965  E_coul = 198.940274316888
cycle= 2 E= -507.429108878008  delta_E= -0.000275  |g|= 0.0037  |ddm|= 0.009
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00390086
diis-c [-1.49033923e-05 -1.41631185e-03  1.00141631e+00]
  HOMO = -0.236189304337776  LUMO = 114.112344514561
  mo_energy =
[-1.20171023e+02 -1.22466382e+01 -6.65170486e+00 -6.65170486e+00
 -6.65170486e+00 -1.16308812e+00 -2.36189304e-01 -2.36189304e-01
 -2.36189304e-01  1.14112345e+02  9.96201157e+02  7.26547691e+03
  3.94047650e+04]
E1 = -706.3691443936623  E_coul = 198.94003546353107
cycle= 3 E= -507.429108930131  delta_E= -5.21e-08  |g|= 6.05e-05  |ddm|= 0.000109
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=8.05623e-05
diis-c [-1.48190991e-10  3.84417403e-05 -2.10829070e-02  1.02104447e+00]
  HOMO = -0.236190327960948  LUMO = 114.112320625681
  mo_energy =
[-1.20171080e+02 -1.22466456e+01 -6.65171779e+00 -6.65171779e+00
 -6.65171779e+00 -1.16308841e+00 -2.36190328e-01 -2.36190328e-01
 -2.36190328e-01  1.14112321e+02  9.96201097e+02  7.26547684e+03
  3.94047649e+04]
E1 = -706.3691413823624  E_coul = 198.94003245221887
cycle= 4 E= -507.429108930144  delta_E= -1.23e-11  |g|= 1.73e-07  |ddm|= 1.49e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.3691413823624  E_coul = 198.94003245221887
  HOMO = -0.236190322176554  LUMO = 114.112320806096
  mo_energy =
[-1.20171080e+02 -1.22466456e+01 -6.65171773e+00 -6.65171773e+00
 -6.65171773e+00 -1.16308841e+00 -2.36190322e-01 -2.36190322e-01
 -2.36190322e-01  1.14112321e+02  9.96201098e+02  7.26547684e+03
  3.94047649e+04]
E1 = -706.3691413949815  E_coul = 198.94003246483805
Extra cycle  E= -507.429108930143  delta_E= 5.68e-14  |g|= 2.5e-09  |ddm|= 5.22e-09
    CPU time for scf_cycle      0.09 sec, wall time      0.10 sec
exp = [1.81905014e+04 4.54762424e+03 6.86313387e+02 1.55536732e+02
 4.27635223e+01 4.75734671e+00 3.91537677e-01 8.59701343e+00
 4.90700775e-01]
E = -507.42910893014346
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((9, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.5476253398322024e+03,6.8630785798847160e+02,1.5555024230205126e+02,4.2742815896802767e+01,4.7505784169783016e+00,3.9162204394177752e-01,8.5974230426361959e+00,4.9072756124177219e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "7s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:53:11 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  18190.5014176        1
[INPUT] 0    0    [1    /1   ]  4547.6242437         1
[INPUT] 0    0    [1    /1   ]  686.313387126        1
[INPUT] 0    0    [1    /1   ]  155.53673243         1
[INPUT] 0    0    [1    /1   ]  42.7635222902        1
[INPUT] 0    0    [1    /1   ]  4.75734670963        1
[INPUT] 0    0    [1    /1   ]  0.391537677346       1
[INPUT] 1    0    [1    /1   ]  8.59701343365        1
[INPUT] 1    0    [1    /1   ]  0.490700775478       1

nuclear repulsion = 0
number of shells = 9
number of NR pGTOs = 13
number of NR cGTOs = 13
basis = {'Ar': [[0, [18190.501417636053, 1.0]], [0, [4547.624243703863, 1.0]], [0, [686.3133871258599, 1.0]], [0, [155.53673242965522, 1.0]], [0, [42.76352229024808, 1.0]], [0, [4.757346709626333, 1.0]], [0, [0.39153767734604594, 1.0]], [1, [8.597013433653668, 1.0]], [1, [0.4907007754777984, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [18190.50141764]
bas 1, expnt(s) = [4547.6242437]
bas 2, expnt(s) = [686.31338713]
bas 3, expnt(s) = [155.53673243]
bas 4, expnt(s) = [42.76352229]
bas 5, expnt(s) = [4.75734671]
bas 6, expnt(s) = [0.39153768]
bas 7, expnt(s) = [8.59701343]
bas 8, expnt(s) = [0.49070078]
CPU time:        19.15
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  1  1  1  0 38 39  0]
 [ 0  1  1  1  0 40 41  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.81905014e+04 3.95729592e+03 4.54762424e+03 1.39911513e+03
 6.86313387e+02 3.38771508e+02 1.55536732e+02 1.11272989e+02
 4.27635223e+01 4.22493592e+01 4.75734671e+00 8.13839242e+00
 3.91537677e-01 1.25053311e+00 8.59701343e+00 4.29456222e+01
 4.90700775e-01 1.19813381e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319390092371137
cond(S) = 28.552772676526182
E1 = -688.9286655851673  E_coul = 184.92261619326968
init E= -504.006049391898
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.681193916160856  LUMO = 112.757118306222
  mo_energy =
[-1.21550110e+02 -1.32756061e+01 -7.62022593e+00 -7.62022593e+00
 -7.62022593e+00 -1.65126519e+00 -6.81193916e-01 -6.81193916e-01
 -6.81193916e-01  1.12757118e+02  9.94857683e+02  7.26430072e+03
  3.94037189e+04]
E1 = -706.3901237409989  E_coul = 198.96128978710934
cycle= 1 E= -507.42883395389  delta_E= -3.42  |g|= 0.297  |ddm|=  0.3
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.395791
diis-c [-0.15665073  1.        ]
  HOMO = -0.236083403128173  LUMO = 114.115133634813
  mo_energy =
[-1.20165006e+02 -1.22459019e+01 -6.65056691e+00 -6.65056691e+00
 -6.65056691e+00 -1.16304849e+00 -2.36083403e-01 -2.36083403e-01
 -2.36083403e-01  1.14115134e+02  9.96209840e+02  7.26548997e+03
  3.94047798e+04]
E1 = -706.3693831948965  E_coul = 198.940274316888
cycle= 2 E= -507.429108878008  delta_E= -0.000275  |g|= 0.0037  |ddm|= 0.009
    CPU time for cycle= 2      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.00390086
diis-c [-1.49033923e-05 -1.41631185e-03  1.00141631e+00]
  HOMO = -0.236189304337776  LUMO = 114.112344514561
  mo_energy =
[-1.20171023e+02 -1.22466382e+01 -6.65170486e+00 -6.65170486e+00
 -6.65170486e+00 -1.16308812e+00 -2.36189304e-01 -2.36189304e-01
 -2.36189304e-01  1.14112345e+02  9.96201157e+02  7.26547691e+03
  3.94047650e+04]
E1 = -706.3691443936623  E_coul = 198.94003546353107
cycle= 3 E= -507.429108930131  delta_E= -5.21e-08  |g|= 6.05e-05  |ddm|= 0.000109
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=8.05623e-05
diis-c [-1.48190991e-10  3.84417403e-05 -2.10829070e-02  1.02104447e+00]
  HOMO = -0.236190327960948  LUMO = 114.112320625681
  mo_energy =
[-1.20171080e+02 -1.22466456e+01 -6.65171779e+00 -6.65171779e+00
 -6.65171779e+00 -1.16308841e+00 -2.36190328e-01 -2.36190328e-01
 -2.36190328e-01  1.14112321e+02  9.96201097e+02  7.26547684e+03
  3.94047649e+04]
E1 = -706.3691413823624  E_coul = 198.94003245221887
cycle= 4 E= -507.429108930144  delta_E= -1.23e-11  |g|= 1.73e-07  |ddm|= 1.49e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.3691413823624  E_coul = 198.94003245221887
  HOMO = -0.236190322176554  LUMO = 114.112320806096
  mo_energy =
[-1.20171080e+02 -1.22466456e+01 -6.65171773e+00 -6.65171773e+00
 -6.65171773e+00 -1.16308841e+00 -2.36190322e-01 -2.36190322e-01
 -2.36190322e-01  1.14112321e+02  9.96201098e+02  7.26547684e+03
  3.94047649e+04]
E1 = -706.3691413949815  E_coul = 198.94003246483805
Extra cycle  E= -507.429108930143  delta_E= 5.68e-14  |g|= 2.5e-09  |ddm|= 5.22e-09
    CPU time for scf_cycle      0.09 sec, wall time      0.10 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 28.552772676526182
E1 = -706.3691413949815  E_coul = 198.94003246483805
init E= -507.429108930143
    CPU time for initialize scf      0.06 sec, wall time      0.06 sec
  HOMO = -0.236190322119878  LUMO = 114.11232080783
  mo_energy =
[-1.20171080e+02 -1.22466456e+01 -6.65171773e+00 -6.65171773e+00
 -6.65171773e+00 -1.16308841e+00 -2.36190322e-01 -2.36190322e-01
 -2.36190322e-01  1.14112321e+02  9.96201098e+02  7.26547684e+03
  3.94047649e+04]
E1 = -706.3691413951376  E_coul = 198.94003246499375
cycle= 1 E= -507.429108930144  delta_E= -3.98e-13  |g|= 4.28e-11  |ddm|= 6.89e-11
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -706.3691413951376  E_coul = 198.94003246499375
  HOMO = -0.236190322119186  LUMO = 114.11232080785
  mo_energy =
[-1.20171080e+02 -1.22466456e+01 -6.65171773e+00 -6.65171773e+00
 -6.65171773e+00 -1.16308841e+00 -2.36190322e-01 -2.36190322e-01
 -2.36190322e-01  1.14112321e+02  9.96201098e+02  7.26547684e+03
  3.94047649e+04]
E1 = -706.3691413951395  E_coul = 198.9400324649958
Extra cycle  E= -507.429108930144  delta_E= 1.14e-13  |g|= 2.97e-12  |ddm|= 1.03e-12
    CPU time for scf_cycle      0.12 sec, wall time      0.13 sec
exp = [1.81905014e+04 4.54762424e+03 6.86313387e+02 1.55536732e+02
 4.27635223e+01 4.75734671e+00 3.91537677e-01 8.59701343e+00
 4.90700775e-01]
grad_E = [-6.65097570e-06  1.24915782e-04 -6.23016781e-04  1.43388968e-03
 -1.92570981e-03  4.32978631e-03 -3.03531572e-03  9.20172565e-05
  2.27915993e-04]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((9, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.5476253398322024e+03,6.8630785798847160e+02,1.5555024230205126e+02,4.2742815896802767e+01,4.7505784169783016e+00,3.9162204394177752e-01,8.5974230426361959e+00,4.9072756124177219e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "7s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:53:13 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  18190.5015815        1
[INPUT] 0    0    [1    /1   ]  4547.62116291        1
[INPUT] 0    0    [1    /1   ]  686.328893903        1
[INPUT] 0    0    [1    /1   ]  155.499259588        1
[INPUT] 0    0    [1    /1   ]  42.8196808381        1
[INPUT] 0    0    [1    /1   ]  4.75366477421        1
[INPUT] 0    0    [1    /1   ]  0.391190711606       1
[INPUT] 1    0    [1    /1   ]  8.59569773952        1
[INPUT] 1    0    [1    /1   ]  0.49065096161        1

nuclear repulsion = 0
number of shells = 9
number of NR pGTOs = 13
number of NR cGTOs = 13
basis = {'Ar': [[0, [18190.501581544882, 1.0]], [0, [4547.621162905879, 1.0]], [0, [686.3288939032942, 1.0]], [0, [155.4992595884468, 1.0]], [0, [42.819680838115225, 1.0]], [0, [4.753664774205598, 1.0]], [0, [0.3911907116057702, 1.0]], [1, [8.595697739524796, 1.0]], [1, [0.49065096161022187, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [18190.50158154]
bas 1, expnt(s) = [4547.62116291]
bas 2, expnt(s) = [686.3288939]
bas 3, expnt(s) = [155.49925959]
bas 4, expnt(s) = [42.81968084]
bas 5, expnt(s) = [4.75366477]
bas 6, expnt(s) = [0.39119071]
bas 7, expnt(s) = [8.59569774]
bas 8, expnt(s) = [0.49065096]
CPU time:        21.95
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  1  1  1  0 38 39  0]
 [ 0  1  1  1  0 40 41  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.81905016e+04 3.95729594e+03 4.54762116e+03 1.39911442e+03
 6.86328894e+02 3.38777248e+02 1.55499260e+02 1.11252882e+02
 4.28196808e+01 4.22909649e+01 4.75366477e+00 8.13366794e+00
 3.91190712e-01 1.24970189e+00 8.59569774e+00 4.29374068e+01
 4.90650962e-01 1.19798177e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.31954941082461
cond(S) = 28.581038834959156
E1 = -688.9090574062207  E_coul = 184.9058213320981
init E= -504.003236074123
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.681413448947258  LUMO = 112.849957943354
  mo_energy =
[-1.21552062e+02 -1.32773836e+01 -7.62154263e+00 -7.62154263e+00
 -7.62154263e+00 -1.65130254e+00 -6.81413449e-01 -6.81413449e-01
 -6.81413449e-01  1.12849958e+02  9.94956700e+02  7.26438730e+03
  3.94037933e+04]
E1 = -706.3685804708091  E_coul = 198.93960548276658
cycle= 1 E= -507.428974988043  delta_E= -3.43  |g|= 0.297  |ddm|=  0.3
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.396098
diis-c [-0.15689385  1.        ]
  HOMO = -0.236453506249386  LUMO = 114.207837242304
  mo_energy =
[-1.20167351e+02 -1.22480042e+01 -6.65223933e+00 -6.65223933e+00
 -6.65223933e+00 -1.16338707e+00 -2.36453506e-01 -2.36453506e-01
 -2.36453506e-01  1.14207837e+02  9.96308990e+02  7.26557657e+03
  3.94048543e+04]
E1 = -706.3478701860121  E_coul = 198.91862004508323
cycle= 2 E= -507.429250140929  delta_E= -0.000275  |g|= 0.0037  |ddm|= 0.009
    CPU time for cycle= 2      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.00390555
diis-c [-1.49232007e-05 -1.45279812e-03  1.00145280e+00]
  HOMO = -0.236559257573093  LUMO = 114.205054235801
  mo_energy =
[-1.20173357e+02 -1.22487396e+01 -6.65337633e+00 -6.65337633e+00
 -6.65337633e+00 -1.16342660e+00 -2.36559258e-01 -2.36559258e-01
 -2.36559258e-01  1.14205054e+02  9.96300333e+02  7.26556354e+03
  3.94048396e+04]
E1 = -706.347631665947  E_coul = 198.91838147278588
cycle= 3 E= -507.429250193161  delta_E= -5.22e-08  |g|= 6.05e-05  |ddm|= 0.000109
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=8.04677e-05
diis-c [-1.47190100e-10  3.87579147e-05 -2.10464762e-02  1.02100772e+00]
  HOMO = -0.236560276010091  LUMO = 114.205030505805
  mo_energy =
[-1.20173414e+02 -1.22487470e+01 -6.65338922e+00 -6.65338922e+00
 -6.65338922e+00 -1.16342690e+00 -2.36560276e-01 -2.36560276e-01
 -2.36560276e-01  1.14205031e+02  9.96300274e+02  7.26556348e+03
  3.94048395e+04]
E1 = -706.3476286669435  E_coul = 198.9183784737695
cycle= 4 E= -507.429250193174  delta_E= -1.28e-11  |g|= 1.72e-07  |ddm|= 1.49e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.3476286669435  E_coul = 198.9183784737695
  HOMO = -0.236560270265919  LUMO = 114.205030684974
  mo_energy =
[-1.20173414e+02 -1.22487469e+01 -6.65338916e+00 -6.65338916e+00
 -6.65338916e+00 -1.16342689e+00 -2.36560270e-01 -2.36560270e-01
 -2.36560270e-01  1.14205031e+02  9.96300275e+02  7.26556348e+03
  3.94048395e+04]
E1 = -706.347628679486  E_coul = 198.9183784863124
Extra cycle  E= -507.429250193174  delta_E= 3.98e-13  |g|= 2.49e-09  |ddm|= 5.19e-09
    CPU time for scf_cycle      0.10 sec, wall time      0.10 sec
exp = [1.81905016e+04 4.54762116e+03 6.86328894e+02 1.55499260e+02
 4.28196808e+01 4.75366477e+00 3.91190712e-01 8.59569774e+00
 4.90650962e-01]
E = -507.4292501931736
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((9, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.5476253398322024e+03,6.8630785798847160e+02,1.5555024230205126e+02,4.2742815896802767e+01,4.7505784169783016e+00,3.9162204394177752e-01,8.5974230426361959e+00,4.9072756124177219e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "7s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:53:14 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  18190.5015815        1
[INPUT] 0    0    [1    /1   ]  4547.62116291        1
[INPUT] 0    0    [1    /1   ]  686.328893903        1
[INPUT] 0    0    [1    /1   ]  155.499259588        1
[INPUT] 0    0    [1    /1   ]  42.8196808381        1
[INPUT] 0    0    [1    /1   ]  4.75366477421        1
[INPUT] 0    0    [1    /1   ]  0.391190711606       1
[INPUT] 1    0    [1    /1   ]  8.59569773952        1
[INPUT] 1    0    [1    /1   ]  0.49065096161        1

nuclear repulsion = 0
number of shells = 9
number of NR pGTOs = 13
number of NR cGTOs = 13
basis = {'Ar': [[0, [18190.501581544882, 1.0]], [0, [4547.621162905879, 1.0]], [0, [686.3288939032942, 1.0]], [0, [155.4992595884468, 1.0]], [0, [42.819680838115225, 1.0]], [0, [4.753664774205598, 1.0]], [0, [0.3911907116057702, 1.0]], [1, [8.595697739524796, 1.0]], [1, [0.49065096161022187, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [18190.50158154]
bas 1, expnt(s) = [4547.62116291]
bas 2, expnt(s) = [686.3288939]
bas 3, expnt(s) = [155.49925959]
bas 4, expnt(s) = [42.81968084]
bas 5, expnt(s) = [4.75366477]
bas 6, expnt(s) = [0.39119071]
bas 7, expnt(s) = [8.59569774]
bas 8, expnt(s) = [0.49065096]
CPU time:        22.16
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  1  1  1  0 38 39  0]
 [ 0  1  1  1  0 40 41  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.81905016e+04 3.95729594e+03 4.54762116e+03 1.39911442e+03
 6.86328894e+02 3.38777248e+02 1.55499260e+02 1.11252882e+02
 4.28196808e+01 4.22909649e+01 4.75366477e+00 8.13366794e+00
 3.91190712e-01 1.24970189e+00 8.59569774e+00 4.29374068e+01
 4.90650962e-01 1.19798177e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.31954941082461
cond(S) = 28.581038834959156
E1 = -688.9090574062207  E_coul = 184.9058213320981
init E= -504.003236074123
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.681413448947258  LUMO = 112.849957943354
  mo_energy =
[-1.21552062e+02 -1.32773836e+01 -7.62154263e+00 -7.62154263e+00
 -7.62154263e+00 -1.65130254e+00 -6.81413449e-01 -6.81413449e-01
 -6.81413449e-01  1.12849958e+02  9.94956700e+02  7.26438730e+03
  3.94037933e+04]
E1 = -706.3685804708091  E_coul = 198.93960548276658
cycle= 1 E= -507.428974988043  delta_E= -3.43  |g|= 0.297  |ddm|=  0.3
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.396098
diis-c [-0.15689385  1.        ]
  HOMO = -0.236453506249386  LUMO = 114.207837242304
  mo_energy =
[-1.20167351e+02 -1.22480042e+01 -6.65223933e+00 -6.65223933e+00
 -6.65223933e+00 -1.16338707e+00 -2.36453506e-01 -2.36453506e-01
 -2.36453506e-01  1.14207837e+02  9.96308990e+02  7.26557657e+03
  3.94048543e+04]
E1 = -706.3478701860121  E_coul = 198.91862004508323
cycle= 2 E= -507.429250140929  delta_E= -0.000275  |g|= 0.0037  |ddm|= 0.009
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00390555
diis-c [-1.49232007e-05 -1.45279812e-03  1.00145280e+00]
  HOMO = -0.236559257573093  LUMO = 114.205054235801
  mo_energy =
[-1.20173357e+02 -1.22487396e+01 -6.65337633e+00 -6.65337633e+00
 -6.65337633e+00 -1.16342660e+00 -2.36559258e-01 -2.36559258e-01
 -2.36559258e-01  1.14205054e+02  9.96300333e+02  7.26556354e+03
  3.94048396e+04]
E1 = -706.347631665947  E_coul = 198.91838147278588
cycle= 3 E= -507.429250193161  delta_E= -5.22e-08  |g|= 6.05e-05  |ddm|= 0.000109
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=8.04677e-05
diis-c [-1.47190100e-10  3.87579147e-05 -2.10464762e-02  1.02100772e+00]
  HOMO = -0.236560276010091  LUMO = 114.205030505805
  mo_energy =
[-1.20173414e+02 -1.22487470e+01 -6.65338922e+00 -6.65338922e+00
 -6.65338922e+00 -1.16342690e+00 -2.36560276e-01 -2.36560276e-01
 -2.36560276e-01  1.14205031e+02  9.96300274e+02  7.26556348e+03
  3.94048395e+04]
E1 = -706.3476286669435  E_coul = 198.9183784737695
cycle= 4 E= -507.429250193174  delta_E= -1.28e-11  |g|= 1.72e-07  |ddm|= 1.49e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.3476286669435  E_coul = 198.9183784737695
  HOMO = -0.236560270265919  LUMO = 114.205030684974
  mo_energy =
[-1.20173414e+02 -1.22487469e+01 -6.65338916e+00 -6.65338916e+00
 -6.65338916e+00 -1.16342689e+00 -2.36560270e-01 -2.36560270e-01
 -2.36560270e-01  1.14205031e+02  9.96300275e+02  7.26556348e+03
  3.94048395e+04]
E1 = -706.347628679486  E_coul = 198.9183784863124
Extra cycle  E= -507.429250193174  delta_E= 3.98e-13  |g|= 2.49e-09  |ddm|= 5.19e-09
    CPU time for scf_cycle      0.10 sec, wall time      0.10 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 28.581038834959156
E1 = -706.347628679486  E_coul = 198.9183784863124
init E= -507.429250193174
    CPU time for initialize scf      0.06 sec, wall time      0.06 sec
  HOMO = -0.236560270209609  LUMO = 114.205030686697
  mo_energy =
[-1.20173414e+02 -1.22487469e+01 -6.65338916e+00 -6.65338916e+00
 -6.65338916e+00 -1.16342689e+00 -2.36560270e-01 -2.36560270e-01
 -2.36560270e-01  1.14205031e+02  9.96300275e+02  7.26556348e+03
  3.94048395e+04]
E1 = -706.3476286796413  E_coul = 198.91837848646725
cycle= 1 E= -507.429250193174  delta_E= -4.55e-13  |g|= 4.29e-11  |ddm|= 6.85e-11
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -706.3476286796413  E_coul = 198.91837848646725
  HOMO = -0.236560270208927  LUMO = 114.205030686716
  mo_energy =
[-1.20173414e+02 -1.22487469e+01 -6.65338916e+00 -6.65338916e+00
 -6.65338916e+00 -1.16342689e+00 -2.36560270e-01 -2.36560270e-01
 -2.36560270e-01  1.14205031e+02  9.96300275e+02  7.26556348e+03
  3.94048395e+04]
E1 = -706.3476286796429  E_coul = 198.91837848646927
Extra cycle  E= -507.429250193174  delta_E= 3.98e-13  |g|= 9.89e-12  |ddm|= 1.04e-12
    CPU time for scf_cycle      0.13 sec, wall time      0.13 sec
exp = [1.81905016e+04 4.54762116e+03 6.86328894e+02 1.55499260e+02
 4.28196808e+01 4.75366477e+00 3.91190712e-01 8.59569774e+00
 4.90650962e-01]
grad_E = [-6.64732697e-06  1.24512761e-04 -6.00407166e-04  1.13861243e-03
 -7.62440664e-04  1.39970893e-03 -9.30149206e-03 -1.05872607e-03
 -1.83488255e-03]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((9, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.5476253398322024e+03,6.8630785798847160e+02,1.5555024230205126e+02,4.2742815896802767e+01,4.7505784169783016e+00,3.9162204394177752e-01,8.5974230426361959e+00,4.9072756124177219e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "7s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:53:16 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  18190.501781         1
[INPUT] 0    0    [1    /1   ]  4547.61741562        1
[INPUT] 0    0    [1    /1   ]  686.347711147        1
[INPUT] 0    0    [1    /1   ]  155.454307336        1
[INPUT] 0    0    [1    /1   ]  42.8854848883        1
[INPUT] 0    0    [1    /1   ]  4.75102566077        1
[INPUT] 0    0    [1    /1   ]  0.391516807957       1
[INPUT] 1    0    [1    /1   ]  8.59595707057        1
[INPUT] 1    0    [1    /1   ]  0.490659453627       1

nuclear repulsion = 0
number of shells = 9
number of NR pGTOs = 13
number of NR cGTOs = 13
basis = {'Ar': [[0, [18190.501780951214, 1.0]], [0, [4547.617415623354, 1.0]], [0, [686.3477111467508, 1.0]], [0, [155.4543073359512, 1.0]], [0, [42.88548488832107, 1.0]], [0, [4.75102566076709, 1.0]], [0, [0.391516807956829, 1.0]], [1, [8.595957070573712, 1.0]], [1, [0.49065945362711755, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [18190.50178095]
bas 1, expnt(s) = [4547.61741562]
bas 2, expnt(s) = [686.34771115]
bas 3, expnt(s) = [155.45430734]
bas 4, expnt(s) = [42.88548489]
bas 5, expnt(s) = [4.75102566]
bas 6, expnt(s) = [0.39151681]
bas 7, expnt(s) = [8.59595707]
bas 8, expnt(s) = [0.49065945]
CPU time:        24.96
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  1  1  1  0 38 39  0]
 [ 0  1  1  1  0 40 41  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.81905018e+04 3.95729598e+03 4.54761742e+03 1.39911356e+03
 6.86347711e+02 3.38784215e+02 1.55454307e+02 1.11228760e+02
 4.28854849e+01 4.23396992e+01 4.75102566e+00 8.13028101e+00
 3.91516808e-01 1.25048312e+00 8.59595707e+00 4.29390261e+01
 4.90659454e-01 1.19800769e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.31953172903849
cond(S) = 28.617129730829465
E1 = -688.9118321110703  E_coul = 184.91002158021647
init E= -504.001810530854
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.681261674220117  LUMO = 112.971027016019
  mo_energy =
[-1.21551116e+02 -1.32776554e+01 -7.62123889e+00 -7.62123889e+00
 -7.62123889e+00 -1.65127884e+00 -6.81261674e-01 -6.81261674e-01
 -6.81261674e-01  1.12971027e+02  9.95080970e+02  7.26449622e+03
  3.94038874e+04]
E1 = -706.3746238429801  E_coul = 198.94558506635786
cycle= 1 E= -507.429038776622  delta_E= -3.43  |g|= 0.298  |ddm|=  0.3
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.396526
diis-c [-0.15723262  1.        ]
  HOMO = -0.23628569121726  LUMO = 114.32944936582
  mo_energy =
[-1.20165846e+02 -1.22482403e+01 -6.65188280e+00 -6.65188280e+00
 -6.65188280e+00 -1.16327071e+00 -2.36285691e-01 -2.36285691e-01
 -2.36285691e-01  1.14329449e+02  9.96434606e+02  7.26568691e+03
  3.94049500e+04]
E1 = -706.3539573735595  E_coul = 198.92464358971054
cycle= 2 E= -507.429313783849  delta_E= -0.000275  |g|= 0.00371  |ddm|= 0.00899
    CPU time for cycle= 2      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.00390659
diis-c [-1.49132774e-05 -1.49029586e-03  1.00149030e+00]
  HOMO = -0.236391266488054  LUMO = 114.32667446203
  mo_energy =
[-1.20171838e+02 -1.22489744e+01 -6.65301803e+00 -6.65301803e+00
 -6.65301803e+00 -1.16331019e+00 -2.36391266e-01 -2.36391266e-01
 -2.36391266e-01  1.14326674e+02  9.96425980e+02  7.26567393e+03
  3.94049353e+04]
E1 = -706.3537193153542  E_coul = 198.9244054792371
cycle= 3 E= -507.429313836117  delta_E= -5.23e-08  |g|= 6.04e-05  |ddm|= 0.000109
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=8.03017e-05
diis-c [-1.45973481e-10  3.91478328e-05 -2.10120936e-02  1.02097295e+00]
  HOMO = -0.23639227952629  LUMO = 114.326650913883
  mo_energy =
[-1.20171895e+02 -1.22489818e+01 -6.65303085e+00 -6.65303085e+00
 -6.65303085e+00 -1.16331048e+00 -2.36392280e-01 -2.36392280e-01
 -2.36392280e-01  1.14326651e+02  9.96425922e+02  7.26567386e+03
  3.94049352e+04]
E1 = -706.3537163314938  E_coul = 198.9244024953638
cycle= 4 E= -507.42931383613  delta_E= -1.3e-11  |g|= 1.71e-07  |ddm|= 1.49e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.3537163314938  E_coul = 198.9244024953638
  HOMO = -0.236392273826716  LUMO = 114.326651091571
  mo_energy =
[-1.20171894e+02 -1.22489817e+01 -6.65303079e+00 -6.65303079e+00
 -6.65303079e+00 -1.16331047e+00 -2.36392274e-01 -2.36392274e-01
 -2.36392274e-01  1.14326651e+02  9.96425922e+02  7.26567386e+03
  3.94049352e+04]
E1 = -706.3537163439454  E_coul = 198.92440250781596
Extra cycle  E= -507.429313836129  delta_E= 6.25e-13  |g|= 2.48e-09  |ddm|= 5.16e-09
    CPU time for scf_cycle      0.10 sec, wall time      0.10 sec
exp = [1.81905018e+04 4.54761742e+03 6.86347711e+02 1.55454307e+02
 4.28854849e+01 4.75102566e+00 3.91516808e-01 8.59595707e+00
 4.90659454e-01]
E = -507.42931383612944
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((9, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.5476253398322024e+03,6.8630785798847160e+02,1.5555024230205126e+02,4.2742815896802767e+01,4.7505784169783016e+00,3.9162204394177752e-01,8.5974230426361959e+00,4.9072756124177219e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "7s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:53:17 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  18190.501781         1
[INPUT] 0    0    [1    /1   ]  4547.61741562        1
[INPUT] 0    0    [1    /1   ]  686.347711147        1
[INPUT] 0    0    [1    /1   ]  155.454307336        1
[INPUT] 0    0    [1    /1   ]  42.8854848883        1
[INPUT] 0    0    [1    /1   ]  4.75102566077        1
[INPUT] 0    0    [1    /1   ]  0.391516807957       1
[INPUT] 1    0    [1    /1   ]  8.59595707057        1
[INPUT] 1    0    [1    /1   ]  0.490659453627       1

nuclear repulsion = 0
number of shells = 9
number of NR pGTOs = 13
number of NR cGTOs = 13
basis = {'Ar': [[0, [18190.501780951214, 1.0]], [0, [4547.617415623354, 1.0]], [0, [686.3477111467508, 1.0]], [0, [155.4543073359512, 1.0]], [0, [42.88548488832107, 1.0]], [0, [4.75102566076709, 1.0]], [0, [0.391516807956829, 1.0]], [1, [8.595957070573712, 1.0]], [1, [0.49065945362711755, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [18190.50178095]
bas 1, expnt(s) = [4547.61741562]
bas 2, expnt(s) = [686.34771115]
bas 3, expnt(s) = [155.45430734]
bas 4, expnt(s) = [42.88548489]
bas 5, expnt(s) = [4.75102566]
bas 6, expnt(s) = [0.39151681]
bas 7, expnt(s) = [8.59595707]
bas 8, expnt(s) = [0.49065945]
CPU time:        25.19
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  1  1  1  0 38 39  0]
 [ 0  1  1  1  0 40 41  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.81905018e+04 3.95729598e+03 4.54761742e+03 1.39911356e+03
 6.86347711e+02 3.38784215e+02 1.55454307e+02 1.11228760e+02
 4.28854849e+01 4.23396992e+01 4.75102566e+00 8.13028101e+00
 3.91516808e-01 1.25048312e+00 8.59595707e+00 4.29390261e+01
 4.90659454e-01 1.19800769e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.31953172903849
cond(S) = 28.617129730829465
E1 = -688.9118321110703  E_coul = 184.91002158021647
init E= -504.001810530854
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.681261674220117  LUMO = 112.971027016019
  mo_energy =
[-1.21551116e+02 -1.32776554e+01 -7.62123889e+00 -7.62123889e+00
 -7.62123889e+00 -1.65127884e+00 -6.81261674e-01 -6.81261674e-01
 -6.81261674e-01  1.12971027e+02  9.95080970e+02  7.26449622e+03
  3.94038874e+04]
E1 = -706.3746238429801  E_coul = 198.94558506635786
cycle= 1 E= -507.429038776622  delta_E= -3.43  |g|= 0.298  |ddm|=  0.3
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.396526
diis-c [-0.15723262  1.        ]
  HOMO = -0.23628569121726  LUMO = 114.32944936582
  mo_energy =
[-1.20165846e+02 -1.22482403e+01 -6.65188280e+00 -6.65188280e+00
 -6.65188280e+00 -1.16327071e+00 -2.36285691e-01 -2.36285691e-01
 -2.36285691e-01  1.14329449e+02  9.96434606e+02  7.26568691e+03
  3.94049500e+04]
E1 = -706.3539573735595  E_coul = 198.92464358971054
cycle= 2 E= -507.429313783849  delta_E= -0.000275  |g|= 0.00371  |ddm|= 0.00899
    CPU time for cycle= 2      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.00390659
diis-c [-1.49132774e-05 -1.49029586e-03  1.00149030e+00]
  HOMO = -0.236391266488054  LUMO = 114.32667446203
  mo_energy =
[-1.20171838e+02 -1.22489744e+01 -6.65301803e+00 -6.65301803e+00
 -6.65301803e+00 -1.16331019e+00 -2.36391266e-01 -2.36391266e-01
 -2.36391266e-01  1.14326674e+02  9.96425980e+02  7.26567393e+03
  3.94049353e+04]
E1 = -706.3537193153542  E_coul = 198.9244054792371
cycle= 3 E= -507.429313836117  delta_E= -5.23e-08  |g|= 6.04e-05  |ddm|= 0.000109
    CPU time for cycle= 3      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=8.03017e-05
diis-c [-1.45973481e-10  3.91478328e-05 -2.10120936e-02  1.02097295e+00]
  HOMO = -0.23639227952629  LUMO = 114.326650913883
  mo_energy =
[-1.20171895e+02 -1.22489818e+01 -6.65303085e+00 -6.65303085e+00
 -6.65303085e+00 -1.16331048e+00 -2.36392280e-01 -2.36392280e-01
 -2.36392280e-01  1.14326651e+02  9.96425922e+02  7.26567386e+03
  3.94049352e+04]
E1 = -706.3537163314938  E_coul = 198.9244024953638
cycle= 4 E= -507.42931383613  delta_E= -1.3e-11  |g|= 1.71e-07  |ddm|= 1.49e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.3537163314938  E_coul = 198.9244024953638
  HOMO = -0.236392273826716  LUMO = 114.326651091571
  mo_energy =
[-1.20171894e+02 -1.22489817e+01 -6.65303079e+00 -6.65303079e+00
 -6.65303079e+00 -1.16331047e+00 -2.36392274e-01 -2.36392274e-01
 -2.36392274e-01  1.14326651e+02  9.96425922e+02  7.26567386e+03
  3.94049352e+04]
E1 = -706.3537163439454  E_coul = 198.92440250781596
Extra cycle  E= -507.429313836129  delta_E= 6.25e-13  |g|= 2.48e-09  |ddm|= 5.16e-09
    CPU time for scf_cycle      0.09 sec, wall time      0.10 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 28.617129730829465
E1 = -706.3537163439454  E_coul = 198.92440250781596
init E= -507.429313836129
    CPU time for initialize scf      0.06 sec, wall time      0.06 sec
  HOMO = -0.236392273770798  LUMO = 114.32665109328
  mo_energy =
[-1.20171894e+02 -1.22489817e+01 -6.65303079e+00 -6.65303079e+00
 -6.65303079e+00 -1.16331047e+00 -2.36392274e-01 -2.36392274e-01
 -2.36392274e-01  1.14326651e+02  9.96425922e+02  7.26567386e+03
  3.94049352e+04]
E1 = -706.3537163440994  E_coul = 198.92440250796992
cycle= 1 E= -507.429313836129  delta_E= -5.68e-14  |g|= 4.19e-11  |ddm|= 6.82e-11
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -706.3537163440994  E_coul = 198.92440250796992
  HOMO = -0.236392273770115  LUMO = 114.326651093299
  mo_energy =
[-1.20171894e+02 -1.22489817e+01 -6.65303079e+00 -6.65303079e+00
 -6.65303079e+00 -1.16331047e+00 -2.36392274e-01 -2.36392274e-01
 -2.36392274e-01  1.14326651e+02  9.96425922e+02  7.26567386e+03
  3.94049352e+04]
E1 = -706.3537163441013  E_coul = 198.92440250797185
Extra cycle  E= -507.429313836129  delta_E= 1.14e-13  |g|= 5.5e-12  |ddm|= 1.03e-12
    CPU time for scf_cycle      0.13 sec, wall time      0.13 sec
exp = [1.81905018e+04 4.54761742e+03 6.86347711e+02 1.55454307e+02
 4.28854849e+01 4.75102566e+00 3.91516808e-01 8.59595707e+00
 4.90659454e-01]
grad_E = [-6.64319701e-06  1.24040227e-04 -5.73706641e-04  7.90672906e-04
  6.07115117e-04 -4.93152252e-04 -4.48437198e-03 -7.86009382e-04
 -1.14023640e-03]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((9, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.5476253398322024e+03,6.8630785798847160e+02,1.5555024230205126e+02,4.2742815896802767e+01,4.7505784169783016e+00,3.9162204394177752e-01,8.5974230426361959e+00,4.9072756124177219e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "7s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:53:20 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  18190.501801         1
[INPUT] 0    0    [1    /1   ]  4547.61704031        1
[INPUT] 0    0    [1    /1   ]  686.349546373        1
[INPUT] 0    0    [1    /1   ]  155.450506253        1
[INPUT] 0    0    [1    /1   ]  42.8892757294        1
[INPUT] 0    0    [1    /1   ]  4.75129924377        1
[INPUT] 0    0    [1    /1   ]  0.391723047451       1
[INPUT] 1    0    [1    /1   ]  8.59659305816        1
[INPUT] 1    0    [1    /1   ]  0.490681649592       1

nuclear repulsion = 0
number of shells = 9
number of NR pGTOs = 13
number of NR cGTOs = 13
basis = {'Ar': [[0, [18190.501800966053, 1.0]], [0, [4547.617040305329, 1.0]], [0, [686.349546372622, 1.0]], [0, [155.4505062533757, 1.0]], [0, [42.889275729430004, 1.0]], [0, [4.751299243771082, 1.0]], [0, [0.39172304745138903, 1.0]], [1, [8.596593058163167, 1.0]], [1, [0.49068164959169785, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [18190.50180097]
bas 1, expnt(s) = [4547.61704031]
bas 2, expnt(s) = [686.34954637]
bas 3, expnt(s) = [155.45050625]
bas 4, expnt(s) = [42.88927573]
bas 5, expnt(s) = [4.75129924]
bas 6, expnt(s) = [0.39172305]
bas 7, expnt(s) = [8.59659306]
bas 8, expnt(s) = [0.49068165]
CPU time:        28.00
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  1  1  1  0 38 39  0]
 [ 0  1  1  1  0 40 41  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.81905018e+04 3.95729598e+03 4.54761704e+03 1.39911347e+03
 6.86349546e+02 3.38784894e+02 1.55450506e+02 1.11226720e+02
 4.28892757e+01 4.23425061e+01 4.75129924e+00 8.13063213e+00
 3.91723047e-01 1.25097712e+00 8.59659306e+00 4.29429973e+01
 4.90681650e-01 1.19807543e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319471866878427
cond(S) = 28.6199300112026
E1 = -688.9195168403514  E_coul = 184.9172370723446
init E= -504.002279768007
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.68114475649529  LUMO = 112.980818692641
  mo_energy =
[-1.21550079e+02 -1.32771428e+01 -7.62068919e+00 -7.62068919e+00
 -7.62068919e+00 -1.65125315e+00 -6.81144756e-01 -6.81144756e-01
 -6.81144756e-01  1.12980819e+02  9.95088185e+02  7.26450304e+03
  3.94038934e+04]
E1 = -706.3840609227597  E_coul = 198.95501944149055
cycle= 1 E= -507.429041481269  delta_E= -3.43  |g|= 0.298  |ddm|=  0.3
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.396569
diis-c [-0.1572667  1.       ]
  HOMO = -0.236111407604832  LUMO = 114.339471610493
  mo_energy =
[-1.20164495e+02 -1.22476073e+01 -6.65119630e+00 -6.65119630e+00
 -6.65119630e+00 -1.16312099e+00 -2.36111408e-01 -2.36111408e-01
 -2.36111408e-01  1.14339472e+02  9.96442225e+02  7.26569420e+03
  3.94049565e+04]
E1 = -706.3633986132303  E_coul = 198.9340822295382
cycle= 2 E= -507.429316383692  delta_E= -0.000275  |g|= 0.00371  |ddm|= 0.00899
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00390556
diis-c [-1.49047919e-05 -1.49120211e-03  1.00149120e+00]
  HOMO = -0.236216978750164  LUMO = 114.336697370854
  mo_energy =
[-1.20170486e+02 -1.22483413e+01 -6.65233129e+00 -6.65233129e+00
 -6.65233129e+00 -1.16316048e+00 -2.36216979e-01 -2.36216979e-01
 -2.36216979e-01  1.14336697e+02  9.96433601e+02  7.26568121e+03
  3.94049418e+04]
E1 = -706.3631606081293  E_coul = 198.93384417218866
cycle= 3 E= -507.429316435941  delta_E= -5.22e-08  |g|= 6.04e-05  |ddm|= 0.000109
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=8.02795e-05
diis-c [-1.45891686e-10  3.91764885e-05 -2.10122598e-02  1.02097308e+00]
  HOMO = -0.236217991708335  LUMO = 114.336673831885
  mo_energy =
[-1.20170542e+02 -1.22483487e+01 -6.65234411e+00 -6.65234411e+00
 -6.65234411e+00 -1.16316077e+00 -2.36217992e-01 -2.36217992e-01
 -2.36217992e-01  1.14336674e+02  9.96433543e+02  7.26568115e+03
  3.94049418e+04]
E1 = -706.3631576252471  E_coul = 198.93384118929401
cycle= 4 E= -507.429316435953  delta_E= -1.24e-11  |g|= 1.7e-07  |ddm|= 1.49e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.3631576252471  E_coul = 198.93384118929401
  HOMO = -0.236217986010397  LUMO = 114.336674009481
  mo_energy =
[-1.20170542e+02 -1.22483486e+01 -6.65234405e+00 -6.65234405e+00
 -6.65234405e+00 -1.16316077e+00 -2.36217986e-01 -2.36217986e-01
 -2.36217986e-01  1.14336674e+02  9.96433544e+02  7.26568115e+03
  3.94049418e+04]
E1 = -706.3631576376938  E_coul = 198.93384120174116
Extra cycle  E= -507.429316435953  delta_E= 5.12e-13  |g|= 2.48e-09  |ddm|= 5.16e-09
    CPU time for scf_cycle      0.10 sec, wall time      0.10 sec
exp = [1.81905018e+04 4.54761704e+03 6.86349546e+02 1.55450506e+02
 4.28892757e+01 4.75129924e+00 3.91723047e-01 8.59659306e+00
 4.90681650e-01]
E = -507.4293164359526
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((9, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.5476253398322024e+03,6.8630785798847160e+02,1.5555024230205126e+02,4.2742815896802767e+01,4.7505784169783016e+00,3.9162204394177752e-01,8.5974230426361959e+00,4.9072756124177219e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "7s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:53:20 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  18190.501801         1
[INPUT] 0    0    [1    /1   ]  4547.61704031        1
[INPUT] 0    0    [1    /1   ]  686.349546373        1
[INPUT] 0    0    [1    /1   ]  155.450506253        1
[INPUT] 0    0    [1    /1   ]  42.8892757294        1
[INPUT] 0    0    [1    /1   ]  4.75129924377        1
[INPUT] 0    0    [1    /1   ]  0.391723047451       1
[INPUT] 1    0    [1    /1   ]  8.59659305816        1
[INPUT] 1    0    [1    /1   ]  0.490681649592       1

nuclear repulsion = 0
number of shells = 9
number of NR pGTOs = 13
number of NR cGTOs = 13
basis = {'Ar': [[0, [18190.501800966053, 1.0]], [0, [4547.617040305329, 1.0]], [0, [686.349546372622, 1.0]], [0, [155.4505062533757, 1.0]], [0, [42.889275729430004, 1.0]], [0, [4.751299243771082, 1.0]], [0, [0.39172304745138903, 1.0]], [1, [8.596593058163167, 1.0]], [1, [0.49068164959169785, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [18190.50180097]
bas 1, expnt(s) = [4547.61704031]
bas 2, expnt(s) = [686.34954637]
bas 3, expnt(s) = [155.45050625]
bas 4, expnt(s) = [42.88927573]
bas 5, expnt(s) = [4.75129924]
bas 6, expnt(s) = [0.39172305]
bas 7, expnt(s) = [8.59659306]
bas 8, expnt(s) = [0.49068165]
CPU time:        28.24
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  1  1  1  0 38 39  0]
 [ 0  1  1  1  0 40 41  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.81905018e+04 3.95729598e+03 4.54761704e+03 1.39911347e+03
 6.86349546e+02 3.38784894e+02 1.55450506e+02 1.11226720e+02
 4.28892757e+01 4.23425061e+01 4.75129924e+00 8.13063213e+00
 3.91723047e-01 1.25097712e+00 8.59659306e+00 4.29429973e+01
 4.90681650e-01 1.19807543e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319471866878427
cond(S) = 28.6199300112026
E1 = -688.9195168403514  E_coul = 184.9172370723446
init E= -504.002279768007
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.68114475649529  LUMO = 112.980818692641
  mo_energy =
[-1.21550079e+02 -1.32771428e+01 -7.62068919e+00 -7.62068919e+00
 -7.62068919e+00 -1.65125315e+00 -6.81144756e-01 -6.81144756e-01
 -6.81144756e-01  1.12980819e+02  9.95088185e+02  7.26450304e+03
  3.94038934e+04]
E1 = -706.3840609227597  E_coul = 198.95501944149055
cycle= 1 E= -507.429041481269  delta_E= -3.43  |g|= 0.298  |ddm|=  0.3
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.396569
diis-c [-0.1572667  1.       ]
  HOMO = -0.236111407604832  LUMO = 114.339471610493
  mo_energy =
[-1.20164495e+02 -1.22476073e+01 -6.65119630e+00 -6.65119630e+00
 -6.65119630e+00 -1.16312099e+00 -2.36111408e-01 -2.36111408e-01
 -2.36111408e-01  1.14339472e+02  9.96442225e+02  7.26569420e+03
  3.94049565e+04]
E1 = -706.3633986132303  E_coul = 198.9340822295382
cycle= 2 E= -507.429316383692  delta_E= -0.000275  |g|= 0.00371  |ddm|= 0.00899
    CPU time for cycle= 2      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.00390556
diis-c [-1.49047919e-05 -1.49120211e-03  1.00149120e+00]
  HOMO = -0.236216978750164  LUMO = 114.336697370854
  mo_energy =
[-1.20170486e+02 -1.22483413e+01 -6.65233129e+00 -6.65233129e+00
 -6.65233129e+00 -1.16316048e+00 -2.36216979e-01 -2.36216979e-01
 -2.36216979e-01  1.14336697e+02  9.96433601e+02  7.26568121e+03
  3.94049418e+04]
E1 = -706.3631606081293  E_coul = 198.93384417218866
cycle= 3 E= -507.429316435941  delta_E= -5.22e-08  |g|= 6.04e-05  |ddm|= 0.000109
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=8.02795e-05
diis-c [-1.45891686e-10  3.91764885e-05 -2.10122598e-02  1.02097308e+00]
  HOMO = -0.236217991708335  LUMO = 114.336673831885
  mo_energy =
[-1.20170542e+02 -1.22483487e+01 -6.65234411e+00 -6.65234411e+00
 -6.65234411e+00 -1.16316077e+00 -2.36217992e-01 -2.36217992e-01
 -2.36217992e-01  1.14336674e+02  9.96433543e+02  7.26568115e+03
  3.94049418e+04]
E1 = -706.3631576252471  E_coul = 198.93384118929401
cycle= 4 E= -507.429316435953  delta_E= -1.24e-11  |g|= 1.7e-07  |ddm|= 1.49e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.3631576252471  E_coul = 198.93384118929401
  HOMO = -0.236217986010397  LUMO = 114.336674009481
  mo_energy =
[-1.20170542e+02 -1.22483486e+01 -6.65234405e+00 -6.65234405e+00
 -6.65234405e+00 -1.16316077e+00 -2.36217986e-01 -2.36217986e-01
 -2.36217986e-01  1.14336674e+02  9.96433544e+02  7.26568115e+03
  3.94049418e+04]
E1 = -706.3631576376938  E_coul = 198.93384120174116
Extra cycle  E= -507.429316435953  delta_E= 5.12e-13  |g|= 2.48e-09  |ddm|= 5.16e-09
    CPU time for scf_cycle      0.09 sec, wall time      0.10 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 28.6199300112026
E1 = -706.3631576376938  E_coul = 198.93384120174116
init E= -507.429316435953
    CPU time for initialize scf      0.06 sec, wall time      0.06 sec
  HOMO = -0.236217985954491  LUMO = 114.336674011189
  mo_energy =
[-1.20170542e+02 -1.22483486e+01 -6.65234405e+00 -6.65234405e+00
 -6.65234405e+00 -1.16316077e+00 -2.36217986e-01 -2.36217986e-01
 -2.36217986e-01  1.14336674e+02  9.96433544e+02  7.26568115e+03
  3.94049418e+04]
E1 = -706.3631576378477  E_coul = 198.9338412018949
cycle= 1 E= -507.429316435953  delta_E= -2.27e-13  |g|= 4.22e-11  |ddm|= 6.81e-11
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -706.3631576378477  E_coul = 198.9338412018949
  HOMO = -0.236217985953813  LUMO = 114.336674011208
  mo_energy =
[-1.20170542e+02 -1.22483486e+01 -6.65234405e+00 -6.65234405e+00
 -6.65234405e+00 -1.16316077e+00 -2.36217986e-01 -2.36217986e-01
 -2.36217986e-01  1.14336674e+02  9.96433544e+02  7.26568115e+03
  3.94049418e+04]
E1 = -706.3631576378498  E_coul = 198.93384120189697
Extra cycle  E= -507.429316435953  delta_E=    0  |g|= 8.59e-12  |ddm|= 1.03e-12
    CPU time for scf_cycle      0.13 sec, wall time      0.13 sec
exp = [1.81905018e+04 4.54761704e+03 6.86349546e+02 1.55450506e+02
 4.28892757e+01 4.75129924e+00 3.91723047e-01 8.59659306e+00
 4.90681650e-01]
grad_E = [-6.64296350e-06  1.24008926e-04 -5.71937844e-04  7.68219099e-04
  6.93513662e-04 -1.95630655e-04 -1.07329244e-03 -2.24295880e-04
 -2.88114008e-04]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((9, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.5476253398322024e+03,6.8630785798847160e+02,1.5555024230205126e+02,4.2742815896802767e+01,4.7505784169783016e+00,3.9162204394177752e-01,8.5974230426361959e+00,4.9072756124177219e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "7s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:53:23 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  18190.5018326        1
[INPUT] 0    0    [1    /1   ]  4547.61644905        1
[INPUT] 0    0    [1    /1   ]  686.352369911        1
[INPUT] 0    0    [1    /1   ]  155.445474857        1
[INPUT] 0    0    [1    /1   ]  42.8914310093        1
[INPUT] 0    0    [1    /1   ]  4.75172410494        1
[INPUT] 0    0    [1    /1   ]  0.391977433563       1
[INPUT] 1    0    [1    /1   ]  8.59746082606        1
[INPUT] 1    0    [1    /1   ]  0.490711601248       1

nuclear repulsion = 0
number of shells = 9
number of NR pGTOs = 13
number of NR cGTOs = 13
basis = {'Ar': [[0, [18190.501832554663, 1.0]], [0, [4547.616449054379, 1.0]], [0, [686.3523699108711, 1.0]], [0, [155.4454748573929, 1.0]], [0, [42.8914310092725, 1.0]], [0, [4.751724104935526, 1.0]], [0, [0.3919774335634404, 1.0]], [1, [8.597460826061639, 1.0]], [1, [0.4907116012479075, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [18190.50183255]
bas 1, expnt(s) = [4547.61644905]
bas 2, expnt(s) = [686.35236991]
bas 3, expnt(s) = [155.44547486]
bas 4, expnt(s) = [42.89143101]
bas 5, expnt(s) = [4.7517241]
bas 6, expnt(s) = [0.39197743]
bas 7, expnt(s) = [8.59746083]
bas 8, expnt(s) = [0.4907116]
CPU time:        31.10
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  1  1  1  0 38 39  0]
 [ 0  1  1  1  0 40 41  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.81905018e+04 3.95729599e+03 4.54761645e+03 1.39911333e+03
 6.86352370e+02 3.38785939e+02 1.55445475e+02 1.11224020e+02
 4.28914310e+01 4.23441019e+01 4.75172410e+00 8.13117741e+00
 3.91977434e-01 1.25158636e+00 8.59746083e+00 4.29484159e+01
 4.90711601e-01 1.19816685e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.31939290265795
cond(S) = 28.621986748492713
E1 = -688.9295974206882  E_coul = 184.92666013433512
init E= -504.002937286353
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.680998493465781  LUMO = 112.987290921118
  mo_energy =
[-1.21548726e+02 -1.32764498e+01 -7.61997335e+00 -7.61997335e+00
 -7.61997335e+00 -1.65121737e+00 -6.80998493e-01 -6.80998493e-01
 -6.80998493e-01  1.12987291e+02  9.95087572e+02  7.26450407e+03
  3.94038946e+04]
E1 = -706.3963276329329  E_coul = 198.96728251214174
cycle= 1 E= -507.429045120791  delta_E= -3.43  |g|= 0.298  |ddm|=  0.3
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.396607
diis-c [-0.15729747  1.        ]
  HOMO = -0.23588934211808  LUMO = 114.34622395994
  mo_energy =
[-1.20162756e+02 -1.22467576e+01 -6.65030263e+00 -6.65030263e+00
 -6.65030263e+00 -1.16292742e+00 -2.35889342e-01 -2.35889342e-01
 -2.35889342e-01  1.14346224e+02  9.96442084e+02  7.26569575e+03
  3.94049582e+04]
E1 = -706.3756682614274  E_coul = 198.94634835163004
cycle= 2 E= -507.429319909797  delta_E= -0.000275  |g|= 0.00371  |ddm|= 0.00899
    CPU time for cycle= 2      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.00390435
diis-c [-1.48953209e-05 -1.49106605e-03  1.00149107e+00]
  HOMO = -0.235994920168188  LUMO = 114.343450202664
  mo_energy =
[-1.20168746e+02 -1.22474915e+01 -6.65143744e+00 -6.65143744e+00
 -6.65143744e+00 -1.16296694e+00 -2.35994920e-01 -2.35994920e-01
 -2.35994920e-01  1.14343450e+02  9.96433461e+02  7.26568277e+03
  3.94049435e+04]
E1 = -706.3754302951958  E_coul = 198.94611033317145
cycle= 3 E= -507.429319962024  delta_E= -5.22e-08  |g|= 6.04e-05  |ddm|= 0.000109
    CPU time for cycle= 3      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=8.02603e-05
diis-c [-1.45839121e-10  3.91997685e-05 -2.10138334e-02  1.02097463e+00]
  HOMO = -0.235995933285227  LUMO = 114.343426667967
  mo_energy =
[-1.20168802e+02 -1.22474988e+01 -6.65145026e+00 -6.65145026e+00
 -6.65145026e+00 -1.16296723e+00 -2.35995933e-01 -2.35995933e-01
 -2.35995933e-01  1.14343427e+02  9.96433403e+02  7.26568270e+03
  3.94049435e+04]
E1 = -706.3754273128379  E_coul = 198.94610735080084
cycle= 4 E= -507.429319962037  delta_E= -1.27e-11  |g|= 1.7e-07  |ddm|= 1.49e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.3754273128379  E_coul = 198.94610735080084
  HOMO = -0.23599592758737  LUMO = 114.343426845507
  mo_energy =
[-1.20168802e+02 -1.22474988e+01 -6.65145020e+00 -6.65145020e+00
 -6.65145020e+00 -1.16296723e+00 -2.35995928e-01 -2.35995928e-01
 -2.35995928e-01  1.14343427e+02  9.96433404e+02  7.26568271e+03
  3.94049435e+04]
E1 = -706.3754273252825  E_coul = 198.94610736324574
Extra cycle  E= -507.429319962037  delta_E= 2.84e-13  |g|= 2.48e-09  |ddm|= 5.16e-09
    CPU time for scf_cycle      0.09 sec, wall time      0.10 sec
exp = [1.81905018e+04 4.54761645e+03 6.86352370e+02 1.55445475e+02
 4.28914310e+01 4.75172410e+00 3.91977434e-01 8.59746083e+00
 4.90711601e-01]
E = -507.4293199620368
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((9, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.5476253398322024e+03,6.8630785798847160e+02,1.5555024230205126e+02,4.2742815896802767e+01,4.7505784169783016e+00,3.9162204394177752e-01,8.5974230426361959e+00,4.9072756124177219e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "7s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:53:23 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  18190.5018326        1
[INPUT] 0    0    [1    /1   ]  4547.61644905        1
[INPUT] 0    0    [1    /1   ]  686.352369911        1
[INPUT] 0    0    [1    /1   ]  155.445474857        1
[INPUT] 0    0    [1    /1   ]  42.8914310093        1
[INPUT] 0    0    [1    /1   ]  4.75172410494        1
[INPUT] 0    0    [1    /1   ]  0.391977433563       1
[INPUT] 1    0    [1    /1   ]  8.59746082606        1
[INPUT] 1    0    [1    /1   ]  0.490711601248       1

nuclear repulsion = 0
number of shells = 9
number of NR pGTOs = 13
number of NR cGTOs = 13
basis = {'Ar': [[0, [18190.501832554663, 1.0]], [0, [4547.616449054379, 1.0]], [0, [686.3523699108711, 1.0]], [0, [155.4454748573929, 1.0]], [0, [42.8914310092725, 1.0]], [0, [4.751724104935526, 1.0]], [0, [0.3919774335634404, 1.0]], [1, [8.597460826061639, 1.0]], [1, [0.4907116012479075, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [18190.50183255]
bas 1, expnt(s) = [4547.61644905]
bas 2, expnt(s) = [686.35236991]
bas 3, expnt(s) = [155.44547486]
bas 4, expnt(s) = [42.89143101]
bas 5, expnt(s) = [4.7517241]
bas 6, expnt(s) = [0.39197743]
bas 7, expnt(s) = [8.59746083]
bas 8, expnt(s) = [0.4907116]
CPU time:        31.34
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  1  1  1  0 38 39  0]
 [ 0  1  1  1  0 40 41  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.81905018e+04 3.95729599e+03 4.54761645e+03 1.39911333e+03
 6.86352370e+02 3.38785939e+02 1.55445475e+02 1.11224020e+02
 4.28914310e+01 4.23441019e+01 4.75172410e+00 8.13117741e+00
 3.91977434e-01 1.25158636e+00 8.59746083e+00 4.29484159e+01
 4.90711601e-01 1.19816685e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.31939290265795
cond(S) = 28.621986748492713
E1 = -688.9295974206882  E_coul = 184.92666013433512
init E= -504.002937286353
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.680998493465781  LUMO = 112.987290921118
  mo_energy =
[-1.21548726e+02 -1.32764498e+01 -7.61997335e+00 -7.61997335e+00
 -7.61997335e+00 -1.65121737e+00 -6.80998493e-01 -6.80998493e-01
 -6.80998493e-01  1.12987291e+02  9.95087572e+02  7.26450407e+03
  3.94038946e+04]
E1 = -706.3963276329329  E_coul = 198.96728251214174
cycle= 1 E= -507.429045120791  delta_E= -3.43  |g|= 0.298  |ddm|=  0.3
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.396607
diis-c [-0.15729747  1.        ]
  HOMO = -0.23588934211808  LUMO = 114.34622395994
  mo_energy =
[-1.20162756e+02 -1.22467576e+01 -6.65030263e+00 -6.65030263e+00
 -6.65030263e+00 -1.16292742e+00 -2.35889342e-01 -2.35889342e-01
 -2.35889342e-01  1.14346224e+02  9.96442084e+02  7.26569575e+03
  3.94049582e+04]
E1 = -706.3756682614274  E_coul = 198.94634835163004
cycle= 2 E= -507.429319909797  delta_E= -0.000275  |g|= 0.00371  |ddm|= 0.00899
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00390435
diis-c [-1.48953209e-05 -1.49106605e-03  1.00149107e+00]
  HOMO = -0.235994920168188  LUMO = 114.343450202664
  mo_energy =
[-1.20168746e+02 -1.22474915e+01 -6.65143744e+00 -6.65143744e+00
 -6.65143744e+00 -1.16296694e+00 -2.35994920e-01 -2.35994920e-01
 -2.35994920e-01  1.14343450e+02  9.96433461e+02  7.26568277e+03
  3.94049435e+04]
E1 = -706.3754302951958  E_coul = 198.94611033317145
cycle= 3 E= -507.429319962024  delta_E= -5.22e-08  |g|= 6.04e-05  |ddm|= 0.000109
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=8.02603e-05
diis-c [-1.45839121e-10  3.91997685e-05 -2.10138334e-02  1.02097463e+00]
  HOMO = -0.235995933285227  LUMO = 114.343426667967
  mo_energy =
[-1.20168802e+02 -1.22474988e+01 -6.65145026e+00 -6.65145026e+00
 -6.65145026e+00 -1.16296723e+00 -2.35995933e-01 -2.35995933e-01
 -2.35995933e-01  1.14343427e+02  9.96433403e+02  7.26568270e+03
  3.94049435e+04]
E1 = -706.3754273128379  E_coul = 198.94610735080084
cycle= 4 E= -507.429319962037  delta_E= -1.27e-11  |g|= 1.7e-07  |ddm|= 1.49e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.3754273128379  E_coul = 198.94610735080084
  HOMO = -0.23599592758737  LUMO = 114.343426845507
  mo_energy =
[-1.20168802e+02 -1.22474988e+01 -6.65145020e+00 -6.65145020e+00
 -6.65145020e+00 -1.16296723e+00 -2.35995928e-01 -2.35995928e-01
 -2.35995928e-01  1.14343427e+02  9.96433404e+02  7.26568271e+03
  3.94049435e+04]
E1 = -706.3754273252825  E_coul = 198.94610736324574
Extra cycle  E= -507.429319962037  delta_E= 2.84e-13  |g|= 2.48e-09  |ddm|= 5.16e-09
    CPU time for scf_cycle      0.09 sec, wall time      0.10 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 28.621986748492713
E1 = -706.3754273252825  E_coul = 198.94610736324574
init E= -507.429319962037
    CPU time for initialize scf      0.06 sec, wall time      0.06 sec
  HOMO = -0.235995927531449  LUMO = 114.343426847215
  mo_energy =
[-1.20168802e+02 -1.22474988e+01 -6.65145020e+00 -6.65145020e+00
 -6.65145020e+00 -1.16296723e+00 -2.35995928e-01 -2.35995928e-01
 -2.35995928e-01  1.14343427e+02  9.96433404e+02  7.26568271e+03
  3.94049435e+04]
E1 = -706.3754273254364  E_coul = 198.94610736339934
cycle= 1 E= -507.429319962037  delta_E= -2.27e-13  |g|= 4.21e-11  |ddm|= 6.82e-11
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -706.3754273254364  E_coul = 198.94610736339934
  HOMO = -0.235995927530774  LUMO = 114.343426847233
  mo_energy =
[-1.20168802e+02 -1.22474988e+01 -6.65145020e+00 -6.65145020e+00
 -6.65145020e+00 -1.16296723e+00 -2.35995928e-01 -2.35995928e-01
 -2.35995928e-01  1.14343427e+02  9.96433404e+02  7.26568271e+03
  3.94049435e+04]
E1 = -706.3754273254383  E_coul = 198.94610736340155
Extra cycle  E= -507.429319962037  delta_E= 2.84e-13  |g|= 2.23e-12  |ddm|= 1.04e-12
    CPU time for scf_cycle      0.13 sec, wall time      0.13 sec
exp = [1.81905018e+04 4.54761645e+03 6.86352370e+02 1.55445475e+02
 4.28914310e+01 4.75172410e+00 3.91977434e-01 8.59746083e+00
 4.90711601e-01]
grad_E = [-6.64275923e-06  1.23980288e-04 -5.70396267e-04  7.50424180e-04
  7.56887871e-04  2.39692399e-04  3.16288351e-03  5.35108887e-04
  7.87905371e-04]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((9, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.5476253398322024e+03,6.8630785798847160e+02,1.5555024230205126e+02,4.2742815896802767e+01,4.7505784169783016e+00,3.9162204394177752e-01,8.5974230426361959e+00,4.9072756124177219e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "7s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:53:26 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  18190.5018952        1
[INPUT] 0    0    [1    /1   ]  4547.61527788        1
[INPUT] 0    0    [1    /1   ]  686.357905779        1
[INPUT] 0    0    [1    /1   ]  155.436313643        1
[INPUT] 0    0    [1    /1   ]  42.8924977826        1
[INPUT] 0    0    [1    /1   ]  4.75220663836        1
[INPUT] 0    0    [1    /1   ]  0.392258936427       1
[INPUT] 1    0    [1    /1   ]  8.59845572318        1
[INPUT] 1    0    [1    /1   ]  0.490745770062       1

nuclear repulsion = 0
number of shells = 9
number of NR pGTOs = 13
number of NR cGTOs = 13
basis = {'Ar': [[0, [18190.501895176556, 1.0]], [0, [4547.615277877015, 1.0]], [0, [686.3579057791154, 1.0]], [0, [155.43631364301396, 1.0]], [0, [42.89249778255359, 1.0]], [0, [4.752206638356428, 1.0]], [0, [0.3922589364269437, 1.0]], [1, [8.59845572318336, 1.0]], [1, [0.4907457700621129, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [18190.50189518]
bas 1, expnt(s) = [4547.61527788]
bas 2, expnt(s) = [686.35790578]
bas 3, expnt(s) = [155.43631364]
bas 4, expnt(s) = [42.89249778]
bas 5, expnt(s) = [4.75220664]
bas 6, expnt(s) = [0.39225894]
bas 7, expnt(s) = [8.59845572]
bas 8, expnt(s) = [0.49074577]
CPU time:        34.19
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  1  1  1  0 38 39  0]
 [ 0  1  1  1  0 40 41  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.81905019e+04 3.95729600e+03 4.54761528e+03 1.39911306e+03
 6.86357906e+02 3.38787989e+02 1.55436314e+02 1.11219104e+02
 4.28924978e+01 4.23448918e+01 4.75220664e+00 8.13179669e+00
 3.92258936e-01 1.25226043e+00 8.59845572e+00 4.29546284e+01
 4.90745770e-01 1.19827114e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319303363223476
cond(S) = 28.623469510483122
E1 = -688.9409545589724  E_coul = 184.93726668503405
init E= -504.003687873938
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.680836223751995  LUMO = 112.989618114416
  mo_energy =
[-1.21547203e+02 -1.32756628e+01 -7.61916874e+00 -7.61916874e+00
 -7.61916874e+00 -1.65117543e+00 -6.80836224e-01 -6.80836224e-01
 -6.80836224e-01  1.12989618e+02  9.95073771e+02  7.26449573e+03
  3.94038877e+04]
E1 = -706.4101183908712  E_coul = 198.9810667224098
cycle= 1 E= -507.429051668461  delta_E= -3.43  |g|= 0.298  |ddm|= 0.299
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.396644
diis-c [-0.15732665  1.        ]
  HOMO = -0.235641229224005  LUMO = 114.348858696009
  mo_energy =
[-1.20160806e+02 -1.22457947e+01 -6.64929817e+00 -6.64929817e+00
 -6.64929817e+00 -1.16270947e+00 -2.35641229e-01 -2.35641229e-01
 -2.35641229e-01  1.14348859e+02  9.96428796e+02  7.26568799e+03
  3.94049520e+04]
E1 = -706.3894606880122  E_coul = 198.96013433505993
cycle= 2 E= -507.429326352952  delta_E= -0.000275  |g|= 0.00371  |ddm|= 0.00899
    CPU time for cycle= 2      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.00390316
diis-c [-1.48861260e-05 -1.49061635e-03  1.00149062e+00]
  HOMO = -0.23574682447702  LUMO = 114.346085306795
  mo_energy =
[-1.20166795e+02 -1.22465285e+01 -6.65043287e+00 -6.65043287e+00
 -6.65043287e+00 -1.16274902e+00 -2.35746824e-01 -2.35746824e-01
 -2.35746824e-01  1.14346085e+02  9.96420174e+02  7.26567501e+03
  3.94049373e+04]
E1 = -706.3892227406945  E_coul = 198.95989633553262
cycle= 3 E= -507.429326405162  delta_E= -5.22e-08  |g|= 6.04e-05  |ddm|= 0.000109
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=8.02454e-05
diis-c [-1.45804510e-10  3.92241504e-05 -2.10163152e-02  1.02097709e+00]
  HOMO = -0.2357478379207  LUMO = 114.346061773593
  mo_energy =
[-1.20166851e+02 -1.22465359e+01 -6.65044569e+00 -6.65044569e+00
 -6.65044569e+00 -1.16274931e+00 -2.35747838e-01 -2.35747838e-01
 -2.35747838e-01  1.14346062e+02  9.96420116e+02  7.26567494e+03
  3.94049373e+04]
E1 = -706.3892197584506  E_coul = 198.95989335327664
cycle= 4 E= -507.429326405174  delta_E= -1.21e-11  |g|= 1.7e-07  |ddm|= 1.49e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.3892197584506  E_coul = 198.95989335327664
  HOMO = -0.235747832221905  LUMO = 114.346061951091
  mo_energy =
[-1.20166851e+02 -1.22465358e+01 -6.65044563e+00 -6.65044563e+00
 -6.65044563e+00 -1.16274931e+00 -2.35747832e-01 -2.35747832e-01
 -2.35747832e-01  1.14346062e+02  9.96420117e+02  7.26567494e+03
  3.94049373e+04]
E1 = -706.389219770895  E_coul = 198.95989336572077
Extra cycle  E= -507.429326405174  delta_E= -2.84e-13  |g|= 2.48e-09  |ddm|= 5.16e-09
    CPU time for scf_cycle      0.09 sec, wall time      0.10 sec
exp = [1.81905019e+04 4.54761528e+03 6.86357906e+02 1.55436314e+02
 4.28924978e+01 4.75220664e+00 3.92258936e-01 8.59845572e+00
 4.90745770e-01]
E = -507.42932640517427
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((9, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.5476253398322024e+03,6.8630785798847160e+02,1.5555024230205126e+02,4.2742815896802767e+01,4.7505784169783016e+00,3.9162204394177752e-01,8.5974230426361959e+00,4.9072756124177219e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "7s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:53:26 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  18190.5018952        1
[INPUT] 0    0    [1    /1   ]  4547.61527788        1
[INPUT] 0    0    [1    /1   ]  686.357905779        1
[INPUT] 0    0    [1    /1   ]  155.436313643        1
[INPUT] 0    0    [1    /1   ]  42.8924977826        1
[INPUT] 0    0    [1    /1   ]  4.75220663836        1
[INPUT] 0    0    [1    /1   ]  0.392258936427       1
[INPUT] 1    0    [1    /1   ]  8.59845572318        1
[INPUT] 1    0    [1    /1   ]  0.490745770062       1

nuclear repulsion = 0
number of shells = 9
number of NR pGTOs = 13
number of NR cGTOs = 13
basis = {'Ar': [[0, [18190.501895176556, 1.0]], [0, [4547.615277877015, 1.0]], [0, [686.3579057791154, 1.0]], [0, [155.43631364301396, 1.0]], [0, [42.89249778255359, 1.0]], [0, [4.752206638356428, 1.0]], [0, [0.3922589364269437, 1.0]], [1, [8.59845572318336, 1.0]], [1, [0.4907457700621129, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [18190.50189518]
bas 1, expnt(s) = [4547.61527788]
bas 2, expnt(s) = [686.35790578]
bas 3, expnt(s) = [155.43631364]
bas 4, expnt(s) = [42.89249778]
bas 5, expnt(s) = [4.75220664]
bas 6, expnt(s) = [0.39225894]
bas 7, expnt(s) = [8.59845572]
bas 8, expnt(s) = [0.49074577]
CPU time:        34.46
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  1  1  1  0 38 39  0]
 [ 0  1  1  1  0 40 41  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.81905019e+04 3.95729600e+03 4.54761528e+03 1.39911306e+03
 6.86357906e+02 3.38787989e+02 1.55436314e+02 1.11219104e+02
 4.28924978e+01 4.23448918e+01 4.75220664e+00 8.13179669e+00
 3.92258936e-01 1.25226043e+00 8.59845572e+00 4.29546284e+01
 4.90745770e-01 1.19827114e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319303363223476
cond(S) = 28.623469510483122
E1 = -688.9409545589724  E_coul = 184.93726668503405
init E= -504.003687873938
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.680836223751995  LUMO = 112.989618114416
  mo_energy =
[-1.21547203e+02 -1.32756628e+01 -7.61916874e+00 -7.61916874e+00
 -7.61916874e+00 -1.65117543e+00 -6.80836224e-01 -6.80836224e-01
 -6.80836224e-01  1.12989618e+02  9.95073771e+02  7.26449573e+03
  3.94038877e+04]
E1 = -706.4101183908712  E_coul = 198.9810667224098
cycle= 1 E= -507.429051668461  delta_E= -3.43  |g|= 0.298  |ddm|= 0.299
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.396644
diis-c [-0.15732665  1.        ]
  HOMO = -0.235641229224005  LUMO = 114.348858696009
  mo_energy =
[-1.20160806e+02 -1.22457947e+01 -6.64929817e+00 -6.64929817e+00
 -6.64929817e+00 -1.16270947e+00 -2.35641229e-01 -2.35641229e-01
 -2.35641229e-01  1.14348859e+02  9.96428796e+02  7.26568799e+03
  3.94049520e+04]
E1 = -706.3894606880122  E_coul = 198.96013433505993
cycle= 2 E= -507.429326352952  delta_E= -0.000275  |g|= 0.00371  |ddm|= 0.00899
    CPU time for cycle= 2      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.00390316
diis-c [-1.48861260e-05 -1.49061635e-03  1.00149062e+00]
  HOMO = -0.23574682447702  LUMO = 114.346085306795
  mo_energy =
[-1.20166795e+02 -1.22465285e+01 -6.65043287e+00 -6.65043287e+00
 -6.65043287e+00 -1.16274902e+00 -2.35746824e-01 -2.35746824e-01
 -2.35746824e-01  1.14346085e+02  9.96420174e+02  7.26567501e+03
  3.94049373e+04]
E1 = -706.3892227406945  E_coul = 198.95989633553262
cycle= 3 E= -507.429326405162  delta_E= -5.22e-08  |g|= 6.04e-05  |ddm|= 0.000109
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=8.02454e-05
diis-c [-1.45804510e-10  3.92241504e-05 -2.10163152e-02  1.02097709e+00]
  HOMO = -0.2357478379207  LUMO = 114.346061773593
  mo_energy =
[-1.20166851e+02 -1.22465359e+01 -6.65044569e+00 -6.65044569e+00
 -6.65044569e+00 -1.16274931e+00 -2.35747838e-01 -2.35747838e-01
 -2.35747838e-01  1.14346062e+02  9.96420116e+02  7.26567494e+03
  3.94049373e+04]
E1 = -706.3892197584506  E_coul = 198.95989335327664
cycle= 4 E= -507.429326405174  delta_E= -1.21e-11  |g|= 1.7e-07  |ddm|= 1.49e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.3892197584506  E_coul = 198.95989335327664
  HOMO = -0.235747832221905  LUMO = 114.346061951091
  mo_energy =
[-1.20166851e+02 -1.22465358e+01 -6.65044563e+00 -6.65044563e+00
 -6.65044563e+00 -1.16274931e+00 -2.35747832e-01 -2.35747832e-01
 -2.35747832e-01  1.14346062e+02  9.96420117e+02  7.26567494e+03
  3.94049373e+04]
E1 = -706.389219770895  E_coul = 198.95989336572077
Extra cycle  E= -507.429326405174  delta_E= -2.84e-13  |g|= 2.48e-09  |ddm|= 5.16e-09
    CPU time for scf_cycle      0.09 sec, wall time      0.10 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 28.623469510483122
E1 = -706.389219770895  E_coul = 198.95989336572077
init E= -507.429326405174
    CPU time for initialize scf      0.06 sec, wall time      0.06 sec
  HOMO = -0.235747832165966  LUMO = 114.346061952798
  mo_energy =
[-1.20166851e+02 -1.22465358e+01 -6.65044563e+00 -6.65044563e+00
 -6.65044563e+00 -1.16274931e+00 -2.35747832e-01 -2.35747832e-01
 -2.35747832e-01  1.14346062e+02  9.96420117e+02  7.26567494e+03
  3.94049373e+04]
E1 = -706.3892197710485  E_coul = 198.95989336587445
cycle= 1 E= -507.429326405174  delta_E= 2.27e-13  |g|= 4.27e-11  |ddm|= 6.81e-11
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -706.3892197710485  E_coul = 198.95989336587445
  HOMO = -0.23574783216529  LUMO = 114.346061952817
  mo_energy =
[-1.20166851e+02 -1.22465358e+01 -6.65044563e+00 -6.65044563e+00
 -6.65044563e+00 -1.16274931e+00 -2.35747832e-01 -2.35747832e-01
 -2.35747832e-01  1.14346062e+02  9.96420117e+02  7.26567494e+03
  3.94049373e+04]
E1 = -706.389219771051  E_coul = 198.95989336587678
Extra cycle  E= -507.429326405174  delta_E= -1.71e-13  |g|= 4.59e-12  |ddm|= 1.05e-12
    CPU time for scf_cycle      0.13 sec, wall time      0.13 sec
exp = [1.81905019e+04 4.54761528e+03 6.86357906e+02 1.55436314e+02
 4.28924978e+01 4.75220664e+00 3.92258936e-01 8.59845572e+00
 4.90745770e-01]
grad_E = [-6.64245218e-06  1.23940427e-04 -5.68394875e-04  7.30345060e-04
  8.19237413e-04  7.30734455e-04  7.85809522e-03  1.40249436e-03
  1.98357152e-03]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((9, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.5476253398322024e+03,6.8630785798847160e+02,1.5555024230205126e+02,4.2742815896802767e+01,4.7505784169783016e+00,3.9162204394177752e-01,8.5974230426361959e+00,4.9072756124177219e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "7s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:53:29 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  18190.5020923        1
[INPUT] 0    0    [1    /1   ]  4547.61159284        1
[INPUT] 0    0    [1    /1   ]  686.375244958        1
[INPUT] 0    0    [1    /1   ]  155.408592978        1
[INPUT] 0    0    [1    /1   ]  42.8914895823        1
[INPUT] 0    0    [1    /1   ]  4.75310212404        1
[INPUT] 0    0    [1    /1   ]  0.392776829372       1
[INPUT] 1    0    [1    /1   ]  8.60030656215        1
[INPUT] 1    0    [1    /1   ]  0.490809266246       1

nuclear repulsion = 0
number of shells = 9
number of NR pGTOs = 13
number of NR cGTOs = 13
basis = {'Ar': [[0, [18190.50209228179, 1.0]], [0, [4547.611592838314, 1.0]], [0, [686.3752449579555, 1.0]], [0, [155.4085929781365, 1.0]], [0, [42.891489582341435, 1.0]], [0, [4.753102124036028, 1.0]], [0, [0.39277682937175035, 1.0]], [1, [8.60030656215181, 1.0]], [1, [0.4908092662456502, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [18190.50209228]
bas 1, expnt(s) = [4547.61159284]
bas 2, expnt(s) = [686.37524496]
bas 3, expnt(s) = [155.40859298]
bas 4, expnt(s) = [42.89148958]
bas 5, expnt(s) = [4.75310212]
bas 6, expnt(s) = [0.39277683]
bas 7, expnt(s) = [8.60030656]
bas 8, expnt(s) = [0.49080927]
CPU time:        37.29
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  1  1  1  0 38 39  0]
 [ 0  1  1  1  0 40 41  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.81905021e+04 3.95729603e+03 4.54761159e+03 1.39911221e+03
 6.86375245e+02 3.38794408e+02 1.55408593e+02 1.11204227e+02
 4.28914896e+01 4.23441453e+01 4.75310212e+00 8.13294590e+00
 3.92776829e-01 1.25350023e+00 8.60030656e+00 4.29661864e+01
 4.90809266e-01 1.19846494e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319136056298444
cond(S) = 28.62436754765554
E1 = -688.9619488202466  E_coul = 184.95684525336776
init E= -504.005103566879
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.680538369291954  LUMO = 112.981446672817
  mo_energy =
[-1.21544400e+02 -1.32742002e+01 -7.61768411e+00 -7.61768411e+00
 -7.61768411e+00 -1.65109518e+00 -6.80538369e-01 -6.80538369e-01
 -6.80538369e-01  1.12981447e+02  9.95012172e+02  7.26445449e+03
  3.94038531e+04]
E1 = -706.4355757271991  E_coul = 199.00650475690063
cycle= 1 E= -507.429070970298  delta_E= -3.42  |g|= 0.297  |ddm|= 0.299
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.396699
diis-c [-0.15736989  1.        ]
  HOMO = -0.23518365964692  LUMO = 114.341242654382
  mo_energy =
[-1.20157224e+02 -1.22440070e+01 -6.64744398e+00 -6.64744398e+00
 -6.64744398e+00 -1.16230441e+00 -2.35183660e-01 -2.35183660e-01
 -2.35183660e-01  1.14341243e+02  9.96368123e+02  7.26564777e+03
  3.94049185e+04]
E1 = -706.414917386988  E_coul = 198.98557187175342
cycle= 2 E= -507.429345515235  delta_E= -0.000275  |g|= 0.00371  |ddm|= 0.00899
    CPU time for cycle= 2      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.00390134
diis-c [-1.48724040e-05 -1.48938750e-03  1.00148939e+00]
  HOMO = -0.235289308732712  LUMO = 114.338469603503
  mo_energy =
[-1.20163213e+02 -1.22447409e+01 -6.64857871e+00 -6.64857871e+00
 -6.64857871e+00 -1.16234402e+00 -2.35289309e-01 -2.35289309e-01
 -2.35289309e-01  1.14338470e+02  9.96359500e+02  7.26563479e+03
  3.94049038e+04]
E1 = -706.4146794145099  E_coul = 198.9853338470823
cycle= 3 E= -507.429345567428  delta_E= -5.22e-08  |g|= 6.04e-05  |ddm|= 0.000109
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=8.0233e-05
diis-c [-1.45789709e-10  3.92701755e-05 -2.10226129e-02  1.02098334e+00]
  HOMO = -0.235290323110406  LUMO = 114.338446066314
  mo_energy =
[-1.20163270e+02 -1.22447483e+01 -6.64859153e+00 -6.64859153e+00
 -6.64859153e+00 -1.16234431e+00 -2.35290323e-01 -2.35290323e-01
 -2.35290323e-01  1.14338446e+02  9.96359442e+02  7.26563472e+03
  3.94049037e+04]
E1 = -706.4146764313695  E_coul = 198.9853308639296
cycle= 4 E= -507.42934556744  delta_E= -1.23e-11  |g|= 1.7e-07  |ddm|= 1.49e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.4146764313695  E_coul = 198.9853308639296
  HOMO = -0.235290317407623  LUMO = 114.338446243783
  mo_energy =
[-1.20163269e+02 -1.22447482e+01 -6.64859147e+00 -6.64859147e+00
 -6.64859147e+00 -1.16234431e+00 -2.35290317e-01 -2.35290317e-01
 -2.35290317e-01  1.14338446e+02  9.96359443e+02  7.26563472e+03
  3.94049037e+04]
E1 = -706.414676443817  E_coul = 198.9853308763773
Extra cycle  E= -507.42934556744  delta_E= 1.71e-13  |g|= 2.48e-09  |ddm|= 5.17e-09
    CPU time for scf_cycle      0.09 sec, wall time      0.10 sec
exp = [1.81905021e+04 4.54761159e+03 6.86375245e+02 1.55408593e+02
 4.28914896e+01 4.75310212e+00 3.92776829e-01 8.60030656e+00
 4.90809266e-01]
E = -507.4293455674397
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((9, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.5476253398322024e+03,6.8630785798847160e+02,1.5555024230205126e+02,4.2742815896802767e+01,4.7505784169783016e+00,3.9162204394177752e-01,8.5974230426361959e+00,4.9072756124177219e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "7s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:53:29 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  18190.5020923        1
[INPUT] 0    0    [1    /1   ]  4547.61159284        1
[INPUT] 0    0    [1    /1   ]  686.375244958        1
[INPUT] 0    0    [1    /1   ]  155.408592978        1
[INPUT] 0    0    [1    /1   ]  42.8914895823        1
[INPUT] 0    0    [1    /1   ]  4.75310212404        1
[INPUT] 0    0    [1    /1   ]  0.392776829372       1
[INPUT] 1    0    [1    /1   ]  8.60030656215        1
[INPUT] 1    0    [1    /1   ]  0.490809266246       1

nuclear repulsion = 0
number of shells = 9
number of NR pGTOs = 13
number of NR cGTOs = 13
basis = {'Ar': [[0, [18190.50209228179, 1.0]], [0, [4547.611592838314, 1.0]], [0, [686.3752449579555, 1.0]], [0, [155.4085929781365, 1.0]], [0, [42.891489582341435, 1.0]], [0, [4.753102124036028, 1.0]], [0, [0.39277682937175035, 1.0]], [1, [8.60030656215181, 1.0]], [1, [0.4908092662456502, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [18190.50209228]
bas 1, expnt(s) = [4547.61159284]
bas 2, expnt(s) = [686.37524496]
bas 3, expnt(s) = [155.40859298]
bas 4, expnt(s) = [42.89148958]
bas 5, expnt(s) = [4.75310212]
bas 6, expnt(s) = [0.39277683]
bas 7, expnt(s) = [8.60030656]
bas 8, expnt(s) = [0.49080927]
CPU time:        37.57
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  1  1  1  0 38 39  0]
 [ 0  1  1  1  0 40 41  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.81905021e+04 3.95729603e+03 4.54761159e+03 1.39911221e+03
 6.86375245e+02 3.38794408e+02 1.55408593e+02 1.11204227e+02
 4.28914896e+01 4.23441453e+01 4.75310212e+00 8.13294590e+00
 3.92776829e-01 1.25350023e+00 8.60030656e+00 4.29661864e+01
 4.90809266e-01 1.19846494e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319136056298444
cond(S) = 28.62436754765554
E1 = -688.9619488202466  E_coul = 184.95684525336776
init E= -504.005103566879
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.680538369291954  LUMO = 112.981446672817
  mo_energy =
[-1.21544400e+02 -1.32742002e+01 -7.61768411e+00 -7.61768411e+00
 -7.61768411e+00 -1.65109518e+00 -6.80538369e-01 -6.80538369e-01
 -6.80538369e-01  1.12981447e+02  9.95012172e+02  7.26445449e+03
  3.94038531e+04]
E1 = -706.4355757271991  E_coul = 199.00650475690063
cycle= 1 E= -507.429070970298  delta_E= -3.42  |g|= 0.297  |ddm|= 0.299
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.396699
diis-c [-0.15736989  1.        ]
  HOMO = -0.23518365964692  LUMO = 114.341242654382
  mo_energy =
[-1.20157224e+02 -1.22440070e+01 -6.64744398e+00 -6.64744398e+00
 -6.64744398e+00 -1.16230441e+00 -2.35183660e-01 -2.35183660e-01
 -2.35183660e-01  1.14341243e+02  9.96368123e+02  7.26564777e+03
  3.94049185e+04]
E1 = -706.414917386988  E_coul = 198.98557187175342
cycle= 2 E= -507.429345515235  delta_E= -0.000275  |g|= 0.00371  |ddm|= 0.00899
    CPU time for cycle= 2      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.00390134
diis-c [-1.48724040e-05 -1.48938750e-03  1.00148939e+00]
  HOMO = -0.235289308732712  LUMO = 114.338469603503
  mo_energy =
[-1.20163213e+02 -1.22447409e+01 -6.64857871e+00 -6.64857871e+00
 -6.64857871e+00 -1.16234402e+00 -2.35289309e-01 -2.35289309e-01
 -2.35289309e-01  1.14338470e+02  9.96359500e+02  7.26563479e+03
  3.94049038e+04]
E1 = -706.4146794145099  E_coul = 198.9853338470823
cycle= 3 E= -507.429345567428  delta_E= -5.22e-08  |g|= 6.04e-05  |ddm|= 0.000109
    CPU time for cycle= 3      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=8.0233e-05
diis-c [-1.45789709e-10  3.92701755e-05 -2.10226129e-02  1.02098334e+00]
  HOMO = -0.235290323110406  LUMO = 114.338446066314
  mo_energy =
[-1.20163270e+02 -1.22447483e+01 -6.64859153e+00 -6.64859153e+00
 -6.64859153e+00 -1.16234431e+00 -2.35290323e-01 -2.35290323e-01
 -2.35290323e-01  1.14338446e+02  9.96359442e+02  7.26563472e+03
  3.94049037e+04]
E1 = -706.4146764313695  E_coul = 198.9853308639296
cycle= 4 E= -507.42934556744  delta_E= -1.23e-11  |g|= 1.7e-07  |ddm|= 1.49e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.4146764313695  E_coul = 198.9853308639296
  HOMO = -0.235290317407623  LUMO = 114.338446243783
  mo_energy =
[-1.20163269e+02 -1.22447482e+01 -6.64859147e+00 -6.64859147e+00
 -6.64859147e+00 -1.16234431e+00 -2.35290317e-01 -2.35290317e-01
 -2.35290317e-01  1.14338446e+02  9.96359443e+02  7.26563472e+03
  3.94049037e+04]
E1 = -706.414676443817  E_coul = 198.9853308763773
Extra cycle  E= -507.42934556744  delta_E= 1.71e-13  |g|= 2.48e-09  |ddm|= 5.17e-09
    CPU time for scf_cycle      0.09 sec, wall time      0.10 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 28.62436754765554
E1 = -706.414676443817  E_coul = 198.9853308763773
init E= -507.42934556744
    CPU time for initialize scf      0.06 sec, wall time      0.06 sec
  HOMO = -0.235290317351637  LUMO = 114.338446245489
  mo_energy =
[-1.20163269e+02 -1.22447482e+01 -6.64859147e+00 -6.64859147e+00
 -6.64859147e+00 -1.16234431e+00 -2.35290317e-01 -2.35290317e-01
 -2.35290317e-01  1.14338446e+02  9.96359443e+02  7.26563472e+03
  3.94049037e+04]
E1 = -706.4146764439707  E_coul = 198.98533087653124
cycle= 1 E= -507.429345567439  delta_E= 2.27e-13  |g|= 4.2e-11  |ddm|= 6.82e-11
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -706.4146764439707  E_coul = 198.98533087653124
  HOMO = -0.235290317350954  LUMO = 114.338446245509
  mo_energy =
[-1.20163269e+02 -1.22447482e+01 -6.64859147e+00 -6.64859147e+00
 -6.64859147e+00 -1.16234431e+00 -2.35290317e-01 -2.35290317e-01
 -2.35290317e-01  1.14338446e+02  9.96359443e+02  7.26563472e+03
  3.94049037e+04]
E1 = -706.4146764439729  E_coul = 198.9853308765333
Extra cycle  E= -507.42934556744  delta_E= -5.68e-14  |g|= 5.35e-12  |ddm|= 1.03e-12
    CPU time for scf_cycle      0.13 sec, wall time      0.13 sec
exp = [1.81905021e+04 4.54761159e+03 6.86375245e+02 1.55408593e+02
 4.28914896e+01 4.75310212e+00 3.92776829e-01 8.60030656e+00
 4.90809266e-01]
grad_E = [-6.64160404e-06  1.23837847e-04 -5.63535342e-04  6.88016025e-04
  9.28341594e-04  1.63639448e-03  1.64979791e-02  3.01220364e-03
  4.18494533e-03]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((9, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.5476253398322024e+03,6.8630785798847160e+02,1.5555024230205126e+02,4.2742815896802767e+01,4.7505784169783016e+00,3.9162204394177752e-01,8.5974230426361959e+00,4.9072756124177219e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "7s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:53:32 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  18190.5025855        1
[INPUT] 0    0    [1    /1   ]  4547.60237449        1
[INPUT] 0    0    [1    /1   ]  686.418503398        1
[INPUT] 0    0    [1    /1   ]  155.340852235        1
[INPUT] 0    0    [1    /1   ]  42.882694593         1
[INPUT] 0    0    [1    /1   ]  4.75442091211        1
[INPUT] 0    0    [1    /1   ]  0.393530226519       1
[INPUT] 1    0    [1    /1   ]  8.60301482344        1
[INPUT] 1    0    [1    /1   ]  0.49090220037        1

nuclear repulsion = 0
number of shells = 9
number of NR pGTOs = 13
number of NR cGTOs = 13
basis = {'Ar': [[0, [18190.502585455673, 1.0]], [0, [4547.602374486928, 1.0]], [0, [686.4185033982516, 1.0]], [0, [155.3408522354147, 1.0]], [0, [42.88269459302305, 1.0]], [0, [4.754420912108768, 1.0]], [0, [0.39353022651887776, 1.0]], [1, [8.603014823440434, 1.0]], [1, [0.49090220036992466, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [18190.50258546]
bas 1, expnt(s) = [4547.60237449]
bas 2, expnt(s) = [686.4185034]
bas 3, expnt(s) = [155.34085224]
bas 4, expnt(s) = [42.88269459]
bas 5, expnt(s) = [4.75442091]
bas 6, expnt(s) = [0.39353023]
bas 7, expnt(s) = [8.60301482]
bas 8, expnt(s) = [0.4909022]
CPU time:        40.41
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  1  1  1  0 38 39  0]
 [ 0  1  1  1  0 40 41  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.81905026e+04 3.95729611e+03 4.54760237e+03 1.39911009e+03
 6.86418503e+02 3.38810422e+02 1.55340852e+02 1.11167871e+02
 4.28826946e+01 4.23376331e+01 4.75442091e+00 8.13463826e+00
 3.93530227e-01 1.25530308e+00 8.60301482e+00 4.29830997e+01
 4.90902200e-01 1.19874861e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.318888051394126
cond(S) = 28.62115802671651
E1 = -688.9925469699874  E_coul = 184.98530194264762
init E= -504.00724502734
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.680107351780795  LUMO = 112.93849028204
  mo_energy =
[-1.21540359e+02 -1.32720513e+01 -7.61552653e+00 -7.61552653e+00
 -7.61552653e+00 -1.65097251e+00 -6.80107352e-01 -6.80107352e-01
 -6.80107352e-01  1.12938490e+02  9.94831755e+02  7.26432959e+03
  3.94037474e+04]
E1 = -706.4725929171805  E_coul = 199.04347579084893
cycle= 1 E= -507.429117126332  delta_E= -3.42  |g|= 0.297  |ddm|= 0.299
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.396746
diis-c [-0.15740704  1.        ]
  HOMO = -0.234517640114841  LUMO = 114.299064752511
  mo_energy =
[-1.20152068e+02 -1.22413852e+01 -6.64474728e+00 -6.64474728e+00
 -6.64474728e+00 -1.16170799e+00 -2.34517640e-01 -2.34517640e-01
 -2.34517640e-01  1.14299065e+02  9.96189001e+02  7.26552426e+03
  3.94048143e+04]
E1 = -706.4519245502655  E_coul = 199.022532952619
cycle= 2 E= -507.429391597646  delta_E= -0.000274  |g|= 0.00371  |ddm|= 0.009
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00389963
diis-c [-1.48602591e-05 -1.48666431e-03  1.00148666e+00]
  HOMO = -0.234623421621983  LUMO = 114.296291376094
  mo_energy =
[-1.20158060e+02 -1.22421195e+01 -6.64588262e+00 -6.64588262e+00
 -6.64588262e+00 -1.16174771e+00 -2.34623422e-01 -2.34623422e-01
 -2.34623422e-01  1.14296291e+02  9.96180375e+02  7.26551126e+03
  3.94047996e+04]
E1 = -706.4516863928797  E_coul = 199.02229474302365
cycle= 3 E= -507.429391649856  delta_E= -5.22e-08  |g|= 6.04e-05  |ddm|= 0.000109
    CPU time for cycle= 3      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=8.02522e-05
diis-c [-1.45887070e-10  3.93409083e-05 -2.10360705e-02  1.02099673e+00]
  HOMO = -0.234624438172404  LUMO = 114.296267816691
  mo_energy =
[-1.20158116e+02 -1.22421269e+01 -6.64589545e+00 -6.64589545e+00
 -6.64589545e+00 -1.16174800e+00 -2.34624438e-01 -2.34624438e-01
 -2.34624438e-01  1.14296268e+02  9.96180317e+02  7.26551120e+03
  3.94047995e+04]
E1 = -706.451683405695  E_coul = 199.0222917558265
cycle= 4 E= -507.429391649869  delta_E= -1.25e-11  |g|= 1.71e-07  |ddm|= 1.49e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.451683405695  E_coul = 199.0222917558265
  HOMO = -0.234624432458351  LUMO = 114.296267994221
  mo_energy =
[-1.20158116e+02 -1.22421269e+01 -6.64589539e+00 -6.64589539e+00
 -6.64589539e+00 -1.16174800e+00 -2.34624432e-01 -2.34624432e-01
 -2.34624432e-01  1.14296268e+02  9.96180317e+02  7.26551120e+03
  3.94047995e+04]
E1 = -706.4516834181608  E_coul = 199.02229176829218
Extra cycle  E= -507.429391649869  delta_E= -5.68e-14  |g|= 2.48e-09  |ddm|= 5.17e-09
    CPU time for scf_cycle      0.09 sec, wall time      0.10 sec
exp = [1.81905026e+04 4.54760237e+03 6.86418503e+02 1.55340852e+02
 4.28826946e+01 4.75442091e+00 3.93530227e-01 8.60301482e+00
 4.90902200e-01]
E = -507.4293916498686
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((9, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.5476253398322024e+03,6.8630785798847160e+02,1.5555024230205126e+02,4.2742815896802767e+01,4.7505784169783016e+00,3.9162204394177752e-01,8.5974230426361959e+00,4.9072756124177219e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "7s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:53:32 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  18190.5025855        1
[INPUT] 0    0    [1    /1   ]  4547.60237449        1
[INPUT] 0    0    [1    /1   ]  686.418503398        1
[INPUT] 0    0    [1    /1   ]  155.340852235        1
[INPUT] 0    0    [1    /1   ]  42.882694593         1
[INPUT] 0    0    [1    /1   ]  4.75442091211        1
[INPUT] 0    0    [1    /1   ]  0.393530226519       1
[INPUT] 1    0    [1    /1   ]  8.60301482344        1
[INPUT] 1    0    [1    /1   ]  0.49090220037        1

nuclear repulsion = 0
number of shells = 9
number of NR pGTOs = 13
number of NR cGTOs = 13
basis = {'Ar': [[0, [18190.502585455673, 1.0]], [0, [4547.602374486928, 1.0]], [0, [686.4185033982516, 1.0]], [0, [155.3408522354147, 1.0]], [0, [42.88269459302305, 1.0]], [0, [4.754420912108768, 1.0]], [0, [0.39353022651887776, 1.0]], [1, [8.603014823440434, 1.0]], [1, [0.49090220036992466, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [18190.50258546]
bas 1, expnt(s) = [4547.60237449]
bas 2, expnt(s) = [686.4185034]
bas 3, expnt(s) = [155.34085224]
bas 4, expnt(s) = [42.88269459]
bas 5, expnt(s) = [4.75442091]
bas 6, expnt(s) = [0.39353023]
bas 7, expnt(s) = [8.60301482]
bas 8, expnt(s) = [0.4909022]
CPU time:        40.70
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  1  1  1  0 38 39  0]
 [ 0  1  1  1  0 40 41  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.81905026e+04 3.95729611e+03 4.54760237e+03 1.39911009e+03
 6.86418503e+02 3.38810422e+02 1.55340852e+02 1.11167871e+02
 4.28826946e+01 4.23376331e+01 4.75442091e+00 8.13463826e+00
 3.93530227e-01 1.25530308e+00 8.60301482e+00 4.29830997e+01
 4.90902200e-01 1.19874861e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.318888051394126
cond(S) = 28.62115802671651
E1 = -688.9925469699874  E_coul = 184.98530194264762
init E= -504.00724502734
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.680107351780795  LUMO = 112.93849028204
  mo_energy =
[-1.21540359e+02 -1.32720513e+01 -7.61552653e+00 -7.61552653e+00
 -7.61552653e+00 -1.65097251e+00 -6.80107352e-01 -6.80107352e-01
 -6.80107352e-01  1.12938490e+02  9.94831755e+02  7.26432959e+03
  3.94037474e+04]
E1 = -706.4725929171805  E_coul = 199.04347579084893
cycle= 1 E= -507.429117126332  delta_E= -3.42  |g|= 0.297  |ddm|= 0.299
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.396746
diis-c [-0.15740704  1.        ]
  HOMO = -0.234517640114841  LUMO = 114.299064752511
  mo_energy =
[-1.20152068e+02 -1.22413852e+01 -6.64474728e+00 -6.64474728e+00
 -6.64474728e+00 -1.16170799e+00 -2.34517640e-01 -2.34517640e-01
 -2.34517640e-01  1.14299065e+02  9.96189001e+02  7.26552426e+03
  3.94048143e+04]
E1 = -706.4519245502655  E_coul = 199.022532952619
cycle= 2 E= -507.429391597646  delta_E= -0.000274  |g|= 0.00371  |ddm|= 0.009
    CPU time for cycle= 2      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.00389963
diis-c [-1.48602591e-05 -1.48666431e-03  1.00148666e+00]
  HOMO = -0.234623421621983  LUMO = 114.296291376094
  mo_energy =
[-1.20158060e+02 -1.22421195e+01 -6.64588262e+00 -6.64588262e+00
 -6.64588262e+00 -1.16174771e+00 -2.34623422e-01 -2.34623422e-01
 -2.34623422e-01  1.14296291e+02  9.96180375e+02  7.26551126e+03
  3.94047996e+04]
E1 = -706.4516863928797  E_coul = 199.02229474302365
cycle= 3 E= -507.429391649856  delta_E= -5.22e-08  |g|= 6.04e-05  |ddm|= 0.000109
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=8.02522e-05
diis-c [-1.45887070e-10  3.93409083e-05 -2.10360705e-02  1.02099673e+00]
  HOMO = -0.234624438172404  LUMO = 114.296267816691
  mo_energy =
[-1.20158116e+02 -1.22421269e+01 -6.64589545e+00 -6.64589545e+00
 -6.64589545e+00 -1.16174800e+00 -2.34624438e-01 -2.34624438e-01
 -2.34624438e-01  1.14296268e+02  9.96180317e+02  7.26551120e+03
  3.94047995e+04]
E1 = -706.451683405695  E_coul = 199.0222917558265
cycle= 4 E= -507.429391649869  delta_E= -1.25e-11  |g|= 1.71e-07  |ddm|= 1.49e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.451683405695  E_coul = 199.0222917558265
  HOMO = -0.234624432458351  LUMO = 114.296267994221
  mo_energy =
[-1.20158116e+02 -1.22421269e+01 -6.64589539e+00 -6.64589539e+00
 -6.64589539e+00 -1.16174800e+00 -2.34624432e-01 -2.34624432e-01
 -2.34624432e-01  1.14296268e+02  9.96180317e+02  7.26551120e+03
  3.94047995e+04]
E1 = -706.4516834181608  E_coul = 199.02229176829218
Extra cycle  E= -507.429391649869  delta_E= -5.68e-14  |g|= 2.48e-09  |ddm|= 5.17e-09
    CPU time for scf_cycle      0.10 sec, wall time      0.10 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 28.62115802671651
E1 = -706.4516834181608  E_coul = 199.02229176829218
init E= -507.429391649869
    CPU time for initialize scf      0.07 sec, wall time      0.07 sec
  HOMO = -0.234624432402208  LUMO = 114.296267995929
  mo_energy =
[-1.20158116e+02 -1.22421269e+01 -6.64589539e+00 -6.64589539e+00
 -6.64589539e+00 -1.16174800e+00 -2.34624432e-01 -2.34624432e-01
 -2.34624432e-01  1.14296268e+02  9.96180317e+02  7.26551120e+03
  3.94047995e+04]
E1 = -706.451683418315  E_coul = 199.02229176844634
cycle= 1 E= -507.429391649869  delta_E= -1.14e-13  |g|= 4.27e-11  |ddm|= 6.84e-11
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -706.451683418315  E_coul = 199.02229176844634
  HOMO = -0.234624432401523  LUMO = 114.296267995947
  mo_energy =
[-1.20158116e+02 -1.22421269e+01 -6.64589539e+00 -6.64589539e+00
 -6.64589539e+00 -1.16174800e+00 -2.34624432e-01 -2.34624432e-01
 -2.34624432e-01  1.14296268e+02  9.96180317e+02  7.26551120e+03
  3.94047995e+04]
E1 = -706.4516834183171  E_coul = 199.02229176844847
Extra cycle  E= -507.429391649869  delta_E= 5.68e-14  |g|= 2.63e-12  |ddm|= 1.06e-12
    CPU time for scf_cycle      0.14 sec, wall time      0.14 sec
exp = [1.81905026e+04 4.54760237e+03 6.86418503e+02 1.55340852e+02
 4.28826946e+01 4.75442091e+00 3.93530227e-01 8.60301482e+00
 4.90902200e-01]
grad_E = [-6.63964624e-06  1.23614053e-04 -5.53439919e-04  6.12055972e-04
  1.07594874e-03  2.95509907e-03  2.90670332e-02  5.36010958e-03
  7.38766798e-03]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((9, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.5476253398322024e+03,6.8630785798847160e+02,1.5555024230205126e+02,4.2742815896802767e+01,4.7505784169783016e+00,3.9162204394177752e-01,8.5974230426361959e+00,4.9072756124177219e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "7s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:53:35 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  18190.5038354        1
[INPUT] 0    0    [1    /1   ]  4547.57901344        1
[INPUT] 0    0    [1    /1   ]  686.527943275        1
[INPUT] 0    0    [1    /1   ]  155.171673854        1
[INPUT] 0    0    [1    /1   ]  42.8508385748        1
[INPUT] 0    0    [1    /1   ]  4.75635602062        1
[INPUT] 0    0    [1    /1   ]  0.394610915238       1
[INPUT] 1    0    [1    /1   ]  8.60692652876        1
[INPUT] 1    0    [1    /1   ]  0.491036594702       1

nuclear repulsion = 0
number of shells = 9
number of NR pGTOs = 13
number of NR cGTOs = 13
basis = {'Ar': [[0, [18190.503835417534, 1.0]], [0, [4547.579013440136, 1.0]], [0, [686.5279432752584, 1.0]], [0, [155.1716738539936, 1.0]], [0, [42.85083857480823, 1.0]], [0, [4.756356020616074, 1.0]], [0, [0.394610915237798, 1.0]], [1, [8.606926528755741, 1.0]], [1, [0.4910365947015249, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [18190.50383542]
bas 1, expnt(s) = [4547.57901344]
bas 2, expnt(s) = [686.52794328]
bas 3, expnt(s) = [155.17167385]
bas 4, expnt(s) = [42.85083857]
bas 5, expnt(s) = [4.75635602]
bas 6, expnt(s) = [0.39461092]
bas 7, expnt(s) = [8.60692653]
bas 8, expnt(s) = [0.49103659]
CPU time:        43.63
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  1  1  1  0 38 39  0]
 [ 0  1  1  1  0 40 41  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.81905038e+04 3.95729631e+03 4.54757901e+03 1.39910470e+03
 6.86527943e+02 3.38850935e+02 1.55171674e+02 1.11077055e+02
 4.28508386e+01 4.23140425e+01 4.75635602e+00 8.13712130e+00
 3.94610915e-01 1.25788763e+00 8.60692653e+00 4.30075311e+01
 4.91036595e-01 1.19915885e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.318523186344816
cond(S) = 28.60473429383411
E1 = -689.0365621990984  E_coul = 185.02601967859422
init E= -504.010542520504
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.679493739972543  LUMO = 112.795319573789
  mo_energy =
[-1.21534663e+02 -1.32689169e+01 -7.61244004e+00 -7.61244004e+00
 -7.61244004e+00 -1.65078329e+00 -6.79493740e-01 -6.79493740e-01
 -6.79493740e-01  1.12795320e+02  9.94334380e+02  7.26398003e+03
  3.94034506e+04]
E1 = -706.5255686113607  E_coul = 199.09633878512628
cycle= 1 E= -507.429229826234  delta_E= -3.42  |g|= 0.297  |ddm|= 0.299
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.396728
diis-c [-0.15739277  1.        ]
  HOMO = -0.233561951546737  LUMO = 114.156929517416
  mo_energy =
[-1.20144824e+02 -1.22375748e+01 -6.64088647e+00 -6.64088647e+00
 -6.64088647e+00 -1.16083711e+00 -2.33561952e-01 -2.33561952e-01
 -2.33561952e-01  1.14156930e+02  9.95693349e+02  7.26517644e+03
  3.94045193e+04]
E1 = -706.5048619788062  E_coul = 199.07535744843145
cycle= 2 E= -507.429504530375  delta_E= -0.000275  |g|= 0.00371  |ddm|= 0.00901
    CPU time for cycle= 2      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.00389962
diis-c [-1.48632176e-05 -1.48028956e-03  1.00148029e+00]
  HOMO = -0.233668065103341  LUMO = 114.154153536306
  mo_energy =
[-1.20150825e+02 -1.22383107e+01 -6.64202416e+00 -6.64202416e+00
 -6.64202416e+00 -1.16087704e+00 -2.33668065e-01 -2.33668065e-01
 -2.33668065e-01  1.14154154e+02  9.95684709e+02  7.26516342e+03
  3.94045046e+04]
E1 = -706.5046231661353  E_coul = 199.07511858341917
cycle= 3 E= -507.429504582716  delta_E= -5.23e-08  |g|= 6.05e-05  |ddm|= 0.000109
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=8.03774e-05
diis-c [-1.46338042e-10  3.94529200e-05 -2.10667141e-02  1.02102726e+00]
  HOMO = -0.233669086917042  LUMO = 114.154129901872
  mo_energy =
[-1.20150881e+02 -1.22383181e+01 -6.64203704e+00 -6.64203704e+00
 -6.64203704e+00 -1.16087733e+00 -2.33669087e-01 -2.33669087e-01
 -2.33669087e-01  1.14154130e+02  9.95684651e+02  7.26516335e+03
  3.94045045e+04]
E1 = -706.504620165924  E_coul = 199.07511558319587
cycle= 4 E= -507.429504582728  delta_E= -1.21e-11  |g|= 1.71e-07  |ddm|= 1.49e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.504620165924  E_coul = 199.07511558319587
  HOMO = -0.233669081172392  LUMO = 114.154130079765
  mo_energy =
[-1.20150881e+02 -1.22383181e+01 -6.64203698e+00 -6.64203698e+00
 -6.64203698e+00 -1.16087733e+00 -2.33669081e-01 -2.33669081e-01
 -2.33669081e-01  1.14154130e+02  9.95684652e+02  7.26516335e+03
  3.94045045e+04]
E1 = -706.504620178448  E_coul = 199.07511559571952
Extra cycle  E= -507.429504582728  delta_E= -2.84e-13  |g|= 2.49e-09  |ddm|= 5.2e-09
    CPU time for scf_cycle      0.10 sec, wall time      0.10 sec
exp = [1.81905038e+04 4.54757901e+03 6.86527943e+02 1.55171674e+02
 4.28508386e+01 4.75635602e+00 3.94610915e-01 8.60692653e+00
 4.91036595e-01]
E = -507.4295045827285
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((9, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.5476253398322024e+03,6.8630785798847160e+02,1.5555024230205126e+02,4.2742815896802767e+01,4.7505784169783016e+00,3.9162204394177752e-01,8.5974230426361959e+00,4.9072756124177219e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "7s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:53:36 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  18190.5038354        1
[INPUT] 0    0    [1    /1   ]  4547.57901344        1
[INPUT] 0    0    [1    /1   ]  686.527943275        1
[INPUT] 0    0    [1    /1   ]  155.171673854        1
[INPUT] 0    0    [1    /1   ]  42.8508385748        1
[INPUT] 0    0    [1    /1   ]  4.75635602062        1
[INPUT] 0    0    [1    /1   ]  0.394610915238       1
[INPUT] 1    0    [1    /1   ]  8.60692652876        1
[INPUT] 1    0    [1    /1   ]  0.491036594702       1

nuclear repulsion = 0
number of shells = 9
number of NR pGTOs = 13
number of NR cGTOs = 13
basis = {'Ar': [[0, [18190.503835417534, 1.0]], [0, [4547.579013440136, 1.0]], [0, [686.5279432752584, 1.0]], [0, [155.1716738539936, 1.0]], [0, [42.85083857480823, 1.0]], [0, [4.756356020616074, 1.0]], [0, [0.394610915237798, 1.0]], [1, [8.606926528755741, 1.0]], [1, [0.4910365947015249, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [18190.50383542]
bas 1, expnt(s) = [4547.57901344]
bas 2, expnt(s) = [686.52794328]
bas 3, expnt(s) = [155.17167385]
bas 4, expnt(s) = [42.85083857]
bas 5, expnt(s) = [4.75635602]
bas 6, expnt(s) = [0.39461092]
bas 7, expnt(s) = [8.60692653]
bas 8, expnt(s) = [0.49103659]
CPU time:        43.95
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  1  1  1  0 38 39  0]
 [ 0  1  1  1  0 40 41  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.81905038e+04 3.95729631e+03 4.54757901e+03 1.39910470e+03
 6.86527943e+02 3.38850935e+02 1.55171674e+02 1.11077055e+02
 4.28508386e+01 4.23140425e+01 4.75635602e+00 8.13712130e+00
 3.94610915e-01 1.25788763e+00 8.60692653e+00 4.30075311e+01
 4.91036595e-01 1.19915885e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.318523186344816
cond(S) = 28.60473429383411
E1 = -689.0365621990984  E_coul = 185.02601967859422
init E= -504.010542520504
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.679493739972543  LUMO = 112.795319573789
  mo_energy =
[-1.21534663e+02 -1.32689169e+01 -7.61244004e+00 -7.61244004e+00
 -7.61244004e+00 -1.65078329e+00 -6.79493740e-01 -6.79493740e-01
 -6.79493740e-01  1.12795320e+02  9.94334380e+02  7.26398003e+03
  3.94034506e+04]
E1 = -706.5255686113607  E_coul = 199.09633878512628
cycle= 1 E= -507.429229826234  delta_E= -3.42  |g|= 0.297  |ddm|= 0.299
    CPU time for cycle= 1      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.396728
diis-c [-0.15739277  1.        ]
  HOMO = -0.233561951546737  LUMO = 114.156929517416
  mo_energy =
[-1.20144824e+02 -1.22375748e+01 -6.64088647e+00 -6.64088647e+00
 -6.64088647e+00 -1.16083711e+00 -2.33561952e-01 -2.33561952e-01
 -2.33561952e-01  1.14156930e+02  9.95693349e+02  7.26517644e+03
  3.94045193e+04]
E1 = -706.5048619788062  E_coul = 199.07535744843145
cycle= 2 E= -507.429504530375  delta_E= -0.000275  |g|= 0.00371  |ddm|= 0.00901
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00389962
diis-c [-1.48632176e-05 -1.48028956e-03  1.00148029e+00]
  HOMO = -0.233668065103341  LUMO = 114.154153536306
  mo_energy =
[-1.20150825e+02 -1.22383107e+01 -6.64202416e+00 -6.64202416e+00
 -6.64202416e+00 -1.16087704e+00 -2.33668065e-01 -2.33668065e-01
 -2.33668065e-01  1.14154154e+02  9.95684709e+02  7.26516342e+03
  3.94045046e+04]
E1 = -706.5046231661353  E_coul = 199.07511858341917
cycle= 3 E= -507.429504582716  delta_E= -5.23e-08  |g|= 6.05e-05  |ddm|= 0.000109
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=8.03774e-05
diis-c [-1.46338042e-10  3.94529200e-05 -2.10667141e-02  1.02102726e+00]
  HOMO = -0.233669086917042  LUMO = 114.154129901872
  mo_energy =
[-1.20150881e+02 -1.22383181e+01 -6.64203704e+00 -6.64203704e+00
 -6.64203704e+00 -1.16087733e+00 -2.33669087e-01 -2.33669087e-01
 -2.33669087e-01  1.14154130e+02  9.95684651e+02  7.26516335e+03
  3.94045045e+04]
E1 = -706.504620165924  E_coul = 199.07511558319587
cycle= 4 E= -507.429504582728  delta_E= -1.21e-11  |g|= 1.71e-07  |ddm|= 1.49e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.504620165924  E_coul = 199.07511558319587
  HOMO = -0.233669081172392  LUMO = 114.154130079765
  mo_energy =
[-1.20150881e+02 -1.22383181e+01 -6.64203698e+00 -6.64203698e+00
 -6.64203698e+00 -1.16087733e+00 -2.33669081e-01 -2.33669081e-01
 -2.33669081e-01  1.14154130e+02  9.95684652e+02  7.26516335e+03
  3.94045045e+04]
E1 = -706.504620178448  E_coul = 199.07511559571952
Extra cycle  E= -507.429504582728  delta_E= -2.84e-13  |g|= 2.49e-09  |ddm|= 5.2e-09
    CPU time for scf_cycle      0.10 sec, wall time      0.11 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 28.60473429383411
E1 = -706.504620178448  E_coul = 199.07511559571952
init E= -507.429504582728
    CPU time for initialize scf      0.06 sec, wall time      0.06 sec
  HOMO = -0.233669081115869  LUMO = 114.154130081479
  mo_energy =
[-1.20150881e+02 -1.22383181e+01 -6.64203698e+00 -6.64203698e+00
 -6.64203698e+00 -1.16087733e+00 -2.33669081e-01 -2.33669081e-01
 -2.33669081e-01  1.14154130e+02  9.95684652e+02  7.26516335e+03
  3.94045045e+04]
E1 = -706.5046201786031  E_coul = 199.0751155958744
cycle= 1 E= -507.429504582729  delta_E= -1.71e-13  |g|= 4.23e-11  |ddm|= 6.88e-11
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -706.5046201786031  E_coul = 199.0751155958744
  HOMO = -0.233669081115184  LUMO = 114.154130081498
  mo_energy =
[-1.20150881e+02 -1.22383181e+01 -6.64203698e+00 -6.64203698e+00
 -6.64203698e+00 -1.16087733e+00 -2.33669081e-01 -2.33669081e-01
 -2.33669081e-01  1.14154130e+02  9.95684652e+02  7.26516335e+03
  3.94045045e+04]
E1 = -706.5046201786055  E_coul = 199.07511559587678
Extra cycle  E= -507.429504582729  delta_E=    0  |g|= 5.19e-12  |ddm|= 1.07e-12
    CPU time for scf_cycle      0.13 sec, wall time      0.13 sec
exp = [1.81905038e+04 4.54757901e+03 6.86527943e+02 1.55171674e+02
 4.28508386e+01 4.75635602e+00 3.94610915e-01 8.60692653e+00
 4.91036595e-01]
grad_E = [-6.63491681e-06  1.23096743e-04 -5.30951557e-04  4.64703507e-04
  1.25944147e-03  4.84978406e-03  4.71124341e-02  8.73310661e-03
  1.19839875e-02]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((9, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.5476253398322024e+03,6.8630785798847160e+02,1.5555024230205126e+02,4.2742815896802767e+01,4.7505784169783016e+00,3.9162204394177752e-01,8.5974230426361959e+00,4.9072756124177219e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "7s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:53:38 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  18190.5065619        1
[INPUT] 0    0    [1    /1   ]  4547.52806232        1
[INPUT] 0    0    [1    /1   ]  686.766345522        1
[INPUT] 0    0    [1    /1   ]  154.806443541        1
[INPUT] 0    0    [1    /1   ]  42.7673343317        1
[INPUT] 0    0    [1    /1   ]  4.75853056101        1
[INPUT] 0    0    [1    /1   ]  0.39575941564        1
[INPUT] 1    0    [1    /1   ]  8.61115449208        1
[INPUT] 1    0    [1    /1   ]  0.491182411494       1

nuclear repulsion = 0
number of shells = 9
number of NR pGTOs = 13
number of NR cGTOs = 13
basis = {'Ar': [[0, [18190.5065618849, 1.0]], [0, [4547.528062321194, 1.0]], [0, [686.7663455219874, 1.0]], [0, [154.80644354141157, 1.0]], [0, [42.767334331728236, 1.0]], [0, [4.758530561005861, 1.0]], [0, [0.3957594156398266, 1.0]], [1, [8.611154492083399, 1.0]], [1, [0.49118241149380726, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [18190.50656188]
bas 1, expnt(s) = [4547.52806232]
bas 2, expnt(s) = [686.76634552]
bas 3, expnt(s) = [154.80644354]
bas 4, expnt(s) = [42.76733433]
bas 5, expnt(s) = [4.75853056]
bas 6, expnt(s) = [0.39575942]
bas 7, expnt(s) = [8.61115449]
bas 8, expnt(s) = [0.49118241]
CPU time:        46.87
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  1  1  1  0 38 39  0]
 [ 0  1  1  1  0 40 41  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.81905066e+04 3.95729676e+03 4.54752806e+03 1.39909294e+03
 6.86766346e+02 3.38939183e+02 1.54806444e+02 1.10880915e+02
 4.27673343e+01 4.22521838e+01 4.75853056e+00 8.13991128e+00
 3.95759416e-01 1.26063240e+00 8.61115449e+00 4.30339409e+01
 4.91182411e-01 1.19960399e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.31812319071656
cond(S) = 28.55694491441206
E1 = -689.0839483433344  E_coul = 185.06925205280385
init E= -504.014696290531
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.678845562264365  LUMO = 112.433159548726
  mo_energy =
[-1.21528828e+02 -1.32654365e+01 -7.60916730e+00 -7.60916730e+00
 -7.60916730e+00 -1.65055572e+00 -6.78845562e-01 -6.78845562e-01
 -6.78845562e-01  1.12433160e+02  9.93190665e+02  7.26316975e+03
  3.94027613e+04]
E1 = -706.5816396844973  E_coul = 199.15217489224574
cycle= 1 E= -507.429464792252  delta_E= -3.41  |g|= 0.297  |ddm|= 0.298
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.396489
diis-c [-0.15720387  1.        ]
  HOMO = -0.232543743181528  LUMO = 113.795650254799
  mo_energy =
[-1.20137483e+02 -1.22333913e+01 -6.63679743e+00 -6.63679743e+00
 -6.63679743e+00 -1.15988301e+00 -2.32543743e-01 -2.32543743e-01
 -2.32543743e-01  1.13795650e+02  9.94551110e+02  7.26436732e+03
  3.94038313e+04]
E1 = -706.5608305058295  E_coul = 199.13108988809876
cycle= 2 E= -507.429740617731  delta_E= -0.000276  |g|= 0.00372  |ddm|= 0.00905
    CPU time for cycle= 2      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.00390591
diis-c [-1.49187833e-05 -1.46705416e-03  1.00146705e+00]
  HOMO = -0.232650578688455  LUMO = 113.792865990952
  mo_energy =
[-1.20143510e+02 -1.22341313e+01 -6.63794143e+00 -6.63794143e+00
 -6.63794143e+00 -1.15992330e+00 -2.32650579e-01 -2.32650579e-01
 -2.32650579e-01  1.13792866e+02  9.94542434e+02  7.26435425e+03
  3.94038165e+04]
E1 = -706.560589983573  E_coul = 199.13084931308182
cycle= 3 E= -507.429740670491  delta_E= -5.28e-08  |g|= 6.09e-05  |ddm|= 0.00011
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=8.07636e-05
diis-c [-1.47625693e-10  3.96002838e-05 -2.11287524e-02  1.02108915e+00]
  HOMO = -0.232651611700801  LUMO = 113.792842164552
  mo_energy =
[-1.20143567e+02 -1.22341388e+01 -6.63795443e+00 -6.63795443e+00
 -6.63795443e+00 -1.15992360e+00 -2.32651612e-01 -2.32651612e-01
 -2.32651612e-01  1.13792842e+02  9.94542375e+02  7.26435419e+03
  3.94038164e+04]
E1 = -706.5605869506736  E_coul = 199.13084628016915
cycle= 4 E= -507.429740670504  delta_E= -1.33e-11  |g|= 1.72e-07  |ddm|= 1.51e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.5605869506736  E_coul = 199.13084628016915
  HOMO = -0.232651605885931  LUMO = 113.792842343552
  mo_energy =
[-1.20143567e+02 -1.22341388e+01 -6.63795437e+00 -6.63795437e+00
 -6.63795437e+00 -1.15992360e+00 -2.32651606e-01 -2.32651606e-01
 -2.32651606e-01  1.13792842e+02  9.94542376e+02  7.26435419e+03
  3.94038164e+04]
E1 = -706.5605869633424  E_coul = 199.13084629283802
Extra cycle  E= -507.429740670504  delta_E=    0  |g|= 2.52e-09  |ddm|= 5.26e-09
    CPU time for scf_cycle      0.10 sec, wall time      0.10 sec
exp = [1.81905066e+04 4.54752806e+03 6.86766346e+02 1.54806444e+02
 4.27673343e+01 4.75853056e+00 3.95759416e-01 8.61115449e+00
 4.91182411e-01]
E = -507.42974067050443
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((9, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.5476253398322024e+03,6.8630785798847160e+02,1.5555024230205126e+02,4.2742815896802767e+01,4.7505784169783016e+00,3.9162204394177752e-01,8.5974230426361959e+00,4.9072756124177219e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "7s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:53:39 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  18190.5065619        1
[INPUT] 0    0    [1    /1   ]  4547.52806232        1
[INPUT] 0    0    [1    /1   ]  686.766345522        1
[INPUT] 0    0    [1    /1   ]  154.806443541        1
[INPUT] 0    0    [1    /1   ]  42.7673343317        1
[INPUT] 0    0    [1    /1   ]  4.75853056101        1
[INPUT] 0    0    [1    /1   ]  0.39575941564        1
[INPUT] 1    0    [1    /1   ]  8.61115449208        1
[INPUT] 1    0    [1    /1   ]  0.491182411494       1

nuclear repulsion = 0
number of shells = 9
number of NR pGTOs = 13
number of NR cGTOs = 13
basis = {'Ar': [[0, [18190.5065618849, 1.0]], [0, [4547.528062321194, 1.0]], [0, [686.7663455219874, 1.0]], [0, [154.80644354141157, 1.0]], [0, [42.767334331728236, 1.0]], [0, [4.758530561005861, 1.0]], [0, [0.3957594156398266, 1.0]], [1, [8.611154492083399, 1.0]], [1, [0.49118241149380726, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [18190.50656188]
bas 1, expnt(s) = [4547.52806232]
bas 2, expnt(s) = [686.76634552]
bas 3, expnt(s) = [154.80644354]
bas 4, expnt(s) = [42.76733433]
bas 5, expnt(s) = [4.75853056]
bas 6, expnt(s) = [0.39575942]
bas 7, expnt(s) = [8.61115449]
bas 8, expnt(s) = [0.49118241]
CPU time:        47.20
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  1  1  1  0 38 39  0]
 [ 0  1  1  1  0 40 41  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.81905066e+04 3.95729676e+03 4.54752806e+03 1.39909294e+03
 6.86766346e+02 3.38939183e+02 1.54806444e+02 1.10880915e+02
 4.27673343e+01 4.22521838e+01 4.75853056e+00 8.13991128e+00
 3.95759416e-01 1.26063240e+00 8.61115449e+00 4.30339409e+01
 4.91182411e-01 1.19960399e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.31812319071656
cond(S) = 28.55694491441206
E1 = -689.0839483433344  E_coul = 185.06925205280385
init E= -504.014696290531
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.678845562264365  LUMO = 112.433159548726
  mo_energy =
[-1.21528828e+02 -1.32654365e+01 -7.60916730e+00 -7.60916730e+00
 -7.60916730e+00 -1.65055572e+00 -6.78845562e-01 -6.78845562e-01
 -6.78845562e-01  1.12433160e+02  9.93190665e+02  7.26316975e+03
  3.94027613e+04]
E1 = -706.5816396844973  E_coul = 199.15217489224574
cycle= 1 E= -507.429464792252  delta_E= -3.41  |g|= 0.297  |ddm|= 0.298
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.396489
diis-c [-0.15720387  1.        ]
  HOMO = -0.232543743181528  LUMO = 113.795650254799
  mo_energy =
[-1.20137483e+02 -1.22333913e+01 -6.63679743e+00 -6.63679743e+00
 -6.63679743e+00 -1.15988301e+00 -2.32543743e-01 -2.32543743e-01
 -2.32543743e-01  1.13795650e+02  9.94551110e+02  7.26436732e+03
  3.94038313e+04]
E1 = -706.5608305058295  E_coul = 199.13108988809876
cycle= 2 E= -507.429740617731  delta_E= -0.000276  |g|= 0.00372  |ddm|= 0.00905
    CPU time for cycle= 2      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.00390591
diis-c [-1.49187833e-05 -1.46705416e-03  1.00146705e+00]
  HOMO = -0.232650578688455  LUMO = 113.792865990952
  mo_energy =
[-1.20143510e+02 -1.22341313e+01 -6.63794143e+00 -6.63794143e+00
 -6.63794143e+00 -1.15992330e+00 -2.32650579e-01 -2.32650579e-01
 -2.32650579e-01  1.13792866e+02  9.94542434e+02  7.26435425e+03
  3.94038165e+04]
E1 = -706.560589983573  E_coul = 199.13084931308182
cycle= 3 E= -507.429740670491  delta_E= -5.28e-08  |g|= 6.09e-05  |ddm|= 0.00011
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=8.07636e-05
diis-c [-1.47625693e-10  3.96002838e-05 -2.11287524e-02  1.02108915e+00]
  HOMO = -0.232651611700801  LUMO = 113.792842164552
  mo_energy =
[-1.20143567e+02 -1.22341388e+01 -6.63795443e+00 -6.63795443e+00
 -6.63795443e+00 -1.15992360e+00 -2.32651612e-01 -2.32651612e-01
 -2.32651612e-01  1.13792842e+02  9.94542375e+02  7.26435419e+03
  3.94038164e+04]
E1 = -706.5605869506736  E_coul = 199.13084628016915
cycle= 4 E= -507.429740670504  delta_E= -1.33e-11  |g|= 1.72e-07  |ddm|= 1.51e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.5605869506736  E_coul = 199.13084628016915
  HOMO = -0.232651605885931  LUMO = 113.792842343552
  mo_energy =
[-1.20143567e+02 -1.22341388e+01 -6.63795437e+00 -6.63795437e+00
 -6.63795437e+00 -1.15992360e+00 -2.32651606e-01 -2.32651606e-01
 -2.32651606e-01  1.13792842e+02  9.94542376e+02  7.26435419e+03
  3.94038164e+04]
E1 = -706.5605869633424  E_coul = 199.13084629283802
Extra cycle  E= -507.429740670504  delta_E=    0  |g|= 2.52e-09  |ddm|= 5.26e-09
    CPU time for scf_cycle      0.09 sec, wall time      0.10 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 28.55694491441206
E1 = -706.5605869633424  E_coul = 199.13084629283802
init E= -507.429740670504
    CPU time for initialize scf      0.06 sec, wall time      0.06 sec
  HOMO = -0.232651605828567  LUMO = 113.792842345281
  mo_energy =
[-1.20143567e+02 -1.22341388e+01 -6.63795437e+00 -6.63795437e+00
 -6.63795437e+00 -1.15992360e+00 -2.32651606e-01 -2.32651606e-01
 -2.32651606e-01  1.13792842e+02  9.94542376e+02  7.26435419e+03
  3.94038164e+04]
E1 = -706.5605869634996  E_coul = 199.13084629299513
cycle= 1 E= -507.429740670505  delta_E= -1.14e-13  |g|= 4.35e-11  |ddm|= 6.98e-11
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -706.5605869634996  E_coul = 199.13084629299513
  HOMO = -0.232651605827871  LUMO = 113.7928423453
  mo_energy =
[-1.20143567e+02 -1.22341388e+01 -6.63795437e+00 -6.63795437e+00
 -6.63795437e+00 -1.15992360e+00 -2.32651606e-01 -2.32651606e-01
 -2.32651606e-01  1.13792842e+02  9.94542376e+02  7.26435419e+03
  3.94038164e+04]
E1 = -706.5605869635015  E_coul = 199.13084629299726
Extra cycle  E= -507.429740670504  delta_E= 3.41e-13  |g|= 7.94e-12  |ddm|= 1.06e-12
    CPU time for scf_cycle      0.13 sec, wall time      0.13 sec
exp = [1.81905066e+04 4.54752806e+03 6.86766346e+02 1.54806444e+02
 4.27673343e+01 4.75853056e+00 3.95759416e-01 8.61115449e+00
 4.91182411e-01]
grad_E = [-6.62486539e-06  1.22040003e-04 -4.86210949e-04  2.07268176e-04
  1.38350184e-03  6.87642068e-03  6.64163146e-02  1.23350929e-02
  1.68898695e-02]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((9, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.5476253398322024e+03,6.8630785798847160e+02,1.5555024230205126e+02,4.2742815896802767e+01,4.7505784169783016e+00,3.9162204394177752e-01,8.5974230426361959e+00,4.9072756124177219e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "7s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:53:42 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  18190.5111301        1
[INPUT] 0    0    [1    /1   ]  4547.44270183        1
[INPUT] 0    0    [1    /1   ]  687.165319094        1
[INPUT] 0    0    [1    /1   ]  154.199875499        1
[INPUT] 0    0    [1    /1   ]  42.6084147704        1
[INPUT] 0    0    [1    /1   ]  4.75946932097        1
[INPUT] 0    0    [1    /1   ]  0.396072573813       1
[INPUT] 1    0    [1    /1   ]  8.61253263838        1
[INPUT] 1    0    [1    /1   ]  0.491231882034       1

nuclear repulsion = 0
number of shells = 9
number of NR pGTOs = 13
number of NR cGTOs = 13
basis = {'Ar': [[0, [18190.511130051345, 1.0]], [0, [4547.442701833439, 1.0]], [0, [687.1653190943563, 1.0]], [0, [154.19987549870746, 1.0]], [0, [42.6084147704323, 1.0]], [0, [4.759469320973853, 1.0]], [0, [0.3960725738134634, 1.0]], [1, [8.612532638377255, 1.0]], [1, [0.4912318820344374, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [18190.51113005]
bas 1, expnt(s) = [4547.44270183]
bas 2, expnt(s) = [687.16531909]
bas 3, expnt(s) = [154.1998755]
bas 4, expnt(s) = [42.60841477]
bas 5, expnt(s) = [4.75946932]
bas 6, expnt(s) = [0.39607257]
bas 7, expnt(s) = [8.61253264]
bas 8, expnt(s) = [0.49123188]
CPU time:        50.10
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  1  1  1  0 38 39  0]
 [ 0  1  1  1  0 40 41  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.81905111e+04 3.95729750e+03 4.54744270e+03 1.39907324e+03
 6.87165319e+02 3.39086851e+02 1.54199875e+02 1.10554912e+02
 4.26084148e+01 4.21343751e+01 4.75946932e+00 8.14111563e+00
 3.96072574e-01 1.26138047e+00 8.61253264e+00 4.30425501e+01
 4.91231882e-01 1.19975502e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.318007681636775
cond(S) = 28.46112281705919
E1 = -689.0995061231876  E_coul = 185.08168788591638
init E= -504.017818237271
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.678657929993714  LUMO = 111.760025357121
  mo_energy =
[-1.21527697e+02 -1.32640219e+01 -7.60824543e+00 -7.60824543e+00
 -7.60824543e+00 -1.65043944e+00 -6.78657930e-01 -6.78657930e-01
 -6.78657930e-01  1.11760025e+02  9.91194712e+02  7.26174877e+03
  3.94015512e+04]
E1 = -706.5967459821876  E_coul = 199.1669130276925
cycle= 1 E= -507.429832954495  delta_E= -3.41  |g|= 0.298  |ddm|= 0.298
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.395824
diis-c [-0.15667695  1.        ]
  HOMO = -0.232252232909127  LUMO = 113.122133637972
  mo_energy =
[-1.20136343e+02 -1.22318487e+01 -6.63569298e+00 -6.63569298e+00
 -6.63569298e+00 -1.15957029e+00 -2.32252233e-01 -2.32252233e-01
 -2.32252233e-01  1.13122134e+02  9.92554569e+02  7.26294481e+03
  3.94026196e+04]
E1 = -706.5757382206526  E_coul = 199.14562672846728
cycle= 2 E= -507.430111492185  delta_E= -0.000279  |g|= 0.00374  |ddm|= 0.00913
    CPU time for cycle= 2      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.00392485
diis-c [-1.50780414e-05 -1.44547000e-03  1.00144547e+00]
  HOMO = -0.232360284094918  LUMO = 113.119331960958
  mo_energy =
[-1.20142422e+02 -1.22325965e+01 -6.63684925e+00 -6.63684925e+00
 -6.63684925e+00 -1.15961104e+00 -2.32360284e-01 -2.32360284e-01
 -2.32360284e-01  1.13119332e+02  9.92545823e+02  7.26293164e+03
  3.94026047e+04]
E1 = -706.5754944317298  E_coul = 199.14538288589696
cycle= 3 E= -507.430111545833  delta_E= -5.36e-08  |g|= 6.15e-05  |ddm|= 0.000111
    CPU time for cycle= 3      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=8.15667e-05
diis-c [-1.50220213e-10  3.97189836e-05 -2.12269734e-02  1.02118725e+00]
  HOMO = -0.232361335697535  LUMO = 113.119307771646
  mo_energy =
[-1.20142480e+02 -1.22326041e+01 -6.63686247e+00 -6.63686247e+00
 -6.63686247e+00 -1.15961135e+00 -2.32361336e-01 -2.32361336e-01
 -2.32361336e-01  1.13119308e+02  9.92545764e+02  7.26293157e+03
  3.94026046e+04]
E1 = -706.5754913375887  E_coul = 199.1453797917431
cycle= 4 E= -507.430111545846  delta_E= -1.28e-11  |g|= 1.75e-07  |ddm|= 1.54e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.5754913375887  E_coul = 199.1453797917431
  HOMO = -0.232361329758908  LUMO = 113.119307952933
  mo_energy =
[-1.20142479e+02 -1.22326041e+01 -6.63686240e+00 -6.63686240e+00
 -6.63686240e+00 -1.15961135e+00 -2.32361330e-01 -2.32361330e-01
 -2.32361330e-01  1.13119308e+02  9.92545764e+02  7.26293157e+03
  3.94026046e+04]
E1 = -706.5754913505298  E_coul = 199.14537980468413
Extra cycle  E= -507.430111545846  delta_E= -5.68e-14  |g|= 2.56e-09  |ddm|= 5.38e-09
    CPU time for scf_cycle      0.09 sec, wall time      0.10 sec
exp = [1.81905111e+04 4.54744270e+03 6.87165319e+02 1.54199875e+02
 4.26084148e+01 4.75946932e+00 3.96072574e-01 8.61253264e+00
 4.91231882e-01]
E = -507.43011154584565
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((9, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.5476253398322024e+03,6.8630785798847160e+02,1.5555024230205126e+02,4.2742815896802767e+01,4.7505784169783016e+00,3.9162204394177752e-01,8.5974230426361959e+00,4.9072756124177219e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "7s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:53:42 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  18190.5111301        1
[INPUT] 0    0    [1    /1   ]  4547.44270183        1
[INPUT] 0    0    [1    /1   ]  687.165319094        1
[INPUT] 0    0    [1    /1   ]  154.199875499        1
[INPUT] 0    0    [1    /1   ]  42.6084147704        1
[INPUT] 0    0    [1    /1   ]  4.75946932097        1
[INPUT] 0    0    [1    /1   ]  0.396072573813       1
[INPUT] 1    0    [1    /1   ]  8.61253263838        1
[INPUT] 1    0    [1    /1   ]  0.491231882034       1

nuclear repulsion = 0
number of shells = 9
number of NR pGTOs = 13
number of NR cGTOs = 13
basis = {'Ar': [[0, [18190.511130051345, 1.0]], [0, [4547.442701833439, 1.0]], [0, [687.1653190943563, 1.0]], [0, [154.19987549870746, 1.0]], [0, [42.6084147704323, 1.0]], [0, [4.759469320973853, 1.0]], [0, [0.3960725738134634, 1.0]], [1, [8.612532638377255, 1.0]], [1, [0.4912318820344374, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [18190.51113005]
bas 1, expnt(s) = [4547.44270183]
bas 2, expnt(s) = [687.16531909]
bas 3, expnt(s) = [154.1998755]
bas 4, expnt(s) = [42.60841477]
bas 5, expnt(s) = [4.75946932]
bas 6, expnt(s) = [0.39607257]
bas 7, expnt(s) = [8.61253264]
bas 8, expnt(s) = [0.49123188]
CPU time:        50.44
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  1  1  1  0 38 39  0]
 [ 0  1  1  1  0 40 41  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.81905111e+04 3.95729750e+03 4.54744270e+03 1.39907324e+03
 6.87165319e+02 3.39086851e+02 1.54199875e+02 1.10554912e+02
 4.26084148e+01 4.21343751e+01 4.75946932e+00 8.14111563e+00
 3.96072574e-01 1.26138047e+00 8.61253264e+00 4.30425501e+01
 4.91231882e-01 1.19975502e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.318007681636775
cond(S) = 28.46112281705919
E1 = -689.0995061231876  E_coul = 185.08168788591638
init E= -504.017818237271
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.678657929993714  LUMO = 111.760025357121
  mo_energy =
[-1.21527697e+02 -1.32640219e+01 -7.60824543e+00 -7.60824543e+00
 -7.60824543e+00 -1.65043944e+00 -6.78657930e-01 -6.78657930e-01
 -6.78657930e-01  1.11760025e+02  9.91194712e+02  7.26174877e+03
  3.94015512e+04]
E1 = -706.5967459821876  E_coul = 199.1669130276925
cycle= 1 E= -507.429832954495  delta_E= -3.41  |g|= 0.298  |ddm|= 0.298
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.395824
diis-c [-0.15667695  1.        ]
  HOMO = -0.232252232909127  LUMO = 113.122133637972
  mo_energy =
[-1.20136343e+02 -1.22318487e+01 -6.63569298e+00 -6.63569298e+00
 -6.63569298e+00 -1.15957029e+00 -2.32252233e-01 -2.32252233e-01
 -2.32252233e-01  1.13122134e+02  9.92554569e+02  7.26294481e+03
  3.94026196e+04]
E1 = -706.5757382206526  E_coul = 199.14562672846728
cycle= 2 E= -507.430111492185  delta_E= -0.000279  |g|= 0.00374  |ddm|= 0.00913
    CPU time for cycle= 2      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.00392485
diis-c [-1.50780414e-05 -1.44547000e-03  1.00144547e+00]
  HOMO = -0.232360284094918  LUMO = 113.119331960958
  mo_energy =
[-1.20142422e+02 -1.22325965e+01 -6.63684925e+00 -6.63684925e+00
 -6.63684925e+00 -1.15961104e+00 -2.32360284e-01 -2.32360284e-01
 -2.32360284e-01  1.13119332e+02  9.92545823e+02  7.26293164e+03
  3.94026047e+04]
E1 = -706.5754944317298  E_coul = 199.14538288589696
cycle= 3 E= -507.430111545833  delta_E= -5.36e-08  |g|= 6.15e-05  |ddm|= 0.000111
    CPU time for cycle= 3      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=8.15667e-05
diis-c [-1.50220213e-10  3.97189836e-05 -2.12269734e-02  1.02118725e+00]
  HOMO = -0.232361335697535  LUMO = 113.119307771646
  mo_energy =
[-1.20142480e+02 -1.22326041e+01 -6.63686247e+00 -6.63686247e+00
 -6.63686247e+00 -1.15961135e+00 -2.32361336e-01 -2.32361336e-01
 -2.32361336e-01  1.13119308e+02  9.92545764e+02  7.26293157e+03
  3.94026046e+04]
E1 = -706.5754913375887  E_coul = 199.1453797917431
cycle= 4 E= -507.430111545846  delta_E= -1.28e-11  |g|= 1.75e-07  |ddm|= 1.54e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.5754913375887  E_coul = 199.1453797917431
  HOMO = -0.232361329758908  LUMO = 113.119307952933
  mo_energy =
[-1.20142479e+02 -1.22326041e+01 -6.63686240e+00 -6.63686240e+00
 -6.63686240e+00 -1.15961135e+00 -2.32361330e-01 -2.32361330e-01
 -2.32361330e-01  1.13119308e+02  9.92545764e+02  7.26293157e+03
  3.94026046e+04]
E1 = -706.5754913505298  E_coul = 199.14537980468413
Extra cycle  E= -507.430111545846  delta_E= -5.68e-14  |g|= 2.56e-09  |ddm|= 5.38e-09
    CPU time for scf_cycle      0.10 sec, wall time      0.10 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 28.46112281705919
E1 = -706.5754913505298  E_coul = 199.14537980468413
init E= -507.430111545846
    CPU time for initialize scf      0.06 sec, wall time      0.06 sec
  HOMO = -0.232361329700119  LUMO = 113.119307954691
  mo_energy =
[-1.20142479e+02 -1.22326041e+01 -6.63686240e+00 -6.63686240e+00
 -6.63686240e+00 -1.15961135e+00 -2.32361330e-01 -2.32361330e-01
 -2.32361330e-01  1.13119308e+02  9.92545764e+02  7.26293157e+03
  3.94026046e+04]
E1 = -706.5754913506911  E_coul = 199.14537980484556
cycle= 1 E= -507.430111545846  delta_E= 1.14e-13  |g|= 4.47e-11  |ddm|= 7.15e-11
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -706.5754913506911  E_coul = 199.14537980484556
  HOMO = -0.232361329699396  LUMO = 113.119307954711
  mo_energy =
[-1.20142479e+02 -1.22326041e+01 -6.63686240e+00 -6.63686240e+00
 -6.63686240e+00 -1.15961135e+00 -2.32361330e-01 -2.32361330e-01
 -2.32361330e-01  1.13119308e+02  9.92545764e+02  7.26293157e+03
  3.94026046e+04]
E1 = -706.5754913506934  E_coul = 199.14537980484766
Extra cycle  E= -507.430111545846  delta_E= -1.71e-13  |g|= 2.88e-12  |ddm|= 1.08e-12
    CPU time for scf_cycle      0.13 sec, wall time      0.13 sec
exp = [1.81905111e+04 4.54744270e+03 6.87165319e+02 1.54199875e+02
 4.26084148e+01 4.75946932e+00 3.96072574e-01 8.61253264e+00
 4.91231882e-01]
grad_E = [-6.60821916e-06  1.20362386e-04 -4.16556446e-04 -1.41998211e-04
  1.22452397e-03  7.48751979e-03  7.22463824e-02  1.33983479e-02
  1.83379216e-02]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((9, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.5476253398322024e+03,6.8630785798847160e+02,1.5555024230205126e+02,4.2742815896802767e+01,4.7505784169783016e+00,3.9162204394177752e-01,8.5974230426361959e+00,4.9072756124177219e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "7s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:53:45 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  18190.5154465        1
[INPUT] 0    0    [1    /1   ]  4547.36205553        1
[INPUT] 0    0    [1    /1   ]  687.541690108        1
[INPUT] 0    0    [1    /1   ]  153.633346423        1
[INPUT] 0    0    [1    /1   ]  42.4363797397        1
[INPUT] 0    0    [1    /1   ]  4.75737426162        1
[INPUT] 0    0    [1    /1   ]  0.394566192778       1
[INPUT] 1    0    [1    /1   ]  8.60752713354        1
[INPUT] 1    0    [1    /1   ]  0.491064154746       1

nuclear repulsion = 0
number of shells = 9
number of NR pGTOs = 13
number of NR cGTOs = 13
basis = {'Ar': [[0, [18190.51544648194, 1.0]], [0, [4547.362055526444, 1.0]], [0, [687.5416901075245, 1.0]], [0, [153.63334642345836, 1.0]], [0, [42.4363797397408, 1.0]], [0, [4.757374261622832, 1.0]], [0, [0.39456619277805777, 1.0]], [1, [8.60752713354094, 1.0]], [1, [0.49106415474626897, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [18190.51544648]
bas 1, expnt(s) = [4547.36205553]
bas 2, expnt(s) = [687.54169011]
bas 3, expnt(s) = [153.63334642]
bas 4, expnt(s) = [42.43637974]
bas 5, expnt(s) = [4.75737426]
bas 6, expnt(s) = [0.39456619]
bas 7, expnt(s) = [8.60752713]
bas 8, expnt(s) = [0.49106415]
CPU time:        53.35
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  1  1  1  0 38 39  0]
 [ 0  1  1  1  0 40 41  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.81905154e+04 3.95729821e+03 4.54736206e+03 1.39905463e+03
 6.87541690e+02 3.39226133e+02 1.53633346e+02 1.10250138e+02
 4.24363797e+01 4.20067198e+01 4.75737426e+00 8.13842777e+00
 3.94566193e-01 1.25778070e+00 8.60752713e+00 4.30112826e+01
 4.91064155e-01 1.19924298e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.318519856328837
cond(S) = 28.352607595640173
E1 = -689.0436448989918  E_coul = 185.02699581161394
init E= -504.016649087378
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.679477404062241  LUMO = 111.049099991344
  mo_energy =
[-1.21536190e+02 -1.32675666e+01 -7.61243039e+00 -7.61243039e+00
 -7.61243039e+00 -1.65062619e+00 -6.79477404e-01 -6.79477404e-01
 -6.79477404e-01  1.11049100e+02  9.89219249e+02  7.26033537e+03
  3.94003462e+04]
E1 = -706.5235329561805  E_coul = 199.0933710312875
cycle= 1 E= -507.430161924893  delta_E= -3.41  |g|= 0.298  |ddm|= 0.299
    CPU time for cycle= 1      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.394893
diis-c [-0.1559402  1.       ]
  HOMO = -0.233549603123851  LUMO = 112.408776421788
  mo_energy =
[-1.20147637e+02 -1.22364464e+01 -6.64103058e+00 -6.64103058e+00
 -6.64103058e+00 -1.16071093e+00 -2.33549603e-01 -2.33549603e-01
 -2.33549603e-01  1.12408776e+02  9.90575130e+02  7.26152605e+03
  3.94014090e+04]
E1 = -706.5023062888856  E_coul = 199.07186230746288
cycle= 2 E= -507.430443981423  delta_E= -0.000282  |g|= 0.00376  |ddm|= 0.00921
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00395226
diis-c [-1.53044674e-05 -1.42537055e-03  1.00142537e+00]
  HOMO = -0.233658815554243  LUMO = 112.405954184728
  mo_energy =
[-1.20153774e+02 -1.22372028e+01 -6.64220041e+00 -6.64220041e+00
 -6.64220041e+00 -1.16075198e+00 -2.33658816e-01 -2.33658816e-01
 -2.33658816e-01  1.12405954e+02  9.90566307e+02  7.26151278e+03
  3.94013940e+04]
E1 = -706.5020589413404  E_coul = 199.0716149052178
cycle= 3 E= -507.430444036123  delta_E= -5.47e-08  |g|= 6.23e-05  |ddm|= 0.000112
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=8.25059e-05
diis-c [-1.53210081e-10  3.96816331e-05 -2.13137659e-02  1.02127408e+00]
  HOMO = -0.233659884616072  LUMO = 112.405929602695
  mo_energy =
[-1.20153833e+02 -1.22372105e+01 -6.64221386e+00 -6.64221386e+00
 -6.64221386e+00 -1.16075229e+00 -2.33659885e-01 -2.33659885e-01
 -2.33659885e-01  1.12405930e+02  9.90566246e+02  7.26151270e+03
  3.94013939e+04]
E1 = -706.502055781555  E_coul = 199.07161174541866
cycle= 4 E= -507.430444036136  delta_E= -1.38e-11  |g|= 1.78e-07  |ddm|= 1.56e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.502055781555  E_coul = 199.07161174541866
  HOMO = -0.233659878552573  LUMO = 112.405929786657
  mo_energy =
[-1.20153832e+02 -1.22372105e+01 -6.64221380e+00 -6.64221380e+00
 -6.64221380e+00 -1.16075229e+00 -2.33659879e-01 -2.33659879e-01
 -2.33659879e-01  1.12405930e+02  9.90566247e+02  7.26151271e+03
  3.94013939e+04]
E1 = -706.5020557947879  E_coul = 199.07161175865224
Extra cycle  E= -507.430444036136  delta_E= 6.82e-13  |g|= 2.62e-09  |ddm|= 5.49e-09
    CPU time for scf_cycle      0.10 sec, wall time      0.11 sec
exp = [1.81905154e+04 4.54736206e+03 6.87541690e+02 1.53633346e+02
 4.24363797e+01 4.75737426e+00 3.94566193e-01 8.60752713e+00
 4.91064155e-01]
E = -507.43044403613567
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((9, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.5476253398322024e+03,6.8630785798847160e+02,1.5555024230205126e+02,4.2742815896802767e+01,4.7505784169783016e+00,3.9162204394177752e-01,8.5974230426361959e+00,4.9072756124177219e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "7s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:53:45 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  18190.5154465        1
[INPUT] 0    0    [1    /1   ]  4547.36205553        1
[INPUT] 0    0    [1    /1   ]  687.541690108        1
[INPUT] 0    0    [1    /1   ]  153.633346423        1
[INPUT] 0    0    [1    /1   ]  42.4363797397        1
[INPUT] 0    0    [1    /1   ]  4.75737426162        1
[INPUT] 0    0    [1    /1   ]  0.394566192778       1
[INPUT] 1    0    [1    /1   ]  8.60752713354        1
[INPUT] 1    0    [1    /1   ]  0.491064154746       1

nuclear repulsion = 0
number of shells = 9
number of NR pGTOs = 13
number of NR cGTOs = 13
basis = {'Ar': [[0, [18190.51544648194, 1.0]], [0, [4547.362055526444, 1.0]], [0, [687.5416901075245, 1.0]], [0, [153.63334642345836, 1.0]], [0, [42.4363797397408, 1.0]], [0, [4.757374261622832, 1.0]], [0, [0.39456619277805777, 1.0]], [1, [8.60752713354094, 1.0]], [1, [0.49106415474626897, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [18190.51544648]
bas 1, expnt(s) = [4547.36205553]
bas 2, expnt(s) = [687.54169011]
bas 3, expnt(s) = [153.63334642]
bas 4, expnt(s) = [42.43637974]
bas 5, expnt(s) = [4.75737426]
bas 6, expnt(s) = [0.39456619]
bas 7, expnt(s) = [8.60752713]
bas 8, expnt(s) = [0.49106415]
CPU time:        53.72
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  1  1  1  0 38 39  0]
 [ 0  1  1  1  0 40 41  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.81905154e+04 3.95729821e+03 4.54736206e+03 1.39905463e+03
 6.87541690e+02 3.39226133e+02 1.53633346e+02 1.10250138e+02
 4.24363797e+01 4.20067198e+01 4.75737426e+00 8.13842777e+00
 3.94566193e-01 1.25778070e+00 8.60752713e+00 4.30112826e+01
 4.91064155e-01 1.19924298e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.318519856328837
cond(S) = 28.352607595640173
E1 = -689.0436448989918  E_coul = 185.02699581161394
init E= -504.016649087378
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.679477404062241  LUMO = 111.049099991344
  mo_energy =
[-1.21536190e+02 -1.32675666e+01 -7.61243039e+00 -7.61243039e+00
 -7.61243039e+00 -1.65062619e+00 -6.79477404e-01 -6.79477404e-01
 -6.79477404e-01  1.11049100e+02  9.89219249e+02  7.26033537e+03
  3.94003462e+04]
E1 = -706.5235329561805  E_coul = 199.0933710312875
cycle= 1 E= -507.430161924893  delta_E= -3.41  |g|= 0.298  |ddm|= 0.299
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.394893
diis-c [-0.1559402  1.       ]
  HOMO = -0.233549603123851  LUMO = 112.408776421788
  mo_energy =
[-1.20147637e+02 -1.22364464e+01 -6.64103058e+00 -6.64103058e+00
 -6.64103058e+00 -1.16071093e+00 -2.33549603e-01 -2.33549603e-01
 -2.33549603e-01  1.12408776e+02  9.90575130e+02  7.26152605e+03
  3.94014090e+04]
E1 = -706.5023062888856  E_coul = 199.07186230746288
cycle= 2 E= -507.430443981423  delta_E= -0.000282  |g|= 0.00376  |ddm|= 0.00921
    CPU time for cycle= 2      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.00395226
diis-c [-1.53044674e-05 -1.42537055e-03  1.00142537e+00]
  HOMO = -0.233658815554243  LUMO = 112.405954184728
  mo_energy =
[-1.20153774e+02 -1.22372028e+01 -6.64220041e+00 -6.64220041e+00
 -6.64220041e+00 -1.16075198e+00 -2.33658816e-01 -2.33658816e-01
 -2.33658816e-01  1.12405954e+02  9.90566307e+02  7.26151278e+03
  3.94013940e+04]
E1 = -706.5020589413404  E_coul = 199.0716149052178
cycle= 3 E= -507.430444036123  delta_E= -5.47e-08  |g|= 6.23e-05  |ddm|= 0.000112
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=8.25059e-05
diis-c [-1.53210081e-10  3.96816331e-05 -2.13137659e-02  1.02127408e+00]
  HOMO = -0.233659884616072  LUMO = 112.405929602695
  mo_energy =
[-1.20153833e+02 -1.22372105e+01 -6.64221386e+00 -6.64221386e+00
 -6.64221386e+00 -1.16075229e+00 -2.33659885e-01 -2.33659885e-01
 -2.33659885e-01  1.12405930e+02  9.90566246e+02  7.26151270e+03
  3.94013939e+04]
E1 = -706.502055781555  E_coul = 199.07161174541866
cycle= 4 E= -507.430444036136  delta_E= -1.38e-11  |g|= 1.78e-07  |ddm|= 1.56e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.502055781555  E_coul = 199.07161174541866
  HOMO = -0.233659878552573  LUMO = 112.405929786657
  mo_energy =
[-1.20153832e+02 -1.22372105e+01 -6.64221380e+00 -6.64221380e+00
 -6.64221380e+00 -1.16075229e+00 -2.33659879e-01 -2.33659879e-01
 -2.33659879e-01  1.12405930e+02  9.90566247e+02  7.26151271e+03
  3.94013939e+04]
E1 = -706.5020557947879  E_coul = 199.07161175865224
Extra cycle  E= -507.430444036136  delta_E= 6.82e-13  |g|= 2.62e-09  |ddm|= 5.49e-09
    CPU time for scf_cycle      0.09 sec, wall time      0.10 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 28.352607595640173
E1 = -706.5020557947879  E_coul = 199.07161175865224
init E= -507.430444036136
    CPU time for initialize scf      0.06 sec, wall time      0.06 sec
  HOMO = -0.233659878492395  LUMO = 112.405929788449
  mo_energy =
[-1.20153832e+02 -1.22372105e+01 -6.64221380e+00 -6.64221380e+00
 -6.64221380e+00 -1.16075229e+00 -2.33659878e-01 -2.33659878e-01
 -2.33659878e-01  1.12405930e+02  9.90566247e+02  7.26151271e+03
  3.94013939e+04]
E1 = -706.5020557949539  E_coul = 199.071611758818
cycle= 1 E= -507.430444036136  delta_E= -2.27e-13  |g|= 4.49e-11  |ddm|= 7.34e-11
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -706.5020557949539  E_coul = 199.071611758818
  HOMO = -0.233659878491652  LUMO = 112.405929788468
  mo_energy =
[-1.20153832e+02 -1.22372105e+01 -6.64221380e+00 -6.64221380e+00
 -6.64221380e+00 -1.16075229e+00 -2.33659878e-01 -2.33659878e-01
 -2.33659878e-01  1.12405930e+02  9.90566247e+02  7.26151271e+03
  3.94013939e+04]
E1 = -706.5020557949565  E_coul = 199.07161175882052
Extra cycle  E= -507.430444036136  delta_E= -1.14e-13  |g|= 6.42e-12  |ddm|= 1.14e-12
    CPU time for scf_cycle      0.13 sec, wall time      0.13 sec
exp = [1.81905154e+04 4.54736206e+03 6.87541690e+02 1.53633346e+02
 4.24363797e+01 4.75737426e+00 3.94566193e-01 8.60752713e+00
 4.91064155e-01]
grad_E = [-6.59279142e-06  1.18884535e-04 -3.56985505e-04 -3.75007507e-04
  6.50154657e-04  4.99474467e-03  4.81597385e-02  8.90455775e-03
  1.21998472e-02]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((9, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.5476253398322024e+03,6.8630785798847160e+02,1.5555024230205126e+02,4.2742815896802767e+01,4.7505784169783016e+00,3.9162204394177752e-01,8.5974230426361959e+00,4.9072756124177219e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "7s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:53:48 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  18190.5166617        1
[INPUT] 0    0    [1    /1   ]  4547.33936313        1
[INPUT] 0    0    [1    /1   ]  687.646961807        1
[INPUT] 0    0    [1    /1   ]  153.480538367        1
[INPUT] 0    0    [1    /1   ]  42.3681654433        1
[INPUT] 0    0    [1    /1   ]  4.75405173093        1
[INPUT] 0    0    [1    /1   ]  0.392491547505       1
[INPUT] 1    0    [1    /1   ]  8.6003688981         1
[INPUT] 1    0    [1    /1   ]  0.490821526049       1

nuclear repulsion = 0
number of shells = 9
number of NR pGTOs = 13
number of NR cGTOs = 13
basis = {'Ar': [[0, [18190.51666168031, 1.0]], [0, [4547.339363133037, 1.0]], [0, [687.6469618070424, 1.0]], [0, [153.48053836659204, 1.0]], [0, [42.36816544333252, 1.0]], [0, [4.754051730931522, 1.0]], [0, [0.39249154750460014, 1.0]], [1, [8.600368898099816, 1.0]], [1, [0.49082152604860657, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [18190.51666168]
bas 1, expnt(s) = [4547.33936313]
bas 2, expnt(s) = [687.64696181]
bas 3, expnt(s) = [153.48053837]
bas 4, expnt(s) = [42.36816544]
bas 5, expnt(s) = [4.75405173]
bas 6, expnt(s) = [0.39249155]
bas 7, expnt(s) = [8.6003689]
bas 8, expnt(s) = [0.49082153]
CPU time:        56.65
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  1  1  1  0 38 39  0]
 [ 0  1  1  1  0 40 41  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.81905167e+04 3.95729841e+03 4.54733936e+03 1.39904940e+03
 6.87646962e+02 3.39265088e+02 1.53480538e+02 1.10167884e+02
 4.23681654e+01 4.19560668e+01 4.75405173e+00 8.13416451e+00
 3.92491548e-01 1.25281734e+00 8.60036890e+00 4.29665756e+01
 4.90821526e-01 1.19850236e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319197112165817
cond(S) = 28.305144879546525
E1 = -688.962748116907  E_coul = 184.9503153890418
init E= -504.012432727865
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.680643406347849  LUMO = 110.780502185272
  mo_energy =
[-1.21547440e+02 -1.32730628e+01 -7.61826566e+00 -7.61826566e+00
 -7.61826566e+00 -1.65092549e+00 -6.80643406e-01 -6.80643406e-01
 -6.80643406e-01  1.10780502e+02  9.88585469e+02  7.25987479e+03
  3.93999520e+04]
E1 = -706.4228528742563  E_coul = 198.9925642039919
cycle= 1 E= -507.430288670264  delta_E= -3.42  |g|= 0.299  |ddm|=  0.3
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.39435
diis-c [-0.15551198  1.        ]
  HOMO = -0.235356465809684  LUMO = 112.137634590364
  mo_energy =
[-1.20162219e+02 -1.22432835e+01 -6.64837331e+00 -6.64837331e+00
 -6.64837331e+00 -1.16231051e+00 -2.35356466e-01 -2.35356466e-01
 -2.35356466e-01  1.12137635e+02  9.89937125e+02  7.26106043e+03
  3.94010095e+04]
E1 = -706.401537276444  E_coul = 198.97096469409618
cycle= 2 E= -507.430572582348  delta_E= -0.000284  |g|= 0.00378  |ddm|= 0.00924
    CPU time for cycle= 2      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.0039687
diis-c [-1.54378757e-05 -1.42018828e-03  1.00142019e+00]
  HOMO = -0.235466005668852  LUMO = 112.134802818024
  mo_energy =
[-1.20168381e+02 -1.22440432e+01 -6.64954867e+00 -6.64954867e+00
 -6.64954867e+00 -1.16235151e+00 -2.35466006e-01 -2.35466006e-01
 -2.35466006e-01  1.12134803e+02  9.89928270e+02  7.26104712e+03
  3.94009944e+04]
E1 = -706.4012885274377  E_coul = 198.9707158899063
cycle= 3 E= -507.430572637531  delta_E= -5.52e-08  |g|= 6.26e-05  |ddm|= 0.000113
    CPU time for cycle= 3      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=8.29303e-05
diis-c [-1.54526986e-10  3.95280074e-05 -2.13318253e-02  1.02129230e+00]
  HOMO = -0.235467079277573  LUMO = 112.13477808308
  mo_energy =
[-1.20168440e+02 -1.22440510e+01 -6.64956221e+00 -6.64956221e+00
 -6.64956221e+00 -1.16235182e+00 -2.35467079e-01 -2.35467079e-01
 -2.35467079e-01  1.12134778e+02  9.89928209e+02  7.26104705e+03
  3.94009943e+04]
E1 = -706.4012853429259  E_coul = 198.9707127053808
cycle= 4 E= -507.430572637545  delta_E= -1.36e-11  |g|= 1.79e-07  |ddm|= 1.57e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.4012853429259  E_coul = 198.9707127053808
  HOMO = -0.23546707317336  LUMO = 112.134778268258
  mo_energy =
[-1.20168440e+02 -1.22440510e+01 -6.64956215e+00 -6.64956215e+00
 -6.64956215e+00 -1.16235181e+00 -2.35467073e-01 -2.35467073e-01
 -2.35467073e-01  1.12134778e+02  9.89928209e+02  7.26104705e+03
  3.94009943e+04]
E1 = -706.4012853562709  E_coul = 198.9707127187258
Extra cycle  E= -507.430572637545  delta_E= -5.68e-14  |g|= 2.64e-09  |ddm|= 5.53e-09
    CPU time for scf_cycle      0.09 sec, wall time      0.10 sec
exp = [1.81905167e+04 4.54733936e+03 6.87646962e+02 1.53480538e+02
 4.23681654e+01 4.75405173e+00 3.92491548e-01 8.60036890e+00
 4.90821526e-01]
E = -507.43057263754514
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((9, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.5476253398322024e+03,6.8630785798847160e+02,1.5555024230205126e+02,4.2742815896802767e+01,4.7505784169783016e+00,3.9162204394177752e-01,8.5974230426361959e+00,4.9072756124177219e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "7s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:53:49 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  18190.5166617        1
[INPUT] 0    0    [1    /1   ]  4547.33936313        1
[INPUT] 0    0    [1    /1   ]  687.646961807        1
[INPUT] 0    0    [1    /1   ]  153.480538367        1
[INPUT] 0    0    [1    /1   ]  42.3681654433        1
[INPUT] 0    0    [1    /1   ]  4.75405173093        1
[INPUT] 0    0    [1    /1   ]  0.392491547505       1
[INPUT] 1    0    [1    /1   ]  8.6003688981         1
[INPUT] 1    0    [1    /1   ]  0.490821526049       1

nuclear repulsion = 0
number of shells = 9
number of NR pGTOs = 13
number of NR cGTOs = 13
basis = {'Ar': [[0, [18190.51666168031, 1.0]], [0, [4547.339363133037, 1.0]], [0, [687.6469618070424, 1.0]], [0, [153.48053836659204, 1.0]], [0, [42.36816544333252, 1.0]], [0, [4.754051730931522, 1.0]], [0, [0.39249154750460014, 1.0]], [1, [8.600368898099816, 1.0]], [1, [0.49082152604860657, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [18190.51666168]
bas 1, expnt(s) = [4547.33936313]
bas 2, expnt(s) = [687.64696181]
bas 3, expnt(s) = [153.48053837]
bas 4, expnt(s) = [42.36816544]
bas 5, expnt(s) = [4.75405173]
bas 6, expnt(s) = [0.39249155]
bas 7, expnt(s) = [8.6003689]
bas 8, expnt(s) = [0.49082153]
CPU time:        57.02
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  1  1  1  0 38 39  0]
 [ 0  1  1  1  0 40 41  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.81905167e+04 3.95729841e+03 4.54733936e+03 1.39904940e+03
 6.87646962e+02 3.39265088e+02 1.53480538e+02 1.10167884e+02
 4.23681654e+01 4.19560668e+01 4.75405173e+00 8.13416451e+00
 3.92491548e-01 1.25281734e+00 8.60036890e+00 4.29665756e+01
 4.90821526e-01 1.19850236e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319197112165817
cond(S) = 28.305144879546525
E1 = -688.962748116907  E_coul = 184.9503153890418
init E= -504.012432727865
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.680643406347849  LUMO = 110.780502185272
  mo_energy =
[-1.21547440e+02 -1.32730628e+01 -7.61826566e+00 -7.61826566e+00
 -7.61826566e+00 -1.65092549e+00 -6.80643406e-01 -6.80643406e-01
 -6.80643406e-01  1.10780502e+02  9.88585469e+02  7.25987479e+03
  3.93999520e+04]
E1 = -706.4228528742563  E_coul = 198.9925642039919
cycle= 1 E= -507.430288670264  delta_E= -3.42  |g|= 0.299  |ddm|=  0.3
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.39435
diis-c [-0.15551198  1.        ]
  HOMO = -0.235356465809684  LUMO = 112.137634590364
  mo_energy =
[-1.20162219e+02 -1.22432835e+01 -6.64837331e+00 -6.64837331e+00
 -6.64837331e+00 -1.16231051e+00 -2.35356466e-01 -2.35356466e-01
 -2.35356466e-01  1.12137635e+02  9.89937125e+02  7.26106043e+03
  3.94010095e+04]
E1 = -706.401537276444  E_coul = 198.97096469409618
cycle= 2 E= -507.430572582348  delta_E= -0.000284  |g|= 0.00378  |ddm|= 0.00924
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.0039687
diis-c [-1.54378757e-05 -1.42018828e-03  1.00142019e+00]
  HOMO = -0.235466005668852  LUMO = 112.134802818024
  mo_energy =
[-1.20168381e+02 -1.22440432e+01 -6.64954867e+00 -6.64954867e+00
 -6.64954867e+00 -1.16235151e+00 -2.35466006e-01 -2.35466006e-01
 -2.35466006e-01  1.12134803e+02  9.89928270e+02  7.26104712e+03
  3.94009944e+04]
E1 = -706.4012885274377  E_coul = 198.9707158899063
cycle= 3 E= -507.430572637531  delta_E= -5.52e-08  |g|= 6.26e-05  |ddm|= 0.000113
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=8.29303e-05
diis-c [-1.54526986e-10  3.95280074e-05 -2.13318253e-02  1.02129230e+00]
  HOMO = -0.235467079277573  LUMO = 112.13477808308
  mo_energy =
[-1.20168440e+02 -1.22440510e+01 -6.64956221e+00 -6.64956221e+00
 -6.64956221e+00 -1.16235182e+00 -2.35467079e-01 -2.35467079e-01
 -2.35467079e-01  1.12134778e+02  9.89928209e+02  7.26104705e+03
  3.94009943e+04]
E1 = -706.4012853429259  E_coul = 198.9707127053808
cycle= 4 E= -507.430572637545  delta_E= -1.36e-11  |g|= 1.79e-07  |ddm|= 1.57e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.4012853429259  E_coul = 198.9707127053808
  HOMO = -0.23546707317336  LUMO = 112.134778268258
  mo_energy =
[-1.20168440e+02 -1.22440510e+01 -6.64956215e+00 -6.64956215e+00
 -6.64956215e+00 -1.16235181e+00 -2.35467073e-01 -2.35467073e-01
 -2.35467073e-01  1.12134778e+02  9.89928209e+02  7.26104705e+03
  3.94009943e+04]
E1 = -706.4012853562709  E_coul = 198.9707127187258
Extra cycle  E= -507.430572637545  delta_E= -5.68e-14  |g|= 2.64e-09  |ddm|= 5.53e-09
    CPU time for scf_cycle      0.09 sec, wall time      0.10 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 28.305144879546525
E1 = -706.4012853562709  E_coul = 198.9707127187258
init E= -507.430572637545
    CPU time for initialize scf      0.06 sec, wall time      0.06 sec
  HOMO = -0.23546707311276  LUMO = 112.134778270062
  mo_energy =
[-1.20168440e+02 -1.22440510e+01 -6.64956215e+00 -6.64956215e+00
 -6.64956215e+00 -1.16235181e+00 -2.35467073e-01 -2.35467073e-01
 -2.35467073e-01  1.12134778e+02  9.89928209e+02  7.26104705e+03
  3.94009943e+04]
E1 = -706.4012853564382  E_coul = 198.970712718893
cycle= 1 E= -507.430572637545  delta_E= -5.68e-14  |g|= 4.63e-11  |ddm|= 7.4e-11
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -706.4012853564382  E_coul = 198.970712718893
  HOMO = -0.235467073112021  LUMO = 112.134778270084
  mo_energy =
[-1.20168440e+02 -1.22440510e+01 -6.64956215e+00 -6.64956215e+00
 -6.64956215e+00 -1.16235181e+00 -2.35467073e-01 -2.35467073e-01
 -2.35467073e-01  1.12134778e+02  9.89928209e+02  7.26104705e+03
  3.94009943e+04]
E1 = -706.4012853564406  E_coul = 198.97071271889533
Extra cycle  E= -507.430572637545  delta_E=    0  |g|= 2.12e-12  |ddm|= 1.11e-12
    CPU time for scf_cycle      0.13 sec, wall time      0.13 sec
exp = [1.81905167e+04 4.54733936e+03 6.87646962e+02 1.53480538e+02
 4.23681654e+01 4.75405173e+00 3.92491548e-01 8.60036890e+00
 4.90821526e-01]
grad_E = [-6.58905063e-06  1.18574539e-04 -3.46916698e-04 -3.42507205e-04
  8.84621486e-05  1.48245850e-03  1.40274949e-02  2.61744732e-03
  3.58156026e-03]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((9, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.5476253398322024e+03,6.8630785798847160e+02,1.5555024230205126e+02,4.2742815896802767e+01,4.7505784169783016e+00,3.9162204394177752e-01,8.5974230426361959e+00,4.9072756124177219e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "7s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:53:52 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  18190.5161572        1
[INPUT] 0    0    [1    /1   ]  4547.34879769        1
[INPUT] 0    0    [1    /1   ]  687.602429524        1
[INPUT] 0    0    [1    /1   ]  153.551275956        1
[INPUT] 0    0    [1    /1   ]  42.3778362441        1
[INPUT] 0    0    [1    /1   ]  4.75266497167        1
[INPUT] 0    0    [1    /1   ]  0.391707055664       1
[INPUT] 1    0    [1    /1   ]  8.59756097314        1
[INPUT] 1    0    [1    /1   ]  0.490724975048       1

nuclear repulsion = 0
number of shells = 9
number of NR pGTOs = 13
number of NR cGTOs = 13
basis = {'Ar': [[0, [18190.516157246344, 1.0]], [0, [4547.348797689145, 1.0]], [0, [687.6024295243533, 1.0]], [0, [153.55127595595823, 1.0]], [0, [42.37783624409607, 1.0]], [0, [4.752664971671808, 1.0]], [0, [0.3917070556637478, 1.0]], [1, [8.5975609731403, 1.0]], [1, [0.4907249750483783, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [18190.51615725]
bas 1, expnt(s) = [4547.34879769]
bas 2, expnt(s) = [687.60242952]
bas 3, expnt(s) = [153.55127596]
bas 4, expnt(s) = [42.37783624]
bas 5, expnt(s) = [4.75266497]
bas 6, expnt(s) = [0.39170706]
bas 7, expnt(s) = [8.59756097]
bas 8, expnt(s) = [0.49072498]
CPU time:        59.97
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  1  1  1  0 38 39  0]
 [ 0  1  1  1  0 40 41  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.81905162e+04 3.95729832e+03 4.54734880e+03 1.39905158e+03
 6.87602430e+02 3.39248609e+02 1.53551276e+02 1.10205964e+02
 4.23778362e+01 4.19632492e+01 4.75266497e+00 8.13238489e+00
 3.91707056e-01 1.25093882e+00 8.59756097e+00 4.29490412e+01
 4.90724975e-01 1.19820767e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319447932337763
cond(S) = 28.308431460127117
E1 = -688.9309225315493  E_coul = 184.92064213247798
init E= -504.010280399071
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.681096810086686  LUMO = 110.826130002213
  mo_energy =
[-1.21551682e+02 -1.32753054e+01 -7.62051473e+00 -7.62051473e+00
 -7.62051473e+00 -1.65104780e+00 -6.81096810e-01 -6.81096810e-01
 -6.81096810e-01  1.10826130e+02  9.88777118e+02  7.26000842e+03
  3.94000650e+04]
E1 = -706.384400896877  E_coul = 198.95409686137825
cycle= 1 E= -507.430304035499  delta_E= -3.42  |g|= 0.299  |ddm|=  0.3
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.394301
diis-c [-0.1554731  1.       ]
  HOMO = -0.236050425486103  LUMO = 112.182463428331
  mo_energy =
[-1.20167617e+02 -1.22460137e+01 -6.65117938e+00 -6.65117938e+00
 -6.65117938e+00 -1.16292403e+00 -2.36050425e-01 -2.36050425e-01
 -2.36050425e-01  1.12182463e+02  9.90127435e+02  7.26119264e+03
  3.94011209e+04]
E1 = -706.3630965133215  E_coul = 198.93250849103174
cycle= 2 E= -507.43058802229  delta_E= -0.000284  |g|= 0.00378  |ddm|= 0.00924
    CPU time for cycle= 2      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.00397052
diis-c [-1.54509526e-05 -1.42332465e-03  1.00142332e+00]
  HOMO = -0.236159820426367  LUMO = 112.179632036939
  mo_energy =
[-1.20173776e+02 -1.22467729e+01 -6.65235406e+00 -6.65235406e+00
 -6.65235406e+00 -1.16296490e+00 -2.36159820e-01 -2.36159820e-01
 -2.36159820e-01  1.12179632e+02  9.90118584e+02  7.26117933e+03
  3.94011059e+04]
E1 = -706.3628479725041  E_coul = 198.93225989505126
cycle= 3 E= -507.430588077453  delta_E= -5.52e-08  |g|= 6.25e-05  |ddm|= 0.000113
    CPU time for cycle= 3      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=8.29077e-05
diis-c [-1.54417750e-10  3.94525394e-05 -2.13171958e-02  1.02127774e+00]
  HOMO = -0.236160891593618  LUMO = 112.179607327376
  mo_energy =
[-1.20173835e+02 -1.22467807e+01 -6.65236759e+00 -6.65236759e+00
 -6.65236759e+00 -1.16296521e+00 -2.36160892e-01 -2.36160892e-01
 -2.36160892e-01  1.12179607e+02  9.90118523e+02  7.26117926e+03
  3.94011058e+04]
E1 = -706.362844792649  E_coul = 198.93225671518206
cycle= 4 E= -507.430588077467  delta_E= -1.4e-11  |g|= 1.79e-07  |ddm|= 1.57e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.362844792649  E_coul = 198.93225671518206
  HOMO = -0.236160885502191  LUMO = 112.179607512479
  mo_energy =
[-1.20173835e+02 -1.22467807e+01 -6.65236752e+00 -6.65236752e+00
 -6.65236752e+00 -1.16296521e+00 -2.36160886e-01 -2.36160886e-01
 -2.36160886e-01  1.12179608e+02  9.90118523e+02  7.26117926e+03
  3.94011058e+04]
E1 = -706.3628448059727  E_coul = 198.93225672850627
Extra cycle  E= -507.430588077466  delta_E= 4.55e-13  |g|= 2.63e-09  |ddm|= 5.52e-09
    CPU time for scf_cycle      0.09 sec, wall time      0.10 sec
exp = [1.81905162e+04 4.54734880e+03 6.87602430e+02 1.53551276e+02
 4.23778362e+01 4.75266497e+00 3.91707056e-01 8.59756097e+00
 4.90724975e-01]
E = -507.43058807746644
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((9, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.5476253398322024e+03,6.8630785798847160e+02,1.5555024230205126e+02,4.2742815896802767e+01,4.7505784169783016e+00,3.9162204394177752e-01,8.5974230426361959e+00,4.9072756124177219e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "7s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:53:52 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  18190.5161572        1
[INPUT] 0    0    [1    /1   ]  4547.34879769        1
[INPUT] 0    0    [1    /1   ]  687.602429524        1
[INPUT] 0    0    [1    /1   ]  153.551275956        1
[INPUT] 0    0    [1    /1   ]  42.3778362441        1
[INPUT] 0    0    [1    /1   ]  4.75266497167        1
[INPUT] 0    0    [1    /1   ]  0.391707055664       1
[INPUT] 1    0    [1    /1   ]  8.59756097314        1
[INPUT] 1    0    [1    /1   ]  0.490724975048       1

nuclear repulsion = 0
number of shells = 9
number of NR pGTOs = 13
number of NR cGTOs = 13
basis = {'Ar': [[0, [18190.516157246344, 1.0]], [0, [4547.348797689145, 1.0]], [0, [687.6024295243533, 1.0]], [0, [153.55127595595823, 1.0]], [0, [42.37783624409607, 1.0]], [0, [4.752664971671808, 1.0]], [0, [0.3917070556637478, 1.0]], [1, [8.5975609731403, 1.0]], [1, [0.4907249750483783, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [18190.51615725]
bas 1, expnt(s) = [4547.34879769]
bas 2, expnt(s) = [687.60242952]
bas 3, expnt(s) = [153.55127596]
bas 4, expnt(s) = [42.37783624]
bas 5, expnt(s) = [4.75266497]
bas 6, expnt(s) = [0.39170706]
bas 7, expnt(s) = [8.59756097]
bas 8, expnt(s) = [0.49072498]
CPU time:        60.36
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  1  1  1  0 38 39  0]
 [ 0  1  1  1  0 40 41  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.81905162e+04 3.95729832e+03 4.54734880e+03 1.39905158e+03
 6.87602430e+02 3.39248609e+02 1.53551276e+02 1.10205964e+02
 4.23778362e+01 4.19632492e+01 4.75266497e+00 8.13238489e+00
 3.91707056e-01 1.25093882e+00 8.59756097e+00 4.29490412e+01
 4.90724975e-01 1.19820767e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319447932337763
cond(S) = 28.308431460127117
E1 = -688.9309225315493  E_coul = 184.92064213247798
init E= -504.010280399071
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.681096810086686  LUMO = 110.826130002213
  mo_energy =
[-1.21551682e+02 -1.32753054e+01 -7.62051473e+00 -7.62051473e+00
 -7.62051473e+00 -1.65104780e+00 -6.81096810e-01 -6.81096810e-01
 -6.81096810e-01  1.10826130e+02  9.88777118e+02  7.26000842e+03
  3.94000650e+04]
E1 = -706.384400896877  E_coul = 198.95409686137825
cycle= 1 E= -507.430304035499  delta_E= -3.42  |g|= 0.299  |ddm|=  0.3
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.394301
diis-c [-0.1554731  1.       ]
  HOMO = -0.236050425486103  LUMO = 112.182463428331
  mo_energy =
[-1.20167617e+02 -1.22460137e+01 -6.65117938e+00 -6.65117938e+00
 -6.65117938e+00 -1.16292403e+00 -2.36050425e-01 -2.36050425e-01
 -2.36050425e-01  1.12182463e+02  9.90127435e+02  7.26119264e+03
  3.94011209e+04]
E1 = -706.3630965133215  E_coul = 198.93250849103174
cycle= 2 E= -507.43058802229  delta_E= -0.000284  |g|= 0.00378  |ddm|= 0.00924
    CPU time for cycle= 2      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.00397052
diis-c [-1.54509526e-05 -1.42332465e-03  1.00142332e+00]
  HOMO = -0.236159820426367  LUMO = 112.179632036939
  mo_energy =
[-1.20173776e+02 -1.22467729e+01 -6.65235406e+00 -6.65235406e+00
 -6.65235406e+00 -1.16296490e+00 -2.36159820e-01 -2.36159820e-01
 -2.36159820e-01  1.12179632e+02  9.90118584e+02  7.26117933e+03
  3.94011059e+04]
E1 = -706.3628479725041  E_coul = 198.93225989505126
cycle= 3 E= -507.430588077453  delta_E= -5.52e-08  |g|= 6.25e-05  |ddm|= 0.000113
    CPU time for cycle= 3      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=8.29077e-05
diis-c [-1.54417750e-10  3.94525394e-05 -2.13171958e-02  1.02127774e+00]
  HOMO = -0.236160891593618  LUMO = 112.179607327376
  mo_energy =
[-1.20173835e+02 -1.22467807e+01 -6.65236759e+00 -6.65236759e+00
 -6.65236759e+00 -1.16296521e+00 -2.36160892e-01 -2.36160892e-01
 -2.36160892e-01  1.12179607e+02  9.90118523e+02  7.26117926e+03
  3.94011058e+04]
E1 = -706.362844792649  E_coul = 198.93225671518206
cycle= 4 E= -507.430588077467  delta_E= -1.4e-11  |g|= 1.79e-07  |ddm|= 1.57e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.362844792649  E_coul = 198.93225671518206
  HOMO = -0.236160885502191  LUMO = 112.179607512479
  mo_energy =
[-1.20173835e+02 -1.22467807e+01 -6.65236752e+00 -6.65236752e+00
 -6.65236752e+00 -1.16296521e+00 -2.36160886e-01 -2.36160886e-01
 -2.36160886e-01  1.12179608e+02  9.90118523e+02  7.26117926e+03
  3.94011058e+04]
E1 = -706.3628448059727  E_coul = 198.93225672850627
Extra cycle  E= -507.430588077466  delta_E= 4.55e-13  |g|= 2.63e-09  |ddm|= 5.52e-09
    CPU time for scf_cycle      0.09 sec, wall time      0.10 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 28.308431460127117
E1 = -706.3628448059727  E_coul = 198.93225672850627
init E= -507.430588077466
    CPU time for initialize scf      0.06 sec, wall time      0.06 sec
  HOMO = -0.236160885441765  LUMO = 112.179607514283
  mo_energy =
[-1.20173835e+02 -1.22467807e+01 -6.65236752e+00 -6.65236752e+00
 -6.65236752e+00 -1.16296521e+00 -2.36160885e-01 -2.36160885e-01
 -2.36160885e-01  1.12179608e+02  9.90118523e+02  7.26117926e+03
  3.94011058e+04]
E1 = -706.36284480614  E_coul = 198.93225672867305
cycle= 1 E= -507.430588077467  delta_E= -4.55e-13  |g|= 4.51e-11  |ddm|= 7.38e-11
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -706.36284480614  E_coul = 198.93225672867305
  HOMO = -0.236160885441022  LUMO = 112.179607514303
  mo_energy =
[-1.20173835e+02 -1.22467807e+01 -6.65236752e+00 -6.65236752e+00
 -6.65236752e+00 -1.16296521e+00 -2.36160885e-01 -2.36160885e-01
 -2.36160885e-01  1.12179608e+02  9.90118523e+02  7.26117926e+03
  3.94011058e+04]
E1 = -706.3628448061422  E_coul = 198.93225672867555
Extra cycle  E= -507.430588077467  delta_E= 2.27e-13  |g|= 4.29e-12  |ddm|= 1.14e-12
    CPU time for scf_cycle      0.12 sec, wall time      0.13 sec
exp = [1.81905162e+04 4.54734880e+03 6.87602430e+02 1.53551276e+02
 4.23778362e+01 4.75266497e+00 3.91707056e-01 8.59756097e+00
 4.90724975e-01]
grad_E = [-6.59124558e-06  1.18808268e-04 -3.57801935e-04 -2.60002542e-04
 -6.37658121e-05  1.02936236e-04  8.84651967e-04  1.81179260e-04
  2.36189336e-04]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((9, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.5476253398322024e+03,6.8630785798847160e+02,1.5555024230205126e+02,4.2742815896802767e+01,4.7505784169783016e+00,3.9162204394177752e-01,8.5974230426361959e+00,4.9072756124177219e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "7s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:53:55 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  18190.5159354        1
[INPUT] 0    0    [1    /1   ]  4547.3529489         1
[INPUT] 0    0    [1    /1   ]  687.582796657        1
[INPUT] 0    0    [1    /1   ]  153.582080826        1
[INPUT] 0    0    [1    /1   ]  42.3857633337        1
[INPUT] 0    0    [1    /1   ]  4.75251752154        1
[INPUT] 0    0    [1    /1   ]  0.391640571511       1
[INPUT] 1    0    [1    /1   ]  8.59729001115        1
[INPUT] 1    0    [1    /1   ]  0.490715376977       1

nuclear repulsion = 0
number of shells = 9
number of NR pGTOs = 13
number of NR cGTOs = 13
basis = {'Ar': [[0, [18190.515935360265, 1.0]], [0, [4547.3529489017, 1.0]], [0, [687.5827966565394, 1.0]], [0, [153.58208082612072, 1.0]], [0, [42.385763333716355, 1.0]], [0, [4.752517521543619, 1.0]], [0, [0.3916405715114586, 1.0]], [1, [8.597290011150339, 1.0]], [1, [0.4907153769766982, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [18190.51593536]
bas 1, expnt(s) = [4547.3529489]
bas 2, expnt(s) = [687.58279666]
bas 3, expnt(s) = [153.58208083]
bas 4, expnt(s) = [42.38576333]
bas 5, expnt(s) = [4.75251752]
bas 6, expnt(s) = [0.39164057]
bas 7, expnt(s) = [8.59729001]
bas 8, expnt(s) = [0.49071538]
CPU time:        63.43
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  1  1  1  0 38 39  0]
 [ 0  1  1  1  0 40 41  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.81905159e+04 3.95729829e+03 4.54735295e+03 1.39905253e+03
 6.87582797e+02 3.39241345e+02 1.53582081e+02 1.10222545e+02
 4.23857633e+01 4.19691362e+01 4.75251752e+00 8.13219566e+00
 3.91640572e-01 1.25077958e+00 8.59729001e+00 4.29473492e+01
 4.90715377e-01 1.19817837e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.31947058950969
cond(S) = 28.3129491069267
E1 = -688.9279480112071  E_coul = 184.91794711715667
init E= -504.01000089405
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.681136938116606  LUMO = 110.858989190484
  mo_energy =
[-1.21552049e+02 -1.32755336e+01 -7.62071712e+00 -7.62071712e+00
 -7.62071712e+00 -1.65106186e+00 -6.81136938e-01 -6.81136938e-01
 -6.81136938e-01  1.10858989e+02  9.88877936e+02  7.26008119e+03
  3.94001269e+04]
E1 = -706.3809924850365  E_coul = 198.95068763786296
cycle= 1 E= -507.430304847173  delta_E= -3.42  |g|= 0.299  |ddm|=  0.3
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.394328
diis-c [-0.15549459  1.        ]
  HOMO = -0.236112299411409  LUMO = 112.215285122041
  mo_energy =
[-1.20168062e+02 -1.22462819e+01 -6.65142896e+00 -6.65142896e+00
 -6.65142896e+00 -1.16298073e+00 -2.36112299e-01 -2.36112299e-01
 -2.36112299e-01  1.12215285e+02  9.90228192e+02  7.26126538e+03
  3.94011828e+04]
E1 = -706.3596980101528  E_coul = 198.92910929471097
cycle= 2 E= -507.430588715442  delta_E= -0.000284  |g|= 0.00378  |ddm|= 0.00924
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00396979
diis-c [-1.54445595e-05 -1.42469184e-03  1.00142469e+00]
  HOMO = -0.236221628513751  LUMO = 112.212454577208
  mo_energy =
[-1.20174219e+02 -1.22470408e+01 -6.65260304e+00 -6.65260304e+00
 -6.65260304e+00 -1.16302158e+00 -2.36221629e-01 -2.36221629e-01
 -2.36221629e-01  1.12212455e+02  9.90219345e+02  7.26125208e+03
  3.94011678e+04]
E1 = -706.3594496332279  E_coul = 198.9288608626638
cycle= 3 E= -507.430588770564  delta_E= -5.51e-08  |g|= 6.25e-05  |ddm|= 0.000113
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=8.28693e-05
diis-c [-1.54284221e-10  3.94443691e-05 -2.13117046e-02  1.02127226e+00]
  HOMO = -0.236222698640962  LUMO = 112.212429886664
  mo_energy =
[-1.20174278e+02 -1.22470485e+01 -6.65261655e+00 -6.65261655e+00
 -6.65261655e+00 -1.16302188e+00 -2.36222699e-01 -2.36222699e-01
 -2.36222699e-01  1.12212430e+02  9.90219284e+02  7.26125201e+03
  3.94011677e+04]
E1 = -706.3594464565546  E_coul = 198.92885768597674
cycle= 4 E= -507.430588770578  delta_E= -1.38e-11  |g|= 1.79e-07  |ddm|= 1.57e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.3594464565546  E_coul = 198.92885768597674
  HOMO = -0.236222692556286  LUMO = 112.212430071653
  mo_energy =
[-1.20174278e+02 -1.22470485e+01 -6.65261649e+00 -6.65261649e+00
 -6.65261649e+00 -1.16302188e+00 -2.36222693e-01 -2.36222693e-01
 -2.36222693e-01  1.12212430e+02  9.90219285e+02  7.26125201e+03
  3.94011677e+04]
E1 = -706.359446469864  E_coul = 198.92885769928648
Extra cycle  E= -507.430588770578  delta_E= 3.41e-13  |g|= 2.63e-09  |ddm|= 5.52e-09
    CPU time for scf_cycle      0.10 sec, wall time      0.11 sec
exp = [1.81905159e+04 4.54735295e+03 6.87582797e+02 1.53582081e+02
 4.23857633e+01 4.75251752e+00 3.91640572e-01 8.59729001e+00
 4.90715377e-01]
E = -507.4305887705775
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((9, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.5476253398322024e+03,6.8630785798847160e+02,1.5555024230205126e+02,4.2742815896802767e+01,4.7505784169783016e+00,3.9162204394177752e-01,8.5974230426361959e+00,4.9072756124177219e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "7s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:53:56 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  18190.5159354        1
[INPUT] 0    0    [1    /1   ]  4547.3529489         1
[INPUT] 0    0    [1    /1   ]  687.582796657        1
[INPUT] 0    0    [1    /1   ]  153.582080826        1
[INPUT] 0    0    [1    /1   ]  42.3857633337        1
[INPUT] 0    0    [1    /1   ]  4.75251752154        1
[INPUT] 0    0    [1    /1   ]  0.391640571511       1
[INPUT] 1    0    [1    /1   ]  8.59729001115        1
[INPUT] 1    0    [1    /1   ]  0.490715376977       1

nuclear repulsion = 0
number of shells = 9
number of NR pGTOs = 13
number of NR cGTOs = 13
basis = {'Ar': [[0, [18190.515935360265, 1.0]], [0, [4547.3529489017, 1.0]], [0, [687.5827966565394, 1.0]], [0, [153.58208082612072, 1.0]], [0, [42.385763333716355, 1.0]], [0, [4.752517521543619, 1.0]], [0, [0.3916405715114586, 1.0]], [1, [8.597290011150339, 1.0]], [1, [0.4907153769766982, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [18190.51593536]
bas 1, expnt(s) = [4547.3529489]
bas 2, expnt(s) = [687.58279666]
bas 3, expnt(s) = [153.58208083]
bas 4, expnt(s) = [42.38576333]
bas 5, expnt(s) = [4.75251752]
bas 6, expnt(s) = [0.39164057]
bas 7, expnt(s) = [8.59729001]
bas 8, expnt(s) = [0.49071538]
CPU time:        63.86
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  1  1  1  0 38 39  0]
 [ 0  1  1  1  0 40 41  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.81905159e+04 3.95729829e+03 4.54735295e+03 1.39905253e+03
 6.87582797e+02 3.39241345e+02 1.53582081e+02 1.10222545e+02
 4.23857633e+01 4.19691362e+01 4.75251752e+00 8.13219566e+00
 3.91640572e-01 1.25077958e+00 8.59729001e+00 4.29473492e+01
 4.90715377e-01 1.19817837e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.31947058950969
cond(S) = 28.3129491069267
E1 = -688.9279480112071  E_coul = 184.91794711715667
init E= -504.01000089405
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.681136938116606  LUMO = 110.858989190484
  mo_energy =
[-1.21552049e+02 -1.32755336e+01 -7.62071712e+00 -7.62071712e+00
 -7.62071712e+00 -1.65106186e+00 -6.81136938e-01 -6.81136938e-01
 -6.81136938e-01  1.10858989e+02  9.88877936e+02  7.26008119e+03
  3.94001269e+04]
E1 = -706.3809924850365  E_coul = 198.95068763786296
cycle= 1 E= -507.430304847173  delta_E= -3.42  |g|= 0.299  |ddm|=  0.3
    CPU time for cycle= 1      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.394328
diis-c [-0.15549459  1.        ]
  HOMO = -0.236112299411409  LUMO = 112.215285122041
  mo_energy =
[-1.20168062e+02 -1.22462819e+01 -6.65142896e+00 -6.65142896e+00
 -6.65142896e+00 -1.16298073e+00 -2.36112299e-01 -2.36112299e-01
 -2.36112299e-01  1.12215285e+02  9.90228192e+02  7.26126538e+03
  3.94011828e+04]
E1 = -706.3596980101528  E_coul = 198.92910929471097
cycle= 2 E= -507.430588715442  delta_E= -0.000284  |g|= 0.00378  |ddm|= 0.00924
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00396979
diis-c [-1.54445595e-05 -1.42469184e-03  1.00142469e+00]
  HOMO = -0.236221628513751  LUMO = 112.212454577208
  mo_energy =
[-1.20174219e+02 -1.22470408e+01 -6.65260304e+00 -6.65260304e+00
 -6.65260304e+00 -1.16302158e+00 -2.36221629e-01 -2.36221629e-01
 -2.36221629e-01  1.12212455e+02  9.90219345e+02  7.26125208e+03
  3.94011678e+04]
E1 = -706.3594496332279  E_coul = 198.9288608626638
cycle= 3 E= -507.430588770564  delta_E= -5.51e-08  |g|= 6.25e-05  |ddm|= 0.000113
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=8.28693e-05
diis-c [-1.54284221e-10  3.94443691e-05 -2.13117046e-02  1.02127226e+00]
  HOMO = -0.236222698640962  LUMO = 112.212429886664
  mo_energy =
[-1.20174278e+02 -1.22470485e+01 -6.65261655e+00 -6.65261655e+00
 -6.65261655e+00 -1.16302188e+00 -2.36222699e-01 -2.36222699e-01
 -2.36222699e-01  1.12212430e+02  9.90219284e+02  7.26125201e+03
  3.94011677e+04]
E1 = -706.3594464565546  E_coul = 198.92885768597674
cycle= 4 E= -507.430588770578  delta_E= -1.38e-11  |g|= 1.79e-07  |ddm|= 1.57e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.3594464565546  E_coul = 198.92885768597674
  HOMO = -0.236222692556286  LUMO = 112.212430071653
  mo_energy =
[-1.20174278e+02 -1.22470485e+01 -6.65261649e+00 -6.65261649e+00
 -6.65261649e+00 -1.16302188e+00 -2.36222693e-01 -2.36222693e-01
 -2.36222693e-01  1.12212430e+02  9.90219285e+02  7.26125201e+03
  3.94011677e+04]
E1 = -706.359446469864  E_coul = 198.92885769928648
Extra cycle  E= -507.430588770578  delta_E= 3.41e-13  |g|= 2.63e-09  |ddm|= 5.52e-09
    CPU time for scf_cycle      0.11 sec, wall time      0.11 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 28.3129491069267
E1 = -706.359446469864  E_coul = 198.92885769928648
init E= -507.430588770578
    CPU time for initialize scf      0.07 sec, wall time      0.07 sec
  HOMO = -0.236222692495946  LUMO = 112.212430073456
  mo_energy =
[-1.20174278e+02 -1.22470485e+01 -6.65261649e+00 -6.65261649e+00
 -6.65261649e+00 -1.16302188e+00 -2.36222692e-01 -2.36222692e-01
 -2.36222692e-01  1.12212430e+02  9.90219285e+02  7.26125201e+03
  3.94011677e+04]
E1 = -706.3594464700308  E_coul = 198.92885769945315
cycle= 1 E= -507.430588770578  delta_E= -1.14e-13  |g|= 4.55e-11  |ddm|= 7.37e-11
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -706.3594464700308  E_coul = 198.92885769945315
  HOMO = -0.2362226924952  LUMO = 112.212430073476
  mo_energy =
[-1.20174278e+02 -1.22470485e+01 -6.65261649e+00 -6.65261649e+00
 -6.65261649e+00 -1.16302188e+00 -2.36222692e-01 -2.36222692e-01
 -2.36222692e-01  1.12212430e+02  9.90219285e+02  7.26125201e+03
  3.94011677e+04]
E1 = -706.3594464700333  E_coul = 198.92885769945548
Extra cycle  E= -507.430588770578  delta_E= -1.71e-13  |g|= 7.17e-12  |ddm|= 1.13e-12
    CPU time for scf_cycle      0.14 sec, wall time      0.14 sec
exp = [1.81905159e+04 4.54735295e+03 6.87582797e+02 1.53582081e+02
 4.23857633e+01 4.75251752e+00 3.91640572e-01 8.59729001e+00
 4.90715377e-01]
grad_E = [-6.59211086e-06  1.18894108e-04 -3.61467570e-04 -2.40719632e-04
 -6.01698167e-05 -2.75339088e-05 -2.66919333e-04 -4.67953623e-05
 -6.82627724e-05]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((9, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.5476253398322024e+03,6.8630785798847160e+02,1.5555024230205126e+02,4.2742815896802767e+01,4.7505784169783016e+00,3.9162204394177752e-01,8.5974230426361959e+00,4.9072756124177219e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "7s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:53:59 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  18190.5158676        1
[INPUT] 0    0    [1    /1   ]  4547.35422202        1
[INPUT] 0    0    [1    /1   ]  687.576540411        1
[INPUT] 0    0    [1    /1   ]  153.59281383         1
[INPUT] 0    0    [1    /1   ]  42.3887270946        1
[INPUT] 0    0    [1    /1   ]  4.75249100473        1
[INPUT] 0    0    [1    /1   ]  0.391631564338       1
[INPUT] 1    0    [1    /1   ]  8.59724390586        1
[INPUT] 1    0    [1    /1   ]  0.490713738647       1

nuclear repulsion = 0
number of shells = 9
number of NR pGTOs = 13
number of NR cGTOs = 13
basis = {'Ar': [[0, [18190.515867589413, 1.0]], [0, [4547.354222023307, 1.0]], [0, [687.5765404111074, 1.0]], [0, [153.59281383022983, 1.0]], [0, [42.38872709463349, 1.0]], [0, [4.7524910047330104, 1.0]], [0, [0.3916315643378241, 1.0]], [1, [8.597243905860253, 1.0]], [1, [0.49071373864718126, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [18190.51586759]
bas 1, expnt(s) = [4547.35422202]
bas 2, expnt(s) = [687.57654041]
bas 3, expnt(s) = [153.59281383]
bas 4, expnt(s) = [42.38872709]
bas 5, expnt(s) = [4.752491]
bas 6, expnt(s) = [0.39163156]
bas 7, expnt(s) = [8.59724391]
bas 8, expnt(s) = [0.49071374]
CPU time:        67.02
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  1  1  1  0 38 39  0]
 [ 0  1  1  1  0 40 41  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.81905159e+04 3.95729828e+03 4.54735422e+03 1.39905283e+03
 6.87576540e+02 3.39239029e+02 1.53592814e+02 1.10228322e+02
 4.23887271e+01 4.19713372e+01 4.75249100e+00 8.13216163e+00
 3.91631564e-01 1.25075800e+00 8.59724391e+00 4.29470613e+01
 4.90713739e-01 1.19817337e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319474027827887
cond(S) = 28.314676590303566
E1 = -688.9274743475477  E_coul = 184.91753564281734
init E= -504.00993870473
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.681142721818452  LUMO = 110.871134424274
  mo_energy =
[-1.21552100e+02 -1.32755747e+01 -7.62074753e+00 -7.62074753e+00
 -7.62074753e+00 -1.65106481e+00 -6.81142722e-01 -6.81142722e-01
 -6.81142722e-01  1.10871134e+02  9.88914532e+02  7.26010904e+03
  3.94001507e+04]
E1 = -706.3804948755893  E_coul = 198.95018967951015
cycle= 1 E= -507.430305196079  delta_E= -3.42  |g|= 0.299  |ddm|=  0.3
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.39434
diis-c [-0.15550398  1.        ]
  HOMO = -0.236121368764744  LUMO = 112.227433600209
  mo_energy =
[-1.20168119e+02 -1.22463280e+01 -6.65146567e+00 -6.65146567e+00
 -6.65146567e+00 -1.16298968e+00 -2.36121369e-01 -2.36121369e-01
 -2.36121369e-01  1.12227434e+02  9.90264794e+02  7.26129326e+03
  3.94012066e+04]
E1 = -706.3592041391228  E_coul = 198.9286151243862
cycle= 2 E= -507.430589014737  delta_E= -0.000284  |g|= 0.00378  |ddm|= 0.00923
    CPU time for cycle= 2      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.00396946
diis-c [-1.54416627e-05 -1.42517320e-03  1.00142517e+00]
  HOMO = -0.236230674678316  LUMO = 112.224603389589
  mo_energy =
[-1.20174275e+02 -1.22470867e+01 -6.65263952e+00 -6.65263952e+00
 -6.65263952e+00 -1.16303052e+00 -2.36230675e-01 -2.36230675e-01
 -2.36230675e-01  1.12224603e+02  9.90255948e+02  7.26127996e+03
  3.94011916e+04]
E1 = -706.3589558233992  E_coul = 198.92836675355693
cycle= 3 E= -507.430589069842  delta_E= -5.51e-08  |g|= 6.25e-05  |ddm|= 0.000113
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=8.28543e-05
diis-c [-1.54232928e-10  3.94429252e-05 -2.13098375e-02  1.02127039e+00]
  HOMO = -0.236231744442696  LUMO = 112.224578706135
  mo_energy =
[-1.20174334e+02 -1.22470945e+01 -6.65265303e+00 -6.65265303e+00
 -6.65265303e+00 -1.16303082e+00 -2.36231744e-01 -2.36231744e-01
 -2.36231744e-01  1.12224579e+02  9.90255887e+02  7.26127988e+03
  3.94011915e+04]
E1 = -706.3589526478986  E_coul = 198.9283635780427
cycle= 4 E= -507.430589069856  delta_E= -1.36e-11  |g|= 1.79e-07  |ddm|= 1.57e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.3589526478986  E_coul = 198.9283635780427
  HOMO = -0.236231738360457  LUMO = 112.224578891077
  mo_energy =
[-1.20174333e+02 -1.22470944e+01 -6.65265296e+00 -6.65265296e+00
 -6.65265296e+00 -1.16303082e+00 -2.36231738e-01 -2.36231738e-01
 -2.36231738e-01  1.12224579e+02  9.90255888e+02  7.26127989e+03
  3.94011915e+04]
E1 = -706.3589526612037  E_coul = 198.92836359134756
Extra cycle  E= -507.430589069856  delta_E= -2.84e-13  |g|= 2.63e-09  |ddm|= 5.51e-09
    CPU time for scf_cycle      0.10 sec, wall time      0.10 sec
exp = [1.81905159e+04 4.54735422e+03 6.87576540e+02 1.53592814e+02
 4.23887271e+01 4.75249100e+00 3.91631564e-01 8.59724391e+00
 4.90713739e-01]
E = -507.4305890698562
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((9, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.5476253398322024e+03,6.8630785798847160e+02,1.5555024230205126e+02,4.2742815896802767e+01,4.7505784169783016e+00,3.9162204394177752e-01,8.5974230426361959e+00,4.9072756124177219e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "7s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:53:59 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  18190.5158676        1
[INPUT] 0    0    [1    /1   ]  4547.35422202        1
[INPUT] 0    0    [1    /1   ]  687.576540411        1
[INPUT] 0    0    [1    /1   ]  153.59281383         1
[INPUT] 0    0    [1    /1   ]  42.3887270946        1
[INPUT] 0    0    [1    /1   ]  4.75249100473        1
[INPUT] 0    0    [1    /1   ]  0.391631564338       1
[INPUT] 1    0    [1    /1   ]  8.59724390586        1
[INPUT] 1    0    [1    /1   ]  0.490713738647       1

nuclear repulsion = 0
number of shells = 9
number of NR pGTOs = 13
number of NR cGTOs = 13
basis = {'Ar': [[0, [18190.515867589413, 1.0]], [0, [4547.354222023307, 1.0]], [0, [687.5765404111074, 1.0]], [0, [153.59281383022983, 1.0]], [0, [42.38872709463349, 1.0]], [0, [4.7524910047330104, 1.0]], [0, [0.3916315643378241, 1.0]], [1, [8.597243905860253, 1.0]], [1, [0.49071373864718126, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [18190.51586759]
bas 1, expnt(s) = [4547.35422202]
bas 2, expnt(s) = [687.57654041]
bas 3, expnt(s) = [153.59281383]
bas 4, expnt(s) = [42.38872709]
bas 5, expnt(s) = [4.752491]
bas 6, expnt(s) = [0.39163156]
bas 7, expnt(s) = [8.59724391]
bas 8, expnt(s) = [0.49071374]
CPU time:        67.45
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  1  1  1  0 38 39  0]
 [ 0  1  1  1  0 40 41  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.81905159e+04 3.95729828e+03 4.54735422e+03 1.39905283e+03
 6.87576540e+02 3.39239029e+02 1.53592814e+02 1.10228322e+02
 4.23887271e+01 4.19713372e+01 4.75249100e+00 8.13216163e+00
 3.91631564e-01 1.25075800e+00 8.59724391e+00 4.29470613e+01
 4.90713739e-01 1.19817337e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319474027827887
cond(S) = 28.314676590303566
E1 = -688.9274743475477  E_coul = 184.91753564281734
init E= -504.00993870473
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.681142721818452  LUMO = 110.871134424274
  mo_energy =
[-1.21552100e+02 -1.32755747e+01 -7.62074753e+00 -7.62074753e+00
 -7.62074753e+00 -1.65106481e+00 -6.81142722e-01 -6.81142722e-01
 -6.81142722e-01  1.10871134e+02  9.88914532e+02  7.26010904e+03
  3.94001507e+04]
E1 = -706.3804948755893  E_coul = 198.95018967951015
cycle= 1 E= -507.430305196079  delta_E= -3.42  |g|= 0.299  |ddm|=  0.3
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.39434
diis-c [-0.15550398  1.        ]
  HOMO = -0.236121368764744  LUMO = 112.227433600209
  mo_energy =
[-1.20168119e+02 -1.22463280e+01 -6.65146567e+00 -6.65146567e+00
 -6.65146567e+00 -1.16298968e+00 -2.36121369e-01 -2.36121369e-01
 -2.36121369e-01  1.12227434e+02  9.90264794e+02  7.26129326e+03
  3.94012066e+04]
E1 = -706.3592041391228  E_coul = 198.9286151243862
cycle= 2 E= -507.430589014737  delta_E= -0.000284  |g|= 0.00378  |ddm|= 0.00923
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00396946
diis-c [-1.54416627e-05 -1.42517320e-03  1.00142517e+00]
  HOMO = -0.236230674678316  LUMO = 112.224603389589
  mo_energy =
[-1.20174275e+02 -1.22470867e+01 -6.65263952e+00 -6.65263952e+00
 -6.65263952e+00 -1.16303052e+00 -2.36230675e-01 -2.36230675e-01
 -2.36230675e-01  1.12224603e+02  9.90255948e+02  7.26127996e+03
  3.94011916e+04]
E1 = -706.3589558233992  E_coul = 198.92836675355693
cycle= 3 E= -507.430589069842  delta_E= -5.51e-08  |g|= 6.25e-05  |ddm|= 0.000113
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=8.28543e-05
diis-c [-1.54232928e-10  3.94429252e-05 -2.13098375e-02  1.02127039e+00]
  HOMO = -0.236231744442696  LUMO = 112.224578706135
  mo_energy =
[-1.20174334e+02 -1.22470945e+01 -6.65265303e+00 -6.65265303e+00
 -6.65265303e+00 -1.16303082e+00 -2.36231744e-01 -2.36231744e-01
 -2.36231744e-01  1.12224579e+02  9.90255887e+02  7.26127988e+03
  3.94011915e+04]
E1 = -706.3589526478986  E_coul = 198.9283635780427
cycle= 4 E= -507.430589069856  delta_E= -1.36e-11  |g|= 1.79e-07  |ddm|= 1.57e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.3589526478986  E_coul = 198.9283635780427
  HOMO = -0.236231738360457  LUMO = 112.224578891077
  mo_energy =
[-1.20174333e+02 -1.22470944e+01 -6.65265296e+00 -6.65265296e+00
 -6.65265296e+00 -1.16303082e+00 -2.36231738e-01 -2.36231738e-01
 -2.36231738e-01  1.12224579e+02  9.90255888e+02  7.26127989e+03
  3.94011915e+04]
E1 = -706.3589526612037  E_coul = 198.92836359134756
Extra cycle  E= -507.430589069856  delta_E= -2.84e-13  |g|= 2.63e-09  |ddm|= 5.51e-09
    CPU time for scf_cycle      0.10 sec, wall time      0.10 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 28.314676590303566
E1 = -706.3589526612037  E_coul = 198.92836359134756
init E= -507.430589069856
    CPU time for initialize scf      0.06 sec, wall time      0.06 sec
  HOMO = -0.236231738300136  LUMO = 112.224578892881
  mo_energy =
[-1.20174333e+02 -1.22470944e+01 -6.65265296e+00 -6.65265296e+00
 -6.65265296e+00 -1.16303082e+00 -2.36231738e-01 -2.36231738e-01
 -2.36231738e-01  1.12224579e+02  9.90255888e+02  7.26127989e+03
  3.94011915e+04]
E1 = -706.3589526613698  E_coul = 198.92836359151394
cycle= 1 E= -507.430589069856  delta_E= 3.41e-13  |g|= 4.5e-11  |ddm|= 7.36e-11
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -706.3589526613698  E_coul = 198.92836359151394
  HOMO = -0.236231738299394  LUMO = 112.2245788929
  mo_energy =
[-1.20174333e+02 -1.22470944e+01 -6.65265296e+00 -6.65265296e+00
 -6.65265296e+00 -1.16303082e+00 -2.36231738e-01 -2.36231738e-01
 -2.36231738e-01  1.12224579e+02  9.90255888e+02  7.26127989e+03
  3.94011915e+04]
E1 = -706.3589526613724  E_coul = 198.92836359151644
Extra cycle  E= -507.430589069856  delta_E= -1.14e-13  |g|= 1.71e-12  |ddm|= 1.15e-12
    CPU time for scf_cycle      0.13 sec, wall time      0.13 sec
exp = [1.81905159e+04 4.54735422e+03 6.87576540e+02 1.53592814e+02
 4.23887271e+01 4.75249100e+00 3.91631564e-01 8.59724391e+00
 4.90713739e-01]
grad_E = [-6.59240005e-06  1.18922413e-04 -3.62666100e-04 -2.35011651e-04
 -5.49430391e-05 -4.75601523e-05 -4.32589109e-04 -8.38274533e-05
 -1.12758090e-04]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((9, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.5476253398322024e+03,6.8630785798847160e+02,1.5555024230205126e+02,4.2742815896802767e+01,4.7505784169783016e+00,3.9162204394177752e-01,8.5974230426361959e+00,4.9072756124177219e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "7s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:54:02 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  18190.5157076        1
[INPUT] 0    0    [1    /1   ]  4547.35725109        1
[INPUT] 0    0    [1    /1   ]  687.560567624        1
[INPUT] 0    0    [1    /1   ]  153.624414022        1
[INPUT] 0    0    [1    /1   ]  42.3974552704        1
[INPUT] 0    0    [1    /1   ]  4.75241967938        1
[INPUT] 0    0    [1    /1   ]  0.391608616983       1
[INPUT] 1    0    [1    /1   ]  8.59712007842        1
[INPUT] 1    0    [1    /1   ]  0.49070934582        1

nuclear repulsion = 0
number of shells = 9
number of NR pGTOs = 13
number of NR cGTOs = 13
basis = {'Ar': [[0, [18190.51570763073, 1.0]], [0, [4547.357251092995, 1.0]], [0, [687.5605676237682, 1.0]], [0, [153.62441402182665, 1.0]], [0, [42.397455270411996, 1.0]], [0, [4.752419679383535, 1.0]], [0, [0.39160861698299543, 1.0]], [1, [8.59712007841851, 1.0]], [1, [0.4907093458200865, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [18190.51570763]
bas 1, expnt(s) = [4547.35725109]
bas 2, expnt(s) = [687.56056762]
bas 3, expnt(s) = [153.62441402]
bas 4, expnt(s) = [42.39745527]
bas 5, expnt(s) = [4.75241968]
bas 6, expnt(s) = [0.39160862]
bas 7, expnt(s) = [8.59712008]
bas 8, expnt(s) = [0.49070935]
CPU time:        70.45
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  1  1  1  0 38 39  0]
 [ 0  1  1  1  0 40 41  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.81905157e+04 3.95729825e+03 4.54735725e+03 1.39905353e+03
 6.87560568e+02 3.39233119e+02 1.53624414e+02 1.10245330e+02
 4.23974553e+01 4.19778187e+01 4.75241968e+00 8.13207010e+00
 3.91608617e-01 1.25070304e+00 8.59712008e+00 4.29462881e+01
 4.90709346e-01 1.19815997e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319483021734545
cond(S) = 28.319723496590626
E1 = -688.9262214009053  E_coul = 184.91645592834303
init E= -504.009765472562
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.681157679925837  LUMO = 110.906946576067
  mo_energy =
[-1.21552235e+02 -1.32756859e+01 -7.62082706e+00 -7.62082706e+00
 -7.62082706e+00 -1.65107300e+00 -6.81157680e-01 -6.81157680e-01
 -6.81157680e-01  1.10906947e+02  9.89024515e+02  7.26019810e+03
  3.94002269e+04]
E1 = -706.3792023845684  E_coul = 198.94889568294565
cycle= 1 E= -507.430306701623  delta_E= -3.42  |g|= 0.299  |ddm|=  0.3
    CPU time for cycle= 1      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.394375
diis-c [-0.15553141  1.        ]
  HOMO = -0.236144918591486  LUMO = 112.263259210788
  mo_energy =
[-1.20168262e+02 -1.22464516e+01 -6.65156118e+00 -6.65156118e+00
 -6.65156118e+00 -1.16301328e+00 -2.36144919e-01 -2.36144919e-01
 -2.36144919e-01  1.12263259e+02  9.90374802e+02  7.26138239e+03
  3.94012829e+04]
E1 = -706.3579226835459  E_coul = 198.9273323108406
cycle= 2 E= -507.430590372705  delta_E= -0.000284  |g|= 0.00377  |ddm|= 0.00923
    CPU time for cycle= 2      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.00396845
diis-c [-1.54330038e-05 -1.42658623e-03  1.00142659e+00]
  HOMO = -0.236254156416773  LUMO = 112.260429989524
  mo_energy =
[-1.20174415e+02 -1.22472098e+01 -6.65273435e+00 -6.65273435e+00
 -6.65273435e+00 -1.16305409e+00 -2.36254156e-01 -2.36254156e-01
 -2.36254156e-01  1.12260430e+02  9.90365960e+02  7.26136909e+03
  3.94012679e+04]
E1 = -706.3576745483595  E_coul = 198.92708412059667
cycle= 3 E= -507.430590427763  delta_E= -5.51e-08  |g|= 6.25e-05  |ddm|= 0.000113
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=8.281e-05
diis-c [-1.54080944e-10  3.94391564e-05 -2.13043745e-02  1.02126494e+00]
  HOMO = -0.236255225116859  LUMO = 112.260405326987
  mo_energy =
[-1.20174474e+02 -1.22472176e+01 -6.65274785e+00 -6.65274785e+00
 -6.65274785e+00 -1.16305440e+00 -2.36255225e-01 -2.36255225e-01
 -2.36255225e-01  1.12260405e+02  9.90365899e+02  7.26136902e+03
  3.94012678e+04]
E1 = -706.3576713763154  E_coul = 198.9270809485387
cycle= 4 E= -507.430590427777  delta_E= -1.39e-11  |g|= 1.78e-07  |ddm|= 1.57e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.3576713763154  E_coul = 198.9270809485387
  HOMO = -0.236255219041779  LUMO = 112.260405511796
  mo_energy =
[-1.20174474e+02 -1.22472176e+01 -6.65274779e+00 -6.65274779e+00
 -6.65274779e+00 -1.16305440e+00 -2.36255219e-01 -2.36255219e-01
 -2.36255219e-01  1.12260406e+02  9.90365899e+02  7.26136902e+03
  3.94012678e+04]
E1 = -706.3576713896043  E_coul = 198.92708096182767
Extra cycle  E= -507.430590427777  delta_E=    0  |g|= 2.62e-09  |ddm|= 5.51e-09
    CPU time for scf_cycle      0.10 sec, wall time      0.10 sec
exp = [1.81905157e+04 4.54735725e+03 6.87560568e+02 1.53624414e+02
 4.23974553e+01 4.75241968e+00 3.91608617e-01 8.59712008e+00
 4.90709346e-01]
E = -507.4305904277767
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((9, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.5476253398322024e+03,6.8630785798847160e+02,1.5555024230205126e+02,4.2742815896802767e+01,4.7505784169783016e+00,3.9162204394177752e-01,8.5974230426361959e+00,4.9072756124177219e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "7s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:54:03 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  18190.5157076        1
[INPUT] 0    0    [1    /1   ]  4547.35725109        1
[INPUT] 0    0    [1    /1   ]  687.560567624        1
[INPUT] 0    0    [1    /1   ]  153.624414022        1
[INPUT] 0    0    [1    /1   ]  42.3974552704        1
[INPUT] 0    0    [1    /1   ]  4.75241967938        1
[INPUT] 0    0    [1    /1   ]  0.391608616983       1
[INPUT] 1    0    [1    /1   ]  8.59712007842        1
[INPUT] 1    0    [1    /1   ]  0.49070934582        1

nuclear repulsion = 0
number of shells = 9
number of NR pGTOs = 13
number of NR cGTOs = 13
basis = {'Ar': [[0, [18190.51570763073, 1.0]], [0, [4547.357251092995, 1.0]], [0, [687.5605676237682, 1.0]], [0, [153.62441402182665, 1.0]], [0, [42.397455270411996, 1.0]], [0, [4.752419679383535, 1.0]], [0, [0.39160861698299543, 1.0]], [1, [8.59712007841851, 1.0]], [1, [0.4907093458200865, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [18190.51570763]
bas 1, expnt(s) = [4547.35725109]
bas 2, expnt(s) = [687.56056762]
bas 3, expnt(s) = [153.62441402]
bas 4, expnt(s) = [42.39745527]
bas 5, expnt(s) = [4.75241968]
bas 6, expnt(s) = [0.39160862]
bas 7, expnt(s) = [8.59712008]
bas 8, expnt(s) = [0.49070935]
CPU time:        70.88
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  1  1  1  0 38 39  0]
 [ 0  1  1  1  0 40 41  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.81905157e+04 3.95729825e+03 4.54735725e+03 1.39905353e+03
 6.87560568e+02 3.39233119e+02 1.53624414e+02 1.10245330e+02
 4.23974553e+01 4.19778187e+01 4.75241968e+00 8.13207010e+00
 3.91608617e-01 1.25070304e+00 8.59712008e+00 4.29462881e+01
 4.90709346e-01 1.19815997e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319483021734545
cond(S) = 28.319723496590626
E1 = -688.9262214009053  E_coul = 184.91645592834303
init E= -504.009765472562
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.681157679925837  LUMO = 110.906946576067
  mo_energy =
[-1.21552235e+02 -1.32756859e+01 -7.62082706e+00 -7.62082706e+00
 -7.62082706e+00 -1.65107300e+00 -6.81157680e-01 -6.81157680e-01
 -6.81157680e-01  1.10906947e+02  9.89024515e+02  7.26019810e+03
  3.94002269e+04]
E1 = -706.3792023845684  E_coul = 198.94889568294565
cycle= 1 E= -507.430306701623  delta_E= -3.42  |g|= 0.299  |ddm|=  0.3
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.394375
diis-c [-0.15553141  1.        ]
  HOMO = -0.236144918591486  LUMO = 112.263259210788
  mo_energy =
[-1.20168262e+02 -1.22464516e+01 -6.65156118e+00 -6.65156118e+00
 -6.65156118e+00 -1.16301328e+00 -2.36144919e-01 -2.36144919e-01
 -2.36144919e-01  1.12263259e+02  9.90374802e+02  7.26138239e+03
  3.94012829e+04]
E1 = -706.3579226835459  E_coul = 198.9273323108406
cycle= 2 E= -507.430590372705  delta_E= -0.000284  |g|= 0.00377  |ddm|= 0.00923
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00396845
diis-c [-1.54330038e-05 -1.42658623e-03  1.00142659e+00]
  HOMO = -0.236254156416773  LUMO = 112.260429989524
  mo_energy =
[-1.20174415e+02 -1.22472098e+01 -6.65273435e+00 -6.65273435e+00
 -6.65273435e+00 -1.16305409e+00 -2.36254156e-01 -2.36254156e-01
 -2.36254156e-01  1.12260430e+02  9.90365960e+02  7.26136909e+03
  3.94012679e+04]
E1 = -706.3576745483595  E_coul = 198.92708412059667
cycle= 3 E= -507.430590427763  delta_E= -5.51e-08  |g|= 6.25e-05  |ddm|= 0.000113
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=8.281e-05
diis-c [-1.54080944e-10  3.94391564e-05 -2.13043745e-02  1.02126494e+00]
  HOMO = -0.236255225116859  LUMO = 112.260405326987
  mo_energy =
[-1.20174474e+02 -1.22472176e+01 -6.65274785e+00 -6.65274785e+00
 -6.65274785e+00 -1.16305440e+00 -2.36255225e-01 -2.36255225e-01
 -2.36255225e-01  1.12260405e+02  9.90365899e+02  7.26136902e+03
  3.94012678e+04]
E1 = -706.3576713763154  E_coul = 198.9270809485387
cycle= 4 E= -507.430590427777  delta_E= -1.39e-11  |g|= 1.78e-07  |ddm|= 1.57e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.3576713763154  E_coul = 198.9270809485387
  HOMO = -0.236255219041779  LUMO = 112.260405511796
  mo_energy =
[-1.20174474e+02 -1.22472176e+01 -6.65274779e+00 -6.65274779e+00
 -6.65274779e+00 -1.16305440e+00 -2.36255219e-01 -2.36255219e-01
 -2.36255219e-01  1.12260406e+02  9.90365899e+02  7.26136902e+03
  3.94012678e+04]
E1 = -706.3576713896043  E_coul = 198.92708096182767
Extra cycle  E= -507.430590427777  delta_E=    0  |g|= 2.62e-09  |ddm|= 5.51e-09
    CPU time for scf_cycle      0.09 sec, wall time      0.10 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 28.319723496590626
E1 = -706.3576713896043  E_coul = 198.92708096182767
init E= -507.430590427777
    CPU time for initialize scf      0.06 sec, wall time      0.06 sec
  HOMO = -0.236255218981544  LUMO = 112.260405513596
  mo_energy =
[-1.20174474e+02 -1.22472176e+01 -6.65274778e+00 -6.65274778e+00
 -6.65274778e+00 -1.16305440e+00 -2.36255219e-01 -2.36255219e-01
 -2.36255219e-01  1.12260406e+02  9.90365899e+02  7.26136902e+03
  3.94012678e+04]
E1 = -706.3576713897708  E_coul = 198.92708096199402
cycle= 1 E= -507.430590427777  delta_E= -5.68e-14  |g|= 4.42e-11  |ddm|= 7.36e-11
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -706.3576713897708  E_coul = 198.92708096199402
  HOMO = -0.236255218980804  LUMO = 112.260405513617
  mo_energy =
[-1.20174474e+02 -1.22472176e+01 -6.65274778e+00 -6.65274778e+00
 -6.65274778e+00 -1.16305440e+00 -2.36255219e-01 -2.36255219e-01
 -2.36255219e-01  1.12260406e+02  9.90365899e+02  7.26136902e+03
  3.94012678e+04]
E1 = -706.3576713897729  E_coul = 198.92708096199644
Extra cycle  E= -507.430590427776  delta_E= 2.84e-13  |g|= 5.5e-12  |ddm|= 1.13e-12
    CPU time for scf_cycle      0.13 sec, wall time      0.13 sec
exp = [1.81905157e+04 4.54735725e+03 6.87560568e+02 1.53624414e+02
 4.23974553e+01 4.75241968e+00 3.91608617e-01 8.59712008e+00
 4.90709346e-01]
grad_E = [-6.59322196e-06  1.19002732e-04 -3.66110389e-04 -2.18667821e-04
 -3.87365173e-05 -9.99514034e-05 -8.60733547e-04 -1.82428871e-04
 -2.27922304e-04]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((9, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.5476253398322024e+03,6.8630785798847160e+02,1.5555024230205126e+02,4.2742815896802767e+01,4.7505784169783016e+00,3.9162204394177752e-01,8.5974230426361959e+00,4.9072756124177219e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "7s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:54:06 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  18190.5155807        1
[INPUT] 0    0    [1    /1   ]  4547.35972452        1
[INPUT] 0    0    [1    /1   ]  687.544406474        1
[INPUT] 0    0    [1    /1   ]  153.667619727        1
[INPUT] 0    0    [1    /1   ]  42.4092738187        1
[INPUT] 0    0    [1    /1   ]  4.75232538719        1
[INPUT] 0    0    [1    /1   ]  0.391578498005       1
[INPUT] 1    0    [1    /1   ]  8.59695584209        1
[INPUT] 1    0    [1    /1   ]  0.490703519324       1

nuclear repulsion = 0
number of shells = 9
number of NR pGTOs = 13
number of NR cGTOs = 13
basis = {'Ar': [[0, [18190.515580697618, 1.0]], [0, [4547.359724520701, 1.0]], [0, [687.544406473794, 1.0]], [0, [153.66761972725095, 1.0]], [0, [42.40927381870388, 1.0]], [0, [4.752325387192572, 1.0]], [0, [0.39157849800464906, 1.0]], [1, [8.596955842087665, 1.0]], [1, [0.49070351932414363, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [18190.5155807]
bas 1, expnt(s) = [4547.35972452]
bas 2, expnt(s) = [687.54440647]
bas 3, expnt(s) = [153.66761973]
bas 4, expnt(s) = [42.40927382]
bas 5, expnt(s) = [4.75232539]
bas 6, expnt(s) = [0.3915785]
bas 7, expnt(s) = [8.59695584]
bas 8, expnt(s) = [0.49070352]
CPU time:        73.89
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  1  1  1  0 38 39  0]
 [ 0  1  1  1  0 40 41  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.81905156e+04 3.95729823e+03 4.54735972e+03 1.39905410e+03
 6.87544406e+02 3.39227139e+02 1.53667620e+02 1.10268584e+02
 4.24092738e+01 4.19865945e+01 4.75232539e+00 8.13194908e+00
 3.91578498e-01 1.25063089e+00 8.59695584e+00 4.29452626e+01
 4.90703519e-01 1.19814218e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319494871805244
cond(S) = 28.32643869522727
E1 = -688.9245644442178  E_coul = 184.9150300801485
init E= -504.009534364069
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.68117738672918  LUMO = 110.955643571949
  mo_energy =
[-1.21552412e+02 -1.32758336e+01 -7.62093199e+00 -7.62093199e+00
 -7.62093199e+00 -1.65108395e+00 -6.81177387e-01 -6.81177387e-01
 -6.81177387e-01  1.10955644e+02  9.89179536e+02  7.26033577e+03
  3.94003451e+04]
E1 = -706.3775002666034  E_coul = 198.9471903971987
cycle= 1 E= -507.430309869405  delta_E= -3.42  |g|= 0.299  |ddm|=  0.3
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.39442
diis-c [-0.15556724  1.        ]
  HOMO = -0.236175948346059  LUMO = 112.311975522574
  mo_energy =
[-1.20168451e+02 -1.22466154e+01 -6.65168706e+00 -6.65168706e+00
 -6.65168706e+00 -1.16304448e+00 -2.36175948e-01 -2.36175948e-01
 -2.36175948e-01  1.12311976e+02  9.90529857e+02  7.26152016e+03
  3.94014013e+04]
E1 = -706.3562355516027  E_coul = 198.92564221186578
cycle= 2 E= -507.430593339737  delta_E= -0.000283  |g|= 0.00377  |ddm|= 0.00922
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00396708
diis-c [-1.54212238e-05 -1.42850001e-03  1.00142850e+00]
  HOMO = -0.236285093787422  LUMO = 112.309147643438
  mo_energy =
[-1.20174599e+02 -1.22473731e+01 -6.65285931e+00 -6.65285931e+00
 -6.65285931e+00 -1.16308525e+00 -2.36285094e-01 -2.36285094e-01
 -2.36285094e-01  1.12309148e+02  9.90521021e+02  7.26150687e+03
  3.94013862e+04]
E1 = -706.355987661663  E_coul = 198.9253942669346
cycle= 3 E= -507.430593394728  delta_E= -5.5e-08  |g|= 6.24e-05  |ddm|= 0.000113
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=8.27498e-05
diis-c [-1.53874681e-10  3.94341769e-05 -2.12969636e-02  1.02125753e+00]
  HOMO = -0.236286161044329  LUMO = 112.3091230093
  mo_energy =
[-1.20174659e+02 -1.22473808e+01 -6.65287279e+00 -6.65287279e+00
 -6.65287279e+00 -1.16308556e+00 -2.36286161e-01 -2.36286161e-01
 -2.36286161e-01  1.12309123e+02  9.90520960e+02  7.26150680e+03
  3.94013861e+04]
E1 = -706.3559844943107  E_coul = 198.92539109956863
cycle= 4 E= -507.430593394742  delta_E= -1.38e-11  |g|= 1.78e-07  |ddm|= 1.57e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.3559844943107  E_coul = 198.92539109956863
  HOMO = -0.236286154978965  LUMO = 112.309123193927
  mo_energy =
[-1.20174658e+02 -1.22473808e+01 -6.65287272e+00 -6.65287272e+00
 -6.65287272e+00 -1.16308556e+00 -2.36286155e-01 -2.36286155e-01
 -2.36286155e-01  1.12309123e+02  9.90520960e+02  7.26150680e+03
  3.94013861e+04]
E1 = -706.3559845075786  E_coul = 198.92539111283648
Extra cycle  E= -507.430593394742  delta_E=    0  |g|= 2.62e-09  |ddm|= 5.5e-09
    CPU time for scf_cycle      0.10 sec, wall time      0.11 sec
exp = [1.81905156e+04 4.54735972e+03 6.87544406e+02 1.53667620e+02
 4.24092738e+01 4.75232539e+00 3.91578498e-01 8.59695584e+00
 4.90703519e-01]
E = -507.4305933947421
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((9, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.5476253398322024e+03,6.8630785798847160e+02,1.5555024230205126e+02,4.2742815896802767e+01,4.7505784169783016e+00,3.9162204394177752e-01,8.5974230426361959e+00,4.9072756124177219e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "7s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:54:06 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  18190.5155807        1
[INPUT] 0    0    [1    /1   ]  4547.35972452        1
[INPUT] 0    0    [1    /1   ]  687.544406474        1
[INPUT] 0    0    [1    /1   ]  153.667619727        1
[INPUT] 0    0    [1    /1   ]  42.4092738187        1
[INPUT] 0    0    [1    /1   ]  4.75232538719        1
[INPUT] 0    0    [1    /1   ]  0.391578498005       1
[INPUT] 1    0    [1    /1   ]  8.59695584209        1
[INPUT] 1    0    [1    /1   ]  0.490703519324       1

nuclear repulsion = 0
number of shells = 9
number of NR pGTOs = 13
number of NR cGTOs = 13
basis = {'Ar': [[0, [18190.515580697618, 1.0]], [0, [4547.359724520701, 1.0]], [0, [687.544406473794, 1.0]], [0, [153.66761972725095, 1.0]], [0, [42.40927381870388, 1.0]], [0, [4.752325387192572, 1.0]], [0, [0.39157849800464906, 1.0]], [1, [8.596955842087665, 1.0]], [1, [0.49070351932414363, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [18190.5155807]
bas 1, expnt(s) = [4547.35972452]
bas 2, expnt(s) = [687.54440647]
bas 3, expnt(s) = [153.66761973]
bas 4, expnt(s) = [42.40927382]
bas 5, expnt(s) = [4.75232539]
bas 6, expnt(s) = [0.3915785]
bas 7, expnt(s) = [8.59695584]
bas 8, expnt(s) = [0.49070352]
CPU time:        74.34
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  1  1  1  0 38 39  0]
 [ 0  1  1  1  0 40 41  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.81905156e+04 3.95729823e+03 4.54735972e+03 1.39905410e+03
 6.87544406e+02 3.39227139e+02 1.53667620e+02 1.10268584e+02
 4.24092738e+01 4.19865945e+01 4.75232539e+00 8.13194908e+00
 3.91578498e-01 1.25063089e+00 8.59695584e+00 4.29452626e+01
 4.90703519e-01 1.19814218e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319494871805244
cond(S) = 28.32643869522727
E1 = -688.9245644442178  E_coul = 184.9150300801485
init E= -504.009534364069
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.68117738672918  LUMO = 110.955643571949
  mo_energy =
[-1.21552412e+02 -1.32758336e+01 -7.62093199e+00 -7.62093199e+00
 -7.62093199e+00 -1.65108395e+00 -6.81177387e-01 -6.81177387e-01
 -6.81177387e-01  1.10955644e+02  9.89179536e+02  7.26033577e+03
  3.94003451e+04]
E1 = -706.3775002666034  E_coul = 198.9471903971987
cycle= 1 E= -507.430309869405  delta_E= -3.42  |g|= 0.299  |ddm|=  0.3
    CPU time for cycle= 1      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.39442
diis-c [-0.15556724  1.        ]
  HOMO = -0.236175948346059  LUMO = 112.311975522574
  mo_energy =
[-1.20168451e+02 -1.22466154e+01 -6.65168706e+00 -6.65168706e+00
 -6.65168706e+00 -1.16304448e+00 -2.36175948e-01 -2.36175948e-01
 -2.36175948e-01  1.12311976e+02  9.90529857e+02  7.26152016e+03
  3.94014013e+04]
E1 = -706.3562355516027  E_coul = 198.92564221186578
cycle= 2 E= -507.430593339737  delta_E= -0.000283  |g|= 0.00377  |ddm|= 0.00922
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00396708
diis-c [-1.54212238e-05 -1.42850001e-03  1.00142850e+00]
  HOMO = -0.236285093787422  LUMO = 112.309147643438
  mo_energy =
[-1.20174599e+02 -1.22473731e+01 -6.65285931e+00 -6.65285931e+00
 -6.65285931e+00 -1.16308525e+00 -2.36285094e-01 -2.36285094e-01
 -2.36285094e-01  1.12309148e+02  9.90521021e+02  7.26150687e+03
  3.94013862e+04]
E1 = -706.355987661663  E_coul = 198.9253942669346
cycle= 3 E= -507.430593394728  delta_E= -5.5e-08  |g|= 6.24e-05  |ddm|= 0.000113
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=8.27498e-05
diis-c [-1.53874681e-10  3.94341769e-05 -2.12969636e-02  1.02125753e+00]
  HOMO = -0.236286161044329  LUMO = 112.3091230093
  mo_energy =
[-1.20174659e+02 -1.22473808e+01 -6.65287279e+00 -6.65287279e+00
 -6.65287279e+00 -1.16308556e+00 -2.36286161e-01 -2.36286161e-01
 -2.36286161e-01  1.12309123e+02  9.90520960e+02  7.26150680e+03
  3.94013861e+04]
E1 = -706.3559844943107  E_coul = 198.92539109956863
cycle= 4 E= -507.430593394742  delta_E= -1.38e-11  |g|= 1.78e-07  |ddm|= 1.57e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.3559844943107  E_coul = 198.92539109956863
  HOMO = -0.236286154978965  LUMO = 112.309123193927
  mo_energy =
[-1.20174658e+02 -1.22473808e+01 -6.65287272e+00 -6.65287272e+00
 -6.65287272e+00 -1.16308556e+00 -2.36286155e-01 -2.36286155e-01
 -2.36286155e-01  1.12309123e+02  9.90520960e+02  7.26150680e+03
  3.94013861e+04]
E1 = -706.3559845075786  E_coul = 198.92539111283648
Extra cycle  E= -507.430593394742  delta_E=    0  |g|= 2.62e-09  |ddm|= 5.5e-09
    CPU time for scf_cycle      0.10 sec, wall time      0.11 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 28.32643869522727
E1 = -706.3559845075786  E_coul = 198.92539111283648
init E= -507.430593394742
    CPU time for initialize scf      0.06 sec, wall time      0.06 sec
  HOMO = -0.236286154918836  LUMO = 112.309123195725
  mo_energy =
[-1.20174658e+02 -1.22473808e+01 -6.65287272e+00 -6.65287272e+00
 -6.65287272e+00 -1.16308556e+00 -2.36286155e-01 -2.36286155e-01
 -2.36286155e-01  1.12309123e+02  9.90520960e+02  7.26150680e+03
  3.94013861e+04]
E1 = -706.3559845077446  E_coul = 198.9253911130023
cycle= 1 E= -507.430593394742  delta_E= -1.14e-13  |g|= 4.54e-11  |ddm|= 7.34e-11
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -706.3559845077446  E_coul = 198.9253911130023
  HOMO = -0.236286154918101  LUMO = 112.309123195745
  mo_energy =
[-1.20174658e+02 -1.22473808e+01 -6.65287272e+00 -6.65287272e+00
 -6.65287272e+00 -1.16308556e+00 -2.36286155e-01 -2.36286155e-01
 -2.36286155e-01  1.12309123e+02  9.90520960e+02  7.26150680e+03
  3.94013861e+04]
E1 = -706.3559845077468  E_coul = 198.92539111300474
Extra cycle  E= -507.430593394742  delta_E= 1.14e-13  |g|= 5.05e-12  |ddm|= 1.15e-12
    CPU time for scf_cycle      0.14 sec, wall time      0.14 sec
exp = [1.81905156e+04 4.54735972e+03 6.87544406e+02 1.53667620e+02
 4.24092738e+01 4.75232539e+00 3.91578498e-01 8.59695584e+00
 4.90703519e-01]
grad_E = [-6.59428058e-06  1.19106069e-04 -3.70658319e-04 -1.96859185e-04
 -1.69223371e-05 -1.69060431e-04 -1.42443766e-03 -3.12990409e-04
 -3.79599482e-04]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((9, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.5476253398322024e+03,6.8630785798847160e+02,1.5555024230205126e+02,4.2742815896802767e+01,4.7505784169783016e+00,3.9162204394177752e-01,8.5974230426361959e+00,4.9072756124177219e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "7s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:54:09 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  18190.5155975        1
[INPUT] 0    0    [1    /1   ]  4547.35971995        1
[INPUT] 0    0    [1    /1   ]  687.530415771        1
[INPUT] 0    0    [1    /1   ]  153.745785054        1
[INPUT] 0    0    [1    /1   ]  42.4303224971        1
[INPUT] 0    0    [1    /1   ]  4.75216136363        1
[INPUT] 0    0    [1    /1   ]  0.391526163813       1
[INPUT] 1    0    [1    /1   ]  8.59666917149        1
[INPUT] 1    0    [1    /1   ]  0.490693340664       1

nuclear repulsion = 0
number of shells = 9
number of NR pGTOs = 13
number of NR cGTOs = 13
basis = {'Ar': [[0, [18190.515597492824, 1.0]], [0, [4547.35971995454, 1.0]], [0, [687.5304157707193, 1.0]], [0, [153.74578505377897, 1.0]], [0, [42.43032249708077, 1.0]], [0, [4.752161363629075, 1.0]], [0, [0.3915261638133737, 1.0]], [1, [8.596669171494728, 1.0]], [1, [0.4906933406638469, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [18190.51559749]
bas 1, expnt(s) = [4547.35971995]
bas 2, expnt(s) = [687.53041577]
bas 3, expnt(s) = [153.74578505]
bas 4, expnt(s) = [42.4303225]
bas 5, expnt(s) = [4.75216136]
bas 6, expnt(s) = [0.39152616]
bas 7, expnt(s) = [8.59666917]
bas 8, expnt(s) = [0.49069334]
CPU time:        77.41
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  1  1  1  0 38 39  0]
 [ 0  1  1  1  0 40 41  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.81905156e+04 3.95729823e+03 4.54735972e+03 1.39905410e+03
 6.87530416e+02 3.39221961e+02 1.53745785e+02 1.10310649e+02
 4.24303225e+01 4.20022227e+01 4.75216136e+00 8.13173858e+00
 3.91526164e-01 1.25050553e+00 8.59666917e+00 4.29434725e+01
 4.90693341e-01 1.19811112e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.31951545542627
cond(S) = 28.33807196874081
E1 = -688.9216746633103  E_coul = 184.91254576994737
init E= -504.009128893363
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.68121172443335  LUMO = 111.042952533095
  mo_energy =
[-1.21552721e+02 -1.32760919e+01 -7.62111474e+00 -7.62111474e+00
 -7.62111474e+00 -1.65110318e+00 -6.81211724e-01 -6.81211724e-01
 -6.81211724e-01  1.11042953e+02  9.89472365e+02  7.26062746e+03
  3.94005966e+04]
E1 = -706.3745425116514  E_coul = 198.94422393522476
cycle= 1 E= -507.430318576427  delta_E= -3.42  |g|= 0.299  |ddm|=  0.3
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.394496
diis-c [-0.15562734  1.        ]
  HOMO = -0.236229958803719  LUMO = 112.399320545767
  mo_energy =
[-1.20168779e+02 -1.22469015e+01 -6.65190601e+00 -6.65190601e+00
 -6.65190601e+00 -1.16309886e+00 -2.36229959e-01 -2.36229959e-01
 -2.36229959e-01  1.12399321e+02  9.90822747e+02  7.26181203e+03
  3.94016530e+04]
E1 = -706.3533045980328  E_coul = 198.92270291083474
cycle= 2 E= -507.430601687198  delta_E= -0.000283  |g|= 0.00377  |ddm|= 0.00921
    CPU time for cycle= 2      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.00396463
diis-c [-1.54001387e-05 -1.43191060e-03  1.00143191e+00]
  HOMO = -0.236338939118849  LUMO = 112.39649506164
  mo_energy =
[-1.20174920e+02 -1.22476582e+01 -6.65307662e+00 -6.65307662e+00
 -6.65307662e+00 -1.16313958e+00 -2.36338939e-01 -2.36338939e-01
 -2.36338939e-01  1.12396495e+02  9.90813921e+02  7.26179876e+03
  3.94016379e+04]
E1 = -706.353057146986  E_coul = 198.9224554049133
cycle= 3 E= -507.430601742073  delta_E= -5.49e-08  |g|= 6.23e-05  |ddm|= 0.000112
    CPU time for cycle= 3      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=8.26422e-05
diis-c [-1.53505840e-10  3.94256340e-05 -2.12837183e-02  1.02124429e+00]
  HOMO = -0.23634000379832  LUMO = 112.396470478283
  mo_energy =
[-1.20174979e+02 -1.22476659e+01 -6.65309006e+00 -6.65309006e+00
 -6.65309006e+00 -1.16313988e+00 -2.36340004e-01 -2.36340004e-01
 -2.36340004e-01  1.12396470e+02  9.90813860e+02  7.26179869e+03
  3.94016379e+04]
E1 = -706.3530539880223  E_coul = 198.92245224593623
cycle= 4 E= -507.430601742086  delta_E= -1.34e-11  |g|= 1.78e-07  |ddm|= 1.56e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.3530539880223  E_coul = 198.92245224593623
  HOMO = -0.236339997750348  LUMO = 112.396470662584
  mo_energy =
[-1.20174979e+02 -1.22476658e+01 -6.65309000e+00 -6.65309000e+00
 -6.65309000e+00 -1.16313988e+00 -2.36339998e-01 -2.36339998e-01
 -2.36339998e-01  1.12396471e+02  9.90813860e+02  7.26179869e+03
  3.94016379e+04]
E1 = -706.3530540012517  E_coul = 198.92245225916565
Extra cycle  E= -507.430601742086  delta_E=    0  |g|= 2.61e-09  |ddm|= 5.48e-09
    CPU time for scf_cycle      0.10 sec, wall time      0.10 sec
exp = [1.81905156e+04 4.54735972e+03 6.87530416e+02 1.53745785e+02
 4.24303225e+01 4.75216136e+00 3.91526164e-01 8.59666917e+00
 4.90693341e-01]
E = -507.4306017420861
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((9, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.5476253398322024e+03,6.8630785798847160e+02,1.5555024230205126e+02,4.2742815896802767e+01,4.7505784169783016e+00,3.9162204394177752e-01,8.5974230426361959e+00,4.9072756124177219e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "7s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:54:10 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  18190.5155975        1
[INPUT] 0    0    [1    /1   ]  4547.35971995        1
[INPUT] 0    0    [1    /1   ]  687.530415771        1
[INPUT] 0    0    [1    /1   ]  153.745785054        1
[INPUT] 0    0    [1    /1   ]  42.4303224971        1
[INPUT] 0    0    [1    /1   ]  4.75216136363        1
[INPUT] 0    0    [1    /1   ]  0.391526163813       1
[INPUT] 1    0    [1    /1   ]  8.59666917149        1
[INPUT] 1    0    [1    /1   ]  0.490693340664       1

nuclear repulsion = 0
number of shells = 9
number of NR pGTOs = 13
number of NR cGTOs = 13
basis = {'Ar': [[0, [18190.515597492824, 1.0]], [0, [4547.35971995454, 1.0]], [0, [687.5304157707193, 1.0]], [0, [153.74578505377897, 1.0]], [0, [42.43032249708077, 1.0]], [0, [4.752161363629075, 1.0]], [0, [0.3915261638133737, 1.0]], [1, [8.596669171494728, 1.0]], [1, [0.4906933406638469, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [18190.51559749]
bas 1, expnt(s) = [4547.35971995]
bas 2, expnt(s) = [687.53041577]
bas 3, expnt(s) = [153.74578505]
bas 4, expnt(s) = [42.4303225]
bas 5, expnt(s) = [4.75216136]
bas 6, expnt(s) = [0.39152616]
bas 7, expnt(s) = [8.59666917]
bas 8, expnt(s) = [0.49069334]
CPU time:        77.87
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  1  1  1  0 38 39  0]
 [ 0  1  1  1  0 40 41  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.81905156e+04 3.95729823e+03 4.54735972e+03 1.39905410e+03
 6.87530416e+02 3.39221961e+02 1.53745785e+02 1.10310649e+02
 4.24303225e+01 4.20022227e+01 4.75216136e+00 8.13173858e+00
 3.91526164e-01 1.25050553e+00 8.59666917e+00 4.29434725e+01
 4.90693341e-01 1.19811112e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.31951545542627
cond(S) = 28.33807196874081
E1 = -688.9216746633103  E_coul = 184.91254576994737
init E= -504.009128893363
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.68121172443335  LUMO = 111.042952533095
  mo_energy =
[-1.21552721e+02 -1.32760919e+01 -7.62111474e+00 -7.62111474e+00
 -7.62111474e+00 -1.65110318e+00 -6.81211724e-01 -6.81211724e-01
 -6.81211724e-01  1.11042953e+02  9.89472365e+02  7.26062746e+03
  3.94005966e+04]
E1 = -706.3745425116514  E_coul = 198.94422393522476
cycle= 1 E= -507.430318576427  delta_E= -3.42  |g|= 0.299  |ddm|=  0.3
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.394496
diis-c [-0.15562734  1.        ]
  HOMO = -0.236229958803719  LUMO = 112.399320545767
  mo_energy =
[-1.20168779e+02 -1.22469015e+01 -6.65190601e+00 -6.65190601e+00
 -6.65190601e+00 -1.16309886e+00 -2.36229959e-01 -2.36229959e-01
 -2.36229959e-01  1.12399321e+02  9.90822747e+02  7.26181203e+03
  3.94016530e+04]
E1 = -706.3533045980328  E_coul = 198.92270291083474
cycle= 2 E= -507.430601687198  delta_E= -0.000283  |g|= 0.00377  |ddm|= 0.00921
    CPU time for cycle= 2      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.00396463
diis-c [-1.54001387e-05 -1.43191060e-03  1.00143191e+00]
  HOMO = -0.236338939118849  LUMO = 112.39649506164
  mo_energy =
[-1.20174920e+02 -1.22476582e+01 -6.65307662e+00 -6.65307662e+00
 -6.65307662e+00 -1.16313958e+00 -2.36338939e-01 -2.36338939e-01
 -2.36338939e-01  1.12396495e+02  9.90813921e+02  7.26179876e+03
  3.94016379e+04]
E1 = -706.353057146986  E_coul = 198.9224554049133
cycle= 3 E= -507.430601742073  delta_E= -5.49e-08  |g|= 6.23e-05  |ddm|= 0.000112
    CPU time for cycle= 3      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=8.26422e-05
diis-c [-1.53505840e-10  3.94256340e-05 -2.12837183e-02  1.02124429e+00]
  HOMO = -0.23634000379832  LUMO = 112.396470478283
  mo_energy =
[-1.20174979e+02 -1.22476659e+01 -6.65309006e+00 -6.65309006e+00
 -6.65309006e+00 -1.16313988e+00 -2.36340004e-01 -2.36340004e-01
 -2.36340004e-01  1.12396470e+02  9.90813860e+02  7.26179869e+03
  3.94016379e+04]
E1 = -706.3530539880223  E_coul = 198.92245224593623
cycle= 4 E= -507.430601742086  delta_E= -1.34e-11  |g|= 1.78e-07  |ddm|= 1.56e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.3530539880223  E_coul = 198.92245224593623
  HOMO = -0.236339997750348  LUMO = 112.396470662584
  mo_energy =
[-1.20174979e+02 -1.22476658e+01 -6.65309000e+00 -6.65309000e+00
 -6.65309000e+00 -1.16313988e+00 -2.36339998e-01 -2.36339998e-01
 -2.36339998e-01  1.12396471e+02  9.90813860e+02  7.26179869e+03
  3.94016379e+04]
E1 = -706.3530540012517  E_coul = 198.92245225916565
Extra cycle  E= -507.430601742086  delta_E=    0  |g|= 2.61e-09  |ddm|= 5.48e-09
    CPU time for scf_cycle      0.10 sec, wall time      0.10 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 28.33807196874081
E1 = -706.3530540012517  E_coul = 198.92245225916565
init E= -507.430601742086
    CPU time for initialize scf      0.06 sec, wall time      0.06 sec
  HOMO = -0.236339997690426  LUMO = 112.396470664379
  mo_energy =
[-1.20174979e+02 -1.22476658e+01 -6.65309000e+00 -6.65309000e+00
 -6.65309000e+00 -1.16313988e+00 -2.36339998e-01 -2.36339998e-01
 -2.36339998e-01  1.12396471e+02  9.90813860e+02  7.26179869e+03
  3.94016379e+04]
E1 = -706.3530540014174  E_coul = 198.92245225933118
cycle= 1 E= -507.430601742086  delta_E= -1.14e-13  |g|= 4.41e-11  |ddm|= 7.32e-11
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -706.3530540014174  E_coul = 198.92245225933118
  HOMO = -0.23633999768969  LUMO = 112.396470664398
  mo_energy =
[-1.20174979e+02 -1.22476658e+01 -6.65309000e+00 -6.65309000e+00
 -6.65309000e+00 -1.16313988e+00 -2.36339998e-01 -2.36339998e-01
 -2.36339998e-01  1.12396471e+02  9.90813860e+02  7.26179869e+03
  3.94016379e+04]
E1 = -706.3530540014201  E_coul = 198.92245225933362
Extra cycle  E= -507.430601742086  delta_E= -2.84e-13  |g|= 8.73e-12  |ddm|= 1.13e-12
    CPU time for scf_cycle      0.13 sec, wall time      0.13 sec
exp = [1.81905156e+04 4.54735972e+03 6.87530416e+02 1.53745785e+02
 4.24303225e+01 4.75216136e+00 3.91526164e-01 8.59666917e+00
 4.90693341e-01]
grad_E = [-6.59602185e-06  1.19275711e-04 -3.78458756e-04 -1.58750332e-04
  2.11999234e-05 -2.89436047e-04 -2.40609726e-03 -5.40613737e-04
 -6.43753767e-04]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((9, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.5476253398322024e+03,6.8630785798847160e+02,1.5555024230205126e+02,4.2742815896802767e+01,4.7505784169783016e+00,3.9162204394177752e-01,8.5974230426361959e+00,4.9072756124177219e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "7s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:54:13 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  18190.5162366        1
[INPUT] 0    0    [1    /1   ]  4547.34860124        1
[INPUT] 0    0    [1    /1   ]  687.545059845        1
[INPUT] 0    0    [1    /1   ]  153.87527241         1
[INPUT] 0    0    [1    /1   ]  42.4643589544        1
[INPUT] 0    0    [1    /1   ]  4.75190556254        1
[INPUT] 0    0    [1    /1   ]  0.391444603068       1
[INPUT] 1    0    [1    /1   ]  8.59621998368        1
[INPUT] 1    0    [1    /1   ]  0.49067736591        1

nuclear repulsion = 0
number of shells = 9
number of NR pGTOs = 13
number of NR cGTOs = 13
basis = {'Ar': [[0, [18190.5162366063, 1.0]], [0, [4547.348601235601, 1.0]], [0, [687.5450598450902, 1.0]], [0, [153.87527241029716, 1.0]], [0, [42.46435895444407, 1.0]], [0, [4.751905562544914, 1.0]], [0, [0.39144460306780504, 1.0]], [1, [8.59621998368128, 1.0]], [1, [0.4906773659104872, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [18190.51623661]
bas 1, expnt(s) = [4547.34860124]
bas 2, expnt(s) = [687.54505985]
bas 3, expnt(s) = [153.87527241]
bas 4, expnt(s) = [42.46435895]
bas 5, expnt(s) = [4.75190556]
bas 6, expnt(s) = [0.3914446]
bas 7, expnt(s) = [8.59621998]
bas 8, expnt(s) = [0.49067737]
CPU time:        80.91
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  1  1  1  0 38 39  0]
 [ 0  1  1  1  0 40 41  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.81905162e+04 3.95729834e+03 4.54734860e+03 1.39905153e+03
 6.87545060e+02 3.39227380e+02 1.53875272e+02 1.10380320e+02
 4.24643590e+01 4.20274900e+01 4.75190556e+00 8.13141029e+00
 3.91444603e-01 1.25031015e+00 8.59621998e+00 4.29406677e+01
 4.90677366e-01 1.19806236e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319547480924413
cond(S) = 28.356059458777036
E1 = -688.9171496571155  E_coul = 184.90866133301742
init E= -504.008488324098
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.681265457930238  LUMO = 111.185610701266
  mo_energy =
[-1.21553206e+02 -1.32764983e+01 -7.62140027e+00 -7.62140027e+00
 -7.62140027e+00 -1.65113362e+00 -6.81265458e-01 -6.81265458e-01
 -6.81265458e-01  1.11185611e+02  9.89988128e+02  7.26121638e+03
  3.94011065e+04]
E1 = -706.3699373836346  E_coul = 198.93959701018517
cycle= 1 E= -507.430340373449  delta_E= -3.42  |g|= 0.299  |ddm|=  0.3
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.394608
diis-c [-0.15571519  1.        ]
  HOMO = -0.236314309724114  LUMO = 112.542041029149
  mo_energy =
[-1.20169291e+02 -1.22473506e+01 -6.65224748e+00 -6.65224748e+00
 -6.65224748e+00 -1.16318400e+00 -2.36314310e-01 -2.36314310e-01
 -2.36314310e-01  1.12542041e+02  9.91338608e+02  7.26240124e+03
  3.94021632e+04]
E1 = -706.3487430819979  E_coul = 198.9181201841195
cycle= 2 E= -507.430622897878  delta_E= -0.000283  |g|= 0.00377  |ddm|= 0.0092
    CPU time for cycle= 2      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.00396063
diis-c [-1.53657927e-05 -1.43743121e-03  1.00143743e+00]
  HOMO = -0.23642302157436  LUMO = 112.539219429023
  mo_energy =
[-1.20175421e+02 -1.22481055e+01 -6.65341540e+00 -6.65341540e+00
 -6.65341540e+00 -1.16322461e+00 -2.36423022e-01 -2.36423022e-01
 -2.36423022e-01  1.12539219e+02  9.91329797e+02  7.26238799e+03
  3.94021482e+04]
E1 = -706.3484963458177  E_coul = 198.9178733932556
cycle= 3 E= -507.430622952562  delta_E= -5.47e-08  |g|= 6.22e-05  |ddm|= 0.000112
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=8.24671e-05
diis-c [-1.52906250e-10  3.94125408e-05 -2.12621800e-02  1.02122277e+00]
  HOMO = -0.23642408206889  LUMO = 112.539194928279
  mo_energy =
[-1.20175480e+02 -1.22481132e+01 -6.65342880e+00 -6.65342880e+00
 -6.65342880e+00 -1.16322492e+00 -2.36424082e-01 -2.36424082e-01
 -2.36424082e-01  1.12539195e+02  9.91329736e+02  7.26238792e+03
  3.94021481e+04]
E1 = -706.3484932004972  E_coul = 198.91787024792197
cycle= 4 E= -507.430622952575  delta_E= -1.31e-11  |g|= 1.77e-07  |ddm|= 1.56e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.3484932004972  E_coul = 198.91787024792197
  HOMO = -0.236424076049251  LUMO = 112.539195112047
  mo_energy =
[-1.20175480e+02 -1.22481132e+01 -6.65342874e+00 -6.65342874e+00
 -6.65342874e+00 -1.16322491e+00 -2.36424076e-01 -2.36424076e-01
 -2.36424076e-01  1.12539195e+02  9.91329737e+02  7.26238792e+03
  3.94021481e+04]
E1 = -706.3484932136655  E_coul = 198.91787026108983
Extra cycle  E= -507.430622952576  delta_E= -5.12e-13  |g|= 2.6e-09  |ddm|= 5.46e-09
    CPU time for scf_cycle      0.09 sec, wall time      0.10 sec
exp = [1.81905162e+04 4.54734860e+03 6.87545060e+02 1.53875272e+02
 4.24643590e+01 4.75190556e+00 3.91444603e-01 8.59621998e+00
 4.90677366e-01]
E = -507.4306229525757
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((9, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.5476253398322024e+03,6.8630785798847160e+02,1.5555024230205126e+02,4.2742815896802767e+01,4.7505784169783016e+00,3.9162204394177752e-01,8.5974230426361959e+00,4.9072756124177219e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "7s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:54:13 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  18190.5162366        1
[INPUT] 0    0    [1    /1   ]  4547.34860124        1
[INPUT] 0    0    [1    /1   ]  687.545059845        1
[INPUT] 0    0    [1    /1   ]  153.87527241         1
[INPUT] 0    0    [1    /1   ]  42.4643589544        1
[INPUT] 0    0    [1    /1   ]  4.75190556254        1
[INPUT] 0    0    [1    /1   ]  0.391444603068       1
[INPUT] 1    0    [1    /1   ]  8.59621998368        1
[INPUT] 1    0    [1    /1   ]  0.49067736591        1

nuclear repulsion = 0
number of shells = 9
number of NR pGTOs = 13
number of NR cGTOs = 13
basis = {'Ar': [[0, [18190.5162366063, 1.0]], [0, [4547.348601235601, 1.0]], [0, [687.5450598450902, 1.0]], [0, [153.87527241029716, 1.0]], [0, [42.46435895444407, 1.0]], [0, [4.751905562544914, 1.0]], [0, [0.39144460306780504, 1.0]], [1, [8.59621998368128, 1.0]], [1, [0.4906773659104872, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [18190.51623661]
bas 1, expnt(s) = [4547.34860124]
bas 2, expnt(s) = [687.54505985]
bas 3, expnt(s) = [153.87527241]
bas 4, expnt(s) = [42.46435895]
bas 5, expnt(s) = [4.75190556]
bas 6, expnt(s) = [0.3914446]
bas 7, expnt(s) = [8.59621998]
bas 8, expnt(s) = [0.49067737]
CPU time:        81.38
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  1  1  1  0 38 39  0]
 [ 0  1  1  1  0 40 41  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.81905162e+04 3.95729834e+03 4.54734860e+03 1.39905153e+03
 6.87545060e+02 3.39227380e+02 1.53875272e+02 1.10380320e+02
 4.24643590e+01 4.20274900e+01 4.75190556e+00 8.13141029e+00
 3.91444603e-01 1.25031015e+00 8.59621998e+00 4.29406677e+01
 4.90677366e-01 1.19806236e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319547480924413
cond(S) = 28.356059458777036
E1 = -688.9171496571155  E_coul = 184.90866133301742
init E= -504.008488324098
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.681265457930238  LUMO = 111.185610701266
  mo_energy =
[-1.21553206e+02 -1.32764983e+01 -7.62140027e+00 -7.62140027e+00
 -7.62140027e+00 -1.65113362e+00 -6.81265458e-01 -6.81265458e-01
 -6.81265458e-01  1.11185611e+02  9.89988128e+02  7.26121638e+03
  3.94011065e+04]
E1 = -706.3699373836346  E_coul = 198.93959701018517
cycle= 1 E= -507.430340373449  delta_E= -3.42  |g|= 0.299  |ddm|=  0.3
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.394608
diis-c [-0.15571519  1.        ]
  HOMO = -0.236314309724114  LUMO = 112.542041029149
  mo_energy =
[-1.20169291e+02 -1.22473506e+01 -6.65224748e+00 -6.65224748e+00
 -6.65224748e+00 -1.16318400e+00 -2.36314310e-01 -2.36314310e-01
 -2.36314310e-01  1.12542041e+02  9.91338608e+02  7.26240124e+03
  3.94021632e+04]
E1 = -706.3487430819979  E_coul = 198.9181201841195
cycle= 2 E= -507.430622897878  delta_E= -0.000283  |g|= 0.00377  |ddm|= 0.0092
    CPU time for cycle= 2      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.00396063
diis-c [-1.53657927e-05 -1.43743121e-03  1.00143743e+00]
  HOMO = -0.23642302157436  LUMO = 112.539219429023
  mo_energy =
[-1.20175421e+02 -1.22481055e+01 -6.65341540e+00 -6.65341540e+00
 -6.65341540e+00 -1.16322461e+00 -2.36423022e-01 -2.36423022e-01
 -2.36423022e-01  1.12539219e+02  9.91329797e+02  7.26238799e+03
  3.94021482e+04]
E1 = -706.3484963458177  E_coul = 198.9178733932556
cycle= 3 E= -507.430622952562  delta_E= -5.47e-08  |g|= 6.22e-05  |ddm|= 0.000112
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=8.24671e-05
diis-c [-1.52906250e-10  3.94125408e-05 -2.12621800e-02  1.02122277e+00]
  HOMO = -0.23642408206889  LUMO = 112.539194928279
  mo_energy =
[-1.20175480e+02 -1.22481132e+01 -6.65342880e+00 -6.65342880e+00
 -6.65342880e+00 -1.16322492e+00 -2.36424082e-01 -2.36424082e-01
 -2.36424082e-01  1.12539195e+02  9.91329736e+02  7.26238792e+03
  3.94021481e+04]
E1 = -706.3484932004972  E_coul = 198.91787024792197
cycle= 4 E= -507.430622952575  delta_E= -1.31e-11  |g|= 1.77e-07  |ddm|= 1.56e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.3484932004972  E_coul = 198.91787024792197
  HOMO = -0.236424076049251  LUMO = 112.539195112047
  mo_energy =
[-1.20175480e+02 -1.22481132e+01 -6.65342874e+00 -6.65342874e+00
 -6.65342874e+00 -1.16322491e+00 -2.36424076e-01 -2.36424076e-01
 -2.36424076e-01  1.12539195e+02  9.91329737e+02  7.26238792e+03
  3.94021481e+04]
E1 = -706.3484932136655  E_coul = 198.91787026108983
Extra cycle  E= -507.430622952576  delta_E= -5.12e-13  |g|= 2.6e-09  |ddm|= 5.46e-09
    CPU time for scf_cycle      0.09 sec, wall time      0.10 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 28.356059458777036
E1 = -706.3484932136655  E_coul = 198.91787026108983
init E= -507.430622952576
    CPU time for initialize scf      0.06 sec, wall time      0.06 sec
  HOMO = -0.236424075989645  LUMO = 112.539195113834
  mo_energy =
[-1.20175480e+02 -1.22481132e+01 -6.65342874e+00 -6.65342874e+00
 -6.65342874e+00 -1.16322491e+00 -2.36424076e-01 -2.36424076e-01
 -2.36424076e-01  1.12539195e+02  9.91329737e+02  7.26238792e+03
  3.94021481e+04]
E1 = -706.3484932138298  E_coul = 198.91787026125425
cycle= 1 E= -507.430622952576  delta_E= 1.71e-13  |g|= 4.58e-11  |ddm|= 7.28e-11
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -706.3484932138298  E_coul = 198.91787026125425
  HOMO = -0.236424075988919  LUMO = 112.539195113853
  mo_energy =
[-1.20175480e+02 -1.22481132e+01 -6.65342874e+00 -6.65342874e+00
 -6.65342874e+00 -1.16322491e+00 -2.36424076e-01 -2.36424076e-01
 -2.36424076e-01  1.12539195e+02  9.91329737e+02  7.26238792e+03
  3.94021481e+04]
E1 = -706.3484932138318  E_coul = 198.9178702612566
Extra cycle  E= -507.430622952575  delta_E= 2.84e-13  |g|= 1.5e-11  |ddm|= 1.13e-12
    CPU time for scf_cycle      0.13 sec, wall time      0.13 sec
exp = [1.81905162e+04 4.54734860e+03 6.87545060e+02 1.53875272e+02
 4.24643590e+01 4.75190556e+00 3.91444603e-01 8.59621998e+00
 4.90677366e-01]
grad_E = [-6.59847683e-06  1.19513777e-04 -3.90318728e-04 -9.89526734e-05
  8.09654891e-05 -4.77654680e-04 -3.94106865e-03 -8.96636356e-04
 -1.05679603e-03]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((9, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.5476253398322024e+03,6.8630785798847160e+02,1.5555024230205126e+02,4.2742815896802767e+01,4.7505784169783016e+00,3.9162204394177752e-01,8.5974230426361959e+00,4.9072756124177219e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "7s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:54:16 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  18190.5188864        1
[INPUT] 0    0    [1    /1   ]  4547.30131641        1
[INPUT] 0    0    [1    /1   ]  687.66506664         1
[INPUT] 0    0    [1    /1   ]  154.103769233        1
[INPUT] 0    0    [1    /1   ]  42.522336202         1
[INPUT] 0    0    [1    /1   ]  4.75149377428        1
[INPUT] 0    0    [1    /1   ]  0.391313443962       1
[INPUT] 1    0    [1    /1   ]  8.59549150253        1
[INPUT] 1    0    [1    /1   ]  0.490651389327       1

nuclear repulsion = 0
number of shells = 9
number of NR pGTOs = 13
number of NR cGTOs = 13
basis = {'Ar': [[0, [18190.518886391314, 1.0]], [0, [4547.301316413013, 1.0]], [0, [687.665066640222, 1.0]], [0, [154.10376923326288, 1.0]], [0, [42.52233620204681, 1.0]], [0, [4.751493774277671, 1.0]], [0, [0.39131344396151724, 1.0]], [1, [8.595491502526539, 1.0]], [1, [0.49065138932699703, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [18190.51888639]
bas 1, expnt(s) = [4547.30131641]
bas 2, expnt(s) = [687.66506664]
bas 3, expnt(s) = [154.10376923]
bas 4, expnt(s) = [42.5223362]
bas 5, expnt(s) = [4.75149377]
bas 6, expnt(s) = [0.39131344]
bas 7, expnt(s) = [8.5954915]
bas 8, expnt(s) = [0.49065139]
CPU time:        84.44
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  1  1  1  0 38 39  0]
 [ 0  1  1  1  0 40 41  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.81905189e+04 3.95729877e+03 4.54730132e+03 1.39904062e+03
 6.87665067e+02 3.39271787e+02 1.54103769e+02 1.10503229e+02
 4.25223362e+01 4.20705182e+01 4.75149377e+00 8.13088180e+00
 3.91313444e-01 1.24999594e+00 8.59549150e+00 4.29361191e+01
 4.90651389e-01 1.19798308e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.31959883203859
cond(S) = 28.38459573378899
E1 = -688.9098189900319  E_coul = 184.90238256706172
init E= -504.00743642297
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.681352440038737  LUMO = 111.432421139967
  mo_energy =
[-1.21553996e+02 -1.32771617e+01 -7.62186129e+00 -7.62186129e+00
 -7.62186129e+00 -1.65118385e+00 -6.81352440e-01 -6.81352440e-01
 -6.81352440e-01  1.11432421e+02  9.90974578e+02  7.26251877e+03
  3.94022386e+04]
E1 = -706.3625456873316  E_coul = 198.93214854150546
cycle= 1 E= -507.430397145826  delta_E= -3.42  |g|= 0.298  |ddm|=  0.3
    CPU time for cycle= 1      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.394767
diis-c [-0.15584091  1.        ]
  HOMO = -0.23645040465077  LUMO = 112.788967862812
  mo_energy =
[-1.20170118e+02 -1.22480810e+01 -6.65279709e+00 -6.65279709e+00
 -6.65279709e+00 -1.16332192e+00 -2.36450405e-01 -2.36450405e-01
 -2.36450405e-01  1.12788968e+02  9.92325224e+02  7.26370414e+03
  3.94032958e+04]
E1 = -706.3414263442725  E_coul = 198.91074768493544
cycle= 2 E= -507.430678659337  delta_E= -0.000282  |g|= 0.00376  |ddm|= 0.00917
    CPU time for cycle= 2      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.00395372
diis-c [-1.53066695e-05 -1.44684925e-03  1.00144685e+00]
  HOMO = -0.236558655707205  LUMO = 112.786152906327
  mo_energy =
[-1.20176229e+02 -1.22488329e+01 -6.65396040e+00 -6.65396040e+00
 -6.65396040e+00 -1.16336235e+00 -2.36558656e-01 -2.36558656e-01
 -2.36558656e-01  1.12786153e+02  9.92316439e+02  7.26369093e+03
  3.94032808e+04]
E1 = -706.3411808383132  E_coul = 198.91050212462196
cycle= 3 E= -507.430678713691  delta_E= -5.44e-08  |g|= 6.19e-05  |ddm|= 0.000112
    CPU time for cycle= 3      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=8.21663e-05
diis-c [-1.51877044e-10  3.93919623e-05 -2.12251780e-02  1.02118579e+00]
  HOMO = -0.236559709033865  LUMO = 112.786128547517
  mo_energy =
[-1.20176287e+02 -1.22488406e+01 -6.65397372e+00 -6.65397372e+00
 -6.65397372e+00 -1.16336265e+00 -2.36559709e-01 -2.36559709e-01
 -2.36559709e-01  1.12786129e+02  9.92316378e+02  7.26369086e+03
  3.94032807e+04]
E1 = -706.3411777164148  E_coul = 198.91049900271003
cycle= 4 E= -507.430678713705  delta_E= -1.35e-11  |g|= 1.76e-07  |ddm|= 1.55e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.3411777164148  E_coul = 198.91049900271003
  HOMO = -0.236559703062978  LUMO = 112.786128730367
  mo_energy =
[-1.20176287e+02 -1.22488406e+01 -6.65397366e+00 -6.65397366e+00
 -6.65397366e+00 -1.16336265e+00 -2.36559703e-01 -2.36559703e-01
 -2.36559703e-01  1.12786129e+02  9.92316379e+02  7.26369086e+03
  3.94032807e+04]
E1 = -706.3411777294754  E_coul = 198.91049901577105
Extra cycle  E= -507.430678713704  delta_E= 4.55e-13  |g|= 2.58e-09  |ddm|= 5.41e-09
    CPU time for scf_cycle      0.10 sec, wall time      0.10 sec
exp = [1.81905189e+04 4.54730132e+03 6.87665067e+02 1.54103769e+02
 4.25223362e+01 4.75149377e+00 3.91313444e-01 8.59549150e+00
 4.90651389e-01]
E = -507.4306787137043
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((9, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.5476253398322024e+03,6.8630785798847160e+02,1.5555024230205126e+02,4.2742815896802767e+01,4.7505784169783016e+00,3.9162204394177752e-01,8.5974230426361959e+00,4.9072756124177219e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "7s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:54:17 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  18190.5188864        1
[INPUT] 0    0    [1    /1   ]  4547.30131641        1
[INPUT] 0    0    [1    /1   ]  687.66506664         1
[INPUT] 0    0    [1    /1   ]  154.103769233        1
[INPUT] 0    0    [1    /1   ]  42.522336202         1
[INPUT] 0    0    [1    /1   ]  4.75149377428        1
[INPUT] 0    0    [1    /1   ]  0.391313443962       1
[INPUT] 1    0    [1    /1   ]  8.59549150253        1
[INPUT] 1    0    [1    /1   ]  0.490651389327       1

nuclear repulsion = 0
number of shells = 9
number of NR pGTOs = 13
number of NR cGTOs = 13
basis = {'Ar': [[0, [18190.518886391314, 1.0]], [0, [4547.301316413013, 1.0]], [0, [687.665066640222, 1.0]], [0, [154.10376923326288, 1.0]], [0, [42.52233620204681, 1.0]], [0, [4.751493774277671, 1.0]], [0, [0.39131344396151724, 1.0]], [1, [8.595491502526539, 1.0]], [1, [0.49065138932699703, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [18190.51888639]
bas 1, expnt(s) = [4547.30131641]
bas 2, expnt(s) = [687.66506664]
bas 3, expnt(s) = [154.10376923]
bas 4, expnt(s) = [42.5223362]
bas 5, expnt(s) = [4.75149377]
bas 6, expnt(s) = [0.39131344]
bas 7, expnt(s) = [8.5954915]
bas 8, expnt(s) = [0.49065139]
CPU time:        84.94
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  1  1  1  0 38 39  0]
 [ 0  1  1  1  0 40 41  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.81905189e+04 3.95729877e+03 4.54730132e+03 1.39904062e+03
 6.87665067e+02 3.39271787e+02 1.54103769e+02 1.10503229e+02
 4.25223362e+01 4.20705182e+01 4.75149377e+00 8.13088180e+00
 3.91313444e-01 1.24999594e+00 8.59549150e+00 4.29361191e+01
 4.90651389e-01 1.19798308e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.31959883203859
cond(S) = 28.38459573378899
E1 = -688.9098189900319  E_coul = 184.90238256706172
init E= -504.00743642297
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.681352440038737  LUMO = 111.432421139967
  mo_energy =
[-1.21553996e+02 -1.32771617e+01 -7.62186129e+00 -7.62186129e+00
 -7.62186129e+00 -1.65118385e+00 -6.81352440e-01 -6.81352440e-01
 -6.81352440e-01  1.11432421e+02  9.90974578e+02  7.26251877e+03
  3.94022386e+04]
E1 = -706.3625456873316  E_coul = 198.93214854150546
cycle= 1 E= -507.430397145826  delta_E= -3.42  |g|= 0.298  |ddm|=  0.3
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.394767
diis-c [-0.15584091  1.        ]
  HOMO = -0.23645040465077  LUMO = 112.788967862812
  mo_energy =
[-1.20170118e+02 -1.22480810e+01 -6.65279709e+00 -6.65279709e+00
 -6.65279709e+00 -1.16332192e+00 -2.36450405e-01 -2.36450405e-01
 -2.36450405e-01  1.12788968e+02  9.92325224e+02  7.26370414e+03
  3.94032958e+04]
E1 = -706.3414263442725  E_coul = 198.91074768493544
cycle= 2 E= -507.430678659337  delta_E= -0.000282  |g|= 0.00376  |ddm|= 0.00917
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00395372
diis-c [-1.53066695e-05 -1.44684925e-03  1.00144685e+00]
  HOMO = -0.236558655707205  LUMO = 112.786152906327
  mo_energy =
[-1.20176229e+02 -1.22488329e+01 -6.65396040e+00 -6.65396040e+00
 -6.65396040e+00 -1.16336235e+00 -2.36558656e-01 -2.36558656e-01
 -2.36558656e-01  1.12786153e+02  9.92316439e+02  7.26369093e+03
  3.94032808e+04]
E1 = -706.3411808383132  E_coul = 198.91050212462196
cycle= 3 E= -507.430678713691  delta_E= -5.44e-08  |g|= 6.19e-05  |ddm|= 0.000112
    CPU time for cycle= 3      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=8.21663e-05
diis-c [-1.51877044e-10  3.93919623e-05 -2.12251780e-02  1.02118579e+00]
  HOMO = -0.236559709033865  LUMO = 112.786128547517
  mo_energy =
[-1.20176287e+02 -1.22488406e+01 -6.65397372e+00 -6.65397372e+00
 -6.65397372e+00 -1.16336265e+00 -2.36559709e-01 -2.36559709e-01
 -2.36559709e-01  1.12786129e+02  9.92316378e+02  7.26369086e+03
  3.94032807e+04]
E1 = -706.3411777164148  E_coul = 198.91049900271003
cycle= 4 E= -507.430678713705  delta_E= -1.35e-11  |g|= 1.76e-07  |ddm|= 1.55e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.3411777164148  E_coul = 198.91049900271003
  HOMO = -0.236559703062978  LUMO = 112.786128730367
  mo_energy =
[-1.20176287e+02 -1.22488406e+01 -6.65397366e+00 -6.65397366e+00
 -6.65397366e+00 -1.16336265e+00 -2.36559703e-01 -2.36559703e-01
 -2.36559703e-01  1.12786129e+02  9.92316379e+02  7.26369086e+03
  3.94032807e+04]
E1 = -706.3411777294754  E_coul = 198.91049901577105
Extra cycle  E= -507.430678713704  delta_E= 4.55e-13  |g|= 2.58e-09  |ddm|= 5.41e-09
    CPU time for scf_cycle      0.09 sec, wall time      0.10 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 28.38459573378899
E1 = -706.3411777294754  E_coul = 198.91049901577105
init E= -507.430678713704
    CPU time for initialize scf      0.06 sec, wall time      0.06 sec
  HOMO = -0.236559703003936  LUMO = 112.786128732142
  mo_energy =
[-1.20176287e+02 -1.22488406e+01 -6.65397366e+00 -6.65397366e+00
 -6.65397366e+00 -1.16336265e+00 -2.36559703e-01 -2.36559703e-01
 -2.36559703e-01  1.12786129e+02  9.92316379e+02  7.26369086e+03
  3.94032807e+04]
E1 = -706.3411777296386  E_coul = 198.91049901593402
cycle= 1 E= -507.430678713705  delta_E= -2.84e-13  |g|= 4.4e-11  |ddm|= 7.21e-11
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -706.3411777296386  E_coul = 198.91049901593402
  HOMO = -0.236559703003216  LUMO = 112.786128732161
  mo_energy =
[-1.20176287e+02 -1.22488406e+01 -6.65397366e+00 -6.65397366e+00
 -6.65397366e+00 -1.16336265e+00 -2.36559703e-01 -2.36559703e-01
 -2.36559703e-01  1.12786129e+02  9.92316379e+02  7.26369086e+03
  3.94032807e+04]
E1 = -706.3411777296407  E_coul = 198.9104990159364
Extra cycle  E= -507.430678713704  delta_E= 3.41e-13  |g|= 2.47e-12  |ddm|= 1.11e-12
    CPU time for scf_cycle      0.13 sec, wall time      0.13 sec
exp = [1.81905189e+04 4.54730132e+03 6.87665067e+02 1.54103769e+02
 4.25223362e+01 4.75149377e+00 3.91313444e-01 8.59549150e+00
 4.90651389e-01]
grad_E = [-6.60174585e-06  1.19826802e-04 -4.08591562e-04 -1.77481108e-06
  1.78077026e-04 -7.81913317e-04 -6.42290880e-03 -1.47231139e-03
 -1.72458725e-03]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((9, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.5476253398322024e+03,6.8630785798847160e+02,1.5555024230205126e+02,4.2742815896802767e+01,4.7505784169783016e+00,3.9162204394177752e-01,8.5974230426361959e+00,4.9072756124177219e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "7s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:54:20 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  18190.5272604        1
[INPUT] 0    0    [1    /1   ]  4547.15067504        1
[INPUT] 0    0    [1    /1   ]  688.104722282        1
[INPUT] 0    0    [1    /1   ]  154.511744695        1
[INPUT] 0    0    [1    /1   ]  42.6208193941        1
[INPUT] 0    0    [1    /1   ]  4.75085351032        1
[INPUT] 0    0    [1    /1   ]  0.391109899043       1
[INPUT] 1    0    [1    /1   ]  8.59434482317        1
[INPUT] 1    0    [1    /1   ]  0.490610319605       1

nuclear repulsion = 0
number of shells = 9
number of NR pGTOs = 13
number of NR cGTOs = 13
basis = {'Ar': [[0, [18190.52726043972, 1.0]], [0, [4547.150675043092, 1.0]], [0, [688.1047222824641, 1.0]], [0, [154.51174469508499, 1.0]], [0, [42.620819394109674, 1.0]], [0, [4.750853510318593, 1.0]], [0, [0.3911098990425605, 1.0]], [1, [8.594344823172738, 1.0]], [1, [0.4906103196053319, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [18190.52726044]
bas 1, expnt(s) = [4547.15067504]
bas 2, expnt(s) = [688.10472228]
bas 3, expnt(s) = [154.5117447]
bas 4, expnt(s) = [42.62081939]
bas 5, expnt(s) = [4.75085351]
bas 6, expnt(s) = [0.3911099]
bas 7, expnt(s) = [8.59434482]
bas 8, expnt(s) = [0.49061032]
CPU time:        88.01
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  1  1  1  0 38 39  0]
 [ 0  1  1  1  0 40 41  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.81905273e+04 3.95730013e+03 4.54715068e+03 1.39900586e+03
 6.88104722e+02 3.39434458e+02 1.54511745e+02 1.10722567e+02
 4.26208194e+01 4.21435747e+01 4.75085351e+00 8.13006006e+00
 3.91109899e-01 1.24950826e+00 8.59434482e+00 4.29289593e+01
 4.90610320e-01 1.19785773e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319678147928975
cond(S) = 28.427853209229234
E1 = -688.8983047157195  E_coul = 184.89255465798772
init E= -504.005750057732
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.681488921978071  LUMO = 111.861283655502
  mo_energy =
[-1.21555244e+02 -1.32782174e+01 -7.62258156e+00 -7.62258156e+00
 -7.62258156e+00 -1.65126516e+00 -6.81488922e-01 -6.81488922e-01
 -6.81488922e-01  1.11861284e+02  9.92918439e+02  7.26547394e+03
  3.94048157e+04]
E1 = -706.351113282589  E_coul = 198.92057123597263
cycle= 1 E= -507.430542046616  delta_E= -3.42  |g|= 0.298  |ddm|=  0.3
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.394962
diis-c [-0.15599492  1.        ]
  HOMO = -0.236662780483274  LUMO = 113.218053747021
  mo_energy =
[-1.20171407e+02 -1.22492362e+01 -6.65365120e+00 -6.65365120e+00
 -6.65365120e+00 -1.16353861e+00 -2.36662780e-01 -2.36662780e-01
 -2.36662780e-01  1.13218054e+02  9.94269362e+02  7.26666017e+03
  3.94058738e+04]
E1 = -706.3301228266125  E_coul = 198.89930101232082
cycle= 2 E= -507.430821814292  delta_E= -0.00028  |g|= 0.00375  |ddm|= 0.00912
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00394178
diis-c [-1.52047845e-05 -1.46287990e-03  1.00146288e+00]
  HOMO = -0.23677024095542  LUMO = 113.215250141257
  mo_energy =
[-1.20177484e+02 -1.22499831e+01 -6.65480656e+00 -6.65480656e+00
 -6.65480656e+00 -1.16357874e+00 -2.36770241e-01 -2.36770241e-01
 -2.36770241e-01  1.13215250e+02  9.94260620e+02  7.26664702e+03
  3.94058589e+04]
E1 = -706.3298794388672  E_coul = 198.89905757078782
cycle= 3 E= -507.430821868079  delta_E= -5.38e-08  |g|= 6.15e-05  |ddm|= 0.000111
    CPU time for cycle= 3      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=8.16491e-05
diis-c [-1.50112754e-10  3.93613474e-05 -2.11615733e-02  1.02112221e+00]
  HOMO = -0.236771282027064  LUMO = 113.215226026311
  mo_energy =
[-1.20177542e+02 -1.22499906e+01 -6.65481973e+00 -6.65481973e+00
 -6.65481973e+00 -1.16357904e+00 -2.36771282e-01 -2.36771282e-01
 -2.36771282e-01  1.13215226e+02  9.94260560e+02  7.26664695e+03
  3.94058589e+04]
E1 = -706.3298763571398  E_coul = 198.89905448904713
cycle= 4 E= -507.430821868093  delta_E= -1.33e-11  |g|= 1.75e-07  |ddm|= 1.53e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.3298763571398  E_coul = 198.89905448904713
  HOMO = -0.236771276140023  LUMO = 113.215226207576
  mo_energy =
[-1.20177541e+02 -1.22499906e+01 -6.65481967e+00 -6.65481967e+00
 -6.65481967e+00 -1.16357903e+00 -2.36771276e-01 -2.36771276e-01
 -2.36771276e-01  1.13215226e+02  9.94260561e+02  7.26664695e+03
  3.94058589e+04]
E1 = -706.3298763700166  E_coul = 198.899054501924
Extra cycle  E= -507.430821868093  delta_E= 1.71e-13  |g|= 2.55e-09  |ddm|= 5.34e-09
    CPU time for scf_cycle      0.10 sec, wall time      0.10 sec
exp = [1.81905273e+04 4.54715068e+03 6.88104722e+02 1.54511745e+02
 4.26208194e+01 4.75085351e+00 3.91109899e-01 8.59434482e+00
 4.90610320e-01]
E = -507.43082186809255
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((9, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.5476253398322024e+03,6.8630785798847160e+02,1.5555024230205126e+02,4.2742815896802767e+01,4.7505784169783016e+00,3.9162204394177752e-01,8.5974230426361959e+00,4.9072756124177219e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "7s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:54:20 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  18190.5272604        1
[INPUT] 0    0    [1    /1   ]  4547.15067504        1
[INPUT] 0    0    [1    /1   ]  688.104722282        1
[INPUT] 0    0    [1    /1   ]  154.511744695        1
[INPUT] 0    0    [1    /1   ]  42.6208193941        1
[INPUT] 0    0    [1    /1   ]  4.75085351032        1
[INPUT] 0    0    [1    /1   ]  0.391109899043       1
[INPUT] 1    0    [1    /1   ]  8.59434482317        1
[INPUT] 1    0    [1    /1   ]  0.490610319605       1

nuclear repulsion = 0
number of shells = 9
number of NR pGTOs = 13
number of NR cGTOs = 13
basis = {'Ar': [[0, [18190.52726043972, 1.0]], [0, [4547.150675043092, 1.0]], [0, [688.1047222824641, 1.0]], [0, [154.51174469508499, 1.0]], [0, [42.620819394109674, 1.0]], [0, [4.750853510318593, 1.0]], [0, [0.3911098990425605, 1.0]], [1, [8.594344823172738, 1.0]], [1, [0.4906103196053319, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [18190.52726044]
bas 1, expnt(s) = [4547.15067504]
bas 2, expnt(s) = [688.10472228]
bas 3, expnt(s) = [154.5117447]
bas 4, expnt(s) = [42.62081939]
bas 5, expnt(s) = [4.75085351]
bas 6, expnt(s) = [0.3911099]
bas 7, expnt(s) = [8.59434482]
bas 8, expnt(s) = [0.49061032]
CPU time:        88.52
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  1  1  1  0 38 39  0]
 [ 0  1  1  1  0 40 41  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.81905273e+04 3.95730013e+03 4.54715068e+03 1.39900586e+03
 6.88104722e+02 3.39434458e+02 1.54511745e+02 1.10722567e+02
 4.26208194e+01 4.21435747e+01 4.75085351e+00 8.13006006e+00
 3.91109899e-01 1.24950826e+00 8.59434482e+00 4.29289593e+01
 4.90610320e-01 1.19785773e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319678147928975
cond(S) = 28.427853209229234
E1 = -688.8983047157195  E_coul = 184.89255465798772
init E= -504.005750057732
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.681488921978071  LUMO = 111.861283655502
  mo_energy =
[-1.21555244e+02 -1.32782174e+01 -7.62258156e+00 -7.62258156e+00
 -7.62258156e+00 -1.65126516e+00 -6.81488922e-01 -6.81488922e-01
 -6.81488922e-01  1.11861284e+02  9.92918439e+02  7.26547394e+03
  3.94048157e+04]
E1 = -706.351113282589  E_coul = 198.92057123597263
cycle= 1 E= -507.430542046616  delta_E= -3.42  |g|= 0.298  |ddm|=  0.3
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.394962
diis-c [-0.15599492  1.        ]
  HOMO = -0.236662780483274  LUMO = 113.218053747021
  mo_energy =
[-1.20171407e+02 -1.22492362e+01 -6.65365120e+00 -6.65365120e+00
 -6.65365120e+00 -1.16353861e+00 -2.36662780e-01 -2.36662780e-01
 -2.36662780e-01  1.13218054e+02  9.94269362e+02  7.26666017e+03
  3.94058738e+04]
E1 = -706.3301228266125  E_coul = 198.89930101232082
cycle= 2 E= -507.430821814292  delta_E= -0.00028  |g|= 0.00375  |ddm|= 0.00912
    CPU time for cycle= 2      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.00394178
diis-c [-1.52047845e-05 -1.46287990e-03  1.00146288e+00]
  HOMO = -0.23677024095542  LUMO = 113.215250141257
  mo_energy =
[-1.20177484e+02 -1.22499831e+01 -6.65480656e+00 -6.65480656e+00
 -6.65480656e+00 -1.16357874e+00 -2.36770241e-01 -2.36770241e-01
 -2.36770241e-01  1.13215250e+02  9.94260620e+02  7.26664702e+03
  3.94058589e+04]
E1 = -706.3298794388672  E_coul = 198.89905757078782
cycle= 3 E= -507.430821868079  delta_E= -5.38e-08  |g|= 6.15e-05  |ddm|= 0.000111
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=8.16491e-05
diis-c [-1.50112754e-10  3.93613474e-05 -2.11615733e-02  1.02112221e+00]
  HOMO = -0.236771282027064  LUMO = 113.215226026311
  mo_energy =
[-1.20177542e+02 -1.22499906e+01 -6.65481973e+00 -6.65481973e+00
 -6.65481973e+00 -1.16357904e+00 -2.36771282e-01 -2.36771282e-01
 -2.36771282e-01  1.13215226e+02  9.94260560e+02  7.26664695e+03
  3.94058589e+04]
E1 = -706.3298763571398  E_coul = 198.89905448904713
cycle= 4 E= -507.430821868093  delta_E= -1.33e-11  |g|= 1.75e-07  |ddm|= 1.53e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.3298763571398  E_coul = 198.89905448904713
  HOMO = -0.236771276140023  LUMO = 113.215226207576
  mo_energy =
[-1.20177541e+02 -1.22499906e+01 -6.65481967e+00 -6.65481967e+00
 -6.65481967e+00 -1.16357903e+00 -2.36771276e-01 -2.36771276e-01
 -2.36771276e-01  1.13215226e+02  9.94260561e+02  7.26664695e+03
  3.94058589e+04]
E1 = -706.3298763700166  E_coul = 198.899054501924
Extra cycle  E= -507.430821868093  delta_E= 1.71e-13  |g|= 2.55e-09  |ddm|= 5.34e-09
    CPU time for scf_cycle      0.09 sec, wall time      0.10 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 28.427853209229234
E1 = -706.3298763700166  E_coul = 198.899054501924
init E= -507.430821868093
    CPU time for initialize scf      0.06 sec, wall time      0.06 sec
  HOMO = -0.236771276081948  LUMO = 113.215226209332
  mo_energy =
[-1.20177541e+02 -1.22499906e+01 -6.65481967e+00 -6.65481967e+00
 -6.65481967e+00 -1.16357903e+00 -2.36771276e-01 -2.36771276e-01
 -2.36771276e-01  1.13215226e+02  9.94260561e+02  7.26664695e+03
  3.94058589e+04]
E1 = -706.3298763701767  E_coul = 198.8990545020843
cycle= 1 E= -507.430821868092  delta_E= 1.14e-13  |g|= 4.37e-11  |ddm|= 7.09e-11
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -706.3298763701767  E_coul = 198.8990545020843
  HOMO = -0.236771276081237  LUMO = 113.21522620935
  mo_energy =
[-1.20177541e+02 -1.22499906e+01 -6.65481967e+00 -6.65481967e+00
 -6.65481967e+00 -1.16357903e+00 -2.36771276e-01 -2.36771276e-01
 -2.36771276e-01  1.13215226e+02  9.94260561e+02  7.26664695e+03
  3.94058589e+04]
E1 = -706.3298763701795  E_coul = 198.89905450208673
Extra cycle  E= -507.430821868093  delta_E= -2.84e-13  |g|= 4.61e-12  |ddm|= 1.1e-12
    CPU time for scf_cycle      0.13 sec, wall time      0.13 sec
exp = [1.81905273e+04 4.54715068e+03 6.88104722e+02 1.54511745e+02
 4.26208194e+01 4.75085351e+00 3.91109899e-01 8.59434482e+00
 4.90610320e-01]
grad_E = [-6.60506093e-06  1.20129326e-04 -4.34827580e-04  1.51619083e-04
  3.31817697e-04 -1.25812178e-03 -1.03099722e-02 -2.37388855e-03
 -2.77029889e-03]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((9, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.5476253398322024e+03,6.8630785798847160e+02,1.5555024230205126e+02,4.2742815896802767e+01,4.7505784169783016e+00,3.9162204394177752e-01,8.5974230426361959e+00,4.9072756124177219e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "7s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:54:24 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  18190.5509828        1
[INPUT] 0    0    [1    /1   ]  4546.72236246        1
[INPUT] 0    0    [1    /1   ]  689.428643148        1
[INPUT] 0    0    [1    /1   ]  155.259486344        1
[INPUT] 0    0    [1    /1   ]  42.7895790089        1
[INPUT] 0    0    [1    /1   ]  4.74989874261        1
[INPUT] 0    0    [1    /1   ]  0.39080751498        1
[INPUT] 1    0    [1    /1   ]  8.59259814326        1
[INPUT] 1    0    [1    /1   ]  0.490547289113       1

nuclear repulsion = 0
number of shells = 9
number of NR pGTOs = 13
number of NR cGTOs = 13
basis = {'Ar': [[0, [18190.550982814806, 1.0]], [0, [4546.722362456201, 1.0]], [0, [689.4286431475678, 1.0]], [0, [155.25948634434798, 1.0]], [0, [42.78957900893071, 1.0]], [0, [4.749898742610687, 1.0]], [0, [0.3908075149795246, 1.0]], [1, [8.592598143258794, 1.0]], [1, [0.49054728911263745, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [18190.55098281]
bas 1, expnt(s) = [4546.72236246]
bas 2, expnt(s) = [689.42864315]
bas 3, expnt(s) = [155.25948634]
bas 4, expnt(s) = [42.78957901]
bas 5, expnt(s) = [4.74989874]
bas 6, expnt(s) = [0.39080751]
bas 7, expnt(s) = [8.59259814]
bas 8, expnt(s) = [0.49054729]
CPU time:        91.98
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  1  1  1  0 38 39  0]
 [ 0  1  1  1  0 40 41  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.81905510e+04 3.95730401e+03 4.54672236e+03 1.39890702e+03
 6.89428643e+02 3.39924147e+02 1.55259486e+02 1.11124196e+02
 4.27895790e+01 4.22686653e+01 4.74989874e+00 8.12883462e+00
 3.90807515e-01 1.24878365e+00 8.59259814e+00 4.29180537e+01
 4.90547289e-01 1.19766537e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.31979511210702
cond(S) = 28.489419138108126
E1 = -688.880846940298  E_coul = 184.8777339277506
init E= -504.003113012547
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.681695570466699  LUMO = 112.620114101251
  mo_energy =
[-1.21557155e+02 -1.32798562e+01 -7.62366424e+00 -7.62366424e+00
 -7.62366424e+00 -1.65139511e+00 -6.81695570e-01 -6.81695570e-01
 -6.81695570e-01  1.12620114e+02  9.96900611e+02  7.27233711e+03
  3.94108174e+04]
E1 = -706.3342373150277  E_coul = 198.90333132049653
cycle= 1 E= -507.430905994531  delta_E= -3.43  |g|= 0.298  |ddm|=  0.3
    CPU time for cycle= 1      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.395114
diis-c [-0.15611495  1.        ]
  HOMO = -0.236981371513585  LUMO = 113.977329564078
  mo_energy =
[-1.20173333e+02 -1.22510106e+01 -6.65492281e+00 -6.65492281e+00
 -6.65492281e+00 -1.16386782e+00 -2.36981372e-01 -2.36981372e-01
 -2.36981372e-01  1.13977330e+02  9.98252007e+02  7.27352481e+03
  3.94118773e+04]
E1 = -706.3134710895932  E_coul = 198.8822883825752
cycle= 2 E= -507.431182707018  delta_E= -0.000277  |g|= 0.00372  |ddm|= 0.00903
    CPU time for cycle= 2      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.0039208
diis-c [-1.50269612e-05 -1.49041405e-03  1.00149041e+00]
  HOMO = -0.237087461276125  LUMO = 113.974545553832
  mo_energy =
[-1.20179351e+02 -1.22517487e+01 -6.65606432e+00 -6.65606432e+00
 -6.65606432e+00 -1.16390743e+00 -2.37087461e-01 -2.37087461e-01
 -2.37087461e-01  1.13974546e+02  9.98243339e+02  7.27351178e+03
  3.94118625e+04]
E1 = -706.3132313907354  E_coul = 198.8820486309164
cycle= 3 E= -507.431182759819  delta_E= -5.28e-08  |g|= 6.08e-05  |ddm|= 0.000109
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=8.07495e-05
diis-c [-1.47061379e-10  3.93192730e-05 -2.10508374e-02  1.02101152e+00]
  HOMO = -0.237088481223583  LUMO = 113.974521862524
  mo_energy =
[-1.20179408e+02 -1.22517562e+01 -6.65607724e+00 -6.65607724e+00
 -6.65607724e+00 -1.16390772e+00 -2.37088481e-01 -2.37088481e-01
 -2.37088481e-01  1.13974522e+02  9.98243281e+02  7.27351171e+03
  3.94118624e+04]
E1 = -706.3132283785205  E_coul = 198.8820456186888
cycle= 4 E= -507.431182759832  delta_E= -1.27e-11  |g|= 1.71e-07  |ddm|= 1.5e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.3132283785205  E_coul = 198.8820456186888
  HOMO = -0.23708847548213  LUMO = 113.974522041021
  mo_energy =
[-1.20179408e+02 -1.22517561e+01 -6.65607718e+00 -6.65607718e+00
 -6.65607718e+00 -1.16390772e+00 -2.37088475e-01 -2.37088475e-01
 -2.37088475e-01  1.13974522e+02  9.98243281e+02  7.27351171e+03
  3.94118624e+04]
E1 = -706.3132283910762  E_coul = 198.88204563124498
Extra cycle  E= -507.431182759831  delta_E= 4.55e-13  |g|= 2.5e-09  |ddm|= 5.2e-09
    CPU time for scf_cycle      0.10 sec, wall time      0.11 sec
exp = [1.81905510e+04 4.54672236e+03 6.89428643e+02 1.55259486e+02
 4.27895790e+01 4.74989874e+00 3.90807515e-01 8.59259814e+00
 4.90547289e-01]
E = -507.43118275983124
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((9, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.5476253398322024e+03,6.8630785798847160e+02,1.5555024230205126e+02,4.2742815896802767e+01,4.7505784169783016e+00,3.9162204394177752e-01,8.5974230426361959e+00,4.9072756124177219e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "7s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:54:25 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  18190.5509828        1
[INPUT] 0    0    [1    /1   ]  4546.72236246        1
[INPUT] 0    0    [1    /1   ]  689.428643148        1
[INPUT] 0    0    [1    /1   ]  155.259486344        1
[INPUT] 0    0    [1    /1   ]  42.7895790089        1
[INPUT] 0    0    [1    /1   ]  4.74989874261        1
[INPUT] 0    0    [1    /1   ]  0.39080751498        1
[INPUT] 1    0    [1    /1   ]  8.59259814326        1
[INPUT] 1    0    [1    /1   ]  0.490547289113       1

nuclear repulsion = 0
number of shells = 9
number of NR pGTOs = 13
number of NR cGTOs = 13
basis = {'Ar': [[0, [18190.550982814806, 1.0]], [0, [4546.722362456201, 1.0]], [0, [689.4286431475678, 1.0]], [0, [155.25948634434798, 1.0]], [0, [42.78957900893071, 1.0]], [0, [4.749898742610687, 1.0]], [0, [0.3908075149795246, 1.0]], [1, [8.592598143258794, 1.0]], [1, [0.49054728911263745, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [18190.55098281]
bas 1, expnt(s) = [4546.72236246]
bas 2, expnt(s) = [689.42864315]
bas 3, expnt(s) = [155.25948634]
bas 4, expnt(s) = [42.78957901]
bas 5, expnt(s) = [4.74989874]
bas 6, expnt(s) = [0.39080751]
bas 7, expnt(s) = [8.59259814]
bas 8, expnt(s) = [0.49054729]
CPU time:        92.57
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  1  1  1  0 38 39  0]
 [ 0  1  1  1  0 40 41  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.81905510e+04 3.95730401e+03 4.54672236e+03 1.39890702e+03
 6.89428643e+02 3.39924147e+02 1.55259486e+02 1.11124196e+02
 4.27895790e+01 4.22686653e+01 4.74989874e+00 8.12883462e+00
 3.90807515e-01 1.24878365e+00 8.59259814e+00 4.29180537e+01
 4.90547289e-01 1.19766537e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.31979511210702
cond(S) = 28.489419138108126
E1 = -688.880846940298  E_coul = 184.8777339277506
init E= -504.003113012547
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.681695570466699  LUMO = 112.620114101251
  mo_energy =
[-1.21557155e+02 -1.32798562e+01 -7.62366424e+00 -7.62366424e+00
 -7.62366424e+00 -1.65139511e+00 -6.81695570e-01 -6.81695570e-01
 -6.81695570e-01  1.12620114e+02  9.96900611e+02  7.27233711e+03
  3.94108174e+04]
E1 = -706.3342373150277  E_coul = 198.90333132049653
cycle= 1 E= -507.430905994531  delta_E= -3.43  |g|= 0.298  |ddm|=  0.3
    CPU time for cycle= 1      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.395114
diis-c [-0.15611495  1.        ]
  HOMO = -0.236981371513585  LUMO = 113.977329564078
  mo_energy =
[-1.20173333e+02 -1.22510106e+01 -6.65492281e+00 -6.65492281e+00
 -6.65492281e+00 -1.16386782e+00 -2.36981372e-01 -2.36981372e-01
 -2.36981372e-01  1.13977330e+02  9.98252007e+02  7.27352481e+03
  3.94118773e+04]
E1 = -706.3134710895932  E_coul = 198.8822883825752
cycle= 2 E= -507.431182707018  delta_E= -0.000277  |g|= 0.00372  |ddm|= 0.00903
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.0039208
diis-c [-1.50269612e-05 -1.49041405e-03  1.00149041e+00]
  HOMO = -0.237087461276125  LUMO = 113.974545553832
  mo_energy =
[-1.20179351e+02 -1.22517487e+01 -6.65606432e+00 -6.65606432e+00
 -6.65606432e+00 -1.16390743e+00 -2.37087461e-01 -2.37087461e-01
 -2.37087461e-01  1.13974546e+02  9.98243339e+02  7.27351178e+03
  3.94118625e+04]
E1 = -706.3132313907354  E_coul = 198.8820486309164
cycle= 3 E= -507.431182759819  delta_E= -5.28e-08  |g|= 6.08e-05  |ddm|= 0.000109
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=8.07495e-05
diis-c [-1.47061379e-10  3.93192730e-05 -2.10508374e-02  1.02101152e+00]
  HOMO = -0.237088481223583  LUMO = 113.974521862524
  mo_energy =
[-1.20179408e+02 -1.22517562e+01 -6.65607724e+00 -6.65607724e+00
 -6.65607724e+00 -1.16390772e+00 -2.37088481e-01 -2.37088481e-01
 -2.37088481e-01  1.13974522e+02  9.98243281e+02  7.27351171e+03
  3.94118624e+04]
E1 = -706.3132283785205  E_coul = 198.8820456186888
cycle= 4 E= -507.431182759832  delta_E= -1.27e-11  |g|= 1.71e-07  |ddm|= 1.5e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.3132283785205  E_coul = 198.8820456186888
  HOMO = -0.23708847548213  LUMO = 113.974522041021
  mo_energy =
[-1.20179408e+02 -1.22517561e+01 -6.65607718e+00 -6.65607718e+00
 -6.65607718e+00 -1.16390772e+00 -2.37088475e-01 -2.37088475e-01
 -2.37088475e-01  1.13974522e+02  9.98243281e+02  7.27351171e+03
  3.94118624e+04]
E1 = -706.3132283910762  E_coul = 198.88204563124498
Extra cycle  E= -507.431182759831  delta_E= 4.55e-13  |g|= 2.5e-09  |ddm|= 5.2e-09
    CPU time for scf_cycle      0.10 sec, wall time      0.11 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 28.489419138108126
E1 = -706.3132283910762  E_coul = 198.88204563124498
init E= -507.431182759831
    CPU time for initialize scf      0.07 sec, wall time      0.07 sec
  HOMO = -0.237088475425717  LUMO = 113.974522042741
  mo_energy =
[-1.20179408e+02 -1.22517561e+01 -6.65607718e+00 -6.65607718e+00
 -6.65607718e+00 -1.16390772e+00 -2.37088475e-01 -2.37088475e-01
 -2.37088475e-01  1.13974522e+02  9.98243281e+02  7.27351171e+03
  3.94118624e+04]
E1 = -706.313228391232  E_coul = 198.88204563140047
cycle= 1 E= -507.431182759831  delta_E= -2.27e-13  |g|= 4.25e-11  |ddm|= 6.88e-11
    CPU time for cycle= 1      0.01 sec, wall time      0.02 sec
E1 = -706.313228391232  E_coul = 198.88204563140047
  HOMO = -0.237088475425034  LUMO = 113.97452204276
  mo_energy =
[-1.20179408e+02 -1.22517561e+01 -6.65607718e+00 -6.65607718e+00
 -6.65607718e+00 -1.16390772e+00 -2.37088475e-01 -2.37088475e-01
 -2.37088475e-01  1.13974522e+02  9.98243281e+02  7.27351171e+03
  3.94118624e+04]
E1 = -706.3132283912342  E_coul = 198.88204563140266
Extra cycle  E= -507.431182759832  delta_E= -1.14e-13  |g|= 4.1e-12  |ddm|= 1.04e-12
    CPU time for scf_cycle      0.14 sec, wall time      0.14 sec
exp = [1.81905510e+04 4.54672236e+03 6.89428643e+02 1.55259486e+02
 4.27895790e+01 4.74989874e+00 3.90807515e-01 8.59259814e+00
 4.90547289e-01]
grad_E = [-6.60540350e-06  1.20096592e-04 -4.68183171e-04  3.86288888e-04
  5.69424659e-04 -1.97564573e-03 -1.61789860e-02 -3.73489082e-03
 -4.34852973e-03]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((9, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.5476253398322024e+03,6.8630785798847160e+02,1.5555024230205126e+02,4.2742815896802767e+01,4.7505784169783016e+00,3.9162204394177752e-01,8.5974230426361959e+00,4.9072756124177219e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "7s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:54:28 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  18190.6118941        1
[INPUT] 0    0    [1    /1   ]  4545.62040764        1
[INPUT] 0    0    [1    /1   ]  692.937450004        1
[INPUT] 0    0    [1    /1   ]  156.610400891        1
[INPUT] 0    0    [1    /1   ]  43.0685943378        1
[INPUT] 0    0    [1    /1   ]  4.74864393929        1
[INPUT] 0    0    [1    /1   ]  0.390413627559       1
[INPUT] 1    0    [1    /1   ]  8.59020736261        1
[INPUT] 1    0    [1    /1   ]  0.490459804658       1

nuclear repulsion = 0
number of shells = 9
number of NR pGTOs = 13
number of NR cGTOs = 13
basis = {'Ar': [[0, [18190.61189414015, 1.0]], [0, [4545.6204076381255, 1.0]], [0, [692.9374500042474, 1.0]], [0, [156.6104008907066, 1.0]], [0, [43.06859433780455, 1.0]], [0, [4.7486439392912185, 1.0]], [0, [0.39041362755877185, 1.0]], [1, [8.590207362612624, 1.0]], [1, [0.4904598046584193, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [18190.61189414]
bas 1, expnt(s) = [4545.62040764]
bas 2, expnt(s) = [692.93745]
bas 3, expnt(s) = [156.61040089]
bas 4, expnt(s) = [43.06859434]
bas 5, expnt(s) = [4.74864394]
bas 6, expnt(s) = [0.39041363]
bas 7, expnt(s) = [8.59020736]
bas 8, expnt(s) = [0.4904598]
CPU time:        95.83
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  1  1  1  0 38 39  0]
 [ 0  1  1  1  0 40 41  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.81906119e+04 3.95731394e+03 4.54562041e+03 1.39865273e+03
 6.92937450e+02 3.41220841e+02 1.56610401e+02 1.11848580e+02
 4.30685943e+01 4.24752112e+01 4.74864394e+00 8.12722399e+00
 3.90413628e-01 1.24783956e+00 8.59020736e+00 4.29031275e+01
 4.90459805e-01 1.19739839e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319945858245507
cond(S) = 28.562681999202496
E1 = -688.857209146098  E_coul = 184.85785749070925
init E= -503.999351655389
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.681974645678931  LUMO = 113.932330717979
  mo_energy =
[-1.21559791e+02 -1.32821788e+01 -7.62510730e+00 -7.62510730e+00
 -7.62510730e+00 -1.65158925e+00 -6.81974646e-01 -6.81974646e-01
 -6.81974646e-01  1.13932331e+02  1.00499907e+03  7.28785091e+03
  3.94244198e+04]
E1 = -706.3125488119166  E_coul = 198.88078243321394
cycle= 1 E= -507.431766378703  delta_E= -3.43  |g|= 0.297  |ddm|=  0.3
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.394951
diis-c [-0.15598613  1.        ]
  HOMO = -0.237404522509832  LUMO = 115.290426139776
  mo_energy =
[-1.20175860e+02 -1.22534778e+01 -6.65658590e+00 -6.65658590e+00
 -6.65658590e+00 -1.16431684e+00 -2.37404523e-01 -2.37404523e-01
 -2.37404523e-01  1.15290426e+02  1.00635126e+03  7.28904112e+03
  3.94254828e+04]
E1 = -706.2921598947313  E_coul = 198.86012198429006
cycle= 2 E= -507.432037910441  delta_E= -0.000272  |g|= 0.00368  |ddm|= 0.00887
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00388499
diis-c [-1.47262988e-05 -1.53598732e-03  1.00153599e+00]
  HOMO = -0.237508317825921  LUMO = 115.287674810138
  mo_energy =
[-1.20181780e+02 -1.22542011e+01 -6.65770407e+00 -6.65770407e+00
 -6.65770407e+00 -1.16435560e+00 -2.37508318e-01 -2.37508318e-01
 -2.37508318e-01  1.15287675e+02  1.00634271e+03  7.28902827e+03
  3.94254683e+04]
E1 = -706.2919264022505  E_coul = 198.85988844066807
cycle= 3 E= -507.432037961582  delta_E= -5.11e-08  |g|= 5.95e-05  |ddm|= 0.000107
    CPU time for cycle= 3      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=7.92354e-05
diis-c [-1.41984831e-10  3.92715825e-05 -2.08639241e-02  1.02082465e+00]
  HOMO = -0.237509302757887  LUMO = 115.287651829525
  mo_energy =
[-1.20181835e+02 -1.22542083e+01 -6.65771658e+00 -6.65771658e+00
 -6.65771658e+00 -1.16435588e+00 -2.37509303e-01 -2.37509303e-01
 -2.37509303e-01  1.15287652e+02  1.00634265e+03  7.28902821e+03
  3.94254682e+04]
E1 = -706.2919235057657  E_coul = 198.8598855441713
cycle= 4 E= -507.432037961594  delta_E= -1.19e-11  |g|= 1.66e-07  |ddm|= 1.45e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.2919235057657  E_coul = 198.8598855441713
  HOMO = -0.237509297259595  LUMO = 115.287652003343
  mo_energy =
[-1.20181835e+02 -1.22542082e+01 -6.65771652e+00 -6.65771652e+00
 -6.65771652e+00 -1.16435588e+00 -2.37509297e-01 -2.37509297e-01
 -2.37509297e-01  1.15287652e+02  1.00634265e+03  7.28902821e+03
  3.94254682e+04]
E1 = -706.2919235177849  E_coul = 198.8598855561902
Extra cycle  E= -507.432037961595  delta_E= -3.41e-13  |g|= 2.4e-09  |ddm|= 4.98e-09
    CPU time for scf_cycle      0.10 sec, wall time      0.10 sec
exp = [1.81906119e+04 4.54562041e+03 6.92937450e+02 1.56610401e+02
 4.30685943e+01 4.74864394e+00 3.90413628e-01 8.59020736e+00
 4.90459805e-01]
E = -507.4320379615947
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((9, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.5476253398322024e+03,6.8630785798847160e+02,1.5555024230205126e+02,4.2742815896802767e+01,4.7505784169783016e+00,3.9162204394177752e-01,8.5974230426361959e+00,4.9072756124177219e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "7s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:54:29 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  18190.6118941        1
[INPUT] 0    0    [1    /1   ]  4545.62040764        1
[INPUT] 0    0    [1    /1   ]  692.937450004        1
[INPUT] 0    0    [1    /1   ]  156.610400891        1
[INPUT] 0    0    [1    /1   ]  43.0685943378        1
[INPUT] 0    0    [1    /1   ]  4.74864393929        1
[INPUT] 0    0    [1    /1   ]  0.390413627559       1
[INPUT] 1    0    [1    /1   ]  8.59020736261        1
[INPUT] 1    0    [1    /1   ]  0.490459804658       1

nuclear repulsion = 0
number of shells = 9
number of NR pGTOs = 13
number of NR cGTOs = 13
basis = {'Ar': [[0, [18190.61189414015, 1.0]], [0, [4545.6204076381255, 1.0]], [0, [692.9374500042474, 1.0]], [0, [156.6104008907066, 1.0]], [0, [43.06859433780455, 1.0]], [0, [4.7486439392912185, 1.0]], [0, [0.39041362755877185, 1.0]], [1, [8.590207362612624, 1.0]], [1, [0.4904598046584193, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [18190.61189414]
bas 1, expnt(s) = [4545.62040764]
bas 2, expnt(s) = [692.93745]
bas 3, expnt(s) = [156.61040089]
bas 4, expnt(s) = [43.06859434]
bas 5, expnt(s) = [4.74864394]
bas 6, expnt(s) = [0.39041363]
bas 7, expnt(s) = [8.59020736]
bas 8, expnt(s) = [0.4904598]
CPU time:        96.37
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  1  1  1  0 38 39  0]
 [ 0  1  1  1  0 40 41  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.81906119e+04 3.95731394e+03 4.54562041e+03 1.39865273e+03
 6.92937450e+02 3.41220841e+02 1.56610401e+02 1.11848580e+02
 4.30685943e+01 4.24752112e+01 4.74864394e+00 8.12722399e+00
 3.90413628e-01 1.24783956e+00 8.59020736e+00 4.29031275e+01
 4.90459805e-01 1.19739839e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319945858245507
cond(S) = 28.562681999202496
E1 = -688.857209146098  E_coul = 184.85785749070925
init E= -503.999351655389
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.681974645678931  LUMO = 113.932330717979
  mo_energy =
[-1.21559791e+02 -1.32821788e+01 -7.62510730e+00 -7.62510730e+00
 -7.62510730e+00 -1.65158925e+00 -6.81974646e-01 -6.81974646e-01
 -6.81974646e-01  1.13932331e+02  1.00499907e+03  7.28785091e+03
  3.94244198e+04]
E1 = -706.3125488119166  E_coul = 198.88078243321394
cycle= 1 E= -507.431766378703  delta_E= -3.43  |g|= 0.297  |ddm|=  0.3
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.394951
diis-c [-0.15598613  1.        ]
  HOMO = -0.237404522509832  LUMO = 115.290426139776
  mo_energy =
[-1.20175860e+02 -1.22534778e+01 -6.65658590e+00 -6.65658590e+00
 -6.65658590e+00 -1.16431684e+00 -2.37404523e-01 -2.37404523e-01
 -2.37404523e-01  1.15290426e+02  1.00635126e+03  7.28904112e+03
  3.94254828e+04]
E1 = -706.2921598947313  E_coul = 198.86012198429006
cycle= 2 E= -507.432037910441  delta_E= -0.000272  |g|= 0.00368  |ddm|= 0.00887
    CPU time for cycle= 2      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.00388499
diis-c [-1.47262988e-05 -1.53598732e-03  1.00153599e+00]
  HOMO = -0.237508317825921  LUMO = 115.287674810138
  mo_energy =
[-1.20181780e+02 -1.22542011e+01 -6.65770407e+00 -6.65770407e+00
 -6.65770407e+00 -1.16435560e+00 -2.37508318e-01 -2.37508318e-01
 -2.37508318e-01  1.15287675e+02  1.00634271e+03  7.28902827e+03
  3.94254683e+04]
E1 = -706.2919264022505  E_coul = 198.85988844066807
cycle= 3 E= -507.432037961582  delta_E= -5.11e-08  |g|= 5.95e-05  |ddm|= 0.000107
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=7.92354e-05
diis-c [-1.41984831e-10  3.92715825e-05 -2.08639241e-02  1.02082465e+00]
  HOMO = -0.237509302757887  LUMO = 115.287651829525
  mo_energy =
[-1.20181835e+02 -1.22542083e+01 -6.65771658e+00 -6.65771658e+00
 -6.65771658e+00 -1.16435588e+00 -2.37509303e-01 -2.37509303e-01
 -2.37509303e-01  1.15287652e+02  1.00634265e+03  7.28902821e+03
  3.94254682e+04]
E1 = -706.2919235057657  E_coul = 198.8598855441713
cycle= 4 E= -507.432037961594  delta_E= -1.19e-11  |g|= 1.66e-07  |ddm|= 1.45e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.2919235057657  E_coul = 198.8598855441713
  HOMO = -0.237509297259595  LUMO = 115.287652003343
  mo_energy =
[-1.20181835e+02 -1.22542082e+01 -6.65771652e+00 -6.65771652e+00
 -6.65771652e+00 -1.16435588e+00 -2.37509297e-01 -2.37509297e-01
 -2.37509297e-01  1.15287652e+02  1.00634265e+03  7.28902821e+03
  3.94254682e+04]
E1 = -706.2919235177849  E_coul = 198.8598855561902
Extra cycle  E= -507.432037961595  delta_E= -3.41e-13  |g|= 2.4e-09  |ddm|= 4.98e-09
    CPU time for scf_cycle      0.09 sec, wall time      0.10 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 28.562681999202496
E1 = -706.2919235177849  E_coul = 198.8598855561902
init E= -507.432037961595
    CPU time for initialize scf      0.06 sec, wall time      0.06 sec
  HOMO = -0.237509297205944  LUMO = 115.287652005003
  mo_energy =
[-1.20181835e+02 -1.22542082e+01 -6.65771652e+00 -6.65771652e+00
 -6.65771652e+00 -1.16435588e+00 -2.37509297e-01 -2.37509297e-01
 -2.37509297e-01  1.15287652e+02  1.00634265e+03  7.28902821e+03
  3.94254682e+04]
E1 = -706.291923517932  E_coul = 198.8598855563377
cycle= 1 E= -507.432037961594  delta_E= 3.98e-13  |g|= 4.15e-11  |ddm|= 6.53e-11
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -706.291923517932  E_coul = 198.8598855563377
  HOMO = -0.237509297205295  LUMO = 115.287652005021
  mo_energy =
[-1.20181835e+02 -1.22542082e+01 -6.65771652e+00 -6.65771652e+00
 -6.65771652e+00 -1.16435588e+00 -2.37509297e-01 -2.37509297e-01
 -2.37509297e-01  1.15287652e+02  1.00634265e+03  7.28902821e+03
  3.94254682e+04]
E1 = -706.291923517934  E_coul = 198.85988555633975
Extra cycle  E= -507.432037961594  delta_E=    0  |g|= 4.44e-12  |ddm|= 1.01e-12
    CPU time for scf_cycle      0.13 sec, wall time      0.13 sec
exp = [1.81906119e+04 4.54562041e+03 6.92937450e+02 1.56610401e+02
 4.30685943e+01 4.74864394e+00 3.90413628e-01 8.59020736e+00
 4.90459805e-01]
grad_E = [-6.59370937e-06  1.18794681e-04 -4.97131996e-04  7.11661060e-04
  9.03605291e-04 -2.93458360e-03 -2.40722781e-02 -5.56502128e-03
 -6.46944788e-03]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((9, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.5476253398322024e+03,6.8630785798847160e+02,1.5555024230205126e+02,4.2742815896802767e+01,4.7505784169783016e+00,3.9162204394177752e-01,8.5974230426361959e+00,4.9072756124177219e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "7s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:54:32 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  18190.7470011        1
[INPUT] 0    0    [1    /1   ]  4543.17313787        1
[INPUT] 0    0    [1    /1   ]  700.872016123        1
[INPUT] 0    0    [1    /1   ]  158.817784742        1
[INPUT] 0    0    [1    /1   ]  43.4722987957        1
[INPUT] 0    0    [1    /1   ]  4.7474987784         1
[INPUT] 0    0    [1    /1   ]  0.39006514241        1
[INPUT] 1    0    [1    /1   ]  8.58778449803        1
[INPUT] 1    0    [1    /1   ]  0.490368094483       1

nuclear repulsion = 0
number of shells = 9
number of NR pGTOs = 13
number of NR cGTOs = 13
basis = {'Ar': [[0, [18190.747001101696, 1.0]], [0, [4543.173137871465, 1.0]], [0, [700.8720161225231, 1.0]], [0, [158.81778474171912, 1.0]], [0, [43.47229879567533, 1.0]], [0, [4.7474987783956655, 1.0]], [0, [0.390065142410417, 1.0]], [1, [8.587784498034578, 1.0]], [1, [0.4903680944827768, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [18190.7470011]
bas 1, expnt(s) = [4543.17313787]
bas 2, expnt(s) = [700.87201612]
bas 3, expnt(s) = [158.81778474]
bas 4, expnt(s) = [43.4722988]
bas 5, expnt(s) = [4.74749878]
bas 6, expnt(s) = [0.39006514]
bas 7, expnt(s) = [8.5877845]
bas 8, expnt(s) = [0.49036809]
CPU time:        99.50
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  1  1  1  0 38 39  0]
 [ 0  1  1  1  0 40 41  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.81907470e+04 3.95733599e+03 4.54317314e+03 1.39808794e+03
 7.00872016e+02 3.44147060e+02 1.58817785e+02 1.13028867e+02
 4.34722988e+01 4.27734695e+01 4.74749878e+00 8.12575400e+00
 3.90065142e-01 1.24700410e+00 8.58778450e+00 4.28880020e+01
 4.90368094e-01 1.19711852e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.320077672710106
cond(S) = 28.609889333289264
E1 = -688.8339539130835  E_coul = 184.8388193599011
init E= -503.995134553182
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.682245994204556  LUMO = 115.960251928063
  mo_energy =
[-1.21562491e+02 -1.32847227e+01 -7.62646725e+00 -7.62646725e+00
 -7.62646725e+00 -1.65182783e+00 -6.82245994e-01 -6.82245994e-01
 -6.82245994e-01  1.15960252e+02  1.02001627e+03  7.31931656e+03
  3.94521010e+04]
E1 = -706.294102266178  E_coul = 198.86056526839988
cycle= 1 E= -507.433536997778  delta_E= -3.44  |g|= 0.295  |ddm|=  0.3
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.393865
diis-c [-0.15513002  1.        ]
  HOMO = -0.237800654741912  LUMO = 117.319908019285
  mo_energy =
[-1.20178145e+02 -1.22560691e+01 -6.65807672e+00 -6.65807672e+00
 -6.65807672e+00 -1.16476975e+00 -2.37800655e-01 -2.37800655e-01
 -2.37800655e-01  1.17319908e+02  1.02136958e+03  7.32051049e+03
  3.94531689e+04]
E1 = -706.2742719460117  E_coul = 198.84047117013216
cycle= 2 E= -507.43380077588  delta_E= -0.000264  |g|= 0.00362  |ddm|= 0.00863
    CPU time for cycle= 2      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.00383069
diis-c [-1.42776342e-05 -1.60152132e-03  1.00160152e+00]
  HOMO = -0.23790107705273  LUMO = 117.317204430394
  mo_energy =
[-1.20183919e+02 -1.22567703e+01 -6.65916023e+00 -6.65916023e+00
 -6.65916023e+00 -1.16480727e+00 -2.37901077e-01 -2.37901077e-01
 -2.37901077e-01  1.17317204e+02  1.02136119e+03  7.32049791e+03
  3.94531546e+04]
E1 = -706.2740476312476  E_coul = 198.8402468066774
cycle= 3 E= -507.43380082457  delta_E= -4.87e-08  |g|= 5.77e-05  |ddm|= 0.000103
    CPU time for cycle= 3      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=7.699e-05
diis-c [-1.34613053e-10  3.92372276e-05 -2.05853300e-02  1.02054609e+00]
  HOMO = -0.237902011324077  LUMO = 117.317182495092
  mo_energy =
[-1.20183972e+02 -1.22567772e+01 -6.65917213e+00 -6.65917213e+00
 -6.65917213e+00 -1.16480753e+00 -2.37902011e-01 -2.37902011e-01
 -2.37902011e-01  1.17317182e+02  1.02136114e+03  7.32049785e+03
  3.94531546e+04]
E1 = -706.2740449030819  E_coul = 198.84024407850063
cycle= 4 E= -507.433800824581  delta_E= -1.1e-11  |g|= 1.58e-07  |ddm|= 1.37e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.2740449030819  E_coul = 198.84024407850063
  HOMO = -0.237902006180217  LUMO = 117.317182661978
  mo_energy =
[-1.20183971e+02 -1.22567771e+01 -6.65917208e+00 -6.65917208e+00
 -6.65917208e+00 -1.16480753e+00 -2.37902006e-01 -2.37902006e-01
 -2.37902006e-01  1.17317183e+02  1.02136114e+03  7.32049785e+03
  3.94531546e+04]
E1 = -706.2740449143142  E_coul = 198.8402440897328
Extra cycle  E= -507.433800824581  delta_E= -2.27e-13  |g|= 2.26e-09  |ddm|= 4.64e-09
    CPU time for scf_cycle      0.10 sec, wall time      0.10 sec
exp = [1.81907470e+04 4.54317314e+03 7.00872016e+02 1.58817785e+02
 4.34722988e+01 4.74749878e+00 3.90065142e-01 8.58778450e+00
 4.90368094e-01]
E = -507.43380082458145
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((9, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.5476253398322024e+03,6.8630785798847160e+02,1.5555024230205126e+02,4.2742815896802767e+01,4.7505784169783016e+00,3.9162204394177752e-01,8.5974230426361959e+00,4.9072756124177219e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "7s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:54:32 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  18190.7470011        1
[INPUT] 0    0    [1    /1   ]  4543.17313787        1
[INPUT] 0    0    [1    /1   ]  700.872016123        1
[INPUT] 0    0    [1    /1   ]  158.817784742        1
[INPUT] 0    0    [1    /1   ]  43.4722987957        1
[INPUT] 0    0    [1    /1   ]  4.7474987784         1
[INPUT] 0    0    [1    /1   ]  0.39006514241        1
[INPUT] 1    0    [1    /1   ]  8.58778449803        1
[INPUT] 1    0    [1    /1   ]  0.490368094483       1

nuclear repulsion = 0
number of shells = 9
number of NR pGTOs = 13
number of NR cGTOs = 13
basis = {'Ar': [[0, [18190.747001101696, 1.0]], [0, [4543.173137871465, 1.0]], [0, [700.8720161225231, 1.0]], [0, [158.81778474171912, 1.0]], [0, [43.47229879567533, 1.0]], [0, [4.7474987783956655, 1.0]], [0, [0.390065142410417, 1.0]], [1, [8.587784498034578, 1.0]], [1, [0.4903680944827768, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [18190.7470011]
bas 1, expnt(s) = [4543.17313787]
bas 2, expnt(s) = [700.87201612]
bas 3, expnt(s) = [158.81778474]
bas 4, expnt(s) = [43.4722988]
bas 5, expnt(s) = [4.74749878]
bas 6, expnt(s) = [0.39006514]
bas 7, expnt(s) = [8.5877845]
bas 8, expnt(s) = [0.49036809]
CPU time:       100.05
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  1  1  1  0 38 39  0]
 [ 0  1  1  1  0 40 41  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.81907470e+04 3.95733599e+03 4.54317314e+03 1.39808794e+03
 7.00872016e+02 3.44147060e+02 1.58817785e+02 1.13028867e+02
 4.34722988e+01 4.27734695e+01 4.74749878e+00 8.12575400e+00
 3.90065142e-01 1.24700410e+00 8.58778450e+00 4.28880020e+01
 4.90368094e-01 1.19711852e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.320077672710106
cond(S) = 28.609889333289264
E1 = -688.8339539130835  E_coul = 184.8388193599011
init E= -503.995134553182
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.682245994204556  LUMO = 115.960251928063
  mo_energy =
[-1.21562491e+02 -1.32847227e+01 -7.62646725e+00 -7.62646725e+00
 -7.62646725e+00 -1.65182783e+00 -6.82245994e-01 -6.82245994e-01
 -6.82245994e-01  1.15960252e+02  1.02001627e+03  7.31931656e+03
  3.94521010e+04]
E1 = -706.294102266178  E_coul = 198.86056526839988
cycle= 1 E= -507.433536997778  delta_E= -3.44  |g|= 0.295  |ddm|=  0.3
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.393865
diis-c [-0.15513002  1.        ]
  HOMO = -0.237800654741912  LUMO = 117.319908019285
  mo_energy =
[-1.20178145e+02 -1.22560691e+01 -6.65807672e+00 -6.65807672e+00
 -6.65807672e+00 -1.16476975e+00 -2.37800655e-01 -2.37800655e-01
 -2.37800655e-01  1.17319908e+02  1.02136958e+03  7.32051049e+03
  3.94531689e+04]
E1 = -706.2742719460117  E_coul = 198.84047117013216
cycle= 2 E= -507.43380077588  delta_E= -0.000264  |g|= 0.00362  |ddm|= 0.00863
    CPU time for cycle= 2      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.00383069
diis-c [-1.42776342e-05 -1.60152132e-03  1.00160152e+00]
  HOMO = -0.23790107705273  LUMO = 117.317204430394
  mo_energy =
[-1.20183919e+02 -1.22567703e+01 -6.65916023e+00 -6.65916023e+00
 -6.65916023e+00 -1.16480727e+00 -2.37901077e-01 -2.37901077e-01
 -2.37901077e-01  1.17317204e+02  1.02136119e+03  7.32049791e+03
  3.94531546e+04]
E1 = -706.2740476312476  E_coul = 198.8402468066774
cycle= 3 E= -507.43380082457  delta_E= -4.87e-08  |g|= 5.77e-05  |ddm|= 0.000103
    CPU time for cycle= 3      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=7.699e-05
diis-c [-1.34613053e-10  3.92372276e-05 -2.05853300e-02  1.02054609e+00]
  HOMO = -0.237902011324077  LUMO = 117.317182495092
  mo_energy =
[-1.20183972e+02 -1.22567772e+01 -6.65917213e+00 -6.65917213e+00
 -6.65917213e+00 -1.16480753e+00 -2.37902011e-01 -2.37902011e-01
 -2.37902011e-01  1.17317182e+02  1.02136114e+03  7.32049785e+03
  3.94531546e+04]
E1 = -706.2740449030819  E_coul = 198.84024407850063
cycle= 4 E= -507.433800824581  delta_E= -1.1e-11  |g|= 1.58e-07  |ddm|= 1.37e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.2740449030819  E_coul = 198.84024407850063
  HOMO = -0.237902006180217  LUMO = 117.317182661978
  mo_energy =
[-1.20183971e+02 -1.22567771e+01 -6.65917208e+00 -6.65917208e+00
 -6.65917208e+00 -1.16480753e+00 -2.37902006e-01 -2.37902006e-01
 -2.37902006e-01  1.17317183e+02  1.02136114e+03  7.32049785e+03
  3.94531546e+04]
E1 = -706.2740449143142  E_coul = 198.8402440897328
Extra cycle  E= -507.433800824581  delta_E= -2.27e-13  |g|= 2.26e-09  |ddm|= 4.64e-09
    CPU time for scf_cycle      0.09 sec, wall time      0.10 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 28.609889333289264
E1 = -706.2740449143142  E_coul = 198.8402440897328
init E= -507.433800824581
    CPU time for initialize scf      0.06 sec, wall time      0.06 sec
  HOMO = -0.237902006130559  LUMO = 117.31718266355
  mo_energy =
[-1.20183971e+02 -1.22567771e+01 -6.65917208e+00 -6.65917208e+00
 -6.65917208e+00 -1.16480753e+00 -2.37902006e-01 -2.37902006e-01
 -2.37902006e-01  1.17317183e+02  1.02136114e+03  7.32049785e+03
  3.94531546e+04]
E1 = -706.2740449144499  E_coul = 198.8402440898688
cycle= 1 E= -507.433800824581  delta_E= 3.98e-13  |g|= 3.79e-11  |ddm|= 6.03e-11
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -706.2740449144499  E_coul = 198.8402440898688
  HOMO = -0.237902006129968  LUMO = 117.317182663567
  mo_energy =
[-1.20183971e+02 -1.22567771e+01 -6.65917208e+00 -6.65917208e+00
 -6.65917208e+00 -1.16480753e+00 -2.37902006e-01 -2.37902006e-01
 -2.37902006e-01  1.17317183e+02  1.02136114e+03  7.32049785e+03
  3.94531546e+04]
E1 = -706.2740449144519  E_coul = 198.84024408987057
Extra cycle  E= -507.433800824581  delta_E= -2.84e-13  |g|= 1.28e-12  |ddm|= 8.95e-13
    CPU time for scf_cycle      0.13 sec, wall time      0.13 sec
exp = [1.81907470e+04 4.54317314e+03 7.00872016e+02 1.58817785e+02
 4.34722988e+01 4.74749878e+00 3.90065142e-01 8.58778450e+00
 4.90368094e-01]
grad_E = [-6.54951481e-06  1.14354411e-04 -4.86889090e-04  1.06614043e-03
  1.24011218e-03 -3.84243780e-03 -3.16933725e-02 -7.33753404e-03
 -8.51790506e-03]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((9, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.5476253398322024e+03,6.8630785798847160e+02,1.5555024230205126e+02,4.2742815896802767e+01,4.7505784169783016e+00,3.9162204394177752e-01,8.5974230426361959e+00,4.9072756124177219e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "7s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:54:35 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  18190.975288         1
[INPUT] 0    0    [1    /1   ]  4539.03413974        1
[INPUT] 0    0    [1    /1   ]  714.47449572         1
[INPUT] 0    0    [1    /1   ]  161.529391652        1
[INPUT] 0    0    [1    /1   ]  43.8778976356        1
[INPUT] 0    0    [1    /1   ]  4.74755204412        1
[INPUT] 0    0    [1    /1   ]  0.390116983882       1
[INPUT] 1    0    [1    /1   ]  8.58725198333        1
[INPUT] 1    0    [1    /1   ]  0.490340004787       1

nuclear repulsion = 0
number of shells = 9
number of NR pGTOs = 13
number of NR cGTOs = 13
basis = {'Ar': [[0, [18190.975288032707, 1.0]], [0, [4539.034139742106, 1.0]], [0, [714.4744957200838, 1.0]], [0, [161.52939165186606, 1.0]], [0, [43.87789763560022, 1.0]], [0, [4.7475520441233865, 1.0]], [0, [0.39011698388170646, 1.0]], [1, [8.587251983331878, 1.0]], [1, [0.49034000478707745, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [18190.97528803]
bas 1, expnt(s) = [4539.03413974]
bas 2, expnt(s) = [714.47449572]
bas 3, expnt(s) = [161.52939165]
bas 4, expnt(s) = [43.87789764]
bas 5, expnt(s) = [4.74755204]
bas 6, expnt(s) = [0.39011698]
bas 7, expnt(s) = [8.58725198]
bas 8, expnt(s) = [0.49034]
CPU time:       103.16
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  1  1  1  0 38 39  0]
 [ 0  1  1  1  0 40 41  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.81909753e+04 3.95737323e+03 4.53903414e+03 1.39713255e+03
 7.14474496e+02 3.49144393e+02 1.61529392e+02 1.14473165e+02
 4.38778976e+01 4.30724308e+01 4.74755204e+00 8.12582238e+00
 3.90116984e-01 1.24712840e+00 8.58725198e+00 4.28846778e+01
 4.90340005e-01 1.19703280e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.32005854247877
cond(S) = 28.550160986631585
E1 = -688.8304044462939  E_coul = 184.8375325926437
init E= -503.99287185365
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.682273673681539  LUMO = 118.247454080383
  mo_energy =
[-1.21563221e+02 -1.32857273e+01 -7.62650062e+00 -7.62650062e+00
 -7.62650062e+00 -1.65198566e+00 -6.82273674e-01 -6.82273674e-01
 -6.82273674e-01  1.18247454e+02  1.04160558e+03  7.36863090e+03
  3.94957003e+04]
E1 = -706.2988058435408  E_coul = 198.86250344514917
cycle= 1 E= -507.436302398392  delta_E= -3.44  |g|= 0.293  |ddm|=  0.3
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.39124
diis-c [-0.15306851  1.        ]
  HOMO = -0.23780643377744  LUMO = 119.609131431212
  mo_energy =
[-1.20178113e+02 -1.22568498e+01 -6.65792581e+00 -6.65792581e+00
 -6.65792581e+00 -1.16486622e+00 -2.37806434e-01 -2.37806434e-01
 -2.37806434e-01  1.19609131e+02  1.04295973e+03  7.36982846e+03
  3.94967735e+04]
E1 = -706.2795676546389  E_coul = 198.84300985612808
cycle= 2 E= -507.436557798511  delta_E= -0.000255  |g|= 0.00356  |ddm|= 0.00837
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00377068
diis-c [-1.37949561e-05 -1.66537702e-03  1.00166538e+00]
  HOMO = -0.237903303341875  LUMO = 119.606476546736
  mo_energy =
[-1.20183733e+02 -1.22575275e+01 -6.65897232e+00 -6.65897232e+00
 -6.65897232e+00 -1.16490247e+00 -2.37903303e-01 -2.37903303e-01
 -2.37903303e-01  1.19606477e+02  1.04295151e+03  7.36981615e+03
  3.94967596e+04]
E1 = -706.2793531067239  E_coul = 198.8427952621381
cycle= 3 E= -507.436557844586  delta_E= -4.61e-08  |g|= 5.57e-05  |ddm|= 9.82e-05
    CPU time for cycle= 3      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=7.45986e-05
diis-c [-1.26983377e-10  3.92338442e-05 -2.02875241e-02  1.02024829e+00]
  HOMO = -0.237904185485591  LUMO = 119.606455704635
  mo_energy =
[-1.20183783e+02 -1.22575340e+01 -6.65898358e+00 -6.65898358e+00
 -6.65898358e+00 -1.16490272e+00 -2.37904185e-01 -2.37904185e-01
 -2.37904185e-01  1.19606456e+02  1.04295146e+03  7.36981609e+03
  3.94967595e+04]
E1 = -706.2793505535743  E_coul = 198.84279270897827
cycle= 4 E= -507.436557844596  delta_E= -1.03e-11  |g|= 1.5e-07  |ddm|= 1.29e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.2793505535743  E_coul = 198.84279270897827
  HOMO = -0.237904180711415  LUMO = 119.606455864208
  mo_energy =
[-1.20183783e+02 -1.22575339e+01 -6.65898353e+00 -6.65898353e+00
 -6.65898353e+00 -1.16490272e+00 -2.37904181e-01 -2.37904181e-01
 -2.37904181e-01  1.19606456e+02  1.04295146e+03  7.36981609e+03
  3.94967595e+04]
E1 = -706.2793505639801  E_coul = 198.84279271938388
Extra cycle  E= -507.436557844596  delta_E= -1.71e-13  |g|= 2.1e-09  |ddm|= 4.28e-09
    CPU time for scf_cycle      0.10 sec, wall time      0.10 sec
exp = [1.81909753e+04 4.53903414e+03 7.14474496e+02 1.61529392e+02
 4.38778976e+01 4.74755204e+00 3.90116984e-01 8.58725198e+00
 4.90340005e-01]
E = -507.4365578445962
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((9, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.5476253398322024e+03,6.8630785798847160e+02,1.5555024230205126e+02,4.2742815896802767e+01,4.7505784169783016e+00,3.9162204394177752e-01,8.5974230426361959e+00,4.9072756124177219e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "7s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:54:36 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  18190.975288         1
[INPUT] 0    0    [1    /1   ]  4539.03413974        1
[INPUT] 0    0    [1    /1   ]  714.47449572         1
[INPUT] 0    0    [1    /1   ]  161.529391652        1
[INPUT] 0    0    [1    /1   ]  43.8778976356        1
[INPUT] 0    0    [1    /1   ]  4.74755204412        1
[INPUT] 0    0    [1    /1   ]  0.390116983882       1
[INPUT] 1    0    [1    /1   ]  8.58725198333        1
[INPUT] 1    0    [1    /1   ]  0.490340004787       1

nuclear repulsion = 0
number of shells = 9
number of NR pGTOs = 13
number of NR cGTOs = 13
basis = {'Ar': [[0, [18190.975288032707, 1.0]], [0, [4539.034139742106, 1.0]], [0, [714.4744957200838, 1.0]], [0, [161.52939165186606, 1.0]], [0, [43.87789763560022, 1.0]], [0, [4.7475520441233865, 1.0]], [0, [0.39011698388170646, 1.0]], [1, [8.587251983331878, 1.0]], [1, [0.49034000478707745, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [18190.97528803]
bas 1, expnt(s) = [4539.03413974]
bas 2, expnt(s) = [714.47449572]
bas 3, expnt(s) = [161.52939165]
bas 4, expnt(s) = [43.87789764]
bas 5, expnt(s) = [4.74755204]
bas 6, expnt(s) = [0.39011698]
bas 7, expnt(s) = [8.58725198]
bas 8, expnt(s) = [0.49034]
CPU time:       103.73
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  1  1  1  0 38 39  0]
 [ 0  1  1  1  0 40 41  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.81909753e+04 3.95737323e+03 4.53903414e+03 1.39713255e+03
 7.14474496e+02 3.49144393e+02 1.61529392e+02 1.14473165e+02
 4.38778976e+01 4.30724308e+01 4.74755204e+00 8.12582238e+00
 3.90116984e-01 1.24712840e+00 8.58725198e+00 4.28846778e+01
 4.90340005e-01 1.19703280e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.32005854247877
cond(S) = 28.550160986631585
E1 = -688.8304044462939  E_coul = 184.8375325926437
init E= -503.99287185365
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.682273673681539  LUMO = 118.247454080383
  mo_energy =
[-1.21563221e+02 -1.32857273e+01 -7.62650062e+00 -7.62650062e+00
 -7.62650062e+00 -1.65198566e+00 -6.82273674e-01 -6.82273674e-01
 -6.82273674e-01  1.18247454e+02  1.04160558e+03  7.36863090e+03
  3.94957003e+04]
E1 = -706.2988058435408  E_coul = 198.86250344514917
cycle= 1 E= -507.436302398392  delta_E= -3.44  |g|= 0.293  |ddm|=  0.3
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.39124
diis-c [-0.15306851  1.        ]
  HOMO = -0.23780643377744  LUMO = 119.609131431212
  mo_energy =
[-1.20178113e+02 -1.22568498e+01 -6.65792581e+00 -6.65792581e+00
 -6.65792581e+00 -1.16486622e+00 -2.37806434e-01 -2.37806434e-01
 -2.37806434e-01  1.19609131e+02  1.04295973e+03  7.36982846e+03
  3.94967735e+04]
E1 = -706.2795676546389  E_coul = 198.84300985612808
cycle= 2 E= -507.436557798511  delta_E= -0.000255  |g|= 0.00356  |ddm|= 0.00837
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.00377068
diis-c [-1.37949561e-05 -1.66537702e-03  1.00166538e+00]
  HOMO = -0.237903303341875  LUMO = 119.606476546736
  mo_energy =
[-1.20183733e+02 -1.22575275e+01 -6.65897232e+00 -6.65897232e+00
 -6.65897232e+00 -1.16490247e+00 -2.37903303e-01 -2.37903303e-01
 -2.37903303e-01  1.19606477e+02  1.04295151e+03  7.36981615e+03
  3.94967596e+04]
E1 = -706.2793531067239  E_coul = 198.8427952621381
cycle= 3 E= -507.436557844586  delta_E= -4.61e-08  |g|= 5.57e-05  |ddm|= 9.82e-05
    CPU time for cycle= 3      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=7.45986e-05
diis-c [-1.26983377e-10  3.92338442e-05 -2.02875241e-02  1.02024829e+00]
  HOMO = -0.237904185485591  LUMO = 119.606455704635
  mo_energy =
[-1.20183783e+02 -1.22575340e+01 -6.65898358e+00 -6.65898358e+00
 -6.65898358e+00 -1.16490272e+00 -2.37904185e-01 -2.37904185e-01
 -2.37904185e-01  1.19606456e+02  1.04295146e+03  7.36981609e+03
  3.94967595e+04]
E1 = -706.2793505535743  E_coul = 198.84279270897827
cycle= 4 E= -507.436557844596  delta_E= -1.03e-11  |g|= 1.5e-07  |ddm|= 1.29e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.2793505535743  E_coul = 198.84279270897827
  HOMO = -0.237904180711415  LUMO = 119.606455864208
  mo_energy =
[-1.20183783e+02 -1.22575339e+01 -6.65898353e+00 -6.65898353e+00
 -6.65898353e+00 -1.16490272e+00 -2.37904181e-01 -2.37904181e-01
 -2.37904181e-01  1.19606456e+02  1.04295146e+03  7.36981609e+03
  3.94967595e+04]
E1 = -706.2793505639801  E_coul = 198.84279271938388
Extra cycle  E= -507.436557844596  delta_E= -1.71e-13  |g|= 2.1e-09  |ddm|= 4.28e-09
    CPU time for scf_cycle      0.09 sec, wall time      0.10 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 28.550160986631585
E1 = -706.2793505639801  E_coul = 198.84279271938388
init E= -507.436557844596
    CPU time for initialize scf      0.06 sec, wall time      0.06 sec
  HOMO = -0.237904180665898  LUMO = 119.606455865687
  mo_energy =
[-1.20183783e+02 -1.22575339e+01 -6.65898353e+00 -6.65898353e+00
 -6.65898353e+00 -1.16490272e+00 -2.37904181e-01 -2.37904181e-01
 -2.37904181e-01  1.19606456e+02  1.04295146e+03  7.36981609e+03
  3.94967595e+04]
E1 = -706.2793505641046  E_coul = 198.84279271950805
cycle= 1 E= -507.436557844597  delta_E= -2.84e-13  |g|= 3.48e-11  |ddm|= 5.49e-11
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -706.2793505641046  E_coul = 198.84279271950805
  HOMO = -0.237904180665356  LUMO = 119.606455865702
  mo_energy =
[-1.20183783e+02 -1.22575339e+01 -6.65898353e+00 -6.65898353e+00
 -6.65898353e+00 -1.16490272e+00 -2.37904181e-01 -2.37904181e-01
 -2.37904181e-01  1.19606456e+02  1.04295146e+03  7.36981609e+03
  3.94967595e+04]
E1 = -706.2793505641059  E_coul = 198.8427927195097
Extra cycle  E= -507.436557844596  delta_E= 2.84e-13  |g|= 3.85e-12  |ddm|= 8.17e-13
    CPU time for scf_cycle      0.13 sec, wall time      0.14 sec
exp = [1.81909753e+04 4.53903414e+03 7.14474496e+02 1.61529392e+02
 4.38778976e+01 4.74755204e+00 3.90116984e-01 8.58725198e+00
 4.90340005e-01]
grad_E = [-6.44683791e-06  1.05247059e-04 -3.88346092e-04  1.25429310e-03
  1.18183431e-03 -3.89231439e-03 -3.23583253e-02 -7.52808129e-03
 -8.72047842e-03]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((9, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.5476253398322024e+03,6.8630785798847160e+02,1.5555024230205126e+02,4.2742815896802767e+01,4.7505784169783016e+00,3.9162204394177752e-01,8.5974230426361959e+00,4.9072756124177219e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "7s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:54:39 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  18191.2221173        1
[INPUT] 0    0    [1    /1   ]  4534.55454087        1
[INPUT] 0    0    [1    /1   ]  729.403380695        1
[INPUT] 0    0    [1    /1   ]  163.305044714        1
[INPUT] 0    0    [1    /1   ]  44.0189287763        1
[INPUT] 0    0    [1    /1   ]  4.74952274108        1
[INPUT] 0    0    [1    /1   ]  0.390792747255       1
[INPUT] 1    0    [1    /1   ]  8.59028220467        1
[INPUT] 1    0    [1    /1   ]  0.490438855106       1

nuclear repulsion = 0
number of shells = 9
number of NR pGTOs = 13
number of NR cGTOs = 13
basis = {'Ar': [[0, [18191.22211726376, 1.0]], [0, [4534.554540870058, 1.0]], [0, [729.4033806949643, 1.0]], [0, [163.3050447143772, 1.0]], [0, [44.018928776291204, 1.0]], [0, [4.749522741079678, 1.0]], [0, [0.3907927472549583, 1.0]], [1, [8.590282204673152, 1.0]], [1, [0.49043885510636526, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [18191.22211726]
bas 1, expnt(s) = [4534.55454087]
bas 2, expnt(s) = [729.40338069]
bas 3, expnt(s) = [163.30504471]
bas 4, expnt(s) = [44.01892878]
bas 5, expnt(s) = [4.74952274]
bas 6, expnt(s) = [0.39079275]
bas 7, expnt(s) = [8.5902822]
bas 8, expnt(s) = [0.49043886]
CPU time:       107.07
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  1  1  1  0 38 39  0]
 [ 0  1  1  1  0 40 41  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.81912221e+04 3.95741351e+03 4.53455454e+03 1.39609829e+03
 7.29403381e+02 3.54601733e+02 1.63305045e+02 1.15415656e+02
 4.40189288e+01 4.31762208e+01 4.74952274e+00 8.12835200e+00
 3.90792747e-01 1.24874826e+00 8.59028220e+00 4.29035947e+01
 4.90438855e-01 1.19733445e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.31980072422015
cond(S) = 28.342473536809013
E1 = -688.8614559284275  E_coul = 184.8667037340109
init E= -503.994752194417
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.681878724127196  LUMO = 119.445479165827
  mo_energy =
[-1.21560329e+02 -1.32834164e+01 -7.62430347e+00 -7.62430347e+00
 -7.62430347e+00 -1.65188979e+00 -6.81878724e-01 -6.81878724e-01
 -6.81878724e-01  1.19445479e+02  1.06070295e+03  7.41757961e+03
  3.95392743e+04]
E1 = -706.3385471058065  E_coul = 198.89949580034013
cycle= 1 E= -507.439051305466  delta_E= -3.44  |g|= 0.291  |ddm|= 0.299
    CPU time for cycle= 1      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.387687
diis-c [-0.15030091  1.        ]
  HOMO = -0.237161648065  LUMO = 120.808538718921
  mo_energy =
[-1.20174568e+02 -1.22540408e+01 -6.65517015e+00 -6.65517015e+00
 -6.65517015e+00 -1.16429738e+00 -2.37161648e-01 -2.37161648e-01
 -2.37161648e-01  1.20808539e+02  1.06205649e+03  7.41877770e+03
  3.95403495e+04]
E1 = -706.3195896312693  E_coul = 198.880287130883
cycle= 2 E= -507.439302500386  delta_E= -0.000251  |g|= 0.00352  |ddm|= 0.00822
    CPU time for cycle= 2      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.00373928
diis-c [-1.35564182e-05 -1.68608274e-03  1.00168608e+00]
  HOMO = -0.237256833573875  LUMO = 120.805902760497
  mo_energy =
[-1.20180118e+02 -1.22547070e+01 -6.65619849e+00 -6.65619849e+00
 -6.65619849e+00 -1.16433308e+00 -2.37256834e-01 -2.37256834e-01
 -2.37256834e-01  1.20805903e+02  1.06204830e+03  7.41876549e+03
  3.95403357e+04]
E1 = -706.3193799255297  E_coul = 198.88007738039778
cycle= 3 E= -507.439302545132  delta_E= -4.47e-08  |g|= 5.47e-05  |ddm|= 9.59e-05
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=7.34504e-05
diis-c [-1.23346341e-10  3.93014322e-05 -2.01475840e-02  1.02010828e+00]
  HOMO = -0.237257691763388  LUMO = 120.805882426075
  mo_energy =
[-1.20180166e+02 -1.22547132e+01 -6.65620945e+00 -6.65620945e+00
 -6.65620945e+00 -1.16433332e+00 -2.37257692e-01 -2.37257692e-01
 -2.37257692e-01  1.20805882e+02  1.06204825e+03  7.41876543e+03
  3.95403356e+04]
E1 = -706.3193774566429  E_coul = 198.8800749115008
cycle= 4 E= -507.439302545142  delta_E= -1.02e-11  |g|= 1.45e-07  |ddm|= 1.25e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.3193774566429  E_coul = 198.8800749115008
  HOMO = -0.237257687173095  LUMO = 120.805882582115
  mo_energy =
[-1.20180166e+02 -1.22547132e+01 -6.65620940e+00 -6.65620940e+00
 -6.65620940e+00 -1.16433332e+00 -2.37257687e-01 -2.37257687e-01
 -2.37257687e-01  1.20805883e+02  1.06204825e+03  7.41876543e+03
  3.95403356e+04]
E1 = -706.319377466628  E_coul = 198.88007492148571
Extra cycle  E= -507.439302545142  delta_E= -1.71e-13  |g|= 2.03e-09  |ddm|= 4.09e-09
    CPU time for scf_cycle      0.10 sec, wall time      0.10 sec
exp = [1.81912221e+04 4.53455454e+03 7.29403381e+02 1.63305045e+02
 4.40189288e+01 4.74952274e+00 3.90792747e-01 8.59028220e+00
 4.90438855e-01]
E = -507.43930254514225
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((9, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.5476253398322024e+03,6.8630785798847160e+02,1.5555024230205126e+02,4.2742815896802767e+01,4.7505784169783016e+00,3.9162204394177752e-01,8.5974230426361959e+00,4.9072756124177219e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "7s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:54:40 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  18191.2221173        1
[INPUT] 0    0    [1    /1   ]  4534.55454087        1
[INPUT] 0    0    [1    /1   ]  729.403380695        1
[INPUT] 0    0    [1    /1   ]  163.305044714        1
[INPUT] 0    0    [1    /1   ]  44.0189287763        1
[INPUT] 0    0    [1    /1   ]  4.74952274108        1
[INPUT] 0    0    [1    /1   ]  0.390792747255       1
[INPUT] 1    0    [1    /1   ]  8.59028220467        1
[INPUT] 1    0    [1    /1   ]  0.490438855106       1

nuclear repulsion = 0
number of shells = 9
number of NR pGTOs = 13
number of NR cGTOs = 13
basis = {'Ar': [[0, [18191.22211726376, 1.0]], [0, [4534.554540870058, 1.0]], [0, [729.4033806949643, 1.0]], [0, [163.3050447143772, 1.0]], [0, [44.018928776291204, 1.0]], [0, [4.749522741079678, 1.0]], [0, [0.3907927472549583, 1.0]], [1, [8.590282204673152, 1.0]], [1, [0.49043885510636526, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [18191.22211726]
bas 1, expnt(s) = [4534.55454087]
bas 2, expnt(s) = [729.40338069]
bas 3, expnt(s) = [163.30504471]
bas 4, expnt(s) = [44.01892878]
bas 5, expnt(s) = [4.74952274]
bas 6, expnt(s) = [0.39079275]
bas 7, expnt(s) = [8.5902822]
bas 8, expnt(s) = [0.49043886]
CPU time:       107.66
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  1  1  1  0 38 39  0]
 [ 0  1  1  1  0 40 41  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.81912221e+04 3.95741351e+03 4.53455454e+03 1.39609829e+03
 7.29403381e+02 3.54601733e+02 1.63305045e+02 1.15415656e+02
 4.40189288e+01 4.31762208e+01 4.74952274e+00 8.12835200e+00
 3.90792747e-01 1.24874826e+00 8.59028220e+00 4.29035947e+01
 4.90438855e-01 1.19733445e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.31980072422015
cond(S) = 28.342473536809013
E1 = -688.8614559284275  E_coul = 184.8667037340109
init E= -503.994752194417
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.681878724127196  LUMO = 119.445479165827
  mo_energy =
[-1.21560329e+02 -1.32834164e+01 -7.62430347e+00 -7.62430347e+00
 -7.62430347e+00 -1.65188979e+00 -6.81878724e-01 -6.81878724e-01
 -6.81878724e-01  1.19445479e+02  1.06070295e+03  7.41757961e+03
  3.95392743e+04]
E1 = -706.3385471058065  E_coul = 198.89949580034013
cycle= 1 E= -507.439051305466  delta_E= -3.44  |g|= 0.291  |ddm|= 0.299
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.387687
diis-c [-0.15030091  1.        ]
  HOMO = -0.237161648065  LUMO = 120.808538718921
  mo_energy =
[-1.20174568e+02 -1.22540408e+01 -6.65517015e+00 -6.65517015e+00
 -6.65517015e+00 -1.16429738e+00 -2.37161648e-01 -2.37161648e-01
 -2.37161648e-01  1.20808539e+02  1.06205649e+03  7.41877770e+03
  3.95403495e+04]
E1 = -706.3195896312693  E_coul = 198.880287130883
cycle= 2 E= -507.439302500386  delta_E= -0.000251  |g|= 0.00352  |ddm|= 0.00822
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00373928
diis-c [-1.35564182e-05 -1.68608274e-03  1.00168608e+00]
  HOMO = -0.237256833573875  LUMO = 120.805902760497
  mo_energy =
[-1.20180118e+02 -1.22547070e+01 -6.65619849e+00 -6.65619849e+00
 -6.65619849e+00 -1.16433308e+00 -2.37256834e-01 -2.37256834e-01
 -2.37256834e-01  1.20805903e+02  1.06204830e+03  7.41876549e+03
  3.95403357e+04]
E1 = -706.3193799255297  E_coul = 198.88007738039778
cycle= 3 E= -507.439302545132  delta_E= -4.47e-08  |g|= 5.47e-05  |ddm|= 9.59e-05
    CPU time for cycle= 3      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=7.34504e-05
diis-c [-1.23346341e-10  3.93014322e-05 -2.01475840e-02  1.02010828e+00]
  HOMO = -0.237257691763388  LUMO = 120.805882426075
  mo_energy =
[-1.20180166e+02 -1.22547132e+01 -6.65620945e+00 -6.65620945e+00
 -6.65620945e+00 -1.16433332e+00 -2.37257692e-01 -2.37257692e-01
 -2.37257692e-01  1.20805882e+02  1.06204825e+03  7.41876543e+03
  3.95403356e+04]
E1 = -706.3193774566429  E_coul = 198.8800749115008
cycle= 4 E= -507.439302545142  delta_E= -1.02e-11  |g|= 1.45e-07  |ddm|= 1.25e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.3193774566429  E_coul = 198.8800749115008
  HOMO = -0.237257687173095  LUMO = 120.805882582115
  mo_energy =
[-1.20180166e+02 -1.22547132e+01 -6.65620940e+00 -6.65620940e+00
 -6.65620940e+00 -1.16433332e+00 -2.37257687e-01 -2.37257687e-01
 -2.37257687e-01  1.20805883e+02  1.06204825e+03  7.41876543e+03
  3.95403356e+04]
E1 = -706.319377466628  E_coul = 198.88007492148571
Extra cycle  E= -507.439302545142  delta_E= -1.71e-13  |g|= 2.03e-09  |ddm|= 4.09e-09
    CPU time for scf_cycle      0.10 sec, wall time      0.10 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 28.342473536809013
E1 = -706.319377466628  E_coul = 198.88007492148571
init E= -507.439302545142
    CPU time for initialize scf      0.06 sec, wall time      0.06 sec
  HOMO = -0.237257687129633  LUMO = 120.805882583548
  mo_energy =
[-1.20180166e+02 -1.22547132e+01 -6.65620940e+00 -6.65620940e+00
 -6.65620940e+00 -1.16433332e+00 -2.37257687e-01 -2.37257687e-01
 -2.37257687e-01  1.20805883e+02  1.06204825e+03  7.41876543e+03
  3.95403356e+04]
E1 = -706.3193774667458  E_coul = 198.88007492160352
cycle= 1 E= -507.439302545142  delta_E=    0  |g|= 3.29e-11  |ddm|= 5.21e-11
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -706.3193774667458  E_coul = 198.88007492160352
  HOMO = -0.237257687129129  LUMO = 120.805882583563
  mo_energy =
[-1.20180166e+02 -1.22547132e+01 -6.65620940e+00 -6.65620940e+00
 -6.65620940e+00 -1.16433332e+00 -2.37257687e-01 -2.37257687e-01
 -2.37257687e-01  1.20805883e+02  1.06204825e+03  7.41876543e+03
  3.95403356e+04]
E1 = -706.3193774667473  E_coul = 198.88007492160506
Extra cycle  E= -507.439302545142  delta_E= 5.68e-14  |g|= 8.76e-12  |ddm|= 7.58e-13
    CPU time for scf_cycle      0.13 sec, wall time      0.13 sec
exp = [1.81912221e+04 4.53455454e+03 7.29403381e+02 1.63305045e+02
 4.40189288e+01 4.74952274e+00 3.90792747e-01 8.59028220e+00
 4.90438855e-01]
grad_E = [-6.29646873e-06  9.38440683e-05 -2.02978897e-04  1.02910404e-03
  4.06537555e-04 -2.54805802e-03 -2.10321366e-02 -4.93741769e-03
 -5.72829432e-03]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((9, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.5476253398322024e+03,6.8630785798847160e+02,1.5555024230205126e+02,4.2742815896802767e+01,4.7505784169783016e+00,3.9162204394177752e-01,8.5974230426361959e+00,4.9072756124177219e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "7s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:54:43 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  18191.3434708        1
[INPUT] 0    0    [1    /1   ]  4532.34830307        1
[INPUT] 0    0    [1    /1   ]  736.936684865        1
[INPUT] 0    0    [1    /1   ]  163.162576033        1
[INPUT] 0    0    [1    /1   ]  43.857639873         1
[INPUT] 0    0    [1    /1   ]  4.75189258443        1
[INPUT] 0    0    [1    /1   ]  0.391578816205       1
[INPUT] 1    0    [1    /1   ]  8.59453494974        1
[INPUT] 1    0    [1    /1   ]  0.490587043368       1

nuclear repulsion = 0
number of shells = 9
number of NR pGTOs = 13
number of NR cGTOs = 13
basis = {'Ar': [[0, [18191.343470767715, 1.0]], [0, [4532.348303067672, 1.0]], [0, [736.9366848647678, 1.0]], [0, [163.16257603339258, 1.0]], [0, [43.857639873005596, 1.0]], [0, [4.75189258442624, 1.0]], [0, [0.39157881620546836, 1.0]], [1, [8.59453494974041, 1.0]], [1, [0.490587043367969, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [18191.34347077]
bas 1, expnt(s) = [4532.34830307]
bas 2, expnt(s) = [736.93668486]
bas 3, expnt(s) = [163.16257603]
bas 4, expnt(s) = [43.85763987]
bas 5, expnt(s) = [4.75189258]
bas 6, expnt(s) = [0.39157882]
bas 7, expnt(s) = [8.59453495]
bas 8, expnt(s) = [0.49058704]
CPU time:       110.92
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  1  1  1  0 38 39  0]
 [ 0  1  1  1  0 40 41  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.81913435e+04 3.95743331e+03 4.53234830e+03 1.39558882e+03
 7.36936685e+02 3.57344956e+02 1.63162576e+02 1.15340131e+02
 4.38576399e+01 4.30575155e+01 4.75189258e+00 8.13139363e+00
 3.91578816e-01 1.25063165e+00 8.59453495e+00 4.29301465e+01
 4.90587043e-01 1.19778670e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.31948951280153
cond(S) = 28.122298147689424
E1 = -688.9021000567799  E_coul = 184.90396792823043
init E= -503.998132128549
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.681371541585889  LUMO = 118.971744833077
  mo_energy =
[-1.21556100e+02 -1.32798017e+01 -7.62154670e+00 -7.62154670e+00
 -7.62154670e+00 -1.65164083e+00 -6.81371542e-01 -6.81371542e-01
 -6.81371542e-01  1.18971745e+02  1.06645047e+03  7.43794800e+03
  3.95575800e+04]
E1 = -706.3847328207402  E_coul = 198.94445472749828
cycle= 1 E= -507.440278093242  delta_E= -3.44  |g|= 0.291  |ddm|= 0.299
    CPU time for cycle= 1      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.385429
diis-c [-0.14855513  1.        ]
  HOMO = -0.236355230959544  LUMO = 120.334993616511
  mo_energy =
[-1.20169966e+02 -1.22499696e+01 -6.65184087e+00 -6.65184087e+00
 -6.65184087e+00 -1.16351227e+00 -2.36355231e-01 -2.36355231e-01
 -2.36355231e-01  1.20334994e+02  1.06780284e+03  7.43914394e+03
  3.95586536e+04]
E1 = -706.3656414142094  E_coul = 198.92511044543292
cycle= 2 E= -507.440530968777  delta_E= -0.000253  |g|= 0.00353  |ddm|= 0.00825
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00375062
diis-c [-1.36553381e-05 -1.66775339e-03  1.00166775e+00]
  HOMO = -0.236451236614674  LUMO = 120.332342517628
  mo_energy =
[-1.20175553e+02 -1.22506408e+01 -6.65287696e+00 -6.65287696e+00
 -6.65287696e+00 -1.16354832e+00 -2.36451237e-01 -2.36451237e-01
 -2.36451237e-01  1.20332343e+02  1.06779457e+03  7.43913164e+03
  3.95586396e+04]
E1 = -706.3654297687988  E_coul = 198.92489875477904
cycle= 3 E= -507.44053101402  delta_E= -4.52e-08  |g|= 5.51e-05  |ddm|= 9.65e-05
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=7.39853e-05
diis-c [-1.24750267e-10  3.95539888e-05 -2.02216826e-02  1.02018213e+00]
  HOMO = -0.236452106552408  LUMO = 120.33232195497
  mo_energy =
[-1.20175602e+02 -1.22506471e+01 -6.65288805e+00 -6.65288805e+00
 -6.65288805e+00 -1.16354857e+00 -2.36452107e-01 -2.36452107e-01
 -2.36452107e-01  1.20332322e+02  1.06779452e+03  7.43913158e+03
  3.95586396e+04]
E1 = -706.3654272652309  E_coul = 198.9248962512008
cycle= 4 E= -507.44053101403  delta_E= -1.03e-11  |g|= 1.46e-07  |ddm|= 1.26e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.3654272652309  E_coul = 198.9248962512008
  HOMO = -0.236452101903856  LUMO = 120.332322112211
  mo_energy =
[-1.20175601e+02 -1.22506471e+01 -6.65288800e+00 -6.65288800e+00
 -6.65288800e+00 -1.16354857e+00 -2.36452102e-01 -2.36452102e-01
 -2.36452102e-01  1.20332322e+02  1.06779452e+03  7.43913158e+03
  3.95586396e+04]
E1 = -706.365427275334  E_coul = 198.92489626130384
Extra cycle  E= -507.44053101403  delta_E= -1.14e-13  |g|= 2.04e-09  |ddm|= 4.13e-09
    CPU time for scf_cycle      0.10 sec, wall time      0.11 sec
exp = [1.81913435e+04 4.53234830e+03 7.36936685e+02 1.63162576e+02
 4.38576399e+01 4.75189258e+00 3.91578816e-01 8.59453495e+00
 4.90587043e-01]
E = -507.44053101403017
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((9, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.5476253398322024e+03,6.8630785798847160e+02,1.5555024230205126e+02,4.2742815896802767e+01,4.7505784169783016e+00,3.9162204394177752e-01,8.5974230426361959e+00,4.9072756124177219e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "7s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:54:44 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  18191.3434708        1
[INPUT] 0    0    [1    /1   ]  4532.34830307        1
[INPUT] 0    0    [1    /1   ]  736.936684865        1
[INPUT] 0    0    [1    /1   ]  163.162576033        1
[INPUT] 0    0    [1    /1   ]  43.857639873         1
[INPUT] 0    0    [1    /1   ]  4.75189258443        1
[INPUT] 0    0    [1    /1   ]  0.391578816205       1
[INPUT] 1    0    [1    /1   ]  8.59453494974        1
[INPUT] 1    0    [1    /1   ]  0.490587043368       1

nuclear repulsion = 0
number of shells = 9
number of NR pGTOs = 13
number of NR cGTOs = 13
basis = {'Ar': [[0, [18191.343470767715, 1.0]], [0, [4532.348303067672, 1.0]], [0, [736.9366848647678, 1.0]], [0, [163.16257603339258, 1.0]], [0, [43.857639873005596, 1.0]], [0, [4.75189258442624, 1.0]], [0, [0.39157881620546836, 1.0]], [1, [8.59453494974041, 1.0]], [1, [0.490587043367969, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [18191.34347077]
bas 1, expnt(s) = [4532.34830307]
bas 2, expnt(s) = [736.93668486]
bas 3, expnt(s) = [163.16257603]
bas 4, expnt(s) = [43.85763987]
bas 5, expnt(s) = [4.75189258]
bas 6, expnt(s) = [0.39157882]
bas 7, expnt(s) = [8.59453495]
bas 8, expnt(s) = [0.49058704]
CPU time:       111.54
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  1  1  1  0 38 39  0]
 [ 0  1  1  1  0 40 41  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.81913435e+04 3.95743331e+03 4.53234830e+03 1.39558882e+03
 7.36936685e+02 3.57344956e+02 1.63162576e+02 1.15340131e+02
 4.38576399e+01 4.30575155e+01 4.75189258e+00 8.13139363e+00
 3.91578816e-01 1.25063165e+00 8.59453495e+00 4.29301465e+01
 4.90587043e-01 1.19778670e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.31948951280153
cond(S) = 28.122298147689424
E1 = -688.9021000567799  E_coul = 184.90396792823043
init E= -503.998132128549
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.681371541585889  LUMO = 118.971744833077
  mo_energy =
[-1.21556100e+02 -1.32798017e+01 -7.62154670e+00 -7.62154670e+00
 -7.62154670e+00 -1.65164083e+00 -6.81371542e-01 -6.81371542e-01
 -6.81371542e-01  1.18971745e+02  1.06645047e+03  7.43794800e+03
  3.95575800e+04]
E1 = -706.3847328207402  E_coul = 198.94445472749828
cycle= 1 E= -507.440278093242  delta_E= -3.44  |g|= 0.291  |ddm|= 0.299
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.385429
diis-c [-0.14855513  1.        ]
  HOMO = -0.236355230959544  LUMO = 120.334993616511
  mo_energy =
[-1.20169966e+02 -1.22499696e+01 -6.65184087e+00 -6.65184087e+00
 -6.65184087e+00 -1.16351227e+00 -2.36355231e-01 -2.36355231e-01
 -2.36355231e-01  1.20334994e+02  1.06780284e+03  7.43914394e+03
  3.95586536e+04]
E1 = -706.3656414142094  E_coul = 198.92511044543292
cycle= 2 E= -507.440530968777  delta_E= -0.000253  |g|= 0.00353  |ddm|= 0.00825
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00375062
diis-c [-1.36553381e-05 -1.66775339e-03  1.00166775e+00]
  HOMO = -0.236451236614674  LUMO = 120.332342517628
  mo_energy =
[-1.20175553e+02 -1.22506408e+01 -6.65287696e+00 -6.65287696e+00
 -6.65287696e+00 -1.16354832e+00 -2.36451237e-01 -2.36451237e-01
 -2.36451237e-01  1.20332343e+02  1.06779457e+03  7.43913164e+03
  3.95586396e+04]
E1 = -706.3654297687988  E_coul = 198.92489875477904
cycle= 3 E= -507.44053101402  delta_E= -4.52e-08  |g|= 5.51e-05  |ddm|= 9.65e-05
    CPU time for cycle= 3      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=7.39853e-05
diis-c [-1.24750267e-10  3.95539888e-05 -2.02216826e-02  1.02018213e+00]
  HOMO = -0.236452106552408  LUMO = 120.33232195497
  mo_energy =
[-1.20175602e+02 -1.22506471e+01 -6.65288805e+00 -6.65288805e+00
 -6.65288805e+00 -1.16354857e+00 -2.36452107e-01 -2.36452107e-01
 -2.36452107e-01  1.20332322e+02  1.06779452e+03  7.43913158e+03
  3.95586396e+04]
E1 = -706.3654272652309  E_coul = 198.9248962512008
cycle= 4 E= -507.44053101403  delta_E= -1.03e-11  |g|= 1.46e-07  |ddm|= 1.26e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.3654272652309  E_coul = 198.9248962512008
  HOMO = -0.236452101903856  LUMO = 120.332322112211
  mo_energy =
[-1.20175601e+02 -1.22506471e+01 -6.65288800e+00 -6.65288800e+00
 -6.65288800e+00 -1.16354857e+00 -2.36452102e-01 -2.36452102e-01
 -2.36452102e-01  1.20332322e+02  1.06779452e+03  7.43913158e+03
  3.95586396e+04]
E1 = -706.365427275334  E_coul = 198.92489626130384
Extra cycle  E= -507.44053101403  delta_E= -1.14e-13  |g|= 2.04e-09  |ddm|= 4.13e-09
    CPU time for scf_cycle      0.10 sec, wall time      0.10 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 28.122298147689424
E1 = -706.365427275334  E_coul = 198.92489626130384
init E= -507.44053101403
    CPU time for initialize scf      0.07 sec, wall time      0.07 sec
  HOMO = -0.236452101859747  LUMO = 120.332322113658
  mo_energy =
[-1.20175601e+02 -1.22506471e+01 -6.65288800e+00 -6.65288800e+00
 -6.65288800e+00 -1.16354857e+00 -2.36452102e-01 -2.36452102e-01
 -2.36452102e-01  1.20332322e+02  1.06779452e+03  7.43913158e+03
  3.95586396e+04]
E1 = -706.3654272754529  E_coul = 198.9248962614233
cycle= 1 E= -507.44053101403  delta_E= 5.68e-13  |g|= 3.37e-11  |ddm|= 5.27e-11
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -706.3654272754529  E_coul = 198.9248962614233
  HOMO = -0.236452101859235  LUMO = 120.332322113672
  mo_energy =
[-1.20175601e+02 -1.22506471e+01 -6.65288800e+00 -6.65288800e+00
 -6.65288800e+00 -1.16354857e+00 -2.36452102e-01 -2.36452102e-01
 -2.36452102e-01  1.20332322e+02  1.06779452e+03  7.43913158e+03
  3.95586396e+04]
E1 = -706.365427275455  E_coul = 198.92489626142523
Extra cycle  E= -507.44053101403  delta_E= -1.14e-13  |g|= 7.77e-12  |ddm|= 7.79e-13
    CPU time for scf_cycle      0.13 sec, wall time      0.13 sec
exp = [1.81913435e+04 4.53234830e+03 7.36936685e+02 1.63162576e+02
 4.38576399e+01 4.75189258e+00 3.91578816e-01 8.59453495e+00
 4.90587043e-01]
grad_E = [-6.18575654e-06  8.64452004e-05 -2.96200327e-05  4.14779473e-04
 -1.17072960e-04 -8.50308719e-04 -6.68256370e-03 -1.50126444e-03
 -1.83888032e-03]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((9, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.5476253398322024e+03,6.8630785798847160e+02,1.5555024230205126e+02,4.2742815896802767e+01,4.7505784169783016e+00,3.9162204394177752e-01,8.5974230426361959e+00,4.9072756124177219e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "7s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:54:47 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  18191.340102         1
[INPUT] 0    0    [1    /1   ]  4532.40709101        1
[INPUT] 0    0    [1    /1   ]  736.851934268        1
[INPUT] 0    0    [1    /1   ]  162.511328162        1
[INPUT] 0    0    [1    /1   ]  43.7202312547        1
[INPUT] 0    0    [1    /1   ]  4.75281120441        1
[INPUT] 0    0    [1    /1   ]  0.391879571948       1
[INPUT] 1    0    [1    /1   ]  8.59620331023        1
[INPUT] 1    0    [1    /1   ]  0.490647465444       1

nuclear repulsion = 0
number of shells = 9
number of NR pGTOs = 13
number of NR cGTOs = 13
basis = {'Ar': [[0, [18191.340102030066, 1.0]], [0, [4532.40709100693, 1.0]], [0, [736.8519342684667, 1.0]], [0, [162.5113281619942, 1.0]], [0, [43.72023125467468, 1.0]], [0, [4.752811204408398, 1.0]], [0, [0.39187957194846623, 1.0]], [1, [8.596203310227889, 1.0]], [1, [0.4906474654440782, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [18191.34010203]
bas 1, expnt(s) = [4532.40709101]
bas 2, expnt(s) = [736.85193427]
bas 3, expnt(s) = [162.51132816]
bas 4, expnt(s) = [43.72023125]
bas 5, expnt(s) = [4.7528112]
bas 6, expnt(s) = [0.39187957]
bas 7, expnt(s) = [8.59620331]
bas 8, expnt(s) = [0.49064747]
CPU time:       114.81
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  1  1  1  0 38 39  0]
 [ 0  1  1  1  0 40 41  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.81913401e+04 3.95743276e+03 4.53240709e+03 1.39560240e+03
 7.36851934e+02 3.57314134e+02 1.62511328e+02 1.14994681e+02
 4.37202313e+01 4.29562995e+01 4.75281120e+00 8.13257256e+00
 3.91879572e-01 1.25135200e+00 8.59620331e+00 4.29405636e+01
 4.90647465e-01 1.19797110e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319372634447177
cond(S) = 28.050063252573846
E1 = -688.9182803615138  E_coul = 184.91841287877415
init E= -503.99986748274
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.681169271053208  LUMO = 118.316023552189
  mo_energy =
[-1.21554373e+02 -1.32783374e+01 -7.62048177e+00 -7.62048177e+00
 -7.62048177e+00 -1.65152724e+00 -6.81169271e-01 -6.81169271e-01
 -6.81169271e-01  1.18316024e+02  1.06396303e+03  7.43505092e+03
  3.95550558e+04]
E1 = -706.4022922555603  E_coul = 198.96187538973936
cycle= 1 E= -507.440416865821  delta_E= -3.44  |g|= 0.292  |ddm|= 0.299
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.385146
diis-c [-0.14833777  1.        ]
  HOMO = -0.236040163492687  LUMO = 119.679083061344
  mo_energy =
[-1.20168037e+02 -1.22483492e+01 -6.65056384e+00 -6.65056384e+00
 -6.65056384e+00 -1.16319902e+00 -2.36040163e-01 -2.36040163e-01
 -2.36040163e-01  1.19679083e+02  1.06531519e+03  7.43624575e+03
  3.95561282e+04]
E1 = -706.3830361779314  E_coul = 198.94236415695823
cycle= 2 E= -507.440672020973  delta_E= -0.000255  |g|= 0.00355  |ddm|= 0.00832
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00376689
diis-c [-1.37852356e-05 -1.65362457e-03  1.00165362e+00]
  HOMO = -0.236137184646128  LUMO = 119.676417963076
  mo_energy =
[-1.20173666e+02 -1.22490269e+01 -6.65161014e+00 -6.65161014e+00
 -6.65161014e+00 -1.16323546e+00 -2.36137185e-01 -2.36137185e-01
 -2.36137185e-01  1.19676418e+02  1.06530687e+03  7.43623337e+03
  3.95561141e+04]
E1 = -706.3828218695822  E_coul = 198.94214980264485
cycle= 3 E= -507.440672066937  delta_E= -4.6e-08  |g|= 5.57e-05  |ddm|= 9.77e-05
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=7.46534e-05
diis-c [-1.26642279e-10  3.97457732e-05 -2.03094928e-02  1.02026975e+00]
  HOMO = -0.23613806893342  LUMO = 119.676397119183
  mo_energy =
[-1.20173715e+02 -1.22490333e+01 -6.65162140e+00 -6.65162140e+00
 -6.65162140e+00 -1.16323571e+00 -2.36138069e-01 -2.36138069e-01
 -2.36138069e-01  1.19676397e+02  1.06530682e+03  7.43623331e+03
  3.95561141e+04]
E1 = -706.3828193192903  E_coul = 198.9421472523427
cycle= 4 E= -507.440672066948  delta_E= -1.02e-11  |g|= 1.48e-07  |ddm|= 1.28e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.3828193192903  E_coul = 198.9421472523427
  HOMO = -0.236138064195251  LUMO = 119.676397278094
  mo_energy =
[-1.20173715e+02 -1.22490333e+01 -6.65162135e+00 -6.65162135e+00
 -6.65162135e+00 -1.16323571e+00 -2.36138064e-01 -2.36138064e-01
 -2.36138064e-01  1.19676397e+02  1.06530682e+03  7.43623331e+03
  3.95561141e+04]
E1 = -706.3828193295891  E_coul = 198.942147262642
Extra cycle  E= -507.440672066947  delta_E= 5.68e-13  |g|= 2.08e-09  |ddm|= 4.21e-09
    CPU time for scf_cycle      0.10 sec, wall time      0.10 sec
exp = [1.81913401e+04 4.53240709e+03 7.36851934e+02 1.62511328e+02
 4.37202313e+01 4.75281120e+00 3.91879572e-01 8.59620331e+00
 4.90647465e-01]
E = -507.44067206694706
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((9, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.5476253398322024e+03,6.8630785798847160e+02,1.5555024230205126e+02,4.2742815896802767e+01,4.7505784169783016e+00,3.9162204394177752e-01,8.5974230426361959e+00,4.9072756124177219e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "7s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:54:48 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  18191.340102         1
[INPUT] 0    0    [1    /1   ]  4532.40709101        1
[INPUT] 0    0    [1    /1   ]  736.851934268        1
[INPUT] 0    0    [1    /1   ]  162.511328162        1
[INPUT] 0    0    [1    /1   ]  43.7202312547        1
[INPUT] 0    0    [1    /1   ]  4.75281120441        1
[INPUT] 0    0    [1    /1   ]  0.391879571948       1
[INPUT] 1    0    [1    /1   ]  8.59620331023        1
[INPUT] 1    0    [1    /1   ]  0.490647465444       1

nuclear repulsion = 0
number of shells = 9
number of NR pGTOs = 13
number of NR cGTOs = 13
basis = {'Ar': [[0, [18191.340102030066, 1.0]], [0, [4532.40709100693, 1.0]], [0, [736.8519342684667, 1.0]], [0, [162.5113281619942, 1.0]], [0, [43.72023125467468, 1.0]], [0, [4.752811204408398, 1.0]], [0, [0.39187957194846623, 1.0]], [1, [8.596203310227889, 1.0]], [1, [0.4906474654440782, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [18191.34010203]
bas 1, expnt(s) = [4532.40709101]
bas 2, expnt(s) = [736.85193427]
bas 3, expnt(s) = [162.51132816]
bas 4, expnt(s) = [43.72023125]
bas 5, expnt(s) = [4.7528112]
bas 6, expnt(s) = [0.39187957]
bas 7, expnt(s) = [8.59620331]
bas 8, expnt(s) = [0.49064747]
CPU time:       115.42
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  1  1  1  0 38 39  0]
 [ 0  1  1  1  0 40 41  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.81913401e+04 3.95743276e+03 4.53240709e+03 1.39560240e+03
 7.36851934e+02 3.57314134e+02 1.62511328e+02 1.14994681e+02
 4.37202313e+01 4.29562995e+01 4.75281120e+00 8.13257256e+00
 3.91879572e-01 1.25135200e+00 8.59620331e+00 4.29405636e+01
 4.90647465e-01 1.19797110e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319372634447177
cond(S) = 28.050063252573846
E1 = -688.9182803615138  E_coul = 184.91841287877415
init E= -503.99986748274
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.681169271053208  LUMO = 118.316023552189
  mo_energy =
[-1.21554373e+02 -1.32783374e+01 -7.62048177e+00 -7.62048177e+00
 -7.62048177e+00 -1.65152724e+00 -6.81169271e-01 -6.81169271e-01
 -6.81169271e-01  1.18316024e+02  1.06396303e+03  7.43505092e+03
  3.95550558e+04]
E1 = -706.4022922555603  E_coul = 198.96187538973936
cycle= 1 E= -507.440416865821  delta_E= -3.44  |g|= 0.292  |ddm|= 0.299
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.385146
diis-c [-0.14833777  1.        ]
  HOMO = -0.236040163492687  LUMO = 119.679083061344
  mo_energy =
[-1.20168037e+02 -1.22483492e+01 -6.65056384e+00 -6.65056384e+00
 -6.65056384e+00 -1.16319902e+00 -2.36040163e-01 -2.36040163e-01
 -2.36040163e-01  1.19679083e+02  1.06531519e+03  7.43624575e+03
  3.95561282e+04]
E1 = -706.3830361779314  E_coul = 198.94236415695823
cycle= 2 E= -507.440672020973  delta_E= -0.000255  |g|= 0.00355  |ddm|= 0.00832
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00376689
diis-c [-1.37852356e-05 -1.65362457e-03  1.00165362e+00]
  HOMO = -0.236137184646128  LUMO = 119.676417963076
  mo_energy =
[-1.20173666e+02 -1.22490269e+01 -6.65161014e+00 -6.65161014e+00
 -6.65161014e+00 -1.16323546e+00 -2.36137185e-01 -2.36137185e-01
 -2.36137185e-01  1.19676418e+02  1.06530687e+03  7.43623337e+03
  3.95561141e+04]
E1 = -706.3828218695822  E_coul = 198.94214980264485
cycle= 3 E= -507.440672066937  delta_E= -4.6e-08  |g|= 5.57e-05  |ddm|= 9.77e-05
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=7.46534e-05
diis-c [-1.26642279e-10  3.97457732e-05 -2.03094928e-02  1.02026975e+00]
  HOMO = -0.23613806893342  LUMO = 119.676397119183
  mo_energy =
[-1.20173715e+02 -1.22490333e+01 -6.65162140e+00 -6.65162140e+00
 -6.65162140e+00 -1.16323571e+00 -2.36138069e-01 -2.36138069e-01
 -2.36138069e-01  1.19676397e+02  1.06530682e+03  7.43623331e+03
  3.95561141e+04]
E1 = -706.3828193192903  E_coul = 198.9421472523427
cycle= 4 E= -507.440672066948  delta_E= -1.02e-11  |g|= 1.48e-07  |ddm|= 1.28e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.3828193192903  E_coul = 198.9421472523427
  HOMO = -0.236138064195251  LUMO = 119.676397278094
  mo_energy =
[-1.20173715e+02 -1.22490333e+01 -6.65162135e+00 -6.65162135e+00
 -6.65162135e+00 -1.16323571e+00 -2.36138064e-01 -2.36138064e-01
 -2.36138064e-01  1.19676397e+02  1.06530682e+03  7.43623331e+03
  3.95561141e+04]
E1 = -706.3828193295891  E_coul = 198.942147262642
Extra cycle  E= -507.440672066947  delta_E= 5.68e-13  |g|= 2.08e-09  |ddm|= 4.21e-09
    CPU time for scf_cycle      0.10 sec, wall time      0.10 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 28.050063252573846
E1 = -706.3828193295891  E_coul = 198.942147262642
init E= -507.440672066947
    CPU time for initialize scf      0.06 sec, wall time      0.06 sec
  HOMO = -0.236138064150127  LUMO = 119.676397279562
  mo_energy =
[-1.20173715e+02 -1.22490333e+01 -6.65162135e+00 -6.65162135e+00
 -6.65162135e+00 -1.16323571e+00 -2.36138064e-01 -2.36138064e-01
 -2.36138064e-01  1.19676397e+02  1.06530682e+03  7.43623331e+03
  3.95561141e+04]
E1 = -706.3828193297113  E_coul = 198.94214726276434
cycle= 1 E= -507.440672066947  delta_E= 1.14e-13  |g|= 3.47e-11  |ddm|= 5.4e-11
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -706.3828193297113  E_coul = 198.94214726276434
  HOMO = -0.236138064149596  LUMO = 119.676397279576
  mo_energy =
[-1.20173715e+02 -1.22490333e+01 -6.65162135e+00 -6.65162135e+00
 -6.65162135e+00 -1.16323571e+00 -2.36138064e-01 -2.36138064e-01
 -2.36138064e-01  1.19676397e+02  1.06530682e+03  7.43623331e+03
  3.95561141e+04]
E1 = -706.3828193297131  E_coul = 198.9421472627661
Extra cycle  E= -507.440672066947  delta_E= -1.14e-13  |g|= 3.57e-12  |ddm|= 8.03e-13
    CPU time for scf_cycle      0.13 sec, wall time      0.14 sec
exp = [1.81913401e+04 4.53240709e+03 7.36851934e+02 1.62511328e+02
 4.37202313e+01 4.75281120e+00 3.91879572e-01 8.59620331e+00
 4.90647465e-01]
grad_E = [-6.16718688e-06  8.52537072e-05  2.70343195e-05  5.08339593e-05
 -1.17907361e-05 -1.31227598e-04 -1.01990208e-03 -1.67333358e-04
 -2.70179570e-04]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((9, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.5476253398322024e+03,6.8630785798847160e+02,1.5555024230205126e+02,4.2742815896802767e+01,4.7505784169783016e+00,3.9162204394177752e-01,8.5974230426361959e+00,4.9072756124177219e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "7s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:54:51 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  18191.3250628        1
[INPUT] 0    0    [1    /1   ]  4532.67960197        1
[INPUT] 0    0    [1    /1   ]  735.964955726        1
[INPUT] 0    0    [1    /1   ]  162.282320171        1
[INPUT] 0    0    [1    /1   ]  43.6824806537        1
[INPUT] 0    0    [1    /1   ]  4.75295315937        1
[INPUT] 0    0    [1    /1   ]  0.391928454326       1
[INPUT] 1    0    [1    /1   ]  8.59641239192        1
[INPUT] 1    0    [1    /1   ]  0.490655802403       1

nuclear repulsion = 0
number of shells = 9
number of NR pGTOs = 13
number of NR cGTOs = 13
basis = {'Ar': [[0, [18191.32506276687, 1.0]], [0, [4532.679601973663, 1.0]], [0, [735.9649557256803, 1.0]], [0, [162.28232017072926, 1.0]], [0, [43.682480653699756, 1.0]], [0, [4.752953159368165, 1.0]], [0, [0.3919284543260569, 1.0]], [1, [8.596412391924682, 1.0]], [1, [0.49065580240289713, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [18191.32506277]
bas 1, expnt(s) = [4532.67960197]
bas 2, expnt(s) = [735.96495573]
bas 3, expnt(s) = [162.28232017]
bas 4, expnt(s) = [43.68248065]
bas 5, expnt(s) = [4.75295316]
bas 6, expnt(s) = [0.39192845]
bas 7, expnt(s) = [8.59641239]
bas 8, expnt(s) = [0.4906558]
CPU time:       118.64
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  1  1  1  0 38 39  0]
 [ 0  1  1  1  0 40 41  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.81913251e+04 3.95743030e+03 4.53267960e+03 1.39566533e+03
 7.35964956e+02 3.56991500e+02 1.62282320e+02 1.14873124e+02
 4.36824807e+01 4.29284783e+01 4.75295316e+00 8.13275473e+00
 3.91928454e-01 1.25146907e+00 8.59641239e+00 4.29418692e+01
 4.90655802e-01 1.19799655e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319357707488376
cond(S) = 28.04514673248323
E1 = -688.9209474677538  E_coul = 184.9204116679277
init E= -504.000535799826
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.681136402517934  LUMO = 118.113277923466
  mo_energy =
[-1.21554176e+02 -1.32781035e+01 -7.62033428e+00 -7.62033428e+00
 -7.62033428e+00 -1.65150719e+00 -6.81136403e-01 -6.81136403e-01
 -6.81136403e-01  1.18113278e+02  1.06235941e+03  7.43163643e+03
  3.95520149e+04]
E1 = -706.4045982940848  E_coul = 198.96417513394323
cycle= 1 E= -507.440423160142  delta_E= -3.44  |g|= 0.292  |ddm|= 0.299
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.385254
diis-c [-0.14842048  1.        ]
  HOMO = -0.235993444681801  LUMO = 119.476219656679
  mo_energy =
[-1.20167832e+02 -1.22481030e+01 -6.65039486e+00 -6.65039486e+00
 -6.65039486e+00 -1.16315059e+00 -2.35993445e-01 -2.35993445e-01
 -2.35993445e-01  1.19476220e+02  1.06371156e+03  7.43283100e+03
  3.95530870e+04]
E1 = -706.385291245805  E_coul = 198.94461222415296
cycle= 2 E= -507.440679021652  delta_E= -0.000256  |g|= 0.00356  |ddm|= 0.00834
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00377201
diis-c [-1.38261119e-05 -1.64843474e-03  1.00164843e+00]
  HOMO = -0.236090775379866  LUMO = 119.473550349649
  mo_energy =
[-1.20173474e+02 -1.22487827e+01 -6.65144434e+00 -6.65144434e+00
 -6.65144434e+00 -1.16318714e+00 -2.36090775e-01 -2.36090775e-01
 -2.36090775e-01  1.19473550e+02  1.06370322e+03  7.43281860e+03
  3.95530729e+04]
E1 = -706.3850761031571  E_coul = 198.94439703531918
cycle= 3 E= -507.440679067838  delta_E= -4.62e-08  |g|= 5.59e-05  |ddm|= 9.8e-05
    CPU time for cycle= 3      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=7.48604e-05
diis-c [-1.27272739e-10  3.97663278e-05 -2.03360877e-02  1.02029632e+00]
  HOMO = -0.236091664148968  LUMO = 119.473529413902
  mo_energy =
[-1.20173524e+02 -1.22487891e+01 -6.65145565e+00 -6.65145565e+00
 -6.65145565e+00 -1.16318740e+00 -2.36091664e-01 -2.36091664e-01
 -2.36091664e-01  1.19473529e+02  1.06370317e+03  7.43281854e+03
  3.95530729e+04]
E1 = -706.3850735380515  E_coul = 198.94439447020287
cycle= 4 E= -507.440679067849  delta_E= -1.08e-11  |g|= 1.49e-07  |ddm|= 1.29e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.3850735380515  E_coul = 198.94439447020287
  HOMO = -0.236091659380436  LUMO = 119.473529573402
  mo_energy =
[-1.20173524e+02 -1.22487891e+01 -6.65145560e+00 -6.65145560e+00
 -6.65145560e+00 -1.16318739e+00 -2.36091659e-01 -2.36091659e-01
 -2.36091659e-01  1.19473530e+02  1.06370317e+03  7.43281854e+03
  3.95530729e+04]
E1 = -706.3850735484176  E_coul = 198.94439448056923
Extra cycle  E= -507.440679067848  delta_E= 3.41e-13  |g|= 2.09e-09  |ddm|= 4.24e-09
    CPU time for scf_cycle      0.10 sec, wall time      0.10 sec
exp = [1.81913251e+04 4.53267960e+03 7.35964956e+02 1.62282320e+02
 4.36824807e+01 4.75295316e+00 3.91928454e-01 8.59641239e+00
 4.90655802e-01]
E = -507.44067906784835
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((9, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.5476253398322024e+03,6.8630785798847160e+02,1.5555024230205126e+02,4.2742815896802767e+01,4.7505784169783016e+00,3.9162204394177752e-01,8.5974230426361959e+00,4.9072756124177219e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "7s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:54:52 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  18191.3250628        1
[INPUT] 0    0    [1    /1   ]  4532.67960197        1
[INPUT] 0    0    [1    /1   ]  735.964955726        1
[INPUT] 0    0    [1    /1   ]  162.282320171        1
[INPUT] 0    0    [1    /1   ]  43.6824806537        1
[INPUT] 0    0    [1    /1   ]  4.75295315937        1
[INPUT] 0    0    [1    /1   ]  0.391928454326       1
[INPUT] 1    0    [1    /1   ]  8.59641239192        1
[INPUT] 1    0    [1    /1   ]  0.490655802403       1

nuclear repulsion = 0
number of shells = 9
number of NR pGTOs = 13
number of NR cGTOs = 13
basis = {'Ar': [[0, [18191.32506276687, 1.0]], [0, [4532.679601973663, 1.0]], [0, [735.9649557256803, 1.0]], [0, [162.28232017072926, 1.0]], [0, [43.682480653699756, 1.0]], [0, [4.752953159368165, 1.0]], [0, [0.3919284543260569, 1.0]], [1, [8.596412391924682, 1.0]], [1, [0.49065580240289713, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [18191.32506277]
bas 1, expnt(s) = [4532.67960197]
bas 2, expnt(s) = [735.96495573]
bas 3, expnt(s) = [162.28232017]
bas 4, expnt(s) = [43.68248065]
bas 5, expnt(s) = [4.75295316]
bas 6, expnt(s) = [0.39192845]
bas 7, expnt(s) = [8.59641239]
bas 8, expnt(s) = [0.4906558]
CPU time:       119.25
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  1  1  1  0 38 39  0]
 [ 0  1  1  1  0 40 41  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.81913251e+04 3.95743030e+03 4.53267960e+03 1.39566533e+03
 7.35964956e+02 3.56991500e+02 1.62282320e+02 1.14873124e+02
 4.36824807e+01 4.29284783e+01 4.75295316e+00 8.13275473e+00
 3.91928454e-01 1.25146907e+00 8.59641239e+00 4.29418692e+01
 4.90655802e-01 1.19799655e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319357707488376
cond(S) = 28.04514673248323
E1 = -688.9209474677538  E_coul = 184.9204116679277
init E= -504.000535799826
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.681136402517934  LUMO = 118.113277923466
  mo_energy =
[-1.21554176e+02 -1.32781035e+01 -7.62033428e+00 -7.62033428e+00
 -7.62033428e+00 -1.65150719e+00 -6.81136403e-01 -6.81136403e-01
 -6.81136403e-01  1.18113278e+02  1.06235941e+03  7.43163643e+03
  3.95520149e+04]
E1 = -706.4045982940848  E_coul = 198.96417513394323
cycle= 1 E= -507.440423160142  delta_E= -3.44  |g|= 0.292  |ddm|= 0.299
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.385254
diis-c [-0.14842048  1.        ]
  HOMO = -0.235993444681801  LUMO = 119.476219656679
  mo_energy =
[-1.20167832e+02 -1.22481030e+01 -6.65039486e+00 -6.65039486e+00
 -6.65039486e+00 -1.16315059e+00 -2.35993445e-01 -2.35993445e-01
 -2.35993445e-01  1.19476220e+02  1.06371156e+03  7.43283100e+03
  3.95530870e+04]
E1 = -706.385291245805  E_coul = 198.94461222415296
cycle= 2 E= -507.440679021652  delta_E= -0.000256  |g|= 0.00356  |ddm|= 0.00834
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00377201
diis-c [-1.38261119e-05 -1.64843474e-03  1.00164843e+00]
  HOMO = -0.236090775379866  LUMO = 119.473550349649
  mo_energy =
[-1.20173474e+02 -1.22487827e+01 -6.65144434e+00 -6.65144434e+00
 -6.65144434e+00 -1.16318714e+00 -2.36090775e-01 -2.36090775e-01
 -2.36090775e-01  1.19473550e+02  1.06370322e+03  7.43281860e+03
  3.95530729e+04]
E1 = -706.3850761031571  E_coul = 198.94439703531918
cycle= 3 E= -507.440679067838  delta_E= -4.62e-08  |g|= 5.59e-05  |ddm|= 9.8e-05
    CPU time for cycle= 3      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=7.48604e-05
diis-c [-1.27272739e-10  3.97663278e-05 -2.03360877e-02  1.02029632e+00]
  HOMO = -0.236091664148968  LUMO = 119.473529413902
  mo_energy =
[-1.20173524e+02 -1.22487891e+01 -6.65145565e+00 -6.65145565e+00
 -6.65145565e+00 -1.16318740e+00 -2.36091664e-01 -2.36091664e-01
 -2.36091664e-01  1.19473529e+02  1.06370317e+03  7.43281854e+03
  3.95530729e+04]
E1 = -706.3850735380515  E_coul = 198.94439447020287
cycle= 4 E= -507.440679067849  delta_E= -1.08e-11  |g|= 1.49e-07  |ddm|= 1.29e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.3850735380515  E_coul = 198.94439447020287
  HOMO = -0.236091659380436  LUMO = 119.473529573402
  mo_energy =
[-1.20173524e+02 -1.22487891e+01 -6.65145560e+00 -6.65145560e+00
 -6.65145560e+00 -1.16318739e+00 -2.36091659e-01 -2.36091659e-01
 -2.36091659e-01  1.19473530e+02  1.06370317e+03  7.43281854e+03
  3.95530729e+04]
E1 = -706.3850735484176  E_coul = 198.94439448056923
Extra cycle  E= -507.440679067848  delta_E= 3.41e-13  |g|= 2.09e-09  |ddm|= 4.24e-09
    CPU time for scf_cycle      0.10 sec, wall time      0.10 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 28.04514673248323
E1 = -706.3850735484176  E_coul = 198.94439448056923
init E= -507.440679067848
    CPU time for initialize scf      0.06 sec, wall time      0.06 sec
  HOMO = -0.236091659334977  LUMO = 119.473529574879
  mo_energy =
[-1.20173524e+02 -1.22487891e+01 -6.65145560e+00 -6.65145560e+00
 -6.65145560e+00 -1.16318739e+00 -2.36091659e-01 -2.36091659e-01
 -2.36091659e-01  1.19473530e+02  1.06370317e+03  7.43281854e+03
  3.95530729e+04]
E1 = -706.385073548541  E_coul = 198.9443944806925
cycle= 1 E= -507.440679067848  delta_E= -1.14e-13  |g|= 3.45e-11  |ddm|= 5.44e-11
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -706.385073548541  E_coul = 198.9443944806925
  HOMO = -0.236091659334442  LUMO = 119.473529574895
  mo_energy =
[-1.20173524e+02 -1.22487891e+01 -6.65145560e+00 -6.65145560e+00
 -6.65145560e+00 -1.16318739e+00 -2.36091659e-01 -2.36091659e-01
 -2.36091659e-01  1.19473530e+02  1.06370317e+03  7.43281854e+03
  3.95530729e+04]
E1 = -706.3850735485428  E_coul = 198.94439448069414
Extra cycle  E= -507.440679067849  delta_E= -1.71e-13  |g|= 7.01e-12  |ddm|= 7.97e-13
    CPU time for scf_cycle      0.13 sec, wall time      0.14 sec
exp = [1.81913251e+04 4.53267960e+03 7.35964956e+02 1.62282320e+02
 4.36824807e+01 4.75295316e+00 3.91928454e-01 8.59641239e+00
 4.90655802e-01]
grad_E = [-6.17352898e-06  8.56500256e-05  2.79746215e-05  1.31030204e-06
  9.35688666e-06 -1.45438898e-05 -6.36670988e-05 -8.51040689e-06
 -1.70539669e-05]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((9, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.5476253398322024e+03,6.8630785798847160e+02,1.5555024230205126e+02,4.2742815896802767e+01,4.7505784169783016e+00,3.9162204394177752e-01,8.5974230426361959e+00,4.9072756124177219e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "7s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:54:55 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  18191.320102         1
[INPUT] 0    0    [1    /1   ]  4532.76961319        1
[INPUT] 0    0    [1    /1   ]  735.667005482        1
[INPUT] 0    0    [1    /1   ]  162.233255602        1
[INPUT] 0    0    [1    /1   ]  43.6752305354        1
[INPUT] 0    0    [1    /1   ]  4.75297096849        1
[INPUT] 0    0    [1    /1   ]  0.391931839517       1
[INPUT] 1    0    [1    /1   ]  8.59642685875        1
[INPUT] 1    0    [1    /1   ]  0.490656514778       1

nuclear repulsion = 0
number of shells = 9
number of NR pGTOs = 13
number of NR cGTOs = 13
basis = {'Ar': [[0, [18191.320102023277, 1.0]], [0, [4532.769613187954, 1.0]], [0, [735.667005482061, 1.0]], [0, [162.2332556016159, 1.0]], [0, [43.67523053538931, 1.0]], [0, [4.752970968491354, 1.0]], [0, [0.3919318395174401, 1.0]], [1, [8.596426858751922, 1.0]], [1, [0.4906565147782533, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [18191.32010202]
bas 1, expnt(s) = [4532.76961319]
bas 2, expnt(s) = [735.66700548]
bas 3, expnt(s) = [162.2332556]
bas 4, expnt(s) = [43.67523054]
bas 5, expnt(s) = [4.75297097]
bas 6, expnt(s) = [0.39193184]
bas 7, expnt(s) = [8.59642686]
bas 8, expnt(s) = [0.49065651]
CPU time:       122.45
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  1  1  1  0 38 39  0]
 [ 0  1  1  1  0 40 41  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.81913201e+04 3.95742949e+03 4.53276961e+03 1.39568612e+03
 7.35667005e+02 3.56883100e+02 1.62233256e+02 1.14847074e+02
 4.36752305e+01 4.29231345e+01 4.75297097e+00 8.13277759e+00
 3.91931840e-01 1.25147718e+00 8.59642686e+00 4.29419595e+01
 4.90656515e-01 1.19799872e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.31935697288425
cond(S) = 28.046428837866483
E1 = -688.9212712437105  E_coul = 184.92055450424897
init E= -504.000716739462
    CPU time for initialize scf      0.03 sec, wall time      0.03 sec
  HOMO = -0.681133630594726  LUMO = 118.072217079464
  mo_energy =
[-1.21554174e+02 -1.32780765e+01 -7.62032409e+00 -7.62032409e+00
 -7.62032409e+00 -1.65150441e+00 -6.81133631e-01 -6.81133631e-01
 -6.81133631e-01  1.18072217e+02  1.06192234e+03  7.43060151e+03
  3.95510908e+04]
E1 = -706.4047203158411  E_coul = 198.96429691696267
cycle= 1 E= -507.440423398878  delta_E= -3.44  |g|= 0.292  |ddm|= 0.299
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.385299
diis-c [-0.14845537  1.        ]
  HOMO = -0.235990111600444  LUMO = 119.435124657322
  mo_energy =
[-1.20167838e+02 -1.22480777e+01 -6.65038567e+00 -6.65038567e+00
 -6.65038567e+00 -1.16314625e+00 -2.35990112e-01 -2.35990112e-01
 -2.35990112e-01  1.19435125e+02  1.06327448e+03  7.43179603e+03
  3.95521628e+04]
E1 = -706.3854027805302  E_coul = 198.94472337681205
cycle= 2 E= -507.440679403718  delta_E= -0.000256  |g|= 0.00356  |ddm|= 0.00835
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00377305
diis-c [-1.38345689e-05 -1.64705134e-03  1.00164705e+00]
  HOMO = -0.23608750480626  LUMO = 119.432454462435
  mo_energy =
[-1.20173484e+02 -1.22487578e+01 -6.65143579e+00 -6.65143579e+00
 -6.65143579e+00 -1.16318283e+00 -2.36087505e-01 -2.36087505e-01
 -2.36087505e-01  1.19432454e+02  1.06326614e+03  7.43178362e+03
  3.95521487e+04]
E1 = -706.3851874672513  E_coul = 198.94450801730292
cycle= 3 E= -507.440679449948  delta_E= -4.62e-08  |g|= 5.59e-05  |ddm|= 9.81e-05
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=7.49028e-05
diis-c [-1.27411941e-10  3.97619915e-05 -2.03414696e-02  1.02030171e+00]
  HOMO = -0.236088394507482  LUMO = 119.432433506564
  mo_energy =
[-1.20173534e+02 -1.22487643e+01 -6.65144712e+00 -6.65144712e+00
 -6.65144712e+00 -1.16318308e+00 -2.36088395e-01 -2.36088395e-01
 -2.36088395e-01  1.19432434e+02  1.06326609e+03  7.43178356e+03
  3.95521487e+04]
E1 = -706.3851848990658  E_coul = 198.94450544910742
cycle= 4 E= -507.440679449958  delta_E= -1.01e-11  |g|= 1.49e-07  |ddm|= 1.29e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.3851848990658  E_coul = 198.94450544910742
  HOMO = -0.236088389732277  LUMO = 119.432433666203
  mo_energy =
[-1.20173533e+02 -1.22487642e+01 -6.65144707e+00 -6.65144707e+00
 -6.65144707e+00 -1.16318308e+00 -2.36088390e-01 -2.36088390e-01
 -2.36088390e-01  1.19432434e+02  1.06326609e+03  7.43178356e+03
  3.95521487e+04]
E1 = -706.3851849094473  E_coul = 198.9445054594887
Extra cycle  E= -507.440679449959  delta_E= -1.14e-13  |g|= 2.1e-09  |ddm|= 4.25e-09
    CPU time for scf_cycle      0.11 sec, wall time      0.12 sec
exp = [1.81913201e+04 4.53276961e+03 7.35667005e+02 1.62233256e+02
 4.36752305e+01 4.75297097e+00 3.91931840e-01 8.59642686e+00
 4.90656515e-01]
E = -507.44067944995857
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((9, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.5476253398322024e+03,6.8630785798847160e+02,1.5555024230205126e+02,4.2742815896802767e+01,4.7505784169783016e+00,3.9162204394177752e-01,8.5974230426361959e+00,4.9072756124177219e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "7s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:54:55 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  18191.320102         1
[INPUT] 0    0    [1    /1   ]  4532.76961319        1
[INPUT] 0    0    [1    /1   ]  735.667005482        1
[INPUT] 0    0    [1    /1   ]  162.233255602        1
[INPUT] 0    0    [1    /1   ]  43.6752305354        1
[INPUT] 0    0    [1    /1   ]  4.75297096849        1
[INPUT] 0    0    [1    /1   ]  0.391931839517       1
[INPUT] 1    0    [1    /1   ]  8.59642685875        1
[INPUT] 1    0    [1    /1   ]  0.490656514778       1

nuclear repulsion = 0
number of shells = 9
number of NR pGTOs = 13
number of NR cGTOs = 13
basis = {'Ar': [[0, [18191.320102023277, 1.0]], [0, [4532.769613187954, 1.0]], [0, [735.667005482061, 1.0]], [0, [162.2332556016159, 1.0]], [0, [43.67523053538931, 1.0]], [0, [4.752970968491354, 1.0]], [0, [0.3919318395174401, 1.0]], [1, [8.596426858751922, 1.0]], [1, [0.4906565147782533, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [18191.32010202]
bas 1, expnt(s) = [4532.76961319]
bas 2, expnt(s) = [735.66700548]
bas 3, expnt(s) = [162.2332556]
bas 4, expnt(s) = [43.67523054]
bas 5, expnt(s) = [4.75297097]
bas 6, expnt(s) = [0.39193184]
bas 7, expnt(s) = [8.59642686]
bas 8, expnt(s) = [0.49065651]
CPU time:       123.09
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  1  1  1  0 38 39  0]
 [ 0  1  1  1  0 40 41  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.81913201e+04 3.95742949e+03 4.53276961e+03 1.39568612e+03
 7.35667005e+02 3.56883100e+02 1.62233256e+02 1.14847074e+02
 4.36752305e+01 4.29231345e+01 4.75297097e+00 8.13277759e+00
 3.91931840e-01 1.25147718e+00 8.59642686e+00 4.29419595e+01
 4.90656515e-01 1.19799872e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.31935697288425
cond(S) = 28.046428837866483
E1 = -688.9212712437105  E_coul = 184.92055450424897
init E= -504.000716739462
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.681133630594726  LUMO = 118.072217079464
  mo_energy =
[-1.21554174e+02 -1.32780765e+01 -7.62032409e+00 -7.62032409e+00
 -7.62032409e+00 -1.65150441e+00 -6.81133631e-01 -6.81133631e-01
 -6.81133631e-01  1.18072217e+02  1.06192234e+03  7.43060151e+03
  3.95510908e+04]
E1 = -706.4047203158411  E_coul = 198.96429691696267
cycle= 1 E= -507.440423398878  delta_E= -3.44  |g|= 0.292  |ddm|= 0.299
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.385299
diis-c [-0.14845537  1.        ]
  HOMO = -0.235990111600444  LUMO = 119.435124657322
  mo_energy =
[-1.20167838e+02 -1.22480777e+01 -6.65038567e+00 -6.65038567e+00
 -6.65038567e+00 -1.16314625e+00 -2.35990112e-01 -2.35990112e-01
 -2.35990112e-01  1.19435125e+02  1.06327448e+03  7.43179603e+03
  3.95521628e+04]
E1 = -706.3854027805302  E_coul = 198.94472337681205
cycle= 2 E= -507.440679403718  delta_E= -0.000256  |g|= 0.00356  |ddm|= 0.00835
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00377305
diis-c [-1.38345689e-05 -1.64705134e-03  1.00164705e+00]
  HOMO = -0.23608750480626  LUMO = 119.432454462435
  mo_energy =
[-1.20173484e+02 -1.22487578e+01 -6.65143579e+00 -6.65143579e+00
 -6.65143579e+00 -1.16318283e+00 -2.36087505e-01 -2.36087505e-01
 -2.36087505e-01  1.19432454e+02  1.06326614e+03  7.43178362e+03
  3.95521487e+04]
E1 = -706.3851874672513  E_coul = 198.94450801730292
cycle= 3 E= -507.440679449948  delta_E= -4.62e-08  |g|= 5.59e-05  |ddm|= 9.81e-05
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=7.49028e-05
diis-c [-1.27411941e-10  3.97619915e-05 -2.03414696e-02  1.02030171e+00]
  HOMO = -0.236088394507482  LUMO = 119.432433506564
  mo_energy =
[-1.20173534e+02 -1.22487643e+01 -6.65144712e+00 -6.65144712e+00
 -6.65144712e+00 -1.16318308e+00 -2.36088395e-01 -2.36088395e-01
 -2.36088395e-01  1.19432434e+02  1.06326609e+03  7.43178356e+03
  3.95521487e+04]
E1 = -706.3851848990658  E_coul = 198.94450544910742
cycle= 4 E= -507.440679449958  delta_E= -1.01e-11  |g|= 1.49e-07  |ddm|= 1.29e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.3851848990658  E_coul = 198.94450544910742
  HOMO = -0.236088389732277  LUMO = 119.432433666203
  mo_energy =
[-1.20173533e+02 -1.22487642e+01 -6.65144707e+00 -6.65144707e+00
 -6.65144707e+00 -1.16318308e+00 -2.36088390e-01 -2.36088390e-01
 -2.36088390e-01  1.19432434e+02  1.06326609e+03  7.43178356e+03
  3.95521487e+04]
E1 = -706.3851849094473  E_coul = 198.9445054594887
Extra cycle  E= -507.440679449959  delta_E= -1.14e-13  |g|= 2.1e-09  |ddm|= 4.25e-09
    CPU time for scf_cycle      0.10 sec, wall time      0.10 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 28.046428837866483
E1 = -706.3851849094473  E_coul = 198.9445054594887
init E= -507.440679449959
    CPU time for initialize scf      0.06 sec, wall time      0.06 sec
  HOMO = -0.23608838968674  LUMO = 119.43243366768
  mo_energy =
[-1.20173533e+02 -1.22487642e+01 -6.65144707e+00 -6.65144707e+00
 -6.65144707e+00 -1.16318308e+00 -2.36088390e-01 -2.36088390e-01
 -2.36088390e-01  1.19432434e+02  1.06326609e+03  7.43178356e+03
  3.95521487e+04]
E1 = -706.3851849095715  E_coul = 198.94450545961254
cycle= 1 E= -507.440679449959  delta_E= -4.55e-13  |g|= 3.35e-11  |ddm|= 5.45e-11
    CPU time for cycle= 1      0.01 sec, wall time      0.02 sec
E1 = -706.3851849095715  E_coul = 198.94450545961254
  HOMO = -0.236088389686199  LUMO = 119.432433667696
  mo_energy =
[-1.20173533e+02 -1.22487642e+01 -6.65144707e+00 -6.65144707e+00
 -6.65144707e+00 -1.16318308e+00 -2.36088390e-01 -2.36088390e-01
 -2.36088390e-01  1.19432434e+02  1.06326609e+03  7.43178356e+03
  3.95521487e+04]
E1 = -706.3851849095728  E_coul = 198.94450545961413
Extra cycle  E= -507.440679449959  delta_E= 3.41e-13  |g|= 2.66e-12  |ddm|= 8.12e-13
    CPU time for scf_cycle      0.13 sec, wall time      0.14 sec
exp = [1.81913201e+04 4.53276961e+03 7.35667005e+02 1.62233256e+02
 4.36752305e+01 4.75297097e+00 3.91931840e-01 8.59642686e+00
 4.90656515e-01]
grad_E = [-6.17654130e-06  8.58405265e-05  2.56189252e-05  2.95253179e-06
  2.15064357e-06  7.24950381e-07  1.96063100e-05 -3.12735303e-07
  4.57406935e-06]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((9, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.5476253398322024e+03,6.8630785798847160e+02,1.5555024230205126e+02,4.2742815896802767e+01,4.7505784169783016e+00,3.9162204394177752e-01,8.5974230426361959e+00,4.9072756124177219e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "7s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:54:59 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  18191.3198563        1
[INPUT] 0    0    [1    /1   ]  4532.77410489        1
[INPUT] 0    0    [1    /1   ]  735.651515692        1
[INPUT] 0    0    [1    /1   ]  162.23250789         1
[INPUT] 0    0    [1    /1   ]  43.6751937885        1
[INPUT] 0    0    [1    /1   ]  4.75297033436        1
[INPUT] 0    0    [1    /1   ]  0.391930853915       1
[INPUT] 1    0    [1    /1   ]  8.59642725052        1
[INPUT] 1    0    [1    /1   ]  0.490656507862       1

nuclear repulsion = 0
number of shells = 9
number of NR pGTOs = 13
number of NR cGTOs = 13
basis = {'Ar': [[0, [18191.319856293387, 1.0]], [0, [4532.774104889253, 1.0]], [0, [735.6515156916571, 1.0]], [0, [162.2325078904873, 1.0]], [0, [43.67519378847058, 1.0]], [0, [4.752970334356067, 1.0]], [0, [0.3919308539153189, 1.0]], [1, [8.596427250521465, 1.0]], [1, [0.4906565078617497, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [18191.31985629]
bas 1, expnt(s) = [4532.77410489]
bas 2, expnt(s) = [735.65151569]
bas 3, expnt(s) = [162.23250789]
bas 4, expnt(s) = [43.67519379]
bas 5, expnt(s) = [4.75297033]
bas 6, expnt(s) = [0.39193085]
bas 7, expnt(s) = [8.59642725]
bas 8, expnt(s) = [0.49065651]
CPU time:       126.33
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  1  1  1  0 38 39  0]
 [ 0  1  1  1  0 40 41  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.81913199e+04 3.95742945e+03 4.53277410e+03 1.39568715e+03
 7.35651516e+02 3.56877465e+02 1.62232508e+02 1.14846677e+02
 4.36751938e+01 4.29231074e+01 4.75297033e+00 8.13277677e+00
 3.91930854e-01 1.25147482e+00 8.59642725e+00 4.29419620e+01
 4.90656508e-01 1.19799870e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.31935711967536
cond(S) = 28.046678445529032
E1 = -688.9212642366807  E_coul = 184.9205404708237
init E= -504.000723765857
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.68113409688057  LUMO = 118.071807086375
  mo_energy =
[-1.21554175e+02 -1.32780773e+01 -7.62032529e+00 -7.62032529e+00
 -7.62032529e+00 -1.65150439e+00 -6.81134097e-01 -6.81134097e-01
 -6.81134097e-01  1.18071807e+02  1.06190616e+03  7.43055484e+03
  3.95510488e+04]
E1 = -706.4046997112307  E_coul = 198.96427630378955
cycle= 1 E= -507.440423407441  delta_E= -3.44  |g|= 0.292  |ddm|= 0.299
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.385302
diis-c [-0.14845759  1.        ]
  HOMO = -0.235990697546561  LUMO = 119.434713436694
  mo_energy =
[-1.20167841e+02 -1.22480788e+01 -6.65038724e+00 -6.65038724e+00
 -6.65038724e+00 -1.16314670e+00 -2.35990698e-01 -2.35990698e-01
 -2.35990698e-01  1.19434713e+02  1.06325830e+03  7.43174936e+03
  3.95521208e+04]
E1 = -706.3853820449484  E_coul = 198.94470263106348
cycle= 2 E= -507.440679413885  delta_E= -0.000256  |g|= 0.00356  |ddm|= 0.00835
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00377307
diis-c [-1.38346793e-05 -1.64699724e-03  1.00164700e+00]
  HOMO = -0.236088091445302  LUMO = 119.43204322724
  mo_energy =
[-1.20173486e+02 -1.22487589e+01 -6.65143738e+00 -6.65143738e+00
 -6.65143738e+00 -1.16318328e+00 -2.36088091e-01 -2.36088091e-01
 -2.36088091e-01  1.19432043e+02  1.06324995e+03  7.43173695e+03
  3.95521067e+04]
E1 = -706.385166729747  E_coul = 198.94448726963216
cycle= 3 E= -507.440679460115  delta_E= -4.62e-08  |g|= 5.59e-05  |ddm|= 9.81e-05
    CPU time for cycle= 3      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=7.49033e-05
diis-c [-1.27414703e-10  3.97609286e-05 -2.03415211e-02  1.02030176e+00]
  HOMO = -0.236088981159415  LUMO = 119.432022270985
  mo_energy =
[-1.20173536e+02 -1.22487654e+01 -6.65144870e+00 -6.65144870e+00
 -6.65144870e+00 -1.16318353e+00 -2.36088981e-01 -2.36088981e-01
 -2.36088981e-01  1.19432022e+02  1.06324990e+03  7.43173689e+03
  3.95521066e+04]
E1 = -706.385164161522  E_coul = 198.94448470139668
cycle= 4 E= -507.440679460125  delta_E= -1.05e-11  |g|= 1.49e-07  |ddm|= 1.29e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.385164161522  E_coul = 198.94448470139668
  HOMO = -0.236088976384081  LUMO = 119.432022430629
  mo_energy =
[-1.20173536e+02 -1.22487653e+01 -6.65144865e+00 -6.65144865e+00
 -6.65144865e+00 -1.16318353e+00 -2.36088976e-01 -2.36088976e-01
 -2.36088976e-01  1.19432022e+02  1.06324990e+03  7.43173689e+03
  3.95521066e+04]
E1 = -706.3851641719037  E_coul = 198.94448471177833
Extra cycle  E= -507.440679460125  delta_E= -1.14e-13  |g|= 2.1e-09  |ddm|= 4.25e-09
    CPU time for scf_cycle      0.10 sec, wall time      0.10 sec
exp = [1.81913199e+04 4.53277410e+03 7.35651516e+02 1.62232508e+02
 4.36751938e+01 4.75297033e+00 3.91930854e-01 8.59642725e+00
 4.90656508e-01]
E = -507.4406794601254
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((9, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.5476253398322024e+03,6.8630785798847160e+02,1.5555024230205126e+02,4.2742815896802767e+01,4.7505784169783016e+00,3.9162204394177752e-01,8.5974230426361959e+00,4.9072756124177219e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "7s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:54:59 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  18191.3198563        1
[INPUT] 0    0    [1    /1   ]  4532.77410489        1
[INPUT] 0    0    [1    /1   ]  735.651515692        1
[INPUT] 0    0    [1    /1   ]  162.23250789         1
[INPUT] 0    0    [1    /1   ]  43.6751937885        1
[INPUT] 0    0    [1    /1   ]  4.75297033436        1
[INPUT] 0    0    [1    /1   ]  0.391930853915       1
[INPUT] 1    0    [1    /1   ]  8.59642725052        1
[INPUT] 1    0    [1    /1   ]  0.490656507862       1

nuclear repulsion = 0
number of shells = 9
number of NR pGTOs = 13
number of NR cGTOs = 13
basis = {'Ar': [[0, [18191.319856293387, 1.0]], [0, [4532.774104889253, 1.0]], [0, [735.6515156916571, 1.0]], [0, [162.2325078904873, 1.0]], [0, [43.67519378847058, 1.0]], [0, [4.752970334356067, 1.0]], [0, [0.3919308539153189, 1.0]], [1, [8.596427250521465, 1.0]], [1, [0.4906565078617497, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [18191.31985629]
bas 1, expnt(s) = [4532.77410489]
bas 2, expnt(s) = [735.65151569]
bas 3, expnt(s) = [162.23250789]
bas 4, expnt(s) = [43.67519379]
bas 5, expnt(s) = [4.75297033]
bas 6, expnt(s) = [0.39193085]
bas 7, expnt(s) = [8.59642725]
bas 8, expnt(s) = [0.49065651]
CPU time:       126.96
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  1  1  1  0 38 39  0]
 [ 0  1  1  1  0 40 41  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.81913199e+04 3.95742945e+03 4.53277410e+03 1.39568715e+03
 7.35651516e+02 3.56877465e+02 1.62232508e+02 1.14846677e+02
 4.36751938e+01 4.29231074e+01 4.75297033e+00 8.13277677e+00
 3.91930854e-01 1.25147482e+00 8.59642725e+00 4.29419620e+01
 4.90656508e-01 1.19799870e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.31935711967536
cond(S) = 28.046678445529032
E1 = -688.9212642366807  E_coul = 184.9205404708237
init E= -504.000723765857
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.68113409688057  LUMO = 118.071807086375
  mo_energy =
[-1.21554175e+02 -1.32780773e+01 -7.62032529e+00 -7.62032529e+00
 -7.62032529e+00 -1.65150439e+00 -6.81134097e-01 -6.81134097e-01
 -6.81134097e-01  1.18071807e+02  1.06190616e+03  7.43055484e+03
  3.95510488e+04]
E1 = -706.4046997112307  E_coul = 198.96427630378955
cycle= 1 E= -507.440423407441  delta_E= -3.44  |g|= 0.292  |ddm|= 0.299
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.385302
diis-c [-0.14845759  1.        ]
  HOMO = -0.235990697546561  LUMO = 119.434713436694
  mo_energy =
[-1.20167841e+02 -1.22480788e+01 -6.65038724e+00 -6.65038724e+00
 -6.65038724e+00 -1.16314670e+00 -2.35990698e-01 -2.35990698e-01
 -2.35990698e-01  1.19434713e+02  1.06325830e+03  7.43174936e+03
  3.95521208e+04]
E1 = -706.3853820449484  E_coul = 198.94470263106348
cycle= 2 E= -507.440679413885  delta_E= -0.000256  |g|= 0.00356  |ddm|= 0.00835
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00377307
diis-c [-1.38346793e-05 -1.64699724e-03  1.00164700e+00]
  HOMO = -0.236088091445302  LUMO = 119.43204322724
  mo_energy =
[-1.20173486e+02 -1.22487589e+01 -6.65143738e+00 -6.65143738e+00
 -6.65143738e+00 -1.16318328e+00 -2.36088091e-01 -2.36088091e-01
 -2.36088091e-01  1.19432043e+02  1.06324995e+03  7.43173695e+03
  3.95521067e+04]
E1 = -706.385166729747  E_coul = 198.94448726963216
cycle= 3 E= -507.440679460115  delta_E= -4.62e-08  |g|= 5.59e-05  |ddm|= 9.81e-05
    CPU time for cycle= 3      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=7.49033e-05
diis-c [-1.27414703e-10  3.97609286e-05 -2.03415211e-02  1.02030176e+00]
  HOMO = -0.236088981159415  LUMO = 119.432022270985
  mo_energy =
[-1.20173536e+02 -1.22487654e+01 -6.65144870e+00 -6.65144870e+00
 -6.65144870e+00 -1.16318353e+00 -2.36088981e-01 -2.36088981e-01
 -2.36088981e-01  1.19432022e+02  1.06324990e+03  7.43173689e+03
  3.95521066e+04]
E1 = -706.385164161522  E_coul = 198.94448470139668
cycle= 4 E= -507.440679460125  delta_E= -1.05e-11  |g|= 1.49e-07  |ddm|= 1.29e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.385164161522  E_coul = 198.94448470139668
  HOMO = -0.236088976384081  LUMO = 119.432022430629
  mo_energy =
[-1.20173536e+02 -1.22487653e+01 -6.65144865e+00 -6.65144865e+00
 -6.65144865e+00 -1.16318353e+00 -2.36088976e-01 -2.36088976e-01
 -2.36088976e-01  1.19432022e+02  1.06324990e+03  7.43173689e+03
  3.95521066e+04]
E1 = -706.3851641719037  E_coul = 198.94448471177833
Extra cycle  E= -507.440679460125  delta_E= -1.14e-13  |g|= 2.1e-09  |ddm|= 4.25e-09
    CPU time for scf_cycle      0.09 sec, wall time      0.10 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 28.046678445529032
E1 = -706.3851641719037  E_coul = 198.94448471177833
init E= -507.440679460125
    CPU time for initialize scf      0.06 sec, wall time      0.06 sec
  HOMO = -0.236088976338542  LUMO = 119.432022432106
  mo_energy =
[-1.20173536e+02 -1.22487653e+01 -6.65144865e+00 -6.65144865e+00
 -6.65144865e+00 -1.16318353e+00 -2.36088976e-01 -2.36088976e-01
 -2.36088976e-01  1.19432022e+02  1.06324990e+03  7.43173689e+03
  3.95521066e+04]
E1 = -706.3851641720273  E_coul = 198.944484711902
cycle= 1 E= -507.440679460125  delta_E= 5.68e-14  |g|= 3.47e-11  |ddm|= 5.45e-11
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -706.3851641720273  E_coul = 198.944484711902
  HOMO = -0.236088976338001  LUMO = 119.432022432121
  mo_energy =
[-1.20173536e+02 -1.22487653e+01 -6.65144865e+00 -6.65144865e+00
 -6.65144865e+00 -1.16318353e+00 -2.36088976e-01 -2.36088976e-01
 -2.36088976e-01  1.19432022e+02  1.06324990e+03  7.43173689e+03
  3.95521066e+04]
E1 = -706.3851641720291  E_coul = 198.9444847119037
Extra cycle  E= -507.440679460125  delta_E= -1.14e-13  |g|= 5.47e-12  |ddm|= 8.16e-13
    CPU time for scf_cycle      0.13 sec, wall time      0.14 sec
exp = [1.81913199e+04 4.53277410e+03 7.35651516e+02 1.62232508e+02
 4.36751938e+01 4.75297033e+00 3.91930854e-01 8.59642725e+00
 4.90656508e-01]
grad_E = [-6.17675559e-06  8.58541684e-05  2.53206074e-05  4.27135815e-06
  6.33775378e-07  4.59297613e-07  4.03224476e-06 -1.93848038e-07
  9.78427806e-07]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((9, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.5476253398322024e+03,6.8630785798847160e+02,1.5555024230205126e+02,4.2742815896802767e+01,4.7505784169783016e+00,3.9162204394177752e-01,8.5974230426361959e+00,4.9072756124177219e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "7s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:55:03 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  18191.3193625        1
[INPUT] 0    0    [1    /1   ]  4532.7832209         1
[INPUT] 0    0    [1    /1   ]  735.618970456        1
[INPUT] 0    0    [1    /1   ]  162.231289601        1
[INPUT] 0    0    [1    /1   ]  43.6751822679        1
[INPUT] 0    0    [1    /1   ]  4.75296833143        1
[INPUT] 0    0    [1    /1   ]  0.391928388632       1
[INPUT] 1    0    [1    /1   ]  8.59642963185        1
[INPUT] 1    0    [1    /1   ]  0.490656528453       1

nuclear repulsion = 0
number of shells = 9
number of NR pGTOs = 13
number of NR cGTOs = 13
basis = {'Ar': [[0, [18191.319362464237, 1.0]], [0, [4532.7832209013395, 1.0]], [0, [735.6189704564381, 1.0]], [0, [162.23128960117828, 1.0]], [0, [43.67518226788942, 1.0]], [0, [4.752968331431001, 1.0]], [0, [0.3919283886323447, 1.0]], [1, [8.59642963184834, 1.0]], [1, [0.49065652845260704, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [18191.31936246]
bas 1, expnt(s) = [4532.7832209]
bas 2, expnt(s) = [735.61897046]
bas 3, expnt(s) = [162.2312896]
bas 4, expnt(s) = [43.67518227]
bas 5, expnt(s) = [4.75296833]
bas 6, expnt(s) = [0.39192839]
bas 7, expnt(s) = [8.59642963]
bas 8, expnt(s) = [0.49065653]
CPU time:       130.18
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  1  1  1  0 38 39  0]
 [ 0  1  1  1  0 40 41  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.81913194e+04 3.95742937e+03 4.53278322e+03 1.39568926e+03
 7.35618970e+02 3.56865623e+02 1.62231290e+02 1.14846031e+02
 4.36751823e+01 4.29230989e+01 4.75296833e+00 8.13277420e+00
 3.91928389e-01 1.25146891e+00 8.59642963e+00 4.29419768e+01
 4.90656528e-01 1.19799876e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319357429356515
cond(S) = 28.04723814502279
E1 = -688.9212501366651  E_coul = 184.92051233563313
init E= -504.000737801032
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.68113524213466  LUMO = 118.071279877693
  mo_energy =
[-1.21554176e+02 -1.32780790e+01 -7.62032780e+00 -7.62032780e+00
 -7.62032780e+00 -1.65150430e+00 -6.81135242e-01 -6.81135242e-01
 -6.81135242e-01  1.18071280e+02  1.06187342e+03  7.43045788e+03
  3.95509608e+04]
E1 = -706.4046574194203  E_coul = 198.96423397995267
cycle= 1 E= -507.440423439468  delta_E= -3.44  |g|= 0.292  |ddm|= 0.299
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.385308
diis-c [-0.14846232  1.        ]
  HOMO = -0.235992076006281  LUMO = 119.434183827049
  mo_energy =
[-1.20167844e+02 -1.22480811e+01 -6.65039056e+00 -6.65039056e+00
 -6.65039056e+00 -1.16314775e+00 -2.35992076e-01 -2.35992076e-01
 -2.35992076e-01  1.19434184e+02  1.06322556e+03  7.43165240e+03
  3.95520328e+04]
E1 = -706.3853395507712  E_coul = 198.944660102424
cycle= 2 E= -507.440679448347  delta_E= -0.000256  |g|= 0.00356  |ddm|= 0.00835
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00377308
diis-c [-1.38348608e-05 -1.64688792e-03  1.00164689e+00]
  HOMO = -0.236089470930901  LUMO = 119.431513592137
  mo_energy =
[-1.20173490e+02 -1.22487612e+01 -6.65144070e+00 -6.65144070e+00
 -6.65144070e+00 -1.16318433e+00 -2.36089471e-01 -2.36089471e-01
 -2.36089471e-01  1.19431514e+02  1.06321722e+03  7.43163999e+03
  3.95520187e+04]
E1 = -706.3851242327919  E_coul = 198.94444473821423
cycle= 3 E= -507.440679494578  delta_E= -4.62e-08  |g|= 5.59e-05  |ddm|= 9.81e-05
    CPU time for cycle= 3      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=7.49041e-05
diis-c [-1.27419776e-10  3.97586313e-05 -2.03415888e-02  1.02030183e+00]
  HOMO = -0.236090360665739  LUMO = 119.431492635196
  mo_energy =
[-1.20173540e+02 -1.22487677e+01 -6.65145203e+00 -6.65145203e+00
 -6.65145203e+00 -1.16318458e+00 -2.36090361e-01 -2.36090361e-01
 -2.36090361e-01  1.19431493e+02  1.06321717e+03  7.43163993e+03
  3.95520187e+04]
E1 = -706.3851216645064  E_coul = 198.94444216991803
cycle= 4 E= -507.440679494588  delta_E= -1.07e-11  |g|= 1.49e-07  |ddm|= 1.29e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.3851216645064  E_coul = 198.94444216991803
  HOMO = -0.236090355890165  LUMO = 119.431492794847
  mo_energy =
[-1.20173539e+02 -1.22487676e+01 -6.65145198e+00 -6.65145198e+00
 -6.65145198e+00 -1.16318458e+00 -2.36090356e-01 -2.36090356e-01
 -2.36090356e-01  1.19431493e+02  1.06321717e+03  7.43163993e+03
  3.95520187e+04]
E1 = -706.3851216748888  E_coul = 198.94444218030006
Extra cycle  E= -507.440679494589  delta_E= -3.41e-13  |g|= 2.1e-09  |ddm|= 4.25e-09
    CPU time for scf_cycle      0.10 sec, wall time      0.10 sec
exp = [1.81913194e+04 4.53278322e+03 7.35618970e+02 1.62231290e+02
 4.36751823e+01 4.75296833e+00 3.91928389e-01 8.59642963e+00
 4.90656528e-01]
E = -507.4406794945887
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((9, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.5476253398322024e+03,6.8630785798847160e+02,1.5555024230205126e+02,4.2742815896802767e+01,4.7505784169783016e+00,3.9162204394177752e-01,8.5974230426361959e+00,4.9072756124177219e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "7s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:55:03 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  18191.3193625        1
[INPUT] 0    0    [1    /1   ]  4532.7832209         1
[INPUT] 0    0    [1    /1   ]  735.618970456        1
[INPUT] 0    0    [1    /1   ]  162.231289601        1
[INPUT] 0    0    [1    /1   ]  43.6751822679        1
[INPUT] 0    0    [1    /1   ]  4.75296833143        1
[INPUT] 0    0    [1    /1   ]  0.391928388632       1
[INPUT] 1    0    [1    /1   ]  8.59642963185        1
[INPUT] 1    0    [1    /1   ]  0.490656528453       1

nuclear repulsion = 0
number of shells = 9
number of NR pGTOs = 13
number of NR cGTOs = 13
basis = {'Ar': [[0, [18191.319362464237, 1.0]], [0, [4532.7832209013395, 1.0]], [0, [735.6189704564381, 1.0]], [0, [162.23128960117828, 1.0]], [0, [43.67518226788942, 1.0]], [0, [4.752968331431001, 1.0]], [0, [0.3919283886323447, 1.0]], [1, [8.59642963184834, 1.0]], [1, [0.49065652845260704, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [18191.31936246]
bas 1, expnt(s) = [4532.7832209]
bas 2, expnt(s) = [735.61897046]
bas 3, expnt(s) = [162.2312896]
bas 4, expnt(s) = [43.67518227]
bas 5, expnt(s) = [4.75296833]
bas 6, expnt(s) = [0.39192839]
bas 7, expnt(s) = [8.59642963]
bas 8, expnt(s) = [0.49065653]
CPU time:       130.83
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  1  1  1  0 38 39  0]
 [ 0  1  1  1  0 40 41  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.81913194e+04 3.95742937e+03 4.53278322e+03 1.39568926e+03
 7.35618970e+02 3.56865623e+02 1.62231290e+02 1.14846031e+02
 4.36751823e+01 4.29230989e+01 4.75296833e+00 8.13277420e+00
 3.91928389e-01 1.25146891e+00 8.59642963e+00 4.29419768e+01
 4.90656528e-01 1.19799876e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319357429356515
cond(S) = 28.04723814502279
E1 = -688.9212501366651  E_coul = 184.92051233563313
init E= -504.000737801032
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.68113524213466  LUMO = 118.071279877693
  mo_energy =
[-1.21554176e+02 -1.32780790e+01 -7.62032780e+00 -7.62032780e+00
 -7.62032780e+00 -1.65150430e+00 -6.81135242e-01 -6.81135242e-01
 -6.81135242e-01  1.18071280e+02  1.06187342e+03  7.43045788e+03
  3.95509608e+04]
E1 = -706.4046574194203  E_coul = 198.96423397995267
cycle= 1 E= -507.440423439468  delta_E= -3.44  |g|= 0.292  |ddm|= 0.299
    CPU time for cycle= 1      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.385308
diis-c [-0.14846232  1.        ]
  HOMO = -0.235992076006281  LUMO = 119.434183827049
  mo_energy =
[-1.20167844e+02 -1.22480811e+01 -6.65039056e+00 -6.65039056e+00
 -6.65039056e+00 -1.16314775e+00 -2.35992076e-01 -2.35992076e-01
 -2.35992076e-01  1.19434184e+02  1.06322556e+03  7.43165240e+03
  3.95520328e+04]
E1 = -706.3853395507712  E_coul = 198.944660102424
cycle= 2 E= -507.440679448347  delta_E= -0.000256  |g|= 0.00356  |ddm|= 0.00835
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00377308
diis-c [-1.38348608e-05 -1.64688792e-03  1.00164689e+00]
  HOMO = -0.236089470930901  LUMO = 119.431513592137
  mo_energy =
[-1.20173490e+02 -1.22487612e+01 -6.65144070e+00 -6.65144070e+00
 -6.65144070e+00 -1.16318433e+00 -2.36089471e-01 -2.36089471e-01
 -2.36089471e-01  1.19431514e+02  1.06321722e+03  7.43163999e+03
  3.95520187e+04]
E1 = -706.3851242327919  E_coul = 198.94444473821423
cycle= 3 E= -507.440679494578  delta_E= -4.62e-08  |g|= 5.59e-05  |ddm|= 9.81e-05
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=7.49041e-05
diis-c [-1.27419776e-10  3.97586313e-05 -2.03415888e-02  1.02030183e+00]
  HOMO = -0.236090360665739  LUMO = 119.431492635196
  mo_energy =
[-1.20173540e+02 -1.22487677e+01 -6.65145203e+00 -6.65145203e+00
 -6.65145203e+00 -1.16318458e+00 -2.36090361e-01 -2.36090361e-01
 -2.36090361e-01  1.19431493e+02  1.06321717e+03  7.43163993e+03
  3.95520187e+04]
E1 = -706.3851216645064  E_coul = 198.94444216991803
cycle= 4 E= -507.440679494588  delta_E= -1.07e-11  |g|= 1.49e-07  |ddm|= 1.29e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.3851216645064  E_coul = 198.94444216991803
  HOMO = -0.236090355890165  LUMO = 119.431492794847
  mo_energy =
[-1.20173539e+02 -1.22487676e+01 -6.65145198e+00 -6.65145198e+00
 -6.65145198e+00 -1.16318458e+00 -2.36090356e-01 -2.36090356e-01
 -2.36090356e-01  1.19431493e+02  1.06321717e+03  7.43163993e+03
  3.95520187e+04]
E1 = -706.3851216748888  E_coul = 198.94444218030006
Extra cycle  E= -507.440679494589  delta_E= -3.41e-13  |g|= 2.1e-09  |ddm|= 4.25e-09
    CPU time for scf_cycle      0.10 sec, wall time      0.11 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 28.04723814502279
E1 = -706.3851216748888  E_coul = 198.94444218030006
init E= -507.440679494589
    CPU time for initialize scf      0.06 sec, wall time      0.06 sec
  HOMO = -0.236090355844625  LUMO = 119.431492796325
  mo_energy =
[-1.20173539e+02 -1.22487676e+01 -6.65145197e+00 -6.65145197e+00
 -6.65145197e+00 -1.16318458e+00 -2.36090356e-01 -2.36090356e-01
 -2.36090356e-01  1.19431493e+02  1.06321717e+03  7.43163993e+03
  3.95520187e+04]
E1 = -706.3851216750118  E_coul = 198.94444218042372
cycle= 1 E= -507.440679494588  delta_E= 6.82e-13  |g|= 3.5e-11  |ddm|= 5.45e-11
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -706.3851216750118  E_coul = 198.94444218042372
  HOMO = -0.236090355844088  LUMO = 119.431492796339
  mo_energy =
[-1.20173539e+02 -1.22487676e+01 -6.65145197e+00 -6.65145197e+00
 -6.65145197e+00 -1.16318458e+00 -2.36090356e-01 -2.36090356e-01
 -2.36090356e-01  1.19431493e+02  1.06321717e+03  7.43163993e+03
  3.95520187e+04]
E1 = -706.3851216750137  E_coul = 198.9444421804256
Extra cycle  E= -507.440679494588  delta_E= -5.68e-14  |g|= 6.73e-12  |ddm|= 8.1e-13
    CPU time for scf_cycle      0.13 sec, wall time      0.13 sec
exp = [1.81913194e+04 4.53278322e+03 7.35618970e+02 1.62231290e+02
 4.36751823e+01 4.75296833e+00 3.91928389e-01 8.59642963e+00
 4.90656528e-01]
grad_E = [-6.17721680e-06  8.58835524e-05  2.46594706e-05  7.28584736e-06
 -2.78816700e-06 -5.18332893e-07 -3.49998132e-05  1.28862196e-06
 -7.98437736e-06]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((9, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.5476253398322024e+03,6.8630785798847160e+02,1.5555024230205126e+02,4.2742815896802767e+01,4.7505784169783016e+00,3.9162204394177752e-01,8.5974230426361959e+00,4.9072756124177219e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "7s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:55:06 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  18191.3187279        1
[INPUT] 0    0    [1    /1   ]  4532.79514749        1
[INPUT] 0    0    [1    /1   ]  735.573878595        1
[INPUT] 0    0    [1    /1   ]  162.229626717        1
[INPUT] 0    0    [1    /1   ]  43.6751703862        1
[INPUT] 0    0    [1    /1   ]  4.75296532113        1
[INPUT] 0    0    [1    /1   ]  0.391924874212       1
[INPUT] 1    0    [1    /1   ]  8.59643364968        1
[INPUT] 1    0    [1    /1   ]  0.490656575464       1

nuclear repulsion = 0
number of shells = 9
number of NR pGTOs = 13
number of NR cGTOs = 13
basis = {'Ar': [[0, [18191.318727905244, 1.0]], [0, [4532.795147488934, 1.0]], [0, [735.5738785954982, 1.0]], [0, [162.2296267173752, 1.0]], [0, [43.67517038621815, 1.0]], [0, [4.7529653211339955, 1.0]], [0, [0.39192487421200145, 1.0]], [1, [8.596433649684352, 1.0]], [1, [0.49065657546438196, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [18191.31872791]
bas 1, expnt(s) = [4532.79514749]
bas 2, expnt(s) = [735.5738786]
bas 3, expnt(s) = [162.22962672]
bas 4, expnt(s) = [43.67517039]
bas 5, expnt(s) = [4.75296532]
bas 6, expnt(s) = [0.39192487]
bas 7, expnt(s) = [8.59643365]
bas 8, expnt(s) = [0.49065658]
CPU time:       134.06
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  1  1  1  0 38 39  0]
 [ 0  1  1  1  0 40 41  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.81913187e+04 3.95742927e+03 4.53279515e+03 1.39569201e+03
 7.35573879e+02 3.56849217e+02 1.62229627e+02 1.14845148e+02
 4.36751704e+01 4.29230901e+01 4.75296532e+00 8.13277034e+00
 3.91924874e-01 1.25146050e+00 8.59643365e+00 4.29420019e+01
 4.90656575e-01 1.19799891e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319357847676198
cond(S) = 28.048016779612183
E1 = -688.9212323564  E_coul = 184.9204753059345
init E= -504.000757050465
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.681136862429453  LUMO = 118.070570921179
  mo_energy =
[-1.21554178e+02 -1.32780811e+01 -7.62033116e+00 -7.62033116e+00
 -7.62033116e+00 -1.65150413e+00 -6.81136862e-01 -6.81136862e-01
 -6.81136862e-01  1.18070571e+02  1.06182815e+03  7.43032293e+03
  3.95508370e+04]
E1 = -706.4046009307805  E_coul = 198.96417741662887
cycle= 1 E= -507.440423514152  delta_E= -3.44  |g|= 0.292  |ddm|= 0.299
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.385317
diis-c [-0.14846886  1.        ]
  HOMO = -0.235994002489017  LUMO = 119.433471570164
  mo_energy =
[-1.20167849e+02 -1.22480841e+01 -6.65039502e+00 -6.65039502e+00
 -6.65039502e+00 -1.16314920e+00 -2.35994002e-01 -2.35994002e-01
 -2.35994002e-01  1.19433472e+02  1.06318029e+03  7.43151745e+03
  3.95519090e+04]
E1 = -706.3852827831531  E_coul = 198.9446032567165
cycle= 2 E= -507.440679526437  delta_E= -0.000256  |g|= 0.00356  |ddm|= 0.00835
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00377311
diis-c [-1.38351154e-05 -1.64673721e-03  1.00164674e+00]
  HOMO = -0.236091398834032  LUMO = 119.430801299875
  mo_energy =
[-1.20173495e+02 -1.22487642e+01 -6.65144518e+00 -6.65144518e+00
 -6.65144518e+00 -1.16318578e+00 -2.36091399e-01 -2.36091399e-01
 -2.36091399e-01  1.19430801e+02  1.06317195e+03  7.43150504e+03
  3.95518949e+04]
E1 = -706.3850674613674  E_coul = 198.94438788869985
cycle= 3 E= -507.440679572668  delta_E= -4.62e-08  |g|= 5.59e-05  |ddm|= 9.81e-05
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=7.49051e-05
diis-c [-1.27426800e-10  3.97554369e-05 -2.03416787e-02  1.02030192e+00]
  HOMO = -0.236092288597368  LUMO = 119.430780341989
  mo_energy =
[-1.20173545e+02 -1.22487706e+01 -6.65145650e+00 -6.65145650e+00
 -6.65145650e+00 -1.16318603e+00 -2.36092289e-01 -2.36092289e-01
 -2.36092289e-01  1.19430780e+02  1.06317190e+03  7.43150498e+03
  3.95518948e+04]
E1 = -706.3850648929985  E_coul = 198.9443853203202
cycle= 4 E= -507.440679572678  delta_E= -1.07e-11  |g|= 1.49e-07  |ddm|= 1.29e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.3850648929985  E_coul = 198.9443853203202
  HOMO = -0.236092283821476  LUMO = 119.430780501648
  mo_energy =
[-1.20173544e+02 -1.22487706e+01 -6.65145645e+00 -6.65145645e+00
 -6.65145645e+00 -1.16318603e+00 -2.36092284e-01 -2.36092284e-01
 -2.36092284e-01  1.19430781e+02  1.06317190e+03  7.43150498e+03
  3.95518948e+04]
E1 = -706.385064903381  E_coul = 198.944385330703
Extra cycle  E= -507.440679572678  delta_E= 2.27e-13  |g|= 2.1e-09  |ddm|= 4.25e-09
    CPU time for scf_cycle      0.10 sec, wall time      0.10 sec
exp = [1.81913187e+04 4.53279515e+03 7.35573879e+02 1.62229627e+02
 4.36751704e+01 4.75296532e+00 3.91924874e-01 8.59643365e+00
 4.90656575e-01]
E = -507.44067957267805
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((9, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.5476253398322024e+03,6.8630785798847160e+02,1.5555024230205126e+02,4.2742815896802767e+01,4.7505784169783016e+00,3.9162204394177752e-01,8.5974230426361959e+00,4.9072756124177219e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "7s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:55:07 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  18191.3187279        1
[INPUT] 0    0    [1    /1   ]  4532.79514749        1
[INPUT] 0    0    [1    /1   ]  735.573878595        1
[INPUT] 0    0    [1    /1   ]  162.229626717        1
[INPUT] 0    0    [1    /1   ]  43.6751703862        1
[INPUT] 0    0    [1    /1   ]  4.75296532113        1
[INPUT] 0    0    [1    /1   ]  0.391924874212       1
[INPUT] 1    0    [1    /1   ]  8.59643364968        1
[INPUT] 1    0    [1    /1   ]  0.490656575464       1

nuclear repulsion = 0
number of shells = 9
number of NR pGTOs = 13
number of NR cGTOs = 13
basis = {'Ar': [[0, [18191.318727905244, 1.0]], [0, [4532.795147488934, 1.0]], [0, [735.5738785954982, 1.0]], [0, [162.2296267173752, 1.0]], [0, [43.67517038621815, 1.0]], [0, [4.7529653211339955, 1.0]], [0, [0.39192487421200145, 1.0]], [1, [8.596433649684352, 1.0]], [1, [0.49065657546438196, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [18191.31872791]
bas 1, expnt(s) = [4532.79514749]
bas 2, expnt(s) = [735.5738786]
bas 3, expnt(s) = [162.22962672]
bas 4, expnt(s) = [43.67517039]
bas 5, expnt(s) = [4.75296532]
bas 6, expnt(s) = [0.39192487]
bas 7, expnt(s) = [8.59643365]
bas 8, expnt(s) = [0.49065658]
CPU time:       134.70
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  1  1  1  0 38 39  0]
 [ 0  1  1  1  0 40 41  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.81913187e+04 3.95742927e+03 4.53279515e+03 1.39569201e+03
 7.35573879e+02 3.56849217e+02 1.62229627e+02 1.14845148e+02
 4.36751704e+01 4.29230901e+01 4.75296532e+00 8.13277034e+00
 3.91924874e-01 1.25146050e+00 8.59643365e+00 4.29420019e+01
 4.90656575e-01 1.19799891e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319357847676198
cond(S) = 28.048016779612183
E1 = -688.9212323564  E_coul = 184.9204753059345
init E= -504.000757050465
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.681136862429453  LUMO = 118.070570921179
  mo_energy =
[-1.21554178e+02 -1.32780811e+01 -7.62033116e+00 -7.62033116e+00
 -7.62033116e+00 -1.65150413e+00 -6.81136862e-01 -6.81136862e-01
 -6.81136862e-01  1.18070571e+02  1.06182815e+03  7.43032293e+03
  3.95508370e+04]
E1 = -706.4046009307805  E_coul = 198.96417741662887
cycle= 1 E= -507.440423514152  delta_E= -3.44  |g|= 0.292  |ddm|= 0.299
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.385317
diis-c [-0.14846886  1.        ]
  HOMO = -0.235994002489017  LUMO = 119.433471570164
  mo_energy =
[-1.20167849e+02 -1.22480841e+01 -6.65039502e+00 -6.65039502e+00
 -6.65039502e+00 -1.16314920e+00 -2.35994002e-01 -2.35994002e-01
 -2.35994002e-01  1.19433472e+02  1.06318029e+03  7.43151745e+03
  3.95519090e+04]
E1 = -706.3852827831531  E_coul = 198.9446032567165
cycle= 2 E= -507.440679526437  delta_E= -0.000256  |g|= 0.00356  |ddm|= 0.00835
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00377311
diis-c [-1.38351154e-05 -1.64673721e-03  1.00164674e+00]
  HOMO = -0.236091398834032  LUMO = 119.430801299875
  mo_energy =
[-1.20173495e+02 -1.22487642e+01 -6.65144518e+00 -6.65144518e+00
 -6.65144518e+00 -1.16318578e+00 -2.36091399e-01 -2.36091399e-01
 -2.36091399e-01  1.19430801e+02  1.06317195e+03  7.43150504e+03
  3.95518949e+04]
E1 = -706.3850674613674  E_coul = 198.94438788869985
cycle= 3 E= -507.440679572668  delta_E= -4.62e-08  |g|= 5.59e-05  |ddm|= 9.81e-05
    CPU time for cycle= 3      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=7.49051e-05
diis-c [-1.27426800e-10  3.97554369e-05 -2.03416787e-02  1.02030192e+00]
  HOMO = -0.236092288597368  LUMO = 119.430780341989
  mo_energy =
[-1.20173545e+02 -1.22487706e+01 -6.65145650e+00 -6.65145650e+00
 -6.65145650e+00 -1.16318603e+00 -2.36092289e-01 -2.36092289e-01
 -2.36092289e-01  1.19430780e+02  1.06317190e+03  7.43150498e+03
  3.95518948e+04]
E1 = -706.3850648929985  E_coul = 198.9443853203202
cycle= 4 E= -507.440679572678  delta_E= -1.07e-11  |g|= 1.49e-07  |ddm|= 1.29e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.3850648929985  E_coul = 198.9443853203202
  HOMO = -0.236092283821476  LUMO = 119.430780501648
  mo_energy =
[-1.20173544e+02 -1.22487706e+01 -6.65145645e+00 -6.65145645e+00
 -6.65145645e+00 -1.16318603e+00 -2.36092284e-01 -2.36092284e-01
 -2.36092284e-01  1.19430781e+02  1.06317190e+03  7.43150498e+03
  3.95518948e+04]
E1 = -706.385064903381  E_coul = 198.944385330703
Extra cycle  E= -507.440679572678  delta_E= 2.27e-13  |g|= 2.1e-09  |ddm|= 4.25e-09
    CPU time for scf_cycle      0.09 sec, wall time      0.10 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 28.048016779612183
E1 = -706.385064903381  E_coul = 198.944385330703
init E= -507.440679572678
    CPU time for initialize scf      0.06 sec, wall time      0.06 sec
  HOMO = -0.236092283775932  LUMO = 119.430780503126
  mo_energy =
[-1.20173544e+02 -1.22487706e+01 -6.65145645e+00 -6.65145645e+00
 -6.65145645e+00 -1.16318603e+00 -2.36092284e-01 -2.36092284e-01
 -2.36092284e-01  1.19430781e+02  1.06317190e+03  7.43150498e+03
  3.95518948e+04]
E1 = -706.3850649035047  E_coul = 198.9443853308267
cycle= 1 E= -507.440679572678  delta_E=    0  |g|= 3.46e-11  |ddm|= 5.45e-11
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -706.3850649035047  E_coul = 198.9443853308267
  HOMO = -0.236092283775394  LUMO = 119.430780503141
  mo_energy =
[-1.20173544e+02 -1.22487706e+01 -6.65145645e+00 -6.65145645e+00
 -6.65145645e+00 -1.16318603e+00 -2.36092284e-01 -2.36092284e-01
 -2.36092284e-01  1.19430781e+02  1.06317190e+03  7.43150498e+03
  3.95518948e+04]
E1 = -706.3850649035065  E_coul = 198.9443853308284
Extra cycle  E= -507.440679572678  delta_E= -1.14e-13  |g|= 5.94e-12  |ddm|= 8.1e-13
    CPU time for scf_cycle      0.13 sec, wall time      0.13 sec
exp = [1.81913187e+04 4.53279515e+03 7.35573879e+02 1.62229627e+02
 4.36751704e+01 4.75296532e+00 3.91924874e-01 8.59643365e+00
 4.90656575e-01]
grad_E = [-6.17785592e-06  8.59242914e-05  2.37413695e-05  1.14803188e-05
 -7.55381282e-06 -2.02814531e-06 -9.05612491e-05  3.90850099e-06
 -2.07278082e-05]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((9, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.5476253398322024e+03,6.8630785798847160e+02,1.5555024230205126e+02,4.2742815896802767e+01,4.7505784169783016e+00,3.9162204394177752e-01,8.5974230426361959e+00,4.9072756124177219e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "7s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:55:10 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  18191.3177694        1
[INPUT] 0    0    [1    /1   ]  4532.81378398        1
[INPUT] 0    0    [1    /1   ]  735.496218513        1
[INPUT] 0    0    [1    /1   ]  162.226759869        1
[INPUT] 0    0    [1    /1   ]  43.6751490704        1
[INPUT] 0    0    [1    /1   ]  4.75296003875        1
[INPUT] 0    0    [1    /1   ]  0.391918787245       1
[INPUT] 1    0    [1    /1   ]  8.59644088399        1
[INPUT] 1    0    [1    /1   ]  0.490656664748       1

nuclear repulsion = 0
number of shells = 9
number of NR pGTOs = 13
number of NR cGTOs = 13
basis = {'Ar': [[0, [18191.317769405883, 1.0]], [0, [4532.813783975335, 1.0]], [0, [735.4962185134367, 1.0]], [0, [162.2267598692608, 1.0]], [0, [43.67514907043361, 1.0]], [0, [4.752960038749143, 1.0]], [0, [0.3919187872445259, 1.0]], [1, [8.596440883985005, 1.0]], [1, [0.4906566647476062, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [18191.31776941]
bas 1, expnt(s) = [4532.81378398]
bas 2, expnt(s) = [735.49621851]
bas 3, expnt(s) = [162.22675987]
bas 4, expnt(s) = [43.67514907]
bas 5, expnt(s) = [4.75296004]
bas 6, expnt(s) = [0.39191879]
bas 7, expnt(s) = [8.59644088]
bas 8, expnt(s) = [0.49065666]
CPU time:       137.92
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  1  1  1  0 38 39  0]
 [ 0  1  1  1  0 40 41  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.81913178e+04 3.95742911e+03 4.53281378e+03 1.39569632e+03
 7.35496219e+02 3.56820960e+02 1.62226760e+02 1.14843626e+02
 4.36751491e+01 4.29230744e+01 4.75296004e+00 8.13276356e+00
 3.91918787e-01 1.25144592e+00 8.59644088e+00 4.29420471e+01
 4.90656665e-01 1.19799918e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319358562049914
cond(S) = 28.04936065001041
E1 = -688.9212026036528  E_coul = 184.92041252321164
init E= -504.000790080441
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.681139663229386  LUMO = 118.069345470944
  mo_energy =
[-1.21554180e+02 -1.32780847e+01 -7.62033690e+00 -7.62033690e+00
 -7.62033690e+00 -1.65150383e+00 -6.81139663e-01 -6.81139663e-01
 -6.81139663e-01  1.18069345e+02  1.06175017e+03  7.43008857e+03
  3.95506182e+04]
E1 = -706.4045048133917  E_coul = 198.9640810885392
cycle= 1 E= -507.440423724853  delta_E= -3.44  |g|= 0.292  |ddm|= 0.299
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.385331
diis-c [-0.1484801  1.       ]
  HOMO = -0.235997322193331  LUMO = 119.432240444456
  mo_energy =
[-1.20167857e+02 -1.22480891e+01 -6.65040264e+00 -6.65040264e+00
 -6.65040264e+00 -1.16315170e+00 -2.35997322e-01 -2.35997322e-01
 -2.35997322e-01  1.19432240e+02  1.06310231e+03  7.43128309e+03
  3.95516902e+04]
E1 = -706.3851861826291  E_coul = 198.94450643956552
cycle= 2 E= -507.440679743064  delta_E= -0.000256  |g|= 0.00356  |ddm|= 0.00835
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00377316
diis-c [-1.38355585e-05 -1.64647819e-03  1.00164648e+00]
  HOMO = -0.236094721004789  LUMO = 119.429570112967
  mo_energy =
[-1.20173503e+02 -1.22487692e+01 -6.65145282e+00 -6.65145282e+00
 -6.65145282e+00 -1.16318827e+00 -2.36094721e-01 -2.36094721e-01
 -2.36094721e-01  1.19429570e+02  1.06309397e+03  7.43127068e+03
  3.95516761e+04]
E1 = -706.3849708542504  E_coul = 198.9442910649545
cycle= 3 E= -507.440679789296  delta_E= -4.62e-08  |g|= 5.59e-05  |ddm|= 9.81e-05
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=7.49069e-05
diis-c [-1.27438989e-10  3.97498930e-05 -2.03418314e-02  1.02030208e+00]
  HOMO = -0.236095610817383  LUMO = 119.429549153452
  mo_energy =
[-1.20173553e+02 -1.22487757e+01 -6.65146415e+00 -6.65146415e+00
 -6.65146415e+00 -1.16318853e+00 -2.36095611e-01 -2.36095611e-01
 -2.36095611e-01  1.19429549e+02  1.06309391e+03  7.43127062e+03
  3.95516761e+04]
E1 = -706.3849682857372  E_coul = 198.94428849643103
cycle= 4 E= -507.440679789306  delta_E= -1.03e-11  |g|= 1.49e-07  |ddm|= 1.29e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.3849682857372  E_coul = 198.94428849643103
  HOMO = -0.236095606040934  LUMO = 119.429549313129
  mo_energy =
[-1.20173552e+02 -1.22487756e+01 -6.65146410e+00 -6.65146410e+00
 -6.65146410e+00 -1.16318852e+00 -2.36095606e-01 -2.36095606e-01
 -2.36095606e-01  1.19429549e+02  1.06309392e+03  7.43127062e+03
  3.95516761e+04]
E1 = -706.3849682961206  E_coul = 198.94428850681473
Extra cycle  E= -507.440679789306  delta_E= 2.27e-13  |g|= 2.1e-09  |ddm|= 4.25e-09
    CPU time for scf_cycle      0.10 sec, wall time      0.10 sec
exp = [1.81913178e+04 4.53281378e+03 7.35496219e+02 1.62226760e+02
 4.36751491e+01 4.75296004e+00 3.91918787e-01 8.59644088e+00
 4.90656665e-01]
E = -507.44067978930593
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((9, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.5476253398322024e+03,6.8630785798847160e+02,1.5555024230205126e+02,4.2742815896802767e+01,4.7505784169783016e+00,3.9162204394177752e-01,8.5974230426361959e+00,4.9072756124177219e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "7s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:55:11 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  18191.3177694        1
[INPUT] 0    0    [1    /1   ]  4532.81378398        1
[INPUT] 0    0    [1    /1   ]  735.496218513        1
[INPUT] 0    0    [1    /1   ]  162.226759869        1
[INPUT] 0    0    [1    /1   ]  43.6751490704        1
[INPUT] 0    0    [1    /1   ]  4.75296003875        1
[INPUT] 0    0    [1    /1   ]  0.391918787245       1
[INPUT] 1    0    [1    /1   ]  8.59644088399        1
[INPUT] 1    0    [1    /1   ]  0.490656664748       1

nuclear repulsion = 0
number of shells = 9
number of NR pGTOs = 13
number of NR cGTOs = 13
basis = {'Ar': [[0, [18191.317769405883, 1.0]], [0, [4532.813783975335, 1.0]], [0, [735.4962185134367, 1.0]], [0, [162.2267598692608, 1.0]], [0, [43.67514907043361, 1.0]], [0, [4.752960038749143, 1.0]], [0, [0.3919187872445259, 1.0]], [1, [8.596440883985005, 1.0]], [1, [0.4906566647476062, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [18191.31776941]
bas 1, expnt(s) = [4532.81378398]
bas 2, expnt(s) = [735.49621851]
bas 3, expnt(s) = [162.22675987]
bas 4, expnt(s) = [43.67514907]
bas 5, expnt(s) = [4.75296004]
bas 6, expnt(s) = [0.39191879]
bas 7, expnt(s) = [8.59644088]
bas 8, expnt(s) = [0.49065666]
CPU time:       138.58
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  1  1  1  0 38 39  0]
 [ 0  1  1  1  0 40 41  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.81913178e+04 3.95742911e+03 4.53281378e+03 1.39569632e+03
 7.35496219e+02 3.56820960e+02 1.62226760e+02 1.14843626e+02
 4.36751491e+01 4.29230744e+01 4.75296004e+00 8.13276356e+00
 3.91918787e-01 1.25144592e+00 8.59644088e+00 4.29420471e+01
 4.90656665e-01 1.19799918e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319358562049914
cond(S) = 28.04936065001041
E1 = -688.9212026036528  E_coul = 184.92041252321164
init E= -504.000790080441
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.681139663229386  LUMO = 118.069345470944
  mo_energy =
[-1.21554180e+02 -1.32780847e+01 -7.62033690e+00 -7.62033690e+00
 -7.62033690e+00 -1.65150383e+00 -6.81139663e-01 -6.81139663e-01
 -6.81139663e-01  1.18069345e+02  1.06175017e+03  7.43008857e+03
  3.95506182e+04]
E1 = -706.4045048133917  E_coul = 198.9640810885392
cycle= 1 E= -507.440423724853  delta_E= -3.44  |g|= 0.292  |ddm|= 0.299
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.385331
diis-c [-0.1484801  1.       ]
  HOMO = -0.235997322193331  LUMO = 119.432240444456
  mo_energy =
[-1.20167857e+02 -1.22480891e+01 -6.65040264e+00 -6.65040264e+00
 -6.65040264e+00 -1.16315170e+00 -2.35997322e-01 -2.35997322e-01
 -2.35997322e-01  1.19432240e+02  1.06310231e+03  7.43128309e+03
  3.95516902e+04]
E1 = -706.3851861826291  E_coul = 198.94450643956552
cycle= 2 E= -507.440679743064  delta_E= -0.000256  |g|= 0.00356  |ddm|= 0.00835
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00377316
diis-c [-1.38355585e-05 -1.64647819e-03  1.00164648e+00]
  HOMO = -0.236094721004789  LUMO = 119.429570112967
  mo_energy =
[-1.20173503e+02 -1.22487692e+01 -6.65145282e+00 -6.65145282e+00
 -6.65145282e+00 -1.16318827e+00 -2.36094721e-01 -2.36094721e-01
 -2.36094721e-01  1.19429570e+02  1.06309397e+03  7.43127068e+03
  3.95516761e+04]
E1 = -706.3849708542504  E_coul = 198.9442910649545
cycle= 3 E= -507.440679789296  delta_E= -4.62e-08  |g|= 5.59e-05  |ddm|= 9.81e-05
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=7.49069e-05
diis-c [-1.27438989e-10  3.97498930e-05 -2.03418314e-02  1.02030208e+00]
  HOMO = -0.236095610817383  LUMO = 119.429549153452
  mo_energy =
[-1.20173553e+02 -1.22487757e+01 -6.65146415e+00 -6.65146415e+00
 -6.65146415e+00 -1.16318853e+00 -2.36095611e-01 -2.36095611e-01
 -2.36095611e-01  1.19429549e+02  1.06309391e+03  7.43127062e+03
  3.95516761e+04]
E1 = -706.3849682857372  E_coul = 198.94428849643103
cycle= 4 E= -507.440679789306  delta_E= -1.03e-11  |g|= 1.49e-07  |ddm|= 1.29e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.3849682857372  E_coul = 198.94428849643103
  HOMO = -0.236095606040934  LUMO = 119.429549313129
  mo_energy =
[-1.20173552e+02 -1.22487756e+01 -6.65146410e+00 -6.65146410e+00
 -6.65146410e+00 -1.16318852e+00 -2.36095606e-01 -2.36095606e-01
 -2.36095606e-01  1.19429549e+02  1.06309392e+03  7.43127062e+03
  3.95516761e+04]
E1 = -706.3849682961206  E_coul = 198.94428850681473
Extra cycle  E= -507.440679789306  delta_E= 2.27e-13  |g|= 2.1e-09  |ddm|= 4.25e-09
    CPU time for scf_cycle      0.10 sec, wall time      0.10 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 28.04936065001041
E1 = -706.3849682961206  E_coul = 198.94428850681473
init E= -507.440679789306
    CPU time for initialize scf      0.06 sec, wall time      0.06 sec
  HOMO = -0.236095605995392  LUMO = 119.429549314606
  mo_energy =
[-1.20173552e+02 -1.22487756e+01 -6.65146410e+00 -6.65146410e+00
 -6.65146410e+00 -1.16318852e+00 -2.36095606e-01 -2.36095606e-01
 -2.36095606e-01  1.19429549e+02  1.06309392e+03  7.43127062e+03
  3.95516761e+04]
E1 = -706.3849682962446  E_coul = 198.94428850693842
cycle= 1 E= -507.440679789306  delta_E= -2.27e-13  |g|= 3.46e-11  |ddm|= 5.45e-11
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -706.3849682962446  E_coul = 198.94428850693842
  HOMO = -0.23609560599485  LUMO = 119.429549314622
  mo_energy =
[-1.20173552e+02 -1.22487756e+01 -6.65146410e+00 -6.65146410e+00
 -6.65146410e+00 -1.16318852e+00 -2.36095606e-01 -2.36095606e-01
 -2.36095606e-01  1.19429549e+02  1.06309392e+03  7.43127062e+03
  3.95516761e+04]
E1 = -706.3849682962461  E_coul = 198.94428850694018
Extra cycle  E= -507.440679789306  delta_E= 2.27e-13  |g|= 7.19e-12  |ddm|= 8e-13
    CPU time for scf_cycle      0.13 sec, wall time      0.13 sec
exp = [1.81913178e+04 4.53281378e+03 7.35496219e+02 1.62226760e+02
 4.36751491e+01 4.75296004e+00 3.91918787e-01 8.59644088e+00
 4.90656665e-01]
grad_E = [-6.17895464e-06  8.59943760e-05  2.21617457e-05  1.86985609e-05
 -1.57588266e-05 -4.69490927e-06 -1.86750814e-04  8.66849700e-06
 -4.27838089e-05]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((9, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.5476253398322024e+03,6.8630785798847160e+02,1.5555024230205126e+02,4.2742815896802767e+01,4.7505784169783016e+00,3.9162204394177752e-01,8.5974230426361959e+00,4.9072756124177219e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "7s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:55:14 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  18191.3165965        1
[INPUT] 0    0    [1    /1   ]  4532.83841631        1
[INPUT] 0    0    [1    /1   ]  735.373122359        1
[INPUT] 0    0    [1    /1   ]  162.222202422        1
[INPUT] 0    0    [1    /1   ]  43.6751127166        1
[INPUT] 0    0    [1    /1   ]  4.75295163689        1
[INPUT] 0    0    [1    /1   ]  0.391909140479       1
[INPUT] 1    0    [1    /1   ]  8.59645246467        1
[INPUT] 1    0    [1    /1   ]  0.490656809573       1

nuclear repulsion = 0
number of shells = 9
number of NR pGTOs = 13
number of NR cGTOs = 13
basis = {'Ar': [[0, [18191.316596452125, 1.0]], [0, [4532.838416306834, 1.0]], [0, [735.3731223593539, 1.0]], [0, [162.22220242180066, 1.0]], [0, [43.67511271663805, 1.0]], [0, [4.752951636890832, 1.0]], [0, [0.391909140479323, 1.0]], [1, [8.596452464668747, 1.0]], [1, [0.4906568095726389, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [18191.31659645]
bas 1, expnt(s) = [4532.83841631]
bas 2, expnt(s) = [735.37312236]
bas 3, expnt(s) = [162.22220242]
bas 4, expnt(s) = [43.67511272]
bas 5, expnt(s) = [4.75295164]
bas 6, expnt(s) = [0.39190914]
bas 7, expnt(s) = [8.59645246]
bas 8, expnt(s) = [0.49065681]
CPU time:       141.83
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  1  1  1  0 38 39  0]
 [ 0  1  1  1  0 40 41  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.81913166e+04 3.95742892e+03 4.53283842e+03 1.39570201e+03
 7.35373122e+02 3.56776170e+02 1.62222202e+02 1.14841206e+02
 4.36751127e+01 4.29230476e+01 4.75295164e+00 8.13275278e+00
 3.91909140e-01 1.25142282e+00 8.59645246e+00 4.29421194e+01
 4.90656810e-01 1.19799962e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319359689708755
cond(S) = 28.051498246415395
E1 = -688.9211558584115  E_coul = 184.92031358303802
init E= -504.000842275373
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.681144099830424  LUMO = 118.06738858345
  mo_energy =
[-1.21554183e+02 -1.32780904e+01 -7.62034596e+00 -7.62034596e+00
 -7.62034596e+00 -1.65150335e+00 -6.81144100e-01 -6.81144100e-01
 -6.81144100e-01  1.18067389e+02  1.06162650e+03  7.42971206e+03
  3.95502572e+04]
E1 = -706.4043533733928  E_coul = 198.96392910292164
cycle= 1 E= -507.440424270471  delta_E= -3.44  |g|= 0.292  |ddm|= 0.299
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.385354
diis-c [-0.14849785  1.        ]
  HOMO = -0.236002576359923  LUMO = 119.430274569872
  mo_energy =
[-1.20167870e+02 -1.22480970e+01 -6.65041466e+00 -6.65041466e+00
 -6.65041466e+00 -1.16315564e+00 -2.36002576e-01 -2.36002576e-01
 -2.36002576e-01  1.19430275e+02  1.06297863e+03  7.43090658e+03
  3.95513292e+04]
E1 = -706.3850339730352  E_coul = 198.94435367489245
cycle= 2 E= -507.440680298143  delta_E= -0.000256  |g|= 0.00356  |ddm|= 0.00835
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00377323
diis-c [-1.38362661e-05 -1.64606847e-03  1.00164607e+00]
  HOMO = -0.236099979107021  LUMO = 119.427604141134
  mo_energy =
[-1.20173515e+02 -1.22487771e+01 -6.65146489e+00 -6.65146489e+00
 -6.65146489e+00 -1.16319222e+00 -2.36099979e-01 -2.36099979e-01
 -2.36099979e-01  1.19427604e+02  1.06297029e+03  7.43089417e+03
  3.95513151e+04]
E1 = -706.384818634141  E_coul = 198.9441382897645
cycle= 3 E= -507.440680344376  delta_E= -4.62e-08  |g|= 5.59e-05  |ddm|= 9.81e-05
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=7.49098e-05
diis-c [-1.27458378e-10  3.97410584e-05 -2.03420711e-02  1.02030233e+00]
  HOMO = -0.236100868997945  LUMO = 119.427583179037
  mo_energy =
[-1.20173565e+02 -1.22487836e+01 -6.65147622e+00 -6.65147622e+00
 -6.65147622e+00 -1.16319247e+00 -2.36100869e-01 -2.36100869e-01
 -2.36100869e-01  1.19427583e+02  1.06297024e+03  7.43089411e+03
  3.95513150e+04]
E1 = -706.3848160653979  E_coul = 198.94413572101138
cycle= 4 E= -507.440680344387  delta_E= -1.01e-11  |g|= 1.49e-07  |ddm|= 1.29e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.3848160653979  E_coul = 198.94413572101138
  HOMO = -0.236100864220618  LUMO = 119.42758333874
  mo_energy =
[-1.20173565e+02 -1.22487836e+01 -6.65147617e+00 -6.65147617e+00
 -6.65147617e+00 -1.16319247e+00 -2.36100864e-01 -2.36100864e-01
 -2.36100864e-01  1.19427583e+02  1.06297024e+03  7.43089411e+03
  3.95513150e+04]
E1 = -706.3848160757835  E_coul = 198.94413573139693
Extra cycle  E= -507.440680344387  delta_E= -5.68e-14  |g|= 2.1e-09  |ddm|= 4.25e-09
    CPU time for scf_cycle      0.10 sec, wall time      0.11 sec
exp = [1.81913166e+04 4.53283842e+03 7.35373122e+02 1.62222202e+02
 4.36751127e+01 4.75295164e+00 3.91909140e-01 8.59645246e+00
 4.90656810e-01]
E = -507.4406803443866
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((9, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.5476253398322024e+03,6.8630785798847160e+02,1.5555024230205126e+02,4.2742815896802767e+01,4.7505784169783016e+00,3.9162204394177752e-01,8.5974230426361959e+00,4.9072756124177219e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "7s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:55:15 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  18191.3165965        1
[INPUT] 0    0    [1    /1   ]  4532.83841631        1
[INPUT] 0    0    [1    /1   ]  735.373122359        1
[INPUT] 0    0    [1    /1   ]  162.222202422        1
[INPUT] 0    0    [1    /1   ]  43.6751127166        1
[INPUT] 0    0    [1    /1   ]  4.75295163689        1
[INPUT] 0    0    [1    /1   ]  0.391909140479       1
[INPUT] 1    0    [1    /1   ]  8.59645246467        1
[INPUT] 1    0    [1    /1   ]  0.490656809573       1

nuclear repulsion = 0
number of shells = 9
number of NR pGTOs = 13
number of NR cGTOs = 13
basis = {'Ar': [[0, [18191.316596452125, 1.0]], [0, [4532.838416306834, 1.0]], [0, [735.3731223593539, 1.0]], [0, [162.22220242180066, 1.0]], [0, [43.67511271663805, 1.0]], [0, [4.752951636890832, 1.0]], [0, [0.391909140479323, 1.0]], [1, [8.596452464668747, 1.0]], [1, [0.4906568095726389, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [18191.31659645]
bas 1, expnt(s) = [4532.83841631]
bas 2, expnt(s) = [735.37312236]
bas 3, expnt(s) = [162.22220242]
bas 4, expnt(s) = [43.67511272]
bas 5, expnt(s) = [4.75295164]
bas 6, expnt(s) = [0.39190914]
bas 7, expnt(s) = [8.59645246]
bas 8, expnt(s) = [0.49065681]
CPU time:       142.58
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  1  1  1  0 38 39  0]
 [ 0  1  1  1  0 40 41  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.81913166e+04 3.95742892e+03 4.53283842e+03 1.39570201e+03
 7.35373122e+02 3.56776170e+02 1.62222202e+02 1.14841206e+02
 4.36751127e+01 4.29230476e+01 4.75295164e+00 8.13275278e+00
 3.91909140e-01 1.25142282e+00 8.59645246e+00 4.29421194e+01
 4.90656810e-01 1.19799962e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319359689708755
cond(S) = 28.051498246415395
E1 = -688.9211558584115  E_coul = 184.92031358303802
init E= -504.000842275373
    CPU time for initialize scf      0.03 sec, wall time      0.06 sec
  HOMO = -0.681144099830424  LUMO = 118.06738858345
  mo_energy =
[-1.21554183e+02 -1.32780904e+01 -7.62034596e+00 -7.62034596e+00
 -7.62034596e+00 -1.65150335e+00 -6.81144100e-01 -6.81144100e-01
 -6.81144100e-01  1.18067389e+02  1.06162650e+03  7.42971206e+03
  3.95502572e+04]
E1 = -706.4043533733928  E_coul = 198.96392910292164
cycle= 1 E= -507.440424270471  delta_E= -3.44  |g|= 0.292  |ddm|= 0.299
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.385354
diis-c [-0.14849785  1.        ]
  HOMO = -0.236002576359923  LUMO = 119.430274569872
  mo_energy =
[-1.20167870e+02 -1.22480970e+01 -6.65041466e+00 -6.65041466e+00
 -6.65041466e+00 -1.16315564e+00 -2.36002576e-01 -2.36002576e-01
 -2.36002576e-01  1.19430275e+02  1.06297863e+03  7.43090658e+03
  3.95513292e+04]
E1 = -706.3850339730352  E_coul = 198.94435367489245
cycle= 2 E= -507.440680298143  delta_E= -0.000256  |g|= 0.00356  |ddm|= 0.00835
    CPU time for cycle= 2      0.02 sec, wall time      0.03 sec
diis-norm(errvec)=0.00377323
diis-c [-1.38362661e-05 -1.64606847e-03  1.00164607e+00]
  HOMO = -0.236099979107021  LUMO = 119.427604141134
  mo_energy =
[-1.20173515e+02 -1.22487771e+01 -6.65146489e+00 -6.65146489e+00
 -6.65146489e+00 -1.16319222e+00 -2.36099979e-01 -2.36099979e-01
 -2.36099979e-01  1.19427604e+02  1.06297029e+03  7.43089417e+03
  3.95513151e+04]
E1 = -706.384818634141  E_coul = 198.9441382897645
cycle= 3 E= -507.440680344376  delta_E= -4.62e-08  |g|= 5.59e-05  |ddm|= 9.81e-05
    CPU time for cycle= 3      0.02 sec, wall time      0.03 sec
diis-norm(errvec)=7.49098e-05
diis-c [-1.27458378e-10  3.97410584e-05 -2.03420711e-02  1.02030233e+00]
  HOMO = -0.236100868997945  LUMO = 119.427583179037
  mo_energy =
[-1.20173565e+02 -1.22487836e+01 -6.65147622e+00 -6.65147622e+00
 -6.65147622e+00 -1.16319247e+00 -2.36100869e-01 -2.36100869e-01
 -2.36100869e-01  1.19427583e+02  1.06297024e+03  7.43089411e+03
  3.95513150e+04]
E1 = -706.3848160653979  E_coul = 198.94413572101138
cycle= 4 E= -507.440680344387  delta_E= -1.01e-11  |g|= 1.49e-07  |ddm|= 1.29e-06
    CPU time for cycle= 4      0.03 sec, wall time      0.03 sec
E1 = -706.3848160653979  E_coul = 198.94413572101138
  HOMO = -0.236100864220618  LUMO = 119.42758333874
  mo_energy =
[-1.20173565e+02 -1.22487836e+01 -6.65147617e+00 -6.65147617e+00
 -6.65147617e+00 -1.16319247e+00 -2.36100864e-01 -2.36100864e-01
 -2.36100864e-01  1.19427583e+02  1.06297024e+03  7.43089411e+03
  3.95513150e+04]
E1 = -706.3848160757835  E_coul = 198.94413573139693
Extra cycle  E= -507.440680344387  delta_E= -5.68e-14  |g|= 2.1e-09  |ddm|= 4.25e-09
    CPU time for scf_cycle      0.15 sec, wall time      0.18 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 28.051498246415395
E1 = -706.3848160757835  E_coul = 198.94413573139693
init E= -507.440680344387
    CPU time for initialize scf      0.08 sec, wall time      0.12 sec
  HOMO = -0.236100864175062  LUMO = 119.427583340217
  mo_energy =
[-1.20173565e+02 -1.22487836e+01 -6.65147617e+00 -6.65147617e+00
 -6.65147617e+00 -1.16319247e+00 -2.36100864e-01 -2.36100864e-01
 -2.36100864e-01  1.19427583e+02  1.06297024e+03  7.43089411e+03
  3.95513150e+04]
E1 = -706.3848160759077  E_coul = 198.9441357315209
cycle= 1 E= -507.440680344387  delta_E= -2.27e-13  |g|= 3.64e-11  |ddm|= 5.45e-11
    CPU time for cycle= 1      0.02 sec, wall time      0.02 sec
E1 = -706.3848160759077  E_coul = 198.9441357315209
  HOMO = -0.236100864174518  LUMO = 119.427583340232
  mo_energy =
[-1.20173565e+02 -1.22487836e+01 -6.65147617e+00 -6.65147617e+00
 -6.65147617e+00 -1.16319247e+00 -2.36100864e-01 -2.36100864e-01
 -2.36100864e-01  1.19427583e+02  1.06297024e+03  7.43089411e+03
  3.95513150e+04]
E1 = -706.384816075909  E_coul = 198.9441357315225
Extra cycle  E= -507.440680344387  delta_E= 2.27e-13  |g|= 1.16e-11  |ddm|= 8.17e-13
    CPU time for scf_cycle      0.20 sec, wall time      0.30 sec
exp = [1.81913166e+04 4.53283842e+03 7.35373122e+02 1.62222202e+02
 4.36751127e+01 4.75295164e+00 3.91909140e-01 8.59645246e+00
 4.90656810e-01]
grad_E = [-6.18069079e-06  8.61052477e-05  1.96627642e-05  3.01183547e-05
 -2.87415442e-05 -8.94328376e-06 -3.39176220e-04  1.63047986e-05
 -7.77322667e-05]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((9, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.5476253398322024e+03,6.8630785798847160e+02,1.5555024230205126e+02,4.2742815896802767e+01,4.7505784169783016e+00,3.9162204394177752e-01,8.5974230426361959e+00,4.9072756124177219e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "7s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:55:19 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  18191.3155841        1
[INPUT] 0    0    [1    /1   ]  4532.86588855        1
[INPUT] 0    0    [1    /1   ]  735.171414313        1
[INPUT] 0    0    [1    /1   ]  162.21469904         1
[INPUT] 0    0    [1    /1   ]  43.6750466306        1
[INPUT] 0    0    [1    /1   ]  4.75293788962        1
[INPUT] 0    0    [1    /1   ]  0.391893375103       1
[INPUT] 1    0    [1    /1   ]  8.59647144217        1
[INPUT] 1    0    [1    /1   ]  0.490657047808       1

nuclear repulsion = 0
number of shells = 9
number of NR pGTOs = 13
number of NR cGTOs = 13
basis = {'Ar': [[0, [18191.315584113625, 1.0]], [0, [4532.865888550027, 1.0]], [0, [735.1714143133081, 1.0]], [0, [162.21469904038494, 1.0]], [0, [43.675046630625694, 1.0]], [0, [4.752937889616688, 1.0]], [0, [0.3918933751027764, 1.0]], [1, [8.596471442172552, 1.0]], [1, [0.4906570478078554, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [18191.31558411]
bas 1, expnt(s) = [4532.86588855]
bas 2, expnt(s) = [735.17141431]
bas 3, expnt(s) = [162.21469904]
bas 4, expnt(s) = [43.67504663]
bas 5, expnt(s) = [4.75293789]
bas 6, expnt(s) = [0.39189338]
bas 7, expnt(s) = [8.59647144]
bas 8, expnt(s) = [0.49065705]
CPU time:       145.99
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  1  1  1  0 38 39  0]
 [ 0  1  1  1  0 40 41  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.81913156e+04 3.95742876e+03 4.53286589e+03 1.39570835e+03
 7.35171414e+02 3.56702771e+02 1.62214699e+02 1.14837222e+02
 4.36750466e+01 4.29229989e+01 4.75293789e+00 8.13273514e+00
 3.91893375e-01 1.25138506e+00 8.59647144e+00 4.29422379e+01
 4.90657048e-01 1.19800035e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319361529930696
cond(S) = 28.05502088660733
E1 = -688.9210795716727  E_coul = 184.92015211918473
init E= -504.000927452488
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.681151349877969  LUMO = 118.064144620046
  mo_energy =
[-1.21554189e+02 -1.32780997e+01 -7.62036075e+00 -7.62036075e+00
 -7.62036075e+00 -1.65150256e+00 -6.81151350e-01 -6.81151350e-01
 -6.81151350e-01  1.18064145e+02  1.06142368e+03  7.42908187e+03
  3.95496282e+04]
E1 = -706.4041067197588  E_coul = 198.96368099916978
cycle= 1 E= -507.440425720589  delta_E= -3.44  |g|= 0.292  |ddm|= 0.299
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.385392
diis-c [-0.14852677  1.        ]
  HOMO = -0.236011160286301  LUMO = 119.427015899149
  mo_energy =
[-1.20167890e+02 -1.22481100e+01 -6.65043430e+00 -6.65043430e+00
 -6.65043430e+00 -1.16316209e+00 -2.36011160e-01 -2.36011160e-01
 -2.36011160e-01  1.19427016e+02  1.06277581e+03  7.43027639e+03
  3.95507001e+04]
E1 = -706.3847860501505  E_coul = 198.94410428625747
cycle= 2 E= -507.440681763893  delta_E= -0.000256  |g|= 0.00356  |ddm|= 0.00835
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00377335
diis-c [-1.38374364e-05 -1.64539928e-03  1.00164540e+00]
  HOMO = -0.236108569537239  LUMO = 119.424345310666
  mo_energy =
[-1.20173537e+02 -1.22487901e+01 -6.65148460e+00 -6.65148460e+00
 -6.65148460e+00 -1.16319867e+00 -2.36108570e-01 -2.36108570e-01
 -2.36108570e-01  1.19424345e+02  1.06276746e+03  7.43026398e+03
  3.95506861e+04]
E1 = -706.3845706938746  E_coul = 198.94388888374553
cycle= 3 E= -507.440681810129  delta_E= -4.62e-08  |g|= 5.59e-05  |ddm|= 9.81e-05
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=7.49146e-05
diis-c [-1.27489959e-10  3.97268096e-05 -2.03424746e-02  1.02030275e+00]
  HOMO = -0.23610945955706  LUMO = 119.424324344329
  mo_energy =
[-1.20173587e+02 -1.22487966e+01 -6.65149592e+00 -6.65149592e+00
 -6.65149592e+00 -1.16319892e+00 -2.36109460e-01 -2.36109460e-01
 -2.36109460e-01  1.19424324e+02  1.06276741e+03  7.43026392e+03
  3.95506860e+04]
E1 = -706.3845681247544  E_coul = 198.94388631461473
cycle= 4 E= -507.44068181014  delta_E= -1.07e-11  |g|= 1.49e-07  |ddm|= 1.29e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.3845681247544  E_coul = 198.94388631461473
  HOMO = -0.236109454778293  LUMO = 119.424324504075
  mo_energy =
[-1.20173586e+02 -1.22487966e+01 -6.65149587e+00 -6.65149587e+00
 -6.65149587e+00 -1.16319892e+00 -2.36109455e-01 -2.36109455e-01
 -2.36109455e-01  1.19424325e+02  1.06276741e+03  7.43026392e+03
  3.95506860e+04]
E1 = -706.384568135143  E_coul = 198.9438863250034
Extra cycle  E= -507.44068181014  delta_E= 1.14e-13  |g|= 2.1e-09  |ddm|= 4.25e-09
    CPU time for scf_cycle      0.10 sec, wall time      0.11 sec
exp = [1.81913156e+04 4.53286589e+03 7.35171414e+02 1.62214699e+02
 4.36750466e+01 4.75293789e+00 3.91893375e-01 8.59647144e+00
 4.90657048e-01]
E = -507.4406818101396
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((9, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.5476253398322024e+03,6.8630785798847160e+02,1.5555024230205126e+02,4.2742815896802767e+01,4.7505784169783016e+00,3.9162204394177752e-01,8.5974230426361959e+00,4.9072756124177219e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "7s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:55:19 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  18191.3155841        1
[INPUT] 0    0    [1    /1   ]  4532.86588855        1
[INPUT] 0    0    [1    /1   ]  735.171414313        1
[INPUT] 0    0    [1    /1   ]  162.21469904         1
[INPUT] 0    0    [1    /1   ]  43.6750466306        1
[INPUT] 0    0    [1    /1   ]  4.75293788962        1
[INPUT] 0    0    [1    /1   ]  0.391893375103       1
[INPUT] 1    0    [1    /1   ]  8.59647144217        1
[INPUT] 1    0    [1    /1   ]  0.490657047808       1

nuclear repulsion = 0
number of shells = 9
number of NR pGTOs = 13
number of NR cGTOs = 13
basis = {'Ar': [[0, [18191.315584113625, 1.0]], [0, [4532.865888550027, 1.0]], [0, [735.1714143133081, 1.0]], [0, [162.21469904038494, 1.0]], [0, [43.675046630625694, 1.0]], [0, [4.752937889616688, 1.0]], [0, [0.3918933751027764, 1.0]], [1, [8.596471442172552, 1.0]], [1, [0.4906570478078554, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [18191.31558411]
bas 1, expnt(s) = [4532.86588855]
bas 2, expnt(s) = [735.17141431]
bas 3, expnt(s) = [162.21469904]
bas 4, expnt(s) = [43.67504663]
bas 5, expnt(s) = [4.75293789]
bas 6, expnt(s) = [0.39189338]
bas 7, expnt(s) = [8.59647144]
bas 8, expnt(s) = [0.49065705]
CPU time:       146.67
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  1  1  1  0 38 39  0]
 [ 0  1  1  1  0 40 41  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.81913156e+04 3.95742876e+03 4.53286589e+03 1.39570835e+03
 7.35171414e+02 3.56702771e+02 1.62214699e+02 1.14837222e+02
 4.36750466e+01 4.29229989e+01 4.75293789e+00 8.13273514e+00
 3.91893375e-01 1.25138506e+00 8.59647144e+00 4.29422379e+01
 4.90657048e-01 1.19800035e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319361529930696
cond(S) = 28.05502088660733
E1 = -688.9210795716727  E_coul = 184.92015211918473
init E= -504.000927452488
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.681151349877969  LUMO = 118.064144620046
  mo_energy =
[-1.21554189e+02 -1.32780997e+01 -7.62036075e+00 -7.62036075e+00
 -7.62036075e+00 -1.65150256e+00 -6.81151350e-01 -6.81151350e-01
 -6.81151350e-01  1.18064145e+02  1.06142368e+03  7.42908187e+03
  3.95496282e+04]
E1 = -706.4041067197588  E_coul = 198.96368099916978
cycle= 1 E= -507.440425720589  delta_E= -3.44  |g|= 0.292  |ddm|= 0.299
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.385392
diis-c [-0.14852677  1.        ]
  HOMO = -0.236011160286301  LUMO = 119.427015899149
  mo_energy =
[-1.20167890e+02 -1.22481100e+01 -6.65043430e+00 -6.65043430e+00
 -6.65043430e+00 -1.16316209e+00 -2.36011160e-01 -2.36011160e-01
 -2.36011160e-01  1.19427016e+02  1.06277581e+03  7.43027639e+03
  3.95507001e+04]
E1 = -706.3847860501505  E_coul = 198.94410428625747
cycle= 2 E= -507.440681763893  delta_E= -0.000256  |g|= 0.00356  |ddm|= 0.00835
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00377335
diis-c [-1.38374364e-05 -1.64539928e-03  1.00164540e+00]
  HOMO = -0.236108569537239  LUMO = 119.424345310666
  mo_energy =
[-1.20173537e+02 -1.22487901e+01 -6.65148460e+00 -6.65148460e+00
 -6.65148460e+00 -1.16319867e+00 -2.36108570e-01 -2.36108570e-01
 -2.36108570e-01  1.19424345e+02  1.06276746e+03  7.43026398e+03
  3.95506861e+04]
E1 = -706.3845706938746  E_coul = 198.94388888374553
cycle= 3 E= -507.440681810129  delta_E= -4.62e-08  |g|= 5.59e-05  |ddm|= 9.81e-05
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=7.49146e-05
diis-c [-1.27489959e-10  3.97268096e-05 -2.03424746e-02  1.02030275e+00]
  HOMO = -0.23610945955706  LUMO = 119.424324344329
  mo_energy =
[-1.20173587e+02 -1.22487966e+01 -6.65149592e+00 -6.65149592e+00
 -6.65149592e+00 -1.16319892e+00 -2.36109460e-01 -2.36109460e-01
 -2.36109460e-01  1.19424324e+02  1.06276741e+03  7.43026392e+03
  3.95506860e+04]
E1 = -706.3845681247544  E_coul = 198.94388631461473
cycle= 4 E= -507.44068181014  delta_E= -1.07e-11  |g|= 1.49e-07  |ddm|= 1.29e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.3845681247544  E_coul = 198.94388631461473
  HOMO = -0.236109454778293  LUMO = 119.424324504075
  mo_energy =
[-1.20173586e+02 -1.22487966e+01 -6.65149587e+00 -6.65149587e+00
 -6.65149587e+00 -1.16319892e+00 -2.36109455e-01 -2.36109455e-01
 -2.36109455e-01  1.19424325e+02  1.06276741e+03  7.43026392e+03
  3.95506860e+04]
E1 = -706.384568135143  E_coul = 198.9438863250034
Extra cycle  E= -507.44068181014  delta_E= 1.14e-13  |g|= 2.1e-09  |ddm|= 4.25e-09
    CPU time for scf_cycle      0.10 sec, wall time      0.11 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 28.05502088660733
E1 = -706.384568135143  E_coul = 198.9438863250034
init E= -507.44068181014
    CPU time for initialize scf      0.06 sec, wall time      0.07 sec
  HOMO = -0.236109454732722  LUMO = 119.424324505553
  mo_energy =
[-1.20173586e+02 -1.22487966e+01 -6.65149587e+00 -6.65149587e+00
 -6.65149587e+00 -1.16319892e+00 -2.36109455e-01 -2.36109455e-01
 -2.36109455e-01  1.19424325e+02  1.06276741e+03  7.43026392e+03
  3.95506860e+04]
E1 = -706.3845681352666  E_coul = 198.9438863251271
cycle= 1 E= -507.440681810139  delta_E= 1.14e-13  |g|= 3.48e-11  |ddm|= 5.45e-11
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -706.3845681352666  E_coul = 198.9438863251271
  HOMO = -0.236109454732184  LUMO = 119.424324505568
  mo_energy =
[-1.20173586e+02 -1.22487966e+01 -6.65149587e+00 -6.65149587e+00
 -6.65149587e+00 -1.16319892e+00 -2.36109455e-01 -2.36109455e-01
 -2.36109455e-01  1.19424325e+02  1.06276741e+03  7.43026392e+03
  3.95506860e+04]
E1 = -706.3845681352683  E_coul = 198.94388632512886
Extra cycle  E= -507.440681810139  delta_E= 5.68e-14  |g|= 3.95e-12  |ddm|= 8.03e-13
    CPU time for scf_cycle      0.13 sec, wall time      0.14 sec
exp = [1.81913156e+04 4.53286589e+03 7.35171414e+02 1.62214699e+02
 4.36750466e+01 4.75293789e+00 3.91893375e-01 8.59647144e+00
 4.90657048e-01]
grad_E = [-6.18352163e-06  8.62863550e-05  1.55806540e-05  4.87728547e-05
 -4.99499432e-05 -1.58957860e-05 -5.88272831e-04  2.88240572e-05
 -1.34844788e-04]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((9, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.5476253398322024e+03,6.8630785798847160e+02,1.5555024230205126e+02,4.2742815896802767e+01,4.7505784169783016e+00,3.9162204394177752e-01,8.5974230426361959e+00,4.9072756124177219e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "7s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:55:23 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  18191.31631          1
[INPUT] 0    0    [1    /1   ]  4532.87690102        1
[INPUT] 0    0    [1    /1   ]  734.844131037        1
[INPUT] 0    0    [1    /1   ]  162.202432328        1
[INPUT] 0    0    [1    /1   ]  43.6749226289        1
[INPUT] 0    0    [1    /1   ]  4.75291567737        1
[INPUT] 0    0    [1    /1   ]  0.391867920355       1
[INPUT] 1    0    [1    /1   ]  8.59650211097        1
[INPUT] 1    0    [1    /1   ]  0.490657433464       1

nuclear repulsion = 0
number of shells = 9
number of NR pGTOs = 13
number of NR cGTOs = 13
basis = {'Ar': [[0, [18191.316310022463, 1.0]], [0, [4532.8769010151245, 1.0]], [0, [734.8441310366031, 1.0]], [0, [162.2024323282172, 1.0]], [0, [43.67492262891747, 1.0]], [0, [4.752915677366821, 1.0]], [0, [0.39186792035546475, 1.0]], [1, [8.596502110968702, 1.0]], [1, [0.49065743346430923, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [18191.31631002]
bas 1, expnt(s) = [4532.87690102]
bas 2, expnt(s) = [734.84413104]
bas 3, expnt(s) = [162.20243233]
bas 4, expnt(s) = [43.67492263]
bas 5, expnt(s) = [4.75291568]
bas 6, expnt(s) = [0.39186792]
bas 7, expnt(s) = [8.59650211]
bas 8, expnt(s) = [0.49065743]
CPU time:       149.96
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  1  1  1  0 38 39  0]
 [ 0  1  1  1  0 40 41  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.81913163e+04 3.95742888e+03 4.53287690e+03 1.39571089e+03
 7.34844131e+02 3.56583667e+02 1.62202432e+02 1.14830709e+02
 4.36749226e+01 4.29229075e+01 4.75291568e+00 8.13270663e+00
 3.91867920e-01 1.25132410e+00 8.59650211e+00 4.29424294e+01
 4.90657433e-01 1.19800153e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319364498029145
cond(S) = 28.060788768546473
E1 = -688.9209562784499  E_coul = 184.91989149724398
init E= -504.001064781206
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.681163056593677  LUMO = 118.058784555183
  mo_energy =
[-1.21554199e+02 -1.32781146e+01 -7.62038463e+00 -7.62038463e+00
 -7.62038463e+00 -1.65150129e+00 -6.81163057e-01 -6.81163057e-01
 -6.81163057e-01  1.18058785e+02  1.06109415e+03  7.42802492e+03
  3.95485102e+04]
E1 = -706.4037100326248  E_coul = 198.9632805109276
cycle= 1 E= -507.440429521697  delta_E= -3.44  |g|= 0.292  |ddm|= 0.299
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.385452
diis-c [-0.14857325  1.        ]
  HOMO = -0.236025019220599  LUMO = 119.421632019033
  mo_energy =
[-1.20167925e+02 -1.22481309e+01 -6.65046600e+00 -6.65046600e+00
 -6.65046600e+00 -1.16317249e+00 -2.36025019e-01 -2.36025019e-01
 -2.36025019e-01  1.19421632e+02  1.06244626e+03  7.42921944e+03
  3.95495821e+04]
E1 = -706.3843872831577  E_coul = 198.94370169247622
cycle= 2 E= -507.440685590681  delta_E= -0.000256  |g|= 0.00356  |ddm|= 0.00835
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00377355
diis-c [-1.38393619e-05 -1.64431895e-03  1.00164432e+00]
  HOMO = -0.236122439160537  LUMO = 119.418961170433
  mo_energy =
[-1.20173571e+02 -1.22488111e+01 -6.65151641e+00 -6.65151641e+00
 -6.65151641e+00 -1.16320907e+00 -2.36122439e-01 -2.36122439e-01
 -2.36122439e-01  1.19418961e+02  1.06243792e+03  7.42920702e+03
  3.95495680e+04]
E1 = -706.3841718983008  E_coul = 198.94348626137918
cycle= 3 E= -507.440685636922  delta_E= -4.62e-08  |g|= 5.59e-05  |ddm|= 9.81e-05
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=7.49224e-05
diis-c [-1.27541557e-10  3.97037415e-05 -2.03431348e-02  1.02030343e+00]
  HOMO = -0.236123329390902  LUMO = 119.418940197204
  mo_energy =
[-1.20173621e+02 -1.22488176e+01 -6.65152774e+00 -6.65152774e+00
 -6.65152774e+00 -1.16320932e+00 -2.36123329e-01 -2.36123329e-01
 -2.36123329e-01  1.19418940e+02  1.06243787e+03  7.42920697e+03
  3.95495679e+04]
E1 = -706.3841693285615  E_coul = 198.94348369162975
cycle= 4 E= -507.440685636932  delta_E= -1.01e-11  |g|= 1.49e-07  |ddm|= 1.29e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.3841693285615  E_coul = 198.94348369162975
  HOMO = -0.23612332460979  LUMO = 119.418940357017
  mo_energy =
[-1.20173621e+02 -1.22488176e+01 -6.65152769e+00 -6.65152769e+00
 -6.65152769e+00 -1.16320932e+00 -2.36123325e-01 -2.36123325e-01
 -2.36123325e-01  1.19418940e+02  1.06243787e+03  7.42920697e+03
  3.95495679e+04]
E1 = -706.3841693389552  E_coul = 198.94348370202323
Extra cycle  E= -507.440685636932  delta_E= -2.27e-13  |g|= 2.1e-09  |ddm|= 4.25e-09
    CPU time for scf_cycle      0.10 sec, wall time      0.11 sec
exp = [1.81913163e+04 4.53287690e+03 7.34844131e+02 1.62202432e+02
 4.36749226e+01 4.75291568e+00 3.91867920e-01 8.59650211e+00
 4.90657433e-01]
E = -507.44068563693196
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((9, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.5476253398322024e+03,6.8630785798847160e+02,1.5555024230205126e+02,4.2742815896802767e+01,4.7505784169783016e+00,3.9162204394177752e-01,8.5974230426361959e+00,4.9072756124177219e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "7s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:55:23 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  18191.31631          1
[INPUT] 0    0    [1    /1   ]  4532.87690102        1
[INPUT] 0    0    [1    /1   ]  734.844131037        1
[INPUT] 0    0    [1    /1   ]  162.202432328        1
[INPUT] 0    0    [1    /1   ]  43.6749226289        1
[INPUT] 0    0    [1    /1   ]  4.75291567737        1
[INPUT] 0    0    [1    /1   ]  0.391867920355       1
[INPUT] 1    0    [1    /1   ]  8.59650211097        1
[INPUT] 1    0    [1    /1   ]  0.490657433464       1

nuclear repulsion = 0
number of shells = 9
number of NR pGTOs = 13
number of NR cGTOs = 13
basis = {'Ar': [[0, [18191.316310022463, 1.0]], [0, [4532.8769010151245, 1.0]], [0, [734.8441310366031, 1.0]], [0, [162.2024323282172, 1.0]], [0, [43.67492262891747, 1.0]], [0, [4.752915677366821, 1.0]], [0, [0.39186792035546475, 1.0]], [1, [8.596502110968702, 1.0]], [1, [0.49065743346430923, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [18191.31631002]
bas 1, expnt(s) = [4532.87690102]
bas 2, expnt(s) = [734.84413104]
bas 3, expnt(s) = [162.20243233]
bas 4, expnt(s) = [43.67492263]
bas 5, expnt(s) = [4.75291568]
bas 6, expnt(s) = [0.39186792]
bas 7, expnt(s) = [8.59650211]
bas 8, expnt(s) = [0.49065743]
CPU time:       150.64
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  1  1  1  0 38 39  0]
 [ 0  1  1  1  0 40 41  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.81913163e+04 3.95742888e+03 4.53287690e+03 1.39571089e+03
 7.34844131e+02 3.56583667e+02 1.62202432e+02 1.14830709e+02
 4.36749226e+01 4.29229075e+01 4.75291568e+00 8.13270663e+00
 3.91867920e-01 1.25132410e+00 8.59650211e+00 4.29424294e+01
 4.90657433e-01 1.19800153e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319364498029145
cond(S) = 28.060788768546473
E1 = -688.9209562784499  E_coul = 184.91989149724398
init E= -504.001064781206
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.681163056593677  LUMO = 118.058784555183
  mo_energy =
[-1.21554199e+02 -1.32781146e+01 -7.62038463e+00 -7.62038463e+00
 -7.62038463e+00 -1.65150129e+00 -6.81163057e-01 -6.81163057e-01
 -6.81163057e-01  1.18058785e+02  1.06109415e+03  7.42802492e+03
  3.95485102e+04]
E1 = -706.4037100326248  E_coul = 198.9632805109276
cycle= 1 E= -507.440429521697  delta_E= -3.44  |g|= 0.292  |ddm|= 0.299
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.385452
diis-c [-0.14857325  1.        ]
  HOMO = -0.236025019220599  LUMO = 119.421632019033
  mo_energy =
[-1.20167925e+02 -1.22481309e+01 -6.65046600e+00 -6.65046600e+00
 -6.65046600e+00 -1.16317249e+00 -2.36025019e-01 -2.36025019e-01
 -2.36025019e-01  1.19421632e+02  1.06244626e+03  7.42921944e+03
  3.95495821e+04]
E1 = -706.3843872831577  E_coul = 198.94370169247622
cycle= 2 E= -507.440685590681  delta_E= -0.000256  |g|= 0.00356  |ddm|= 0.00835
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00377355
diis-c [-1.38393619e-05 -1.64431895e-03  1.00164432e+00]
  HOMO = -0.236122439160537  LUMO = 119.418961170433
  mo_energy =
[-1.20173571e+02 -1.22488111e+01 -6.65151641e+00 -6.65151641e+00
 -6.65151641e+00 -1.16320907e+00 -2.36122439e-01 -2.36122439e-01
 -2.36122439e-01  1.19418961e+02  1.06243792e+03  7.42920702e+03
  3.95495680e+04]
E1 = -706.3841718983008  E_coul = 198.94348626137918
cycle= 3 E= -507.440685636922  delta_E= -4.62e-08  |g|= 5.59e-05  |ddm|= 9.81e-05
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=7.49224e-05
diis-c [-1.27541557e-10  3.97037415e-05 -2.03431348e-02  1.02030343e+00]
  HOMO = -0.236123329390902  LUMO = 119.418940197204
  mo_energy =
[-1.20173621e+02 -1.22488176e+01 -6.65152774e+00 -6.65152774e+00
 -6.65152774e+00 -1.16320932e+00 -2.36123329e-01 -2.36123329e-01
 -2.36123329e-01  1.19418940e+02  1.06243787e+03  7.42920697e+03
  3.95495679e+04]
E1 = -706.3841693285615  E_coul = 198.94348369162975
cycle= 4 E= -507.440685636932  delta_E= -1.01e-11  |g|= 1.49e-07  |ddm|= 1.29e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.3841693285615  E_coul = 198.94348369162975
  HOMO = -0.23612332460979  LUMO = 119.418940357017
  mo_energy =
[-1.20173621e+02 -1.22488176e+01 -6.65152769e+00 -6.65152769e+00
 -6.65152769e+00 -1.16320932e+00 -2.36123325e-01 -2.36123325e-01
 -2.36123325e-01  1.19418940e+02  1.06243787e+03  7.42920697e+03
  3.95495679e+04]
E1 = -706.3841693389552  E_coul = 198.94348370202323
Extra cycle  E= -507.440685636932  delta_E= -2.27e-13  |g|= 2.1e-09  |ddm|= 4.25e-09
    CPU time for scf_cycle      0.10 sec, wall time      0.11 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 28.060788768546473
E1 = -706.3841693389552  E_coul = 198.94348370202323
init E= -507.440685636932
    CPU time for initialize scf      0.06 sec, wall time      0.06 sec
  HOMO = -0.236123324564198  LUMO = 119.418940358495
  mo_energy =
[-1.20173621e+02 -1.22488176e+01 -6.65152769e+00 -6.65152769e+00
 -6.65152769e+00 -1.16320932e+00 -2.36123325e-01 -2.36123325e-01
 -2.36123325e-01  1.19418940e+02  1.06243787e+03  7.42920697e+03
  3.95495679e+04]
E1 = -706.3841693390791  E_coul = 198.94348370214723
cycle= 1 E= -507.440685636932  delta_E= 5.68e-14  |g|= 3.71e-11  |ddm|= 5.46e-11
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -706.3841693390791  E_coul = 198.94348370214723
  HOMO = -0.23612332456366  LUMO = 119.418940358511
  mo_energy =
[-1.20173621e+02 -1.22488176e+01 -6.65152769e+00 -6.65152769e+00
 -6.65152769e+00 -1.16320932e+00 -2.36123325e-01 -2.36123325e-01
 -2.36123325e-01  1.19418940e+02  1.06243787e+03  7.42920697e+03
  3.95495679e+04]
E1 = -706.3841693390805  E_coul = 198.9434837021488
Extra cycle  E= -507.440685636932  delta_E= 2.27e-13  |g|= 7.44e-12  |ddm|= 8.09e-13
    CPU time for scf_cycle      0.13 sec, wall time      0.13 sec
exp = [1.81913163e+04 4.53287690e+03 7.34844131e+02 1.62202432e+02
 4.36749226e+01 4.75291568e+00 3.91867920e-01 8.59650211e+00
 4.90657433e-01]
grad_E = [-6.18807854e-06  8.65787374e-05  8.99040364e-06  7.88890712e-05
 -8.41898171e-05 -2.71253986e-05 -9.90462970e-04  4.90544585e-05
 -2.27058009e-04]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((9, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.5476253398322024e+03,6.8630785798847160e+02,1.5555024230205126e+02,4.2742815896802767e+01,4.7505784169783016e+00,3.9162204394177752e-01,8.5974230426361959e+00,4.9072756124177219e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "7s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:55:27 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  18191.3236693        1
[INPUT] 0    0    [1    /1   ]  4532.80746497        1
[INPUT] 0    0    [1    /1   ]  734.308634514        1
[INPUT] 0    0    [1    /1   ]  162.182123353        1
[INPUT] 0    0    [1    /1   ]  43.6746763971        1
[INPUT] 0    0    [1    /1   ]  4.75287959423        1
[INPUT] 0    0    [1    /1   ]  0.391826604681       1
[INPUT] 1    0    [1    /1   ]  8.59655191652        1
[INPUT] 1    0    [1    /1   ]  0.490658060735       1

nuclear repulsion = 0
number of shells = 9
number of NR pGTOs = 13
number of NR cGTOs = 13
basis = {'Ar': [[0, [18191.323669292255, 1.0]], [0, [4532.807464966693, 1.0]], [0, [734.3086345141681, 1.0]], [0, [162.18212335293444, 1.0]], [0, [43.674676397142264, 1.0]], [0, [4.752879594225005, 1.0]], [0, [0.39182660468149033, 1.0]], [1, [8.596551916522904, 1.0]], [1, [0.4906580607353215, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [18191.32366929]
bas 1, expnt(s) = [4532.80746497]
bas 2, expnt(s) = [734.30863451]
bas 3, expnt(s) = [162.18212335]
bas 4, expnt(s) = [43.6746764]
bas 5, expnt(s) = [4.75287959]
bas 6, expnt(s) = [0.3918266]
bas 7, expnt(s) = [8.59655192]
bas 8, expnt(s) = [0.49065806]
CPU time:       154.01
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  1  1  1  0 38 39  0]
 [ 0  1  1  1  0 40 41  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.81913237e+04 3.95743008e+03 4.53280746e+03 1.39569486e+03
 7.34308635e+02 3.56388762e+02 1.62182123e+02 1.14819926e+02
 4.36746764e+01 4.29227260e+01 4.75287959e+00 8.13266032e+00
 3.91826605e-01 1.25122515e+00 8.59655192e+00 4.29427404e+01
 4.90658061e-01 1.19800344e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.31936930896936
cond(S) = 28.070362937143674
E1 = -688.9207556984848  E_coul = 184.91946845879792
init E= -504.001287239687
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.681182060897684  LUMO = 118.049764598765
  mo_energy =
[-1.21554217e+02 -1.32781391e+01 -7.62042338e+00 -7.62042338e+00
 -7.62042338e+00 -1.65149921e+00 -6.81182061e-01 -6.81182061e-01
 -6.81182061e-01  1.18049765e+02  1.06055382e+03  7.42620585e+03
  3.95464270e+04]
E1 = -706.4030699848465  E_coul = 198.96263046846715
cycle= 1 E= -507.440439516379  delta_E= -3.44  |g|= 0.292  |ddm|= 0.299
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.385549
diis-c [-0.14864814  1.        ]
  HOMO = -0.236047514809578  LUMO = 119.412573221751
  mo_energy =
[-1.20167982e+02 -1.22481650e+01 -6.65051747e+00 -6.65051747e+00
 -6.65051747e+00 -1.16318938e+00 -2.36047515e-01 -2.36047515e-01
 -2.36047515e-01  1.19412573e+02  1.06190592e+03  7.42740036e+03
  3.95474988e+04]
E1 = -706.3837437797785  E_coul = 198.94304815158677
cycle= 2 E= -507.440695628192  delta_E= -0.000256  |g|= 0.00356  |ddm|= 0.00835
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.0037739
diis-c [-1.38425811e-05 -1.64256562e-03  1.00164257e+00]
  HOMO = -0.236144952588934  LUMO = 119.409901945228
  mo_energy =
[-1.20173630e+02 -1.22488453e+01 -6.65156807e+00 -6.65156807e+00
 -6.65156807e+00 -1.16322595e+00 -2.36144953e-01 -2.36144953e-01
 -2.36144953e-01  1.19409902e+02  1.06189757e+03  7.42738795e+03
  3.95474847e+04]
E1 = -706.3835283471782  E_coul = 198.9428326727393
cycle= 3 E= -507.440695674439  delta_E= -4.62e-08  |g|= 5.59e-05  |ddm|= 9.81e-05
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=7.49355e-05
diis-c [-1.27626491e-10  3.96665376e-05 -2.03442476e-02  1.02030458e+00]
  HOMO = -0.236145843167387  LUMO = 119.409880960676
  mo_energy =
[-1.20173680e+02 -1.22488518e+01 -6.65157941e+00 -6.65157941e+00
 -6.65157941e+00 -1.16322621e+00 -2.36145843e-01 -2.36145843e-01
 -2.36145843e-01  1.19409881e+02  1.06189752e+03  7.42738789e+03
  3.95474847e+04]
E1 = -706.3835257764129  E_coul = 198.942830101964
cycle= 4 E= -507.440695674449  delta_E= -1e-11  |g|= 1.49e-07  |ddm|= 1.29e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.3835257764129  E_coul = 198.942830101964
  HOMO = -0.23614583838243  LUMO = 119.409881120603
  mo_energy =
[-1.20173679e+02 -1.22488518e+01 -6.65157936e+00 -6.65157936e+00
 -6.65157936e+00 -1.16322621e+00 -2.36145838e-01 -2.36145838e-01
 -2.36145838e-01  1.19409881e+02  1.06189752e+03  7.42738789e+03
  3.95474847e+04]
E1 = -706.3835257868146  E_coul = 198.94283011236556
Extra cycle  E= -507.440695674449  delta_E= -2.27e-13  |g|= 2.1e-09  |ddm|= 4.26e-09
    CPU time for scf_cycle      0.10 sec, wall time      0.11 sec
exp = [1.81913237e+04 4.53280746e+03 7.34308635e+02 1.62182123e+02
 4.36746764e+01 4.75287959e+00 3.91826605e-01 8.59655192e+00
 4.90658061e-01]
E = -507.4406956744491
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((9, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.5476253398322024e+03,6.8630785798847160e+02,1.5555024230205126e+02,4.2742815896802767e+01,4.7505784169783016e+00,3.9162204394177752e-01,8.5974230426361959e+00,4.9072756124177219e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "7s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:55:27 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  18191.3236693        1
[INPUT] 0    0    [1    /1   ]  4532.80746497        1
[INPUT] 0    0    [1    /1   ]  734.308634514        1
[INPUT] 0    0    [1    /1   ]  162.182123353        1
[INPUT] 0    0    [1    /1   ]  43.6746763971        1
[INPUT] 0    0    [1    /1   ]  4.75287959423        1
[INPUT] 0    0    [1    /1   ]  0.391826604681       1
[INPUT] 1    0    [1    /1   ]  8.59655191652        1
[INPUT] 1    0    [1    /1   ]  0.490658060735       1

nuclear repulsion = 0
number of shells = 9
number of NR pGTOs = 13
number of NR cGTOs = 13
basis = {'Ar': [[0, [18191.323669292255, 1.0]], [0, [4532.807464966693, 1.0]], [0, [734.3086345141681, 1.0]], [0, [162.18212335293444, 1.0]], [0, [43.674676397142264, 1.0]], [0, [4.752879594225005, 1.0]], [0, [0.39182660468149033, 1.0]], [1, [8.596551916522904, 1.0]], [1, [0.4906580607353215, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [18191.32366929]
bas 1, expnt(s) = [4532.80746497]
bas 2, expnt(s) = [734.30863451]
bas 3, expnt(s) = [162.18212335]
bas 4, expnt(s) = [43.6746764]
bas 5, expnt(s) = [4.75287959]
bas 6, expnt(s) = [0.3918266]
bas 7, expnt(s) = [8.59655192]
bas 8, expnt(s) = [0.49065806]
CPU time:       154.72
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  1  1  1  0 38 39  0]
 [ 0  1  1  1  0 40 41  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.81913237e+04 3.95743008e+03 4.53280746e+03 1.39569486e+03
 7.34308635e+02 3.56388762e+02 1.62182123e+02 1.14819926e+02
 4.36746764e+01 4.29227260e+01 4.75287959e+00 8.13266032e+00
 3.91826605e-01 1.25122515e+00 8.59655192e+00 4.29427404e+01
 4.90658061e-01 1.19800344e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.31936930896936
cond(S) = 28.070362937143674
E1 = -688.9207556984848  E_coul = 184.91946845879792
init E= -504.001287239687
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.681182060897684  LUMO = 118.049764598765
  mo_energy =
[-1.21554217e+02 -1.32781391e+01 -7.62042338e+00 -7.62042338e+00
 -7.62042338e+00 -1.65149921e+00 -6.81182061e-01 -6.81182061e-01
 -6.81182061e-01  1.18049765e+02  1.06055382e+03  7.42620585e+03
  3.95464270e+04]
E1 = -706.4030699848465  E_coul = 198.96263046846715
cycle= 1 E= -507.440439516379  delta_E= -3.44  |g|= 0.292  |ddm|= 0.299
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.385549
diis-c [-0.14864814  1.        ]
  HOMO = -0.236047514809578  LUMO = 119.412573221751
  mo_energy =
[-1.20167982e+02 -1.22481650e+01 -6.65051747e+00 -6.65051747e+00
 -6.65051747e+00 -1.16318938e+00 -2.36047515e-01 -2.36047515e-01
 -2.36047515e-01  1.19412573e+02  1.06190592e+03  7.42740036e+03
  3.95474988e+04]
E1 = -706.3837437797785  E_coul = 198.94304815158677
cycle= 2 E= -507.440695628192  delta_E= -0.000256  |g|= 0.00356  |ddm|= 0.00835
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.0037739
diis-c [-1.38425811e-05 -1.64256562e-03  1.00164257e+00]
  HOMO = -0.236144952588934  LUMO = 119.409901945228
  mo_energy =
[-1.20173630e+02 -1.22488453e+01 -6.65156807e+00 -6.65156807e+00
 -6.65156807e+00 -1.16322595e+00 -2.36144953e-01 -2.36144953e-01
 -2.36144953e-01  1.19409902e+02  1.06189757e+03  7.42738795e+03
  3.95474847e+04]
E1 = -706.3835283471782  E_coul = 198.9428326727393
cycle= 3 E= -507.440695674439  delta_E= -4.62e-08  |g|= 5.59e-05  |ddm|= 9.81e-05
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=7.49355e-05
diis-c [-1.27626491e-10  3.96665376e-05 -2.03442476e-02  1.02030458e+00]
  HOMO = -0.236145843167387  LUMO = 119.409880960676
  mo_energy =
[-1.20173680e+02 -1.22488518e+01 -6.65157941e+00 -6.65157941e+00
 -6.65157941e+00 -1.16322621e+00 -2.36145843e-01 -2.36145843e-01
 -2.36145843e-01  1.19409881e+02  1.06189752e+03  7.42738789e+03
  3.95474847e+04]
E1 = -706.3835257764129  E_coul = 198.942830101964
cycle= 4 E= -507.440695674449  delta_E= -1e-11  |g|= 1.49e-07  |ddm|= 1.29e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.3835257764129  E_coul = 198.942830101964
  HOMO = -0.23614583838243  LUMO = 119.409881120603
  mo_energy =
[-1.20173679e+02 -1.22488518e+01 -6.65157936e+00 -6.65157936e+00
 -6.65157936e+00 -1.16322621e+00 -2.36145838e-01 -2.36145838e-01
 -2.36145838e-01  1.19409881e+02  1.06189752e+03  7.42738789e+03
  3.95474847e+04]
E1 = -706.3835257868146  E_coul = 198.94283011236556
Extra cycle  E= -507.440695674449  delta_E= -2.27e-13  |g|= 2.1e-09  |ddm|= 4.26e-09
    CPU time for scf_cycle      0.10 sec, wall time      0.10 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 28.070362937143674
E1 = -706.3835257868146  E_coul = 198.94283011236556
init E= -507.440695674449
    CPU time for initialize scf      0.06 sec, wall time      0.06 sec
  HOMO = -0.236145838336806  LUMO = 119.409881122085
  mo_energy =
[-1.20173679e+02 -1.22488518e+01 -6.65157936e+00 -6.65157936e+00
 -6.65157936e+00 -1.16322621e+00 -2.36145838e-01 -2.36145838e-01
 -2.36145838e-01  1.19409881e+02  1.06189752e+03  7.42738789e+03
  3.95474847e+04]
E1 = -706.3835257869385  E_coul = 198.94283011248945
cycle= 1 E= -507.440695674449  delta_E=    0  |g|= 3.57e-11  |ddm|= 5.46e-11
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -706.3835257869385  E_coul = 198.94283011248945
  HOMO = -0.236145838336264  LUMO = 119.4098811221
  mo_energy =
[-1.20173679e+02 -1.22488518e+01 -6.65157936e+00 -6.65157936e+00
 -6.65157936e+00 -1.16322621e+00 -2.36145838e-01 -2.36145838e-01
 -2.36145838e-01  1.19409881e+02  1.06189752e+03  7.42738789e+03
  3.95474847e+04]
E1 = -706.38352578694  E_coul = 198.94283011249107
Extra cycle  E= -507.440695674449  delta_E= 1.14e-13  |g|= 1.37e-11  |ddm|= 8.15e-13
    CPU time for scf_cycle      0.13 sec, wall time      0.13 sec
exp = [1.81913237e+04 4.53280746e+03 7.34308635e+02 1.62182123e+02
 4.36746764e+01 4.75287959e+00 3.91826605e-01 8.59655192e+00
 4.90658061e-01]
grad_E = [-6.19544131e-06  8.70533226e-05 -1.70627575e-06  1.27770524e-04
 -1.39765617e-04 -4.53540938e-05 -1.64326554e-03  8.18977372e-05
 -3.76730984e-04]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((9, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.5476253398322024e+03,6.8630785798847160e+02,1.5555024230205126e+02,4.2742815896802767e+01,4.7505784169783016e+00,3.9162204394177752e-01,8.5974230426361959e+00,4.9072756124177219e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "7s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:55:31 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  18191.3517705        1
[INPUT] 0    0    [1    /1   ]  4532.46650821        1
[INPUT] 0    0    [1    /1   ]  733.428871174        1
[INPUT] 0    0    [1    /1   ]  162.148145827        1
[INPUT] 0    0    [1    /1   ]  43.6741607674        1
[INPUT] 0    0    [1    /1   ]  4.75282099164        1
[INPUT] 0    0    [1    /1   ]  0.39175959028        1
[INPUT] 1    0    [1    /1   ]  8.5966327518         1
[INPUT] 1    0    [1    /1   ]  0.490659080982       1

nuclear repulsion = 0
number of shells = 9
number of NR pGTOs = 13
number of NR cGTOs = 13
basis = {'Ar': [[0, [18191.35177045372, 1.0]], [0, [4532.466508210845, 1.0]], [0, [733.4288711739649, 1.0]], [0, [162.14814582713555, 1.0]], [0, [43.67416076738992, 1.0]], [0, [4.752820991641997, 1.0]], [0, [0.3917595902800473, 1.0]], [1, [8.596632751796287, 1.0]], [1, [0.4906590809821548, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [18191.35177045]
bas 1, expnt(s) = [4532.46650821]
bas 2, expnt(s) = [733.42887117]
bas 3, expnt(s) = [162.14814583]
bas 4, expnt(s) = [43.67416077]
bas 5, expnt(s) = [4.75282099]
bas 6, expnt(s) = [0.39175959]
bas 7, expnt(s) = [8.59663275]
bas 8, expnt(s) = [0.49065908]
CPU time:       158.32
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  1  1  1  0 38 39  0]
 [ 0  1  1  1  0 40 41  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.81913518e+04 3.95743466e+03 4.53246651e+03 1.39561612e+03
 7.33428871e+02 3.56068476e+02 1.62148146e+02 1.14801884e+02
 4.36741608e+01 4.29223459e+01 4.75282099e+00 8.13258512e+00
 3.91759590e-01 1.25106465e+00 8.59663275e+00 4.29432451e+01
 4.90659081e-01 1.19800655e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319377095551516
cond(S) = 28.08645078863221
E1 = -688.9204291875077  E_coul = 184.91878212802433
init E= -504.001647059483
    CPU time for initialize scf      0.03 sec, wall time      0.03 sec
  HOMO = -0.681212894839584  LUMO = 118.03430387846
  mo_energy =
[-1.21554251e+02 -1.32781789e+01 -7.62048627e+00 -7.62048627e+00
 -7.62048627e+00 -1.65149582e+00 -6.81212895e-01 -6.81212895e-01
 -6.81212895e-01  1.18034304e+02  1.05966316e+03  7.42298461e+03
  3.95423459e+04]
E1 = -706.402041695965  E_coul = 198.9615759574534
cycle= 1 E= -507.440465738512  delta_E= -3.44  |g|= 0.292  |ddm|= 0.299
    CPU time for cycle= 1      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.385705
diis-c [-0.14876819  1.        ]
  HOMO = -0.236084007088354  LUMO = 119.397049016214
  mo_energy =
[-1.20168079e+02 -1.22482205e+01 -6.65060099e+00 -6.65060099e+00
 -6.65060099e+00 -1.16321675e+00 -2.36084007e-01 -2.36084007e-01
 -2.36084007e-01  1.19397049e+02  1.06101523e+03  7.42417913e+03
  3.95434176e+04]
E1 = -706.3827096788157  E_coul = 198.94198775605204
cycle= 2 E= -507.440721922764  delta_E= -0.000256  |g|= 0.00356  |ddm|= 0.00835
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00377448
diis-c [-1.38480462e-05 -1.63972235e-03  1.00163972e+00]
  HOMO = -0.236181475075455  LUMO = 119.394377030736
  mo_energy =
[-1.20173729e+02 -1.22489010e+01 -6.65165191e+00 -6.65165191e+00
 -6.65165191e+00 -1.16325333e+00 -2.36181475e-01 -2.36181475e-01
 -2.36181475e-01  1.19394377e+02  1.06100689e+03  7.42416671e+03
  3.95434035e+04]
E1 = -706.3824941652639  E_coul = 198.94177219624135
cycle= 3 E= -507.440721969023  delta_E= -4.63e-08  |g|= 5.59e-05  |ddm|= 9.82e-05
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=7.49578e-05
diis-c [-1.27767008e-10  3.96064575e-05 -2.03461386e-02  1.02030653e+00]
  HOMO = -0.236182366234949  LUMO = 119.394356027487
  mo_energy =
[-1.20173779e+02 -1.22489075e+01 -6.65166325e+00 -6.65166325e+00
 -6.65166325e+00 -1.16325359e+00 -2.36182366e-01 -2.36182366e-01
 -2.36182366e-01  1.19394356e+02  1.06100684e+03  7.42416666e+03
  3.95434035e+04]
E1 = -706.3824915927769  E_coul = 198.94176962374348
cycle= 4 E= -507.440721969033  delta_E= -1.09e-11  |g|= 1.49e-07  |ddm|= 1.29e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.3824915927769  E_coul = 198.94176962374348
  HOMO = -0.236182361443645  LUMO = 119.394356187599
  mo_energy =
[-1.20173778e+02 -1.22489075e+01 -6.65166320e+00 -6.65166320e+00
 -6.65166320e+00 -1.16325358e+00 -2.36182361e-01 -2.36182361e-01
 -2.36182361e-01  1.19394356e+02  1.06100684e+03  7.42416666e+03
  3.95434035e+04]
E1 = -706.3824916031919  E_coul = 198.94176963415867
Extra cycle  E= -507.440721969033  delta_E= 2.27e-13  |g|= 2.1e-09  |ddm|= 4.26e-09
    CPU time for scf_cycle      0.13 sec, wall time      0.14 sec
exp = [1.81913518e+04 4.53246651e+03 7.33428871e+02 1.62148146e+02
 4.36741608e+01 4.75282099e+00 3.91759590e-01 8.59663275e+00
 4.90659081e-01]
E = -507.4407219690332
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((9, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.5476253398322024e+03,6.8630785798847160e+02,1.5555024230205126e+02,4.2742815896802767e+01,4.7505784169783016e+00,3.9162204394177752e-01,8.5974230426361959e+00,4.9072756124177219e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "7s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:55:32 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  18191.3517705        1
[INPUT] 0    0    [1    /1   ]  4532.46650821        1
[INPUT] 0    0    [1    /1   ]  733.428871174        1
[INPUT] 0    0    [1    /1   ]  162.148145827        1
[INPUT] 0    0    [1    /1   ]  43.6741607674        1
[INPUT] 0    0    [1    /1   ]  4.75282099164        1
[INPUT] 0    0    [1    /1   ]  0.39175959028        1
[INPUT] 1    0    [1    /1   ]  8.5966327518         1
[INPUT] 1    0    [1    /1   ]  0.490659080982       1

nuclear repulsion = 0
number of shells = 9
number of NR pGTOs = 13
number of NR cGTOs = 13
basis = {'Ar': [[0, [18191.35177045372, 1.0]], [0, [4532.466508210845, 1.0]], [0, [733.4288711739649, 1.0]], [0, [162.14814582713555, 1.0]], [0, [43.67416076738992, 1.0]], [0, [4.752820991641997, 1.0]], [0, [0.3917595902800473, 1.0]], [1, [8.596632751796287, 1.0]], [1, [0.4906590809821548, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [18191.35177045]
bas 1, expnt(s) = [4532.46650821]
bas 2, expnt(s) = [733.42887117]
bas 3, expnt(s) = [162.14814583]
bas 4, expnt(s) = [43.67416077]
bas 5, expnt(s) = [4.75282099]
bas 6, expnt(s) = [0.39175959]
bas 7, expnt(s) = [8.59663275]
bas 8, expnt(s) = [0.49065908]
CPU time:       159.05
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  1  1  1  0 38 39  0]
 [ 0  1  1  1  0 40 41  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.81913518e+04 3.95743466e+03 4.53246651e+03 1.39561612e+03
 7.33428871e+02 3.56068476e+02 1.62148146e+02 1.14801884e+02
 4.36741608e+01 4.29223459e+01 4.75282099e+00 8.13258512e+00
 3.91759590e-01 1.25106465e+00 8.59663275e+00 4.29432451e+01
 4.90659081e-01 1.19800655e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319377095551516
cond(S) = 28.08645078863221
E1 = -688.9204291875077  E_coul = 184.91878212802433
init E= -504.001647059483
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.681212894839584  LUMO = 118.03430387846
  mo_energy =
[-1.21554251e+02 -1.32781789e+01 -7.62048627e+00 -7.62048627e+00
 -7.62048627e+00 -1.65149582e+00 -6.81212895e-01 -6.81212895e-01
 -6.81212895e-01  1.18034304e+02  1.05966316e+03  7.42298461e+03
  3.95423459e+04]
E1 = -706.402041695965  E_coul = 198.9615759574534
cycle= 1 E= -507.440465738512  delta_E= -3.44  |g|= 0.292  |ddm|= 0.299
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.385705
diis-c [-0.14876819  1.        ]
  HOMO = -0.236084007088354  LUMO = 119.397049016214
  mo_energy =
[-1.20168079e+02 -1.22482205e+01 -6.65060099e+00 -6.65060099e+00
 -6.65060099e+00 -1.16321675e+00 -2.36084007e-01 -2.36084007e-01
 -2.36084007e-01  1.19397049e+02  1.06101523e+03  7.42417913e+03
  3.95434176e+04]
E1 = -706.3827096788157  E_coul = 198.94198775605204
cycle= 2 E= -507.440721922764  delta_E= -0.000256  |g|= 0.00356  |ddm|= 0.00835
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00377448
diis-c [-1.38480462e-05 -1.63972235e-03  1.00163972e+00]
  HOMO = -0.236181475075455  LUMO = 119.394377030736
  mo_energy =
[-1.20173729e+02 -1.22489010e+01 -6.65165191e+00 -6.65165191e+00
 -6.65165191e+00 -1.16325333e+00 -2.36181475e-01 -2.36181475e-01
 -2.36181475e-01  1.19394377e+02  1.06100689e+03  7.42416671e+03
  3.95434035e+04]
E1 = -706.3824941652639  E_coul = 198.94177219624135
cycle= 3 E= -507.440721969023  delta_E= -4.63e-08  |g|= 5.59e-05  |ddm|= 9.82e-05
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=7.49578e-05
diis-c [-1.27767008e-10  3.96064575e-05 -2.03461386e-02  1.02030653e+00]
  HOMO = -0.236182366234949  LUMO = 119.394356027487
  mo_energy =
[-1.20173779e+02 -1.22489075e+01 -6.65166325e+00 -6.65166325e+00
 -6.65166325e+00 -1.16325359e+00 -2.36182366e-01 -2.36182366e-01
 -2.36182366e-01  1.19394356e+02  1.06100684e+03  7.42416666e+03
  3.95434035e+04]
E1 = -706.3824915927769  E_coul = 198.94176962374348
cycle= 4 E= -507.440721969033  delta_E= -1.09e-11  |g|= 1.49e-07  |ddm|= 1.29e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.3824915927769  E_coul = 198.94176962374348
  HOMO = -0.236182361443645  LUMO = 119.394356187599
  mo_energy =
[-1.20173778e+02 -1.22489075e+01 -6.65166320e+00 -6.65166320e+00
 -6.65166320e+00 -1.16325358e+00 -2.36182361e-01 -2.36182361e-01
 -2.36182361e-01  1.19394356e+02  1.06100684e+03  7.42416666e+03
  3.95434035e+04]
E1 = -706.3824916031919  E_coul = 198.94176963415867
Extra cycle  E= -507.440721969033  delta_E= 2.27e-13  |g|= 2.1e-09  |ddm|= 4.26e-09
    CPU time for scf_cycle      0.09 sec, wall time      0.10 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 28.08645078863221
E1 = -706.3824916031919  E_coul = 198.94176963415867
init E= -507.440721969033
    CPU time for initialize scf      0.06 sec, wall time      0.06 sec
  HOMO = -0.236182361397958  LUMO = 119.39435618908
  mo_energy =
[-1.20173778e+02 -1.22489075e+01 -6.65166320e+00 -6.65166320e+00
 -6.65166320e+00 -1.16325358e+00 -2.36182361e-01 -2.36182361e-01
 -2.36182361e-01  1.19394356e+02  1.06100684e+03  7.42416666e+03
  3.95434035e+04]
E1 = -706.382491603316  E_coul = 198.94176963428288
cycle= 1 E= -507.440721969033  delta_E= 5.68e-14  |g|= 3.51e-11  |ddm|= 5.47e-11
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -706.382491603316  E_coul = 198.94176963428288
  HOMO = -0.236182361397414  LUMO = 119.394356189096
  mo_energy =
[-1.20173778e+02 -1.22489075e+01 -6.65166320e+00 -6.65166320e+00
 -6.65166320e+00 -1.16325358e+00 -2.36182361e-01 -2.36182361e-01
 -2.36182361e-01  1.19394356e+02  1.06100684e+03  7.42416666e+03
  3.95434035e+04]
E1 = -706.3824916033179  E_coul = 198.9417696342847
Extra cycle  E= -507.440721969033  delta_E= -1.14e-13  |g|= 1.02e-11  |ddm|= 8.1e-13
    CPU time for scf_cycle      0.13 sec, wall time      0.13 sec
exp = [1.81913518e+04 4.53246651e+03 7.33428871e+02 1.62148146e+02
 4.36741608e+01 4.75282099e+00 3.91759590e-01 8.59663275e+00
 4.90659081e-01]
grad_E = [-6.20730154e-06  8.78232912e-05 -1.90576656e-05  2.07060891e-04
 -2.29919688e-04 -7.49223193e-05 -2.70214329e-03  1.35172968e-04
 -6.19508184e-04]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((9, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.5476253398322024e+03,6.8630785798847160e+02,1.5555024230205126e+02,4.2742815896802767e+01,4.7505784169783016e+00,3.9162204394177752e-01,8.5974230426361959e+00,4.9072756124177219e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "7s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:55:36 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  18191.4397334        1
[INPUT] 0    0    [1    /1   ]  4531.31501056        1
[INPUT] 0    0    [1    /1   ]  731.9692411          1
[INPUT] 0    0    [1    /1   ]  162.09021932         1
[INPUT] 0    0    [1    /1   ]  43.6730240129        1
[INPUT] 0    0    [1    /1   ]  4.75272549822        1
[INPUT] 0    0    [1    /1   ]  0.391650617239       1
[INPUT] 1    0    [1    /1   ]  8.59676431858        1
[INPUT] 1    0    [1    /1   ]  0.49066074684        1

nuclear repulsion = 0
number of shells = 9
number of NR pGTOs = 13
number of NR cGTOs = 13
basis = {'Ar': [[0, [18191.439733408508, 1.0]], [0, [4531.315010562132, 1.0]], [0, [731.9692411002445, 1.0]], [0, [162.09021932028963, 1.0]], [0, [43.67302401289736, 1.0]], [0, [4.752725498224486, 1.0]], [0, [0.3916506172392026, 1.0]], [1, [8.596764318582215, 1.0]], [1, [0.4906607468398717, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [18191.43973341]
bas 1, expnt(s) = [4531.31501056]
bas 2, expnt(s) = [731.9692411]
bas 3, expnt(s) = [162.09021932]
bas 4, expnt(s) = [43.67302401]
bas 5, expnt(s) = [4.7527255]
bas 6, expnt(s) = [0.39165062]
bas 7, expnt(s) = [8.59676432]
bas 8, expnt(s) = [0.49066075]
CPU time:       163.09
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  1  1  1  0 38 39  0]
 [ 0  1  1  1  0 40 41  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.81914397e+04 3.95744901e+03 4.53131501e+03 1.39535019e+03
 7.31969241e+02 3.55536873e+02 1.62090219e+02 1.14771123e+02
 4.36730240e+01 4.29215081e+01 4.75272550e+00 8.13246257e+00
 3.91650617e-01 1.25080364e+00 8.59676432e+00 4.29440667e+01
 4.90660747e-01 1.19801164e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.31938971257866
cond(S) = 28.11408390000222
E1 = -688.9198956361627  E_coul = 184.91766559844817
init E= -504.002230037715
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.681263058691323  LUMO = 118.007021954385
  mo_energy =
[-1.21554318e+02 -1.32782444e+01 -7.62058858e+00 -7.62058858e+00
 -7.62058858e+00 -1.65149026e+00 -6.81263059e-01 -6.81263059e-01
 -6.81263059e-01  1.18007022e+02  1.05817795e+03  7.41703952e+03
  3.95338743e+04]
E1 = -706.4003953921303  E_coul = 198.95986080645923
cycle= 1 E= -507.440534585671  delta_E= -3.44  |g|= 0.292  |ddm|= 0.299
    CPU time for cycle= 1      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.385953
diis-c [-0.14895956  1.        ]
  HOMO = -0.236143359766734  LUMO = 119.3696626103
  mo_energy =
[-1.20168250e+02 -1.22483115e+01 -6.65073690e+00 -6.65073690e+00
 -6.65073690e+00 -1.16326124e+00 -2.36143360e-01 -2.36143360e-01
 -2.36143360e-01  1.19369663e+02  1.05952999e+03  7.41823406e+03
  3.95349459e+04]
E1 = -706.3810533893693  E_coul = 198.9402624939698
cycle= 2 E= -507.440790895399  delta_E= -0.000256  |g|= 0.00356  |ddm|= 0.00836
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00377551
diis-c [-1.38575637e-05 -1.63510192e-03  1.00163510e+00]
  HOMO = -0.236240880160538  LUMO = 119.366989433741
  mo_energy =
[-1.20173902e+02 -1.22489924e+01 -6.65178839e+00 -6.65178839e+00
 -6.65178839e+00 -1.16329783e+00 -2.36240880e-01 -2.36240880e-01
 -2.36240880e-01  1.19366989e+02  1.05952165e+03  7.41822164e+03
  3.95349318e+04]
E1 = -706.3808377351089  E_coul = 198.94004679342848
cycle= 3 E= -507.44079094168  delta_E= -4.63e-08  |g|= 5.6e-05  |ddm|= 9.82e-05
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=7.49965e-05
diis-c [-1.28003005e-10  3.95097761e-05 -2.03494544e-02  1.02030994e+00]
  HOMO = -0.236241772307241  LUMO = 119.366968399216
  mo_energy =
[-1.20173952e+02 -1.22489989e+01 -6.65179974e+00 -6.65179974e+00
 -6.65179974e+00 -1.16329808e+00 -2.36241772e-01 -2.36241772e-01
 -2.36241772e-01  1.19366968e+02  1.05952160e+03  7.41822158e+03
  3.95349317e+04]
E1 = -706.3808351596724  E_coul = 198.94004421798144
cycle= 4 E= -507.440790941691  delta_E= -1.05e-11  |g|= 1.5e-07  |ddm|= 1.29e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.3808351596724  E_coul = 198.94004421798144
  HOMO = -0.236241767505335  LUMO = 119.366968559633
  mo_energy =
[-1.20173952e+02 -1.22489988e+01 -6.65179969e+00 -6.65179969e+00
 -6.65179969e+00 -1.16329808e+00 -2.36241768e-01 -2.36241768e-01
 -2.36241768e-01  1.19366969e+02  1.05952160e+03  7.41822158e+03
  3.95349317e+04]
E1 = -706.38083517011  E_coul = 198.94004422841914
Extra cycle  E= -507.440790941691  delta_E= 1.14e-13  |g|= 2.1e-09  |ddm|= 4.27e-09
    CPU time for scf_cycle      0.10 sec, wall time      0.11 sec
exp = [1.81914397e+04 4.53131501e+03 7.31969241e+02 1.62090219e+02
 4.36730240e+01 4.75272550e+00 3.91650617e-01 8.59676432e+00
 4.90660747e-01]
E = -507.44079094169086
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((9, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.5476253398322024e+03,6.8630785798847160e+02,1.5555024230205126e+02,4.2742815896802767e+01,4.7505784169783016e+00,3.9162204394177752e-01,8.5974230426361959e+00,4.9072756124177219e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "7s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:55:37 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  18191.4397334        1
[INPUT] 0    0    [1    /1   ]  4531.31501056        1
[INPUT] 0    0    [1    /1   ]  731.9692411          1
[INPUT] 0    0    [1    /1   ]  162.09021932         1
[INPUT] 0    0    [1    /1   ]  43.6730240129        1
[INPUT] 0    0    [1    /1   ]  4.75272549822        1
[INPUT] 0    0    [1    /1   ]  0.391650617239       1
[INPUT] 1    0    [1    /1   ]  8.59676431858        1
[INPUT] 1    0    [1    /1   ]  0.49066074684        1

nuclear repulsion = 0
number of shells = 9
number of NR pGTOs = 13
number of NR cGTOs = 13
basis = {'Ar': [[0, [18191.439733408508, 1.0]], [0, [4531.315010562132, 1.0]], [0, [731.9692411002445, 1.0]], [0, [162.09021932028963, 1.0]], [0, [43.67302401289736, 1.0]], [0, [4.752725498224486, 1.0]], [0, [0.3916506172392026, 1.0]], [1, [8.596764318582215, 1.0]], [1, [0.4906607468398717, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [18191.43973341]
bas 1, expnt(s) = [4531.31501056]
bas 2, expnt(s) = [731.9692411]
bas 3, expnt(s) = [162.09021932]
bas 4, expnt(s) = [43.67302401]
bas 5, expnt(s) = [4.7527255]
bas 6, expnt(s) = [0.39165062]
bas 7, expnt(s) = [8.59676432]
bas 8, expnt(s) = [0.49066075]
CPU time:       163.86
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  1  1  1  0 38 39  0]
 [ 0  1  1  1  0 40 41  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.81914397e+04 3.95744901e+03 4.53131501e+03 1.39535019e+03
 7.31969241e+02 3.55536873e+02 1.62090219e+02 1.14771123e+02
 4.36730240e+01 4.29215081e+01 4.75272550e+00 8.13246257e+00
 3.91650617e-01 1.25080364e+00 8.59676432e+00 4.29440667e+01
 4.90660747e-01 1.19801164e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.31938971257866
cond(S) = 28.11408390000222
E1 = -688.9198956361627  E_coul = 184.91766559844817
init E= -504.002230037715
    CPU time for initialize scf      0.03 sec, wall time      0.03 sec
  HOMO = -0.681263058691323  LUMO = 118.007021954385
  mo_energy =
[-1.21554318e+02 -1.32782444e+01 -7.62058858e+00 -7.62058858e+00
 -7.62058858e+00 -1.65149026e+00 -6.81263059e-01 -6.81263059e-01
 -6.81263059e-01  1.18007022e+02  1.05817795e+03  7.41703952e+03
  3.95338743e+04]
E1 = -706.4003953921303  E_coul = 198.95986080645923
cycle= 1 E= -507.440534585671  delta_E= -3.44  |g|= 0.292  |ddm|= 0.299
    CPU time for cycle= 1      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.385953
diis-c [-0.14895956  1.        ]
  HOMO = -0.236143359766734  LUMO = 119.3696626103
  mo_energy =
[-1.20168250e+02 -1.22483115e+01 -6.65073690e+00 -6.65073690e+00
 -6.65073690e+00 -1.16326124e+00 -2.36143360e-01 -2.36143360e-01
 -2.36143360e-01  1.19369663e+02  1.05952999e+03  7.41823406e+03
  3.95349459e+04]
E1 = -706.3810533893693  E_coul = 198.9402624939698
cycle= 2 E= -507.440790895399  delta_E= -0.000256  |g|= 0.00356  |ddm|= 0.00836
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00377551
diis-c [-1.38575637e-05 -1.63510192e-03  1.00163510e+00]
  HOMO = -0.236240880160538  LUMO = 119.366989433741
  mo_energy =
[-1.20173902e+02 -1.22489924e+01 -6.65178839e+00 -6.65178839e+00
 -6.65178839e+00 -1.16329783e+00 -2.36240880e-01 -2.36240880e-01
 -2.36240880e-01  1.19366989e+02  1.05952165e+03  7.41822164e+03
  3.95349318e+04]
E1 = -706.3808377351089  E_coul = 198.94004679342848
cycle= 3 E= -507.44079094168  delta_E= -4.63e-08  |g|= 5.6e-05  |ddm|= 9.82e-05
    CPU time for cycle= 3      0.03 sec, wall time      0.03 sec
diis-norm(errvec)=7.49965e-05
diis-c [-1.28003005e-10  3.95097761e-05 -2.03494544e-02  1.02030994e+00]
  HOMO = -0.236241772307241  LUMO = 119.366968399216
  mo_energy =
[-1.20173952e+02 -1.22489989e+01 -6.65179974e+00 -6.65179974e+00
 -6.65179974e+00 -1.16329808e+00 -2.36241772e-01 -2.36241772e-01
 -2.36241772e-01  1.19366968e+02  1.05952160e+03  7.41822158e+03
  3.95349317e+04]
E1 = -706.3808351596724  E_coul = 198.94004421798144
cycle= 4 E= -507.440790941691  delta_E= -1.05e-11  |g|= 1.5e-07  |ddm|= 1.29e-06
    CPU time for cycle= 4      0.03 sec, wall time      0.03 sec
E1 = -706.3808351596724  E_coul = 198.94004421798144
  HOMO = -0.236241767505335  LUMO = 119.366968559633
  mo_energy =
[-1.20173952e+02 -1.22489988e+01 -6.65179969e+00 -6.65179969e+00
 -6.65179969e+00 -1.16329808e+00 -2.36241768e-01 -2.36241768e-01
 -2.36241768e-01  1.19366969e+02  1.05952160e+03  7.41822158e+03
  3.95349317e+04]
E1 = -706.38083517011  E_coul = 198.94004422841914
Extra cycle  E= -507.440790941691  delta_E= 1.14e-13  |g|= 2.1e-09  |ddm|= 4.27e-09
    CPU time for scf_cycle      0.14 sec, wall time      0.16 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 28.11408390000222
E1 = -706.38083517011  E_coul = 198.94004422841914
init E= -507.440790941691
    CPU time for initialize scf      0.09 sec, wall time      0.09 sec
  HOMO = -0.236241767459546  LUMO = 119.366968561117
  mo_energy =
[-1.20173952e+02 -1.22489988e+01 -6.65179969e+00 -6.65179969e+00
 -6.65179969e+00 -1.16329808e+00 -2.36241767e-01 -2.36241767e-01
 -2.36241767e-01  1.19366969e+02  1.05952160e+03  7.41822158e+03
  3.95349317e+04]
E1 = -706.3808351702348  E_coul = 198.94004422854374
cycle= 1 E= -507.440790941691  delta_E= -2.27e-13  |g|= 3.49e-11  |ddm|= 5.48e-11
    CPU time for cycle= 1      0.01 sec, wall time      0.02 sec
E1 = -706.3808351702348  E_coul = 198.94004422854374
  HOMO = -0.236241767459004  LUMO = 119.366968561133
  mo_energy =
[-1.20173952e+02 -1.22489988e+01 -6.65179969e+00 -6.65179969e+00
 -6.65179969e+00 -1.16329808e+00 -2.36241767e-01 -2.36241767e-01
 -2.36241767e-01  1.19366969e+02  1.05952160e+03  7.41822158e+03
  3.95349317e+04]
E1 = -706.3808351702365  E_coul = 198.94004422854547
Extra cycle  E= -507.440790941691  delta_E= 5.68e-14  |g|= 6.45e-12  |ddm|= 8.06e-13
    CPU time for scf_cycle      0.16 sec, wall time      0.17 sec
exp = [1.81914397e+04 4.53131501e+03 7.31969241e+02 1.62090219e+02
 4.36730240e+01 4.75272550e+00 3.91650617e-01 8.59676432e+00
 4.90660747e-01]
grad_E = [-6.22639297e-06  8.90762881e-05 -4.72784779e-05  3.36014376e-04
 -3.76561722e-04 -1.23004832e-04 -4.42409253e-03  2.21805361e-04
 -1.01431442e-03]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((9, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.5476253398322024e+03,6.8630785798847160e+02,1.5555024230205126e+02,4.2742815896802767e+01,4.7505784169783016e+00,3.9162204394177752e-01,8.5974230426361959e+00,4.9072756124177219e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "7s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:55:41 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  18191.6935742        1
[INPUT] 0    0    [1    /1   ]  4527.87770822        1
[INPUT] 0    0    [1    /1   ]  729.514107889        1
[INPUT] 0    0    [1    /1   ]  161.988917581        1
[INPUT] 0    0    [1    /1   ]  43.670415146         1
[INPUT] 0    0    [1    /1   ]  4.75256924094        1
[INPUT] 0    0    [1    /1   ]  0.39147291515        1
[INPUT] 1    0    [1    /1   ]  8.59697915777        1
[INPUT] 1    0    [1    /1   ]  0.490663479864       1

nuclear repulsion = 0
number of shells = 9
number of NR pGTOs = 13
number of NR cGTOs = 13
basis = {'Ar': [[0, [18191.693574235647, 1.0]], [0, [4527.877708219653, 1.0]], [0, [729.5141078887023, 1.0]], [0, [161.9889175810404, 1.0]], [0, [43.67041514595391, 1.0]], [0, [4.7525692409410585, 1.0]], [0, [0.3914729151498342, 1.0]], [1, [8.596979157770932, 1.0]], [1, [0.4906634798638171, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [18191.69357424]
bas 1, expnt(s) = [4527.87770822]
bas 2, expnt(s) = [729.51410789]
bas 3, expnt(s) = [161.98891758]
bas 4, expnt(s) = [43.67041515]
bas 5, expnt(s) = [4.75256924]
bas 6, expnt(s) = [0.39147292]
bas 7, expnt(s) = [8.59697916]
bas 8, expnt(s) = [0.49066348]
CPU time:       167.59
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  1  1  1  0 38 39  0]
 [ 0  1  1  1  0 40 41  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.81916936e+04 3.95749043e+03 4.52787771e+03 1.39455626e+03
 7.29514108e+02 3.54642105e+02 1.61988918e+02 1.14717322e+02
 4.36704151e+01 4.29195851e+01 4.75256924e+00 8.13226204e+00
 3.91472915e-01 1.25037797e+00 8.59697916e+00 4.29454082e+01
 4.90663480e-01 1.19801998e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319410164970527
cond(S) = 28.16304817591181
E1 = -688.9190207450355  E_coul = 184.9158435149435
init E= -504.003177230092
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.681344929649783  LUMO = 117.957067959943
  mo_energy =
[-1.21554461e+02 -1.32783528e+01 -7.62075557e+00 -7.62075557e+00
 -7.62075557e+00 -1.65148107e+00 -6.81344930e-01 -6.81344930e-01
 -6.81344930e-01  1.17957068e+02  1.05566118e+03  7.40550153e+03
  3.95152688e+04]
E1 = -706.3977783415223  E_coul = 198.95706290182903
cycle= 1 E= -507.440715439693  delta_E= -3.44  |g|= 0.292  |ddm|= 0.299
    CPU time for cycle= 1      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.386343
diis-c [-0.14926128  1.        ]
  HOMO = -0.236240179994463  LUMO = 119.319535071102
  mo_energy =
[-1.20168561e+02 -1.22484618e+01 -6.65095880e+00 -6.65095880e+00
 -6.65095880e+00 -1.16333373e+00 -2.36240180e-01 -2.36240180e-01
 -2.36240180e-01  1.19319535e+02  1.05701316e+03  7.40669612e+03
  3.95163402e+04]
E1 = -706.3784186882748  E_coul = 198.93744671457094
cycle= 2 E= -507.440971973704  delta_E= -0.000257  |g|= 0.00356  |ddm|= 0.00837
    CPU time for cycle= 2      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.0037774
diis-c [-1.38747029e-05 -1.62758201e-03  1.00162758e+00]
  HOMO = -0.236337794259639  LUMO = 119.316859854935
  mo_energy =
[-1.20174218e+02 -1.22491432e+01 -6.65201128e+00 -6.65201128e+00
 -6.65201128e+00 -1.16337034e+00 -2.36337794e-01 -2.36337794e-01
 -2.36337794e-01  1.19316860e+02  1.05700482e+03  7.40668369e+03
  3.95163261e+04]
E1 = -706.3782027813248  E_coul = 198.93723076129737
cycle= 3 E= -507.440972020027  delta_E= -4.63e-08  |g|= 5.6e-05  |ddm|= 9.84e-05
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=7.50661e-05
diis-c [-1.28407390e-10  3.93546157e-05 -2.03554600e-02  1.02031611e+00]
  HOMO = -0.236338688124175  LUMO = 119.316838767195
  mo_energy =
[-1.20174268e+02 -1.22491497e+01 -6.65202266e+00 -6.65202266e+00
 -6.65202266e+00 -1.16337059e+00 -2.36338688e-01 -2.36338688e-01
 -2.36338688e-01  1.19316839e+02  1.05700477e+03  7.40668364e+03
  3.95163261e+04]
E1 = -706.3782002006985  E_coul = 198.9372281806611
cycle= 4 E= -507.440972020037  delta_E= -9.95e-12  |g|= 1.5e-07  |ddm|= 1.3e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.3782002006985  E_coul = 198.9372281806611
  HOMO = -0.236338683304271  LUMO = 119.316838928121
  mo_energy =
[-1.20174268e+02 -1.22491497e+01 -6.65202261e+00 -6.65202261e+00
 -6.65202261e+00 -1.16337059e+00 -2.36338683e-01 -2.36338683e-01
 -2.36338683e-01  1.19316839e+02  1.05700477e+03  7.40668364e+03
  3.95163261e+04]
E1 = -706.3782002111747  E_coul = 198.93722819113708
Extra cycle  E= -507.440972020038  delta_E= -1.71e-13  |g|= 2.11e-09  |ddm|= 4.29e-09
    CPU time for scf_cycle      0.10 sec, wall time      0.11 sec
exp = [1.81916936e+04 4.52787771e+03 7.29514108e+02 1.61988918e+02
 4.36704151e+01 4.75256924e+00 3.91472915e-01 8.59697916e+00
 4.90663480e-01]
E = -507.4409720200376
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((9, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.5476253398322024e+03,6.8630785798847160e+02,1.5555024230205126e+02,4.2742815896802767e+01,4.7505784169783016e+00,3.9162204394177752e-01,8.5974230426361959e+00,4.9072756124177219e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "7s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:55:42 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  18191.6935742        1
[INPUT] 0    0    [1    /1   ]  4527.87770822        1
[INPUT] 0    0    [1    /1   ]  729.514107889        1
[INPUT] 0    0    [1    /1   ]  161.988917581        1
[INPUT] 0    0    [1    /1   ]  43.670415146         1
[INPUT] 0    0    [1    /1   ]  4.75256924094        1
[INPUT] 0    0    [1    /1   ]  0.39147291515        1
[INPUT] 1    0    [1    /1   ]  8.59697915777        1
[INPUT] 1    0    [1    /1   ]  0.490663479864       1

nuclear repulsion = 0
number of shells = 9
number of NR pGTOs = 13
number of NR cGTOs = 13
basis = {'Ar': [[0, [18191.693574235647, 1.0]], [0, [4527.877708219653, 1.0]], [0, [729.5141078887023, 1.0]], [0, [161.9889175810404, 1.0]], [0, [43.67041514595391, 1.0]], [0, [4.7525692409410585, 1.0]], [0, [0.3914729151498342, 1.0]], [1, [8.596979157770932, 1.0]], [1, [0.4906634798638171, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [18191.69357424]
bas 1, expnt(s) = [4527.87770822]
bas 2, expnt(s) = [729.51410789]
bas 3, expnt(s) = [161.98891758]
bas 4, expnt(s) = [43.67041515]
bas 5, expnt(s) = [4.75256924]
bas 6, expnt(s) = [0.39147292]
bas 7, expnt(s) = [8.59697916]
bas 8, expnt(s) = [0.49066348]
CPU time:       168.35
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  1  1  1  0 38 39  0]
 [ 0  1  1  1  0 40 41  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.81916936e+04 3.95749043e+03 4.52787771e+03 1.39455626e+03
 7.29514108e+02 3.54642105e+02 1.61988918e+02 1.14717322e+02
 4.36704151e+01 4.29195851e+01 4.75256924e+00 8.13226204e+00
 3.91472915e-01 1.25037797e+00 8.59697916e+00 4.29454082e+01
 4.90663480e-01 1.19801998e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319410164970527
cond(S) = 28.16304817591181
E1 = -688.9190207450355  E_coul = 184.9158435149435
init E= -504.003177230092
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.681344929649783  LUMO = 117.957067959943
  mo_energy =
[-1.21554461e+02 -1.32783528e+01 -7.62075557e+00 -7.62075557e+00
 -7.62075557e+00 -1.65148107e+00 -6.81344930e-01 -6.81344930e-01
 -6.81344930e-01  1.17957068e+02  1.05566118e+03  7.40550153e+03
  3.95152688e+04]
E1 = -706.3977783415223  E_coul = 198.95706290182903
cycle= 1 E= -507.440715439693  delta_E= -3.44  |g|= 0.292  |ddm|= 0.299
    CPU time for cycle= 1      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.386343
diis-c [-0.14926128  1.        ]
  HOMO = -0.236240179994463  LUMO = 119.319535071102
  mo_energy =
[-1.20168561e+02 -1.22484618e+01 -6.65095880e+00 -6.65095880e+00
 -6.65095880e+00 -1.16333373e+00 -2.36240180e-01 -2.36240180e-01
 -2.36240180e-01  1.19319535e+02  1.05701316e+03  7.40669612e+03
  3.95163402e+04]
E1 = -706.3784186882748  E_coul = 198.93744671457094
cycle= 2 E= -507.440971973704  delta_E= -0.000257  |g|= 0.00356  |ddm|= 0.00837
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.0037774
diis-c [-1.38747029e-05 -1.62758201e-03  1.00162758e+00]
  HOMO = -0.236337794259639  LUMO = 119.316859854935
  mo_energy =
[-1.20174218e+02 -1.22491432e+01 -6.65201128e+00 -6.65201128e+00
 -6.65201128e+00 -1.16337034e+00 -2.36337794e-01 -2.36337794e-01
 -2.36337794e-01  1.19316860e+02  1.05700482e+03  7.40668369e+03
  3.95163261e+04]
E1 = -706.3782027813248  E_coul = 198.93723076129737
cycle= 3 E= -507.440972020027  delta_E= -4.63e-08  |g|= 5.6e-05  |ddm|= 9.84e-05
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=7.50661e-05
diis-c [-1.28407390e-10  3.93546157e-05 -2.03554600e-02  1.02031611e+00]
  HOMO = -0.236338688124175  LUMO = 119.316838767195
  mo_energy =
[-1.20174268e+02 -1.22491497e+01 -6.65202266e+00 -6.65202266e+00
 -6.65202266e+00 -1.16337059e+00 -2.36338688e-01 -2.36338688e-01
 -2.36338688e-01  1.19316839e+02  1.05700477e+03  7.40668364e+03
  3.95163261e+04]
E1 = -706.3782002006985  E_coul = 198.9372281806611
cycle= 4 E= -507.440972020037  delta_E= -9.95e-12  |g|= 1.5e-07  |ddm|= 1.3e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.3782002006985  E_coul = 198.9372281806611
  HOMO = -0.236338683304271  LUMO = 119.316838928121
  mo_energy =
[-1.20174268e+02 -1.22491497e+01 -6.65202261e+00 -6.65202261e+00
 -6.65202261e+00 -1.16337059e+00 -2.36338683e-01 -2.36338683e-01
 -2.36338683e-01  1.19316839e+02  1.05700477e+03  7.40668364e+03
  3.95163261e+04]
E1 = -706.3782002111747  E_coul = 198.93722819113708
Extra cycle  E= -507.440972020038  delta_E= -1.71e-13  |g|= 2.11e-09  |ddm|= 4.29e-09
    CPU time for scf_cycle      0.10 sec, wall time      0.11 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 28.16304817591181
E1 = -706.3782002111747  E_coul = 198.93722819113708
init E= -507.440972020038
    CPU time for initialize scf      0.06 sec, wall time      0.06 sec
  HOMO = -0.236338683258307  LUMO = 119.31683892961
  mo_energy =
[-1.20174268e+02 -1.22491497e+01 -6.65202261e+00 -6.65202261e+00
 -6.65202261e+00 -1.16337059e+00 -2.36338683e-01 -2.36338683e-01
 -2.36338683e-01  1.19316839e+02  1.05700477e+03  7.40668364e+03
  3.95163261e+04]
E1 = -706.3782002112999  E_coul = 198.93722819126205
cycle= 1 E= -507.440972020038  delta_E= -2.84e-13  |g|= 3.59e-11  |ddm|= 5.5e-11
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -706.3782002112999  E_coul = 198.93722819126205
  HOMO = -0.236338683257766  LUMO = 119.316838929626
  mo_energy =
[-1.20174268e+02 -1.22491497e+01 -6.65202261e+00 -6.65202261e+00
 -6.65202261e+00 -1.16337059e+00 -2.36338683e-01 -2.36338683e-01
 -2.36338683e-01  1.19316839e+02  1.05700477e+03  7.40668364e+03
  3.95163261e+04]
E1 = -706.3782002113015  E_coul = 198.93722819126367
Extra cycle  E= -507.440972020038  delta_E=    0  |g|= 1.12e-11  |ddm|= 8.18e-13
    CPU time for scf_cycle      0.13 sec, wall time      0.13 sec
exp = [1.81916936e+04 4.52787771e+03 7.29514108e+02 1.61988918e+02
 4.36704151e+01 4.75256924e+00 3.91472915e-01 8.59697916e+00
 4.90663480e-01]
grad_E = [-6.25709577e-06  9.11238059e-05 -9.33195972e-05  5.46369358e-04
 -6.15858652e-04 -2.01414437e-04 -7.23242029e-03  3.63073371e-04
 -1.65820977e-03]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((9, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.5476253398322024e+03,6.8630785798847160e+02,1.5555024230205126e+02,4.2742815896802767e+01,4.7505784169783016e+00,3.9162204394177752e-01,8.5974230426361959e+00,4.9072756124177219e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "7s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:55:45 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  18192.3976268        1
[INPUT] 0    0    [1    /1   ]  4518.1752623         1
[INPUT] 0    0    [1    /1   ]  725.297474297        1
[INPUT] 0    0    [1    /1   ]  161.805612197        1
[INPUT] 0    0    [1    /1   ]  43.664269807         1
[INPUT] 0    0    [1    /1   ]  4.75231158556        1
[INPUT] 0    0    [1    /1   ]  0.391181582954       1
[INPUT] 1    0    [1    /1   ]  8.59733207706        1
[INPUT] 1    0    [1    /1   ]  0.490667998502       1

nuclear repulsion = 0
number of shells = 9
number of NR pGTOs = 13
number of NR cGTOs = 13
basis = {'Ar': [[0, [18192.39762680977, 1.0]], [0, [4518.175262300292, 1.0]], [0, [725.2974742966535, 1.0]], [0, [161.80561219685399, 1.0]], [0, [43.66426980701081, 1.0]], [0, [4.752311585561803, 1.0]], [0, [0.39118158295435923, 1.0]], [1, [8.597332077059434, 1.0]], [1, [0.49066799850159587, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [18192.39762681]
bas 1, expnt(s) = [4518.1752623]
bas 2, expnt(s) = [725.2974743]
bas 3, expnt(s) = [161.8056122]
bas 4, expnt(s) = [43.66426981]
bas 5, expnt(s) = [4.75231159]
bas 6, expnt(s) = [0.39118158]
bas 7, expnt(s) = [8.59733208]
bas 8, expnt(s) = [0.490668]
CPU time:       171.86
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  1  1  1  0 38 39  0]
 [ 0  1  1  1  0 40 41  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.81923976e+04 3.95760530e+03 4.51817526e+03 1.39231445e+03
 7.25297474e+02 3.53103602e+02 1.61805612e+02 1.14619949e+02
 4.36642698e+01 4.29150552e+01 4.75231159e+00 8.13193137e+00
 3.91181583e-01 1.24968001e+00 8.59733208e+00 4.29476119e+01
 4.90667999e-01 1.19803377e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319443354152845
cond(S) = 28.253789330856023
E1 = -688.9175820458823  E_coul = 184.9128523436097
init E= -504.004729702273
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.681479354516567  LUMO = 117.861449095599
  mo_energy =
[-1.21554781e+02 -1.32785354e+01 -7.62102974e+00 -7.62102974e+00
 -7.62102974e+00 -1.65146570e+00 -6.81479355e-01 -6.81479355e-01
 -6.81479355e-01  1.17861449e+02  1.05129393e+03  7.38179077e+03
  3.94722810e+04]
E1 = -706.3936648733022  E_coul = 198.9524734749433
cycle= 1 E= -507.441191398359  delta_E= -3.44  |g|= 0.292  |ddm|=  0.3
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.386946
diis-c [-0.14972749  1.        ]
  HOMO = -0.236399008825191  LUMO = 119.223623827491
  mo_energy =
[-1.20169153e+02 -1.22487132e+01 -6.65132326e+00 -6.65132326e+00
 -6.65132326e+00 -1.16345244e+00 -2.36399009e-01 -2.36399009e-01
 -2.36399009e-01  1.19223624e+02  1.05264584e+03  7.38298552e+03
  3.94733521e+04]
E1 = -706.3742728392774  E_coul = 198.9328244895408
cycle= 2 E= -507.441448349737  delta_E= -0.000257  |g|= 0.00356  |ddm|= 0.00839
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00378104
diis-c [-1.39069129e-05 -1.61532004e-03  1.00161532e+00]
  HOMO = -0.236496798223545  LUMO = 119.220945024546
  mo_energy =
[-1.20174820e+02 -1.22493957e+01 -6.65237759e+00 -6.65237759e+00
 -6.65237759e+00 -1.16348908e+00 -2.36496798e-01 -2.36496798e-01
 -2.36496798e-01  1.19220945e+02  1.05263749e+03  7.38297308e+03
  3.94733380e+04]
E1 = -706.3740564593546  E_coul = 198.93260806321032
cycle= 3 E= -507.441448396144  delta_E= -4.64e-08  |g|= 5.61e-05  |ddm|= 9.86e-05
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=7.51968e-05
diis-c [-1.29117959e-10  3.91074109e-05 -2.03668039e-02  1.02032770e+00]
  HOMO = -0.236497695174852  LUMO = 119.220923844046
  mo_energy =
[-1.20174870e+02 -1.22494023e+01 -6.65238900e+00 -6.65238900e+00
 -6.65238900e+00 -1.16348934e+00 -2.36497695e-01 -2.36497695e-01
 -2.36497695e-01  1.19220924e+02  1.05263744e+03  7.38297302e+03
  3.94733379e+04]
E1 = -706.374053869265  E_coul = 198.93260547311053
cycle= 4 E= -507.441448396154  delta_E= -1.02e-11  |g|= 1.51e-07  |ddm|= 1.3e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.374053869265  E_coul = 198.93260547311053
  HOMO = -0.236497690323679  LUMO = 119.220924005834
  mo_energy =
[-1.20174870e+02 -1.22494022e+01 -6.65238895e+00 -6.65238895e+00
 -6.65238895e+00 -1.16348933e+00 -2.36497690e-01 -2.36497690e-01
 -2.36497690e-01  1.19220924e+02  1.05263744e+03  7.38297302e+03
  3.94733379e+04]
E1 = -706.3740538798082  E_coul = 198.93260548365342
Extra cycle  E= -507.441448396155  delta_E= -2.84e-13  |g|= 2.12e-09  |ddm|= 4.32e-09
    CPU time for scf_cycle      0.10 sec, wall time      0.10 sec
exp = [1.81923976e+04 4.51817526e+03 7.25297474e+02 1.61805612e+02
 4.36642698e+01 4.75231159e+00 3.91181583e-01 8.59733208e+00
 4.90667999e-01]
E = -507.4414483961548
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((9, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.5476253398322024e+03,6.8630785798847160e+02,1.5555024230205126e+02,4.2742815896802767e+01,4.7505784169783016e+00,3.9162204394177752e-01,8.5974230426361959e+00,4.9072756124177219e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "7s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:55:46 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  18192.3976268        1
[INPUT] 0    0    [1    /1   ]  4518.1752623         1
[INPUT] 0    0    [1    /1   ]  725.297474297        1
[INPUT] 0    0    [1    /1   ]  161.805612197        1
[INPUT] 0    0    [1    /1   ]  43.664269807         1
[INPUT] 0    0    [1    /1   ]  4.75231158556        1
[INPUT] 0    0    [1    /1   ]  0.391181582954       1
[INPUT] 1    0    [1    /1   ]  8.59733207706        1
[INPUT] 1    0    [1    /1   ]  0.490667998502       1

nuclear repulsion = 0
number of shells = 9
number of NR pGTOs = 13
number of NR cGTOs = 13
basis = {'Ar': [[0, [18192.39762680977, 1.0]], [0, [4518.175262300292, 1.0]], [0, [725.2974742966535, 1.0]], [0, [161.80561219685399, 1.0]], [0, [43.66426980701081, 1.0]], [0, [4.752311585561803, 1.0]], [0, [0.39118158295435923, 1.0]], [1, [8.597332077059434, 1.0]], [1, [0.49066799850159587, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [18192.39762681]
bas 1, expnt(s) = [4518.1752623]
bas 2, expnt(s) = [725.2974743]
bas 3, expnt(s) = [161.8056122]
bas 4, expnt(s) = [43.66426981]
bas 5, expnt(s) = [4.75231159]
bas 6, expnt(s) = [0.39118158]
bas 7, expnt(s) = [8.59733208]
bas 8, expnt(s) = [0.490668]
CPU time:       172.58
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  1  1  1  0 38 39  0]
 [ 0  1  1  1  0 40 41  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.81923976e+04 3.95760530e+03 4.51817526e+03 1.39231445e+03
 7.25297474e+02 3.53103602e+02 1.61805612e+02 1.14619949e+02
 4.36642698e+01 4.29150552e+01 4.75231159e+00 8.13193137e+00
 3.91181583e-01 1.24968001e+00 8.59733208e+00 4.29476119e+01
 4.90667999e-01 1.19803377e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319443354152845
cond(S) = 28.253789330856023
E1 = -688.9175820458823  E_coul = 184.9128523436097
init E= -504.004729702273
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.681479354516567  LUMO = 117.861449095599
  mo_energy =
[-1.21554781e+02 -1.32785354e+01 -7.62102974e+00 -7.62102974e+00
 -7.62102974e+00 -1.65146570e+00 -6.81479355e-01 -6.81479355e-01
 -6.81479355e-01  1.17861449e+02  1.05129393e+03  7.38179077e+03
  3.94722810e+04]
E1 = -706.3936648733022  E_coul = 198.9524734749433
cycle= 1 E= -507.441191398359  delta_E= -3.44  |g|= 0.292  |ddm|=  0.3
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.386946
diis-c [-0.14972749  1.        ]
  HOMO = -0.236399008825191  LUMO = 119.223623827491
  mo_energy =
[-1.20169153e+02 -1.22487132e+01 -6.65132326e+00 -6.65132326e+00
 -6.65132326e+00 -1.16345244e+00 -2.36399009e-01 -2.36399009e-01
 -2.36399009e-01  1.19223624e+02  1.05264584e+03  7.38298552e+03
  3.94733521e+04]
E1 = -706.3742728392774  E_coul = 198.9328244895408
cycle= 2 E= -507.441448349737  delta_E= -0.000257  |g|= 0.00356  |ddm|= 0.00839
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00378104
diis-c [-1.39069129e-05 -1.61532004e-03  1.00161532e+00]
  HOMO = -0.236496798223545  LUMO = 119.220945024546
  mo_energy =
[-1.20174820e+02 -1.22493957e+01 -6.65237759e+00 -6.65237759e+00
 -6.65237759e+00 -1.16348908e+00 -2.36496798e-01 -2.36496798e-01
 -2.36496798e-01  1.19220945e+02  1.05263749e+03  7.38297308e+03
  3.94733380e+04]
E1 = -706.3740564593546  E_coul = 198.93260806321032
cycle= 3 E= -507.441448396144  delta_E= -4.64e-08  |g|= 5.61e-05  |ddm|= 9.86e-05
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=7.51968e-05
diis-c [-1.29117959e-10  3.91074109e-05 -2.03668039e-02  1.02032770e+00]
  HOMO = -0.236497695174852  LUMO = 119.220923844046
  mo_energy =
[-1.20174870e+02 -1.22494023e+01 -6.65238900e+00 -6.65238900e+00
 -6.65238900e+00 -1.16348934e+00 -2.36497695e-01 -2.36497695e-01
 -2.36497695e-01  1.19220924e+02  1.05263744e+03  7.38297302e+03
  3.94733379e+04]
E1 = -706.374053869265  E_coul = 198.93260547311053
cycle= 4 E= -507.441448396154  delta_E= -1.02e-11  |g|= 1.51e-07  |ddm|= 1.3e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.374053869265  E_coul = 198.93260547311053
  HOMO = -0.236497690323679  LUMO = 119.220924005834
  mo_energy =
[-1.20174870e+02 -1.22494022e+01 -6.65238895e+00 -6.65238895e+00
 -6.65238895e+00 -1.16348933e+00 -2.36497690e-01 -2.36497690e-01
 -2.36497690e-01  1.19220924e+02  1.05263744e+03  7.38297302e+03
  3.94733379e+04]
E1 = -706.3740538798082  E_coul = 198.93260548365342
Extra cycle  E= -507.441448396155  delta_E= -2.84e-13  |g|= 2.12e-09  |ddm|= 4.32e-09
    CPU time for scf_cycle      0.10 sec, wall time      0.10 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 28.253789330856023
E1 = -706.3740538798082  E_coul = 198.93260548365342
init E= -507.441448396155
    CPU time for initialize scf      0.07 sec, wall time      0.07 sec
  HOMO = -0.23649769027741  LUMO = 119.220924007333
  mo_energy =
[-1.20174870e+02 -1.22494022e+01 -6.65238895e+00 -6.65238895e+00
 -6.65238895e+00 -1.16348933e+00 -2.36497690e-01 -2.36497690e-01
 -2.36497690e-01  1.19220924e+02  1.05263744e+03  7.38297302e+03
  3.94733379e+04]
E1 = -706.3740538799333  E_coul = 198.93260548377896
cycle= 1 E= -507.441448396154  delta_E= 4.55e-13  |g|= 3.54e-11  |ddm|= 5.54e-11
    CPU time for cycle= 1      0.02 sec, wall time      0.02 sec
E1 = -706.3740538799333  E_coul = 198.93260548377896
  HOMO = -0.23649769027687  LUMO = 119.220924007349
  mo_energy =
[-1.20174870e+02 -1.22494022e+01 -6.65238895e+00 -6.65238895e+00
 -6.65238895e+00 -1.16348933e+00 -2.36497690e-01 -2.36497690e-01
 -2.36497690e-01  1.19220924e+02  1.05263744e+03  7.38297302e+03
  3.94733379e+04]
E1 = -706.3740538799357  E_coul = 198.93260548378075
Extra cycle  E= -507.441448396155  delta_E= -5.68e-13  |g|= 4.33e-12  |ddm|= 7.98e-13
    CPU time for scf_cycle      0.16 sec, wall time      0.17 sec
exp = [1.81923976e+04 4.51817526e+03 7.25297474e+02 1.61805612e+02
 4.36642698e+01 4.75231159e+00 3.91181583e-01 8.59733208e+00
 4.90667999e-01]
grad_E = [-6.30659874e-06  9.44989737e-05 -1.68883084e-04  8.91495533e-04
 -1.00884957e-03 -3.29958490e-04 -1.18378724e-02  5.94657184e-04
 -2.71417138e-03]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((9, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.5476253398322024e+03,6.8630785798847160e+02,1.5555024230205126e+02,4.2742815896802767e+01,4.7505784169783016e+00,3.9162204394177752e-01,8.5974230426361959e+00,4.9072756124177219e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "7s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:55:50 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  18194.3113436        1
[INPUT] 0    0    [1    /1   ]  4491.54225918        1
[INPUT] 0    0    [1    /1   ]  717.83622528         1
[INPUT] 0    0    [1    /1   ]  161.460011683        1
[INPUT] 0    0    [1    /1   ]  43.6496687928        1
[INPUT] 0    0    [1    /1   ]  4.75188093623        1
[INPUT] 0    0    [1    /1   ]  0.390699453267       1
[INPUT] 1    0    [1    /1   ]  8.59791771193        1
[INPUT] 1    0    [1    /1   ]  0.490675554437       1

nuclear repulsion = 0
number of shells = 9
number of NR pGTOs = 13
number of NR cGTOs = 13
basis = {'Ar': [[0, [18194.311343631154, 1.0]], [0, [4491.542259180728, 1.0]], [0, [717.8362252802041, 1.0]], [0, [161.46001168282146, 1.0]], [0, [43.649668792791594, 1.0]], [0, [4.751880936231698, 1.0]], [0, [0.3906994532669945, 1.0]], [1, [8.59791771192914, 1.0]], [1, [0.4906755544371497, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [18194.31134363]
bas 1, expnt(s) = [4491.54225918]
bas 2, expnt(s) = [717.83622528]
bas 3, expnt(s) = [161.46001168]
bas 4, expnt(s) = [43.64966879]
bas 5, expnt(s) = [4.75188094]
bas 6, expnt(s) = [0.39069945]
bas 7, expnt(s) = [8.59791771]
bas 8, expnt(s) = [0.49067555]
CPU time:       176.13
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  1  1  1  0 38 39  0]
 [ 0  1  1  1  0 40 41  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.81943113e+04 3.95791753e+03 4.49154226e+03 1.38615451e+03
 7.17836225e+02 3.50375760e+02 1.61460012e+02 1.14436287e+02
 4.36496688e+01 4.29042919e+01 4.75188094e+00 8.13137869e+00
 3.90699453e-01 1.24852467e+00 8.59791771e+00 4.29512688e+01
 4.90675554e-01 1.19805683e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.3194972883383
cond(S) = 28.432737376117053
E1 = -688.9152236976846  E_coul = 184.90789006179676
init E= -504.007333635888
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.681702441950401  LUMO = 117.669726288333
  mo_energy =
[-1.21555532e+02 -1.32788507e+01 -7.62148456e+00 -7.62148456e+00
 -7.62148456e+00 -1.65143957e+00 -6.81702442e-01 -6.81702442e-01
 -6.81702442e-01  1.17669726e+02  1.04346481e+03  7.33012233e+03
  3.93686872e+04]
E1 = -706.3873218499596  E_coul = 198.94487323371752
cycle= 1 E= -507.442448616242  delta_E= -3.44  |g|= 0.293  |ddm|=  0.3
    CPU time for cycle= 1      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.387838
diis-c [-0.15041827  1.        ]
  HOMO = -0.236662148908912  LUMO = 119.03139840089
  mo_energy =
[-1.20170353e+02 -1.22491432e+01 -6.65192798e+00 -6.65192798e+00
 -6.65192798e+00 -1.16364856e+00 -2.36662149e-01 -2.36662149e-01
 -2.36662149e-01  1.19031398e+02  1.04481664e+03  7.33131754e+03
  3.93697578e+04]
E1 = -706.3678677702319  E_coul = 198.9251613893201
cycle= 2 E= -507.442706380912  delta_E= -0.000258  |g|= 0.00356  |ddm|= 0.00842
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00378841
diis-c [-1.39704667e-05 -1.59532891e-03  1.00159533e+00]
  HOMO = -0.236760280514163  LUMO = 119.028713076099
  mo_energy =
[-1.20176036e+02 -1.22498279e+01 -6.65298592e+00 -6.65298592e+00
 -6.65298592e+00 -1.16368527e+00 -2.36760281e-01 -2.36760281e-01
 -2.36760281e-01  1.19028713e+02  1.04480829e+03  7.33130508e+03
  3.93697437e+04]
E1 = -706.3676504626163  E_coul = 198.92494403512032
cycle= 3 E= -507.442706427496  delta_E= -4.66e-08  |g|= 5.62e-05  |ddm|= 9.9e-05
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=7.54535e-05
diis-c [-1.30410724e-10  3.87180018e-05 -2.03891399e-02  1.02035042e+00]
  HOMO = -0.236761183230857  LUMO = 119.028691728779
  mo_energy =
[-1.20176087e+02 -1.22498345e+01 -6.65299741e+00 -6.65299741e+00
 -6.65299741e+00 -1.16368553e+00 -2.36761183e-01 -2.36761183e-01
 -2.36761183e-01  1.19028692e+02  1.04480824e+03  7.33130502e+03
  3.93697436e+04]
E1 = -706.3676478545243  E_coul = 198.92494142701756
cycle= 4 E= -507.442706427507  delta_E= -1.08e-11  |g|= 1.53e-07  |ddm|= 1.31e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.3676478545243  E_coul = 198.92494142701756
  HOMO = -0.236761178323699  LUMO = 119.028691892056
  mo_energy =
[-1.20176087e+02 -1.22498345e+01 -6.65299735e+00 -6.65299735e+00
 -6.65299735e+00 -1.16368553e+00 -2.36761178e-01 -2.36761178e-01
 -2.36761178e-01  1.19028692e+02  1.04480824e+03  7.33130502e+03
  3.93697436e+04]
E1 = -706.3676478651872  E_coul = 198.92494143768081
Extra cycle  E= -507.442706427506  delta_E= 3.41e-13  |g|= 2.14e-09  |ddm|= 4.37e-09
    CPU time for scf_cycle      0.10 sec, wall time      0.11 sec
exp = [1.81943113e+04 4.49154226e+03 7.17836225e+02 1.61460012e+02
 4.36496688e+01 4.75188094e+00 3.90699453e-01 8.59791771e+00
 4.90675554e-01]
E = -507.44270642750644
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((9, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.5476253398322024e+03,6.8630785798847160e+02,1.5555024230205126e+02,4.2742815896802767e+01,4.7505784169783016e+00,3.9162204394177752e-01,8.5974230426361959e+00,4.9072756124177219e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "7s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:55:51 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  18194.3113436        1
[INPUT] 0    0    [1    /1   ]  4491.54225918        1
[INPUT] 0    0    [1    /1   ]  717.83622528         1
[INPUT] 0    0    [1    /1   ]  161.460011683        1
[INPUT] 0    0    [1    /1   ]  43.6496687928        1
[INPUT] 0    0    [1    /1   ]  4.75188093623        1
[INPUT] 0    0    [1    /1   ]  0.390699453267       1
[INPUT] 1    0    [1    /1   ]  8.59791771193        1
[INPUT] 1    0    [1    /1   ]  0.490675554437       1

nuclear repulsion = 0
number of shells = 9
number of NR pGTOs = 13
number of NR cGTOs = 13
basis = {'Ar': [[0, [18194.311343631154, 1.0]], [0, [4491.542259180728, 1.0]], [0, [717.8362252802041, 1.0]], [0, [161.46001168282146, 1.0]], [0, [43.649668792791594, 1.0]], [0, [4.751880936231698, 1.0]], [0, [0.3906994532669945, 1.0]], [1, [8.59791771192914, 1.0]], [1, [0.4906755544371497, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [18194.31134363]
bas 1, expnt(s) = [4491.54225918]
bas 2, expnt(s) = [717.83622528]
bas 3, expnt(s) = [161.46001168]
bas 4, expnt(s) = [43.64966879]
bas 5, expnt(s) = [4.75188094]
bas 6, expnt(s) = [0.39069945]
bas 7, expnt(s) = [8.59791771]
bas 8, expnt(s) = [0.49067555]
CPU time:       176.90
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  1  1  1  0 38 39  0]
 [ 0  1  1  1  0 40 41  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.81943113e+04 3.95791753e+03 4.49154226e+03 1.38615451e+03
 7.17836225e+02 3.50375760e+02 1.61460012e+02 1.14436287e+02
 4.36496688e+01 4.29042919e+01 4.75188094e+00 8.13137869e+00
 3.90699453e-01 1.24852467e+00 8.59791771e+00 4.29512688e+01
 4.90675554e-01 1.19805683e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.3194972883383
cond(S) = 28.432737376117053
E1 = -688.9152236976846  E_coul = 184.90789006179676
init E= -504.007333635888
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.681702441950401  LUMO = 117.669726288333
  mo_energy =
[-1.21555532e+02 -1.32788507e+01 -7.62148456e+00 -7.62148456e+00
 -7.62148456e+00 -1.65143957e+00 -6.81702442e-01 -6.81702442e-01
 -6.81702442e-01  1.17669726e+02  1.04346481e+03  7.33012233e+03
  3.93686872e+04]
E1 = -706.3873218499596  E_coul = 198.94487323371752
cycle= 1 E= -507.442448616242  delta_E= -3.44  |g|= 0.293  |ddm|=  0.3
    CPU time for cycle= 1      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.387838
diis-c [-0.15041827  1.        ]
  HOMO = -0.236662148908912  LUMO = 119.03139840089
  mo_energy =
[-1.20170353e+02 -1.22491432e+01 -6.65192798e+00 -6.65192798e+00
 -6.65192798e+00 -1.16364856e+00 -2.36662149e-01 -2.36662149e-01
 -2.36662149e-01  1.19031398e+02  1.04481664e+03  7.33131754e+03
  3.93697578e+04]
E1 = -706.3678677702319  E_coul = 198.9251613893201
cycle= 2 E= -507.442706380912  delta_E= -0.000258  |g|= 0.00356  |ddm|= 0.00842
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00378841
diis-c [-1.39704667e-05 -1.59532891e-03  1.00159533e+00]
  HOMO = -0.236760280514163  LUMO = 119.028713076099
  mo_energy =
[-1.20176036e+02 -1.22498279e+01 -6.65298592e+00 -6.65298592e+00
 -6.65298592e+00 -1.16368527e+00 -2.36760281e-01 -2.36760281e-01
 -2.36760281e-01  1.19028713e+02  1.04480829e+03  7.33130508e+03
  3.93697437e+04]
E1 = -706.3676504626163  E_coul = 198.92494403512032
cycle= 3 E= -507.442706427496  delta_E= -4.66e-08  |g|= 5.62e-05  |ddm|= 9.9e-05
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=7.54535e-05
diis-c [-1.30410724e-10  3.87180018e-05 -2.03891399e-02  1.02035042e+00]
  HOMO = -0.236761183230857  LUMO = 119.028691728779
  mo_energy =
[-1.20176087e+02 -1.22498345e+01 -6.65299741e+00 -6.65299741e+00
 -6.65299741e+00 -1.16368553e+00 -2.36761183e-01 -2.36761183e-01
 -2.36761183e-01  1.19028692e+02  1.04480824e+03  7.33130502e+03
  3.93697436e+04]
E1 = -706.3676478545243  E_coul = 198.92494142701756
cycle= 4 E= -507.442706427507  delta_E= -1.08e-11  |g|= 1.53e-07  |ddm|= 1.31e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.3676478545243  E_coul = 198.92494142701756
  HOMO = -0.236761178323699  LUMO = 119.028691892056
  mo_energy =
[-1.20176087e+02 -1.22498345e+01 -6.65299735e+00 -6.65299735e+00
 -6.65299735e+00 -1.16368553e+00 -2.36761178e-01 -2.36761178e-01
 -2.36761178e-01  1.19028692e+02  1.04480824e+03  7.33130502e+03
  3.93697436e+04]
E1 = -706.3676478651872  E_coul = 198.92494143768081
Extra cycle  E= -507.442706427506  delta_E= 3.41e-13  |g|= 2.14e-09  |ddm|= 4.37e-09
    CPU time for scf_cycle      0.10 sec, wall time      0.11 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 28.432737376117053
E1 = -706.3676478651872  E_coul = 198.92494143768081
init E= -507.442706427506
    CPU time for initialize scf      0.07 sec, wall time      0.07 sec
  HOMO = -0.236761178276888  LUMO = 119.028691893572
  mo_energy =
[-1.20176087e+02 -1.22498345e+01 -6.65299735e+00 -6.65299735e+00
 -6.65299735e+00 -1.16368553e+00 -2.36761178e-01 -2.36761178e-01
 -2.36761178e-01  1.19028692e+02  1.04480824e+03  7.33130502e+03
  3.93697436e+04]
E1 = -706.3676478653142  E_coul = 198.92494143780803
cycle= 1 E= -507.442706427506  delta_E= 2.27e-13  |g|= 3.49e-11  |ddm|= 5.61e-11
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -706.3676478653142  E_coul = 198.92494143780803
  HOMO = -0.236761178276335  LUMO = 119.028691893588
  mo_energy =
[-1.20176087e+02 -1.22498345e+01 -6.65299735e+00 -6.65299735e+00
 -6.65299735e+00 -1.16368553e+00 -2.36761178e-01 -2.36761178e-01
 -2.36761178e-01  1.19028692e+02  1.04480824e+03  7.33130502e+03
  3.93697436e+04]
E1 = -706.3676478653158  E_coul = 198.92494143780965
Extra cycle  E= -507.442706427506  delta_E= 5.68e-14  |g|= 2.94e-12  |ddm|= 8.26e-13
    CPU time for scf_cycle      0.14 sec, wall time      0.14 sec
exp = [1.81943113e+04 4.49154226e+03 7.17836225e+02 1.61460012e+02
 4.36496688e+01 4.75188094e+00 3.90699453e-01 8.59791771e+00
 4.90675554e-01]
grad_E = [-6.38724931e-06  1.00161086e-04 -2.94224104e-04  1.46351972e-03
 -1.66189447e-03 -5.42620763e-04 -1.94650438e-02  9.77857151e-04
 -4.46302868e-03]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((9, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.5476253398322024e+03,6.8630785798847160e+02,1.5555024230205126e+02,4.2742815896802767e+01,4.7505784169783016e+00,3.9162204394177752e-01,8.5974230426361959e+00,4.9072756124177219e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "7s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:55:54 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  18199.4757302        1
[INPUT] 0    0    [1    /1   ]  4419.2559036         1
[INPUT] 0    0    [1    /1   ]  704.062720741        1
[INPUT] 0    0    [1    /1   ]  160.77845184         1
[INPUT] 0    0    [1    /1   ]  43.6153921039        1
[INPUT] 0    0    [1    /1   ]  4.75114173422        1
[INPUT] 0    0    [1    /1   ]  0.389886542901       1
[INPUT] 1    0    [1    /1   ]  8.59890831298        1
[INPUT] 1    0    [1    /1   ]  0.49068841059        1

nuclear repulsion = 0
number of shells = 9
number of NR pGTOs = 13
number of NR cGTOs = 13
basis = {'Ar': [[0, [18199.475730188093, 1.0]], [0, [4419.255903603727, 1.0]], [0, [704.0627207406759, 1.0]], [0, [160.7784518397047, 1.0]], [0, [43.61539210387252, 1.0]], [0, [4.751141734217717, 1.0]], [0, [0.38988654290070945, 1.0]], [1, [8.598908312979443, 1.0]], [1, [0.4906884105903644, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [18199.47573019]
bas 1, expnt(s) = [4419.2559036]
bas 2, expnt(s) = [704.06272074]
bas 3, expnt(s) = [160.77845184]
bas 4, expnt(s) = [43.6153921]
bas 5, expnt(s) = [4.75114173]
bas 6, expnt(s) = [0.38988654]
bas 7, expnt(s) = [8.59890831]
bas 8, expnt(s) = [0.49068841]
CPU time:       180.51
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  1  1  1  0 38 39  0]
 [ 0  1  1  1  0 40 41  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.81994757e+04 3.95876008e+03 4.41925590e+03 1.36938917e+03
 7.04062721e+02 3.45321435e+02 1.60778452e+02 1.14073799e+02
 4.36153921e+01 4.28790209e+01 4.75114173e+00 8.13042998e+00
 3.89886543e-01 1.24657585e+00 8.59890831e+00 4.29574547e+01
 4.90688411e-01 1.19809607e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319585162220083
cond(S) = 28.8181406694649
E1 = -688.9114487370593  E_coul = 184.89948341925665
init E= -504.011965317803
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.682080668965322  LUMO = 117.268791882583
  mo_energy =
[-1.21557382e+02 -1.32794215e+01 -7.62225441e+00 -7.62225441e+00
 -7.62225441e+00 -1.65139409e+00 -6.82080669e-01 -6.82080669e-01
 -6.82080669e-01  1.17268792e+02  1.02880732e+03  7.21090386e+03
  3.91098909e+04]
E1 = -706.3778515583659  E_coul = 198.93205182697443
cycle= 1 E= -507.445799731392  delta_E= -3.43  |g|= 0.293  |ddm|=  0.3
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.389025
diis-c [-0.15134051  1.        ]
  HOMO = -0.237106739526337  LUMO = 118.629575300601
  mo_energy =
[-1.20172942e+02 -1.22499079e+01 -6.65295104e+00 -6.65295104e+00
 -6.65295104e+00 -1.16397845e+00 -2.37106740e-01 -2.37106740e-01
 -2.37106740e-01  1.18629575e+02  1.03015913e+03  7.21210034e+03
  3.91109610e+04]
E1 = -706.3582729768755  E_coul = 198.91221381821833
cycle= 2 E= -507.446059158657  delta_E= -0.000259  |g|= 0.00357  |ddm|= 0.00849
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00380408
diis-c [-1.41024934e-05 -1.56301803e-03  1.00156302e+00]
  HOMO = -0.237205572422765  LUMO = 118.626877656835
  mo_energy =
[-1.20178660e+02 -1.22505970e+01 -6.65401636e+00 -6.65401636e+00
 -6.65401636e+00 -1.16401533e+00 -2.37205572e-01 -2.37205572e-01
 -2.37205572e-01  1.18626878e+02  1.03015078e+03  7.21208785e+03
  3.91109468e+04]
E1 = -706.3580537601435  E_coul = 198.9119945545151
cycle= 3 E= -507.446059205628  delta_E= -4.7e-08  |g|= 5.65e-05  |ddm|= 9.99e-05
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=7.59814e-05
diis-c [-1.32865826e-10  3.81197581e-05 -2.04346906e-02  1.02039657e+00]
  HOMO = -0.237206486368217  LUMO = 118.626855998251
  mo_energy =
[-1.20178712e+02 -1.22506036e+01 -6.65402798e+00 -6.65402798e+00
 -6.65402798e+00 -1.16401558e+00 -2.37206486e-01 -2.37206486e-01
 -2.37206486e-01  1.18626856e+02  1.03015072e+03  7.21208779e+03
  3.91109467e+04]
E1 = -706.3580511162255  E_coul = 198.91199191058647
cycle= 4 E= -507.446059205639  delta_E= -1.06e-11  |g|= 1.56e-07  |ddm|= 1.33e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.3580511162255  E_coul = 198.91199191058647
  HOMO = -0.237206481357265  LUMO = 118.626856164164
  mo_energy =
[-1.20178711e+02 -1.22506036e+01 -6.65402793e+00 -6.65402793e+00
 -6.65402793e+00 -1.16401558e+00 -2.37206481e-01 -2.37206481e-01
 -2.37206481e-01  1.18626856e+02  1.03015072e+03  7.21208779e+03
  3.91109467e+04]
E1 = -706.3580511271151  E_coul = 198.91199192147596
Extra cycle  E= -507.446059205639  delta_E= -1.14e-13  |g|= 2.18e-09  |ddm|= 4.47e-09
    CPU time for scf_cycle      0.10 sec, wall time      0.11 sec
exp = [1.81994757e+04 4.41925590e+03 7.04062721e+02 1.60778452e+02
 4.36153921e+01 4.75114173e+00 3.89886543e-01 8.59890831e+00
 4.90688411e-01]
E = -507.44605920563913
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((9, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.5476253398322024e+03,6.8630785798847160e+02,1.5555024230205126e+02,4.2742815896802767e+01,4.7505784169783016e+00,3.9162204394177752e-01,8.5974230426361959e+00,4.9072756124177219e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "7s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:55:55 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  18199.4757302        1
[INPUT] 0    0    [1    /1   ]  4419.2559036         1
[INPUT] 0    0    [1    /1   ]  704.062720741        1
[INPUT] 0    0    [1    /1   ]  160.77845184         1
[INPUT] 0    0    [1    /1   ]  43.6153921039        1
[INPUT] 0    0    [1    /1   ]  4.75114173422        1
[INPUT] 0    0    [1    /1   ]  0.389886542901       1
[INPUT] 1    0    [1    /1   ]  8.59890831298        1
[INPUT] 1    0    [1    /1   ]  0.49068841059        1

nuclear repulsion = 0
number of shells = 9
number of NR pGTOs = 13
number of NR cGTOs = 13
basis = {'Ar': [[0, [18199.475730188093, 1.0]], [0, [4419.255903603727, 1.0]], [0, [704.0627207406759, 1.0]], [0, [160.7784518397047, 1.0]], [0, [43.61539210387252, 1.0]], [0, [4.751141734217717, 1.0]], [0, [0.38988654290070945, 1.0]], [1, [8.598908312979443, 1.0]], [1, [0.4906884105903644, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [18199.47573019]
bas 1, expnt(s) = [4419.2559036]
bas 2, expnt(s) = [704.06272074]
bas 3, expnt(s) = [160.77845184]
bas 4, expnt(s) = [43.6153921]
bas 5, expnt(s) = [4.75114173]
bas 6, expnt(s) = [0.38988654]
bas 7, expnt(s) = [8.59890831]
bas 8, expnt(s) = [0.49068841]
CPU time:       181.32
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  1  1  1  0 38 39  0]
 [ 0  1  1  1  0 40 41  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.81994757e+04 3.95876008e+03 4.41925590e+03 1.36938917e+03
 7.04062721e+02 3.45321435e+02 1.60778452e+02 1.14073799e+02
 4.36153921e+01 4.28790209e+01 4.75114173e+00 8.13042998e+00
 3.89886543e-01 1.24657585e+00 8.59890831e+00 4.29574547e+01
 4.90688411e-01 1.19809607e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319585162220083
cond(S) = 28.8181406694649
E1 = -688.9114487370593  E_coul = 184.89948341925665
init E= -504.011965317803
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.682080668965322  LUMO = 117.268791882583
  mo_energy =
[-1.21557382e+02 -1.32794215e+01 -7.62225441e+00 -7.62225441e+00
 -7.62225441e+00 -1.65139409e+00 -6.82080669e-01 -6.82080669e-01
 -6.82080669e-01  1.17268792e+02  1.02880732e+03  7.21090386e+03
  3.91098909e+04]
E1 = -706.3778515583659  E_coul = 198.93205182697443
cycle= 1 E= -507.445799731392  delta_E= -3.43  |g|= 0.293  |ddm|=  0.3
    CPU time for cycle= 1      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.389025
diis-c [-0.15134051  1.        ]
  HOMO = -0.237106739526337  LUMO = 118.629575300601
  mo_energy =
[-1.20172942e+02 -1.22499079e+01 -6.65295104e+00 -6.65295104e+00
 -6.65295104e+00 -1.16397845e+00 -2.37106740e-01 -2.37106740e-01
 -2.37106740e-01  1.18629575e+02  1.03015913e+03  7.21210034e+03
  3.91109610e+04]
E1 = -706.3582729768755  E_coul = 198.91221381821833
cycle= 2 E= -507.446059158657  delta_E= -0.000259  |g|= 0.00357  |ddm|= 0.00849
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00380408
diis-c [-1.41024934e-05 -1.56301803e-03  1.00156302e+00]
  HOMO = -0.237205572422765  LUMO = 118.626877656835
  mo_energy =
[-1.20178660e+02 -1.22505970e+01 -6.65401636e+00 -6.65401636e+00
 -6.65401636e+00 -1.16401533e+00 -2.37205572e-01 -2.37205572e-01
 -2.37205572e-01  1.18626878e+02  1.03015078e+03  7.21208785e+03
  3.91109468e+04]
E1 = -706.3580537601435  E_coul = 198.9119945545151
cycle= 3 E= -507.446059205628  delta_E= -4.7e-08  |g|= 5.65e-05  |ddm|= 9.99e-05
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=7.59814e-05
diis-c [-1.32865826e-10  3.81197581e-05 -2.04346906e-02  1.02039657e+00]
  HOMO = -0.237206486368217  LUMO = 118.626855998251
  mo_energy =
[-1.20178712e+02 -1.22506036e+01 -6.65402798e+00 -6.65402798e+00
 -6.65402798e+00 -1.16401558e+00 -2.37206486e-01 -2.37206486e-01
 -2.37206486e-01  1.18626856e+02  1.03015072e+03  7.21208779e+03
  3.91109467e+04]
E1 = -706.3580511162255  E_coul = 198.91199191058647
cycle= 4 E= -507.446059205639  delta_E= -1.06e-11  |g|= 1.56e-07  |ddm|= 1.33e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.3580511162255  E_coul = 198.91199191058647
  HOMO = -0.237206481357265  LUMO = 118.626856164164
  mo_energy =
[-1.20178711e+02 -1.22506036e+01 -6.65402793e+00 -6.65402793e+00
 -6.65402793e+00 -1.16401558e+00 -2.37206481e-01 -2.37206481e-01
 -2.37206481e-01  1.18626856e+02  1.03015072e+03  7.21208779e+03
  3.91109467e+04]
E1 = -706.3580511271151  E_coul = 198.91199192147596
Extra cycle  E= -507.446059205639  delta_E= -1.14e-13  |g|= 2.18e-09  |ddm|= 4.47e-09
    CPU time for scf_cycle      0.10 sec, wall time      0.11 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 28.8181406694649
E1 = -706.3580511271151  E_coul = 198.91199192147596
init E= -507.446059205639
    CPU time for initialize scf      0.06 sec, wall time      0.06 sec
  HOMO = -0.237206481309409  LUMO = 118.626856165711
  mo_energy =
[-1.20178711e+02 -1.22506036e+01 -6.65402793e+00 -6.65402793e+00
 -6.65402793e+00 -1.16401558e+00 -2.37206481e-01 -2.37206481e-01
 -2.37206481e-01  1.18626856e+02  1.03015072e+03  7.21208779e+03
  3.91109467e+04]
E1 = -706.3580511272453  E_coul = 198.91199192160602
cycle= 1 E= -507.446059205639  delta_E= -1.14e-13  |g|= 3.52e-11  |ddm|= 5.74e-11
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -706.3580511272453  E_coul = 198.91199192160602
  HOMO = -0.237206481308849  LUMO = 118.626856165728
  mo_energy =
[-1.20178711e+02 -1.22506036e+01 -6.65402793e+00 -6.65402793e+00
 -6.65402793e+00 -1.16401558e+00 -2.37206481e-01 -2.37206481e-01
 -2.37206481e-01  1.18626856e+02  1.03015072e+03  7.21208779e+03
  3.91109467e+04]
E1 = -706.3580511272471  E_coul = 198.9119919216078
Extra cycle  E= -507.446059205639  delta_E= -5.68e-14  |g|= 1.18e-11  |ddm|= 8.3e-13
    CPU time for scf_cycle      0.13 sec, wall time      0.13 sec
exp = [1.81994757e+04 4.41925590e+03 7.04062721e+02 1.60778452e+02
 4.36153921e+01 4.75114173e+00 3.89886543e-01 8.59890831e+00
 4.90688411e-01]
grad_E = [-6.52126511e-06  1.10014230e-04 -5.06390663e-04  2.42998475e-03
 -2.77311051e-03 -9.00613990e-04 -3.23486171e-02  1.62396684e-03
 -7.41721607e-03]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((9, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.5476253398322024e+03,6.8630785798847160e+02,1.5555024230205126e+02,4.2742815896802767e+01,4.7505784169783016e+00,3.9162204394177752e-01,8.5974230426361959e+00,4.9072756124177219e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "7s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:55:59 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  18213.5605732        1
[INPUT] 0    0    [1    /1   ]  4221.42865207        1
[INPUT] 0    0    [1    /1   ]  676.947522649        1
[INPUT] 0    0    [1    /1   ]  159.367434506        1
[INPUT] 0    0    [1    /1   ]  43.5380162658        1
[INPUT] 0    0    [1    /1   ]  4.74979564707        1
[INPUT] 0    0    [1    /1   ]  0.388456342632       1
[INPUT] 1    0    [1    /1   ]  8.60065616726        1
[INPUT] 1    0    [1    /1   ]  0.490710981054       1

nuclear repulsion = 0
number of shells = 9
number of NR pGTOs = 13
number of NR cGTOs = 13
basis = {'Ar': [[0, [18213.560573225383, 1.0]], [0, [4221.428652068563, 1.0]], [0, [676.9475226486013, 1.0]], [0, [159.3674345059893, 1.0]], [0, [43.53801626576719, 1.0]], [0, [4.749795647070385, 1.0]], [0, [0.3884563426319087, 1.0]], [1, [8.600656167263601, 1.0]], [1, [0.4907109810539799, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [18213.56057323]
bas 1, expnt(s) = [4221.42865207]
bas 2, expnt(s) = [676.94752265]
bas 3, expnt(s) = [159.36743451]
bas 4, expnt(s) = [43.53801627]
bas 5, expnt(s) = [4.74979565]
bas 6, expnt(s) = [0.38845634]
bas 7, expnt(s) = [8.60065617]
bas 8, expnt(s) = [0.49071098]
CPU time:       185.21
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  1  1  1  0 38 39  0]
 [ 0  1  1  1  0 40 41  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.82135606e+04 3.96105767e+03 4.22142865e+03 1.32315162e+03
 6.76947523e+02 3.35298242e+02 1.59367435e+02 1.13322125e+02
 4.35380163e+01 4.28219561e+01 4.74979565e+00 8.12870229e+00
 3.88456343e-01 1.24314471e+00 8.60065617e+00 4.29683696e+01
 4.90710981e-01 1.19816496e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.31972918489312
cond(S) = 29.77368418686257
E1 = -688.9060045105797  E_coul = 184.88454791515795
init E= -504.021456595422
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.682753822636942  LUMO = 116.398886630525
  mo_energy =
[-1.21562178e+02 -1.32805509e+01 -7.62361767e+00 -7.62361767e+00
 -7.62361767e+00 -1.65131185e+00 -6.82753823e-01 -6.82753823e-01
 -6.82753823e-01  1.16398887e+02  9.99642707e+02  6.91799545e+03
  3.84357515e+04]
E1 = -706.3644955833005  E_coul = 198.9095170122574
cycle= 1 E= -507.454978571043  delta_E= -3.43  |g|= 0.295  |ddm|= 0.301
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.390066
diis-c [-0.1521513  1.       ]
  HOMO = -0.237891968156767  LUMO = 117.758033431765
  mo_energy =
[-1.20178986e+02 -1.22513736e+01 -6.65475596e+00 -6.65475596e+00
 -6.65475596e+00 -1.16455703e+00 -2.37891968e-01 -2.37891968e-01
 -2.37891968e-01  1.17758033e+02  1.00099479e+03  6.91919559e+03
  3.84368212e+04]
E1 = -706.344654590764  E_coul = 198.88941301343874
cycle= 2 E= -507.455241577325  delta_E= -0.000263  |g|= 0.00359  |ddm|= 0.00864
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00383935
diis-c [-1.43933284e-05 -1.51316717e-03  1.00151317e+00]
  HOMO = -0.237992312855407  LUMO = 117.755311556365
  mo_energy =
[-1.20184775e+02 -1.22520723e+01 -6.65583714e+00 -6.65583714e+00
 -6.65583714e+00 -1.16459428e+00 -2.37992313e-01 -2.37992313e-01
 -2.37992313e-01  1.17755312e+02  1.00098643e+03  6.91918305e+03
  3.84368069e+04]
E1 = -706.344431239135  E_coul = 198.8891896139593
cycle= 3 E= -507.455241625176  delta_E= -4.79e-08  |g|= 5.72e-05  |ddm|= 0.000102
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=7.71185e-05
diis-c [-1.37812203e-10  3.72585527e-05 -2.05293197e-02  1.02049206e+00]
  HOMO = -0.237993249617314  LUMO = 117.75528929298
  mo_energy =
[-1.20184827e+02 -1.22520791e+01 -6.65584903e+00 -6.65584903e+00
 -6.65584903e+00 -1.16459455e+00 -2.37993250e-01 -2.37993250e-01
 -2.37993250e-01  1.17755289e+02  1.00098637e+03  6.91918299e+03
  3.84368069e+04]
E1 = -706.3444285204912  E_coul = 198.88918689530448
cycle= 4 E= -507.455241625187  delta_E= -1.1e-11  |g|= 1.62e-07  |ddm|= 1.36e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.3444285204912  E_coul = 198.88918689530448
  HOMO = -0.237993244406084  LUMO = 117.755289463666
  mo_energy =
[-1.20184827e+02 -1.22520791e+01 -6.65584898e+00 -6.65584898e+00
 -6.65584898e+00 -1.16459454e+00 -2.37993244e-01 -2.37993244e-01
 -2.37993244e-01  1.17755289e+02  1.00098637e+03  6.91918299e+03
  3.84368069e+04]
E1 = -706.3444285318225  E_coul = 198.88918690663522
Extra cycle  E= -507.455241625187  delta_E= -5.12e-13  |g|= 2.26e-09  |ddm|= 4.67e-09
    CPU time for scf_cycle      0.10 sec, wall time      0.10 sec
exp = [1.82135606e+04 4.22142865e+03 6.76947523e+02 1.59367435e+02
 4.35380163e+01 4.74979565e+00 3.88456343e-01 8.60065617e+00
 4.90710981e-01]
E = -507.4552416251872
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((9, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.5476253398322024e+03,6.8630785798847160e+02,1.5555024230205126e+02,4.2742815896802767e+01,4.7505784169783016e+00,3.9162204394177752e-01,8.5974230426361959e+00,4.9072756124177219e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "7s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:56:00 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  18213.5605732        1
[INPUT] 0    0    [1    /1   ]  4221.42865207        1
[INPUT] 0    0    [1    /1   ]  676.947522649        1
[INPUT] 0    0    [1    /1   ]  159.367434506        1
[INPUT] 0    0    [1    /1   ]  43.5380162658        1
[INPUT] 0    0    [1    /1   ]  4.74979564707        1
[INPUT] 0    0    [1    /1   ]  0.388456342632       1
[INPUT] 1    0    [1    /1   ]  8.60065616726        1
[INPUT] 1    0    [1    /1   ]  0.490710981054       1

nuclear repulsion = 0
number of shells = 9
number of NR pGTOs = 13
number of NR cGTOs = 13
basis = {'Ar': [[0, [18213.560573225383, 1.0]], [0, [4221.428652068563, 1.0]], [0, [676.9475226486013, 1.0]], [0, [159.3674345059893, 1.0]], [0, [43.53801626576719, 1.0]], [0, [4.749795647070385, 1.0]], [0, [0.3884563426319087, 1.0]], [1, [8.600656167263601, 1.0]], [1, [0.4907109810539799, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [18213.56057323]
bas 1, expnt(s) = [4221.42865207]
bas 2, expnt(s) = [676.94752265]
bas 3, expnt(s) = [159.36743451]
bas 4, expnt(s) = [43.53801627]
bas 5, expnt(s) = [4.74979565]
bas 6, expnt(s) = [0.38845634]
bas 7, expnt(s) = [8.60065617]
bas 8, expnt(s) = [0.49071098]
CPU time:       185.96
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  1  1  1  0 38 39  0]
 [ 0  1  1  1  0 40 41  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.82135606e+04 3.96105767e+03 4.22142865e+03 1.32315162e+03
 6.76947523e+02 3.35298242e+02 1.59367435e+02 1.13322125e+02
 4.35380163e+01 4.28219561e+01 4.74979565e+00 8.12870229e+00
 3.88456343e-01 1.24314471e+00 8.60065617e+00 4.29683696e+01
 4.90710981e-01 1.19816496e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.31972918489312
cond(S) = 29.77368418686257
E1 = -688.9060045105797  E_coul = 184.88454791515795
init E= -504.021456595422
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.682753822636942  LUMO = 116.398886630525
  mo_energy =
[-1.21562178e+02 -1.32805509e+01 -7.62361767e+00 -7.62361767e+00
 -7.62361767e+00 -1.65131185e+00 -6.82753823e-01 -6.82753823e-01
 -6.82753823e-01  1.16398887e+02  9.99642707e+02  6.91799545e+03
  3.84357515e+04]
E1 = -706.3644955833005  E_coul = 198.9095170122574
cycle= 1 E= -507.454978571043  delta_E= -3.43  |g|= 0.295  |ddm|= 0.301
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.390066
diis-c [-0.1521513  1.       ]
  HOMO = -0.237891968156767  LUMO = 117.758033431765
  mo_energy =
[-1.20178986e+02 -1.22513736e+01 -6.65475596e+00 -6.65475596e+00
 -6.65475596e+00 -1.16455703e+00 -2.37891968e-01 -2.37891968e-01
 -2.37891968e-01  1.17758033e+02  1.00099479e+03  6.91919559e+03
  3.84368212e+04]
E1 = -706.344654590764  E_coul = 198.88941301343874
cycle= 2 E= -507.455241577325  delta_E= -0.000263  |g|= 0.00359  |ddm|= 0.00864
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00383935
diis-c [-1.43933284e-05 -1.51316717e-03  1.00151317e+00]
  HOMO = -0.237992312855407  LUMO = 117.755311556365
  mo_energy =
[-1.20184775e+02 -1.22520723e+01 -6.65583714e+00 -6.65583714e+00
 -6.65583714e+00 -1.16459428e+00 -2.37992313e-01 -2.37992313e-01
 -2.37992313e-01  1.17755312e+02  1.00098643e+03  6.91918305e+03
  3.84368069e+04]
E1 = -706.344431239135  E_coul = 198.8891896139593
cycle= 3 E= -507.455241625176  delta_E= -4.79e-08  |g|= 5.72e-05  |ddm|= 0.000102
    CPU time for cycle= 3      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=7.71185e-05
diis-c [-1.37812203e-10  3.72585527e-05 -2.05293197e-02  1.02049206e+00]
  HOMO = -0.237993249617314  LUMO = 117.75528929298
  mo_energy =
[-1.20184827e+02 -1.22520791e+01 -6.65584903e+00 -6.65584903e+00
 -6.65584903e+00 -1.16459455e+00 -2.37993250e-01 -2.37993250e-01
 -2.37993250e-01  1.17755289e+02  1.00098637e+03  6.91918299e+03
  3.84368069e+04]
E1 = -706.3444285204912  E_coul = 198.88918689530448
cycle= 4 E= -507.455241625187  delta_E= -1.1e-11  |g|= 1.62e-07  |ddm|= 1.36e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.3444285204912  E_coul = 198.88918689530448
  HOMO = -0.237993244406084  LUMO = 117.755289463666
  mo_energy =
[-1.20184827e+02 -1.22520791e+01 -6.65584898e+00 -6.65584898e+00
 -6.65584898e+00 -1.16459454e+00 -2.37993244e-01 -2.37993244e-01
 -2.37993244e-01  1.17755289e+02  1.00098637e+03  6.91918299e+03
  3.84368069e+04]
E1 = -706.3444285318225  E_coul = 198.88918690663522
Extra cycle  E= -507.455241625187  delta_E= -5.12e-13  |g|= 2.26e-09  |ddm|= 4.67e-09
    CPU time for scf_cycle      0.10 sec, wall time      0.10 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 29.77368418686257
E1 = -706.3444285318225  E_coul = 198.88918690663522
init E= -507.455241625187
    CPU time for initialize scf      0.06 sec, wall time      0.07 sec
  HOMO = -0.237993244356176  LUMO = 117.755289465269
  mo_energy =
[-1.20184827e+02 -1.22520791e+01 -6.65584898e+00 -6.65584898e+00
 -6.65584898e+00 -1.16459454e+00 -2.37993244e-01 -2.37993244e-01
 -2.37993244e-01  1.17755289e+02  1.00098637e+03  6.91918299e+03
  3.84368069e+04]
E1 = -706.3444285319582  E_coul = 198.88918690677136
cycle= 1 E= -507.455241625187  delta_E= 3.41e-13  |g|= 3.61e-11  |ddm|= 6.01e-11
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -706.3444285319582  E_coul = 198.88918690677136
  HOMO = -0.237993244355586  LUMO = 117.755289465285
  mo_energy =
[-1.20184827e+02 -1.22520791e+01 -6.65584898e+00 -6.65584898e+00
 -6.65584898e+00 -1.16459454e+00 -2.37993244e-01 -2.37993244e-01
 -2.37993244e-01  1.17755289e+02  1.00098637e+03  6.91918299e+03
  3.84368069e+04]
E1 = -706.3444285319604  E_coul = 198.88918690677343
Extra cycle  E= -507.455241625187  delta_E= -5.68e-14  |g|= 2.31e-12  |ddm|= 8.98e-13
    CPU time for scf_cycle      0.13 sec, wall time      0.14 sec
exp = [1.82135606e+04 4.22142865e+03 6.76947523e+02 1.59367435e+02
 4.35380163e+01 4.74979565e+00 3.88456343e-01 8.60065617e+00
 4.90710981e-01]
grad_E = [-6.73540464e-06  1.28492510e-04 -8.79699492e-04  4.12384667e-03
 -4.76129327e-03 -1.52595322e-03 -5.51217677e-02  2.76264987e-03
 -1.26378909e-02]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((9, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.5476253398322024e+03,6.8630785798847160e+02,1.5555024230205126e+02,4.2742815896802767e+01,4.7505784169783016e+00,3.9162204394177752e-01,8.5974230426361959e+00,4.9072756124177219e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "7s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:56:03 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  18254.6081455        1
[INPUT] 0    0    [1    /1   ]  3643.71048792        1
[INPUT] 0    0    [1    /1   ]  616.155881227        1
[INPUT] 0    0    [1    /1   ]  156.19333963         1
[INPUT] 0    0    [1    /1   ]  43.3757986467        1
[INPUT] 0    0    [1    /1   ]  4.74693704114        1
[INPUT] 0    0    [1    /1   ]  0.385629966803       1
[INPUT] 1    0    [1    /1   ]  8.60411810818        1
[INPUT] 1    0    [1    /1   ]  0.490754109684       1

nuclear repulsion = 0
number of shells = 9
number of NR pGTOs = 13
number of NR cGTOs = 13
basis = {'Ar': [[0, [18254.608145542014, 1.0]], [0, [3643.710487921607, 1.0]], [0, [616.15588122685, 1.0]], [0, [156.19333963030036, 1.0]], [0, [43.375798646676884, 1.0]], [0, [4.746937041138454, 1.0]], [0, [0.3856299668030866, 1.0]], [1, [8.604118108179149, 1.0]], [1, [0.49075410968443917, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [18254.60814554]
bas 1, expnt(s) = [3643.71048792]
bas 2, expnt(s) = [616.15588123]
bas 3, expnt(s) = [156.19333963]
bas 4, expnt(s) = [43.37579865]
bas 5, expnt(s) = [4.74693704]
bas 6, expnt(s) = [0.38562997]
bas 7, expnt(s) = [8.60411811]
bas 8, expnt(s) = [0.49075411]
CPU time:       189.45
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  1  1  1  0 38 39  0]
 [ 0  1  1  1  0 40 41  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.82546081e+04 3.96775101e+03 3.64371049e+03 1.18487605e+03
 6.16155881e+02 3.12451758e+02 1.56193340e+02 1.11625112e+02
 4.33757986e+01 4.27022381e+01 4.74693704e+00 8.12503290e+00
 3.85629967e-01 1.23635476e+00 8.60411811e+00 4.29899903e+01
 4.90754110e-01 1.19829659e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319967740935315
cond(S) = 32.9768228044202
E1 = -688.9029724732062  E_coul = 184.85440164216394
init E= -504.048570831042
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.68411879846562  LUMO = 114.367089179077
  mo_energy =
[-1.21576150e+02 -1.32832855e+01 -7.62634002e+00 -7.62634002e+00
 -7.62634002e+00 -1.65115070e+00 -6.84118798e-01 -6.84118798e-01
 -6.84118798e-01  1.14367089e+02  9.34344521e+02  6.11222851e+03
  3.65057194e+04]
E1 = -706.3483061773022  E_coul = 198.86546360921398
cycle= 1 E= -507.482842568088  delta_E= -3.43  |g|= 0.298  |ddm|= 0.304
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.387638
diis-c [-0.15026304  1.        ]
  HOMO = -0.239454207109318  LUMO = 115.723002647889
  mo_energy =
[-1.20195140e+02 -1.22547223e+01 -6.65830120e+00 -6.65830120e+00
 -6.65830120e+00 -1.16569545e+00 -2.39454207e-01 -2.39454207e-01
 -2.39454207e-01  1.15723003e+02  9.35698080e+02  6.11344045e+03
  3.65067902e+04]
E1 = -706.3278595176635  E_coul = 198.8447454118906
cycle= 2 E= -507.483114105773  delta_E= -0.000272  |g|= 0.00364  |ddm|= 0.009
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00392875
diis-c [-1.51154106e-05 -1.46067177e-03  1.00146067e+00]
  HOMO = -0.239558154885986  LUMO = 115.720230381909
  mo_energy =
[-1.20201088e+02 -1.22554438e+01 -6.65942000e+00 -6.65942000e+00
 -6.65942000e+00 -1.16573364e+00 -2.39558155e-01 -2.39558155e-01
 -2.39558155e-01  1.15720230e+02  9.35689722e+02  6.11342789e+03
  3.65067756e+04]
E1 = -706.327626253556  E_coul = 198.84451209774437
cycle= 3 E= -507.483114155812  delta_E= -5e-08  |g|= 5.85e-05  |ddm|= 0.000107
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=7.97825e-05
diis-c [-1.49207811e-10  3.63885857e-05 -2.07259578e-02  1.02068957e+00]
  HOMO = -0.239559140794048  LUMO = 115.720206886214
  mo_energy =
[-1.20201143e+02 -1.22554510e+01 -6.65943249e+00 -6.65943249e+00
 -6.65943249e+00 -1.16573392e+00 -2.39559141e-01 -2.39559141e-01
 -2.39559141e-01  1.15720207e+02  9.35689664e+02  6.11342782e+03
  3.65067756e+04]
E1 = -706.3276233665113  E_coul = 198.84450921068776
cycle= 4 E= -507.483114155824  delta_E= -1.19e-11  |g|= 1.73e-07  |ddm|= 1.44e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.3276233665113  E_coul = 198.84450921068776
  HOMO = -0.239559135171038  LUMO = 115.720207065618
  mo_energy =
[-1.20201143e+02 -1.22554510e+01 -6.65943244e+00 -6.65943244e+00
 -6.65943244e+00 -1.16573392e+00 -2.39559135e-01 -2.39559135e-01
 -2.39559135e-01  1.15720207e+02  9.35689665e+02  6.11342782e+03
  3.65067756e+04]
E1 = -706.3276233787719  E_coul = 198.8445092229489
Extra cycle  E= -507.483114155823  delta_E= 4.55e-13  |g|= 2.41e-09  |ddm|= 5.1e-09
    CPU time for scf_cycle      0.10 sec, wall time      0.12 sec
exp = [1.82546081e+04 3.64371049e+03 6.16155881e+02 1.56193340e+02
 4.33757986e+01 4.74693704e+00 3.85629967e-01 8.60411811e+00
 4.90754110e-01]
E = -507.48311415582305
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((9, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.5476253398322024e+03,6.8630785798847160e+02,1.5555024230205126e+02,4.2742815896802767e+01,4.7505784169783016e+00,3.9162204394177752e-01,8.5974230426361959e+00,4.9072756124177219e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "7s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:56:04 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  18254.6081455        1
[INPUT] 0    0    [1    /1   ]  3643.71048792        1
[INPUT] 0    0    [1    /1   ]  616.155881227        1
[INPUT] 0    0    [1    /1   ]  156.19333963         1
[INPUT] 0    0    [1    /1   ]  43.3757986467        1
[INPUT] 0    0    [1    /1   ]  4.74693704114        1
[INPUT] 0    0    [1    /1   ]  0.385629966803       1
[INPUT] 1    0    [1    /1   ]  8.60411810818        1
[INPUT] 1    0    [1    /1   ]  0.490754109684       1

nuclear repulsion = 0
number of shells = 9
number of NR pGTOs = 13
number of NR cGTOs = 13
basis = {'Ar': [[0, [18254.608145542014, 1.0]], [0, [3643.710487921607, 1.0]], [0, [616.15588122685, 1.0]], [0, [156.19333963030036, 1.0]], [0, [43.375798646676884, 1.0]], [0, [4.746937041138454, 1.0]], [0, [0.3856299668030866, 1.0]], [1, [8.604118108179149, 1.0]], [1, [0.49075410968443917, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [18254.60814554]
bas 1, expnt(s) = [3643.71048792]
bas 2, expnt(s) = [616.15588123]
bas 3, expnt(s) = [156.19333963]
bas 4, expnt(s) = [43.37579865]
bas 5, expnt(s) = [4.74693704]
bas 6, expnt(s) = [0.38562997]
bas 7, expnt(s) = [8.60411811]
bas 8, expnt(s) = [0.49075411]
CPU time:       190.23
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  1  1  1  0 38 39  0]
 [ 0  1  1  1  0 40 41  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.82546081e+04 3.96775101e+03 3.64371049e+03 1.18487605e+03
 6.16155881e+02 3.12451758e+02 1.56193340e+02 1.11625112e+02
 4.33757986e+01 4.27022381e+01 4.74693704e+00 8.12503290e+00
 3.85629967e-01 1.23635476e+00 8.60411811e+00 4.29899903e+01
 4.90754110e-01 1.19829659e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319967740935315
cond(S) = 32.9768228044202
E1 = -688.9029724732062  E_coul = 184.85440164216394
init E= -504.048570831042
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.68411879846562  LUMO = 114.367089179077
  mo_energy =
[-1.21576150e+02 -1.32832855e+01 -7.62634002e+00 -7.62634002e+00
 -7.62634002e+00 -1.65115070e+00 -6.84118798e-01 -6.84118798e-01
 -6.84118798e-01  1.14367089e+02  9.34344521e+02  6.11222851e+03
  3.65057194e+04]
E1 = -706.3483061773022  E_coul = 198.86546360921398
cycle= 1 E= -507.482842568088  delta_E= -3.43  |g|= 0.298  |ddm|= 0.304
    CPU time for cycle= 1      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.387638
diis-c [-0.15026304  1.        ]
  HOMO = -0.239454207109318  LUMO = 115.723002647889
  mo_energy =
[-1.20195140e+02 -1.22547223e+01 -6.65830120e+00 -6.65830120e+00
 -6.65830120e+00 -1.16569545e+00 -2.39454207e-01 -2.39454207e-01
 -2.39454207e-01  1.15723003e+02  9.35698080e+02  6.11344045e+03
  3.65067902e+04]
E1 = -706.3278595176635  E_coul = 198.8447454118906
cycle= 2 E= -507.483114105773  delta_E= -0.000272  |g|= 0.00364  |ddm|= 0.009
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00392875
diis-c [-1.51154106e-05 -1.46067177e-03  1.00146067e+00]
  HOMO = -0.239558154885986  LUMO = 115.720230381909
  mo_energy =
[-1.20201088e+02 -1.22554438e+01 -6.65942000e+00 -6.65942000e+00
 -6.65942000e+00 -1.16573364e+00 -2.39558155e-01 -2.39558155e-01
 -2.39558155e-01  1.15720230e+02  9.35689722e+02  6.11342789e+03
  3.65067756e+04]
E1 = -706.327626253556  E_coul = 198.84451209774437
cycle= 3 E= -507.483114155812  delta_E= -5e-08  |g|= 5.85e-05  |ddm|= 0.000107
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=7.97825e-05
diis-c [-1.49207811e-10  3.63885857e-05 -2.07259578e-02  1.02068957e+00]
  HOMO = -0.239559140794048  LUMO = 115.720206886214
  mo_energy =
[-1.20201143e+02 -1.22554510e+01 -6.65943249e+00 -6.65943249e+00
 -6.65943249e+00 -1.16573392e+00 -2.39559141e-01 -2.39559141e-01
 -2.39559141e-01  1.15720207e+02  9.35689664e+02  6.11342782e+03
  3.65067756e+04]
E1 = -706.3276233665113  E_coul = 198.84450921068776
cycle= 4 E= -507.483114155824  delta_E= -1.19e-11  |g|= 1.73e-07  |ddm|= 1.44e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.3276233665113  E_coul = 198.84450921068776
  HOMO = -0.239559135171038  LUMO = 115.720207065618
  mo_energy =
[-1.20201143e+02 -1.22554510e+01 -6.65943244e+00 -6.65943244e+00
 -6.65943244e+00 -1.16573392e+00 -2.39559135e-01 -2.39559135e-01
 -2.39559135e-01  1.15720207e+02  9.35689665e+02  6.11342782e+03
  3.65067756e+04]
E1 = -706.3276233787719  E_coul = 198.8445092229489
Extra cycle  E= -507.483114155823  delta_E= 4.55e-13  |g|= 2.41e-09  |ddm|= 5.1e-09
    CPU time for scf_cycle      0.11 sec, wall time      0.11 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 32.9768228044202
E1 = -706.3276233787719  E_coul = 198.8445092229489
init E= -507.483114155823
    CPU time for initialize scf      0.07 sec, wall time      0.07 sec
  HOMO = -0.239559135116748  LUMO = 115.720207067336
  mo_energy =
[-1.20201143e+02 -1.22554510e+01 -6.65943244e+00 -6.65943244e+00
 -6.65943244e+00 -1.16573392e+00 -2.39559135e-01 -2.39559135e-01
 -2.39559135e-01  1.15720207e+02  9.35689665e+02  6.11342782e+03
  3.65067756e+04]
E1 = -706.3276233789214  E_coul = 198.84450922309802
cycle= 1 E= -507.483114155823  delta_E= -3.41e-13  |g|= 3.97e-11  |ddm|= 6.59e-11
    CPU time for cycle= 1      0.01 sec, wall time      0.02 sec
E1 = -706.3276233789214  E_coul = 198.84450922309802
  HOMO = -0.239559135116094  LUMO = 115.720207067354
  mo_energy =
[-1.20201143e+02 -1.22554510e+01 -6.65943244e+00 -6.65943244e+00
 -6.65943244e+00 -1.16573392e+00 -2.39559135e-01 -2.39559135e-01
 -2.39559135e-01  1.15720207e+02  9.35689665e+02  6.11342782e+03
  3.65067756e+04]
E1 = -706.3276233789232  E_coul = 198.84450922309998
Extra cycle  E= -507.483114155823  delta_E= 1.14e-13  |g|= 2.01e-12  |ddm|= 9.89e-13
    CPU time for scf_cycle      0.15 sec, wall time      0.15 sec
exp = [1.82546081e+04 3.64371049e+03 6.16155881e+02 1.56193340e+02
 4.33757986e+01 4.74693704e+00 3.85629967e-01 8.60411811e+00
 4.90754110e-01]
grad_E = [-6.68183346e-06  1.66937958e-04 -1.56417514e-03  7.23532891e-03
 -8.66953221e-03 -2.71143300e-03 -1.00694447e-01  5.04608816e-03
 -2.30587594e-02]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((9, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.5476253398322024e+03,6.8630785798847160e+02,1.5555024230205126e+02,4.2742815896802767e+01,4.7505784169783016e+00,3.9162204394177752e-01,8.5974230426361959e+00,4.9072756124177219e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "7s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:56:08 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  18420.9365173        1
[INPUT] 0    0    [1    /1   ]  1300.32944865        1
[INPUT] 0    0    [1    /1   ]  406.799698984        1
[INPUT] 0    0    [1    /1   ]  145.857872285        1
[INPUT] 0    0    [1    /1   ]  43.0136655297        1
[INPUT] 0    0    [1    /1   ]  4.73713420039        1
[INPUT] 0    0    [1    /1   ]  0.377449499438       1
[INPUT] 1    0    [1    /1   ]  8.61436364724        1
[INPUT] 1    0    [1    /1   ]  0.49087433371        1

nuclear repulsion = 0
number of shells = 9
number of NR pGTOs = 13
number of NR cGTOs = 13
basis = {'Ar': [[0, [18420.93651725275, 1.0]], [0, [1300.329448653748, 1.0]], [0, [406.79969898402834, 1.0]], [0, [145.85787228479475, 1.0]], [0, [43.0136655296799, 1.0]], [0, [4.737134200392628, 1.0]], [0, [0.3774494994381933, 1.0]], [1, [8.614363647237743, 1.0]], [1, [0.49087433370983025, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [18420.93651725]
bas 1, expnt(s) = [1300.32944865]
bas 2, expnt(s) = [406.79969898]
bas 3, expnt(s) = [145.85787228]
bas 4, expnt(s) = [43.01366553]
bas 5, expnt(s) = [4.7371342]
bas 6, expnt(s) = [0.3774495]
bas 7, expnt(s) = [8.61436365]
bas 8, expnt(s) = [0.49087433]
CPU time:       193.64
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  1  1  1  0 38 39  0]
 [ 0  1  1  1  0 40 41  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.84209365e+04 3.99483461e+03 1.30032945e+03 5.47085334e+02
 4.06799699e+02 2.28849776e+02 1.45857872e+02 1.06038220e+02
 4.30136655e+01 4.24345757e+01 4.73713420e+00 8.11244547e+00
 3.77449499e-01 1.21663180e+00 8.61436365e+00 4.30539888e+01
 4.90874334e-01 1.19866355e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.320269440126474
cond(S) = 86.98349016782701
E1 = -687.7842306877164  E_coul = 184.76989506338722
init E= -503.014335624329
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.688286057409565  LUMO = 104.948239724365
  mo_energy =
[-1.21446913e+02 -1.32860515e+01 -7.63368522e+00 -7.63368522e+00
 -7.63368522e+00 -1.65004812e+00 -6.88286057e-01 -6.88286057e-01
 -6.88286057e-01  1.04948240e+02  7.09353154e+02  2.86762234e+03
  2.85504476e+04]
E1 = -705.9901957528872  E_coul = 198.77733939752545
cycle= 1 E= -507.212856355362  delta_E= -4.2  |g|= 0.321  |ddm|= 0.314
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.437891
diis-c [-0.19174831  1.        ]
  HOMO = -0.243821797299395  LUMO = 106.30120548536
  mo_energy =
[-1.20063643e+02 -1.22576846e+01 -6.66566491e+00 -6.66566491e+00
 -6.66566491e+00 -1.16812508e+00 -2.43821797e-01 -2.43821797e-01
 -2.43821797e-01  1.06301205e+02  7.10726386e+02  2.86890920e+03
  2.85515195e+04]
E1 = -705.967175550992  E_coul = 198.75400706110437
cycle= 2 E= -507.213168489888  delta_E= -0.000312  |g|= 0.00396  |ddm|= 0.0112
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00441362
diis-c [-1.89368882e-05 -1.68600201e-03  1.00168600e+00]
  HOMO = -0.243943403132185  LUMO = 106.298337135059
  mo_energy =
[-1.20070195e+02 -1.22585197e+01 -6.66696229e+00 -6.66696229e+00
 -6.66696229e+00 -1.16816853e+00 -2.43943403e-01 -2.43943403e-01
 -2.43943403e-01  1.06298337e+02  7.10718496e+02  2.86889778e+03
  2.85515040e+04]
E1 = -705.9668927894152  E_coul = 198.7537242357714
cycle= 3 E= -507.213168553644  delta_E= -6.38e-08  |g|= 6.6e-05  |ddm|= 0.000139
    CPU time for cycle= 3      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=9.441e-05
diis-c [-2.68107988e-10  3.54613845e-05 -2.18680916e-02  1.02183263e+00]
  HOMO = -0.243944605525439  LUMO = 106.298309956775
  mo_energy =
[-1.20070261e+02 -1.22585284e+01 -6.66697748e+00 -6.66697748e+00
 -6.66697748e+00 -1.16816886e+00 -2.43944606e-01 -2.43944606e-01
 -2.43944606e-01  1.06298310e+02  7.10718430e+02  2.86889770e+03
  2.85515039e+04]
E1 = -705.9668890858015  E_coul = 198.75372053214167
cycle= 4 E= -507.21316855366  delta_E= -1.61e-11  |g|= 2.39e-07  |ddm|= 1.93e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -705.9668890858015  E_coul = 198.75372053214167
  HOMO = -0.243944597238123  LUMO = 106.298310176377
  mo_energy =
[-1.20070261e+02 -1.22585283e+01 -6.66697739e+00 -6.66697739e+00
 -6.66697739e+00 -1.16816886e+00 -2.43944597e-01 -2.43944597e-01
 -2.43944597e-01  1.06298310e+02  7.10718431e+02  2.86889770e+03
  2.85515039e+04]
E1 = -705.9668891045345  E_coul = 198.75372055087433
Extra cycle  E= -507.21316855366  delta_E= -2.84e-13  |g|= 3.7e-09  |ddm|= 8.67e-09
    CPU time for scf_cycle      0.10 sec, wall time      0.10 sec
exp = [1.84209365e+04 1.30032945e+03 4.06799699e+02 1.45857872e+02
 4.30136655e+01 4.73713420e+00 3.77449499e-01 8.61436365e+00
 4.90874334e-01]
E = -507.2131685536602
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((9, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.5476253398322024e+03,6.8630785798847160e+02,1.5555024230205126e+02,4.2742815896802767e+01,4.7505784169783016e+00,3.9162204394177752e-01,8.5974230426361959e+00,4.9072756124177219e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "7s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:56:08 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  18282.4129157        1
[INPUT] 0    0    [1    /1   ]  3251.97232297        1
[INPUT] 0    0    [1    /1   ]  581.158240946        1
[INPUT] 0    0    [1    /1   ]  154.465580916        1
[INPUT] 0    0    [1    /1   ]  43.315261602         1
[INPUT] 0    0    [1    /1   ]  4.74529832051        1
[INPUT] 0    0    [1    /1   ]  0.384262454981       1
[INPUT] 1    0    [1    /1   ]  8.60583083377        1
[INPUT] 1    0    [1    /1   ]  0.490774207286       1

nuclear repulsion = 0
number of shells = 9
number of NR pGTOs = 13
number of NR cGTOs = 13
basis = {'Ar': [[0, [18282.41291566788, 1.0]], [0, [3251.972322965176, 1.0]], [0, [581.1582409456474, 1.0]], [0, [154.46558091584032, 1.0]], [0, [43.315261601977284, 1.0]], [0, [4.745298320511813, 1.0]], [0, [0.38426245498135975, 1.0]], [1, [8.605830833767753, 1.0]], [1, [0.4907742072862808, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [18282.41291567]
bas 1, expnt(s) = [3251.97232297]
bas 2, expnt(s) = [581.15824095]
bas 3, expnt(s) = [154.46558092]
bas 4, expnt(s) = [43.3152616]
bas 5, expnt(s) = [4.74529832]
bas 6, expnt(s) = [0.38426245]
bas 7, expnt(s) = [8.60583083]
bas 8, expnt(s) = [0.49077421]
CPU time:       194.41
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  1  1  1  0 38 39  0]
 [ 0  1  1  1  0 40 41  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.82824129e+04 3.97228280e+03 3.25197232e+03 1.08799063e+03
 5.81158241e+02 2.99044504e+02 1.54465581e+02 1.10697756e+02
 4.33152616e+01 4.26575325e+01 4.74529832e+00 8.12292913e+00
 3.84262455e-01 1.23306505e+00 8.60583083e+00 4.30006874e+01
 4.90774207e-01 1.19835793e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.320061150776084
cond(S) = 35.78891700523447
E1 = -688.9122523112989  E_coul = 184.8398560350748
init E= -504.072396276224
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.684795331041692  LUMO = 113.225125320333
  mo_energy =
[-1.21586647e+02 -1.32851619e+01 -7.62764003e+00 -7.62764003e+00
 -7.62764003e+00 -1.65109939e+00 -6.84795331e-01 -6.84795331e-01
 -6.84795331e-01  1.13225125e+02  8.97230240e+02  5.57821753e+03
  3.51979314e+04]
E1 = -706.3506938818766  E_coul = 198.84573835601645
cycle= 1 E= -507.50495552586  delta_E= -3.43  |g|= 0.299  |ddm|= 0.305
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.382999
diis-c [-0.14668814  1.        ]
  HOMO = -0.240210814452073  LUMO = 114.579705421347
  mo_energy =
[-1.20206218e+02 -1.22568327e+01 -6.65993081e+00 -6.65993081e+00
 -6.65993081e+00 -1.16626914e+00 -2.40210814e-01 -2.40210814e-01
 -2.40210814e-01  1.14579705e+02  8.98585710e+02  5.57943939e+03
  3.51990050e+04]
E1 = -706.3299156514478  E_coul = 198.82468374817012
cycle= 2 E= -507.505231903278  delta_E= -0.000276  |g|= 0.00367  |ddm|= 0.00923
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00398569
diis-c [-1.55628795e-05 -1.48579790e-03  1.00148580e+00]
  HOMO = -0.240316834687368  LUMO = 114.576910451069
  mo_energy =
[-1.20212251e+02 -1.22575673e+01 -6.66107109e+00 -6.66107109e+00
 -6.66107109e+00 -1.16630789e+00 -2.40316835e-01 -2.40316835e-01
 -2.40316835e-01  1.14576910e+02  8.98577390e+02  5.57942689e+03
  3.51989903e+04]
E1 = -706.3296766523368  E_coul = 198.82444469769626
cycle= 3 E= -507.505231954641  delta_E= -5.14e-08  |g|= 5.92e-05  |ddm|= 0.00011
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=8.12727e-05
diis-c [-1.55768725e-10  3.65737193e-05 -2.08093448e-02  1.02077277e+00]
  HOMO = -0.240317843922853  LUMO = 114.57688642563
  mo_energy =
[-1.20212308e+02 -1.22575746e+01 -6.66108388e+00 -6.66108388e+00
 -6.66108388e+00 -1.16630818e+00 -2.40317844e-01 -2.40317844e-01
 -2.40317844e-01  1.14576886e+02  8.98577331e+02  5.57942682e+03
  3.51989902e+04]
E1 = -706.3296736782477  E_coul = 198.82444172359516
cycle= 4 E= -507.505231954653  delta_E= -1.19e-11  |g|= 1.79e-07  |ddm|= 1.49e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.3296736782477  E_coul = 198.82444172359516
  HOMO = -0.240317838098236  LUMO = 114.576886608439
  mo_energy =
[-1.20212307e+02 -1.22575746e+01 -6.66108382e+00 -6.66108382e+00
 -6.66108382e+00 -1.16630817e+00 -2.40317838e-01 -2.40317838e-01
 -2.40317838e-01  1.14576887e+02  8.98577331e+02  5.57942682e+03
  3.51989902e+04]
E1 = -706.3296736909826  E_coul = 198.82444173633021
Extra cycle  E= -507.505231954652  delta_E= 5.68e-14  |g|= 2.49e-09  |ddm|= 5.34e-09
    CPU time for scf_cycle      0.10 sec, wall time      0.10 sec
exp = [1.82824129e+04 3.25197232e+03 5.81158241e+02 1.54465581e+02
 4.33152616e+01 4.74529832e+00 3.84262455e-01 8.60583083e+00
 4.90774207e-01]
E = -507.50523195465246
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((9, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.5476253398322024e+03,6.8630785798847160e+02,1.5555024230205126e+02,4.2742815896802767e+01,4.7505784169783016e+00,3.9162204394177752e-01,8.5974230426361959e+00,4.9072756124177219e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "7s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:56:09 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  18282.4129157        1
[INPUT] 0    0    [1    /1   ]  3251.97232297        1
[INPUT] 0    0    [1    /1   ]  581.158240946        1
[INPUT] 0    0    [1    /1   ]  154.465580916        1
[INPUT] 0    0    [1    /1   ]  43.315261602         1
[INPUT] 0    0    [1    /1   ]  4.74529832051        1
[INPUT] 0    0    [1    /1   ]  0.384262454981       1
[INPUT] 1    0    [1    /1   ]  8.60583083377        1
[INPUT] 1    0    [1    /1   ]  0.490774207286       1

nuclear repulsion = 0
number of shells = 9
number of NR pGTOs = 13
number of NR cGTOs = 13
basis = {'Ar': [[0, [18282.41291566788, 1.0]], [0, [3251.972322965176, 1.0]], [0, [581.1582409456474, 1.0]], [0, [154.46558091584032, 1.0]], [0, [43.315261601977284, 1.0]], [0, [4.745298320511813, 1.0]], [0, [0.38426245498135975, 1.0]], [1, [8.605830833767753, 1.0]], [1, [0.4907742072862808, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [18282.41291567]
bas 1, expnt(s) = [3251.97232297]
bas 2, expnt(s) = [581.15824095]
bas 3, expnt(s) = [154.46558092]
bas 4, expnt(s) = [43.3152616]
bas 5, expnt(s) = [4.74529832]
bas 6, expnt(s) = [0.38426245]
bas 7, expnt(s) = [8.60583083]
bas 8, expnt(s) = [0.49077421]
CPU time:       195.17
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  1  1  1  0 38 39  0]
 [ 0  1  1  1  0 40 41  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.82824129e+04 3.97228280e+03 3.25197232e+03 1.08799063e+03
 5.81158241e+02 2.99044504e+02 1.54465581e+02 1.10697756e+02
 4.33152616e+01 4.26575325e+01 4.74529832e+00 8.12292913e+00
 3.84262455e-01 1.23306505e+00 8.60583083e+00 4.30006874e+01
 4.90774207e-01 1.19835793e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.320061150776084
cond(S) = 35.78891700523447
E1 = -688.9122523112989  E_coul = 184.8398560350748
init E= -504.072396276224
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.684795331041692  LUMO = 113.225125320333
  mo_energy =
[-1.21586647e+02 -1.32851619e+01 -7.62764003e+00 -7.62764003e+00
 -7.62764003e+00 -1.65109939e+00 -6.84795331e-01 -6.84795331e-01
 -6.84795331e-01  1.13225125e+02  8.97230240e+02  5.57821753e+03
  3.51979314e+04]
E1 = -706.3506938818766  E_coul = 198.84573835601645
cycle= 1 E= -507.50495552586  delta_E= -3.43  |g|= 0.299  |ddm|= 0.305
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.382999
diis-c [-0.14668814  1.        ]
  HOMO = -0.240210814452073  LUMO = 114.579705421347
  mo_energy =
[-1.20206218e+02 -1.22568327e+01 -6.65993081e+00 -6.65993081e+00
 -6.65993081e+00 -1.16626914e+00 -2.40210814e-01 -2.40210814e-01
 -2.40210814e-01  1.14579705e+02  8.98585710e+02  5.57943939e+03
  3.51990050e+04]
E1 = -706.3299156514478  E_coul = 198.82468374817012
cycle= 2 E= -507.505231903278  delta_E= -0.000276  |g|= 0.00367  |ddm|= 0.00923
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00398569
diis-c [-1.55628795e-05 -1.48579790e-03  1.00148580e+00]
  HOMO = -0.240316834687368  LUMO = 114.576910451069
  mo_energy =
[-1.20212251e+02 -1.22575673e+01 -6.66107109e+00 -6.66107109e+00
 -6.66107109e+00 -1.16630789e+00 -2.40316835e-01 -2.40316835e-01
 -2.40316835e-01  1.14576910e+02  8.98577390e+02  5.57942689e+03
  3.51989903e+04]
E1 = -706.3296766523368  E_coul = 198.82444469769626
cycle= 3 E= -507.505231954641  delta_E= -5.14e-08  |g|= 5.92e-05  |ddm|= 0.00011
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=8.12727e-05
diis-c [-1.55768725e-10  3.65737193e-05 -2.08093448e-02  1.02077277e+00]
  HOMO = -0.240317843922853  LUMO = 114.57688642563
  mo_energy =
[-1.20212308e+02 -1.22575746e+01 -6.66108388e+00 -6.66108388e+00
 -6.66108388e+00 -1.16630818e+00 -2.40317844e-01 -2.40317844e-01
 -2.40317844e-01  1.14576886e+02  8.98577331e+02  5.57942682e+03
  3.51989902e+04]
E1 = -706.3296736782477  E_coul = 198.82444172359516
cycle= 4 E= -507.505231954653  delta_E= -1.19e-11  |g|= 1.79e-07  |ddm|= 1.49e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.3296736782477  E_coul = 198.82444172359516
  HOMO = -0.240317838098236  LUMO = 114.576886608439
  mo_energy =
[-1.20212307e+02 -1.22575746e+01 -6.66108382e+00 -6.66108382e+00
 -6.66108382e+00 -1.16630817e+00 -2.40317838e-01 -2.40317838e-01
 -2.40317838e-01  1.14576887e+02  8.98577331e+02  5.57942682e+03
  3.51989902e+04]
E1 = -706.3296736909826  E_coul = 198.82444173633021
Extra cycle  E= -507.505231954652  delta_E= 5.68e-14  |g|= 2.49e-09  |ddm|= 5.34e-09
    CPU time for scf_cycle      0.10 sec, wall time      0.10 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 35.78891700523447
E1 = -706.3296736909826  E_coul = 198.82444173633021
init E= -507.505231954652
    CPU time for initialize scf      0.07 sec, wall time      0.07 sec
  HOMO = -0.240317838041656  LUMO = 114.576886610213
  mo_energy =
[-1.20212307e+02 -1.22575746e+01 -6.66108381e+00 -6.66108381e+00
 -6.66108381e+00 -1.16630817e+00 -2.40317838e-01 -2.40317838e-01
 -2.40317838e-01  1.14576887e+02  8.98577331e+02  5.57942682e+03
  3.51989902e+04]
E1 = -706.3296736911384  E_coul = 198.824441736486
cycle= 1 E= -507.505231954652  delta_E= 5.68e-14  |g|= 4.11e-11  |ddm|= 6.92e-11
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -706.3296736911384  E_coul = 198.824441736486
  HOMO = -0.24031783804098  LUMO = 114.576886610232
  mo_energy =
[-1.20212307e+02 -1.22575746e+01 -6.66108381e+00 -6.66108381e+00
 -6.66108381e+00 -1.16630817e+00 -2.40317838e-01 -2.40317838e-01
 -2.40317838e-01  1.14576887e+02  8.98577331e+02  5.57942682e+03
  3.51989902e+04]
E1 = -706.3296736911406  E_coul = 198.82444173648798
Extra cycle  E= -507.505231954653  delta_E= -1.71e-13  |g|= 3.69e-12  |ddm|= 1.02e-12
    CPU time for scf_cycle      0.14 sec, wall time      0.14 sec
exp = [1.82824129e+04 3.25197232e+03 5.81158241e+02 1.54465581e+02
 4.33152616e+01 4.74529832e+00 3.84262455e-01 8.60583083e+00
 4.90774207e-01]
grad_E = [-5.78681689e-06  1.78752677e-04 -1.78625114e-03  8.41575639e-03
 -1.01781649e-02 -3.26233298e-03 -1.23241777e-01  6.24876574e-03
 -2.81754942e-02]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((9, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.5476253398322024e+03,6.8630785798847160e+02,1.5555024230205126e+02,4.2742815896802767e+01,4.7505784169783016e+00,3.9162204394177752e-01,8.5974230426361959e+00,4.9072756124177219e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "7s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:56:12 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  18513.1823811        1
[INPUT] 0    0    [1    /1   ]  1.00317265606e-09      1
[INPUT] 0    0    [1    /1   ]  301.620830633        1
[INPUT] 0    0    [1    /1   ]  137.802469327        1
[INPUT] 0    0    [1    /1   ]  42.3911463185        1
[INPUT] 0    0    [1    /1   ]  4.73412735181        1
[INPUT] 0    0    [1    /1   ]  0.377696210245       1
[INPUT] 1    0    [1    /1   ]  8.61549715759        1
[INPUT] 1    0    [1    /1   ]  0.490916257135       1

nuclear repulsion = 0
number of shells = 9
number of NR pGTOs = 13
number of NR cGTOs = 13
basis = {'Ar': [[0, [18513.18238113867, 1.0]], [0, [1.0031726560555398e-09, 1.0]], [0, [301.6208306325687, 1.0]], [0, [137.8024693268551, 1.0]], [0, [42.39114631851535, 1.0]], [0, [4.7341273518077704, 1.0]], [0, [0.3776962102450984, 1.0]], [1, [8.615497157585907, 1.0]], [1, [0.4909162571353612, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [18513.18238114]
bas 1, expnt(s) = [1.00317266e-09]
bas 2, expnt(s) = [301.62083063]
bas 3, expnt(s) = [137.80246933]
bas 4, expnt(s) = [42.39114632]
bas 5, expnt(s) = [4.73412735]
bas 6, expnt(s) = [0.37769621]
bas 7, expnt(s) = [8.61549716]
bas 8, expnt(s) = [0.49091626]
CPU time:       198.52
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  1  1  1  0 38 39  0]
 [ 0  1  1  1  0 40 41  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.85131824e+04 4.00982883e+03 1.00317266e-09 4.50346497e-07
 3.01620831e+02 1.82856761e+02 1.37802469e+02 1.01614989e+02
 4.23911463e+01 4.19731337e+01 4.73412735e+00 8.10858319e+00
 3.77696210e-01 1.21722817e+00 8.61549716e+00 4.30610705e+01
 4.90916257e-01 1.19879152e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.316576764638807
cond(S) = 68.96689915058761
E1 = -660.4013186740502  E_coul = 184.50820793299982
init E= -475.89311074105
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.691466805683293  LUMO = -3.45405071510834e-05
  mo_energy =
[-1.17371800e+02 -1.29227812e+01 -7.64800156e+00 -7.64800156e+00
 -7.64800156e+00 -1.62116136e+00 -6.91466806e-01 -6.91466806e-01
 -6.91466806e-01 -3.45405072e-05  1.07686333e+02  5.98402187e+02
  2.46946604e+04]
E1 = -696.1486672138004  E_coul = 198.00752927021625
cycle= 1 E= -498.141137943584  delta_E= -22.2  |g|= 0.683  |ddm|= 0.447
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=1.30307
diis-c [-1.69799248  1.        ]
  HOMO = -0.245852583692569  LUMO = 1.50521568871562e-09
  mo_energy =
[-1.16212450e+02 -1.19048739e+01 -6.69204761e+00 -6.69204761e+00
 -6.69204761e+00 -1.13599520e+00 -2.45852584e-01 -2.45852584e-01
 -2.45852584e-01  1.50521569e-09  1.08948733e+02  5.99443820e+02
  2.46947733e+04]
E1 = -696.1206649341918  E_coul = 197.9790920469381
cycle= 2 E= -498.141572887254  delta_E= -0.000435  |g|= 0.00395  |ddm|= 0.0138
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00284954
diis-c [-8.03600525e-06 -2.22308012e-04  1.00022231e+00]
  HOMO = -0.245984069351171  LUMO = 1.50548910755954e-09
  mo_energy =
[-1.16220962e+02 -1.19057911e+01 -6.69349788e+00 -6.69349788e+00
 -6.69349788e+00 -1.13604474e+00 -2.45984069e-01 -2.45984069e-01
 -2.45984069e-01  1.50548911e-09  1.08944741e+02  5.99432760e+02
  2.46947505e+04]
E1 = -696.1203493809094  E_coul = 197.97877643310585
cycle= 3 E= -498.141572947804  delta_E= -6.05e-08  |g|= 5.79e-05  |ddm|= 0.000154
    CPU time for cycle= 3      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=5.85152e-05
diis-c [-8.05609304e-10  1.13444379e-05 -1.80780694e-02  1.01806672e+00]
  HOMO = -0.245985426514387  LUMO = 1.50531569142013e-09
  mo_energy =
[-1.16221054e+02 -1.19058010e+01 -6.69351499e+00 -6.69351499e+00
 -6.69351499e+00 -1.13604516e+00 -2.45985427e-01 -2.45985427e-01
 -2.45985427e-01  1.50531569e-09  1.08944699e+02  5.99432651e+02
  2.46947503e+04]
E1 = -696.1203453501001  E_coul = 197.97877240228357
cycle= 4 E= -498.141572947817  delta_E= -1.31e-11  |g|= 2.7e-07  |ddm|= 2.04e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -696.1203453501001  E_coul = 197.97877240228357
  HOMO = -0.245985420581333  LUMO = 1.50529060032949e-09
  mo_energy =
[-1.16221053e+02 -1.19058009e+01 -6.69351494e+00 -6.69351494e+00
 -6.69351494e+00 -1.13604516e+00 -2.45985421e-01 -2.45985421e-01
 -2.45985421e-01  1.50529060e-09  1.08944700e+02  5.99432651e+02
  2.46947503e+04]
E1 = -696.1203453613698  E_coul = 197.97877241355326
Extra cycle  E= -498.141572947817  delta_E= 5.68e-14  |g|= 3.33e-09  |ddm|= 5.7e-09
    CPU time for scf_cycle      0.10 sec, wall time      0.10 sec
exp = [1.85131824e+04 1.00317266e-09 3.01620831e+02 1.37802469e+02
 4.23911463e+01 4.73412735e+00 3.77696210e-01 8.61549716e+00
 4.90916257e-01]
E = -498.14157294781654
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((9, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.5476253398322024e+03,6.8630785798847160e+02,1.5555024230205126e+02,4.2742815896802767e+01,4.7505784169783016e+00,3.9162204394177752e-01,8.5974230426361959e+00,4.9072756124177219e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "7s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:56:13 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  18305.4898622        1
[INPUT] 0    0    [1    /1   ]  2926.77509067        1
[INPUT] 0    0    [1    /1   ]  553.204499914        1
[INPUT] 0    0    [1    /1   ]  152.799269757        1
[INPUT] 0    0    [1    /1   ]  43.2228500736        1
[INPUT] 0    0    [1    /1   ]  4.74418122364        1
[INPUT] 0    0    [1    /1   ]  0.383605830508       1
[INPUT] 1    0    [1    /1   ]  8.60679746615        1
[INPUT] 1    0    [1    /1   ]  0.490788412271       1

nuclear repulsion = 0
number of shells = 9
number of NR pGTOs = 13
number of NR cGTOs = 13
basis = {'Ar': [[0, [18305.48986221496, 1.0]], [0, [2926.775090668759, 1.0]], [0, [553.2044999143395, 1.0]], [0, [152.7992697569418, 1.0]], [0, [43.22285007363109, 1.0]], [0, [4.744181223641409, 1.0]], [0, [0.3836058305077336, 1.0]], [1, [8.606797466149569, 1.0]], [1, [0.49078841227118886, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [18305.48986221]
bas 1, expnt(s) = [2926.77509067]
bas 2, expnt(s) = [553.20449991]
bas 3, expnt(s) = [152.79926976]
bas 4, expnt(s) = [43.22285007]
bas 5, expnt(s) = [4.74418122]
bas 6, expnt(s) = [0.38360583]
bas 7, expnt(s) = [8.60679747]
bas 8, expnt(s) = [0.49078841]
CPU time:       199.30
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  1  1  1  0 38 39  0]
 [ 0  1  1  1  0 40 41  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.83054899e+04 3.97604271e+03 2.92677509e+03 1.00532628e+03
 5.53204500e+02 2.88190262e+02 1.52799270e+02 1.09800921e+02
 4.32228501e+01 4.25892581e+01 4.74418122e+00 8.12149492e+00
 3.83605831e-01 1.23148443e+00 8.60679747e+00 4.30067250e+01
 4.90788412e-01 1.19840129e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.3201080638023
cond(S) = 38.698642318470036
E1 = -688.9273097662499  E_coul = 184.83389956490007
init E= -504.09341020135
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.685110096450198  LUMO = 112.003174307522
  mo_energy =
[-1.21595945e+02 -1.32864783e+01 -7.62819047e+00 -7.62819047e+00
 -7.62819047e+00 -1.65108920e+00 -6.85110096e-01 -6.85110096e-01
 -6.85110096e-01  1.12003174e+02  8.66680079e+02  5.13292389e+03
  3.41033662e+04]
E1 = -706.3636793637903  E_coul = 198.83822192033819
cycle= 1 E= -507.525457443452  delta_E= -3.43  |g|=  0.3  |ddm|= 0.306
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.37827
diis-c [-0.14308816  1.        ]
  HOMO = -0.240564142363912  LUMO = 113.356910037118
  mo_energy =
[-1.20215384e+02 -1.22582507e+01 -6.66062014e+00 -6.66062014e+00
 -6.66062014e+00 -1.16656936e+00 -2.40564142e-01 -2.40564142e-01
 -2.40564142e-01  1.13356910e+02  8.68037923e+02  5.13415535e+03
  3.41044434e+04]
E1 = -706.3425603621133  E_coul = 198.81682155768175
cycle= 2 E= -507.525738804432  delta_E= -0.000281  |g|= 0.0037  |ddm|= 0.00946
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00404335
diis-c [-1.60128762e-05 -1.53430281e-03  1.00153430e+00]
  HOMO = -0.240672356276503  LUMO = 113.354094601013
  mo_energy =
[-1.20221501e+02 -1.22589993e+01 -6.66178298e+00 -6.66178298e+00
 -6.66178298e+00 -1.16660879e+00 -2.40672356e-01 -2.40672356e-01
 -2.40672356e-01  1.13354095e+02  8.68029627e+02  5.13414290e+03
  3.41044286e+04]
E1 = -706.3423152566904  E_coul = 198.81657639936714
cycle= 3 E= -507.525738857323  delta_E= -5.29e-08  |g|= 5.99e-05  |ddm|= 0.000113
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=8.27988e-05
diis-c [-1.62419206e-10  3.70866927e-05 -2.09031001e-02  1.02086601e+00]
  HOMO = -0.240673388975333  LUMO = 113.354070120271
  mo_energy =
[-1.20221559e+02 -1.22590068e+01 -6.66179607e+00 -6.66179607e+00
 -6.66179607e+00 -1.16660907e+00 -2.40673389e-01 -2.40673389e-01
 -2.40673389e-01  1.13354070e+02  8.68029567e+02  5.13414283e+03
  3.41044286e+04]
E1 = -706.3423121919689  E_coul = 198.81657333463318
cycle= 4 E= -507.525738857336  delta_E= -1.24e-11  |g|= 1.84e-07  |ddm|= 1.53e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.3423121919689  E_coul = 198.81657333463318
  HOMO = -0.240673382940862  LUMO = 113.354070306129
  mo_energy =
[-1.20221559e+02 -1.22590067e+01 -6.66179601e+00 -6.66179601e+00
 -6.66179601e+00 -1.16660907e+00 -2.40673383e-01 -2.40673383e-01
 -2.40673383e-01  1.13354070e+02  8.68029567e+02  5.13414283e+03
  3.41044286e+04]
E1 = -706.3423122052042  E_coul = 198.8165733478681
Extra cycle  E= -507.525738857336  delta_E= -3.98e-13  |g|= 2.57e-09  |ddm|= 5.6e-09
    CPU time for scf_cycle      0.10 sec, wall time      0.11 sec
exp = [1.83054899e+04 2.92677509e+03 5.53204500e+02 1.52799270e+02
 4.32228501e+01 4.74418122e+00 3.83605831e-01 8.60679747e+00
 4.90788412e-01]
E = -507.5257388573361
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((9, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.5476253398322024e+03,6.8630785798847160e+02,1.5555024230205126e+02,4.2742815896802767e+01,4.7505784169783016e+00,3.9162204394177752e-01,8.5974230426361959e+00,4.9072756124177219e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "7s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:56:14 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  18305.4898622        1
[INPUT] 0    0    [1    /1   ]  2926.77509067        1
[INPUT] 0    0    [1    /1   ]  553.204499914        1
[INPUT] 0    0    [1    /1   ]  152.799269757        1
[INPUT] 0    0    [1    /1   ]  43.2228500736        1
[INPUT] 0    0    [1    /1   ]  4.74418122364        1
[INPUT] 0    0    [1    /1   ]  0.383605830508       1
[INPUT] 1    0    [1    /1   ]  8.60679746615        1
[INPUT] 1    0    [1    /1   ]  0.490788412271       1

nuclear repulsion = 0
number of shells = 9
number of NR pGTOs = 13
number of NR cGTOs = 13
basis = {'Ar': [[0, [18305.48986221496, 1.0]], [0, [2926.775090668759, 1.0]], [0, [553.2044999143395, 1.0]], [0, [152.7992697569418, 1.0]], [0, [43.22285007363109, 1.0]], [0, [4.744181223641409, 1.0]], [0, [0.3836058305077336, 1.0]], [1, [8.606797466149569, 1.0]], [1, [0.49078841227118886, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [18305.48986221]
bas 1, expnt(s) = [2926.77509067]
bas 2, expnt(s) = [553.20449991]
bas 3, expnt(s) = [152.79926976]
bas 4, expnt(s) = [43.22285007]
bas 5, expnt(s) = [4.74418122]
bas 6, expnt(s) = [0.38360583]
bas 7, expnt(s) = [8.60679747]
bas 8, expnt(s) = [0.49078841]
CPU time:       200.07
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  1  1  1  0 38 39  0]
 [ 0  1  1  1  0 40 41  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.83054899e+04 3.97604271e+03 2.92677509e+03 1.00532628e+03
 5.53204500e+02 2.88190262e+02 1.52799270e+02 1.09800921e+02
 4.32228501e+01 4.25892581e+01 4.74418122e+00 8.12149492e+00
 3.83605831e-01 1.23148443e+00 8.60679747e+00 4.30067250e+01
 4.90788412e-01 1.19840129e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.3201080638023
cond(S) = 38.698642318470036
E1 = -688.9273097662499  E_coul = 184.83389956490007
init E= -504.09341020135
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.685110096450198  LUMO = 112.003174307522
  mo_energy =
[-1.21595945e+02 -1.32864783e+01 -7.62819047e+00 -7.62819047e+00
 -7.62819047e+00 -1.65108920e+00 -6.85110096e-01 -6.85110096e-01
 -6.85110096e-01  1.12003174e+02  8.66680079e+02  5.13292389e+03
  3.41033662e+04]
E1 = -706.3636793637903  E_coul = 198.83822192033819
cycle= 1 E= -507.525457443452  delta_E= -3.43  |g|=  0.3  |ddm|= 0.306
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.37827
diis-c [-0.14308816  1.        ]
  HOMO = -0.240564142363912  LUMO = 113.356910037118
  mo_energy =
[-1.20215384e+02 -1.22582507e+01 -6.66062014e+00 -6.66062014e+00
 -6.66062014e+00 -1.16656936e+00 -2.40564142e-01 -2.40564142e-01
 -2.40564142e-01  1.13356910e+02  8.68037923e+02  5.13415535e+03
  3.41044434e+04]
E1 = -706.3425603621133  E_coul = 198.81682155768175
cycle= 2 E= -507.525738804432  delta_E= -0.000281  |g|= 0.0037  |ddm|= 0.00946
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00404335
diis-c [-1.60128762e-05 -1.53430281e-03  1.00153430e+00]
  HOMO = -0.240672356276503  LUMO = 113.354094601013
  mo_energy =
[-1.20221501e+02 -1.22589993e+01 -6.66178298e+00 -6.66178298e+00
 -6.66178298e+00 -1.16660879e+00 -2.40672356e-01 -2.40672356e-01
 -2.40672356e-01  1.13354095e+02  8.68029627e+02  5.13414290e+03
  3.41044286e+04]
E1 = -706.3423152566904  E_coul = 198.81657639936714
cycle= 3 E= -507.525738857323  delta_E= -5.29e-08  |g|= 5.99e-05  |ddm|= 0.000113
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=8.27988e-05
diis-c [-1.62419206e-10  3.70866927e-05 -2.09031001e-02  1.02086601e+00]
  HOMO = -0.240673388975333  LUMO = 113.354070120271
  mo_energy =
[-1.20221559e+02 -1.22590068e+01 -6.66179607e+00 -6.66179607e+00
 -6.66179607e+00 -1.16660907e+00 -2.40673389e-01 -2.40673389e-01
 -2.40673389e-01  1.13354070e+02  8.68029567e+02  5.13414283e+03
  3.41044286e+04]
E1 = -706.3423121919689  E_coul = 198.81657333463318
cycle= 4 E= -507.525738857336  delta_E= -1.24e-11  |g|= 1.84e-07  |ddm|= 1.53e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.3423121919689  E_coul = 198.81657333463318
  HOMO = -0.240673382940862  LUMO = 113.354070306129
  mo_energy =
[-1.20221559e+02 -1.22590067e+01 -6.66179601e+00 -6.66179601e+00
 -6.66179601e+00 -1.16660907e+00 -2.40673383e-01 -2.40673383e-01
 -2.40673383e-01  1.13354070e+02  8.68029567e+02  5.13414283e+03
  3.41044286e+04]
E1 = -706.3423122052042  E_coul = 198.8165733478681
Extra cycle  E= -507.525738857336  delta_E= -3.98e-13  |g|= 2.57e-09  |ddm|= 5.6e-09
    CPU time for scf_cycle      0.10 sec, wall time      0.10 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 38.698642318470036
E1 = -706.3423122052042  E_coul = 198.8165733478681
init E= -507.525738857336
    CPU time for initialize scf      0.06 sec, wall time      0.06 sec
  HOMO = -0.240673382881774  LUMO = 113.354070307956
  mo_energy =
[-1.20221559e+02 -1.22590067e+01 -6.66179601e+00 -6.66179601e+00
 -6.66179601e+00 -1.16660907e+00 -2.40673383e-01 -2.40673383e-01
 -2.40673383e-01  1.13354070e+02  8.68029567e+02  5.13414283e+03
  3.41044286e+04]
E1 = -706.3423122053674  E_coul = 198.81657334803134
cycle= 1 E= -507.525738857336  delta_E=    0  |g|= 4.25e-11  |ddm|= 7.29e-11
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -706.3423122053674  E_coul = 198.81657334803134
  HOMO = -0.240673382881063  LUMO = 113.354070307977
  mo_energy =
[-1.20221559e+02 -1.22590067e+01 -6.66179601e+00 -6.66179601e+00
 -6.66179601e+00 -1.16660907e+00 -2.40673383e-01 -2.40673383e-01
 -2.40673383e-01  1.13354070e+02  8.68029567e+02  5.13414283e+03
  3.41044286e+04]
E1 = -706.3423122053692  E_coul = 198.81657334803353
Extra cycle  E= -507.525738857336  delta_E= 3.98e-13  |g|= 4.15e-12  |ddm|= 1.08e-12
    CPU time for scf_cycle      0.13 sec, wall time      0.13 sec
exp = [1.83054899e+04 2.92677509e+03 5.53204500e+02 1.52799270e+02
 4.32228501e+01 4.74418122e+00 3.83605831e-01 8.60679747e+00
 4.90788412e-01]
grad_E = [-4.17790435e-06  1.71978792e-04 -1.80338929e-03  8.79144408e-03
 -1.05468783e-02 -3.47293242e-03 -1.34159892e-01  6.97368084e-03
 -3.06345117e-02]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((9, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.5476253398322024e+03,6.8630785798847160e+02,1.5555024230205126e+02,4.2742815896802767e+01,4.7505784169783016e+00,3.9162204394177752e-01,8.5974230426361959e+00,4.9072756124177219e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "7s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:56:17 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  18513.3019617        1
[INPUT] 0    0    [1    /1   ]  1.0008989193e-09      1
[INPUT] 0    0    [1    /1   ]  276.742231006        1
[INPUT] 0    0    [1    /1   ]  127.980516458        1
[INPUT] 0    0    [1    /1   ]  40.7622806251        1
[INPUT] 0    0    [1    /1   ]  4.73720876115        1
[INPUT] 0    0    [1    /1   ]  0.383095427275       1
[INPUT] 1    0    [1    /1   ]  8.61066301534        1
[INPUT] 1    0    [1    /1   ]  0.490938447162       1

nuclear repulsion = 0
number of shells = 9
number of NR pGTOs = 13
number of NR cGTOs = 13
basis = {'Ar': [[0, [18513.301961685967, 1.0]], [0, [1.0008989193011075e-09, 1.0]], [0, [276.74223100602615, 1.0]], [0, [127.98051645821593, 1.0]], [0, [40.76228062513398, 1.0]], [0, [4.737208761146933, 1.0]], [0, [0.383095427274659, 1.0]], [1, [8.610663015342201, 1.0]], [1, [0.4909384471624238, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [18513.30196169]
bas 1, expnt(s) = [1.00089892e-09]
bas 2, expnt(s) = [276.74223101]
bas 3, expnt(s) = [127.98051646]
bas 4, expnt(s) = [40.76228063]
bas 5, expnt(s) = [4.73720876]
bas 6, expnt(s) = [0.38309543]
bas 7, expnt(s) = [8.61066302]
bas 8, expnt(s) = [0.49093845]
CPU time:       203.44
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  1  1  1  0 38 39  0]
 [ 0  1  1  1  0 40 41  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.85133020e+04 4.00984825e+03 1.00089892e-09 4.49580731e-07
 2.76742231e+02 1.71423991e+02 1.27980516e+02 9.61330935e+01
 4.07622806e+01 4.07576260e+01 4.73720876e+00 8.11254123e+00
 3.83095427e-01 1.23025532e+00 8.61066302e+00 4.30308707e+01
 4.90938447e-01 1.19885925e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.31572950461692
cond(S) = 75.43547536025105
E1 = -656.7867291308174  E_coul = 184.5279789503102
init E= -472.258750180507
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.689088474931501  LUMO = -3.4544117085977e-05
  mo_energy =
[-1.16887631e+02 -1.28724881e+01 -7.64465929e+00 -7.64465929e+00
 -7.64465929e+00 -1.61730996e+00 -6.89088475e-01 -6.89088475e-01
 -6.89088475e-01 -3.45441171e-05  9.98111883e+01  5.48306305e+02
  2.46145392e+04]
E1 = -695.0475896012921  E_coul = 197.99509398063688
cycle= 1 E= -497.052495620655  delta_E= -24.8  |g|= 0.722  |ddm|= 0.465
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=1.3913
diis-c [-1.93571338  1.        ]
  HOMO = -0.243026023615852  LUMO = 1.50188787974663e-09
  mo_energy =
[-1.15746962e+02 -1.18552197e+01 -6.68947891e+00 -6.68947891e+00
 -6.68947891e+00 -1.12925581e+00 -2.43026024e-01 -2.43026024e-01
 -2.43026024e-01  1.50188788e-09  1.01069004e+02  5.49342249e+02
  2.46145731e+04]
E1 = -695.0158509917597  E_coul = 197.96284678960382
cycle= 2 E= -497.053004202156  delta_E= -0.000509  |g|= 0.00431  |ddm|= 0.0159
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00299057
diis-c [-8.84657168e-06 -2.23808325e-04  1.00022381e+00]
  HOMO = -0.243178499629803  LUMO = 1.50187131931413e-09
  mo_energy =
[-1.15756481e+02 -1.18562767e+01 -6.69115858e+00 -6.69115858e+00
 -6.69115858e+00 -1.12931394e+00 -2.43178500e-01 -2.43178500e-01
 -2.43178500e-01  1.50187132e-09  1.01064720e+02  5.49330364e+02
  2.46145482e+04]
E1 = -695.0154747320529  E_coul = 197.96247045246614
cycle= 3 E= -497.053004279587  delta_E= -7.74e-08  |g|= 6.58e-05  |ddm|= 0.000187
    CPU time for cycle= 3      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=6.37744e-05
diis-c [-1.05965657e-09  1.18536853e-05 -1.84396452e-02  1.01842779e+00]
  HOMO = -0.243180151774254  LUMO = 1.50179560279583e-09
  mo_energy =
[-1.15756589e+02 -1.18562886e+01 -6.69117936e+00 -6.69117936e+00
 -6.69117936e+00 -1.12931446e+00 -2.43180152e-01 -2.43180152e-01
 -2.43180152e-01  1.50179560e-09  1.01064672e+02  5.49330239e+02
  2.46145480e+04]
E1 = -695.0154696725489  E_coul = 197.96246539294364
cycle= 4 E= -497.053004279605  delta_E= -1.85e-11  |g|= 3.21e-07  |ddm|= 2.59e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -695.0154696725489  E_coul = 197.96246539294364
  HOMO = -0.243180144868409  LUMO = 1.50142700884852e-09
  mo_energy =
[-1.15756588e+02 -1.18562886e+01 -6.69117930e+00 -6.69117930e+00
 -6.69117930e+00 -1.12931445e+00 -2.43180145e-01 -2.43180145e-01
 -2.43180145e-01  1.50142701e-09  1.01064673e+02  5.49330240e+02
  2.46145480e+04]
E1 = -695.0154696847429  E_coul = 197.96246540513778
Extra cycle  E= -497.053004279605  delta_E= 1.14e-13  |g|= 4.25e-09  |ddm|= 6.72e-09
    CPU time for scf_cycle      0.10 sec, wall time      0.10 sec
exp = [1.85133020e+04 1.00089892e-09 2.76742231e+02 1.27980516e+02
 4.07622806e+01 4.73720876e+00 3.83095427e-01 8.61066302e+00
 4.90938447e-01]
E = -497.05300427960515
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((9, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.5476253398322024e+03,6.8630785798847160e+02,1.5555024230205126e+02,4.2742815896802767e+01,4.7505784169783016e+00,3.9162204394177752e-01,8.5974230426361959e+00,4.9072756124177219e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "7s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:56:18 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  18326.2710722        1
[INPUT] 0    0    [1    /1   ]  2634.0975816         1
[INPUT] 0    0    [1    /1   ]  525.558273024        1
[INPUT] 0    0    [1    /1   ]  150.317394427        1
[INPUT] 0    0    [1    /1   ]  42.9767931288        1
[INPUT] 0    0    [1    /1   ]  4.74348397739        1
[INPUT] 0    0    [1    /1   ]  0.383554790184       1
[INPUT] 1    0    [1    /1   ]  8.60718402107        1
[INPUT] 1    0    [1    /1   ]  0.49080341576        1

nuclear repulsion = 0
number of shells = 9
number of NR pGTOs = 13
number of NR cGTOs = 13
basis = {'Ar': [[0, [18326.27107216206, 1.0]], [0, [2634.097581601983, 1.0]], [0, [525.5582730235081, 1.0]], [0, [150.31739442706922, 1.0]], [0, [42.97679312878138, 1.0]], [0, [4.7434839773919615, 1.0]], [0, [0.3835547901844262, 1.0]], [1, [8.607184021068832, 1.0]], [1, [0.49080341576031233, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [18326.27107216]
bas 1, expnt(s) = [2634.0975816]
bas 2, expnt(s) = [525.55827302]
bas 3, expnt(s) = [150.31739443]
bas 4, expnt(s) = [42.97679313]
bas 5, expnt(s) = [4.74348398]
bas 6, expnt(s) = [0.38355479]
bas 7, expnt(s) = [8.60718402]
bas 8, expnt(s) = [0.49080342]
CPU time:       204.23
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  1  1  1  0 38 39  0]
 [ 0  1  1  1  0 40 41  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.83262711e+04 3.97942756e+03 2.63409758e+03 9.28942684e+02
 5.25558273e+02 2.77319675e+02 1.50317394e+02 1.08460588e+02
 4.29767931e+01 4.24072908e+01 4.74348398e+00 8.12059970e+00
 3.83554790e-01 1.23136153e+00 8.60718402e+00 4.30091394e+01
 4.90803416e-01 1.19844708e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.320133571009933
cond(S) = 41.969176231276705
E1 = -688.9421158549881  E_coul = 184.8357187744781
init E= -504.10639708051
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.685093990751564  LUMO = 110.011283506642
  mo_energy =
[-1.21603803e+02 -1.32869435e+01 -7.62808621e+00 -7.62808621e+00
 -7.62808621e+00 -1.65107070e+00 -6.85093991e-01 -6.85093991e-01
 -6.85093991e-01  1.10011284e+02  8.33823558e+02  4.71779241e+03
  3.30989229e+04]
E1 = -706.3832160415378  E_coul = 198.84003202904037
cycle= 1 E= -507.543184012497  delta_E= -3.44  |g|= 0.301  |ddm|= 0.307
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.374737
diis-c [-0.14042801  1.        ]
  HOMO = -0.240568776453326  LUMO = 111.36378802297
  mo_energy =
[-1.20222855e+02 -1.22587965e+01 -6.66058363e+00 -6.66058363e+00
 -6.66058363e+00 -1.16661058e+00 -2.40568776e-01 -2.40568776e-01
 -2.40568776e-01  1.11363788e+02  8.35183866e+02  4.71903286e+03
  3.31000029e+04]
E1 = -706.3615305704443  E_coul = 198.81805705862797
cycle= 2 E= -507.543473511816  delta_E= -0.000289  |g|= 0.00376  |ddm|= 0.0098
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00412317
diis-c [-1.66555780e-05 -1.56981110e-03  1.00156981e+00]
  HOMO = -0.240680608175633  LUMO = 111.360936164129
  mo_energy =
[-1.20229113e+02 -1.22595685e+01 -6.66178365e+00 -6.66178365e+00
 -6.66178365e+00 -1.16665125e+00 -2.40680608e-01 -2.40680608e-01
 -2.40680608e-01  1.11360936e+02  8.35175537e+02  4.71902039e+03
  3.30999879e+04]
E1 = -706.3612753386844  E_coul = 198.81780177131225
cycle= 3 E= -507.543473567372  delta_E= -5.56e-08  |g|= 6.14e-05  |ddm|= 0.000119
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=8.52547e-05
diis-c [-1.73173122e-10  3.76765197e-05 -2.11080848e-02  1.02107041e+00]
  HOMO = -0.240681685479889  LUMO = 111.360910846197
  mo_energy =
[-1.20229173e+02 -1.22595763e+01 -6.66179729e+00 -6.66179729e+00
 -6.66179729e+00 -1.16665155e+00 -2.40681685e-01 -2.40681685e-01
 -2.40681685e-01  1.11360911e+02  8.35175475e+02  4.71902032e+03
  3.30999878e+04]
E1 = -706.3612721093903  E_coul = 198.8177985420044
cycle= 4 E= -507.543473567386  delta_E= -1.36e-11  |g|= 1.93e-07  |ddm|= 1.62e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.3612721093903  E_coul = 198.8177985420044
  HOMO = -0.240681679062627  LUMO = 111.360911037997
  mo_energy =
[-1.20229173e+02 -1.22595763e+01 -6.66179722e+00 -6.66179722e+00
 -6.66179722e+00 -1.16665155e+00 -2.40681679e-01 -2.40681679e-01
 -2.40681679e-01  1.11360911e+02  8.35175475e+02  4.71902032e+03
  3.30999878e+04]
E1 = -706.3612721235197  E_coul = 198.81779855613397
Extra cycle  E= -507.543473567386  delta_E= 1.14e-13  |g|= 2.73e-09  |ddm|= 6.04e-09
    CPU time for scf_cycle      0.10 sec, wall time      0.10 sec
exp = [1.83262711e+04 2.63409758e+03 5.25558273e+02 1.50317394e+02
 4.29767931e+01 4.74348398e+00 3.83554790e-01 8.60718402e+00
 4.90803416e-01]
E = -507.5434735673857
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((9, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.5476253398322024e+03,6.8630785798847160e+02,1.5555024230205126e+02,4.2742815896802767e+01,4.7505784169783016e+00,3.9162204394177752e-01,8.5974230426361959e+00,4.9072756124177219e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "7s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:56:19 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  18326.2710722        1
[INPUT] 0    0    [1    /1   ]  2634.0975816         1
[INPUT] 0    0    [1    /1   ]  525.558273024        1
[INPUT] 0    0    [1    /1   ]  150.317394427        1
[INPUT] 0    0    [1    /1   ]  42.9767931288        1
[INPUT] 0    0    [1    /1   ]  4.74348397739        1
[INPUT] 0    0    [1    /1   ]  0.383554790184       1
[INPUT] 1    0    [1    /1   ]  8.60718402107        1
[INPUT] 1    0    [1    /1   ]  0.49080341576        1

nuclear repulsion = 0
number of shells = 9
number of NR pGTOs = 13
number of NR cGTOs = 13
basis = {'Ar': [[0, [18326.27107216206, 1.0]], [0, [2634.097581601983, 1.0]], [0, [525.5582730235081, 1.0]], [0, [150.31739442706922, 1.0]], [0, [42.97679312878138, 1.0]], [0, [4.7434839773919615, 1.0]], [0, [0.3835547901844262, 1.0]], [1, [8.607184021068832, 1.0]], [1, [0.49080341576031233, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [18326.27107216]
bas 1, expnt(s) = [2634.0975816]
bas 2, expnt(s) = [525.55827302]
bas 3, expnt(s) = [150.31739443]
bas 4, expnt(s) = [42.97679313]
bas 5, expnt(s) = [4.74348398]
bas 6, expnt(s) = [0.38355479]
bas 7, expnt(s) = [8.60718402]
bas 8, expnt(s) = [0.49080342]
CPU time:       205.01
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  1  1  1  0 38 39  0]
 [ 0  1  1  1  0 40 41  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.83262711e+04 3.97942756e+03 2.63409758e+03 9.28942684e+02
 5.25558273e+02 2.77319675e+02 1.50317394e+02 1.08460588e+02
 4.29767931e+01 4.24072908e+01 4.74348398e+00 8.12059970e+00
 3.83554790e-01 1.23136153e+00 8.60718402e+00 4.30091394e+01
 4.90803416e-01 1.19844708e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.320133571009933
cond(S) = 41.969176231276705
E1 = -688.9421158549881  E_coul = 184.8357187744781
init E= -504.10639708051
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.685093990751564  LUMO = 110.011283506642
  mo_energy =
[-1.21603803e+02 -1.32869435e+01 -7.62808621e+00 -7.62808621e+00
 -7.62808621e+00 -1.65107070e+00 -6.85093991e-01 -6.85093991e-01
 -6.85093991e-01  1.10011284e+02  8.33823558e+02  4.71779241e+03
  3.30989229e+04]
E1 = -706.3832160415378  E_coul = 198.84003202904037
cycle= 1 E= -507.543184012497  delta_E= -3.44  |g|= 0.301  |ddm|= 0.307
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.374737
diis-c [-0.14042801  1.        ]
  HOMO = -0.240568776453326  LUMO = 111.36378802297
  mo_energy =
[-1.20222855e+02 -1.22587965e+01 -6.66058363e+00 -6.66058363e+00
 -6.66058363e+00 -1.16661058e+00 -2.40568776e-01 -2.40568776e-01
 -2.40568776e-01  1.11363788e+02  8.35183866e+02  4.71903286e+03
  3.31000029e+04]
E1 = -706.3615305704443  E_coul = 198.81805705862797
cycle= 2 E= -507.543473511816  delta_E= -0.000289  |g|= 0.00376  |ddm|= 0.0098
    CPU time for cycle= 2      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.00412317
diis-c [-1.66555780e-05 -1.56981110e-03  1.00156981e+00]
  HOMO = -0.240680608175633  LUMO = 111.360936164129
  mo_energy =
[-1.20229113e+02 -1.22595685e+01 -6.66178365e+00 -6.66178365e+00
 -6.66178365e+00 -1.16665125e+00 -2.40680608e-01 -2.40680608e-01
 -2.40680608e-01  1.11360936e+02  8.35175537e+02  4.71902039e+03
  3.30999879e+04]
E1 = -706.3612753386844  E_coul = 198.81780177131225
cycle= 3 E= -507.543473567372  delta_E= -5.56e-08  |g|= 6.14e-05  |ddm|= 0.000119
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=8.52547e-05
diis-c [-1.73173122e-10  3.76765197e-05 -2.11080848e-02  1.02107041e+00]
  HOMO = -0.240681685479889  LUMO = 111.360910846197
  mo_energy =
[-1.20229173e+02 -1.22595763e+01 -6.66179729e+00 -6.66179729e+00
 -6.66179729e+00 -1.16665155e+00 -2.40681685e-01 -2.40681685e-01
 -2.40681685e-01  1.11360911e+02  8.35175475e+02  4.71902032e+03
  3.30999878e+04]
E1 = -706.3612721093903  E_coul = 198.8177985420044
cycle= 4 E= -507.543473567386  delta_E= -1.36e-11  |g|= 1.93e-07  |ddm|= 1.62e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.3612721093903  E_coul = 198.8177985420044
  HOMO = -0.240681679062627  LUMO = 111.360911037997
  mo_energy =
[-1.20229173e+02 -1.22595763e+01 -6.66179722e+00 -6.66179722e+00
 -6.66179722e+00 -1.16665155e+00 -2.40681679e-01 -2.40681679e-01
 -2.40681679e-01  1.11360911e+02  8.35175475e+02  4.71902032e+03
  3.30999878e+04]
E1 = -706.3612721235197  E_coul = 198.81779855613397
Extra cycle  E= -507.543473567386  delta_E= 1.14e-13  |g|= 2.73e-09  |ddm|= 6.04e-09
    CPU time for scf_cycle      0.10 sec, wall time      0.10 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 41.969176231276705
E1 = -706.3612721235197  E_coul = 198.81779855613397
init E= -507.543473567386
    CPU time for initialize scf      0.06 sec, wall time      0.06 sec
  HOMO = -0.240681678998972  LUMO = 111.360911039917
  mo_energy =
[-1.20229173e+02 -1.22595763e+01 -6.66179722e+00 -6.66179722e+00
 -6.66179722e+00 -1.16665155e+00 -2.40681679e-01 -2.40681679e-01
 -2.40681679e-01  1.11360911e+02  8.35175475e+02  4.71902032e+03
  3.30999878e+04]
E1 = -706.3612721236967  E_coul = 198.817798556311
cycle= 1 E= -507.543473567386  delta_E=    0  |g|= 4.62e-11  |ddm|= 7.95e-11
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -706.3612721236967  E_coul = 198.817798556311
  HOMO = -0.240681678998194  LUMO = 111.36091103994
  mo_energy =
[-1.20229173e+02 -1.22595763e+01 -6.66179722e+00 -6.66179722e+00
 -6.66179722e+00 -1.16665155e+00 -2.40681679e-01 -2.40681679e-01
 -2.40681679e-01  1.11360911e+02  8.35175475e+02  4.71902032e+03
  3.30999878e+04]
E1 = -706.3612721236992  E_coul = 198.81779855631345
Extra cycle  E= -507.543473567386  delta_E= -5.68e-14  |g|= 4.29e-12  |ddm|= 1.19e-12
    CPU time for scf_cycle      0.13 sec, wall time      0.13 sec
exp = [1.83262711e+04 2.63409758e+03 5.25558273e+02 1.50317394e+02
 4.29767931e+01 4.74348398e+00 3.83554790e-01 8.60718402e+00
 4.90803416e-01]
grad_E = [-1.82978924e-06  1.48077057e-04 -1.71964283e-03  8.70666360e-03
 -1.03163428e-02 -3.30617320e-03 -1.34589281e-01  7.24450219e-03
 -3.07186763e-02]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((9, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.5476253398322024e+03,6.8630785798847160e+02,1.5555024230205126e+02,4.2742815896802767e+01,4.7505784169783016e+00,3.9162204394177752e-01,8.5974230426361959e+00,4.9072756124177219e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "7s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:56:22 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  18391.5344353        1
[INPUT] 0    0    [1    /1   ]  1715.49162334        1
[INPUT] 0    0    [1    /1   ]  430.948218172        1
[INPUT] 0    0    [1    /1   ]  137.452042817        1
[INPUT] 0    0    [1    /1   ]  41.3223046949        1
[INPUT] 0    0    [1    /1   ]  4.74249935899        1
[INPUT] 0    0    [1    /1   ]  0.385696382552       1
[INPUT] 1    0    [1    /1   ]  8.60591869636        1
[INPUT] 1    0    [1    /1   ]  0.490857582501       1

nuclear repulsion = 0
number of shells = 9
number of NR pGTOs = 13
number of NR cGTOs = 13
basis = {'Ar': [[0, [18391.534435332163, 1.0]], [0, [1715.4916233353601, 1.0]], [0, [430.9482181716879, 1.0]], [0, [137.45204281665963, 1.0]], [0, [41.32230469485975, 1.0]], [0, [4.74249935898646, 1.0]], [0, [0.3856963825519055, 1.0]], [1, [8.60591869636034, 1.0]], [1, [0.4908575825007658, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [18391.53443533]
bas 1, expnt(s) = [1715.49162334]
bas 2, expnt(s) = [430.94821817]
bas 3, expnt(s) = [137.45204282]
bas 4, expnt(s) = [41.32230469]
bas 5, expnt(s) = [4.74249936]
bas 6, expnt(s) = [0.38569638]
bas 7, expnt(s) = [8.6059187]
bas 8, expnt(s) = [0.49085758]
CPU time:       208.36
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  1  1  1  0 38 39  0]
 [ 0  1  1  1  0 40 41  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.83915344e+04 3.99005147e+03 1.71549162e+03 6.73451734e+02
 4.30948218e+02 2.38964749e+02 1.37452043e+02 1.01421125e+02
 4.13223047e+01 4.11768790e+01 4.74249936e+00 8.11933545e+00
 3.85696383e-01 1.23651446e+00 8.60591870e+00 4.30012362e+01
 4.90857583e-01 1.19861242e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.3201421135381
cond(S) = 59.7624656573084
E1 = -688.7065871688853  E_coul = 184.87139439459298
init E= -503.835192774292
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.683759876042367  LUMO = 99.1242117020699
  mo_energy =
[-1.21583257e+02 -1.32835904e+01 -7.62522585e+00 -7.62522585e+00
 -7.62522585e+00 -1.65082924e+00 -6.83759876e-01 -6.83759876e-01
 -6.83759876e-01  9.91242117e+01  7.08263487e+02  3.36448616e+03
  2.98827057e+04]
E1 = -706.393417242751  E_coul = 198.88817067509711
cycle= 1 E= -507.505246567654  delta_E= -3.67  |g|= 0.311  |ddm|= 0.307
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.388064
diis-c [-0.15059353  1.        ]
  HOMO = -0.239204361669  LUMO = 100.470658186483
  mo_energy =
[-1.20198594e+02 -1.22553325e+01 -6.65719210e+00 -6.65719210e+00
 -6.65719210e+00 -1.16558966e+00 -2.39204362e-01 -2.39204362e-01
 -2.39204362e-01  1.00470658e+02  7.09634296e+02  3.36575923e+03
  2.98837901e+04]
E1 = -706.368248567809  E_coul = 198.86266266438432
cycle= 2 E= -507.505585903425  delta_E= -0.000339  |g|= 0.00414  |ddm|= 0.0118
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00454334
diis-c [-2.02960822e-05 -1.51793044e-03  1.00151793e+00]
  HOMO = -0.239338907732048  LUMO = 100.467590900573
  mo_energy =
[-1.20205704e+02 -1.22562531e+01 -6.65862294e+00 -6.65862294e+00
 -6.65862294e+00 -1.16563867e+00 -2.39338908e-01 -2.39338908e-01
 -2.39338908e-01  1.00467591e+02  7.09625568e+02  3.36574634e+03
  2.98837736e+04]
E1 = -706.3679284930236  E_coul = 198.8623425159178
cycle= 3 E= -507.505585977106  delta_E= -7.37e-08  |g|= 7.21e-05  |ddm|= 0.000152
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.000100778
diis-c [-2.59977848e-10  3.80571930e-05 -2.26160263e-02  1.02257797e+00]
  HOMO = -0.239340314412081  LUMO = 100.46755978749
  mo_energy =
[-1.20205780e+02 -1.22562632e+01 -6.65864056e+00 -6.65864056e+00
 -6.65864056e+00 -1.16563906e+00 -2.39340314e-01 -2.39340314e-01
 -2.39340314e-01  1.00467560e+02  7.09625492e+02  3.36574624e+03
  2.98837735e+04]
E1 = -706.3679240721871  E_coul = 198.86233809506106
cycle= 4 E= -507.505585977126  delta_E= -2.02e-11  |g|= 2.59e-07  |ddm|= 2.22e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.3679240721871  E_coul = 198.86233809506106
  HOMO = -0.239340304890456  LUMO = 100.467560026992
  mo_energy =
[-1.20205779e+02 -1.22562631e+01 -6.65864046e+00 -6.65864046e+00
 -6.65864046e+00 -1.16563906e+00 -2.39340305e-01 -2.39340305e-01
 -2.39340305e-01  1.00467560e+02  7.09625492e+02  3.36574624e+03
  2.98837735e+04]
E1 = -706.3679240936108  E_coul = 198.8623381164846
Extra cycle  E= -507.505585977126  delta_E= -2.27e-13  |g|= 4.02e-09  |ddm|= 9.63e-09
    CPU time for scf_cycle      0.10 sec, wall time      0.11 sec
exp = [1.83915344e+04 1.71549162e+03 4.30948218e+02 1.37452043e+02
 4.13223047e+01 4.74249936e+00 3.85696383e-01 8.60591870e+00
 4.90857583e-01]
E = -507.5055859771262
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((9, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.5476253398322024e+03,6.8630785798847160e+02,1.5555024230205126e+02,4.2742815896802767e+01,4.7505784169783016e+00,3.9162204394177752e-01,8.5974230426361959e+00,4.9072756124177219e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "7s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:56:23 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  18347.3024415        1
[INPUT] 0    0    [1    /1   ]  2338.07328422        1
[INPUT] 0    0    [1    /1   ]  495.069819557        1
[INPUT] 0    0    [1    /1   ]  146.171485469        1
[INPUT] 0    0    [1    /1   ]  42.4436278779        1
[INPUT] 0    0    [1    /1   ]  4.74316668033        1
[INPUT] 0    0    [1    /1   ]  0.384244926548       1
[INPUT] 1    0    [1    /1   ]  8.60677626532        1
[INPUT] 1    0    [1    /1   ]  0.4908208712         1

nuclear repulsion = 0
number of shells = 9
number of NR pGTOs = 13
number of NR cGTOs = 13
basis = {'Ar': [[0, [18347.30244154651, 1.0]], [0, [2338.073284222357, 1.0]], [0, [495.0698195571209, 1.0]], [0, [146.1714854693266, 1.0]], [0, [42.44362787792829, 1.0]], [0, [4.743166680329981, 1.0]], [0, [0.3842449265482844, 1.0]], [1, [8.606776265322837, 1.0]], [1, [0.49082087120041673, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [18347.30244155]
bas 1, expnt(s) = [2338.07328422]
bas 2, expnt(s) = [495.06981956]
bas 3, expnt(s) = [146.17148547]
bas 4, expnt(s) = [42.44362788]
bas 5, expnt(s) = [4.74316668]
bas 6, expnt(s) = [0.38424493]
bas 7, expnt(s) = [8.60677627]
bas 8, expnt(s) = [0.49082087]
CPU time:       209.15
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  1  1  1  0 38 39  0]
 [ 0  1  1  1  0 40 41  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.83473024e+04 3.98285219e+03 2.33807328e+03 8.49490671e+02
 4.95069820e+02 2.65164184e+02 1.46171485e+02 1.06209171e+02
 4.24436279e+01 4.20121007e+01 4.74316668e+00 8.12019230e+00
 3.84244927e-01 1.23302287e+00 8.60677627e+00 4.30065926e+01
 4.90820871e-01 1.19850036e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.320144643350087
cond(S) = 45.96816830932752
E1 = -688.9515208163606  E_coul = 184.8467355232466
init E= -504.104785293114
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.684662438098706  LUMO = 106.548586402039
  mo_energy =
[-1.21611083e+02 -1.32864820e+01 -7.62721364e+00 -7.62721364e+00
 -7.62721364e+00 -1.65103776e+00 -6.84662438e-01 -6.84662438e-01
 -6.84662438e-01  1.06548586e+02  7.93159728e+02  4.28177208e+03
  3.20635865e+04]
E1 = -706.4131125180854  E_coul = 198.85318867218925
cycle= 1 E= -507.559923845896  delta_E= -3.46  |g|= 0.303  |ddm|= 0.307
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.372906
diis-c [-0.13905875  1.        ]
  HOMO = -0.240144900699539  LUMO = 107.899009300297
  mo_energy =
[-1.20229254e+02 -1.22584062e+01 -6.65969301e+00 -6.65969301e+00
 -6.65969301e+00 -1.16634369e+00 -2.40144901e-01 -2.40144901e-01
 -2.40144901e-01  1.07899009e+02  7.94523104e+02  4.28302224e+03
  3.20646689e+04]
E1 = -706.3903912220727  E_coul = 198.83016312367542
cycle= 2 E= -507.560228098397  delta_E= -0.000304  |g|= 0.00388  |ddm|= 0.0104
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00425126
diis-c [-1.77300701e-05 -1.57342961e-03  1.00157343e+00]
  HOMO = -0.240263349078489  LUMO = 107.896088711208
  mo_energy =
[-1.20235770e+02 -1.22592215e+01 -6.66096083e+00 -6.66096083e+00
 -6.66096083e+00 -1.16638676e+00 -2.40263349e-01 -2.40263349e-01
 -2.40263349e-01  1.07896089e+02  7.94514638e+02  4.28300960e+03
  3.20646534e+04]
E1 = -706.390117313102  E_coul = 198.8298891540571
cycle= 3 E= -507.560228159045  delta_E= -6.06e-08  |g|= 6.45e-05  |ddm|= 0.000128
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=8.97067e-05
diis-c [-1.93393390e-10  3.82995831e-05 -2.15340468e-02  1.02149575e+00]
  HOMO = -0.24026451699774  LUMO = 107.896061729131
  mo_energy =
[-1.20235835e+02 -1.22592299e+01 -6.66097557e+00 -6.66097557e+00
 -6.66097557e+00 -1.16638709e+00 -2.40264517e-01 -2.40264517e-01
 -2.40264517e-01  1.07896062e+02  7.94514572e+02  4.28300952e+03
  3.20646533e+04]
E1 = -706.390113756992  E_coul = 198.82988559793176
cycle= 4 E= -507.56022815906  delta_E= -1.54e-11  |g|= 2.1e-07  |ddm|= 1.78e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.390113756992  E_coul = 198.82988559793176
  HOMO = -0.240264509808831  LUMO = 107.896061933156
  mo_energy =
[-1.20235834e+02 -1.22592299e+01 -6.66097550e+00 -6.66097550e+00
 -6.66097550e+00 -1.16638709e+00 -2.40264510e-01 -2.40264510e-01
 -2.40264510e-01  1.07896062e+02  7.94514572e+02  4.28300952e+03
  3.20646533e+04]
E1 = -706.3901137729102  E_coul = 198.82988561384994
Extra cycle  E= -507.56022815906  delta_E= -5.68e-14  |g|= 3.04e-09  |ddm|= 6.9e-09
    CPU time for scf_cycle      0.10 sec, wall time      0.10 sec
exp = [1.83473024e+04 2.33807328e+03 4.95069820e+02 1.46171485e+02
 4.24436279e+01 4.74316668e+00 3.84244927e-01 8.60677627e+00
 4.90820871e-01]
E = -507.56022815906033
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((9, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.5476253398322024e+03,6.8630785798847160e+02,1.5555024230205126e+02,4.2742815896802767e+01,4.7505784169783016e+00,3.9162204394177752e-01,8.5974230426361959e+00,4.9072756124177219e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "7s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:56:24 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  18347.3024415        1
[INPUT] 0    0    [1    /1   ]  2338.07328422        1
[INPUT] 0    0    [1    /1   ]  495.069819557        1
[INPUT] 0    0    [1    /1   ]  146.171485469        1
[INPUT] 0    0    [1    /1   ]  42.4436278779        1
[INPUT] 0    0    [1    /1   ]  4.74316668033        1
[INPUT] 0    0    [1    /1   ]  0.384244926548       1
[INPUT] 1    0    [1    /1   ]  8.60677626532        1
[INPUT] 1    0    [1    /1   ]  0.4908208712         1

nuclear repulsion = 0
number of shells = 9
number of NR pGTOs = 13
number of NR cGTOs = 13
basis = {'Ar': [[0, [18347.30244154651, 1.0]], [0, [2338.073284222357, 1.0]], [0, [495.0698195571209, 1.0]], [0, [146.1714854693266, 1.0]], [0, [42.44362787792829, 1.0]], [0, [4.743166680329981, 1.0]], [0, [0.3842449265482844, 1.0]], [1, [8.606776265322837, 1.0]], [1, [0.49082087120041673, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [18347.30244155]
bas 1, expnt(s) = [2338.07328422]
bas 2, expnt(s) = [495.06981956]
bas 3, expnt(s) = [146.17148547]
bas 4, expnt(s) = [42.44362788]
bas 5, expnt(s) = [4.74316668]
bas 6, expnt(s) = [0.38424493]
bas 7, expnt(s) = [8.60677627]
bas 8, expnt(s) = [0.49082087]
CPU time:       209.94
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  1  1  1  0 38 39  0]
 [ 0  1  1  1  0 40 41  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.83473024e+04 3.98285219e+03 2.33807328e+03 8.49490671e+02
 4.95069820e+02 2.65164184e+02 1.46171485e+02 1.06209171e+02
 4.24436279e+01 4.20121007e+01 4.74316668e+00 8.12019230e+00
 3.84244927e-01 1.23302287e+00 8.60677627e+00 4.30065926e+01
 4.90820871e-01 1.19850036e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.320144643350087
cond(S) = 45.96816830932752
E1 = -688.9515208163606  E_coul = 184.8467355232466
init E= -504.104785293114
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.684662438098706  LUMO = 106.548586402039
  mo_energy =
[-1.21611083e+02 -1.32864820e+01 -7.62721364e+00 -7.62721364e+00
 -7.62721364e+00 -1.65103776e+00 -6.84662438e-01 -6.84662438e-01
 -6.84662438e-01  1.06548586e+02  7.93159728e+02  4.28177208e+03
  3.20635865e+04]
E1 = -706.4131125180854  E_coul = 198.85318867218925
cycle= 1 E= -507.559923845896  delta_E= -3.46  |g|= 0.303  |ddm|= 0.307
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.372906
diis-c [-0.13905875  1.        ]
  HOMO = -0.240144900699539  LUMO = 107.899009300297
  mo_energy =
[-1.20229254e+02 -1.22584062e+01 -6.65969301e+00 -6.65969301e+00
 -6.65969301e+00 -1.16634369e+00 -2.40144901e-01 -2.40144901e-01
 -2.40144901e-01  1.07899009e+02  7.94523104e+02  4.28302224e+03
  3.20646689e+04]
E1 = -706.3903912220727  E_coul = 198.83016312367542
cycle= 2 E= -507.560228098397  delta_E= -0.000304  |g|= 0.00388  |ddm|= 0.0104
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00425126
diis-c [-1.77300701e-05 -1.57342961e-03  1.00157343e+00]
  HOMO = -0.240263349078489  LUMO = 107.896088711208
  mo_energy =
[-1.20235770e+02 -1.22592215e+01 -6.66096083e+00 -6.66096083e+00
 -6.66096083e+00 -1.16638676e+00 -2.40263349e-01 -2.40263349e-01
 -2.40263349e-01  1.07896089e+02  7.94514638e+02  4.28300960e+03
  3.20646534e+04]
E1 = -706.390117313102  E_coul = 198.8298891540571
cycle= 3 E= -507.560228159045  delta_E= -6.06e-08  |g|= 6.45e-05  |ddm|= 0.000128
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=8.97067e-05
diis-c [-1.93393390e-10  3.82995831e-05 -2.15340468e-02  1.02149575e+00]
  HOMO = -0.24026451699774  LUMO = 107.896061729131
  mo_energy =
[-1.20235835e+02 -1.22592299e+01 -6.66097557e+00 -6.66097557e+00
 -6.66097557e+00 -1.16638709e+00 -2.40264517e-01 -2.40264517e-01
 -2.40264517e-01  1.07896062e+02  7.94514572e+02  4.28300952e+03
  3.20646533e+04]
E1 = -706.390113756992  E_coul = 198.82988559793176
cycle= 4 E= -507.56022815906  delta_E= -1.54e-11  |g|= 2.1e-07  |ddm|= 1.78e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.390113756992  E_coul = 198.82988559793176
  HOMO = -0.240264509808831  LUMO = 107.896061933156
  mo_energy =
[-1.20235834e+02 -1.22592299e+01 -6.66097550e+00 -6.66097550e+00
 -6.66097550e+00 -1.16638709e+00 -2.40264510e-01 -2.40264510e-01
 -2.40264510e-01  1.07896062e+02  7.94514572e+02  4.28300952e+03
  3.20646533e+04]
E1 = -706.3901137729102  E_coul = 198.82988561384994
Extra cycle  E= -507.56022815906  delta_E= -5.68e-14  |g|= 3.04e-09  |ddm|= 6.9e-09
    CPU time for scf_cycle      0.10 sec, wall time      0.10 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 45.96816830932752
E1 = -706.3901137729102  E_coul = 198.82988561384994
init E= -507.56022815906
    CPU time for initialize scf      0.06 sec, wall time      0.06 sec
  HOMO = -0.240264509735872  LUMO = 107.896061935261
  mo_energy =
[-1.20235834e+02 -1.22592299e+01 -6.66097550e+00 -6.66097550e+00
 -6.66097550e+00 -1.16638709e+00 -2.40264510e-01 -2.40264510e-01
 -2.40264510e-01  1.07896062e+02  7.94514572e+02  4.28300952e+03
  3.20646533e+04]
E1 = -706.390113773115  E_coul = 198.82988561405446
cycle= 1 E= -507.560228159061  delta_E= -2.27e-13  |g|= 5.15e-11  |ddm|= 9.27e-11
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -706.390113773115  E_coul = 198.82988561405446
  HOMO = -0.240264509734966  LUMO = 107.896061935285
  mo_energy =
[-1.20235834e+02 -1.22592299e+01 -6.66097550e+00 -6.66097550e+00
 -6.66097550e+00 -1.16638709e+00 -2.40264510e-01 -2.40264510e-01
 -2.40264510e-01  1.07896062e+02  7.94514572e+02  4.28300952e+03
  3.20646533e+04]
E1 = -706.3901137731177  E_coul = 198.82988561405747
Extra cycle  E= -507.56022815906  delta_E= 3.41e-13  |g|= 5.54e-12  |ddm|= 1.45e-12
    CPU time for scf_cycle      0.14 sec, wall time      0.14 sec
exp = [1.83473024e+04 2.33807328e+03 4.95069820e+02 1.46171485e+02
 4.24436279e+01 4.74316668e+00 3.84244927e-01 8.60677627e+00
 4.90820871e-01]
grad_E = [ 1.81389642e-06  8.79955097e-05 -1.46467946e-03  7.96760186e-03
 -9.05903364e-03 -2.58892748e-03 -1.22058516e-01  6.88824297e-03
 -2.77880444e-02]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((9, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.5476253398322024e+03,6.8630785798847160e+02,1.5555024230205126e+02,4.2742815896802767e+01,4.7505784169783016e+00,3.9162204394177752e-01,8.5974230426361959e+00,4.9072756124177219e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "7s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:56:27 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  18360.8190856        1
[INPUT] 0    0    [1    /1   ]  2148.17226821        1
[INPUT] 0    0    [1    /1   ]  470.779786286        1
[INPUT] 0    0    [1    /1   ]  138.020587804        1
[INPUT] 0    0    [1    /1   ]  41.1054838525        1
[INPUT] 0    0    [1    /1   ]  4.74425060419        1
[INPUT] 0    0    [1    /1   ]  0.387073921228       1
[INPUT] 1    0    [1    /1   ]  8.6040473016         1
[INPUT] 1    0    [1    /1   ]  0.490842914273       1

nuclear repulsion = 0
number of shells = 9
number of NR pGTOs = 13
number of NR cGTOs = 13
basis = {'Ar': [[0, [18360.81908559538, 1.0]], [0, [2148.172268210704, 1.0]], [0, [470.7797862863087, 1.0]], [0, [138.02058780373028, 1.0]], [0, [41.10548385247487, 1.0]], [0, [4.7442506041937795, 1.0]], [0, [0.38707392122761697, 1.0]], [1, [8.604047301603451, 1.0]], [1, [0.490842914273187, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [18360.8190856]
bas 1, expnt(s) = [2148.17226821]
bas 2, expnt(s) = [470.77978629]
bas 3, expnt(s) = [138.0205878]
bas 4, expnt(s) = [41.10548385]
bas 5, expnt(s) = [4.7442506]
bas 6, expnt(s) = [0.38707392]
bas 7, expnt(s) = [8.6040473]
bas 8, expnt(s) = [0.49084291]
CPU time:       213.34
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  1  1  1  0 38 39  0]
 [ 0  1  1  1  0 40 41  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.83608191e+04 3.98505264e+03 2.14817227e+03 7.97199199e+02
 4.70779786e+02 2.55345601e+02 1.38020588e+02 1.01735595e+02
 4.11054839e+01 4.10147291e+01 4.74425060e+00 8.12158400e+00
 3.87073921e-01 1.23982520e+00 8.60404730e+00 4.29895480e+01
 4.90842914e-01 1.19856765e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.320053716957865
cond(S) = 47.791980934722666
E1 = -688.9901408708881  E_coul = 184.88275114271215
init E= -504.107389728176
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.683085205814924  LUMO = 99.6607455253665
  mo_energy =
[-1.21622424e+02 -1.32839539e+01 -7.62424187e+00 -7.62424187e+00
 -7.62424187e+00 -1.65100401e+00 -6.83085206e-01 -6.83085206e-01
 -6.83085206e-01  9.96607455e+01  7.45142567e+02  3.96432468e+03
  3.13631451e+04]
E1 = -706.4859011078909  E_coul = 198.89992190986194
cycle= 1 E= -507.585979198029  delta_E= -3.48  |g|= 0.307  |ddm|= 0.305
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.373539
diis-c [-0.13953109  1.        ]
  HOMO = -0.238490143447031  LUMO = 101.007025168749
  mo_energy =
[-1.20237892e+02 -1.22557581e+01 -6.65629296e+00 -6.65629296e+00
 -6.65629296e+00 -1.16519508e+00 -2.38490143e-01 -2.38490143e-01
 -2.38490143e-01  1.01007025e+02  7.46510415e+02  3.96558254e+03
  3.13642307e+04]
E1 = -706.460883527184  E_coul = 198.8745677719809
cycle= 2 E= -507.586315755203  delta_E= -0.000337  |g|= 0.00412  |ddm|= 0.0115
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00448614
diis-c [-1.98448658e-05 -1.42007778e-03  1.00142008e+00]
  HOMO = -0.238623335937417  LUMO = 101.003947086552
  mo_energy =
[-1.20244975e+02 -1.22566705e+01 -6.65771087e+00 -6.65771087e+00
 -6.65771087e+00 -1.16524379e+00 -2.38623336e-01 -2.38623336e-01
 -2.38623336e-01  1.01003947e+02  7.46501459e+02  3.96556917e+03
  3.13642142e+04]
E1 = -706.4605673295448  E_coul = 198.87425150165467
cycle= 3 E= -507.58631582789  delta_E= -7.27e-08  |g|= 7.2e-05  |ddm|= 0.000148
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=9.94107e-05
diis-c [-2.37915038e-10  3.88790320e-05 -2.25738250e-02  1.02253495e+00]
  HOMO = -0.23862473587138  LUMO = 101.003915976604
  mo_energy =
[-1.20245051e+02 -1.22566806e+01 -6.65772839e+00 -6.65772839e+00
 -6.65772839e+00 -1.16524419e+00 -2.38624736e-01 -2.38624736e-01
 -2.38624736e-01  1.01003916e+02  7.46501382e+02  3.96556908e+03
  3.13642141e+04]
E1 = -706.4605629516956  E_coul = 198.8742471237849
cycle= 4 E= -507.586315827911  delta_E= -2.05e-11  |g|= 2.48e-07  |ddm|= 2.17e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.4605629516956  E_coul = 198.8742471237849
  HOMO = -0.238624726771972  LUMO = 101.003916210186
  mo_energy =
[-1.20245051e+02 -1.22566805e+01 -6.65772830e+00 -6.65772830e+00
 -6.65772830e+00 -1.16524419e+00 -2.38624727e-01 -2.38624727e-01
 -2.38624727e-01  1.01003916e+02  7.46501382e+02  3.96556908e+03
  3.13642141e+04]
E1 = -706.460562972009  E_coul = 198.87424714409838
Extra cycle  E= -507.586315827911  delta_E=    0  |g|= 3.79e-09  |ddm|= 8.93e-09
    CPU time for scf_cycle      0.10 sec, wall time      0.10 sec
exp = [1.83608191e+04 2.14817227e+03 4.70779786e+02 1.38020588e+02
 4.11054839e+01 4.74425060e+00 3.87073921e-01 8.60404730e+00
 4.90842914e-01]
E = -507.58631582791065
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((9, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.5476253398322024e+03,6.8630785798847160e+02,1.5555024230205126e+02,4.2742815896802767e+01,4.7505784169783016e+00,3.9162204394177752e-01,8.5974230426361959e+00,4.9072756124177219e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "7s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:56:28 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  18360.8190856        1
[INPUT] 0    0    [1    /1   ]  2148.17226821        1
[INPUT] 0    0    [1    /1   ]  470.779786286        1
[INPUT] 0    0    [1    /1   ]  138.020587804        1
[INPUT] 0    0    [1    /1   ]  41.1054838525        1
[INPUT] 0    0    [1    /1   ]  4.74425060419        1
[INPUT] 0    0    [1    /1   ]  0.387073921228       1
[INPUT] 1    0    [1    /1   ]  8.6040473016         1
[INPUT] 1    0    [1    /1   ]  0.490842914273       1

nuclear repulsion = 0
number of shells = 9
number of NR pGTOs = 13
number of NR cGTOs = 13
basis = {'Ar': [[0, [18360.81908559538, 1.0]], [0, [2148.172268210704, 1.0]], [0, [470.7797862863087, 1.0]], [0, [138.02058780373028, 1.0]], [0, [41.10548385247487, 1.0]], [0, [4.7442506041937795, 1.0]], [0, [0.38707392122761697, 1.0]], [1, [8.604047301603451, 1.0]], [1, [0.490842914273187, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [18360.8190856]
bas 1, expnt(s) = [2148.17226821]
bas 2, expnt(s) = [470.77978629]
bas 3, expnt(s) = [138.0205878]
bas 4, expnt(s) = [41.10548385]
bas 5, expnt(s) = [4.7442506]
bas 6, expnt(s) = [0.38707392]
bas 7, expnt(s) = [8.6040473]
bas 8, expnt(s) = [0.49084291]
CPU time:       214.14
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  1  1  1  0 38 39  0]
 [ 0  1  1  1  0 40 41  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.83608191e+04 3.98505264e+03 2.14817227e+03 7.97199199e+02
 4.70779786e+02 2.55345601e+02 1.38020588e+02 1.01735595e+02
 4.11054839e+01 4.10147291e+01 4.74425060e+00 8.12158400e+00
 3.87073921e-01 1.23982520e+00 8.60404730e+00 4.29895480e+01
 4.90842914e-01 1.19856765e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.320053716957865
cond(S) = 47.791980934722666
E1 = -688.9901408708881  E_coul = 184.88275114271215
init E= -504.107389728176
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.683085205814924  LUMO = 99.6607455253665
  mo_energy =
[-1.21622424e+02 -1.32839539e+01 -7.62424187e+00 -7.62424187e+00
 -7.62424187e+00 -1.65100401e+00 -6.83085206e-01 -6.83085206e-01
 -6.83085206e-01  9.96607455e+01  7.45142567e+02  3.96432468e+03
  3.13631451e+04]
E1 = -706.4859011078909  E_coul = 198.89992190986194
cycle= 1 E= -507.585979198029  delta_E= -3.48  |g|= 0.307  |ddm|= 0.305
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.373539
diis-c [-0.13953109  1.        ]
  HOMO = -0.238490143447031  LUMO = 101.007025168749
  mo_energy =
[-1.20237892e+02 -1.22557581e+01 -6.65629296e+00 -6.65629296e+00
 -6.65629296e+00 -1.16519508e+00 -2.38490143e-01 -2.38490143e-01
 -2.38490143e-01  1.01007025e+02  7.46510415e+02  3.96558254e+03
  3.13642307e+04]
E1 = -706.460883527184  E_coul = 198.8745677719809
cycle= 2 E= -507.586315755203  delta_E= -0.000337  |g|= 0.00412  |ddm|= 0.0115
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00448614
diis-c [-1.98448658e-05 -1.42007778e-03  1.00142008e+00]
  HOMO = -0.238623335937417  LUMO = 101.003947086552
  mo_energy =
[-1.20244975e+02 -1.22566705e+01 -6.65771087e+00 -6.65771087e+00
 -6.65771087e+00 -1.16524379e+00 -2.38623336e-01 -2.38623336e-01
 -2.38623336e-01  1.01003947e+02  7.46501459e+02  3.96556917e+03
  3.13642142e+04]
E1 = -706.4605673295448  E_coul = 198.87425150165467
cycle= 3 E= -507.58631582789  delta_E= -7.27e-08  |g|= 7.2e-05  |ddm|= 0.000148
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=9.94107e-05
diis-c [-2.37915038e-10  3.88790320e-05 -2.25738250e-02  1.02253495e+00]
  HOMO = -0.23862473587138  LUMO = 101.003915976604
  mo_energy =
[-1.20245051e+02 -1.22566806e+01 -6.65772839e+00 -6.65772839e+00
 -6.65772839e+00 -1.16524419e+00 -2.38624736e-01 -2.38624736e-01
 -2.38624736e-01  1.01003916e+02  7.46501382e+02  3.96556908e+03
  3.13642141e+04]
E1 = -706.4605629516956  E_coul = 198.8742471237849
cycle= 4 E= -507.586315827911  delta_E= -2.05e-11  |g|= 2.48e-07  |ddm|= 2.17e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.4605629516956  E_coul = 198.8742471237849
  HOMO = -0.238624726771972  LUMO = 101.003916210186
  mo_energy =
[-1.20245051e+02 -1.22566805e+01 -6.65772830e+00 -6.65772830e+00
 -6.65772830e+00 -1.16524419e+00 -2.38624727e-01 -2.38624727e-01
 -2.38624727e-01  1.01003916e+02  7.46501382e+02  3.96556908e+03
  3.13642141e+04]
E1 = -706.460562972009  E_coul = 198.87424714409838
Extra cycle  E= -507.586315827911  delta_E=    0  |g|= 3.79e-09  |ddm|= 8.93e-09
    CPU time for scf_cycle      0.10 sec, wall time      0.10 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 47.791980934722666
E1 = -706.460562972009  E_coul = 198.87424714409838
init E= -507.586315827911
    CPU time for initialize scf      0.07 sec, wall time      0.07 sec
  HOMO = -0.238624726675399  LUMO = 101.00391621273
  mo_energy =
[-1.20245051e+02 -1.22566805e+01 -6.65772830e+00 -6.65772830e+00
 -6.65772830e+00 -1.16524419e+00 -2.38624727e-01 -2.38624727e-01
 -2.38624727e-01  1.01003916e+02  7.46501382e+02  3.96556908e+03
  3.13642141e+04]
E1 = -706.4605629722832  E_coul = 198.87424714437327
cycle= 1 E= -507.58631582791  delta_E= 6.82e-13  |g|= 6.73e-11  |ddm|= 1.26e-10
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -706.4605629722832  E_coul = 198.87424714437327
  HOMO = -0.238624726674155  LUMO = 101.00391621276
  mo_energy =
[-1.20245051e+02 -1.22566805e+01 -6.65772830e+00 -6.65772830e+00
 -6.65772830e+00 -1.16524419e+00 -2.38624727e-01 -2.38624727e-01
 -2.38624727e-01  1.01003916e+02  7.46501382e+02  3.96556908e+03
  3.13642141e+04]
E1 = -706.4605629722885  E_coul = 198.87424714437782
Extra cycle  E= -507.586315827911  delta_E= -6.82e-13  |g|= 1.95e-12  |ddm|= 2.03e-12
    CPU time for scf_cycle      0.14 sec, wall time      0.14 sec
exp = [1.83608191e+04 2.14817227e+03 4.70779786e+02 1.38020588e+02
 4.11054839e+01 4.74425060e+00 3.87073921e-01 8.60404730e+00
 4.90842914e-01]
grad_E = [ 5.26363546e-06 -2.61825436e-06 -9.17987896e-04  5.70206773e-03
 -5.30617723e-03 -5.07628429e-04 -7.29071149e-02  4.74776143e-03
 -1.62014557e-02]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((9, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.5476253398322024e+03,6.8630785798847160e+02,1.5555024230205126e+02,4.2742815896802767e+01,4.7505784169783016e+00,3.9162204394177752e-01,8.5974230426361959e+00,4.9072756124177219e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "7s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:56:32 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  18354.8095763        1
[INPUT] 0    0    [1    /1   ]  2233.95253216        1
[INPUT] 0    0    [1    /1   ]  463.586028013        1
[INPUT] 0    0    [1    /1   ]  119.921835193        1
[INPUT] 0    0    [1    /1   ]  37.6712327962        1
[INPUT] 0    0    [1    /1   ]  4.74772448184        1
[INPUT] 0    0    [1    /1   ]  0.393552524209       1
[INPUT] 1    0    [1    /1   ]  8.59672467079        1
[INPUT] 1    0    [1    /1   ]  0.490867953282       1

nuclear repulsion = 0
number of shells = 9
number of NR pGTOs = 13
number of NR cGTOs = 13
basis = {'Ar': [[0, [18354.80957631093, 1.0]], [0, [2233.952532162939, 1.0]], [0, [463.586028012591, 1.0]], [0, [119.92183519274025, 1.0]], [0, [37.67123279615015, 1.0]], [0, [4.747724481843215, 1.0]], [0, [0.3935525242093592, 1.0]], [1, [8.59672467079213, 1.0]], [1, [0.49086795328238164, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [18354.80957631]
bas 1, expnt(s) = [2233.95253216]
bas 2, expnt(s) = [463.58602801]
bas 3, expnt(s) = [119.92183519]
bas 4, expnt(s) = [37.6712328]
bas 5, expnt(s) = [4.74772448]
bas 6, expnt(s) = [0.39355252]
bas 7, expnt(s) = [8.59672467]
bas 8, expnt(s) = [0.49086795]
CPU time:       217.86
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  1  1  1  0 38 39  0]
 [ 0  1  1  1  0 40 41  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.83548096e+04 3.98407437e+03 2.23395253e+03 8.20957132e+02
 4.63586028e+02 2.52413616e+02 1.19921835e+02 9.15564033e+01
 3.76712328e+01 3.84169072e+01 4.74772448e+00 8.12604373e+00
 3.93552524e-01 1.25535643e+00 8.59672467e+00 4.29438191e+01
 4.90867953e-01 1.19864407e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319540895173155
cond(S) = 42.56750823379924
E1 = -689.0618882865845  E_coul = 184.9550085351554
init E= -504.106879751429
    CPU time for initialize scf      0.03 sec, wall time      0.03 sec
  HOMO = -0.679730869621338  LUMO = 84.4506861554022
  mo_energy =
[-1.21631512e+02 -1.32816936e+01 -7.61799853e+00 -7.61799853e+00
 -7.61799853e+00 -1.65117825e+00 -6.79730870e-01 -6.79730870e-01
 -6.79730870e-01  8.44506862e+01  6.78236225e+02  3.96068372e+03
  3.15439763e+04]
E1 = -706.6417773117299  E_coul = 199.02846856552975
cycle= 1 E= -507.6133087462  delta_E= -3.51  |g|= 0.316  |ddm|= 0.297
    CPU time for cycle= 1      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.371699
diis-c [-0.13815978  1.        ]
  HOMO = -0.234624772606428  LUMO = 85.7888448506438
  mo_energy =
[-1.20234024e+02 -1.22514919e+01 -6.64688480e+00 -6.64688480e+00
 -6.64688480e+00 -1.16258520e+00 -2.34624773e-01 -2.34624773e-01
 -2.34624773e-01  8.57888449e+01  6.79619373e+02  3.96194633e+03
  3.15450743e+04]
E1 = -706.6103995097612  E_coul = 198.99666477934565
cycle= 2 E= -507.613734730416  delta_E= -0.000426  |g|= 0.00477  |ddm|= 0.0144
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00498713
diis-c [-2.47597549e-05 -9.00269647e-04  1.00090027e+00]
  HOMO = -0.234800903047252  LUMO = 85.7853724767183
  mo_energy =
[-1.20242621e+02 -1.22526875e+01 -6.64872910e+00 -6.64872910e+00
 -6.64872910e+00 -1.16265087e+00 -2.34800903e-01 -2.34800903e-01
 -2.34800903e-01  8.57853725e+01  6.79608877e+02  3.96193054e+03
  3.15450550e+04]
E1 = -706.6099561308685  E_coul = 198.99622128887867
cycle= 3 E= -507.61373484199  delta_E= -1.12e-07  |g|= 9.42e-05  |ddm|= 0.000205
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.000124798
diis-c [-3.70072162e-10  4.29340313e-05 -2.54080692e-02  1.02536514e+00]
  HOMO = -0.234803074612022  LUMO = 85.7853293239633
  mo_energy =
[-1.20242731e+02 -1.22527030e+01 -6.64875560e+00 -6.64875560e+00
 -6.64875560e+00 -1.16265152e+00 -2.34803075e-01 -2.34803075e-01
 -2.34803075e-01  8.57853293e+01  6.79608765e+02  3.96193040e+03
  3.15450549e+04]
E1 = -706.6099489566004  E_coul = 198.99621411457184
cycle= 4 E= -507.613734842029  delta_E= -3.88e-11  |g|= 3.48e-07  |ddm|= 3.44e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.6099489566004  E_coul = 198.99621411457184
  HOMO = -0.234803059184826  LUMO = 85.7853296362873
  mo_energy =
[-1.20242730e+02 -1.22527029e+01 -6.64875545e+00 -6.64875545e+00
 -6.64875545e+00 -1.16265151e+00 -2.34803059e-01 -2.34803059e-01
 -2.34803059e-01  8.57853296e+01  6.79608766e+02  3.96193040e+03
  3.15450549e+04]
E1 = -706.6099489916134  E_coul = 198.9962141495847
Extra cycle  E= -507.613734842029  delta_E= -5.68e-14  |g|= 6.11e-09  |ddm|= 1.57e-08
    CPU time for scf_cycle      0.12 sec, wall time      0.13 sec
exp = [1.83548096e+04 2.23395253e+03 4.63586028e+02 1.19921835e+02
 3.76712328e+01 4.74772448e+00 3.93552524e-01 8.59672467e+00
 4.90867953e-01]
E = -507.61373484202863
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((9, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.5476253398322024e+03,6.8630785798847160e+02,1.5555024230205126e+02,4.2742815896802767e+01,4.7505784169783016e+00,3.9162204394177752e-01,8.5974230426361959e+00,4.9072756124177219e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "7s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:56:33 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  18354.8095763        1
[INPUT] 0    0    [1    /1   ]  2233.95253216        1
[INPUT] 0    0    [1    /1   ]  463.586028013        1
[INPUT] 0    0    [1    /1   ]  119.921835193        1
[INPUT] 0    0    [1    /1   ]  37.6712327962        1
[INPUT] 0    0    [1    /1   ]  4.74772448184        1
[INPUT] 0    0    [1    /1   ]  0.393552524209       1
[INPUT] 1    0    [1    /1   ]  8.59672467079        1
[INPUT] 1    0    [1    /1   ]  0.490867953282       1

nuclear repulsion = 0
number of shells = 9
number of NR pGTOs = 13
number of NR cGTOs = 13
basis = {'Ar': [[0, [18354.80957631093, 1.0]], [0, [2233.952532162939, 1.0]], [0, [463.586028012591, 1.0]], [0, [119.92183519274025, 1.0]], [0, [37.67123279615015, 1.0]], [0, [4.747724481843215, 1.0]], [0, [0.3935525242093592, 1.0]], [1, [8.59672467079213, 1.0]], [1, [0.49086795328238164, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [18354.80957631]
bas 1, expnt(s) = [2233.95253216]
bas 2, expnt(s) = [463.58602801]
bas 3, expnt(s) = [119.92183519]
bas 4, expnt(s) = [37.6712328]
bas 5, expnt(s) = [4.74772448]
bas 6, expnt(s) = [0.39355252]
bas 7, expnt(s) = [8.59672467]
bas 8, expnt(s) = [0.49086795]
CPU time:       218.80
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  1  1  1  0 38 39  0]
 [ 0  1  1  1  0 40 41  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.83548096e+04 3.98407437e+03 2.23395253e+03 8.20957132e+02
 4.63586028e+02 2.52413616e+02 1.19921835e+02 9.15564033e+01
 3.76712328e+01 3.84169072e+01 4.74772448e+00 8.12604373e+00
 3.93552524e-01 1.25535643e+00 8.59672467e+00 4.29438191e+01
 4.90867953e-01 1.19864407e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319540895173155
cond(S) = 42.56750823379924
E1 = -689.0618882865845  E_coul = 184.9550085351554
init E= -504.106879751429
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.679730869621338  LUMO = 84.4506861554022
  mo_energy =
[-1.21631512e+02 -1.32816936e+01 -7.61799853e+00 -7.61799853e+00
 -7.61799853e+00 -1.65117825e+00 -6.79730870e-01 -6.79730870e-01
 -6.79730870e-01  8.44506862e+01  6.78236225e+02  3.96068372e+03
  3.15439763e+04]
E1 = -706.6417773117299  E_coul = 199.02846856552975
cycle= 1 E= -507.6133087462  delta_E= -3.51  |g|= 0.316  |ddm|= 0.297
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.371699
diis-c [-0.13815978  1.        ]
  HOMO = -0.234624772606428  LUMO = 85.7888448506438
  mo_energy =
[-1.20234024e+02 -1.22514919e+01 -6.64688480e+00 -6.64688480e+00
 -6.64688480e+00 -1.16258520e+00 -2.34624773e-01 -2.34624773e-01
 -2.34624773e-01  8.57888449e+01  6.79619373e+02  3.96194633e+03
  3.15450743e+04]
E1 = -706.6103995097612  E_coul = 198.99666477934565
cycle= 2 E= -507.613734730416  delta_E= -0.000426  |g|= 0.00477  |ddm|= 0.0144
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00498713
diis-c [-2.47597549e-05 -9.00269647e-04  1.00090027e+00]
  HOMO = -0.234800903047252  LUMO = 85.7853724767183
  mo_energy =
[-1.20242621e+02 -1.22526875e+01 -6.64872910e+00 -6.64872910e+00
 -6.64872910e+00 -1.16265087e+00 -2.34800903e-01 -2.34800903e-01
 -2.34800903e-01  8.57853725e+01  6.79608877e+02  3.96193054e+03
  3.15450550e+04]
E1 = -706.6099561308685  E_coul = 198.99622128887867
cycle= 3 E= -507.61373484199  delta_E= -1.12e-07  |g|= 9.42e-05  |ddm|= 0.000205
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.000124798
diis-c [-3.70072162e-10  4.29340313e-05 -2.54080692e-02  1.02536514e+00]
  HOMO = -0.234803074612022  LUMO = 85.7853293239633
  mo_energy =
[-1.20242731e+02 -1.22527030e+01 -6.64875560e+00 -6.64875560e+00
 -6.64875560e+00 -1.16265152e+00 -2.34803075e-01 -2.34803075e-01
 -2.34803075e-01  8.57853293e+01  6.79608765e+02  3.96193040e+03
  3.15450549e+04]
E1 = -706.6099489566004  E_coul = 198.99621411457184
cycle= 4 E= -507.613734842029  delta_E= -3.88e-11  |g|= 3.48e-07  |ddm|= 3.44e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.6099489566004  E_coul = 198.99621411457184
  HOMO = -0.234803059184826  LUMO = 85.7853296362873
  mo_energy =
[-1.20242730e+02 -1.22527029e+01 -6.64875545e+00 -6.64875545e+00
 -6.64875545e+00 -1.16265151e+00 -2.34803059e-01 -2.34803059e-01
 -2.34803059e-01  8.57853296e+01  6.79608766e+02  3.96193040e+03
  3.15450549e+04]
E1 = -706.6099489916134  E_coul = 198.9962141495847
Extra cycle  E= -507.613734842029  delta_E= -5.68e-14  |g|= 6.11e-09  |ddm|= 1.57e-08
    CPU time for scf_cycle      0.10 sec, wall time      0.11 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 42.56750823379924
E1 = -706.6099489916134  E_coul = 198.9962141495847
init E= -507.613734842029
    CPU time for initialize scf      0.08 sec, wall time      0.18 sec
  HOMO = -0.23480305900265  LUMO = 85.7853296401492
  mo_energy =
[-1.20242730e+02 -1.22527029e+01 -6.64875545e+00 -6.64875545e+00
 -6.64875545e+00 -1.16265151e+00 -2.34803059e-01 -2.34803059e-01
 -2.34803059e-01  8.57853296e+01  6.79608766e+02  3.96193040e+03
  3.15450549e+04]
E1 = -706.6099489921484  E_coul = 198.99621415011939
cycle= 1 E= -507.613734842029  delta_E= -3.41e-13  |g|= 1.23e-10  |ddm|= 2.45e-10
    CPU time for cycle= 1      0.02 sec, wall time      0.03 sec
E1 = -706.6099489921484  E_coul = 198.99621415011939
  HOMO = -0.234803059000061  LUMO = 85.7853296402043
  mo_energy =
[-1.20242730e+02 -1.22527029e+01 -6.64875545e+00 -6.64875545e+00
 -6.64875545e+00 -1.16265151e+00 -2.34803059e-01 -2.34803059e-01
 -2.34803059e-01  8.57853296e+01  6.79608766e+02  3.96193040e+03
  3.15450549e+04]
E1 = -706.6099489921575  E_coul = 198.99621415012868
Extra cycle  E= -507.613734842029  delta_E= 2.27e-13  |g|= 4.93e-12  |ddm|= 4.38e-12
    CPU time for scf_cycle      0.18 sec, wall time      0.32 sec
exp = [1.83548096e+04 2.23395253e+03 4.63586028e+02 1.19921835e+02
 3.76712328e+01 4.74772448e+00 3.93552524e-01 8.59672467e+00
 4.90867953e-01]
grad_E = [ 4.69143898e-06 -5.64255574e-05  9.48768485e-04 -5.31440603e-03
  1.04098739e-02  1.02030734e-02  3.42379096e-02  3.24142528e-04
  1.10067593e-02]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((9, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.5476253398322024e+03,6.8630785798847160e+02,1.5555024230205126e+02,4.2742815896802767e+01,4.7505784169783016e+00,3.9162204394177752e-01,8.5974230426361959e+00,4.9072756124177219e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "7s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:56:37 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  18354.0840477        1
[INPUT] 0    0    [1    /1   ]  2244.0712636         1
[INPUT] 0    0    [1    /1   ]  465.303973528        1
[INPUT] 0    0    [1    /1   ]  125.981451327        1
[INPUT] 0    0    [1    /1   ]  38.6474120146        1
[INPUT] 0    0    [1    /1   ]  4.74114665134        1
[INPUT] 0    0    [1    /1   ]  0.391974293585       1
[INPUT] 1    0    [1    /1   ]  8.59752460143        1
[INPUT] 1    0    [1    /1   ]  0.490813401214       1

nuclear repulsion = 0
number of shells = 9
number of NR pGTOs = 13
number of NR cGTOs = 13
basis = {'Ar': [[0, [18354.084047684195, 1.0]], [0, [2244.071263600647, 1.0]], [0, [465.30397352757376, 1.0]], [0, [125.98145132730937, 1.0]], [0, [38.64741201459283, 1.0]], [0, [4.7411466513386635, 1.0]], [0, [0.3919742935853784, 1.0]], [1, [8.597524601430173, 1.0]], [1, [0.4908134012143562, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [18354.08404768]
bas 1, expnt(s) = [2244.0712636]
bas 2, expnt(s) = [465.30397353]
bas 3, expnt(s) = [125.98145133]
bas 4, expnt(s) = [38.64741201]
bas 5, expnt(s) = [4.74114665]
bas 6, expnt(s) = [0.39197429]
bas 7, expnt(s) = [8.5975246]
bas 8, expnt(s) = [0.4908134]
CPU time:       222.91
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  1  1  1  0 38 39  0]
 [ 0  1  1  1  0 40 41  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.83540840e+04 3.98395626e+03 2.24407126e+03 8.23744461e+02
 4.65303974e+02 2.53114832e+02 1.25981451e+02 9.50046757e+01
 3.86474120e+01 3.91611410e+01 4.74114665e+00 8.11759848e+00
 3.91974294e-01 1.25157885e+00 8.59752460e+00 4.29488141e+01
 4.90813401e-01 1.19847756e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319861893100242
cond(S) = 43.52936141852434
E1 = -689.0927075355743  E_coul = 184.92310253038252
init E= -504.169605005192
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.680604499345031  LUMO = 89.1297622383063
  mo_energy =
[-1.21640250e+02 -1.32809860e+01 -7.62081474e+00 -7.62081474e+00
 -7.62081474e+00 -1.65084062e+00 -6.80604499e-01 -6.80604499e-01
 -6.80604499e-01  8.91297622e+01  6.99763595e+02  4.00214931e+03
  3.16019146e+04]
E1 = -706.5756584912884  E_coul = 198.9557447479748
cycle= 1 E= -507.619913743314  delta_E= -3.45  |g|= 0.314  |ddm|= 0.301
    CPU time for cycle= 1      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.371934
diis-c [-0.13833505  1.        ]
  HOMO = -0.235905956051293  LUMO = 90.4676080668258
  mo_energy =
[-1.20252185e+02 -1.22526466e+01 -6.65216727e+00 -6.65216727e+00
 -6.65216727e+00 -1.16322933e+00 -2.35905956e-01 -2.35905956e-01
 -2.35905956e-01  9.04676081e+01  7.01134746e+02  4.00340229e+03
  3.16029987e+04]
E1 = -706.5462875570821  E_coul = 198.92597541828053
cycle= 2 E= -507.620312138802  delta_E= -0.000398  |g|= 0.00456  |ddm|= 0.0134
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00486149
diis-c [-2.34937818e-05 -1.00826898e-03  1.00100827e+00]
  HOMO = -0.236067509765744  LUMO = 90.4642305216398
  mo_energy =
[-1.20260329e+02 -1.22537462e+01 -6.65387203e+00 -6.65387203e+00
 -6.65387203e+00 -1.16328914e+00 -2.36067510e-01 -2.36067510e-01
 -2.36067510e-01  9.04642305e+01  7.01124663e+02  4.00338716e+03
  3.16029803e+04]
E1 = -706.5458877497158  E_coul = 198.92557551306874
cycle= 3 E= -507.620312236647  delta_E= -9.78e-08  |g|= 8.69e-05  |ddm|= 0.000184
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.000116978
diis-c [-3.22264341e-10  3.99968017e-05 -2.44416458e-02  1.02440165e+00]
  HOMO = -0.236069411984587  LUMO = 90.4641910369329
  mo_energy =
[-1.20260428e+02 -1.22537599e+01 -6.65389545e+00 -6.65389545e+00
 -6.65389545e+00 -1.16328970e+00 -2.36069412e-01 -2.36069412e-01
 -2.36069412e-01  9.04641910e+01  7.01124561e+02  4.00338703e+03
  3.16029801e+04]
E1 = -706.5458815730339  E_coul = 198.92556933635456
cycle= 4 E= -507.620312236679  delta_E= -3.22e-11  |g|= 3.17e-07  |ddm|= 2.98e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.5458815730339  E_coul = 198.92556933635456
  HOMO = -0.236069398839775  LUMO = 90.4641913267625
  mo_energy =
[-1.20260428e+02 -1.22537598e+01 -6.65389532e+00 -6.65389532e+00
 -6.65389532e+00 -1.16328969e+00 -2.36069399e-01 -2.36069399e-01
 -2.36069399e-01  9.04641913e+01  7.01124562e+02  4.00338703e+03
  3.16029801e+04]
E1 = -706.5458816026717  E_coul = 198.92556936599246
Extra cycle  E= -507.620312236679  delta_E= 1.14e-13  |g|= 5.25e-09  |ddm|= 1.31e-08
    CPU time for scf_cycle      0.10 sec, wall time      0.11 sec
exp = [1.83540840e+04 2.24407126e+03 4.65303974e+02 1.25981451e+02
 3.86474120e+01 4.74114665e+00 3.91974294e-01 8.59752460e+00
 4.90813401e-01]
E = -507.6203122366792
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((9, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.5476253398322024e+03,6.8630785798847160e+02,1.5555024230205126e+02,4.2742815896802767e+01,4.7505784169783016e+00,3.9162204394177752e-01,8.5974230426361959e+00,4.9072756124177219e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "7s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:56:38 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  18354.0840477        1
[INPUT] 0    0    [1    /1   ]  2244.0712636         1
[INPUT] 0    0    [1    /1   ]  465.303973528        1
[INPUT] 0    0    [1    /1   ]  125.981451327        1
[INPUT] 0    0    [1    /1   ]  38.6474120146        1
[INPUT] 0    0    [1    /1   ]  4.74114665134        1
[INPUT] 0    0    [1    /1   ]  0.391974293585       1
[INPUT] 1    0    [1    /1   ]  8.59752460143        1
[INPUT] 1    0    [1    /1   ]  0.490813401214       1

nuclear repulsion = 0
number of shells = 9
number of NR pGTOs = 13
number of NR cGTOs = 13
basis = {'Ar': [[0, [18354.084047684195, 1.0]], [0, [2244.071263600647, 1.0]], [0, [465.30397352757376, 1.0]], [0, [125.98145132730937, 1.0]], [0, [38.64741201459283, 1.0]], [0, [4.7411466513386635, 1.0]], [0, [0.3919742935853784, 1.0]], [1, [8.597524601430173, 1.0]], [1, [0.4908134012143562, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [18354.08404768]
bas 1, expnt(s) = [2244.0712636]
bas 2, expnt(s) = [465.30397353]
bas 3, expnt(s) = [125.98145133]
bas 4, expnt(s) = [38.64741201]
bas 5, expnt(s) = [4.74114665]
bas 6, expnt(s) = [0.39197429]
bas 7, expnt(s) = [8.5975246]
bas 8, expnt(s) = [0.4908134]
CPU time:       223.80
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  1  1  1  0 38 39  0]
 [ 0  1  1  1  0 40 41  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.83540840e+04 3.98395626e+03 2.24407126e+03 8.23744461e+02
 4.65303974e+02 2.53114832e+02 1.25981451e+02 9.50046757e+01
 3.86474120e+01 3.91611410e+01 4.74114665e+00 8.11759848e+00
 3.91974294e-01 1.25157885e+00 8.59752460e+00 4.29488141e+01
 4.90813401e-01 1.19847756e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319861893100242
cond(S) = 43.52936141852434
E1 = -689.0927075355743  E_coul = 184.92310253038252
init E= -504.169605005192
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.680604499345031  LUMO = 89.1297622383063
  mo_energy =
[-1.21640250e+02 -1.32809860e+01 -7.62081474e+00 -7.62081474e+00
 -7.62081474e+00 -1.65084062e+00 -6.80604499e-01 -6.80604499e-01
 -6.80604499e-01  8.91297622e+01  6.99763595e+02  4.00214931e+03
  3.16019146e+04]
E1 = -706.5756584912884  E_coul = 198.9557447479748
cycle= 1 E= -507.619913743314  delta_E= -3.45  |g|= 0.314  |ddm|= 0.301
    CPU time for cycle= 1      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.371934
diis-c [-0.13833505  1.        ]
  HOMO = -0.235905956051293  LUMO = 90.4676080668258
  mo_energy =
[-1.20252185e+02 -1.22526466e+01 -6.65216727e+00 -6.65216727e+00
 -6.65216727e+00 -1.16322933e+00 -2.35905956e-01 -2.35905956e-01
 -2.35905956e-01  9.04676081e+01  7.01134746e+02  4.00340229e+03
  3.16029987e+04]
E1 = -706.5462875570821  E_coul = 198.92597541828053
cycle= 2 E= -507.620312138802  delta_E= -0.000398  |g|= 0.00456  |ddm|= 0.0134
    CPU time for cycle= 2      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.00486149
diis-c [-2.34937818e-05 -1.00826898e-03  1.00100827e+00]
  HOMO = -0.236067509765744  LUMO = 90.4642305216398
  mo_energy =
[-1.20260329e+02 -1.22537462e+01 -6.65387203e+00 -6.65387203e+00
 -6.65387203e+00 -1.16328914e+00 -2.36067510e-01 -2.36067510e-01
 -2.36067510e-01  9.04642305e+01  7.01124663e+02  4.00338716e+03
  3.16029803e+04]
E1 = -706.5458877497158  E_coul = 198.92557551306874
cycle= 3 E= -507.620312236647  delta_E= -9.78e-08  |g|= 8.69e-05  |ddm|= 0.000184
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.000116978
diis-c [-3.22264341e-10  3.99968017e-05 -2.44416458e-02  1.02440165e+00]
  HOMO = -0.236069411984587  LUMO = 90.4641910369329
  mo_energy =
[-1.20260428e+02 -1.22537599e+01 -6.65389545e+00 -6.65389545e+00
 -6.65389545e+00 -1.16328970e+00 -2.36069412e-01 -2.36069412e-01
 -2.36069412e-01  9.04641910e+01  7.01124561e+02  4.00338703e+03
  3.16029801e+04]
E1 = -706.5458815730339  E_coul = 198.92556933635456
cycle= 4 E= -507.620312236679  delta_E= -3.22e-11  |g|= 3.17e-07  |ddm|= 2.98e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.5458815730339  E_coul = 198.92556933635456
  HOMO = -0.236069398839775  LUMO = 90.4641913267625
  mo_energy =
[-1.20260428e+02 -1.22537598e+01 -6.65389532e+00 -6.65389532e+00
 -6.65389532e+00 -1.16328969e+00 -2.36069399e-01 -2.36069399e-01
 -2.36069399e-01  9.04641913e+01  7.01124562e+02  4.00338703e+03
  3.16029801e+04]
E1 = -706.5458816026717  E_coul = 198.92556936599246
Extra cycle  E= -507.620312236679  delta_E= 1.14e-13  |g|= 5.25e-09  |ddm|= 1.31e-08
    CPU time for scf_cycle      0.10 sec, wall time      0.10 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 43.52936141852434
E1 = -706.5458816026717  E_coul = 198.92556936599246
init E= -507.620312236679
    CPU time for initialize scf      0.07 sec, wall time      0.07 sec
  HOMO = -0.236069398690453  LUMO = 90.4641913301863
  mo_energy =
[-1.20260428e+02 -1.22537598e+01 -6.65389532e+00 -6.65389532e+00
 -6.65389532e+00 -1.16328969e+00 -2.36069399e-01 -2.36069399e-01
 -2.36069399e-01  9.04641913e+01  7.01124562e+02  4.00338703e+03
  3.16029801e+04]
E1 = -706.5458816031055  E_coul = 198.92556936642615
cycle= 1 E= -507.620312236679  delta_E= -1.71e-13  |g|= 1e-10  |ddm|= 1.97e-10
    CPU time for cycle= 1      0.02 sec, wall time      0.02 sec
E1 = -706.5458816031055  E_coul = 198.92556936642615
  HOMO = -0.236069398688405  LUMO = 90.464191330233
  mo_energy =
[-1.20260428e+02 -1.22537598e+01 -6.65389532e+00 -6.65389532e+00
 -6.65389532e+00 -1.16328969e+00 -2.36069399e-01 -2.36069399e-01
 -2.36069399e-01  9.04641913e+01  7.01124562e+02  4.00338703e+03
  3.16029801e+04]
E1 = -706.5458816031122  E_coul = 198.92556936643317
Extra cycle  E= -507.620312236679  delta_E= 2.84e-13  |g|= 3.69e-12  |ddm|= 3.41e-12
    CPU time for scf_cycle      0.16 sec, wall time      0.17 sec
exp = [1.83540840e+04 2.24407126e+03 4.65303974e+02 1.25981451e+02
 3.86474120e+01 4.74114665e+00 3.91974294e-01 8.59752460e+00
 4.90813401e-01]
grad_E = [ 3.82611500e-06  4.52394012e-06 -2.01917995e-04  1.03446100e-03
  4.37568321e-04 -1.11385850e-03  1.03646186e-02 -5.98338223e-04
  2.20459983e-03]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((9, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.5476253398322024e+03,6.8630785798847160e+02,1.5555024230205126e+02,4.2742815896802767e+01,4.7505784169783016e+00,3.9162204394177752e-01,8.5974230426361959e+00,4.9072756124177219e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "7s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:56:42 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  18354.0874448        1
[INPUT] 0    0    [1    /1   ]  2244.28629844        1
[INPUT] 0    0    [1    /1   ]  461.581686951        1
[INPUT] 0    0    [1    /1   ]  123.392640685        1
[INPUT] 0    0    [1    /1   ]  38.0704350486        1
[INPUT] 0    0    [1    /1   ]  4.74160156348        1
[INPUT] 0    0    [1    /1   ]  0.391592225462       1
[INPUT] 1    0    [1    /1   ]  8.59757891725        1
[INPUT] 1    0    [1    /1   ]  0.490819696613       1

nuclear repulsion = 0
number of shells = 9
number of NR pGTOs = 13
number of NR cGTOs = 13
basis = {'Ar': [[0, [18354.087444824872, 1.0]], [0, [2244.286298439216, 1.0]], [0, [461.58168695065746, 1.0]], [0, [123.39264068535616, 1.0]], [0, [38.07043504860129, 1.0]], [0, [4.741601563478199, 1.0]], [0, [0.39159222546177014, 1.0]], [1, [8.597578917248986, 1.0]], [1, [0.4908196966130591, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [18354.08744482]
bas 1, expnt(s) = [2244.28629844]
bas 2, expnt(s) = [461.58168695]
bas 3, expnt(s) = [123.39264069]
bas 4, expnt(s) = [38.07043505]
bas 5, expnt(s) = [4.74160156]
bas 6, expnt(s) = [0.39159223]
bas 7, expnt(s) = [8.59757892]
bas 8, expnt(s) = [0.4908197]
CPU time:       227.74
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  1  1  1  0 38 39  0]
 [ 0  1  1  1  0 40 41  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.83540874e+04 3.98395681e+03 2.24428630e+03 8.23803661e+02
 4.61581687e+02 2.51594679e+02 1.23392641e+02 9.35366837e+01
 3.80704350e+01 3.87218327e+01 4.74160156e+00 8.11818263e+00
 3.91592225e-01 1.25066377e+00 8.59757892e+00 4.29491533e+01
 4.90819697e-01 1.19849678e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319932224724813
cond(S) = 43.071506965290304
E1 = -689.0882760529272  E_coul = 184.9174828143961
init E= -504.170793238531
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.680750566491259  LUMO = 86.789517621068
  mo_energy =
[-1.21641610e+02 -1.32812674e+01 -7.62130151e+00 -7.62130151e+00
 -7.62130151e+00 -1.65080778e+00 -6.80750566e-01 -6.80750566e-01
 -6.80750566e-01  8.67895176e+01  6.87540652e+02  3.97980626e+03
  3.15812268e+04]
E1 = -706.5722013835906  E_coul = 198.95090171515164
cycle= 1 E= -507.621299668439  delta_E= -3.45  |g|= 0.315  |ddm|=  0.3
    CPU time for cycle= 1      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.371607
diis-c [-0.13809186  1.        ]
  HOMO = -0.236094515745672  LUMO = 88.1250234543893
  mo_energy =
[-1.20252995e+02 -1.22529679e+01 -6.65259048e+00 -6.65259048e+00
 -6.65259048e+00 -1.16338535e+00 -2.36094516e-01 -2.36094516e-01
 -2.36094516e-01  8.81250235e+01  6.88912247e+02  3.98105818e+03
  3.15823097e+04]
E1 = -706.5417072958164  E_coul = 198.91999321058572
cycle= 2 E= -507.621714085231  delta_E= -0.000414  |g|= 0.00466  |ddm|= 0.0139
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00495191
diis-c [-2.44094204e-05 -9.01527128e-04  1.00090153e+00]
  HOMO = -0.236263606129698  LUMO = 88.1215721390185
  mo_energy =
[-1.20261408e+02 -1.22541169e+01 -6.65437021e+00 -6.65437021e+00
 -6.65437021e+00 -1.16344792e+00 -2.36263606e-01 -2.36263606e-01
 -2.36263606e-01  8.81215721e+01  6.88901892e+02  3.98104262e+03
  3.15822908e+04]
E1 = -706.5412851534885  E_coul = 198.91957096362444
cycle= 3 E= -507.621714189864  delta_E= -1.05e-07  |g|= 9.06e-05  |ddm|= 0.000194
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.000121417
diis-c [-3.47651883e-10  4.01959278e-05 -2.48918647e-02  1.02485167e+00]
  HOMO = -0.236265648437875  LUMO = 88.1215304411105
  mo_energy =
[-1.20261513e+02 -1.22541315e+01 -6.65439527e+00 -6.65439527e+00
 -6.65439527e+00 -1.16344852e+00 -2.36265648e-01 -2.36265648e-01
 -2.36265648e-01  8.81215304e+01  6.88901784e+02  3.98104249e+03
  3.15822906e+04]
E1 = -706.5412784682258  E_coul = 198.91956427832613
cycle= 4 E= -507.6217141899  delta_E= -3.56e-11  |g|= 3.35e-07  |ddm|= 3.2e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.5412784682258  E_coul = 198.91956427832613
  HOMO = -0.236265634120359  LUMO = 88.121530745831
  mo_energy =
[-1.20261513e+02 -1.22541314e+01 -6.65439513e+00 -6.65439513e+00
 -6.65439513e+00 -1.16344852e+00 -2.36265634e-01 -2.36265634e-01
 -2.36265634e-01  8.81215307e+01  6.88901785e+02  3.98104249e+03
  3.15822907e+04]
E1 = -706.5412785005665  E_coul = 198.919564310667
Extra cycle  E= -507.621714189899  delta_E= 1.71e-13  |g|= 5.65e-09  |ddm|= 1.43e-08
    CPU time for scf_cycle      0.11 sec, wall time      0.12 sec
exp = [1.83540874e+04 2.24428630e+03 4.61581687e+02 1.23392641e+02
 3.80704350e+01 4.74160156e+00 3.91592225e-01 8.59757892e+00
 4.90819697e-01]
E = -507.6217141898995
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((9, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.5476253398322024e+03,6.8630785798847160e+02,1.5555024230205126e+02,4.2742815896802767e+01,4.7505784169783016e+00,3.9162204394177752e-01,8.5974230426361959e+00,4.9072756124177219e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "7s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:56:43 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  18354.0874448        1
[INPUT] 0    0    [1    /1   ]  2244.28629844        1
[INPUT] 0    0    [1    /1   ]  461.581686951        1
[INPUT] 0    0    [1    /1   ]  123.392640685        1
[INPUT] 0    0    [1    /1   ]  38.0704350486        1
[INPUT] 0    0    [1    /1   ]  4.74160156348        1
[INPUT] 0    0    [1    /1   ]  0.391592225462       1
[INPUT] 1    0    [1    /1   ]  8.59757891725        1
[INPUT] 1    0    [1    /1   ]  0.490819696613       1

nuclear repulsion = 0
number of shells = 9
number of NR pGTOs = 13
number of NR cGTOs = 13
basis = {'Ar': [[0, [18354.087444824872, 1.0]], [0, [2244.286298439216, 1.0]], [0, [461.58168695065746, 1.0]], [0, [123.39264068535616, 1.0]], [0, [38.07043504860129, 1.0]], [0, [4.741601563478199, 1.0]], [0, [0.39159222546177014, 1.0]], [1, [8.597578917248986, 1.0]], [1, [0.4908196966130591, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [18354.08744482]
bas 1, expnt(s) = [2244.28629844]
bas 2, expnt(s) = [461.58168695]
bas 3, expnt(s) = [123.39264069]
bas 4, expnt(s) = [38.07043505]
bas 5, expnt(s) = [4.74160156]
bas 6, expnt(s) = [0.39159223]
bas 7, expnt(s) = [8.59757892]
bas 8, expnt(s) = [0.4908197]
CPU time:       228.73
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  1  1  1  0 38 39  0]
 [ 0  1  1  1  0 40 41  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.83540874e+04 3.98395681e+03 2.24428630e+03 8.23803661e+02
 4.61581687e+02 2.51594679e+02 1.23392641e+02 9.35366837e+01
 3.80704350e+01 3.87218327e+01 4.74160156e+00 8.11818263e+00
 3.91592225e-01 1.25066377e+00 8.59757892e+00 4.29491533e+01
 4.90819697e-01 1.19849678e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319932224724813
cond(S) = 43.071506965290304
E1 = -689.0882760529272  E_coul = 184.9174828143961
init E= -504.170793238531
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.680750566491259  LUMO = 86.789517621068
  mo_energy =
[-1.21641610e+02 -1.32812674e+01 -7.62130151e+00 -7.62130151e+00
 -7.62130151e+00 -1.65080778e+00 -6.80750566e-01 -6.80750566e-01
 -6.80750566e-01  8.67895176e+01  6.87540652e+02  3.97980626e+03
  3.15812268e+04]
E1 = -706.5722013835906  E_coul = 198.95090171515164
cycle= 1 E= -507.621299668439  delta_E= -3.45  |g|= 0.315  |ddm|=  0.3
    CPU time for cycle= 1      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.371607
diis-c [-0.13809186  1.        ]
  HOMO = -0.236094515745672  LUMO = 88.1250234543893
  mo_energy =
[-1.20252995e+02 -1.22529679e+01 -6.65259048e+00 -6.65259048e+00
 -6.65259048e+00 -1.16338535e+00 -2.36094516e-01 -2.36094516e-01
 -2.36094516e-01  8.81250235e+01  6.88912247e+02  3.98105818e+03
  3.15823097e+04]
E1 = -706.5417072958164  E_coul = 198.91999321058572
cycle= 2 E= -507.621714085231  delta_E= -0.000414  |g|= 0.00466  |ddm|= 0.0139
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00495191
diis-c [-2.44094204e-05 -9.01527128e-04  1.00090153e+00]
  HOMO = -0.236263606129698  LUMO = 88.1215721390185
  mo_energy =
[-1.20261408e+02 -1.22541169e+01 -6.65437021e+00 -6.65437021e+00
 -6.65437021e+00 -1.16344792e+00 -2.36263606e-01 -2.36263606e-01
 -2.36263606e-01  8.81215721e+01  6.88901892e+02  3.98104262e+03
  3.15822908e+04]
E1 = -706.5412851534885  E_coul = 198.91957096362444
cycle= 3 E= -507.621714189864  delta_E= -1.05e-07  |g|= 9.06e-05  |ddm|= 0.000194
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.000121417
diis-c [-3.47651883e-10  4.01959278e-05 -2.48918647e-02  1.02485167e+00]
  HOMO = -0.236265648437875  LUMO = 88.1215304411105
  mo_energy =
[-1.20261513e+02 -1.22541315e+01 -6.65439527e+00 -6.65439527e+00
 -6.65439527e+00 -1.16344852e+00 -2.36265648e-01 -2.36265648e-01
 -2.36265648e-01  8.81215304e+01  6.88901784e+02  3.98104249e+03
  3.15822906e+04]
E1 = -706.5412784682258  E_coul = 198.91956427832613
cycle= 4 E= -507.6217141899  delta_E= -3.56e-11  |g|= 3.35e-07  |ddm|= 3.2e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.5412784682258  E_coul = 198.91956427832613
  HOMO = -0.236265634120359  LUMO = 88.121530745831
  mo_energy =
[-1.20261513e+02 -1.22541314e+01 -6.65439513e+00 -6.65439513e+00
 -6.65439513e+00 -1.16344852e+00 -2.36265634e-01 -2.36265634e-01
 -2.36265634e-01  8.81215307e+01  6.88901785e+02  3.98104249e+03
  3.15822907e+04]
E1 = -706.5412785005665  E_coul = 198.919564310667
Extra cycle  E= -507.621714189899  delta_E= 1.71e-13  |g|= 5.65e-09  |ddm|= 1.43e-08
    CPU time for scf_cycle      0.11 sec, wall time      0.12 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 43.071506965290304
E1 = -706.5412785005665  E_coul = 198.919564310667
init E= -507.621714189899
    CPU time for initialize scf      0.07 sec, wall time      0.08 sec
  HOMO = -0.236265633955246  LUMO = 88.1215307495008
  mo_energy =
[-1.20261513e+02 -1.22541314e+01 -6.65439512e+00 -6.65439512e+00
 -6.65439512e+00 -1.16344852e+00 -2.36265634e-01 -2.36265634e-01
 -2.36265634e-01  8.81215307e+01  6.88901785e+02  3.98104249e+03
  3.15822907e+04]
E1 = -706.5412785010478  E_coul = 198.91956431114832
cycle= 1 E= -507.6217141899  delta_E= -5.68e-14  |g|= 1.1e-10  |ddm|= 2.19e-10
    CPU time for cycle= 1      0.01 sec, wall time      0.02 sec
E1 = -706.5412785010478  E_coul = 198.91956431114832
  HOMO = -0.236265633952948  LUMO = 88.1215307495514
  mo_energy =
[-1.20261513e+02 -1.22541314e+01 -6.65439512e+00 -6.65439512e+00
 -6.65439512e+00 -1.16344852e+00 -2.36265634e-01 -2.36265634e-01
 -2.36265634e-01  8.81215307e+01  6.88901785e+02  3.98104249e+03
  3.15822907e+04]
E1 = -706.5412785010561  E_coul = 198.91956431115673
Extra cycle  E= -507.621714189899  delta_E= 1.14e-13  |g|= 5.82e-12  |ddm|= 3.84e-12
    CPU time for scf_cycle      0.15 sec, wall time      0.16 sec
exp = [1.83540874e+04 2.24428630e+03 4.61581687e+02 1.23392641e+02
 3.80704350e+01 4.74160156e+00 3.91592225e-01 8.59757892e+00
 4.90819697e-01]
grad_E = [ 3.83113588e-06  1.46433681e-06 -2.46134679e-05 -2.76969237e-05
  1.30016831e-03  3.34551603e-04  5.03912902e-03 -5.72217159e-04
  1.28413422e-03]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((9, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.5476253398322024e+03,6.8630785798847160e+02,1.5555024230205126e+02,4.2742815896802767e+01,4.7505784169783016e+00,3.9162204394177752e-01,8.5974230426361959e+00,4.9072756124177219e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "7s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:56:48 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  18354.6180288        1
[INPUT] 0    0    [1    /1   ]  2236.95767645        1
[INPUT] 0    0    [1    /1   ]  458.812965809        1
[INPUT] 0    0    [1    /1   ]  122.115251784        1
[INPUT] 0    0    [1    /1   ]  37.7210367753        1
[INPUT] 0    0    [1    /1   ]  4.74122983593        1
[INPUT] 0    0    [1    /1   ]  0.391228524161       1
[INPUT] 1    0    [1    /1   ]  8.59821923738        1
[INPUT] 1    0    [1    /1   ]  0.490837779586       1

nuclear repulsion = 0
number of shells = 9
number of NR pGTOs = 13
number of NR cGTOs = 13
basis = {'Ar': [[0, [18354.618028785422, 1.0]], [0, [2236.957676449923, 1.0]], [0, [458.81296580869196, 1.0]], [0, [122.11525178401097, 1.0]], [0, [37.72103677528821, 1.0]], [0, [4.741229835928328, 1.0]], [0, [0.3912285241607916, 1.0]], [1, [8.598219237379709, 1.0]], [1, [0.49083777958569746, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [18354.61802879]
bas 1, expnt(s) = [2236.95767645]
bas 2, expnt(s) = [458.81296581]
bas 3, expnt(s) = [122.11525178]
bas 4, expnt(s) = [37.72103678]
bas 5, expnt(s) = [4.74122984]
bas 6, expnt(s) = [0.39122852]
bas 7, expnt(s) = [8.59821924]
bas 8, expnt(s) = [0.49083778]
CPU time:       232.69
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  1  1  1  0 38 39  0]
 [ 0  1  1  1  0 40 41  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.83546180e+04 3.98404319e+03 2.23695768e+03 8.21785265e+02
 4.58812966e+02 2.50461966e+02 1.22115252e+02 9.28095050e+01
 3.77210368e+01 3.84549933e+01 4.74122984e+00 8.11770530e+00
 3.91228524e-01 1.24979248e+00 8.59821924e+00 4.29531517e+01
 4.90837780e-01 1.19855197e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.31997866195286
cond(S) = 42.90586365994449
E1 = -689.0865009545416  E_coul = 184.91397665815194
init E= -504.17252429639
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.680897378867789  LUMO = 85.5022453755253
  mo_energy =
[-1.21642257e+02 -1.32809888e+01 -7.62167062e+00 -7.62167062e+00
 -7.62167062e+00 -1.65070951e+00 -6.80897379e-01 -6.80897379e-01
 -6.80897379e-01  8.55022454e+01  6.80472767e+02  3.95751034e+03
  3.15446389e+04]
E1 = -706.5661418113145  E_coul = 198.94464559570102
cycle= 1 E= -507.621496215614  delta_E= -3.45  |g|= 0.316  |ddm|= 0.301
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.371328
diis-c [-0.13788463  1.        ]
  HOMO = -0.236278279194406  LUMO = 86.8359233105975
  mo_energy =
[-1.20254190e+02 -1.22528522e+01 -6.65309495e+00 -6.65309495e+00
 -6.65309495e+00 -1.16347268e+00 -2.36278279e-01 -2.36278279e-01
 -2.36278279e-01  8.68359233e+01  6.81843393e+02  3.95876058e+03
  3.15457194e+04]
E1 = -706.5349615982543  E_coul = 198.91304103886245
cycle= 2 E= -507.621920559392  delta_E= -0.000424  |g|= 0.00472  |ddm|= 0.0142
    CPU time for cycle= 2      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.00501241
diis-c [-2.50296579e-05 -8.29116295e-04  1.00082912e+00]
  HOMO = -0.236451893865444  LUMO = 86.8324231149779
  mo_energy =
[-1.20262770e+02 -1.22540306e+01 -6.65491997e+00 -6.65491997e+00
 -6.65491997e+00 -1.16353687e+00 -2.36451894e-01 -2.36451894e-01
 -2.36451894e-01  8.68324231e+01  6.81832866e+02  3.95874476e+03
  3.15457002e+04]
E1 = -706.5345260884328  E_coul = 198.91260542036406
cycle= 3 E= -507.621920668069  delta_E= -1.09e-07  |g|= 9.27e-05  |ddm|= 0.0002
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.000124162
diis-c [-3.64393082e-10  3.99857803e-05 -2.51379531e-02  1.02509797e+00]
  HOMO = -0.236454021830164  LUMO = 86.8323800333968
  mo_energy =
[-1.20262879e+02 -1.22540458e+01 -6.65494602e+00 -6.65494602e+00
 -6.65494602e+00 -1.16353750e+00 -2.36454022e-01 -2.36454022e-01
 -2.36454022e-01  8.68323800e+01  6.81832753e+02  3.95874463e+03
  3.15457000e+04]
E1 = -706.5345190942209  E_coul = 198.91259842611373
cycle= 4 E= -507.621920668107  delta_E= -3.84e-11  |g|= 3.47e-07  |ddm|= 3.34e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.5345190942209  E_coul = 198.91259842611373
  HOMO = -0.236454006786013  LUMO = 86.8323803478151
  mo_energy =
[-1.20262878e+02 -1.22540457e+01 -6.65494587e+00 -6.65494587e+00
 -6.65494587e+00 -1.16353749e+00 -2.36454007e-01 -2.36454007e-01
 -2.36454007e-01  8.68323803e+01  6.81832754e+02  3.95874463e+03
  3.15457000e+04]
E1 = -706.5345191282208  E_coul = 198.91259846011374
Extra cycle  E= -507.621920668107  delta_E=    0  |g|= 5.89e-09  |ddm|= 1.51e-08
    CPU time for scf_cycle      0.11 sec, wall time      0.11 sec
exp = [1.83546180e+04 2.23695768e+03 4.58812966e+02 1.22115252e+02
 3.77210368e+01 4.74122984e+00 3.91228524e-01 8.59821924e+00
 4.90837780e-01]
E = -507.6219206681071
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((9, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.5476253398322024e+03,6.8630785798847160e+02,1.5555024230205126e+02,4.2742815896802767e+01,4.7505784169783016e+00,3.9162204394177752e-01,8.5974230426361959e+00,4.9072756124177219e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "7s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:56:49 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  18354.6180288        1
[INPUT] 0    0    [1    /1   ]  2236.95767645        1
[INPUT] 0    0    [1    /1   ]  458.812965809        1
[INPUT] 0    0    [1    /1   ]  122.115251784        1
[INPUT] 0    0    [1    /1   ]  37.7210367753        1
[INPUT] 0    0    [1    /1   ]  4.74122983593        1
[INPUT] 0    0    [1    /1   ]  0.391228524161       1
[INPUT] 1    0    [1    /1   ]  8.59821923738        1
[INPUT] 1    0    [1    /1   ]  0.490837779586       1

nuclear repulsion = 0
number of shells = 9
number of NR pGTOs = 13
number of NR cGTOs = 13
basis = {'Ar': [[0, [18354.618028785422, 1.0]], [0, [2236.957676449923, 1.0]], [0, [458.81296580869196, 1.0]], [0, [122.11525178401097, 1.0]], [0, [37.72103677528821, 1.0]], [0, [4.741229835928328, 1.0]], [0, [0.3912285241607916, 1.0]], [1, [8.598219237379709, 1.0]], [1, [0.49083777958569746, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [18354.61802879]
bas 1, expnt(s) = [2236.95767645]
bas 2, expnt(s) = [458.81296581]
bas 3, expnt(s) = [122.11525178]
bas 4, expnt(s) = [37.72103678]
bas 5, expnt(s) = [4.74122984]
bas 6, expnt(s) = [0.39122852]
bas 7, expnt(s) = [8.59821924]
bas 8, expnt(s) = [0.49083778]
CPU time:       233.70
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  1  1  1  0 38 39  0]
 [ 0  1  1  1  0 40 41  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.83546180e+04 3.98404319e+03 2.23695768e+03 8.21785265e+02
 4.58812966e+02 2.50461966e+02 1.22115252e+02 9.28095050e+01
 3.77210368e+01 3.84549933e+01 4.74122984e+00 8.11770530e+00
 3.91228524e-01 1.24979248e+00 8.59821924e+00 4.29531517e+01
 4.90837780e-01 1.19855197e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.31997866195286
cond(S) = 42.90586365994449
E1 = -689.0865009545416  E_coul = 184.91397665815194
init E= -504.17252429639
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.680897378867789  LUMO = 85.5022453755253
  mo_energy =
[-1.21642257e+02 -1.32809888e+01 -7.62167062e+00 -7.62167062e+00
 -7.62167062e+00 -1.65070951e+00 -6.80897379e-01 -6.80897379e-01
 -6.80897379e-01  8.55022454e+01  6.80472767e+02  3.95751034e+03
  3.15446389e+04]
E1 = -706.5661418113145  E_coul = 198.94464559570102
cycle= 1 E= -507.621496215614  delta_E= -3.45  |g|= 0.316  |ddm|= 0.301
    CPU time for cycle= 1      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.371328
diis-c [-0.13788463  1.        ]
  HOMO = -0.236278279194406  LUMO = 86.8359233105975
  mo_energy =
[-1.20254190e+02 -1.22528522e+01 -6.65309495e+00 -6.65309495e+00
 -6.65309495e+00 -1.16347268e+00 -2.36278279e-01 -2.36278279e-01
 -2.36278279e-01  8.68359233e+01  6.81843393e+02  3.95876058e+03
  3.15457194e+04]
E1 = -706.5349615982543  E_coul = 198.91304103886245
cycle= 2 E= -507.621920559392  delta_E= -0.000424  |g|= 0.00472  |ddm|= 0.0142
    CPU time for cycle= 2      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.00501241
diis-c [-2.50296579e-05 -8.29116295e-04  1.00082912e+00]
  HOMO = -0.236451893865444  LUMO = 86.8324231149779
  mo_energy =
[-1.20262770e+02 -1.22540306e+01 -6.65491997e+00 -6.65491997e+00
 -6.65491997e+00 -1.16353687e+00 -2.36451894e-01 -2.36451894e-01
 -2.36451894e-01  8.68324231e+01  6.81832866e+02  3.95874476e+03
  3.15457002e+04]
E1 = -706.5345260884328  E_coul = 198.91260542036406
cycle= 3 E= -507.621920668069  delta_E= -1.09e-07  |g|= 9.27e-05  |ddm|= 0.0002
    CPU time for cycle= 3      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.000124162
diis-c [-3.64393082e-10  3.99857803e-05 -2.51379531e-02  1.02509797e+00]
  HOMO = -0.236454021830164  LUMO = 86.8323800333968
  mo_energy =
[-1.20262879e+02 -1.22540458e+01 -6.65494602e+00 -6.65494602e+00
 -6.65494602e+00 -1.16353750e+00 -2.36454022e-01 -2.36454022e-01
 -2.36454022e-01  8.68323800e+01  6.81832753e+02  3.95874463e+03
  3.15457000e+04]
E1 = -706.5345190942209  E_coul = 198.91259842611373
cycle= 4 E= -507.621920668107  delta_E= -3.84e-11  |g|= 3.47e-07  |ddm|= 3.34e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.5345190942209  E_coul = 198.91259842611373
  HOMO = -0.236454006786013  LUMO = 86.8323803478151
  mo_energy =
[-1.20262878e+02 -1.22540457e+01 -6.65494587e+00 -6.65494587e+00
 -6.65494587e+00 -1.16353749e+00 -2.36454007e-01 -2.36454007e-01
 -2.36454007e-01  8.68323803e+01  6.81832754e+02  3.95874463e+03
  3.15457000e+04]
E1 = -706.5345191282208  E_coul = 198.91259846011374
Extra cycle  E= -507.621920668107  delta_E=    0  |g|= 5.89e-09  |ddm|= 1.51e-08
    CPU time for scf_cycle      0.10 sec, wall time      0.10 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 42.90586365994449
E1 = -706.5345191282208  E_coul = 198.91259846011374
init E= -507.621920668107
    CPU time for initialize scf      0.06 sec, wall time      0.06 sec
  HOMO = -0.236454006611214  LUMO = 86.8323803516376
  mo_energy =
[-1.20262878e+02 -1.22540457e+01 -6.65494587e+00 -6.65494587e+00
 -6.65494587e+00 -1.16353749e+00 -2.36454007e-01 -2.36454007e-01
 -2.36454007e-01  8.68323804e+01  6.81832754e+02  3.95874463e+03
  3.15457000e+04]
E1 = -706.5345191287313  E_coul = 198.91259846062425
cycle= 1 E= -507.621920668107  delta_E= 1.14e-13  |g|= 1.15e-10  |ddm|= 2.31e-10
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -706.5345191287313  E_coul = 198.91259846062425
  HOMO = -0.236454006608767  LUMO = 86.8323803516913
  mo_energy =
[-1.20262878e+02 -1.22540457e+01 -6.65494587e+00 -6.65494587e+00
 -6.65494587e+00 -1.16353749e+00 -2.36454007e-01 -2.36454007e-01
 -2.36454007e-01  8.68323804e+01  6.81832754e+02  3.95874463e+03
  3.15457000e+04]
E1 = -706.5345191287397  E_coul = 198.91259846063286
Extra cycle  E= -507.621920668107  delta_E= 1.71e-13  |g|= 3.72e-12  |ddm|= 4.09e-12
    CPU time for scf_cycle      0.13 sec, wall time      0.13 sec
exp = [1.83546180e+04 2.23695768e+03 4.58812966e+02 1.22115252e+02
 3.77210368e+01 4.74122984e+00 3.91228524e-01 8.59821924e+00
 4.90837780e-01]
grad_E = [ 3.92537074e-06 -2.06479416e-07  2.53851983e-05 -2.22027759e-04
  7.66938081e-04  2.74093969e-04  1.06802758e-04 -2.37128483e-04
  1.22709914e-04]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((9, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.5476253398322024e+03,6.8630785798847160e+02,1.5555024230205126e+02,4.2742815896802767e+01,4.7505784169783016e+00,3.9162204394177752e-01,8.5974230426361959e+00,4.9072756124177219e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "7s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:56:52 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  18354.8982103        1
[INPUT] 0    0    [1    /1   ]  2233.04673834        1
[INPUT] 0    0    [1    /1   ]  457.922496653        1
[INPUT] 0    0    [1    /1   ]  121.899263317        1
[INPUT] 0    0    [1    /1   ]  37.6330538851        1
[INPUT] 0    0    [1    /1   ]  4.7410994158         1
[INPUT] 0    0    [1    /1   ]  0.391170419384       1
[INPUT] 1    0    [1    /1   ]  8.59858036562        1
[INPUT] 1    0    [1    /1   ]  0.490848498769       1

nuclear repulsion = 0
number of shells = 9
number of NR pGTOs = 13
number of NR cGTOs = 13
basis = {'Ar': [[0, [18354.898210273437, 1.0]], [0, [2233.046738338621, 1.0]], [0, [457.9224966528552, 1.0]], [0, [121.89926331725898, 1.0]], [0, [37.633053885094256, 1.0]], [0, [4.741099415797804, 1.0]], [0, [0.3911704193838967, 1.0]], [1, [8.59858036562414, 1.0]], [1, [0.4908484987692274, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [18354.89821027]
bas 1, expnt(s) = [2233.04673834]
bas 2, expnt(s) = [457.92249665]
bas 3, expnt(s) = [121.89926332]
bas 4, expnt(s) = [37.63305389]
bas 5, expnt(s) = [4.74109942]
bas 6, expnt(s) = [0.39117042]
bas 7, expnt(s) = [8.59858037]
bas 8, expnt(s) = [0.4908485]
CPU time:       237.37
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  1  1  1  0 38 39  0]
 [ 0  1  1  1  0 40 41  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.83548982e+04 3.98408880e+03 2.23304674e+03 8.20707466e+02
 4.57922497e+02 2.50097303e+02 1.21899263e+02 9.26863618e+01
 3.76330539e+01 3.83877025e+01 4.74109942e+00 8.11753782e+00
 3.91170419e-01 1.24965327e+00 8.59858037e+00 4.29554068e+01
 4.90848499e-01 1.19858469e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319978501010972
cond(S) = 42.89658092388414
E1 = -689.0886746559548  E_coul = 184.91443258133833
init E= -504.174242074616
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.680915756359002  LUMO = 85.2246643558769
  mo_energy =
[-1.21642368e+02 -1.32806285e+01 -7.62167595e+00 -7.62167595e+00
 -7.62167595e+00 -1.65065672e+00 -6.80915756e-01 -6.80915756e-01
 -6.80915756e-01  8.52246644e+01  6.78815329e+02  3.94940690e+03
  3.15286725e+04]
E1 = -706.5651912063518  E_coul = 198.94367261828774
cycle= 1 E= -507.621518588064  delta_E= -3.45  |g|= 0.317  |ddm|= 0.301
    CPU time for cycle= 1      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.371244
diis-c [-0.13782179  1.        ]
  HOMO = -0.236299294184538  LUMO = 86.5577727708196
  mo_energy =
[-1.20254709e+02 -1.22525597e+01 -6.65317204e+00 -6.65317204e+00
 -6.65317204e+00 -1.16345045e+00 -2.36299294e-01 -2.36299294e-01
 -2.36299294e-01  8.65577728e+01  6.80185310e+02  3.95065641e+03
  3.15297519e+04]
E1 = -706.5338444733999  E_coul = 198.91189913301127
cycle= 2 E= -507.621945340389  delta_E= -0.000427  |g|= 0.00474  |ddm|= 0.0142
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00502896
diis-c [-2.52008754e-05 -8.06822341e-04  1.00080682e+00]
  HOMO = -0.236473964576182  LUMO = 86.5542590036643
  mo_energy =
[-1.20263331e+02 -1.22537449e+01 -6.65500777e+00 -6.65500777e+00
 -6.65500777e+00 -1.16351501e+00 -2.36473965e-01 -2.36473965e-01
 -2.36473965e-01  8.65542590e+01  6.80174737e+02  3.95064053e+03
  3.15297326e+04]
E1 = -706.5334058787253  E_coul = 198.91146042875735
cycle= 3 E= -507.621945449968  delta_E= -1.1e-07  |g|= 9.32e-05  |ddm|= 0.000201
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.000124844
diis-c [-3.68795682e-10  3.97987176e-05 -2.51898929e-02  1.02515009e+00]
  HOMO = -0.236476113076511  LUMO = 86.5542155689529
  mo_energy =
[-1.20263441e+02 -1.22537603e+01 -6.65503405e+00 -6.65503405e+00
 -6.65503405e+00 -1.16351564e+00 -2.36476113e-01 -2.36476113e-01
 -2.36476113e-01  8.65542156e+01  6.80174623e+02  3.95064039e+03
  3.15297324e+04]
E1 = -706.5333988121013  E_coul = 198.9114533620946
cycle= 4 E= -507.621945450007  delta_E= -3.88e-11  |g|= 3.5e-07  |ddm|= 3.37e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.5333988121013  E_coul = 198.9114533620946
  HOMO = -0.236476097857554  LUMO = 86.554215885984
  mo_energy =
[-1.20263440e+02 -1.22537602e+01 -6.65503390e+00 -6.65503390e+00
 -6.65503390e+00 -1.16351563e+00 -2.36476098e-01 -2.36476098e-01
 -2.36476098e-01  8.65542159e+01  6.80174624e+02  3.95064039e+03
  3.15297324e+04]
E1 = -706.533398846493  E_coul = 198.91145339648622
Extra cycle  E= -507.621945450007  delta_E= -1.14e-13  |g|= 5.94e-09  |ddm|= 1.52e-08
    CPU time for scf_cycle      0.10 sec, wall time      0.11 sec
exp = [1.83548982e+04 2.23304674e+03 4.57922497e+02 1.21899263e+02
 3.76330539e+01 4.74109942e+00 3.91170419e-01 8.59858037e+00
 4.90848499e-01]
E = -507.6219454500068
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((9, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.5476253398322024e+03,6.8630785798847160e+02,1.5555024230205126e+02,4.2742815896802767e+01,4.7505784169783016e+00,3.9162204394177752e-01,8.5974230426361959e+00,4.9072756124177219e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "7s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:56:53 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  18354.8982103        1
[INPUT] 0    0    [1    /1   ]  2233.04673834        1
[INPUT] 0    0    [1    /1   ]  457.922496653        1
[INPUT] 0    0    [1    /1   ]  121.899263317        1
[INPUT] 0    0    [1    /1   ]  37.6330538851        1
[INPUT] 0    0    [1    /1   ]  4.7410994158         1
[INPUT] 0    0    [1    /1   ]  0.391170419384       1
[INPUT] 1    0    [1    /1   ]  8.59858036562        1
[INPUT] 1    0    [1    /1   ]  0.490848498769       1

nuclear repulsion = 0
number of shells = 9
number of NR pGTOs = 13
number of NR cGTOs = 13
basis = {'Ar': [[0, [18354.898210273437, 1.0]], [0, [2233.046738338621, 1.0]], [0, [457.9224966528552, 1.0]], [0, [121.89926331725898, 1.0]], [0, [37.633053885094256, 1.0]], [0, [4.741099415797804, 1.0]], [0, [0.3911704193838967, 1.0]], [1, [8.59858036562414, 1.0]], [1, [0.4908484987692274, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [18354.89821027]
bas 1, expnt(s) = [2233.04673834]
bas 2, expnt(s) = [457.92249665]
bas 3, expnt(s) = [121.89926332]
bas 4, expnt(s) = [37.63305389]
bas 5, expnt(s) = [4.74109942]
bas 6, expnt(s) = [0.39117042]
bas 7, expnt(s) = [8.59858037]
bas 8, expnt(s) = [0.4908485]
CPU time:       238.23
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  1  1  1  0 38 39  0]
 [ 0  1  1  1  0 40 41  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.83548982e+04 3.98408880e+03 2.23304674e+03 8.20707466e+02
 4.57922497e+02 2.50097303e+02 1.21899263e+02 9.26863618e+01
 3.76330539e+01 3.83877025e+01 4.74109942e+00 8.11753782e+00
 3.91170419e-01 1.24965327e+00 8.59858037e+00 4.29554068e+01
 4.90848499e-01 1.19858469e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319978501010972
cond(S) = 42.89658092388414
E1 = -689.0886746559548  E_coul = 184.91443258133833
init E= -504.174242074616
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.680915756359002  LUMO = 85.2246643558769
  mo_energy =
[-1.21642368e+02 -1.32806285e+01 -7.62167595e+00 -7.62167595e+00
 -7.62167595e+00 -1.65065672e+00 -6.80915756e-01 -6.80915756e-01
 -6.80915756e-01  8.52246644e+01  6.78815329e+02  3.94940690e+03
  3.15286725e+04]
E1 = -706.5651912063518  E_coul = 198.94367261828774
cycle= 1 E= -507.621518588064  delta_E= -3.45  |g|= 0.317  |ddm|= 0.301
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.371244
diis-c [-0.13782179  1.        ]
  HOMO = -0.236299294184538  LUMO = 86.5577727708196
  mo_energy =
[-1.20254709e+02 -1.22525597e+01 -6.65317204e+00 -6.65317204e+00
 -6.65317204e+00 -1.16345045e+00 -2.36299294e-01 -2.36299294e-01
 -2.36299294e-01  8.65577728e+01  6.80185310e+02  3.95065641e+03
  3.15297519e+04]
E1 = -706.5338444733999  E_coul = 198.91189913301127
cycle= 2 E= -507.621945340389  delta_E= -0.000427  |g|= 0.00474  |ddm|= 0.0142
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00502896
diis-c [-2.52008754e-05 -8.06822341e-04  1.00080682e+00]
  HOMO = -0.236473964576182  LUMO = 86.5542590036643
  mo_energy =
[-1.20263331e+02 -1.22537449e+01 -6.65500777e+00 -6.65500777e+00
 -6.65500777e+00 -1.16351501e+00 -2.36473965e-01 -2.36473965e-01
 -2.36473965e-01  8.65542590e+01  6.80174737e+02  3.95064053e+03
  3.15297326e+04]
E1 = -706.5334058787253  E_coul = 198.91146042875735
cycle= 3 E= -507.621945449968  delta_E= -1.1e-07  |g|= 9.32e-05  |ddm|= 0.000201
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.000124844
diis-c [-3.68795682e-10  3.97987176e-05 -2.51898929e-02  1.02515009e+00]
  HOMO = -0.236476113076511  LUMO = 86.5542155689529
  mo_energy =
[-1.20263441e+02 -1.22537603e+01 -6.65503405e+00 -6.65503405e+00
 -6.65503405e+00 -1.16351564e+00 -2.36476113e-01 -2.36476113e-01
 -2.36476113e-01  8.65542156e+01  6.80174623e+02  3.95064039e+03
  3.15297324e+04]
E1 = -706.5333988121013  E_coul = 198.9114533620946
cycle= 4 E= -507.621945450007  delta_E= -3.88e-11  |g|= 3.5e-07  |ddm|= 3.37e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.5333988121013  E_coul = 198.9114533620946
  HOMO = -0.236476097857554  LUMO = 86.554215885984
  mo_energy =
[-1.20263440e+02 -1.22537602e+01 -6.65503390e+00 -6.65503390e+00
 -6.65503390e+00 -1.16351563e+00 -2.36476098e-01 -2.36476098e-01
 -2.36476098e-01  8.65542159e+01  6.80174624e+02  3.95064039e+03
  3.15297324e+04]
E1 = -706.533398846493  E_coul = 198.91145339648622
Extra cycle  E= -507.621945450007  delta_E= -1.14e-13  |g|= 5.94e-09  |ddm|= 1.52e-08
    CPU time for scf_cycle      0.10 sec, wall time      0.10 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 42.89658092388414
E1 = -706.533398846493  E_coul = 198.91145339648622
init E= -507.621945450007
    CPU time for initialize scf      0.06 sec, wall time      0.06 sec
  HOMO = -0.236476097680501  LUMO = 86.5542158898451
  mo_energy =
[-1.20263440e+02 -1.22537602e+01 -6.65503390e+00 -6.65503390e+00
 -6.65503390e+00 -1.16351563e+00 -2.36476098e-01 -2.36476098e-01
 -2.36476098e-01  8.65542159e+01  6.80174624e+02  3.95064039e+03
  3.15297324e+04]
E1 = -706.5333988470102  E_coul = 198.91145339700356
cycle= 1 E= -507.621945450007  delta_E= 2.27e-13  |g|= 1.17e-10  |ddm|= 2.34e-10
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -706.5333988470102  E_coul = 198.91145339700356
  HOMO = -0.236476097678019  LUMO = 86.5542158898998
  mo_energy =
[-1.20263440e+02 -1.22537602e+01 -6.65503390e+00 -6.65503390e+00
 -6.65503390e+00 -1.16351563e+00 -2.36476098e-01 -2.36476098e-01
 -2.36476098e-01  8.65542159e+01  6.80174624e+02  3.95064039e+03
  3.15297324e+04]
E1 = -706.5333988470184  E_coul = 198.9114533970121
Extra cycle  E= -507.621945450006  delta_E= 3.41e-13  |g|= 5.8e-12  |ddm|= 4.15e-12
    CPU time for scf_cycle      0.13 sec, wall time      0.13 sec
exp = [1.83548982e+04 2.23304674e+03 4.57922497e+02 1.21899263e+02
 3.76330539e+01 4.74109942e+00 3.91170419e-01 8.59858037e+00
 4.90848499e-01]
grad_E = [ 3.96662438e-06  8.36899884e-08  8.68507624e-06 -6.92098948e-05
  1.96103977e-04  2.73739891e-05 -4.16518498e-04 -4.70997350e-05
 -7.43810365e-05]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((9, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.5476253398322024e+03,6.8630785798847160e+02,1.5555024230205126e+02,4.2742815896802767e+01,4.7505784169783016e+00,3.9162204394177752e-01,8.5974230426361959e+00,4.9072756124177219e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "7s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:56:57 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  18354.9644437        1
[INPUT] 0    0    [1    /1   ]  2232.11821961        1
[INPUT] 0    0    [1    /1   ]  457.767556444        1
[INPUT] 0    0    [1    /1   ]  121.887845786        1
[INPUT] 0    0    [1    /1   ]  37.6178568352        1
[INPUT] 0    0    [1    /1   ]  4.74113464091        1
[INPUT] 0    0    [1    /1   ]  0.391184599365       1
[INPUT] 1    0    [1    /1   ]  8.59867439376        1
[INPUT] 1    0    [1    /1   ]  0.490851638109       1

nuclear repulsion = 0
number of shells = 9
number of NR pGTOs = 13
number of NR cGTOs = 13
basis = {'Ar': [[0, [18354.964443712717, 1.0]], [0, [2232.1182196139966, 1.0]], [0, [457.76755644381143, 1.0]], [0, [121.88784578591441, 1.0]], [0, [37.617856835167515, 1.0]], [0, [4.741134640908701, 1.0]], [0, [0.39118459936490585, 1.0]], [1, [8.598674393758067, 1.0]], [1, [0.4908516381094318, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [18354.96444371]
bas 1, expnt(s) = [2232.11821961]
bas 2, expnt(s) = [457.76755644]
bas 3, expnt(s) = [121.88784579]
bas 4, expnt(s) = [37.61785684]
bas 5, expnt(s) = [4.74113464]
bas 6, expnt(s) = [0.3911846]
bas 7, expnt(s) = [8.59867439]
bas 8, expnt(s) = [0.49085164]
CPU time:       241.69
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  1  1  1  0 38 39  0]
 [ 0  1  1  1  0 40 41  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.83549644e+04 3.98409958e+03 2.23211822e+03 8.20451510e+02
 4.57767556e+02 2.50033835e+02 1.21887846e+02 9.26798507e+01
 3.76178568e+01 3.83760756e+01 4.74113464e+00 8.11758306e+00
 3.91184599e-01 1.24968724e+00 8.59867439e+00 4.29559939e+01
 4.90851638e-01 1.19859427e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.31997311094563
cond(S) = 42.8973804319951
E1 = -689.0899311285384  E_coul = 184.91507209567192
init E= -504.174859032866
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.680906774392268  LUMO = 85.1882970512617
  mo_energy =
[-1.21642361e+02 -1.32804815e+01 -7.62163419e+00 -7.62163419e+00
 -7.62163419e+00 -1.65064296e+00 -6.80906774e-01 -6.80906774e-01
 -6.80906774e-01  8.51882971e+01  6.78597919e+02  3.94781745e+03
  3.15251988e+04]
E1 = -706.5655641742586  E_coul = 198.94404423908293
cycle= 1 E= -507.621519935176  delta_E= -3.45  |g|= 0.317  |ddm|= 0.301
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.371221
diis-c [-0.13780494  1.        ]
  HOMO = -0.23628684822443  LUMO = 86.5212978277187
  mo_energy =
[-1.20254810e+02 -1.22524226e+01 -6.65314217e+00 -6.65314217e+00
 -6.65314217e+00 -1.16342909e+00 -2.36286848e-01 -2.36286848e-01
 -2.36286848e-01  8.65212978e+01  6.79967721e+02  3.94906678e+03
  3.15262779e+04]
E1 = -706.5341920607441  E_coul = 198.91224502162925
cycle= 2 E= -507.621947039115  delta_E= -0.000427  |g|= 0.00474  |ddm|= 0.0142
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00503183
diis-c [-2.52308252e-05 -8.01869413e-04  1.00080187e+00]
  HOMO = -0.236461669004909  LUMO = 86.5177815777977
  mo_energy =
[-1.20263438e+02 -1.22536088e+01 -6.65497944e+00 -6.65497944e+00
 -6.65497944e+00 -1.16349371e+00 -2.36461669e-01 -2.36461669e-01
 -2.36461669e-01  8.65177816e+01  6.79957140e+02  3.94905089e+03
  3.15262585e+04]
E1 = -706.5337530366029  E_coul = 198.9118058877941
cycle= 3 E= -507.621947148809  delta_E= -1.1e-07  |g|= 9.33e-05  |ddm|= 0.000201
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.000124953
diis-c [-3.69541461e-10  3.97380121e-05 -2.51967584e-02  1.02515702e+00]
  HOMO = -0.236463820621699  LUMO = 86.5177380838652
  mo_energy =
[-1.20263548e+02 -1.22536242e+01 -6.65500576e+00 -6.65500576e+00
 -6.65500576e+00 -1.16349434e+00 -2.36463821e-01 -2.36463821e-01
 -2.36463821e-01  8.65177381e+01  6.79957026e+02  3.94905075e+03
  3.15262584e+04]
E1 = -706.5337459595055  E_coul = 198.91179881065878
cycle= 4 E= -507.621947148847  delta_E= -3.8e-11  |g|= 3.5e-07  |ddm|= 3.37e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.5337459595055  E_coul = 198.91179881065878
  HOMO = -0.236463805376504  LUMO = 86.5177384013616
  mo_energy =
[-1.20263548e+02 -1.22536241e+01 -6.65500561e+00 -6.65500561e+00
 -6.65500561e+00 -1.16349433e+00 -2.36463805e-01 -2.36463805e-01
 -2.36463805e-01  8.65177384e+01  6.79957027e+02  3.94905075e+03
  3.15262584e+04]
E1 = -706.5337459939543  E_coul = 198.91179884510726
Extra cycle  E= -507.621947148847  delta_E= -3.41e-13  |g|= 5.95e-09  |ddm|= 1.53e-08
    CPU time for scf_cycle      0.10 sec, wall time      0.10 sec
exp = [1.83549644e+04 2.23211822e+03 4.57767556e+02 1.21887846e+02
 3.76178568e+01 4.74113464e+00 3.91184599e-01 8.59867439e+00
 4.90851638e-01]
E = -507.6219471488471
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((9, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.5476253398322024e+03,6.8630785798847160e+02,1.5555024230205126e+02,4.2742815896802767e+01,4.7505784169783016e+00,3.9162204394177752e-01,8.5974230426361959e+00,4.9072756124177219e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "7s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:56:58 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  18354.9644437        1
[INPUT] 0    0    [1    /1   ]  2232.11821961        1
[INPUT] 0    0    [1    /1   ]  457.767556444        1
[INPUT] 0    0    [1    /1   ]  121.887845786        1
[INPUT] 0    0    [1    /1   ]  37.6178568352        1
[INPUT] 0    0    [1    /1   ]  4.74113464091        1
[INPUT] 0    0    [1    /1   ]  0.391184599365       1
[INPUT] 1    0    [1    /1   ]  8.59867439376        1
[INPUT] 1    0    [1    /1   ]  0.490851638109       1

nuclear repulsion = 0
number of shells = 9
number of NR pGTOs = 13
number of NR cGTOs = 13
basis = {'Ar': [[0, [18354.964443712717, 1.0]], [0, [2232.1182196139966, 1.0]], [0, [457.76755644381143, 1.0]], [0, [121.88784578591441, 1.0]], [0, [37.617856835167515, 1.0]], [0, [4.741134640908701, 1.0]], [0, [0.39118459936490585, 1.0]], [1, [8.598674393758067, 1.0]], [1, [0.4908516381094318, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [18354.96444371]
bas 1, expnt(s) = [2232.11821961]
bas 2, expnt(s) = [457.76755644]
bas 3, expnt(s) = [121.88784579]
bas 4, expnt(s) = [37.61785684]
bas 5, expnt(s) = [4.74113464]
bas 6, expnt(s) = [0.3911846]
bas 7, expnt(s) = [8.59867439]
bas 8, expnt(s) = [0.49085164]
CPU time:       242.53
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  1  1  1  0 38 39  0]
 [ 0  1  1  1  0 40 41  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.83549644e+04 3.98409958e+03 2.23211822e+03 8.20451510e+02
 4.57767556e+02 2.50033835e+02 1.21887846e+02 9.26798507e+01
 3.76178568e+01 3.83760756e+01 4.74113464e+00 8.11758306e+00
 3.91184599e-01 1.24968724e+00 8.59867439e+00 4.29559939e+01
 4.90851638e-01 1.19859427e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.31997311094563
cond(S) = 42.8973804319951
E1 = -689.0899311285384  E_coul = 184.91507209567192
init E= -504.174859032866
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.680906774392268  LUMO = 85.1882970512617
  mo_energy =
[-1.21642361e+02 -1.32804815e+01 -7.62163419e+00 -7.62163419e+00
 -7.62163419e+00 -1.65064296e+00 -6.80906774e-01 -6.80906774e-01
 -6.80906774e-01  8.51882971e+01  6.78597919e+02  3.94781745e+03
  3.15251988e+04]
E1 = -706.5655641742586  E_coul = 198.94404423908293
cycle= 1 E= -507.621519935176  delta_E= -3.45  |g|= 0.317  |ddm|= 0.301
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.371221
diis-c [-0.13780494  1.        ]
  HOMO = -0.23628684822443  LUMO = 86.5212978277187
  mo_energy =
[-1.20254810e+02 -1.22524226e+01 -6.65314217e+00 -6.65314217e+00
 -6.65314217e+00 -1.16342909e+00 -2.36286848e-01 -2.36286848e-01
 -2.36286848e-01  8.65212978e+01  6.79967721e+02  3.94906678e+03
  3.15262779e+04]
E1 = -706.5341920607441  E_coul = 198.91224502162925
cycle= 2 E= -507.621947039115  delta_E= -0.000427  |g|= 0.00474  |ddm|= 0.0142
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00503183
diis-c [-2.52308252e-05 -8.01869413e-04  1.00080187e+00]
  HOMO = -0.236461669004909  LUMO = 86.5177815777977
  mo_energy =
[-1.20263438e+02 -1.22536088e+01 -6.65497944e+00 -6.65497944e+00
 -6.65497944e+00 -1.16349371e+00 -2.36461669e-01 -2.36461669e-01
 -2.36461669e-01  8.65177816e+01  6.79957140e+02  3.94905089e+03
  3.15262585e+04]
E1 = -706.5337530366029  E_coul = 198.9118058877941
cycle= 3 E= -507.621947148809  delta_E= -1.1e-07  |g|= 9.33e-05  |ddm|= 0.000201
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.000124953
diis-c [-3.69541461e-10  3.97380121e-05 -2.51967584e-02  1.02515702e+00]
  HOMO = -0.236463820621699  LUMO = 86.5177380838652
  mo_energy =
[-1.20263548e+02 -1.22536242e+01 -6.65500576e+00 -6.65500576e+00
 -6.65500576e+00 -1.16349434e+00 -2.36463821e-01 -2.36463821e-01
 -2.36463821e-01  8.65177381e+01  6.79957026e+02  3.94905075e+03
  3.15262584e+04]
E1 = -706.5337459595055  E_coul = 198.91179881065878
cycle= 4 E= -507.621947148847  delta_E= -3.8e-11  |g|= 3.5e-07  |ddm|= 3.37e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.5337459595055  E_coul = 198.91179881065878
  HOMO = -0.236463805376504  LUMO = 86.5177384013616
  mo_energy =
[-1.20263548e+02 -1.22536241e+01 -6.65500561e+00 -6.65500561e+00
 -6.65500561e+00 -1.16349433e+00 -2.36463805e-01 -2.36463805e-01
 -2.36463805e-01  8.65177384e+01  6.79957027e+02  3.94905075e+03
  3.15262584e+04]
E1 = -706.5337459939543  E_coul = 198.91179884510726
Extra cycle  E= -507.621947148847  delta_E= -3.41e-13  |g|= 5.95e-09  |ddm|= 1.53e-08
    CPU time for scf_cycle      0.09 sec, wall time      0.10 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 42.8973804319951
E1 = -706.5337459939543  E_coul = 198.91179884510726
init E= -507.621947148847
    CPU time for initialize scf      0.06 sec, wall time      0.06 sec
  HOMO = -0.236463805199131  LUMO = 86.5177384052286
  mo_energy =
[-1.20263548e+02 -1.22536241e+01 -6.65500561e+00 -6.65500561e+00
 -6.65500561e+00 -1.16349433e+00 -2.36463805e-01 -2.36463805e-01
 -2.36463805e-01  8.65177384e+01  6.79957027e+02  3.94905075e+03
  3.15262584e+04]
E1 = -706.533745994472  E_coul = 198.91179884562536
cycle= 1 E= -507.621947148847  delta_E= 3.98e-13  |g|= 1.16e-10  |ddm|= 2.34e-10
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -706.533745994472  E_coul = 198.91179884562536
  HOMO = -0.236463805196643  LUMO = 86.5177384052838
  mo_energy =
[-1.20263548e+02 -1.22536241e+01 -6.65500561e+00 -6.65500561e+00
 -6.65500561e+00 -1.16349433e+00 -2.36463805e-01 -2.36463805e-01
 -2.36463805e-01  8.65177384e+01  6.79957027e+02  3.94905075e+03
  3.15262584e+04]
E1 = -706.5337459944815  E_coul = 198.91179884563422
Extra cycle  E= -507.621947148847  delta_E= -5.68e-13  |g|= 4.34e-12  |ddm|= 4.15e-12
    CPU time for scf_cycle      0.13 sec, wall time      0.14 sec
exp = [1.83549644e+04 2.23211822e+03 4.57767556e+02 1.21887846e+02
 3.76178568e+01 4.74113464e+00 3.91184599e-01 8.59867439e+00
 4.90851638e-01]
grad_E = [ 3.97553457e-06  2.71189679e-07  1.90001250e-07 -1.34792143e-06
  2.17908117e-06 -1.80621755e-05 -7.79198522e-05  3.28614898e-06
 -2.01113554e-05]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((9, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.5476253398322024e+03,6.8630785798847160e+02,1.5555024230205126e+02,4.2742815896802767e+01,4.7505784169783016e+00,3.9162204394177752e-01,8.5974230426361959e+00,4.9072756124177219e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "7s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:57:01 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  18354.9616557        1
[INPUT] 0    0    [1    /1   ]  2232.15693733        1
[INPUT] 0    0    [1    /1   ]  457.778430886        1
[INPUT] 0    0    [1    /1   ]  121.891369888        1
[INPUT] 0    0    [1    /1   ]  37.6184607146        1
[INPUT] 0    0    [1    /1   ]  4.74115622749        1
[INPUT] 0    0    [1    /1   ]  0.391188864          1
[INPUT] 1    0    [1    /1   ]  8.59867023247        1
[INPUT] 1    0    [1    /1   ]  0.490851580864       1

nuclear repulsion = 0
number of shells = 9
number of NR pGTOs = 13
number of NR cGTOs = 13
basis = {'Ar': [[0, [18354.961655666553, 1.0]], [0, [2232.1569373256953, 1.0]], [0, [457.77843088607506, 1.0]], [0, [121.89136988757589, 1.0]], [0, [37.61846071461031, 1.0]], [0, [4.741156227489762, 1.0]], [0, [0.3911888640001866, 1.0]], [1, [8.598670232469381, 1.0]], [1, [0.4908515808635091, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [18354.96165567]
bas 1, expnt(s) = [2232.15693733]
bas 2, expnt(s) = [457.77843089]
bas 3, expnt(s) = [121.89136989]
bas 4, expnt(s) = [37.61846071]
bas 5, expnt(s) = [4.74115623]
bas 6, expnt(s) = [0.39118886]
bas 7, expnt(s) = [8.59867023]
bas 8, expnt(s) = [0.49085158]
CPU time:       246.01
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  1  1  1  0 38 39  0]
 [ 0  1  1  1  0 40 41  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.83549617e+04 3.98409913e+03 2.23215694e+03 8.20462183e+02
 4.57778431e+02 2.50038289e+02 1.21891370e+02 9.26818604e+01
 3.76184607e+01 3.83765377e+01 4.74115623e+00 8.11761078e+00
 3.91188864e-01 1.24969746e+00 8.59867023e+00 4.29559679e+01
 4.90851581e-01 1.19859410e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319972346758558
cond(S) = 42.897031983670196
E1 = -689.0900180158272  E_coul = 184.9151396222424
init E= -504.174878393585
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.680904781336369  LUMO = 85.1912004669425
  mo_energy =
[-1.21642357e+02 -1.32804760e+01 -7.62162809e+00 -7.62162809e+00
 -7.62162809e+00 -1.65064353e+00 -6.80904781e-01 -6.80904781e-01
 -6.80904781e-01  8.51912005e+01  6.78618859e+02  3.94790802e+03
  3.15253669e+04]
E1 = -706.5656688084046  E_coul = 198.94414884249443
cycle= 1 E= -507.62151996591  delta_E= -3.45  |g|= 0.317  |ddm|= 0.301
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.37122
diis-c [-0.13780458  1.        ]
  HOMO = -0.236284190680761  LUMO = 86.524207491898
  mo_energy =
[-1.20254800e+02 -1.22524150e+01 -6.65313375e+00 -6.65313375e+00
 -6.65313375e+00 -1.16342716e+00 -2.36284191e-01 -2.36284191e-01
 -2.36284191e-01  8.65242075e+01  6.79988667e+02  3.94915736e+03
  3.15264460e+04]
E1 = -706.5342983904044  E_coul = 198.91235134980207
cycle= 2 E= -507.621947040602  delta_E= -0.000427  |g|= 0.00474  |ddm|= 0.0142
    CPU time for cycle= 2      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.00503165
diis-c [-2.52290038e-05 -8.01888335e-04  1.00080189e+00]
  HOMO = -0.2364590001332  LUMO = 86.5206913567289
  mo_energy =
[-1.20263428e+02 -1.22536011e+01 -6.65497091e+00 -6.65497091e+00
 -6.65497091e+00 -1.16349178e+00 -2.36459000e-01 -2.36459000e-01
 -2.36459000e-01  8.65206914e+01  6.79978086e+02  3.94914147e+03
  3.15264267e+04]
E1 = -706.5338594001555  E_coul = 198.91191224987196
cycle= 3 E= -507.621947150284  delta_E= -1.1e-07  |g|= 9.33e-05  |ddm|= 0.000201
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.000124947
diis-c [-3.69502720e-10  3.97376775e-05 -2.51963309e-02  1.02515659e+00]
  HOMO = -0.236461151562018  LUMO = 86.5206478656709
  mo_energy =
[-1.20263538e+02 -1.22536165e+01 -6.65499723e+00 -6.65499723e+00
 -6.65499723e+00 -1.16349241e+00 -2.36461152e-01 -2.36461152e-01
 -2.36461152e-01  8.65206479e+01  6.79977973e+02  3.94914133e+03
  3.15264265e+04]
E1 = -706.5338523237746  E_coul = 198.91190517345208
cycle= 4 E= -507.621947150323  delta_E= -3.9e-11  |g|= 3.5e-07  |ddm|= 3.37e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.5338523237746  E_coul = 198.91190517345208
  HOMO = -0.236461136318486  LUMO = 86.520648183145
  mo_energy =
[-1.20263538e+02 -1.22536164e+01 -6.65499708e+00 -6.65499708e+00
 -6.65499708e+00 -1.16349241e+00 -2.36461136e-01 -2.36461136e-01
 -2.36461136e-01  8.65206482e+01  6.79977974e+02  3.94914133e+03
  3.15264265e+04]
E1 = -706.5338523582196  E_coul = 198.911905207897
Extra cycle  E= -507.621947150323  delta_E= -1.14e-13  |g|= 5.95e-09  |ddm|= 1.53e-08
    CPU time for scf_cycle      0.10 sec, wall time      0.10 sec
exp = [1.83549617e+04 2.23215694e+03 4.57778431e+02 1.21891370e+02
 3.76184607e+01 4.74115623e+00 3.91188864e-01 8.59867023e+00
 4.90851581e-01]
E = -507.6219471503226
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((9, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.5476253398322024e+03,6.8630785798847160e+02,1.5555024230205126e+02,4.2742815896802767e+01,4.7505784169783016e+00,3.9162204394177752e-01,8.5974230426361959e+00,4.9072756124177219e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "7s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:57:02 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  18354.9616557        1
[INPUT] 0    0    [1    /1   ]  2232.15693733        1
[INPUT] 0    0    [1    /1   ]  457.778430886        1
[INPUT] 0    0    [1    /1   ]  121.891369888        1
[INPUT] 0    0    [1    /1   ]  37.6184607146        1
[INPUT] 0    0    [1    /1   ]  4.74115622749        1
[INPUT] 0    0    [1    /1   ]  0.391188864          1
[INPUT] 1    0    [1    /1   ]  8.59867023247        1
[INPUT] 1    0    [1    /1   ]  0.490851580864       1

nuclear repulsion = 0
number of shells = 9
number of NR pGTOs = 13
number of NR cGTOs = 13
basis = {'Ar': [[0, [18354.961655666553, 1.0]], [0, [2232.1569373256953, 1.0]], [0, [457.77843088607506, 1.0]], [0, [121.89136988757589, 1.0]], [0, [37.61846071461031, 1.0]], [0, [4.741156227489762, 1.0]], [0, [0.3911888640001866, 1.0]], [1, [8.598670232469381, 1.0]], [1, [0.4908515808635091, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [18354.96165567]
bas 1, expnt(s) = [2232.15693733]
bas 2, expnt(s) = [457.77843089]
bas 3, expnt(s) = [121.89136989]
bas 4, expnt(s) = [37.61846071]
bas 5, expnt(s) = [4.74115623]
bas 6, expnt(s) = [0.39118886]
bas 7, expnt(s) = [8.59867023]
bas 8, expnt(s) = [0.49085158]
CPU time:       246.85
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  1  1  1  0 38 39  0]
 [ 0  1  1  1  0 40 41  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.83549617e+04 3.98409913e+03 2.23215694e+03 8.20462183e+02
 4.57778431e+02 2.50038289e+02 1.21891370e+02 9.26818604e+01
 3.76184607e+01 3.83765377e+01 4.74115623e+00 8.11761078e+00
 3.91188864e-01 1.24969746e+00 8.59867023e+00 4.29559679e+01
 4.90851581e-01 1.19859410e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319972346758558
cond(S) = 42.897031983670196
E1 = -689.0900180158272  E_coul = 184.9151396222424
init E= -504.174878393585
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.680904781336369  LUMO = 85.1912004669425
  mo_energy =
[-1.21642357e+02 -1.32804760e+01 -7.62162809e+00 -7.62162809e+00
 -7.62162809e+00 -1.65064353e+00 -6.80904781e-01 -6.80904781e-01
 -6.80904781e-01  8.51912005e+01  6.78618859e+02  3.94790802e+03
  3.15253669e+04]
E1 = -706.5656688084046  E_coul = 198.94414884249443
cycle= 1 E= -507.62151996591  delta_E= -3.45  |g|= 0.317  |ddm|= 0.301
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.37122
diis-c [-0.13780458  1.        ]
  HOMO = -0.236284190680761  LUMO = 86.524207491898
  mo_energy =
[-1.20254800e+02 -1.22524150e+01 -6.65313375e+00 -6.65313375e+00
 -6.65313375e+00 -1.16342716e+00 -2.36284191e-01 -2.36284191e-01
 -2.36284191e-01  8.65242075e+01  6.79988667e+02  3.94915736e+03
  3.15264460e+04]
E1 = -706.5342983904044  E_coul = 198.91235134980207
cycle= 2 E= -507.621947040602  delta_E= -0.000427  |g|= 0.00474  |ddm|= 0.0142
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00503165
diis-c [-2.52290038e-05 -8.01888335e-04  1.00080189e+00]
  HOMO = -0.2364590001332  LUMO = 86.5206913567289
  mo_energy =
[-1.20263428e+02 -1.22536011e+01 -6.65497091e+00 -6.65497091e+00
 -6.65497091e+00 -1.16349178e+00 -2.36459000e-01 -2.36459000e-01
 -2.36459000e-01  8.65206914e+01  6.79978086e+02  3.94914147e+03
  3.15264267e+04]
E1 = -706.5338594001555  E_coul = 198.91191224987196
cycle= 3 E= -507.621947150284  delta_E= -1.1e-07  |g|= 9.33e-05  |ddm|= 0.000201
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.000124947
diis-c [-3.69502720e-10  3.97376775e-05 -2.51963309e-02  1.02515659e+00]
  HOMO = -0.236461151562018  LUMO = 86.5206478656709
  mo_energy =
[-1.20263538e+02 -1.22536165e+01 -6.65499723e+00 -6.65499723e+00
 -6.65499723e+00 -1.16349241e+00 -2.36461152e-01 -2.36461152e-01
 -2.36461152e-01  8.65206479e+01  6.79977973e+02  3.94914133e+03
  3.15264265e+04]
E1 = -706.5338523237746  E_coul = 198.91190517345208
cycle= 4 E= -507.621947150323  delta_E= -3.9e-11  |g|= 3.5e-07  |ddm|= 3.37e-06
    CPU time for cycle= 4      0.03 sec, wall time      0.03 sec
E1 = -706.5338523237746  E_coul = 198.91190517345208
  HOMO = -0.236461136318486  LUMO = 86.520648183145
  mo_energy =
[-1.20263538e+02 -1.22536164e+01 -6.65499708e+00 -6.65499708e+00
 -6.65499708e+00 -1.16349241e+00 -2.36461136e-01 -2.36461136e-01
 -2.36461136e-01  8.65206482e+01  6.79977974e+02  3.94914133e+03
  3.15264265e+04]
E1 = -706.5338523582196  E_coul = 198.911905207897
Extra cycle  E= -507.621947150323  delta_E= -1.14e-13  |g|= 5.95e-09  |ddm|= 1.53e-08
    CPU time for scf_cycle      0.11 sec, wall time      0.11 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 42.897031983670196
E1 = -706.5338523582196  E_coul = 198.911905207897
init E= -507.621947150323
    CPU time for initialize scf      0.07 sec, wall time      0.07 sec
  HOMO = -0.236461136141133  LUMO = 86.5206481870125
  mo_energy =
[-1.20263538e+02 -1.22536164e+01 -6.65499707e+00 -6.65499707e+00
 -6.65499707e+00 -1.16349241e+00 -2.36461136e-01 -2.36461136e-01
 -2.36461136e-01  8.65206482e+01  6.79977974e+02  3.94914133e+03
  3.15264265e+04]
E1 = -706.5338523587368  E_coul = 198.91190520841465
cycle= 1 E= -507.621947150322  delta_E= 4.55e-13  |g|= 1.16e-10  |ddm|= 2.34e-10
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -706.5338523587368  E_coul = 198.91190520841465
  HOMO = -0.236461136138653  LUMO = 86.5206481870681
  mo_energy =
[-1.20263538e+02 -1.22536164e+01 -6.65499707e+00 -6.65499707e+00
 -6.65499707e+00 -1.16349241e+00 -2.36461136e-01 -2.36461136e-01
 -2.36461136e-01  8.65206482e+01  6.79977974e+02  3.94914133e+03
  3.15264265e+04]
E1 = -706.5338523587461  E_coul = 198.91190520842366
Extra cycle  E= -507.621947150322  delta_E= -2.84e-13  |g|= 6.15e-12  |ddm|= 4.12e-12
    CPU time for scf_cycle      0.14 sec, wall time      0.15 sec
exp = [1.83549617e+04 2.23215694e+03 4.57778431e+02 1.21891370e+02
 3.76184607e+01 4.74115623e+00 3.91188864e-01 8.59867023e+00
 4.90851581e-01]
grad_E = [ 3.97500672e-06  2.79989711e-07  1.89567286e-08 -3.84729903e-08
  4.09506397e-08 -3.18377569e-06 -1.04331047e-05  1.16904877e-06
 -2.77377757e-06]
 message: Optimization terminated successfully
 success: True
  status: 0
     fun: -507.6219471503226
       x: [ 1.835e+04  2.232e+03  4.578e+02  1.219e+02  3.762e+01
            4.741e+00  3.912e-01  8.599e+00  4.909e-01]
     nit: 63
     jac: [ 3.975e-06  2.800e-07  1.896e-08 -3.847e-08  4.095e-08
           -3.184e-06 -1.043e-05  1.169e-06 -2.774e-06]
    nfev: 70
    njev: 63
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((9, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.5476253398322024e+03,6.8630785798847160e+02,1.5555024230205126e+02,4.2742815896802767e+01,4.7505784169783016e+00,3.9162204394177752e-01,8.5974230426361959e+00,4.9072756124177219e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "7s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:57:06 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  18354.9616557        1
[INPUT] 0    0    [1    /1   ]  2232.15693733        1
[INPUT] 0    0    [1    /1   ]  457.778430886        1
[INPUT] 0    0    [1    /1   ]  121.891369888        1
[INPUT] 0    0    [1    /1   ]  37.6184607146        1
[INPUT] 0    0    [1    /1   ]  4.74115622749        1
[INPUT] 0    0    [1    /1   ]  0.391188864          1
[INPUT] 1    0    [1    /1   ]  8.59867023247        1
[INPUT] 1    0    [1    /1   ]  0.490851580864       1

nuclear repulsion = 0
number of shells = 9
number of NR pGTOs = 13
number of NR cGTOs = 13
basis = {'Ar': [[0, [18354.961655666553, 1.0]], [0, [2232.1569373256953, 1.0]], [0, [457.77843088607506, 1.0]], [0, [121.89136988757589, 1.0]], [0, [37.61846071461031, 1.0]], [0, [4.741156227489762, 1.0]], [0, [0.3911888640001866, 1.0]], [1, [8.598670232469381, 1.0]], [1, [0.4908515808635091, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [18354.96165567]
bas 1, expnt(s) = [2232.15693733]
bas 2, expnt(s) = [457.77843089]
bas 3, expnt(s) = [121.89136989]
bas 4, expnt(s) = [37.61846071]
bas 5, expnt(s) = [4.74115623]
bas 6, expnt(s) = [0.39118886]
bas 7, expnt(s) = [8.59867023]
bas 8, expnt(s) = [0.49085158]
CPU time:       250.49
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  1  1  1  0 38 39  0]
 [ 0  1  1  1  0 40 41  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.83549617e+04 3.98409913e+03 2.23215694e+03 8.20462183e+02
 4.57778431e+02 2.50038289e+02 1.21891370e+02 9.26818604e+01
 3.76184607e+01 3.83765377e+01 4.74115623e+00 8.11761078e+00
 3.91188864e-01 1.24969746e+00 8.59867023e+00 4.29559679e+01
 4.90851581e-01 1.19859410e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319972346758558
cond(S) = 42.897031983670196
E1 = -689.0900180158272  E_coul = 184.9151396222424
init E= -504.174878393585
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.680904781336369  LUMO = 85.1912004669425
  mo_energy =
[-1.21642357e+02 -1.32804760e+01 -7.62162809e+00 -7.62162809e+00
 -7.62162809e+00 -1.65064353e+00 -6.80904781e-01 -6.80904781e-01
 -6.80904781e-01  8.51912005e+01  6.78618859e+02  3.94790802e+03
  3.15253669e+04]
E1 = -706.5656688084046  E_coul = 198.94414884249443
cycle= 1 E= -507.62151996591  delta_E= -3.45  |g|= 0.317  |ddm|= 0.301
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.37122
diis-c [-0.13780458  1.        ]
  HOMO = -0.236284190680761  LUMO = 86.524207491898
  mo_energy =
[-1.20254800e+02 -1.22524150e+01 -6.65313375e+00 -6.65313375e+00
 -6.65313375e+00 -1.16342716e+00 -2.36284191e-01 -2.36284191e-01
 -2.36284191e-01  8.65242075e+01  6.79988667e+02  3.94915736e+03
  3.15264460e+04]
E1 = -706.5342983904044  E_coul = 198.91235134980207
cycle= 2 E= -507.621947040602  delta_E= -0.000427  |g|= 0.00474  |ddm|= 0.0142
    CPU time for cycle= 2      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.00503165
diis-c [-2.52290038e-05 -8.01888335e-04  1.00080189e+00]
  HOMO = -0.2364590001332  LUMO = 86.5206913567289
  mo_energy =
[-1.20263428e+02 -1.22536011e+01 -6.65497091e+00 -6.65497091e+00
 -6.65497091e+00 -1.16349178e+00 -2.36459000e-01 -2.36459000e-01
 -2.36459000e-01  8.65206914e+01  6.79978086e+02  3.94914147e+03
  3.15264267e+04]
E1 = -706.5338594001555  E_coul = 198.91191224987196
cycle= 3 E= -507.621947150284  delta_E= -1.1e-07  |g|= 9.33e-05  |ddm|= 0.000201
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.000124947
diis-c [-3.69502720e-10  3.97376775e-05 -2.51963309e-02  1.02515659e+00]
  HOMO = -0.236461151562018  LUMO = 86.5206478656709
  mo_energy =
[-1.20263538e+02 -1.22536165e+01 -6.65499723e+00 -6.65499723e+00
 -6.65499723e+00 -1.16349241e+00 -2.36461152e-01 -2.36461152e-01
 -2.36461152e-01  8.65206479e+01  6.79977973e+02  3.94914133e+03
  3.15264265e+04]
E1 = -706.5338523237746  E_coul = 198.91190517345208
cycle= 4 E= -507.621947150323  delta_E= -3.9e-11  |g|= 3.5e-07  |ddm|= 3.37e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.5338523237746  E_coul = 198.91190517345208
  HOMO = -0.236461136318486  LUMO = 86.520648183145
  mo_energy =
[-1.20263538e+02 -1.22536164e+01 -6.65499708e+00 -6.65499708e+00
 -6.65499708e+00 -1.16349241e+00 -2.36461136e-01 -2.36461136e-01
 -2.36461136e-01  8.65206482e+01  6.79977974e+02  3.94914133e+03
  3.15264265e+04]
E1 = -706.5338523582196  E_coul = 198.911905207897
Extra cycle  E= -507.621947150323  delta_E= -1.14e-13  |g|= 5.95e-09  |ddm|= 1.53e-08
    CPU time for scf_cycle      0.09 sec, wall time      0.10 sec
exp = [1.83549617e+04 2.23215694e+03 4.57778431e+02 1.21891370e+02
 3.76184607e+01 4.74115623e+00 3.91188864e-01 8.59867023e+00
 4.90851581e-01]
E = -507.6219471503226
E = -507.6219471503226
exp = [1.8354961655666553e+04,2.2321569373256953e+03,4.5777843088607506e+02,1.2189136988757589e+02,3.7618460714610308e+01,4.7411562274897623e+00,3.9118886400018660e-01,8.5986702324693809e+00,4.9085158086350911e-01]
