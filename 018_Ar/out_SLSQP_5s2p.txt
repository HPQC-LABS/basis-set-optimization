#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((7, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.5820650117923668e+02,6.8360631861859034e+01,4.6647996209811691e+00,3.9711619128280629e-01,8.5710114329191196e+00,4.8957520672686806e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "5s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:39:54 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  1832.82600472        1
[INPUT] 0    0    [1    /1   ]  458.206501179        1
[INPUT] 0    0    [1    /1   ]  68.3606318619        1
[INPUT] 0    0    [1    /1   ]  4.66479962098        1
[INPUT] 0    0    [1    /1   ]  0.397116191283       1
[INPUT] 1    0    [1    /1   ]  8.57101143292        1
[INPUT] 1    0    [1    /1   ]  0.489575206727       1

nuclear repulsion = 0
number of shells = 7
number of NR pGTOs = 11
number of NR cGTOs = 11
basis = {'Ar': [[0, [1832.8260047169467, 1.0]], [0, [458.2065011792367, 1.0]], [0, [68.36063186185903, 1.0]], [0, [4.664799620981169, 1.0]], [0, [0.3971161912828063, 1.0]], [1, [8.57101143291912, 1.0]], [1, [0.48957520672686805, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [1832.82600472]
bas 1, expnt(s) = [458.20650118]
bas 2, expnt(s) = [68.36063186]
bas 3, expnt(s) = [4.66479962]
bas 4, expnt(s) = [0.39711619]
bas 5, expnt(s) = [8.57101143]
bas 6, expnt(s) = [0.48957521]
CPU time:         2.09
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]
 [ 0  1  1  1  0 36 37  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.83282600e+03 7.07711011e+02 4.58206501e+02 2.50213628e+02
 6.83606319e+01 6.00647364e+01 4.66479962e+00 8.01936109e+00
 3.97116191e-01 1.26387237e+00 8.57101143e+00 4.27833203e+01
 4.89575207e-01 1.19469945e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.310419032300395
cond(S) = 11.116299167662836
E1 = -682.1216166569542  E_coul = 184.7140206167516
init E= -497.407596040203
    CPU time for initialize scf      0.16 sec, wall time      0.16 sec
  HOMO = -0.687220875214311  LUMO = 382.417066350649
  mo_energy =
[-1.19074733e+02 -1.31779620e+01 -7.63708647e+00 -7.63708647e+00
 -7.63708647e+00 -1.64958583e+00 -6.87220875e-01 -6.87220875e-01
 -6.87220875e-01  3.82417066e+02  3.19523912e+03]
E1 = -701.208966862649  E_coul = 199.0129110927329
cycle= 1 E= -502.196055769916  delta_E= -4.79  |g|= 0.262  |ddm|= 0.312
    CPU time for cycle= 1      0.37 sec, wall time      0.37 sec
diis-norm(errvec)=0.220955
diis-c [-0.04882107  1.        ]
  HOMO = -0.234586390344549  LUMO = 383.79074111861
  mo_energy =
[-1.17710590e+02 -1.21158963e+01 -6.63698671e+00 -6.63698671e+00
 -6.63698671e+00 -1.15039684e+00 -2.34586390e-01 -2.34586390e-01
 -2.34586390e-01  3.83790741e+02  3.19633939e+03]
E1 = -701.2044078924471  E_coul = 199.0082914272497
cycle= 2 E= -502.196116465197  delta_E= -6.07e-05  |g|= 0.00121  |ddm|= 0.00157
    CPU time for cycle= 2      0.11 sec, wall time      0.11 sec
diis-norm(errvec)=0.00122222
diis-c [-1.13716102e-07 -5.34525205e-03  1.00534525e+00]
  HOMO = -0.234597413736053  LUMO = 383.788430930248
  mo_energy =
[-1.17712389e+02 -1.21160079e+01 -6.63711060e+00 -6.63711060e+00
 -6.63711060e+00 -1.15040407e+00 -2.34597414e-01 -2.34597414e-01
 -2.34597414e-01  3.83788431e+02  3.19633284e+03]
E1 = -701.2043856078903  E_coul = 199.0082691412695
cycle= 3 E= -502.196116466621  delta_E= -1.42e-09  |g|= 1.22e-06  |ddm|= 7.02e-06
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=1.78831e-06
diis-c [-1.38516797e-12  2.06509956e-05 -4.00656133e-03  1.00398591e+00]
  HOMO = -0.234597397141649  LUMO = 383.788431329494
  mo_energy =
[-1.17712388e+02 -1.21160077e+01 -6.63711046e+00 -6.63711046e+00
 -6.63711046e+00 -1.15040406e+00 -2.34597397e-01 -2.34597397e-01
 -2.34597397e-01  3.83788431e+02  3.19633284e+03]
E1 = -701.2043856154108  E_coul = 199.0082691487901
cycle= 4 E= -502.196116466621  delta_E= 1.14e-13  |g|= 3.77e-09  |ddm|= 6.48e-09
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -701.2043856154108  E_coul = 199.0082691487901
  HOMO = -0.234597397145393  LUMO = 383.788431328517
  mo_energy =
[-1.17712388e+02 -1.21160077e+01 -6.63711046e+00 -6.63711046e+00
 -6.63711046e+00 -1.15040406e+00 -2.34597397e-01 -2.34597397e-01
 -2.34597397e-01  3.83788431e+02  3.19633284e+03]
E1 = -701.20438561542  E_coul = 199.0082691487991
Extra cycle  E= -502.196116466621  delta_E= -2.27e-13  |g|= 3.02e-11  |ddm|= 1.59e-11
    CPU time for scf_cycle      0.68 sec, wall time      0.69 sec
exp = [1.83282600e+03 4.58206501e+02 6.83606319e+01 4.66479962e+00
 3.97116191e-01 8.57101143e+00 4.89575207e-01]
E = -502.196116466621
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((7, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.5820650117923668e+02,6.8360631861859034e+01,4.6647996209811691e+00,3.9711619128280629e-01,8.5710114329191196e+00,4.8957520672686806e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "5s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:39:54 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  1832.82600472        1
[INPUT] 0    0    [1    /1   ]  458.206501179        1
[INPUT] 0    0    [1    /1   ]  68.3606318619        1
[INPUT] 0    0    [1    /1   ]  4.66479962098        1
[INPUT] 0    0    [1    /1   ]  0.397116191283       1
[INPUT] 1    0    [1    /1   ]  8.57101143292        1
[INPUT] 1    0    [1    /1   ]  0.489575206727       1

nuclear repulsion = 0
number of shells = 7
number of NR pGTOs = 11
number of NR cGTOs = 11
basis = {'Ar': [[0, [1832.8260047169467, 1.0]], [0, [458.2065011792367, 1.0]], [0, [68.36063186185903, 1.0]], [0, [4.664799620981169, 1.0]], [0, [0.3971161912828063, 1.0]], [1, [8.57101143291912, 1.0]], [1, [0.48957520672686805, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [1832.82600472]
bas 1, expnt(s) = [458.20650118]
bas 2, expnt(s) = [68.36063186]
bas 3, expnt(s) = [4.66479962]
bas 4, expnt(s) = [0.39711619]
bas 5, expnt(s) = [8.57101143]
bas 6, expnt(s) = [0.48957521]
CPU time:         2.95
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]
 [ 0  1  1  1  0 36 37  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.83282600e+03 7.07711011e+02 4.58206501e+02 2.50213628e+02
 6.83606319e+01 6.00647364e+01 4.66479962e+00 8.01936109e+00
 3.97116191e-01 1.26387237e+00 8.57101143e+00 4.27833203e+01
 4.89575207e-01 1.19469945e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.310419032300395
cond(S) = 11.116299167662836
E1 = -682.1216166569542  E_coul = 184.7140206167516
init E= -497.407596040203
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.687220875214311  LUMO = 382.417066350649
  mo_energy =
[-1.19074733e+02 -1.31779620e+01 -7.63708647e+00 -7.63708647e+00
 -7.63708647e+00 -1.64958583e+00 -6.87220875e-01 -6.87220875e-01
 -6.87220875e-01  3.82417066e+02  3.19523912e+03]
E1 = -701.208966862649  E_coul = 199.0129110927329
cycle= 1 E= -502.196055769916  delta_E= -4.79  |g|= 0.262  |ddm|= 0.312
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.220955
diis-c [-0.04882107  1.        ]
  HOMO = -0.234586390344549  LUMO = 383.79074111861
  mo_energy =
[-1.17710590e+02 -1.21158963e+01 -6.63698671e+00 -6.63698671e+00
 -6.63698671e+00 -1.15039684e+00 -2.34586390e-01 -2.34586390e-01
 -2.34586390e-01  3.83790741e+02  3.19633939e+03]
E1 = -701.2044078924471  E_coul = 199.0082914272497
cycle= 2 E= -502.196116465197  delta_E= -6.07e-05  |g|= 0.00121  |ddm|= 0.00157
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00122222
diis-c [-1.13716102e-07 -5.34525205e-03  1.00534525e+00]
  HOMO = -0.234597413736053  LUMO = 383.788430930248
  mo_energy =
[-1.17712389e+02 -1.21160079e+01 -6.63711060e+00 -6.63711060e+00
 -6.63711060e+00 -1.15040407e+00 -2.34597414e-01 -2.34597414e-01
 -2.34597414e-01  3.83788431e+02  3.19633284e+03]
E1 = -701.2043856078903  E_coul = 199.0082691412695
cycle= 3 E= -502.196116466621  delta_E= -1.42e-09  |g|= 1.22e-06  |ddm|= 7.02e-06
    CPU time for cycle= 3      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=1.78831e-06
diis-c [-1.38516797e-12  2.06509956e-05 -4.00656133e-03  1.00398591e+00]
  HOMO = -0.234597397141649  LUMO = 383.788431329494
  mo_energy =
[-1.17712388e+02 -1.21160077e+01 -6.63711046e+00 -6.63711046e+00
 -6.63711046e+00 -1.15040406e+00 -2.34597397e-01 -2.34597397e-01
 -2.34597397e-01  3.83788431e+02  3.19633284e+03]
E1 = -701.2043856154108  E_coul = 199.0082691487901
cycle= 4 E= -502.196116466621  delta_E= 1.14e-13  |g|= 3.77e-09  |ddm|= 6.48e-09
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -701.2043856154108  E_coul = 199.0082691487901
  HOMO = -0.234597397145393  LUMO = 383.788431328517
  mo_energy =
[-1.17712388e+02 -1.21160077e+01 -6.63711046e+00 -6.63711046e+00
 -6.63711046e+00 -1.15040406e+00 -2.34597397e-01 -2.34597397e-01
 -2.34597397e-01  3.83788431e+02  3.19633284e+03]
E1 = -701.20438561542  E_coul = 199.0082691487991
Extra cycle  E= -502.196116466621  delta_E= -2.27e-13  |g|= 3.02e-11  |ddm|= 1.59e-11
    CPU time for scf_cycle      0.09 sec, wall time      0.10 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 11.116299167662836
E1 = -701.20438561542  E_coul = 199.0082691487991
init E= -502.196116466621
    CPU time for initialize scf      0.34 sec, wall time      0.35 sec
  HOMO = -0.234597397145316  LUMO = 383.788431328505
  mo_energy =
[-1.17712388e+02 -1.21160077e+01 -6.63711046e+00 -6.63711046e+00
 -6.63711046e+00 -1.15040406e+00 -2.34597397e-01 -2.34597397e-01
 -2.34597397e-01  3.83788431e+02  3.19633284e+03]
E1 = -701.2043856154194  E_coul = 199.00826914879875
cycle= 1 E= -502.196116466621  delta_E= 3.41e-13  |g|= 1.81e-12  |ddm|= 1.3e-13
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -701.2043856154194  E_coul = 199.00826914879875
  HOMO = -0.234597397145321  LUMO = 383.788431328505
  mo_energy =
[-1.17712388e+02 -1.21160077e+01 -6.63711046e+00 -6.63711046e+00
 -6.63711046e+00 -1.15040406e+00 -2.34597397e-01 -2.34597397e-01
 -2.34597397e-01  3.83788431e+02  3.19633284e+03]
E1 = -701.2043856154196  E_coul = 199.00826914879897
Extra cycle  E= -502.196116466621  delta_E=    0  |g|= 1.53e-12  |ddm|= 4.17e-15
    CPU time for scf_cycle      1.32 sec, wall time      1.33 sec
exp = [1.83282600e+03 4.58206501e+02 6.83606319e+01 4.66479962e+00
 3.97116191e-01 8.57101143e+00 4.89575207e-01]
grad_E = [-0.00176252  0.02934439 -0.11186475 -0.02795168 -0.01532251 -0.00207643
 -0.00065526]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((7, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.5820650117923668e+02,6.8360631861859034e+01,4.6647996209811691e+00,3.9711619128280629e-01,8.5710114329191196e+00,4.8957520672686806e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "5s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:40:01 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  1832.82776723        1
[INPUT] 0    0    [1    /1   ]  458.177156785        1
[INPUT] 0    0    [1    /1   ]  68.4724966146        1
[INPUT] 0    0    [1    /1   ]  4.69275130392        1
[INPUT] 0    0    [1    /1   ]  0.412438701646       1
[INPUT] 1    0    [1    /1   ]  8.57308785919        1
[INPUT] 1    0    [1    /1   ]  0.490230467782       1

nuclear repulsion = 0
number of shells = 7
number of NR pGTOs = 11
number of NR cGTOs = 11
basis = {'Ar': [[0, [1832.8277672328602, 1.0]], [0, [458.1771567846388, 1.0]], [0, [68.47249661457701, 1.0]], [0, [4.692751303919346, 1.0]], [0, [0.41243870164619634, 1.0]], [1, [8.57308785919143, 1.0]], [1, [0.4902304677824808, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [1832.82776723]
bas 1, expnt(s) = [458.17715678]
bas 2, expnt(s) = [68.47249661]
bas 3, expnt(s) = [4.6927513]
bas 4, expnt(s) = [0.4124387]
bas 5, expnt(s) = [8.57308786]
bas 6, expnt(s) = [0.49023047]
CPU time:         9.38
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]
 [ 0  1  1  1  0 36 37  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.83282777e+03 7.07711522e+02 4.58177157e+02 2.50201609e+02
 6.84724966e+01 6.01384384e+01 4.69275130e+00 8.05537344e+00
 4.12438702e-01 1.30027311e+00 8.57308786e+00 4.27962766e+01
 4.90230468e-01 1.19669855e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.30574372373821
cond(S) = 11.142204341137239
E1 = -682.4933571537299  E_coul = 185.03047589084102
init E= -497.462881262889
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.680083243583812  LUMO = 382.933624934566
  mo_energy =
[-1.19048456e+02 -1.31541973e+01 -7.61144048e+00 -7.61144048e+00
 -7.61144048e+00 -1.64757580e+00 -6.80083244e-01 -6.80083244e-01
 -6.80083244e-01  3.82933625e+02  3.19568742e+03]
E1 = -701.6506877995172  E_coul = 199.44262469182743
cycle= 1 E= -502.20806310769  delta_E= -4.75  |g|= 0.258  |ddm|= 0.311
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.219849
diis-c [-0.0483336  1.       ]
  HOMO = -0.224129828939256  LUMO = 384.322579360848
  mo_energy =
[-1.17669860e+02 -1.20859538e+01 -6.60500248e+00 -6.60500248e+00
 -6.60500248e+00 -1.13953752e+00 -2.24129829e-01 -2.24129829e-01
 -2.24129829e-01  3.84322579e+02  3.19681444e+03]
E1 = -701.6461701598389  E_coul = 199.4380477245033
cycle= 2 E= -502.208122435336  delta_E= -5.93e-05  |g|= 0.00121  |ddm|= 0.00155
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00122602
diis-c [-1.11037059e-07 -5.39568074e-03  1.00539568e+00]
  HOMO = -0.224140750896567  LUMO = 384.320282102103
  mo_energy =
[-1.17671645e+02 -1.20860645e+01 -6.60512416e+00 -6.60512416e+00
 -6.60512416e+00 -1.13954509e+00 -2.24140751e-01 -2.24140751e-01
 -2.24140751e-01  3.84320282e+02  3.19680792e+03]
E1 = -701.6461480573454  E_coul = 199.43802562060583
cycle= 3 E= -502.20812243674  delta_E= -1.4e-09  |g|= 1.26e-06  |ddm|= 6.96e-06
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=1.83084e-06
diis-c [-1.42258187e-12  2.16702838e-05 -4.17800014e-03  1.00415633e+00]
  HOMO = -0.224140733766017  LUMO = 384.320282567828
  mo_energy =
[-1.17671645e+02 -1.20860644e+01 -6.60512402e+00 -6.60512402e+00
 -6.60512402e+00 -1.13954508e+00 -2.24140734e-01 -2.24140734e-01
 -2.24140734e-01  3.84320283e+02  3.19680792e+03]
E1 = -701.646148065771  E_coul = 199.43802562903184
cycle= 4 E= -502.208122436739  delta_E= 4.55e-13  |g|= 3.79e-09  |ddm|= 6.85e-09
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -701.646148065771  E_coul = 199.43802562903184
  HOMO = -0.224140733770462  LUMO = 384.320282566976
  mo_energy =
[-1.17671645e+02 -1.20860644e+01 -6.60512402e+00 -6.60512402e+00
 -6.60512402e+00 -1.13954508e+00 -2.24140734e-01 -2.24140734e-01
 -2.24140734e-01  3.84320283e+02  3.19680792e+03]
E1 = -701.6461480657814  E_coul = 199.43802562904204
Extra cycle  E= -502.208122436739  delta_E= -2.27e-13  |g|= 3.01e-11  |ddm|= 1.6e-11
    CPU time for scf_cycle      0.10 sec, wall time      0.10 sec
exp = [1.83282777e+03 4.58177157e+02 6.84724966e+01 4.69275130e+00
 4.12438702e-01 8.57308786e+00 4.90230468e-01]
E = -502.20812243673936
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((7, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.5820650117923668e+02,6.8360631861859034e+01,4.6647996209811691e+00,3.9711619128280629e-01,8.5710114329191196e+00,4.8957520672686806e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "5s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:40:01 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  1832.82776723        1
[INPUT] 0    0    [1    /1   ]  458.177156785        1
[INPUT] 0    0    [1    /1   ]  68.4724966146        1
[INPUT] 0    0    [1    /1   ]  4.69275130392        1
[INPUT] 0    0    [1    /1   ]  0.412438701646       1
[INPUT] 1    0    [1    /1   ]  8.57308785919        1
[INPUT] 1    0    [1    /1   ]  0.490230467782       1

nuclear repulsion = 0
number of shells = 7
number of NR pGTOs = 11
number of NR cGTOs = 11
basis = {'Ar': [[0, [1832.8277672328602, 1.0]], [0, [458.1771567846388, 1.0]], [0, [68.47249661457701, 1.0]], [0, [4.692751303919346, 1.0]], [0, [0.41243870164619634, 1.0]], [1, [8.57308785919143, 1.0]], [1, [0.4902304677824808, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [1832.82776723]
bas 1, expnt(s) = [458.17715678]
bas 2, expnt(s) = [68.47249661]
bas 3, expnt(s) = [4.6927513]
bas 4, expnt(s) = [0.4124387]
bas 5, expnt(s) = [8.57308786]
bas 6, expnt(s) = [0.49023047]
CPU time:         9.54
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]
 [ 0  1  1  1  0 36 37  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.83282777e+03 7.07711522e+02 4.58177157e+02 2.50201609e+02
 6.84724966e+01 6.01384384e+01 4.69275130e+00 8.05537344e+00
 4.12438702e-01 1.30027311e+00 8.57308786e+00 4.27962766e+01
 4.90230468e-01 1.19669855e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.30574372373821
cond(S) = 11.142204341137239
E1 = -682.4933571537299  E_coul = 185.03047589084102
init E= -497.462881262889
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.680083243583812  LUMO = 382.933624934566
  mo_energy =
[-1.19048456e+02 -1.31541973e+01 -7.61144048e+00 -7.61144048e+00
 -7.61144048e+00 -1.64757580e+00 -6.80083244e-01 -6.80083244e-01
 -6.80083244e-01  3.82933625e+02  3.19568742e+03]
E1 = -701.6506877995172  E_coul = 199.44262469182743
cycle= 1 E= -502.20806310769  delta_E= -4.75  |g|= 0.258  |ddm|= 0.311
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.219849
diis-c [-0.0483336  1.       ]
  HOMO = -0.224129828939256  LUMO = 384.322579360848
  mo_energy =
[-1.17669860e+02 -1.20859538e+01 -6.60500248e+00 -6.60500248e+00
 -6.60500248e+00 -1.13953752e+00 -2.24129829e-01 -2.24129829e-01
 -2.24129829e-01  3.84322579e+02  3.19681444e+03]
E1 = -701.6461701598389  E_coul = 199.4380477245033
cycle= 2 E= -502.208122435336  delta_E= -5.93e-05  |g|= 0.00121  |ddm|= 0.00155
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00122602
diis-c [-1.11037059e-07 -5.39568074e-03  1.00539568e+00]
  HOMO = -0.224140750896567  LUMO = 384.320282102103
  mo_energy =
[-1.17671645e+02 -1.20860645e+01 -6.60512416e+00 -6.60512416e+00
 -6.60512416e+00 -1.13954509e+00 -2.24140751e-01 -2.24140751e-01
 -2.24140751e-01  3.84320282e+02  3.19680792e+03]
E1 = -701.6461480573454  E_coul = 199.43802562060583
cycle= 3 E= -502.20812243674  delta_E= -1.4e-09  |g|= 1.26e-06  |ddm|= 6.96e-06
    CPU time for cycle= 3      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=1.83084e-06
diis-c [-1.42258187e-12  2.16702838e-05 -4.17800014e-03  1.00415633e+00]
  HOMO = -0.224140733766017  LUMO = 384.320282567828
  mo_energy =
[-1.17671645e+02 -1.20860644e+01 -6.60512402e+00 -6.60512402e+00
 -6.60512402e+00 -1.13954508e+00 -2.24140734e-01 -2.24140734e-01
 -2.24140734e-01  3.84320283e+02  3.19680792e+03]
E1 = -701.646148065771  E_coul = 199.43802562903184
cycle= 4 E= -502.208122436739  delta_E= 4.55e-13  |g|= 3.79e-09  |ddm|= 6.85e-09
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -701.646148065771  E_coul = 199.43802562903184
  HOMO = -0.224140733770462  LUMO = 384.320282566976
  mo_energy =
[-1.17671645e+02 -1.20860644e+01 -6.60512402e+00 -6.60512402e+00
 -6.60512402e+00 -1.13954508e+00 -2.24140734e-01 -2.24140734e-01
 -2.24140734e-01  3.84320283e+02  3.19680792e+03]
E1 = -701.6461480657814  E_coul = 199.43802562904204
Extra cycle  E= -502.208122436739  delta_E= -2.27e-13  |g|= 3.01e-11  |ddm|= 1.6e-11
    CPU time for scf_cycle      0.10 sec, wall time      0.10 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 11.142204341137239
E1 = -701.6461480657814  E_coul = 199.43802562904204
init E= -502.208122436739
    CPU time for initialize scf      0.06 sec, wall time      0.06 sec
  HOMO = -0.224140733770387  LUMO = 384.320282566965
  mo_energy =
[-1.17671645e+02 -1.20860644e+01 -6.60512402e+00 -6.60512402e+00
 -6.60512402e+00 -1.13954508e+00 -2.24140734e-01 -2.24140734e-01
 -2.24140734e-01  3.84320283e+02  3.19680792e+03]
E1 = -701.6461480657813  E_coul = 199.43802562904207
cycle= 1 E= -502.208122436739  delta_E= 1.14e-13  |g|= 1.41e-12  |ddm|= 1.32e-13
    CPU time for cycle= 1      0.01 sec, wall time      0.02 sec
E1 = -701.6461480657813  E_coul = 199.43802562904207
  HOMO = -0.224140733770387  LUMO = 384.320282566965
  mo_energy =
[-1.17671645e+02 -1.20860644e+01 -6.60512402e+00 -6.60512402e+00
 -6.60512402e+00 -1.13954508e+00 -2.24140734e-01 -2.24140734e-01
 -2.24140734e-01  3.84320283e+02  3.19680792e+03]
E1 = -701.6461480657813  E_coul = 199.43802562904213
Extra cycle  E= -502.208122436739  delta_E= 1.14e-13  |g|= 1.37e-12  |ddm|= 5.01e-15
    CPU time for scf_cycle      0.13 sec, wall time      0.13 sec
exp = [1.83282777e+03 4.58177157e+02 6.84724966e+01 4.69275130e+00
 4.12438702e-01 8.57308786e+00 4.90230468e-01]
grad_E = [-0.00176217  0.02918151 -0.10908146  0.00024618  0.21891652  0.00263679
  0.06938801]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((7, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.5820650117923668e+02,6.8360631861859034e+01,4.6647996209811691e+00,3.9711619128280629e-01,8.5710114329191196e+00,4.8957520672686806e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "5s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:40:04 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  1832.8995336         1
[INPUT] 0    0    [1    /1   ]  456.982783949        1
[INPUT] 0    0    [1    /1   ]  73.019049487         1
[INPUT] 0    0    [1    /1   ]  5.74541620827        1
[INPUT] 0    0    [1    /1   ]  0.326169063106       1
[INPUT] 1    0    [1    /1   ]  8.64334744471        1
[INPUT] 1    0    [1    /1   ]  0.304549605656       1

nuclear repulsion = 0
number of shells = 7
number of NR pGTOs = 11
number of NR cGTOs = 11
basis = {'Ar': [[0, [1832.8995335962313, 1.0]], [0, [456.98278394922886, 1.0]], [0, [73.01904948699638, 1.0]], [0, [5.745416208265415, 1.0]], [0, [0.3261690631060079, 1.0]], [1, [8.643347444709107, 1.0]], [1, [0.3045496056558125, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [1832.8995336]
bas 1, expnt(s) = [456.98278395]
bas 2, expnt(s) = [73.01904949]
bas 3, expnt(s) = [5.74541621]
bas 4, expnt(s) = [0.32616906]
bas 5, expnt(s) = [8.64334744]
bas 6, expnt(s) = [0.30454961]
CPU time:        12.29
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]
 [ 0  1  1  1  0 36 37  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.83289953e+03 7.07732305e+02 4.56982784e+02 2.49712282e+02
 7.30190495e+01 6.31091246e+01 5.74541621e+00 9.37575274e+00
 3.26169063e-01 1.09042826e+00 8.64334744e+00 4.32351387e+01
 3.04549606e-01 6.60019770e-01]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.017339324563633
cond(S) = 11.761849356504388
E1 = -667.2294373666421  E_coul = 172.65524399593502
init E= -494.574193370707
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -1.03921321776184  LUMO = 399.503944531545
  mo_energy =
[-1.20025275e+02 -1.37921133e+01 -8.45138881e+00 -8.45138881e+00
 -8.45138881e+00 -2.14524981e+00 -1.03921322e+00 -1.03921322e+00
 -1.03921322e+00  3.99503945e+02  3.21027969e+03]
E1 = -690.9517143721052  E_coul = 189.8327177910607
cycle= 1 E= -501.118996581045  delta_E= -6.54  |g|= 0.157  |ddm|= 0.399
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.235554
diis-c [-0.05548579  1.        ]
  HOMO = -0.563837412124959  LUMO = 401.368057549566
  mo_energy =
[-1.18224636e+02 -1.25279785e+01 -7.22391275e+00 -7.22391275e+00
 -7.22391275e+00 -1.52728673e+00 -5.63837412e-01 -5.63837412e-01
 -5.63837412e-01  4.01368058e+02  3.21223841e+03]
E1 = -690.94912319848  E_coul = 189.8301018145121
cycle= 2 E= -501.119021383968  delta_E= -2.48e-05  |g|= 0.000939  |ddm|= 0.00084
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00153059
diis-c [-1.43429230e-07 -6.33568352e-03  1.00633568e+00]
  HOMO = -0.563839824300852  LUMO = 401.36654065136
  mo_energy =
[-1.18225715e+02 -1.25280505e+01 -7.22396372e+00 -7.22396372e+00
 -7.22396372e+00 -1.52729177e+00 -5.63839824e-01 -5.63839824e-01
 -5.63839824e-01  4.01366541e+02  3.21223384e+03]
E1 = -690.949110210547  E_coul = 189.83008882572298
cycle= 3 E= -501.119021384824  delta_E= -8.56e-10  |g|= 1.71e-06  |ddm|= 4.08e-06
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
E1 = -690.949110210547  E_coul = 189.83008882572298
  HOMO = -0.563839814279006  LUMO = 401.366541243866
  mo_energy =
[-1.18225714e+02 -1.25280503e+01 -7.22396352e+00 -7.22396352e+00
 -7.22396352e+00 -1.52729176e+00 -5.63839814e-01 -5.63839814e-01
 -5.63839814e-01  4.01366541e+02  3.21223384e+03]
E1 = -690.9491102237516  E_coul = 189.83008883892782
Extra cycle  E= -501.119021384824  delta_E= 2.27e-13  |g|= 1.33e-08  |ddm|= 9.58e-09
    CPU time for scf_cycle      0.08 sec, wall time      0.09 sec
exp = [1.83289953e+03 4.56982784e+02 7.30190495e+01 5.74541621e+00
 3.26169063e-01 8.64334744e+00 3.04549606e-01]
E = -501.1190213848238
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((7, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.5820650117923668e+02,6.8360631861859034e+01,4.6647996209811691e+00,3.9711619128280629e-01,8.5710114329191196e+00,4.8957520672686806e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "5s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:40:04 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  1832.8399847         1
[INPUT] 0    0    [1    /1   ]  457.973827445        1
[INPUT] 0    0    [1    /1   ]  69.2464991429        1
[INPUT] 0    0    [1    /1   ]  4.87195636768        1
[INPUT] 0    0    [1    /1   ]  0.397752208336       1
[INPUT] 1    0    [1    /1   ]  8.58504881035        1
[INPUT] 1    0    [1    /1   ]  0.458620265334       1

nuclear repulsion = 0
number of shells = 7
number of NR pGTOs = 11
number of NR cGTOs = 11
basis = {'Ar': [[0, [1832.8399846970037, 1.0]], [0, [457.9738274447484, 1.0]], [0, [69.24649914286498, 1.0]], [0, [4.871956367682368, 1.0]], [0, [0.39775220833614217, 1.0]], [1, [8.585048810345663, 1.0]], [1, [0.458620265333817, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [1832.8399847]
bas 1, expnt(s) = [457.97382744]
bas 2, expnt(s) = [69.24649914]
bas 3, expnt(s) = [4.87195637]
bas 4, expnt(s) = [0.39775221]
bas 5, expnt(s) = [8.58504881]
bas 6, expnt(s) = [0.45862027]
CPU time:        12.45
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]
 [ 0  1  1  1  0 36 37  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.83283998e+03 7.07715060e+02 4.57973827e+02 2.50118329e+02
 6.92464991e+01 6.06475681e+01 4.87195637e+00 8.28500103e+00
 3.97752208e-01 1.26539022e+00 8.58504881e+00 4.28709249e+01
 4.58620265e-01 1.10103454e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.33540059130862
cond(S) = 11.24299708435854
E1 = -681.4889097058857  E_coul = 183.99321630457376
init E= -497.495693401312
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.726508297138644  LUMO = 385.849390682091
  mo_energy =
[-1.19143821e+02 -1.32304783e+01 -7.67286107e+00 -7.67286107e+00
 -7.67286107e+00 -1.69054155e+00 -7.26508297e-01 -7.26508297e-01
 -7.26508297e-01  3.85849391e+02  3.19823925e+03]
E1 = -700.3551557293808  E_coul = 198.09695895971922
cycle= 1 E= -502.258196769662  delta_E= -4.76  |g|= 0.233  |ddm|= 0.283
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.21169
diis-c [-0.04481279  1.        ]
  HOMO = -0.297848238275592  LUMO = 387.259566541384
  mo_energy =
[-1.17751929e+02 -1.21810803e+01 -6.68421313e+00 -6.68421313e+00
 -6.68421313e+00 -1.20145090e+00 -2.97848238e-01 -2.97848238e-01
 -2.97848238e-01  3.87259567e+02  3.19945100e+03]
E1 = -700.3509941677962  E_coul = 198.09274723448195
cycle= 2 E= -502.258246933314  delta_E= -5.02e-05  |g|= 0.00113  |ddm|= 0.00141
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00122923
diis-c [-1.05792604e-07 -5.63133177e-03  1.00563133e+00]
  HOMO = -0.297856941081868  LUMO = 387.257410077759
  mo_energy =
[-1.17753585e+02 -1.21811845e+01 -6.68432117e+00 -6.68432117e+00
 -6.68432117e+00 -1.20145800e+00 -2.97856941e-01 -2.97856941e-01
 -2.97856941e-01  3.87257410e+02  3.19944483e+03]
E1 = -700.3509736894603  E_coul = 198.09272675490652
cycle= 3 E= -502.258246934554  delta_E= -1.24e-09  |g|= 1.38e-06  |ddm|= 6.35e-06
    CPU time for cycle= 3      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=2.00354e-06
diis-c [-1.48397687e-12  2.54368304e-05 -4.82796604e-03  1.00480253e+00]
  HOMO = -0.297856923867784  LUMO = 387.257410760948
  mo_energy =
[-1.17753584e+02 -1.21811843e+01 -6.68432100e+00 -6.68432100e+00
 -6.68432100e+00 -1.20145799e+00 -2.97856924e-01 -2.97856924e-01
 -2.97856924e-01  3.87257411e+02  3.19944483e+03]
E1 = -700.3509737010247  E_coul = 198.09272676647092
cycle= 4 E= -502.258246934554  delta_E=    0  |g|= 3.72e-09  |ddm|= 8.06e-09
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -700.3509737010247  E_coul = 198.09272676647092
  HOMO = -0.297856923875158  LUMO = 387.257410761221
  mo_energy =
[-1.17753584e+02 -1.21811843e+01 -6.68432100e+00 -6.68432100e+00
 -6.68432100e+00 -1.20145799e+00 -2.97856924e-01 -2.97856924e-01
 -2.97856924e-01  3.87257411e+02  3.19944483e+03]
E1 = -700.3509737010456  E_coul = 198.09272676649158
Extra cycle  E= -502.258246934554  delta_E= -2.84e-13  |g|= 2.83e-11  |ddm|= 1.7e-11
    CPU time for scf_cycle      0.10 sec, wall time      0.10 sec
exp = [1.83283998e+03 4.57973827e+02 6.92464991e+01 4.87195637e+00
 3.97752208e-01 8.58504881e+00 4.58620265e-01]
E = -502.25824693455405
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((7, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.5820650117923668e+02,6.8360631861859034e+01,4.6647996209811691e+00,3.9711619128280629e-01,8.5710114329191196e+00,4.8957520672686806e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "5s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:40:04 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  1832.8399847         1
[INPUT] 0    0    [1    /1   ]  457.973827445        1
[INPUT] 0    0    [1    /1   ]  69.2464991429        1
[INPUT] 0    0    [1    /1   ]  4.87195636768        1
[INPUT] 0    0    [1    /1   ]  0.397752208336       1
[INPUT] 1    0    [1    /1   ]  8.58504881035        1
[INPUT] 1    0    [1    /1   ]  0.458620265334       1

nuclear repulsion = 0
number of shells = 7
number of NR pGTOs = 11
number of NR cGTOs = 11
basis = {'Ar': [[0, [1832.8399846970037, 1.0]], [0, [457.9738274447484, 1.0]], [0, [69.24649914286498, 1.0]], [0, [4.871956367682368, 1.0]], [0, [0.39775220833614217, 1.0]], [1, [8.585048810345663, 1.0]], [1, [0.458620265333817, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [1832.8399847]
bas 1, expnt(s) = [457.97382744]
bas 2, expnt(s) = [69.24649914]
bas 3, expnt(s) = [4.87195637]
bas 4, expnt(s) = [0.39775221]
bas 5, expnt(s) = [8.58504881]
bas 6, expnt(s) = [0.45862027]
CPU time:        12.62
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]
 [ 0  1  1  1  0 36 37  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.83283998e+03 7.07715060e+02 4.57973827e+02 2.50118329e+02
 6.92464991e+01 6.06475681e+01 4.87195637e+00 8.28500103e+00
 3.97752208e-01 1.26539022e+00 8.58504881e+00 4.28709249e+01
 4.58620265e-01 1.10103454e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.33540059130862
cond(S) = 11.24299708435854
E1 = -681.4889097058857  E_coul = 183.99321630457376
init E= -497.495693401312
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.726508297138644  LUMO = 385.849390682091
  mo_energy =
[-1.19143821e+02 -1.32304783e+01 -7.67286107e+00 -7.67286107e+00
 -7.67286107e+00 -1.69054155e+00 -7.26508297e-01 -7.26508297e-01
 -7.26508297e-01  3.85849391e+02  3.19823925e+03]
E1 = -700.3551557293808  E_coul = 198.09695895971922
cycle= 1 E= -502.258196769662  delta_E= -4.76  |g|= 0.233  |ddm|= 0.283
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.21169
diis-c [-0.04481279  1.        ]
  HOMO = -0.297848238275592  LUMO = 387.259566541384
  mo_energy =
[-1.17751929e+02 -1.21810803e+01 -6.68421313e+00 -6.68421313e+00
 -6.68421313e+00 -1.20145090e+00 -2.97848238e-01 -2.97848238e-01
 -2.97848238e-01  3.87259567e+02  3.19945100e+03]
E1 = -700.3509941677962  E_coul = 198.09274723448195
cycle= 2 E= -502.258246933314  delta_E= -5.02e-05  |g|= 0.00113  |ddm|= 0.00141
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00122923
diis-c [-1.05792604e-07 -5.63133177e-03  1.00563133e+00]
  HOMO = -0.297856941081868  LUMO = 387.257410077759
  mo_energy =
[-1.17753585e+02 -1.21811845e+01 -6.68432117e+00 -6.68432117e+00
 -6.68432117e+00 -1.20145800e+00 -2.97856941e-01 -2.97856941e-01
 -2.97856941e-01  3.87257410e+02  3.19944483e+03]
E1 = -700.3509736894603  E_coul = 198.09272675490652
cycle= 3 E= -502.258246934554  delta_E= -1.24e-09  |g|= 1.38e-06  |ddm|= 6.35e-06
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=2.00354e-06
diis-c [-1.48397687e-12  2.54368304e-05 -4.82796604e-03  1.00480253e+00]
  HOMO = -0.297856923867784  LUMO = 387.257410760948
  mo_energy =
[-1.17753584e+02 -1.21811843e+01 -6.68432100e+00 -6.68432100e+00
 -6.68432100e+00 -1.20145799e+00 -2.97856924e-01 -2.97856924e-01
 -2.97856924e-01  3.87257411e+02  3.19944483e+03]
E1 = -700.3509737010247  E_coul = 198.09272676647092
cycle= 4 E= -502.258246934554  delta_E=    0  |g|= 3.72e-09  |ddm|= 8.06e-09
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -700.3509737010247  E_coul = 198.09272676647092
  HOMO = -0.297856923875158  LUMO = 387.257410761221
  mo_energy =
[-1.17753584e+02 -1.21811843e+01 -6.68432100e+00 -6.68432100e+00
 -6.68432100e+00 -1.20145799e+00 -2.97856924e-01 -2.97856924e-01
 -2.97856924e-01  3.87257411e+02  3.19944483e+03]
E1 = -700.3509737010456  E_coul = 198.09272676649158
Extra cycle  E= -502.258246934554  delta_E= -2.84e-13  |g|= 2.83e-11  |ddm|= 1.7e-11
    CPU time for scf_cycle      0.10 sec, wall time      0.10 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 11.24299708435854
E1 = -700.3509737010456  E_coul = 198.09272676649158
init E= -502.258246934554
    CPU time for initialize scf      0.05 sec, wall time      0.05 sec
  HOMO = -0.297856923875093  LUMO = 387.257410761218
  mo_energy =
[-1.17753584e+02 -1.21811843e+01 -6.68432100e+00 -6.68432100e+00
 -6.68432100e+00 -1.20145799e+00 -2.97856924e-01 -2.97856924e-01
 -2.97856924e-01  3.87257411e+02  3.19944483e+03]
E1 = -700.3509737010459  E_coul = 198.0927267664918
cycle= 1 E= -502.258246934554  delta_E=    0  |g|= 1.14e-12  |ddm|= 1.3e-13
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -700.3509737010459  E_coul = 198.0927267664918
  HOMO = -0.29785692387509  LUMO = 387.257410761217
  mo_energy =
[-1.17753584e+02 -1.21811843e+01 -6.68432100e+00 -6.68432100e+00
 -6.68432100e+00 -1.20145799e+00 -2.97856924e-01 -2.97856924e-01
 -2.97856924e-01  3.87257411e+02  3.19944483e+03]
E1 = -700.3509737010454  E_coul = 198.09272676649172
Extra cycle  E= -502.258246934554  delta_E= 3.98e-13  |g|= 1.78e-12  |ddm|= 5.59e-15
    CPU time for scf_cycle      0.12 sec, wall time      0.12 sec
exp = [1.83283998e+03 4.57973827e+02 6.92464991e+01 4.87195637e+00
 3.97752208e-01 8.58504881e+00 4.58620265e-01]
grad_E = [-0.00175608  0.02797636 -0.08784147  0.16747375 -0.11494596  0.05597685
 -1.17529292]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((7, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.5820650117923668e+02,6.8360631861859034e+01,4.6647996209811691e+00,3.9711619128280629e-01,8.5710114329191196e+00,4.8957520672686806e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "5s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:40:07 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  1833.00053605        1
[INPUT] 0    0    [1    /1   ]  455.303520406        1
[INPUT] 0    0    [1    /1   ]  79.3869480246        1
[INPUT] 0    0    [1    /1   ]  6.95773787158        1
[INPUT] 0    0    [1    /1   ]  1.00000008274e-09      1
[INPUT] 1    0    [1    /1   ]  8.6719767647         1
[INPUT] 1    0    [1    /1   ]  1.02529903698        1

nuclear repulsion = 0
number of shells = 7
number of NR pGTOs = 11
number of NR cGTOs = 11
basis = {'Ar': [[0, [1833.0005360549828, 1.0]], [0, [455.30352040552765, 1.0]], [0, [79.38694802455616, 1.0]], [0, [6.957737871575416, 1.0]], [0, [1.000000082740371e-09, 1.0]], [1, [8.671976764695001, 1.0]], [1, [1.0252990369770274, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [1833.00053605]
bas 1, expnt(s) = [455.30352041]
bas 2, expnt(s) = [79.38694802]
bas 3, expnt(s) = [6.95773787]
bas 4, expnt(s) = [1.00000008e-09]
bas 5, expnt(s) = [8.67197676]
bas 6, expnt(s) = [1.02529904]
CPU time:        15.43
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]
 [ 0  1  1  1  0 36 37  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.83300054e+03 7.07761555e+02 4.55303520e+02 2.49023757e+02
 7.93869480e+01 6.71934366e+01 6.95773787e+00 1.08234589e+01
 1.00000008e-09 4.49277895e-07 8.67197676e+00 4.34142222e+01
 1.02529904e+00 3.00986890e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 13.710333248366071
cond(S) = 12.60692034566441
E1 = -644.294326486676  E_coul = 161.60849059711205
init E= -482.685835889564
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.000216466462629517  LUMO = 421.731170109692
  mo_energy =
[-1.20527940e+02 -1.30759444e+01 -9.64676099e+00 -9.64676099e+00
 -9.64676099e+00 -1.55903104e+00 -1.55903104e+00 -1.55903104e+00
 -2.16466463e-04  4.21731170e+02  3.23063386e+03]
E1 = -695.4688421453134  E_coul = 201.7280957191331
cycle= 1 E= -493.74074642618  delta_E= -11.1  |g|= 0.22  |ddm|= 2.51
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.339395
diis-c [-0.11518877  1.        ]
  HOMO = 0.26745302649428  LUMO = 425.954487387324
  mo_energy =
[-1.16472071e+02 -1.00325913e+01 -6.76798828e+00 -6.76798828e+00
 -6.76798828e+00 -6.52413213e-05  2.67453026e-01  2.67453026e-01
  2.67453026e-01  4.25954487e+02  3.23536026e+03]
E1 = -695.4674029498557  E_coul = 201.72664127151606
cycle= 2 E= -493.74076167834  delta_E= -1.53e-05  |g|= 0.000988  |ddm|= 0.000387
    CPU time for cycle= 2      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.00177519
diis-c [-1.78791996e-07 -5.10586868e-03  1.00510587e+00]
  HOMO = 0.267449122409736  LUMO = 425.953569903383
  mo_energy =
[-1.16472710e+02 -1.00326366e+01 -6.76799976e+00 -6.76799976e+00
 -6.76799976e+00 -6.52413213e-05  2.67449122e-01  2.67449122e-01
  2.67449122e-01  4.25953570e+02  3.23535716e+03]
E1 = -695.4673948548627  E_coul = 201.72663317599412
cycle= 3 E= -493.740761678869  delta_E= -5.29e-10  |g|= 2.29e-06  |ddm|= 2.54e-06
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
E1 = -695.4673948548627  E_coul = 201.72663317599412
  HOMO = 0.26744913280099  LUMO = 425.95356865486
  mo_energy =
[-1.16472711e+02 -1.00326366e+01 -6.76799972e+00 -6.76799972e+00
 -6.76799972e+00 -6.52413213e-05  2.67449133e-01  2.67449133e-01
  2.67449133e-01  4.25953569e+02  3.23535716e+03]
E1 = -695.4673948501505  E_coul = 201.72663317128226
Extra cycle  E= -493.740761678868  delta_E= 3.41e-13  |g|= 1.77e-08  |ddm|= 7.53e-09
    CPU time for scf_cycle      0.08 sec, wall time      0.08 sec
exp = [1.83300054e+03 4.55303520e+02 7.93869480e+01 6.95773787e+00
 1.00000008e-09 8.67197676e+00 1.02529904e+00]
E = -493.74076167886824
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((7, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.5820650117923668e+02,6.8360631861859034e+01,4.6647996209811691e+00,3.9711619128280629e-01,8.5710114329191196e+00,4.8957520672686806e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "5s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:40:07 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  1832.85603983        1
[INPUT] 0    0    [1    /1   ]  457.706796741        1
[INPUT] 0    0    [1    /1   ]  70.260544031         1
[INPUT] 0    0    [1    /1   ]  5.08053451807        1
[INPUT] 0    0    [1    /1   ]  0.357976987603       1
[INPUT] 1    0    [1    /1   ]  8.59374160578        1
[INPUT] 1    0    [1    /1   ]  0.515288142498       1

nuclear repulsion = 0
number of shells = 7
number of NR pGTOs = 11
number of NR cGTOs = 11
basis = {'Ar': [[0, [1832.8560398328016, 1.0]], [0, [457.7067967408263, 1.0]], [0, [70.2605440310341, 1.0]], [0, [5.080534518071673, 1.0]], [0, [0.35797698760252794, 1.0]], [1, [8.593741605780597, 1.0]], [1, [0.515288142498138, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [1832.85603983]
bas 1, expnt(s) = [457.70679674]
bas 2, expnt(s) = [70.26054403]
bas 3, expnt(s) = [5.08053452]
bas 4, expnt(s) = [0.35797699]
bas 5, expnt(s) = [8.59374161]
bas 6, expnt(s) = [0.51528814]
CPU time:        15.60
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]
 [ 0  1  1  1  0 36 37  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.83285604e+03 7.07719709e+02 4.57706797e+02 2.50008944e+02
 7.02605440e+01 6.13124479e+01 5.08053452e+00 8.54962525e+00
 3.57976988e-01 1.16924725e+00 8.59374161e+00 4.29251930e+01
 5.15288142e-01 1.27364114e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.26115782518155
cond(S) = 11.360053371449858
E1 = -683.2142309983496  E_coul = 185.56915367543826
init E= -497.645077322911
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.680565200680691  LUMO = 389.755205050652
  mo_energy =
[-1.19016867e+02 -1.30572858e+01 -7.58426420e+00 -7.58426420e+00
 -7.58426420e+00 -1.63869086e+00 -6.80565201e-01 -6.80565201e-01
 -6.80565201e-01  3.89755205e+02  3.20172235e+03]
E1 = -703.2650275065264  E_coul = 200.98869076629947
cycle= 1 E= -502.276336740227  delta_E= -4.63  |g|= 0.207  |ddm|= 0.318
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.209336
diis-c [-0.04382149  1.        ]
  HOMO = -0.186896213174603  LUMO = 391.312666600606
  mo_energy =
[-1.17489470e+02 -1.19241134e+01 -6.51786412e+00 -6.51786412e+00
 -6.51786412e+00 -1.11597981e+00 -1.86896213e-01 -1.86896213e-01
 -1.86896213e-01  3.91312667e+02  3.20315820e+03]
E1 = -703.2612172919287  E_coul = 200.98483811471618
cycle= 2 E= -502.276379177213  delta_E= -4.24e-05  |g|= 0.00105  |ddm|= 0.00127
    CPU time for cycle= 2      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.00124955
diis-c [-1.04286053e-07 -5.79979662e-03  1.00579980e+00]
  HOMO = -0.186906023112525  LUMO = 391.31066891572
  mo_energy =
[-1.17490993e+02 -1.19242120e+01 -6.51795765e+00 -6.51795765e+00
 -6.51795765e+00 -1.11598615e+00 -1.86906023e-01 -1.86906023e-01
 -1.86906023e-01  3.91310669e+02  3.20315243e+03]
E1 = -703.2611984812439  E_coul = 200.98481930294415
cycle= 3 E= -502.2763791783  delta_E= -1.09e-09  |g|= 1.42e-06  |ddm|= 5.76e-06
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=2.04524e-06
diis-c [-1.41679470e-12  2.57470303e-05 -4.91733189e-03  1.00489158e+00]
  HOMO = -0.186906000807209  LUMO = 391.310669663923
  mo_energy =
[-1.17490991e+02 -1.19242119e+01 -6.51795748e+00 -6.51795748e+00
 -6.51795748e+00 -1.11598614e+00 -1.86906001e-01 -1.86906001e-01
 -1.86906001e-01  3.91310670e+02  3.20315243e+03]
E1 = -703.2611984940562  E_coul = 200.98481931575665
cycle= 4 E= -502.2763791783  delta_E= 2.27e-13  |g|= 3.84e-09  |ddm|= 8.58e-09
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -703.2611984940562  E_coul = 200.98481931575665
  HOMO = -0.186906000809885  LUMO = 391.310669665694
  mo_energy =
[-1.17490991e+02 -1.19242119e+01 -6.51795748e+00 -6.51795748e+00
 -6.51795748e+00 -1.11598614e+00 -1.86906001e-01 -1.86906001e-01
 -1.86906001e-01  3.91310670e+02  3.20315243e+03]
E1 = -703.2611984940921  E_coul = 200.98481931579255
Extra cycle  E= -502.2763791783  delta_E= -5.68e-14  |g|= 2.75e-11  |ddm|= 1.99e-11
    CPU time for scf_cycle      0.10 sec, wall time      0.10 sec
exp = [1.83285604e+03 4.57706797e+02 7.02605440e+01 5.08053452e+00
 3.57976988e-01 8.59374161e+00 5.15288142e-01]
E = -502.2763791782996
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((7, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.5820650117923668e+02,6.8360631861859034e+01,4.6647996209811691e+00,3.9711619128280629e-01,8.5710114329191196e+00,4.8957520672686806e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "5s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:40:07 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  1832.85603983        1
[INPUT] 0    0    [1    /1   ]  457.706796741        1
[INPUT] 0    0    [1    /1   ]  70.260544031         1
[INPUT] 0    0    [1    /1   ]  5.08053451807        1
[INPUT] 0    0    [1    /1   ]  0.357976987603       1
[INPUT] 1    0    [1    /1   ]  8.59374160578        1
[INPUT] 1    0    [1    /1   ]  0.515288142498       1

nuclear repulsion = 0
number of shells = 7
number of NR pGTOs = 11
number of NR cGTOs = 11
basis = {'Ar': [[0, [1832.8560398328016, 1.0]], [0, [457.7067967408263, 1.0]], [0, [70.2605440310341, 1.0]], [0, [5.080534518071673, 1.0]], [0, [0.35797698760252794, 1.0]], [1, [8.593741605780597, 1.0]], [1, [0.515288142498138, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [1832.85603983]
bas 1, expnt(s) = [457.70679674]
bas 2, expnt(s) = [70.26054403]
bas 3, expnt(s) = [5.08053452]
bas 4, expnt(s) = [0.35797699]
bas 5, expnt(s) = [8.59374161]
bas 6, expnt(s) = [0.51528814]
CPU time:        15.78
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]
 [ 0  1  1  1  0 36 37  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.83285604e+03 7.07719709e+02 4.57706797e+02 2.50008944e+02
 7.02605440e+01 6.13124479e+01 5.08053452e+00 8.54962525e+00
 3.57976988e-01 1.16924725e+00 8.59374161e+00 4.29251930e+01
 5.15288142e-01 1.27364114e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.26115782518155
cond(S) = 11.360053371449858
E1 = -683.2142309983496  E_coul = 185.56915367543826
init E= -497.645077322911
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.680565200680691  LUMO = 389.755205050652
  mo_energy =
[-1.19016867e+02 -1.30572858e+01 -7.58426420e+00 -7.58426420e+00
 -7.58426420e+00 -1.63869086e+00 -6.80565201e-01 -6.80565201e-01
 -6.80565201e-01  3.89755205e+02  3.20172235e+03]
E1 = -703.2650275065264  E_coul = 200.98869076629947
cycle= 1 E= -502.276336740227  delta_E= -4.63  |g|= 0.207  |ddm|= 0.318
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.209336
diis-c [-0.04382149  1.        ]
  HOMO = -0.186896213174603  LUMO = 391.312666600606
  mo_energy =
[-1.17489470e+02 -1.19241134e+01 -6.51786412e+00 -6.51786412e+00
 -6.51786412e+00 -1.11597981e+00 -1.86896213e-01 -1.86896213e-01
 -1.86896213e-01  3.91312667e+02  3.20315820e+03]
E1 = -703.2612172919287  E_coul = 200.98483811471618
cycle= 2 E= -502.276379177213  delta_E= -4.24e-05  |g|= 0.00105  |ddm|= 0.00127
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00124955
diis-c [-1.04286053e-07 -5.79979662e-03  1.00579980e+00]
  HOMO = -0.186906023112525  LUMO = 391.31066891572
  mo_energy =
[-1.17490993e+02 -1.19242120e+01 -6.51795765e+00 -6.51795765e+00
 -6.51795765e+00 -1.11598615e+00 -1.86906023e-01 -1.86906023e-01
 -1.86906023e-01  3.91310669e+02  3.20315243e+03]
E1 = -703.2611984812439  E_coul = 200.98481930294415
cycle= 3 E= -502.2763791783  delta_E= -1.09e-09  |g|= 1.42e-06  |ddm|= 5.76e-06
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=2.04524e-06
diis-c [-1.41679470e-12  2.57470303e-05 -4.91733189e-03  1.00489158e+00]
  HOMO = -0.186906000807209  LUMO = 391.310669663923
  mo_energy =
[-1.17490991e+02 -1.19242119e+01 -6.51795748e+00 -6.51795748e+00
 -6.51795748e+00 -1.11598614e+00 -1.86906001e-01 -1.86906001e-01
 -1.86906001e-01  3.91310670e+02  3.20315243e+03]
E1 = -703.2611984940562  E_coul = 200.98481931575665
cycle= 4 E= -502.2763791783  delta_E= 2.27e-13  |g|= 3.84e-09  |ddm|= 8.58e-09
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -703.2611984940562  E_coul = 200.98481931575665
  HOMO = -0.186906000809885  LUMO = 391.310669665694
  mo_energy =
[-1.17490991e+02 -1.19242119e+01 -6.51795748e+00 -6.51795748e+00
 -6.51795748e+00 -1.11598614e+00 -1.86906001e-01 -1.86906001e-01
 -1.86906001e-01  3.91310670e+02  3.20315243e+03]
E1 = -703.2611984940921  E_coul = 200.98481931579255
Extra cycle  E= -502.2763791783  delta_E= -5.68e-14  |g|= 2.75e-11  |ddm|= 1.99e-11
    CPU time for scf_cycle      0.10 sec, wall time      0.10 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 11.360053371449858
E1 = -703.2611984940921  E_coul = 200.98481931579255
init E= -502.2763791783
    CPU time for initialize scf      0.05 sec, wall time      0.05 sec
  HOMO = -0.186906000809772  LUMO = 391.310669665699
  mo_energy =
[-1.17490991e+02 -1.19242119e+01 -6.51795748e+00 -6.51795748e+00
 -6.51795748e+00 -1.11598614e+00 -1.86906001e-01 -1.86906001e-01
 -1.86906001e-01  3.91310670e+02  3.20315243e+03]
E1 = -703.2611984940921  E_coul = 200.98481931579263
cycle= 1 E= -502.2763791783  delta_E= 5.68e-14  |g|= 1.18e-12  |ddm|= 1.36e-13
    CPU time for cycle= 1      0.02 sec, wall time      0.02 sec
E1 = -703.2611984940921  E_coul = 200.98481931579263
  HOMO = -0.186906000809774  LUMO = 391.310669665699
  mo_energy =
[-1.17490991e+02 -1.19242119e+01 -6.51795748e+00 -6.51795748e+00
 -6.51795748e+00 -1.11598614e+00 -1.86906001e-01 -1.86906001e-01
 -1.86906001e-01  3.91310670e+02  3.20315243e+03]
E1 = -703.2611984940925  E_coul = 200.98481931579272
Extra cycle  E= -502.2763791783  delta_E= -2.27e-13  |g|= 1.39e-12  |ddm|= 4.35e-15
    CPU time for scf_cycle      0.12 sec, wall time      0.13 sec
exp = [1.83285604e+03 4.57706797e+02 7.02605440e+01 5.08053452e+00
 3.57976988e-01 8.59374161e+00 5.15288142e-01]
grad_E = [-0.00174537  0.02639391 -0.06007673  0.36792384 -0.68276808  0.02127382
  0.86273221]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((7, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.5820650117923668e+02,6.8360631861859034e+01,4.6647996209811691e+00,3.9711619128280629e-01,8.5710114329191196e+00,4.8957520672686806e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "5s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:40:10 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  1832.87228504        1
[INPUT] 0    0    [1    /1   ]  457.438981791        1
[INPUT] 0    0    [1    /1   ]  71.2418740499        1
[INPUT] 0    0    [1    /1   ]  4.9279400712         1
[INPUT] 0    0    [1    /1   ]  0.418425292481       1
[INPUT] 1    0    [1    /1   ]  8.55558335749        1
[INPUT] 1    0    [1    /1   ]  0.491216382673       1

nuclear repulsion = 0
number of shells = 7
number of NR pGTOs = 11
number of NR cGTOs = 11
basis = {'Ar': [[0, [1832.8722850350637, 1.0]], [0, [457.43898179087455, 1.0]], [0, [71.24187404994181, 1.0]], [0, [4.9279400711992025, 1.0]], [0, [0.41842529248100846, 1.0]], [1, [8.555583357492251, 1.0]], [1, [0.49121638267346235, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [1832.87228504]
bas 1, expnt(s) = [457.43898179]
bas 2, expnt(s) = [71.24187405]
bas 3, expnt(s) = [4.92794007]
bas 4, expnt(s) = [0.41842529]
bas 5, expnt(s) = [8.55558336]
bas 6, expnt(s) = [0.49121638]
CPU time:        18.60
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]
 [ 0  1  1  1  0 36 37  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.83287229e+03 7.07724414e+02 4.57438982e+02 2.49899221e+02
 7.12418740e+01 6.19535969e+01 4.92794007e+00 8.35630124e+00
 4.18425292e-01 1.31440278e+00 8.55558336e+00 4.26870779e+01
 4.91216383e-01 1.19970770e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.294196595719924
cond(S) = 11.451541804913303
E1 = -683.2908043838705  E_coul = 185.50489145636817
init E= -497.785912927502
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.678050140060522  LUMO = 392.291216372541
  mo_energy =
[-1.19064826e+02 -1.31185229e+01 -7.57372640e+00 -7.57372640e+00
 -7.57372640e+00 -1.65189153e+00 -6.78050140e-01 -6.78050140e-01
 -6.78050140e-01  3.92291216e+02  3.20409189e+03]
E1 = -702.854113870699  E_coul = 200.45703542726497
cycle= 1 E= -502.397078443434  delta_E= -4.61  |g|= 0.192  |ddm|= 0.296
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.199463
diis-c [-0.03978547  1.        ]
  HOMO = -0.212531557428853  LUMO = 393.835421456507
  mo_energy =
[-1.17564821e+02 -1.20203809e+01 -6.53976791e+00 -6.53976791e+00
 -6.53976791e+00 -1.12794113e+00 -2.12531557e-01 -2.12531557e-01
 -2.12531557e-01  3.93835421e+02  3.20555252e+03]
E1 = -702.850399803867  E_coul = 200.45328234041142
cycle= 2 E= -502.397117463456  delta_E= -3.9e-05  |g|= 0.000947  |ddm|= 0.00127
    CPU time for cycle= 2      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.00111968
diis-c [-5.30549831e-08 -5.52373294e-03  1.00552373e+00]
  HOMO = -0.212540769281188  LUMO = 393.833574317417
  mo_energy =
[-1.17566282e+02 -1.20204773e+01 -6.53986603e+00 -6.53986603e+00
 -6.53986603e+00 -1.12794820e+00 -2.12540769e-01 -2.12540769e-01
 -2.12540769e-01  3.93833574e+02  3.20554718e+03]
E1 = -702.8503814926958  E_coul = 200.45326402829286
cycle= 3 E= -502.397117464403  delta_E= -9.47e-10  |g|= 9.54e-07  |ddm|= 5.73e-06
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
E1 = -702.8503814926958  E_coul = 200.45326402829286
  HOMO = -0.212540753296574  LUMO = 393.833574765764
  mo_energy =
[-1.17566281e+02 -1.20204772e+01 -6.53986590e+00 -6.53986590e+00
 -6.53986590e+00 -1.12794819e+00 -2.12540753e-01 -2.12540753e-01
 -2.12540753e-01  3.93833575e+02  3.20554718e+03]
E1 = -702.85038150056  E_coul = 200.45326403615746
Extra cycle  E= -502.397117464403  delta_E= 2.84e-13  |g|= 6.71e-09  |ddm|= 6.13e-09
    CPU time for scf_cycle      0.08 sec, wall time      0.08 sec
exp = [1.83287229e+03 4.57438982e+02 7.12418740e+01 4.92794007e+00
 4.18425292e-01 8.55558336e+00 4.91216383e-01]
E = -502.3971174644026
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((7, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.5820650117923668e+02,6.8360631861859034e+01,4.6647996209811691e+00,3.9711619128280629e-01,8.5710114329191196e+00,4.8957520672686806e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "5s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:40:10 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  1832.87228504        1
[INPUT] 0    0    [1    /1   ]  457.438981791        1
[INPUT] 0    0    [1    /1   ]  71.2418740499        1
[INPUT] 0    0    [1    /1   ]  4.9279400712         1
[INPUT] 0    0    [1    /1   ]  0.418425292481       1
[INPUT] 1    0    [1    /1   ]  8.55558335749        1
[INPUT] 1    0    [1    /1   ]  0.491216382673       1

nuclear repulsion = 0
number of shells = 7
number of NR pGTOs = 11
number of NR cGTOs = 11
basis = {'Ar': [[0, [1832.8722850350637, 1.0]], [0, [457.43898179087455, 1.0]], [0, [71.24187404994181, 1.0]], [0, [4.9279400711992025, 1.0]], [0, [0.41842529248100846, 1.0]], [1, [8.555583357492251, 1.0]], [1, [0.49121638267346235, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [1832.87228504]
bas 1, expnt(s) = [457.43898179]
bas 2, expnt(s) = [71.24187405]
bas 3, expnt(s) = [4.92794007]
bas 4, expnt(s) = [0.41842529]
bas 5, expnt(s) = [8.55558336]
bas 6, expnt(s) = [0.49121638]
CPU time:        18.79
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]
 [ 0  1  1  1  0 36 37  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.83287229e+03 7.07724414e+02 4.57438982e+02 2.49899221e+02
 7.12418740e+01 6.19535969e+01 4.92794007e+00 8.35630124e+00
 4.18425292e-01 1.31440278e+00 8.55558336e+00 4.26870779e+01
 4.91216383e-01 1.19970770e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.294196595719924
cond(S) = 11.451541804913303
E1 = -683.2908043838705  E_coul = 185.50489145636817
init E= -497.785912927502
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.678050140060522  LUMO = 392.291216372541
  mo_energy =
[-1.19064826e+02 -1.31185229e+01 -7.57372640e+00 -7.57372640e+00
 -7.57372640e+00 -1.65189153e+00 -6.78050140e-01 -6.78050140e-01
 -6.78050140e-01  3.92291216e+02  3.20409189e+03]
E1 = -702.854113870699  E_coul = 200.45703542726497
cycle= 1 E= -502.397078443434  delta_E= -4.61  |g|= 0.192  |ddm|= 0.296
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.199463
diis-c [-0.03978547  1.        ]
  HOMO = -0.212531557428853  LUMO = 393.835421456507
  mo_energy =
[-1.17564821e+02 -1.20203809e+01 -6.53976791e+00 -6.53976791e+00
 -6.53976791e+00 -1.12794113e+00 -2.12531557e-01 -2.12531557e-01
 -2.12531557e-01  3.93835421e+02  3.20555252e+03]
E1 = -702.850399803867  E_coul = 200.45328234041142
cycle= 2 E= -502.397117463456  delta_E= -3.9e-05  |g|= 0.000947  |ddm|= 0.00127
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00111968
diis-c [-5.30549831e-08 -5.52373294e-03  1.00552373e+00]
  HOMO = -0.212540769281188  LUMO = 393.833574317417
  mo_energy =
[-1.17566282e+02 -1.20204773e+01 -6.53986603e+00 -6.53986603e+00
 -6.53986603e+00 -1.12794820e+00 -2.12540769e-01 -2.12540769e-01
 -2.12540769e-01  3.93833574e+02  3.20554718e+03]
E1 = -702.8503814926958  E_coul = 200.45326402829286
cycle= 3 E= -502.397117464403  delta_E= -9.47e-10  |g|= 9.54e-07  |ddm|= 5.73e-06
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
E1 = -702.8503814926958  E_coul = 200.45326402829286
  HOMO = -0.212540753296574  LUMO = 393.833574765764
  mo_energy =
[-1.17566281e+02 -1.20204772e+01 -6.53986590e+00 -6.53986590e+00
 -6.53986590e+00 -1.12794819e+00 -2.12540753e-01 -2.12540753e-01
 -2.12540753e-01  3.93833575e+02  3.20554718e+03]
E1 = -702.85038150056  E_coul = 200.45326403615746
Extra cycle  E= -502.397117464403  delta_E= 2.84e-13  |g|= 6.71e-09  |ddm|= 6.13e-09
    CPU time for scf_cycle      0.08 sec, wall time      0.08 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 11.451541804913303
E1 = -702.85038150056  E_coul = 200.45326403615746
init E= -502.397117464403
    CPU time for initialize scf      0.05 sec, wall time      0.05 sec
  HOMO = -0.212540753243447  LUMO = 393.833574765429
  mo_energy =
[-1.17566281e+02 -1.20204772e+01 -6.53986590e+00 -6.53986590e+00
 -6.53986590e+00 -1.12794819e+00 -2.12540753e-01 -2.12540753e-01
 -2.12540753e-01  3.93833575e+02  3.20554718e+03]
E1 = -702.850381500586  E_coul = 200.45326403618378
cycle= 1 E= -502.397117464402  delta_E= 3.98e-13  |g|= 5.5e-11  |ddm|= 3.38e-11
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -702.850381500586  E_coul = 200.45326403618378
  HOMO = -0.212540753243206  LUMO = 393.833574765411
  mo_energy =
[-1.17566281e+02 -1.20204772e+01 -6.53986590e+00 -6.53986590e+00
 -6.53986590e+00 -1.12794819e+00 -2.12540753e-01 -2.12540753e-01
 -2.12540753e-01  3.93833575e+02  3.20554718e+03]
E1 = -702.8503815005868  E_coul = 200.45326403618407
Extra cycle  E= -502.397117464403  delta_E= -5.12e-13  |g|= 8e-13  |ddm|= 2.46e-13
    CPU time for scf_cycle      0.13 sec, wall time      0.13 sec
exp = [1.83287229e+03 4.57438982e+02 7.12418740e+01 4.92794007e+00
 4.18425292e-01 8.55558336e+00 4.91216383e-01]
grad_E = [-0.00172632  0.02475543 -0.0328792   0.20559458  0.26298328  0.0110213
  0.18038681]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((7, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.5820650117923668e+02,6.8360631861859034e+01,4.6647996209811691e+00,3.9711619128280629e-01,8.5710114329191196e+00,4.8957520672686806e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "5s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:40:13 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  1832.8893214         1
[INPUT] 0    0    [1    /1   ]  457.161821264        1
[INPUT] 0    0    [1    /1   ]  72.1986061256        1
[INPUT] 0    0    [1    /1   ]  4.76360481658        1
[INPUT] 0    0    [1    /1   ]  0.417255770129       1
[INPUT] 1    0    [1    /1   ]  8.53954636809        1
[INPUT] 1    0    [1    /1   ]  0.481028301954       1

nuclear repulsion = 0
number of shells = 7
number of NR pGTOs = 11
number of NR cGTOs = 11
basis = {'Ar': [[0, [1832.8893214045063, 1.0]], [0, [457.16182126392505, 1.0]], [0, [72.19860612558936, 1.0]], [0, [4.763604816579524, 1.0]], [0, [0.4172557701291025, 1.0]], [1, [8.53954636808623, 1.0]], [1, [0.48102830195377166, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [1832.8893214]
bas 1, expnt(s) = [457.16182126]
bas 2, expnt(s) = [72.19860613]
bas 3, expnt(s) = [4.76360482]
bas 4, expnt(s) = [0.41725577]
bas 5, expnt(s) = [8.53954637]
bas 6, expnt(s) = [0.4810283]
CPU time:        21.53
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]
 [ 0  1  1  1  0 36 37  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.83288932e+03 7.07729348e+02 4.57161821e+02 2.49785653e+02
 7.21986061e+01 6.25765526e+01 4.76360482e+00 8.14642040e+00
 4.17255770e-01 1.31164645e+00 8.53954637e+00 4.25870830e+01
 4.81028302e-01 1.16868556e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.310671188388593
cond(S) = 11.503160277619571
E1 = -682.5789612733528  E_coul = 184.8091030131035
init E= -497.769858260249
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.691197361984712  LUMO = 394.489731557031
  mo_energy =
[-1.19137995e+02 -1.32051428e+01 -7.62510038e+00 -7.62510038e+00
 -7.62510038e+00 -1.66334859e+00 -6.91197362e-01 -6.91197362e-01
 -6.91197362e-01  3.94489732e+02  3.20616473e+03]
E1 = -701.8941671732581  E_coul = 199.45229131143128
cycle= 1 E= -502.441875861827  delta_E= -4.67  |g|= 0.185  |ddm|= 0.286
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.195039
diis-c [-0.03804008  1.        ]
  HOMO = -0.240018834345908  LUMO = 396.028161910036
  mo_energy =
[-1.17658982e+02 -1.21274379e+01 -6.61153202e+00 -6.61153202e+00
 -6.61153202e+00 -1.15373829e+00 -2.40018834e-01 -2.40018834e-01
 -2.40018834e-01  3.96028162e+02  3.20764830e+03]
E1 = -701.8905385516251  E_coul = 199.44862476301753
cycle= 2 E= -502.441913788608  delta_E= -3.79e-05  |g|= 0.000885  |ddm|= 0.00128
    CPU time for cycle= 2      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.00103199
diis-c [-4.88778830e-08 -5.19524204e-03  1.00519524e+00]
  HOMO = -0.240028011973633  LUMO = 396.0264712046
  mo_energy =
[-1.17660383e+02 -1.21275332e+01 -6.61163634e+00 -6.61163634e+00
 -6.61163634e+00 -1.15374487e+00 -2.40028012e-01 -2.40028012e-01
 -2.40028012e-01  3.96026471e+02  3.20764341e+03]
E1 = -701.8905207758486  E_coul = 199.4486069863588
cycle= 3 E= -502.44191378949  delta_E= -8.82e-10  |g|= 4.82e-07  |ddm|= 5.81e-06
    CPU time for cycle= 3      0.01 sec, wall time      0.02 sec
E1 = -701.8905207758486  E_coul = 199.4486069863588
  HOMO = -0.240028001070031  LUMO = 396.026471409427
  mo_energy =
[-1.17660383e+02 -1.21275331e+01 -6.61163627e+00 -6.61163627e+00
 -6.61163627e+00 -1.15374487e+00 -2.40028001e-01 -2.40028001e-01
 -2.40028001e-01  3.96026471e+02  3.20764341e+03]
E1 = -701.8905207786759  E_coul = 199.44860698918623
Extra cycle  E= -502.44191378949  delta_E= 1.71e-13  |g|= 2.35e-09  |ddm|= 3.3e-09
    CPU time for scf_cycle      0.08 sec, wall time      0.08 sec
exp = [1.83288932e+03 4.57161821e+02 7.21986061e+01 4.76360482e+00
 4.17255770e-01 8.53954637e+00 4.81028302e-01]
E = -502.4419137894896
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((7, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.5820650117923668e+02,6.8360631861859034e+01,4.6647996209811691e+00,3.9711619128280629e-01,8.5710114329191196e+00,4.8957520672686806e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "5s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:40:13 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  1832.8893214         1
[INPUT] 0    0    [1    /1   ]  457.161821264        1
[INPUT] 0    0    [1    /1   ]  72.1986061256        1
[INPUT] 0    0    [1    /1   ]  4.76360481658        1
[INPUT] 0    0    [1    /1   ]  0.417255770129       1
[INPUT] 1    0    [1    /1   ]  8.53954636809        1
[INPUT] 1    0    [1    /1   ]  0.481028301954       1

nuclear repulsion = 0
number of shells = 7
number of NR pGTOs = 11
number of NR cGTOs = 11
basis = {'Ar': [[0, [1832.8893214045063, 1.0]], [0, [457.16182126392505, 1.0]], [0, [72.19860612558936, 1.0]], [0, [4.763604816579524, 1.0]], [0, [0.4172557701291025, 1.0]], [1, [8.53954636808623, 1.0]], [1, [0.48102830195377166, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [1832.8893214]
bas 1, expnt(s) = [457.16182126]
bas 2, expnt(s) = [72.19860613]
bas 3, expnt(s) = [4.76360482]
bas 4, expnt(s) = [0.41725577]
bas 5, expnt(s) = [8.53954637]
bas 6, expnt(s) = [0.4810283]
CPU time:        21.72
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]
 [ 0  1  1  1  0 36 37  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.83288932e+03 7.07729348e+02 4.57161821e+02 2.49785653e+02
 7.21986061e+01 6.25765526e+01 4.76360482e+00 8.14642040e+00
 4.17255770e-01 1.31164645e+00 8.53954637e+00 4.25870830e+01
 4.81028302e-01 1.16868556e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.310671188388593
cond(S) = 11.503160277619571
E1 = -682.5789612733528  E_coul = 184.8091030131035
init E= -497.769858260249
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.691197361984712  LUMO = 394.489731557031
  mo_energy =
[-1.19137995e+02 -1.32051428e+01 -7.62510038e+00 -7.62510038e+00
 -7.62510038e+00 -1.66334859e+00 -6.91197362e-01 -6.91197362e-01
 -6.91197362e-01  3.94489732e+02  3.20616473e+03]
E1 = -701.8941671732581  E_coul = 199.45229131143128
cycle= 1 E= -502.441875861827  delta_E= -4.67  |g|= 0.185  |ddm|= 0.286
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.195039
diis-c [-0.03804008  1.        ]
  HOMO = -0.240018834345908  LUMO = 396.028161910036
  mo_energy =
[-1.17658982e+02 -1.21274379e+01 -6.61153202e+00 -6.61153202e+00
 -6.61153202e+00 -1.15373829e+00 -2.40018834e-01 -2.40018834e-01
 -2.40018834e-01  3.96028162e+02  3.20764830e+03]
E1 = -701.8905385516251  E_coul = 199.44862476301753
cycle= 2 E= -502.441913788608  delta_E= -3.79e-05  |g|= 0.000885  |ddm|= 0.00128
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00103199
diis-c [-4.88778830e-08 -5.19524204e-03  1.00519524e+00]
  HOMO = -0.240028011973633  LUMO = 396.0264712046
  mo_energy =
[-1.17660383e+02 -1.21275332e+01 -6.61163634e+00 -6.61163634e+00
 -6.61163634e+00 -1.15374487e+00 -2.40028012e-01 -2.40028012e-01
 -2.40028012e-01  3.96026471e+02  3.20764341e+03]
E1 = -701.8905207758486  E_coul = 199.4486069863588
cycle= 3 E= -502.44191378949  delta_E= -8.82e-10  |g|= 4.82e-07  |ddm|= 5.81e-06
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
E1 = -701.8905207758486  E_coul = 199.4486069863588
  HOMO = -0.240028001070031  LUMO = 396.026471409427
  mo_energy =
[-1.17660383e+02 -1.21275331e+01 -6.61163627e+00 -6.61163627e+00
 -6.61163627e+00 -1.15374487e+00 -2.40028001e-01 -2.40028001e-01
 -2.40028001e-01  3.96026471e+02  3.20764341e+03]
E1 = -701.8905207786759  E_coul = 199.44860698918623
Extra cycle  E= -502.44191378949  delta_E= 1.71e-13  |g|= 2.35e-09  |ddm|= 3.3e-09
    CPU time for scf_cycle      0.08 sec, wall time      0.08 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 11.503160277619571
E1 = -701.8905207786759  E_coul = 199.44860698918623
init E= -502.44191378949
    CPU time for initialize scf      0.05 sec, wall time      0.05 sec
  HOMO = -0.240028001042743  LUMO = 396.026471409079
  mo_energy =
[-1.17660383e+02 -1.21275331e+01 -6.61163627e+00 -6.61163627e+00
 -6.61163627e+00 -1.15374487e+00 -2.40028001e-01 -2.40028001e-01
 -2.40028001e-01  3.96026471e+02  3.20764341e+03]
E1 = -701.8905207786817  E_coul = 199.44860698919172
cycle= 1 E= -502.44191378949  delta_E= -3.41e-13  |g|= 1.83e-11  |ddm|= 1.25e-11
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -701.8905207786817  E_coul = 199.44860698919172
  HOMO = -0.240028001042649  LUMO = 396.026471409071
  mo_energy =
[-1.17660383e+02 -1.21275331e+01 -6.61163627e+00 -6.61163627e+00
 -6.61163627e+00 -1.15374487e+00 -2.40028001e-01 -2.40028001e-01
 -2.40028001e-01  3.96026471e+02  3.20764341e+03]
E1 = -701.8905207786811  E_coul = 199.44860698919157
Extra cycle  E= -502.441913789489  delta_E= 4.55e-13  |g|= 9.05e-13  |ddm|= 8.02e-14
    CPU time for scf_cycle      0.12 sec, wall time      0.13 sec
exp = [1.83288932e+03 4.57161821e+02 7.21986061e+01 4.76360482e+00
 4.17255770e-01 8.53954637e+00 4.81028302e-01]
grad_E = [-0.00170438  0.02314513 -0.00568957  0.03032434  0.19718522 -0.0008949
 -0.21426598]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((7, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.5820650117923668e+02,6.8360631861859034e+01,4.6647996209811691e+00,3.9711619128280629e-01,8.5710114329191196e+00,4.8957520672686806e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "5s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:40:16 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  1832.89797554        1
[INPUT] 0    0    [1    /1   ]  457.025187961        1
[INPUT] 0    0    [1    /1   ]  72.6022649055        1
[INPUT] 0    0    [1    /1   ]  4.73322667355        1
[INPUT] 0    0    [1    /1   ]  0.408043421544       1
[INPUT] 1    0    [1    /1   ]  8.54611021297        1
[INPUT] 1    0    [1    /1   ]  0.486460580942       1

nuclear repulsion = 0
number of shells = 7
number of NR pGTOs = 11
number of NR cGTOs = 11
basis = {'Ar': [[0, [1832.8979755415437, 1.0]], [0, [457.0251879606789, 1.0]], [0, [72.60226490551553, 1.0]], [0, [4.733226673551543, 1.0]], [0, [0.4080434215441251, 1.0]], [1, [8.546110212970165, 1.0]], [1, [0.4864605809418503, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [1832.89797554]
bas 1, expnt(s) = [457.02518796]
bas 2, expnt(s) = [72.60226491]
bas 3, expnt(s) = [4.73322667]
bas 4, expnt(s) = [0.40804342]
bas 5, expnt(s) = [8.54611021]
bas 6, expnt(s) = [0.48646058]
CPU time:        24.58
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]
 [ 0  1  1  1  0 36 37  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.83289798e+03 7.07731854e+02 4.57025188e+02 2.49729660e+02
 7.26022649e+01 6.28387665e+01 4.73322667e+00 8.10742616e+00
 4.08043422e-01 1.28986664e+00 8.54611021e+00 4.26280046e+01
 4.86460581e-01 1.18520632e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.307214018111367
cond(S) = 11.528671296809947
E1 = -682.609854987221  E_coul = 184.85075576536494
init E= -497.759099221856
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.688105149272764  LUMO = 395.557307121939
  mo_energy =
[-1.19127804e+02 -1.32061138e+01 -7.62696008e+00 -7.62696008e+00
 -7.62696008e+00 -1.65915798e+00 -6.88105149e-01 -6.88105149e-01
 -6.88105149e-01  3.95557307e+02  3.20711357e+03]
E1 = -702.0022647481954  E_coul = 199.5548661329344
cycle= 1 E= -502.447398615261  delta_E= -4.69  |g|= 0.183  |ddm|= 0.289
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.19541
diis-c [-0.03818491  1.        ]
  HOMO = -0.233074103696528  LUMO = 397.110793834163
  mo_energy =
[-1.17639964e+02 -1.21247428e+01 -6.61048515e+00 -6.61048515e+00
 -6.61048515e+00 -1.15090050e+00 -2.33074104e-01 -2.33074104e-01
 -2.33074104e-01  3.97110794e+02  3.20862822e+03]
E1 = -701.998692742283  E_coul = 199.55125677942308
cycle= 2 E= -502.44743596286  delta_E= -3.73e-05  |g|= 0.000869  |ddm|= 0.00128
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00101746
diis-c [-5.67377825e-08 -5.08788111e-03  1.00508788e+00]
  HOMO = -0.233083522686255  LUMO = 397.109166525487
  mo_energy =
[-1.17641333e+02 -1.21248374e+01 -6.61059029e+00 -6.61059029e+00
 -6.61059029e+00 -1.15090681e+00 -2.33083523e-01 -2.33083523e-01
 -2.33083523e-01  3.97109167e+02  3.20862352e+03]
E1 = -701.9986752961718  E_coul = 199.55123933244863
cycle= 3 E= -502.447435963723  delta_E= -8.63e-10  |g|= 4.06e-07  |ddm|= 5.79e-06
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
E1 = -701.9986752961718  E_coul = 199.55123933244863
  HOMO = -0.233083513006493  LUMO = 397.109166661454
  mo_energy =
[-1.17641333e+02 -1.21248373e+01 -6.61059023e+00 -6.61059023e+00
 -6.61059023e+00 -1.15090681e+00 -2.33083513e-01 -2.33083513e-01
 -2.33083513e-01  3.97109167e+02  3.20862352e+03]
E1 = -701.9986752974587  E_coul = 199.55123933373554
Extra cycle  E= -502.447435963723  delta_E=    0  |g|= 1.13e-09  |ddm|= 2.59e-09
    CPU time for scf_cycle      0.08 sec, wall time      0.08 sec
exp = [1.83289798e+03 4.57025188e+02 7.26022649e+01 4.73322667e+00
 4.08043422e-01 8.54611021e+00 4.86460581e-01]
E = -502.44743596372314
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((7, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.5820650117923668e+02,6.8360631861859034e+01,4.6647996209811691e+00,3.9711619128280629e-01,8.5710114329191196e+00,4.8957520672686806e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "5s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:40:17 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  1832.89797554        1
[INPUT] 0    0    [1    /1   ]  457.025187961        1
[INPUT] 0    0    [1    /1   ]  72.6022649055        1
[INPUT] 0    0    [1    /1   ]  4.73322667355        1
[INPUT] 0    0    [1    /1   ]  0.408043421544       1
[INPUT] 1    0    [1    /1   ]  8.54611021297        1
[INPUT] 1    0    [1    /1   ]  0.486460580942       1

nuclear repulsion = 0
number of shells = 7
number of NR pGTOs = 11
number of NR cGTOs = 11
basis = {'Ar': [[0, [1832.8979755415437, 1.0]], [0, [457.0251879606789, 1.0]], [0, [72.60226490551553, 1.0]], [0, [4.733226673551543, 1.0]], [0, [0.4080434215441251, 1.0]], [1, [8.546110212970165, 1.0]], [1, [0.4864605809418503, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [1832.89797554]
bas 1, expnt(s) = [457.02518796]
bas 2, expnt(s) = [72.60226491]
bas 3, expnt(s) = [4.73322667]
bas 4, expnt(s) = [0.40804342]
bas 5, expnt(s) = [8.54611021]
bas 6, expnt(s) = [0.48646058]
CPU time:        24.79
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]
 [ 0  1  1  1  0 36 37  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.83289798e+03 7.07731854e+02 4.57025188e+02 2.49729660e+02
 7.26022649e+01 6.28387665e+01 4.73322667e+00 8.10742616e+00
 4.08043422e-01 1.28986664e+00 8.54611021e+00 4.26280046e+01
 4.86460581e-01 1.18520632e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.307214018111367
cond(S) = 11.528671296809947
E1 = -682.609854987221  E_coul = 184.85075576536494
init E= -497.759099221856
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.688105149272764  LUMO = 395.557307121939
  mo_energy =
[-1.19127804e+02 -1.32061138e+01 -7.62696008e+00 -7.62696008e+00
 -7.62696008e+00 -1.65915798e+00 -6.88105149e-01 -6.88105149e-01
 -6.88105149e-01  3.95557307e+02  3.20711357e+03]
E1 = -702.0022647481954  E_coul = 199.5548661329344
cycle= 1 E= -502.447398615261  delta_E= -4.69  |g|= 0.183  |ddm|= 0.289
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.19541
diis-c [-0.03818491  1.        ]
  HOMO = -0.233074103696528  LUMO = 397.110793834163
  mo_energy =
[-1.17639964e+02 -1.21247428e+01 -6.61048515e+00 -6.61048515e+00
 -6.61048515e+00 -1.15090050e+00 -2.33074104e-01 -2.33074104e-01
 -2.33074104e-01  3.97110794e+02  3.20862822e+03]
E1 = -701.998692742283  E_coul = 199.55125677942308
cycle= 2 E= -502.44743596286  delta_E= -3.73e-05  |g|= 0.000869  |ddm|= 0.00128
    CPU time for cycle= 2      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.00101746
diis-c [-5.67377825e-08 -5.08788111e-03  1.00508788e+00]
  HOMO = -0.233083522686255  LUMO = 397.109166525487
  mo_energy =
[-1.17641333e+02 -1.21248374e+01 -6.61059029e+00 -6.61059029e+00
 -6.61059029e+00 -1.15090681e+00 -2.33083523e-01 -2.33083523e-01
 -2.33083523e-01  3.97109167e+02  3.20862352e+03]
E1 = -701.9986752961718  E_coul = 199.55123933244863
cycle= 3 E= -502.447435963723  delta_E= -8.63e-10  |g|= 4.06e-07  |ddm|= 5.79e-06
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
E1 = -701.9986752961718  E_coul = 199.55123933244863
  HOMO = -0.233083513006493  LUMO = 397.109166661454
  mo_energy =
[-1.17641333e+02 -1.21248373e+01 -6.61059023e+00 -6.61059023e+00
 -6.61059023e+00 -1.15090681e+00 -2.33083513e-01 -2.33083513e-01
 -2.33083513e-01  3.97109167e+02  3.20862352e+03]
E1 = -701.9986752974587  E_coul = 199.55123933373554
Extra cycle  E= -502.447435963723  delta_E=    0  |g|= 1.13e-09  |ddm|= 2.59e-09
    CPU time for scf_cycle      0.08 sec, wall time      0.08 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 11.528671296809947
E1 = -701.9986752974587  E_coul = 199.55123933373554
init E= -502.447435963723
    CPU time for initialize scf      0.05 sec, wall time      0.05 sec
  HOMO = -0.233083512986465  LUMO = 397.109166661163
  mo_energy =
[-1.17641333e+02 -1.21248373e+01 -6.61059023e+00 -6.61059023e+00
 -6.61059023e+00 -1.15090681e+00 -2.33083513e-01 -2.33083513e-01
 -2.33083513e-01  3.97109167e+02  3.20862352e+03]
E1 = -701.9986752974581  E_coul = 199.551239333735
cycle= 1 E= -502.447435963723  delta_E=    0  |g|= 7.56e-12  |ddm|= 6.47e-12
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -701.9986752974581  E_coul = 199.551239333735
  HOMO = -0.233083512986408  LUMO = 397.109166661158
  mo_energy =
[-1.17641333e+02 -1.21248373e+01 -6.61059023e+00 -6.61059023e+00
 -6.61059023e+00 -1.15090681e+00 -2.33083513e-01 -2.33083513e-01
 -2.33083513e-01  3.97109167e+02  3.20862352e+03]
E1 = -701.9986752974578  E_coul = 199.55123933373483
Extra cycle  E= -502.447435963723  delta_E= 1.71e-13  |g|= 6.89e-13  |ddm|= 2.99e-14
    CPU time for scf_cycle      0.12 sec, wall time      0.13 sec
exp = [1.83289798e+03 4.57025188e+02 7.26022649e+01 4.73322667e+00
 4.08043422e-01 8.54611021e+00 4.86460581e-01]
grad_E = [-0.00169545  0.02249074  0.00541938 -0.00420116  0.06806874 -0.00233877
 -0.04599863]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((7, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.5820650117923668e+02,6.8360631861859034e+01,4.6647996209811691e+00,3.9711619128280629e-01,8.5710114329191196e+00,4.8957520672686806e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "5s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:40:19 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  1832.90129568        1
[INPUT] 0    0    [1    /1   ]  456.977597967        1
[INPUT] 0    0    [1    /1   ]  72.6616421509        1
[INPUT] 0    0    [1    /1   ]  4.73295436926        1
[INPUT] 0    0    [1    /1   ]  0.402947699679       1
[INPUT] 1    0    [1    /1   ]  8.5508418219         1
[INPUT] 1    0    [1    /1   ]  0.488323406981       1

nuclear repulsion = 0
number of shells = 7
number of NR pGTOs = 11
number of NR cGTOs = 11
basis = {'Ar': [[0, [1832.9012956839215, 1.0]], [0, [456.97759796653054, 1.0]], [0, [72.66164215091707, 1.0]], [0, [4.732954369259751, 1.0]], [0, [0.4029476996785018, 1.0]], [1, [8.550841821896288, 1.0]], [1, [0.4883234069810335, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [1832.90129568]
bas 1, expnt(s) = [456.97759797]
bas 2, expnt(s) = [72.66164215]
bas 3, expnt(s) = [4.73295437]
bas 4, expnt(s) = [0.4029477]
bas 5, expnt(s) = [8.55084182]
bas 6, expnt(s) = [0.48832341]
CPU time:        27.55
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]
 [ 0  1  1  1  0 36 37  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.83290130e+03 7.07732815e+02 4.56977598e+02 2.49710157e+02
 7.26616422e+01 6.28773067e+01 4.73295437e+00 8.10707634e+00
 4.02947700e-01 1.27776661e+00 8.55084182e+00 4.26575082e+01
 4.88323407e-01 1.19088224e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.306014958383084
cond(S) = 11.530837585075714
E1 = -682.6178245751809  E_coul = 184.86020596549955
init E= -497.757618609681
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.687931547271809  LUMO = 395.70217748772
  mo_energy =
[-1.19123780e+02 -1.32050835e+01 -7.62792581e+00 -7.62792581e+00
 -7.62792581e+00 -1.65791619e+00 -6.87931547e-01 -6.87931547e-01
 -6.87931547e-01  3.95702177e+02  3.20718222e+03]
E1 = -702.0335077486272  E_coul = 199.5852032937588
cycle= 1 E= -502.448304454868  delta_E= -4.69  |g|= 0.182  |ddm|= 0.29
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.195533
diis-c [-0.03823324  1.        ]
  HOMO = -0.231526015834995  LUMO = 397.259086059265
  mo_energy =
[-1.17633457e+02 -1.21222029e+01 -6.61023162e+00 -6.61023162e+00
 -6.61023162e+00 -1.15063581e+00 -2.31526016e-01 -2.31526016e-01
 -2.31526016e-01  3.97259086e+02  3.20870288e+03]
E1 = -702.0299468030435  E_coul = 199.5816051189988
cycle= 2 E= -502.448341684045  delta_E= -3.72e-05  |g|= 0.000866  |ddm|= 0.00128
    CPU time for cycle= 2      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.00101532
diis-c [-5.83733221e-08 -5.06896050e-03  1.00506896e+00]
  HOMO = -0.231535501869132  LUMO = 397.257468740156
  mo_energy =
[-1.17634821e+02 -1.21222974e+01 -6.61033674e+00 -6.61033674e+00
 -6.61033674e+00 -1.15064202e+00 -2.31535502e-01 -2.31535502e-01
 -2.31535502e-01  3.97257469e+02  3.20869821e+03]
E1 = -702.0299294185348  E_coul = 199.58158773363112
cycle= 3 E= -502.448341684904  delta_E= -8.59e-10  |g|= 4.03e-07  |ddm|= 5.78e-06
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
E1 = -702.0299294185348  E_coul = 199.58158773363112
  HOMO = -0.231535492334593  LUMO = 397.257468858494
  mo_energy =
[-1.17634821e+02 -1.21222973e+01 -6.61033669e+00 -6.61033669e+00
 -6.61033669e+00 -1.15064201e+00 -2.31535492e-01 -2.31535492e-01
 -2.31535492e-01  3.97257469e+02  3.20869821e+03]
E1 = -702.02992941953  E_coul = 199.58158773462657
Extra cycle  E= -502.448341684903  delta_E= 2.27e-13  |g|= 1.03e-09  |ddm|= 2.51e-09
    CPU time for scf_cycle      0.08 sec, wall time      0.08 sec
exp = [1.83290130e+03 4.56977598e+02 7.26616422e+01 4.73295437e+00
 4.02947700e-01 8.55084182e+00 4.88323407e-01]
E = -502.4483416849035
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((7, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.5820650117923668e+02,6.8360631861859034e+01,4.6647996209811691e+00,3.9711619128280629e-01,8.5710114329191196e+00,4.8957520672686806e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "5s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:40:20 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  1832.90129568        1
[INPUT] 0    0    [1    /1   ]  456.977597967        1
[INPUT] 0    0    [1    /1   ]  72.6616421509        1
[INPUT] 0    0    [1    /1   ]  4.73295436926        1
[INPUT] 0    0    [1    /1   ]  0.402947699679       1
[INPUT] 1    0    [1    /1   ]  8.5508418219         1
[INPUT] 1    0    [1    /1   ]  0.488323406981       1

nuclear repulsion = 0
number of shells = 7
number of NR pGTOs = 11
number of NR cGTOs = 11
basis = {'Ar': [[0, [1832.9012956839215, 1.0]], [0, [456.97759796653054, 1.0]], [0, [72.66164215091707, 1.0]], [0, [4.732954369259751, 1.0]], [0, [0.4029476996785018, 1.0]], [1, [8.550841821896288, 1.0]], [1, [0.4883234069810335, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [1832.90129568]
bas 1, expnt(s) = [456.97759797]
bas 2, expnt(s) = [72.66164215]
bas 3, expnt(s) = [4.73295437]
bas 4, expnt(s) = [0.4029477]
bas 5, expnt(s) = [8.55084182]
bas 6, expnt(s) = [0.48832341]
CPU time:        27.77
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]
 [ 0  1  1  1  0 36 37  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.83290130e+03 7.07732815e+02 4.56977598e+02 2.49710157e+02
 7.26616422e+01 6.28773067e+01 4.73295437e+00 8.10707634e+00
 4.02947700e-01 1.27776661e+00 8.55084182e+00 4.26575082e+01
 4.88323407e-01 1.19088224e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.306014958383084
cond(S) = 11.530837585075714
E1 = -682.6178245751809  E_coul = 184.86020596549955
init E= -497.757618609681
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.687931547271809  LUMO = 395.70217748772
  mo_energy =
[-1.19123780e+02 -1.32050835e+01 -7.62792581e+00 -7.62792581e+00
 -7.62792581e+00 -1.65791619e+00 -6.87931547e-01 -6.87931547e-01
 -6.87931547e-01  3.95702177e+02  3.20718222e+03]
E1 = -702.0335077486272  E_coul = 199.5852032937588
cycle= 1 E= -502.448304454868  delta_E= -4.69  |g|= 0.182  |ddm|= 0.29
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.195533
diis-c [-0.03823324  1.        ]
  HOMO = -0.231526015834995  LUMO = 397.259086059265
  mo_energy =
[-1.17633457e+02 -1.21222029e+01 -6.61023162e+00 -6.61023162e+00
 -6.61023162e+00 -1.15063581e+00 -2.31526016e-01 -2.31526016e-01
 -2.31526016e-01  3.97259086e+02  3.20870288e+03]
E1 = -702.0299468030435  E_coul = 199.5816051189988
cycle= 2 E= -502.448341684045  delta_E= -3.72e-05  |g|= 0.000866  |ddm|= 0.00128
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00101532
diis-c [-5.83733221e-08 -5.06896050e-03  1.00506896e+00]
  HOMO = -0.231535501869132  LUMO = 397.257468740156
  mo_energy =
[-1.17634821e+02 -1.21222974e+01 -6.61033674e+00 -6.61033674e+00
 -6.61033674e+00 -1.15064202e+00 -2.31535502e-01 -2.31535502e-01
 -2.31535502e-01  3.97257469e+02  3.20869821e+03]
E1 = -702.0299294185348  E_coul = 199.58158773363112
cycle= 3 E= -502.448341684904  delta_E= -8.59e-10  |g|= 4.03e-07  |ddm|= 5.78e-06
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
E1 = -702.0299294185348  E_coul = 199.58158773363112
  HOMO = -0.231535492334593  LUMO = 397.257468858494
  mo_energy =
[-1.17634821e+02 -1.21222973e+01 -6.61033669e+00 -6.61033669e+00
 -6.61033669e+00 -1.15064201e+00 -2.31535492e-01 -2.31535492e-01
 -2.31535492e-01  3.97257469e+02  3.20869821e+03]
E1 = -702.02992941953  E_coul = 199.58158773462657
Extra cycle  E= -502.448341684903  delta_E= 2.27e-13  |g|= 1.03e-09  |ddm|= 2.51e-09
    CPU time for scf_cycle      0.08 sec, wall time      0.08 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 11.530837585075714
E1 = -702.02992941953  E_coul = 199.58158773462657
init E= -502.448341684903
    CPU time for initialize scf      0.05 sec, wall time      0.05 sec
  HOMO = -0.231535492315628  LUMO = 397.257468858165
  mo_energy =
[-1.17634821e+02 -1.21222973e+01 -6.61033669e+00 -6.61033669e+00
 -6.61033669e+00 -1.15064201e+00 -2.31535492e-01 -2.31535492e-01
 -2.31535492e-01  3.97257469e+02  3.20869821e+03]
E1 = -702.0299294195281  E_coul = 199.58158773462455
cycle= 1 E= -502.448341684904  delta_E= -5.68e-14  |g|= 5.83e-12  |ddm|= 5.86e-12
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -702.0299294195281  E_coul = 199.58158773462455
  HOMO = -0.231535492315589  LUMO = 397.257468858161
  mo_energy =
[-1.17634821e+02 -1.21222973e+01 -6.61033669e+00 -6.61033669e+00
 -6.61033669e+00 -1.15064201e+00 -2.31535492e-01 -2.31535492e-01
 -2.31535492e-01  3.97257469e+02  3.20869821e+03]
E1 = -702.0299294195281  E_coul = 199.58158773462466
Extra cycle  E= -502.448341684903  delta_E= 1.14e-13  |g|= 1.25e-12  |ddm|= 2.68e-14
    CPU time for scf_cycle      0.12 sec, wall time      0.12 sec
exp = [1.83290130e+03 4.56977598e+02 7.26616422e+01 4.73295437e+00
 4.02947700e-01 8.55084182e+00 4.88323407e-01]
grad_E = [-0.0016941   0.02239237  0.00711487 -0.00461776 -0.00529097 -0.00043655
  0.00489364]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((7, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.5820650117923668e+02,6.8360631861859034e+01,4.6647996209811691e+00,3.9711619128280629e-01,8.5710114329191196e+00,4.8957520672686806e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "5s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:40:22 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  1832.90817047        1
[INPUT] 0    0    [1    /1   ]  456.883094958        1
[INPUT] 0    0    [1    /1   ]  72.7047654251        1
[INPUT] 0    0    [1    /1   ]  4.73424824348        1
[INPUT] 0    0    [1    /1   ]  0.397296238309       1
[INPUT] 1    0    [1    /1   ]  8.55647491669        1
[INPUT] 1    0    [1    /1   ]  0.490413312622       1

nuclear repulsion = 0
number of shells = 7
number of NR pGTOs = 11
number of NR cGTOs = 11
basis = {'Ar': [[0, [1832.9081704669022, 1.0]], [0, [456.88309495765805, 1.0]], [0, [72.70476542513963, 1.0]], [0, [4.7342482434764905, 1.0]], [0, [0.3972962383089192, 1.0]], [1, [8.556474916690394, 1.0]], [1, [0.4904133126215397, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [1832.90817047]
bas 1, expnt(s) = [456.88309496]
bas 2, expnt(s) = [72.70476543]
bas 3, expnt(s) = [4.73424824]
bas 4, expnt(s) = [0.39729624]
bas 5, expnt(s) = [8.55647492]
bas 6, expnt(s) = [0.49041331]
CPU time:        30.55
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]
 [ 0  1  1  1  0 36 37  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.83290817e+03 7.07734806e+02 4.56883095e+02 2.49671426e+02
 7.27047654e+01 6.29052920e+01 4.73424824e+00 8.10873849e+00
 3.97296238e-01 1.26430211e+00 8.55647492e+00 4.26926384e+01
 4.90413313e-01 1.19725651e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.304351730222905
cond(S) = 11.530954519537081
E1 = -682.6284860345601  E_coul = 184.87094767905265
init E= -497.757538355507
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.68788511927182  LUMO = 395.765693975798
  mo_energy =
[-1.19119716e+02 -1.32036138e+01 -7.62892457e+00 -7.62892457e+00
 -7.62892457e+00 -1.65642407e+00 -6.87885119e-01 -6.87885119e-01
 -6.87885119e-01  3.95765694e+02  3.20706398e+03]
E1 = -702.0727702280326  E_coul = 199.62300944170642
cycle= 1 E= -502.449760786326  delta_E= -4.69  |g|= 0.182  |ddm|= 0.291
    CPU time for cycle= 1      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.195642
diis-c [-0.03827572  1.        ]
  HOMO = -0.229754478336546  LUMO = 397.326154206589
  mo_energy =
[-1.17626573e+02 -1.21187573e+01 -6.60957031e+00 -6.60957031e+00
 -6.60957031e+00 -1.15008988e+00 -2.29754478e-01 -2.29754478e-01
 -2.29754478e-01  3.97326154e+02  3.20859027e+03]
E1 = -702.0692182168107  E_coul = 199.61942029509711
cycle= 2 E= -502.449797921714  delta_E= -3.71e-05  |g|= 0.000864  |ddm|= 0.00127
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00101342
diis-c [-5.98591795e-08 -5.05217144e-03  1.00505217e+00]
  HOMO = -0.229764040710474  LUMO = 397.324544931646
  mo_energy =
[-1.17627932e+02 -1.21188516e+01 -6.60967541e+00 -6.60967541e+00
 -6.60967541e+00 -1.15009598e+00 -2.29764041e-01 -2.29764041e-01
 -2.29764041e-01  3.97324545e+02  3.20858562e+03]
E1 = -702.0692008814211  E_coul = 199.6194029588524
cycle= 3 E= -502.449797922569  delta_E= -8.55e-10  |g|= 4.02e-07  |ddm|= 5.76e-06
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
E1 = -702.0692008814211  E_coul = 199.6194029588524
  HOMO = -0.229764031278576  LUMO = 397.324545032467
  mo_energy =
[-1.17627932e+02 -1.21188516e+01 -6.60967536e+00 -6.60967536e+00
 -6.60967536e+00 -1.15009598e+00 -2.29764031e-01 -2.29764031e-01
 -2.29764031e-01  3.97324545e+02  3.20858562e+03]
E1 = -702.0692008821486  E_coul = 199.61940295957945
Extra cycle  E= -502.449797922569  delta_E= -3.98e-13  |g|= 9.84e-10  |ddm|= 2.45e-09
    CPU time for scf_cycle      0.09 sec, wall time      0.10 sec
exp = [1.83290817e+03 4.56883095e+02 7.27047654e+01 4.73424824e+00
 3.97296238e-01 8.55647492e+00 4.90413313e-01]
E = -502.44979792256913
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((7, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.5820650117923668e+02,6.8360631861859034e+01,4.6647996209811691e+00,3.9711619128280629e-01,8.5710114329191196e+00,4.8957520672686806e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "5s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:40:23 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  1832.90817047        1
[INPUT] 0    0    [1    /1   ]  456.883094958        1
[INPUT] 0    0    [1    /1   ]  72.7047654251        1
[INPUT] 0    0    [1    /1   ]  4.73424824348        1
[INPUT] 0    0    [1    /1   ]  0.397296238309       1
[INPUT] 1    0    [1    /1   ]  8.55647491669        1
[INPUT] 1    0    [1    /1   ]  0.490413312622       1

nuclear repulsion = 0
number of shells = 7
number of NR pGTOs = 11
number of NR cGTOs = 11
basis = {'Ar': [[0, [1832.9081704669022, 1.0]], [0, [456.88309495765805, 1.0]], [0, [72.70476542513963, 1.0]], [0, [4.7342482434764905, 1.0]], [0, [0.3972962383089192, 1.0]], [1, [8.556474916690394, 1.0]], [1, [0.4904133126215397, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [1832.90817047]
bas 1, expnt(s) = [456.88309496]
bas 2, expnt(s) = [72.70476543]
bas 3, expnt(s) = [4.73424824]
bas 4, expnt(s) = [0.39729624]
bas 5, expnt(s) = [8.55647492]
bas 6, expnt(s) = [0.49041331]
CPU time:        30.79
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]
 [ 0  1  1  1  0 36 37  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.83290817e+03 7.07734806e+02 4.56883095e+02 2.49671426e+02
 7.27047654e+01 6.29052920e+01 4.73424824e+00 8.10873849e+00
 3.97296238e-01 1.26430211e+00 8.55647492e+00 4.26926384e+01
 4.90413313e-01 1.19725651e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.304351730222905
cond(S) = 11.530954519537081
E1 = -682.6284860345601  E_coul = 184.87094767905265
init E= -497.757538355507
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.68788511927182  LUMO = 395.765693975798
  mo_energy =
[-1.19119716e+02 -1.32036138e+01 -7.62892457e+00 -7.62892457e+00
 -7.62892457e+00 -1.65642407e+00 -6.87885119e-01 -6.87885119e-01
 -6.87885119e-01  3.95765694e+02  3.20706398e+03]
E1 = -702.0727702280326  E_coul = 199.62300944170642
cycle= 1 E= -502.449760786326  delta_E= -4.69  |g|= 0.182  |ddm|= 0.291
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.195642
diis-c [-0.03827572  1.        ]
  HOMO = -0.229754478336546  LUMO = 397.326154206589
  mo_energy =
[-1.17626573e+02 -1.21187573e+01 -6.60957031e+00 -6.60957031e+00
 -6.60957031e+00 -1.15008988e+00 -2.29754478e-01 -2.29754478e-01
 -2.29754478e-01  3.97326154e+02  3.20859027e+03]
E1 = -702.0692182168107  E_coul = 199.61942029509711
cycle= 2 E= -502.449797921714  delta_E= -3.71e-05  |g|= 0.000864  |ddm|= 0.00127
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00101342
diis-c [-5.98591795e-08 -5.05217144e-03  1.00505217e+00]
  HOMO = -0.229764040710474  LUMO = 397.324544931646
  mo_energy =
[-1.17627932e+02 -1.21188516e+01 -6.60967541e+00 -6.60967541e+00
 -6.60967541e+00 -1.15009598e+00 -2.29764041e-01 -2.29764041e-01
 -2.29764041e-01  3.97324545e+02  3.20858562e+03]
E1 = -702.0692008814211  E_coul = 199.6194029588524
cycle= 3 E= -502.449797922569  delta_E= -8.55e-10  |g|= 4.02e-07  |ddm|= 5.76e-06
    CPU time for cycle= 3      0.01 sec, wall time      0.02 sec
E1 = -702.0692008814211  E_coul = 199.6194029588524
  HOMO = -0.229764031278576  LUMO = 397.324545032467
  mo_energy =
[-1.17627932e+02 -1.21188516e+01 -6.60967536e+00 -6.60967536e+00
 -6.60967536e+00 -1.15009598e+00 -2.29764031e-01 -2.29764031e-01
 -2.29764031e-01  3.97324545e+02  3.20858562e+03]
E1 = -702.0692008821486  E_coul = 199.61940295957945
Extra cycle  E= -502.449797922569  delta_E= -3.98e-13  |g|= 9.84e-10  |ddm|= 2.45e-09
    CPU time for scf_cycle      0.08 sec, wall time      0.08 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 11.530954519537081
E1 = -702.0692008821486  E_coul = 199.61940295957945
init E= -502.449797922569
    CPU time for initialize scf      0.06 sec, wall time      0.06 sec
  HOMO = -0.22976403126049  LUMO = 397.324545032086
  mo_energy =
[-1.17627932e+02 -1.21188516e+01 -6.60967536e+00 -6.60967536e+00
 -6.60967536e+00 -1.15009598e+00 -2.29764031e-01 -2.29764031e-01
 -2.29764031e-01  3.97324545e+02  3.20858562e+03]
E1 = -702.0692008821452  E_coul = 199.6194029595761
cycle= 1 E= -502.449797922569  delta_E=    0  |g|= 4.87e-12  |ddm|= 5.46e-12
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -702.0692008821452  E_coul = 199.6194029595761
  HOMO = -0.229764031260456  LUMO = 397.324545032082
  mo_energy =
[-1.17627932e+02 -1.21188516e+01 -6.60967536e+00 -6.60967536e+00
 -6.60967536e+00 -1.15009598e+00 -2.29764031e-01 -2.29764031e-01
 -2.29764031e-01  3.97324545e+02  3.20858562e+03]
E1 = -702.069200882145  E_coul = 199.61940295957618
Extra cycle  E= -502.449797922569  delta_E= 3.41e-13  |g|= 1.04e-12  |ddm|= 2.4e-14
    CPU time for scf_cycle      0.13 sec, wall time      0.13 sec
exp = [1.83290817e+03 4.56883095e+02 7.27047654e+01 4.73424824e+00
 3.97296238e-01 8.55647492e+00 4.90413313e-01]
grad_E = [-0.00169301  0.02231498  0.00845944 -0.00312225 -0.0881081   0.00202369
  0.06172495]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((7, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.5820650117923668e+02,6.8360631861859034e+01,4.6647996209811691e+00,3.9711619128280629e-01,8.5710114329191196e+00,4.8957520672686806e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "5s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:40:25 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  1832.92963938        1
[INPUT] 0    0    [1    /1   ]  456.591688399        1
[INPUT] 0    0    [1    /1   ]  72.7660588723        1
[INPUT] 0    0    [1    /1   ]  4.7366318324         1
[INPUT] 0    0    [1    /1   ]  0.387842308685       1
[INPUT] 1    0    [1    /1   ]  8.56636252697        1
[INPUT] 1    0    [1    /1   ]  0.494030090591       1

nuclear repulsion = 0
number of shells = 7
number of NR pGTOs = 11
number of NR cGTOs = 11
basis = {'Ar': [[0, [1832.9296393836091, 1.0]], [0, [456.59168839934017, 1.0]], [0, [72.76605887231264, 1.0]], [0, [4.736631832396835, 1.0]], [0, [0.3878423086847273, 1.0]], [1, [8.566362526966259, 1.0]], [1, [0.4940300905909453, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [1832.92963938]
bas 1, expnt(s) = [456.5916884]
bas 2, expnt(s) = [72.76605887]
bas 3, expnt(s) = [4.73663183]
bas 4, expnt(s) = [0.38784231]
bas 5, expnt(s) = [8.56636253]
bas 6, expnt(s) = [0.49403009]
CPU time:        33.62
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]
 [ 0  1  1  1  0 36 37  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.83292964e+03 7.07741023e+02 4.56591688e+02 2.49551983e+02
 7.27660589e+01 6.29450618e+01 4.73663183e+00 8.11180022e+00
 3.87842309e-01 1.24167064e+00 8.56636253e+00 4.27543152e+01
 4.94030091e-01 1.20830381e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.300704448451558
cond(S) = 11.528783087012519
E1 = -682.6413022106161  E_coul = 184.8830710092049
init E= -497.758231201411
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.688125591377563  LUMO = 395.740737957126
  mo_energy =
[-1.19114453e+02 -1.32015232e+01 -7.63105325e+00 -7.63105325e+00
 -7.63105325e+00 -1.65362033e+00 -6.88125591e-01 -6.88125591e-01
 -6.88125591e-01  3.95740738e+02  3.20644957e+03]
E1 = -702.1450172227004  E_coul = 199.69126266973004
cycle= 1 E= -502.45375455297  delta_E= -4.7  |g|= 0.181  |ddm|= 0.294
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.195823
diis-c [-0.03834664  1.        ]
  HOMO = -0.226585426418606  LUMO = 397.307851799974
  mo_energy =
[-1.17615803e+02 -1.21126077e+01 -6.60817249e+00 -6.60817249e+00
 -6.60817249e+00 -1.14857951e+00 -2.26585426e-01 -2.26585426e-01
 -2.26585426e-01  3.97307852e+02  3.20798591e+03]
E1 = -702.1414786212607  E_coul = 199.68768706868988
cycle= 2 E= -502.453791552571  delta_E= -3.7e-05  |g|= 0.000861  |ddm|= 0.00127
    CPU time for cycle= 2      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.00101025
diis-c [-6.25162208e-08 -5.02358765e-03  1.00502359e+00]
  HOMO = -0.226595126980218  LUMO = 397.306255713083
  mo_energy =
[-1.17617156e+02 -1.21127020e+01 -6.60827760e+00 -6.60827760e+00
 -6.60827760e+00 -1.14858544e+00 -2.26595127e-01 -2.26595127e-01
 -2.26595127e-01  3.97306256e+02  3.20798129e+03]
E1 = -702.1414613590122  E_coul = 199.68766980559093
cycle= 3 E= -502.453791553421  delta_E= -8.5e-10  |g|= 4.04e-07  |ddm|= 5.75e-06
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
E1 = -702.1414613590122  E_coul = 199.68766980559093
  HOMO = -0.226595117731126  LUMO = 397.306255784551
  mo_energy =
[-1.17617155e+02 -1.21127019e+01 -6.60827756e+00 -6.60827756e+00
 -6.60827756e+00 -1.14858544e+00 -2.26595118e-01 -2.26595118e-01
 -2.26595118e-01  3.97306256e+02  3.20798129e+03]
E1 = -702.1414613592792  E_coul = 199.68766980585826
Extra cycle  E= -502.453791553421  delta_E= 2.84e-13  |g|= 9.44e-10  |ddm|= 2.36e-09
    CPU time for scf_cycle      0.08 sec, wall time      0.08 sec
exp = [1.83292964e+03 4.56591688e+02 7.27660589e+01 4.73663183e+00
 3.87842309e-01 8.56636253e+00 4.94030091e-01]
E = -502.45379155342096
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((7, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.5820650117923668e+02,6.8360631861859034e+01,4.6647996209811691e+00,3.9711619128280629e-01,8.5710114329191196e+00,4.8957520672686806e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "5s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:40:26 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  1832.92963938        1
[INPUT] 0    0    [1    /1   ]  456.591688399        1
[INPUT] 0    0    [1    /1   ]  72.7660588723        1
[INPUT] 0    0    [1    /1   ]  4.7366318324         1
[INPUT] 0    0    [1    /1   ]  0.387842308685       1
[INPUT] 1    0    [1    /1   ]  8.56636252697        1
[INPUT] 1    0    [1    /1   ]  0.494030090591       1

nuclear repulsion = 0
number of shells = 7
number of NR pGTOs = 11
number of NR cGTOs = 11
basis = {'Ar': [[0, [1832.9296393836091, 1.0]], [0, [456.59168839934017, 1.0]], [0, [72.76605887231264, 1.0]], [0, [4.736631832396835, 1.0]], [0, [0.3878423086847273, 1.0]], [1, [8.566362526966259, 1.0]], [1, [0.4940300905909453, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [1832.92963938]
bas 1, expnt(s) = [456.5916884]
bas 2, expnt(s) = [72.76605887]
bas 3, expnt(s) = [4.73663183]
bas 4, expnt(s) = [0.38784231]
bas 5, expnt(s) = [8.56636253]
bas 6, expnt(s) = [0.49403009]
CPU time:        33.87
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]
 [ 0  1  1  1  0 36 37  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.83292964e+03 7.07741023e+02 4.56591688e+02 2.49551983e+02
 7.27660589e+01 6.29450618e+01 4.73663183e+00 8.11180022e+00
 3.87842309e-01 1.24167064e+00 8.56636253e+00 4.27543152e+01
 4.94030091e-01 1.20830381e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.300704448451558
cond(S) = 11.528783087012519
E1 = -682.6413022106161  E_coul = 184.8830710092049
init E= -497.758231201411
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.688125591377563  LUMO = 395.740737957126
  mo_energy =
[-1.19114453e+02 -1.32015232e+01 -7.63105325e+00 -7.63105325e+00
 -7.63105325e+00 -1.65362033e+00 -6.88125591e-01 -6.88125591e-01
 -6.88125591e-01  3.95740738e+02  3.20644957e+03]
E1 = -702.1450172227004  E_coul = 199.69126266973004
cycle= 1 E= -502.45375455297  delta_E= -4.7  |g|= 0.181  |ddm|= 0.294
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.195823
diis-c [-0.03834664  1.        ]
  HOMO = -0.226585426418606  LUMO = 397.307851799974
  mo_energy =
[-1.17615803e+02 -1.21126077e+01 -6.60817249e+00 -6.60817249e+00
 -6.60817249e+00 -1.14857951e+00 -2.26585426e-01 -2.26585426e-01
 -2.26585426e-01  3.97307852e+02  3.20798591e+03]
E1 = -702.1414786212607  E_coul = 199.68768706868988
cycle= 2 E= -502.453791552571  delta_E= -3.7e-05  |g|= 0.000861  |ddm|= 0.00127
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00101025
diis-c [-6.25162208e-08 -5.02358765e-03  1.00502359e+00]
  HOMO = -0.226595126980218  LUMO = 397.306255713083
  mo_energy =
[-1.17617156e+02 -1.21127020e+01 -6.60827760e+00 -6.60827760e+00
 -6.60827760e+00 -1.14858544e+00 -2.26595127e-01 -2.26595127e-01
 -2.26595127e-01  3.97306256e+02  3.20798129e+03]
E1 = -702.1414613590122  E_coul = 199.68766980559093
cycle= 3 E= -502.453791553421  delta_E= -8.5e-10  |g|= 4.04e-07  |ddm|= 5.75e-06
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
E1 = -702.1414613590122  E_coul = 199.68766980559093
  HOMO = -0.226595117731126  LUMO = 397.306255784551
  mo_energy =
[-1.17617155e+02 -1.21127019e+01 -6.60827756e+00 -6.60827756e+00
 -6.60827756e+00 -1.14858544e+00 -2.26595118e-01 -2.26595118e-01
 -2.26595118e-01  3.97306256e+02  3.20798129e+03]
E1 = -702.1414613592792  E_coul = 199.68766980585826
Extra cycle  E= -502.453791553421  delta_E= 2.84e-13  |g|= 9.44e-10  |ddm|= 2.36e-09
    CPU time for scf_cycle      0.08 sec, wall time      0.08 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 11.528783087012519
E1 = -702.1414613592792  E_coul = 199.68766980585826
init E= -502.453791553421
    CPU time for initialize scf      0.05 sec, wall time      0.05 sec
  HOMO = -0.226595117714618  LUMO = 397.306255784089
  mo_energy =
[-1.17617155e+02 -1.21127019e+01 -6.60827756e+00 -6.60827756e+00
 -6.60827756e+00 -1.14858544e+00 -2.26595118e-01 -2.26595118e-01
 -2.26595118e-01  3.97306256e+02  3.20798129e+03]
E1 = -702.141461359274  E_coul = 199.68766980585312
cycle= 1 E= -502.453791553421  delta_E= 1.14e-13  |g|= 3.73e-12  |ddm|= 5.02e-12
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -702.141461359274  E_coul = 199.68766980585312
  HOMO = -0.226595117714588  LUMO = 397.306255784084
  mo_energy =
[-1.17617155e+02 -1.21127019e+01 -6.60827756e+00 -6.60827756e+00
 -6.60827756e+00 -1.14858544e+00 -2.26595118e-01 -2.26595118e-01
 -2.26595118e-01  3.97306256e+02  3.20798129e+03]
E1 = -702.1414613592743  E_coul = 199.68766980585323
Extra cycle  E= -502.453791553421  delta_E= -2.27e-13  |g|= 1.16e-12  |ddm|= 1.53e-14
    CPU time for scf_cycle      0.12 sec, wall time      0.13 sec
exp = [1.83292964e+03 4.56591688e+02 7.27660589e+01 4.73663183e+00
 3.87842309e-01 8.56636253e+00 4.94030091e-01]
grad_E = [-1.69117876e-03  2.21897066e-02  1.06298297e-02 -1.73793309e-04
 -2.30904956e-01  6.40369786e-03  1.59931595e-01]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((7, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.5820650117923668e+02,6.8360631861859034e+01,4.6647996209811691e+00,3.9711619128280629e-01,8.5710114329191196e+00,4.8957520672686806e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "5s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:40:28 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  1832.98973336        1
[INPUT] 0    0    [1    /1   ]  455.780683386        1
[INPUT] 0    0    [1    /1   ]  72.8451982953        1
[INPUT] 0    0    [1    /1   ]  4.74024194164        1
[INPUT] 0    0    [1    /1   ]  0.373197861487       1
[INPUT] 1    0    [1    /1   ]  8.58258255437        1
[INPUT] 1    0    [1    /1   ]  0.499939667494       1

nuclear repulsion = 0
number of shells = 7
number of NR pGTOs = 11
number of NR cGTOs = 11
basis = {'Ar': [[0, [1832.9897333570682, 1.0]], [0, [455.7806833864253, 1.0]], [0, [72.84519829528759, 1.0]], [0, [4.740241941640433, 1.0]], [0, [0.3731978614872833, 1.0]], [1, [8.582582554371957, 1.0]], [1, [0.4999396674942297, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [1832.98973336]
bas 1, expnt(s) = [455.78068339]
bas 2, expnt(s) = [72.8451983]
bas 3, expnt(s) = [4.74024194]
bas 4, expnt(s) = [0.37319786]
bas 5, expnt(s) = [8.58258255]
bas 6, expnt(s) = [0.49993967]
CPU time:        36.69
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]
 [ 0  1  1  1  0 36 37  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.83298973e+03 7.07758426e+02 4.55780683e+02 2.49219466e+02
 7.28451983e+01 6.29963985e+01 4.74024194e+00 8.11643670e+00
 3.73197861e-01 1.20633904e+00 8.58258255e+00 4.28555309e+01
 4.99939667e-01 1.22639787e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.292748967920986
cond(S) = 11.520220886673831
E1 = -682.643789002223  E_coul = 184.88338667512684
init E= -497.760402327096
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.689364171487695  LUMO = 395.388278008101
  mo_energy =
[-1.19110667e+02 -1.31996525e+01 -7.63579783e+00 -7.63579783e+00
 -7.63579783e+00 -1.64852431e+00 -6.89364171e-01 -6.89364171e-01
 -6.89364171e-01  3.95388278e+02  3.20441885e+03]
E1 = -702.2715340962515  E_coul = 199.8073991282948
cycle= 1 E= -502.464134967957  delta_E= -4.7  |g|= 0.181  |ddm|= 0.298
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.196133
diis-c [-0.0384681  1.       ]
  HOMO = -0.221160307209167  LUMO = 396.96796054871
  mo_energy =
[-1.17601220e+02 -1.21024672e+01 -6.60549168e+00 -6.60549168e+00
 -6.60549168e+00 -1.14474355e+00 -2.21160307e-01 -2.21160307e-01
 -2.21160307e-01  3.96967961e+02  3.20597339e+03]
E1 = -702.2680145389197  E_coul = 199.80384275481958
cycle= 2 E= -502.4641717841  delta_E= -3.68e-05  |g|= 0.000855  |ddm|= 0.00126
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00100507
diis-c [-6.73882351e-08 -4.97516695e-03  1.00497517e+00]
  HOMO = -0.221170248564983  LUMO = 396.966386248174
  mo_energy =
[-1.17602561e+02 -1.21025614e+01 -6.60559698e+00 -6.60559698e+00
 -6.60559698e+00 -1.14474922e+00 -2.21170249e-01 -2.21170249e-01
 -2.21170249e-01  3.96966386e+02  3.20596883e+03]
E1 = -702.2679973788072  E_coul = 199.80382559386308
cycle= 3 E= -502.464171784944  delta_E= -8.44e-10  |g|= 4.15e-07  |ddm|= 5.73e-06
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
E1 = -702.2679973788072  E_coul = 199.80382559386308
  HOMO = -0.22117023967455  LUMO = 396.966386272651
  mo_energy =
[-1.17602561e+02 -1.21025613e+01 -6.60559694e+00 -6.60559694e+00
 -6.60559694e+00 -1.14474922e+00 -2.21170240e-01 -2.21170240e-01
 -2.21170240e-01  3.96966386e+02  3.20596883e+03]
E1 = -702.2679973782948  E_coul = 199.80382559335092
Extra cycle  E= -502.464171784944  delta_E= 2.27e-13  |g|= 1.05e-09  |ddm|= 2.26e-09
    CPU time for scf_cycle      0.08 sec, wall time      0.08 sec
exp = [1.83298973e+03 4.55780683e+02 7.28451983e+01 4.74024194e+00
 3.73197861e-01 8.58258255e+00 4.99939667e-01]
E = -502.4641717849439
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((7, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.5820650117923668e+02,6.8360631861859034e+01,4.6647996209811691e+00,3.9711619128280629e-01,8.5710114329191196e+00,4.8957520672686806e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "5s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:40:29 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  1832.98973336        1
[INPUT] 0    0    [1    /1   ]  455.780683386        1
[INPUT] 0    0    [1    /1   ]  72.8451982953        1
[INPUT] 0    0    [1    /1   ]  4.74024194164        1
[INPUT] 0    0    [1    /1   ]  0.373197861487       1
[INPUT] 1    0    [1    /1   ]  8.58258255437        1
[INPUT] 1    0    [1    /1   ]  0.499939667494       1

nuclear repulsion = 0
number of shells = 7
number of NR pGTOs = 11
number of NR cGTOs = 11
basis = {'Ar': [[0, [1832.9897333570682, 1.0]], [0, [455.7806833864253, 1.0]], [0, [72.84519829528759, 1.0]], [0, [4.740241941640433, 1.0]], [0, [0.3731978614872833, 1.0]], [1, [8.582582554371957, 1.0]], [1, [0.4999396674942297, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [1832.98973336]
bas 1, expnt(s) = [455.78068339]
bas 2, expnt(s) = [72.8451983]
bas 3, expnt(s) = [4.74024194]
bas 4, expnt(s) = [0.37319786]
bas 5, expnt(s) = [8.58258255]
bas 6, expnt(s) = [0.49993967]
CPU time:        36.96
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]
 [ 0  1  1  1  0 36 37  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.83298973e+03 7.07758426e+02 4.55780683e+02 2.49219466e+02
 7.28451983e+01 6.29963985e+01 4.74024194e+00 8.11643670e+00
 3.73197861e-01 1.20633904e+00 8.58258255e+00 4.28555309e+01
 4.99939667e-01 1.22639787e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.292748967920986
cond(S) = 11.520220886673831
E1 = -682.643789002223  E_coul = 184.88338667512684
init E= -497.760402327096
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.689364171487695  LUMO = 395.388278008101
  mo_energy =
[-1.19110667e+02 -1.31996525e+01 -7.63579783e+00 -7.63579783e+00
 -7.63579783e+00 -1.64852431e+00 -6.89364171e-01 -6.89364171e-01
 -6.89364171e-01  3.95388278e+02  3.20441885e+03]
E1 = -702.2715340962515  E_coul = 199.8073991282948
cycle= 1 E= -502.464134967957  delta_E= -4.7  |g|= 0.181  |ddm|= 0.298
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.196133
diis-c [-0.0384681  1.       ]
  HOMO = -0.221160307209167  LUMO = 396.96796054871
  mo_energy =
[-1.17601220e+02 -1.21024672e+01 -6.60549168e+00 -6.60549168e+00
 -6.60549168e+00 -1.14474355e+00 -2.21160307e-01 -2.21160307e-01
 -2.21160307e-01  3.96967961e+02  3.20597339e+03]
E1 = -702.2680145389197  E_coul = 199.80384275481958
cycle= 2 E= -502.4641717841  delta_E= -3.68e-05  |g|= 0.000855  |ddm|= 0.00126
    CPU time for cycle= 2      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.00100507
diis-c [-6.73882351e-08 -4.97516695e-03  1.00497517e+00]
  HOMO = -0.221170248564983  LUMO = 396.966386248174
  mo_energy =
[-1.17602561e+02 -1.21025614e+01 -6.60559698e+00 -6.60559698e+00
 -6.60559698e+00 -1.14474922e+00 -2.21170249e-01 -2.21170249e-01
 -2.21170249e-01  3.96966386e+02  3.20596883e+03]
E1 = -702.2679973788072  E_coul = 199.80382559386308
cycle= 3 E= -502.464171784944  delta_E= -8.44e-10  |g|= 4.15e-07  |ddm|= 5.73e-06
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
E1 = -702.2679973788072  E_coul = 199.80382559386308
  HOMO = -0.22117023967455  LUMO = 396.966386272651
  mo_energy =
[-1.17602561e+02 -1.21025613e+01 -6.60559694e+00 -6.60559694e+00
 -6.60559694e+00 -1.14474922e+00 -2.21170240e-01 -2.21170240e-01
 -2.21170240e-01  3.96966386e+02  3.20596883e+03]
E1 = -702.2679973782948  E_coul = 199.80382559335092
Extra cycle  E= -502.464171784944  delta_E= 2.27e-13  |g|= 1.05e-09  |ddm|= 2.26e-09
    CPU time for scf_cycle      0.08 sec, wall time      0.08 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 11.520220886673831
E1 = -702.2679973782948  E_coul = 199.80382559335092
init E= -502.464171784944
    CPU time for initialize scf      0.05 sec, wall time      0.05 sec
  HOMO = -0.221170239660954  LUMO = 396.966386272079
  mo_energy =
[-1.17602561e+02 -1.21025613e+01 -6.60559694e+00 -6.60559694e+00
 -6.60559694e+00 -1.14474922e+00 -2.21170240e-01 -2.21170240e-01
 -2.21170240e-01  3.96966386e+02  3.20596883e+03]
E1 = -702.2679973782866  E_coul = 199.8038255933425
cycle= 1 E= -502.464171784944  delta_E= -2.27e-13  |g|= 4.19e-12  |ddm|= 5.23e-12
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -702.2679973782866  E_coul = 199.8038255933425
  HOMO = -0.221170239660943  LUMO = 396.966386272075
  mo_energy =
[-1.17602561e+02 -1.21025613e+01 -6.60559694e+00 -6.60559694e+00
 -6.60559694e+00 -1.14474922e+00 -2.21170240e-01 -2.21170240e-01
 -2.21170240e-01  3.96966386e+02  3.20596883e+03]
E1 = -702.267997378286  E_coul = 199.80382559334225
Extra cycle  E= -502.464171784944  delta_E= 3.41e-13  |g|= 7.93e-13  |ddm|= 2.01e-14
    CPU time for scf_cycle      0.12 sec, wall time      0.12 sec
exp = [1.83298973e+03 4.55780683e+02 7.28451983e+01 4.74024194e+00
 3.73197861e-01 8.58258255e+00 4.99939667e-01]
grad_E = [-0.00168801  0.02198538  0.01413132  0.00470379 -0.4633231   0.01361308
  0.31990696]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((7, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.5820650117923668e+02,6.8360631861859034e+01,4.6647996209811691e+00,3.9711619128280629e-01,8.5710114329191196e+00,4.8957520672686806e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "5s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:40:32 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  1833.15710524        1
[INPUT] 0    0    [1    /1   ]  453.528844462        1
[INPUT] 0    0    [1    /1   ]  72.9282467419        1
[INPUT] 0    0    [1    /1   ]  4.74552079283        1
[INPUT] 0    0    [1    /1   ]  0.350329756615       1
[INPUT] 1    0    [1    /1   ]  8.61017809194        1
[INPUT] 1    0    [1    /1   ]  0.509996558774       1

nuclear repulsion = 0
number of shells = 7
number of NR pGTOs = 11
number of NR cGTOs = 11
basis = {'Ar': [[0, [1833.1571052378833, 1.0]], [0, [453.52884446175955, 1.0]], [0, [72.92824674186218, 1.0]], [0, [4.7455207928269045, 1.0]], [0, [0.3503297566149794, 1.0]], [1, [8.610178091941847, 1.0]], [1, [0.5099965587744407, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [1833.15710524]
bas 1, expnt(s) = [453.52884446]
bas 2, expnt(s) = [72.92824674]
bas 3, expnt(s) = [4.74552079]
bas 4, expnt(s) = [0.35032976]
bas 5, expnt(s) = [8.61017809]
bas 6, expnt(s) = [0.50999656]
CPU time:        39.81
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]
 [ 0  1  1  1  0 36 37  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.83315711e+03 7.07806895e+02 4.53528844e+02 2.48295420e+02
 7.29282467e+01 6.30502559e+01 4.74552079e+00 8.12321475e+00
 3.50329757e-01 1.15046337e+00 8.61017809e+00 4.30278415e+01
 5.09996559e-01 1.25731313e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.273936126351334
cond(S) = 11.493088234032967
E1 = -682.5991900796212  E_coul = 184.83269847597552
init E= -497.766491603646
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.69365920699869  LUMO = 393.985767057881
  mo_energy =
[-1.19116781e+02 -1.32005820e+01 -7.64719472e+00 -7.64719472e+00
 -7.64719472e+00 -1.63867665e+00 -6.93659207e-01 -6.93659207e-01
 -6.93659207e-01  3.93985767e+02  3.19829613e+03]
E1 = -702.5079352609749  E_coul = 200.01600503168672
cycle= 1 E= -502.491930229288  delta_E= -4.73  |g|= 0.18  |ddm|= 0.308
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.196761
diis-c [-0.03871496  1.        ]
  HOMO = -0.21124654125486  LUMO = 395.591263630218
  mo_energy =
[-1.17584297e+02 -1.20851176e+01 -6.59998934e+00 -6.59998934e+00
 -6.59998934e+00 -1.13485899e+00 -2.11246541e-01 -2.11246541e-01
 -2.11246541e-01  3.95591264e+02  3.19988645e+03]
E1 = -702.5044414079663  E_coul = 200.01247457393885
cycle= 2 E= -502.491966834027  delta_E= -3.66e-05  |g|= 0.000849  |ddm|= 0.00126
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.000996818
diis-c [-7.75263584e-08 -4.88826615e-03  1.00488827e+00]
  HOMO = -0.211256933968649  LUMO = 395.589727578335
  mo_energy =
[-1.17585622e+02 -1.20852119e+01 -6.60009535e+00 -6.60009535e+00
 -6.60009535e+00 -1.13486426e+00 -2.11256934e-01 -2.11256934e-01
 -2.11256934e-01  3.95589728e+02  3.19988199e+03]
E1 = -702.5044243801171  E_coul = 200.0124575452521
cycle= 3 E= -502.491966834865  delta_E= -8.38e-10  |g|= 4.67e-07  |ddm|= 5.72e-06
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
E1 = -702.5044243801171  E_coul = 200.0124575452521
  HOMO = -0.21125692587291  LUMO = 395.589727527167
  mo_energy =
[-1.17585622e+02 -1.20852119e+01 -6.60009533e+00 -6.60009533e+00
 -6.60009533e+00 -1.13486426e+00 -2.11256926e-01 -2.11256926e-01
 -2.11256926e-01  3.95589728e+02  3.19988199e+03]
E1 = -702.5044243781995  E_coul = 200.01245754333434
Extra cycle  E= -502.491966834865  delta_E= -1.14e-13  |g|= 1.76e-09  |ddm|= 2.29e-09
    CPU time for scf_cycle      0.08 sec, wall time      0.08 sec
exp = [1.83315711e+03 4.53528844e+02 7.29282467e+01 4.74552079e+00
 3.50329757e-01 8.61017809e+00 5.09996559e-01]
E = -502.49196683486514
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((7, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.5820650117923668e+02,6.8360631861859034e+01,4.6647996209811691e+00,3.9711619128280629e-01,8.5710114329191196e+00,4.8957520672686806e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "5s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:40:32 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  1833.15710524        1
[INPUT] 0    0    [1    /1   ]  453.528844462        1
[INPUT] 0    0    [1    /1   ]  72.9282467419        1
[INPUT] 0    0    [1    /1   ]  4.74552079283        1
[INPUT] 0    0    [1    /1   ]  0.350329756615       1
[INPUT] 1    0    [1    /1   ]  8.61017809194        1
[INPUT] 1    0    [1    /1   ]  0.509996558774       1

nuclear repulsion = 0
number of shells = 7
number of NR pGTOs = 11
number of NR cGTOs = 11
basis = {'Ar': [[0, [1833.1571052378833, 1.0]], [0, [453.52884446175955, 1.0]], [0, [72.92824674186218, 1.0]], [0, [4.7455207928269045, 1.0]], [0, [0.3503297566149794, 1.0]], [1, [8.610178091941847, 1.0]], [1, [0.5099965587744407, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [1833.15710524]
bas 1, expnt(s) = [453.52884446]
bas 2, expnt(s) = [72.92824674]
bas 3, expnt(s) = [4.74552079]
bas 4, expnt(s) = [0.35032976]
bas 5, expnt(s) = [8.61017809]
bas 6, expnt(s) = [0.50999656]
CPU time:        40.10
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]
 [ 0  1  1  1  0 36 37  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.83315711e+03 7.07806895e+02 4.53528844e+02 2.48295420e+02
 7.29282467e+01 6.30502559e+01 4.74552079e+00 8.12321475e+00
 3.50329757e-01 1.15046337e+00 8.61017809e+00 4.30278415e+01
 5.09996559e-01 1.25731313e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.273936126351334
cond(S) = 11.493088234032967
E1 = -682.5991900796212  E_coul = 184.83269847597552
init E= -497.766491603646
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.69365920699869  LUMO = 393.985767057881
  mo_energy =
[-1.19116781e+02 -1.32005820e+01 -7.64719472e+00 -7.64719472e+00
 -7.64719472e+00 -1.63867665e+00 -6.93659207e-01 -6.93659207e-01
 -6.93659207e-01  3.93985767e+02  3.19829613e+03]
E1 = -702.5079352609749  E_coul = 200.01600503168672
cycle= 1 E= -502.491930229288  delta_E= -4.73  |g|= 0.18  |ddm|= 0.308
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.196761
diis-c [-0.03871496  1.        ]
  HOMO = -0.21124654125486  LUMO = 395.591263630218
  mo_energy =
[-1.17584297e+02 -1.20851176e+01 -6.59998934e+00 -6.59998934e+00
 -6.59998934e+00 -1.13485899e+00 -2.11246541e-01 -2.11246541e-01
 -2.11246541e-01  3.95591264e+02  3.19988645e+03]
E1 = -702.5044414079663  E_coul = 200.01247457393885
cycle= 2 E= -502.491966834027  delta_E= -3.66e-05  |g|= 0.000849  |ddm|= 0.00126
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.000996818
diis-c [-7.75263584e-08 -4.88826615e-03  1.00488827e+00]
  HOMO = -0.211256933968649  LUMO = 395.589727578335
  mo_energy =
[-1.17585622e+02 -1.20852119e+01 -6.60009535e+00 -6.60009535e+00
 -6.60009535e+00 -1.13486426e+00 -2.11256934e-01 -2.11256934e-01
 -2.11256934e-01  3.95589728e+02  3.19988199e+03]
E1 = -702.5044243801171  E_coul = 200.0124575452521
cycle= 3 E= -502.491966834865  delta_E= -8.38e-10  |g|= 4.67e-07  |ddm|= 5.72e-06
    CPU time for cycle= 3      0.01 sec, wall time      0.02 sec
E1 = -702.5044243801171  E_coul = 200.0124575452521
  HOMO = -0.21125692587291  LUMO = 395.589727527167
  mo_energy =
[-1.17585622e+02 -1.20852119e+01 -6.60009533e+00 -6.60009533e+00
 -6.60009533e+00 -1.13486426e+00 -2.11256926e-01 -2.11256926e-01
 -2.11256926e-01  3.95589728e+02  3.19988199e+03]
E1 = -702.5044243781995  E_coul = 200.01245754333434
Extra cycle  E= -502.491966834865  delta_E= -1.14e-13  |g|= 1.76e-09  |ddm|= 2.29e-09
    CPU time for scf_cycle      0.08 sec, wall time      0.08 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 11.493088234032967
E1 = -702.5044243781995  E_coul = 200.01245754333434
init E= -502.491966834865
    CPU time for initialize scf      0.05 sec, wall time      0.05 sec
  HOMO = -0.211256925865372  LUMO = 395.589727526481
  mo_energy =
[-1.17585622e+02 -1.20852119e+01 -6.60009533e+00 -6.60009533e+00
 -6.60009533e+00 -1.13486426e+00 -2.11256926e-01 -2.11256926e-01
 -2.11256926e-01  3.95589728e+02  3.19988199e+03]
E1 = -702.5044243781848  E_coul = 200.0124575433198
cycle= 1 E= -502.491966834865  delta_E= 1.14e-13  |g|= 1.1e-11  |ddm|= 8.57e-12
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -702.5044243781848  E_coul = 200.0124575433198
  HOMO = -0.211256925865407  LUMO = 395.589727526479
  mo_energy =
[-1.17585622e+02 -1.20852119e+01 -6.60009533e+00 -6.60009533e+00
 -6.60009533e+00 -1.13486426e+00 -2.11256926e-01 -2.11256926e-01
 -2.11256926e-01  3.95589728e+02  3.19988199e+03]
E1 = -702.5044243781845  E_coul = 200.01245754331967
Extra cycle  E= -502.491966834865  delta_E= 2.27e-13  |g|= 6.35e-13  |ddm|= 5.63e-14
    CPU time for scf_cycle      0.12 sec, wall time      0.12 sec
exp = [1.83315711e+03 4.53528844e+02 7.29282467e+01 4.74552079e+00
 3.50329757e-01 8.61017809e+00 5.09996559e-01]
grad_E = [-0.0016818   0.02162945  0.02006888  0.01290064 -0.85518705  0.02586267
  0.59006959]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((7, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.5820650117923668e+02,6.8360631861859034e+01,4.6647996209811691e+00,3.9711619128280629e-01,8.5710114329191196e+00,4.8957520672686806e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "5s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:40:35 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  1833.61312105        1
[INPUT] 0    0    [1    /1   ]  447.40454537         1
[INPUT] 0    0    [1    /1   ]  72.937197471         1
[INPUT] 0    0    [1    /1   ]  4.75249474461        1
[INPUT] 0    0    [1    /1   ]  0.315942928154       1
[INPUT] 1    0    [1    /1   ]  8.65771167205        1
[INPUT] 1    0    [1    /1   ]  0.527386378406       1

nuclear repulsion = 0
number of shells = 7
number of NR pGTOs = 11
number of NR cGTOs = 11
basis = {'Ar': [[0, [1833.6131210489723, 1.0]], [0, [447.4045453696665, 1.0]], [0, [72.93719747101466, 1.0]], [0, [4.752494744606172, 1.0]], [0, [0.31594292815396013, 1.0]], [1, [8.657711672047009, 1.0]], [1, [0.5273863784059407, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [1833.61312105]
bas 1, expnt(s) = [447.40454537]
bas 2, expnt(s) = [72.93719747]
bas 3, expnt(s) = [4.75249474]
bas 4, expnt(s) = [0.31594293]
bas 5, expnt(s) = [8.65771167]
bas 6, expnt(s) = [0.52738638]
CPU time:        42.91
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]
 [ 0  1  1  1  0 36 37  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.83361312e+03 7.07938947e+02 4.47404545e+02 2.45776479e+02
 7.29371975e+01 6.30560596e+01 4.75249474e+00 8.13216643e+00
 3.15942928e-01 1.06468590e+00 8.65771167e+00 4.33249720e+01
 5.27386378e-01 1.31112932e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.22765567525671
cond(S) = 11.415790573407257
E1 = -682.4002483687581  E_coul = 184.6169884505387
init E= -497.783259918219
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.706554483442316  LUMO = 389.496716393823
  mo_energy =
[-1.19159059e+02 -1.32125440e+01 -7.67513034e+00 -7.67513034e+00
 -7.67513034e+00 -1.61932892e+00 -7.06554483e-01 -7.06554483e-01
 -7.06554483e-01  3.89496716e+02  3.18084448e+03]
E1 = -702.9704749981902  E_coul = 200.4041705263288
cycle= 1 E= -502.566304471861  delta_E= -4.78  |g|= 0.18  |ddm|= 0.328
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.198438
diis-c [-0.0393777  1.       ]
  HOMO = -0.192166021574346  LUMO = 391.157717196362
  mo_energy =
[-1.17575164e+02 -1.20550150e+01 -6.58812130e+00 -6.58812130e+00
 -6.58812130e+00 -1.11004425e+00 -1.92166022e-01 -1.92166022e-01
 -1.92166022e-01  3.91157717e+02  3.18250852e+03]
E1 = -702.9670085035258  E_coul = 200.40066747733655
cycle= 2 E= -502.566341026189  delta_E= -3.66e-05  |g|= 0.000844  |ddm|= 0.00126
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.000987592
diis-c [-1.02286802e-07 -4.73091468e-03  1.00473091e+00]
  HOMO = -0.192177319378763  LUMO = 391.156250368165
  mo_energy =
[-1.17576465e+02 -1.20551100e+01 -6.58822964e+00 -6.58822964e+00
 -6.58822964e+00 -1.11004894e+00 -1.92177319e-01 -1.92177319e-01
 -1.92177319e-01  3.91156250e+02  3.18250423e+03]
E1 = -702.9669915950923  E_coul = 200.40065056806085
cycle= 3 E= -502.566341027031  delta_E= -8.42e-10  |g|= 6.73e-07  |ddm|= 5.78e-06
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
E1 = -702.9669915950923  E_coul = 200.40065056806085
  HOMO = -0.192177313217568  LUMO = 391.156250209535
  mo_energy =
[-1.17576465e+02 -1.20551100e+01 -6.58822964e+00 -6.58822964e+00
 -6.58822964e+00 -1.11004894e+00 -1.92177313e-01 -1.92177313e-01
 -1.92177313e-01  3.91156250e+02  3.18250422e+03]
E1 = -702.9669915905739  E_coul = 200.40065056354237
Extra cycle  E= -502.566341027032  delta_E= -1.14e-13  |g|= 3.98e-09  |ddm|= 3.17e-09
    CPU time for scf_cycle      0.08 sec, wall time      0.08 sec
exp = [1.83361312e+03 4.47404545e+02 7.29371975e+01 4.75249474e+00
 3.15942928e-01 8.65771167e+00 5.27386378e-01]
E = -502.5663410270315
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((7, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.5820650117923668e+02,6.8360631861859034e+01,4.6647996209811691e+00,3.9711619128280629e-01,8.5710114329191196e+00,4.8957520672686806e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "5s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:40:35 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  1833.61312105        1
[INPUT] 0    0    [1    /1   ]  447.40454537         1
[INPUT] 0    0    [1    /1   ]  72.937197471         1
[INPUT] 0    0    [1    /1   ]  4.75249474461        1
[INPUT] 0    0    [1    /1   ]  0.315942928154       1
[INPUT] 1    0    [1    /1   ]  8.65771167205        1
[INPUT] 1    0    [1    /1   ]  0.527386378406       1

nuclear repulsion = 0
number of shells = 7
number of NR pGTOs = 11
number of NR cGTOs = 11
basis = {'Ar': [[0, [1833.6131210489723, 1.0]], [0, [447.4045453696665, 1.0]], [0, [72.93719747101466, 1.0]], [0, [4.752494744606172, 1.0]], [0, [0.31594292815396013, 1.0]], [1, [8.657711672047009, 1.0]], [1, [0.5273863784059407, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [1833.61312105]
bas 1, expnt(s) = [447.40454537]
bas 2, expnt(s) = [72.93719747]
bas 3, expnt(s) = [4.75249474]
bas 4, expnt(s) = [0.31594293]
bas 5, expnt(s) = [8.65771167]
bas 6, expnt(s) = [0.52738638]
CPU time:        43.21
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]
 [ 0  1  1  1  0 36 37  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.83361312e+03 7.07938947e+02 4.47404545e+02 2.45776479e+02
 7.29371975e+01 6.30560596e+01 4.75249474e+00 8.13216643e+00
 3.15942928e-01 1.06468590e+00 8.65771167e+00 4.33249720e+01
 5.27386378e-01 1.31112932e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.22765567525671
cond(S) = 11.415790573407257
E1 = -682.4002483687581  E_coul = 184.6169884505387
init E= -497.783259918219
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.706554483442316  LUMO = 389.496716393823
  mo_energy =
[-1.19159059e+02 -1.32125440e+01 -7.67513034e+00 -7.67513034e+00
 -7.67513034e+00 -1.61932892e+00 -7.06554483e-01 -7.06554483e-01
 -7.06554483e-01  3.89496716e+02  3.18084448e+03]
E1 = -702.9704749981902  E_coul = 200.4041705263288
cycle= 1 E= -502.566304471861  delta_E= -4.78  |g|= 0.18  |ddm|= 0.328
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.198438
diis-c [-0.0393777  1.       ]
  HOMO = -0.192166021574346  LUMO = 391.157717196362
  mo_energy =
[-1.17575164e+02 -1.20550150e+01 -6.58812130e+00 -6.58812130e+00
 -6.58812130e+00 -1.11004425e+00 -1.92166022e-01 -1.92166022e-01
 -1.92166022e-01  3.91157717e+02  3.18250852e+03]
E1 = -702.9670085035258  E_coul = 200.40066747733655
cycle= 2 E= -502.566341026189  delta_E= -3.66e-05  |g|= 0.000844  |ddm|= 0.00126
    CPU time for cycle= 2      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.000987592
diis-c [-1.02286802e-07 -4.73091468e-03  1.00473091e+00]
  HOMO = -0.192177319378763  LUMO = 391.156250368165
  mo_energy =
[-1.17576465e+02 -1.20551100e+01 -6.58822964e+00 -6.58822964e+00
 -6.58822964e+00 -1.11004894e+00 -1.92177319e-01 -1.92177319e-01
 -1.92177319e-01  3.91156250e+02  3.18250423e+03]
E1 = -702.9669915950923  E_coul = 200.40065056806085
cycle= 3 E= -502.566341027031  delta_E= -8.42e-10  |g|= 6.73e-07  |ddm|= 5.78e-06
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
E1 = -702.9669915950923  E_coul = 200.40065056806085
  HOMO = -0.192177313217568  LUMO = 391.156250209535
  mo_energy =
[-1.17576465e+02 -1.20551100e+01 -6.58822964e+00 -6.58822964e+00
 -6.58822964e+00 -1.11004894e+00 -1.92177313e-01 -1.92177313e-01
 -1.92177313e-01  3.91156250e+02  3.18250422e+03]
E1 = -702.9669915905739  E_coul = 200.40065056354237
Extra cycle  E= -502.566341027032  delta_E= -1.14e-13  |g|= 3.98e-09  |ddm|= 3.17e-09
    CPU time for scf_cycle      0.08 sec, wall time      0.08 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 11.415790573407257
E1 = -702.9669915905739  E_coul = 200.40065056354237
init E= -502.566341027032
    CPU time for initialize scf      0.05 sec, wall time      0.05 sec
  HOMO = -0.192177313224128  LUMO = 391.156250208919
  mo_energy =
[-1.17576465e+02 -1.20551100e+01 -6.58822964e+00 -6.58822964e+00
 -6.58822964e+00 -1.11004894e+00 -1.92177313e-01 -1.92177313e-01
 -1.92177313e-01  3.91156250e+02  3.18250422e+03]
E1 = -702.9669915905486  E_coul = 200.40065056351705
cycle= 1 E= -502.566341027032  delta_E=    0  |g|= 3.03e-11  |ddm|= 1.95e-11
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -702.9669915905486  E_coul = 200.40065056351705
  HOMO = -0.192177313224253  LUMO = 391.156250208922
  mo_energy =
[-1.17576465e+02 -1.20551100e+01 -6.58822964e+00 -6.58822964e+00
 -6.58822964e+00 -1.11004894e+00 -1.92177313e-01 -1.92177313e-01
 -1.92177313e-01  3.91156250e+02  3.18250422e+03]
E1 = -702.9669915905486  E_coul = 200.400650563517
Extra cycle  E= -502.566341027032  delta_E= -5.68e-14  |g|= 1.19e-12  |ddm|= 1.44e-13
    CPU time for scf_cycle      0.12 sec, wall time      0.12 sec
exp = [1.83361312e+03 4.47404545e+02 7.29371975e+01 4.75249474e+00
 3.15942928e-01 8.65771167e+00 5.27386378e-01]
grad_E = [-0.00166716  0.02096987  0.03033132  0.02653901 -1.51594564  0.04682822
  1.04802189]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((7, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.5820650117923668e+02,6.8360631861859034e+01,4.6647996209811691e+00,3.9711619128280629e-01,8.5710114329191196e+00,4.8957520672686806e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "5s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:40:38 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  1834.85174092        1
[INPUT] 0    0    [1    /1   ]  430.788423751        1
[INPUT] 0    0    [1    /1   ]  72.5938941137        1
[INPUT] 0    0    [1    /1   ]  4.75984362112        1
[INPUT] 0    0    [1    /1   ]  0.26670950688        1
[INPUT] 1    0    [1    /1   ]  8.74217279531        1
[INPUT] 1    0    [1    /1   ]  0.558596937597       1

nuclear repulsion = 0
number of shells = 7
number of NR pGTOs = 11
number of NR cGTOs = 11
basis = {'Ar': [[0, [1834.8517409206947, 1.0]], [0, [430.78842375133524, 1.0]], [0, [72.59389411372453, 1.0]], [0, [4.759843621115593, 1.0]], [0, [0.26670950687967054, 1.0]], [1, [8.742172795310887, 1.0]], [1, [0.5585969375967264, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [1834.85174092]
bas 1, expnt(s) = [430.78842375]
bas 2, expnt(s) = [72.59389411]
bas 3, expnt(s) = [4.75984362]
bas 4, expnt(s) = [0.26670951]
bas 5, expnt(s) = [8.7421728]
bas 6, expnt(s) = [0.55859694]
CPU time:        46.07
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]
 [ 0  1  1  1  0 36 37  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.83485174e+03 7.08297580e+02 4.30788424e+02 2.38898291e+02
 7.25938941e+01 6.28333326e+01 4.75984362e+00 8.14159581e+00
 2.66709507e-01 9.37656776e-01 8.74217280e+00 4.38539408e+01
 5.58596938e-01 1.40882672e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.11005882692347
cond(S) = 11.214636283038024
E1 = -681.7628238857451  E_coul = 183.93231400670135
init E= -497.830509879044
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.742352361457313  LUMO = 376.170382799602
  mo_energy =
[-1.19311395e+02 -1.32583953e+01 -7.74410997e+00 -7.74410997e+00
 -7.74410997e+00 -1.58182548e+00 -7.42352361e-01 -7.42352361e-01
 -7.42352361e-01  3.76170383e+02  3.13191422e+03]
E1 = -703.9339702036481  E_coul = 201.16705551906645
cycle= 1 E= -502.766914684582  delta_E= -4.94  |g|= 0.184  |ddm|= 0.381
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.205003
diis-c [-0.04202603  1.        ]
  HOMO = -0.152257988951336  LUMO = 377.955620786356
  mo_energy =
[-1.17608314e+02 -1.20010957e+01 -6.56114580e+00 -6.56114580e+00
 -6.56114580e+00 -1.05032697e+00 -1.52257989e-01 -1.52257989e-01
 -1.52257989e-01  3.77955621e+02  3.13373763e+03]
E1 = -703.9305063575132  E_coul = 201.1635540189897
cycle= 2 E= -502.766952338524  delta_E= -3.77e-05  |g|= 0.000871  |ddm|= 0.00129
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00100581
diis-c [-1.83034308e-07 -4.46018120e-03  1.00446018e+00]
  HOMO = -0.152271349443746  LUMO = 377.954286050249
  mo_energy =
[-1.17609584e+02 -1.20011937e+01 -6.56126145e+00 -6.56126145e+00
 -6.56126145e+00 -1.05033090e+00 -1.52271349e-01 -1.52271349e-01
 -1.52271349e-01  3.77954286e+02  3.13373366e+03]
E1 = -703.9304893421958  E_coul = 201.16353700275167
cycle= 3 E= -502.766952339444  delta_E= -9.21e-10  |g|= 1.37e-06  |ddm|= 6.12e-06
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
E1 = -703.9304893421958  E_coul = 201.16353700275167
  HOMO = -0.152271348647356  LUMO = 377.954285824729
  mo_energy =
[-1.17609584e+02 -1.20011937e+01 -6.56126151e+00 -6.56126151e+00
 -6.56126151e+00 -1.05033090e+00 -1.52271349e-01 -1.52271349e-01
 -1.52271349e-01  3.77954286e+02  3.13373366e+03]
E1 = -703.9304893327204  E_coul = 201.16353699327584
Extra cycle  E= -502.766952339445  delta_E= -5.12e-13  |g|= 1.05e-08  |ddm|= 6.9e-09
    CPU time for scf_cycle      0.08 sec, wall time      0.09 sec
exp = [1.83485174e+03 4.30788424e+02 7.25938941e+01 4.75984362e+00
 2.66709507e-01 8.74217280e+00 5.58596938e-01]
E = -502.7669523394446
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((7, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.5820650117923668e+02,6.8360631861859034e+01,4.6647996209811691e+00,3.9711619128280629e-01,8.5710114329191196e+00,4.8957520672686806e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "5s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:40:38 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  1834.85174092        1
[INPUT] 0    0    [1    /1   ]  430.788423751        1
[INPUT] 0    0    [1    /1   ]  72.5938941137        1
[INPUT] 0    0    [1    /1   ]  4.75984362112        1
[INPUT] 0    0    [1    /1   ]  0.26670950688        1
[INPUT] 1    0    [1    /1   ]  8.74217279531        1
[INPUT] 1    0    [1    /1   ]  0.558596937597       1

nuclear repulsion = 0
number of shells = 7
number of NR pGTOs = 11
number of NR cGTOs = 11
basis = {'Ar': [[0, [1834.8517409206947, 1.0]], [0, [430.78842375133524, 1.0]], [0, [72.59389411372453, 1.0]], [0, [4.759843621115593, 1.0]], [0, [0.26670950687967054, 1.0]], [1, [8.742172795310887, 1.0]], [1, [0.5585969375967264, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [1834.85174092]
bas 1, expnt(s) = [430.78842375]
bas 2, expnt(s) = [72.59389411]
bas 3, expnt(s) = [4.75984362]
bas 4, expnt(s) = [0.26670951]
bas 5, expnt(s) = [8.7421728]
bas 6, expnt(s) = [0.55859694]
CPU time:        46.38
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]
 [ 0  1  1  1  0 36 37  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.83485174e+03 7.08297580e+02 4.30788424e+02 2.38898291e+02
 7.25938941e+01 6.28333326e+01 4.75984362e+00 8.14159581e+00
 2.66709507e-01 9.37656776e-01 8.74217280e+00 4.38539408e+01
 5.58596938e-01 1.40882672e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.11005882692347
cond(S) = 11.214636283038024
E1 = -681.7628238857451  E_coul = 183.93231400670135
init E= -497.830509879044
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.742352361457313  LUMO = 376.170382799602
  mo_energy =
[-1.19311395e+02 -1.32583953e+01 -7.74410997e+00 -7.74410997e+00
 -7.74410997e+00 -1.58182548e+00 -7.42352361e-01 -7.42352361e-01
 -7.42352361e-01  3.76170383e+02  3.13191422e+03]
E1 = -703.9339702036481  E_coul = 201.16705551906645
cycle= 1 E= -502.766914684582  delta_E= -4.94  |g|= 0.184  |ddm|= 0.381
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.205003
diis-c [-0.04202603  1.        ]
  HOMO = -0.152257988951336  LUMO = 377.955620786356
  mo_energy =
[-1.17608314e+02 -1.20010957e+01 -6.56114580e+00 -6.56114580e+00
 -6.56114580e+00 -1.05032697e+00 -1.52257989e-01 -1.52257989e-01
 -1.52257989e-01  3.77955621e+02  3.13373763e+03]
E1 = -703.9305063575132  E_coul = 201.1635540189897
cycle= 2 E= -502.766952338524  delta_E= -3.77e-05  |g|= 0.000871  |ddm|= 0.00129
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00100581
diis-c [-1.83034308e-07 -4.46018120e-03  1.00446018e+00]
  HOMO = -0.152271349443746  LUMO = 377.954286050249
  mo_energy =
[-1.17609584e+02 -1.20011937e+01 -6.56126145e+00 -6.56126145e+00
 -6.56126145e+00 -1.05033090e+00 -1.52271349e-01 -1.52271349e-01
 -1.52271349e-01  3.77954286e+02  3.13373366e+03]
E1 = -703.9304893421958  E_coul = 201.16353700275167
cycle= 3 E= -502.766952339444  delta_E= -9.21e-10  |g|= 1.37e-06  |ddm|= 6.12e-06
    CPU time for cycle= 3      0.01 sec, wall time      0.02 sec
E1 = -703.9304893421958  E_coul = 201.16353700275167
  HOMO = -0.152271348647356  LUMO = 377.954285824729
  mo_energy =
[-1.17609584e+02 -1.20011937e+01 -6.56126151e+00 -6.56126151e+00
 -6.56126151e+00 -1.05033090e+00 -1.52271349e-01 -1.52271349e-01
 -1.52271349e-01  3.77954286e+02  3.13373366e+03]
E1 = -703.9304893327204  E_coul = 201.16353699327584
Extra cycle  E= -502.766952339445  delta_E= -5.12e-13  |g|= 1.05e-08  |ddm|= 6.9e-09
    CPU time for scf_cycle      0.08 sec, wall time      0.08 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 11.214636283038024
E1 = -703.9304893327204  E_coul = 201.16353699327584
init E= -502.766952339445
    CPU time for initialize scf      0.06 sec, wall time      0.06 sec
  HOMO = -0.152271348693593  LUMO = 377.954285825384
  mo_energy =
[-1.17609584e+02 -1.20011937e+01 -6.56126151e+00 -6.56126151e+00
 -6.56126151e+00 -1.05033090e+00 -1.52271349e-01 -1.52271349e-01
 -1.52271349e-01  3.77954286e+02  3.13373366e+03]
E1 = -703.9304893326746  E_coul = 201.16353699323025
cycle= 1 E= -502.766952339444  delta_E= 2.27e-13  |g|= 8.73e-11  |ddm|= 5.13e-11
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -703.9304893326746  E_coul = 201.16353699323025
  HOMO = -0.152271348694002  LUMO = 377.954285825408
  mo_energy =
[-1.17609584e+02 -1.20011937e+01 -6.56126151e+00 -6.56126151e+00
 -6.56126151e+00 -1.05033090e+00 -1.52271349e-01 -1.52271349e-01
 -1.52271349e-01  3.77954286e+02  3.13373366e+03]
E1 = -703.9304893326741  E_coul = 201.16353699323
Extra cycle  E= -502.766952339444  delta_E= 1.71e-13  |g|= 9.74e-13  |ddm|= 4.04e-13
    CPU time for scf_cycle      0.13 sec, wall time      0.13 sec
exp = [1.83485174e+03 4.30788424e+02 7.25938941e+01 4.75984362e+00
 2.66709507e-01 8.74217280e+00 5.58596938e-01]
grad_E = [-1.61841233e-03  1.95172661e-02  4.90883229e-02  4.87014179e-02
 -2.62194845e+00  8.34684357e-02  1.83139742e+00]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((7, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.5820650117923668e+02,6.8360631861859034e+01,4.6647996209811691e+00,3.9711619128280629e-01,8.5710114329191196e+00,4.8957520672686806e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "5s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:40:41 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  1838.08527655        1
[INPUT] 0    0    [1    /1   ]  387.446144354        1
[INPUT] 0    0    [1    /1   ]  70.988341032         1
[INPUT] 0    0    [1    /1   ]  4.76083045623        1
[INPUT] 0    0    [1    /1   ]  0.205754835586       1
[INPUT] 1    0    [1    /1   ]  8.88976208151        1
[INPUT] 1    0    [1    /1   ]  0.614326050922       1

nuclear repulsion = 0
number of shells = 7
number of NR pGTOs = 11
number of NR cGTOs = 11
basis = {'Ar': [[0, [1838.0852765504187, 1.0]], [0, [387.4461443541265, 1.0]], [0, [70.98834103200664, 1.0]], [0, [4.760830456226122, 1.0]], [0, [0.2057548355858806, 1.0]], [1, [8.889762081507191, 1.0]], [1, [0.6143260509219214, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [1838.08527655]
bas 1, expnt(s) = [387.44614435]
bas 2, expnt(s) = [70.98834103]
bas 3, expnt(s) = [4.76083046]
bas 4, expnt(s) = [0.20575484]
bas 5, expnt(s) = [8.88976208]
bas 6, expnt(s) = [0.61432605]
CPU time:        49.25
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]
 [ 0  1  1  1  0 36 37  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.83808528e+03 7.09233542e+02 3.87446144e+02 2.20634555e+02
 7.09883410e+01 6.17881646e+01 4.76083046e+00 8.14286174e+00
 2.05754836e-01 7.71840498e-01 8.88976208e+00 4.47813380e+01
 6.14326051e-01 1.58665702e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 16.83178082715748
cond(S) = 10.810856643944808
E1 = -680.1821703889098  E_coul = 182.22756178789382
init E= -497.954608601016
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.825054179058528  LUMO = 339.284504499125
  mo_energy =
[-1.19733191e+02 -1.33820289e+01 -7.89692847e+00 -7.89692847e+00
 -7.89692847e+00 -1.52119302e+00 -8.25054179e-01 -8.25054179e-01
 -8.25054179e-01  3.39284504e+02  2.99976161e+03]
E1 = -705.9591354647654  E_coul = 202.68454079702343
cycle= 1 E= -503.274594667742  delta_E= -5.32  |g|= 0.215  |ddm|= 0.53
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.239326
diis-c [-0.05727707  1.        ]
  HOMO = -0.0643280310296335  LUMO = 341.331817139361
  mo_energy =
[-1.17768992e+02 -1.19044035e+01 -6.50002818e+00 -6.50002818e+00
 -6.50002818e+00 -9.28585063e-01 -6.43280310e-02 -6.43280310e-02
 -6.43280310e-02  3.41331817e+02  3.00191650e+03]
E1 = -705.9555201876057  E_coul = 202.6808798566181
cycle= 2 E= -503.274640330988  delta_E= -4.57e-05  |g|= 0.00111  |ddm|= 0.00146
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00124362
diis-c [-5.71071401e-07 -4.14404050e-03  1.00414404e+00]
  HOMO = -0.0643471249238635  LUMO = 341.330738177367
  mo_energy =
[-1.17770239e+02 -1.19045134e+01 -6.50016871e+00 -6.50016871e+00
 -6.50016871e+00 -9.28588233e-01 -6.43471249e-02 -6.43471249e-02
 -6.43471249e-02  3.41330738e+02  3.00191316e+03]
E1 = -705.955501696098  E_coul = 202.68086136360682
cycle= 3 E= -503.274640332491  delta_E= -1.5e-09  |g|= 3.73e-06  |ddm|= 7.85e-06
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=5.81389e-06
diis-c [-1.94553747e-12  3.13274166e-05 -7.55617751e-03  1.00752485e+00]
  HOMO = -0.0643471422340509  LUMO = 341.330738395764
  mo_energy =
[-1.17770240e+02 -1.19045135e+01 -6.50016894e+00 -6.50016894e+00
 -6.50016894e+00 -9.28588232e-01 -6.43471422e-02 -6.43471422e-02
 -6.43471422e-02  3.41330738e+02  3.00191317e+03]
E1 = -705.9555016757947  E_coul = 202.6808613433034
cycle= 4 E= -503.274640332491  delta_E= -1.14e-13  |g|= 7.33e-09  |ddm|= 2.06e-08
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -705.9555016757947  E_coul = 202.6808613433034
  HOMO = -0.064347142308967  LUMO = 341.330738401788
  mo_energy =
[-1.17770240e+02 -1.19045135e+01 -6.50016894e+00 -6.50016894e+00
 -6.50016894e+00 -9.28588232e-01 -6.43471423e-02 -6.43471423e-02
 -6.43471423e-02  3.41330738e+02  3.00191317e+03]
E1 = -705.9555016758434  E_coul = 202.6808613433518
Extra cycle  E= -503.274640332492  delta_E= -2.27e-13  |g|= 6.25e-11  |ddm|= 3.43e-11
    CPU time for scf_cycle      0.10 sec, wall time      0.10 sec
exp = [1.83808528e+03 3.87446144e+02 7.09883410e+01 4.76083046e+00
 2.05754836e-01 8.88976208e+00 6.14326051e-01]
E = -503.2746403324916
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((7, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.5820650117923668e+02,6.8360631861859034e+01,4.6647996209811691e+00,3.9711619128280629e-01,8.5710114329191196e+00,4.8957520672686806e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "5s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:40:41 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  1838.08527655        1
[INPUT] 0    0    [1    /1   ]  387.446144354        1
[INPUT] 0    0    [1    /1   ]  70.988341032         1
[INPUT] 0    0    [1    /1   ]  4.76083045623        1
[INPUT] 0    0    [1    /1   ]  0.205754835586       1
[INPUT] 1    0    [1    /1   ]  8.88976208151        1
[INPUT] 1    0    [1    /1   ]  0.614326050922       1

nuclear repulsion = 0
number of shells = 7
number of NR pGTOs = 11
number of NR cGTOs = 11
basis = {'Ar': [[0, [1838.0852765504187, 1.0]], [0, [387.4461443541265, 1.0]], [0, [70.98834103200664, 1.0]], [0, [4.760830456226122, 1.0]], [0, [0.2057548355858806, 1.0]], [1, [8.889762081507191, 1.0]], [1, [0.6143260509219214, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [1838.08527655]
bas 1, expnt(s) = [387.44614435]
bas 2, expnt(s) = [70.98834103]
bas 3, expnt(s) = [4.76083046]
bas 4, expnt(s) = [0.20575484]
bas 5, expnt(s) = [8.88976208]
bas 6, expnt(s) = [0.61432605]
CPU time:        49.60
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]
 [ 0  1  1  1  0 36 37  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.83808528e+03 7.09233542e+02 3.87446144e+02 2.20634555e+02
 7.09883410e+01 6.17881646e+01 4.76083046e+00 8.14286174e+00
 2.05754836e-01 7.71840498e-01 8.88976208e+00 4.47813380e+01
 6.14326051e-01 1.58665702e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 16.83178082715748
cond(S) = 10.810856643944808
E1 = -680.1821703889098  E_coul = 182.22756178789382
init E= -497.954608601016
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.825054179058528  LUMO = 339.284504499125
  mo_energy =
[-1.19733191e+02 -1.33820289e+01 -7.89692847e+00 -7.89692847e+00
 -7.89692847e+00 -1.52119302e+00 -8.25054179e-01 -8.25054179e-01
 -8.25054179e-01  3.39284504e+02  2.99976161e+03]
E1 = -705.9591354647654  E_coul = 202.68454079702343
cycle= 1 E= -503.274594667742  delta_E= -5.32  |g|= 0.215  |ddm|= 0.53
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.239326
diis-c [-0.05727707  1.        ]
  HOMO = -0.0643280310296335  LUMO = 341.331817139361
  mo_energy =
[-1.17768992e+02 -1.19044035e+01 -6.50002818e+00 -6.50002818e+00
 -6.50002818e+00 -9.28585063e-01 -6.43280310e-02 -6.43280310e-02
 -6.43280310e-02  3.41331817e+02  3.00191650e+03]
E1 = -705.9555201876057  E_coul = 202.6808798566181
cycle= 2 E= -503.274640330988  delta_E= -4.57e-05  |g|= 0.00111  |ddm|= 0.00146
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00124362
diis-c [-5.71071401e-07 -4.14404050e-03  1.00414404e+00]
  HOMO = -0.0643471249238635  LUMO = 341.330738177367
  mo_energy =
[-1.17770239e+02 -1.19045134e+01 -6.50016871e+00 -6.50016871e+00
 -6.50016871e+00 -9.28588233e-01 -6.43471249e-02 -6.43471249e-02
 -6.43471249e-02  3.41330738e+02  3.00191316e+03]
E1 = -705.955501696098  E_coul = 202.68086136360682
cycle= 3 E= -503.274640332491  delta_E= -1.5e-09  |g|= 3.73e-06  |ddm|= 7.85e-06
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=5.81389e-06
diis-c [-1.94553747e-12  3.13274166e-05 -7.55617751e-03  1.00752485e+00]
  HOMO = -0.0643471422340509  LUMO = 341.330738395764
  mo_energy =
[-1.17770240e+02 -1.19045135e+01 -6.50016894e+00 -6.50016894e+00
 -6.50016894e+00 -9.28588232e-01 -6.43471422e-02 -6.43471422e-02
 -6.43471422e-02  3.41330738e+02  3.00191317e+03]
E1 = -705.9555016757947  E_coul = 202.6808613433034
cycle= 4 E= -503.274640332491  delta_E= -1.14e-13  |g|= 7.33e-09  |ddm|= 2.06e-08
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -705.9555016757947  E_coul = 202.6808613433034
  HOMO = -0.064347142308967  LUMO = 341.330738401788
  mo_energy =
[-1.17770240e+02 -1.19045135e+01 -6.50016894e+00 -6.50016894e+00
 -6.50016894e+00 -9.28588232e-01 -6.43471423e-02 -6.43471423e-02
 -6.43471423e-02  3.41330738e+02  3.00191317e+03]
E1 = -705.9555016758434  E_coul = 202.6808613433518
Extra cycle  E= -503.274640332492  delta_E= -2.27e-13  |g|= 6.25e-11  |ddm|= 3.43e-11
    CPU time for scf_cycle      0.10 sec, wall time      0.10 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 10.810856643944808
E1 = -705.9555016758434  E_coul = 202.6808613433518
init E= -503.274640332492
    CPU time for initialize scf      0.05 sec, wall time      0.05 sec
  HOMO = -0.064347142309189  LUMO = 341.330738401838
  mo_energy =
[-1.17770240e+02 -1.19045135e+01 -6.50016894e+00 -6.50016894e+00
 -6.50016894e+00 -9.28588232e-01 -6.43471423e-02 -6.43471423e-02
 -6.43471423e-02  3.41330738e+02  3.00191317e+03]
E1 = -705.9555016758441  E_coul = 202.68086134335218
cycle= 1 E= -503.274640332492  delta_E= -3.41e-13  |g|= 1.01e-12  |ddm|= 2.68e-13
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -705.9555016758441  E_coul = 202.68086134335218
  HOMO = -0.0643471423091849  LUMO = 341.330738401838
  mo_energy =
[-1.17770240e+02 -1.19045135e+01 -6.50016894e+00 -6.50016894e+00
 -6.50016894e+00 -9.28588232e-01 -6.43471423e-02 -6.43471423e-02
 -6.43471423e-02  3.41330738e+02  3.00191317e+03]
E1 = -705.9555016758436  E_coul = 202.6808613433524
Extra cycle  E= -503.274640332491  delta_E= 6.82e-13  |g|= 6.4e-13  |ddm|= 7.02e-15
    CPU time for scf_cycle      0.12 sec, wall time      0.12 sec
exp = [1.83808528e+03 3.87446144e+02 7.09883410e+01 4.76083046e+00
 2.05754836e-01 8.88976208e+00 6.14326051e-01]
grad_E = [-1.37882749e-03  1.49318468e-02  8.66996902e-02  7.84799919e-02
 -4.22953255e+00  1.45181491e-01  3.10659930e+00]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((7, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.5820650117923668e+02,6.8360631861859034e+01,4.6647996209811691e+00,3.9711619128280629e-01,8.5710114329191196e+00,4.8957520672686806e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "5s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:40:44 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  1844.05924457        1
[INPUT] 0    0    [1    /1   ]  307.453652359        1
[INPUT] 0    0    [1    /1   ]  66.3743790234        1
[INPUT] 0    0    [1    /1   ]  4.73465032053        1
[INPUT] 0    0    [1    /1   ]  0.17322630895        1
[INPUT] 1    0    [1    /1   ]  9.05334565704        1
[INPUT] 1    0    [1    /1   ]  0.678705117025       1

nuclear repulsion = 0
number of shells = 7
number of NR pGTOs = 11
number of NR cGTOs = 11
basis = {'Ar': [[0, [1844.0592445691414, 1.0]], [0, [307.4536523593889, 1.0]], [0, [66.37437902336355, 1.0]], [0, [4.734650320533886, 1.0]], [0, [0.17322630894959404, 1.0]], [1, [9.053345657040513, 1.0]], [1, [0.6787051170246408, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [1844.05924457]
bas 1, expnt(s) = [307.45365236]
bas 2, expnt(s) = [66.37437902]
bas 3, expnt(s) = [4.73465032]
bas 4, expnt(s) = [0.17322631]
bas 5, expnt(s) = [9.05334566]
bas 6, expnt(s) = [0.67870512]
CPU time:        52.50
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]
 [ 0  1  1  1  0 36 37  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.84405924e+03 7.10961652e+02 3.07453652e+02 1.85502500e+02
 6.63743790e+01 5.87510155e+01 4.73465032e+00 8.10925498e+00
 1.73226309e-01 6.78383714e-01 9.05334566e+00 4.58137425e+01
 6.78705117e-01 1.79715608e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 16.526543156901713
cond(S) = 10.635666868402108
E1 = -679.1035845870791  E_coul = 180.9231674676834
init E= -498.180417119396
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.873606326951111  LUMO = 267.537951277193
  mo_energy =
[-1.20267143e+02 -1.34841708e+01 -8.02378832e+00 -8.02378832e+00
 -8.02378832e+00 -1.49871255e+00 -8.73606327e-01 -8.73606327e-01
 -8.73606327e-01  2.67537951e+02  2.74234982e+03]
E1 = -709.0261931994307  E_coul = 205.0045007803823
cycle= 1 E= -504.021692419048  delta_E= -5.84  |g|= 0.33  |ddm|= 0.72
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.375865
diis-c [-0.1412748  1.       ]
  HOMO = 0.0811945457845648  LUMO = 269.858424103548
  mo_energy =
[-1.18006686e+02 -1.17615603e+01 -6.38757694e+00 -6.38757694e+00
 -6.38757694e+00 -8.21245006e-01  8.11945458e-02  8.11945458e-02
  8.11945458e-02  2.69858424e+02  2.74485762e+03]
E1 = -709.0216394149835  E_coul = 204.99986034415502
cycle= 2 E= -504.021779070828  delta_E= -8.67e-05  |g|= 0.00203  |ddm|= 0.00219
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.0021369
diis-c [-2.39345391e-06 -3.93729719e-03  1.00393730e+00]
  HOMO = 0.08115830030183  LUMO = 269.857636094904
  mo_energy =
[-1.18008071e+02 -1.17617182e+01 -6.38780184e+00 -6.38780184e+00
 -6.38780184e+00 -8.21248644e-01  8.11583003e-02  8.11583003e-02
  8.11583003e-02  2.69857636e+02  2.74485509e+03]
E1 = -709.0216117909183  E_coul = 204.99983271478143
cycle= 3 E= -504.021779076137  delta_E= -5.31e-09  |g|= 1.14e-05  |ddm|= 1.56e-05
    CPU time for cycle= 3      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=1.5855e-05
diis-c [-3.41501973e-12  4.03492592e-05 -1.03234322e-02  1.01028308e+00]
  HOMO = 0.0811582042643897  LUMO = 269.857637608795
  mo_energy =
[-1.18008073e+02 -1.17617186e+01 -6.38780264e+00 -6.38780264e+00
 -6.38780264e+00 -8.21248645e-01  8.11582043e-02  8.11582043e-02
  8.11582043e-02  2.69857638e+02  2.74485510e+03]
E1 = -709.0216117160363  E_coul = 204.99983263989907
cycle= 4 E= -504.021779076137  delta_E= -3.41e-13  |g|= 1.05e-08  |ddm|= 8.12e-08
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -709.0216117160363  E_coul = 204.99983263989907
  HOMO = 0.0811582042058915  LUMO = 269.857637620588
  mo_energy =
[-1.18008073e+02 -1.17617186e+01 -6.38780264e+00 -6.38780264e+00
 -6.38780264e+00 -8.21248645e-01  8.11582042e-02  8.11582042e-02
  8.11582042e-02  2.69857638e+02  2.74485510e+03]
E1 = -709.0216117162198  E_coul = 204.99983264008236
Extra cycle  E= -504.021779076137  delta_E= -2.27e-13  |g|= 8.31e-11  |ddm|= 6.6e-11
    CPU time for scf_cycle      0.09 sec, wall time      0.10 sec
exp = [1.84405924e+03 3.07453652e+02 6.63743790e+01 4.73465032e+00
 1.73226309e-01 9.05334566e+00 6.78705117e-01]
E = -504.0217790761375
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((7, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.5820650117923668e+02,6.8360631861859034e+01,4.6647996209811691e+00,3.9711619128280629e-01,8.5710114329191196e+00,4.8957520672686806e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "5s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:40:45 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  1844.05924457        1
[INPUT] 0    0    [1    /1   ]  307.453652359        1
[INPUT] 0    0    [1    /1   ]  66.3743790234        1
[INPUT] 0    0    [1    /1   ]  4.73465032053        1
[INPUT] 0    0    [1    /1   ]  0.17322630895        1
[INPUT] 1    0    [1    /1   ]  9.05334565704        1
[INPUT] 1    0    [1    /1   ]  0.678705117025       1

nuclear repulsion = 0
number of shells = 7
number of NR pGTOs = 11
number of NR cGTOs = 11
basis = {'Ar': [[0, [1844.0592445691414, 1.0]], [0, [307.4536523593889, 1.0]], [0, [66.37437902336355, 1.0]], [0, [4.734650320533886, 1.0]], [0, [0.17322630894959404, 1.0]], [1, [9.053345657040513, 1.0]], [1, [0.6787051170246408, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [1844.05924457]
bas 1, expnt(s) = [307.45365236]
bas 2, expnt(s) = [66.37437902]
bas 3, expnt(s) = [4.73465032]
bas 4, expnt(s) = [0.17322631]
bas 5, expnt(s) = [9.05334566]
bas 6, expnt(s) = [0.67870512]
CPU time:        52.86
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]
 [ 0  1  1  1  0 36 37  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.84405924e+03 7.10961652e+02 3.07453652e+02 1.85502500e+02
 6.63743790e+01 5.87510155e+01 4.73465032e+00 8.10925498e+00
 1.73226309e-01 6.78383714e-01 9.05334566e+00 4.58137425e+01
 6.78705117e-01 1.79715608e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 16.526543156901713
cond(S) = 10.635666868402108
E1 = -679.1035845870791  E_coul = 180.9231674676834
init E= -498.180417119396
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.873606326951111  LUMO = 267.537951277193
  mo_energy =
[-1.20267143e+02 -1.34841708e+01 -8.02378832e+00 -8.02378832e+00
 -8.02378832e+00 -1.49871255e+00 -8.73606327e-01 -8.73606327e-01
 -8.73606327e-01  2.67537951e+02  2.74234982e+03]
E1 = -709.0261931994307  E_coul = 205.0045007803823
cycle= 1 E= -504.021692419048  delta_E= -5.84  |g|= 0.33  |ddm|= 0.72
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.375865
diis-c [-0.1412748  1.       ]
  HOMO = 0.0811945457845648  LUMO = 269.858424103548
  mo_energy =
[-1.18006686e+02 -1.17615603e+01 -6.38757694e+00 -6.38757694e+00
 -6.38757694e+00 -8.21245006e-01  8.11945458e-02  8.11945458e-02
  8.11945458e-02  2.69858424e+02  2.74485762e+03]
E1 = -709.0216394149835  E_coul = 204.99986034415502
cycle= 2 E= -504.021779070828  delta_E= -8.67e-05  |g|= 0.00203  |ddm|= 0.00219
    CPU time for cycle= 2      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.0021369
diis-c [-2.39345391e-06 -3.93729719e-03  1.00393730e+00]
  HOMO = 0.08115830030183  LUMO = 269.857636094904
  mo_energy =
[-1.18008071e+02 -1.17617182e+01 -6.38780184e+00 -6.38780184e+00
 -6.38780184e+00 -8.21248644e-01  8.11583003e-02  8.11583003e-02
  8.11583003e-02  2.69857636e+02  2.74485509e+03]
E1 = -709.0216117909183  E_coul = 204.99983271478143
cycle= 3 E= -504.021779076137  delta_E= -5.31e-09  |g|= 1.14e-05  |ddm|= 1.56e-05
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=1.5855e-05
diis-c [-3.41501973e-12  4.03492592e-05 -1.03234322e-02  1.01028308e+00]
  HOMO = 0.0811582042643897  LUMO = 269.857637608795
  mo_energy =
[-1.18008073e+02 -1.17617186e+01 -6.38780264e+00 -6.38780264e+00
 -6.38780264e+00 -8.21248645e-01  8.11582043e-02  8.11582043e-02
  8.11582043e-02  2.69857638e+02  2.74485510e+03]
E1 = -709.0216117160363  E_coul = 204.99983263989907
cycle= 4 E= -504.021779076137  delta_E= -3.41e-13  |g|= 1.05e-08  |ddm|= 8.12e-08
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -709.0216117160363  E_coul = 204.99983263989907
  HOMO = 0.0811582042058915  LUMO = 269.857637620588
  mo_energy =
[-1.18008073e+02 -1.17617186e+01 -6.38780264e+00 -6.38780264e+00
 -6.38780264e+00 -8.21248645e-01  8.11582042e-02  8.11582042e-02
  8.11582042e-02  2.69857638e+02  2.74485510e+03]
E1 = -709.0216117162198  E_coul = 204.99983264008236
Extra cycle  E= -504.021779076137  delta_E= -2.27e-13  |g|= 8.31e-11  |ddm|= 6.6e-11
    CPU time for scf_cycle      0.10 sec, wall time      0.10 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 10.635666868402108
E1 = -709.0216117162198  E_coul = 204.99983264008236
init E= -504.021779076137
    CPU time for initialize scf      0.06 sec, wall time      0.06 sec
  HOMO = 0.081158204206031  LUMO = 269.857637620681
  mo_energy =
[-1.18008073e+02 -1.17617186e+01 -6.38780264e+00 -6.38780264e+00
 -6.38780264e+00 -8.21248645e-01  8.11582042e-02  8.11582042e-02
  8.11582042e-02  2.69857638e+02  2.74485510e+03]
E1 = -709.0216117162205  E_coul = 204.99983264008347
cycle= 1 E= -504.021779076137  delta_E= 4.55e-13  |g|= 6.78e-13  |ddm|= 4.52e-13
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -709.0216117162205  E_coul = 204.99983264008347
  HOMO = 0.0811582042060287  LUMO = 269.857637620682
  mo_energy =
[-1.18008073e+02 -1.17617186e+01 -6.38780264e+00 -6.38780264e+00
 -6.38780264e+00 -8.21248645e-01  8.11582042e-02  8.11582042e-02
  8.11582042e-02  2.69857638e+02  2.74485510e+03]
E1 = -709.0216117162206  E_coul = 204.99983264008344
Extra cycle  E= -504.021779076137  delta_E= -1.14e-13  |g|= 8.06e-13  |ddm|= 3.81e-15
    CPU time for scf_cycle      0.13 sec, wall time      0.14 sec
exp = [1.84405924e+03 3.07453652e+02 6.63743790e+01 4.73465032e+00
 1.73226309e-01 9.05334566e+00 6.78705117e-01]
grad_E = [-3.17327000e-04 -2.43033788e-03  1.49935664e-01  8.19005847e-02
 -4.97646029e+00  2.08346381e-01  4.51340075e+00]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((7, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.5820650117923668e+02,6.8360631861859034e+01,4.6647996209811691e+00,3.9711619128280629e-01,8.5710114329191196e+00,4.8957520672686806e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "5s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:40:48 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  1845.61675313        1
[INPUT] 0    0    [1    /1   ]  286.742162052        1
[INPUT] 0    0    [1    /1   ]  62.3234181922        1
[INPUT] 0    0    [1    /1   ]  4.69457709794        1
[INPUT] 0    0    [1    /1   ]  0.224175597458       1
[INPUT] 1    0    [1    /1   ]  8.96867821744        1
[INPUT] 1    0    [1    /1   ]  0.645550479914       1

nuclear repulsion = 0
number of shells = 7
number of NR pGTOs = 11
number of NR cGTOs = 11
basis = {'Ar': [[0, [1845.6167531256747, 1.0]], [0, [286.74216205229993, 1.0]], [0, [62.323418192239615, 1.0]], [0, [4.694577097944286, 1.0]], [0, [0.2241755974577187, 1.0]], [1, [8.968678217438347, 1.0]], [1, [0.6455504799141092, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [1845.61675313]
bas 1, expnt(s) = [286.74216205]
bas 2, expnt(s) = [62.32341819]
bas 3, expnt(s) = [4.6945771]
bas 4, expnt(s) = [0.2241756]
bas 5, expnt(s) = [8.96867822]
bas 6, expnt(s) = [0.64555048]
CPU time:        55.88
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]
 [ 0  1  1  1  0 36 37  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.84561675e+03 7.11411968e+02 2.86742162e+02 1.76049052e+02
 6.23234182e+01 5.60406898e+01 4.69457710e+00 8.05772388e+00
 2.24175597e-01 8.23106964e-01 8.96867822e+00 4.52788039e+01
 6.45550480e-01 1.68809605e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 16.80696193877019
cond(S) = 10.388228239043514
E1 = -683.6454872563777  E_coul = 183.61456798254264
init E= -500.030919273835
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.746707344629423  LUMO = 241.476486980187
  mo_energy =
[-1.20377925e+02 -1.33126039e+01 -7.80936141e+00 -7.80936141e+00
 -7.80936141e+00 -1.55440726e+00 -7.46707345e-01 -7.46707345e-01
 -7.46707345e-01  2.41476487e+02  2.66416158e+03]
E1 = -709.4849445575168  E_coul = 204.62690119126003
cycle= 1 E= -504.858043366257  delta_E= -4.83  |g|= 0.319  |ddm|= 0.569
    CPU time for cycle= 1      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.362538
diis-c [-0.13143375  1.        ]
  HOMO = 0.0467778600821068  LUMO = 243.501502868475
  mo_energy =
[-1.18390514e+02 -1.18054357e+01 -6.38097040e+00 -6.38097040e+00
 -6.38097040e+00 -9.17093394e-01  4.67778601e-02  4.67778601e-02
  4.67778601e-02  2.43501503e+02  2.66627255e+03]
E1 = -709.4790533770116  E_coul = 204.62090918545402
cycle= 2 E= -504.858144191558  delta_E= -0.000101  |g|= 0.00211  |ddm|= 0.00267
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.002202
diis-c [-2.87545370e-06 -3.88991404e-03  1.00388991e+00]
  HOMO = 0.0467350747724468  LUMO = 243.500408983305
  mo_energy =
[-1.18392332e+02 -1.18056338e+01 -6.38125637e+00 -6.38125637e+00
 -6.38125637e+00 -9.17099516e-01  4.67350748e-02  4.67350748e-02
  4.67350748e-02  2.43500409e+02  2.66626896e+03]
E1 = -709.4790148409069  E_coul = 204.62087064240572
cycle= 3 E= -504.858144198501  delta_E= -6.94e-09  |g|= 1.38e-05  |ddm|= 2e-05
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=1.86917e-05
diis-c [-3.86340565e-12  4.30258194e-05 -1.11262807e-02  1.01108325e+00]
  HOMO = 0.0467349461577763  LUMO = 243.500409542132
  mo_energy =
[-1.18392335e+02 -1.18056344e+01 -6.38125751e+00 -6.38125751e+00
 -6.38125751e+00 -9.17099521e-01  4.67349462e-02  4.67349462e-02
  4.67349462e-02  2.43500410e+02  2.66626897e+03]
E1 = -709.4790147072466  E_coul = 204.62087050874464
cycle= 4 E= -504.858144198502  delta_E= -8.53e-13  |g|= 1.35e-08  |ddm|= 1.13e-07
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -709.4790147072466  E_coul = 204.62087050874464
  HOMO = 0.0467349461455868  LUMO = 243.500409558188
  mo_energy =
[-1.18392335e+02 -1.18056344e+01 -6.38125750e+00 -6.38125750e+00
 -6.38125750e+00 -9.17099521e-01  4.67349461e-02  4.67349461e-02
  4.67349461e-02  2.43500410e+02  2.66626897e+03]
E1 = -709.479014707526  E_coul = 204.62087050902431
Extra cycle  E= -504.858144198502  delta_E= 3.41e-13  |g|= 1.08e-10  |ddm|= 9.2e-11
    CPU time for scf_cycle      0.11 sec, wall time      0.12 sec
exp = [1.84561675e+03 2.86742162e+02 6.23234182e+01 4.69457710e+00
 2.24175597e-01 8.96867822e+00 6.45550480e-01]
E = -504.85814419850163
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((7, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.5820650117923668e+02,6.8360631861859034e+01,4.6647996209811691e+00,3.9711619128280629e-01,8.5710114329191196e+00,4.8957520672686806e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "5s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:40:48 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  1845.61675313        1
[INPUT] 0    0    [1    /1   ]  286.742162052        1
[INPUT] 0    0    [1    /1   ]  62.3234181922        1
[INPUT] 0    0    [1    /1   ]  4.69457709794        1
[INPUT] 0    0    [1    /1   ]  0.224175597458       1
[INPUT] 1    0    [1    /1   ]  8.96867821744        1
[INPUT] 1    0    [1    /1   ]  0.645550479914       1

nuclear repulsion = 0
number of shells = 7
number of NR pGTOs = 11
number of NR cGTOs = 11
basis = {'Ar': [[0, [1845.6167531256747, 1.0]], [0, [286.74216205229993, 1.0]], [0, [62.323418192239615, 1.0]], [0, [4.694577097944286, 1.0]], [0, [0.2241755974577187, 1.0]], [1, [8.968678217438347, 1.0]], [1, [0.6455504799141092, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [1845.61675313]
bas 1, expnt(s) = [286.74216205]
bas 2, expnt(s) = [62.32341819]
bas 3, expnt(s) = [4.6945771]
bas 4, expnt(s) = [0.2241756]
bas 5, expnt(s) = [8.96867822]
bas 6, expnt(s) = [0.64555048]
CPU time:        56.32
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]
 [ 0  1  1  1  0 36 37  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.84561675e+03 7.11411968e+02 2.86742162e+02 1.76049052e+02
 6.23234182e+01 5.60406898e+01 4.69457710e+00 8.05772388e+00
 2.24175597e-01 8.23106964e-01 8.96867822e+00 4.52788039e+01
 6.45550480e-01 1.68809605e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 16.80696193877019
cond(S) = 10.388228239043514
E1 = -683.6454872563777  E_coul = 183.61456798254264
init E= -500.030919273835
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.746707344629423  LUMO = 241.476486980187
  mo_energy =
[-1.20377925e+02 -1.33126039e+01 -7.80936141e+00 -7.80936141e+00
 -7.80936141e+00 -1.55440726e+00 -7.46707345e-01 -7.46707345e-01
 -7.46707345e-01  2.41476487e+02  2.66416158e+03]
E1 = -709.4849445575168  E_coul = 204.62690119126003
cycle= 1 E= -504.858043366257  delta_E= -4.83  |g|= 0.319  |ddm|= 0.569
    CPU time for cycle= 1      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.362538
diis-c [-0.13143375  1.        ]
  HOMO = 0.0467778600821068  LUMO = 243.501502868475
  mo_energy =
[-1.18390514e+02 -1.18054357e+01 -6.38097040e+00 -6.38097040e+00
 -6.38097040e+00 -9.17093394e-01  4.67778601e-02  4.67778601e-02
  4.67778601e-02  2.43501503e+02  2.66627255e+03]
E1 = -709.4790533770116  E_coul = 204.62090918545402
cycle= 2 E= -504.858144191558  delta_E= -0.000101  |g|= 0.00211  |ddm|= 0.00267
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.002202
diis-c [-2.87545370e-06 -3.88991404e-03  1.00388991e+00]
  HOMO = 0.0467350747724468  LUMO = 243.500408983305
  mo_energy =
[-1.18392332e+02 -1.18056338e+01 -6.38125637e+00 -6.38125637e+00
 -6.38125637e+00 -9.17099516e-01  4.67350748e-02  4.67350748e-02
  4.67350748e-02  2.43500409e+02  2.66626896e+03]
E1 = -709.4790148409069  E_coul = 204.62087064240572
cycle= 3 E= -504.858144198501  delta_E= -6.94e-09  |g|= 1.38e-05  |ddm|= 2e-05
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=1.86917e-05
diis-c [-3.86340565e-12  4.30258194e-05 -1.11262807e-02  1.01108325e+00]
  HOMO = 0.0467349461577763  LUMO = 243.500409542132
  mo_energy =
[-1.18392335e+02 -1.18056344e+01 -6.38125751e+00 -6.38125751e+00
 -6.38125751e+00 -9.17099521e-01  4.67349462e-02  4.67349462e-02
  4.67349462e-02  2.43500410e+02  2.66626897e+03]
E1 = -709.4790147072466  E_coul = 204.62087050874464
cycle= 4 E= -504.858144198502  delta_E= -8.53e-13  |g|= 1.35e-08  |ddm|= 1.13e-07
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -709.4790147072466  E_coul = 204.62087050874464
  HOMO = 0.0467349461455868  LUMO = 243.500409558188
  mo_energy =
[-1.18392335e+02 -1.18056344e+01 -6.38125750e+00 -6.38125750e+00
 -6.38125750e+00 -9.17099521e-01  4.67349461e-02  4.67349461e-02
  4.67349461e-02  2.43500410e+02  2.66626897e+03]
E1 = -709.479014707526  E_coul = 204.62087050902431
Extra cycle  E= -504.858144198502  delta_E= 3.41e-13  |g|= 1.08e-10  |ddm|= 9.2e-11
    CPU time for scf_cycle      0.11 sec, wall time      0.11 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 10.388228239043514
E1 = -709.479014707526  E_coul = 204.62087050902431
init E= -504.858144198502
    CPU time for initialize scf      0.05 sec, wall time      0.06 sec
  HOMO = 0.0467349461459715  LUMO = 243.500409558312
  mo_energy =
[-1.18392335e+02 -1.18056344e+01 -6.38125750e+00 -6.38125750e+00
 -6.38125750e+00 -9.17099521e-01  4.67349461e-02  4.67349461e-02
  4.67349461e-02  2.43500410e+02  2.66626897e+03]
E1 = -709.4790147075283  E_coul = 204.6208705090261
cycle= 1 E= -504.858144198502  delta_E= -6.25e-13  |g|= 1.33e-12  |ddm|= 6.36e-13
    CPU time for cycle= 1      0.01 sec, wall time      0.02 sec
E1 = -709.4790147075283  E_coul = 204.6208705090261
  HOMO = 0.0467349461459679  LUMO = 243.500409558312
  mo_energy =
[-1.18392335e+02 -1.18056344e+01 -6.38125750e+00 -6.38125750e+00
 -6.38125750e+00 -9.17099521e-01  4.67349461e-02  4.67349461e-02
  4.67349461e-02  2.43500410e+02  2.66626897e+03]
E1 = -709.4790147075274  E_coul = 204.62087050902593
Extra cycle  E= -504.858144198501  delta_E= 7.96e-13  |g|= 7.97e-13  |ddm|= 1.4e-14
    CPU time for scf_cycle      0.13 sec, wall time      0.13 sec
exp = [1.84561675e+03 2.86742162e+02 6.23234182e+01 4.69457710e+00
 2.24175597e-01 8.96867822e+00 6.45550480e-01]
grad_E = [-3.91974492e-05 -3.94419049e-03  1.11903729e-01  2.77898301e-02
 -3.36523519e+00  1.66015115e-01  3.99658346e+00]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((7, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.5820650117923668e+02,6.8360631861859034e+01,4.6647996209811691e+00,3.9711619128280629e-01,8.5710114329191196e+00,4.8957520672686806e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "5s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:40:52 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  1846.97935853        1
[INPUT] 0    0    [1    /1   ]  268.893120766        1
[INPUT] 0    0    [1    /1   ]  53.3814968207        1
[INPUT] 0    0    [1    /1   ]  4.69566610283        1
[INPUT] 0    0    [1    /1   ]  0.353920766          1
[INPUT] 1    0    [1    /1   ]  8.54679471899        1
[INPUT] 1    0    [1    /1   ]  0.458844365599       1

nuclear repulsion = 0
number of shells = 7
number of NR pGTOs = 11
number of NR cGTOs = 11
basis = {'Ar': [[0, [1846.979358525026, 1.0]], [0, [268.8931207662574, 1.0]], [0, [53.38149682067828, 1.0]], [0, [4.695666102825585, 1.0]], [0, [0.35392076599950684, 1.0]], [1, [8.546794718985394, 1.0]], [1, [0.45884436559897357, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [1846.97935853]
bas 1, expnt(s) = [268.89312077]
bas 2, expnt(s) = [53.38149682]
bas 3, expnt(s) = [4.6956661]
bas 4, expnt(s) = [0.35392077]
bas 5, expnt(s) = [8.54679472]
bas 6, expnt(s) = [0.45884437]
CPU time:        59.81
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]
 [ 0  1  1  1  0 36 37  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.84697936e+03 7.11805854e+02 2.68893121e+02 1.67764394e+02
 5.33814968e+01 4.98951215e+01 4.69566610e+00 8.05912571e+00
 3.53920766e-01 1.15929659e+00 8.54679472e+00 4.26322726e+01
 4.58844366e-01 1.10170710e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.347687373670865
cond(S) = 9.572925572237573
E1 = -684.693929628563  E_coul = 182.67203568894917
init E= -502.021893939614
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.744599884143687  LUMO = 203.747322089259
  mo_energy =
[-1.20993732e+02 -1.34063529e+01 -7.77777101e+00 -7.77777101e+00
 -7.77777101e+00 -1.68146584e+00 -7.44599884e-01 -7.44599884e-01
 -7.44599884e-01  2.03747322e+02  2.57710111e+03]
E1 = -701.7870219543325  E_coul = 196.05707134856598
cycle= 1 E= -505.729950605767  delta_E= -3.71  |g|= 0.232  |ddm|= 0.292
    CPU time for cycle= 1      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.214616
diis-c [-0.04605989  1.        ]
  HOMO = -0.328041329898432  LUMO = 205.056330661062
  mo_energy =
[-1.19702290e+02 -1.24072733e+01 -6.83853137e+00 -6.83853137e+00
 -6.83853137e+00 -1.22721196e+00 -3.28041330e-01 -3.28041330e-01
 -3.28041330e-01  2.05056331e+02  2.57817078e+03]
E1 = -701.7780366613405  E_coul = 196.04797690633072
cycle= 2 E= -505.73005975501  delta_E= -0.000109  |g|= 0.00182  |ddm|= 0.0034
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00184434
diis-c [-2.60841530e-06 -4.16717878e-03  1.00416718e+00]
  HOMO = -0.328072469745407  LUMO = 205.054229386564
  mo_energy =
[-1.19705284e+02 -1.24075440e+01 -6.83893000e+00 -6.83893000e+00
 -6.83893000e+00 -1.22722527e+00 -3.28072470e-01 -3.28072470e-01
 -3.28072470e-01  2.05054229e+02  2.57816345e+03]
E1 = -701.7779743835932  E_coul = 196.04791462094732
cycle= 3 E= -505.730059762646  delta_E= -7.64e-09  |g|= 1.37e-05  |ddm|= 2.58e-05
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=1.90294e-05
diis-c [-9.28895476e-12  4.71859889e-05 -1.18118819e-02  1.01176470e+00]
  HOMO = -0.328072554606396  LUMO = 205.05422708476
  mo_energy =
[-1.19705290e+02 -1.24075448e+01 -6.83893153e+00 -6.83893153e+00
 -6.83893153e+00 -1.22722529e+00 -3.28072555e-01 -3.28072555e-01
 -3.28072555e-01  2.05054227e+02  2.57816345e+03]
E1 = -701.7779741483536  E_coul = 196.04791438570712
cycle= 4 E= -505.730059762646  delta_E= -5.12e-13  |g|= 2.48e-08  |ddm|= 1.44e-07
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -701.7779741483536  E_coul = 196.04791438570712
  HOMO = -0.328072554570091  LUMO = 205.054227113001
  mo_energy =
[-1.19705290e+02 -1.24075448e+01 -6.83893153e+00 -6.83893153e+00
 -6.83893153e+00 -1.22722529e+00 -3.28072555e-01 -3.28072555e-01
 -3.28072555e-01  2.05054227e+02  2.57816345e+03]
E1 = -701.7779741487872  E_coul = 196.04791438614077
Extra cycle  E= -505.730059762646  delta_E=    0  |g|= 2.12e-10  |ddm|= 1.44e-10
    CPU time for scf_cycle      0.11 sec, wall time      0.11 sec
exp = [1.84697936e+03 2.68893121e+02 5.33814968e+01 4.69566610e+00
 3.53920766e-01 8.54679472e+00 4.58844366e-01]
E = -505.7300597626464
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((7, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.5820650117923668e+02,6.8360631861859034e+01,4.6647996209811691e+00,3.9711619128280629e-01,8.5710114329191196e+00,4.8957520672686806e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "5s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:40:52 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  1846.97935853        1
[INPUT] 0    0    [1    /1   ]  268.893120766        1
[INPUT] 0    0    [1    /1   ]  53.3814968207        1
[INPUT] 0    0    [1    /1   ]  4.69566610283        1
[INPUT] 0    0    [1    /1   ]  0.353920766          1
[INPUT] 1    0    [1    /1   ]  8.54679471899        1
[INPUT] 1    0    [1    /1   ]  0.458844365599       1

nuclear repulsion = 0
number of shells = 7
number of NR pGTOs = 11
number of NR cGTOs = 11
basis = {'Ar': [[0, [1846.979358525026, 1.0]], [0, [268.8931207662574, 1.0]], [0, [53.38149682067828, 1.0]], [0, [4.695666102825585, 1.0]], [0, [0.35392076599950684, 1.0]], [1, [8.546794718985394, 1.0]], [1, [0.45884436559897357, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [1846.97935853]
bas 1, expnt(s) = [268.89312077]
bas 2, expnt(s) = [53.38149682]
bas 3, expnt(s) = [4.6956661]
bas 4, expnt(s) = [0.35392077]
bas 5, expnt(s) = [8.54679472]
bas 6, expnt(s) = [0.45884437]
CPU time:        60.24
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]
 [ 0  1  1  1  0 36 37  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.84697936e+03 7.11805854e+02 2.68893121e+02 1.67764394e+02
 5.33814968e+01 4.98951215e+01 4.69566610e+00 8.05912571e+00
 3.53920766e-01 1.15929659e+00 8.54679472e+00 4.26322726e+01
 4.58844366e-01 1.10170710e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.347687373670865
cond(S) = 9.572925572237573
E1 = -684.693929628563  E_coul = 182.67203568894917
init E= -502.021893939614
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.744599884143687  LUMO = 203.747322089259
  mo_energy =
[-1.20993732e+02 -1.34063529e+01 -7.77777101e+00 -7.77777101e+00
 -7.77777101e+00 -1.68146584e+00 -7.44599884e-01 -7.44599884e-01
 -7.44599884e-01  2.03747322e+02  2.57710111e+03]
E1 = -701.7870219543325  E_coul = 196.05707134856598
cycle= 1 E= -505.729950605767  delta_E= -3.71  |g|= 0.232  |ddm|= 0.292
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.214616
diis-c [-0.04605989  1.        ]
  HOMO = -0.328041329898432  LUMO = 205.056330661062
  mo_energy =
[-1.19702290e+02 -1.24072733e+01 -6.83853137e+00 -6.83853137e+00
 -6.83853137e+00 -1.22721196e+00 -3.28041330e-01 -3.28041330e-01
 -3.28041330e-01  2.05056331e+02  2.57817078e+03]
E1 = -701.7780366613405  E_coul = 196.04797690633072
cycle= 2 E= -505.73005975501  delta_E= -0.000109  |g|= 0.00182  |ddm|= 0.0034
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00184434
diis-c [-2.60841530e-06 -4.16717878e-03  1.00416718e+00]
  HOMO = -0.328072469745407  LUMO = 205.054229386564
  mo_energy =
[-1.19705284e+02 -1.24075440e+01 -6.83893000e+00 -6.83893000e+00
 -6.83893000e+00 -1.22722527e+00 -3.28072470e-01 -3.28072470e-01
 -3.28072470e-01  2.05054229e+02  2.57816345e+03]
E1 = -701.7779743835932  E_coul = 196.04791462094732
cycle= 3 E= -505.730059762646  delta_E= -7.64e-09  |g|= 1.37e-05  |ddm|= 2.58e-05
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=1.90294e-05
diis-c [-9.28895476e-12  4.71859889e-05 -1.18118819e-02  1.01176470e+00]
  HOMO = -0.328072554606396  LUMO = 205.05422708476
  mo_energy =
[-1.19705290e+02 -1.24075448e+01 -6.83893153e+00 -6.83893153e+00
 -6.83893153e+00 -1.22722529e+00 -3.28072555e-01 -3.28072555e-01
 -3.28072555e-01  2.05054227e+02  2.57816345e+03]
E1 = -701.7779741483536  E_coul = 196.04791438570712
cycle= 4 E= -505.730059762646  delta_E= -5.12e-13  |g|= 2.48e-08  |ddm|= 1.44e-07
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -701.7779741483536  E_coul = 196.04791438570712
  HOMO = -0.328072554570091  LUMO = 205.054227113001
  mo_energy =
[-1.19705290e+02 -1.24075448e+01 -6.83893153e+00 -6.83893153e+00
 -6.83893153e+00 -1.22722529e+00 -3.28072555e-01 -3.28072555e-01
 -3.28072555e-01  2.05054227e+02  2.57816345e+03]
E1 = -701.7779741487872  E_coul = 196.04791438614077
Extra cycle  E= -505.730059762646  delta_E=    0  |g|= 2.12e-10  |ddm|= 1.44e-10
    CPU time for scf_cycle      0.10 sec, wall time      0.10 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 9.572925572237573
E1 = -701.7779741487872  E_coul = 196.04791438614077
init E= -505.730059762646
    CPU time for initialize scf      0.05 sec, wall time      0.05 sec
  HOMO = -0.328072554570013  LUMO = 205.054227113206
  mo_energy =
[-1.19705290e+02 -1.24075448e+01 -6.83893153e+00 -6.83893153e+00
 -6.83893153e+00 -1.22722529e+00 -3.28072555e-01 -3.28072555e-01
 -3.28072555e-01  2.05054227e+02  2.57816345e+03]
E1 = -701.7779741487897  E_coul = 196.04791438614322
cycle= 1 E= -505.730059762646  delta_E=    0  |g|= 3.19e-12  |ddm|= 1.18e-12
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -701.7779741487897  E_coul = 196.04791438614322
  HOMO = -0.328072554570015  LUMO = 205.054227113208
  mo_energy =
[-1.19705290e+02 -1.24075448e+01 -6.83893153e+00 -6.83893153e+00
 -6.83893153e+00 -1.22722529e+00 -3.28072555e-01 -3.28072555e-01
 -3.28072555e-01  2.05054227e+02  2.57816345e+03]
E1 = -701.7779741487896  E_coul = 196.04791438614308
Extra cycle  E= -505.730059762646  delta_E= -5.68e-14  |g|= 4.52e-13  |ddm|= 1.58e-14
    CPU time for scf_cycle      0.12 sec, wall time      0.13 sec
exp = [1.84697936e+03 2.68893121e+02 5.33814968e+01 4.69566610e+00
 3.53920766e-01 8.54679472e+00 4.58844366e-01]
grad_E = [-1.30029817e-04  1.30548702e-02 -7.08090747e-02 -3.22486585e-02
 -7.83242328e-01 -1.57893282e-02 -1.31054180e+00]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((7, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.5820650117923668e+02,6.8360631861859034e+01,4.6647996209811691e+00,3.9711619128280629e-01,8.5710114329191196e+00,4.8957520672686806e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "5s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:40:55 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  1849.27741342        1
[INPUT] 0    0    [1    /1   ]  238.052341768        1
[INPUT] 0    0    [1    /1   ]  52.8508202941        1
[INPUT] 0    0    [1    /1   ]  4.75338865642        1
[INPUT] 0    0    [1    /1   ]  0.376378413932       1
[INPUT] 1    0    [1    /1   ]  8.59222518586        1
[INPUT] 1    0    [1    /1   ]  0.490577988852       1

nuclear repulsion = 0
number of shells = 7
number of NR pGTOs = 11
number of NR cGTOs = 11
basis = {'Ar': [[0, [1849.2774134227288, 1.0]], [0, [238.05234176830982, 1.0]], [0, [52.85082029410794, 1.0]], [0, [4.753388656421848, 1.0]], [0, [0.37637841393167215, 1.0]], [1, [8.592225185864784, 1.0]], [1, [0.49057798885228676, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [1849.27741342]
bas 1, expnt(s) = [238.05234177]
bas 2, expnt(s) = [52.85082029]
bas 3, expnt(s) = [4.75338866]
bas 4, expnt(s) = [0.37637841]
bas 5, expnt(s) = [8.59222519]
bas 6, expnt(s) = [0.49057799]
CPU time:        63.32
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]
 [ 0  1  1  1  0 36 37  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.84927741e+03 7.12469985e+02 2.38052342e+02 1.53115574e+02
 5.28508203e+01 4.95226440e+01 4.75338866e+00 8.13331361e+00
 3.76378414e-01 1.21404156e+00 8.59222519e+00 4.29157252e+01
 4.90577989e-01 1.19775906e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.318231821179538
cond(S) = 10.23955173047112
E1 = -686.4326021098323  E_coul = 184.65989953830277
init E= -501.77270257153
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.690374197769206  LUMO = 183.300906904682
  mo_energy =
[-1.20768995e+02 -1.32671122e+01 -7.64018422e+00 -7.64018422e+00
 -7.64018422e+00 -1.65085454e+00 -6.90374198e-01 -6.90374198e-01
 -6.90374198e-01  1.83300907e+02  2.47843110e+03]
E1 = -704.5599177970062  E_coul = 198.80081693015467
cycle= 1 E= -505.759100866851  delta_E= -3.99  |g|= 0.313  |ddm|= 0.295
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.382696
diis-c [-0.14645613  1.        ]
  HOMO = -0.243953142522342  LUMO = 184.711557804146
  mo_energy =
[-1.19363437e+02 -1.22288319e+01 -6.66283115e+00 -6.66283115e+00
 -6.66283115e+00 -1.16658163e+00 -2.43953143e-01 -2.43953143e-01
 -2.43953143e-01  1.84711558e+02  2.47973399e+03]
E1 = -704.5506399788661  E_coul = 198.7914144872927
cycle= 2 E= -505.759225491573  delta_E= -0.000125  |g|= 0.00235  |ddm|= 0.00387
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00230709
diis-c [-3.90587635e-06 -3.11999479e-03  1.00311999e+00]
  HOMO = -0.243994738292752  LUMO = 184.709849166967
  mo_energy =
[-1.19366336e+02 -1.22291395e+01 -6.66328755e+00 -6.66328755e+00
 -6.66328755e+00 -1.16659778e+00 -2.43994738e-01 -2.43994738e-01
 -2.43994738e-01  1.84709849e+02  2.47972785e+03]
E1 = -704.5505662539726  E_coul = 198.79134075025036
cycle= 3 E= -505.759225503722  delta_E= -1.21e-08  |g|= 2.25e-05  |ddm|= 3.44e-05
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=2.83457e-05
diis-c [-7.27202294e-12  5.08467894e-05 -1.44913589e-02  1.01444051e+00]
  HOMO = -0.243994942758168  LUMO = 184.709845013078
  mo_energy =
[-1.19366348e+02 -1.22291411e+01 -6.66329036e+00 -6.66329036e+00
 -6.66329036e+00 -1.16659783e+00 -2.43994943e-01 -2.43994943e-01
 -2.43994943e-01  1.84709845e+02  2.47972784e+03]
E1 = -704.5505657916555  E_coul = 198.79134028793192
cycle= 4 E= -505.759225503724  delta_E= -1.25e-12  |g|= 2.54e-08  |ddm|= 2.8e-07
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -704.5505657916555  E_coul = 198.79134028793192
  HOMO = -0.243994942453428  LUMO = 184.709845048
  mo_energy =
[-1.19366348e+02 -1.22291411e+01 -6.66329036e+00 -6.66329036e+00
 -6.66329036e+00 -1.16659783e+00 -2.43994942e-01 -2.43994942e-01
 -2.43994942e-01  1.84709845e+02  2.47972784e+03]
E1 = -704.5505657926002  E_coul = 198.79134028887646
Extra cycle  E= -505.759225503724  delta_E= -2.27e-13  |g|= 1.97e-10  |ddm|= 2.95e-10
    CPU time for scf_cycle      0.10 sec, wall time      0.10 sec
exp = [1.84927741e+03 2.38052342e+02 5.28508203e+01 4.75338866e+00
 3.76378414e-01 8.59222519e+00 4.90577989e-01]
E = -505.75922550372377
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((7, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.5820650117923668e+02,6.8360631861859034e+01,4.6647996209811691e+00,3.9711619128280629e-01,8.5710114329191196e+00,4.8957520672686806e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "5s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:40:56 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  1848.21260121        1
[INPUT] 0    0    [1    /1   ]  252.342530413        1
[INPUT] 0    0    [1    /1   ]  53.0967112191        1
[INPUT] 0    0    [1    /1   ]  4.72664269842        1
[INPUT] 0    0    [1    /1   ]  0.365972579971       1
[INPUT] 1    0    [1    /1   ]  8.57117481156        1
[INPUT] 1    0    [1    /1   ]  0.475874097531       1

nuclear repulsion = 0
number of shells = 7
number of NR pGTOs = 11
number of NR cGTOs = 11
basis = {'Ar': [[0, [1848.2126012140184, 1.0]], [0, [252.34253041262255, 1.0]], [0, [53.09671121905194, 1.0]], [0, [4.726642698416801, 1.0]], [0, [0.36597257997139643, 1.0]], [1, [8.571174811555208, 1.0]], [1, [0.4758740975307487, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [1848.21260121]
bas 1, expnt(s) = [252.34253041]
bas 2, expnt(s) = [53.09671122]
bas 3, expnt(s) = [4.7266427]
bas 4, expnt(s) = [0.36597258]
bas 5, expnt(s) = [8.57117481]
bas 6, expnt(s) = [0.4758741]
CPU time:        63.73
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]
 [ 0  1  1  1  0 36 37  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.84821260e+03 7.12162283e+02 2.52342530e+02 1.59958699e+02
 5.30967112e+01 4.96953485e+01 4.72664270e+00 8.09896654e+00
 3.65972580e-01 1.18877985e+00 8.57117481e+00 4.27843397e+01
 4.75874098e-01 1.15305354e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.33503043610253
cond(S) = 9.884330993367547
E1 = -685.8964196716594  E_coul = 183.79188515128158
init E= -502.104534520378
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.71471863847405  LUMO = 192.687545034492
  mo_energy =
[-1.20914098e+02 -1.33316268e+01 -7.70004257e+00 -7.70004257e+00
 -7.70004257e+00 -1.66414028e+00 -7.14718638e-01 -7.14718638e-01
 -7.14718638e-01  1.92687545e+02  2.52431537e+03]
E1 = -703.3952650319785  E_coul = 197.54334133092547
cycle= 1 E= -505.851923701053  delta_E= -3.75  |g|= 0.263  |ddm|= 0.289
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.291468
diis-c [-0.08495343  1.        ]
  HOMO = -0.283792170550249  LUMO = 194.049829358528
  mo_energy =
[-1.19563720e+02 -1.23142368e+01 -6.74318903e+00 -6.74318903e+00
 -6.74318903e+00 -1.19544793e+00 -2.83792171e-01 -2.83792171e-01
 -2.83792171e-01  1.94049829e+02  2.52551210e+03]
E1 = -703.3861275301936  E_coul = 197.5340890098104
cycle= 2 E= -505.852038520383  delta_E= -0.000115  |g|= 0.00206  |ddm|= 0.00363
    CPU time for cycle= 2      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.00204836
diis-c [-3.27475083e-06 -3.30360991e-03  1.00330361e+00]
  HOMO = -0.283828521539708  LUMO = 194.047942187611
  mo_energy =
[-1.19566665e+02 -1.23145259e+01 -6.74361698e+00 -6.74361698e+00
 -6.74361698e+00 -1.19546263e+00 -2.83828522e-01 -2.83828522e-01
 -2.83828522e-01  1.94047942e+02  2.52550539e+03]
E1 = -703.3860594910682  E_coul = 197.53402096096528
cycle= 3 E= -505.852038530103  delta_E= -9.72e-09  |g|= 1.85e-05  |ddm|= 3e-05
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=2.42986e-05
diis-c [-8.68379554e-12  4.80321368e-05 -1.35449391e-02  1.01349691e+00]
  HOMO = -0.283828673705299  LUMO = 194.04793821063
  mo_energy =
[-1.19566675e+02 -1.23145271e+01 -6.74361928e+00 -6.74361928e+00
 -6.74361928e+00 -1.19546267e+00 -2.83828674e-01 -2.83828674e-01
 -2.83828674e-01  1.94047938e+02  2.52550538e+03]
E1 = -703.3860591248248  E_coul = 197.53402059472106
cycle= 4 E= -505.852038530104  delta_E= -8.53e-13  |g|= 2.54e-08  |ddm|= 2.17e-07
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -703.3860591248248  E_coul = 197.53402059472106
  HOMO = -0.283828673508168  LUMO = 194.047938245211
  mo_energy =
[-1.19566675e+02 -1.23145271e+01 -6.74361928e+00 -6.74361928e+00
 -6.74361928e+00 -1.19546267e+00 -2.83828674e-01 -2.83828674e-01
 -2.83828674e-01  1.94047938e+02  2.52550538e+03]
E1 = -703.386059125582  E_coul = 197.53402059547798
Extra cycle  E= -505.852038530104  delta_E= -3.41e-13  |g|= 1.9e-10  |ddm|= 2.24e-10
    CPU time for scf_cycle      0.10 sec, wall time      0.10 sec
exp = [1.84821260e+03 2.52342530e+02 5.30967112e+01 4.72664270e+00
 3.65972580e-01 8.57117481e+00 4.75874098e-01]
E = -505.8520385301041
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((7, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.5820650117923668e+02,6.8360631861859034e+01,4.6647996209811691e+00,3.9711619128280629e-01,8.5710114329191196e+00,4.8957520672686806e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "5s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:40:56 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  1848.21260121        1
[INPUT] 0    0    [1    /1   ]  252.342530413        1
[INPUT] 0    0    [1    /1   ]  53.0967112191        1
[INPUT] 0    0    [1    /1   ]  4.72664269842        1
[INPUT] 0    0    [1    /1   ]  0.365972579971       1
[INPUT] 1    0    [1    /1   ]  8.57117481156        1
[INPUT] 1    0    [1    /1   ]  0.475874097531       1

nuclear repulsion = 0
number of shells = 7
number of NR pGTOs = 11
number of NR cGTOs = 11
basis = {'Ar': [[0, [1848.2126012140184, 1.0]], [0, [252.34253041262255, 1.0]], [0, [53.09671121905194, 1.0]], [0, [4.726642698416801, 1.0]], [0, [0.36597257997139643, 1.0]], [1, [8.571174811555208, 1.0]], [1, [0.4758740975307487, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [1848.21260121]
bas 1, expnt(s) = [252.34253041]
bas 2, expnt(s) = [53.09671122]
bas 3, expnt(s) = [4.7266427]
bas 4, expnt(s) = [0.36597258]
bas 5, expnt(s) = [8.57117481]
bas 6, expnt(s) = [0.4758741]
CPU time:        64.13
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]
 [ 0  1  1  1  0 36 37  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.84821260e+03 7.12162283e+02 2.52342530e+02 1.59958699e+02
 5.30967112e+01 4.96953485e+01 4.72664270e+00 8.09896654e+00
 3.65972580e-01 1.18877985e+00 8.57117481e+00 4.27843397e+01
 4.75874098e-01 1.15305354e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.33503043610253
cond(S) = 9.884330993367547
E1 = -685.8964196716594  E_coul = 183.79188515128158
init E= -502.104534520378
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.71471863847405  LUMO = 192.687545034492
  mo_energy =
[-1.20914098e+02 -1.33316268e+01 -7.70004257e+00 -7.70004257e+00
 -7.70004257e+00 -1.66414028e+00 -7.14718638e-01 -7.14718638e-01
 -7.14718638e-01  1.92687545e+02  2.52431537e+03]
E1 = -703.3952650319785  E_coul = 197.54334133092547
cycle= 1 E= -505.851923701053  delta_E= -3.75  |g|= 0.263  |ddm|= 0.289
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.291468
diis-c [-0.08495343  1.        ]
  HOMO = -0.283792170550249  LUMO = 194.049829358528
  mo_energy =
[-1.19563720e+02 -1.23142368e+01 -6.74318903e+00 -6.74318903e+00
 -6.74318903e+00 -1.19544793e+00 -2.83792171e-01 -2.83792171e-01
 -2.83792171e-01  1.94049829e+02  2.52551210e+03]
E1 = -703.3861275301936  E_coul = 197.5340890098104
cycle= 2 E= -505.852038520383  delta_E= -0.000115  |g|= 0.00206  |ddm|= 0.00363
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00204836
diis-c [-3.27475083e-06 -3.30360991e-03  1.00330361e+00]
  HOMO = -0.283828521539708  LUMO = 194.047942187611
  mo_energy =
[-1.19566665e+02 -1.23145259e+01 -6.74361698e+00 -6.74361698e+00
 -6.74361698e+00 -1.19546263e+00 -2.83828522e-01 -2.83828522e-01
 -2.83828522e-01  1.94047942e+02  2.52550539e+03]
E1 = -703.3860594910682  E_coul = 197.53402096096528
cycle= 3 E= -505.852038530103  delta_E= -9.72e-09  |g|= 1.85e-05  |ddm|= 3e-05
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=2.42986e-05
diis-c [-8.68379554e-12  4.80321368e-05 -1.35449391e-02  1.01349691e+00]
  HOMO = -0.283828673705299  LUMO = 194.04793821063
  mo_energy =
[-1.19566675e+02 -1.23145271e+01 -6.74361928e+00 -6.74361928e+00
 -6.74361928e+00 -1.19546267e+00 -2.83828674e-01 -2.83828674e-01
 -2.83828674e-01  1.94047938e+02  2.52550538e+03]
E1 = -703.3860591248248  E_coul = 197.53402059472106
cycle= 4 E= -505.852038530104  delta_E= -8.53e-13  |g|= 2.54e-08  |ddm|= 2.17e-07
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -703.3860591248248  E_coul = 197.53402059472106
  HOMO = -0.283828673508168  LUMO = 194.047938245211
  mo_energy =
[-1.19566675e+02 -1.23145271e+01 -6.74361928e+00 -6.74361928e+00
 -6.74361928e+00 -1.19546267e+00 -2.83828674e-01 -2.83828674e-01
 -2.83828674e-01  1.94047938e+02  2.52550538e+03]
E1 = -703.386059125582  E_coul = 197.53402059547798
Extra cycle  E= -505.852038530104  delta_E= -3.41e-13  |g|= 1.9e-10  |ddm|= 2.24e-10
    CPU time for scf_cycle      0.10 sec, wall time      0.10 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 9.884330993367547
E1 = -703.386059125582  E_coul = 197.53402059547798
init E= -505.852038530104
    CPU time for initialize scf      0.06 sec, wall time      0.06 sec
  HOMO = -0.283828673506886  LUMO = 194.04793824546
  mo_energy =
[-1.19566675e+02 -1.23145271e+01 -6.74361928e+00 -6.74361928e+00
 -6.74361928e+00 -1.19546267e+00 -2.83828674e-01 -2.83828674e-01
 -2.83828674e-01  1.94047938e+02  2.52550538e+03]
E1 = -703.386059125587  E_coul = 197.5340205954832
cycle= 1 E= -505.852038530104  delta_E= 2.27e-13  |g|= 9.24e-13  |ddm|= 1.54e-12
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -703.386059125587  E_coul = 197.5340205954832
  HOMO = -0.283828673506874  LUMO = 194.047938245462
  mo_energy =
[-1.19566675e+02 -1.23145271e+01 -6.74361928e+00 -6.74361928e+00
 -6.74361928e+00 -1.19546267e+00 -2.83828674e-01 -2.83828674e-01
 -2.83828674e-01  1.94047938e+02  2.52550538e+03]
E1 = -703.386059125587  E_coul = 197.53402059548313
Extra cycle  E= -505.852038530104  delta_E= -5.68e-14  |g|= 1.32e-12  |ddm|= 1.09e-14
    CPU time for scf_cycle      0.14 sec, wall time      0.14 sec
exp = [1.84821260e+03 2.52342530e+02 5.30967112e+01 4.72664270e+00
 3.65972580e-01 8.57117481e+00 4.75874098e-01]
grad_E = [ 4.41784773e-04 -3.57481185e-04 -1.35312417e-02 -2.46992445e-03
 -5.13395501e-01 -5.16533875e-03 -6.15092537e-01]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((7, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.5820650117923668e+02,6.8360631861859034e+01,4.6647996209811691e+00,3.9711619128280629e-01,8.5710114329191196e+00,4.8957520672686806e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "5s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:40:59 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  1847.57758054        1
[INPUT] 0    0    [1    /1   ]  260.780307705        1
[INPUT] 0    0    [1    /1   ]  54.7771880631        1
[INPUT] 0    0    [1    /1   ]  4.74719571761        1
[INPUT] 0    0    [1    /1   ]  0.3878633278         1
[INPUT] 1    0    [1    /1   ]  8.60197905273        1
[INPUT] 1    0    [1    /1   ]  0.500294016539       1

nuclear repulsion = 0
number of shells = 7
number of NR pGTOs = 11
number of NR cGTOs = 11
basis = {'Ar': [[0, [1847.577580543749, 1.0]], [0, [260.78030770549134, 1.0]], [0, [54.777188063123006, 1.0]], [0, [4.747195717609042, 1.0]], [0, [0.3878633277999138, 1.0]], [1, [8.601979052733727, 1.0]], [1, [0.5002940165385754, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [1847.57758054]
bas 1, expnt(s) = [260.78030771]
bas 2, expnt(s) = [54.77718806]
bas 3, expnt(s) = [4.74719572]
bas 4, expnt(s) = [0.38786333]
bas 5, expnt(s) = [8.60197905]
bas 6, expnt(s) = [0.50029402]
CPU time:        67.12
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]
 [ 0  1  1  1  0 36 37  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.84757758e+03 7.11978759e+02 2.60780308e+02 1.63953661e+02
 5.47771881e+01 5.08703616e+01 4.74719572e+00 8.12536496e+00
 3.87863328e-01 1.24172111e+00 8.60197905e+00 4.29766311e+01
 5.00294017e-01 1.22748453e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.304061414189377
cond(S) = 9.97957437627827
E1 = -687.4191549428832  E_coul = 185.21679112999266
init E= -502.202363812891
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.672980051262948  LUMO = 203.132782163043
  mo_energy =
[-1.20761814e+02 -1.32281106e+01 -7.60271382e+00 -7.60271382e+00
 -7.60271382e+00 -1.64301173e+00 -6.72980051e-01 -6.72980051e-01
 -6.72980051e-01  2.03132782e+02  2.55695638e+03]
E1 = -705.4511304493641  E_coul = 199.58188956120708
cycle= 1 E= -505.869240888157  delta_E= -3.67  |g|= 0.258  |ddm|= 0.302
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.289499
diis-c [-0.08380956  1.        ]
  HOMO = -0.214800221322447  LUMO = 204.55707915923
  mo_energy =
[-1.19346310e+02 -1.21746617e+01 -6.61099392e+00 -6.61099392e+00
 -6.61099392e+00 -1.14537283e+00 -2.14800221e-01 -2.14800221e-01
 -2.14800221e-01  2.04557079e+02  2.55826457e+03]
E1 = -705.4427999750866  E_coul = 199.5734564214247
cycle= 2 E= -505.869343553662  delta_E= -0.000103  |g|= 0.00193  |ddm|= 0.00334
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00193997
diis-c [-2.80456661e-06 -3.39411274e-03  1.00339411e+00]
  HOMO = -0.21483633328358  LUMO = 204.555313467327
  mo_energy =
[-1.19349006e+02 -1.21749252e+01 -6.61137678e+00 -6.61137678e+00
 -6.61137678e+00 -1.14538729e+00 -2.14836333e-01 -2.14836333e-01
 -2.14836333e-01  2.04555313e+02  2.55825837e+03]
E1 = -705.4427401126272  E_coul = 199.5733965508783
cycle= 3 E= -505.869343561749  delta_E= -8.09e-09  |g|= 1.63e-05  |ddm|= 2.67e-05
    CPU time for cycle= 3      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=2.16206e-05
diis-c [-6.71966125e-12  4.71348468e-05 -1.30195416e-02  1.01297241e+00]
  HOMO = -0.214836474951129  LUMO = 204.55531030745
  mo_energy =
[-1.19349015e+02 -1.21749262e+01 -6.61137869e+00 -6.61137869e+00
 -6.61137869e+00 -1.14538733e+00 -2.14836475e-01 -2.14836475e-01
 -2.14836475e-01  2.04555310e+02  2.55825836e+03]
E1 = -705.4427398189047  E_coul = 199.57339625715503
cycle= 4 E= -505.86934356175  delta_E= -7.39e-13  |g|= 2.17e-08  |ddm|= 1.8e-07
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -705.4427398189047  E_coul = 199.57339625715503
  HOMO = -0.214836474800003  LUMO = 204.555310336651
  mo_energy =
[-1.19349015e+02 -1.21749262e+01 -6.61137869e+00 -6.61137869e+00
 -6.61137869e+00 -1.14538733e+00 -2.14836475e-01 -2.14836475e-01
 -2.14836475e-01  2.04555310e+02  2.55825836e+03]
E1 = -705.4427398194971  E_coul = 199.57339625774722
Extra cycle  E= -505.86934356175  delta_E= -2.27e-13  |g|= 1.64e-10  |ddm|= 1.75e-10
    CPU time for scf_cycle      0.10 sec, wall time      0.10 sec
exp = [1.84757758e+03 2.60780308e+02 5.47771881e+01 4.74719572e+00
 3.87863328e-01 8.60197905e+00 5.00294017e-01]
E = -505.8693435617499
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((7, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.5820650117923668e+02,6.8360631861859034e+01,4.6647996209811691e+00,3.9711619128280629e-01,8.5710114329191196e+00,4.8957520672686806e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "5s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:41:00 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  1847.57758054        1
[INPUT] 0    0    [1    /1   ]  260.780307705        1
[INPUT] 0    0    [1    /1   ]  54.7771880631        1
[INPUT] 0    0    [1    /1   ]  4.74719571761        1
[INPUT] 0    0    [1    /1   ]  0.3878633278         1
[INPUT] 1    0    [1    /1   ]  8.60197905273        1
[INPUT] 1    0    [1    /1   ]  0.500294016539       1

nuclear repulsion = 0
number of shells = 7
number of NR pGTOs = 11
number of NR cGTOs = 11
basis = {'Ar': [[0, [1847.577580543749, 1.0]], [0, [260.78030770549134, 1.0]], [0, [54.777188063123006, 1.0]], [0, [4.747195717609042, 1.0]], [0, [0.3878633277999138, 1.0]], [1, [8.601979052733727, 1.0]], [1, [0.5002940165385754, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [1847.57758054]
bas 1, expnt(s) = [260.78030771]
bas 2, expnt(s) = [54.77718806]
bas 3, expnt(s) = [4.74719572]
bas 4, expnt(s) = [0.38786333]
bas 5, expnt(s) = [8.60197905]
bas 6, expnt(s) = [0.50029402]
CPU time:        67.54
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]
 [ 0  1  1  1  0 36 37  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.84757758e+03 7.11978759e+02 2.60780308e+02 1.63953661e+02
 5.47771881e+01 5.08703616e+01 4.74719572e+00 8.12536496e+00
 3.87863328e-01 1.24172111e+00 8.60197905e+00 4.29766311e+01
 5.00294017e-01 1.22748453e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.304061414189377
cond(S) = 9.97957437627827
E1 = -687.4191549428832  E_coul = 185.21679112999266
init E= -502.202363812891
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.672980051262948  LUMO = 203.132782163043
  mo_energy =
[-1.20761814e+02 -1.32281106e+01 -7.60271382e+00 -7.60271382e+00
 -7.60271382e+00 -1.64301173e+00 -6.72980051e-01 -6.72980051e-01
 -6.72980051e-01  2.03132782e+02  2.55695638e+03]
E1 = -705.4511304493641  E_coul = 199.58188956120708
cycle= 1 E= -505.869240888157  delta_E= -3.67  |g|= 0.258  |ddm|= 0.302
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.289499
diis-c [-0.08380956  1.        ]
  HOMO = -0.214800221322447  LUMO = 204.55707915923
  mo_energy =
[-1.19346310e+02 -1.21746617e+01 -6.61099392e+00 -6.61099392e+00
 -6.61099392e+00 -1.14537283e+00 -2.14800221e-01 -2.14800221e-01
 -2.14800221e-01  2.04557079e+02  2.55826457e+03]
E1 = -705.4427999750866  E_coul = 199.5734564214247
cycle= 2 E= -505.869343553662  delta_E= -0.000103  |g|= 0.00193  |ddm|= 0.00334
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00193997
diis-c [-2.80456661e-06 -3.39411274e-03  1.00339411e+00]
  HOMO = -0.21483633328358  LUMO = 204.555313467327
  mo_energy =
[-1.19349006e+02 -1.21749252e+01 -6.61137678e+00 -6.61137678e+00
 -6.61137678e+00 -1.14538729e+00 -2.14836333e-01 -2.14836333e-01
 -2.14836333e-01  2.04555313e+02  2.55825837e+03]
E1 = -705.4427401126272  E_coul = 199.5733965508783
cycle= 3 E= -505.869343561749  delta_E= -8.09e-09  |g|= 1.63e-05  |ddm|= 2.67e-05
    CPU time for cycle= 3      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=2.16206e-05
diis-c [-6.71966125e-12  4.71348468e-05 -1.30195416e-02  1.01297241e+00]
  HOMO = -0.214836474951129  LUMO = 204.55531030745
  mo_energy =
[-1.19349015e+02 -1.21749262e+01 -6.61137869e+00 -6.61137869e+00
 -6.61137869e+00 -1.14538733e+00 -2.14836475e-01 -2.14836475e-01
 -2.14836475e-01  2.04555310e+02  2.55825836e+03]
E1 = -705.4427398189047  E_coul = 199.57339625715503
cycle= 4 E= -505.86934356175  delta_E= -7.39e-13  |g|= 2.17e-08  |ddm|= 1.8e-07
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -705.4427398189047  E_coul = 199.57339625715503
  HOMO = -0.214836474800003  LUMO = 204.555310336651
  mo_energy =
[-1.19349015e+02 -1.21749262e+01 -6.61137869e+00 -6.61137869e+00
 -6.61137869e+00 -1.14538733e+00 -2.14836475e-01 -2.14836475e-01
 -2.14836475e-01  2.04555310e+02  2.55825836e+03]
E1 = -705.4427398194971  E_coul = 199.57339625774722
Extra cycle  E= -505.86934356175  delta_E= -2.27e-13  |g|= 1.64e-10  |ddm|= 1.75e-10
    CPU time for scf_cycle      0.09 sec, wall time      0.10 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 9.97957437627827
E1 = -705.4427398194971  E_coul = 199.57339625774722
init E= -505.86934356175
    CPU time for initialize scf      0.05 sec, wall time      0.06 sec
  HOMO = -0.214836474799025  LUMO = 204.555310336861
  mo_energy =
[-1.19349015e+02 -1.21749262e+01 -6.61137869e+00 -6.61137869e+00
 -6.61137869e+00 -1.14538733e+00 -2.14836475e-01 -2.14836475e-01
 -2.14836475e-01  2.04555310e+02  2.55825836e+03]
E1 = -705.4427398195008  E_coul = 199.57339625775117
cycle= 1 E= -505.86934356175  delta_E= 1.71e-13  |g|= 1.33e-12  |ddm|= 1.19e-12
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -705.4427398195008  E_coul = 199.57339625775117
  HOMO = -0.214836474799023  LUMO = 204.555310336863
  mo_energy =
[-1.19349015e+02 -1.21749262e+01 -6.61137869e+00 -6.61137869e+00
 -6.61137869e+00 -1.14538733e+00 -2.14836475e-01 -2.14836475e-01
 -2.14836475e-01  2.04555310e+02  2.55825836e+03]
E1 = -705.442739819501  E_coul = 199.57339625775126
Extra cycle  E= -505.86934356175  delta_E=    0  |g|= 7.12e-13  |ddm|= 8.05e-15
    CPU time for scf_cycle      0.12 sec, wall time      0.13 sec
exp = [1.84757758e+03 2.60780308e+02 5.47771881e+01 4.74719572e+00
 3.87863328e-01 8.60197905e+00 5.00294017e-01]
grad_E = [ 2.52360680e-04  9.76774098e-04  1.04066844e-03  2.18781870e-02
 -7.51457200e-02  3.87549802e-03  3.43818279e-01]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((7, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.5820650117923668e+02,6.8360631861859034e+01,4.6647996209811691e+00,3.9711619128280629e-01,8.5710114329191196e+00,4.8957520672686806e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "5s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:41:03 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  1847.78512116        1
[INPUT] 0    0    [1    /1   ]  258.010046426        1
[INPUT] 0    0    [1    /1   ]  54.3703475668        1
[INPUT] 0    0    [1    /1   ]  4.73317445871        1
[INPUT] 0    0    [1    /1   ]  0.39101107556        1
[INPUT] 1    0    [1    /1   ]  8.58916960113        1
[INPUT] 1    0    [1    /1   ]  0.491524964674       1

nuclear repulsion = 0
number of shells = 7
number of NR pGTOs = 11
number of NR cGTOs = 11
basis = {'Ar': [[0, [1847.7851211623906, 1.0]], [0, [258.0100464262317, 1.0]], [0, [54.37034756679652, 1.0]], [0, [4.733174458709726, 1.0]], [0, [0.39101107556008574, 1.0]], [1, [8.589169601132015, 1.0]], [1, [0.4915249646739359, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [1847.78512116]
bas 1, expnt(s) = [258.01004643]
bas 2, expnt(s) = [54.37034757]
bas 3, expnt(s) = [4.73317446]
bas 4, expnt(s) = [0.39101108]
bas 5, expnt(s) = [8.5891696]
bas 6, expnt(s) = [0.49152496]
CPU time:        70.53
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]
 [ 0  1  1  1  0 36 37  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.84778512e+03 7.12038741e+02 2.58010046e+02 1.62645663e+02
 5.43703476e+01 5.05867299e+01 4.73317446e+00 8.10735908e+00
 3.91011076e-01 1.24927146e+00 8.58916960e+00 4.28966488e+01
 4.91524965e-01 1.20064984e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.316157335006526
cond(S) = 9.977972875631487
E1 = -687.0847726363942  E_coul = 184.90534994568685
init E= -502.179422690707
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.681885056210753  LUMO = 200.114327171021
  mo_energy =
[-1.20801020e+02 -1.32525492e+01 -7.62153807e+00 -7.62153807e+00
 -7.62153807e+00 -1.65022408e+00 -6.81885056e-01 -6.81885056e-01
 -6.81885056e-01  2.00114327e+02  2.54676159e+03]
E1 = -704.9376912098318  E_coul = 199.0647715403643
cycle= 1 E= -505.872919669467  delta_E= -3.69  |g|= 0.262  |ddm|= 0.295
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.293889
diis-c [-0.0863707  1.       ]
  HOMO = -0.233831472416335  LUMO = 201.51995549927
  mo_energy =
[-1.19404644e+02 -1.22122303e+01 -6.64219756e+00 -6.64219756e+00
 -6.64219756e+00 -1.15916510e+00 -2.33831472e-01 -2.33831472e-01
 -2.33831472e-01  2.01519955e+02  2.54804208e+03]
E1 = -704.9291535025981  E_coul = 199.05612770784353
cycle= 2 E= -505.873025794755  delta_E= -0.000106  |g|= 0.00198  |ddm|= 0.00343
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.0019897
diis-c [-2.97935007e-06 -3.37910084e-03  1.00337910e+00]
  HOMO = -0.233867451675448  LUMO = 201.518168770334
  mo_energy =
[-1.19407401e+02 -1.22125006e+01 -6.64259325e+00 -6.64259325e+00
 -6.64259325e+00 -1.15917997e+00 -2.33867452e-01 -2.33867452e-01
 -2.33867452e-01  2.01518169e+02  2.54803578e+03]
E1 = -704.9290913739662  E_coul = 199.05606557058394
cycle= 3 E= -505.873025803382  delta_E= -8.63e-09  |g|= 1.7e-05  |ddm|= 2.78e-05
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=2.25347e-05
diis-c [-7.13525775e-12  4.74541131e-05 -1.31703805e-02  1.01312293e+00]
  HOMO = -0.233867596505102  LUMO = 201.518165452057
  mo_energy =
[-1.19407410e+02 -1.22125018e+01 -6.64259528e+00 -6.64259528e+00
 -6.64259528e+00 -1.15918001e+00 -2.33867597e-01 -2.33867597e-01
 -2.33867597e-01  2.01518165e+02  2.54803578e+03]
E1 = -704.929091060329  E_coul = 199.05606525694634
cycle= 4 E= -505.873025803383  delta_E= -3.98e-13  |g|= 2.26e-08  |ddm|= 1.92e-07
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -704.929091060329  E_coul = 199.05606525694634
  HOMO = -0.233867596338942  LUMO = 201.518165482638
  mo_energy =
[-1.19407410e+02 -1.22125018e+01 -6.64259527e+00 -6.64259527e+00
 -6.64259527e+00 -1.15918001e+00 -2.33867596e-01 -2.33867596e-01
 -2.33867596e-01  2.01518165e+02  2.54803578e+03]
E1 = -704.9290910609669  E_coul = 199.0560652575842
Extra cycle  E= -505.873025803383  delta_E=    0  |g|= 1.71e-10  |ddm|= 1.89e-10
    CPU time for scf_cycle      0.10 sec, wall time      0.11 sec
exp = [1.84778512e+03 2.58010046e+02 5.43703476e+01 4.73317446e+00
 3.91011076e-01 8.58916960e+00 4.91524965e-01]
E = -505.8730258033827
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((7, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.5820650117923668e+02,6.8360631861859034e+01,4.6647996209811691e+00,3.9711619128280629e-01,8.5710114329191196e+00,4.8957520672686806e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "5s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:41:03 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  1847.78512116        1
[INPUT] 0    0    [1    /1   ]  258.010046426        1
[INPUT] 0    0    [1    /1   ]  54.3703475668        1
[INPUT] 0    0    [1    /1   ]  4.73317445871        1
[INPUT] 0    0    [1    /1   ]  0.39101107556        1
[INPUT] 1    0    [1    /1   ]  8.58916960113        1
[INPUT] 1    0    [1    /1   ]  0.491524964674       1

nuclear repulsion = 0
number of shells = 7
number of NR pGTOs = 11
number of NR cGTOs = 11
basis = {'Ar': [[0, [1847.7851211623906, 1.0]], [0, [258.0100464262317, 1.0]], [0, [54.37034756679652, 1.0]], [0, [4.733174458709726, 1.0]], [0, [0.39101107556008574, 1.0]], [1, [8.589169601132015, 1.0]], [1, [0.4915249646739359, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [1847.78512116]
bas 1, expnt(s) = [258.01004643]
bas 2, expnt(s) = [54.37034757]
bas 3, expnt(s) = [4.73317446]
bas 4, expnt(s) = [0.39101108]
bas 5, expnt(s) = [8.5891696]
bas 6, expnt(s) = [0.49152496]
CPU time:        70.96
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]
 [ 0  1  1  1  0 36 37  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.84778512e+03 7.12038741e+02 2.58010046e+02 1.62645663e+02
 5.43703476e+01 5.05867299e+01 4.73317446e+00 8.10735908e+00
 3.91011076e-01 1.24927146e+00 8.58916960e+00 4.28966488e+01
 4.91524965e-01 1.20064984e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.316157335006526
cond(S) = 9.977972875631487
E1 = -687.0847726363942  E_coul = 184.90534994568685
init E= -502.179422690707
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.681885056210753  LUMO = 200.114327171021
  mo_energy =
[-1.20801020e+02 -1.32525492e+01 -7.62153807e+00 -7.62153807e+00
 -7.62153807e+00 -1.65022408e+00 -6.81885056e-01 -6.81885056e-01
 -6.81885056e-01  2.00114327e+02  2.54676159e+03]
E1 = -704.9376912098318  E_coul = 199.0647715403643
cycle= 1 E= -505.872919669467  delta_E= -3.69  |g|= 0.262  |ddm|= 0.295
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.293889
diis-c [-0.0863707  1.       ]
  HOMO = -0.233831472416335  LUMO = 201.51995549927
  mo_energy =
[-1.19404644e+02 -1.22122303e+01 -6.64219756e+00 -6.64219756e+00
 -6.64219756e+00 -1.15916510e+00 -2.33831472e-01 -2.33831472e-01
 -2.33831472e-01  2.01519955e+02  2.54804208e+03]
E1 = -704.9291535025981  E_coul = 199.05612770784353
cycle= 2 E= -505.873025794755  delta_E= -0.000106  |g|= 0.00198  |ddm|= 0.00343
    CPU time for cycle= 2      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.0019897
diis-c [-2.97935007e-06 -3.37910084e-03  1.00337910e+00]
  HOMO = -0.233867451675448  LUMO = 201.518168770334
  mo_energy =
[-1.19407401e+02 -1.22125006e+01 -6.64259325e+00 -6.64259325e+00
 -6.64259325e+00 -1.15917997e+00 -2.33867452e-01 -2.33867452e-01
 -2.33867452e-01  2.01518169e+02  2.54803578e+03]
E1 = -704.9290913739662  E_coul = 199.05606557058394
cycle= 3 E= -505.873025803382  delta_E= -8.63e-09  |g|= 1.7e-05  |ddm|= 2.78e-05
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=2.25347e-05
diis-c [-7.13525775e-12  4.74541131e-05 -1.31703805e-02  1.01312293e+00]
  HOMO = -0.233867596505102  LUMO = 201.518165452057
  mo_energy =
[-1.19407410e+02 -1.22125018e+01 -6.64259528e+00 -6.64259528e+00
 -6.64259528e+00 -1.15918001e+00 -2.33867597e-01 -2.33867597e-01
 -2.33867597e-01  2.01518165e+02  2.54803578e+03]
E1 = -704.929091060329  E_coul = 199.05606525694634
cycle= 4 E= -505.873025803383  delta_E= -3.98e-13  |g|= 2.26e-08  |ddm|= 1.92e-07
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -704.929091060329  E_coul = 199.05606525694634
  HOMO = -0.233867596338942  LUMO = 201.518165482638
  mo_energy =
[-1.19407410e+02 -1.22125018e+01 -6.64259527e+00 -6.64259527e+00
 -6.64259527e+00 -1.15918001e+00 -2.33867596e-01 -2.33867596e-01
 -2.33867596e-01  2.01518165e+02  2.54803578e+03]
E1 = -704.9290910609669  E_coul = 199.0560652575842
Extra cycle  E= -505.873025803383  delta_E=    0  |g|= 1.71e-10  |ddm|= 1.89e-10
    CPU time for scf_cycle      0.10 sec, wall time      0.10 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 9.977972875631487
E1 = -704.9290910609669  E_coul = 199.0560652575842
init E= -505.873025803383
    CPU time for initialize scf      0.06 sec, wall time      0.06 sec
  HOMO = -0.233867596337871  LUMO = 201.518165482859
  mo_energy =
[-1.19407410e+02 -1.22125018e+01 -6.64259527e+00 -6.64259527e+00
 -6.64259527e+00 -1.15918001e+00 -2.33867596e-01 -2.33867596e-01
 -2.33867596e-01  2.01518165e+02  2.54803578e+03]
E1 = -704.9290910609711  E_coul = 199.05606525758844
cycle= 1 E= -505.873025803383  delta_E=    0  |g|= 1.03e-12  |ddm|= 1.28e-12
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -704.9290910609711  E_coul = 199.05606525758844
  HOMO = -0.233867596337867  LUMO = 201.518165482861
  mo_energy =
[-1.19407410e+02 -1.22125018e+01 -6.64259527e+00 -6.64259527e+00
 -6.64259527e+00 -1.15918001e+00 -2.33867596e-01 -2.33867596e-01
 -2.33867596e-01  2.01518165e+02  2.54803578e+03]
E1 = -704.9290910609712  E_coul = 199.05606525758844
Extra cycle  E= -505.873025803383  delta_E= -1.14e-13  |g|= 1.43e-12  |ddm|= 6.52e-15
    CPU time for scf_cycle      0.13 sec, wall time      0.14 sec
exp = [1.84778512e+03 2.58010046e+02 5.43703476e+01 4.73317446e+00
 3.91011076e-01 8.58916960e+00 4.91524965e-01]
grad_E = [ 3.23063169e-04  4.23428492e-05  5.42163844e-05  6.11236213e-03
 -4.61166226e-02  2.77042395e-04  3.93886232e-02]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((7, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.5820650117923668e+02,6.8360631861859034e+01,4.6647996209811691e+00,3.9711619128280629e-01,8.5710114329191196e+00,4.8957520672686806e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "5s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:41:06 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  1847.79248591        1
[INPUT] 0    0    [1    /1   ]  257.906822059        1
[INPUT] 0    0    [1    /1   ]  54.3566466536        1
[INPUT] 0    0    [1    /1   ]  4.72824032027        1
[INPUT] 0    0    [1    /1   ]  0.393351206266       1
[INPUT] 1    0    [1    /1   ]  8.58740263522        1
[INPUT] 1    0    [1    /1   ]  0.490245350416       1

nuclear repulsion = 0
number of shells = 7
number of NR pGTOs = 11
number of NR cGTOs = 11
basis = {'Ar': [[0, [1847.7924859076998, 1.0]], [0, [257.906822059129, 1.0]], [0, [54.35664665359562, 1.0]], [0, [4.728240320270585, 1.0]], [0, [0.39335120626597353, 1.0]], [1, [8.587402635221691, 1.0]], [1, [0.49024535041605394, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [1847.79248591]
bas 1, expnt(s) = [257.90682206]
bas 2, expnt(s) = [54.35664665]
bas 3, expnt(s) = [4.72824032]
bas 4, expnt(s) = [0.39335121]
bas 5, expnt(s) = [8.58740264]
bas 6, expnt(s) = [0.49024535]
CPU time:        73.95
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]
 [ 0  1  1  1  0 36 37  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.84779249e+03 7.12040869e+02 2.57906822e+02 1.62596857e+02
 5.43566467e+01 5.05771690e+01 4.72824032e+00 8.10101956e+00
 3.93351206e-01 1.25487477e+00 8.58740264e+00 4.28856182e+01
 4.90245350e-01 1.19674397e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.317607688091936
cond(S) = 9.978999293126488
E1 = -687.0619087632681  E_coul = 184.88467677268835
init E= -502.17723199058
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.682348032666924  LUMO = 199.993293587904
  mo_energy =
[-1.20804362e+02 -1.32544879e+01 -7.62229923e+00 -7.62229923e+00
 -7.62229923e+00 -1.65125071e+00 -6.82348033e-01 -6.82348033e-01
 -6.82348033e-01  1.99993294e+02  2.54637637e+03]
E1 = -704.8933892826402  E_coul = 199.02035925988673
cycle= 1 E= -505.873030022753  delta_E= -3.7  |g|= 0.262  |ddm|= 0.295
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.294066
diis-c [-0.08647476  1.        ]
  HOMO = -0.235579528012154  LUMO = 201.396814645694
  mo_energy =
[-1.19410256e+02 -1.22158033e+01 -6.64442305e+00 -6.64442305e+00
 -6.64442305e+00 -1.16032084e+00 -2.35579528e-01 -2.35579528e-01
 -2.35579528e-01  2.01396815e+02  2.54765396e+03]
E1 = -704.8848330028329  E_coul = 199.01169643820867
cycle= 2 E= -505.873136564624  delta_E= -0.000107  |g|= 0.00199  |ddm|= 0.00344
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00199812
diis-c [-3.00617087e-06 -3.38873561e-03  1.00338874e+00]
  HOMO = -0.235615418064862  LUMO = 201.39502577014
  mo_energy =
[-1.19413019e+02 -1.22160741e+01 -6.64481999e+00 -6.64481999e+00
 -6.64481999e+00 -1.16033582e+00 -2.35615418e-01 -2.35615418e-01
 -2.35615418e-01  2.01395026e+02  2.54764765e+03]
E1 = -704.88477068325  E_coul = 199.01163410993195
cycle= 3 E= -505.873136573318  delta_E= -8.69e-09  |g|= 1.71e-05  |ddm|= 2.79e-05
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=2.2623e-05
diis-c [-7.17624861e-12  4.74608234e-05 -1.31637121e-02  1.01311625e+00]
  HOMO = -0.235615562566076  LUMO = 201.395022465082
  mo_energy =
[-1.19413028e+02 -1.22160752e+01 -6.64482202e+00 -6.64482202e+00
 -6.64482202e+00 -1.16033586e+00 -2.35615563e-01 -2.35615563e-01
 -2.35615563e-01  2.01395022e+02  2.54764765e+03]
E1 = -704.8847703688409  E_coul = 199.01163379552187
cycle= 4 E= -505.873136573319  delta_E= -9.09e-13  |g|= 2.27e-08  |ddm|= 1.92e-07
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -704.8847703688409  E_coul = 199.01163379552187
  HOMO = -0.235615562399467  LUMO = 201.39502249576
  mo_energy =
[-1.19413028e+02 -1.22160752e+01 -6.64482202e+00 -6.64482202e+00
 -6.64482202e+00 -1.16033586e+00 -2.35615562e-01 -2.35615562e-01
 -2.35615562e-01  2.01395022e+02  2.54764765e+03]
E1 = -704.8847703694804  E_coul = 199.011633796162
Extra cycle  E= -505.873136573318  delta_E= 5.68e-13  |g|= 1.71e-10  |ddm|= 1.9e-10
    CPU time for scf_cycle      0.10 sec, wall time      0.10 sec
exp = [1.84779249e+03 2.57906822e+02 5.43566467e+01 4.72824032e+00
 3.93351206e-01 8.58740264e+00 4.90245350e-01]
E = -505.87313657331845
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((7, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.5820650117923668e+02,6.8360631861859034e+01,4.6647996209811691e+00,3.9711619128280629e-01,8.5710114329191196e+00,4.8957520672686806e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "5s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:41:06 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  1847.79248591        1
[INPUT] 0    0    [1    /1   ]  257.906822059        1
[INPUT] 0    0    [1    /1   ]  54.3566466536        1
[INPUT] 0    0    [1    /1   ]  4.72824032027        1
[INPUT] 0    0    [1    /1   ]  0.393351206266       1
[INPUT] 1    0    [1    /1   ]  8.58740263522        1
[INPUT] 1    0    [1    /1   ]  0.490245350416       1

nuclear repulsion = 0
number of shells = 7
number of NR pGTOs = 11
number of NR cGTOs = 11
basis = {'Ar': [[0, [1847.7924859076998, 1.0]], [0, [257.906822059129, 1.0]], [0, [54.35664665359562, 1.0]], [0, [4.728240320270585, 1.0]], [0, [0.39335120626597353, 1.0]], [1, [8.587402635221691, 1.0]], [1, [0.49024535041605394, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [1847.79248591]
bas 1, expnt(s) = [257.90682206]
bas 2, expnt(s) = [54.35664665]
bas 3, expnt(s) = [4.72824032]
bas 4, expnt(s) = [0.39335121]
bas 5, expnt(s) = [8.58740264]
bas 6, expnt(s) = [0.49024535]
CPU time:        74.41
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]
 [ 0  1  1  1  0 36 37  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.84779249e+03 7.12040869e+02 2.57906822e+02 1.62596857e+02
 5.43566467e+01 5.05771690e+01 4.72824032e+00 8.10101956e+00
 3.93351206e-01 1.25487477e+00 8.58740264e+00 4.28856182e+01
 4.90245350e-01 1.19674397e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.317607688091936
cond(S) = 9.978999293126488
E1 = -687.0619087632681  E_coul = 184.88467677268835
init E= -502.17723199058
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.682348032666924  LUMO = 199.993293587904
  mo_energy =
[-1.20804362e+02 -1.32544879e+01 -7.62229923e+00 -7.62229923e+00
 -7.62229923e+00 -1.65125071e+00 -6.82348033e-01 -6.82348033e-01
 -6.82348033e-01  1.99993294e+02  2.54637637e+03]
E1 = -704.8933892826402  E_coul = 199.02035925988673
cycle= 1 E= -505.873030022753  delta_E= -3.7  |g|= 0.262  |ddm|= 0.295
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.294066
diis-c [-0.08647476  1.        ]
  HOMO = -0.235579528012154  LUMO = 201.396814645694
  mo_energy =
[-1.19410256e+02 -1.22158033e+01 -6.64442305e+00 -6.64442305e+00
 -6.64442305e+00 -1.16032084e+00 -2.35579528e-01 -2.35579528e-01
 -2.35579528e-01  2.01396815e+02  2.54765396e+03]
E1 = -704.8848330028329  E_coul = 199.01169643820867
cycle= 2 E= -505.873136564624  delta_E= -0.000107  |g|= 0.00199  |ddm|= 0.00344
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00199812
diis-c [-3.00617087e-06 -3.38873561e-03  1.00338874e+00]
  HOMO = -0.235615418064862  LUMO = 201.39502577014
  mo_energy =
[-1.19413019e+02 -1.22160741e+01 -6.64481999e+00 -6.64481999e+00
 -6.64481999e+00 -1.16033582e+00 -2.35615418e-01 -2.35615418e-01
 -2.35615418e-01  2.01395026e+02  2.54764765e+03]
E1 = -704.88477068325  E_coul = 199.01163410993195
cycle= 3 E= -505.873136573318  delta_E= -8.69e-09  |g|= 1.71e-05  |ddm|= 2.79e-05
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=2.2623e-05
diis-c [-7.17624861e-12  4.74608234e-05 -1.31637121e-02  1.01311625e+00]
  HOMO = -0.235615562566076  LUMO = 201.395022465082
  mo_energy =
[-1.19413028e+02 -1.22160752e+01 -6.64482202e+00 -6.64482202e+00
 -6.64482202e+00 -1.16033586e+00 -2.35615563e-01 -2.35615563e-01
 -2.35615563e-01  2.01395022e+02  2.54764765e+03]
E1 = -704.8847703688409  E_coul = 199.01163379552187
cycle= 4 E= -505.873136573319  delta_E= -9.09e-13  |g|= 2.27e-08  |ddm|= 1.92e-07
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -704.8847703688409  E_coul = 199.01163379552187
  HOMO = -0.235615562399467  LUMO = 201.39502249576
  mo_energy =
[-1.19413028e+02 -1.22160752e+01 -6.64482202e+00 -6.64482202e+00
 -6.64482202e+00 -1.16033586e+00 -2.35615562e-01 -2.35615562e-01
 -2.35615562e-01  2.01395022e+02  2.54764765e+03]
E1 = -704.8847703694804  E_coul = 199.011633796162
Extra cycle  E= -505.873136573318  delta_E= 5.68e-13  |g|= 1.71e-10  |ddm|= 1.9e-10
    CPU time for scf_cycle      0.10 sec, wall time      0.10 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 9.978999293126488
E1 = -704.8847703694804  E_coul = 199.011633796162
init E= -505.873136573318
    CPU time for initialize scf      0.05 sec, wall time      0.05 sec
  HOMO = -0.235615562398395  LUMO = 201.395022495982
  mo_energy =
[-1.19413028e+02 -1.22160752e+01 -6.64482202e+00 -6.64482202e+00
 -6.64482202e+00 -1.16033586e+00 -2.35615562e-01 -2.35615562e-01
 -2.35615562e-01  2.01395022e+02  2.54764765e+03]
E1 = -704.8847703694847  E_coul = 199.01163379616628
cycle= 1 E= -505.873136573318  delta_E=    0  |g|= 1.36e-12  |ddm|= 1.28e-12
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -704.8847703694847  E_coul = 199.01163379616628
  HOMO = -0.235615562398394  LUMO = 201.395022495983
  mo_energy =
[-1.19413028e+02 -1.22160752e+01 -6.64482202e+00 -6.64482202e+00
 -6.64482202e+00 -1.16033586e+00 -2.35615562e-01 -2.35615562e-01
 -2.35615562e-01  2.01395022e+02  2.54764765e+03]
E1 = -704.8847703694847  E_coul = 199.0116337961663
Extra cycle  E= -505.873136573318  delta_E=    0  |g|= 2.84e-13  |ddm|= 7.51e-15
    CPU time for scf_cycle      0.12 sec, wall time      0.13 sec
exp = [1.84779249e+03 2.57906822e+02 5.43566467e+01 4.72824032e+00
 3.93351206e-01 8.58740264e+00 4.90245350e-01]
grad_E = [ 3.25826441e-04  2.53176025e-06  2.75954028e-05  1.02431022e-03
 -1.18527622e-02 -1.11252288e-04 -6.76702828e-04]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((7, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.5820650117923668e+02,6.8360631861859034e+01,4.6647996209811691e+00,3.9711619128280629e-01,8.5710114329191196e+00,4.8957520672686806e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "5s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:41:09 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  1847.78886527        1
[INPUT] 0    0    [1    /1   ]  257.94977293         1
[INPUT] 0    0    [1    /1   ]  54.3623866628        1
[INPUT] 0    0    [1    /1   ]  4.72717390878        1
[INPUT] 0    0    [1    /1   ]  0.394049547859       1
[INPUT] 1    0    [1    /1   ]  8.58739780733        1
[INPUT] 1    0    [1    /1   ]  0.49018331632        1

nuclear repulsion = 0
number of shells = 7
number of NR pGTOs = 11
number of NR cGTOs = 11
basis = {'Ar': [[0, [1847.7888652692905, 1.0]], [0, [257.94977292977353, 1.0]], [0, [54.36238666278322, 1.0]], [0, [4.727173908779472, 1.0]], [0, [0.39404954785907137, 1.0]], [1, [8.587397807325905, 1.0]], [1, [0.4901833163201324, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [1847.78886527]
bas 1, expnt(s) = [257.94977293]
bas 2, expnt(s) = [54.36238666]
bas 3, expnt(s) = [4.72717391]
bas 4, expnt(s) = [0.39404955]
bas 5, expnt(s) = [8.58739781]
bas 6, expnt(s) = [0.49018332]
CPU time:        77.42
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]
 [ 0  1  1  1  0 36 37  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.84778887e+03 7.12039823e+02 2.57949773e+02 1.62617165e+02
 5.43623867e+01 5.05811746e+01 4.72717391e+00 8.09964919e+00
 3.94049548e-01 1.25654530e+00 8.58739781e+00 4.28855881e+01
 4.90183316e-01 1.19655468e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.317609004122133
cond(S) = 9.979314515063225
E1 = -687.0698490928162  E_coul = 184.89207200730445
init E= -502.177777085512
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.682107333642874  LUMO = 200.035452617025
  mo_energy =
[-1.20803792e+02 -1.32539854e+01 -7.62166420e+00 -7.62166420e+00
 -7.62166420e+00 -1.65125758e+00 -6.82107334e-01 -6.82107334e-01
 -6.82107334e-01  2.00035453e+02  2.54652999e+03]
E1 = -704.9010639552409  E_coul = 199.02802850006867
cycle= 1 E= -505.873035455172  delta_E= -3.7  |g|= 0.262  |ddm|= 0.294
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.293977
diis-c [-0.0864223  1.       ]
  HOMO = -0.235356949189628  LUMO = 201.438967525855
  mo_energy =
[-1.19409719e+02 -1.22153253e+01 -6.64378262e+00 -6.64378262e+00
 -6.64378262e+00 -1.16009367e+00 -2.35356949e-01 -2.35356949e-01
 -2.35356949e-01  2.01438968e+02  2.54780755e+03]
E1 = -704.8925067790311  E_coul = 199.01936474439677
cycle= 2 E= -505.873142034634  delta_E= -0.000107  |g|= 0.00199  |ddm|= 0.00344
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00199924
diis-c [-3.00936353e-06 -3.39197374e-03  1.00339197e+00]
  HOMO = -0.235392831601955  LUMO = 201.437178289168
  mo_energy =
[-1.19412481e+02 -1.22155960e+01 -6.64417960e+00 -6.64417960e+00
 -6.64417960e+00 -1.16010866e+00 -2.35392832e-01 -2.35392832e-01
 -2.35392832e-01  2.01437178e+02  2.54780125e+03]
E1 = -704.8924444577324  E_coul = 199.01930241439945
cycle= 3 E= -505.873142043333  delta_E= -8.7e-09  |g|= 1.71e-05  |ddm|= 2.79e-05
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=2.26246e-05
diis-c [-7.17920610e-12  4.74544559e-05 -1.31577583e-02  1.01311030e+00]
  HOMO = -0.235392975992084  LUMO = 201.437174991365
  mo_energy =
[-1.19412490e+02 -1.22155972e+01 -6.64418163e+00 -6.64418163e+00
 -6.64418163e+00 -1.16010870e+00 -2.35392976e-01 -2.35392976e-01
 -2.35392976e-01  2.01437175e+02  2.54780124e+03]
E1 = -704.8924441436117  E_coul = 199.01930210027834
cycle= 4 E= -505.873142043333  delta_E= -4.55e-13  |g|= 2.27e-08  |ddm|= 1.92e-07
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -704.8924441436117  E_coul = 199.01930210027834
  HOMO = -0.235392975825626  LUMO = 201.437175022039
  mo_energy =
[-1.19412490e+02 -1.22155972e+01 -6.64418162e+00 -6.64418162e+00
 -6.64418162e+00 -1.16010870e+00 -2.35392976e-01 -2.35392976e-01
 -2.35392976e-01  2.01437175e+02  2.54780124e+03]
E1 = -704.8924441442516  E_coul = 199.01930210091788
Extra cycle  E= -505.873142043334  delta_E= -3.41e-13  |g|= 1.71e-10  |ddm|= 1.89e-10
    CPU time for scf_cycle      0.10 sec, wall time      0.10 sec
exp = [1.84778887e+03 2.57949773e+02 5.43623867e+01 4.72717391e+00
 3.94049548e-01 8.58739781e+00 4.90183316e-01]
E = -505.8731420433337
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((7, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.5820650117923668e+02,6.8360631861859034e+01,4.6647996209811691e+00,3.9711619128280629e-01,8.5710114329191196e+00,4.8957520672686806e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "5s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:41:10 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  1847.78886527        1
[INPUT] 0    0    [1    /1   ]  257.94977293         1
[INPUT] 0    0    [1    /1   ]  54.3623866628        1
[INPUT] 0    0    [1    /1   ]  4.72717390878        1
[INPUT] 0    0    [1    /1   ]  0.394049547859       1
[INPUT] 1    0    [1    /1   ]  8.58739780733        1
[INPUT] 1    0    [1    /1   ]  0.49018331632        1

nuclear repulsion = 0
number of shells = 7
number of NR pGTOs = 11
number of NR cGTOs = 11
basis = {'Ar': [[0, [1847.7888652692905, 1.0]], [0, [257.94977292977353, 1.0]], [0, [54.36238666278322, 1.0]], [0, [4.727173908779472, 1.0]], [0, [0.39404954785907137, 1.0]], [1, [8.587397807325905, 1.0]], [1, [0.4901833163201324, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [1847.78886527]
bas 1, expnt(s) = [257.94977293]
bas 2, expnt(s) = [54.36238666]
bas 3, expnt(s) = [4.72717391]
bas 4, expnt(s) = [0.39404955]
bas 5, expnt(s) = [8.58739781]
bas 6, expnt(s) = [0.49018332]
CPU time:        77.89
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]
 [ 0  1  1  1  0 36 37  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.84778887e+03 7.12039823e+02 2.57949773e+02 1.62617165e+02
 5.43623867e+01 5.05811746e+01 4.72717391e+00 8.09964919e+00
 3.94049548e-01 1.25654530e+00 8.58739781e+00 4.28855881e+01
 4.90183316e-01 1.19655468e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.317609004122133
cond(S) = 9.979314515063225
E1 = -687.0698490928162  E_coul = 184.89207200730445
init E= -502.177777085512
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.682107333642874  LUMO = 200.035452617025
  mo_energy =
[-1.20803792e+02 -1.32539854e+01 -7.62166420e+00 -7.62166420e+00
 -7.62166420e+00 -1.65125758e+00 -6.82107334e-01 -6.82107334e-01
 -6.82107334e-01  2.00035453e+02  2.54652999e+03]
E1 = -704.9010639552409  E_coul = 199.02802850006867
cycle= 1 E= -505.873035455172  delta_E= -3.7  |g|= 0.262  |ddm|= 0.294
    CPU time for cycle= 1      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.293977
diis-c [-0.0864223  1.       ]
  HOMO = -0.235356949189628  LUMO = 201.438967525855
  mo_energy =
[-1.19409719e+02 -1.22153253e+01 -6.64378262e+00 -6.64378262e+00
 -6.64378262e+00 -1.16009367e+00 -2.35356949e-01 -2.35356949e-01
 -2.35356949e-01  2.01438968e+02  2.54780755e+03]
E1 = -704.8925067790311  E_coul = 199.01936474439677
cycle= 2 E= -505.873142034634  delta_E= -0.000107  |g|= 0.00199  |ddm|= 0.00344
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00199924
diis-c [-3.00936353e-06 -3.39197374e-03  1.00339197e+00]
  HOMO = -0.235392831601955  LUMO = 201.437178289168
  mo_energy =
[-1.19412481e+02 -1.22155960e+01 -6.64417960e+00 -6.64417960e+00
 -6.64417960e+00 -1.16010866e+00 -2.35392832e-01 -2.35392832e-01
 -2.35392832e-01  2.01437178e+02  2.54780125e+03]
E1 = -704.8924444577324  E_coul = 199.01930241439945
cycle= 3 E= -505.873142043333  delta_E= -8.7e-09  |g|= 1.71e-05  |ddm|= 2.79e-05
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=2.26246e-05
diis-c [-7.17920610e-12  4.74544559e-05 -1.31577583e-02  1.01311030e+00]
  HOMO = -0.235392975992084  LUMO = 201.437174991365
  mo_energy =
[-1.19412490e+02 -1.22155972e+01 -6.64418163e+00 -6.64418163e+00
 -6.64418163e+00 -1.16010870e+00 -2.35392976e-01 -2.35392976e-01
 -2.35392976e-01  2.01437175e+02  2.54780124e+03]
E1 = -704.8924441436117  E_coul = 199.01930210027834
cycle= 4 E= -505.873142043333  delta_E= -4.55e-13  |g|= 2.27e-08  |ddm|= 1.92e-07
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -704.8924441436117  E_coul = 199.01930210027834
  HOMO = -0.235392975825626  LUMO = 201.437175022039
  mo_energy =
[-1.19412490e+02 -1.22155972e+01 -6.64418162e+00 -6.64418162e+00
 -6.64418162e+00 -1.16010870e+00 -2.35392976e-01 -2.35392976e-01
 -2.35392976e-01  2.01437175e+02  2.54780124e+03]
E1 = -704.8924441442516  E_coul = 199.01930210091788
Extra cycle  E= -505.873142043334  delta_E= -3.41e-13  |g|= 1.71e-10  |ddm|= 1.89e-10
    CPU time for scf_cycle      0.11 sec, wall time      0.11 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 9.979314515063225
E1 = -704.8924441442516  E_coul = 199.01930210091788
init E= -505.873142043334
    CPU time for initialize scf      0.05 sec, wall time      0.06 sec
  HOMO = -0.235392975824555  LUMO = 201.43717502226
  mo_energy =
[-1.19412490e+02 -1.22155972e+01 -6.64418162e+00 -6.64418162e+00
 -6.64418162e+00 -1.16010870e+00 -2.35392976e-01 -2.35392976e-01
 -2.35392976e-01  2.01437175e+02  2.54780124e+03]
E1 = -704.8924441442564  E_coul = 199.01930210092246
cycle= 1 E= -505.873142043334  delta_E= -2.27e-13  |g|= 2.17e-12  |ddm|= 1.29e-12
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -704.8924441442564  E_coul = 199.01930210092246
  HOMO = -0.235392975824545  LUMO = 201.437175022262
  mo_energy =
[-1.19412490e+02 -1.22155972e+01 -6.64418162e+00 -6.64418162e+00
 -6.64418162e+00 -1.16010870e+00 -2.35392976e-01 -2.35392976e-01
 -2.35392976e-01  2.01437175e+02  2.54780124e+03]
E1 = -704.8924441442557  E_coul = 199.01930210092235
Extra cycle  E= -505.873142043333  delta_E= 5.68e-13  |g|= 8.24e-13  |ddm|= 7.36e-15
    CPU time for scf_cycle      0.12 sec, wall time      0.13 sec
exp = [1.84778887e+03 2.57949773e+02 5.43623867e+01 4.72717391e+00
 3.94049548e-01 8.58739781e+00 4.90183316e-01]
grad_E = [ 3.24659159e-04  2.02066427e-05  1.57211328e-05 -1.76379601e-05
 -8.28076782e-04 -5.51781775e-05 -1.15580253e-03]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((7, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.5820650117923668e+02,6.8360631861859034e+01,4.6647996209811691e+00,3.9711619128280629e-01,8.5710114329191196e+00,4.8957520672686806e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "5s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:41:13 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  1847.78808077        1
[INPUT] 0    0    [1    /1   ]  257.955481035        1
[INPUT] 0    0    [1    /1   ]  54.362775325         1
[INPUT] 0    0    [1    /1   ]  4.72715695936        1
[INPUT] 0    0    [1    /1   ]  0.394103773495       1
[INPUT] 1    0    [1    /1   ]  8.58747388553        1
[INPUT] 1    0    [1    /1   ]  0.49020855346        1

nuclear repulsion = 0
number of shells = 7
number of NR pGTOs = 11
number of NR cGTOs = 11
basis = {'Ar': [[0, [1847.7880807687593, 1.0]], [0, [257.95548103542734, 1.0]], [0, [54.36277532499349, 1.0]], [0, [4.727156959359801, 1.0]], [0, [0.39410377349457953, 1.0]], [1, [8.58747388552798, 1.0]], [1, [0.490208553459559, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [1847.78808077]
bas 1, expnt(s) = [257.95548104]
bas 2, expnt(s) = [54.36277532]
bas 3, expnt(s) = [4.72715696]
bas 4, expnt(s) = [0.39410377]
bas 5, expnt(s) = [8.58747389]
bas 6, expnt(s) = [0.49020855]
CPU time:        80.91
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]
 [ 0  1  1  1  0 36 37  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.84778808e+03 7.12039596e+02 2.57955481e+02 1.62619864e+02
 5.43627753e+01 5.05814459e+01 4.72715696e+00 8.09962741e+00
 3.94103773e-01 1.25667498e+00 8.58747389e+00 4.28860630e+01
 4.90208553e-01 1.19663169e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.3175693675985
cond(S) = 9.979312154803823
E1 = -687.072068625917  E_coul = 184.89409272647458
init E= -502.177975899442
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.682052499845686  LUMO = 200.040522221291
  mo_energy =
[-1.20803576e+02 -1.32538253e+01 -7.62152078e+00 -7.62152078e+00
 -7.62152078e+00 -1.65122926e+00 -6.82052500e-01 -6.82052500e-01
 -6.82052500e-01  2.00040522e+02  2.54654919e+03]
E1 = -704.903790271262  E_coul = 199.03075465239192
cycle= 1 E= -505.87303561887  delta_E= -3.7  |g|= 0.262  |ddm|= 0.294
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.293957
diis-c [-0.08641057  1.        ]
  HOMO = -0.235269262555479  LUMO = 201.444087999881
  mo_energy =
[-1.19409450e+02 -1.22151237e+01 -6.64359678e+00 -6.64359678e+00
 -6.64359678e+00 -1.16002121e+00 -2.35269263e-01 -2.35269263e-01
 -2.35269263e-01  2.01444088e+02  2.54782680e+03]
E1 = -704.8952330172139  E_coul = 199.0220908202087
cycle= 2 E= -505.873142197005  delta_E= -0.000107  |g|= 0.00199  |ddm|= 0.00344
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00199919
diis-c [-3.00922745e-06 -3.39211327e-03  1.00339211e+00]
  HOMO = -0.235305148145039  LUMO = 201.442298674455
  mo_energy =
[-1.19412213e+02 -1.22153945e+01 -6.64399375e+00 -6.64399375e+00
 -6.64399375e+00 -1.16003621e+00 -2.35305148e-01 -2.35305148e-01
 -2.35305148e-01  2.01442299e+02  2.54782050e+03]
E1 = -704.8951706967745  E_coul = 199.02202849107144
cycle= 3 E= -505.873142205703  delta_E= -8.7e-09  |g|= 1.71e-05  |ddm|= 2.79e-05
    CPU time for cycle= 3      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=2.26234e-05
diis-c [-7.17950744e-12  4.74537907e-05 -1.31573293e-02  1.01310988e+00]
  HOMO = -0.235305292541959  LUMO = 201.442295376792
  mo_energy =
[-1.19412222e+02 -1.22153956e+01 -6.64399578e+00 -6.64399578e+00
 -6.64399578e+00 -1.16003625e+00 -2.35305293e-01 -2.35305293e-01
 -2.35305293e-01  2.01442295e+02  2.54782050e+03]
E1 = -704.8951703826839  E_coul = 199.02202817698011
cycle= 4 E= -505.873142205704  delta_E= -6.82e-13  |g|= 2.27e-08  |ddm|= 1.92e-07
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -704.8951703826839  E_coul = 199.02202817698011
  HOMO = -0.235305292375504  LUMO = 201.442295407465
  mo_energy =
[-1.19412222e+02 -1.22153956e+01 -6.64399578e+00 -6.64399578e+00
 -6.64399578e+00 -1.16003625e+00 -2.35305292e-01 -2.35305292e-01
 -2.35305292e-01  2.01442295e+02  2.54782050e+03]
E1 = -704.8951703833233  E_coul = 199.02202817761957
Extra cycle  E= -505.873142205704  delta_E= 5.68e-14  |g|= 1.71e-10  |ddm|= 1.89e-10
    CPU time for scf_cycle      0.10 sec, wall time      0.10 sec
exp = [1.84778808e+03 2.57955481e+02 5.43627753e+01 4.72715696e+00
 3.94103773e-01 8.58747389e+00 4.90208553e-01]
E = -505.8731422057037
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((7, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.5820650117923668e+02,6.8360631861859034e+01,4.6647996209811691e+00,3.9711619128280629e-01,8.5710114329191196e+00,4.8957520672686806e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "5s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:41:13 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  1847.78808077        1
[INPUT] 0    0    [1    /1   ]  257.955481035        1
[INPUT] 0    0    [1    /1   ]  54.362775325         1
[INPUT] 0    0    [1    /1   ]  4.72715695936        1
[INPUT] 0    0    [1    /1   ]  0.394103773495       1
[INPUT] 1    0    [1    /1   ]  8.58747388553        1
[INPUT] 1    0    [1    /1   ]  0.49020855346        1

nuclear repulsion = 0
number of shells = 7
number of NR pGTOs = 11
number of NR cGTOs = 11
basis = {'Ar': [[0, [1847.7880807687593, 1.0]], [0, [257.95548103542734, 1.0]], [0, [54.36277532499349, 1.0]], [0, [4.727156959359801, 1.0]], [0, [0.39410377349457953, 1.0]], [1, [8.58747388552798, 1.0]], [1, [0.490208553459559, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [1847.78808077]
bas 1, expnt(s) = [257.95548104]
bas 2, expnt(s) = [54.36277532]
bas 3, expnt(s) = [4.72715696]
bas 4, expnt(s) = [0.39410377]
bas 5, expnt(s) = [8.58747389]
bas 6, expnt(s) = [0.49020855]
CPU time:        81.39
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]
 [ 0  1  1  1  0 36 37  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.84778808e+03 7.12039596e+02 2.57955481e+02 1.62619864e+02
 5.43627753e+01 5.05814459e+01 4.72715696e+00 8.09962741e+00
 3.94103773e-01 1.25667498e+00 8.58747389e+00 4.28860630e+01
 4.90208553e-01 1.19663169e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.3175693675985
cond(S) = 9.979312154803823
E1 = -687.072068625917  E_coul = 184.89409272647458
init E= -502.177975899442
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.682052499845686  LUMO = 200.040522221291
  mo_energy =
[-1.20803576e+02 -1.32538253e+01 -7.62152078e+00 -7.62152078e+00
 -7.62152078e+00 -1.65122926e+00 -6.82052500e-01 -6.82052500e-01
 -6.82052500e-01  2.00040522e+02  2.54654919e+03]
E1 = -704.903790271262  E_coul = 199.03075465239192
cycle= 1 E= -505.87303561887  delta_E= -3.7  |g|= 0.262  |ddm|= 0.294
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.293957
diis-c [-0.08641057  1.        ]
  HOMO = -0.235269262555479  LUMO = 201.444087999881
  mo_energy =
[-1.19409450e+02 -1.22151237e+01 -6.64359678e+00 -6.64359678e+00
 -6.64359678e+00 -1.16002121e+00 -2.35269263e-01 -2.35269263e-01
 -2.35269263e-01  2.01444088e+02  2.54782680e+03]
E1 = -704.8952330172139  E_coul = 199.0220908202087
cycle= 2 E= -505.873142197005  delta_E= -0.000107  |g|= 0.00199  |ddm|= 0.00344
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00199919
diis-c [-3.00922745e-06 -3.39211327e-03  1.00339211e+00]
  HOMO = -0.235305148145039  LUMO = 201.442298674455
  mo_energy =
[-1.19412213e+02 -1.22153945e+01 -6.64399375e+00 -6.64399375e+00
 -6.64399375e+00 -1.16003621e+00 -2.35305148e-01 -2.35305148e-01
 -2.35305148e-01  2.01442299e+02  2.54782050e+03]
E1 = -704.8951706967745  E_coul = 199.02202849107144
cycle= 3 E= -505.873142205703  delta_E= -8.7e-09  |g|= 1.71e-05  |ddm|= 2.79e-05
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=2.26234e-05
diis-c [-7.17950744e-12  4.74537907e-05 -1.31573293e-02  1.01310988e+00]
  HOMO = -0.235305292541959  LUMO = 201.442295376792
  mo_energy =
[-1.19412222e+02 -1.22153956e+01 -6.64399578e+00 -6.64399578e+00
 -6.64399578e+00 -1.16003625e+00 -2.35305293e-01 -2.35305293e-01
 -2.35305293e-01  2.01442295e+02  2.54782050e+03]
E1 = -704.8951703826839  E_coul = 199.02202817698011
cycle= 4 E= -505.873142205704  delta_E= -6.82e-13  |g|= 2.27e-08  |ddm|= 1.92e-07
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -704.8951703826839  E_coul = 199.02202817698011
  HOMO = -0.235305292375504  LUMO = 201.442295407465
  mo_energy =
[-1.19412222e+02 -1.22153956e+01 -6.64399578e+00 -6.64399578e+00
 -6.64399578e+00 -1.16003625e+00 -2.35305292e-01 -2.35305292e-01
 -2.35305292e-01  2.01442295e+02  2.54782050e+03]
E1 = -704.8951703833233  E_coul = 199.02202817761957
Extra cycle  E= -505.873142205704  delta_E= 5.68e-14  |g|= 1.71e-10  |ddm|= 1.89e-10
    CPU time for scf_cycle      0.10 sec, wall time      0.10 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 9.979312154803823
E1 = -704.8951703833233  E_coul = 199.02202817761957
init E= -505.873142205704
    CPU time for initialize scf      0.05 sec, wall time      0.05 sec
  HOMO = -0.235305292374433  LUMO = 201.442295407687
  mo_energy =
[-1.19412222e+02 -1.22153956e+01 -6.64399578e+00 -6.64399578e+00
 -6.64399578e+00 -1.16003625e+00 -2.35305292e-01 -2.35305292e-01
 -2.35305292e-01  2.01442295e+02  2.54782050e+03]
E1 = -704.8951703833275  E_coul = 199.02202817762384
cycle= 1 E= -505.873142205704  delta_E= 5.68e-14  |g|= 3.34e-12  |ddm|= 1.28e-12
    CPU time for cycle= 1      0.01 sec, wall time      0.02 sec
E1 = -704.8951703833275  E_coul = 199.02202817762384
  HOMO = -0.235305292374427  LUMO = 201.442295407688
  mo_energy =
[-1.19412222e+02 -1.22153956e+01 -6.64399578e+00 -6.64399578e+00
 -6.64399578e+00 -1.16003625e+00 -2.35305292e-01 -2.35305292e-01
 -2.35305292e-01  2.01442295e+02  2.54782050e+03]
E1 = -704.8951703833279  E_coul = 199.02202817762395
Extra cycle  E= -505.873142205704  delta_E= -3.41e-13  |g|= 7.64e-13  |ddm|= 1.53e-14
    CPU time for scf_cycle      0.13 sec, wall time      0.14 sec
exp = [1.84778808e+03 2.57955481e+02 5.43627753e+01 4.72715696e+00
 3.94103773e-01 8.58747389e+00 4.90208553e-01]
grad_E = [ 3.24475576e-04  2.39418526e-05  4.46003120e-06 -2.56598387e-05
  1.20108061e-04 -1.18011812e-05 -1.35641942e-04]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((7, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.5820650117923668e+02,6.8360631861859034e+01,4.6647996209811691e+00,3.9711619128280629e-01,8.5710114329191196e+00,4.8957520672686806e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "5s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:41:17 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  1847.78656933        1
[INPUT] 0    0    [1    /1   ]  257.961187228        1
[INPUT] 0    0    [1    /1   ]  54.36292751          1
[INPUT] 0    0    [1    /1   ]  4.72715708164        1
[INPUT] 0    0    [1    /1   ]  0.39416229285        1
[INPUT] 1    0    [1    /1   ]  8.5875846832         1
[INPUT] 1    0    [1    /1   ]  0.490241252801       1

nuclear repulsion = 0
number of shells = 7
number of NR pGTOs = 11
number of NR cGTOs = 11
basis = {'Ar': [[0, [1847.786569330345, 1.0]], [0, [257.9611872281076, 1.0]], [0, [54.36292750997149, 1.0]], [0, [4.727157081641458, 1.0]], [0, [0.394162292850354, 1.0]], [1, [8.587584683198308, 1.0]], [1, [0.4902412528013008, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [1847.78656933]
bas 1, expnt(s) = [257.96118723]
bas 2, expnt(s) = [54.36292751]
bas 3, expnt(s) = [4.72715708]
bas 4, expnt(s) = [0.39416229]
bas 5, expnt(s) = [8.58758468]
bas 6, expnt(s) = [0.49024125]
CPU time:        84.44
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]
 [ 0  1  1  1  0 36 37  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.84778657e+03 7.12039159e+02 2.57961187e+02 1.62622562e+02
 5.43629275e+01 5.05815521e+01 4.72715708e+00 8.09962757e+00
 3.94162293e-01 1.25681493e+00 8.58758468e+00 4.28867547e+01
 4.90241253e-01 1.19673146e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.31751929465773
cond(S) = 9.979292009861698
E1 = -687.0748437389096  E_coul = 184.8966087778452
init E= -502.178234961064
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.681986861167794  LUMO = 200.045065316818
  mo_energy =
[-1.20803300e+02 -1.32536230e+01 -7.62134356e+00 -7.62134356e+00
 -7.62134356e+00 -1.65119312e+00 -6.81986861e-01 -6.81986861e-01
 -6.81986861e-01  2.00045065e+02  2.54656690e+03]
E1 = -704.9071957782106  E_coul = 199.03415987358093
cycle= 1 E= -505.87303590463  delta_E= -3.69  |g|= 0.262  |ddm|= 0.295
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.293931
diis-c [-0.08639546  1.        ]
  HOMO = -0.235161723662724  LUMO = 201.448693559761
  mo_energy =
[-1.19409108e+02 -1.22148683e+01 -6.64336552e+00 -6.64336552e+00
 -6.64336552e+00 -1.15993251e+00 -2.35161724e-01 -2.35161724e-01
 -2.35161724e-01  2.01448694e+02  2.54784456e+03]
E1 = -704.8986383105201  E_coul = 199.02549582886607
cycle= 2 E= -505.873142481654  delta_E= -0.000107  |g|= 0.00199  |ddm|= 0.00344
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00199911
diis-c [-3.00902204e-06 -3.39221582e-03  1.00339222e+00]
  HOMO = -0.235197613907696  LUMO = 201.446904097682
  mo_energy =
[-1.19411871e+02 -1.22151391e+01 -6.64376250e+00 -6.64376250e+00
 -6.64376250e+00 -1.15994752e+00 -2.35197614e-01 -2.35197614e-01
 -2.35197614e-01  2.01446904e+02  2.54783826e+03]
E1 = -704.8985759900845  E_coul = 199.02543349973337
cycle= 3 E= -505.873142490351  delta_E= -8.7e-09  |g|= 1.71e-05  |ddm|= 2.79e-05
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=2.2622e-05
diis-c [-7.18015477e-12  4.74531556e-05 -1.31569511e-02  1.01310950e+00]
  HOMO = -0.235197758318469  LUMO = 201.446900799904
  mo_energy =
[-1.19411880e+02 -1.22151402e+01 -6.64376452e+00 -6.64376452e+00
 -6.64376452e+00 -1.15994756e+00 -2.35197758e-01 -2.35197758e-01
 -2.35197758e-01  2.01446901e+02  2.54783826e+03]
E1 = -704.8985756760181  E_coul = 199.02543318566615
cycle= 4 E= -505.873142490352  delta_E= -8.53e-13  |g|= 2.27e-08  |ddm|= 1.92e-07
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -704.8985756760181  E_coul = 199.02543318566615
  HOMO = -0.235197758151998  LUMO = 201.446900830578
  mo_energy =
[-1.19411880e+02 -1.22151402e+01 -6.64376452e+00 -6.64376452e+00
 -6.64376452e+00 -1.15994756e+00 -2.35197758e-01 -2.35197758e-01
 -2.35197758e-01  2.01446901e+02  2.54783826e+03]
E1 = -704.8985756766576  E_coul = 199.02543318630563
Extra cycle  E= -505.873142490352  delta_E=    0  |g|= 1.72e-10  |ddm|= 1.89e-10
    CPU time for scf_cycle      0.10 sec, wall time      0.10 sec
exp = [1.84778657e+03 2.57961187e+02 5.43629275e+01 4.72715708e+00
 3.94162293e-01 8.58758468e+00 4.90241253e-01]
E = -505.873142490352
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((7, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.5820650117923668e+02,6.8360631861859034e+01,4.6647996209811691e+00,3.9711619128280629e-01,8.5710114329191196e+00,4.8957520672686806e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "5s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:41:17 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  1847.78656933        1
[INPUT] 0    0    [1    /1   ]  257.961187228        1
[INPUT] 0    0    [1    /1   ]  54.36292751          1
[INPUT] 0    0    [1    /1   ]  4.72715708164        1
[INPUT] 0    0    [1    /1   ]  0.39416229285        1
[INPUT] 1    0    [1    /1   ]  8.5875846832         1
[INPUT] 1    0    [1    /1   ]  0.490241252801       1

nuclear repulsion = 0
number of shells = 7
number of NR pGTOs = 11
number of NR cGTOs = 11
basis = {'Ar': [[0, [1847.786569330345, 1.0]], [0, [257.9611872281076, 1.0]], [0, [54.36292750997149, 1.0]], [0, [4.727157081641458, 1.0]], [0, [0.394162292850354, 1.0]], [1, [8.587584683198308, 1.0]], [1, [0.4902412528013008, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [1847.78656933]
bas 1, expnt(s) = [257.96118723]
bas 2, expnt(s) = [54.36292751]
bas 3, expnt(s) = [4.72715708]
bas 4, expnt(s) = [0.39416229]
bas 5, expnt(s) = [8.58758468]
bas 6, expnt(s) = [0.49024125]
CPU time:        84.94
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]
 [ 0  1  1  1  0 36 37  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.84778657e+03 7.12039159e+02 2.57961187e+02 1.62622562e+02
 5.43629275e+01 5.05815521e+01 4.72715708e+00 8.09962757e+00
 3.94162293e-01 1.25681493e+00 8.58758468e+00 4.28867547e+01
 4.90241253e-01 1.19673146e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.31751929465773
cond(S) = 9.979292009861698
E1 = -687.0748437389096  E_coul = 184.8966087778452
init E= -502.178234961064
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.681986861167794  LUMO = 200.045065316818
  mo_energy =
[-1.20803300e+02 -1.32536230e+01 -7.62134356e+00 -7.62134356e+00
 -7.62134356e+00 -1.65119312e+00 -6.81986861e-01 -6.81986861e-01
 -6.81986861e-01  2.00045065e+02  2.54656690e+03]
E1 = -704.9071957782106  E_coul = 199.03415987358093
cycle= 1 E= -505.87303590463  delta_E= -3.69  |g|= 0.262  |ddm|= 0.295
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.293931
diis-c [-0.08639546  1.        ]
  HOMO = -0.235161723662724  LUMO = 201.448693559761
  mo_energy =
[-1.19409108e+02 -1.22148683e+01 -6.64336552e+00 -6.64336552e+00
 -6.64336552e+00 -1.15993251e+00 -2.35161724e-01 -2.35161724e-01
 -2.35161724e-01  2.01448694e+02  2.54784456e+03]
E1 = -704.8986383105201  E_coul = 199.02549582886607
cycle= 2 E= -505.873142481654  delta_E= -0.000107  |g|= 0.00199  |ddm|= 0.00344
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00199911
diis-c [-3.00902204e-06 -3.39221582e-03  1.00339222e+00]
  HOMO = -0.235197613907696  LUMO = 201.446904097682
  mo_energy =
[-1.19411871e+02 -1.22151391e+01 -6.64376250e+00 -6.64376250e+00
 -6.64376250e+00 -1.15994752e+00 -2.35197614e-01 -2.35197614e-01
 -2.35197614e-01  2.01446904e+02  2.54783826e+03]
E1 = -704.8985759900845  E_coul = 199.02543349973337
cycle= 3 E= -505.873142490351  delta_E= -8.7e-09  |g|= 1.71e-05  |ddm|= 2.79e-05
    CPU time for cycle= 3      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=2.2622e-05
diis-c [-7.18015477e-12  4.74531556e-05 -1.31569511e-02  1.01310950e+00]
  HOMO = -0.235197758318469  LUMO = 201.446900799904
  mo_energy =
[-1.19411880e+02 -1.22151402e+01 -6.64376452e+00 -6.64376452e+00
 -6.64376452e+00 -1.15994756e+00 -2.35197758e-01 -2.35197758e-01
 -2.35197758e-01  2.01446901e+02  2.54783826e+03]
E1 = -704.8985756760181  E_coul = 199.02543318566615
cycle= 4 E= -505.873142490352  delta_E= -8.53e-13  |g|= 2.27e-08  |ddm|= 1.92e-07
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -704.8985756760181  E_coul = 199.02543318566615
  HOMO = -0.235197758151998  LUMO = 201.446900830578
  mo_energy =
[-1.19411880e+02 -1.22151402e+01 -6.64376452e+00 -6.64376452e+00
 -6.64376452e+00 -1.15994756e+00 -2.35197758e-01 -2.35197758e-01
 -2.35197758e-01  2.01446901e+02  2.54783826e+03]
E1 = -704.8985756766576  E_coul = 199.02543318630563
Extra cycle  E= -505.873142490352  delta_E=    0  |g|= 1.72e-10  |ddm|= 1.89e-10
    CPU time for scf_cycle      0.10 sec, wall time      0.10 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 9.979292009861698
E1 = -704.8985756766576  E_coul = 199.02543318630563
init E= -505.873142490352
    CPU time for initialize scf      0.05 sec, wall time      0.06 sec
  HOMO = -0.235197758150927  LUMO = 201.446900830799
  mo_energy =
[-1.19411880e+02 -1.22151402e+01 -6.64376452e+00 -6.64376452e+00
 -6.64376452e+00 -1.15994756e+00 -2.35197758e-01 -2.35197758e-01
 -2.35197758e-01  2.01446901e+02  2.54783826e+03]
E1 = -704.8985756766618  E_coul = 199.0254331863099
cycle= 1 E= -505.873142490352  delta_E= 5.68e-14  |g|= 1.47e-12  |ddm|= 1.29e-12
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -704.8985756766618  E_coul = 199.0254331863099
  HOMO = -0.235197758150926  LUMO = 201.446900830801
  mo_energy =
[-1.19411880e+02 -1.22151402e+01 -6.64376452e+00 -6.64376452e+00
 -6.64376452e+00 -1.15994756e+00 -2.35197758e-01 -2.35197758e-01
 -2.35197758e-01  2.01446901e+02  2.54783826e+03]
E1 = -704.8985756766616  E_coul = 199.0254331863099
Extra cycle  E= -505.873142490352  delta_E= 2.27e-13  |g|= 8.06e-13  |ddm|= 5.58e-15
    CPU time for scf_cycle      0.12 sec, wall time      0.12 sec
exp = [1.84778657e+03 2.57961187e+02 5.43629275e+01 4.72715708e+00
 3.94162293e-01 8.58758468e+00 4.90241253e-01]
grad_E = [ 3.24272207e-04  2.85919148e-05 -1.33683576e-05 -1.39135351e-05
  1.16403240e-03  5.44089818e-05  1.14382474e-03]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((7, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.5820650117923668e+02,6.8360631861859034e+01,4.6647996209811691e+00,3.9711619128280629e-01,8.5710114329191196e+00,4.8957520672686806e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "5s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:41:20 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  1847.78242652        1
[INPUT] 0    0    [1    /1   ]  257.969793219        1
[INPUT] 0    0    [1    /1   ]  54.3630296801        1
[INPUT] 0    0    [1    /1   ]  4.72716272638        1
[INPUT] 0    0    [1    /1   ]  0.394255724667       1
[INPUT] 1    0    [1    /1   ]  8.58777437757        1
[INPUT] 1    0    [1    /1   ]  0.49029459721        1

nuclear repulsion = 0
number of shells = 7
number of NR pGTOs = 11
number of NR cGTOs = 11
basis = {'Ar': [[0, [1847.782426520649, 1.0]], [0, [257.96979321932906, 1.0]], [0, [54.36302968006913, 1.0]], [0, [4.727162726384637, 1.0]], [0, [0.39425572466674663, 1.0]], [1, [8.58777437756752, 1.0]], [1, [0.49029459721020596, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [1847.78242652]
bas 1, expnt(s) = [257.96979322]
bas 2, expnt(s) = [54.36302968]
bas 3, expnt(s) = [4.72716273]
bas 4, expnt(s) = [0.39425572]
bas 5, expnt(s) = [8.58777438]
bas 6, expnt(s) = [0.4902946]
CPU time:        88.02
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]
 [ 0  1  1  1  0 36 37  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.84778243e+03 7.12037962e+02 2.57969793e+02 1.62626631e+02
 5.43630297e+01 5.05816234e+01 4.72716273e+00 8.09963482e+00
 3.94255725e-01 1.25703836e+00 8.58777438e+00 4.28879388e+01
 4.90294597e-01 1.19689424e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.31743772683685
cond(S) = 9.979257995101614
E1 = -687.0793883493072  E_coul = 184.90072611707794
init E= -502.178662232229
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.681880818739641  LUMO = 200.051638875017
  mo_energy =
[-1.20802845e+02 -1.32532910e+01 -7.62105376e+00 -7.62105376e+00
 -7.62105376e+00 -1.65113410e+00 -6.81880819e-01 -6.81880819e-01
 -6.81880819e-01  2.00051639e+02  2.54659119e+03]
E1 = -704.9127634778991  E_coul = 199.03972682946073
cycle= 1 E= -505.873036648438  delta_E= -3.69  |g|= 0.262  |ddm|= 0.295
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.293889
diis-c [-0.08637066  1.        ]
  HOMO = -0.234987305584635  LUMO = 201.455368178877
  mo_energy =
[-1.19408546e+02 -1.22144495e+01 -6.64298736e+00 -6.64298736e+00
 -6.64298736e+00 -1.15978844e+00 -2.34987306e-01 -2.34987306e-01
 -2.34987306e-01  2.01455368e+02  2.54786895e+03]
E1 = -704.9042055948772  E_coul = 199.03106237060734
cycle= 2 E= -505.87314322427  delta_E= -0.000107  |g|= 0.00199  |ddm|= 0.00344
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00199898
diis-c [-3.00869444e-06 -3.39236289e-03  1.00339236e+00]
  HOMO = -0.23502320374156  LUMO = 201.453578480895
  mo_energy =
[-1.19411309e+02 -1.22147203e+01 -6.64338433e+00 -6.64338433e+00
 -6.64338433e+00 -1.15980345e+00 -2.35023204e-01 -2.35023204e-01
 -2.35023204e-01  2.01453578e+02  2.54786264e+03]
E1 = -704.9041432738227  E_coul = 199.03100004085664
cycle= 3 E= -505.873143232966  delta_E= -8.7e-09  |g|= 1.71e-05  |ddm|= 2.79e-05
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=2.26198e-05
diis-c [-7.18135176e-12  4.74522313e-05 -1.31563941e-02  1.01310894e+00]
  HOMO = -0.235023348177292  LUMO = 201.453575182824
  mo_energy =
[-1.19411318e+02 -1.22147214e+01 -6.64338635e+00 -6.64338635e+00
 -6.64338635e+00 -1.15980349e+00 -2.35023348e-01 -2.35023348e-01
 -2.35023348e-01  2.01453575e+02  2.54786264e+03]
E1 = -704.9041429597895  E_coul = 199.0309997268228
cycle= 4 E= -505.873143232967  delta_E= -6.25e-13  |g|= 2.27e-08  |ddm|= 1.92e-07
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -704.9041429597895  E_coul = 199.0309997268228
  HOMO = -0.235023348010793  LUMO = 201.453575213498
  mo_energy =
[-1.19411318e+02 -1.22147214e+01 -6.64338635e+00 -6.64338635e+00
 -6.64338635e+00 -1.15980349e+00 -2.35023348e-01 -2.35023348e-01
 -2.35023348e-01  2.01453575e+02  2.54786264e+03]
E1 = -704.9041429604291  E_coul = 199.03099972746256
Extra cycle  E= -505.873143232967  delta_E= 1.71e-13  |g|= 1.7e-10  |ddm|= 1.89e-10
    CPU time for scf_cycle      0.10 sec, wall time      0.10 sec
exp = [1.84778243e+03 2.57969793e+02 5.43630297e+01 4.72716273e+00
 3.94255725e-01 8.58777438e+00 4.90294597e-01]
E = -505.8731432329665
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((7, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.5820650117923668e+02,6.8360631861859034e+01,4.6647996209811691e+00,3.9711619128280629e-01,8.5710114329191196e+00,4.8957520672686806e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "5s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:41:21 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  1847.78242652        1
[INPUT] 0    0    [1    /1   ]  257.969793219        1
[INPUT] 0    0    [1    /1   ]  54.3630296801        1
[INPUT] 0    0    [1    /1   ]  4.72716272638        1
[INPUT] 0    0    [1    /1   ]  0.394255724667       1
[INPUT] 1    0    [1    /1   ]  8.58777437757        1
[INPUT] 1    0    [1    /1   ]  0.49029459721        1

nuclear repulsion = 0
number of shells = 7
number of NR pGTOs = 11
number of NR cGTOs = 11
basis = {'Ar': [[0, [1847.782426520649, 1.0]], [0, [257.96979321932906, 1.0]], [0, [54.36302968006913, 1.0]], [0, [4.727162726384637, 1.0]], [0, [0.39425572466674663, 1.0]], [1, [8.58777437756752, 1.0]], [1, [0.49029459721020596, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [1847.78242652]
bas 1, expnt(s) = [257.96979322]
bas 2, expnt(s) = [54.36302968]
bas 3, expnt(s) = [4.72716273]
bas 4, expnt(s) = [0.39425572]
bas 5, expnt(s) = [8.58777438]
bas 6, expnt(s) = [0.4902946]
CPU time:        88.53
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]
 [ 0  1  1  1  0 36 37  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.84778243e+03 7.12037962e+02 2.57969793e+02 1.62626631e+02
 5.43630297e+01 5.05816234e+01 4.72716273e+00 8.09963482e+00
 3.94255725e-01 1.25703836e+00 8.58777438e+00 4.28879388e+01
 4.90294597e-01 1.19689424e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.31743772683685
cond(S) = 9.979257995101614
E1 = -687.0793883493072  E_coul = 184.90072611707794
init E= -502.178662232229
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.681880818739641  LUMO = 200.051638875017
  mo_energy =
[-1.20802845e+02 -1.32532910e+01 -7.62105376e+00 -7.62105376e+00
 -7.62105376e+00 -1.65113410e+00 -6.81880819e-01 -6.81880819e-01
 -6.81880819e-01  2.00051639e+02  2.54659119e+03]
E1 = -704.9127634778991  E_coul = 199.03972682946073
cycle= 1 E= -505.873036648438  delta_E= -3.69  |g|= 0.262  |ddm|= 0.295
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.293889
diis-c [-0.08637066  1.        ]
  HOMO = -0.234987305584635  LUMO = 201.455368178877
  mo_energy =
[-1.19408546e+02 -1.22144495e+01 -6.64298736e+00 -6.64298736e+00
 -6.64298736e+00 -1.15978844e+00 -2.34987306e-01 -2.34987306e-01
 -2.34987306e-01  2.01455368e+02  2.54786895e+03]
E1 = -704.9042055948772  E_coul = 199.03106237060734
cycle= 2 E= -505.87314322427  delta_E= -0.000107  |g|= 0.00199  |ddm|= 0.00344
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00199898
diis-c [-3.00869444e-06 -3.39236289e-03  1.00339236e+00]
  HOMO = -0.23502320374156  LUMO = 201.453578480895
  mo_energy =
[-1.19411309e+02 -1.22147203e+01 -6.64338433e+00 -6.64338433e+00
 -6.64338433e+00 -1.15980345e+00 -2.35023204e-01 -2.35023204e-01
 -2.35023204e-01  2.01453578e+02  2.54786264e+03]
E1 = -704.9041432738227  E_coul = 199.03100004085664
cycle= 3 E= -505.873143232966  delta_E= -8.7e-09  |g|= 1.71e-05  |ddm|= 2.79e-05
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=2.26198e-05
diis-c [-7.18135176e-12  4.74522313e-05 -1.31563941e-02  1.01310894e+00]
  HOMO = -0.235023348177292  LUMO = 201.453575182824
  mo_energy =
[-1.19411318e+02 -1.22147214e+01 -6.64338635e+00 -6.64338635e+00
 -6.64338635e+00 -1.15980349e+00 -2.35023348e-01 -2.35023348e-01
 -2.35023348e-01  2.01453575e+02  2.54786264e+03]
E1 = -704.9041429597895  E_coul = 199.0309997268228
cycle= 4 E= -505.873143232967  delta_E= -6.25e-13  |g|= 2.27e-08  |ddm|= 1.92e-07
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -704.9041429597895  E_coul = 199.0309997268228
  HOMO = -0.235023348010793  LUMO = 201.453575213498
  mo_energy =
[-1.19411318e+02 -1.22147214e+01 -6.64338635e+00 -6.64338635e+00
 -6.64338635e+00 -1.15980349e+00 -2.35023348e-01 -2.35023348e-01
 -2.35023348e-01  2.01453575e+02  2.54786264e+03]
E1 = -704.9041429604291  E_coul = 199.03099972746256
Extra cycle  E= -505.873143232967  delta_E= 1.71e-13  |g|= 1.7e-10  |ddm|= 1.89e-10
    CPU time for scf_cycle      0.10 sec, wall time      0.10 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 9.979257995101614
E1 = -704.9041429604291  E_coul = 199.03099972746256
init E= -505.873143232967
    CPU time for initialize scf      0.05 sec, wall time      0.05 sec
  HOMO = -0.235023348009717  LUMO = 201.453575213719
  mo_energy =
[-1.19411318e+02 -1.22147214e+01 -6.64338635e+00 -6.64338635e+00
 -6.64338635e+00 -1.15980349e+00 -2.35023348e-01 -2.35023348e-01
 -2.35023348e-01  2.01453575e+02  2.54786264e+03]
E1 = -704.9041429604334  E_coul = 199.0309997274668
cycle= 1 E= -505.873143232967  delta_E= -1.14e-13  |g|= 1.38e-12  |ddm|= 1.28e-12
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -704.9041429604334  E_coul = 199.0309997274668
  HOMO = -0.235023348009717  LUMO = 201.45357521372
  mo_energy =
[-1.19411318e+02 -1.22147214e+01 -6.64338635e+00 -6.64338635e+00
 -6.64338635e+00 -1.15980349e+00 -2.35023348e-01 -2.35023348e-01
 -2.35023348e-01  2.01453575e+02  2.54786264e+03]
E1 = -704.9041429604334  E_coul = 199.03099972746685
Extra cycle  E= -505.873143232967  delta_E= 5.68e-14  |g|= 6.05e-13  |ddm|= 1.15e-14
    CPU time for scf_cycle      0.12 sec, wall time      0.12 sec
exp = [1.84778243e+03 2.57969793e+02 5.43630297e+01 4.72716273e+00
 3.94255725e-01 8.58777438e+00 4.90294597e-01]
grad_E = [ 3.23950555e-04  3.61534232e-05 -4.39325762e-05  1.10854734e-05
  2.83593409e-03  1.69844974e-04  3.21704842e-03]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((7, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.5820650117923668e+02,6.8360631861859034e+01,4.6647996209811691e+00,3.9711619128280629e-01,8.5710114329191196e+00,4.8957520672686806e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "5s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:41:24 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  1847.77124881        1
[INPUT] 0    0    [1    /1   ]  257.983116492        1
[INPUT] 0    0    [1    /1   ]  54.3631113247        1
[INPUT] 0    0    [1    /1   ]  4.72717357249        1
[INPUT] 0    0    [1    /1   ]  0.394405595867       1
[INPUT] 1    0    [1    /1   ]  8.58808482336        1
[INPUT] 1    0    [1    /1   ]  0.490380471779       1

nuclear repulsion = 0
number of shells = 7
number of NR pGTOs = 11
number of NR cGTOs = 11
basis = {'Ar': [[0, [1847.7712488062145, 1.0]], [0, [257.9831164919104, 1.0]], [0, [54.36311132466307, 1.0]], [0, [4.727173572487587, 1.0]], [0, [0.39440559586713303, 1.0]], [1, [8.588084823356096, 1.0]], [1, [0.4903804717792863, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [1847.77124881]
bas 1, expnt(s) = [257.98311649]
bas 2, expnt(s) = [54.36311132]
bas 3, expnt(s) = [4.72717357]
bas 4, expnt(s) = [0.3944056]
bas 5, expnt(s) = [8.58808482]
bas 6, expnt(s) = [0.49038047]
CPU time:        91.63
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]
 [ 0  1  1  1  0 36 37  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.84777125e+03 7.12034732e+02 2.57983116e+02 1.62632931e+02
 5.43631113e+01 5.05816803e+01 4.72717357e+00 8.09964876e+00
 3.94405596e-01 1.25739673e+00 8.58808482e+00 4.28898768e+01
 4.90380472e-01 1.19715629e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.317306231259934
cond(S) = 9.979215157373453
E1 = -687.0867201682264  E_coul = 184.9073661480957
init E= -502.179354020131
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.68171050719162  LUMO = 200.061668971833
  mo_energy =
[-1.20802110e+02 -1.32527550e+01 -7.62058643e+00 -7.62058643e+00
 -7.62058643e+00 -1.65103896e+00 -6.81710507e-01 -6.81710507e-01
 -6.81710507e-01  2.00061669e+02  2.54662339e+03]
E1 = -704.9217420671005  E_coul = 199.0487034841758
cycle= 1 E= -505.873038582925  delta_E= -3.69  |g|= 0.262  |ddm|= 0.295
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.293821
diis-c [-0.08633052  1.        ]
  HOMO = -0.234706766698405  LUMO = 201.465560781962
  mo_energy =
[-1.19407638e+02 -1.22137736e+01 -6.64237747e+00 -6.64237747e+00
 -6.64237747e+00 -1.15955647e+00 -2.34706767e-01 -2.34706767e-01
 -2.34706767e-01  2.01465561e+02  2.54790129e+03]
E1 = -704.9131834700423  E_coul = 199.0400383126797
cycle= 2 E= -505.873145157363  delta_E= -0.000107  |g|= 0.00199  |ddm|= 0.00344
    CPU time for cycle= 2      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.00199877
diis-c [-3.00818295e-06 -3.39259678e-03  1.00339260e+00]
  HOMO = -0.23474267781868  LUMO = 201.463770696765
  mo_energy =
[-1.19410401e+02 -1.22140444e+01 -6.64277444e+00 -6.64277444e+00
 -6.64277444e+00 -1.15957148e+00 -2.34742678e-01 -2.34742678e-01
 -2.34742678e-01  2.01463771e+02  2.54789499e+03]
E1 = -704.9131211475498  E_coul = 199.0399759814924
cycle= 3 E= -505.873145166057  delta_E= -8.69e-09  |g|= 1.71e-05  |ddm|= 2.79e-05
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=2.26165e-05
diis-c [-7.18332566e-12  4.74508674e-05 -1.31555294e-02  1.01310808e+00]
  HOMO = -0.234742822295976  LUMO = 201.463767398173
  mo_energy =
[-1.19410410e+02 -1.22140455e+01 -6.64277646e+00 -6.64277646e+00
 -6.64277646e+00 -1.15957152e+00 -2.34742822e-01 -2.34742822e-01
 -2.34742822e-01  2.01463767e+02  2.54789498e+03]
E1 = -704.9131208335671  E_coul = 199.03997566750903
cycle= 4 E= -505.873145166058  delta_E= -6.82e-13  |g|= 2.27e-08  |ddm|= 1.92e-07
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -704.9131208335671  E_coul = 199.03997566750903
  HOMO = -0.234742822129424  LUMO = 201.463767428849
  mo_energy =
[-1.19410410e+02 -1.22140455e+01 -6.64277646e+00 -6.64277646e+00
 -6.64277646e+00 -1.15957152e+00 -2.34742822e-01 -2.34742822e-01
 -2.34742822e-01  2.01463767e+02  2.54789498e+03]
E1 = -704.9131208342063  E_coul = 199.03997566814834
Extra cycle  E= -505.873145166058  delta_E= 1.14e-13  |g|= 1.71e-10  |ddm|= 1.89e-10
    CPU time for scf_cycle      0.10 sec, wall time      0.10 sec
exp = [1.84777125e+03 2.57983116e+02 5.43631113e+01 4.72717357e+00
 3.94405596e-01 8.58808482e+00 4.90380472e-01]
E = -505.87314516605795
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((7, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.5820650117923668e+02,6.8360631861859034e+01,4.6647996209811691e+00,3.9711619128280629e-01,8.5710114329191196e+00,4.8957520672686806e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "5s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:41:24 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  1847.77124881        1
[INPUT] 0    0    [1    /1   ]  257.983116492        1
[INPUT] 0    0    [1    /1   ]  54.3631113247        1
[INPUT] 0    0    [1    /1   ]  4.72717357249        1
[INPUT] 0    0    [1    /1   ]  0.394405595867       1
[INPUT] 1    0    [1    /1   ]  8.58808482336        1
[INPUT] 1    0    [1    /1   ]  0.490380471779       1

nuclear repulsion = 0
number of shells = 7
number of NR pGTOs = 11
number of NR cGTOs = 11
basis = {'Ar': [[0, [1847.7712488062145, 1.0]], [0, [257.9831164919104, 1.0]], [0, [54.36311132466307, 1.0]], [0, [4.727173572487587, 1.0]], [0, [0.39440559586713303, 1.0]], [1, [8.588084823356096, 1.0]], [1, [0.4903804717792863, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [1847.77124881]
bas 1, expnt(s) = [257.98311649]
bas 2, expnt(s) = [54.36311132]
bas 3, expnt(s) = [4.72717357]
bas 4, expnt(s) = [0.3944056]
bas 5, expnt(s) = [8.58808482]
bas 6, expnt(s) = [0.49038047]
CPU time:        92.15
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]
 [ 0  1  1  1  0 36 37  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.84777125e+03 7.12034732e+02 2.57983116e+02 1.62632931e+02
 5.43631113e+01 5.05816803e+01 4.72717357e+00 8.09964876e+00
 3.94405596e-01 1.25739673e+00 8.58808482e+00 4.28898768e+01
 4.90380472e-01 1.19715629e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.317306231259934
cond(S) = 9.979215157373453
E1 = -687.0867201682264  E_coul = 184.9073661480957
init E= -502.179354020131
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.68171050719162  LUMO = 200.061668971833
  mo_energy =
[-1.20802110e+02 -1.32527550e+01 -7.62058643e+00 -7.62058643e+00
 -7.62058643e+00 -1.65103896e+00 -6.81710507e-01 -6.81710507e-01
 -6.81710507e-01  2.00061669e+02  2.54662339e+03]
E1 = -704.9217420671005  E_coul = 199.0487034841758
cycle= 1 E= -505.873038582925  delta_E= -3.69  |g|= 0.262  |ddm|= 0.295
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.293821
diis-c [-0.08633052  1.        ]
  HOMO = -0.234706766698405  LUMO = 201.465560781962
  mo_energy =
[-1.19407638e+02 -1.22137736e+01 -6.64237747e+00 -6.64237747e+00
 -6.64237747e+00 -1.15955647e+00 -2.34706767e-01 -2.34706767e-01
 -2.34706767e-01  2.01465561e+02  2.54790129e+03]
E1 = -704.9131834700423  E_coul = 199.0400383126797
cycle= 2 E= -505.873145157363  delta_E= -0.000107  |g|= 0.00199  |ddm|= 0.00344
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00199877
diis-c [-3.00818295e-06 -3.39259678e-03  1.00339260e+00]
  HOMO = -0.23474267781868  LUMO = 201.463770696765
  mo_energy =
[-1.19410401e+02 -1.22140444e+01 -6.64277444e+00 -6.64277444e+00
 -6.64277444e+00 -1.15957148e+00 -2.34742678e-01 -2.34742678e-01
 -2.34742678e-01  2.01463771e+02  2.54789499e+03]
E1 = -704.9131211475498  E_coul = 199.0399759814924
cycle= 3 E= -505.873145166057  delta_E= -8.69e-09  |g|= 1.71e-05  |ddm|= 2.79e-05
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=2.26165e-05
diis-c [-7.18332566e-12  4.74508674e-05 -1.31555294e-02  1.01310808e+00]
  HOMO = -0.234742822295976  LUMO = 201.463767398173
  mo_energy =
[-1.19410410e+02 -1.22140455e+01 -6.64277646e+00 -6.64277646e+00
 -6.64277646e+00 -1.15957152e+00 -2.34742822e-01 -2.34742822e-01
 -2.34742822e-01  2.01463767e+02  2.54789498e+03]
E1 = -704.9131208335671  E_coul = 199.03997566750903
cycle= 4 E= -505.873145166058  delta_E= -6.82e-13  |g|= 2.27e-08  |ddm|= 1.92e-07
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -704.9131208335671  E_coul = 199.03997566750903
  HOMO = -0.234742822129424  LUMO = 201.463767428849
  mo_energy =
[-1.19410410e+02 -1.22140455e+01 -6.64277646e+00 -6.64277646e+00
 -6.64277646e+00 -1.15957152e+00 -2.34742822e-01 -2.34742822e-01
 -2.34742822e-01  2.01463767e+02  2.54789498e+03]
E1 = -704.9131208342063  E_coul = 199.03997566814834
Extra cycle  E= -505.873145166058  delta_E= 1.14e-13  |g|= 1.71e-10  |ddm|= 1.89e-10
    CPU time for scf_cycle      0.10 sec, wall time      0.10 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 9.979215157373453
E1 = -704.9131208342063  E_coul = 199.03997566814834
init E= -505.873145166058
    CPU time for initialize scf      0.05 sec, wall time      0.05 sec
  HOMO = -0.234742822128355  LUMO = 201.46376742907
  mo_energy =
[-1.19410410e+02 -1.22140455e+01 -6.64277646e+00 -6.64277646e+00
 -6.64277646e+00 -1.15957152e+00 -2.34742822e-01 -2.34742822e-01
 -2.34742822e-01  2.01463767e+02  2.54789498e+03]
E1 = -704.9131208342108  E_coul = 199.03997566815272
cycle= 1 E= -505.873145166058  delta_E= -1.14e-13  |g|= 2.51e-12  |ddm|= 1.29e-12
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -704.9131208342108  E_coul = 199.03997566815272
  HOMO = -0.234742822128347  LUMO = 201.463767429071
  mo_energy =
[-1.19410410e+02 -1.22140455e+01 -6.64277646e+00 -6.64277646e+00
 -6.64277646e+00 -1.15957152e+00 -2.34742822e-01 -2.34742822e-01
 -2.34742822e-01  2.01463767e+02  2.54789498e+03]
E1 = -704.9131208342108  E_coul = 199.0399756681528
Extra cycle  E= -505.873145166058  delta_E= 1.14e-13  |g|= 5.03e-13  |ddm|= 1.08e-14
    CPU time for scf_cycle      0.12 sec, wall time      0.12 sec
exp = [1.84777125e+03 2.57983116e+02 5.43631113e+01 4.72717357e+00
 3.94405596e-01 8.58808482e+00 4.90380472e-01]
grad_E = [ 3.23433146e-04  4.83231060e-05 -9.37509163e-05  5.33702158e-05
  5.51846644e-03  3.59866200e-04  6.54755448e-03]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((7, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.5820650117923668e+02,6.8360631861859034e+01,4.6647996209811691e+00,3.9711619128280629e-01,8.5710114329191196e+00,4.8957520672686806e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "5s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:41:27 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  1847.74126838        1
[INPUT] 0    0    [1    /1   ]  258.003811383        1
[INPUT] 0    0    [1    /1   ]  54.3631452584        1
[INPUT] 0    0    [1    /1   ]  4.72719172531        1
[INPUT] 0    0    [1    /1   ]  0.394648405384       1
[INPUT] 1    0    [1    /1   ]  8.58859064646        1
[INPUT] 1    0    [1    /1   ]  0.490519654616       1

nuclear repulsion = 0
number of shells = 7
number of NR pGTOs = 11
number of NR cGTOs = 11
basis = {'Ar': [[0, [1847.7412683845168, 1.0]], [0, [258.00381138250293, 1.0]], [0, [54.36314525841358, 1.0]], [0, [4.727191725314907, 1.0]], [0, [0.3946484053838967, 1.0]], [1, [8.588590646457014, 1.0]], [1, [0.4905196546157647, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [1847.74126838]
bas 1, expnt(s) = [258.00381138]
bas 2, expnt(s) = [54.36314526]
bas 3, expnt(s) = [4.72719173]
bas 4, expnt(s) = [0.39464841]
bas 5, expnt(s) = [8.58859065]
bas 6, expnt(s) = [0.49051965]
CPU time:        95.23
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]
 [ 0  1  1  1  0 36 37  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.84774127e+03 7.12026067e+02 2.58003811e+02 1.62642715e+02
 5.43631453e+01 5.05817040e+01 4.72719173e+00 8.09967208e+00
 3.94648405e-01 1.25797725e+00 8.58859065e+00 4.28930345e+01
 4.90519655e-01 1.19758103e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.31709249460393
cond(S) = 9.979183111280946
E1 = -687.0986092334961  E_coul = 184.918127868267
init E= -502.180481365229
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.681434818353408  LUMO = 200.077109831554
  mo_energy =
[-1.20800918e+02 -1.32518860e+01 -7.61982907e+00 -7.61982907e+00
 -7.61982907e+00 -1.65088455e+00 -6.81434818e-01 -6.81434818e-01
 -6.81434818e-01  2.00077110e+02  2.54665941e+03]
E1 = -704.9363029524676  E_coul = 199.06325929970276
cycle= 1 E= -505.873043652765  delta_E= -3.69  |g|= 0.262  |ddm|= 0.295
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.293709
diis-c [-0.08626508  1.        ]
  HOMO = -0.23425206337063  LUMO = 201.481265090515
  mo_energy =
[-1.19406166e+02 -1.22126773e+01 -6.64138849e+00 -6.64138849e+00
 -6.64138849e+00 -1.15918007e+00 -2.34252063e-01 -2.34252063e-01
 -2.34252063e-01  2.01481265e+02  2.54793753e+03]
E1 = -704.9277431374583  E_coul = 199.05459291168862
cycle= 2 E= -505.87315022577  delta_E= -0.000107  |g|= 0.00199  |ddm|= 0.00344
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00199844
diis-c [-3.00738922e-06 -3.39298501e-03  1.00339299e+00]
  HOMO = -0.234287995818421  LUMO = 201.479474370385
  mo_energy =
[-1.19408930e+02 -1.22129481e+01 -6.64178546e+00 -6.64178546e+00
 -6.64178546e+00 -1.15919510e+00 -2.34287996e-01 -2.34287996e-01
 -2.34287996e-01  2.01479474e+02  2.54793123e+03]
E1 = -704.9276808120006  E_coul = 199.0545305775383
cycle= 3 E= -505.873150234462  delta_E= -8.69e-09  |g|= 1.71e-05  |ddm|= 2.79e-05
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=2.26113e-05
diis-c [-7.18664028e-12  4.74488685e-05 -1.31541638e-02  1.01310671e+00]
  HOMO = -0.234288140364748  LUMO = 201.479471070917
  mo_energy =
[-1.19408939e+02 -1.22129492e+01 -6.64178748e+00 -6.64178748e+00
 -6.64178748e+00 -1.15919513e+00 -2.34288140e-01 -2.34288140e-01
 -2.34288140e-01  2.01479471e+02  2.54793122e+03]
E1 = -704.9276804980934  E_coul = 199.05453026363114
cycle= 4 E= -505.873150234462  delta_E= 5.68e-14  |g|= 2.27e-08  |ddm|= 1.92e-07
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -704.9276804980934  E_coul = 199.05453026363114
  HOMO = -0.234288140198125  LUMO = 201.479471101595
  mo_energy =
[-1.19408939e+02 -1.22129492e+01 -6.64178748e+00 -6.64178748e+00
 -6.64178748e+00 -1.15919513e+00 -2.34288140e-01 -2.34288140e-01
 -2.34288140e-01  2.01479471e+02  2.54793122e+03]
E1 = -704.9276804987333  E_coul = 199.05453026427054
Extra cycle  E= -505.873150234463  delta_E= -4.55e-13  |g|= 1.71e-10  |ddm|= 1.89e-10
    CPU time for scf_cycle      0.10 sec, wall time      0.10 sec
exp = [1.84774127e+03 2.58003811e+02 5.43631453e+01 4.72719173e+00
 3.94648405e-01 8.58859065e+00 4.90519655e-01]
E = -505.87315023446274
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((7, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.5820650117923668e+02,6.8360631861859034e+01,4.6647996209811691e+00,3.9711619128280629e-01,8.5710114329191196e+00,4.8957520672686806e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "5s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:41:28 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  1847.74126838        1
[INPUT] 0    0    [1    /1   ]  258.003811383        1
[INPUT] 0    0    [1    /1   ]  54.3631452584        1
[INPUT] 0    0    [1    /1   ]  4.72719172531        1
[INPUT] 0    0    [1    /1   ]  0.394648405384       1
[INPUT] 1    0    [1    /1   ]  8.58859064646        1
[INPUT] 1    0    [1    /1   ]  0.490519654616       1

nuclear repulsion = 0
number of shells = 7
number of NR pGTOs = 11
number of NR cGTOs = 11
basis = {'Ar': [[0, [1847.7412683845168, 1.0]], [0, [258.00381138250293, 1.0]], [0, [54.36314525841358, 1.0]], [0, [4.727191725314907, 1.0]], [0, [0.3946484053838967, 1.0]], [1, [8.588590646457014, 1.0]], [1, [0.4905196546157647, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [1847.74126838]
bas 1, expnt(s) = [258.00381138]
bas 2, expnt(s) = [54.36314526]
bas 3, expnt(s) = [4.72719173]
bas 4, expnt(s) = [0.39464841]
bas 5, expnt(s) = [8.58859065]
bas 6, expnt(s) = [0.49051965]
CPU time:        95.78
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]
 [ 0  1  1  1  0 36 37  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.84774127e+03 7.12026067e+02 2.58003811e+02 1.62642715e+02
 5.43631453e+01 5.05817040e+01 4.72719173e+00 8.09967208e+00
 3.94648405e-01 1.25797725e+00 8.58859065e+00 4.28930345e+01
 4.90519655e-01 1.19758103e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.31709249460393
cond(S) = 9.979183111280946
E1 = -687.0986092334961  E_coul = 184.918127868267
init E= -502.180481365229
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.681434818353408  LUMO = 200.077109831554
  mo_energy =
[-1.20800918e+02 -1.32518860e+01 -7.61982907e+00 -7.61982907e+00
 -7.61982907e+00 -1.65088455e+00 -6.81434818e-01 -6.81434818e-01
 -6.81434818e-01  2.00077110e+02  2.54665941e+03]
E1 = -704.9363029524676  E_coul = 199.06325929970276
cycle= 1 E= -505.873043652765  delta_E= -3.69  |g|= 0.262  |ddm|= 0.295
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.293709
diis-c [-0.08626508  1.        ]
  HOMO = -0.23425206337063  LUMO = 201.481265090515
  mo_energy =
[-1.19406166e+02 -1.22126773e+01 -6.64138849e+00 -6.64138849e+00
 -6.64138849e+00 -1.15918007e+00 -2.34252063e-01 -2.34252063e-01
 -2.34252063e-01  2.01481265e+02  2.54793753e+03]
E1 = -704.9277431374583  E_coul = 199.05459291168862
cycle= 2 E= -505.87315022577  delta_E= -0.000107  |g|= 0.00199  |ddm|= 0.00344
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00199844
diis-c [-3.00738922e-06 -3.39298501e-03  1.00339299e+00]
  HOMO = -0.234287995818421  LUMO = 201.479474370385
  mo_energy =
[-1.19408930e+02 -1.22129481e+01 -6.64178546e+00 -6.64178546e+00
 -6.64178546e+00 -1.15919510e+00 -2.34287996e-01 -2.34287996e-01
 -2.34287996e-01  2.01479474e+02  2.54793123e+03]
E1 = -704.9276808120006  E_coul = 199.0545305775383
cycle= 3 E= -505.873150234462  delta_E= -8.69e-09  |g|= 1.71e-05  |ddm|= 2.79e-05
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=2.26113e-05
diis-c [-7.18664028e-12  4.74488685e-05 -1.31541638e-02  1.01310671e+00]
  HOMO = -0.234288140364748  LUMO = 201.479471070917
  mo_energy =
[-1.19408939e+02 -1.22129492e+01 -6.64178748e+00 -6.64178748e+00
 -6.64178748e+00 -1.15919513e+00 -2.34288140e-01 -2.34288140e-01
 -2.34288140e-01  2.01479471e+02  2.54793122e+03]
E1 = -704.9276804980934  E_coul = 199.05453026363114
cycle= 4 E= -505.873150234462  delta_E= 5.68e-14  |g|= 2.27e-08  |ddm|= 1.92e-07
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -704.9276804980934  E_coul = 199.05453026363114
  HOMO = -0.234288140198125  LUMO = 201.479471101595
  mo_energy =
[-1.19408939e+02 -1.22129492e+01 -6.64178748e+00 -6.64178748e+00
 -6.64178748e+00 -1.15919513e+00 -2.34288140e-01 -2.34288140e-01
 -2.34288140e-01  2.01479471e+02  2.54793122e+03]
E1 = -704.9276804987333  E_coul = 199.05453026427054
Extra cycle  E= -505.873150234463  delta_E= -4.55e-13  |g|= 1.71e-10  |ddm|= 1.89e-10
    CPU time for scf_cycle      0.10 sec, wall time      0.11 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 9.979183111280946
E1 = -704.9276804987333  E_coul = 199.05453026427054
init E= -505.873150234463
    CPU time for initialize scf      0.07 sec, wall time      0.07 sec
  HOMO = -0.234288140197048  LUMO = 201.479471101816
  mo_energy =
[-1.19408939e+02 -1.22129492e+01 -6.64178748e+00 -6.64178748e+00
 -6.64178748e+00 -1.15919513e+00 -2.34288140e-01 -2.34288140e-01
 -2.34288140e-01  2.01479471e+02  2.54793122e+03]
E1 = -704.9276804987376  E_coul = 199.054530264275
cycle= 1 E= -505.873150234463  delta_E= 1.71e-13  |g|= 1.44e-12  |ddm|= 1.28e-12
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -704.9276804987376  E_coul = 199.054530264275
  HOMO = -0.234288140197041  LUMO = 201.479471101818
  mo_energy =
[-1.19408939e+02 -1.22129492e+01 -6.64178748e+00 -6.64178748e+00
 -6.64178748e+00 -1.15919513e+00 -2.34288140e-01 -2.34288140e-01
 -2.34288140e-01  2.01479471e+02  2.54793122e+03]
E1 = -704.9276804987379  E_coul = 199.05453026427492
Extra cycle  E= -505.873150234463  delta_E= -3.98e-13  |g|= 1.01e-12  |ddm|= 1.04e-14
    CPU time for scf_cycle      0.14 sec, wall time      0.14 sec
exp = [1.84774127e+03 2.58003811e+02 5.43631453e+01 4.72719173e+00
 3.94648405e-01 8.58859065e+00 4.90519655e-01]
grad_E = [ 3.22586180e-04  6.80404789e-05 -1.74721388e-04  1.22671210e-04
  9.86182375e-03  6.69957986e-04  1.19407220e-02]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((7, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.5820650117923668e+02,6.8360631861859034e+01,4.6647996209811691e+00,3.9711619128280629e-01,8.5710114329191196e+00,4.8957520672686806e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "5s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:41:31 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  1847.66175407        1
[INPUT] 0    0    [1    /1   ]  258.03510288         1
[INPUT] 0    0    [1    /1   ]  54.362990247         1
[INPUT] 0    0    [1    /1   ]  4.72722113036        1
[INPUT] 0    0    [1    /1   ]  0.39504106353        1
[INPUT] 1    0    [1    /1   ]  8.58940954949        1
[INPUT] 1    0    [1    /1   ]  0.490744606318       1

nuclear repulsion = 0
number of shells = 7
number of NR pGTOs = 11
number of NR cGTOs = 11
basis = {'Ar': [[0, [1847.661754066717, 1.0]], [0, [258.0351028796948, 1.0]], [0, [54.36299024695302, 1.0]], [0, [4.727221130363498, 1.0]], [0, [0.39504106353022705, 1.0]], [1, [8.589409549490723, 1.0]], [1, [0.49074460631824235, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [1847.66175407]
bas 1, expnt(s) = [258.03510288]
bas 2, expnt(s) = [54.36299025]
bas 3, expnt(s) = [4.72722113]
bas 4, expnt(s) = [0.39504106]
bas 5, expnt(s) = [8.58940955]
bas 6, expnt(s) = [0.49074461]
CPU time:        98.97
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]
 [ 0  1  1  1  0 36 37  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.84766175e+03 7.12003086e+02 2.58035103e+02 1.62657509e+02
 5.43629902e+01 5.05815958e+01 4.72722113e+00 8.09970987e+00
 3.95041064e-01 1.25891586e+00 8.58940955e+00 4.28981468e+01
 4.90744606e-01 1.19826759e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.316745402739116
cond(S) = 9.979231627711126
E1 = -687.1178193743909  E_coul = 184.93550171972265
init E= -502.182317654668
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.680989876324695  LUMO = 200.100183489429
  mo_energy =
[-1.20798998e+02 -1.32504824e+01 -7.61860643e+00 -7.61860643e+00
 -7.61860643e+00 -1.65063455e+00 -6.80989876e-01 -6.80989876e-01
 -6.80989876e-01  2.00100183e+02  2.54667608e+03]
E1 = -704.9598392368104  E_coul = 199.08678232887874
cycle= 1 E= -505.873056907932  delta_E= -3.69  |g|= 0.262  |ddm|= 0.295
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.293527
diis-c [-0.08615832  1.        ]
  HOMO = -0.233516885014808  LUMO = 201.504764832215
  mo_energy =
[-1.19403793e+02 -1.22109051e+01 -6.63979030e+00 -6.63979030e+00
 -6.63979030e+00 -1.15857055e+00 -2.33516885e-01 -2.33516885e-01
 -2.33516885e-01  2.01504765e+02  2.54795456e+03]
E1 = -704.9512773200238  E_coul = 199.0781138395148
cycle= 2 E= -505.873163480509  delta_E= -0.000107  |g|= 0.00199  |ddm|= 0.00344
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00199793
diis-c [-3.00619458e-06 -3.39364250e-03  1.00339364e+00]
  HOMO = -0.233552852638569  LUMO = 201.50297307193
  mo_energy =
[-1.19406558e+02 -1.22111759e+01 -6.64018728e+00 -6.64018728e+00
 -6.64018728e+00 -1.15858559e+00 -2.33552853e-01 -2.33552853e-01
 -2.33552853e-01  2.01502973e+02  2.54794825e+03]
E1 = -704.9512149883376  E_coul = 199.0780514991393
cycle= 3 E= -505.873163489198  delta_E= -8.69e-09  |g|= 1.71e-05  |ddm|= 2.79e-05
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=2.26034e-05
diis-c [-7.19211553e-12  4.74461947e-05 -1.31520351e-02  1.01310459e+00]
  HOMO = -0.233552997300011  LUMO = 201.502969770997
  mo_energy =
[-1.19406567e+02 -1.22111770e+01 -6.64018930e+00 -6.64018930e+00
 -6.64018930e+00 -1.15858563e+00 -2.33552997e-01 -2.33552997e-01
 -2.33552997e-01  2.01502970e+02  2.54794825e+03]
E1 = -704.9512146745449  E_coul = 199.0780511853461
cycle= 4 E= -505.873163489199  delta_E= -4.55e-13  |g|= 2.27e-08  |ddm|= 1.92e-07
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -704.9512146745449  E_coul = 199.0780511853461
  HOMO = -0.233552997133243  LUMO = 201.502969801679
  mo_energy =
[-1.19406567e+02 -1.22111770e+01 -6.64018930e+00 -6.64018930e+00
 -6.64018930e+00 -1.15858563e+00 -2.33552997e-01 -2.33552997e-01
 -2.33552997e-01  2.01502970e+02  2.54794825e+03]
E1 = -704.9512146751837  E_coul = 199.0780511859849
Extra cycle  E= -505.873163489199  delta_E=    0  |g|= 1.72e-10  |ddm|= 1.89e-10
    CPU time for scf_cycle      0.10 sec, wall time      0.10 sec
exp = [1.84766175e+03 2.58035103e+02 5.43629902e+01 4.72722113e+00
 3.95041064e-01 8.58940955e+00 4.90744606e-01]
E = -505.87316348919876
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((7, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.5820650117923668e+02,6.8360631861859034e+01,4.6647996209811691e+00,3.9711619128280629e-01,8.5710114329191196e+00,4.8957520672686806e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "5s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:41:32 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  1847.66175407        1
[INPUT] 0    0    [1    /1   ]  258.03510288         1
[INPUT] 0    0    [1    /1   ]  54.362990247         1
[INPUT] 0    0    [1    /1   ]  4.72722113036        1
[INPUT] 0    0    [1    /1   ]  0.39504106353        1
[INPUT] 1    0    [1    /1   ]  8.58940954949        1
[INPUT] 1    0    [1    /1   ]  0.490744606318       1

nuclear repulsion = 0
number of shells = 7
number of NR pGTOs = 11
number of NR cGTOs = 11
basis = {'Ar': [[0, [1847.661754066717, 1.0]], [0, [258.0351028796948, 1.0]], [0, [54.36299024695302, 1.0]], [0, [4.727221130363498, 1.0]], [0, [0.39504106353022705, 1.0]], [1, [8.589409549490723, 1.0]], [1, [0.49074460631824235, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [1847.66175407]
bas 1, expnt(s) = [258.03510288]
bas 2, expnt(s) = [54.36299025]
bas 3, expnt(s) = [4.72722113]
bas 4, expnt(s) = [0.39504106]
bas 5, expnt(s) = [8.58940955]
bas 6, expnt(s) = [0.49074461]
CPU time:        99.52
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]
 [ 0  1  1  1  0 36 37  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.84766175e+03 7.12003086e+02 2.58035103e+02 1.62657509e+02
 5.43629902e+01 5.05815958e+01 4.72722113e+00 8.09970987e+00
 3.95041064e-01 1.25891586e+00 8.58940955e+00 4.28981468e+01
 4.90744606e-01 1.19826759e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.316745402739116
cond(S) = 9.979231627711126
E1 = -687.1178193743909  E_coul = 184.93550171972265
init E= -502.182317654668
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.680989876324695  LUMO = 200.100183489429
  mo_energy =
[-1.20798998e+02 -1.32504824e+01 -7.61860643e+00 -7.61860643e+00
 -7.61860643e+00 -1.65063455e+00 -6.80989876e-01 -6.80989876e-01
 -6.80989876e-01  2.00100183e+02  2.54667608e+03]
E1 = -704.9598392368104  E_coul = 199.08678232887874
cycle= 1 E= -505.873056907932  delta_E= -3.69  |g|= 0.262  |ddm|= 0.295
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.293527
diis-c [-0.08615832  1.        ]
  HOMO = -0.233516885014808  LUMO = 201.504764832215
  mo_energy =
[-1.19403793e+02 -1.22109051e+01 -6.63979030e+00 -6.63979030e+00
 -6.63979030e+00 -1.15857055e+00 -2.33516885e-01 -2.33516885e-01
 -2.33516885e-01  2.01504765e+02  2.54795456e+03]
E1 = -704.9512773200238  E_coul = 199.0781138395148
cycle= 2 E= -505.873163480509  delta_E= -0.000107  |g|= 0.00199  |ddm|= 0.00344
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00199793
diis-c [-3.00619458e-06 -3.39364250e-03  1.00339364e+00]
  HOMO = -0.233552852638569  LUMO = 201.50297307193
  mo_energy =
[-1.19406558e+02 -1.22111759e+01 -6.64018728e+00 -6.64018728e+00
 -6.64018728e+00 -1.15858559e+00 -2.33552853e-01 -2.33552853e-01
 -2.33552853e-01  2.01502973e+02  2.54794825e+03]
E1 = -704.9512149883376  E_coul = 199.0780514991393
cycle= 3 E= -505.873163489198  delta_E= -8.69e-09  |g|= 1.71e-05  |ddm|= 2.79e-05
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=2.26034e-05
diis-c [-7.19211553e-12  4.74461947e-05 -1.31520351e-02  1.01310459e+00]
  HOMO = -0.233552997300011  LUMO = 201.502969770997
  mo_energy =
[-1.19406567e+02 -1.22111770e+01 -6.64018930e+00 -6.64018930e+00
 -6.64018930e+00 -1.15858563e+00 -2.33552997e-01 -2.33552997e-01
 -2.33552997e-01  2.01502970e+02  2.54794825e+03]
E1 = -704.9512146745449  E_coul = 199.0780511853461
cycle= 4 E= -505.873163489199  delta_E= -4.55e-13  |g|= 2.27e-08  |ddm|= 1.92e-07
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -704.9512146745449  E_coul = 199.0780511853461
  HOMO = -0.233552997133243  LUMO = 201.502969801679
  mo_energy =
[-1.19406567e+02 -1.22111770e+01 -6.64018930e+00 -6.64018930e+00
 -6.64018930e+00 -1.15858563e+00 -2.33552997e-01 -2.33552997e-01
 -2.33552997e-01  2.01502970e+02  2.54794825e+03]
E1 = -704.9512146751837  E_coul = 199.0780511859849
Extra cycle  E= -505.873163489199  delta_E=    0  |g|= 1.72e-10  |ddm|= 1.89e-10
    CPU time for scf_cycle      0.10 sec, wall time      0.10 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 9.979231627711126
E1 = -704.9512146751837  E_coul = 199.0780511859849
init E= -505.873163489199
    CPU time for initialize scf      0.05 sec, wall time      0.05 sec
  HOMO = -0.233552997132175  LUMO = 201.5029698019
  mo_energy =
[-1.19406567e+02 -1.22111770e+01 -6.64018930e+00 -6.64018930e+00
 -6.64018930e+00 -1.15858563e+00 -2.33552997e-01 -2.33552997e-01
 -2.33552997e-01  2.01502970e+02  2.54794825e+03]
E1 = -704.9512146751886  E_coul = 199.07805118598958
cycle= 1 E= -505.873163489199  delta_E= -2.27e-13  |g|= 1.63e-12  |ddm|= 1.28e-12
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -704.9512146751886  E_coul = 199.07805118598958
  HOMO = -0.233552997132164  LUMO = 201.502969801902
  mo_energy =
[-1.19406567e+02 -1.22111770e+01 -6.64018930e+00 -6.64018930e+00
 -6.64018930e+00 -1.15858563e+00 -2.33552997e-01 -2.33552997e-01
 -2.33552997e-01  2.01502970e+02  2.54794825e+03]
E1 = -704.9512146751883  E_coul = 199.07805118598935
Extra cycle  E= -505.873163489199  delta_E=    0  |g|= 1.43e-12  |ddm|= 5.76e-15
    CPU time for scf_cycle      0.12 sec, wall time      0.12 sec
exp = [1.84766175e+03 2.58035103e+02 5.43629902e+01 4.72722113e+00
 3.95041064e-01 8.58940955e+00 4.90744606e-01]
grad_E = [ 3.21191598e-04  9.98907272e-05 -3.05625527e-04  2.34936615e-04
  1.68768558e-02  1.17199139e-03  2.06513379e-02]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((7, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.5820650117923668e+02,6.8360631861859034e+01,4.6647996209811691e+00,3.9711619128280629e-01,8.5710114329191196e+00,4.8957520672686806e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "5s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:41:35 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  1847.45187574        1
[INPUT] 0    0    [1    /1   ]  258.080131216        1
[INPUT] 0    0    [1    /1   ]  54.3622093341        1
[INPUT] 0    0    [1    /1   ]  4.72726832067        1
[INPUT] 0    0    [1    /1   ]  0.395676742627       1
[INPUT] 1    0    [1    /1   ]  8.59073444691        1
[INPUT] 1    0    [1    /1   ]  0.49110834065        1

nuclear repulsion = 0
number of shells = 7
number of NR pGTOs = 11
number of NR cGTOs = 11
basis = {'Ar': [[0, [1847.4518757419748, 1.0]], [0, [258.08013121595684, 1.0]], [0, [54.362209334086984, 1.0]], [0, [4.72726832067132, 1.0]], [0, [0.3956767426269544, 1.0]], [1, [8.590734446906152, 1.0]], [1, [0.4911083406500997, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [1847.45187574]
bas 1, expnt(s) = [258.08013122]
bas 2, expnt(s) = [54.36220933]
bas 3, expnt(s) = [4.72726832]
bas 4, expnt(s) = [0.39567674]
bas 5, expnt(s) = [8.59073445]
bas 6, expnt(s) = [0.49110834]
CPU time:       102.62
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]
 [ 0  1  1  1  0 36 37  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.84745188e+03 7.11942427e+02 2.58080131e+02 1.62678797e+02
 5.43622093e+01 5.05810509e+01 4.72726832e+00 8.09977051e+00
 3.95676743e-01 1.26043489e+00 8.59073445e+00 4.29064181e+01
 4.91108341e-01 1.19937787e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.31617986474919
cond(S) = 9.97957372289877
E1 = -687.1488563241173  E_coul = 184.96353297687185
init E= -502.185323347245
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.680271973538909  LUMO = 200.132663517248
  mo_energy =
[-1.20795911e+02 -1.32482161e+01 -7.61663397e+00 -7.61663397e+00
 -7.61663397e+00 -1.65022921e+00 -6.80271974e-01 -6.80271974e-01
 -6.80271974e-01  2.00132664e+02  2.54659456e+03]
E1 = -704.9978918137979  E_coul = 199.12480022966875
cycle= 1 E= -505.873091584129  delta_E= -3.69  |g|= 0.262  |ddm|= 0.295
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.293229
diis-c [-0.08598316  1.        ]
  HOMO = -0.232327336153658  LUMO = 201.537934579774
  mo_energy =
[-1.19399972e+02 -1.22080399e+01 -6.63720749e+00 -6.63720749e+00
 -6.63720749e+00 -1.15758190e+00 -2.32327336e-01 -2.32327336e-01
 -2.32327336e-01  2.01537935e+02  2.54787364e+03]
E1 = -704.9893261604468  E_coul = 199.1161279996078
cycle= 2 E= -505.873198160839  delta_E= -0.000107  |g|= 0.00199  |ddm|= 0.00344
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00199717
diis-c [-3.00449162e-06 -3.39478655e-03  1.00339479e+00]
  HOMO = -0.232363362452472  LUMO = 201.536141103338
  mo_energy =
[-1.19402739e+02 -1.22083107e+01 -6.63760450e+00 -6.63760450e+00
 -6.63760450e+00 -1.15759697e+00 -2.32363362e-01 -2.32363362e-01
 -2.32363362e-01  2.01536141e+02  2.54786733e+03]
E1 = -704.9892638150284  E_coul = 199.1160656455046
cycle= 3 E= -505.873198169524  delta_E= -8.68e-09  |g|= 1.71e-05  |ddm|= 2.79e-05
    CPU time for cycle= 3      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=2.25918e-05
diis-c [-7.20131731e-12  4.74433650e-05 -1.31487949e-02  1.01310135e+00]
  HOMO = -0.232363507308982  LUMO = 201.536137799918
  mo_energy =
[-1.19402748e+02 -1.22083118e+01 -6.63760652e+00 -6.63760652e+00
 -6.63760652e+00 -1.15759701e+00 -2.32363507e-01 -2.32363507e-01
 -2.32363507e-01  2.01536138e+02  2.54786732e+03]
E1 = -704.9892635013937  E_coul = 199.11606533186955
cycle= 4 E= -505.873198169524  delta_E= -3.41e-13  |g|= 2.27e-08  |ddm|= 1.92e-07
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -704.9892635013937  E_coul = 199.11606533186955
  HOMO = -0.232363507141969  LUMO = 201.536137830608
  mo_energy =
[-1.19402747e+02 -1.22083118e+01 -6.63760652e+00 -6.63760652e+00
 -6.63760652e+00 -1.15759701e+00 -2.32363507e-01 -2.32363507e-01
 -2.32363507e-01  2.01536138e+02  2.54786732e+03]
E1 = -704.9892635020324  E_coul = 199.1160653325081
Extra cycle  E= -505.873198169524  delta_E= -1.14e-13  |g|= 1.72e-10  |ddm|= 1.89e-10
    CPU time for scf_cycle      0.09 sec, wall time      0.10 sec
exp = [1.84745188e+03 2.58080131e+02 5.43622093e+01 4.72726832e+00
 3.95676743e-01 8.59073445e+00 4.91108341e-01]
E = -505.87319816952424
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((7, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.5820650117923668e+02,6.8360631861859034e+01,4.6647996209811691e+00,3.9711619128280629e-01,8.5710114329191196e+00,4.8957520672686806e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "5s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:41:35 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  1847.45187574        1
[INPUT] 0    0    [1    /1   ]  258.080131216        1
[INPUT] 0    0    [1    /1   ]  54.3622093341        1
[INPUT] 0    0    [1    /1   ]  4.72726832067        1
[INPUT] 0    0    [1    /1   ]  0.395676742627       1
[INPUT] 1    0    [1    /1   ]  8.59073444691        1
[INPUT] 1    0    [1    /1   ]  0.49110834065        1

nuclear repulsion = 0
number of shells = 7
number of NR pGTOs = 11
number of NR cGTOs = 11
basis = {'Ar': [[0, [1847.4518757419748, 1.0]], [0, [258.08013121595684, 1.0]], [0, [54.362209334086984, 1.0]], [0, [4.72726832067132, 1.0]], [0, [0.3956767426269544, 1.0]], [1, [8.590734446906152, 1.0]], [1, [0.4911083406500997, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [1847.45187574]
bas 1, expnt(s) = [258.08013122]
bas 2, expnt(s) = [54.36220933]
bas 3, expnt(s) = [4.72726832]
bas 4, expnt(s) = [0.39567674]
bas 5, expnt(s) = [8.59073445]
bas 6, expnt(s) = [0.49110834]
CPU time:       103.18
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]
 [ 0  1  1  1  0 36 37  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.84745188e+03 7.11942427e+02 2.58080131e+02 1.62678797e+02
 5.43622093e+01 5.05810509e+01 4.72726832e+00 8.09977051e+00
 3.95676743e-01 1.26043489e+00 8.59073445e+00 4.29064181e+01
 4.91108341e-01 1.19937787e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.31617986474919
cond(S) = 9.97957372289877
E1 = -687.1488563241173  E_coul = 184.96353297687185
init E= -502.185323347245
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.680271973538909  LUMO = 200.132663517248
  mo_energy =
[-1.20795911e+02 -1.32482161e+01 -7.61663397e+00 -7.61663397e+00
 -7.61663397e+00 -1.65022921e+00 -6.80271974e-01 -6.80271974e-01
 -6.80271974e-01  2.00132664e+02  2.54659456e+03]
E1 = -704.9978918137979  E_coul = 199.12480022966875
cycle= 1 E= -505.873091584129  delta_E= -3.69  |g|= 0.262  |ddm|= 0.295
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.293229
diis-c [-0.08598316  1.        ]
  HOMO = -0.232327336153658  LUMO = 201.537934579774
  mo_energy =
[-1.19399972e+02 -1.22080399e+01 -6.63720749e+00 -6.63720749e+00
 -6.63720749e+00 -1.15758190e+00 -2.32327336e-01 -2.32327336e-01
 -2.32327336e-01  2.01537935e+02  2.54787364e+03]
E1 = -704.9893261604468  E_coul = 199.1161279996078
cycle= 2 E= -505.873198160839  delta_E= -0.000107  |g|= 0.00199  |ddm|= 0.00344
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00199717
diis-c [-3.00449162e-06 -3.39478655e-03  1.00339479e+00]
  HOMO = -0.232363362452472  LUMO = 201.536141103338
  mo_energy =
[-1.19402739e+02 -1.22083107e+01 -6.63760450e+00 -6.63760450e+00
 -6.63760450e+00 -1.15759697e+00 -2.32363362e-01 -2.32363362e-01
 -2.32363362e-01  2.01536141e+02  2.54786733e+03]
E1 = -704.9892638150284  E_coul = 199.1160656455046
cycle= 3 E= -505.873198169524  delta_E= -8.68e-09  |g|= 1.71e-05  |ddm|= 2.79e-05
    CPU time for cycle= 3      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=2.25918e-05
diis-c [-7.20131731e-12  4.74433650e-05 -1.31487949e-02  1.01310135e+00]
  HOMO = -0.232363507308982  LUMO = 201.536137799918
  mo_energy =
[-1.19402748e+02 -1.22083118e+01 -6.63760652e+00 -6.63760652e+00
 -6.63760652e+00 -1.15759701e+00 -2.32363507e-01 -2.32363507e-01
 -2.32363507e-01  2.01536138e+02  2.54786732e+03]
E1 = -704.9892635013937  E_coul = 199.11606533186955
cycle= 4 E= -505.873198169524  delta_E= -3.41e-13  |g|= 2.27e-08  |ddm|= 1.92e-07
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -704.9892635013937  E_coul = 199.11606533186955
  HOMO = -0.232363507141969  LUMO = 201.536137830608
  mo_energy =
[-1.19402747e+02 -1.22083118e+01 -6.63760652e+00 -6.63760652e+00
 -6.63760652e+00 -1.15759701e+00 -2.32363507e-01 -2.32363507e-01
 -2.32363507e-01  2.01536138e+02  2.54786732e+03]
E1 = -704.9892635020324  E_coul = 199.1160653325081
Extra cycle  E= -505.873198169524  delta_E= -1.14e-13  |g|= 1.72e-10  |ddm|= 1.89e-10
    CPU time for scf_cycle      0.10 sec, wall time      0.10 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 9.97957372289877
E1 = -704.9892635020324  E_coul = 199.1160653325081
init E= -505.873198169524
    CPU time for initialize scf      0.05 sec, wall time      0.05 sec
  HOMO = -0.232363507140897  LUMO = 201.536137830829
  mo_energy =
[-1.19402747e+02 -1.22083118e+01 -6.63760652e+00 -6.63760652e+00
 -6.63760652e+00 -1.15759701e+00 -2.32363507e-01 -2.32363507e-01
 -2.32363507e-01  2.01536138e+02  2.54786732e+03]
E1 = -704.989263502037  E_coul = 199.11606533251248
cycle= 1 E= -505.873198169525  delta_E= -3.41e-13  |g|= 1.05e-12  |ddm|= 1.28e-12
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -704.989263502037  E_coul = 199.11606533251248
  HOMO = -0.232363507140894  LUMO = 201.536137830831
  mo_energy =
[-1.19402747e+02 -1.22083118e+01 -6.63760652e+00 -6.63760652e+00
 -6.63760652e+00 -1.15759701e+00 -2.32363507e-01 -2.32363507e-01
 -2.32363507e-01  2.01536138e+02  2.54786732e+03]
E1 = -704.9892635020367  E_coul = 199.11606533251225
Extra cycle  E= -505.873198169524  delta_E= 1.14e-13  |g|= 5.96e-13  |ddm|= 9.1e-15
    CPU time for scf_cycle      0.13 sec, wall time      0.13 sec
exp = [1.84745188e+03 2.58080131e+02 5.43622093e+01 4.72726832e+00
 3.95676743e-01 8.59073445e+00 4.91108341e-01]
grad_E = [ 0.00031887  0.00015135 -0.00051716  0.00041644  0.02820978  0.00198362
  0.03472348]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((7, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.5820650117923668e+02,6.8360631861859034e+01,4.6647996209811691e+00,3.9711619128280629e-01,8.5710114329191196e+00,4.8957520672686806e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "5s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:41:39 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  1846.90038082        1
[INPUT] 0    0    [1    /1   ]  258.138253819        1
[INPUT] 0    0    [1    /1   ]  54.3595674721        1
[INPUT] 0    0    [1    /1   ]  4.72734336379        1
[INPUT] 0    0    [1    /1   ]  0.3967048725         1
[INPUT] 1    0    [1    /1   ]  8.59287355819        1
[INPUT] 1    0    [1    /1   ]  0.491695431738       1

nuclear repulsion = 0
number of shells = 7
number of NR pGTOs = 11
number of NR cGTOs = 11
basis = {'Ar': [[0, [1846.900380817285, 1.0]], [0, [258.1382538185144, 1.0]], [0, [54.359567472057265, 1.0]], [0, [4.7273433637885525, 1.0]], [0, [0.39670487249988357, 1.0]], [1, [8.59287355819333, 1.0]], [1, [0.4916954317377073, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [1846.90038082]
bas 1, expnt(s) = [258.13825382]
bas 2, expnt(s) = [54.35956747]
bas 3, expnt(s) = [4.72734336]
bas 4, expnt(s) = [0.39670487]
bas 5, expnt(s) = [8.59287356]
bas 6, expnt(s) = [0.49169543]
CPU time:       106.45
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]
 [ 0  1  1  1  0 36 37  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.84690038e+03 7.11783026e+02 2.58138254e+02 1.62706274e+02
 5.43595675e+01 5.05792073e+01 4.72734336e+00 8.09986695e+00
 3.96704872e-01 1.26289044e+00 8.59287356e+00 4.29197733e+01
 4.91695432e-01 1.20117037e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.315255824940103
cond(S) = 9.980816442894008
E1 = -687.1988821355185  E_coul = 185.0086122944006
init E= -502.190269841118
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.679117205434272  LUMO = 200.172476740091
  mo_energy =
[-1.20790977e+02 -1.32445671e+01 -7.61346233e+00 -7.61346233e+00
 -7.61346233e+00 -1.64957206e+00 -6.79117205e-01 -6.79117205e-01
 -6.79117205e-01  2.00172477e+02  2.54617928e+03]
E1 = -705.0592943946368  E_coul = 199.1861122169621
cycle= 1 E= -505.873182177675  delta_E= -3.68  |g|= 0.262  |ddm|= 0.296
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.292735
diis-c [-0.08569386  1.        ]
  HOMO = -0.230405185727871  LUMO = 201.578863008383
  mo_energy =
[-1.19393850e+02 -1.22034164e+01 -6.63304268e+00 -6.63304268e+00
 -6.63304268e+00 -1.15597809e+00 -2.30405186e-01 -2.30405186e-01
 -2.30405186e-01  2.01578863e+02  2.54745932e+03]
E1 = -705.050721828437  E_coul = 199.17743305480232
cycle= 2 E= -505.873288773635  delta_E= -0.000107  |g|= 0.00199  |ddm|= 0.00344
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.0019961
diis-c [-3.00234080e-06 -3.39684626e-03  1.00339685e+00]
  HOMO = -0.230441311438223  LUMO = 201.577066673047
  mo_energy =
[-1.19396619e+02 -1.22036873e+01 -6.63343979e+00 -6.63343979e+00
 -6.63343979e+00 -1.15599321e+00 -2.30441311e-01 -2.30441311e-01
 -2.30441311e-01  2.01577067e+02  2.54745300e+03]
E1 = -705.0506594513023  E_coul = 199.17737066898866
cycle= 3 E= -505.873288782314  delta_E= -8.68e-09  |g|= 1.71e-05  |ddm|= 2.79e-05
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=2.25761e-05
diis-c [-7.21711903e-12  4.74425998e-05 -1.31440843e-02  1.01309664e+00]
  HOMO = -0.230441456632917  LUMO = 201.57706336532
  mo_energy =
[-1.19396628e+02 -1.22036884e+01 -6.63344181e+00 -6.63344181e+00
 -6.63344181e+00 -1.15599325e+00 -2.30441457e-01 -2.30441457e-01
 -2.30441457e-01  2.01577063e+02  2.54745299e+03]
E1 = -705.050659137855  E_coul = 199.17737035554057
cycle= 4 E= -505.873288782314  delta_E= -7.39e-13  |g|= 2.27e-08  |ddm|= 1.92e-07
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -705.050659137855  E_coul = 199.17737035554057
  HOMO = -0.230441456465479  LUMO = 201.577063396026
  mo_energy =
[-1.19396628e+02 -1.22036884e+01 -6.63344181e+00 -6.63344181e+00
 -6.63344181e+00 -1.15599325e+00 -2.30441456e-01 -2.30441456e-01
 -2.30441456e-01  2.01577063e+02  2.54745299e+03]
E1 = -705.0506591384928  E_coul = 199.17737035617859
Extra cycle  E= -505.873288782314  delta_E= 1.14e-13  |g|= 1.72e-10  |ddm|= 1.89e-10
    CPU time for scf_cycle      0.10 sec, wall time      0.10 sec
exp = [1.84690038e+03 2.58138254e+02 5.43595675e+01 4.72734336e+00
 3.96704872e-01 8.59287356e+00 4.91695432e-01]
E = -505.87328878231426
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((7, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.5820650117923668e+02,6.8360631861859034e+01,4.6647996209811691e+00,3.9711619128280629e-01,8.5710114329191196e+00,4.8957520672686806e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "5s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:41:39 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  1846.90038082        1
[INPUT] 0    0    [1    /1   ]  258.138253819        1
[INPUT] 0    0    [1    /1   ]  54.3595674721        1
[INPUT] 0    0    [1    /1   ]  4.72734336379        1
[INPUT] 0    0    [1    /1   ]  0.3967048725         1
[INPUT] 1    0    [1    /1   ]  8.59287355819        1
[INPUT] 1    0    [1    /1   ]  0.491695431738       1

nuclear repulsion = 0
number of shells = 7
number of NR pGTOs = 11
number of NR cGTOs = 11
basis = {'Ar': [[0, [1846.900380817285, 1.0]], [0, [258.1382538185144, 1.0]], [0, [54.359567472057265, 1.0]], [0, [4.7273433637885525, 1.0]], [0, [0.39670487249988357, 1.0]], [1, [8.59287355819333, 1.0]], [1, [0.4916954317377073, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [1846.90038082]
bas 1, expnt(s) = [258.13825382]
bas 2, expnt(s) = [54.35956747]
bas 3, expnt(s) = [4.72734336]
bas 4, expnt(s) = [0.39670487]
bas 5, expnt(s) = [8.59287356]
bas 6, expnt(s) = [0.49169543]
CPU time:       107.03
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]
 [ 0  1  1  1  0 36 37  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.84690038e+03 7.11783026e+02 2.58138254e+02 1.62706274e+02
 5.43595675e+01 5.05792073e+01 4.72734336e+00 8.09986695e+00
 3.96704872e-01 1.26289044e+00 8.59287356e+00 4.29197733e+01
 4.91695432e-01 1.20117037e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.315255824940103
cond(S) = 9.980816442894008
E1 = -687.1988821355185  E_coul = 185.0086122944006
init E= -502.190269841118
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.679117205434272  LUMO = 200.172476740091
  mo_energy =
[-1.20790977e+02 -1.32445671e+01 -7.61346233e+00 -7.61346233e+00
 -7.61346233e+00 -1.64957206e+00 -6.79117205e-01 -6.79117205e-01
 -6.79117205e-01  2.00172477e+02  2.54617928e+03]
E1 = -705.0592943946368  E_coul = 199.1861122169621
cycle= 1 E= -505.873182177675  delta_E= -3.68  |g|= 0.262  |ddm|= 0.296
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.292735
diis-c [-0.08569386  1.        ]
  HOMO = -0.230405185727871  LUMO = 201.578863008383
  mo_energy =
[-1.19393850e+02 -1.22034164e+01 -6.63304268e+00 -6.63304268e+00
 -6.63304268e+00 -1.15597809e+00 -2.30405186e-01 -2.30405186e-01
 -2.30405186e-01  2.01578863e+02  2.54745932e+03]
E1 = -705.050721828437  E_coul = 199.17743305480232
cycle= 2 E= -505.873288773635  delta_E= -0.000107  |g|= 0.00199  |ddm|= 0.00344
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.0019961
diis-c [-3.00234080e-06 -3.39684626e-03  1.00339685e+00]
  HOMO = -0.230441311438223  LUMO = 201.577066673047
  mo_energy =
[-1.19396619e+02 -1.22036873e+01 -6.63343979e+00 -6.63343979e+00
 -6.63343979e+00 -1.15599321e+00 -2.30441311e-01 -2.30441311e-01
 -2.30441311e-01  2.01577067e+02  2.54745300e+03]
E1 = -705.0506594513023  E_coul = 199.17737066898866
cycle= 3 E= -505.873288782314  delta_E= -8.68e-09  |g|= 1.71e-05  |ddm|= 2.79e-05
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=2.25761e-05
diis-c [-7.21711903e-12  4.74425998e-05 -1.31440843e-02  1.01309664e+00]
  HOMO = -0.230441456632917  LUMO = 201.57706336532
  mo_energy =
[-1.19396628e+02 -1.22036884e+01 -6.63344181e+00 -6.63344181e+00
 -6.63344181e+00 -1.15599325e+00 -2.30441457e-01 -2.30441457e-01
 -2.30441457e-01  2.01577063e+02  2.54745299e+03]
E1 = -705.050659137855  E_coul = 199.17737035554057
cycle= 4 E= -505.873288782314  delta_E= -7.39e-13  |g|= 2.27e-08  |ddm|= 1.92e-07
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -705.050659137855  E_coul = 199.17737035554057
  HOMO = -0.230441456465479  LUMO = 201.577063396026
  mo_energy =
[-1.19396628e+02 -1.22036884e+01 -6.63344181e+00 -6.63344181e+00
 -6.63344181e+00 -1.15599325e+00 -2.30441456e-01 -2.30441456e-01
 -2.30441456e-01  2.01577063e+02  2.54745299e+03]
E1 = -705.0506591384928  E_coul = 199.17737035617859
Extra cycle  E= -505.873288782314  delta_E= 1.14e-13  |g|= 1.72e-10  |ddm|= 1.89e-10
    CPU time for scf_cycle      0.10 sec, wall time      0.10 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 9.980816442894008
E1 = -705.0506591384928  E_coul = 199.17737035617859
init E= -505.873288782314
    CPU time for initialize scf      0.06 sec, wall time      0.06 sec
  HOMO = -0.230441456464407  LUMO = 201.577063396247
  mo_energy =
[-1.19396628e+02 -1.22036884e+01 -6.63344181e+00 -6.63344181e+00
 -6.63344181e+00 -1.15599325e+00 -2.30441456e-01 -2.30441456e-01
 -2.30441456e-01  2.01577063e+02  2.54745299e+03]
E1 = -705.0506591384972  E_coul = 199.17737035618293
cycle= 1 E= -505.873288782314  delta_E=    0  |g|= 1.26e-12  |ddm|= 1.28e-12
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -705.0506591384972  E_coul = 199.17737035618293
  HOMO = -0.230441456464401  LUMO = 201.577063396248
  mo_energy =
[-1.19396628e+02 -1.22036884e+01 -6.63344181e+00 -6.63344181e+00
 -6.63344181e+00 -1.15599325e+00 -2.30441456e-01 -2.30441456e-01
 -2.30441456e-01  2.01577063e+02  2.54745299e+03]
E1 = -705.0506591384973  E_coul = 199.177370356183
Extra cycle  E= -505.873288782314  delta_E=    0  |g|= 5.56e-13  |ddm|= 1.14e-14
    CPU time for scf_cycle      0.12 sec, wall time      0.13 sec
exp = [1.84690038e+03 2.58138254e+02 5.43595675e+01 4.72734336e+00
 3.96704872e-01 8.59287356e+00 4.91695432e-01]
grad_E = [ 0.00031493  0.00023429 -0.00085818  0.00070907  0.04647701  0.00329214
  0.05740602]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((7, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.5820650117923668e+02,6.8360631861859034e+01,4.6647996209811691e+00,3.9711619128280629e-01,8.5710114329191196e+00,4.8957520672686806e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "5s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:41:42 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  1845.45694332        1
[INPUT] 0    0    [1    /1   ]  258.193588846        1
[INPUT] 0    0    [1    /1   ]  54.3516985206        1
[INPUT] 0    0    [1    /1   ]  4.72746107926        1
[INPUT] 0    0    [1    /1   ]  0.398364065615       1
[INPUT] 1    0    [1    /1   ]  8.59631517764        1
[INPUT] 1    0    [1    /1   ]  0.492639727925       1

nuclear repulsion = 0
number of shells = 7
number of NR pGTOs = 11
number of NR cGTOs = 11
basis = {'Ar': [[0, [1845.456943320031, 1.0]], [0, [258.1935888464688, 1.0]], [0, [54.351698520554585, 1.0]], [0, [4.727461079261377, 1.0]], [0, [0.3983640656151095, 1.0]], [1, [8.59631517764432, 1.0]], [1, [0.4926397279254277, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [1845.45694332]
bas 1, expnt(s) = [258.19358885]
bas 2, expnt(s) = [54.35169852]
bas 3, expnt(s) = [4.72746108]
bas 4, expnt(s) = [0.39836407]
bas 5, expnt(s) = [8.59631518]
bas 6, expnt(s) = [0.49263973]
CPU time:       110.18
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]
 [ 0  1  1  1  0 36 37  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.84545694e+03 7.11365767e+02 2.58193589e+02 1.62732432e+02
 5.43516985e+01 5.05737159e+01 4.72746108e+00 8.10001822e+00
 3.98364066e-01 1.26684984e+00 8.59631518e+00 4.29412622e+01
 4.92639728e-01 1.20405460e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.313740568800903
cond(S) = 9.984624254278264
E1 = -687.2791634169805  E_coul = 185.0806891508511
init E= -502.198474266129
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.677270112485142  LUMO = 200.203456173866
  mo_energy =
[-1.20783168e+02 -1.32387212e+01 -7.60839232e+00 -7.60839232e+00
 -7.60839232e+00 -1.64850749e+00 -6.77270112e-01 -6.77270112e-01
 -6.77270112e-01  2.00203456e+02  2.54476912e+03]
E1 = -705.1580097785771  E_coul = 199.28459147511114
cycle= 1 E= -505.873418303466  delta_E= -3.67  |g|= 0.261  |ddm|= 0.296
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.29191
diis-c [-0.08521158  1.        ]
  HOMO = -0.227307982412351  LUMO = 201.611640982677
  mo_energy =
[-1.19384118e+02 -1.21959829e+01 -6.62635453e+00 -6.62635453e+00
 -6.62635453e+00 -1.15337751e+00 -2.27307982e-01 -2.27307982e-01
 -2.27307982e-01  2.01611641e+02  2.54605072e+03]
E1 = -705.149423778729  E_coul = 199.2758988153699
cycle= 2 E= -505.873524963359  delta_E= -0.000107  |g|= 0.00199  |ddm|= 0.00345
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.0019948
diis-c [-3.00044822e-06 -3.40071934e-03  1.00340072e+00]
  HOMO = -0.227344280445701  LUMO = 201.609839815704
  mo_energy =
[-1.19386892e+02 -1.21962540e+01 -6.62675192e+00 -6.62675192e+00
 -6.62675192e+00 -1.15339273e+00 -2.27344280e-01 -2.27344280e-01
 -2.27344280e-01  2.01609840e+02  2.54604438e+03]
E1 = -705.1493613255286  E_coul = 199.2758363534948
cycle= 3 E= -505.873524972034  delta_E= -8.67e-09  |g|= 1.7e-05  |ddm|= 2.79e-05
    CPU time for cycle= 3      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=2.2559e-05
diis-c [-7.24495988e-12  4.74513935e-05 -1.31378706e-02  1.01309042e+00]
  HOMO = -0.227344426245904  LUMO = 201.60983650028
  mo_energy =
[-1.19386902e+02 -1.21962551e+01 -6.62675394e+00 -6.62675394e+00
 -6.62675394e+00 -1.15339277e+00 -2.27344426e-01 -2.27344426e-01
 -2.27344426e-01  2.01609837e+02  2.54604438e+03]
E1 = -705.1493610122061  E_coul = 199.27583604017136
cycle= 4 E= -505.873524972035  delta_E= -9.09e-13  |g|= 2.28e-08  |ddm|= 1.92e-07
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -705.1493610122061  E_coul = 199.27583604017136
  HOMO = -0.227344426077669  LUMO = 201.609836531017
  mo_energy =
[-1.19386901e+02 -1.21962551e+01 -6.62675394e+00 -6.62675394e+00
 -6.62675394e+00 -1.15339277e+00 -2.27344426e-01 -2.27344426e-01
 -2.27344426e-01  2.01609837e+02  2.54604438e+03]
E1 = -705.1493610128439  E_coul = 199.27583604080897
Extra cycle  E= -505.873524972035  delta_E= -2.27e-13  |g|= 1.72e-10  |ddm|= 1.89e-10
    CPU time for scf_cycle      0.10 sec, wall time      0.10 sec
exp = [1.84545694e+03 2.58193589e+02 5.43516985e+01 4.72746108e+00
 3.98364066e-01 8.59631518e+00 4.92639728e-01]
E = -505.87352497203494
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((7, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.5820650117923668e+02,6.8360631861859034e+01,4.6647996209811691e+00,3.9711619128280629e-01,8.5710114329191196e+00,4.8957520672686806e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "5s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:41:43 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  1845.45694332        1
[INPUT] 0    0    [1    /1   ]  258.193588846        1
[INPUT] 0    0    [1    /1   ]  54.3516985206        1
[INPUT] 0    0    [1    /1   ]  4.72746107926        1
[INPUT] 0    0    [1    /1   ]  0.398364065615       1
[INPUT] 1    0    [1    /1   ]  8.59631517764        1
[INPUT] 1    0    [1    /1   ]  0.492639727925       1

nuclear repulsion = 0
number of shells = 7
number of NR pGTOs = 11
number of NR cGTOs = 11
basis = {'Ar': [[0, [1845.456943320031, 1.0]], [0, [258.1935888464688, 1.0]], [0, [54.351698520554585, 1.0]], [0, [4.727461079261377, 1.0]], [0, [0.3983640656151095, 1.0]], [1, [8.59631517764432, 1.0]], [1, [0.4926397279254277, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [1845.45694332]
bas 1, expnt(s) = [258.19358885]
bas 2, expnt(s) = [54.35169852]
bas 3, expnt(s) = [4.72746108]
bas 4, expnt(s) = [0.39836407]
bas 5, expnt(s) = [8.59631518]
bas 6, expnt(s) = [0.49263973]
CPU time:       110.77
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]
 [ 0  1  1  1  0 36 37  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.84545694e+03 7.11365767e+02 2.58193589e+02 1.62732432e+02
 5.43516985e+01 5.05737159e+01 4.72746108e+00 8.10001822e+00
 3.98364066e-01 1.26684984e+00 8.59631518e+00 4.29412622e+01
 4.92639728e-01 1.20405460e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.313740568800903
cond(S) = 9.984624254278264
E1 = -687.2791634169805  E_coul = 185.0806891508511
init E= -502.198474266129
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.677270112485142  LUMO = 200.203456173866
  mo_energy =
[-1.20783168e+02 -1.32387212e+01 -7.60839232e+00 -7.60839232e+00
 -7.60839232e+00 -1.64850749e+00 -6.77270112e-01 -6.77270112e-01
 -6.77270112e-01  2.00203456e+02  2.54476912e+03]
E1 = -705.1580097785771  E_coul = 199.28459147511114
cycle= 1 E= -505.873418303466  delta_E= -3.67  |g|= 0.261  |ddm|= 0.296
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.29191
diis-c [-0.08521158  1.        ]
  HOMO = -0.227307982412351  LUMO = 201.611640982677
  mo_energy =
[-1.19384118e+02 -1.21959829e+01 -6.62635453e+00 -6.62635453e+00
 -6.62635453e+00 -1.15337751e+00 -2.27307982e-01 -2.27307982e-01
 -2.27307982e-01  2.01611641e+02  2.54605072e+03]
E1 = -705.149423778729  E_coul = 199.2758988153699
cycle= 2 E= -505.873524963359  delta_E= -0.000107  |g|= 0.00199  |ddm|= 0.00345
    CPU time for cycle= 2      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.0019948
diis-c [-3.00044822e-06 -3.40071934e-03  1.00340072e+00]
  HOMO = -0.227344280445701  LUMO = 201.609839815704
  mo_energy =
[-1.19386892e+02 -1.21962540e+01 -6.62675192e+00 -6.62675192e+00
 -6.62675192e+00 -1.15339273e+00 -2.27344280e-01 -2.27344280e-01
 -2.27344280e-01  2.01609840e+02  2.54604438e+03]
E1 = -705.1493613255286  E_coul = 199.2758363534948
cycle= 3 E= -505.873524972034  delta_E= -8.67e-09  |g|= 1.7e-05  |ddm|= 2.79e-05
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=2.2559e-05
diis-c [-7.24495988e-12  4.74513935e-05 -1.31378706e-02  1.01309042e+00]
  HOMO = -0.227344426245904  LUMO = 201.60983650028
  mo_energy =
[-1.19386902e+02 -1.21962551e+01 -6.62675394e+00 -6.62675394e+00
 -6.62675394e+00 -1.15339277e+00 -2.27344426e-01 -2.27344426e-01
 -2.27344426e-01  2.01609837e+02  2.54604438e+03]
E1 = -705.1493610122061  E_coul = 199.27583604017136
cycle= 4 E= -505.873524972035  delta_E= -9.09e-13  |g|= 2.28e-08  |ddm|= 1.92e-07
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -705.1493610122061  E_coul = 199.27583604017136
  HOMO = -0.227344426077669  LUMO = 201.609836531017
  mo_energy =
[-1.19386901e+02 -1.21962551e+01 -6.62675394e+00 -6.62675394e+00
 -6.62675394e+00 -1.15339277e+00 -2.27344426e-01 -2.27344426e-01
 -2.27344426e-01  2.01609837e+02  2.54604438e+03]
E1 = -705.1493610128439  E_coul = 199.27583604080897
Extra cycle  E= -505.873524972035  delta_E= -2.27e-13  |g|= 1.72e-10  |ddm|= 1.89e-10
    CPU time for scf_cycle      0.10 sec, wall time      0.10 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 9.984624254278264
E1 = -705.1493610128439  E_coul = 199.27583604080897
init E= -505.873524972035
    CPU time for initialize scf      0.05 sec, wall time      0.05 sec
  HOMO = -0.22734442607659  LUMO = 201.609836531239
  mo_energy =
[-1.19386901e+02 -1.21962551e+01 -6.62675394e+00 -6.62675394e+00
 -6.62675394e+00 -1.15339277e+00 -2.27344426e-01 -2.27344426e-01
 -2.27344426e-01  2.01609837e+02  2.54604438e+03]
E1 = -705.1493610128477  E_coul = 199.27583604081337
cycle= 1 E= -505.873524972034  delta_E= 5.68e-13  |g|= 2e-12  |ddm|= 1.28e-12
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -705.1493610128477  E_coul = 199.27583604081337
  HOMO = -0.227344426076586  LUMO = 201.60983653124
  mo_energy =
[-1.19386901e+02 -1.21962551e+01 -6.62675394e+00 -6.62675394e+00
 -6.62675394e+00 -1.15339277e+00 -2.27344426e-01 -2.27344426e-01
 -2.27344426e-01  2.01609837e+02  2.54604438e+03]
E1 = -705.1493610128481  E_coul = 199.27583604081335
Extra cycle  E= -505.873524972035  delta_E= -3.41e-13  |g|= 7.97e-13  |ddm|= 1.51e-14
    CPU time for scf_cycle      0.12 sec, wall time      0.13 sec
exp = [1.84545694e+03 2.58193589e+02 5.43516985e+01 4.72746108e+00
 3.98364066e-01 8.59631518e+00 4.92639728e-01]
grad_E = [ 0.00030812  0.00036745 -0.00140559  0.00117866  0.07579532  0.00539229
  0.09381045]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((7, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.5820650117923668e+02,6.8360631861859034e+01,4.6647996209811691e+00,3.9711619128280629e-01,8.5710114329191196e+00,4.8957520672686806e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "5s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:41:46 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  1841.70376929        1
[INPUT] 0    0    [1    /1   ]  258.181627696        1
[INPUT] 0    0    [1    /1   ]  54.3296584241        1
[INPUT] 0    0    [1    /1   ]  4.72764095352        1
[INPUT] 0    0    [1    /1   ]  0.401021556562       1
[INPUT] 1    0    [1    /1   ]  8.60180026988        1
[INPUT] 1    0    [1    /1   ]  0.494144057361       1

nuclear repulsion = 0
number of shells = 7
number of NR pGTOs = 11
number of NR cGTOs = 11
basis = {'Ar': [[0, [1841.7037692910737, 1.0]], [0, [258.1816276960371, 1.0]], [0, [54.32965842410442, 1.0]], [0, [4.727640953519434, 1.0]], [0, [0.40102155656245675, 1.0]], [1, [8.601800269880366, 1.0]], [1, [0.49414405736148054, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [1841.70376929]
bas 1, expnt(s) = [258.1816277]
bas 2, expnt(s) = [54.32965842]
bas 3, expnt(s) = [4.72764095]
bas 4, expnt(s) = [0.40102156]
bas 5, expnt(s) = [8.60180027]
bas 6, expnt(s) = [0.49414406]
CPU time:       113.92
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]
 [ 0  1  1  1  0 36 37  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.84170377e+03 7.10280443e+02 2.58181628e+02 1.62726778e+02
 5.43296584e+01 5.05583341e+01 4.72764095e+00 8.10024937e+00
 4.01021557e-01 1.27318295e+00 8.60180027e+00 4.29755146e+01
 4.94144057e-01 1.20865225e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.311253126431
cond(S) = 9.995437761947514
E1 = -687.4066087898195  E_coul = 185.19441500134258
init E= -502.212193788477
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.674353685625832  LUMO = 200.166045153938
  mo_energy =
[-1.20771054e+02 -1.32294669e+01 -7.60039552e+00 -7.60039552e+00
 -7.60039552e+00 -1.64679187e+00 -6.74353686e-01 -6.74353686e-01
 -6.74353686e-01  2.00166045e+02  2.54058252e+03]
E1 = -705.315149787523  E_coul = 199.44111994009324
cycle= 1 E= -505.87402984743  delta_E= -3.66  |g|= 0.261  |ddm|= 0.297
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.290516
diis-c [-0.08439973  1.        ]
  HOMO = -0.222359776237287  LUMO = 201.577105775632
  mo_energy =
[-1.19368917e+02 -1.21841481e+01 -6.61572742e+00 -6.61572742e+00
 -6.61572742e+00 -1.14918089e+00 -2.22359776e-01 -2.22359776e-01
 -2.22359776e-01  2.01577106e+02  2.54186665e+03]
E1 = -705.3065362835371  E_coul = 199.43239958769544
cycle= 2 E= -505.874136695842  delta_E= -0.000107  |g|= 0.00198  |ddm|= 0.00346
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00199382
diis-c [-3.00155015e-06 -3.40836558e-03  1.00340837e+00]
  HOMO = -0.222396381844883  LUMO = 201.57529629597
  mo_energy =
[-1.19371701e+02 -1.21844199e+01 -6.61612562e+00 -6.61612562e+00
 -6.61612562e+00 -1.14919626e+00 -2.22396382e-01 -2.22396382e-01
 -2.22396382e-01  2.01575296e+02  2.54186028e+03]
E1 = -705.3064736431805  E_coul = 199.43233693865636
cycle= 3 E= -505.874136704524  delta_E= -8.68e-09  |g|= 1.7e-05  |ddm|= 2.8e-05
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=2.25529e-05
diis-c [-7.29597759e-12  4.74915575e-05 -1.31315372e-02  1.01308405e+00]
  HOMO = -0.222396528773299  LUMO = 201.575292966282
  mo_energy =
[-1.19371710e+02 -1.21844210e+01 -6.61612764e+00 -6.61612764e+00
 -6.61612764e+00 -1.14919630e+00 -2.22396529e-01 -2.22396529e-01
 -2.22396529e-01  2.01575293e+02  2.54186028e+03]
E1 = -705.3064733295935  E_coul = 199.4323366250686
cycle= 4 E= -505.874136704525  delta_E= -6.82e-13  |g|= 2.28e-08  |ddm|= 1.92e-07
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -705.3064733295935  E_coul = 199.4323366250686
  HOMO = -0.222396528603506  LUMO = 201.575292997086
  mo_energy =
[-1.19371710e+02 -1.21844210e+01 -6.61612763e+00 -6.61612763e+00
 -6.61612763e+00 -1.14919630e+00 -2.22396529e-01 -2.22396529e-01
 -2.22396529e-01  2.01575293e+02  2.54186028e+03]
E1 = -705.3064733302316  E_coul = 199.4323366257065
Extra cycle  E= -505.874136704525  delta_E= -2.27e-13  |g|= 1.73e-10  |ddm|= 1.89e-10
    CPU time for scf_cycle      0.10 sec, wall time      0.11 sec
exp = [1.84170377e+03 2.58181628e+02 5.43296584e+01 4.72764095e+00
 4.01021557e-01 8.60180027e+00 4.94144057e-01]
E = -505.8741367045251
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((7, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.5820650117923668e+02,6.8360631861859034e+01,4.6647996209811691e+00,3.9711619128280629e-01,8.5710114329191196e+00,4.8957520672686806e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "5s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:41:47 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  1841.70376929        1
[INPUT] 0    0    [1    /1   ]  258.181627696        1
[INPUT] 0    0    [1    /1   ]  54.3296584241        1
[INPUT] 0    0    [1    /1   ]  4.72764095352        1
[INPUT] 0    0    [1    /1   ]  0.401021556562       1
[INPUT] 1    0    [1    /1   ]  8.60180026988        1
[INPUT] 1    0    [1    /1   ]  0.494144057361       1

nuclear repulsion = 0
number of shells = 7
number of NR pGTOs = 11
number of NR cGTOs = 11
basis = {'Ar': [[0, [1841.7037692910737, 1.0]], [0, [258.1816276960371, 1.0]], [0, [54.32965842410442, 1.0]], [0, [4.727640953519434, 1.0]], [0, [0.40102155656245675, 1.0]], [1, [8.601800269880366, 1.0]], [1, [0.49414405736148054, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [1841.70376929]
bas 1, expnt(s) = [258.1816277]
bas 2, expnt(s) = [54.32965842]
bas 3, expnt(s) = [4.72764095]
bas 4, expnt(s) = [0.40102156]
bas 5, expnt(s) = [8.60180027]
bas 6, expnt(s) = [0.49414406]
CPU time:       114.53
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]
 [ 0  1  1  1  0 36 37  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.84170377e+03 7.10280443e+02 2.58181628e+02 1.62726778e+02
 5.43296584e+01 5.05583341e+01 4.72764095e+00 8.10024937e+00
 4.01021557e-01 1.27318295e+00 8.60180027e+00 4.29755146e+01
 4.94144057e-01 1.20865225e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.311253126431
cond(S) = 9.995437761947514
E1 = -687.4066087898195  E_coul = 185.19441500134258
init E= -502.212193788477
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.674353685625832  LUMO = 200.166045153938
  mo_energy =
[-1.20771054e+02 -1.32294669e+01 -7.60039552e+00 -7.60039552e+00
 -7.60039552e+00 -1.64679187e+00 -6.74353686e-01 -6.74353686e-01
 -6.74353686e-01  2.00166045e+02  2.54058252e+03]
E1 = -705.315149787523  E_coul = 199.44111994009324
cycle= 1 E= -505.87402984743  delta_E= -3.66  |g|= 0.261  |ddm|= 0.297
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.290516
diis-c [-0.08439973  1.        ]
  HOMO = -0.222359776237287  LUMO = 201.577105775632
  mo_energy =
[-1.19368917e+02 -1.21841481e+01 -6.61572742e+00 -6.61572742e+00
 -6.61572742e+00 -1.14918089e+00 -2.22359776e-01 -2.22359776e-01
 -2.22359776e-01  2.01577106e+02  2.54186665e+03]
E1 = -705.3065362835371  E_coul = 199.43239958769544
cycle= 2 E= -505.874136695842  delta_E= -0.000107  |g|= 0.00198  |ddm|= 0.00346
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00199382
diis-c [-3.00155015e-06 -3.40836558e-03  1.00340837e+00]
  HOMO = -0.222396381844883  LUMO = 201.57529629597
  mo_energy =
[-1.19371701e+02 -1.21844199e+01 -6.61612562e+00 -6.61612562e+00
 -6.61612562e+00 -1.14919626e+00 -2.22396382e-01 -2.22396382e-01
 -2.22396382e-01  2.01575296e+02  2.54186028e+03]
E1 = -705.3064736431805  E_coul = 199.43233693865636
cycle= 3 E= -505.874136704524  delta_E= -8.68e-09  |g|= 1.7e-05  |ddm|= 2.8e-05
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=2.25529e-05
diis-c [-7.29597759e-12  4.74915575e-05 -1.31315372e-02  1.01308405e+00]
  HOMO = -0.222396528773299  LUMO = 201.575292966282
  mo_energy =
[-1.19371710e+02 -1.21844210e+01 -6.61612764e+00 -6.61612764e+00
 -6.61612764e+00 -1.14919630e+00 -2.22396529e-01 -2.22396529e-01
 -2.22396529e-01  2.01575293e+02  2.54186028e+03]
E1 = -705.3064733295935  E_coul = 199.4323366250686
cycle= 4 E= -505.874136704525  delta_E= -6.82e-13  |g|= 2.28e-08  |ddm|= 1.92e-07
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -705.3064733295935  E_coul = 199.4323366250686
  HOMO = -0.222396528603506  LUMO = 201.575292997086
  mo_energy =
[-1.19371710e+02 -1.21844210e+01 -6.61612763e+00 -6.61612763e+00
 -6.61612763e+00 -1.14919630e+00 -2.22396529e-01 -2.22396529e-01
 -2.22396529e-01  2.01575293e+02  2.54186028e+03]
E1 = -705.3064733302316  E_coul = 199.4323366257065
Extra cycle  E= -505.874136704525  delta_E= -2.27e-13  |g|= 1.73e-10  |ddm|= 1.89e-10
    CPU time for scf_cycle      0.10 sec, wall time      0.10 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 9.995437761947514
E1 = -705.3064733302316  E_coul = 199.4323366257065
init E= -505.874136704525
    CPU time for initialize scf      0.05 sec, wall time      0.05 sec
  HOMO = -0.222396528602422  LUMO = 201.575292997308
  mo_energy =
[-1.19371710e+02 -1.21844210e+01 -6.61612763e+00 -6.61612763e+00
 -6.61612763e+00 -1.14919630e+00 -2.22396529e-01 -2.22396529e-01
 -2.22396529e-01  2.01575293e+02  2.54186028e+03]
E1 = -705.3064733302361  E_coul = 199.43233662571097
cycle= 1 E= -505.874136704525  delta_E= -1.14e-13  |g|= 2.08e-12  |ddm|= 1.28e-12
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -705.3064733302361  E_coul = 199.43233662571097
  HOMO = -0.222396528602414  LUMO = 201.57529299731
  mo_energy =
[-1.19371710e+02 -1.21844210e+01 -6.61612763e+00 -6.61612763e+00
 -6.61612763e+00 -1.14919630e+00 -2.22396529e-01 -2.22396529e-01
 -2.22396529e-01  2.01575293e+02  2.54186028e+03]
E1 = -705.3064733302356  E_coul = 199.43233662571072
Extra cycle  E= -505.874136704525  delta_E= 3.41e-13  |g|= 5.38e-13  |ddm|= 1.01e-14
    CPU time for scf_cycle      0.13 sec, wall time      0.13 sec
exp = [1.84170377e+03 2.58181628e+02 5.43296584e+01 4.72764095e+00
 4.01021557e-01 8.60180027e+00 4.94144057e-01]
grad_E = [ 0.00029597  0.00057912 -0.00227493  0.00192367  0.12234459  0.00872592
  0.15160546]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((7, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.5820650117923668e+02,6.8360631861859034e+01,4.6647996209811691e+00,3.9711619128280629e-01,8.5710114329191196e+00,4.8957520672686806e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "5s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:41:50 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  1832.08603685        1
[INPUT] 0    0    [1    /1   ]  257.899997094        1
[INPUT] 0    0    [1    /1   ]  54.2704175435        1
[INPUT] 0    0    [1    /1   ]  4.72790130967        1
[INPUT] 0    0    [1    /1   ]  0.405184747661       1
[INPUT] 1    0    [1    /1   ]  8.61032490836        1
[INPUT] 1    0    [1    /1   ]  0.496480266226       1

nuclear repulsion = 0
number of shells = 7
number of NR pGTOs = 11
number of NR cGTOs = 11
basis = {'Ar': [[0, [1832.0860368503663, 1.0]], [0, [257.89999709354475, 1.0]], [0, [54.27041754345624, 1.0]], [0, [4.727901309674469, 1.0]], [0, [0.40518474766065105, 1.0]], [1, [8.610324908356331, 1.0]], [1, [0.496480266225558, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [1832.08603685]
bas 1, expnt(s) = [257.89999709]
bas 2, expnt(s) = [54.27041754]
bas 3, expnt(s) = [4.72790131]
bas 4, expnt(s) = [0.40518475]
bas 5, expnt(s) = [8.61032491]
bas 6, expnt(s) = [0.49648027]
CPU time:       117.69
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]
 [ 0  1  1  1  0 36 37  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.83208604e+03 7.07496707e+02 2.57899997e+02 1.62593630e+02
 5.42704175e+01 5.05169819e+01 4.72790131e+00 8.10058393e+00
 4.05184748e-01 1.28308327e+00 8.61032491e+00 4.30287587e+01
 4.96480266e-01 1.21579928e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.307212438610865
cond(S) = 10.024756120305184
E1 = -687.6035636052574  E_coul = 185.3683571110643
init E= -502.235206494193
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.669887684253222  LUMO = 199.879999407315
  mo_energy =
[-1.20753064e+02 -1.32152310e+01 -7.58817163e+00 -7.58817163e+00
 -7.58817163e+00 -1.64407755e+00 -6.69887684e-01 -6.69887684e-01
 -6.69887684e-01  1.99879999e+02  2.52902041e+03]
E1 = -705.5588937168485  E_coul = 199.68330580841578
cycle= 1 E= -505.875587908433  delta_E= -3.64  |g|= 0.26  |ddm|= 0.299
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.288146
diis-c [-0.08302786  1.        ]
  HOMO = -0.214640701459792  LUMO = 201.295541061491
  mo_energy =
[-1.19346080e+02 -1.21657825e+01 -6.59929280e+00 -6.59929280e+00
 -6.59929280e+00 -1.14253090e+00 -2.14640701e-01 -2.14640701e-01
 -2.14640701e-01  2.01295541e+02  2.53030856e+03]
E1 = -705.550221284009  E_coul = 199.67452600539195
cycle= 2 E= -505.875695278617  delta_E= -0.000107  |g|= 0.00199  |ddm|= 0.00348
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00199523
diis-c [-3.01414091e-06 -3.42415435e-03  1.00342415e+00]
  HOMO = -0.21467787360533  LUMO = 201.293717034283
  mo_energy =
[-1.19348884e+02 -1.21660558e+01 -6.59969316e+00 -6.59969316e+00
 -6.59969316e+00 -1.14254653e+00 -2.14677874e-01 -2.14677874e-01
 -2.14677874e-01  2.01293717e+02  2.53030215e+03]
E1 = -705.5501581777818  E_coul = 199.67446289043392
cycle= 3 E= -505.875695287348  delta_E= -8.73e-09  |g|= 1.7e-05  |ddm|= 2.82e-05
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=2.25995e-05
diis-c [-7.39356473e-12  4.76222830e-05 -1.31310322e-02  1.01308341e+00]
  HOMO = -0.214678022725905  LUMO = 201.293713677151
  mo_energy =
[-1.19348893e+02 -1.21660569e+01 -6.59969518e+00 -6.59969518e+00
 -6.59969518e+00 -1.14254657e+00 -2.14678023e-01 -2.14678023e-01
 -2.14678023e-01  2.01293714e+02  2.53030214e+03]
E1 = -705.5501578625627  E_coul = 199.67446257521445
cycle= 4 E= -505.875695287348  delta_E= -4.55e-13  |g|= 2.3e-08  |ddm|= 1.92e-07
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -705.5501578625627  E_coul = 199.67446257521445
  HOMO = -0.214678022552901  LUMO = 201.293713708109
  mo_energy =
[-1.19348893e+02 -1.21660569e+01 -6.59969518e+00 -6.59969518e+00
 -6.59969518e+00 -1.14254657e+00 -2.14678023e-01 -2.14678023e-01
 -2.14678023e-01  2.01293714e+02  2.53030214e+03]
E1 = -705.5501578632026  E_coul = 199.67446257585445
Extra cycle  E= -505.875695287348  delta_E= 2.27e-13  |g|= 1.74e-10  |ddm|= 1.89e-10
    CPU time for scf_cycle      0.10 sec, wall time      0.11 sec
exp = [1.83208604e+03 2.57899997e+02 5.42704175e+01 4.72790131e+00
 4.05184748e-01 8.61032491e+00 4.96480266e-01]
E = -505.8756952873481
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((7, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.5820650117923668e+02,6.8360631861859034e+01,4.6647996209811691e+00,3.9711619128280629e-01,8.5710114329191196e+00,4.8957520672686806e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "5s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:41:51 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  1832.08603685        1
[INPUT] 0    0    [1    /1   ]  257.899997094        1
[INPUT] 0    0    [1    /1   ]  54.2704175435        1
[INPUT] 0    0    [1    /1   ]  4.72790130967        1
[INPUT] 0    0    [1    /1   ]  0.405184747661       1
[INPUT] 1    0    [1    /1   ]  8.61032490836        1
[INPUT] 1    0    [1    /1   ]  0.496480266226       1

nuclear repulsion = 0
number of shells = 7
number of NR pGTOs = 11
number of NR cGTOs = 11
basis = {'Ar': [[0, [1832.0860368503663, 1.0]], [0, [257.89999709354475, 1.0]], [0, [54.27041754345624, 1.0]], [0, [4.727901309674469, 1.0]], [0, [0.40518474766065105, 1.0]], [1, [8.610324908356331, 1.0]], [1, [0.496480266225558, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [1832.08603685]
bas 1, expnt(s) = [257.89999709]
bas 2, expnt(s) = [54.27041754]
bas 3, expnt(s) = [4.72790131]
bas 4, expnt(s) = [0.40518475]
bas 5, expnt(s) = [8.61032491]
bas 6, expnt(s) = [0.49648027]
CPU time:       118.30
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]
 [ 0  1  1  1  0 36 37  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.83208604e+03 7.07496707e+02 2.57899997e+02 1.62593630e+02
 5.42704175e+01 5.05169819e+01 4.72790131e+00 8.10058393e+00
 4.05184748e-01 1.28308327e+00 8.61032491e+00 4.30287587e+01
 4.96480266e-01 1.21579928e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.307212438610865
cond(S) = 10.024756120305184
E1 = -687.6035636052574  E_coul = 185.3683571110643
init E= -502.235206494193
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.669887684253222  LUMO = 199.879999407315
  mo_energy =
[-1.20753064e+02 -1.32152310e+01 -7.58817163e+00 -7.58817163e+00
 -7.58817163e+00 -1.64407755e+00 -6.69887684e-01 -6.69887684e-01
 -6.69887684e-01  1.99879999e+02  2.52902041e+03]
E1 = -705.5588937168485  E_coul = 199.68330580841578
cycle= 1 E= -505.875587908433  delta_E= -3.64  |g|= 0.26  |ddm|= 0.299
    CPU time for cycle= 1      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.288146
diis-c [-0.08302786  1.        ]
  HOMO = -0.214640701459792  LUMO = 201.295541061491
  mo_energy =
[-1.19346080e+02 -1.21657825e+01 -6.59929280e+00 -6.59929280e+00
 -6.59929280e+00 -1.14253090e+00 -2.14640701e-01 -2.14640701e-01
 -2.14640701e-01  2.01295541e+02  2.53030856e+03]
E1 = -705.550221284009  E_coul = 199.67452600539195
cycle= 2 E= -505.875695278617  delta_E= -0.000107  |g|= 0.00199  |ddm|= 0.00348
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00199523
diis-c [-3.01414091e-06 -3.42415435e-03  1.00342415e+00]
  HOMO = -0.21467787360533  LUMO = 201.293717034283
  mo_energy =
[-1.19348884e+02 -1.21660558e+01 -6.59969316e+00 -6.59969316e+00
 -6.59969316e+00 -1.14254653e+00 -2.14677874e-01 -2.14677874e-01
 -2.14677874e-01  2.01293717e+02  2.53030215e+03]
E1 = -705.5501581777818  E_coul = 199.67446289043392
cycle= 3 E= -505.875695287348  delta_E= -8.73e-09  |g|= 1.7e-05  |ddm|= 2.82e-05
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=2.25995e-05
diis-c [-7.39356473e-12  4.76222830e-05 -1.31310322e-02  1.01308341e+00]
  HOMO = -0.214678022725905  LUMO = 201.293713677151
  mo_energy =
[-1.19348893e+02 -1.21660569e+01 -6.59969518e+00 -6.59969518e+00
 -6.59969518e+00 -1.14254657e+00 -2.14678023e-01 -2.14678023e-01
 -2.14678023e-01  2.01293714e+02  2.53030214e+03]
E1 = -705.5501578625627  E_coul = 199.67446257521445
cycle= 4 E= -505.875695287348  delta_E= -4.55e-13  |g|= 2.3e-08  |ddm|= 1.92e-07
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -705.5501578625627  E_coul = 199.67446257521445
  HOMO = -0.214678022552901  LUMO = 201.293713708109
  mo_energy =
[-1.19348893e+02 -1.21660569e+01 -6.59969518e+00 -6.59969518e+00
 -6.59969518e+00 -1.14254657e+00 -2.14678023e-01 -2.14678023e-01
 -2.14678023e-01  2.01293714e+02  2.53030214e+03]
E1 = -705.5501578632026  E_coul = 199.67446257585445
Extra cycle  E= -505.875695287348  delta_E= 2.27e-13  |g|= 1.74e-10  |ddm|= 1.89e-10
    CPU time for scf_cycle      0.10 sec, wall time      0.11 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 10.024756120305184
E1 = -705.5501578632026  E_coul = 199.67446257585445
init E= -505.875695287348
    CPU time for initialize scf      0.05 sec, wall time      0.05 sec
  HOMO = -0.214678022551812  LUMO = 201.293713708331
  mo_energy =
[-1.19348893e+02 -1.21660569e+01 -6.59969518e+00 -6.59969518e+00
 -6.59969518e+00 -1.14254657e+00 -2.14678023e-01 -2.14678023e-01
 -2.14678023e-01  2.01293714e+02  2.53030214e+03]
E1 = -705.5501578632071  E_coul = 199.67446257585874
cycle= 1 E= -505.875695287348  delta_E= -2.84e-13  |g|= 1.53e-12  |ddm|= 1.28e-12
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -705.5501578632071  E_coul = 199.67446257585874
  HOMO = -0.214678022551803  LUMO = 201.293713708334
  mo_energy =
[-1.19348893e+02 -1.21660569e+01 -6.59969518e+00 -6.59969518e+00
 -6.59969518e+00 -1.14254657e+00 -2.14678023e-01 -2.14678023e-01
 -2.14678023e-01  2.01293714e+02  2.53030214e+03]
E1 = -705.5501578632072  E_coul = 199.67446257585883
Extra cycle  E= -505.875695287348  delta_E= -5.68e-14  |g|= 8.8e-13  |ddm|= 6.5e-15
    CPU time for scf_cycle      0.12 sec, wall time      0.13 sec
exp = [1.83208604e+03 2.57899997e+02 5.42704175e+01 4.72790131e+00
 4.05184748e-01 8.61032491e+00 4.96480266e-01]
grad_E = [ 0.00027351  0.00090746 -0.00361841  0.00307107  0.19428142  0.01387178
  0.24087791]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((7, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.5820650117923668e+02,6.8360631861859034e+01,4.6647996209811691e+00,3.9711619128280629e-01,8.5710114329191196e+00,4.8957520672686806e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "5s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:41:54 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  1808.35060815        1
[INPUT] 0    0    [1    /1   ]  256.800723505        1
[INPUT] 0    0    [1    /1   ]  54.1186805362        1
[INPUT] 0    0    [1    /1   ]  4.72823432085        1
[INPUT] 0    0    [1    /1   ]  0.411294678313       1
[INPUT] 1    0    [1    /1   ]  8.62267833682        1
[INPUT] 1    0    [1    /1   ]  0.499860633316       1

nuclear repulsion = 0
number of shells = 7
number of NR pGTOs = 11
number of NR cGTOs = 11
basis = {'Ar': [[0, [1808.350608150711, 1.0]], [0, [256.80072350491076, 1.0]], [0, [54.11868053617901, 1.0]], [0, [4.728234320854998, 1.0]], [0, [0.4112946783125019, 1.0]], [1, [8.622678336816799, 1.0]], [1, [0.49986063331643066, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [1808.35060815]
bas 1, expnt(s) = [256.8007235]
bas 2, expnt(s) = [54.11868054]
bas 3, expnt(s) = [4.72823432]
bas 4, expnt(s) = [0.41129468]
bas 5, expnt(s) = [8.62267834]
bas 6, expnt(s) = [0.49986063]
CPU time:       121.46
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]
 [ 0  1  1  1  0 36 37  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.80835061e+03 7.00611081e+02 2.56800724e+02 1.62073573e+02
 5.41186805e+01 5.04110129e+01 4.72823432e+00 8.10101185e+00
 4.11294678e-01 1.29756715e+00 8.62267834e+00 4.31059404e+01
 4.99860633e-01 1.22615553e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.30098818212278
cond(S) = 10.100619474630589
E1 = -687.8873571608397  E_coul = 185.6143069548696
init E= -502.27305020597
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.663558223992796  LUMO = 198.867417694842
  mo_energy =
[-1.20728974e+02 -1.31948843e+01 -7.57090303e+00 -7.57090303e+00
 -7.57090303e+00 -1.64003168e+00 -6.63558224e-01 -6.63558224e-01
 -6.63558224e-01  1.98867418e+02  2.49916712e+03]
E1 = -705.9109702332046  E_coul = 200.03158427180392
cycle= 1 E= -505.879385961401  delta_E= -3.61  |g|= 0.259  |ddm|= 0.302
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.284183
diis-c [-0.08075985  1.        ]
  HOMO = -0.203395934509875  LUMO = 200.28940297946
  mo_energy =
[-1.19314921e+02 -1.21392117e+01 -6.57567350e+00 -6.57567350e+00
 -6.57567350e+00 -1.13261331e+00 -2.03395935e-01 -2.03395935e-01
 -2.03395935e-01  2.00289403e+02  2.50046124e+03]
E1 = -705.9021688583531  E_coul = 200.02267416060815
cycle= 2 E= -505.879494697745  delta_E= -0.000109  |g|= 0.00199  |ddm|= 0.00352
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00200505
diis-c [-3.06146718e-06 -3.45747891e-03  1.00345748e+00]
  HOMO = -0.203434169004664  LUMO = 200.287553479446
  mo_energy =
[-1.19317767e+02 -1.21394886e+01 -6.57607941e+00 -6.57607941e+00
 -6.57607941e+00 -1.13262942e+00 -2.03434169e-01 -2.03434169e-01
 -2.03434169e-01  2.00287553e+02  2.50045474e+03]
E1 = -705.9021046047022  E_coul = 200.02260989806183
cycle= 3 E= -505.87949470664  delta_E= -8.9e-09  |g|= 1.71e-05  |ddm|= 2.86e-05
    CPU time for cycle= 3      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=2.28155e-05
diis-c [-7.58718278e-12  4.79904586e-05 -1.31547563e-02  1.01310677e+00]
  HOMO = -0.203434322503164  LUMO = 200.287550068125
  mo_energy =
[-1.19317776e+02 -1.21394897e+01 -6.57608146e+00 -6.57608146e+00
 -6.57608146e+00 -1.13262946e+00 -2.03434323e-01 -2.03434323e-01
 -2.03434323e-01  2.00287550e+02  2.50045474e+03]
E1 = -705.902104283842  E_coul = 200.0226095772014
cycle= 4 E= -505.879494706641  delta_E= -2.84e-13  |g|= 2.35e-08  |ddm|= 1.95e-07
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -705.902104283842  E_coul = 200.0226095772014
  HOMO = -0.203434322323197  LUMO = 200.287550099442
  mo_energy =
[-1.19317776e+02 -1.21394897e+01 -6.57608146e+00 -6.57608146e+00
 -6.57608146e+00 -1.13262946e+00 -2.03434322e-01 -2.03434322e-01
 -2.03434322e-01  2.00287550e+02  2.50045474e+03]
E1 = -705.902104284492  E_coul = 200.0226095778512
Extra cycle  E= -505.879494706641  delta_E= -1.14e-13  |g|= 1.78e-10  |ddm|= 1.92e-10
    CPU time for scf_cycle      0.09 sec, wall time      0.10 sec
exp = [1.80835061e+03 2.56800724e+02 5.41186805e+01 4.72823432e+00
 4.11294678e-01 8.62267834e+00 4.99860633e-01]
E = -505.8794947066408
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((7, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.5820650117923668e+02,6.8360631861859034e+01,4.6647996209811691e+00,3.9711619128280629e-01,8.5710114329191196e+00,4.8957520672686806e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "5s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:41:54 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  1808.35060815        1
[INPUT] 0    0    [1    /1   ]  256.800723505        1
[INPUT] 0    0    [1    /1   ]  54.1186805362        1
[INPUT] 0    0    [1    /1   ]  4.72823432085        1
[INPUT] 0    0    [1    /1   ]  0.411294678313       1
[INPUT] 1    0    [1    /1   ]  8.62267833682        1
[INPUT] 1    0    [1    /1   ]  0.499860633316       1

nuclear repulsion = 0
number of shells = 7
number of NR pGTOs = 11
number of NR cGTOs = 11
basis = {'Ar': [[0, [1808.350608150711, 1.0]], [0, [256.80072350491076, 1.0]], [0, [54.11868053617901, 1.0]], [0, [4.728234320854998, 1.0]], [0, [0.4112946783125019, 1.0]], [1, [8.622678336816799, 1.0]], [1, [0.49986063331643066, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [1808.35060815]
bas 1, expnt(s) = [256.8007235]
bas 2, expnt(s) = [54.11868054]
bas 3, expnt(s) = [4.72823432]
bas 4, expnt(s) = [0.41129468]
bas 5, expnt(s) = [8.62267834]
bas 6, expnt(s) = [0.49986063]
CPU time:       122.08
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]
 [ 0  1  1  1  0 36 37  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.80835061e+03 7.00611081e+02 2.56800724e+02 1.62073573e+02
 5.41186805e+01 5.04110129e+01 4.72823432e+00 8.10101185e+00
 4.11294678e-01 1.29756715e+00 8.62267834e+00 4.31059404e+01
 4.99860633e-01 1.22615553e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.30098818212278
cond(S) = 10.100619474630589
E1 = -687.8873571608397  E_coul = 185.6143069548696
init E= -502.27305020597
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.663558223992796  LUMO = 198.867417694842
  mo_energy =
[-1.20728974e+02 -1.31948843e+01 -7.57090303e+00 -7.57090303e+00
 -7.57090303e+00 -1.64003168e+00 -6.63558224e-01 -6.63558224e-01
 -6.63558224e-01  1.98867418e+02  2.49916712e+03]
E1 = -705.9109702332046  E_coul = 200.03158427180392
cycle= 1 E= -505.879385961401  delta_E= -3.61  |g|= 0.259  |ddm|= 0.302
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.284183
diis-c [-0.08075985  1.        ]
  HOMO = -0.203395934509875  LUMO = 200.28940297946
  mo_energy =
[-1.19314921e+02 -1.21392117e+01 -6.57567350e+00 -6.57567350e+00
 -6.57567350e+00 -1.13261331e+00 -2.03395935e-01 -2.03395935e-01
 -2.03395935e-01  2.00289403e+02  2.50046124e+03]
E1 = -705.9021688583531  E_coul = 200.02267416060815
cycle= 2 E= -505.879494697745  delta_E= -0.000109  |g|= 0.00199  |ddm|= 0.00352
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00200505
diis-c [-3.06146718e-06 -3.45747891e-03  1.00345748e+00]
  HOMO = -0.203434169004664  LUMO = 200.287553479446
  mo_energy =
[-1.19317767e+02 -1.21394886e+01 -6.57607941e+00 -6.57607941e+00
 -6.57607941e+00 -1.13262942e+00 -2.03434169e-01 -2.03434169e-01
 -2.03434169e-01  2.00287553e+02  2.50045474e+03]
E1 = -705.9021046047022  E_coul = 200.02260989806183
cycle= 3 E= -505.87949470664  delta_E= -8.9e-09  |g|= 1.71e-05  |ddm|= 2.86e-05
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=2.28155e-05
diis-c [-7.58718278e-12  4.79904586e-05 -1.31547563e-02  1.01310677e+00]
  HOMO = -0.203434322503164  LUMO = 200.287550068125
  mo_energy =
[-1.19317776e+02 -1.21394897e+01 -6.57608146e+00 -6.57608146e+00
 -6.57608146e+00 -1.13262946e+00 -2.03434323e-01 -2.03434323e-01
 -2.03434323e-01  2.00287550e+02  2.50045474e+03]
E1 = -705.902104283842  E_coul = 200.0226095772014
cycle= 4 E= -505.879494706641  delta_E= -2.84e-13  |g|= 2.35e-08  |ddm|= 1.95e-07
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -705.902104283842  E_coul = 200.0226095772014
  HOMO = -0.203434322323197  LUMO = 200.287550099442
  mo_energy =
[-1.19317776e+02 -1.21394897e+01 -6.57608146e+00 -6.57608146e+00
 -6.57608146e+00 -1.13262946e+00 -2.03434322e-01 -2.03434322e-01
 -2.03434322e-01  2.00287550e+02  2.50045474e+03]
E1 = -705.902104284492  E_coul = 200.0226095778512
Extra cycle  E= -505.879494706641  delta_E= -1.14e-13  |g|= 1.78e-10  |ddm|= 1.92e-10
    CPU time for scf_cycle      0.10 sec, wall time      0.10 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 10.100619474630589
E1 = -705.902104284492  E_coul = 200.0226095778512
init E= -505.879494706641
    CPU time for initialize scf      0.06 sec, wall time      0.06 sec
  HOMO = -0.203434322322065  LUMO = 200.287550099667
  mo_energy =
[-1.19317776e+02 -1.21394897e+01 -6.57608146e+00 -6.57608146e+00
 -6.57608146e+00 -1.13262946e+00 -2.03434322e-01 -2.03434322e-01
 -2.03434322e-01  2.00287550e+02  2.50045474e+03]
E1 = -705.902104284496  E_coul = 200.02260957785546
cycle= 1 E= -505.879494706641  delta_E= 2.84e-13  |g|= 1.12e-12  |ddm|= 1.3e-12
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -705.902104284496  E_coul = 200.02260957785546
  HOMO = -0.203434322322058  LUMO = 200.287550099669
  mo_energy =
[-1.19317776e+02 -1.21394897e+01 -6.57608146e+00 -6.57608146e+00
 -6.57608146e+00 -1.13262946e+00 -2.03434322e-01 -2.03434322e-01
 -2.03434322e-01  2.00287550e+02  2.50045474e+03]
E1 = -705.9021042844963  E_coul = 200.02260957785558
Extra cycle  E= -505.879494706641  delta_E= -2.27e-13  |g|= 8.41e-13  |ddm|= 1.42e-14
    CPU time for scf_cycle      0.12 sec, wall time      0.13 sec
exp = [1.80835061e+03 2.56800724e+02 5.41186805e+01 4.72823432e+00
 4.11294678e-01 8.62267834e+00 4.99860633e-01]
grad_E = [ 2.30756032e-04  1.38542717e-03 -5.54635763e-03  4.69831233e-03
  2.97789995e-01  2.12394326e-02  3.69025472e-01]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((7, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.5820650117923668e+02,6.8360631861859034e+01,4.6647996209811691e+00,3.9711619128280629e-01,8.5710114329191196e+00,4.8957520672686806e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "5s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:41:58 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  1755.49186801        1
[INPUT] 0    0    [1    /1   ]  253.700730506        1
[INPUT] 0    0    [1    /1   ]  53.7667345106        1
[INPUT] 0    0    [1    /1   ]  4.72854139337        1
[INPUT] 0    0    [1    /1   ]  0.418608626033       1
[INPUT] 1    0    [1    /1   ]  8.63717942285        1
[INPUT] 1    0    [1    /1   ]  0.503811519772       1

nuclear repulsion = 0
number of shells = 7
number of NR pGTOs = 11
number of NR cGTOs = 11
basis = {'Ar': [[0, [1755.4918680111373, 1.0]], [0, [253.70073050555234, 1.0]], [0, [53.76673451062495, 1.0]], [0, [4.728541393366266, 1.0]], [0, [0.41860862603310856, 1.0]], [1, [8.637179422848401, 1.0]], [1, [0.5038115197722721, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [1755.49186801]
bas 1, expnt(s) = [253.70073051]
bas 2, expnt(s) = [53.76673451]
bas 3, expnt(s) = [4.72854139]
bas 4, expnt(s) = [0.41860863]
bas 5, expnt(s) = [8.63717942]
bas 6, expnt(s) = [0.50381152]
CPU time:       125.26
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]
 [ 0  1  1  1  0 36 37  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.75549187e+03 6.85194930e+02 2.53700731e+02 1.60603983e+02
 5.37667345e+01 5.01649368e+01 4.72854139e+00 8.10140644e+00
 4.18608626e-01 1.31483469e+00 8.63717942e+00 4.31965756e+01
 5.03811520e-01 1.23828186e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.293163707229926
cond(S) = 10.280106263448802
E1 = -688.2229663502499  E_coul = 185.89330595483364
init E= -502.329660395416
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.656337258541065  LUMO = 196.118298425777
  mo_energy =
[-1.20704775e+02 -1.31712302e+01 -7.55133758e+00 -7.55133758e+00
 -7.55133758e+00 -1.63506974e+00 -6.56337259e-01 -6.56337259e-01
 -6.56337259e-01  1.96118298e+02  2.43067300e+03]
E1 = -706.3216754207283  E_coul = 200.43408208276392
cycle= 1 E= -505.887593337964  delta_E= -3.56  |g|= 0.257  |ddm|= 0.306
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.278172
diis-c [-0.07737941  1.        ]
  HOMO = -0.190132113025388  LUMO = 197.547299553517
  mo_energy =
[-1.19282727e+02 -1.21080068e+01 -6.54838328e+00 -6.54838328e+00
 -6.54838328e+00 -1.12053095e+00 -1.90132113e-01 -1.90132113e-01
 -1.90132113e-01  1.97547300e+02  2.43197410e+03]
E1 = -706.3126036715228  E_coul = 200.42489834608202
cycle= 2 E= -505.887705325441  delta_E= -0.000112  |g|= 0.00203  |ddm|= 0.00363
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.0020373
diis-c [-3.19616508e-06 -3.52450618e-03  1.00352451e+00]
  HOMO = -0.190172257323216  LUMO = 197.545408141647
  mo_energy =
[-1.19285656e+02 -1.21082921e+01 -6.54880235e+00 -6.54880235e+00
 -6.54880235e+00 -1.12054787e+00 -1.90172257e-01 -1.90172257e-01
 -1.90172257e-01  1.97545408e+02  2.43196748e+03]
E1 = -706.3125367651788  E_coul = 200.4248314303847
cycle= 3 E= -505.887705334794  delta_E= -9.35e-09  |g|= 1.76e-05  |ddm|= 2.98e-05
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=2.34675e-05
diis-c [-7.96616549e-12  4.88923074e-05 -1.32470600e-02  1.01319817e+00]
  HOMO = -0.190172419313319  LUMO = 197.545404624151
  mo_energy =
[-1.19285665e+02 -1.21082932e+01 -6.54880447e+00 -6.54880447e+00
 -6.54880447e+00 -1.12054792e+00 -1.90172419e-01 -1.90172419e-01
 -1.90172419e-01  1.97545405e+02  2.43196747e+03]
E1 = -706.312536428579  E_coul = 200.4248310937844
cycle= 4 E= -505.887705334795  delta_E= -5.12e-13  |g|= 2.44e-08  |ddm|= 2.04e-07
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.312536428579  E_coul = 200.4248310937844
  HOMO = -0.190172419118187  LUMO = 197.54540465628
  mo_energy =
[-1.19285665e+02 -1.21082932e+01 -6.54880446e+00 -6.54880446e+00
 -6.54880446e+00 -1.12054792e+00 -1.90172419e-01 -1.90172419e-01
 -1.90172419e-01  1.97545405e+02  2.43196747e+03]
E1 = -706.3125364292571  E_coul = 200.42483109446275
Extra cycle  E= -505.887705334794  delta_E= 3.41e-13  |g|= 1.87e-10  |ddm|= 2.02e-10
    CPU time for scf_cycle      0.10 sec, wall time      0.10 sec
exp = [1.75549187e+03 2.53700731e+02 5.37667345e+01 4.72854139e+00
 4.18608626e-01 8.63717942e+00 5.03811520e-01]
E = -505.8877053347943
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((7, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.5820650117923668e+02,6.8360631861859034e+01,4.6647996209811691e+00,3.9711619128280629e-01,8.5710114329191196e+00,4.8957520672686806e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "5s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:41:58 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  1755.49186801        1
[INPUT] 0    0    [1    /1   ]  253.700730506        1
[INPUT] 0    0    [1    /1   ]  53.7667345106        1
[INPUT] 0    0    [1    /1   ]  4.72854139337        1
[INPUT] 0    0    [1    /1   ]  0.418608626033       1
[INPUT] 1    0    [1    /1   ]  8.63717942285        1
[INPUT] 1    0    [1    /1   ]  0.503811519772       1

nuclear repulsion = 0
number of shells = 7
number of NR pGTOs = 11
number of NR cGTOs = 11
basis = {'Ar': [[0, [1755.4918680111373, 1.0]], [0, [253.70073050555234, 1.0]], [0, [53.76673451062495, 1.0]], [0, [4.728541393366266, 1.0]], [0, [0.41860862603310856, 1.0]], [1, [8.637179422848401, 1.0]], [1, [0.5038115197722721, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [1755.49186801]
bas 1, expnt(s) = [253.70073051]
bas 2, expnt(s) = [53.76673451]
bas 3, expnt(s) = [4.72854139]
bas 4, expnt(s) = [0.41860863]
bas 5, expnt(s) = [8.63717942]
bas 6, expnt(s) = [0.50381152]
CPU time:       125.89
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]
 [ 0  1  1  1  0 36 37  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.75549187e+03 6.85194930e+02 2.53700731e+02 1.60603983e+02
 5.37667345e+01 5.01649368e+01 4.72854139e+00 8.10140644e+00
 4.18608626e-01 1.31483469e+00 8.63717942e+00 4.31965756e+01
 5.03811520e-01 1.23828186e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.293163707229926
cond(S) = 10.280106263448802
E1 = -688.2229663502499  E_coul = 185.89330595483364
init E= -502.329660395416
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.656337258541065  LUMO = 196.118298425777
  mo_energy =
[-1.20704775e+02 -1.31712302e+01 -7.55133758e+00 -7.55133758e+00
 -7.55133758e+00 -1.63506974e+00 -6.56337259e-01 -6.56337259e-01
 -6.56337259e-01  1.96118298e+02  2.43067300e+03]
E1 = -706.3216754207283  E_coul = 200.43408208276392
cycle= 1 E= -505.887593337964  delta_E= -3.56  |g|= 0.257  |ddm|= 0.306
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.278172
diis-c [-0.07737941  1.        ]
  HOMO = -0.190132113025388  LUMO = 197.547299553517
  mo_energy =
[-1.19282727e+02 -1.21080068e+01 -6.54838328e+00 -6.54838328e+00
 -6.54838328e+00 -1.12053095e+00 -1.90132113e-01 -1.90132113e-01
 -1.90132113e-01  1.97547300e+02  2.43197410e+03]
E1 = -706.3126036715228  E_coul = 200.42489834608202
cycle= 2 E= -505.887705325441  delta_E= -0.000112  |g|= 0.00203  |ddm|= 0.00363
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.0020373
diis-c [-3.19616508e-06 -3.52450618e-03  1.00352451e+00]
  HOMO = -0.190172257323216  LUMO = 197.545408141647
  mo_energy =
[-1.19285656e+02 -1.21082921e+01 -6.54880235e+00 -6.54880235e+00
 -6.54880235e+00 -1.12054787e+00 -1.90172257e-01 -1.90172257e-01
 -1.90172257e-01  1.97545408e+02  2.43196748e+03]
E1 = -706.3125367651788  E_coul = 200.4248314303847
cycle= 3 E= -505.887705334794  delta_E= -9.35e-09  |g|= 1.76e-05  |ddm|= 2.98e-05
    CPU time for cycle= 3      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=2.34675e-05
diis-c [-7.96616549e-12  4.88923074e-05 -1.32470600e-02  1.01319817e+00]
  HOMO = -0.190172419313319  LUMO = 197.545404624151
  mo_energy =
[-1.19285665e+02 -1.21082932e+01 -6.54880447e+00 -6.54880447e+00
 -6.54880447e+00 -1.12054792e+00 -1.90172419e-01 -1.90172419e-01
 -1.90172419e-01  1.97545405e+02  2.43196747e+03]
E1 = -706.312536428579  E_coul = 200.4248310937844
cycle= 4 E= -505.887705334795  delta_E= -5.12e-13  |g|= 2.44e-08  |ddm|= 2.04e-07
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.312536428579  E_coul = 200.4248310937844
  HOMO = -0.190172419118187  LUMO = 197.54540465628
  mo_energy =
[-1.19285665e+02 -1.21082932e+01 -6.54880446e+00 -6.54880446e+00
 -6.54880446e+00 -1.12054792e+00 -1.90172419e-01 -1.90172419e-01
 -1.90172419e-01  1.97545405e+02  2.43196747e+03]
E1 = -706.3125364292571  E_coul = 200.42483109446275
Extra cycle  E= -505.887705334794  delta_E= 3.41e-13  |g|= 1.87e-10  |ddm|= 2.02e-10
    CPU time for scf_cycle      0.10 sec, wall time      0.10 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 10.280106263448802
E1 = -706.3125364292571  E_coul = 200.42483109446275
init E= -505.887705334794
    CPU time for initialize scf      0.05 sec, wall time      0.05 sec
  HOMO = -0.190172419116966  LUMO = 197.545404656513
  mo_energy =
[-1.19285665e+02 -1.21082932e+01 -6.54880446e+00 -6.54880446e+00
 -6.54880446e+00 -1.12054792e+00 -1.90172419e-01 -1.90172419e-01
 -1.90172419e-01  1.97545405e+02  2.43196747e+03]
E1 = -706.3125364292622  E_coul = 200.4248310944674
cycle= 1 E= -505.887705334795  delta_E= -4.55e-13  |g|= 2.35e-12  |ddm|= 1.37e-12
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -706.3125364292622  E_coul = 200.4248310944674
  HOMO = -0.190172419116955  LUMO = 197.545404656515
  mo_energy =
[-1.19285665e+02 -1.21082932e+01 -6.54880446e+00 -6.54880446e+00
 -6.54880446e+00 -1.12054792e+00 -1.90172419e-01 -1.90172419e-01
 -1.90172419e-01  1.97545405e+02  2.43196747e+03]
E1 = -706.3125364292617  E_coul = 200.42483109446735
Extra cycle  E= -505.887705334794  delta_E= 3.41e-13  |g|= 3.52e-13  |ddm|= 9.11e-15
    CPU time for scf_cycle      0.12 sec, wall time      0.13 sec
exp = [1.75549187e+03 2.53700731e+02 5.37667345e+01 4.72854139e+00
 4.18608626e-01 8.63717942e+00 5.03811520e-01]
grad_E = [ 1.50195603e-04  1.96348721e-03 -7.75371326e-03  6.48116195e-03
  4.18949183e-01  2.96702245e-02  5.17299844e-01]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((7, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.5820650117923668e+02,6.8360631861859034e+01,4.6647996209811691e+00,3.9711619128280629e-01,8.5710114329191196e+00,4.8957520672686806e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "5s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:42:02 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  1666.11038301        1
[INPUT] 0    0    [1    /1   ]  247.421877298        1
[INPUT] 0    0    [1    /1   ]  53.1311794171        1
[INPUT] 0    0    [1    /1   ]  4.72860618498        1
[INPUT] 0    0    [1    /1   ]  0.42228706073        1
[INPUT] 1    0    [1    /1   ]  8.64428155839        1
[INPUT] 1    0    [1    /1   ]  0.505681237706       1

nuclear repulsion = 0
number of shells = 7
number of NR pGTOs = 11
number of NR cGTOs = 11
basis = {'Ar': [[0, [1666.1103830112331, 1.0]], [0, [247.42187729756148, 1.0]], [0, [53.13117941713107, 1.0]], [0, [4.728606184977756, 1.0]], [0, [0.4222870607299964, 1.0]], [1, [8.64428155839241, 1.0]], [1, [0.5056812377055703, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [1666.11038301]
bas 1, expnt(s) = [247.4218773]
bas 2, expnt(s) = [53.13117942]
bas 3, expnt(s) = [4.72860618]
bas 4, expnt(s) = [0.42228706]
bas 5, expnt(s) = [8.64428156]
bas 6, expnt(s) = [0.50568124]
CPU time:       129.22
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]
 [ 0  1  1  1  0 36 37  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.66611038e+03 6.58859561e+02 2.47421877e+02 1.57613567e+02
 5.31311794e+01 4.97195417e+01 4.72860618e+00 8.10148969e+00
 4.22287061e-01 1.32349058e+00 8.64428156e+00 4.32409795e+01
 5.05681238e-01 1.24402882e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.289331323059006
cond(S) = 10.613953347279725
E1 = -688.4134278002297  E_coul = 186.02239304808148
init E= -502.391034752148
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.652882715600583  LUMO = 190.679520477107
  mo_energy =
[-1.20700407e+02 -1.31588075e+01 -7.54229625e+00 -7.54229625e+00
 -7.54229625e+00 -1.63238334e+00 -6.52882716e-01 -6.52882716e-01
 -6.52882716e-01  1.90679520e+02  2.31193097e+03]
E1 = -706.5155191274273  E_coul = 200.6147443382698
cycle= 1 E= -505.900774789157  delta_E= -3.51  |g|= 0.257  |ddm|= 0.308
    CPU time for cycle= 1      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.271758
diis-c [-0.07385252  1.        ]
  HOMO = -0.183798722860194  LUMO = 192.10918102076
  mo_energy =
[-1.19276599e+02 -1.20924538e+01 -6.53605731e+00 -6.53605731e+00
 -6.53605731e+00 -1.11445314e+00 -1.83798723e-01 -1.83798723e-01
 -1.83798723e-01  1.92109181e+02  2.31323400e+03]
E1 = -706.5059876540884  E_coul = 200.60509478272533
cycle= 2 E= -505.900892871363  delta_E= -0.000118  |g|= 0.0021  |ddm|= 0.00382
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00210856
diis-c [-3.48071415e-06 -3.62857209e-03  1.00362857e+00]
  HOMO = -0.183841592031172  LUMO = 192.10723629221
  mo_energy =
[-1.19279662e+02 -1.20927546e+01 -6.53650118e+00 -6.53650118e+00
 -6.53650118e+00 -1.11447113e+00 -1.83841592e-01 -1.83841592e-01
 -1.83841592e-01  1.92107236e+02  2.31322722e+03]
E1 = -706.5059157846348  E_coul = 200.60502290294298
cycle= 3 E= -505.900892881692  delta_E= -1.03e-08  |g|= 1.86e-05  |ddm|= 3.2e-05
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=2.48805e-05
diis-c [-8.57857570e-12  5.05843523e-05 -1.34687381e-02  1.01341815e+00]
  HOMO = -0.18384176762701  LUMO = 192.107232584778
  mo_energy =
[-1.19279673e+02 -1.20927559e+01 -6.53650346e+00 -6.53650346e+00
 -6.53650346e+00 -1.11447117e+00 -1.83841768e-01 -1.83841768e-01
 -1.83841768e-01  1.92107233e+02  2.31322721e+03]
E1 = -706.5059154138427  E_coul = 200.60502253215014
cycle= 4 E= -505.900892881693  delta_E= -7.39e-13  |g|= 2.62e-08  |ddm|= 2.23e-07
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.5059154138427  E_coul = 200.60502253215014
  HOMO = -0.183841767403276  LUMO = 192.107232618438
  mo_energy =
[-1.19279672e+02 -1.20927559e+01 -6.53650345e+00 -6.53650345e+00
 -6.53650345e+00 -1.11447117e+00 -1.83841767e-01 -1.83841767e-01
 -1.83841767e-01  1.92107233e+02  2.31322721e+03]
E1 = -706.5059154145877  E_coul = 200.60502253289508
Extra cycle  E= -505.900892881693  delta_E= -5.68e-14  |g|= 2.02e-10  |ddm|= 2.23e-10
    CPU time for scf_cycle      0.10 sec, wall time      0.11 sec
exp = [1.66611038e+03 2.47421877e+02 5.31311794e+01 4.72860618e+00
 4.22287061e-01 8.64428156e+00 5.05681238e-01]
E = -505.9008928816926
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((7, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.5820650117923668e+02,6.8360631861859034e+01,4.6647996209811691e+00,3.9711619128280629e-01,8.5710114329191196e+00,4.8957520672686806e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "5s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:42:02 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  1666.11038301        1
[INPUT] 0    0    [1    /1   ]  247.421877298        1
[INPUT] 0    0    [1    /1   ]  53.1311794171        1
[INPUT] 0    0    [1    /1   ]  4.72860618498        1
[INPUT] 0    0    [1    /1   ]  0.42228706073        1
[INPUT] 1    0    [1    /1   ]  8.64428155839        1
[INPUT] 1    0    [1    /1   ]  0.505681237706       1

nuclear repulsion = 0
number of shells = 7
number of NR pGTOs = 11
number of NR cGTOs = 11
basis = {'Ar': [[0, [1666.1103830112331, 1.0]], [0, [247.42187729756148, 1.0]], [0, [53.13117941713107, 1.0]], [0, [4.728606184977756, 1.0]], [0, [0.4222870607299964, 1.0]], [1, [8.64428155839241, 1.0]], [1, [0.5056812377055703, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [1666.11038301]
bas 1, expnt(s) = [247.4218773]
bas 2, expnt(s) = [53.13117942]
bas 3, expnt(s) = [4.72860618]
bas 4, expnt(s) = [0.42228706]
bas 5, expnt(s) = [8.64428156]
bas 6, expnt(s) = [0.50568124]
CPU time:       129.86
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]
 [ 0  1  1  1  0 36 37  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.66611038e+03 6.58859561e+02 2.47421877e+02 1.57613567e+02
 5.31311794e+01 4.97195417e+01 4.72860618e+00 8.10148969e+00
 4.22287061e-01 1.32349058e+00 8.64428156e+00 4.32409795e+01
 5.05681238e-01 1.24402882e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.289331323059006
cond(S) = 10.613953347279725
E1 = -688.4134278002297  E_coul = 186.02239304808148
init E= -502.391034752148
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.652882715600583  LUMO = 190.679520477107
  mo_energy =
[-1.20700407e+02 -1.31588075e+01 -7.54229625e+00 -7.54229625e+00
 -7.54229625e+00 -1.63238334e+00 -6.52882716e-01 -6.52882716e-01
 -6.52882716e-01  1.90679520e+02  2.31193097e+03]
E1 = -706.5155191274273  E_coul = 200.6147443382698
cycle= 1 E= -505.900774789157  delta_E= -3.51  |g|= 0.257  |ddm|= 0.308
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.271758
diis-c [-0.07385252  1.        ]
  HOMO = -0.183798722860194  LUMO = 192.10918102076
  mo_energy =
[-1.19276599e+02 -1.20924538e+01 -6.53605731e+00 -6.53605731e+00
 -6.53605731e+00 -1.11445314e+00 -1.83798723e-01 -1.83798723e-01
 -1.83798723e-01  1.92109181e+02  2.31323400e+03]
E1 = -706.5059876540884  E_coul = 200.60509478272533
cycle= 2 E= -505.900892871363  delta_E= -0.000118  |g|= 0.0021  |ddm|= 0.00382
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00210856
diis-c [-3.48071415e-06 -3.62857209e-03  1.00362857e+00]
  HOMO = -0.183841592031172  LUMO = 192.10723629221
  mo_energy =
[-1.19279662e+02 -1.20927546e+01 -6.53650118e+00 -6.53650118e+00
 -6.53650118e+00 -1.11447113e+00 -1.83841592e-01 -1.83841592e-01
 -1.83841592e-01  1.92107236e+02  2.31322722e+03]
E1 = -706.5059157846348  E_coul = 200.60502290294298
cycle= 3 E= -505.900892881692  delta_E= -1.03e-08  |g|= 1.86e-05  |ddm|= 3.2e-05
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=2.48805e-05
diis-c [-8.57857570e-12  5.05843523e-05 -1.34687381e-02  1.01341815e+00]
  HOMO = -0.18384176762701  LUMO = 192.107232584778
  mo_energy =
[-1.19279673e+02 -1.20927559e+01 -6.53650346e+00 -6.53650346e+00
 -6.53650346e+00 -1.11447117e+00 -1.83841768e-01 -1.83841768e-01
 -1.83841768e-01  1.92107233e+02  2.31322721e+03]
E1 = -706.5059154138427  E_coul = 200.60502253215014
cycle= 4 E= -505.900892881693  delta_E= -7.39e-13  |g|= 2.62e-08  |ddm|= 2.23e-07
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.5059154138427  E_coul = 200.60502253215014
  HOMO = -0.183841767403276  LUMO = 192.107232618438
  mo_energy =
[-1.19279672e+02 -1.20927559e+01 -6.53650345e+00 -6.53650345e+00
 -6.53650345e+00 -1.11447117e+00 -1.83841767e-01 -1.83841767e-01
 -1.83841767e-01  1.92107233e+02  2.31322721e+03]
E1 = -706.5059154145877  E_coul = 200.60502253289508
Extra cycle  E= -505.900892881693  delta_E= -5.68e-14  |g|= 2.02e-10  |ddm|= 2.23e-10
    CPU time for scf_cycle      0.10 sec, wall time      0.10 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 10.613953347279725
E1 = -706.5059154145877  E_coul = 200.60502253289508
init E= -505.900892881693
    CPU time for initialize scf      0.05 sec, wall time      0.05 sec
  HOMO = -0.18384176740185  LUMO = 192.107232618685
  mo_energy =
[-1.19279672e+02 -1.20927559e+01 -6.53650345e+00 -6.53650345e+00
 -6.53650345e+00 -1.11447117e+00 -1.83841767e-01 -1.83841767e-01
 -1.83841767e-01  1.92107233e+02  2.31322721e+03]
E1 = -706.5059154145923  E_coul = 200.60502253290008
cycle= 1 E= -505.900892881692  delta_E= 3.41e-13  |g|= 2.65e-12  |ddm|= 1.54e-12
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -706.5059154145923  E_coul = 200.60502253290008
  HOMO = -0.183841767401844  LUMO = 192.107232618686
  mo_energy =
[-1.19279672e+02 -1.20927559e+01 -6.53650345e+00 -6.53650345e+00
 -6.53650345e+00 -1.11447117e+00 -1.83841767e-01 -1.83841767e-01
 -1.83841767e-01  1.92107233e+02  2.31322721e+03]
E1 = -706.5059154145929  E_coul = 200.6050225329003
Extra cycle  E= -505.900892881693  delta_E= -3.41e-13  |g|= 3.83e-13  |ddm|= 1.44e-14
    CPU time for scf_cycle      0.12 sec, wall time      0.13 sec
exp = [1.66611038e+03 2.47421877e+02 5.31311794e+01 4.72860618e+00
 4.22287061e-01 8.64428156e+00 5.05681238e-01]
grad_E = [ 2.45586059e-05  2.27759437e-03 -8.62150911e-03  6.96862922e-03
  4.80939326e-01  3.32841129e-02  5.86786654e-01]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((7, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.5820650117923668e+02,6.8360631861859034e+01,4.6647996209811691e+00,3.9711619128280629e-01,8.5710114329191196e+00,4.8957520672686806e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "5s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:42:06 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  1583.37087223        1
[INPUT] 0    0    [1    /1   ]  240.143963045        1
[INPUT] 0    0    [1    /1   ]  52.4557594415        1
[INPUT] 0    0    [1    /1   ]  4.72846523233        1
[INPUT] 0    0    [1    /1   ]  0.414874420146       1
[INPUT] 1    0    [1    /1   ]  8.63064778898        1
[INPUT] 1    0    [1    /1   ]  0.501750666446       1

nuclear repulsion = 0
number of shells = 7
number of NR pGTOs = 11
number of NR cGTOs = 11
basis = {'Ar': [[0, [1583.370872227583, 1.0]], [0, [240.1439630450087, 1.0]], [0, [52.4557594414967, 1.0]], [0, [4.7284652323258625, 1.0]], [0, [0.41487442014639914, 1.0]], [1, [8.63064778898387, 1.0]], [1, [0.5017506664456535, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [1583.37087223]
bas 1, expnt(s) = [240.14396305]
bas 2, expnt(s) = [52.45575944]
bas 3, expnt(s) = [4.72846523]
bas 4, expnt(s) = [0.41487442]
bas 5, expnt(s) = [8.63064779]
bas 6, expnt(s) = [0.50175067]
CPU time:       133.45
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]
 [ 0  1  1  1  0 36 37  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.58337087e+03 6.34164625e+02 2.40143963e+02 1.54123470e+02
 5.24557594e+01 4.92447468e+01 4.72846523e+00 8.10130857e+00
 4.14874420e-01 1.30602809e+00 8.63064779e+00 4.31557466e+01
 5.01750666e-01 1.23195357e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.29775936844096
cond(S) = 10.962615961596963
E1 = -688.1580014672737  E_coul = 185.7460106669215
init E= -502.411990800352
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.659820514432821  LUMO = 184.470564330539
  mo_energy =
[-1.20738695e+02 -1.31791036e+01 -7.56172929e+00 -7.56172929e+00
 -7.56172929e+00 -1.63687218e+00 -6.59820514e-01 -6.59820514e-01
 -6.59820514e-01  1.84470564e+02  2.19768151e+03]
E1 = -706.1017027365716  E_coul = 200.18769627420298
cycle= 1 E= -505.914006462369  delta_E= -3.5  |g|= 0.26  |ddm|= 0.305
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.270467
diis-c [-0.07315231  1.        ]
  HOMO = -0.197252404647014  LUMO = 185.88648188089
  mo_energy =
[-1.19328262e+02 -1.21220808e+01 -6.56484353e+00 -6.56484353e+00
 -6.56484353e+00 -1.12658674e+00 -1.97252405e-01 -1.97252405e-01
 -1.97252405e-01  1.85886482e+02  2.19897291e+03]
E1 = -706.0917198128759  E_coul = 200.17758854208918
cycle= 2 E= -505.914131270787  delta_E= -0.000125  |g|= 0.00219  |ddm|= 0.00403
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00219641
diis-c [-3.83014767e-06 -3.70006800e-03  1.00370007e+00]
  HOMO = -0.197297212270984  LUMO = 185.884506807334
  mo_energy =
[-1.19331450e+02 -1.21223986e+01 -6.56531500e+00 -6.56531500e+00
 -6.56531500e+00 -1.12660530e+00 -1.97297212e-01 -1.97297212e-01
 -1.97297212e-01  1.85884507e+02  2.19896605e+03]
E1 = -706.0916424308164  E_coul = 200.1775111484601
cycle= 3 E= -505.914131282356  delta_E= -1.16e-08  |g|= 2e-05  |ddm|= 3.46e-05
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=2.66865e-05
diis-c [-9.10463075e-12  5.24233273e-05 -1.37851597e-02  1.01373274e+00]
  HOMO = -0.197297400754352  LUMO = 185.884502849871
  mo_energy =
[-1.19331460e+02 -1.21224000e+01 -6.56531749e+00 -6.56531749e+00
 -6.56531749e+00 -1.12660535e+00 -1.97297401e-01 -1.97297401e-01
 -1.97297401e-01  1.85884503e+02  2.19896605e+03]
E1 = -706.0916420139384  E_coul = 200.17751073158132
cycle= 4 E= -505.914131282357  delta_E= -8.53e-13  |g|= 2.8e-08  |ddm|= 2.49e-07
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.0916420139384  E_coul = 200.17751073158132
  HOMO = -0.197297400497694  LUMO = 185.884502885265
  mo_energy =
[-1.19331460e+02 -1.21224000e+01 -6.56531749e+00 -6.56531749e+00
 -6.56531749e+00 -1.12660535e+00 -1.97297400e-01 -1.97297400e-01
 -1.97297400e-01  1.85884503e+02  2.19896605e+03]
E1 = -706.0916420147771  E_coul = 200.1775107324197
Extra cycle  E= -505.914131282357  delta_E= -2.84e-13  |g|= 2.18e-10  |ddm|= 2.53e-10
    CPU time for scf_cycle      0.10 sec, wall time      0.11 sec
exp = [1.58337087e+03 2.40143963e+02 5.24557594e+01 4.72846523e+00
 4.14874420e-01 8.63064779e+00 5.01750666e-01]
E = -505.9141312823574
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((7, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.5820650117923668e+02,6.8360631861859034e+01,4.6647996209811691e+00,3.9711619128280629e-01,8.5710114329191196e+00,4.8957520672686806e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "5s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:42:07 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  1583.37087223        1
[INPUT] 0    0    [1    /1   ]  240.143963045        1
[INPUT] 0    0    [1    /1   ]  52.4557594415        1
[INPUT] 0    0    [1    /1   ]  4.72846523233        1
[INPUT] 0    0    [1    /1   ]  0.414874420146       1
[INPUT] 1    0    [1    /1   ]  8.63064778898        1
[INPUT] 1    0    [1    /1   ]  0.501750666446       1

nuclear repulsion = 0
number of shells = 7
number of NR pGTOs = 11
number of NR cGTOs = 11
basis = {'Ar': [[0, [1583.370872227583, 1.0]], [0, [240.1439630450087, 1.0]], [0, [52.4557594414967, 1.0]], [0, [4.7284652323258625, 1.0]], [0, [0.41487442014639914, 1.0]], [1, [8.63064778898387, 1.0]], [1, [0.5017506664456535, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [1583.37087223]
bas 1, expnt(s) = [240.14396305]
bas 2, expnt(s) = [52.45575944]
bas 3, expnt(s) = [4.72846523]
bas 4, expnt(s) = [0.41487442]
bas 5, expnt(s) = [8.63064779]
bas 6, expnt(s) = [0.50175067]
CPU time:       134.09
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]
 [ 0  1  1  1  0 36 37  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.58337087e+03 6.34164625e+02 2.40143963e+02 1.54123470e+02
 5.24557594e+01 4.92447468e+01 4.72846523e+00 8.10130857e+00
 4.14874420e-01 1.30602809e+00 8.63064779e+00 4.31557466e+01
 5.01750666e-01 1.23195357e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.29775936844096
cond(S) = 10.962615961596963
E1 = -688.1580014672737  E_coul = 185.7460106669215
init E= -502.411990800352
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.659820514432821  LUMO = 184.470564330539
  mo_energy =
[-1.20738695e+02 -1.31791036e+01 -7.56172929e+00 -7.56172929e+00
 -7.56172929e+00 -1.63687218e+00 -6.59820514e-01 -6.59820514e-01
 -6.59820514e-01  1.84470564e+02  2.19768151e+03]
E1 = -706.1017027365716  E_coul = 200.18769627420298
cycle= 1 E= -505.914006462369  delta_E= -3.5  |g|= 0.26  |ddm|= 0.305
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.270467
diis-c [-0.07315231  1.        ]
  HOMO = -0.197252404647014  LUMO = 185.88648188089
  mo_energy =
[-1.19328262e+02 -1.21220808e+01 -6.56484353e+00 -6.56484353e+00
 -6.56484353e+00 -1.12658674e+00 -1.97252405e-01 -1.97252405e-01
 -1.97252405e-01  1.85886482e+02  2.19897291e+03]
E1 = -706.0917198128759  E_coul = 200.17758854208918
cycle= 2 E= -505.914131270787  delta_E= -0.000125  |g|= 0.00219  |ddm|= 0.00403
    CPU time for cycle= 2      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.00219641
diis-c [-3.83014767e-06 -3.70006800e-03  1.00370007e+00]
  HOMO = -0.197297212270984  LUMO = 185.884506807334
  mo_energy =
[-1.19331450e+02 -1.21223986e+01 -6.56531500e+00 -6.56531500e+00
 -6.56531500e+00 -1.12660530e+00 -1.97297212e-01 -1.97297212e-01
 -1.97297212e-01  1.85884507e+02  2.19896605e+03]
E1 = -706.0916424308164  E_coul = 200.1775111484601
cycle= 3 E= -505.914131282356  delta_E= -1.16e-08  |g|= 2e-05  |ddm|= 3.46e-05
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=2.66865e-05
diis-c [-9.10463075e-12  5.24233273e-05 -1.37851597e-02  1.01373274e+00]
  HOMO = -0.197297400754352  LUMO = 185.884502849871
  mo_energy =
[-1.19331460e+02 -1.21224000e+01 -6.56531749e+00 -6.56531749e+00
 -6.56531749e+00 -1.12660535e+00 -1.97297401e-01 -1.97297401e-01
 -1.97297401e-01  1.85884503e+02  2.19896605e+03]
E1 = -706.0916420139384  E_coul = 200.17751073158132
cycle= 4 E= -505.914131282357  delta_E= -8.53e-13  |g|= 2.8e-08  |ddm|= 2.49e-07
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.0916420139384  E_coul = 200.17751073158132
  HOMO = -0.197297400497694  LUMO = 185.884502885265
  mo_energy =
[-1.19331460e+02 -1.21224000e+01 -6.56531749e+00 -6.56531749e+00
 -6.56531749e+00 -1.12660535e+00 -1.97297400e-01 -1.97297400e-01
 -1.97297400e-01  1.85884503e+02  2.19896605e+03]
E1 = -706.0916420147771  E_coul = 200.1775107324197
Extra cycle  E= -505.914131282357  delta_E= -2.84e-13  |g|= 2.18e-10  |ddm|= 2.53e-10
    CPU time for scf_cycle      0.10 sec, wall time      0.10 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 10.962615961596963
E1 = -706.0916420147771  E_coul = 200.1775107324197
init E= -505.914131282357
    CPU time for initialize scf      0.06 sec, wall time      0.06 sec
  HOMO = -0.197297400495987  LUMO = 185.884502885527
  mo_energy =
[-1.19331460e+02 -1.21224000e+01 -6.56531749e+00 -6.56531749e+00
 -6.56531749e+00 -1.12660535e+00 -1.97297400e-01 -1.97297400e-01
 -1.97297400e-01  1.85884503e+02  2.19896605e+03]
E1 = -706.0916420147835  E_coul = 200.17751073242582
cycle= 1 E= -505.914131282358  delta_E= -2.27e-13  |g|= 2.64e-12  |ddm|= 1.8e-12
    CPU time for cycle= 1      0.01 sec, wall time      0.02 sec
E1 = -706.0916420147835  E_coul = 200.17751073242582
  HOMO = -0.197297400495969  LUMO = 185.884502885528
  mo_energy =
[-1.19331460e+02 -1.21224000e+01 -6.56531749e+00 -6.56531749e+00
 -6.56531749e+00 -1.12660535e+00 -1.97297400e-01 -1.97297400e-01
 -1.97297400e-01  1.85884503e+02  2.19896605e+03]
E1 = -706.0916420147837  E_coul = 200.177510732426
Extra cycle  E= -505.914131282358  delta_E= -1.14e-13  |g|= 5.29e-13  |ddm|= 2.22e-14
    CPU time for scf_cycle      0.13 sec, wall time      0.13 sec
exp = [1.58337087e+03 2.40143963e+02 5.24557594e+01 4.72846523e+00
 4.14874420e-01 8.63064779e+00 5.01750666e-01]
grad_E = [-6.54803939e-05  1.61369517e-03 -5.95625388e-03  4.69939826e-03
  3.66592616e-01  2.43172617e-02  4.38329416e-01]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((7, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.5820650117923668e+02,6.8360631861859034e+01,4.6647996209811691e+00,3.9711619128280629e-01,8.5710114329191196e+00,4.8957520672686806e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "5s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:42:10 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  1559.05350355        1
[INPUT] 0    0    [1    /1   ]  236.507796013        1
[INPUT] 0    0    [1    /1   ]  52.1673567946        1
[INPUT] 0    0    [1    /1   ]  4.7285078102         1
[INPUT] 0    0    [1    /1   ]  0.399148218949       1
[INPUT] 1    0    [1    /1   ]  8.6026665745         1
[INPUT] 1    0    [1    /1   ]  0.493720679436       1

nuclear repulsion = 0
number of shells = 7
number of NR pGTOs = 11
number of NR cGTOs = 11
basis = {'Ar': [[0, [1559.0535035498071, 1.0]], [0, [236.50779601329305, 1.0]], [0, [52.16735679464224, 1.0]], [0, [4.728507810202644, 1.0]], [0, [0.3991482189492914, 1.0]], [1, [8.602666574495258, 1.0]], [1, [0.4937206794363603, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [1559.05350355]
bas 1, expnt(s) = [236.50779601]
bas 2, expnt(s) = [52.16735679]
bas 3, expnt(s) = [4.72850781]
bas 4, expnt(s) = [0.39914822]
bas 5, expnt(s) = [8.60266657]
bas 6, expnt(s) = [0.49372068]
CPU time:       137.31
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]
 [ 0  1  1  1  0 36 37  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.55905350e+03 6.26845899e+02 2.36507796e+02 1.52369878e+02
 5.21673568e+01 4.90415456e+01 4.72850781e+00 8.10136328e+00
 3.99148219e-01 1.26871966e+00 8.60266657e+00 4.29809248e+01
 4.93720679e-01 1.20735793e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.312817580065524
cond(S) = 11.076573388389555
E1 = -687.5189482692795  E_coul = 185.14544003960447
init E= -502.373508229675
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.675329185183096  LUMO = 181.382088177567
  mo_energy =
[-1.20807625e+02 -1.32267108e+01 -7.60411248e+00 -7.60411248e+00
 -7.60411248e+00 -1.64623290e+00 -6.75329185e-01 -6.75329185e-01
 -6.75329185e-01  1.81382088e+02  2.15905607e+03]
E1 = -705.2474313024396  E_coul = 199.32582901743282
cycle= 1 E= -505.921602285007  delta_E= -3.55  |g|= 0.263  |ddm|= 0.299
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.275291
diis-c [-0.07578504  1.        ]
  HOMO = -0.224681693552301  LUMO = 182.778203612614
  mo_energy =
[-1.19417744e+02 -1.21855671e+01 -6.62333254e+00 -6.62333254e+00
 -6.62333254e+00 -1.15059567e+00 -2.24681694e-01 -2.24681694e-01
 -2.24681694e-01  1.82778204e+02  2.16032853e+03]
E1 = -705.2373251550692  E_coul = 199.31559526032228
cycle= 2 E= -505.921729894747  delta_E= -0.000128  |g|= 0.00224  |ddm|= 0.00409
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.0022419
diis-c [-4.00522345e-06 -3.68392231e-03  1.00368392e+00]
  HOMO = -0.224726064166333  LUMO = 182.776244982953
  mo_energy =
[-1.19420957e+02 -1.21858916e+01 -6.62381536e+00 -6.62381536e+00
 -6.62381536e+00 -1.15061378e+00 -2.24726064e-01 -2.24726064e-01
 -2.24726064e-01  1.82776245e+02  2.16032174e+03]
E1 = -705.2372456084595  E_coul = 199.3155157014909
cycle= 3 E= -505.921729906969  delta_E= -1.22e-08  |g|= 2.09e-05  |ddm|= 3.57e-05
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=2.76989e-05
diis-c [-9.10482711e-12  5.32163201e-05 -1.40009110e-02  1.01394769e+00]
  HOMO = -0.22472625473797  LUMO = 182.776240888864
  mo_energy =
[-1.19420968e+02 -1.21858930e+01 -6.62381799e+00 -6.62381799e+00
 -6.62381799e+00 -1.15061383e+00 -2.24726255e-01 -2.24726255e-01
 -2.24726255e-01  1.82776241e+02  2.16032173e+03]
E1 = -705.2372451647393  E_coul = 199.31551525776973
cycle= 4 E= -505.92172990697  delta_E= -9.66e-13  |g|= 2.85e-08  |ddm|= 2.64e-07
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -705.2372451647393  E_coul = 199.31551525776973
  HOMO = -0.224726254471862  LUMO = 182.776240924895
  mo_energy =
[-1.19420968e+02 -1.21858930e+01 -6.62381799e+00 -6.62381799e+00
 -6.62381799e+00 -1.15061383e+00 -2.24726254e-01 -2.24726254e-01
 -2.24726254e-01  1.82776241e+02  2.16032173e+03]
E1 = -705.2372451656312  E_coul = 199.3155152586617
Extra cycle  E= -505.92172990697  delta_E= 5.68e-14  |g|= 2.22e-10  |ddm|= 2.72e-10
    CPU time for scf_cycle      0.10 sec, wall time      0.10 sec
exp = [1.55905350e+03 2.36507796e+02 5.21673568e+01 4.72850781e+00
 3.99148219e-01 8.60266657e+00 4.93720679e-01]
E = -505.9217299069695
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((7, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.5820650117923668e+02,6.8360631861859034e+01,4.6647996209811691e+00,3.9711619128280629e-01,8.5710114329191196e+00,4.8957520672686806e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "5s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:42:11 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  1559.05350355        1
[INPUT] 0    0    [1    /1   ]  236.507796013        1
[INPUT] 0    0    [1    /1   ]  52.1673567946        1
[INPUT] 0    0    [1    /1   ]  4.7285078102         1
[INPUT] 0    0    [1    /1   ]  0.399148218949       1
[INPUT] 1    0    [1    /1   ]  8.6026665745         1
[INPUT] 1    0    [1    /1   ]  0.493720679436       1

nuclear repulsion = 0
number of shells = 7
number of NR pGTOs = 11
number of NR cGTOs = 11
basis = {'Ar': [[0, [1559.0535035498071, 1.0]], [0, [236.50779601329305, 1.0]], [0, [52.16735679464224, 1.0]], [0, [4.728507810202644, 1.0]], [0, [0.3991482189492914, 1.0]], [1, [8.602666574495258, 1.0]], [1, [0.4937206794363603, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [1559.05350355]
bas 1, expnt(s) = [236.50779601]
bas 2, expnt(s) = [52.16735679]
bas 3, expnt(s) = [4.72850781]
bas 4, expnt(s) = [0.39914822]
bas 5, expnt(s) = [8.60266657]
bas 6, expnt(s) = [0.49372068]
CPU time:       137.97
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]
 [ 0  1  1  1  0 36 37  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.55905350e+03 6.26845899e+02 2.36507796e+02 1.52369878e+02
 5.21673568e+01 4.90415456e+01 4.72850781e+00 8.10136328e+00
 3.99148219e-01 1.26871966e+00 8.60266657e+00 4.29809248e+01
 4.93720679e-01 1.20735793e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.312817580065524
cond(S) = 11.076573388389555
E1 = -687.5189482692795  E_coul = 185.14544003960447
init E= -502.373508229675
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.675329185183096  LUMO = 181.382088177567
  mo_energy =
[-1.20807625e+02 -1.32267108e+01 -7.60411248e+00 -7.60411248e+00
 -7.60411248e+00 -1.64623290e+00 -6.75329185e-01 -6.75329185e-01
 -6.75329185e-01  1.81382088e+02  2.15905607e+03]
E1 = -705.2474313024396  E_coul = 199.32582901743282
cycle= 1 E= -505.921602285007  delta_E= -3.55  |g|= 0.263  |ddm|= 0.299
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.275291
diis-c [-0.07578504  1.        ]
  HOMO = -0.224681693552301  LUMO = 182.778203612614
  mo_energy =
[-1.19417744e+02 -1.21855671e+01 -6.62333254e+00 -6.62333254e+00
 -6.62333254e+00 -1.15059567e+00 -2.24681694e-01 -2.24681694e-01
 -2.24681694e-01  1.82778204e+02  2.16032853e+03]
E1 = -705.2373251550692  E_coul = 199.31559526032228
cycle= 2 E= -505.921729894747  delta_E= -0.000128  |g|= 0.00224  |ddm|= 0.00409
    CPU time for cycle= 2      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.0022419
diis-c [-4.00522345e-06 -3.68392231e-03  1.00368392e+00]
  HOMO = -0.224726064166333  LUMO = 182.776244982953
  mo_energy =
[-1.19420957e+02 -1.21858916e+01 -6.62381536e+00 -6.62381536e+00
 -6.62381536e+00 -1.15061378e+00 -2.24726064e-01 -2.24726064e-01
 -2.24726064e-01  1.82776245e+02  2.16032174e+03]
E1 = -705.2372456084595  E_coul = 199.3155157014909
cycle= 3 E= -505.921729906969  delta_E= -1.22e-08  |g|= 2.09e-05  |ddm|= 3.57e-05
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=2.76989e-05
diis-c [-9.10482711e-12  5.32163201e-05 -1.40009110e-02  1.01394769e+00]
  HOMO = -0.22472625473797  LUMO = 182.776240888864
  mo_energy =
[-1.19420968e+02 -1.21858930e+01 -6.62381799e+00 -6.62381799e+00
 -6.62381799e+00 -1.15061383e+00 -2.24726255e-01 -2.24726255e-01
 -2.24726255e-01  1.82776241e+02  2.16032173e+03]
E1 = -705.2372451647393  E_coul = 199.31551525776973
cycle= 4 E= -505.92172990697  delta_E= -9.66e-13  |g|= 2.85e-08  |ddm|= 2.64e-07
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -705.2372451647393  E_coul = 199.31551525776973
  HOMO = -0.224726254471862  LUMO = 182.776240924895
  mo_energy =
[-1.19420968e+02 -1.21858930e+01 -6.62381799e+00 -6.62381799e+00
 -6.62381799e+00 -1.15061383e+00 -2.24726254e-01 -2.24726254e-01
 -2.24726254e-01  1.82776241e+02  2.16032173e+03]
E1 = -705.2372451656312  E_coul = 199.3155152586617
Extra cycle  E= -505.92172990697  delta_E= 5.68e-14  |g|= 2.22e-10  |ddm|= 2.72e-10
    CPU time for scf_cycle      0.10 sec, wall time      0.10 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 11.076573388389555
E1 = -705.2372451656312  E_coul = 199.3155152586617
init E= -505.92172990697
    CPU time for initialize scf      0.05 sec, wall time      0.05 sec
  HOMO = -0.224726254470031  LUMO = 182.776240925164
  mo_energy =
[-1.19420968e+02 -1.21858930e+01 -6.62381799e+00 -6.62381799e+00
 -6.62381799e+00 -1.15061383e+00 -2.24726254e-01 -2.24726254e-01
 -2.24726254e-01  1.82776241e+02  2.16032173e+03]
E1 = -705.2372451656377  E_coul = 199.31551525866814
cycle= 1 E= -505.92172990697  delta_E=    0  |g|= 1.86e-12  |ddm|= 1.99e-12
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -705.2372451656377  E_coul = 199.31551525866814
  HOMO = -0.22472625447002  LUMO = 182.776240925166
  mo_energy =
[-1.19420968e+02 -1.21858930e+01 -6.62381799e+00 -6.62381799e+00
 -6.62381799e+00 -1.15061383e+00 -2.24726254e-01 -2.24726254e-01
 -2.24726254e-01  1.82776241e+02  2.16032173e+03]
E1 = -705.2372451656375  E_coul = 199.31551525866826
Extra cycle  E= -505.921729906969  delta_E= 2.27e-13  |g|= 1.11e-12  |ddm|= 9.77e-15
    CPU time for scf_cycle      0.12 sec, wall time      0.12 sec
exp = [1.55905350e+03 2.36507796e+02 5.21673568e+01 4.72850781e+00
 3.99148219e-01 8.60266657e+00 4.93720679e-01]
grad_E = [-3.14610734e-05  2.46937414e-04 -1.48195004e-03  1.45366557e-03
  1.05309872e-01  7.10139416e-03  1.28468730e-01]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((7, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.5820650117923668e+02,6.8360631861859034e+01,4.6647996209811691e+00,3.9711619128280629e-01,8.5710114329191196e+00,4.8957520672686806e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "5s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:42:14 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  1571.40329337        1
[INPUT] 0    0    [1    /1   ]  237.348717328        1
[INPUT] 0    0    [1    /1   ]  52.2884420719        1
[INPUT] 0    0    [1    /1   ]  4.72842859832        1
[INPUT] 0    0    [1    /1   ]  0.393137160356       1
[INPUT] 1    0    [1    /1   ]  8.5913775728         1
[INPUT] 1    0    [1    /1   ]  0.490448027846       1

nuclear repulsion = 0
number of shells = 7
number of NR pGTOs = 11
number of NR cGTOs = 11
basis = {'Ar': [[0, [1571.403293371121, 1.0]], [0, [237.34871732829686, 1.0]], [0, [52.2884420718566, 1.0]], [0, [4.728428598317221, 1.0]], [0, [0.39313716035580737, 1.0]], [1, [8.591377572802003, 1.0]], [1, [0.4904480278459815, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [1571.40329337]
bas 1, expnt(s) = [237.34871733]
bas 2, expnt(s) = [52.28844207]
bas 3, expnt(s) = [4.7284286]
bas 4, expnt(s) = [0.39313716]
bas 5, expnt(s) = [8.59137757]
bas 6, expnt(s) = [0.49044803]
CPU time:       141.18
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]
 [ 0  1  1  1  0 36 37  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.57140329e+03 6.30566317e+02 2.37348717e+02 1.52776020e+02
 5.22884421e+01 4.91268933e+01 4.72842860e+00 8.10126150e+00
 3.93137160e-01 1.25436260e+00 8.59137757e+00 4.29104333e+01
 4.90448028e-01 1.19736245e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.318012341525904
cond(S) = 11.019948578157084
E1 = -687.2421485736741  E_coul = 184.8946765845725
init E= -502.347471989102
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.68190441825931  LUMO = 182.146545995928
  mo_energy =
[-1.20834824e+02 -1.32473201e+01 -7.62178381e+00 -7.62178381e+00
 -7.62178381e+00 -1.64993422e+00 -6.81904418e-01 -6.81904418e-01
 -6.81904418e-01  1.82146546e+02  2.17526257e+03]
E1 = -704.9072078198888  E_coul = 198.98483024849997
cycle= 1 E= -505.922377571389  delta_E= -3.57  |g|= 0.264  |ddm|= 0.296
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.276959
diis-c [-0.07670645  1.        ]
  HOMO = -0.235543038003508  LUMO = 183.536685818559
  mo_energy =
[-1.19451504e+02 -1.22115457e+01 -6.64649429e+00 -6.64649429e+00
 -6.64649429e+00 -1.15967469e+00 -2.35543038e-01 -2.35543038e-01
 -2.35543038e-01  1.83536686e+02  2.17652912e+03]
E1 = -704.8972238959082  E_coul = 198.97472009737243
cycle= 2 E= -505.922503798536  delta_E= -0.000126  |g|= 0.00223  |ddm|= 0.00405
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00223039
diis-c [-3.95081172e-06 -3.66692207e-03  1.00366692e+00]
  HOMO = -0.235586293682876  LUMO = 183.534748463566
  mo_energy =
[-1.19454678e+02 -1.22118665e+01 -6.64697158e+00 -6.64697158e+00
 -6.64697158e+00 -1.15969229e+00 -2.35586294e-01 -2.35586294e-01
 -2.35586294e-01  1.83534748e+02  2.17652240e+03]
E1 = -704.8971455448923  E_coul = 198.97464173433545
cycle= 3 E= -505.922503810557  delta_E= -1.2e-08  |g|= 2.07e-05  |ddm|= 3.52e-05
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=2.74502e-05
diis-c [-8.87855628e-12  5.29639317e-05 -1.39701174e-02  1.01391715e+00]
  HOMO = -0.235586478540293  LUMO = 183.534744446431
  mo_energy =
[-1.19454689e+02 -1.22118679e+01 -6.64697418e+00 -6.64697418e+00
 -6.64697418e+00 -1.15969234e+00 -2.35586479e-01 -2.35586479e-01
 -2.35586479e-01  1.83534744e+02  2.17652240e+03]
E1 = -704.8971451088549  E_coul = 198.97464129829714
cycle= 4 E= -505.922503810558  delta_E= -1.02e-12  |g|= 2.8e-08  |ddm|= 2.6e-07
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -704.8971451088549  E_coul = 198.97464129829714
  HOMO = -0.235586478286723  LUMO = 183.534744481968
  mo_energy =
[-1.19454689e+02 -1.22118679e+01 -6.64697417e+00 -6.64697417e+00
 -6.64697417e+00 -1.15969234e+00 -2.35586478e-01 -2.35586478e-01
 -2.35586478e-01  1.83534744e+02  2.17652240e+03]
E1 = -704.8971451097299  E_coul = 198.97464129917194
Extra cycle  E= -505.922503810558  delta_E= -1.14e-13  |g|= 2.18e-10  |ddm|= 2.66e-10
    CPU time for scf_cycle      0.10 sec, wall time      0.10 sec
exp = [1.57140329e+03 2.37348717e+02 5.22884421e+01 4.72842860e+00
 3.93137160e-01 8.59137757e+00 4.90448028e-01]
E = -505.92250381055794
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((7, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.5820650117923668e+02,6.8360631861859034e+01,4.6647996209811691e+00,3.9711619128280629e-01,8.5710114329191196e+00,4.8957520672686806e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "5s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:42:15 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  1571.40329337        1
[INPUT] 0    0    [1    /1   ]  237.348717328        1
[INPUT] 0    0    [1    /1   ]  52.2884420719        1
[INPUT] 0    0    [1    /1   ]  4.72842859832        1
[INPUT] 0    0    [1    /1   ]  0.393137160356       1
[INPUT] 1    0    [1    /1   ]  8.5913775728         1
[INPUT] 1    0    [1    /1   ]  0.490448027846       1

nuclear repulsion = 0
number of shells = 7
number of NR pGTOs = 11
number of NR cGTOs = 11
basis = {'Ar': [[0, [1571.403293371121, 1.0]], [0, [237.34871732829686, 1.0]], [0, [52.2884420718566, 1.0]], [0, [4.728428598317221, 1.0]], [0, [0.39313716035580737, 1.0]], [1, [8.591377572802003, 1.0]], [1, [0.4904480278459815, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [1571.40329337]
bas 1, expnt(s) = [237.34871733]
bas 2, expnt(s) = [52.28844207]
bas 3, expnt(s) = [4.7284286]
bas 4, expnt(s) = [0.39313716]
bas 5, expnt(s) = [8.59137757]
bas 6, expnt(s) = [0.49044803]
CPU time:       141.84
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]
 [ 0  1  1  1  0 36 37  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.57140329e+03 6.30566317e+02 2.37348717e+02 1.52776020e+02
 5.22884421e+01 4.91268933e+01 4.72842860e+00 8.10126150e+00
 3.93137160e-01 1.25436260e+00 8.59137757e+00 4.29104333e+01
 4.90448028e-01 1.19736245e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.318012341525904
cond(S) = 11.019948578157084
E1 = -687.2421485736741  E_coul = 184.8946765845725
init E= -502.347471989102
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.68190441825931  LUMO = 182.146545995928
  mo_energy =
[-1.20834824e+02 -1.32473201e+01 -7.62178381e+00 -7.62178381e+00
 -7.62178381e+00 -1.64993422e+00 -6.81904418e-01 -6.81904418e-01
 -6.81904418e-01  1.82146546e+02  2.17526257e+03]
E1 = -704.9072078198888  E_coul = 198.98483024849997
cycle= 1 E= -505.922377571389  delta_E= -3.57  |g|= 0.264  |ddm|= 0.296
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.276959
diis-c [-0.07670645  1.        ]
  HOMO = -0.235543038003508  LUMO = 183.536685818559
  mo_energy =
[-1.19451504e+02 -1.22115457e+01 -6.64649429e+00 -6.64649429e+00
 -6.64649429e+00 -1.15967469e+00 -2.35543038e-01 -2.35543038e-01
 -2.35543038e-01  1.83536686e+02  2.17652912e+03]
E1 = -704.8972238959082  E_coul = 198.97472009737243
cycle= 2 E= -505.922503798536  delta_E= -0.000126  |g|= 0.00223  |ddm|= 0.00405
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00223039
diis-c [-3.95081172e-06 -3.66692207e-03  1.00366692e+00]
  HOMO = -0.235586293682876  LUMO = 183.534748463566
  mo_energy =
[-1.19454678e+02 -1.22118665e+01 -6.64697158e+00 -6.64697158e+00
 -6.64697158e+00 -1.15969229e+00 -2.35586294e-01 -2.35586294e-01
 -2.35586294e-01  1.83534748e+02  2.17652240e+03]
E1 = -704.8971455448923  E_coul = 198.97464173433545
cycle= 3 E= -505.922503810557  delta_E= -1.2e-08  |g|= 2.07e-05  |ddm|= 3.52e-05
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=2.74502e-05
diis-c [-8.87855628e-12  5.29639317e-05 -1.39701174e-02  1.01391715e+00]
  HOMO = -0.235586478540293  LUMO = 183.534744446431
  mo_energy =
[-1.19454689e+02 -1.22118679e+01 -6.64697418e+00 -6.64697418e+00
 -6.64697418e+00 -1.15969234e+00 -2.35586479e-01 -2.35586479e-01
 -2.35586479e-01  1.83534744e+02  2.17652240e+03]
E1 = -704.8971451088549  E_coul = 198.97464129829714
cycle= 4 E= -505.922503810558  delta_E= -1.02e-12  |g|= 2.8e-08  |ddm|= 2.6e-07
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -704.8971451088549  E_coul = 198.97464129829714
  HOMO = -0.235586478286723  LUMO = 183.534744481968
  mo_energy =
[-1.19454689e+02 -1.22118679e+01 -6.64697417e+00 -6.64697417e+00
 -6.64697417e+00 -1.15969234e+00 -2.35586478e-01 -2.35586478e-01
 -2.35586478e-01  1.83534744e+02  2.17652240e+03]
E1 = -704.8971451097299  E_coul = 198.97464129917194
Extra cycle  E= -505.922503810558  delta_E= -1.14e-13  |g|= 2.18e-10  |ddm|= 2.66e-10
    CPU time for scf_cycle      0.10 sec, wall time      0.11 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 11.019948578157084
E1 = -704.8971451097299  E_coul = 198.97464129917194
init E= -505.922503810558
    CPU time for initialize scf      0.05 sec, wall time      0.05 sec
  HOMO = -0.235586478284978  LUMO = 183.534744482234
  mo_energy =
[-1.19454689e+02 -1.22118679e+01 -6.64697417e+00 -6.64697417e+00
 -6.64697417e+00 -1.15969234e+00 -2.35586478e-01 -2.35586478e-01
 -2.35586478e-01  1.83534744e+02  2.17652240e+03]
E1 = -704.8971451097357  E_coul = 198.97464129917827
cycle= 1 E= -505.922503810557  delta_E= 5.68e-13  |g|= 2.34e-12  |ddm|= 1.94e-12
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -704.8971451097357  E_coul = 198.97464129917827
  HOMO = -0.235586478284966  LUMO = 183.534744482236
  mo_energy =
[-1.19454689e+02 -1.22118679e+01 -6.64697417e+00 -6.64697417e+00
 -6.64697417e+00 -1.15969234e+00 -2.35586478e-01 -2.35586478e-01
 -2.35586478e-01  1.83534744e+02  2.17652240e+03]
E1 = -704.897145109736  E_coul = 198.9746412991783
Extra cycle  E= -505.922503810558  delta_E= -3.41e-13  |g|= 8.47e-13  |ddm|= 1.28e-14
    CPU time for scf_cycle      0.12 sec, wall time      0.13 sec
exp = [1.57140329e+03 2.37348717e+02 5.22884421e+01 4.72842860e+00
 3.93137160e-01 8.59137757e+00 4.90448028e-01]
grad_E = [-1.69225103e-06  1.32934694e-05 -3.48175661e-04  3.30102796e-04
 -1.37568684e-03  4.36489669e-04  9.55841266e-04]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((7, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.5820650117923668e+02,6.8360631861859034e+01,4.6647996209811691e+00,3.9711619128280629e-01,8.5710114329191196e+00,4.8957520672686806e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "5s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:42:18 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  1573.49783091        1
[INPUT] 0    0    [1    /1   ]  237.584301354        1
[INPUT] 0    0    [1    /1   ]  52.3264120435        1
[INPUT] 0    0    [1    /1   ]  4.72821769869        1
[INPUT] 0    0    [1    /1   ]  0.393226385342       1
[INPUT] 1    0    [1    /1   ]  8.59083028209        1
[INPUT] 1    0    [1    /1   ]  0.490393386208       1

nuclear repulsion = 0
number of shells = 7
number of NR pGTOs = 11
number of NR cGTOs = 11
basis = {'Ar': [[0, [1573.4978309117187, 1.0]], [0, [237.58430135373658, 1.0]], [0, [52.32641204354647, 1.0]], [0, [4.728217698686337, 1.0]], [0, [0.39322638534150994, 1.0]], [1, [8.590830282088415, 1.0]], [1, [0.49039338620790685, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [1573.49783091]
bas 1, expnt(s) = [237.58430135]
bas 2, expnt(s) = [52.32641204]
bas 3, expnt(s) = [4.7282177]
bas 4, expnt(s) = [0.39322639]
bas 5, expnt(s) = [8.59083028]
bas 6, expnt(s) = [0.49039339]
CPU time:       145.09
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]
 [ 0  1  1  1  0 36 37  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.57349783e+03 6.31196578e+02 2.37584301e+02 1.52889736e+02
 5.23264120e+01 4.91536465e+01 4.72821770e+00 8.10099049e+00
 3.93226385e-01 1.25457611e+00 8.59083028e+00 4.29070164e+01
 4.90393386e-01 1.19719570e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.318064933134558
cond(S) = 11.012453709672586
E1 = -687.2374528944706  E_coul = 184.8919144292388
init E= -502.345538465232
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.6819286408627  LUMO = 182.389368063383
  mo_energy =
[-1.20835110e+02 -1.32477671e+01 -7.62194814e+00 -7.62194814e+00
 -7.62194814e+00 -1.65001380e+00 -6.81928641e-01 -6.81928641e-01
 -6.81928641e-01  1.82389368e+02  2.17837805e+03]
E1 = -704.9045249135829  E_coul = 198.982139080898
cycle= 1 E= -505.922385832685  delta_E= -3.58  |g|= 0.264  |ddm|= 0.296
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.277209
diis-c [-0.07684495  1.        ]
  HOMO = -0.235616314572076  LUMO = 183.779778475864
  mo_energy =
[-1.19451533e+02 -1.22120083e+01 -6.64668081e+00 -6.64668081e+00
 -6.64668081e+00 -1.15975350e+00 -2.35616315e-01 -2.35616315e-01
 -2.35616315e-01  1.83779778e+02  2.17964539e+03]
E1 = -704.8945663766876  E_coul = 198.97205464005424
cycle= 2 E= -505.922511736633  delta_E= -0.000126  |g|= 0.00222  |ddm|= 0.00404
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00222789
diis-c [-3.93809409e-06 -3.66638626e-03  1.00366639e+00]
  HOMO = -0.235659440421257  LUMO = 183.777844872355
  mo_energy =
[-1.19454699e+02 -1.22123284e+01 -6.64715679e+00 -6.64715679e+00
 -6.64715679e+00 -1.15977106e+00 -2.35659440e-01 -2.35659440e-01
 -2.35659440e-01  1.83777845e+02  2.17963869e+03]
E1 = -704.8944882955007  E_coul = 198.97197654689603
cycle= 3 E= -505.922511748605  delta_E= -1.2e-08  |g|= 2.07e-05  |ddm|= 3.51e-05
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=2.73808e-05
diis-c [-8.82711043e-12  5.29107124e-05 -1.39571422e-02  1.01390423e+00]
  HOMO = -0.235659624476103  LUMO = 183.777840877904
  mo_energy =
[-1.19454710e+02 -1.22123298e+01 -6.64715937e+00 -6.64715937e+00
 -6.64715937e+00 -1.15977111e+00 -2.35659624e-01 -2.35659624e-01
 -2.35659624e-01  1.83777841e+02  2.17963868e+03]
E1 = -704.8944878617198  E_coul = 198.97197611311395
cycle= 4 E= -505.922511748606  delta_E= -1.19e-12  |g|= 2.79e-08  |ddm|= 2.59e-07
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -704.8944878617198  E_coul = 198.97197611311395
  HOMO = -0.235659624224646  LUMO = 183.777840913315
  mo_energy =
[-1.19454710e+02 -1.22123298e+01 -6.64715937e+00 -6.64715937e+00
 -6.64715937e+00 -1.15977111e+00 -2.35659624e-01 -2.35659624e-01
 -2.35659624e-01  1.83777841e+02  2.17963868e+03]
E1 = -704.8944878625895  E_coul = 198.97197611398397
Extra cycle  E= -505.922511748606  delta_E= 2.84e-13  |g|= 2.16e-10  |ddm|= 2.65e-10
    CPU time for scf_cycle      0.10 sec, wall time      0.10 sec
exp = [1.57349783e+03 2.37584301e+02 5.23264120e+01 4.72821770e+00
 3.93226385e-01 8.59083028e+00 4.90393386e-01]
E = -505.92251174860553
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((7, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.5820650117923668e+02,6.8360631861859034e+01,4.6647996209811691e+00,3.9711619128280629e-01,8.5710114329191196e+00,4.8957520672686806e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "5s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:42:18 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  1573.49783091        1
[INPUT] 0    0    [1    /1   ]  237.584301354        1
[INPUT] 0    0    [1    /1   ]  52.3264120435        1
[INPUT] 0    0    [1    /1   ]  4.72821769869        1
[INPUT] 0    0    [1    /1   ]  0.393226385342       1
[INPUT] 1    0    [1    /1   ]  8.59083028209        1
[INPUT] 1    0    [1    /1   ]  0.490393386208       1

nuclear repulsion = 0
number of shells = 7
number of NR pGTOs = 11
number of NR cGTOs = 11
basis = {'Ar': [[0, [1573.4978309117187, 1.0]], [0, [237.58430135373658, 1.0]], [0, [52.32641204354647, 1.0]], [0, [4.728217698686337, 1.0]], [0, [0.39322638534150994, 1.0]], [1, [8.590830282088415, 1.0]], [1, [0.49039338620790685, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [1573.49783091]
bas 1, expnt(s) = [237.58430135]
bas 2, expnt(s) = [52.32641204]
bas 3, expnt(s) = [4.7282177]
bas 4, expnt(s) = [0.39322639]
bas 5, expnt(s) = [8.59083028]
bas 6, expnt(s) = [0.49039339]
CPU time:       145.77
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]
 [ 0  1  1  1  0 36 37  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.57349783e+03 6.31196578e+02 2.37584301e+02 1.52889736e+02
 5.23264120e+01 4.91536465e+01 4.72821770e+00 8.10099049e+00
 3.93226385e-01 1.25457611e+00 8.59083028e+00 4.29070164e+01
 4.90393386e-01 1.19719570e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.318064933134558
cond(S) = 11.012453709672586
E1 = -687.2374528944706  E_coul = 184.8919144292388
init E= -502.345538465232
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.6819286408627  LUMO = 182.389368063383
  mo_energy =
[-1.20835110e+02 -1.32477671e+01 -7.62194814e+00 -7.62194814e+00
 -7.62194814e+00 -1.65001380e+00 -6.81928641e-01 -6.81928641e-01
 -6.81928641e-01  1.82389368e+02  2.17837805e+03]
E1 = -704.9045249135829  E_coul = 198.982139080898
cycle= 1 E= -505.922385832685  delta_E= -3.58  |g|= 0.264  |ddm|= 0.296
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.277209
diis-c [-0.07684495  1.        ]
  HOMO = -0.235616314572076  LUMO = 183.779778475864
  mo_energy =
[-1.19451533e+02 -1.22120083e+01 -6.64668081e+00 -6.64668081e+00
 -6.64668081e+00 -1.15975350e+00 -2.35616315e-01 -2.35616315e-01
 -2.35616315e-01  1.83779778e+02  2.17964539e+03]
E1 = -704.8945663766876  E_coul = 198.97205464005424
cycle= 2 E= -505.922511736633  delta_E= -0.000126  |g|= 0.00222  |ddm|= 0.00404
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00222789
diis-c [-3.93809409e-06 -3.66638626e-03  1.00366639e+00]
  HOMO = -0.235659440421257  LUMO = 183.777844872355
  mo_energy =
[-1.19454699e+02 -1.22123284e+01 -6.64715679e+00 -6.64715679e+00
 -6.64715679e+00 -1.15977106e+00 -2.35659440e-01 -2.35659440e-01
 -2.35659440e-01  1.83777845e+02  2.17963869e+03]
E1 = -704.8944882955007  E_coul = 198.97197654689603
cycle= 3 E= -505.922511748605  delta_E= -1.2e-08  |g|= 2.07e-05  |ddm|= 3.51e-05
    CPU time for cycle= 3      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=2.73808e-05
diis-c [-8.82711043e-12  5.29107124e-05 -1.39571422e-02  1.01390423e+00]
  HOMO = -0.235659624476103  LUMO = 183.777840877904
  mo_energy =
[-1.19454710e+02 -1.22123298e+01 -6.64715937e+00 -6.64715937e+00
 -6.64715937e+00 -1.15977111e+00 -2.35659624e-01 -2.35659624e-01
 -2.35659624e-01  1.83777841e+02  2.17963868e+03]
E1 = -704.8944878617198  E_coul = 198.97197611311395
cycle= 4 E= -505.922511748606  delta_E= -1.19e-12  |g|= 2.79e-08  |ddm|= 2.59e-07
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -704.8944878617198  E_coul = 198.97197611311395
  HOMO = -0.235659624224646  LUMO = 183.777840913315
  mo_energy =
[-1.19454710e+02 -1.22123298e+01 -6.64715937e+00 -6.64715937e+00
 -6.64715937e+00 -1.15977111e+00 -2.35659624e-01 -2.35659624e-01
 -2.35659624e-01  1.83777841e+02  2.17963868e+03]
E1 = -704.8944878625895  E_coul = 198.97197611398397
Extra cycle  E= -505.922511748606  delta_E= 2.84e-13  |g|= 2.16e-10  |ddm|= 2.65e-10
    CPU time for scf_cycle      0.10 sec, wall time      0.10 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 11.012453709672586
E1 = -704.8944878625895  E_coul = 198.97197611398397
init E= -505.922511748606
    CPU time for initialize scf      0.06 sec, wall time      0.06 sec
  HOMO = -0.235659624222912  LUMO = 183.777840913579
  mo_energy =
[-1.19454710e+02 -1.22123298e+01 -6.64715937e+00 -6.64715937e+00
 -6.64715937e+00 -1.15977111e+00 -2.35659624e-01 -2.35659624e-01
 -2.35659624e-01  1.83777841e+02  2.17963868e+03]
E1 = -704.8944878625957  E_coul = 198.97197611399025
cycle= 1 E= -505.922511748605  delta_E= 5.68e-14  |g|= 1.66e-12  |ddm|= 1.92e-12
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -704.8944878625957  E_coul = 198.97197611399025
  HOMO = -0.235659624222902  LUMO = 183.777840913581
  mo_energy =
[-1.19454710e+02 -1.22123298e+01 -6.64715937e+00 -6.64715937e+00
 -6.64715937e+00 -1.15977111e+00 -2.35659624e-01 -2.35659624e-01
 -2.35659624e-01  1.83777841e+02  2.17963868e+03]
E1 = -704.8944878625953  E_coul = 198.9719761139902
Extra cycle  E= -505.922511748605  delta_E= 3.98e-13  |g|= 9.93e-13  |ddm|= 2.06e-14
    CPU time for scf_cycle      0.12 sec, wall time      0.13 sec
exp = [1.57349783e+03 2.37584301e+02 5.23264120e+01 4.72821770e+00
 3.93226385e-01 8.59083028e+00 4.90393386e-01]
grad_E = [ 3.29878680e-07  1.21094294e-06 -6.95414687e-05  1.07337447e-04
 -4.51619949e-04  9.01958661e-05 -2.94156913e-04]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((7, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.5820650117923668e+02,6.8360631861859034e+01,4.6647996209811691e+00,3.9711619128280629e-01,8.5710114329191196e+00,4.8957520672686806e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "5s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:42:22 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  1573.61314283        1
[INPUT] 0    0    [1    /1   ]  237.614709829        1
[INPUT] 0    0    [1    /1   ]  52.3329152736        1
[INPUT] 0    0    [1    /1   ]  4.72812158775        1
[INPUT] 0    0    [1    /1   ]  0.393254591637       1
[INPUT] 1    0    [1    /1   ]  8.59072437478        1
[INPUT] 1    0    [1    /1   ]  0.490394544261       1

nuclear repulsion = 0
number of shells = 7
number of NR pGTOs = 11
number of NR cGTOs = 11
basis = {'Ar': [[0, [1573.6131428287533, 1.0]], [0, [237.61470982873857, 1.0]], [0, [52.332915273571196, 1.0]], [0, [4.728121587746931, 1.0]], [0, [0.39325459163666177, 1.0]], [1, [8.590724374781235, 1.0]], [1, [0.49039454426133083, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [1573.61314283]
bas 1, expnt(s) = [237.61470983]
bas 2, expnt(s) = [52.33291527]
bas 3, expnt(s) = [4.72812159]
bas 4, expnt(s) = [0.39325459]
bas 5, expnt(s) = [8.59072437]
bas 6, expnt(s) = [0.49039454]
CPU time:       149.01
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]
 [ 0  1  1  1  0 36 37  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.57361314e+03 6.31231270e+02 2.37614710e+02 1.52904412e+02
 5.23329153e+01 4.91582281e+01 4.72812159e+00 8.10086699e+00
 3.93254592e-01 1.25464360e+00 8.59072437e+00 4.29063552e+01
 4.90394544e-01 1.19719923e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.318059806502774
cond(S) = 11.012335844323184
E1 = -687.2371645139805  E_coul = 184.89186346685906
init E= -502.345301047121
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.681914014661219  LUMO = 182.425513291917
  mo_energy =
[-1.20835128e+02 -1.32478135e+01 -7.62194967e+00 -7.62194967e+00
 -7.62194967e+00 -1.65001604e+00 -6.81914015e-01 -6.81914015e-01
 -6.81914015e-01  1.82425513e+02  2.17862077e+03]
E1 = -704.9046897129543  E_coul = 198.98230362539672
cycle= 1 E= -505.922386087558  delta_E= -3.58  |g|= 0.264  |ddm|= 0.296
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.277234
diis-c [-0.07685863  1.        ]
  HOMO = -0.235598787402217  LUMO = 183.815986359502
  mo_energy =
[-1.19451491e+02 -1.22120462e+01 -6.64667538e+00 -6.64667538e+00
 -6.64667538e+00 -1.15974355e+00 -2.35598787e-01 -2.35598787e-01
 -2.35598787e-01  1.83815986e+02  2.17988829e+03]
E1 = -704.8947349372626  E_coul = 198.9722229885504
cycle= 2 E= -505.922511948712  delta_E= -0.000126  |g|= 0.00222  |ddm|= 0.00404
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00222769
diis-c [-3.93670190e-06 -3.66697634e-03  1.00366698e+00]
  HOMO = -0.235641896113244  LUMO = 183.814053385012
  mo_energy =
[-1.19454657e+02 -1.22123661e+01 -6.64715117e+00 -6.64715117e+00
 -6.64715117e+00 -1.15976111e+00 -2.35641896e-01 -2.35641896e-01
 -2.35641896e-01  1.83814053e+02  2.17988158e+03]
E1 = -704.8946568947676  E_coul = 198.97214493408978
cycle= 3 E= -505.922511960678  delta_E= -1.2e-08  |g|= 2.07e-05  |ddm|= 3.51e-05
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=2.73711e-05
diis-c [-8.81802621e-12  5.29056713e-05 -1.39546907e-02  1.01390178e+00]
  HOMO = -0.235642080037008  LUMO = 183.814049395393
  mo_energy =
[-1.19454668e+02 -1.22123675e+01 -6.64715375e+00 -6.64715375e+00
 -6.64715375e+00 -1.15976116e+00 -2.35642080e-01 -2.35642080e-01
 -2.35642080e-01  1.83814049e+02  2.17988158e+03]
E1 = -704.8946564613561  E_coul = 198.9721445006777
cycle= 4 E= -505.922511960678  delta_E= -5.68e-13  |g|= 2.79e-08  |ddm|= 2.59e-07
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -704.8946564613561  E_coul = 198.9721445006777
  HOMO = -0.235642079785922  LUMO = 183.81404943078
  mo_energy =
[-1.19454668e+02 -1.22123675e+01 -6.64715375e+00 -6.64715375e+00
 -6.64715375e+00 -1.15976116e+00 -2.35642080e-01 -2.35642080e-01
 -2.35642080e-01  1.83814049e+02  2.17988158e+03]
E1 = -704.8946564622249  E_coul = 198.9721445015467
Extra cycle  E= -505.922511960678  delta_E= 2.27e-13  |g|= 2.17e-10  |ddm|= 2.64e-10
    CPU time for scf_cycle      0.10 sec, wall time      0.10 sec
exp = [1.57361314e+03 2.37614710e+02 5.23329153e+01 4.72812159e+00
 3.93254592e-01 8.59072437e+00 4.90394544e-01]
E = -505.9225119606782
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((7, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.5820650117923668e+02,6.8360631861859034e+01,4.6647996209811691e+00,3.9711619128280629e-01,8.5710114329191196e+00,4.8957520672686806e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "5s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:42:22 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  1573.61314283        1
[INPUT] 0    0    [1    /1   ]  237.614709829        1
[INPUT] 0    0    [1    /1   ]  52.3329152736        1
[INPUT] 0    0    [1    /1   ]  4.72812158775        1
[INPUT] 0    0    [1    /1   ]  0.393254591637       1
[INPUT] 1    0    [1    /1   ]  8.59072437478        1
[INPUT] 1    0    [1    /1   ]  0.490394544261       1

nuclear repulsion = 0
number of shells = 7
number of NR pGTOs = 11
number of NR cGTOs = 11
basis = {'Ar': [[0, [1573.6131428287533, 1.0]], [0, [237.61470982873857, 1.0]], [0, [52.332915273571196, 1.0]], [0, [4.728121587746931, 1.0]], [0, [0.39325459163666177, 1.0]], [1, [8.590724374781235, 1.0]], [1, [0.49039454426133083, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [1573.61314283]
bas 1, expnt(s) = [237.61470983]
bas 2, expnt(s) = [52.33291527]
bas 3, expnt(s) = [4.72812159]
bas 4, expnt(s) = [0.39325459]
bas 5, expnt(s) = [8.59072437]
bas 6, expnt(s) = [0.49039454]
CPU time:       149.68
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]
 [ 0  1  1  1  0 36 37  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.57361314e+03 6.31231270e+02 2.37614710e+02 1.52904412e+02
 5.23329153e+01 4.91582281e+01 4.72812159e+00 8.10086699e+00
 3.93254592e-01 1.25464360e+00 8.59072437e+00 4.29063552e+01
 4.90394544e-01 1.19719923e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.318059806502774
cond(S) = 11.012335844323184
E1 = -687.2371645139805  E_coul = 184.89186346685906
init E= -502.345301047121
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.681914014661219  LUMO = 182.425513291917
  mo_energy =
[-1.20835128e+02 -1.32478135e+01 -7.62194967e+00 -7.62194967e+00
 -7.62194967e+00 -1.65001604e+00 -6.81914015e-01 -6.81914015e-01
 -6.81914015e-01  1.82425513e+02  2.17862077e+03]
E1 = -704.9046897129543  E_coul = 198.98230362539672
cycle= 1 E= -505.922386087558  delta_E= -3.58  |g|= 0.264  |ddm|= 0.296
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.277234
diis-c [-0.07685863  1.        ]
  HOMO = -0.235598787402217  LUMO = 183.815986359502
  mo_energy =
[-1.19451491e+02 -1.22120462e+01 -6.64667538e+00 -6.64667538e+00
 -6.64667538e+00 -1.15974355e+00 -2.35598787e-01 -2.35598787e-01
 -2.35598787e-01  1.83815986e+02  2.17988829e+03]
E1 = -704.8947349372626  E_coul = 198.9722229885504
cycle= 2 E= -505.922511948712  delta_E= -0.000126  |g|= 0.00222  |ddm|= 0.00404
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00222769
diis-c [-3.93670190e-06 -3.66697634e-03  1.00366698e+00]
  HOMO = -0.235641896113244  LUMO = 183.814053385012
  mo_energy =
[-1.19454657e+02 -1.22123661e+01 -6.64715117e+00 -6.64715117e+00
 -6.64715117e+00 -1.15976111e+00 -2.35641896e-01 -2.35641896e-01
 -2.35641896e-01  1.83814053e+02  2.17988158e+03]
E1 = -704.8946568947676  E_coul = 198.97214493408978
cycle= 3 E= -505.922511960678  delta_E= -1.2e-08  |g|= 2.07e-05  |ddm|= 3.51e-05
    CPU time for cycle= 3      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=2.73711e-05
diis-c [-8.81802621e-12  5.29056713e-05 -1.39546907e-02  1.01390178e+00]
  HOMO = -0.235642080037008  LUMO = 183.814049395393
  mo_energy =
[-1.19454668e+02 -1.22123675e+01 -6.64715375e+00 -6.64715375e+00
 -6.64715375e+00 -1.15976116e+00 -2.35642080e-01 -2.35642080e-01
 -2.35642080e-01  1.83814049e+02  2.17988158e+03]
E1 = -704.8946564613561  E_coul = 198.9721445006777
cycle= 4 E= -505.922511960678  delta_E= -5.68e-13  |g|= 2.79e-08  |ddm|= 2.59e-07
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -704.8946564613561  E_coul = 198.9721445006777
  HOMO = -0.235642079785922  LUMO = 183.81404943078
  mo_energy =
[-1.19454668e+02 -1.22123675e+01 -6.64715375e+00 -6.64715375e+00
 -6.64715375e+00 -1.15976116e+00 -2.35642080e-01 -2.35642080e-01
 -2.35642080e-01  1.83814049e+02  2.17988158e+03]
E1 = -704.8946564622249  E_coul = 198.9721445015467
Extra cycle  E= -505.922511960678  delta_E= 2.27e-13  |g|= 2.17e-10  |ddm|= 2.64e-10
    CPU time for scf_cycle      0.10 sec, wall time      0.10 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 11.012335844323184
E1 = -704.8946564622249  E_coul = 198.9721445015467
init E= -505.922511960678
    CPU time for initialize scf      0.05 sec, wall time      0.06 sec
  HOMO = -0.235642079784193  LUMO = 183.814049431043
  mo_energy =
[-1.19454668e+02 -1.22123675e+01 -6.64715375e+00 -6.64715375e+00
 -6.64715375e+00 -1.15976116e+00 -2.35642080e-01 -2.35642080e-01
 -2.35642080e-01  1.83814049e+02  2.17988158e+03]
E1 = -704.894656462231  E_coul = 198.97214450155295
cycle= 1 E= -505.922511960678  delta_E= 2.27e-13  |g|= 1.49e-12  |ddm|= 1.93e-12
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -704.894656462231  E_coul = 198.97214450155295
  HOMO = -0.235642079784186  LUMO = 183.814049431045
  mo_energy =
[-1.19454668e+02 -1.22123675e+01 -6.64715375e+00 -6.64715375e+00
 -6.64715375e+00 -1.15976116e+00 -2.35642080e-01 -2.35642080e-01
 -2.35642080e-01  1.83814049e+02  2.17988158e+03]
E1 = -704.8946564622314  E_coul = 198.9721445015532
Extra cycle  E= -505.922511960678  delta_E= -2.27e-13  |g|= 5.59e-13  |ddm|= 1.3e-14
    CPU time for scf_cycle      0.12 sec, wall time      0.13 sec
exp = [1.57361314e+03 2.37614710e+02 5.23329153e+01 4.72812159e+00
 3.93254592e-01 8.59072437e+00 4.90394544e-01]
grad_E = [ 7.59148775e-09  9.74897381e-07 -6.19021638e-06  1.40249073e-05
 -5.94354678e-05  9.09223723e-06 -7.62912102e-05]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((7, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.5820650117923668e+02,6.8360631861859034e+01,4.6647996209811691e+00,3.9711619128280629e-01,8.5710114329191196e+00,4.8957520672686806e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "5s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:42:26 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  1573.59529639        1
[INPUT] 0    0    [1    /1   ]  237.613039191        1
[INPUT] 0    0    [1    /1   ]  52.3329778701        1
[INPUT] 0    0    [1    /1   ]  4.72810812351        1
[INPUT] 0    0    [1    /1   ]  0.393258304262       1
[INPUT] 1    0    [1    /1   ]  8.59071700307        1
[INPUT] 1    0    [1    /1   ]  0.490396332832       1

nuclear repulsion = 0
number of shells = 7
number of NR pGTOs = 11
number of NR cGTOs = 11
basis = {'Ar': [[0, [1573.5952963858392, 1.0]], [0, [237.6130391914597, 1.0]], [0, [52.3329778701382, 1.0]], [0, [4.728108123512209, 1.0]], [0, [0.3932583042616964, 1.0]], [1, [8.590717003066175, 1.0]], [1, [0.4903963328323987, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [1573.59529639]
bas 1, expnt(s) = [237.61303919]
bas 2, expnt(s) = [52.33297787]
bas 3, expnt(s) = [4.72810812]
bas 4, expnt(s) = [0.3932583]
bas 5, expnt(s) = [8.590717]
bas 6, expnt(s) = [0.49039633]
CPU time:       152.94
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]
 [ 0  1  1  1  0 36 37  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.57359530e+03 6.31225901e+02 2.37613039e+02 1.52903605e+02
 5.23329779e+01 4.91582722e+01 4.72810812e+00 8.10084969e+00
 3.93258304e-01 1.25465248e+00 8.59071700e+00 4.29063092e+01
 4.90396333e-01 1.19720469e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.318057254135052
cond(S) = 11.012455410239834
E1 = -687.2372235839769  E_coul = 184.89193187721037
init E= -502.345291706766
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.681910073766752  LUMO = 182.42467216504
  mo_energy =
[-1.20835126e+02 -1.32478096e+01 -7.62194518e+00 -7.62194518e+00
 -7.62194518e+00 -1.65001416e+00 -6.81910074e-01 -6.81910074e-01
 -6.81910074e-01  1.82424672e+02  2.17859662e+03]
E1 = -704.90479862214  E_coul = 198.98241253540922
cycle= 1 E= -505.922386086731  delta_E= -3.58  |g|= 0.264  |ddm|= 0.296
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.277239
diis-c [-0.07686172  1.        ]
  HOMO = -0.235592878845816  LUMO = 183.815149826697
  mo_energy =
[-1.19451484e+02 -1.22120404e+01 -6.64666898e+00 -6.64666898e+00
 -6.64666898e+00 -1.15973905e+00 -2.35592879e-01 -2.35592879e-01
 -2.35592879e-01  1.83815150e+02  2.17986415e+03]
E1 = -704.8948438045473  E_coul = 198.97233185445
cycle= 2 E= -505.922511950097  delta_E= -0.000126  |g|= 0.00222  |ddm|= 0.00404
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00222774
diis-c [-3.93686801e-06 -3.66702749e-03  1.00366703e+00]
  HOMO = -0.235635988296573  LUMO = 183.813216872461
  mo_energy =
[-1.19454649e+02 -1.22123603e+01 -6.64714477e+00 -6.64714477e+00
 -6.64714477e+00 -1.15975661e+00 -2.35635988e-01 -2.35635988e-01
 -2.35635988e-01  1.83813217e+02  2.17985745e+03]
E1 = -704.8947657610859  E_coul = 198.9722537990225
cycle= 3 E= -505.922511962063  delta_E= -1.2e-08  |g|= 2.07e-05  |ddm|= 3.51e-05
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=2.73717e-05
diis-c [-8.81779296e-12  5.29061542e-05 -1.39547177e-02  1.01390181e+00]
  HOMO = -0.235636172224657  LUMO = 183.813212882964
  mo_energy =
[-1.19454660e+02 -1.22123617e+01 -6.64714736e+00 -6.64714736e+00
 -6.64714736e+00 -1.15975665e+00 -2.35636172e-01 -2.35636172e-01
 -2.35636172e-01  1.83813213e+02  2.17985745e+03]
E1 = -704.894765327667  E_coul = 198.9722533656027
cycle= 4 E= -505.922511962064  delta_E= -9.09e-13  |g|= 2.79e-08  |ddm|= 2.59e-07
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -704.894765327667  E_coul = 198.9722533656027
  HOMO = -0.235636171973563  LUMO = 183.813212918351
  mo_energy =
[-1.19454660e+02 -1.22123617e+01 -6.64714735e+00 -6.64714735e+00
 -6.64714735e+00 -1.15975665e+00 -2.35636172e-01 -2.35636172e-01
 -2.35636172e-01  1.83813213e+02  2.17985745e+03]
E1 = -704.8947653285361  E_coul = 198.9722533664719
Extra cycle  E= -505.922511962064  delta_E= 1.14e-13  |g|= 2.17e-10  |ddm|= 2.64e-10
    CPU time for scf_cycle      0.10 sec, wall time      0.10 sec
exp = [1.57359530e+03 2.37613039e+02 5.23329779e+01 4.72810812e+00
 3.93258304e-01 8.59071700e+00 4.90396333e-01]
E = -505.92251196206416
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((7, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.5820650117923668e+02,6.8360631861859034e+01,4.6647996209811691e+00,3.9711619128280629e-01,8.5710114329191196e+00,4.8957520672686806e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "5s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:42:26 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  1573.59529639        1
[INPUT] 0    0    [1    /1   ]  237.613039191        1
[INPUT] 0    0    [1    /1   ]  52.3329778701        1
[INPUT] 0    0    [1    /1   ]  4.72810812351        1
[INPUT] 0    0    [1    /1   ]  0.393258304262       1
[INPUT] 1    0    [1    /1   ]  8.59071700307        1
[INPUT] 1    0    [1    /1   ]  0.490396332832       1

nuclear repulsion = 0
number of shells = 7
number of NR pGTOs = 11
number of NR cGTOs = 11
basis = {'Ar': [[0, [1573.5952963858392, 1.0]], [0, [237.6130391914597, 1.0]], [0, [52.3329778701382, 1.0]], [0, [4.728108123512209, 1.0]], [0, [0.3932583042616964, 1.0]], [1, [8.590717003066175, 1.0]], [1, [0.4903963328323987, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [1573.59529639]
bas 1, expnt(s) = [237.61303919]
bas 2, expnt(s) = [52.33297787]
bas 3, expnt(s) = [4.72810812]
bas 4, expnt(s) = [0.3932583]
bas 5, expnt(s) = [8.590717]
bas 6, expnt(s) = [0.49039633]
CPU time:       153.63
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]
 [ 0  1  1  1  0 36 37  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.57359530e+03 6.31225901e+02 2.37613039e+02 1.52903605e+02
 5.23329779e+01 4.91582722e+01 4.72810812e+00 8.10084969e+00
 3.93258304e-01 1.25465248e+00 8.59071700e+00 4.29063092e+01
 4.90396333e-01 1.19720469e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.318057254135052
cond(S) = 11.012455410239834
E1 = -687.2372235839769  E_coul = 184.89193187721037
init E= -502.345291706766
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.681910073766752  LUMO = 182.42467216504
  mo_energy =
[-1.20835126e+02 -1.32478096e+01 -7.62194518e+00 -7.62194518e+00
 -7.62194518e+00 -1.65001416e+00 -6.81910074e-01 -6.81910074e-01
 -6.81910074e-01  1.82424672e+02  2.17859662e+03]
E1 = -704.90479862214  E_coul = 198.98241253540922
cycle= 1 E= -505.922386086731  delta_E= -3.58  |g|= 0.264  |ddm|= 0.296
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.277239
diis-c [-0.07686172  1.        ]
  HOMO = -0.235592878845816  LUMO = 183.815149826697
  mo_energy =
[-1.19451484e+02 -1.22120404e+01 -6.64666898e+00 -6.64666898e+00
 -6.64666898e+00 -1.15973905e+00 -2.35592879e-01 -2.35592879e-01
 -2.35592879e-01  1.83815150e+02  2.17986415e+03]
E1 = -704.8948438045473  E_coul = 198.97233185445
cycle= 2 E= -505.922511950097  delta_E= -0.000126  |g|= 0.00222  |ddm|= 0.00404
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00222774
diis-c [-3.93686801e-06 -3.66702749e-03  1.00366703e+00]
  HOMO = -0.235635988296573  LUMO = 183.813216872461
  mo_energy =
[-1.19454649e+02 -1.22123603e+01 -6.64714477e+00 -6.64714477e+00
 -6.64714477e+00 -1.15975661e+00 -2.35635988e-01 -2.35635988e-01
 -2.35635988e-01  1.83813217e+02  2.17985745e+03]
E1 = -704.8947657610859  E_coul = 198.9722537990225
cycle= 3 E= -505.922511962063  delta_E= -1.2e-08  |g|= 2.07e-05  |ddm|= 3.51e-05
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=2.73717e-05
diis-c [-8.81779296e-12  5.29061542e-05 -1.39547177e-02  1.01390181e+00]
  HOMO = -0.235636172224657  LUMO = 183.813212882964
  mo_energy =
[-1.19454660e+02 -1.22123617e+01 -6.64714736e+00 -6.64714736e+00
 -6.64714736e+00 -1.15975665e+00 -2.35636172e-01 -2.35636172e-01
 -2.35636172e-01  1.83813213e+02  2.17985745e+03]
E1 = -704.894765327667  E_coul = 198.9722533656027
cycle= 4 E= -505.922511962064  delta_E= -9.09e-13  |g|= 2.79e-08  |ddm|= 2.59e-07
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -704.894765327667  E_coul = 198.9722533656027
  HOMO = -0.235636171973563  LUMO = 183.813212918351
  mo_energy =
[-1.19454660e+02 -1.22123617e+01 -6.64714735e+00 -6.64714735e+00
 -6.64714735e+00 -1.15975665e+00 -2.35636172e-01 -2.35636172e-01
 -2.35636172e-01  1.83813213e+02  2.17985745e+03]
E1 = -704.8947653285361  E_coul = 198.9722533664719
Extra cycle  E= -505.922511962064  delta_E= 1.14e-13  |g|= 2.17e-10  |ddm|= 2.64e-10
    CPU time for scf_cycle      0.10 sec, wall time      0.10 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 11.012455410239834
E1 = -704.8947653285361  E_coul = 198.9722533664719
init E= -505.922511962064
    CPU time for initialize scf      0.06 sec, wall time      0.06 sec
  HOMO = -0.235636171971831  LUMO = 183.813212918615
  mo_energy =
[-1.19454660e+02 -1.22123617e+01 -6.64714735e+00 -6.64714735e+00
 -6.64714735e+00 -1.15975665e+00 -2.35636172e-01 -2.35636172e-01
 -2.35636172e-01  1.83813213e+02  2.17985745e+03]
E1 = -704.8947653285423  E_coul = 198.97225336647818
cycle= 1 E= -505.922511962064  delta_E=    0  |g|= 1.99e-12  |ddm|= 1.93e-12
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -704.8947653285423  E_coul = 198.97225336647818
  HOMO = -0.235636171971817  LUMO = 183.813212918617
  mo_energy =
[-1.19454660e+02 -1.22123617e+01 -6.64714735e+00 -6.64714735e+00
 -6.64714735e+00 -1.15975665e+00 -2.35636172e-01 -2.35636172e-01
 -2.35636172e-01  1.83813213e+02  2.17985745e+03]
E1 = -704.8947653285428  E_coul = 198.97225336647836
Extra cycle  E= -505.922511962064  delta_E= -2.84e-13  |g|= 6.3e-13  |ddm|= 9.2e-15
    CPU time for scf_cycle      0.12 sec, wall time      0.13 sec
exp = [1.57359530e+03 2.37613039e+02 5.23329779e+01 4.72810812e+00
 3.93258304e-01 8.59071700e+00 4.90396333e-01]
grad_E = [ 1.14142563e-08 -1.06302436e-07  3.15237080e-07  1.09882630e-06
  3.09383941e-06  1.15707572e-06  6.25950105e-06]
 message: Optimization terminated successfully
 success: True
  status: 0
     fun: -505.92251196206416
       x: [ 1.574e+03  2.376e+02  5.233e+01  4.728e+00  3.933e-01
            8.591e+00  4.904e-01]
     nit: 43
     jac: [ 1.141e-08 -1.063e-07  3.152e-07  1.099e-06  3.094e-06
            1.157e-06  6.260e-06]
    nfev: 46
    njev: 43
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((7, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.5820650117923668e+02,6.8360631861859034e+01,4.6647996209811691e+00,3.9711619128280629e-01,8.5710114329191196e+00,4.8957520672686806e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "5s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:42:30 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  1573.59529639        1
[INPUT] 0    0    [1    /1   ]  237.613039191        1
[INPUT] 0    0    [1    /1   ]  52.3329778701        1
[INPUT] 0    0    [1    /1   ]  4.72810812351        1
[INPUT] 0    0    [1    /1   ]  0.393258304262       1
[INPUT] 1    0    [1    /1   ]  8.59071700307        1
[INPUT] 1    0    [1    /1   ]  0.490396332832       1

nuclear repulsion = 0
number of shells = 7
number of NR pGTOs = 11
number of NR cGTOs = 11
basis = {'Ar': [[0, [1573.5952963858392, 1.0]], [0, [237.6130391914597, 1.0]], [0, [52.3329778701382, 1.0]], [0, [4.728108123512209, 1.0]], [0, [0.3932583042616964, 1.0]], [1, [8.590717003066175, 1.0]], [1, [0.4903963328323987, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [1573.59529639]
bas 1, expnt(s) = [237.61303919]
bas 2, expnt(s) = [52.33297787]
bas 3, expnt(s) = [4.72810812]
bas 4, expnt(s) = [0.3932583]
bas 5, expnt(s) = [8.590717]
bas 6, expnt(s) = [0.49039633]
CPU time:       156.88
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]
 [ 0  1  1  1  0 36 37  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.57359530e+03 6.31225901e+02 2.37613039e+02 1.52903605e+02
 5.23329779e+01 4.91582722e+01 4.72810812e+00 8.10084969e+00
 3.93258304e-01 1.25465248e+00 8.59071700e+00 4.29063092e+01
 4.90396333e-01 1.19720469e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.318057254135052
cond(S) = 11.012455410239834
E1 = -687.2372235839769  E_coul = 184.89193187721037
init E= -502.345291706766
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.681910073766752  LUMO = 182.42467216504
  mo_energy =
[-1.20835126e+02 -1.32478096e+01 -7.62194518e+00 -7.62194518e+00
 -7.62194518e+00 -1.65001416e+00 -6.81910074e-01 -6.81910074e-01
 -6.81910074e-01  1.82424672e+02  2.17859662e+03]
E1 = -704.90479862214  E_coul = 198.98241253540922
cycle= 1 E= -505.922386086731  delta_E= -3.58  |g|= 0.264  |ddm|= 0.296
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.277239
diis-c [-0.07686172  1.        ]
  HOMO = -0.235592878845816  LUMO = 183.815149826697
  mo_energy =
[-1.19451484e+02 -1.22120404e+01 -6.64666898e+00 -6.64666898e+00
 -6.64666898e+00 -1.15973905e+00 -2.35592879e-01 -2.35592879e-01
 -2.35592879e-01  1.83815150e+02  2.17986415e+03]
E1 = -704.8948438045473  E_coul = 198.97233185445
cycle= 2 E= -505.922511950097  delta_E= -0.000126  |g|= 0.00222  |ddm|= 0.00404
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00222774
diis-c [-3.93686801e-06 -3.66702749e-03  1.00366703e+00]
  HOMO = -0.235635988296573  LUMO = 183.813216872461
  mo_energy =
[-1.19454649e+02 -1.22123603e+01 -6.64714477e+00 -6.64714477e+00
 -6.64714477e+00 -1.15975661e+00 -2.35635988e-01 -2.35635988e-01
 -2.35635988e-01  1.83813217e+02  2.17985745e+03]
E1 = -704.8947657610859  E_coul = 198.9722537990225
cycle= 3 E= -505.922511962063  delta_E= -1.2e-08  |g|= 2.07e-05  |ddm|= 3.51e-05
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=2.73717e-05
diis-c [-8.81779296e-12  5.29061542e-05 -1.39547177e-02  1.01390181e+00]
  HOMO = -0.235636172224657  LUMO = 183.813212882964
  mo_energy =
[-1.19454660e+02 -1.22123617e+01 -6.64714736e+00 -6.64714736e+00
 -6.64714736e+00 -1.15975665e+00 -2.35636172e-01 -2.35636172e-01
 -2.35636172e-01  1.83813213e+02  2.17985745e+03]
E1 = -704.894765327667  E_coul = 198.9722533656027
cycle= 4 E= -505.922511962064  delta_E= -9.09e-13  |g|= 2.79e-08  |ddm|= 2.59e-07
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -704.894765327667  E_coul = 198.9722533656027
  HOMO = -0.235636171973563  LUMO = 183.813212918351
  mo_energy =
[-1.19454660e+02 -1.22123617e+01 -6.64714735e+00 -6.64714735e+00
 -6.64714735e+00 -1.15975665e+00 -2.35636172e-01 -2.35636172e-01
 -2.35636172e-01  1.83813213e+02  2.17985745e+03]
E1 = -704.8947653285361  E_coul = 198.9722533664719
Extra cycle  E= -505.922511962064  delta_E= 1.14e-13  |g|= 2.17e-10  |ddm|= 2.64e-10
    CPU time for scf_cycle      0.10 sec, wall time      0.10 sec
exp = [1.57359530e+03 2.37613039e+02 5.23329779e+01 4.72810812e+00
 3.93258304e-01 8.59071700e+00 4.90396333e-01]
E = -505.92251196206416
E = -505.92251196206416
exp = [1.5735952963858392e+03,2.3761303919145971e+02,5.2332977870138201e+01,4.7281081235122091e+00,3.9325830426169639e-01,8.5907170030661746e+00,4.9039633283239870e-01]
