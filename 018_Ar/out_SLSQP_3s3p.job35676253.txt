created virtual environment CPython3.10.2.final.0-64 in 600ms
  creator CPython3Posix(dest=/localscratch/nike.35676253.0/ENV, clear=True, no_vcs_ignore=False, global=False)
  seeder FromAppData(download=False, pip=bundle, setuptools=bundle, wheel=bundle, via=copy, app_data_dir=/home/nike/.local/share/virtualenv)
    added seed packages: pip==23.0.1, setuptools==67.3.3, wheel==0.38.4+computecanada
  activators BashActivator,CShellActivator,FishActivator,NushellActivator,PowerShellActivator,PythonActivator
Looking in links: /cvmfs/soft.computecanada.ca/custom/python/wheelhouse/gentoo/avx512, /cvmfs/soft.computecanada.ca/custom/python/wheelhouse/gentoo/avx2, /cvmfs/soft.computecanada.ca/custom/python/wheelhouse/gentoo/generic, /cvmfs/soft.computecanada.ca/custom/python/wheelhouse/generic
Requirement already satisfied: pip in /localscratch/nike.35676253.0/ENV/lib/python3.10/site-packages (23.0.1)
Looking in links: /cvmfs/soft.computecanada.ca/custom/python/wheelhouse/gentoo/avx512, /cvmfs/soft.computecanada.ca/custom/python/wheelhouse/gentoo/avx2, /cvmfs/soft.computecanada.ca/custom/python/wheelhouse/gentoo/generic, /cvmfs/soft.computecanada.ca/custom/python/wheelhouse/generic
Processing /home/nike/pyscf_ad/dist/pyscf-2.1.1+ad-cp310-cp310-linux_x86_64.whl
Processing /home/nike/properties_ad/dist/pyscf_properties-0.1.0+ad-py3-none-any.whl
Processing /cvmfs/soft.computecanada.ca/custom/python/wheelhouse/generic/absl_py-1.4.0+computecanada-py3-none-any.whl
Processing /cvmfs/soft.computecanada.ca/custom/python/wheelhouse/gentoo/generic/contourpy-1.0.7+computecanada-cp310-cp310-linux_x86_64.whl
Processing /cvmfs/soft.computecanada.ca/custom/python/wheelhouse/generic/cycler-0.11.0+computecanada-py3-none-any.whl
Processing /cvmfs/soft.computecanada.ca/custom/python/wheelhouse/generic/fonttools-4.39.0+computecanada-cp310-cp310-linux_x86_64.whl
Processing /cvmfs/soft.computecanada.ca/custom/python/wheelhouse/gentoo/avx2/h5py-3.8.0+computecanada-cp310-cp310-linux_x86_64.whl
Processing /cvmfs/soft.computecanada.ca/custom/python/wheelhouse/generic/jax-0.4.2+computecanada-py3-none-any.whl
Processing /cvmfs/soft.computecanada.ca/custom/python/wheelhouse/gentoo/generic/jaxlib-0.4.2+cuda11.cudnn82.computecanada-cp310-cp310-linux_x86_64.whl
Processing /cvmfs/soft.computecanada.ca/custom/python/wheelhouse/generic/jaxopt-0.6+computecanada-py3-none-any.whl
Processing /cvmfs/soft.computecanada.ca/custom/python/wheelhouse/gentoo/avx2/kiwisolver-1.4.4+computecanada-cp310-cp310-linux_x86_64.whl
Processing /cvmfs/soft.computecanada.ca/custom/python/wheelhouse/gentoo/avx2/matplotlib-3.7.0+computecanada-cp310-cp310-linux_x86_64.whl
Processing /cvmfs/soft.computecanada.ca/custom/python/wheelhouse/gentoo/generic/numpy-1.24.2+computecanada-cp310-cp310-linux_x86_64.whl
Processing /cvmfs/soft.computecanada.ca/custom/python/wheelhouse/generic/opt_einsum-3.3.0+computecanada-py3-none-any.whl
Processing /cvmfs/soft.computecanada.ca/custom/python/wheelhouse/generic/packaging-23.0+computecanada-py3-none-any.whl
Processing /cvmfs/soft.computecanada.ca/custom/python/wheelhouse/gentoo/avx2/Pillow-9.4.0+computecanada-cp310-cp310-linux_x86_64.whl
Processing /cvmfs/soft.computecanada.ca/custom/python/wheelhouse/generic/pyparsing-3.0.9+computecanada-py3-none-any.whl
Processing /cvmfs/soft.computecanada.ca/custom/python/wheelhouse/generic/pyscfad-0.1.2+computecanada-py3-none-any.whl
Processing /cvmfs/soft.computecanada.ca/custom/python/wheelhouse/generic/python_dateutil-2.8.2+computecanada-py2.py3-none-any.whl
Processing /cvmfs/soft.computecanada.ca/custom/python/wheelhouse/gentoo/generic/scipy-1.10.1+computecanada-cp310-cp310-linux_x86_64.whl
Processing /cvmfs/soft.computecanada.ca/custom/python/wheelhouse/generic/six-1.16.0+computecanada-py2.py3-none-any.whl
Processing /cvmfs/soft.computecanada.ca/custom/python/wheelhouse/generic/typing_extensions-4.5.0+computecanada-py3-none-any.whl
Installing collected packages: typing_extensions, six, pyparsing, Pillow, packaging, numpy, kiwisolver, fonttools, cycler, absl_py, scipy, python-dateutil, opt-einsum, h5py, contourpy, pyscf, matplotlib, jaxlib, pyscf-properties, jax, jaxopt, pyscfad
Successfully installed Pillow-9.4.0+computecanada absl_py-1.4.0+computecanada contourpy-1.0.7+computecanada cycler-0.11.0+computecanada fonttools-4.39.0+computecanada h5py-3.8.0+computecanada jax-0.4.2+computecanada jaxlib-0.4.2+cuda11.cudnn82.computecanada jaxopt-0.6+computecanada kiwisolver-1.4.4+computecanada matplotlib-3.7.0+computecanada numpy-1.24.2+computecanada opt-einsum-3.3.0+computecanada packaging-23.0+computecanada pyparsing-3.0.9+computecanada pyscf-2.1.1+ad pyscf-properties-0.1.0+ad pyscfad-0.1.2+computecanada python-dateutil-2.8.2+computecanada scipy-1.10.1+computecanada six-1.16.0+computecanada typing_extensions-4.5.0+computecanada
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((6, 2))
#exps[:, 0] = decaying_nums(5)

# S
exps[0,0] = 9.5045827955887916e+01
exps[1,0] = 4.4881042475048387e+00
exps[2,0] = 3.9799528004692630e-01
             
# P          
exps[3,0] = 18.0
exps[4,0] = 8.5469650038718257e+00
exps[5,0] = 4.8929328703550412e-01

basis = "3s3p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc11947.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 24
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 18 12:43:13 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35676253.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 32000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 32000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 32000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  95.0458279559        1
[INPUT] 0    0    [1    /1   ]  4.4881042475         1
[INPUT] 0    0    [1    /1   ]  0.397995280047       1
[INPUT] 1    0    [1    /1   ]  18                   1
[INPUT] 1    0    [1    /1   ]  8.54696500387        1
[INPUT] 1    0    [1    /1   ]  0.489293287036       1

nuclear repulsion = 0
number of shells = 6
number of NR pGTOs = 12
number of NR cGTOs = 12
basis = {'Ar': [[0, [95.04582795588792, 1.0]], [0, [4.488104247504839, 1.0]], [0, [0.3979952800469263, 1.0]], [1, [18.0, 1.0]], [1, [8.546965003871826, 1.0]], [1, [0.4892932870355041, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [95.04582796]
bas 1, expnt(s) = [4.48810425]
bas 2, expnt(s) = [0.39799528]
bas 3, expnt(s) = [18.]
bas 4, expnt(s) = [8.546965]
bas 5, expnt(s) = [0.48929329]
CPU time:         1.27
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  1  1  1  0 30 31  0]
 [ 0  1  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]]
arg.env = [  0.           0.           0.           0.           0.
   0.           0.           0.           0.           0.
   0.           0.           0.           0.           0.
   0.           0.           0.           0.           0.
   0.           0.           0.           0.          95.04582796
  76.90681357   4.48810425   7.79044429   0.39799528   1.26597015
  18.         108.1620784    8.546965    42.63333431   0.48929329
   1.19383956]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.318619505899292
cond(S) = 12.2682892283917
E1 = -644.1650428055124  E_coul = 189.98374565672373
init E= -454.181297148789
    CPU time for initialize scf      8.10 sec, wall time      0.55 sec
  HOMO = -0.759906646180836  LUMO = 24.5598838734659
  mo_energy =
[-98.92814114 -10.87356514  -8.03894117  -8.03894117  -8.03894117
  -1.3986729   -0.75990665  -0.75990665  -0.75990665  24.55988387
  24.55988387  24.55988387]
E1 = -674.376886679634  E_coul = 209.6794092638529
cycle= 1 E= -464.697477415781  delta_E= -10.5  |g|= 0.99  |ddm|= 0.651
    CPU time for cycle= 1      0.25 sec, wall time      0.26 sec
diis-norm(errvec)=0.697926
diis-c [-0.48710083  1.        ]
  HOMO = -0.285808438474349  LUMO = 26.126438459129
  mo_energy =
[-96.38886942  -9.4850235   -6.64447872  -6.64447872  -6.64447872
  -0.85240073  -0.28580844  -0.28580844  -0.28580844  26.12643846
  26.12643846  26.12643846]
E1 = -673.7278165155612  E_coul = 209.01441344648904
cycle= 2 E= -464.713403069072  delta_E= -0.0159  |g|= 0.0226  |ddm|= 0.111
    CPU time for cycle= 2      0.08 sec, wall time      0.09 sec
diis-norm(errvec)=0.0170126
diis-c [-3.90392812e-05  2.21706947e-02  9.77829305e-01]
  HOMO = -0.289419565826059  LUMO = 26.0806482961004
  mo_energy =
[-96.51578985  -9.5299527   -6.68971055  -6.68971055  -6.68971055
  -0.85899746  -0.28941957  -0.28941957  -0.28941957  26.0806483
  26.0806483   26.0806483 ]
E1 = -673.7408510816965  E_coul = 209.02744032920688
cycle= 3 E= -464.71341075249  delta_E= -7.68e-06  |g|= 0.00025  |ddm|= 0.00208
    CPU time for cycle= 3      0.01 sec, wall time      0.08 sec
diis-norm(errvec)=0.000160576
diis-c [-1.02867401e-12 -5.29097096e-04 -2.53411564e-02  1.02587025e+00]
  HOMO = -0.28945051878879  LUMO = 26.0805367064955
  mo_energy =
[-96.51590243  -9.53008348  -6.68986983  -6.68986983  -6.68986983
  -0.8590456   -0.28945052  -0.28945052  -0.28945052  26.08053671
  26.08053671  26.08053671]
E1 = -673.7408380980088  E_coul = 209.02742734438223
cycle= 4 E= -464.713410753627  delta_E= -1.14e-09  |g|= 9.38e-08  |ddm|= 3.2e-05
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=6.77447e-08
diis-c [-6.40244802e-18 -1.38218938e-08  3.86856040e-06 -1.10945002e-04
  1.00010709e+00]
  HOMO = -0.289450490123302  LUMO = 26.080536678399
  mo_energy =
[-96.51590225  -9.53008339  -6.68986968  -6.68986968  -6.68986968
  -0.85904558  -0.28945049  -0.28945049  -0.28945049  26.08053668
  26.08053668  26.08053668]
E1 = -673.7408380372573  E_coul = 209.0274272836309
cycle= 5 E= -464.713410753626  delta_E= 2.27e-13  |g|= 2.44e-12  |ddm|= 9.85e-09
    CPU time for cycle= 5      0.01 sec, wall time      0.01 sec
E1 = -673.7408380372573  E_coul = 209.0274272836309
  HOMO = -0.289450490122545  LUMO = 26.0805366783989
  mo_energy =
[-96.51590225  -9.53008339  -6.68986968  -6.68986968  -6.68986968
  -0.85904558  -0.28945049  -0.28945049  -0.28945049  26.08053668
  26.08053668  26.08053668]
E1 = -673.7408380372551  E_coul = 209.02742728362924
Extra cycle  E= -464.713410753626  delta_E= 4.55e-13  |g|= 9.55e-14  |ddm|= 2.66e-13
    CPU time for scf_cycle      8.48 sec, wall time      1.00 sec
exp = [95.04582796  4.48810425  0.39799528 18.          8.546965    0.48929329]
E = -464.7134107536259
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((6, 2))
#exps[:, 0] = decaying_nums(5)

# S
exps[0,0] = 9.5045827955887916e+01
exps[1,0] = 4.4881042475048387e+00
exps[2,0] = 3.9799528004692630e-01
             
# P          
exps[3,0] = 18.0
exps[4,0] = 8.5469650038718257e+00
exps[5,0] = 4.8929328703550412e-01

basis = "3s3p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc11947.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 24
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 18 12:43:15 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35676253.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 32000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 32000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 32000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  95.0458279559        1
[INPUT] 0    0    [1    /1   ]  4.4881042475         1
[INPUT] 0    0    [1    /1   ]  0.397995280047       1
[INPUT] 1    0    [1    /1   ]  18                   1
[INPUT] 1    0    [1    /1   ]  8.54696500387        1
[INPUT] 1    0    [1    /1   ]  0.489293287036       1

nuclear repulsion = 0
number of shells = 6
number of NR pGTOs = 12
number of NR cGTOs = 12
basis = {'Ar': [[0, [95.04582795588792, 1.0]], [0, [4.488104247504839, 1.0]], [0, [0.3979952800469263, 1.0]], [1, [18.0, 1.0]], [1, [8.546965003871826, 1.0]], [1, [0.4892932870355041, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [95.04582796]
bas 1, expnt(s) = [4.48810425]
bas 2, expnt(s) = [0.39799528]
bas 3, expnt(s) = [18.]
bas 4, expnt(s) = [8.546965]
bas 5, expnt(s) = [0.48929329]
CPU time:         9.96
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  1  1  1  0 30 31  0]
 [ 0  1  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]]
arg.env = [  0.           0.           0.           0.           0.
   0.           0.           0.           0.           0.
   0.           0.           0.           0.           0.
   0.           0.           0.           0.           0.
   0.           0.           0.           0.          95.04582796
  76.90681357   4.48810425   7.79044429   0.39799528   1.26597015
  18.         108.1620784    8.546965    42.63333431   0.48929329
   1.19383956]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.318619505899292
cond(S) = 12.2682892283917
E1 = -644.1650428055124  E_coul = 189.98374565672373
init E= -454.181297148789
    CPU time for initialize scf      7.02 sec, wall time      0.32 sec
  HOMO = -0.759906646180836  LUMO = 24.5598838734659
  mo_energy =
[-98.92814114 -10.87356514  -8.03894117  -8.03894117  -8.03894117
  -1.3986729   -0.75990665  -0.75990665  -0.75990665  24.55988387
  24.55988387  24.55988387]
E1 = -674.376886679634  E_coul = 209.6794092638529
cycle= 1 E= -464.697477415781  delta_E= -10.5  |g|= 0.99  |ddm|= 0.651
    CPU time for cycle= 1      0.20 sec, wall time      0.01 sec
diis-norm(errvec)=0.697926
diis-c [-0.48710083  1.        ]
  HOMO = -0.285808438474349  LUMO = 26.126438459129
  mo_energy =
[-96.38886942  -9.4850235   -6.64447872  -6.64447872  -6.64447872
  -0.85240073  -0.28580844  -0.28580844  -0.28580844  26.12643846
  26.12643846  26.12643846]
E1 = -673.7278165155612  E_coul = 209.01441344648904
cycle= 2 E= -464.713403069072  delta_E= -0.0159  |g|= 0.0226  |ddm|= 0.111
    CPU time for cycle= 2      0.16 sec, wall time      0.02 sec
diis-norm(errvec)=0.0170126
diis-c [-3.90392812e-05  2.21706947e-02  9.77829305e-01]
  HOMO = -0.289419565826059  LUMO = 26.0806482961004
  mo_energy =
[-96.51578985  -9.5299527   -6.68971055  -6.68971055  -6.68971055
  -0.85899746  -0.28941957  -0.28941957  -0.28941957  26.0806483
  26.0806483   26.0806483 ]
E1 = -673.7408510816965  E_coul = 209.02744032920688
cycle= 3 E= -464.71341075249  delta_E= -7.68e-06  |g|= 0.00025  |ddm|= 0.00208
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.000160576
diis-c [-1.02867401e-12 -5.29097096e-04 -2.53411564e-02  1.02587025e+00]
  HOMO = -0.28945051878879  LUMO = 26.0805367064955
  mo_energy =
[-96.51590243  -9.53008348  -6.68986983  -6.68986983  -6.68986983
  -0.8590456   -0.28945052  -0.28945052  -0.28945052  26.08053671
  26.08053671  26.08053671]
E1 = -673.7408380980088  E_coul = 209.02742734438223
cycle= 4 E= -464.713410753627  delta_E= -1.14e-09  |g|= 9.38e-08  |ddm|= 3.2e-05
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=6.77447e-08
diis-c [-6.40244802e-18 -1.38218938e-08  3.86856040e-06 -1.10945002e-04
  1.00010709e+00]
  HOMO = -0.289450490123302  LUMO = 26.080536678399
  mo_energy =
[-96.51590225  -9.53008339  -6.68986968  -6.68986968  -6.68986968
  -0.85904558  -0.28945049  -0.28945049  -0.28945049  26.08053668
  26.08053668  26.08053668]
E1 = -673.7408380372573  E_coul = 209.0274272836309
cycle= 5 E= -464.713410753626  delta_E= 2.27e-13  |g|= 2.44e-12  |ddm|= 9.85e-09
    CPU time for cycle= 5      0.01 sec, wall time      0.01 sec
E1 = -673.7408380372573  E_coul = 209.0274272836309
  HOMO = -0.289450490122545  LUMO = 26.0805366783989
  mo_energy =
[-96.51590225  -9.53008339  -6.68986968  -6.68986968  -6.68986968
  -0.85904558  -0.28945049  -0.28945049  -0.28945049  26.08053668
  26.08053668  26.08053668]
E1 = -673.7408380372551  E_coul = 209.02742728362924
Extra cycle  E= -464.713410753626  delta_E= 4.55e-13  |g|= 9.55e-14  |ddm|= 2.66e-13
    CPU time for scf_cycle      7.43 sec, wall time      0.39 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 12.2682892283917
E1 = -673.7408380372551  E_coul = 209.02742728362924
init E= -464.713410753626
    CPU time for initialize scf      4.81 sec, wall time      0.29 sec
  HOMO = -0.289450490122559  LUMO = 26.0805366783989
  mo_energy =
[-96.51590225  -9.53008339  -6.68986968  -6.68986968  -6.68986968
  -0.85904558  -0.28945049  -0.28945049  -0.28945049  26.08053668
  26.08053668  26.08053668]
E1 = -673.7408380372553  E_coul = 209.0274272836293
cycle= 1 E= -464.713410753626  delta_E= -1.14e-13  |g|= 1.71e-14  |ddm|= 1.11e-14
    CPU time for cycle= 1      0.21 sec, wall time      0.01 sec
E1 = -673.7408380372553  E_coul = 209.0274272836293
  HOMO = -0.289450490122556  LUMO = 26.0805366783989
  mo_energy =
[-96.51590225  -9.53008339  -6.68986968  -6.68986968  -6.68986968
  -0.85904558  -0.28945049  -0.28945049  -0.28945049  26.08053668
  26.08053668  26.08053668]
E1 = -673.7408380372557  E_coul = 209.02742728362966
Extra cycle  E= -464.713410753626  delta_E=    0  |g|= 5.52e-14  |ddm|= 6.15e-15
    CPU time for scf_cycle      5.92 sec, wall time      1.18 sec
exp = [95.04582796  4.48810425  0.39799528 18.          8.546965    0.48929329]
grad_E = [ 0.00596729  0.1647751   0.17518342 -0.68438837  2.77378508 -1.28059113]
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((6, 2))
#exps[:, 0] = decaying_nums(5)

# S
exps[0,0] = 9.5045827955887916e+01
exps[1,0] = 4.4881042475048387e+00
exps[2,0] = 3.9799528004692630e-01
             
# P          
exps[3,0] = 18.0
exps[4,0] = 8.5469650038718257e+00
exps[5,0] = 4.8929328703550412e-01

basis = "3s3p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc11947.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 24
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 18 12:43:21 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35676253.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 32000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 32000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 32000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  95.0398606704        1
[INPUT] 0    0    [1    /1   ]  4.32332914551        1
[INPUT] 0    0    [1    /1   ]  0.222811856884       1
[INPUT] 1    0    [1    /1   ]  18.684388366         1
[INPUT] 1    0    [1    /1   ]  5.77317992077        1
[INPUT] 1    0    [1    /1   ]  1.76988441318        1

nuclear repulsion = 0
number of shells = 6
number of NR pGTOs = 12
number of NR cGTOs = 12
basis = {'Ar': [[0, [95.03986067040486, 1.0]], [0, [4.323329145506704, 1.0]], [0, [0.22281185688370753, 1.0]], [1, [18.684388366015554, 1.0]], [1, [5.7731799207719625, 1.0]], [1, [1.7698844131797062, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [95.03986067]
bas 1, expnt(s) = [4.32332915]
bas 2, expnt(s) = [0.22281186]
bas 3, expnt(s) = [18.68438837]
bas 4, expnt(s) = [5.77317992]
bas 5, expnt(s) = [1.76988441]
CPU time:        27.89
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  1  1  1  0 30 31  0]
 [ 0  1  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]]
arg.env = [  0.           0.           0.           0.           0.
   0.           0.           0.           0.           0.
   0.           0.           0.           0.           0.
   0.           0.           0.           0.           0.
   0.           0.           0.           0.          95.03986067
  76.9031922    4.32332915   7.5749322    0.22281186   0.81934866
  18.68438837 113.32689758   5.77317992  26.10677692   1.76988441
   5.9554629 ]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 14.471248295755242
cond(S) = 11.900975707696206
E1 = -624.4037422671743  E_coul = 170.7109390965476
init E= -453.692803170627
    CPU time for initialize scf      0.20 sec, wall time      0.02 sec
  HOMO = -0.114918016344385  LUMO = 21.3313972346104
  mo_energy =
[-99.75472811 -12.18695435 -10.76577068 -10.76577068 -10.76577068
  -2.37996416  -0.11491802  -0.11491802  -0.11491802  21.33139723
  21.33139723  21.33139723]
E1 = -697.5322532254354  E_coul = 238.40989996184342
cycle= 1 E= -459.122353263592  delta_E= -5.43  |g|= 1.72  |ddm|= 3.08
    CPU time for cycle= 1      0.21 sec, wall time      0.01 sec
diis-norm(errvec)=1.14801
diis-c [-1.31792548  1.        ]
  HOMO = 2.97600048833904  LUMO = 26.0628146921488
  mo_energy =
[-93.78267514  -7.38639387  -5.96770305  -5.96770305  -5.96770305
  -0.24150342   2.97600049   2.97600049   2.97600049  26.06281469
  26.06281469  26.06281469]
E1 = -695.9254069905388  E_coul = 236.7465632856177
cycle= 2 E= -459.178843704921  delta_E= -0.0565  |g|= 0.0869  |ddm|= 0.335
    CPU time for cycle= 2      0.14 sec, wall time      0.01 sec
diis-norm(errvec)=0.0812683
diis-c [-0.00109792  0.06073857  0.93926143]
  HOMO = 2.94450125809829  LUMO = 25.9667276519865
  mo_energy =
[-94.05282172  -7.49363831  -6.06700915  -6.06700915  -6.06700915
  -0.25177203   2.94450126   2.94450126   2.94450126  25.96672765
  25.96672765  25.96672765]
E1 = -695.9908786136231  E_coul = 236.8119121619354
cycle= 3 E= -459.178966451688  delta_E= -0.000123  |g|= 0.00235  |ddm|= 0.0105
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.0024932
diis-c [-1.54815224e-10 -1.61240395e-03 -5.12728034e-02  1.05288521e+00]
  HOMO = 2.94360766231337  LUMO = 25.9646706403911
  mo_energy =
[-94.05753135  -7.49605838  -6.06943691  -6.06943691  -6.06943691
  -0.25206083   2.94360766   2.94360766   2.94360766  25.96467064
  25.96467064  25.96467064]
E1 = -695.991681214344  E_coul = 236.81271467568925
cycle= 4 E= -459.178966538655  delta_E= -8.7e-08  |g|= 1.74e-06  |ddm|= 0.000168
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=1.3445e-06
diis-c [ 1.02954980e-19 -4.91390685e-08  2.72454509e-05 -4.05319021e-04
  1.00037812e+00]
  HOMO = 2.94360862003433  LUMO = 25.9646705240168
  mo_energy =
[-94.0575284   -7.49605713  -6.06943545  -6.06943545  -6.06943545
  -0.25206069   2.94360862   2.94360862   2.94360862  25.96467052
  25.96467052  25.96467052]
E1 = -695.9916796593917  E_coul = 236.8127131207369
cycle= 5 E= -459.178966538655  delta_E=    0  |g|= 7.31e-11  |ddm|= 2.96e-07
    CPU time for cycle= 5      0.01 sec, wall time      0.01 sec
E1 = -695.9916796593917  E_coul = 236.8127131207369
  HOMO = 2.94360862006082  LUMO = 25.9646705240668
  mo_energy =
[-94.0575284   -7.49605713  -6.06943545  -6.06943545  -6.06943545
  -0.25206069   2.94360862   2.94360862   2.94360862  25.96467052
  25.96467052  25.96467052]
E1 = -695.9916796593217  E_coul = 236.8127131206668
Extra cycle  E= -459.178966538655  delta_E= -1.14e-13  |g|= 3.64e-12  |ddm|= 1.44e-11
    CPU time for scf_cycle      0.60 sec, wall time      0.09 sec
exp = [95.03986067  4.32332915  0.22281186 18.68438837  5.77317992  1.76988441]
E = -459.1789665386549
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((6, 2))
#exps[:, 0] = decaying_nums(5)

# S
exps[0,0] = 9.5045827955887916e+01
exps[1,0] = 4.4881042475048387e+00
exps[2,0] = 3.9799528004692630e-01
             
# P          
exps[3,0] = 18.0
exps[4,0] = 8.5469650038718257e+00
exps[5,0] = 4.8929328703550412e-01

basis = "3s3p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc11947.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 24
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 18 12:43:21 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35676253.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 32000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 32000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 32000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  95.0439169559        1
[INPUT] 0    0    [1    /1   ]  4.4353356622         1
[INPUT] 0    0    [1    /1   ]  0.34189347039        1
[INPUT] 1    0    [1    /1   ]  18.2191727114        1
[INPUT] 1    0    [1    /1   ]  7.65867112338        1
[INPUT] 1    0    [1    /1   ]  0.899397612602       1

nuclear repulsion = 0
number of shells = 6
number of NR pGTOs = 12
number of NR cGTOs = 12
basis = {'Ar': [[0, [95.04391695592975, 1.0]], [0, [4.435335662204218, 1.0]], [0, [0.3418934703903457, 1.0]], [1, [18.219172711367843, 1.0]], [1, [7.658671123375239, 1.0]], [1, [0.8993976126023788, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [95.04391696]
bas 1, expnt(s) = [4.43533566]
bas 2, expnt(s) = [0.34189347]
bas 3, expnt(s) = [18.21917271]
bas 4, expnt(s) = [7.65867112]
bas 5, expnt(s) = [0.89939761]
CPU time:        28.52
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  1  1  1  0 30 31  0]
 [ 0  1  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]]
arg.env = [  0.           0.           0.           0.           0.
   0.           0.           0.           0.           0.
   0.           0.           0.           0.           0.
   0.           0.           0.           0.           0.
   0.           0.           0.           0.          95.04391696
  76.90565385   4.43533566   7.72164611   0.34189347   1.12962197
  18.21917271 109.8108387    7.65867112  37.16859701   0.89939761
   2.55519504]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 16.283058360106295
cond(S) = 10.343091330076694
E1 = -645.4389630138586  E_coul = 188.9597108368371
init E= -456.479252177022
    CPU time for initialize scf      0.18 sec, wall time      0.02 sec
  HOMO = -0.514777526118386  LUMO = 23.829391598279
  mo_energy =
[-98.76549    -10.8523133   -8.71172789  -8.71172789  -8.71172789
  -1.61250169  -0.51477753  -0.51477753  -0.51477753  23.8293916
  23.8293916   23.8293916 ]
E1 = -690.188656041466  E_coul = 224.84744430616306
cycle= 1 E= -465.341211735303  delta_E= -8.86  |g|= 1.16  |ddm|= 1.08
    CPU time for cycle= 1      0.21 sec, wall time      0.01 sec
diis-norm(errvec)=0.845012
diis-c [-0.71404569  1.        ]
  HOMO = 0.801578427414594  LUMO = 26.4135373145549
  mo_energy =
[-95.13102985  -8.3727556   -6.24557544  -6.24557544  -6.24557544
  -0.42288604   0.80157843   0.80157843   0.80157843  26.41353731
  26.41353731  26.41353731]
E1 = -689.3089312952417  E_coul = 223.94481525294992
cycle= 2 E= -465.364116042292  delta_E= -0.0229  |g|= 0.0366  |ddm|= 0.136
    CPU time for cycle= 2      0.15 sec, wall time      0.01 sec
diis-norm(errvec)=0.0300583
diis-c [-9.95459690e-05  3.24675271e-02  9.67532473e-01]
  HOMO = 0.790054277747083  LUMO = 26.3545576045867
  mo_energy =
[-95.29303538  -8.43271159  -6.30264064  -6.30264064  -6.30264064
  -0.43151188   0.79005428   0.79005428   0.79005428  26.3545576
  26.3545576   26.3545576 ]
E1 = -689.3329287043814  E_coul = 223.96879183160883
cycle= 3 E= -465.364136872773  delta_E= -2.08e-05  |g|= 0.00046  |ddm|= 0.00329
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.000364324
diis-c [-7.22973224e-12 -8.60094250e-04 -3.20897360e-02  1.03294983e+00]
  HOMO = 0.789932954912846  LUMO = 26.3542229561807
  mo_energy =
[-95.29361043  -8.43308925  -6.3030533   -6.3030533   -6.3030533
  -0.43160468   0.78993295   0.78993295   0.78993295  26.35422296
  26.35422296  26.35422296]
E1 = -689.3329469395344  E_coul = 223.96881006317457
cycle= 4 E= -465.36413687636  delta_E= -3.59e-09  |g|= 2.46e-07  |ddm|= 4.64e-05
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=1.87105e-07
diis-c [-1.33443813e-17 -9.43482608e-09  7.33931392e-06 -1.68892389e-04
  1.00016156e+00]
  HOMO = 0.789933076990006  LUMO = 26.3542228806082
  mo_energy =
[-95.29361     -8.43308905  -6.30305301  -6.30305301  -6.30305301
  -0.43160464   0.78993308   0.78993308   0.78993308  26.35422288
  26.35422288  26.35422288]
E1 = -689.3329467582577  E_coul = 223.96880988189778
cycle= 5 E= -465.36413687636  delta_E= -1.14e-13  |g|= 3.14e-12  |ddm|= 2.66e-08
    CPU time for cycle= 5      0.01 sec, wall time      0.01 sec
E1 = -689.3329467582577  E_coul = 223.96880988189778
  HOMO = 0.789933076991258  LUMO = 26.3542228806099
  mo_energy =
[-95.29361     -8.43308905  -6.30305301  -6.30305301  -6.30305301
  -0.43160464   0.78993308   0.78993308   0.78993308  26.35422288
  26.35422288  26.35422288]
E1 = -689.3329467582549  E_coul = 223.96880988189554
Extra cycle  E= -465.364136876359  delta_E= 5.12e-13  |g|= 7.96e-14  |ddm|= 3.81e-13
    CPU time for scf_cycle      0.58 sec, wall time      0.08 sec
exp = [95.04391696  4.43533566  0.34189347 18.21917271  7.65867112  0.89939761]
E = -465.3641368763594
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((6, 2))
#exps[:, 0] = decaying_nums(5)

# S
exps[0,0] = 9.5045827955887916e+01
exps[1,0] = 4.4881042475048387e+00
exps[2,0] = 3.9799528004692630e-01
             
# P          
exps[3,0] = 18.0
exps[4,0] = 8.5469650038718257e+00
exps[5,0] = 4.8929328703550412e-01

basis = "3s3p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc11947.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 24
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 18 12:43:21 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35676253.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 32000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 32000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 32000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  95.0439169559        1
[INPUT] 0    0    [1    /1   ]  4.4353356622         1
[INPUT] 0    0    [1    /1   ]  0.34189347039        1
[INPUT] 1    0    [1    /1   ]  18.2191727114        1
[INPUT] 1    0    [1    /1   ]  7.65867112338        1
[INPUT] 1    0    [1    /1   ]  0.899397612602       1

nuclear repulsion = 0
number of shells = 6
number of NR pGTOs = 12
number of NR cGTOs = 12
basis = {'Ar': [[0, [95.04391695592975, 1.0]], [0, [4.435335662204218, 1.0]], [0, [0.3418934703903457, 1.0]], [1, [18.219172711367843, 1.0]], [1, [7.658671123375239, 1.0]], [1, [0.8993976126023788, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [95.04391696]
bas 1, expnt(s) = [4.43533566]
bas 2, expnt(s) = [0.34189347]
bas 3, expnt(s) = [18.21917271]
bas 4, expnt(s) = [7.65867112]
bas 5, expnt(s) = [0.89939761]
CPU time:        29.14
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  1  1  1  0 30 31  0]
 [ 0  1  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]]
arg.env = [  0.           0.           0.           0.           0.
   0.           0.           0.           0.           0.
   0.           0.           0.           0.           0.
   0.           0.           0.           0.           0.
   0.           0.           0.           0.          95.04391696
  76.90565385   4.43533566   7.72164611   0.34189347   1.12962197
  18.21917271 109.8108387    7.65867112  37.16859701   0.89939761
   2.55519504]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 16.283058360106295
cond(S) = 10.343091330076694
E1 = -645.4389630138586  E_coul = 188.9597108368371
init E= -456.479252177022
    CPU time for initialize scf      0.18 sec, wall time      0.02 sec
  HOMO = -0.514777526118386  LUMO = 23.829391598279
  mo_energy =
[-98.76549    -10.8523133   -8.71172789  -8.71172789  -8.71172789
  -1.61250169  -0.51477753  -0.51477753  -0.51477753  23.8293916
  23.8293916   23.8293916 ]
E1 = -690.188656041466  E_coul = 224.84744430616306
cycle= 1 E= -465.341211735303  delta_E= -8.86  |g|= 1.16  |ddm|= 1.08
    CPU time for cycle= 1      0.21 sec, wall time      0.01 sec
diis-norm(errvec)=0.845012
diis-c [-0.71404569  1.        ]
  HOMO = 0.801578427414594  LUMO = 26.4135373145549
  mo_energy =
[-95.13102985  -8.3727556   -6.24557544  -6.24557544  -6.24557544
  -0.42288604   0.80157843   0.80157843   0.80157843  26.41353731
  26.41353731  26.41353731]
E1 = -689.3089312952417  E_coul = 223.94481525294992
cycle= 2 E= -465.364116042292  delta_E= -0.0229  |g|= 0.0366  |ddm|= 0.136
    CPU time for cycle= 2      0.15 sec, wall time      0.01 sec
diis-norm(errvec)=0.0300583
diis-c [-9.95459690e-05  3.24675271e-02  9.67532473e-01]
  HOMO = 0.790054277747083  LUMO = 26.3545576045867
  mo_energy =
[-95.29303538  -8.43271159  -6.30264064  -6.30264064  -6.30264064
  -0.43151188   0.79005428   0.79005428   0.79005428  26.3545576
  26.3545576   26.3545576 ]
E1 = -689.3329287043814  E_coul = 223.96879183160883
cycle= 3 E= -465.364136872773  delta_E= -2.08e-05  |g|= 0.00046  |ddm|= 0.00329
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.000364324
diis-c [-7.22973224e-12 -8.60094250e-04 -3.20897360e-02  1.03294983e+00]
  HOMO = 0.789932954912846  LUMO = 26.3542229561807
  mo_energy =
[-95.29361043  -8.43308925  -6.3030533   -6.3030533   -6.3030533
  -0.43160468   0.78993295   0.78993295   0.78993295  26.35422296
  26.35422296  26.35422296]
E1 = -689.3329469395344  E_coul = 223.96881006317457
cycle= 4 E= -465.36413687636  delta_E= -3.59e-09  |g|= 2.46e-07  |ddm|= 4.64e-05
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=1.87105e-07
diis-c [-1.33443813e-17 -9.43482608e-09  7.33931392e-06 -1.68892389e-04
  1.00016156e+00]
  HOMO = 0.789933076990006  LUMO = 26.3542228806082
  mo_energy =
[-95.29361     -8.43308905  -6.30305301  -6.30305301  -6.30305301
  -0.43160464   0.78993308   0.78993308   0.78993308  26.35422288
  26.35422288  26.35422288]
E1 = -689.3329467582577  E_coul = 223.96880988189778
cycle= 5 E= -465.36413687636  delta_E= -1.14e-13  |g|= 3.14e-12  |ddm|= 2.66e-08
    CPU time for cycle= 5      0.01 sec, wall time      0.01 sec
E1 = -689.3329467582577  E_coul = 223.96880988189778
  HOMO = 0.789933076991258  LUMO = 26.3542228806099
  mo_energy =
[-95.29361     -8.43308905  -6.30305301  -6.30305301  -6.30305301
  -0.43160464   0.78993308   0.78993308   0.78993308  26.35422288
  26.35422288  26.35422288]
E1 = -689.3329467582549  E_coul = 223.96880988189554
Extra cycle  E= -465.364136876359  delta_E= 5.12e-13  |g|= 7.96e-14  |ddm|= 3.81e-13
    CPU time for scf_cycle      0.58 sec, wall time      0.08 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 10.343091330076694
E1 = -689.3329467582549  E_coul = 223.96880988189554
init E= -465.364136876359
    CPU time for initialize scf      1.08 sec, wall time      0.05 sec
  HOMO = 0.78993307699123  LUMO = 26.3542228806098
  mo_energy =
[-95.29361     -8.43308905  -6.30305301  -6.30305301  -6.30305301
  -0.43160464   0.78993308   0.78993308   0.78993308  26.35422288
  26.35422288  26.35422288]
E1 = -689.332946758255  E_coul = 223.9688098818956
cycle= 1 E= -465.364136876359  delta_E= -5.68e-14  |g|= 4.51e-14  |ddm|= 7.5e-15
    CPU time for cycle= 1      0.20 sec, wall time      0.01 sec
E1 = -689.332946758255  E_coul = 223.9688098818956
  HOMO = 0.789933076991229  LUMO = 26.3542228806098
  mo_energy =
[-95.29361     -8.43308905  -6.30305301  -6.30305301  -6.30305301
  -0.43160464   0.78993308   0.78993308   0.78993308  26.35422288
  26.35422288  26.35422288]
E1 = -689.332946758255  E_coul = 223.96880988189557
Extra cycle  E= -465.364136876359  delta_E=    0  |g|= 3.17e-14  |ddm|= 5.6e-15
    CPU time for scf_cycle      1.39 sec, wall time      0.11 sec
exp = [95.04391696  4.43533566  0.34189347 18.21917271  7.65867112  0.89939761]
grad_E = [ 8.69384425e-03  1.66495068e-01  2.82771011e-01 -7.78438690e-01
  2.48290246e+00  8.98753969e+00]
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((6, 2))
#exps[:, 0] = decaying_nums(5)

# S
exps[0,0] = 9.5045827955887916e+01
exps[1,0] = 4.4881042475048387e+00
exps[2,0] = 3.9799528004692630e-01
             
# P          
exps[3,0] = 18.0
exps[4,0] = 8.5469650038718257e+00
exps[5,0] = 4.8929328703550412e-01

basis = "3s3p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc11947.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 24
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 18 12:43:24 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35676253.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 32000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 32000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 32000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  95.0231645258        1
[INPUT] 0    0    [1    /1   ]  3.89540248303        1
[INPUT] 0    0    [1    /1   ]  1.00000002723e-09      1
[INPUT] 1    0    [1    /1   ]  20.5008758348        1
[INPUT] 1    0    [1    /1   ]  1.00000008274e-09      1
[INPUT] 1    0    [1    /1   ]  0.469045764358       1

nuclear repulsion = 0
number of shells = 6
number of NR pGTOs = 12
number of NR cGTOs = 12
basis = {'Ar': [[0, [95.02316452579102, 1.0]], [0, [3.8954024830264804, 1.0]], [0, [1.0000000272292198e-09, 1.0]], [1, [20.500875834815808, 1.0]], [1, [1.000000082740371e-09, 1.0]], [1, [0.46904576435774464, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [95.02316453]
bas 1, expnt(s) = [3.89540248]
bas 2, expnt(s) = [1.00000003e-09]
bas 3, expnt(s) = [20.50087583]
bas 4, expnt(s) = [1.00000008e-09]
bas 5, expnt(s) = [0.46904576]
CPU time:        33.57
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  1  1  1  0 30 31  0]
 [ 0  1  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 9.50231645e+01 7.68930595e+01 3.89540248e+00 7.00534094e+00
 1.00000003e-09 4.49277876e-07 2.05008758e+01 1.27262342e+02
 1.00000008e-09 1.64053099e-11 4.69045764e-01 1.13240927e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 13.917383112034727
cond(S) = 1.6406590578157993
E1 = -559.2203145020117  E_coul = 150.5114267258391
init E= -408.708887776173
    CPU time for initialize scf      0.18 sec, wall time      0.02 sec

WARN: HOMO -0.000605549330336706 == LUMO -0.000605549330336097

  mo_energy =
[-9.98725793e+01 -1.43247574e+01 -5.46704883e+00 -5.46704883e+00
 -5.46704883e+00 -2.32522290e+00 -2.32522290e+00 -2.32522290e+00
 -6.05549330e-04 -6.05549330e-04 -6.05549330e-04 -2.06018172e-04]
E1 = -635.8365989366819  E_coul = 215.9187245283972
cycle= 1 E= -419.917874408285  delta_E= -11.2  |g|= 7.19e-07  |ddm|= 2.25
    CPU time for cycle= 1      0.21 sec, wall time      0.01 sec
diis-norm(errvec)=8.86887e-07
diis-c [-7.86568123e-13  1.00000000e+00]
  HOMO = -0.0001009238026585  LUMO = 1.95216448874849
  mo_energy =
[-9.12806059e+01 -9.44904528e+00 -2.37527056e+00 -2.37527056e+00
 -2.37527056e+00 -6.05549330e-04 -6.05549330e-04 -6.05549330e-04
 -1.00923803e-04  1.95216449e+00  1.95216449e+00  1.95216449e+00]
E1 = -447.2797337700536  E_coul = 59.87750328971814
cycle= 2 E= -387.402230480335  delta_E= 32.5  |g|=   15  |ddm|= 4.98
    CPU time for cycle= 2      0.15 sec, wall time      0.01 sec
diis-norm(errvec)=21.2017
diis-c [-7.86568123e-13  1.00000000e+00  1.85243453e-15]
  HOMO = -0.000100923802658501  LUMO = 1.95216448874846
  mo_energy =
[-9.12806059e+01 -9.44904528e+00 -2.37527056e+00 -2.37527056e+00
 -2.37527056e+00 -6.05549330e-04 -6.05549330e-04 -6.05549330e-04
 -1.00923803e-04  1.95216449e+00  1.95216449e+00  1.95216449e+00]
E1 = -447.2797337700537  E_coul = 59.877503289718234
cycle= 3 E= -387.402230480336  delta_E= -5.68e-14  |g|=   15  |ddm|= 8.72e-15
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=21.2017
diis-c [-7.86568123e-13  1.00000000e+00  1.47913982e-11 -1.47895458e-11]
  HOMO = -0.000100923802658501  LUMO = 1.95216448874846
  mo_energy =
[-9.12806059e+01 -9.44904528e+00 -2.37527056e+00 -2.37527056e+00
 -2.37527056e+00 -6.05549330e-04 -6.05549330e-04 -6.05549330e-04
 -1.00923803e-04  1.95216449e+00  1.95216449e+00  1.95216449e+00]
E1 = -447.27973377005367  E_coul = 59.877503289718234
cycle= 4 E= -387.402230480335  delta_E= 5.68e-14  |g|=   15  |ddm|= 2.99e-15
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=21.2017
diis-c [-7.86568123e-13  1.00000000e+00 -4.76456373e-11  1.57740487e-12
  4.60700849e-11]
  HOMO = -0.000100923802658501  LUMO = 1.95216448874846
  mo_energy =
[-9.12806059e+01 -9.44904528e+00 -2.37527056e+00 -2.37527056e+00
 -2.37527056e+00 -6.05549330e-04 -6.05549330e-04 -6.05549330e-04
 -1.00923803e-04  1.95216449e+00  1.95216449e+00  1.95216449e+00]
E1 = -447.27973377005367  E_coul = 59.87750328971824
cycle= 5 E= -387.402230480335  delta_E=    0  |g|=   15  |ddm|= 3.64e-15
    CPU time for cycle= 5      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=21.2017
Linear dependence found in DIIS error vectors.
diis-c [-8.43391681e-13  1.00000000e+00  7.17839597e-16  8.97748533e-17
  3.25271234e-16  7.17839597e-16]
  HOMO = -0.0001009238026585  LUMO = 1.95216448874846
  mo_energy =
[-9.12806059e+01 -9.44904528e+00 -2.37527056e+00 -2.37527056e+00
 -2.37527056e+00 -6.05549330e-04 -6.05549330e-04 -6.05549330e-04
 -1.00923803e-04  1.95216449e+00  1.95216449e+00  1.95216449e+00]
E1 = -447.2797337700539  E_coul = 59.8775032897183
cycle= 6 E= -387.402230480336  delta_E= -1.71e-13  |g|=   15  |ddm|= 3.68e-15
    CPU time for cycle= 6      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=21.2017
diis-c [-7.86568062e-13  1.00000000e+00 -1.99856669e-10 -2.62404283e-11
  1.46361683e-10 -6.95040000e+04  6.95040000e+04]
  HOMO = -0.000100923802636843  LUMO = 1.95216448897127
  mo_energy =
[-9.12806059e+01 -9.44904527e+00 -2.37527056e+00 -2.37527056e+00
 -2.37527056e+00 -6.05549330e-04 -6.05549330e-04 -6.05549330e-04
 -1.00923803e-04  1.95216449e+00  1.95216449e+00  1.95216449e+00]
E1 = -447.2797337681096  E_coul = 59.87750328871354
cycle= 7 E= -387.402230479396  delta_E= 9.4e-10  |g|=   15  |ddm|= 1.3e-10
    CPU time for cycle= 7      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=21.2017
diis-c [-7.86568578e-13  1.00000104e+00 -4.75942712e+05  5.80855915e+04
  3.01685938e+05  6.27523098e+05 -3.95180732e+05 -1.16171183e+05]
  HOMO = -0.000100923525290697  LUMO = 1.95219401500287
  mo_energy =
[-9.12805488e+01 -9.44901552e+00 -2.37526178e+00 -2.37526041e+00
 -2.37525994e+00 -6.05549330e-04 -6.05549330e-04 -6.05549330e-04
 -1.00923525e-04  1.95219402e+00  1.95219911e+00  1.95220087e+00]
E1 = -447.2794979189121  E_coul = 59.877381394651245
cycle= 8 E= -387.402116524261  delta_E= 0.000114  |g|=   15  |ddm|= 1.12e-05
    CPU time for cycle= 8      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=21.2017
diis-c [-7.86568123e-13  1.00000000e+00 -1.13721128e-05  1.38785761e-06
  7.20843633e-06  1.49938420e-05 -9.44225191e-06 -2.77576739e-06
 -3.85824705e-12]
  HOMO = -0.000100923802658501  LUMO = 1.95216448874846
  mo_energy =
[-9.12806059e+01 -9.44904528e+00 -2.37527056e+00 -2.37527056e+00
 -2.37527056e+00 -6.05549330e-04 -6.05549330e-04 -6.05549330e-04
 -1.00923803e-04  1.95216449e+00  1.95216449e+00  1.95216449e+00]
E1 = -447.2797337700536  E_coul = 59.877503289718234
cycle= 9 E= -387.402230480335  delta_E= -0.000114  |g|=   15  |ddm|= 1.12e-05
    CPU time for cycle= 9      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=21.2017
Linear dependence found in DIIS error vectors.
diis-c [-1.53347844e+02 -8.67404132e+04 -8.67404133e+04 -8.67404137e+04
 -8.67404136e+04 -8.67404132e+04 -8.67404134e+04 -8.67346941e+04
  6.07178174e+05]

WARN: HOMO -0.000605549330374422 == LUMO -0.000605549330372349

  mo_energy =
[-1.36077484e+02 -3.27916606e+01 -2.86193315e+01 -2.73492678e+01
 -2.69127162e+01 -7.45272208e+00 -7.37783255e+00 -7.15590060e+00
 -6.05549330e-04 -6.05549330e-04 -6.05549330e-04 -3.68017227e-04]
E1 = -635.8365989366821  E_coul = 215.91872452839752
cycle= 10 E= -419.917874408285  delta_E= -32.5  |g|= 1.65e-06  |ddm|= 4.98
    CPU time for cycle= 10      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=2.02851e-06
Linear dependence found in DIIS error vectors.
diis-c [-4.70837912e-12 -1.55017832e-07  1.00000000e+00 -1.55017832e-07
 -1.55017832e-07 -1.55017832e-07 -1.55017832e-07 -1.55008889e-07
  9.30099068e-07]
  HOMO = -0.000100923802658772  LUMO = 1.95216448871482
  mo_energy =
[-9.12806059e+01 -9.44904528e+00 -2.37527056e+00 -2.37527056e+00
 -2.37527056e+00 -6.05549330e-04 -6.05549330e-04 -6.05549330e-04
 -1.00923803e-04  1.95216449e+00  1.95216449e+00  1.95216449e+00]
E1 = -447.2797337702833  E_coul = 59.87750328983698
cycle= 11 E= -387.402230480446  delta_E= 32.5  |g|=   15  |ddm|= 4.98
    CPU time for cycle= 11      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=21.2017
Linear dependence found in DIIS error vectors.
diis-c [-3.99502174e-12 -1.55017681e-07  1.00000000e+00 -1.55018738e-07
 -1.55017682e-07 -1.55017681e-07 -1.55017681e-07 -1.55008738e-07
  9.30099219e-07]
  HOMO = -0.000100923802658772  LUMO = 1.95216448871484
  mo_energy =
[-9.12806059e+01 -9.44904528e+00 -2.37527056e+00 -2.37527056e+00
 -2.37527056e+00 -6.05549330e-04 -6.05549330e-04 -6.05549330e-04
 -1.00923803e-04  1.95216449e+00  1.95216449e+00  1.95216449e+00]
E1 = -447.2797337702832  E_coul = 59.87750328983688
cycle= 12 E= -387.402230480446  delta_E= 5.68e-14  |g|=   15  |ddm|= 7.37e-15
    CPU time for cycle= 12      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=21.2017
diis-c [-4.11501125e-12  3.97782617e-10  1.00000000e+00  9.07521205e-03
 -3.87215587e-12  9.98334555e-11 -9.07521092e-03 -8.12145198e-10
 -8.14153031e-10]
  HOMO = -0.000100923802658499  LUMO = 1.95216448874871
  mo_energy =
[-9.12806059e+01 -9.44904528e+00 -2.37527056e+00 -2.37527056e+00
 -2.37527056e+00 -6.05549330e-04 -6.05549330e-04 -6.05549330e-04
 -1.00923803e-04  1.95216449e+00  1.95216449e+00  1.95216449e+00]
E1 = -447.2797337700519  E_coul = 59.87750328971729
cycle= 13 E= -387.402230480335  delta_E= 1.12e-10  |g|=   15  |ddm|= 1.06e-11
    CPU time for cycle= 13      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=21.2017
diis-c [-4.11501125e-12  3.97782616e-10  1.00000000e+00  9.07521228e-03
 -3.87215588e-12  9.98334555e-11 -9.07521117e-03 -7.85361156e-10
 -8.14153032e-10]
  HOMO = -0.000100923802658499  LUMO = 1.95216448874871
  mo_energy =
[-9.12806059e+01 -9.44904528e+00 -2.37527056e+00 -2.37527056e+00
 -2.37527056e+00 -6.05549330e-04 -6.05549330e-04 -6.05549330e-04
 -1.00923803e-04  1.95216449e+00  1.95216449e+00  1.95216449e+00]
E1 = -447.27973377005173  E_coul = 59.87750328971728
cycle= 14 E= -387.402230480334  delta_E= 1.71e-13  |g|=   15  |ddm|= 5.43e-15
    CPU time for cycle= 14      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=21.2017
diis-c [-4.11486770e-12 -6.04927652e-09  1.00000000e+00 -1.62464056e-08
 -4.04072061e-12 -4.08618403e-09 -1.96442039e-09  1.21069029e-08
  1.62434509e-08]
  HOMO = -0.000100923802658507  LUMO = 1.95216448874779
  mo_energy =
[-9.12806059e+01 -9.44904528e+00 -2.37527056e+00 -2.37527056e+00
 -2.37527056e+00 -6.05549330e-04 -6.05549330e-04 -6.05549330e-04
 -1.00923803e-04  1.95216449e+00  1.95216449e+00  1.95216449e+00]
E1 = -447.2797337700584  E_coul = 59.877503289720615
cycle= 15 E= -387.402230480338  delta_E= -3.35e-12  |g|=   15  |ddm|= 2.91e-13
    CPU time for cycle= 15      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=21.2017
Linear dependence found in DIIS error vectors.
diis-c [-3.97649910e-12 -1.55016252e-07  1.00000000e+00 -1.55017308e-07
 -1.55017308e-07 -1.55016244e-07 -1.55016244e-07 -1.55016273e-07
  9.30100648e-07]
  HOMO = -0.000100923802658772  LUMO = 1.95216448871484
  mo_energy =
[-9.12806059e+01 -9.44904528e+00 -2.37527056e+00 -2.37527056e+00
 -2.37527056e+00 -6.05549330e-04 -6.05549330e-04 -6.05549330e-04
 -1.00923803e-04  1.95216449e+00  1.95216449e+00  1.95216449e+00]
E1 = -447.2797337702833  E_coul = 59.87750328983692
cycle= 16 E= -387.402230480446  delta_E= -1.09e-10  |g|=   15  |ddm|= 1.03e-11
    CPU time for cycle= 16      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=21.2017
diis-c [-4.11486770e-12  4.75658330e-12  1.00000000e+00  1.15971497e-10
 -5.98047840e-11 -2.73997291e-11  2.96650844e-11 -1.82229396e-10
  1.19049608e-10]
  HOMO = -0.000100923802658502  LUMO = 1.95216448874837
  mo_energy =
[-9.12806059e+01 -9.44904528e+00 -2.37527056e+00 -2.37527056e+00
 -2.37527056e+00 -6.05549330e-04 -6.05549330e-04 -6.05549330e-04
 -1.00923803e-04  1.95216449e+00  1.95216449e+00  1.95216449e+00]
E1 = -447.27973377005407  E_coul = 59.877503289718504
cycle= 17 E= -387.402230480336  delta_E= 1.11e-10  |g|=   15  |ddm|= 1.05e-11
    CPU time for cycle= 17      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=21.2017
Linear dependence found in DIIS error vectors.
diis-c [-4.08444448e-12  4.52955477e-13  1.00000000e+00 -6.01300550e-13
 -6.00633281e-13  4.62967230e-13  4.63065359e-13  4.33429877e-13
 -6.01241699e-13]
  HOMO = -0.000100923802658502  LUMO = 1.95216448874837
  mo_energy =
[-9.12806059e+01 -9.44904528e+00 -2.37527056e+00 -2.37527056e+00
 -2.37527056e+00 -6.05549330e-04 -6.05549330e-04 -6.05549330e-04
 -1.00923803e-04  1.95216449e+00  1.95216449e+00  1.95216449e+00]
E1 = -447.27973377005424  E_coul = 59.877503289718554
cycle= 18 E= -387.402230480336  delta_E= -1.14e-13  |g|=   15  |ddm|= 4.28e-15
    CPU time for cycle= 18      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=21.2017
Linear dependence found in DIIS error vectors.
diis-c [ -449.51386603 -2459.58583318 -2457.76880799  4104.82851809
  4098.98322209 -2523.45880115 -2522.9021063  -2340.30619308
  4101.21000152]

WARN: HOMO -0.000605549330337743 == LUMO -0.000605549330337222

  mo_energy =
[-1.15675108e+02 -2.32653577e+01 -1.54187940e+01 -1.54187940e+01
 -1.54187940e+01 -5.64611949e+00 -5.64611949e+00 -5.64611949e+00
 -6.05549330e-04 -6.05549330e-04 -6.05549330e-04 -3.68017226e-04]
E1 = -635.8365989366823  E_coul = 215.91872452839777
cycle= 19 E= -419.917874408285  delta_E= -32.5  |g|= 1.28e-06  |ddm|= 4.98
    CPU time for cycle= 19      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=1.57049e-06
diis-c [ 4.96929337e-09  3.87134224e+05 -3.98490783e+05  1.00000000e+00
  7.98922956e-08  1.13565594e+04 -3.87258149e-08 -4.09592374e-08
 -3.98330434e-08]
  HOMO = -0.000100923802746632  LUMO = 1.95216447974735
  mo_energy =
[-9.12806059e+01 -9.44904528e+00 -2.37527056e+00 -2.37527056e+00
 -2.37527056e+00 -6.05549330e-04 -6.05549330e-04 -6.05549330e-04
 -1.00923803e-04  1.95216448e+00  1.95216448e+00  1.95216448e+00]
E1 = -447.2797338310012  E_coul = 59.87750332121781
cycle= 20 E= -387.402230509783  delta_E= 32.5  |g|=   15  |ddm|= 4.98
    CPU time for cycle= 20      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=21.2017
diis-c [-1.19615018e-09 -2.71853039e+04  2.71853039e+04  1.00000000e+00
 -3.23086747e-10  1.04953514e-05  8.97265729e-10 -6.68063709e-08
  6.65525386e-08]
  HOMO = -0.000100923802655461  LUMO = 1.95216448898838
  mo_energy =
[-9.12806059e+01 -9.44904528e+00 -2.37527056e+00 -2.37527056e+00
 -2.37527056e+00 -6.05549330e-04 -6.05549330e-04 -6.05549330e-04
 -1.00923803e-04  1.95216449e+00  1.95216449e+00  1.95216449e+00]
E1 = -447.27973376815015  E_coul = 59.87750328873439
cycle= 21 E= -387.402230479416  delta_E= 3.04e-08  |g|=   15  |ddm|= 2.91e-09
    CPU time for cycle= 21      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=21.2017
Linear dependence found in DIIS error vectors.
diis-c [-2.57312697e-12  3.89580419e-11  3.89584400e-11  1.00000000e+00
 -2.41443740e-10  4.77197247e-11  3.89688713e-11  3.89396578e-11
  3.79049666e-11]
  HOMO = -0.000100923802658501  LUMO = 1.95216448874844
  mo_energy =
[-9.12806059e+01 -9.44904528e+00 -2.37527056e+00 -2.37527056e+00
 -2.37527056e+00 -6.05549330e-04 -6.05549330e-04 -6.05549330e-04
 -1.00923803e-04  1.95216449e+00  1.95216449e+00  1.95216449e+00]
E1 = -447.27973377005367  E_coul = 59.877503289718284
cycle= 22 E= -387.402230480335  delta_E= -9.2e-10  |g|=   15  |ddm|= 9.14e-11
    CPU time for cycle= 22      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=21.2017
Linear dependence found in DIIS error vectors.
diis-c [-2.21679957e-12  3.89596191e-11  3.89594449e-11  1.00000000e+00
 -2.41442814e-10  4.77208376e-11  3.89619178e-11  3.89407607e-11
  3.79058733e-11]
  HOMO = -0.000100923802658501  LUMO = 1.95216448874845
  mo_energy =
[-9.12806059e+01 -9.44904528e+00 -2.37527056e+00 -2.37527056e+00
 -2.37527056e+00 -6.05549330e-04 -6.05549330e-04 -6.05549330e-04
 -1.00923803e-04  1.95216449e+00  1.95216449e+00  1.95216449e+00]
E1 = -447.2797337700537  E_coul = 59.87750328971826
cycle= 23 E= -387.402230480335  delta_E= -5.68e-14  |g|=   15  |ddm|= 3.72e-15
    CPU time for cycle= 23      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=21.2017
Linear dependence found in DIIS error vectors.
diis-c [-2.37420005e-12  3.89566882e-11  3.89562158e-11  1.00000000e+00
 -2.41445778e-10  4.77178636e-11  3.89589438e-11  3.89589438e-11
  3.79028994e-11]
  HOMO = -0.000100923802658501  LUMO = 1.95216448874845
  mo_energy =
[-9.12806059e+01 -9.44904528e+00 -2.37527056e+00 -2.37527056e+00
 -2.37527056e+00 -6.05549330e-04 -6.05549330e-04 -6.05549330e-04
 -1.00923803e-04  1.95216449e+00  1.95216449e+00  1.95216449e+00]
E1 = -447.27973377005367  E_coul = 59.87750328971827
cycle= 24 E= -387.402230480335  delta_E= 5.68e-14  |g|=   15  |ddm|= 2.28e-15
    CPU time for cycle= 24      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=21.2017
diis-c [-2.46643274e-12 -3.81514072e-11  1.28971806e-08  1.00000000e+00
  1.21170095e-08  4.64694130e-10 -1.25017286e-08  5.79714055e-12
 -1.29447956e-08]
  HOMO = -0.000100923802658501  LUMO = 1.95216448874844
  mo_energy =
[-9.12806059e+01 -9.44904528e+00 -2.37527056e+00 -2.37527056e+00
 -2.37527056e+00 -6.05549330e-04 -6.05549330e-04 -6.05549330e-04
 -1.00923803e-04  1.95216449e+00  1.95216449e+00  1.95216449e+00]
E1 = -447.2797337700537  E_coul = 59.87750328971828
cycle= 25 E= -387.402230480335  delta_E= -5.68e-14  |g|=   15  |ddm|= 3.27e-15
    CPU time for cycle= 25      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=21.2017
diis-c [ 1.53453121e-08  1.07825705e+01  1.13854869e+06  1.00000000e+00
 -1.07825705e+01 -6.64529388e-11  3.32477092e-10  5.79714055e-12
 -1.13854869e+06]
  HOMO = -0.00010092380248763  LUMO = 1.95216447789387
  mo_energy =
[-9.12806059e+01 -9.44904531e+00 -2.37527056e+00 -2.37527056e+00
 -2.37527056e+00 -6.05549330e-04 -6.05549330e-04 -6.05549330e-04
 -1.00923802e-04  1.95216448e+00  1.95216448e+00  1.95216449e+00]
E1 = -447.27973383421045  E_coul = 59.87750332287643
cycle= 26 E= -387.402230511334  delta_E= -3.1e-08  |g|=   15  |ddm|= 3.45e-09
    CPU time for cycle= 26      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=21.2017
Linear dependence found in DIIS error vectors.
diis-c [-2.35244410e-12  8.09743695e-11 -2.14194449e-10  1.00000000e+00
 -1.99430571e-10  8.97330897e-11  8.09740717e-11  8.09742680e-11
  8.09746212e-11]
  HOMO = -0.000100923802658501  LUMO = 1.95216448874845
  mo_energy =
[-9.12806059e+01 -9.44904528e+00 -2.37527056e+00 -2.37527056e+00
 -2.37527056e+00 -6.05549330e-04 -6.05549330e-04 -6.05549330e-04
 -1.00923803e-04  1.95216449e+00  1.95216449e+00  1.95216449e+00]
E1 = -447.2797337700537  E_coul = 59.877503289718256
cycle= 27 E= -387.402230480335  delta_E= 3.1e-08  |g|=   15  |ddm|= 3.45e-09
    CPU time for cycle= 27      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=21.2017
Linear dependence found in DIIS error vectors.
diis-c [-4.49803898e+02 -3.63778569e+05  1.15172214e+06 -3.63775469e+05
  1.07591908e+06 -4.08749676e+05 -3.63778912e+05 -3.63778912e+05
 -3.63778682e+05]

WARN: HOMO -0.000605549330318312 == LUMO -0.000605549330316781

  mo_energy =
[-1.15655178e+02 -2.32559782e+01 -1.54080718e+01 -1.54070054e+01
 -1.54064432e+01 -5.64428365e+00 -5.64417033e+00 -5.64395533e+00
 -6.05549330e-04 -6.05549330e-04 -6.05549330e-04 -3.68017226e-04]
E1 = -635.8365989366819  E_coul = 215.91872452839735
cycle= 28 E= -419.917874408285  delta_E= -32.5  |g|= 1.28e-06  |ddm|= 4.98
    CPU time for cycle= 28      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=1.56985e-06
diis-c [-2.46442938e-12  3.76113757e-07 -3.76133837e-07  8.67640352e-07
  1.00000000e+00 -5.55697223e-07 -7.15697217e-07  6.21780405e-12
  4.03767956e-07]
  HOMO = -0.000100923802658501  LUMO = 1.95216448874842
  mo_energy =
[-9.12806059e+01 -9.44904528e+00 -2.37527056e+00 -2.37527056e+00
 -2.37527056e+00 -6.05549330e-04 -6.05549330e-04 -6.05549330e-04
 -1.00923803e-04  1.95216449e+00  1.95216449e+00  1.95216449e+00]
E1 = -447.2797337700539  E_coul = 59.87750328971833
cycle= 29 E= -387.402230480336  delta_E= 32.5  |g|=   15  |ddm|= 4.98
    CPU time for cycle= 29      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=21.2017
diis-c [-2.46442935e-12  2.38983900e-07 -3.76132899e-07  4.25310955e-07
  1.00000000e+00 -1.37128920e-07 -2.74301173e-07  6.21848839e-12
  1.23261925e-07]
  HOMO = -0.000100923802658501  LUMO = 1.95216448874842
  mo_energy =
[-9.12806059e+01 -9.44904528e+00 -2.37527056e+00 -2.37527056e+00
 -2.37527056e+00 -6.05549330e-04 -6.05549330e-04 -6.05549330e-04
 -1.00923803e-04  1.95216449e+00  1.95216449e+00  1.95216449e+00]
E1 = -447.27973377005384  E_coul = 59.87750328971835
cycle= 30 E= -387.402230480336  delta_E= 5.68e-14  |g|=   15  |ddm|= 2.77e-15
    CPU time for cycle= 30      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=21.2017
Linear dependence found in DIIS error vectors.
diis-c [-2.51795216e-12  4.21685275e-11 -2.53000637e-10  4.21672843e-11
  1.00000000e+00  4.21673236e-11  4.21669114e-11  4.21680399e-11
  4.21679909e-11]
  HOMO = -0.000100923802658501  LUMO = 1.95216448874842
  mo_energy =
[-9.12806059e+01 -9.44904528e+00 -2.37527056e+00 -2.37527056e+00
 -2.37527056e+00 -6.05549330e-04 -6.05549330e-04 -6.05549330e-04
 -1.00923803e-04  1.95216449e+00  1.95216449e+00  1.95216449e+00]
E1 = -447.2797337700539  E_coul = 59.87750328971835
cycle= 31 E= -387.402230480336  delta_E= -5.68e-14  |g|=   15  |ddm|= 3.41e-15
    CPU time for cycle= 31      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=21.2017
Linear dependence found in DIIS error vectors.
diis-c [-2.91164272e-12  4.21682344e-11 -2.53000451e-10  4.21678533e-11
  1.00000000e+00  4.21674902e-11  4.21670781e-11  4.21669799e-11
  4.21685599e-11]
  HOMO = -0.000100923802658501  LUMO = 1.95216448874841
  mo_energy =
[-9.12806059e+01 -9.44904528e+00 -2.37527056e+00 -2.37527056e+00
 -2.37527056e+00 -6.05549330e-04 -6.05549330e-04 -6.05549330e-04
 -1.00923803e-04  1.95216449e+00  1.95216449e+00  1.95216449e+00]
E1 = -447.2797337700541  E_coul = 59.87750328971841
cycle= 32 E= -387.402230480336  delta_E= -1.71e-13  |g|=   15  |ddm|= 3.91e-15
    CPU time for cycle= 32      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=21.2017
Linear dependence found in DIIS error vectors.
diis-c [-2.56451125e-12  4.21689579e-11 -2.53000302e-10  4.21677567e-11
  1.00000000e+00  4.21676095e-11  4.21671974e-11  4.21670993e-11
  4.21672955e-11]
  HOMO = -0.000100923802658501  LUMO = 1.95216448874841
  mo_energy =
[-9.12806059e+01 -9.44904528e+00 -2.37527056e+00 -2.37527056e+00
 -2.37527056e+00 -6.05549330e-04 -6.05549330e-04 -6.05549330e-04
 -1.00923803e-04  1.95216449e+00  1.95216449e+00  1.95216449e+00]
E1 = -447.27973377005395  E_coul = 59.87750328971836
cycle= 33 E= -387.402230480336  delta_E= 1.71e-13  |g|=   15  |ddm|= 3.46e-15
    CPU time for cycle= 33      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=21.2017
diis-c [-2.46442943e-12 -6.15474773e-07 -3.76130893e-07 -6.32166623e-07
  1.00000000e+00  1.23196226e-06  7.52501229e-07 -2.21280210e-06
  1.85211090e-06]
  HOMO = -0.000100923802658501  LUMO = 1.95216448874842
  mo_energy =
[-9.12806059e+01 -9.44904528e+00 -2.37527056e+00 -2.37527056e+00
 -2.37527056e+00 -6.05549330e-04 -6.05549330e-04 -6.05549330e-04
 -1.00923803e-04  1.95216449e+00  1.95216449e+00  1.95216449e+00]
E1 = -447.2797337700539  E_coul = 59.877503289718334
cycle= 34 E= -387.402230480336  delta_E=    0  |g|=   15  |ddm|= 4.16e-15
    CPU time for cycle= 34      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=21.2017
Linear dependence found in DIIS error vectors.
diis-c [-2.27113336e-12  1.86303929e-15  5.02472929e-16  7.87073739e-16
  1.00000000e+00  8.94995188e-16  3.84751811e-16  2.66957333e-16
  3.25854578e-16]
  HOMO = -0.000100923802658501  LUMO = 1.95216448874842
  mo_energy =
[-9.12806059e+01 -9.44904528e+00 -2.37527056e+00 -2.37527056e+00
 -2.37527056e+00 -6.05549330e-04 -6.05549330e-04 -6.05549330e-04
 -1.00923803e-04  1.95216449e+00  1.95216449e+00  1.95216449e+00]
E1 = -447.2797337700538  E_coul = 59.877503289718305
cycle= 35 E= -387.402230480335  delta_E= 1.14e-13  |g|=   15  |ddm|= 5.07e-15
    CPU time for cycle= 35      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=21.2017
Linear dependence found in DIIS error vectors.
diis-c [-2.37782846e-12  1.94858267e-15  7.94259003e-16  6.96130420e-16
  1.00000000e+00  7.94259003e-16  4.90034133e-16  1.76028757e-16
  6.37233175e-16]
  HOMO = -0.000100923802658501  LUMO = 1.95216448874842
  mo_energy =
[-9.12806059e+01 -9.44904528e+00 -2.37527056e+00 -2.37527056e+00
 -2.37527056e+00 -6.05549330e-04 -6.05549330e-04 -6.05549330e-04
 -1.00923803e-04  1.95216449e+00  1.95216449e+00  1.95216449e+00]
E1 = -447.2797337700539  E_coul = 59.87750328971835
cycle= 36 E= -387.402230480336  delta_E= -1.14e-13  |g|=   15  |ddm|= 5.53e-15
    CPU time for cycle= 36      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=21.2017
Linear dependence found in DIIS error vectors.
diis-c [-4.49513860e+02 -1.24973871e+00  1.43710093e-01  2.14782554e-01
  5.70144857e-01  1.56517232e-03  4.99072396e-01  5.70144857e-01
  2.50318784e-01]

WARN: HOMO -0.000605549330336804 == LUMO -0.000605549330335266

  mo_energy =
[-1.15675108e+02 -2.32653579e+01 -1.54187942e+01 -1.54187942e+01
 -1.54187942e+01 -5.64611953e+00 -5.64611953e+00 -5.64611953e+00
 -6.05549330e-04 -6.05549330e-04 -6.05549330e-04 -3.68017226e-04]
E1 = -635.836598936682  E_coul = 215.91872452839743
cycle= 37 E= -419.917874408285  delta_E= -32.5  |g|= 1.28e-06  |ddm|= 4.98
    CPU time for cycle= 37      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=1.57049e-06
Linear dependence found in DIIS error vectors.
diis-c [-2.17184951e-12  1.78047321e-15  9.30707229e-16  8.91475892e-16
  3.81186271e-16  1.00000000e+00  2.83057689e-16  3.81186271e-16
  8.52217462e-16]
  HOMO = -0.000100923802658501  LUMO = 1.95216448874842
  mo_energy =
[-9.12806059e+01 -9.44904528e+00 -2.37527056e+00 -2.37527056e+00
 -2.37527056e+00 -6.05549330e-04 -6.05549330e-04 -6.05549330e-04
 -1.00923803e-04  1.95216449e+00  1.95216449e+00  1.95216449e+00]
E1 = -447.279733770054  E_coul = 59.877503289718334
cycle= 38 E= -387.402230480336  delta_E= 32.5  |g|=   15  |ddm|= 4.98
    CPU time for cycle= 38      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=21.2017
Linear dependence found in DIIS error vectors.
diis-c [-2.17184951e-12  1.80706104e-15  9.35821760e-16  7.00306176e-16
  3.86300788e-16  1.00000000e+00  3.86300788e-16  3.86300788e-16
  8.57331979e-16]
  HOMO = -0.000100923802658501  LUMO = 1.95216448874842
  mo_energy =
[-9.12806059e+01 -9.44904528e+00 -2.37527056e+00 -2.37527056e+00
 -2.37527056e+00 -6.05549330e-04 -6.05549330e-04 -6.05549330e-04
 -1.00923803e-04  1.95216449e+00  1.95216449e+00  1.95216449e+00]
E1 = -447.27973377005395  E_coul = 59.877503289718334
cycle= 39 E= -387.402230480336  delta_E= 5.68e-14  |g|=   15  |ddm|= 3.39e-15
    CPU time for cycle= 39      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=21.2017
Linear dependence found in DIIS error vectors.
diis-c [-2.23382163e-12  1.64736746e-15  8.73709564e-16  6.38213107e-16
  3.24161487e-16  1.00000000e+00  3.24161487e-16  6.38213107e-16
  7.95219772e-16]
  HOMO = -0.000100923802658501  LUMO = 1.95216448874843
  mo_energy =
[-9.12806059e+01 -9.44904528e+00 -2.37527056e+00 -2.37527056e+00
 -2.37527056e+00 -6.05549330e-04 -6.05549330e-04 -6.05549330e-04
 -1.00923803e-04  1.95216449e+00  1.95216449e+00  1.95216449e+00]
E1 = -447.27973377005395  E_coul = 59.87750328971837
cycle= 40 E= -387.402230480336  delta_E= 5.68e-14  |g|=   15  |ddm|= 4.58e-15
    CPU time for cycle= 40      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=21.2017
Linear dependence found in DIIS error vectors.
diis-c [-2.23382163e-12  1.67393613e-15  8.78843232e-16  6.43327625e-16
  3.29295168e-16  1.00000000e+00  3.29295168e-16  6.43327625e-16
  7.41456206e-16]
  HOMO = -0.000100923802658501  LUMO = 1.95216448874843
  mo_energy =
[-9.12806059e+01 -9.44904528e+00 -2.37527056e+00 -2.37527056e+00
 -2.37527056e+00 -6.05549330e-04 -6.05549330e-04 -6.05549330e-04
 -1.00923803e-04  1.95216449e+00  1.95216449e+00  1.95216449e+00]
E1 = -447.27973377005395  E_coul = 59.877503289718376
cycle= 41 E= -387.402230480336  delta_E=    0  |g|=   15  |ddm|= 4.72e-15
    CPU time for cycle= 41      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=21.2017
Linear dependence found in DIIS error vectors.
diis-c [-2.71226548e-12  1.35832436e-15  1.09256518e-15  8.07979123e-16
  5.03758660e-16  1.00000000e+00  5.43017115e-16  8.57022489e-16
  7.49081889e-16]
  HOMO = -0.000100923802658501  LUMO = 1.95216448874842
  mo_energy =
[-9.12806059e+01 -9.44904528e+00 -2.37527056e+00 -2.37527056e+00
 -2.37527056e+00 -6.05549330e-04 -6.05549330e-04 -6.05549330e-04
 -1.00923803e-04  1.95216449e+00  1.95216449e+00  1.95216449e+00]
E1 = -447.27973377005407  E_coul = 59.877503289718405
cycle= 42 E= -387.402230480336  delta_E= -1.14e-13  |g|=   15  |ddm|= 5.91e-15
    CPU time for cycle= 42      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=21.2017
Linear dependence found in DIIS error vectors.
diis-c [-2.38714493e-12  1.45412142e-15  6.59359025e-16  7.96746037e-16
  5.02333196e-16  1.00000000e+00  5.41564533e-16  8.55597026e-16
  7.57468455e-16]
  HOMO = -0.000100923802658501  LUMO = 1.95216448874842
  mo_energy =
[-9.12806059e+01 -9.44904528e+00 -2.37527056e+00 -2.37527056e+00
 -2.37527056e+00 -6.05549330e-04 -6.05549330e-04 -6.05549330e-04
 -1.00923803e-04  1.95216449e+00  1.95216449e+00  1.95216449e+00]
E1 = -447.27973377005395  E_coul = 59.877503289718355
cycle= 43 E= -387.402230480336  delta_E= 5.68e-14  |g|=   15  |ddm|= 4.3e-15
    CPU time for cycle= 43      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=21.2017
Linear dependence found in DIIS error vectors.
diis-c [-2.38714493e-12  1.53380804e-15  6.79852921e-16  6.60233282e-16
  5.22846256e-16  1.00000000e+00  5.62077593e-16  8.76110086e-16
  7.77981502e-16]
  HOMO = -0.000100923802658501  LUMO = 1.95216448874842
  mo_energy =
[-9.12806059e+01 -9.44904528e+00 -2.37527056e+00 -2.37527056e+00
 -2.37527056e+00 -6.05549330e-04 -6.05549330e-04 -6.05549330e-04
 -1.00923803e-04  1.95216449e+00  1.95216449e+00  1.95216449e+00]
E1 = -447.2797337700538  E_coul = 59.87750328971834
cycle= 44 E= -387.402230480335  delta_E= 1.71e-13  |g|=   15  |ddm|= 2.73e-15
    CPU time for cycle= 44      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=21.2017
Linear dependence found in DIIS error vectors.
diis-c [-2.43678175e-12  1.34590861e-15  8.60614240e-16  6.44710331e-16
  7.82097356e-16  1.00000000e+00  5.46581761e-16  8.40994601e-16
  7.42866031e-16]
  HOMO = -0.000100923802658501  LUMO = 1.95216448874842
  mo_energy =
[-9.12806059e+01 -9.44904528e+00 -2.37527056e+00 -2.37527056e+00
 -2.37527056e+00 -6.05549330e-04 -6.05549330e-04 -6.05549330e-04
 -1.00923803e-04  1.95216449e+00  1.95216449e+00  1.95216449e+00]
E1 = -447.27973377005407  E_coul = 59.87750328971838
cycle= 45 E= -387.402230480336  delta_E= -2.27e-13  |g|=   15  |ddm|= 3.92e-15
    CPU time for cycle= 45      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=21.2017
Linear dependence found in DIIS error vectors.
diis-c [-4.49513860e+02 -1.58421148e+00  3.07394251e-01  3.07394251e-01
 -1.25057472e-01  1.17229770e+00  1.17229770e+00 -2.69208046e-01
  1.90931023e-02]

WARN: HOMO -0.000605549330337914 == LUMO -0.000605549330336074

  mo_energy =
[-1.15675108e+02 -2.32653579e+01 -1.54187942e+01 -1.54187942e+01
 -1.54187942e+01 -5.64611953e+00 -5.64611953e+00 -5.64611953e+00
 -6.05549330e-04 -6.05549330e-04 -6.05549330e-04 -3.68017226e-04]
E1 = -635.8365989366821  E_coul = 215.9187245283975
cycle= 46 E= -419.917874408285  delta_E= -32.5  |g|= 1.28e-06  |ddm|= 4.98
    CPU time for cycle= 46      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=1.57049e-06
Linear dependence found in DIIS error vectors.
diis-c [-2.31229026e-12  1.39466629e-15  6.05186490e-16  5.95359716e-16
  7.52385545e-16  4.87419117e-16  1.00000000e+00  8.01470760e-16
  7.03315085e-16]
  HOMO = -0.000100923802658501  LUMO = 1.95216448874843
  mo_energy =
[-9.12806059e+01 -9.44904528e+00 -2.37527056e+00 -2.37527056e+00
 -2.37527056e+00 -6.05549330e-04 -6.05549330e-04 -6.05549330e-04
 -1.00923803e-04  1.95216449e+00  1.95216449e+00  1.95216449e+00]
E1 = -447.27973377005384  E_coul = 59.87750328971832
cycle= 47 E= -387.402230480336  delta_E= 32.5  |g|=   15  |ddm|= 4.98
    CPU time for cycle= 47      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=21.2017
Linear dependence found in DIIS error vectors.
diis-c [-2.19131904e-12  1.75160625e-15  4.88178184e-16  4.58731772e-16
  6.15738436e-16  3.60603213e-16  1.00000000e+00  9.69021394e-16
  5.56860342e-16]
  HOMO = -0.000100923802658501  LUMO = 1.95216448874843
  mo_energy =
[-9.12806059e+01 -9.44904528e+00 -2.37527056e+00 -2.37527056e+00
 -2.37527056e+00 -6.05549330e-04 -6.05549330e-04 -6.05549330e-04
 -1.00923803e-04  1.95216449e+00  1.95216449e+00  1.95216449e+00]
E1 = -447.27973377005384  E_coul = 59.877503289718305
cycle= 48 E= -387.402230480336  delta_E= -5.68e-14  |g|=   15  |ddm|= 3.77e-15
    CPU time for cycle= 48      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=21.2017
Linear dependence found in DIIS error vectors.
diis-c [-2.11309532e-12  1.49961634e-15  4.02417753e-16  3.73013189e-16
  5.29992748e-16  2.74857525e-16  1.00000000e+00  8.93068585e-16
  1.18748143e-15]
  HOMO = -0.000100923802658501  LUMO = 1.95216448874844
  mo_energy =
[-9.12806059e+01 -9.44904528e+00 -2.37527056e+00 -2.37527056e+00
 -2.37527056e+00 -6.05549330e-04 -6.05549330e-04 -6.05549330e-04
 -1.00923803e-04  1.95216449e+00  1.95216449e+00  1.95216449e+00]
E1 = -447.2797337700539  E_coul = 59.87750328971833
cycle= 49 E= -387.402230480336  delta_E=    0  |g|=   15  |ddm|= 4.15e-15
    CPU time for cycle= 49      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=21.2017
Linear dependence found in DIIS error vectors.
diis-c [-2.05632231e-12  1.58087550e-15  4.30403337e-16  3.91125745e-16
  4.89254315e-16  2.93016337e-16  1.00000000e+00  8.42537295e-16
  1.05841408e-15]
  HOMO = -0.000100923802658501  LUMO = 1.95216448874844
  mo_energy =
[-9.12806059e+01 -9.44904528e+00 -2.37527056e+00 -2.37527056e+00
 -2.37527056e+00 -6.05549330e-04 -6.05549330e-04 -6.05549330e-04
 -1.00923803e-04  1.95216449e+00  1.95216449e+00  1.95216449e+00]
E1 = -447.27973377005384  E_coul = 59.87750328971831
cycle= 50 E= -387.402230480336  delta_E= 5.68e-14  |g|=   15  |ddm|= 3.99e-15
    CPU time for cycle= 50      0.01 sec, wall time      0.01 sec
E1 = -447.27973377005384  E_coul = 59.87750328971831

WARN: 	An extra scf cycle is going to be run
	in order to restore the mo_energy derivatives
	missing in implicit differentiation.


WARN: HOMO -0.000605549330336968 == LUMO -0.000605549330335077

  mo_energy =
[-1.15675108e+02 -2.32653579e+01 -1.54187942e+01 -1.54187942e+01
 -1.54187942e+01 -5.64611953e+00 -5.64611953e+00 -5.64611953e+00
 -6.05549330e-04 -6.05549330e-04 -6.05549330e-04 -3.68017226e-04]
E1 = -635.836598936682  E_coul = 215.91872452839746
Extra cycle  E= -419.917874408285  delta_E= -32.5  |g|= 1.28e-06  |ddm|= 4.98
    CPU time for scf_cycle      1.14 sec, wall time      0.64 sec
exp = [9.50231645e+01 3.89540248e+00 1.00000003e-09 2.05008758e+01
 1.00000008e-09 4.69045764e-01]
E = -419.91787440828455
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((6, 2))
#exps[:, 0] = decaying_nums(5)

# S
exps[0,0] = 9.5045827955887916e+01
exps[1,0] = 4.4881042475048387e+00
exps[2,0] = 3.9799528004692630e-01
             
# P          
exps[3,0] = 18.0
exps[4,0] = 8.5469650038718257e+00
exps[5,0] = 4.8929328703550412e-01

basis = "3s3p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc11947.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 24
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 18 12:43:24 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35676253.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 32000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 32000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 32000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  95.0402492619        1
[INPUT] 0    0    [1    /1   ]  4.33991022615        1
[INPUT] 0    0    [1    /1   ]  0.281468709216       1
[INPUT] 1    0    [1    /1   ]  18.6224309735        1
[INPUT] 1    0    [1    /1   ]  6.3051109799         1
[INPUT] 1    0    [1    /1   ]  0.823339103215       1

nuclear repulsion = 0
number of shells = 6
number of NR pGTOs = 12
number of NR cGTOs = 12
basis = {'Ar': [[0, [95.0402492619046, 1.0]], [0, [4.339910226146717, 1.0]], [0, [0.28146870921624895, 1.0]], [1, [18.622430973511257, 1.0]], [1, [6.305110979902247, 1.0]], [1, [0.8233391032152807, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [95.04024926]
bas 1, expnt(s) = [4.33991023]
bas 2, expnt(s) = [0.28146871]
bas 3, expnt(s) = [18.62243097]
bas 4, expnt(s) = [6.30511098]
bas 5, expnt(s) = [0.8233391]
CPU time:        34.77
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  1  1  1  0 30 31  0]
 [ 0  1  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]]
arg.env = [  0.           0.           0.           0.           0.
   0.           0.           0.           0.           0.
   0.           0.           0.           0.           0.
   0.           0.           0.           0.           0.
   0.           0.           0.           0.          95.04024926
  76.90342803   4.33991023   7.59671063   0.28146871   0.97630973
  18.62243097 112.85735276   6.30511098  29.14743293   0.8233391
   2.28800948]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 16.579698369328966
cond(S) = 7.044635838738209
E1 = -650.7920767759057  E_coul = 190.02910124039587
init E= -460.76297553551
    CPU time for initialize scf      0.19 sec, wall time      0.03 sec
  HOMO = -0.622786339597397  LUMO = 20.5422064005658
  mo_energy =
[-98.53005055 -10.84661316  -9.12643396  -9.12643396  -9.12643396
  -1.47878727  -0.62278634  -0.62278634  -0.62278634  20.5422064
  20.5422064   20.5422064 ]
E1 = -686.2581240880035  E_coul = 216.8766816268063
cycle= 1 E= -469.381442461197  delta_E= -8.62  |g|= 0.895  |ddm|= 0.809
    CPU time for cycle= 1      0.21 sec, wall time      0.01 sec
diis-norm(errvec)=0.770272
diis-c [-0.59331911  1.        ]
  HOMO = 0.358930749009286  LUMO = 22.4391868988651
  mo_energy =
[-95.95735661  -8.99182708  -7.26074399  -7.26074399  -7.26074399
  -0.60545097   0.35893075   0.35893075   0.35893075  22.4391869
  22.4391869   22.4391869 ]
E1 = -685.4836238239906  E_coul = 216.08743320493238
cycle= 2 E= -469.396190619058  delta_E= -0.0147  |g|= 0.0404  |ddm|= 0.0972
    CPU time for cycle= 2      0.15 sec, wall time      0.01 sec
diis-norm(errvec)=0.0380416
diis-c [-8.14866848e-05  4.57832813e-02  9.54216719e-01]
  HOMO = 0.351460562503405  LUMO = 22.3884276087169
  mo_energy =
[-96.09773426  -9.04555533  -7.31211049  -7.31211049  -7.31211049
  -0.61109997   0.35146056   0.35146056   0.35146056  22.38842761
  22.38842761  22.38842761]
E1 = -685.5143425411219  E_coul = 216.11812413559403
cycle= 3 E= -469.396218405528  delta_E= -2.78e-05  |g|= 0.00042  |ddm|= 0.00347
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.000407638
diis-c [-1.11134582e-11 -1.34240740e-03 -3.51402026e-02  1.03648261e+00]
  HOMO = 0.351362844889273  LUMO = 22.3880886490615
  mo_energy =
[-96.09836691  -9.04595231  -7.31253692  -7.31253692  -7.31253692
  -0.61117518   0.35136284   0.35136284   0.35136284  22.38808865
  22.38808865  22.38808865]
E1 = -685.5144076819315  E_coul = 216.1181892731293
cycle= 4 E= -469.396218408802  delta_E= -3.27e-09  |g|= 2.51e-07  |ddm|= 3.71e-05
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=2.23039e-07
diis-c [ 3.02880056e-17 -3.13317132e-09  6.95255060e-06 -1.44548074e-04
  1.00013760e+00]
  HOMO = 0.351362945523256  LUMO = 22.3880885571235
  mo_energy =
[-96.09836646  -9.04595209  -7.3125366   -7.3125366   -7.3125366
  -0.61117514   0.35136295   0.35136295   0.35136295  22.38808856
  22.38808856  22.38808856]
E1 = -685.5144074751291  E_coul = 216.11818906632698
cycle= 5 E= -469.396218408802  delta_E= 5.68e-14  |g|= 1.01e-12  |ddm|= 2.48e-08
    CPU time for cycle= 5      0.01 sec, wall time      0.01 sec
E1 = -685.5144074751291  E_coul = 216.11818906632698
  HOMO = 0.351362945523307  LUMO = 22.388088557126
  mo_energy =
[-96.09836646  -9.04595209  -7.3125366   -7.3125366   -7.3125366
  -0.61117514   0.35136295   0.35136295   0.35136295  22.38808856
  22.38808856  22.38808856]
E1 = -685.5144074751285  E_coul = 216.11818906632604
Extra cycle  E= -469.396218408802  delta_E= -2.27e-13  |g|= 4.53e-14  |ddm|= 1.36e-13
    CPU time for scf_cycle      0.59 sec, wall time      0.09 sec
exp = [95.04024926  4.33991023  0.28146871 18.62243097  6.30511098  0.8233391 ]
E = -469.3962184088024
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((6, 2))
#exps[:, 0] = decaying_nums(5)

# S
exps[0,0] = 9.5045827955887916e+01
exps[1,0] = 4.4881042475048387e+00
exps[2,0] = 3.9799528004692630e-01
             
# P          
exps[3,0] = 18.0
exps[4,0] = 8.5469650038718257e+00
exps[5,0] = 4.8929328703550412e-01

basis = "3s3p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc11947.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 24
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 18 12:43:24 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35676253.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 32000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 32000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 32000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  95.0402492619        1
[INPUT] 0    0    [1    /1   ]  4.33991022615        1
[INPUT] 0    0    [1    /1   ]  0.281468709216       1
[INPUT] 1    0    [1    /1   ]  18.6224309735        1
[INPUT] 1    0    [1    /1   ]  6.3051109799         1
[INPUT] 1    0    [1    /1   ]  0.823339103215       1

nuclear repulsion = 0
number of shells = 6
number of NR pGTOs = 12
number of NR cGTOs = 12
basis = {'Ar': [[0, [95.0402492619046, 1.0]], [0, [4.339910226146717, 1.0]], [0, [0.28146870921624895, 1.0]], [1, [18.622430973511257, 1.0]], [1, [6.305110979902247, 1.0]], [1, [0.8233391032152807, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [95.04024926]
bas 1, expnt(s) = [4.33991023]
bas 2, expnt(s) = [0.28146871]
bas 3, expnt(s) = [18.62243097]
bas 4, expnt(s) = [6.30511098]
bas 5, expnt(s) = [0.8233391]
CPU time:        35.39
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  1  1  1  0 30 31  0]
 [ 0  1  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]]
arg.env = [  0.           0.           0.           0.           0.
   0.           0.           0.           0.           0.
   0.           0.           0.           0.           0.
   0.           0.           0.           0.           0.
   0.           0.           0.           0.          95.04024926
  76.90342803   4.33991023   7.59671063   0.28146871   0.97630973
  18.62243097 112.85735276   6.30511098  29.14743293   0.8233391
   2.28800948]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 16.579698369328966
cond(S) = 7.044635838738209
E1 = -650.7920767759057  E_coul = 190.02910124039587
init E= -460.76297553551
    CPU time for initialize scf      0.18 sec, wall time      0.02 sec
  HOMO = -0.622786339597397  LUMO = 20.5422064005658
  mo_energy =
[-98.53005055 -10.84661316  -9.12643396  -9.12643396  -9.12643396
  -1.47878727  -0.62278634  -0.62278634  -0.62278634  20.5422064
  20.5422064   20.5422064 ]
E1 = -686.2581240880035  E_coul = 216.8766816268063
cycle= 1 E= -469.381442461197  delta_E= -8.62  |g|= 0.895  |ddm|= 0.809
    CPU time for cycle= 1      0.21 sec, wall time      0.01 sec
diis-norm(errvec)=0.770272
diis-c [-0.59331911  1.        ]
  HOMO = 0.358930749009286  LUMO = 22.4391868988651
  mo_energy =
[-95.95735661  -8.99182708  -7.26074399  -7.26074399  -7.26074399
  -0.60545097   0.35893075   0.35893075   0.35893075  22.4391869
  22.4391869   22.4391869 ]
E1 = -685.4836238239906  E_coul = 216.08743320493238
cycle= 2 E= -469.396190619058  delta_E= -0.0147  |g|= 0.0404  |ddm|= 0.0972
    CPU time for cycle= 2      0.16 sec, wall time      0.01 sec
diis-norm(errvec)=0.0380416
diis-c [-8.14866848e-05  4.57832813e-02  9.54216719e-01]
  HOMO = 0.351460562503405  LUMO = 22.3884276087169
  mo_energy =
[-96.09773426  -9.04555533  -7.31211049  -7.31211049  -7.31211049
  -0.61109997   0.35146056   0.35146056   0.35146056  22.38842761
  22.38842761  22.38842761]
E1 = -685.5143425411219  E_coul = 216.11812413559403
cycle= 3 E= -469.396218405528  delta_E= -2.78e-05  |g|= 0.00042  |ddm|= 0.00347
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.000407638
diis-c [-1.11134582e-11 -1.34240740e-03 -3.51402026e-02  1.03648261e+00]
  HOMO = 0.351362844889273  LUMO = 22.3880886490615
  mo_energy =
[-96.09836691  -9.04595231  -7.31253692  -7.31253692  -7.31253692
  -0.61117518   0.35136284   0.35136284   0.35136284  22.38808865
  22.38808865  22.38808865]
E1 = -685.5144076819315  E_coul = 216.1181892731293
cycle= 4 E= -469.396218408802  delta_E= -3.27e-09  |g|= 2.51e-07  |ddm|= 3.71e-05
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=2.23039e-07
diis-c [ 3.02880056e-17 -3.13317132e-09  6.95255060e-06 -1.44548074e-04
  1.00013760e+00]
  HOMO = 0.351362945523256  LUMO = 22.3880885571235
  mo_energy =
[-96.09836646  -9.04595209  -7.3125366   -7.3125366   -7.3125366
  -0.61117514   0.35136295   0.35136295   0.35136295  22.38808856
  22.38808856  22.38808856]
E1 = -685.5144074751291  E_coul = 216.11818906632698
cycle= 5 E= -469.396218408802  delta_E= 5.68e-14  |g|= 1.01e-12  |ddm|= 2.48e-08
    CPU time for cycle= 5      0.01 sec, wall time      0.01 sec
E1 = -685.5144074751291  E_coul = 216.11818906632698
  HOMO = 0.351362945523307  LUMO = 22.388088557126
  mo_energy =
[-96.09836646  -9.04595209  -7.3125366   -7.3125366   -7.3125366
  -0.61117514   0.35136295   0.35136295   0.35136295  22.38808856
  22.38808856  22.38808856]
E1 = -685.5144074751285  E_coul = 216.11818906632604
Extra cycle  E= -469.396218408802  delta_E= -2.27e-13  |g|= 4.53e-14  |ddm|= 1.36e-13
    CPU time for scf_cycle      0.58 sec, wall time      0.08 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 7.044635838738209
E1 = -685.5144074751285  E_coul = 216.11818906632604
init E= -469.396218408802
    CPU time for initialize scf      1.13 sec, wall time      0.05 sec
  HOMO = 0.3513629455233  LUMO = 22.388088557126
  mo_energy =
[-96.09836646  -9.04595209  -7.3125366   -7.3125366   -7.3125366
  -0.61117514   0.35136295   0.35136295   0.35136295  22.38808856
  22.38808856  22.38808856]
E1 = -685.5144074751287  E_coul = 216.11818906632618
cycle= 1 E= -469.396218408802  delta_E= -1.14e-13  |g|= 2.72e-14  |ddm|= 4.57e-15
    CPU time for cycle= 1      0.20 sec, wall time      0.01 sec
E1 = -685.5144074751287  E_coul = 216.11818906632618
  HOMO = 0.351362945523299  LUMO = 22.388088557126
  mo_energy =
[-96.09836646  -9.04595209  -7.3125366   -7.3125366   -7.3125366
  -0.61117514   0.35136295   0.35136295   0.35136295  22.38808856
  22.38808856  22.38808856]
E1 = -685.5144074751286  E_coul = 216.1181890663262
Extra cycle  E= -469.396218408802  delta_E= 1.14e-13  |g|= 2.03e-14  |ddm|= 4.59e-15
    CPU time for scf_cycle      1.45 sec, wall time      0.11 sec
exp = [95.04024926  4.33991023  0.28146871 18.62243097  6.30511098  0.8233391 ]
grad_E = [ 1.13876165e-02  5.00894727e-03 -1.08197958e+00 -7.31698279e-01
  1.97257340e+00  8.01103615e+00]
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((6, 2))
#exps[:, 0] = decaying_nums(5)

# S
exps[0,0] = 9.5045827955887916e+01
exps[1,0] = 4.4881042475048387e+00
exps[2,0] = 3.9799528004692630e-01
             
# P          
exps[3,0] = 18.0
exps[4,0] = 8.5469650038718257e+00
exps[5,0] = 4.8929328703550412e-01

basis = "3s3p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc11947.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 24
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 18 12:43:27 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35676253.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 32000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 32000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 32000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  95.0091699022        1
[INPUT] 0    0    [1    /1   ]  4.02306760823        1
[INPUT] 0    0    [1    /1   ]  2.62960955745        1
[INPUT] 1    0    [1    /1   ]  21.2886697489        1
[INPUT] 1    0    [1    /1   ]  1.00014396764e-09      1
[INPUT] 1    0    [1    /1   ]  0.0613015667132      1

nuclear repulsion = 0
number of shells = 6
number of NR pGTOs = 12
number of NR cGTOs = 12
basis = {'Ar': [[0, [95.00916990217195, 1.0]], [0, [4.023067608230644, 1.0]], [0, [2.6296095574482186, 1.0]], [1, [21.288669748931127, 1.0]], [1, [1.0001439676443624e-09, 1.0]], [1, [0.061301566713163225, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [95.0091699]
bas 1, expnt(s) = [4.02306761]
bas 2, expnt(s) = [2.62960956]
bas 3, expnt(s) = [21.28866975]
bas 4, expnt(s) = [1.00014397e-09]
bas 5, expnt(s) = [0.06130157]
CPU time:        39.94
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  1  1  1  0 30 31  0]
 [ 0  1  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 9.50091699e+01 7.68845660e+01 4.02306761e+00 7.17683601e+00
 2.62960956e+00 5.21715184e+00 2.12886697e+01 1.33404368e+02
 1.00014397e-09 1.64082605e-11 6.13015667e-02 8.89864456e-02]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 10.091549137621058
cond(S) = 66.57937789865598
E1 = -509.7567345669399  E_coul = 121.43201347851529
init E= -388.324721088425
    CPU time for initialize scf      0.18 sec, wall time      0.02 sec
  HOMO = -2.04862602243927  LUMO = -0.000605592893289764
  mo_energy =
[-1.03823743e+02 -1.72736902e+01 -6.63042876e+00 -6.63042876e+00
 -6.63042876e+00 -2.80413829e+00 -2.04862602e+00 -2.04862602e+00
 -2.04862602e+00 -6.05592893e-04 -6.05592893e-04 -6.05592893e-04]
E1 = -628.166799165004  E_coul = 223.2156162306617
cycle= 1 E= -404.951182934342  delta_E= -16.6  |g|= 3.73e-10  |ddm|=   39
    CPU time for cycle= 1      0.21 sec, wall time      0.01 sec
diis-norm(errvec)=5.28028e-10
diis-c [-2.78813505e-19  1.00000000e+00]

WARN: HOMO 2.82553674792153 == LUMO 2.82553674792153

  mo_energy =
[-9.13401479e+01 -9.76440720e+00 -4.31435390e-01 -4.31435390e-01
 -4.31435390e-01 -6.05592893e-04 -6.05592893e-04 -6.05592893e-04
  2.82553675e+00  2.82553675e+00  2.82553675e+00  3.05446764e+00]
E1 = -447.66754610271136  E_coul = 65.92501207895391
cycle= 2 E= -381.742534023757  delta_E= 23.2  |g|= 7.87  |ddm|=   63
    CPU time for cycle= 2      0.15 sec, wall time      0.01 sec
diis-norm(errvec)=3.15758
diis-c [-2.78813491e-19  1.00000000e+00  3.74317515e-14]

WARN: HOMO 2.82553674792084 == LUMO 2.82553674792095

  mo_energy =
[-9.13401479e+01 -9.76440720e+00 -4.31435390e-01 -4.31435390e-01
 -4.31435390e-01 -6.05592893e-04 -6.05592893e-04 -6.05592893e-04
  2.82553675e+00  2.82553675e+00  2.82553675e+00  3.05446764e+00]
E1 = -447.6675461027117  E_coul = 65.92501207895415
cycle= 3 E= -381.742534023758  delta_E= -1.14e-13  |g|= 7.87  |ddm|= 0.00571
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=3.15758
diis-c [-2.78813491e-19  1.00000000e+00  7.92182123e-14 -4.17865019e-14]

WARN: HOMO 2.82553674792084 == LUMO 2.82553674792095

  mo_energy =
[-9.13401479e+01 -9.76440720e+00 -4.31435390e-01 -4.31435390e-01
 -4.31435390e-01 -6.05592893e-04 -6.05592893e-04 -6.05592893e-04
  2.82553675e+00  2.82553675e+00  2.82553675e+00  3.05446764e+00]
E1 = -447.6675461027121  E_coul = 65.92501207895423
cycle= 4 E= -381.742534023758  delta_E= -2.84e-13  |g|= 7.87  |ddm|= 0.00956
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=3.15758
diis-c [-2.78813489e-19  1.00000000e+00 -7.77643943e-09  3.13386688e-09
  4.64261514e-09]

WARN: HOMO 2.82553674792081 == LUMO 2.82553674792082

  mo_energy =
[-9.13401479e+01 -9.76440720e+00 -4.31435390e-01 -4.31435390e-01
 -4.31435390e-01 -6.05592893e-04 -6.05592893e-04 -6.05592893e-04
  2.82553675e+00  2.82553675e+00  2.82553675e+00  3.05446764e+00]
E1 = -447.6675461027121  E_coul = 65.92501207895421
cycle= 5 E= -381.742534023758  delta_E= -5.68e-14  |g|= 7.87  |ddm|= 0.0485
    CPU time for cycle= 5      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=3.15758
Linear dependence found in DIIS error vectors.
diis-c [ 7.61541440e-15  1.00000000e+00 -2.11953638e-08  8.78155415e-08
 -8.22302022e-08  1.56114017e-08]

WARN: HOMO 2.82553674788386 == LUMO 2.8255367479002

  mo_energy =
[-9.13401479e+01 -9.76440720e+00 -4.31435390e-01 -4.31435390e-01
 -4.31435390e-01 -6.05592893e-04 -6.05592893e-04 -6.05592893e-04
  2.82553675e+00  2.82553675e+00  2.82553675e+00  3.05446764e+00]
E1 = -447.66754610272443  E_coul = 65.92501207896107
cycle= 6 E= -381.742534023763  delta_E= -5.46e-12  |g|= 7.87  |ddm|= 2.83
    CPU time for cycle= 6      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=3.15758
Linear dependence found in DIIS error vectors.
diis-c [ 6.49604416e-15  1.00000000e+00  2.34536697e-13  2.99526220e-13
  1.43829277e-13 -6.57816309e-13  2.08251094e-14]

WARN: HOMO 2.8255367479208 == LUMO 2.82553674792088

  mo_energy =
[-9.13401479e+01 -9.76440720e+00 -4.31435390e-01 -4.31435390e-01
 -4.31435390e-01 -6.05592893e-04 -6.05592893e-04 -6.05592893e-04
  2.82553675e+00  2.82553675e+00  2.82553675e+00  3.05446764e+00]
E1 = -447.6675461027118  E_coul = 65.92501207895418
cycle= 7 E= -381.742534023758  delta_E= 5.74e-12  |g|= 7.87  |ddm|= 2.04
    CPU time for cycle= 7      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=3.15758
Linear dependence found in DIIS error vectors.
diis-c [ 9.41855976e-15  1.00000000e+00  2.33972793e-14 -6.80948345e-15
 -2.45254037e-15  6.63437482e-15  2.20752108e-14 -1.64871823e-15]

WARN: HOMO 2.82553674792083 == LUMO 2.82553674792084

  mo_energy =
[-9.13401479e+01 -9.76440720e+00 -4.31435390e-01 -4.31435390e-01
 -4.31435390e-01 -6.05592893e-04 -6.05592893e-04 -6.05592893e-04
  2.82553675e+00  2.82553675e+00  2.82553675e+00  3.05446764e+00]
E1 = -447.6675461027119  E_coul = 65.9250120789542
cycle= 8 E= -381.742534023758  delta_E= -1.14e-13  |g|= 7.87  |ddm|= 2.69
    CPU time for cycle= 8      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=3.15758
Linear dependence found in DIIS error vectors.
diis-c [-2.91369571e-15  1.00000000e+00 -3.54518526e-14 -6.50441724e-14
 -6.29911502e-14 -6.25696502e-14 -1.02437030e-13  1.67443186e-13
  2.03302928e-13]

WARN: HOMO 2.82553674792082 == LUMO 2.82553674792082

  mo_energy =
[-9.13401479e+01 -9.76440720e+00 -4.31435390e-01 -4.31435390e-01
 -4.31435390e-01 -6.05592893e-04 -6.05592893e-04 -6.05592893e-04
  2.82553675e+00  2.82553675e+00  2.82553675e+00  3.05446764e+00]
E1 = -447.6675461027122  E_coul = 65.92501207895427
cycle= 9 E= -381.742534023758  delta_E= -1.71e-13  |g|= 7.87  |ddm|= 0.624
    CPU time for cycle= 9      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=3.15758
Linear dependence found in DIIS error vectors.
diis-c [-8.76678285  0.14036503  0.05941058  0.0595346   0.05932804  0.05837068
  0.31885284  0.21230557  0.09183266]
  HOMO = -2.00379280200333  LUMO = -0.000605592893289714
  mo_energy =
[-1.14515708e+02 -2.24112170e+01 -1.41652328e+01 -1.41652328e+01
 -1.26926293e+01 -5.86336602e+00 -2.00379623e+00 -2.00379280e+00
 -2.00379280e+00 -6.05592893e-04 -6.05592893e-04 -6.05592893e-04]
E1 = -628.1667991650041  E_coul = 223.21561623066086
cycle= 10 E= -404.951182934343  delta_E= -23.2  |g|= 2.93e-10  |ddm|=   63
    CPU time for cycle= 10      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=4.13611e-10
Linear dependence found in DIIS error vectors.
diis-c [ 2.56584616e-16  1.96867337e-13  1.00000000e+00 -8.76933646e-14
 -8.64782918e-14 -9.09877291e-14 -1.93244140e-13  2.41370021e-13
  5.55165635e-14]

WARN: HOMO 2.82553674792093 == LUMO 2.82553674792093

  mo_energy =
[-9.13401479e+01 -9.76440720e+00 -4.31435390e-01 -4.31435390e-01
 -4.31435390e-01 -6.05592893e-04 -6.05592893e-04 -6.05592893e-04
  2.82553675e+00  2.82553675e+00  2.82553675e+00  3.05446764e+00]
E1 = -447.66754610271175  E_coul = 65.92501207895407
cycle= 11 E= -381.742534023758  delta_E= 23.2  |g|= 7.87  |ddm|=   63
    CPU time for cycle= 11      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=3.15758
Linear dependence found in DIIS error vectors.
diis-c [ 9.80032740e-15  7.18079177e-14  1.00000000e+00  3.31086594e-13
 -6.07944422e-14 -6.68830306e-14 -4.19887861e-13  1.90366234e-13
 -1.08601955e-14]

WARN: HOMO 2.82553674792094 == LUMO 2.82553674792094

  mo_energy =
[-9.13401479e+01 -9.76440720e+00 -4.31435390e-01 -4.31435390e-01
 -4.31435390e-01 -6.05592893e-04 -6.05592893e-04 -6.05592893e-04
  2.82553675e+00  2.82553675e+00  2.82553675e+00  3.05446764e+00]
E1 = -447.6675461027116  E_coul = 65.92501207895404
cycle= 12 E= -381.742534023758  delta_E= 1.14e-13  |g|= 7.87  |ddm|= 0.597
    CPU time for cycle= 12      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=3.15758
Linear dependence found in DIIS error vectors.
diis-c [-3.23806303e-15  5.42440609e-15  1.00000000e+00  2.62679557e-13
  1.88852498e-13 -7.84471401e-14 -4.75661610e-13  1.94847931e-13
 -6.19253806e-14]

WARN: HOMO 2.82553674792092 == LUMO 2.82553674792093

  mo_energy =
[-9.13401479e+01 -9.76440720e+00 -4.31435390e-01 -4.31435390e-01
 -4.31435390e-01 -6.05592893e-04 -6.05592893e-04 -6.05592893e-04
  2.82553675e+00  2.82553675e+00  2.82553675e+00  3.05446764e+00]
E1 = -447.66754610271175  E_coul = 65.92501207895413
cycle= 13 E= -381.742534023758  delta_E= -5.68e-14  |g|= 7.87  |ddm|= 2.83
    CPU time for cycle= 13      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=3.15758
Linear dependence found in DIIS error vectors.
diis-c [ 4.57862026e-15 -1.98549116e-14  1.00000000e+00  2.78854684e-13
  1.97266416e-13 -1.67202095e-14 -4.58817780e-13  1.60123181e-13
 -1.05837963e-13]

WARN: HOMO 2.82553674792094 == LUMO 2.82553674792094

  mo_energy =
[-9.13401479e+01 -9.76440720e+00 -4.31435390e-01 -4.31435390e-01
 -4.31435390e-01 -6.05592893e-04 -6.05592893e-04 -6.05592893e-04
  2.82553675e+00  2.82553675e+00  2.82553675e+00  3.05446764e+00]
E1 = -447.66754610271136  E_coul = 65.925012078954
cycle= 14 E= -381.742534023757  delta_E= 2.84e-13  |g|= 7.87  |ddm|= 1.83
    CPU time for cycle= 14      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=3.15758
Linear dependence found in DIIS error vectors.
diis-c [ 3.76759969e-16  4.17036405e-15  1.00000000e+00  7.43787822e-15
  6.97090714e-15  4.86170972e-15 -9.18932255e-15  1.79728503e-14
  3.29677158e-15]

WARN: HOMO 2.82553674792093 == LUMO 2.82553674792093

  mo_energy =
[-9.13401479e+01 -9.76440720e+00 -4.31435390e-01 -4.31435390e-01
 -4.31435390e-01 -6.05592893e-04 -6.05592893e-04 -6.05592893e-04
  2.82553675e+00  2.82553675e+00  2.82553675e+00  3.05446764e+00]
E1 = -447.6675461027112  E_coul = 65.92501207895394
cycle= 15 E= -381.742534023757  delta_E= 1.14e-13  |g|= 7.87  |ddm|= 2.68
    CPU time for cycle= 15      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=3.15758
Linear dependence found in DIIS error vectors.
diis-c [ 3.53889472e-15  4.32843393e-15  1.00000000e+00  7.43956441e-15
  5.43820853e-15  1.86007021e-14 -1.64267501e-16 -6.22814845e-15
  5.89763540e-15]

WARN: HOMO 2.82553674792093 == LUMO 2.82553674792094

  mo_energy =
[-9.13401479e+01 -9.76440720e+00 -4.31435390e-01 -4.31435390e-01
 -4.31435390e-01 -6.05592893e-04 -6.05592893e-04 -6.05592893e-04
  2.82553675e+00  2.82553675e+00  2.82553675e+00  3.05446764e+00]
E1 = -447.6675461027114  E_coul = 65.92501207895398
cycle= 16 E= -381.742534023757  delta_E= -2.27e-13  |g|= 7.87  |ddm|= 0.518
    CPU time for cycle= 16      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=3.15758
Linear dependence found in DIIS error vectors.
diis-c [-2.75504199e-15  6.77041698e-15  1.00000000e+00  7.46643077e-15
  6.35362045e-15  1.92548205e-14 -1.53126949e-15 -3.47433913e-15
  7.23398785e-16]

WARN: HOMO 2.82553674792093 == LUMO 2.82553674792093

  mo_energy =
[-9.13401479e+01 -9.76440720e+00 -4.31435390e-01 -4.31435390e-01
 -4.31435390e-01 -6.05592893e-04 -6.05592893e-04 -6.05592893e-04
  2.82553675e+00  2.82553675e+00  2.82553675e+00  3.05446764e+00]
E1 = -447.6675461027116  E_coul = 65.92501207895403
cycle= 17 E= -381.742534023758  delta_E= -1.14e-13  |g|= 7.87  |ddm|= 0.36
    CPU time for cycle= 17      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=3.15758
Linear dependence found in DIIS error vectors.
diis-c [ 5.30784998e-16 -3.28676838e-01  1.00000000e+00 -3.30384793e-02
  1.40294796e-01  3.36816798e-02 -6.65452856e-02  3.53383436e-02
  2.18945784e-01]

WARN: HOMO 2.82553674792091 == LUMO 2.82553674792091

  mo_energy =
[-9.13401479e+01 -9.76440720e+00 -4.31435390e-01 -4.31435390e-01
 -4.31435390e-01 -6.05592893e-04 -6.05592893e-04 -6.05592893e-04
  2.82553675e+00  2.82553675e+00  2.82553675e+00  3.05446764e+00]
E1 = -447.66754610271147  E_coul = 65.92501207895404
cycle= 18 E= -381.742534023757  delta_E= 1.14e-13  |g|= 7.87  |ddm|= 1.29
    CPU time for cycle= 18      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=3.15758
Linear dependence found in DIIS error vectors.
diis-c [-8.76678285  0.07190272  0.07203718  0.13487879  0.10085192  0.1991892
  0.22720717  0.10952895  0.08440408]
  HOMO = -2.00379280200333  LUMO = -0.000605592893290208
  mo_energy =
[-1.14515708e+02 -2.24112170e+01 -1.41652328e+01 -1.41652328e+01
 -1.26926293e+01 -5.86336602e+00 -2.00379623e+00 -2.00379280e+00
 -2.00379280e+00 -6.05592893e-04 -6.05592893e-04 -6.05592893e-04]
E1 = -628.166799165004  E_coul = 223.2156162306613
cycle= 19 E= -404.951182934343  delta_E= -23.2  |g|= 2.93e-10  |ddm|=   63
    CPU time for cycle= 19      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=4.13612e-10
Linear dependence found in DIIS error vectors.
diis-c [ 9.91945273e-16  1.33584891e-15  6.38308243e-15  1.00000000e+00
  8.85038266e-15  1.77298773e-14 -2.70212545e-17 -5.14534802e-15
 -4.23666756e-16]

WARN: HOMO 2.82553674792104 == LUMO 2.82553674792105

  mo_energy =
[-9.13401479e+01 -9.76440720e+00 -4.31435390e-01 -4.31435390e-01
 -4.31435390e-01 -6.05592893e-04 -6.05592893e-04 -6.05592893e-04
  2.82553675e+00  2.82553675e+00  2.82553675e+00  3.05446764e+00]
E1 = -447.6675461027118  E_coul = 65.9250120789541
cycle= 20 E= -381.742534023758  delta_E= 23.2  |g|= 7.87  |ddm|=   63
    CPU time for cycle= 20      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=3.15758
Linear dependence found in DIIS error vectors.
diis-c [-3.55704216e-15  1.34212483e-15 -7.39736987e-16  1.00000000e+00
  1.91895852e-14  1.90202497e-14 -8.29918850e-15 -2.27963786e-15
  1.03998391e-15]

WARN: HOMO 2.82553674792103 == LUMO 2.82553674792104

  mo_energy =
[-9.13401479e+01 -9.76440720e+00 -4.31435390e-01 -4.31435390e-01
 -4.31435390e-01 -6.05592893e-04 -6.05592893e-04 -6.05592893e-04
  2.82553675e+00  2.82553675e+00  2.82553675e+00  3.05446764e+00]
E1 = -447.66754610271164  E_coul = 65.92501207895408
cycle= 21 E= -381.742534023758  delta_E= 1.14e-13  |g|= 7.87  |ddm|= 0.734
    CPU time for cycle= 21      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=3.15758
Linear dependence found in DIIS error vectors.
diis-c [ 7.79484567e-15  2.70122693e-15 -5.97781202e-15  1.00000000e+00
  1.65323171e-14 -6.12733226e-15  6.69453005e-15  7.97487678e-15
  6.14884399e-15]

WARN: HOMO 2.82553674792105 == LUMO 2.82553674792106

  mo_energy =
[-9.13401479e+01 -9.76440720e+00 -4.31435390e-01 -4.31435390e-01
 -4.31435390e-01 -6.05592893e-04 -6.05592893e-04 -6.05592893e-04
  2.82553675e+00  2.82553675e+00  2.82553675e+00  3.05446764e+00]
E1 = -447.66754610271164  E_coul = 65.92501207895411
cycle= 22 E= -381.742534023758  delta_E= 5.68e-14  |g|= 7.87  |ddm|= 1.59
    CPU time for cycle= 22      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=3.15758
Linear dependence found in DIIS error vectors.
diis-c [-9.09319123e-16  4.47408887e-15 -5.69482619e-15  1.00000000e+00
  1.17732296e-14 -7.38772015e-15  1.16125034e-14  6.89266952e-15
  6.96815973e-15]

WARN: HOMO 2.82553674792104 == LUMO 2.82553674792105

  mo_energy =
[-9.13401479e+01 -9.76440720e+00 -4.31435390e-01 -4.31435390e-01
 -4.31435390e-01 -6.05592893e-04 -6.05592893e-04 -6.05592893e-04
  2.82553675e+00  2.82553675e+00  2.82553675e+00  3.05446764e+00]
E1 = -447.6675461027117  E_coul = 65.9250120789541
cycle= 23 E= -381.742534023758  delta_E= -5.68e-14  |g|= 7.87  |ddm|= 1.19
    CPU time for cycle= 23      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=3.15758
Linear dependence found in DIIS error vectors.
diis-c [-1.19965490e-15  8.84457950e-15 -7.27102155e-15  1.00000000e+00
  1.14543218e-14 -8.68283905e-15  1.47979934e-14 -3.08795618e-15
  1.22521125e-14]

WARN: HOMO 2.82553674792105 == LUMO 2.82553674792105

  mo_energy =
[-9.13401479e+01 -9.76440720e+00 -4.31435390e-01 -4.31435390e-01
 -4.31435390e-01 -6.05592893e-04 -6.05592893e-04 -6.05592893e-04
  2.82553675e+00  2.82553675e+00  2.82553675e+00  3.05446764e+00]
E1 = -447.66754610271187  E_coul = 65.92501207895414
cycle= 24 E= -381.742534023758  delta_E= -1.71e-13  |g|= 7.87  |ddm|= 1.21
    CPU time for cycle= 24      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=3.15758
Linear dependence found in DIIS error vectors.
diis-c [ 2.33460436e-15  2.05375345e-14 -9.18572875e-15  1.00000000e+00
  8.51835744e-15 -1.32687918e-14  2.04947388e-14 -7.00727503e-15
  8.22268172e-15]

WARN: HOMO 2.82553674792105 == LUMO 2.82553674792105

  mo_energy =
[-9.13401479e+01 -9.76440720e+00 -4.31435390e-01 -4.31435390e-01
 -4.31435390e-01 -6.05592893e-04 -6.05592893e-04 -6.05592893e-04
  2.82553675e+00  2.82553675e+00  2.82553675e+00  3.05446764e+00]
E1 = -447.6675461027117  E_coul = 65.92501207895413
cycle= 25 E= -381.742534023758  delta_E= 1.71e-13  |g|= 7.87  |ddm|= 0.382
    CPU time for cycle= 25      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=3.15758
Linear dependence found in DIIS error vectors.
diis-c [ 4.52027415e-15  3.32118507e-14 -1.24007315e-14  1.00000000e+00
  1.34168342e-15 -2.23121043e-14  3.36955775e-14 -1.69592858e-14
  1.17552296e-14]

WARN: HOMO 2.82553674792105 == LUMO 2.82553674792106

  mo_energy =
[-9.13401479e+01 -9.76440720e+00 -4.31435390e-01 -4.31435390e-01
 -4.31435390e-01 -6.05592893e-04 -6.05592893e-04 -6.05592893e-04
  2.82553675e+00  2.82553675e+00  2.82553675e+00  3.05446764e+00]
E1 = -447.6675461027116  E_coul = 65.92501207895405
cycle= 26 E= -381.742534023758  delta_E= 5.68e-14  |g|= 7.87  |ddm|= 2.49
    CPU time for cycle= 26      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=3.15758
Linear dependence found in DIIS error vectors.
diis-c [ 3.27291796e-15  7.36727515e-15  1.07820385e-14  1.00000000e+00
  1.10908559e-14 -7.84130153e-15  5.00839008e-15 -2.44667448e-15
  4.32724698e-15]

WARN: HOMO 2.82553674792105 == LUMO 2.82553674792105

  mo_energy =
[-9.13401479e+01 -9.76440720e+00 -4.31435390e-01 -4.31435390e-01
 -4.31435390e-01 -6.05592893e-04 -6.05592893e-04 -6.05592893e-04
  2.82553675e+00  2.82553675e+00  2.82553675e+00  3.05446764e+00]
E1 = -447.66754610271164  E_coul = 65.92501207895415
cycle= 27 E= -381.742534023757  delta_E= 5.68e-14  |g|= 7.87  |ddm|= 2.83
    CPU time for cycle= 27      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=3.15758
Linear dependence found in DIIS error vectors.
diis-c [-8.76678285  0.11959498  0.42176681  0.04860607  0.06758527  0.04890944
  0.15443693  0.05456247  0.08453803]
  HOMO = -2.00379280200333  LUMO = -0.000605592893293464
  mo_energy =
[-1.14515708e+02 -2.24112170e+01 -1.41652328e+01 -1.41652328e+01
 -1.26926293e+01 -5.86336602e+00 -2.00379623e+00 -2.00379280e+00
 -2.00379280e+00 -6.05592893e-04 -6.05592893e-04 -6.05592893e-04]
E1 = -628.1667991650036  E_coul = 223.2156162306611
cycle= 28 E= -404.951182934342  delta_E= -23.2  |g|= 2.93e-10  |ddm|=   63
    CPU time for cycle= 28      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=4.13608e-10
Linear dependence found in DIIS error vectors.
diis-c [ 9.35708896e-15  2.05891626e-15 -2.34682259e-15  6.86401080e-15
  1.00000000e+00 -9.78570240e-15  2.05517475e-15 -3.78227548e-15
  4.57640316e-16]

WARN: HOMO 2.82553674792159 == LUMO 2.82553674792159

  mo_energy =
[-9.13401479e+01 -9.76440720e+00 -4.31435390e-01 -4.31435390e-01
 -4.31435390e-01 -6.05592893e-04 -6.05592893e-04 -6.05592893e-04
  2.82553675e+00  2.82553675e+00  2.82553675e+00  3.05446764e+00]
E1 = -447.6675461027113  E_coul = 65.92501207895388
cycle= 29 E= -381.742534023757  delta_E= 23.2  |g|= 7.87  |ddm|=   63
    CPU time for cycle= 29      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=3.15758
Linear dependence found in DIIS error vectors.
diis-c [ 5.93739238e-16  3.88235684e-16 -1.22490742e-15  4.89681057e-15
  1.00000000e+00 -1.27888499e-15  9.45982867e-16 -6.03694507e-15
 -1.45755130e-15]

WARN: HOMO 2.82553674792158 == LUMO 2.82553674792158

  mo_energy =
[-9.13401479e+01 -9.76440720e+00 -4.31435390e-01 -4.31435390e-01
 -4.31435390e-01 -6.05592893e-04 -6.05592893e-04 -6.05592893e-04
  2.82553675e+00  2.82553675e+00  2.82553675e+00  3.05446764e+00]
E1 = -447.6675461027114  E_coul = 65.92501207895394
cycle= 30 E= -381.742534023757  delta_E= -5.68e-14  |g|= 7.87  |ddm|= 2.83
    CPU time for cycle= 30      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=3.15758
Linear dependence found in DIIS error vectors.
diis-c [ 4.48458907e-15 -6.99949501e-15  1.35606864e-15  3.89690897e-16
  1.00000000e+00 -1.96141860e-15  2.13273681e-14 -9.46910011e-15
 -8.57352961e-15]

WARN: HOMO 2.82553674792158 == LUMO 2.82553674792158

  mo_energy =
[-9.13401479e+01 -9.76440720e+00 -4.31435390e-01 -4.31435390e-01
 -4.31435390e-01 -6.05592893e-04 -6.05592893e-04 -6.05592893e-04
  2.82553675e+00  2.82553675e+00  2.82553675e+00  3.05446764e+00]
E1 = -447.6675461027113  E_coul = 65.92501207895387
cycle= 31 E= -381.742534023757  delta_E=    0  |g|= 7.87  |ddm|= 2.76
    CPU time for cycle= 31      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=3.15758
Linear dependence found in DIIS error vectors.
diis-c [-1.81560746e-14 -7.08342609e-15 -1.29462784e-14 -3.97688727e-15
  1.00000000e+00 -8.70746463e-16  1.93905349e-14  1.29808354e-14
 -8.98497436e-15]

WARN: HOMO 2.82553674792147 == LUMO 2.8255367479215

  mo_energy =
[-9.13401479e+01 -9.76440720e+00 -4.31435390e-01 -4.31435390e-01
 -4.31435390e-01 -6.05592893e-04 -6.05592893e-04 -6.05592893e-04
  2.82553675e+00  2.82553675e+00  2.82553675e+00  3.05446764e+00]
E1 = -447.6675461027111  E_coul = 65.92501207895391
cycle= 32 E= -381.742534023757  delta_E= 2.27e-13  |g|= 7.87  |ddm|= 1.64
    CPU time for cycle= 32      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=3.15758
Linear dependence found in DIIS error vectors.
diis-c [ 2.87520103e-15 -2.29475713e-15 -6.52404574e-15 -1.34910062e-14
  1.00000000e+00 -8.29214842e-16  1.48628337e-14  6.38177790e-15
 -1.86508063e-15]

WARN: HOMO 2.82553674792158 == LUMO 2.82553674792158

  mo_energy =
[-9.13401479e+01 -9.76440720e+00 -4.31435390e-01 -4.31435390e-01
 -4.31435390e-01 -6.05592893e-04 -6.05592893e-04 -6.05592893e-04
  2.82553675e+00  2.82553675e+00  2.82553675e+00  3.05446764e+00]
E1 = -447.6675461027113  E_coul = 65.92501207895387
cycle= 33 E= -381.742534023757  delta_E= -2.27e-13  |g|= 7.87  |ddm|= 2.58
    CPU time for cycle= 33      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=3.15758
Linear dependence found in DIIS error vectors.
diis-c [ 7.41646675e-15  1.20856400e-14 -1.73972111e-14 -1.44286449e-14
  1.00000000e+00 -1.54506183e-15  1.08299966e-14  3.87539642e-15
  2.58494097e-15]

WARN: HOMO 2.82553674792158 == LUMO 2.82553674792159

  mo_energy =
[-9.13401479e+01 -9.76440720e+00 -4.31435390e-01 -4.31435390e-01
 -4.31435390e-01 -6.05592893e-04 -6.05592893e-04 -6.05592893e-04
  2.82553675e+00  2.82553675e+00  2.82553675e+00  3.05446764e+00]
E1 = -447.66754610271124  E_coul = 65.92501207895386
cycle= 34 E= -381.742534023757  delta_E= 5.68e-14  |g|= 7.87  |ddm|= 1.35
    CPU time for cycle= 34      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=3.15758
Linear dependence found in DIIS error vectors.
diis-c [ 2.58388926e-15  7.10126716e-15 -9.28241973e-15 -1.16573415e-14
  1.00000000e+00 -1.14089367e-15  1.43868518e-14 -3.25778860e-15
 -1.66095675e-16]

WARN: HOMO 2.82553674792159 == LUMO 2.82553674792159

  mo_energy =
[-9.13401479e+01 -9.76440720e+00 -4.31435390e-01 -4.31435390e-01
 -4.31435390e-01 -6.05592893e-04 -6.05592893e-04 -6.05592893e-04
  2.82553675e+00  2.82553675e+00  2.82553675e+00  3.05446764e+00]
E1 = -447.66754610271124  E_coul = 65.92501207895387
cycle= 35 E= -381.742534023757  delta_E= 5.68e-14  |g|= 7.87  |ddm|= 2.06
    CPU time for cycle= 35      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=3.15758
Linear dependence found in DIIS error vectors.
diis-c [ 6.81556829e-15  9.73998220e-15 -1.09355096e-14 -7.62250288e-16
  1.00000000e+00 -1.27994876e-15  6.29839646e-15 -1.88224236e-15
 -5.11381457e-15]

WARN: HOMO 2.82553674792158 == LUMO 2.82553674792158

  mo_energy =
[-9.13401479e+01 -9.76440720e+00 -4.31435390e-01 -4.31435390e-01
 -4.31435390e-01 -6.05592893e-04 -6.05592893e-04 -6.05592893e-04
  2.82553675e+00  2.82553675e+00  2.82553675e+00  3.05446764e+00]
E1 = -447.66754610271147  E_coul = 65.92501207895394
cycle= 36 E= -381.742534023758  delta_E= -1.71e-13  |g|= 7.87  |ddm|= 1.44
    CPU time for cycle= 36      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=3.15758
Linear dependence found in DIIS error vectors.
diis-c [-8.36561141  0.05238016  0.0932103   0.0568314   0.06396709  0.33333333
  0.17675685  0.07377664  0.14974423]
  HOMO = -2.00380362073374  LUMO = -0.000605592893290208
  mo_energy =
[-1.14515708e+02 -2.24112170e+01 -1.36743553e+01 -1.36743553e+01
 -1.36743553e+01 -5.86336602e+00 -2.00380362e+00 -2.00380362e+00
 -2.00380362e+00 -6.05592893e-04 -6.05592893e-04 -6.05592893e-04]
E1 = -628.1667991650036  E_coul = 223.21561623066137
cycle= 37 E= -404.951182934342  delta_E= -23.2  |g|= 2.92e-10  |ddm|=   63
    CPU time for cycle= 37      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=4.13398e-10
Linear dependence found in DIIS error vectors.
diis-c [ 7.68615240e-16  3.56859922e-15 -1.81224475e-14 -4.70663381e-15
  8.10559162e-15  1.00000000e+00  2.97147019e-16 -4.64463399e-15
 -7.64462560e-15]

WARN: HOMO 2.82553674792187 == LUMO 2.8255367479219

  mo_energy =
[-9.13401479e+01 -9.76440720e+00 -4.31435390e-01 -4.31435390e-01
 -4.31435390e-01 -6.05592893e-04 -6.05592893e-04 -6.05592893e-04
  2.82553675e+00  2.82553675e+00  2.82553675e+00  3.05446764e+00]
E1 = -447.667546102711  E_coul = 65.92501207895377
cycle= 38 E= -381.742534023757  delta_E= 23.2  |g|= 7.87  |ddm|=   63
    CPU time for cycle= 38      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=3.15758
Linear dependence found in DIIS error vectors.
diis-c [ 4.22310276e-15  3.79267395e-15 -1.61003568e-14 -5.00734430e-15
  9.51319582e-15  1.00000000e+00 -7.95249288e-15 -4.58916250e-15
 -3.87305790e-15]

WARN: HOMO 2.82553674792191 == LUMO 2.82553674792191

  mo_energy =
[-9.13401479e+01 -9.76440720e+00 -4.31435390e-01 -4.31435390e-01
 -4.31435390e-01 -6.05592893e-04 -6.05592893e-04 -6.05592893e-04
  2.82553675e+00  2.82553675e+00  2.82553675e+00  3.05446764e+00]
E1 = -447.6675461027114  E_coul = 65.92501207895387
cycle= 39 E= -381.742534023758  delta_E= -3.41e-13  |g|= 7.87  |ddm|= 6.77e-14
    CPU time for cycle= 39      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=3.15758
Linear dependence found in DIIS error vectors.
diis-c [-5.23476885e-15  1.60430628e-15 -1.19937362e-14 -1.05702415e-14
  1.00994118e-14  1.00000000e+00 -5.12337854e-15 -3.35743899e-15
 -3.84012027e-15]

WARN: HOMO 2.82553674792189 == LUMO 2.8255367479219

  mo_energy =
[-9.13401479e+01 -9.76440720e+00 -4.31435390e-01 -4.31435390e-01
 -4.31435390e-01 -6.05592893e-04 -6.05592893e-04 -6.05592893e-04
  2.82553675e+00  2.82553675e+00  2.82553675e+00  3.05446764e+00]
E1 = -447.667546102711  E_coul = 65.92501207895377
cycle= 40 E= -381.742534023757  delta_E= 3.41e-13  |g|= 7.87  |ddm|= 2.83
    CPU time for cycle= 40      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=3.15758
Linear dependence found in DIIS error vectors.
diis-c [-5.19575841e-16  4.65753494e-15 -1.26107209e-14 -1.69501743e-14
  1.43579201e-14  1.00000000e+00 -4.85117984e-15 -3.08805637e-15
 -5.18403407e-15]

WARN: HOMO 2.8255367479219 == LUMO 2.8255367479219

  mo_energy =
[-9.13401479e+01 -9.76440720e+00 -4.31435390e-01 -4.31435390e-01
 -4.31435390e-01 -6.05592893e-04 -6.05592893e-04 -6.05592893e-04
  2.82553675e+00  2.82553675e+00  2.82553675e+00  3.05446764e+00]
E1 = -447.6675461027111  E_coul = 65.92501207895378
cycle= 41 E= -381.742534023757  delta_E= -1.14e-13  |g|= 7.87  |ddm|= 2.83
    CPU time for cycle= 41      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=3.15758
Linear dependence found in DIIS error vectors.
diis-c [ 2.35027813e-15 -2.82321606e-15 -1.31073042e-14 -1.23180652e-14
  1.47648943e-14  1.00000000e+00 -3.61251747e-15 -1.88257584e-15
 -4.77040803e-15]

WARN: HOMO 2.8255367479219 == LUMO 2.8255367479219

  mo_energy =
[-9.13401479e+01 -9.76440720e+00 -4.31435390e-01 -4.31435390e-01
 -4.31435390e-01 -6.05592893e-04 -6.05592893e-04 -6.05592893e-04
  2.82553675e+00  2.82553675e+00  2.82553675e+00  3.05446764e+00]
E1 = -447.66754610271147  E_coul = 65.9250120789539
cycle= 42 E= -381.742534023758  delta_E= -2.27e-13  |g|= 7.87  |ddm|= 2.83
    CPU time for cycle= 42      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=3.15758
Linear dependence found in DIIS error vectors.
diis-c [ 1.19764691e-14 -2.81296182e-15 -4.83303897e-16 -1.13626151e-14
  4.35748433e-15  1.00000000e+00 -3.38250808e-15 -1.72584825e-15
 -9.58027790e-15]

WARN: HOMO 2.82553674792192 == LUMO 2.82553674792192

  mo_energy =
[-9.13401479e+01 -9.76440720e+00 -4.31435390e-01 -4.31435390e-01
 -4.31435390e-01 -6.05592893e-04 -6.05592893e-04 -6.05592893e-04
  2.82553675e+00  2.82553675e+00  2.82553675e+00  3.05446764e+00]
E1 = -447.6675461027114  E_coul = 65.92501207895387
cycle= 43 E= -381.742534023758  delta_E=    0  |g|= 7.87  |ddm|= 2.77
    CPU time for cycle= 43      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=3.15758
Linear dependence found in DIIS error vectors.
diis-c [ 4.55921525e-15 -2.62471271e-15 -5.31198751e-15  5.33438616e-15
 -9.31660562e-15  1.00000000e+00 -3.30691586e-15 -1.63529321e-15
 -7.07428948e-15]

WARN: HOMO 2.82553674792191 == LUMO 2.82553674792191

  mo_energy =
[-9.13401479e+01 -9.76440720e+00 -4.31435390e-01 -4.31435390e-01
 -4.31435390e-01 -6.05592893e-04 -6.05592893e-04 -6.05592893e-04
  2.82553675e+00  2.82553675e+00  2.82553675e+00  3.05446764e+00]
E1 = -447.66754610271136  E_coul = 65.92501207895386
cycle= 44 E= -381.742534023758  delta_E= 5.68e-14  |g|= 7.87  |ddm|= 2.83
    CPU time for cycle= 44      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=3.15758
Linear dependence found in DIIS error vectors.
diis-c [-1.44839314e-15 -2.79896221e-16 -5.87678686e-15 -6.00630150e-15
 -7.49838397e-15  1.00000000e+00 -1.01798850e-15  6.30248118e-16
 -3.46698535e-15]

WARN: HOMO 2.8255367479219 == LUMO 2.8255367479219

  mo_energy =
[-9.13401479e+01 -9.76440720e+00 -4.31435390e-01 -4.31435390e-01
 -4.31435390e-01 -6.05592893e-04 -6.05592893e-04 -6.05592893e-04
  2.82553675e+00  2.82553675e+00  2.82553675e+00  3.05446764e+00]
E1 = -447.66754610271136  E_coul = 65.92501207895384
cycle= 45 E= -381.742534023758  delta_E=    0  |g|= 7.87  |ddm|= 2.83
    CPU time for cycle= 45      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=3.15758
Linear dependence found in DIIS error vectors.
diis-c [-8.36561141  0.08333333  0.15928184  0.25898114  0.08333333  0.14314496
  0.08333333  0.08333333  0.10525872]
  HOMO = -2.00380362073374  LUMO = -0.000605592893289515
  mo_energy =
[-1.14515708e+02 -2.24112170e+01 -1.36743553e+01 -1.36743553e+01
 -1.36743553e+01 -5.86336602e+00 -2.00380362e+00 -2.00380362e+00
 -2.00380362e+00 -6.05592893e-04 -6.05592893e-04 -6.05592893e-04]
E1 = -628.1667991650035  E_coul = 223.21561623066114
cycle= 46 E= -404.951182934342  delta_E= -23.2  |g|= 2.92e-10  |ddm|=   63
    CPU time for cycle= 46      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=4.13399e-10
Linear dependence found in DIIS error vectors.
diis-c [ 1.59491390e-15  1.39534118e-15  2.83672045e-15 -2.64014645e-15
 -5.55540337e-15 -4.89540732e-15  1.00000000e+00  2.49429490e-15
  9.65966858e-16]

WARN: HOMO 2.8255367479216 == LUMO 2.82553674792161

  mo_energy =
[-9.13401479e+01 -9.76440720e+00 -4.31435390e-01 -4.31435390e-01
 -4.31435390e-01 -6.05592893e-04 -6.05592893e-04 -6.05592893e-04
  2.82553675e+00  2.82553675e+00  2.82553675e+00  3.05446764e+00]
E1 = -447.66754610271175  E_coul = 65.92501207895398
cycle= 47 E= -381.742534023758  delta_E= 23.2  |g|= 7.87  |ddm|=   63
    CPU time for cycle= 47      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=3.15758
Linear dependence found in DIIS error vectors.
diis-c [ 2.89899984e-15  2.64578876e-15  3.49792103e-15  4.29045070e-15
 -4.43234814e-15 -4.85357430e-15  1.00000000e+00 -6.59155846e-15
 -1.51241212e-16]

WARN: HOMO 2.82553674792161 == LUMO 2.82553674792161

  mo_energy =
[-9.13401479e+01 -9.76440720e+00 -4.31435390e-01 -4.31435390e-01
 -4.31435390e-01 -6.05592893e-04 -6.05592893e-04 -6.05592893e-04
  2.82553675e+00  2.82553675e+00  2.82553675e+00  3.05446764e+00]
E1 = -447.6675461027114  E_coul = 65.9250120789539
cycle= 48 E= -381.742534023758  delta_E= 2.84e-13  |g|= 7.87  |ddm|= 1.36
    CPU time for cycle= 48      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=3.15758
Linear dependence found in DIIS error vectors.
diis-c [ 1.94850997e-15  2.73947575e-15  4.59027229e-15  3.45234194e-15
 -4.17174894e-15 -6.70856784e-15  1.00000000e+00 -6.59854402e-15
  1.13563762e-15]

WARN: HOMO 2.8255367479216 == LUMO 2.82553674792161

  mo_energy =
[-9.13401479e+01 -9.76440720e+00 -4.31435390e-01 -4.31435390e-01
 -4.31435390e-01 -6.05592893e-04 -6.05592893e-04 -6.05592893e-04
  2.82553675e+00  2.82553675e+00  2.82553675e+00  3.05446764e+00]
E1 = -447.6675461027115  E_coul = 65.92501207895397
cycle= 49 E= -381.742534023758  delta_E= -5.68e-14  |g|= 7.87  |ddm|= 0.492
    CPU time for cycle= 49      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=3.15758
Linear dependence found in DIIS error vectors.
diis-c [-2.17512234e-15  2.92305563e-16  4.73008261e-15  4.84820438e-15
 -1.47606866e-15 -5.52561383e-15  1.00000000e+00 -5.46501460e-15
 -2.27550430e-15]

WARN: HOMO 2.82553674792159 == LUMO 2.8255367479216

  mo_energy =
[-9.13401479e+01 -9.76440720e+00 -4.31435390e-01 -4.31435390e-01
 -4.31435390e-01 -6.05592893e-04 -6.05592893e-04 -6.05592893e-04
  2.82553675e+00  2.82553675e+00  2.82553675e+00  3.05446764e+00]
E1 = -447.66754610271136  E_coul = 65.92501207895393
cycle= 50 E= -381.742534023757  delta_E= 1.14e-13  |g|= 7.87  |ddm|= 1.08
    CPU time for cycle= 50      0.01 sec, wall time      0.01 sec
E1 = -447.66754610271136  E_coul = 65.92501207895393

WARN: 	An extra scf cycle is going to be run
	in order to restore the mo_energy derivatives
	missing in implicit differentiation.

  HOMO = -2.00371482970203  LUMO = -0.00060559289329031
  mo_energy =
[-1.14515708e+02 -2.24112170e+01 -1.56379108e+01 -1.26926293e+01
 -1.26926293e+01 -5.86336602e+00 -2.00379623e+00 -2.00379623e+00
 -2.00371483e+00 -6.05592893e-04 -6.05592893e-04 -6.05592893e-04]
E1 = -628.1667991650037  E_coul = 223.2156162306614
Extra cycle  E= -404.951182934342  delta_E= -23.2  |g|= 2.93e-10  |ddm|=   63
    CPU time for scf_cycle      1.12 sec, wall time      0.62 sec
exp = [9.50091699e+01 4.02306761e+00 2.62960956e+00 2.12886697e+01
 1.00014397e-09 6.13015667e-02]
E = -404.9511829343423
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((6, 2))
#exps[:, 0] = decaying_nums(5)

# S
exps[0,0] = 9.5045827955887916e+01
exps[1,0] = 4.4881042475048387e+00
exps[2,0] = 3.9799528004692630e-01
             
# P          
exps[3,0] = 18.0
exps[4,0] = 8.5469650038718257e+00
exps[5,0] = 4.8929328703550412e-01

basis = "3s3p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc11947.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 24
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 18 12:43:28 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35676253.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 32000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 32000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 32000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  95.0361573353        1
[INPUT] 0    0    [1    /1   ]  4.29819454245        1
[INPUT] 0    0    [1    /1   ]  0.590626301541       1
[INPUT] 1    0    [1    /1   ]  18.9734695243        1
[INPUT] 1    0    [1    /1   ]  5.47497639447        1
[INPUT] 1    0    [1    /1   ]  0.723008797125       1

nuclear repulsion = 0
number of shells = 6
number of NR pGTOs = 12
number of NR cGTOs = 12
basis = {'Ar': [[0, [95.03615733529247, 1.0]], [0, [4.298194542449791, 1.0]], [0, [0.5906263015405951, 1.0]], [1, [18.973469524282716, 1.0]], [1, [5.474976394473575, 1.0]], [1, [0.7230087971251848, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [95.03615734]
bas 1, expnt(s) = [4.29819454]
bas 2, expnt(s) = [0.5906263]
bas 3, expnt(s) = [18.97346952]
bas 4, expnt(s) = [5.47497639]
bas 5, expnt(s) = [0.7230088]
CPU time:        41.10
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  1  1  1  0 30 31  0]
 [ 0  1  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]]
arg.env = [  0.           0.           0.           0.           0.
   0.           0.           0.           0.           0.
   0.           0.           0.           0.           0.
   0.           0.           0.           0.           0.
   0.           0.           0.           0.          95.03615734
  76.90094473   4.29819454   7.54187926   0.5906263    1.70215699
  18.97346952 115.52283418   5.47497639  24.43217927   0.7230088
   1.94497431]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 16.890705422988503
cond(S) = 5.5285643020563136
E1 = -660.4321423495389  E_coul = 196.89746151750774
init E= -463.534680832031
    CPU time for initialize scf      0.18 sec, wall time      0.02 sec
  HOMO = -0.485876216158157  LUMO = 18.6806268246287
  mo_energy =
[-97.95838005 -10.49945179  -8.85974034  -8.85974034  -8.85974034
  -1.01575642  -0.48587622  -0.48587622  -0.48587622  18.68062682
  18.68062682  18.68062682]
E1 = -687.5349073031288  E_coul = 216.07898148890266
cycle= 1 E= -471.455925814226  delta_E= -7.92  |g|= 0.672  |ddm|= 0.61
    CPU time for cycle= 1      0.21 sec, wall time      0.01 sec
diis-norm(errvec)=0.633708
diis-c [-0.40158593  1.        ]
  HOMO = 0.223706095196752  LUMO = 20.0143450275989
  mo_energy =
[-96.28603996  -9.2219106   -7.54009345  -7.54009345  -7.54009345
  -0.23601093   0.2237061    0.2237061    0.2237061   20.01434503
  20.01434503  20.01434503]
E1 = -686.8912670803965  E_coul = 215.42653685063559
cycle= 2 E= -471.464730229761  delta_E= -0.0088  |g|= 0.0388  |ddm|= 0.0709
    CPU time for cycle= 2      0.16 sec, wall time      0.01 sec
diis-norm(errvec)=0.039667
diis-c [-7.30224893e-05  5.76092535e-02  9.42390747e-01]
  HOMO = 0.218819309799931  LUMO = 19.9728228836833
  mo_energy =
[-96.40018534  -9.26427823  -7.58244083  -7.58244083  -7.58244083
  -0.24500226   0.21881931   0.21881931   0.21881931  19.97282288
  19.97282288  19.97282288]
E1 = -686.9236651129038  E_coul = 215.45890764586395
cycle= 3 E= -471.46475746704  delta_E= -2.72e-05  |g|= 0.000398  |ddm|= 0.00323
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.000428491
diis-c [-8.70493665e-12 -1.79410459e-03 -3.70132976e-02  1.03880740e+00]
  HOMO = 0.218739315296109  LUMO = 19.9725014188891
  mo_energy =
[-96.40078561  -9.26464595  -7.58284686  -7.58284686  -7.58284686
  -0.24512746   0.21873932   0.21873932   0.21873932  19.97250142
  19.97250142  19.97250142]
E1 = -686.923755301892  E_coul = 215.45899783168147
cycle= 4 E= -471.464757470211  delta_E= -3.17e-09  |g|= 2.32e-07  |ddm|= 3.38e-05
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=2.25131e-07
diis-c [ 2.13856791e-17 -8.75314204e-09  6.62817948e-06 -1.31576278e-04
  1.00012496e+00]
  HOMO = 0.218739388581462  LUMO = 19.972501355898
  mo_energy =
[-96.40078522  -9.26464577  -7.58284657  -7.58284657  -7.58284657
  -0.2451274    0.21873939   0.21873939   0.21873939  19.97250136
  19.97250136  19.97250136]
E1 = -686.9237550931722  E_coul = 215.4589976229625
cycle= 5 E= -471.46475747021  delta_E= 8.53e-13  |g|= 1.31e-12  |ddm|= 2.21e-08
    CPU time for cycle= 5      0.01 sec, wall time      0.01 sec
E1 = -686.9237550931722  E_coul = 215.4589976229625
  HOMO = 0.218739388581669  LUMO = 19.9725013559003
  mo_energy =
[-96.40078522  -9.26464577  -7.58284657  -7.58284657  -7.58284657
  -0.2451274    0.21873939   0.21873939   0.21873939  19.97250136
  19.97250136  19.97250136]
E1 = -686.9237550931708  E_coul = 215.4589976229611
Extra cycle  E= -471.46475747021  delta_E= -5.68e-14  |g|= 1.36e-13  |ddm|= 1.68e-13
    CPU time for scf_cycle      0.58 sec, wall time      0.09 sec
exp = [95.03615734  4.29819454  0.5906263  18.97346952  5.47497639  0.7230088 ]
E = -471.46475747020975
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((6, 2))
#exps[:, 0] = decaying_nums(5)

# S
exps[0,0] = 9.5045827955887916e+01
exps[1,0] = 4.4881042475048387e+00
exps[2,0] = 3.9799528004692630e-01
             
# P          
exps[3,0] = 18.0
exps[4,0] = 8.5469650038718257e+00
exps[5,0] = 4.8929328703550412e-01

basis = "3s3p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc11947.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 24
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 18 12:43:28 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35676253.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 32000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 32000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 32000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  95.0361573353        1
[INPUT] 0    0    [1    /1   ]  4.29819454245        1
[INPUT] 0    0    [1    /1   ]  0.590626301541       1
[INPUT] 1    0    [1    /1   ]  18.9734695243        1
[INPUT] 1    0    [1    /1   ]  5.47497639447        1
[INPUT] 1    0    [1    /1   ]  0.723008797125       1

nuclear repulsion = 0
number of shells = 6
number of NR pGTOs = 12
number of NR cGTOs = 12
basis = {'Ar': [[0, [95.03615733529247, 1.0]], [0, [4.298194542449791, 1.0]], [0, [0.5906263015405951, 1.0]], [1, [18.973469524282716, 1.0]], [1, [5.474976394473575, 1.0]], [1, [0.7230087971251848, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [95.03615734]
bas 1, expnt(s) = [4.29819454]
bas 2, expnt(s) = [0.5906263]
bas 3, expnt(s) = [18.97346952]
bas 4, expnt(s) = [5.47497639]
bas 5, expnt(s) = [0.7230088]
CPU time:        41.72
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  1  1  1  0 30 31  0]
 [ 0  1  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]]
arg.env = [  0.           0.           0.           0.           0.
   0.           0.           0.           0.           0.
   0.           0.           0.           0.           0.
   0.           0.           0.           0.           0.
   0.           0.           0.           0.          95.03615734
  76.90094473   4.29819454   7.54187926   0.5906263    1.70215699
  18.97346952 115.52283418   5.47497639  24.43217927   0.7230088
   1.94497431]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 16.890705422988503
cond(S) = 5.5285643020563136
E1 = -660.4321423495389  E_coul = 196.89746151750774
init E= -463.534680832031
    CPU time for initialize scf      0.18 sec, wall time      0.02 sec
  HOMO = -0.485876216158157  LUMO = 18.6806268246287
  mo_energy =
[-97.95838005 -10.49945179  -8.85974034  -8.85974034  -8.85974034
  -1.01575642  -0.48587622  -0.48587622  -0.48587622  18.68062682
  18.68062682  18.68062682]
E1 = -687.5349073031288  E_coul = 216.07898148890266
cycle= 1 E= -471.455925814226  delta_E= -7.92  |g|= 0.672  |ddm|= 0.61
    CPU time for cycle= 1      0.21 sec, wall time      0.01 sec
diis-norm(errvec)=0.633708
diis-c [-0.40158593  1.        ]
  HOMO = 0.223706095196752  LUMO = 20.0143450275989
  mo_energy =
[-96.28603996  -9.2219106   -7.54009345  -7.54009345  -7.54009345
  -0.23601093   0.2237061    0.2237061    0.2237061   20.01434503
  20.01434503  20.01434503]
E1 = -686.8912670803965  E_coul = 215.42653685063559
cycle= 2 E= -471.464730229761  delta_E= -0.0088  |g|= 0.0388  |ddm|= 0.0709
    CPU time for cycle= 2      0.16 sec, wall time      0.01 sec
diis-norm(errvec)=0.039667
diis-c [-7.30224893e-05  5.76092535e-02  9.42390747e-01]
  HOMO = 0.218819309799931  LUMO = 19.9728228836833
  mo_energy =
[-96.40018534  -9.26427823  -7.58244083  -7.58244083  -7.58244083
  -0.24500226   0.21881931   0.21881931   0.21881931  19.97282288
  19.97282288  19.97282288]
E1 = -686.9236651129038  E_coul = 215.45890764586395
cycle= 3 E= -471.46475746704  delta_E= -2.72e-05  |g|= 0.000398  |ddm|= 0.00323
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.000428491
diis-c [-8.70493665e-12 -1.79410459e-03 -3.70132976e-02  1.03880740e+00]
  HOMO = 0.218739315296109  LUMO = 19.9725014188891
  mo_energy =
[-96.40078561  -9.26464595  -7.58284686  -7.58284686  -7.58284686
  -0.24512746   0.21873932   0.21873932   0.21873932  19.97250142
  19.97250142  19.97250142]
E1 = -686.923755301892  E_coul = 215.45899783168147
cycle= 4 E= -471.464757470211  delta_E= -3.17e-09  |g|= 2.32e-07  |ddm|= 3.38e-05
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=2.25131e-07
diis-c [ 2.13856791e-17 -8.75314204e-09  6.62817948e-06 -1.31576278e-04
  1.00012496e+00]
  HOMO = 0.218739388581462  LUMO = 19.972501355898
  mo_energy =
[-96.40078522  -9.26464577  -7.58284657  -7.58284657  -7.58284657
  -0.2451274    0.21873939   0.21873939   0.21873939  19.97250136
  19.97250136  19.97250136]
E1 = -686.9237550931722  E_coul = 215.4589976229625
cycle= 5 E= -471.46475747021  delta_E= 8.53e-13  |g|= 1.31e-12  |ddm|= 2.21e-08
    CPU time for cycle= 5      0.01 sec, wall time      0.01 sec
E1 = -686.9237550931722  E_coul = 215.4589976229625
  HOMO = 0.218739388581669  LUMO = 19.9725013559003
  mo_energy =
[-96.40078522  -9.26464577  -7.58284657  -7.58284657  -7.58284657
  -0.2451274    0.21873939   0.21873939   0.21873939  19.97250136
  19.97250136  19.97250136]
E1 = -686.9237550931708  E_coul = 215.4589976229611
Extra cycle  E= -471.46475747021  delta_E= -5.68e-14  |g|= 1.36e-13  |ddm|= 1.68e-13
    CPU time for scf_cycle      0.58 sec, wall time      0.08 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 5.5285643020563136
E1 = -686.9237550931708  E_coul = 215.4589976229611
init E= -471.46475747021
    CPU time for initialize scf      1.07 sec, wall time      0.05 sec
  HOMO = 0.218739388581652  LUMO = 19.9725013559001
  mo_energy =
[-96.40078522  -9.26464577  -7.58284657  -7.58284657  -7.58284657
  -0.2451274    0.21873939   0.21873939   0.21873939  19.97250136
  19.97250136  19.97250136]
E1 = -686.9237550931715  E_coul = 215.458997622961
cycle= 1 E= -471.464757470211  delta_E= -7.96e-13  |g|= 2.86e-14  |ddm|= 1.23e-14
    CPU time for cycle= 1      0.20 sec, wall time      0.01 sec
E1 = -686.9237550931715  E_coul = 215.458997622961
  HOMO = 0.218739388581644  LUMO = 19.9725013559001
  mo_energy =
[-96.40078522  -9.26464577  -7.58284657  -7.58284657  -7.58284657
  -0.2451274    0.21873939   0.21873939   0.21873939  19.97250136
  19.97250136  19.97250136]
E1 = -686.9237550931715  E_coul = 215.45899762296102
Extra cycle  E= -471.46475747021  delta_E= 5.68e-14  |g|= 1.67e-14  |ddm|= 4.93e-15
    CPU time for scf_cycle      1.38 sec, wall time      0.11 sec
exp = [95.03615734  4.29819454  0.5906263  18.97346952  5.47497639  0.7230088 ]
grad_E = [ 5.24291630e-03 -2.75801895e-02  2.36904702e+00 -5.80300991e-01
  1.27565596e+00  6.98523319e+00]
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((6, 2))
#exps[:, 0] = decaying_nums(5)

# S
exps[0,0] = 9.5045827955887916e+01
exps[1,0] = 4.4881042475048387e+00
exps[2,0] = 3.9799528004692630e-01
             
# P          
exps[3,0] = 18.0
exps[4,0] = 8.5469650038718257e+00
exps[5,0] = 4.8929328703550412e-01

basis = "3s3p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc11947.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 24
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 18 12:43:30 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35676253.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 32000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 32000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 32000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  95.0150782228        1
[INPUT] 0    0    [1    /1   ]  4.56650861865        1
[INPUT] 0    0    [1    /1   ]  0.181364007823       1
[INPUT] 1    0    [1    /1   ]  20.5855237401        1
[INPUT] 1    0    [1    /1   ]  2.80617331164        1
[INPUT] 1    0    [1    /1   ]  0.18980659336        1

nuclear repulsion = 0
number of shells = 6
number of NR pGTOs = 12
number of NR cGTOs = 12
basis = {'Ar': [[0, [95.01507822278406, 1.0]], [0, [4.566508618652148, 1.0]], [0, [0.18136400782336914, 1.0]], [1, [20.585523740103653, 1.0]], [1, [2.806173311640915, 1.0]], [1, [0.18980659335972472, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [95.01507822]
bas 1, expnt(s) = [4.56650862]
bas 2, expnt(s) = [0.18136401]
bas 3, expnt(s) = [20.58552374]
bas 4, expnt(s) = [2.80617331]
bas 5, expnt(s) = [0.18980659]
CPU time:        46.16
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  1  1  1  0 30 31  0]
 [ 0  1  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]]
arg.env = [  0.           0.           0.           0.           0.
   0.           0.           0.           0.           0.
   0.           0.           0.           0.           0.
   0.           0.           0.           0.           0.
   0.           0.           0.           0.          95.01507822
  76.88815184   4.56650862   7.89229365   0.18136401   0.7021475
  20.58552374 127.9195119    2.80617331  10.59564758   0.18980659
   0.36548833]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 16.20851586820321
cond(S) = 2.2073615845313657
E1 = -619.3130876975672  E_coul = 169.64237580798095
init E= -449.670711889586
    CPU time for initialize scf      0.19 sec, wall time      0.02 sec
  HOMO = -1.14328922383323  LUMO = 7.44111502900194
  mo_energy =
[-99.22349769 -12.34339692 -10.38650624 -10.38650624 -10.38650624
  -2.04965014  -1.14328922  -1.14328922  -1.14328922   7.44111503
   7.44111503   7.44111503]
E1 = -630.1435803879334  E_coul = 164.72837596038806
cycle= 1 E= -465.415204427545  delta_E= -15.7  |g|= 1.51  |ddm|= 1.99
    CPU time for cycle= 1      0.23 sec, wall time      0.01 sec
diis-norm(errvec)=1.98053
diis-c [-3.92250282  1.        ]
  HOMO = -0.670594625850762  LUMO = 7.21197012236433
  mo_energy =
[-101.3865754   -12.95563491  -10.81224228  -10.81224228  -10.81224228
   -1.58418909   -0.67059463   -0.67059463   -0.67059463    7.21197012
    7.21197012    7.21197012]
E1 = -632.2501722305683  E_coul = 166.78160462822808
cycle= 2 E= -465.46856760234  delta_E= -0.0534  |g|= 0.236  |ddm|= 0.13
    CPU time for cycle= 2      0.13 sec, wall time      0.01 sec
diis-norm(errvec)=0.300976
diis-c [-0.00328012  0.12986973  0.87013027]
  HOMO = -0.668121795216261  LUMO = 7.34373592712186
  mo_energy =
[-101.01575812  -12.80676577  -10.69090204  -10.69090204  -10.69090204
   -1.57847621   -0.6681218    -0.6681218    -0.6681218     7.34373593
    7.34373593    7.34373593]
E1 = -631.9236055821328  E_coul = 166.4535948107169
cycle= 3 E= -465.470010771416  delta_E= -0.00144  |g|= 0.00533  |ddm|= 0.022
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.00711587
diis-c [-1.19104647e-10 -6.86979513e-03 -2.18878024e-02  1.02875760e+00]
  HOMO = -0.66847569164738  LUMO = 7.34001600806247
  mo_energy =
[-101.02345655  -12.81155502  -10.69539967  -10.69539967  -10.69539967
   -1.57920833   -0.66847569   -0.66847569   -0.66847569    7.34001601
    7.34001601    7.34001601]
E1 = -631.9283807718949  E_coul = 166.45836923741973
cycle= 4 E= -465.470011534475  delta_E= -7.63e-07  |g|= 3.37e-06  |ddm|= 0.000468
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=4.47394e-06
diis-c [2.01974743e-19 2.58286223e-06 1.82822059e-05 6.05862606e-04
 9.99373272e-01]
  HOMO = -0.668475665075663  LUMO = 7.34001097489817
  mo_energy =
[-101.02345209  -12.81155274  -10.69539393  -10.69539393  -10.69539393
   -1.57920826   -0.66847567   -0.66847567   -0.66847567    7.34001097
    7.34001097    7.34001097]
E1 = -631.9283792756911  E_coul = 166.45836774121548
cycle= 5 E= -465.470011534476  delta_E= -3.98e-13  |g|= 1.51e-09  |ddm|= 4.56e-07
    CPU time for cycle= 5      0.01 sec, wall time      0.01 sec
E1 = -631.9283792756911  E_coul = 166.45836774121548
  HOMO = -0.668475665114304  LUMO = 7.34001097674895
  mo_energy =
[-101.02345209  -12.81155274  -10.69539394  -10.69539394  -10.69539394
   -1.57920826   -0.66847567   -0.66847567   -0.66847567    7.34001098
    7.34001098    7.34001098]
E1 = -631.928379276998  E_coul = 166.4583677425225
Extra cycle  E= -465.470011534476  delta_E= 5.68e-14  |g|= 1.75e-10  |ddm|= 1.59e-10
    CPU time for scf_cycle      0.60 sec, wall time      0.09 sec
exp = [95.01507822  4.56650862  0.18136401 20.58552374  2.80617331  0.18980659]
E = -465.47001153447553
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((6, 2))
#exps[:, 0] = decaying_nums(5)

# S
exps[0,0] = 9.5045827955887916e+01
exps[1,0] = 4.4881042475048387e+00
exps[2,0] = 3.9799528004692630e-01
             
# P          
exps[3,0] = 18.0
exps[4,0] = 8.5469650038718257e+00
exps[5,0] = 4.8929328703550412e-01

basis = "3s3p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc11947.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 24
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 18 12:43:31 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35676253.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 32000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 32000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 32000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  95.029819738         1
[INPUT] 0    0    [1    /1   ]  4.37886523337        1
[INPUT] 0    0    [1    /1   ]  0.467578444834       1
[INPUT] 1    0    [1    /1   ]  19.4581460244        1
[INPUT] 1    0    [1    /1   ]  4.67258021883        1
[INPUT] 1    0    [1    /1   ]  0.562697453101       1

nuclear repulsion = 0
number of shells = 6
number of NR pGTOs = 12
number of NR cGTOs = 12
basis = {'Ar': [[0, [95.02981973797347, 1.0]], [0, [4.378865233367687, 1.0]], [0, [0.4675784448343672, 1.0]], [1, [19.4581460244053, 1.0]], [1, [4.672580218830702, 1.0]], [1, [0.5626974531006382, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [95.02981974]
bas 1, expnt(s) = [4.37886523]
bas 2, expnt(s) = [0.46757844]
bas 3, expnt(s) = [19.45814602]
bas 4, expnt(s) = [4.67258022]
bas 5, expnt(s) = [0.56269745]
CPU time:        46.80
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  1  1  1  0 30 31  0]
 [ 0  1  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]]
arg.env = [  0.           0.           0.           0.           0.
   0.           0.           0.           0.           0.
   0.           0.           0.           0.           0.
   0.           0.           0.           0.           0.
   0.           0.           0.           0.          95.02981974
  76.89709852   4.37886523   7.64779448   0.46757844   1.42858434
  19.45814602 119.22332108   4.67258022  20.04150586   0.56269745
   1.42176585]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.443252908726443
cond(S) = 4.226026804787886
E1 = -663.0786697397167  E_coul = 197.73709489215918
init E= -465.341574847558
    CPU time for initialize scf      0.19 sec, wall time      0.02 sec
  HOMO = -0.504619880864978  LUMO = 16.1160214293409
  mo_energy =
[-97.77531109 -10.44834287  -9.00644148  -9.00644148  -9.00644148
  -1.06659995  -0.50461988  -0.50461988  -0.50461988  16.11602143
  16.11602143  16.11602143]
E1 = -677.767297185004  E_coul = 204.4522069326794
cycle= 1 E= -473.315090252325  delta_E= -7.97  |g|= 0.295  |ddm|= 0.447
    CPU time for cycle= 1      0.23 sec, wall time      0.01 sec
diis-norm(errvec)=0.294597
diis-c [-0.0867874  1.       ]
  HOMO = -0.199918320389936  LUMO = 16.6054232317355
  mo_energy =
[-97.43850558 -10.0218177   -8.54639627  -8.54639627  -8.54639627
  -0.73320195  -0.19991832  -0.19991832  -0.19991832  16.60542323
  16.60542323  16.60542323]
E1 = -677.443759566496  E_coul = 204.12674769176388
cycle= 2 E= -473.317011874732  delta_E= -0.00192  |g|= 0.0227  |ddm|= 0.0328
    CPU time for cycle= 2      0.13 sec, wall time      0.01 sec
diis-norm(errvec)=0.0254097
diis-c [-7.33489102e-05  7.51358005e-02  9.24864200e-01]
  HOMO = -0.201781325135695  LUMO = 16.5847182199431
  mo_energy =
[-97.49369489 -10.04384382  -8.56768883  -8.56768883  -8.56768883
  -0.73696561  -0.20178133  -0.20178133  -0.20178133  16.58471822
  16.58471822  16.58471822]
E1 = -677.4640908832263  E_coul = 204.1470691433201
cycle= 3 E= -473.317021739906  delta_E= -9.87e-06  |g|= 0.000359  |ddm|= 0.00175
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.000412314
diis-c [-1.30783000e-12 -2.47764380e-03 -4.00435432e-02  1.04252119e+00]
  HOMO = -0.201841281116059  LUMO = 16.5844561876372
  mo_energy =
[-97.49411123 -10.04415865  -8.56802927  -8.56802927  -8.56802927
  -0.73706577  -0.20184128  -0.20184128  -0.20184128  16.58445619
  16.58445619  16.58445619]
E1 = -677.464150736197  E_coul = 204.1471289932317
cycle= 4 E= -473.317021742965  delta_E= -3.06e-09  |g|= 1.4e-07  |ddm|= 3.45e-05
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=1.45559e-07
diis-c [-1.91539698e-18 -1.10919830e-08  7.16596200e-06 -1.35926889e-04
  1.00012877e+00]
  HOMO = -0.201841251856095  LUMO = 16.5844562124425
  mo_energy =
[-97.49411102 -10.04415854  -8.56802913  -8.56802913  -8.56802913
  -0.73706574  -0.20184125  -0.20184125  -0.20184125  16.58445621
  16.58445621  16.58445621]
E1 = -677.4641505948968  E_coul = 204.14712885193077
cycle= 5 E= -473.317021742966  delta_E= -6.82e-13  |g|= 7.18e-13  |ddm|= 1.36e-08
    CPU time for cycle= 5      0.01 sec, wall time      0.01 sec
E1 = -677.4641505948968  E_coul = 204.14712885193077
  HOMO = -0.201841251855971  LUMO = 16.5844562124437
  mo_energy =
[-97.49411102 -10.04415854  -8.56802913  -8.56802913  -8.56802913
  -0.73706574  -0.20184125  -0.20184125  -0.20184125  16.58445621
  16.58445621  16.58445621]
E1 = -677.4641505948962  E_coul = 204.14712885193018
Extra cycle  E= -473.317021742966  delta_E= -5.68e-14  |g|= 4.03e-14  |ddm|= 9.33e-14
    CPU time for scf_cycle      0.59 sec, wall time      0.09 sec
exp = [95.02981974  4.37886523  0.46757844 19.45814602  4.67258022  0.56269745]
E = -473.317021742966
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((6, 2))
#exps[:, 0] = decaying_nums(5)

# S
exps[0,0] = 9.5045827955887916e+01
exps[1,0] = 4.4881042475048387e+00
exps[2,0] = 3.9799528004692630e-01
             
# P          
exps[3,0] = 18.0
exps[4,0] = 8.5469650038718257e+00
exps[5,0] = 4.8929328703550412e-01

basis = "3s3p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc11947.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 24
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 18 12:43:31 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35676253.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 32000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 32000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 32000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  95.029819738         1
[INPUT] 0    0    [1    /1   ]  4.37886523337        1
[INPUT] 0    0    [1    /1   ]  0.467578444834       1
[INPUT] 1    0    [1    /1   ]  19.4581460244        1
[INPUT] 1    0    [1    /1   ]  4.67258021883        1
[INPUT] 1    0    [1    /1   ]  0.562697453101       1

nuclear repulsion = 0
number of shells = 6
number of NR pGTOs = 12
number of NR cGTOs = 12
basis = {'Ar': [[0, [95.02981973797347, 1.0]], [0, [4.378865233367687, 1.0]], [0, [0.4675784448343672, 1.0]], [1, [19.4581460244053, 1.0]], [1, [4.672580218830702, 1.0]], [1, [0.5626974531006382, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [95.02981974]
bas 1, expnt(s) = [4.37886523]
bas 2, expnt(s) = [0.46757844]
bas 3, expnt(s) = [19.45814602]
bas 4, expnt(s) = [4.67258022]
bas 5, expnt(s) = [0.56269745]
CPU time:        47.43
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  1  1  1  0 30 31  0]
 [ 0  1  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]]
arg.env = [  0.           0.           0.           0.           0.
   0.           0.           0.           0.           0.
   0.           0.           0.           0.           0.
   0.           0.           0.           0.           0.
   0.           0.           0.           0.          95.02981974
  76.89709852   4.37886523   7.64779448   0.46757844   1.42858434
  19.45814602 119.22332108   4.67258022  20.04150586   0.56269745
   1.42176585]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.443252908726443
cond(S) = 4.226026804787886
E1 = -663.0786697397167  E_coul = 197.73709489215918
init E= -465.341574847558
    CPU time for initialize scf      0.19 sec, wall time      0.02 sec
  HOMO = -0.504619880864978  LUMO = 16.1160214293409
  mo_energy =
[-97.77531109 -10.44834287  -9.00644148  -9.00644148  -9.00644148
  -1.06659995  -0.50461988  -0.50461988  -0.50461988  16.11602143
  16.11602143  16.11602143]
E1 = -677.767297185004  E_coul = 204.4522069326794
cycle= 1 E= -473.315090252325  delta_E= -7.97  |g|= 0.295  |ddm|= 0.447
    CPU time for cycle= 1      0.23 sec, wall time      0.01 sec
diis-norm(errvec)=0.294597
diis-c [-0.0867874  1.       ]
  HOMO = -0.199918320389936  LUMO = 16.6054232317355
  mo_energy =
[-97.43850558 -10.0218177   -8.54639627  -8.54639627  -8.54639627
  -0.73320195  -0.19991832  -0.19991832  -0.19991832  16.60542323
  16.60542323  16.60542323]
E1 = -677.443759566496  E_coul = 204.12674769176388
cycle= 2 E= -473.317011874732  delta_E= -0.00192  |g|= 0.0227  |ddm|= 0.0328
    CPU time for cycle= 2      0.13 sec, wall time      0.01 sec
diis-norm(errvec)=0.0254097
diis-c [-7.33489102e-05  7.51358005e-02  9.24864200e-01]
  HOMO = -0.201781325135695  LUMO = 16.5847182199431
  mo_energy =
[-97.49369489 -10.04384382  -8.56768883  -8.56768883  -8.56768883
  -0.73696561  -0.20178133  -0.20178133  -0.20178133  16.58471822
  16.58471822  16.58471822]
E1 = -677.4640908832263  E_coul = 204.1470691433201
cycle= 3 E= -473.317021739906  delta_E= -9.87e-06  |g|= 0.000359  |ddm|= 0.00175
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.000412314
diis-c [-1.30783000e-12 -2.47764380e-03 -4.00435432e-02  1.04252119e+00]
  HOMO = -0.201841281116059  LUMO = 16.5844561876372
  mo_energy =
[-97.49411123 -10.04415865  -8.56802927  -8.56802927  -8.56802927
  -0.73706577  -0.20184128  -0.20184128  -0.20184128  16.58445619
  16.58445619  16.58445619]
E1 = -677.464150736197  E_coul = 204.1471289932317
cycle= 4 E= -473.317021742965  delta_E= -3.06e-09  |g|= 1.4e-07  |ddm|= 3.45e-05
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=1.45559e-07
diis-c [-1.91539698e-18 -1.10919830e-08  7.16596200e-06 -1.35926889e-04
  1.00012877e+00]
  HOMO = -0.201841251856095  LUMO = 16.5844562124425
  mo_energy =
[-97.49411102 -10.04415854  -8.56802913  -8.56802913  -8.56802913
  -0.73706574  -0.20184125  -0.20184125  -0.20184125  16.58445621
  16.58445621  16.58445621]
E1 = -677.4641505948968  E_coul = 204.14712885193077
cycle= 5 E= -473.317021742966  delta_E= -6.82e-13  |g|= 7.18e-13  |ddm|= 1.36e-08
    CPU time for cycle= 5      0.01 sec, wall time      0.01 sec
E1 = -677.4641505948968  E_coul = 204.14712885193077
  HOMO = -0.201841251855971  LUMO = 16.5844562124437
  mo_energy =
[-97.49411102 -10.04415854  -8.56802913  -8.56802913  -8.56802913
  -0.73706574  -0.20184125  -0.20184125  -0.20184125  16.58445621
  16.58445621  16.58445621]
E1 = -677.4641505948962  E_coul = 204.14712885193018
Extra cycle  E= -473.317021742966  delta_E= -5.68e-14  |g|= 4.03e-14  |ddm|= 9.33e-14
    CPU time for scf_cycle      0.59 sec, wall time      0.09 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 4.226026804787886
E1 = -677.4641505948962  E_coul = 204.14712885193018
init E= -473.317021742966
    CPU time for initialize scf      1.16 sec, wall time      0.05 sec
  HOMO = -0.201841251855981  LUMO = 16.5844562124437
  mo_energy =
[-97.49411102 -10.04415854  -8.56802913  -8.56802913  -8.56802913
  -0.73706574  -0.20184125  -0.20184125  -0.20184125  16.58445621
  16.58445621  16.58445621]
E1 = -677.4641505948962  E_coul = 204.1471288519302
cycle= 1 E= -473.317021742966  delta_E= 5.68e-14  |g|= 2.74e-14  |ddm|= 4.38e-15
    CPU time for cycle= 1      0.28 sec, wall time      0.02 sec
E1 = -677.4641505948962  E_coul = 204.1471288519302
  HOMO = -0.201841251855979  LUMO = 16.5844562124437
  mo_energy =
[-97.49411102 -10.04415854  -8.56802913  -8.56802913  -8.56802913
  -0.73706574  -0.20184125  -0.20184125  -0.20184125  16.58445621
  16.58445621  16.58445621]
E1 = -677.464150594896  E_coul = 204.14712885193018
Extra cycle  E= -473.317021742966  delta_E= 1.71e-13  |g|= 2.98e-14  |ddm|= 4.09e-15
    CPU time for scf_cycle      1.50 sec, wall time      0.14 sec
exp = [95.02981974  4.37886523  0.46757844 19.45814602  4.67258022  0.56269745]
grad_E = [ 0.00585501 -0.04077305  1.01611261 -0.31405972  0.01806765  3.37899883]
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((6, 2))
#exps[:, 0] = decaying_nums(5)

# S
exps[0,0] = 9.5045827955887916e+01
exps[1,0] = 4.4881042475048387e+00
exps[2,0] = 3.9799528004692630e-01
             
# P          
exps[3,0] = 18.0
exps[4,0] = 8.5469650038718257e+00
exps[5,0] = 4.8929328703550412e-01

basis = "3s3p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc11947.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 24
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 18 12:43:34 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35676253.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 32000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 32000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 32000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  95.0199149829        1
[INPUT] 0    0    [1    /1   ]  4.45820223613        1
[INPUT] 0    0    [1    /1   ]  0.389871923461       1
[INPUT] 1    0    [1    /1   ]  19.9356804078        1
[INPUT] 1    0    [1    /1   ]  4.84108562105        1
[INPUT] 1    0    [1    /1   ]  0.336019068179       1

nuclear repulsion = 0
number of shells = 6
number of NR pGTOs = 12
number of NR cGTOs = 12
basis = {'Ar': [[0, [95.01991498291235, 1.0]], [0, [4.458202236130967, 1.0]], [0, [0.38987192346139765, 1.0]], [1, [19.935680407789235, 1.0]], [1, [4.84108562104647, 1.0]], [1, [0.3360190681790084, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [95.01991498]
bas 1, expnt(s) = [4.45820224]
bas 2, expnt(s) = [0.38987192]
bas 3, expnt(s) = [19.93568041]
bas 4, expnt(s) = [4.84108562]
bas 5, expnt(s) = [0.33601907]
CPU time:        52.16
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  1  1  1  0 30 31  0]
 [ 0  1  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]]
arg.env = [  0.           0.           0.           0.           0.
   0.           0.           0.           0.           0.
   0.           0.           0.           0.           0.
   0.           0.           0.           0.           0.
   0.           0.           0.           0.          95.01991498
  76.89108733   4.45820224   7.75148388   0.38987192   1.24654079
  19.93568041 122.89188931   4.84108562  20.94897832   0.33601907
   0.74634443]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.561631933966716
cond(S) = 3.7702995361068212
E1 = -653.5675051916943  E_coul = 189.39300783803
init E= -464.174497353664
    CPU time for initialize scf      0.19 sec, wall time      0.02 sec
  HOMO = -0.717304425483737  LUMO = 15.6035168885734
  mo_energy =
[-98.36518138 -11.0201669   -9.65727255  -9.65727255  -9.65727255
  -1.44366232  -0.71730443  -0.71730443  -0.71730443  15.60351689
  15.60351689  15.60351689]
E1 = -663.9611560112676  E_coul = 190.6472118567775
cycle= 1 E= -473.31394415449  delta_E= -9.14  |g|= 0.187  |ddm|= 0.833
    CPU time for cycle= 1      0.21 sec, wall time      0.01 sec
diis-norm(errvec)=0.174405
diis-c [-0.03041713  1.        ]
  HOMO = -0.553359341537257  LUMO = 15.7374470667592
  mo_energy =
[-98.612091   -10.99007768  -9.60140566  -9.60140566  -9.60140566
  -1.26743802  -0.55335934  -0.55335934  -0.55335934  15.73744707
  15.73744707  15.73744707]
E1 = -663.857013551733  E_coul = 190.54197571896316
cycle= 2 E= -473.31503783277  delta_E= -0.00109  |g|= 0.00814  |ddm|= 0.0252
    CPU time for cycle= 2      0.15 sec, wall time      0.01 sec
diis-norm(errvec)=0.00937532
diis-c [-7.19275619e-05 -2.34786108e-02  1.02347861e+00]
  HOMO = -0.554139561488924  LUMO = 15.729896047482
  mo_energy =
[-98.62742625 -10.99852378  -9.61001257  -9.61001257  -9.61001257
  -1.26936106  -0.55413956  -0.55413956  -0.55413956  15.72989605
  15.72989605  15.72989605]
E1 = -663.8607723684374  E_coul = 190.5457330621336
cycle= 3 E= -473.315039306304  delta_E= -1.47e-06  |g|= 0.000475  |ddm|= 0.00071
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.000529112
diis-c [-5.53423257e-15 -2.10568181e-03  5.88708831e-02  9.43234799e-01]
  HOMO = -0.554131203815518  LUMO = 15.7303202630892
  mo_energy =
[-98.6262043  -10.9980953   -9.60961864  -9.60961864  -9.60961864
  -1.26932146  -0.5541312   -0.5541312   -0.5541312   15.73032026
  15.73032026  15.73032026]
E1 = -663.860340259599  E_coul = 190.54530094882418
cycle= 4 E= -473.315039310775  delta_E= -4.47e-09  |g|= 2.27e-07  |ddm|= 3.8e-05
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=2.51914e-07
Linear dependence found in DIIS error vectors.
diis-c [-3.06745843e-15 -1.11274044e-03  3.11097066e-02  4.98219114e-01
  4.71783920e-01]
  HOMO = -0.554131188959677  LUMO = 15.7303203383959
  mo_energy =
[-98.62620414 -10.99809521  -9.60961854  -9.60961854  -9.60961854
  -1.26932144  -0.55413119  -0.55413119  -0.55413119  15.73032034
  15.73032034  15.73032034]
E1 = -663.8603401615303  E_coul = 190.54530085075532
cycle= 5 E= -473.315039310775  delta_E= -2.27e-13  |g|= 1.2e-07  |ddm|= 8.73e-09
    CPU time for cycle= 5      0.01 sec, wall time      0.01 sec
E1 = -663.8603401615303  E_coul = 190.54530085075532
  HOMO = -0.554131172024507  LUMO = 15.7303204307703
  mo_energy =
[-98.62620393 -10.9980951   -9.60961842  -9.60961842  -9.60961842
  -1.26932141  -0.55413117  -0.55413117  -0.55413117  15.73032043
  15.73032043  15.73032043]
E1 = -663.860340044364  E_coul = 190.54530073358953
Extra cycle  E= -473.315039310774  delta_E= 5.68e-13  |g|= 8.44e-09  |ddm|= 1.04e-08
    CPU time for scf_cycle      0.59 sec, wall time      0.09 sec
exp = [95.01991498  4.45820224  0.38987192 19.93568041  4.84108562  0.33601907]
E = -473.3150393107744
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((6, 2))
#exps[:, 0] = decaying_nums(5)

# S
exps[0,0] = 9.5045827955887916e+01
exps[1,0] = 4.4881042475048387e+00
exps[2,0] = 3.9799528004692630e-01
             
# P          
exps[3,0] = 18.0
exps[4,0] = 8.5469650038718257e+00
exps[5,0] = 4.8929328703550412e-01

basis = "3s3p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc11947.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 24
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 18 12:43:34 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35676253.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 32000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 32000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 32000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  95.0248772067        1
[INPUT] 0    0    [1    /1   ]  4.41845486668        1
[INPUT] 0    0    [1    /1   ]  0.428802431376       1
[INPUT] 1    0    [1    /1   ]  19.6964385042        1
[INPUT] 1    0    [1    /1   ]  4.75666541051        1
[INPUT] 1    0    [1    /1   ]  0.449583599216       1

nuclear repulsion = 0
number of shells = 6
number of NR pGTOs = 12
number of NR cGTOs = 12
basis = {'Ar': [[0, [95.02487720665478, 1.0]], [0, [4.418454866677118, 1.0]], [0, [0.4288024313758508, 1.0]], [1, [19.696438504236227, 1.0]], [1, [4.756665410507089, 1.0]], [1, [0.44958359921586755, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [95.02487721]
bas 1, expnt(s) = [4.41845487]
bas 2, expnt(s) = [0.42880243]
bas 3, expnt(s) = [19.6964385]
bas 4, expnt(s) = [4.75666541]
bas 5, expnt(s) = [0.4495836]
CPU time:        52.79
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  1  1  1  0 30 31  0]
 [ 0  1  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]]
arg.env = [  0.           0.           0.           0.           0.
   0.           0.           0.           0.           0.
   0.           0.           0.           0.           0.
   0.           0.           0.           0.           0.
   0.           0.           0.           0.          95.02487721
  76.89409892   4.41845487   7.69959429   0.42880243   1.33877611
  19.6964385  121.05117884   4.75666541  20.49333537   0.4495836
   1.07398315]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.64296038730096
cond(S) = 3.9594239447242887
E1 = -660.8850220897784  E_coul = 195.56666778614238
init E= -465.318354303636
    CPU time for initialize scf      0.18 sec, wall time      0.02 sec
  HOMO = -0.575358819065178  LUMO = 15.9706494049383
  mo_energy =
[-97.93723672 -10.59926121  -9.19605027  -9.19605027  -9.19605027
  -1.16140449  -0.57535882  -0.57535882  -0.57535882  15.9706494
  15.9706494   15.9706494 ]
E1 = -671.751632509142  E_coul = 198.1580687833602
cycle= 1 E= -473.593563725782  delta_E= -8.28  |g|= 0.207  |ddm|= 0.558
    CPU time for cycle= 1      0.21 sec, wall time      0.01 sec
diis-norm(errvec)=0.195737
diis-c [-0.03831306  1.        ]
  HOMO = -0.405694108224226  LUMO = 16.1924713532673
  mo_energy =
[-97.98060022 -10.45932567  -9.02702209  -9.02702209  -9.02702209
  -0.98024298  -0.40569411  -0.40569411  -0.40569411  16.19247135
  16.19247135  16.19247135]
E1 = -671.540943588604  E_coul = 197.94627833986857
cycle= 2 E= -473.594665248735  delta_E= -0.0011  |g|= 0.0146  |ddm|= 0.0256
    CPU time for cycle= 2      0.15 sec, wall time      0.01 sec
diis-norm(errvec)=0.0169685
diis-c [-1.48023342e-04  5.70892680e-02  9.42910732e-01]
  HOMO = -0.406843877295332  LUMO = 16.17848902275
  mo_energy =
[-98.01561848 -10.4742861   -9.04161871  -9.04161871  -9.04161871
  -0.98285861  -0.40684388  -0.40684388  -0.40684388  16.17848902
  16.17848902  16.17848902]
E1 = -671.5525828583026  E_coul = 197.9579136222844
cycle= 3 E= -473.594669236018  delta_E= -3.99e-06  |g|= 0.000367  |ddm|= 0.000987
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.000340896
diis-c [-3.33565148e-13 -2.31050420e-03 -2.10289654e-02  1.02333947e+00]
  HOMO = -0.406887463721628  LUMO = 16.1784620422234
  mo_energy =
[-98.01532539 -10.47436029  -9.04173593  -9.04173593  -9.04173593
  -0.98293081  -0.40688746  -0.40688746  -0.40688746  16.17846204
  16.17846204  16.17846204]
E1 = -671.5523670805986  E_coul = 197.95769784042278
cycle= 4 E= -473.594669240176  delta_E= -4.16e-09  |g|= 1.59e-07  |ddm|= 5.08e-05
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=1.70111e-07
diis-c [ 1.13515755e-18  7.71681964e-09  1.00557155e-05 -1.91978840e-04
  1.00018192e+00]
  HOMO = -0.40688743684781  LUMO = 16.1784621256112
  mo_energy =
[-98.01532516 -10.47436016  -9.04173579  -9.04173579  -9.04173579
  -0.98293077  -0.40688744  -0.40688744  -0.40688744  16.17846213
  16.17846213  16.17846213]
E1 = -671.5523669258773  E_coul = 197.95769768570105
cycle= 5 E= -473.594669240176  delta_E= -3.98e-13  |g|= 5.59e-13  |ddm|= 1.45e-08
    CPU time for cycle= 5      0.01 sec, wall time      0.01 sec
E1 = -671.5523669258773  E_coul = 197.95769768570105
  HOMO = -0.406887436847877  LUMO = 16.1784621256114
  mo_energy =
[-98.01532516 -10.47436016  -9.04173579  -9.04173579  -9.04173579
  -0.98293077  -0.40688744  -0.40688744  -0.40688744  16.17846213
  16.17846213  16.17846213]
E1 = -671.5523669258771  E_coul = 197.9576976857015
Extra cycle  E= -473.594669240176  delta_E= 6.82e-13  |g|= 3.48e-14  |ddm|= 3.95e-14
    CPU time for scf_cycle      0.58 sec, wall time      0.08 sec
exp = [95.02487721  4.41845487  0.42880243 19.6964385   4.75666541  0.4495836 ]
E = -473.59466924017556
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((6, 2))
#exps[:, 0] = decaying_nums(5)

# S
exps[0,0] = 9.5045827955887916e+01
exps[1,0] = 4.4881042475048387e+00
exps[2,0] = 3.9799528004692630e-01
             
# P          
exps[3,0] = 18.0
exps[4,0] = 8.5469650038718257e+00
exps[5,0] = 4.8929328703550412e-01

basis = "3s3p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc11947.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 24
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 18 12:43:34 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35676253.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 32000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 32000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 32000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  95.0248772067        1
[INPUT] 0    0    [1    /1   ]  4.41845486668        1
[INPUT] 0    0    [1    /1   ]  0.428802431376       1
[INPUT] 1    0    [1    /1   ]  19.6964385042        1
[INPUT] 1    0    [1    /1   ]  4.75666541051        1
[INPUT] 1    0    [1    /1   ]  0.449583599216       1

nuclear repulsion = 0
number of shells = 6
number of NR pGTOs = 12
number of NR cGTOs = 12
basis = {'Ar': [[0, [95.02487720665478, 1.0]], [0, [4.418454866677118, 1.0]], [0, [0.4288024313758508, 1.0]], [1, [19.696438504236227, 1.0]], [1, [4.756665410507089, 1.0]], [1, [0.44958359921586755, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [95.02487721]
bas 1, expnt(s) = [4.41845487]
bas 2, expnt(s) = [0.42880243]
bas 3, expnt(s) = [19.6964385]
bas 4, expnt(s) = [4.75666541]
bas 5, expnt(s) = [0.4495836]
CPU time:        53.41
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  1  1  1  0 30 31  0]
 [ 0  1  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]]
arg.env = [  0.           0.           0.           0.           0.
   0.           0.           0.           0.           0.
   0.           0.           0.           0.           0.
   0.           0.           0.           0.           0.
   0.           0.           0.           0.          95.02487721
  76.89409892   4.41845487   7.69959429   0.42880243   1.33877611
  19.6964385  121.05117884   4.75666541  20.49333537   0.4495836
   1.07398315]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.64296038730096
cond(S) = 3.9594239447242887
E1 = -660.8850220897784  E_coul = 195.56666778614238
init E= -465.318354303636
    CPU time for initialize scf      0.18 sec, wall time      0.02 sec
  HOMO = -0.575358819065178  LUMO = 15.9706494049383
  mo_energy =
[-97.93723672 -10.59926121  -9.19605027  -9.19605027  -9.19605027
  -1.16140449  -0.57535882  -0.57535882  -0.57535882  15.9706494
  15.9706494   15.9706494 ]
E1 = -671.751632509142  E_coul = 198.1580687833602
cycle= 1 E= -473.593563725782  delta_E= -8.28  |g|= 0.207  |ddm|= 0.558
    CPU time for cycle= 1      0.21 sec, wall time      0.01 sec
diis-norm(errvec)=0.195737
diis-c [-0.03831306  1.        ]
  HOMO = -0.405694108224226  LUMO = 16.1924713532673
  mo_energy =
[-97.98060022 -10.45932567  -9.02702209  -9.02702209  -9.02702209
  -0.98024298  -0.40569411  -0.40569411  -0.40569411  16.19247135
  16.19247135  16.19247135]
E1 = -671.540943588604  E_coul = 197.94627833986857
cycle= 2 E= -473.594665248735  delta_E= -0.0011  |g|= 0.0146  |ddm|= 0.0256
    CPU time for cycle= 2      0.16 sec, wall time      0.01 sec
diis-norm(errvec)=0.0169685
diis-c [-1.48023342e-04  5.70892680e-02  9.42910732e-01]
  HOMO = -0.406843877295332  LUMO = 16.17848902275
  mo_energy =
[-98.01561848 -10.4742861   -9.04161871  -9.04161871  -9.04161871
  -0.98285861  -0.40684388  -0.40684388  -0.40684388  16.17848902
  16.17848902  16.17848902]
E1 = -671.5525828583026  E_coul = 197.9579136222844
cycle= 3 E= -473.594669236018  delta_E= -3.99e-06  |g|= 0.000367  |ddm|= 0.000987
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.000340896
diis-c [-3.33565148e-13 -2.31050420e-03 -2.10289654e-02  1.02333947e+00]
  HOMO = -0.406887463721628  LUMO = 16.1784620422234
  mo_energy =
[-98.01532539 -10.47436029  -9.04173593  -9.04173593  -9.04173593
  -0.98293081  -0.40688746  -0.40688746  -0.40688746  16.17846204
  16.17846204  16.17846204]
E1 = -671.5523670805986  E_coul = 197.95769784042278
cycle= 4 E= -473.594669240176  delta_E= -4.16e-09  |g|= 1.59e-07  |ddm|= 5.08e-05
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=1.70111e-07
diis-c [ 1.13515755e-18  7.71681964e-09  1.00557155e-05 -1.91978840e-04
  1.00018192e+00]
  HOMO = -0.40688743684781  LUMO = 16.1784621256112
  mo_energy =
[-98.01532516 -10.47436016  -9.04173579  -9.04173579  -9.04173579
  -0.98293077  -0.40688744  -0.40688744  -0.40688744  16.17846213
  16.17846213  16.17846213]
E1 = -671.5523669258773  E_coul = 197.95769768570105
cycle= 5 E= -473.594669240176  delta_E= -3.98e-13  |g|= 5.59e-13  |ddm|= 1.45e-08
    CPU time for cycle= 5      0.01 sec, wall time      0.01 sec
E1 = -671.5523669258773  E_coul = 197.95769768570105
  HOMO = -0.406887436847877  LUMO = 16.1784621256114
  mo_energy =
[-98.01532516 -10.47436016  -9.04173579  -9.04173579  -9.04173579
  -0.98293077  -0.40688744  -0.40688744  -0.40688744  16.17846213
  16.17846213  16.17846213]
E1 = -671.5523669258771  E_coul = 197.9576976857015
Extra cycle  E= -473.594669240176  delta_E= 6.82e-13  |g|= 3.48e-14  |ddm|= 3.95e-14
    CPU time for scf_cycle      0.58 sec, wall time      0.08 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 3.9594239447242887
E1 = -671.5523669258771  E_coul = 197.9576976857015
init E= -473.594669240176
    CPU time for initialize scf      1.07 sec, wall time      0.05 sec
  HOMO = -0.406887436847876  LUMO = 16.1784621256115
  mo_energy =
[-98.01532516 -10.47436016  -9.04173579  -9.04173579  -9.04173579
  -0.98293077  -0.40688744  -0.40688744  -0.40688744  16.17846213
  16.17846213  16.17846213]
E1 = -671.5523669258773  E_coul = 197.95769768570145
cycle= 1 E= -473.594669240176  delta_E= -3.41e-13  |g|= 2.35e-14  |ddm|= 4.81e-15
    CPU time for cycle= 1      0.20 sec, wall time      0.01 sec
E1 = -671.5523669258773  E_coul = 197.95769768570145
  HOMO = -0.406887436847881  LUMO = 16.1784621256115
  mo_energy =
[-98.01532516 -10.47436016  -9.04173579  -9.04173579  -9.04173579
  -0.98293077  -0.40688744  -0.40688744  -0.40688744  16.17846213
  16.17846213  16.17846213]
E1 = -671.5523669258772  E_coul = 197.95769768570148
Extra cycle  E= -473.594669240176  delta_E= 1.71e-13  |g|= 2.04e-14  |ddm|= 4.48e-15
    CPU time for scf_cycle      1.39 sec, wall time      0.11 sec
exp = [95.02487721  4.41845487  0.42880243 19.6964385   4.75666541  0.4495836 ]
grad_E = [ 0.00563985 -0.02250613  0.28146505 -0.31236665  0.14254389 -0.37135498]
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((6, 2))
#exps[:, 0] = decaying_nums(5)

# S
exps[0,0] = 9.5045827955887916e+01
exps[1,0] = 4.4881042475048387e+00
exps[2,0] = 3.9799528004692630e-01
             
# P          
exps[3,0] = 18.0
exps[4,0] = 8.5469650038718257e+00
exps[5,0] = 4.8929328703550412e-01

basis = "3s3p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc11947.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 24
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 18 12:43:36 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35676253.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 32000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 32000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 32000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  95.0160397577        1
[INPUT] 0    0    [1    /1   ]  4.46353343624        1
[INPUT] 0    0    [1    /1   ]  0.378329318308       1
[INPUT] 1    0    [1    /1   ]  20.1466703133        1
[INPUT] 1    0    [1    /1   ]  4.61564124775        1
[INPUT] 1    0    [1    /1   ]  0.446607089703       1

nuclear repulsion = 0
number of shells = 6
number of NR pGTOs = 12
number of NR cGTOs = 12
basis = {'Ar': [[0, [95.0160397577007, 1.0]], [0, [4.463533436236215, 1.0]], [0, [0.3783293183077216, 1.0]], [1, [20.146670313340085, 1.0]], [1, [4.615641247750762, 1.0]], [1, [0.4466070897029245, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [95.01603976]
bas 1, expnt(s) = [4.46353344]
bas 2, expnt(s) = [0.37832932]
bas 3, expnt(s) = [20.14667031]
bas 4, expnt(s) = [4.61564125]
bas 5, expnt(s) = [0.44660709]
CPU time:        57.86
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  1  1  1  0 30 31  0]
 [ 0  1  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]]
arg.env = [  0.           0.           0.           0.           0.
   0.           0.           0.           0.           0.
   0.           0.           0.           0.           0.
   0.           0.           0.           0.           0.
   0.           0.           0.           0.          95.01603976
  76.88873541   4.46353344   7.75843487   0.37832932   1.21875812
  20.14667031 124.51982223   4.61564125  19.73669591   0.44660709
   1.06510251]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.656044378585285
cond(S) = 3.747741361321196
E1 = -660.3076214865707  E_coul = 194.95201402821132
init E= -465.355607458359
    CPU time for initialize scf      0.18 sec, wall time      0.02 sec
  HOMO = -0.591514685207745  LUMO = 15.7184836304056
  mo_energy =
[-97.93037785 -10.60926682  -9.28185265  -9.28185265  -9.28185265
  -1.20884968  -0.59151469  -0.59151469  -0.59151469  15.71848363
  15.71848363  15.71848363]
E1 = -670.2937233893425  E_coul = 196.5960390129151
cycle= 1 E= -473.697684376427  delta_E= -8.34  |g|= 0.154  |ddm|= 0.591
    CPU time for cycle= 1      0.21 sec, wall time      0.01 sec
diis-norm(errvec)=0.142358
diis-c [-0.02026574  1.        ]
  HOMO = -0.433482033063141  LUMO = 15.8731059599063
  mo_energy =
[-98.13202805 -10.5403319   -9.17814154  -9.17814154  -9.17814154
  -1.04393795  -0.43348203  -0.43348203  -0.43348203  15.87310596
  15.87310596  15.87310596]
E1 = -670.1482860478366  E_coul = 196.44991888337393
cycle= 2 E= -473.698367164463  delta_E= -0.000683  |g|= 0.0105  |ddm|= 0.0204
    CPU time for cycle= 2      0.15 sec, wall time      0.01 sec
diis-norm(errvec)=0.0125351
diis-c [-1.33875979e-04  3.28689588e-02  9.67131041e-01]
  HOMO = -0.434421544056448  LUMO = 15.8631521527029
  mo_energy =
[-98.15555964 -10.55113884  -9.18867954  -9.18867954  -9.18867954
  -1.04582218  -0.43442154  -0.43442154  -0.43442154  15.86315215
  15.86315215  15.86315215]
E1 = -670.1562821254275  E_coul = 196.45791287458076
cycle= 3 E= -473.698369250847  delta_E= -2.09e-06  |g|= 0.000428  |ddm|= 0.000701
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.000409328
diis-c [-8.30641393e-14 -2.49821661e-03  9.23918113e-03  9.93259035e-01]
  HOMO = -0.434441374818271  LUMO = 15.8633695376979
  mo_energy =
[-98.15470156 -10.5509495   -9.1885395   -9.1885395   -9.1885395
  -1.04584395  -0.43444137  -0.43444137  -0.43444137  15.86336954
  15.86336954  15.86336954]
E1 = -670.155864884656  E_coul = 196.45749562897018
cycle= 4 E= -473.698369255686  delta_E= -4.84e-09  |g|= 1.45e-07  |ddm|= 5.23e-05
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=1.57085e-07
diis-c [-8.64624722e-19 -1.82932055e-08  7.61008107e-06 -1.96872907e-04
  1.00018928e+00]
  HOMO = -0.434441351912072  LUMO = 15.8633696217609
  mo_energy =
[-98.15470136 -10.55094939  -9.18853939  -9.18853939  -9.18853939
  -1.04584392  -0.43444135  -0.43444135  -0.43444135  15.86336962
  15.86336962  15.86336962]
E1 = -670.1558647423273  E_coul = 196.4574954866418
cycle= 5 E= -473.698369255685  delta_E= 3.98e-13  |g|= 9.87e-13  |ddm|= 1.29e-08
    CPU time for cycle= 5      0.01 sec, wall time      0.01 sec
E1 = -670.1558647423273  E_coul = 196.4574954866418
  HOMO = -0.434441351911897  LUMO = 15.8633696217617
  mo_energy =
[-98.15470136 -10.55094939  -9.18853939  -9.18853939  -9.18853939
  -1.04584392  -0.43444135  -0.43444135  -0.43444135  15.86336962
  15.86336962  15.86336962]
E1 = -670.1558647423262  E_coul = 196.45749548664068
Extra cycle  E= -473.698369255686  delta_E= -5.68e-14  |g|= 4.73e-14  |ddm|= 1.03e-13
    CPU time for scf_cycle      0.59 sec, wall time      0.09 sec
exp = [95.01603976  4.46353344  0.37832932 20.14667031  4.61564125  0.44660709]
E = -473.6983692556855
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((6, 2))
#exps[:, 0] = decaying_nums(5)

# S
exps[0,0] = 9.5045827955887916e+01
exps[1,0] = 4.4881042475048387e+00
exps[2,0] = 3.9799528004692630e-01
             
# P          
exps[3,0] = 18.0
exps[4,0] = 8.5469650038718257e+00
exps[5,0] = 4.8929328703550412e-01

basis = "3s3p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc11947.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 24
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 18 12:43:37 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35676253.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 32000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 32000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 32000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  95.0160397577        1
[INPUT] 0    0    [1    /1   ]  4.46353343624        1
[INPUT] 0    0    [1    /1   ]  0.378329318308       1
[INPUT] 1    0    [1    /1   ]  20.1466703133        1
[INPUT] 1    0    [1    /1   ]  4.61564124775        1
[INPUT] 1    0    [1    /1   ]  0.446607089703       1

nuclear repulsion = 0
number of shells = 6
number of NR pGTOs = 12
number of NR cGTOs = 12
basis = {'Ar': [[0, [95.0160397577007, 1.0]], [0, [4.463533436236215, 1.0]], [0, [0.3783293183077216, 1.0]], [1, [20.146670313340085, 1.0]], [1, [4.615641247750762, 1.0]], [1, [0.4466070897029245, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [95.01603976]
bas 1, expnt(s) = [4.46353344]
bas 2, expnt(s) = [0.37832932]
bas 3, expnt(s) = [20.14667031]
bas 4, expnt(s) = [4.61564125]
bas 5, expnt(s) = [0.44660709]
CPU time:        58.49
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  1  1  1  0 30 31  0]
 [ 0  1  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]]
arg.env = [  0.           0.           0.           0.           0.
   0.           0.           0.           0.           0.
   0.           0.           0.           0.           0.
   0.           0.           0.           0.           0.
   0.           0.           0.           0.          95.01603976
  76.88873541   4.46353344   7.75843487   0.37832932   1.21875812
  20.14667031 124.51982223   4.61564125  19.73669591   0.44660709
   1.06510251]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.656044378585285
cond(S) = 3.747741361321196
E1 = -660.3076214865707  E_coul = 194.95201402821132
init E= -465.355607458359
    CPU time for initialize scf      0.18 sec, wall time      0.02 sec
  HOMO = -0.591514685207745  LUMO = 15.7184836304056
  mo_energy =
[-97.93037785 -10.60926682  -9.28185265  -9.28185265  -9.28185265
  -1.20884968  -0.59151469  -0.59151469  -0.59151469  15.71848363
  15.71848363  15.71848363]
E1 = -670.2937233893425  E_coul = 196.5960390129151
cycle= 1 E= -473.697684376427  delta_E= -8.34  |g|= 0.154  |ddm|= 0.591
    CPU time for cycle= 1      0.21 sec, wall time      0.01 sec
diis-norm(errvec)=0.142358
diis-c [-0.02026574  1.        ]
  HOMO = -0.433482033063141  LUMO = 15.8731059599063
  mo_energy =
[-98.13202805 -10.5403319   -9.17814154  -9.17814154  -9.17814154
  -1.04393795  -0.43348203  -0.43348203  -0.43348203  15.87310596
  15.87310596  15.87310596]
E1 = -670.1482860478366  E_coul = 196.44991888337393
cycle= 2 E= -473.698367164463  delta_E= -0.000683  |g|= 0.0105  |ddm|= 0.0204
    CPU time for cycle= 2      0.16 sec, wall time      0.01 sec
diis-norm(errvec)=0.0125351
diis-c [-1.33875979e-04  3.28689588e-02  9.67131041e-01]
  HOMO = -0.434421544056448  LUMO = 15.8631521527029
  mo_energy =
[-98.15555964 -10.55113884  -9.18867954  -9.18867954  -9.18867954
  -1.04582218  -0.43442154  -0.43442154  -0.43442154  15.86315215
  15.86315215  15.86315215]
E1 = -670.1562821254275  E_coul = 196.45791287458076
cycle= 3 E= -473.698369250847  delta_E= -2.09e-06  |g|= 0.000428  |ddm|= 0.000701
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.000409328
diis-c [-8.30641393e-14 -2.49821661e-03  9.23918113e-03  9.93259035e-01]
  HOMO = -0.434441374818271  LUMO = 15.8633695376979
  mo_energy =
[-98.15470156 -10.5509495   -9.1885395   -9.1885395   -9.1885395
  -1.04584395  -0.43444137  -0.43444137  -0.43444137  15.86336954
  15.86336954  15.86336954]
E1 = -670.155864884656  E_coul = 196.45749562897018
cycle= 4 E= -473.698369255686  delta_E= -4.84e-09  |g|= 1.45e-07  |ddm|= 5.23e-05
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=1.57085e-07
diis-c [-8.64624722e-19 -1.82932055e-08  7.61008107e-06 -1.96872907e-04
  1.00018928e+00]
  HOMO = -0.434441351912072  LUMO = 15.8633696217609
  mo_energy =
[-98.15470136 -10.55094939  -9.18853939  -9.18853939  -9.18853939
  -1.04584392  -0.43444135  -0.43444135  -0.43444135  15.86336962
  15.86336962  15.86336962]
E1 = -670.1558647423273  E_coul = 196.4574954866418
cycle= 5 E= -473.698369255685  delta_E= 3.98e-13  |g|= 9.87e-13  |ddm|= 1.29e-08
    CPU time for cycle= 5      0.01 sec, wall time      0.01 sec
E1 = -670.1558647423273  E_coul = 196.4574954866418
  HOMO = -0.434441351911897  LUMO = 15.8633696217617
  mo_energy =
[-98.15470136 -10.55094939  -9.18853939  -9.18853939  -9.18853939
  -1.04584392  -0.43444135  -0.43444135  -0.43444135  15.86336962
  15.86336962  15.86336962]
E1 = -670.1558647423262  E_coul = 196.45749548664068
Extra cycle  E= -473.698369255686  delta_E= -5.68e-14  |g|= 4.73e-14  |ddm|= 1.03e-13
    CPU time for scf_cycle      0.58 sec, wall time      0.08 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 3.747741361321196
E1 = -670.1558647423262  E_coul = 196.45749548664068
init E= -473.698369255686
    CPU time for initialize scf      1.07 sec, wall time      0.05 sec
  HOMO = -0.434441351911905  LUMO = 15.8633696217617
  mo_energy =
[-98.15470136 -10.55094939  -9.18853939  -9.18853939  -9.18853939
  -1.04584392  -0.43444135  -0.43444135  -0.43444135  15.86336962
  15.86336962  15.86336962]
E1 = -670.1558647423262  E_coul = 196.45749548664074
cycle= 1 E= -473.698369255686  delta_E=    0  |g|= 3.7e-14  |ddm|= 4.88e-15
    CPU time for cycle= 1      0.20 sec, wall time      0.01 sec
E1 = -670.1558647423262  E_coul = 196.45749548664074
  HOMO = -0.434441351911907  LUMO = 15.8633696217617
  mo_energy =
[-98.15470136 -10.55094939  -9.18853939  -9.18853939  -9.18853939
  -1.04584392  -0.43444135  -0.43444135  -0.43444135  15.86336962
  15.86336962  15.86336962]
E1 = -670.1558647423263  E_coul = 196.45749548664077
Extra cycle  E= -473.698369255686  delta_E= -5.68e-14  |g|= 2.08e-14  |ddm|= 3.93e-15
    CPU time for scf_cycle      1.39 sec, wall time      0.11 sec
exp = [95.01603976  4.46353344  0.37832932 20.14667031  4.61564125  0.44660709]
grad_E = [ 0.00579816  0.02444307 -0.51588639 -0.21910278 -0.28564759 -0.55402346]
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((6, 2))
#exps[:, 0] = decaying_nums(5)

# S
exps[0,0] = 9.5045827955887916e+01
exps[1,0] = 4.4881042475048387e+00
exps[2,0] = 3.9799528004692630e-01
             
# P          
exps[3,0] = 18.0
exps[4,0] = 8.5469650038718257e+00
exps[5,0] = 4.8929328703550412e-01

basis = "3s3p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc11947.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 24
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 18 12:43:39 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35676253.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 32000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 32000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 32000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  95.000704258         1
[INPUT] 0    0    [1    /1   ]  4.45768439754        1
[INPUT] 0    0    [1    /1   ]  0.381588988211       1
[INPUT] 1    0    [1    /1   ]  20.9028399671        1
[INPUT] 1    0    [1    /1   ]  4.7061691764         1
[INPUT] 1    0    [1    /1   ]  0.442545746829       1

nuclear repulsion = 0
number of shells = 6
number of NR pGTOs = 12
number of NR cGTOs = 12
basis = {'Ar': [[0, [95.00070425802554, 1.0]], [0, [4.4576843975379585, 1.0]], [0, [0.3815889882112672, 1.0]], [1, [20.902839967072246, 1.0]], [1, [4.706169176400944, 1.0]], [1, [0.4425457468291199, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [95.00070426]
bas 1, expnt(s) = [4.4576844]
bas 2, expnt(s) = [0.38158899]
bas 3, expnt(s) = [20.90283997]
bas 4, expnt(s) = [4.70616918]
bas 5, expnt(s) = [0.44254575]
CPU time:        62.94
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  1  1  1  0 30 31  0]
 [ 0  1  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]]
arg.env = [  0.           0.           0.           0.           0.
   0.           0.           0.           0.           0.
   0.           0.           0.           0.           0.
   0.           0.           0.           0.           0.
   0.           0.           0.           0.          95.00070426
  76.8794279    4.4576844    7.7508086    0.38158899   1.22662525
  20.90283997 130.38901725   4.70616918  20.22175347   0.44254575
   1.05300906]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.658595900304952
cond(S) = 3.6501062299208455
E1 = -660.501988948449  E_coul = 194.9812451039858
init E= -465.520743844463
    CPU time for initialize scf      0.18 sec, wall time      0.02 sec
  HOMO = -0.595245353603875  LUMO = 16.3875290307984
  mo_energy =
[-97.88159511 -10.61574346  -9.3159837   -9.3159837   -9.3159837
  -1.21136112  -0.59524535  -0.59524535  -0.59524535  16.38752903
  16.38752903  16.38752903]
E1 = -670.4783230442368  E_coul = 196.60326247267903
cycle= 1 E= -473.875060571558  delta_E= -8.35  |g|= 0.154  |ddm|= 0.587
    CPU time for cycle= 1      0.21 sec, wall time      0.01 sec
diis-norm(errvec)=0.14378
diis-c [-0.02067279  1.        ]
  HOMO = -0.438807249439746  LUMO = 16.5389694089941
  mo_energy =
[-98.08905586 -10.54672455  -9.21206439  -9.21206439  -9.21206439
  -1.0478372   -0.43880725  -0.43880725  -0.43880725  16.53896941
  16.53896941  16.53896941]
E1 = -670.341081031799  E_coul = 196.4653607827293
cycle= 2 E= -473.87572024907  delta_E= -0.00066  |g|= 0.0101  |ddm|= 0.0195
    CPU time for cycle= 2      0.15 sec, wall time      0.01 sec
diis-norm(errvec)=0.0122179
diis-c [-1.31383683e-04  2.86679934e-02  9.71332007e-01]
  HOMO = -0.439678119494946  LUMO = 16.5293030070376
  mo_energy =
[-98.11152155 -10.55692085  -9.22203311  -9.22203311  -9.22203311
  -1.04962801  -0.43967812  -0.43967812  -0.43967812  16.52930301
  16.52930301  16.52930301]
E1 = -670.3486005969974  E_coul = 196.4728784466809
cycle= 3 E= -473.875722150316  delta_E= -1.9e-06  |g|= 0.000438  |ddm|= 0.000659
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.000431527
diis-c [-6.43017547e-14 -2.41808015e-03  1.39474338e-02  9.88470646e-01]
  HOMO = -0.439693441861605  LUMO = 16.5295566676973
  mo_energy =
[-98.11061531 -10.55670382  -9.22186356  -9.22186356  -9.22186356
  -1.04964177  -0.43969344  -0.43969344  -0.43969344  16.52955667
  16.52955667  16.52955667]
E1 = -670.3481820391277  E_coul = 196.4724598841083
cycle= 4 E= -473.875722155019  delta_E= -4.7e-09  |g|= 1.37e-07  |ddm|= 4.9e-05
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=1.5068e-07
diis-c [-1.54890980e-18  3.56418915e-09  6.72149647e-06 -1.98625785e-04
  1.00019190e+00]
  HOMO = -0.439693420958507  LUMO = 16.5295567492292
  mo_energy =
[-98.11061512 -10.55670372  -9.22186345  -9.22186345  -9.22186345
  -1.04964175  -0.43969342  -0.43969342  -0.43969342  16.52955675
  16.52955675  16.52955675]
E1 = -670.3481819087351  E_coul = 196.47245975371627
cycle= 5 E= -473.875722155019  delta_E= 5.68e-13  |g|= 3.1e-13  |ddm|= 1.16e-08
    CPU time for cycle= 5      0.01 sec, wall time      0.01 sec
E1 = -670.3481819087351  E_coul = 196.47245975371627
  HOMO = -0.439693420958534  LUMO = 16.5295567492291
  mo_energy =
[-98.11061512 -10.55670372  -9.22186345  -9.22186345  -9.22186345
  -1.04964175  -0.43969342  -0.43969342  -0.43969342  16.52955675
  16.52955675  16.52955675]
E1 = -670.3481819087352  E_coul = 196.47245975371655
Extra cycle  E= -473.875722155019  delta_E= 1.14e-13  |g|= 3.15e-14  |ddm|= 2.29e-14
    CPU time for scf_cycle      0.59 sec, wall time      0.09 sec
exp = [95.00070426  4.4576844   0.38158899 20.90283997  4.70616918  0.44254575]
E = -473.8757221550187
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((6, 2))
#exps[:, 0] = decaying_nums(5)

# S
exps[0,0] = 9.5045827955887916e+01
exps[1,0] = 4.4881042475048387e+00
exps[2,0] = 3.9799528004692630e-01
             
# P          
exps[3,0] = 18.0
exps[4,0] = 8.5469650038718257e+00
exps[5,0] = 4.8929328703550412e-01

basis = "3s3p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc11947.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 24
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 18 12:43:39 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35676253.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 32000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 32000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 32000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  95.000704258         1
[INPUT] 0    0    [1    /1   ]  4.45768439754        1
[INPUT] 0    0    [1    /1   ]  0.381588988211       1
[INPUT] 1    0    [1    /1   ]  20.9028399671        1
[INPUT] 1    0    [1    /1   ]  4.7061691764         1
[INPUT] 1    0    [1    /1   ]  0.442545746829       1

nuclear repulsion = 0
number of shells = 6
number of NR pGTOs = 12
number of NR cGTOs = 12
basis = {'Ar': [[0, [95.00070425802554, 1.0]], [0, [4.4576843975379585, 1.0]], [0, [0.3815889882112672, 1.0]], [1, [20.902839967072246, 1.0]], [1, [4.706169176400944, 1.0]], [1, [0.4425457468291199, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [95.00070426]
bas 1, expnt(s) = [4.4576844]
bas 2, expnt(s) = [0.38158899]
bas 3, expnt(s) = [20.90283997]
bas 4, expnt(s) = [4.70616918]
bas 5, expnt(s) = [0.44254575]
CPU time:        63.57
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  1  1  1  0 30 31  0]
 [ 0  1  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]]
arg.env = [  0.           0.           0.           0.           0.
   0.           0.           0.           0.           0.
   0.           0.           0.           0.           0.
   0.           0.           0.           0.           0.
   0.           0.           0.           0.          95.00070426
  76.8794279    4.4576844    7.7508086    0.38158899   1.22662525
  20.90283997 130.38901725   4.70616918  20.22175347   0.44254575
   1.05300906]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.658595900304952
cond(S) = 3.6501062299208455
E1 = -660.501988948449  E_coul = 194.9812451039858
init E= -465.520743844463
    CPU time for initialize scf      0.18 sec, wall time      0.02 sec
  HOMO = -0.595245353603875  LUMO = 16.3875290307984
  mo_energy =
[-97.88159511 -10.61574346  -9.3159837   -9.3159837   -9.3159837
  -1.21136112  -0.59524535  -0.59524535  -0.59524535  16.38752903
  16.38752903  16.38752903]
E1 = -670.4783230442368  E_coul = 196.60326247267903
cycle= 1 E= -473.875060571558  delta_E= -8.35  |g|= 0.154  |ddm|= 0.587
    CPU time for cycle= 1      0.21 sec, wall time      0.01 sec
diis-norm(errvec)=0.14378
diis-c [-0.02067279  1.        ]
  HOMO = -0.438807249439746  LUMO = 16.5389694089941
  mo_energy =
[-98.08905586 -10.54672455  -9.21206439  -9.21206439  -9.21206439
  -1.0478372   -0.43880725  -0.43880725  -0.43880725  16.53896941
  16.53896941  16.53896941]
E1 = -670.341081031799  E_coul = 196.4653607827293
cycle= 2 E= -473.87572024907  delta_E= -0.00066  |g|= 0.0101  |ddm|= 0.0195
    CPU time for cycle= 2      0.15 sec, wall time      0.01 sec
diis-norm(errvec)=0.0122179
diis-c [-1.31383683e-04  2.86679934e-02  9.71332007e-01]
  HOMO = -0.439678119494946  LUMO = 16.5293030070376
  mo_energy =
[-98.11152155 -10.55692085  -9.22203311  -9.22203311  -9.22203311
  -1.04962801  -0.43967812  -0.43967812  -0.43967812  16.52930301
  16.52930301  16.52930301]
E1 = -670.3486005969974  E_coul = 196.4728784466809
cycle= 3 E= -473.875722150316  delta_E= -1.9e-06  |g|= 0.000438  |ddm|= 0.000659
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.000431527
diis-c [-6.43017547e-14 -2.41808015e-03  1.39474338e-02  9.88470646e-01]
  HOMO = -0.439693441861605  LUMO = 16.5295566676973
  mo_energy =
[-98.11061531 -10.55670382  -9.22186356  -9.22186356  -9.22186356
  -1.04964177  -0.43969344  -0.43969344  -0.43969344  16.52955667
  16.52955667  16.52955667]
E1 = -670.3481820391277  E_coul = 196.4724598841083
cycle= 4 E= -473.875722155019  delta_E= -4.7e-09  |g|= 1.37e-07  |ddm|= 4.9e-05
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=1.5068e-07
diis-c [-1.54890980e-18  3.56418915e-09  6.72149647e-06 -1.98625785e-04
  1.00019190e+00]
  HOMO = -0.439693420958507  LUMO = 16.5295567492292
  mo_energy =
[-98.11061512 -10.55670372  -9.22186345  -9.22186345  -9.22186345
  -1.04964175  -0.43969342  -0.43969342  -0.43969342  16.52955675
  16.52955675  16.52955675]
E1 = -670.3481819087351  E_coul = 196.47245975371627
cycle= 5 E= -473.875722155019  delta_E= 5.68e-13  |g|= 3.1e-13  |ddm|= 1.16e-08
    CPU time for cycle= 5      0.01 sec, wall time      0.01 sec
E1 = -670.3481819087351  E_coul = 196.47245975371627
  HOMO = -0.439693420958534  LUMO = 16.5295567492291
  mo_energy =
[-98.11061512 -10.55670372  -9.22186345  -9.22186345  -9.22186345
  -1.04964175  -0.43969342  -0.43969342  -0.43969342  16.52955675
  16.52955675  16.52955675]
E1 = -670.3481819087352  E_coul = 196.47245975371655
Extra cycle  E= -473.875722155019  delta_E= 1.14e-13  |g|= 3.15e-14  |ddm|= 2.29e-14
    CPU time for scf_cycle      0.58 sec, wall time      0.08 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 3.6501062299208455
E1 = -670.3481819087352  E_coul = 196.47245975371655
init E= -473.875722155019
    CPU time for initialize scf      1.08 sec, wall time      0.05 sec
  HOMO = -0.439693420958537  LUMO = 16.5295567492292
  mo_energy =
[-98.11061512 -10.55670372  -9.22186345  -9.22186345  -9.22186345
  -1.04964175  -0.43969342  -0.43969342  -0.43969342  16.52955675
  16.52955675  16.52955675]
E1 = -670.3481819087356  E_coul = 196.4724597537169
cycle= 1 E= -473.875722155019  delta_E=    0  |g|= 2.07e-14  |ddm|= 5.88e-15
    CPU time for cycle= 1      0.20 sec, wall time      0.01 sec
E1 = -670.3481819087356  E_coul = 196.4724597537169
  HOMO = -0.439693420958531  LUMO = 16.5295567492292
  mo_energy =
[-98.11061512 -10.55670372  -9.22186345  -9.22186345  -9.22186345
  -1.04964175  -0.43969342  -0.43969342  -0.43969342  16.52955675
  16.52955675  16.52955675]
E1 = -670.3481819087355  E_coul = 196.4724597537167
Extra cycle  E= -473.875722155019  delta_E= -5.68e-14  |g|= 2.61e-14  |ddm|= 4.28e-15
    CPU time for scf_cycle      1.39 sec, wall time      0.11 sec
exp = [95.00070426  4.4576844   0.38158899 20.90283997  4.70616918  0.44254575]
grad_E = [ 0.00593546  0.0205539  -0.46891433 -0.1766671  -0.35106821 -0.75487367]
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((6, 2))
#exps[:, 0] = decaying_nums(5)

# S
exps[0,0] = 9.5045827955887916e+01
exps[1,0] = 4.4881042475048387e+00
exps[2,0] = 3.9799528004692630e-01
             
# P          
exps[3,0] = 18.0
exps[4,0] = 8.5469650038718257e+00
exps[5,0] = 4.8929328703550412e-01

basis = "3s3p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc11947.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 24
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 18 12:43:42 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35676253.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 32000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 32000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 32000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  94.9218408858        1
[INPUT] 0    0    [1    /1   ]  4.43285168045        1
[INPUT] 0    0    [1    /1   ]  0.371298350399       1
[INPUT] 1    0    [1    /1   ]  24.5287672443        1
[INPUT] 1    0    [1    /1   ]  5.3988038919         1
[INPUT] 1    0    [1    /1   ]  0.466355079419       1

nuclear repulsion = 0
number of shells = 6
number of NR pGTOs = 12
number of NR cGTOs = 12
basis = {'Ar': [[0, [94.92184088578274, 1.0]], [0, [4.432851680450338, 1.0]], [0, [0.37129835039850334, 1.0]], [1, [24.52876724433486, 1.0]], [1, [5.398803891901714, 1.0]], [1, [0.46635507941929116, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [94.92184089]
bas 1, expnt(s) = [4.43285168]
bas 2, expnt(s) = [0.37129835]
bas 3, expnt(s) = [24.52876724]
bas 4, expnt(s) = [5.39880389]
bas 5, expnt(s) = [0.46635508]
CPU time:        68.03
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  1  1  1  0 30 31  0]
 [ 0  1  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]]
arg.env = [  0.           0.           0.           0.           0.
   0.           0.           0.           0.           0.
   0.           0.           0.           0.           0.
   0.           0.           0.           0.           0.
   0.           0.           0.           0.          94.92184089
  76.83155772   4.43285168   7.71840254   0.37129835   1.20173107
  24.52876724 159.24985489   5.39880389  24.00801938   0.46635508
   1.12429501]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.630886856096023
cond(S) = 3.49342839327954
E1 = -662.1058728884476  E_coul = 195.78184116618934
init E= -466.324031722258
    CPU time for initialize scf      0.18 sec, wall time      0.02 sec
  HOMO = -0.604743746820755  LUMO = 20.8149822385269
  mo_energy =
[-97.69641477 -10.56548899  -9.36575144  -9.36575144  -9.36575144
  -1.20352374  -0.60474375  -0.60474375  -0.60474375  20.81498224
  20.81498224  20.81498224]
E1 = -674.2252233797528  E_coul = 199.70054345284981
cycle= 1 E= -474.524679926903  delta_E= -8.2  |g|= 0.27  |ddm|= 0.445
    CPU time for cycle= 1      0.21 sec, wall time      0.01 sec
diis-norm(errvec)=0.28328
diis-c [-0.08024739  1.        ]
  HOMO = -0.417890503857499  LUMO = 21.138566801195
  mo_energy =
[-97.56227917 -10.3225725   -9.09131218  -9.09131218  -9.09131218
  -1.00032358  -0.4178905   -0.4178905   -0.4178905   21.1385668
  21.1385668   21.1385668 ]
E1 = -673.995869362405  E_coul = 199.46982874272933
cycle= 2 E= -474.526040619676  delta_E= -0.00136  |g|= 0.018  |ddm|= 0.0229
    CPU time for cycle= 2      0.15 sec, wall time      0.01 sec
diis-norm(errvec)=0.0214444
diis-c [-1.16181991e-04  6.14648149e-02  9.38535185e-01]
  HOMO = -0.418856095831368  LUMO = 21.1206499573542
  mo_energy =
[-97.60442453 -10.33828971  -9.10642809  -9.10642809  -9.10642809
  -1.00245323  -0.4188561   -0.4188561   -0.4188561   21.12064996
  21.12064996  21.12064996]
E1 = -674.0087987266915  E_coul = 199.48275304342002
cycle= 3 E= -474.526045683271  delta_E= -5.06e-06  |g|= 0.000279  |ddm|= 0.00103
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.000293482
diis-c [-2.48566609e-13 -1.81988235e-03 -2.59945822e-02  1.02781446e+00]
  HOMO = -0.418885961818447  LUMO = 21.1205788882113
  mo_energy =
[-97.60440954 -10.33840191  -9.10656806  -9.10656806  -9.10656806
  -1.00250294  -0.41888596  -0.41888596  -0.41888596  21.12057889
  21.12057889  21.12057889]
E1 = -674.0087396411236  E_coul = 199.4826939560654
cycle= 4 E= -474.526045685058  delta_E= -1.79e-09  |g|= 1.1e-07  |ddm|= 2.65e-05
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=1.2455e-07
diis-c [-4.45417901e-18 -6.28158107e-08  5.34946118e-06 -7.26342168e-05
  1.00006735e+00]
  HOMO = -0.418885947101961  LUMO = 21.1205789348215
  mo_energy =
[-97.60440939 -10.33840184  -9.10656797  -9.10656797  -9.10656797
  -1.00250292  -0.41888595  -0.41888595  -0.41888595  21.12057893
  21.12057893  21.12057893]
E1 = -674.008739554366  E_coul = 199.48269386930707
cycle= 5 E= -474.526045685059  delta_E= -7.39e-13  |g|= 3.5e-12  |ddm|= 7.32e-09
    CPU time for cycle= 5      0.01 sec, wall time      0.01 sec
E1 = -674.008739554366  E_coul = 199.48269386930707
  HOMO = -0.41888594710144  LUMO = 21.1205789348237
  mo_energy =
[-97.60440939 -10.33840184  -9.10656797  -9.10656797  -9.10656797
  -1.00250292  -0.41888595  -0.41888595  -0.41888595  21.12057893
  21.12057893  21.12057893]
E1 = -674.0087395543626  E_coul = 199.4826938693042
Extra cycle  E= -474.526045685058  delta_E= 5.12e-13  |g|= 2.29e-13  |ddm|= 2.53e-13
    CPU time for scf_cycle      0.59 sec, wall time      0.09 sec
exp = [94.92184089  4.43285168  0.37129835 24.52876724  5.39880389  0.46635508]
E = -474.5260456850584
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((6, 2))
#exps[:, 0] = decaying_nums(5)

# S
exps[0,0] = 9.5045827955887916e+01
exps[1,0] = 4.4881042475048387e+00
exps[2,0] = 3.9799528004692630e-01
             
# P          
exps[3,0] = 18.0
exps[4,0] = 8.5469650038718257e+00
exps[5,0] = 4.8929328703550412e-01

basis = "3s3p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc11947.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 24
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 18 12:43:42 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35676253.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 32000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 32000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 32000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  94.9218408858        1
[INPUT] 0    0    [1    /1   ]  4.43285168045        1
[INPUT] 0    0    [1    /1   ]  0.371298350399       1
[INPUT] 1    0    [1    /1   ]  24.5287672443        1
[INPUT] 1    0    [1    /1   ]  5.3988038919         1
[INPUT] 1    0    [1    /1   ]  0.466355079419       1

nuclear repulsion = 0
number of shells = 6
number of NR pGTOs = 12
number of NR cGTOs = 12
basis = {'Ar': [[0, [94.92184088578274, 1.0]], [0, [4.432851680450338, 1.0]], [0, [0.37129835039850334, 1.0]], [1, [24.52876724433486, 1.0]], [1, [5.398803891901714, 1.0]], [1, [0.46635507941929116, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [94.92184089]
bas 1, expnt(s) = [4.43285168]
bas 2, expnt(s) = [0.37129835]
bas 3, expnt(s) = [24.52876724]
bas 4, expnt(s) = [5.39880389]
bas 5, expnt(s) = [0.46635508]
CPU time:        68.66
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  1  1  1  0 30 31  0]
 [ 0  1  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]]
arg.env = [  0.           0.           0.           0.           0.
   0.           0.           0.           0.           0.
   0.           0.           0.           0.           0.
   0.           0.           0.           0.           0.
   0.           0.           0.           0.          94.92184089
  76.83155772   4.43285168   7.71840254   0.37129835   1.20173107
  24.52876724 159.24985489   5.39880389  24.00801938   0.46635508
   1.12429501]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.630886856096023
cond(S) = 3.49342839327954
E1 = -662.1058728884476  E_coul = 195.78184116618934
init E= -466.324031722258
    CPU time for initialize scf      0.18 sec, wall time      0.02 sec
  HOMO = -0.604743746820755  LUMO = 20.8149822385269
  mo_energy =
[-97.69641477 -10.56548899  -9.36575144  -9.36575144  -9.36575144
  -1.20352374  -0.60474375  -0.60474375  -0.60474375  20.81498224
  20.81498224  20.81498224]
E1 = -674.2252233797528  E_coul = 199.70054345284981
cycle= 1 E= -474.524679926903  delta_E= -8.2  |g|= 0.27  |ddm|= 0.445
    CPU time for cycle= 1      0.21 sec, wall time      0.01 sec
diis-norm(errvec)=0.28328
diis-c [-0.08024739  1.        ]
  HOMO = -0.417890503857499  LUMO = 21.138566801195
  mo_energy =
[-97.56227917 -10.3225725   -9.09131218  -9.09131218  -9.09131218
  -1.00032358  -0.4178905   -0.4178905   -0.4178905   21.1385668
  21.1385668   21.1385668 ]
E1 = -673.995869362405  E_coul = 199.46982874272933
cycle= 2 E= -474.526040619676  delta_E= -0.00136  |g|= 0.018  |ddm|= 0.0229
    CPU time for cycle= 2      0.15 sec, wall time      0.01 sec
diis-norm(errvec)=0.0214444
diis-c [-1.16181991e-04  6.14648149e-02  9.38535185e-01]
  HOMO = -0.418856095831368  LUMO = 21.1206499573542
  mo_energy =
[-97.60442453 -10.33828971  -9.10642809  -9.10642809  -9.10642809
  -1.00245323  -0.4188561   -0.4188561   -0.4188561   21.12064996
  21.12064996  21.12064996]
E1 = -674.0087987266915  E_coul = 199.48275304342002
cycle= 3 E= -474.526045683271  delta_E= -5.06e-06  |g|= 0.000279  |ddm|= 0.00103
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.000293482
diis-c [-2.48566609e-13 -1.81988235e-03 -2.59945822e-02  1.02781446e+00]
  HOMO = -0.418885961818447  LUMO = 21.1205788882113
  mo_energy =
[-97.60440954 -10.33840191  -9.10656806  -9.10656806  -9.10656806
  -1.00250294  -0.41888596  -0.41888596  -0.41888596  21.12057889
  21.12057889  21.12057889]
E1 = -674.0087396411236  E_coul = 199.4826939560654
cycle= 4 E= -474.526045685058  delta_E= -1.79e-09  |g|= 1.1e-07  |ddm|= 2.65e-05
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=1.2455e-07
diis-c [-4.45417901e-18 -6.28158107e-08  5.34946118e-06 -7.26342168e-05
  1.00006735e+00]
  HOMO = -0.418885947101961  LUMO = 21.1205789348215
  mo_energy =
[-97.60440939 -10.33840184  -9.10656797  -9.10656797  -9.10656797
  -1.00250292  -0.41888595  -0.41888595  -0.41888595  21.12057893
  21.12057893  21.12057893]
E1 = -674.008739554366  E_coul = 199.48269386930707
cycle= 5 E= -474.526045685059  delta_E= -7.39e-13  |g|= 3.5e-12  |ddm|= 7.32e-09
    CPU time for cycle= 5      0.01 sec, wall time      0.01 sec
E1 = -674.008739554366  E_coul = 199.48269386930707
  HOMO = -0.41888594710144  LUMO = 21.1205789348237
  mo_energy =
[-97.60440939 -10.33840184  -9.10656797  -9.10656797  -9.10656797
  -1.00250292  -0.41888595  -0.41888595  -0.41888595  21.12057893
  21.12057893  21.12057893]
E1 = -674.0087395543626  E_coul = 199.4826938693042
Extra cycle  E= -474.526045685058  delta_E= 5.12e-13  |g|= 2.29e-13  |ddm|= 2.53e-13
    CPU time for scf_cycle      0.58 sec, wall time      0.08 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 3.49342839327954
E1 = -674.0087395543626  E_coul = 199.4826938693042
init E= -474.526045685058
    CPU time for initialize scf      1.07 sec, wall time      0.05 sec
  HOMO = -0.418885947101455  LUMO = 21.1205789348235
  mo_energy =
[-97.60440939 -10.33840184  -9.10656797  -9.10656797  -9.10656797
  -1.00250292  -0.41888595  -0.41888595  -0.41888595  21.12057893
  21.12057893  21.12057893]
E1 = -674.0087395543634  E_coul = 199.48269386930437
cycle= 1 E= -474.526045685059  delta_E= -5.68e-13  |g|= 5.36e-14  |ddm|= 1.5e-14
    CPU time for cycle= 1      0.20 sec, wall time      0.01 sec
E1 = -674.0087395543634  E_coul = 199.48269386930437
  HOMO = -0.418885947101453  LUMO = 21.1205789348235
  mo_energy =
[-97.60440939 -10.33840184  -9.10656797  -9.10656797  -9.10656797
  -1.00250292  -0.41888595  -0.41888595  -0.41888595  21.12057893
  21.12057893  21.12057893]
E1 = -674.0087395543632  E_coul = 199.48269386930434
Extra cycle  E= -474.526045685059  delta_E= 1.71e-13  |g|= 4.04e-14  |ddm|= 5.14e-15
    CPU time for scf_cycle      1.38 sec, wall time      0.11 sec
exp = [94.92184089  4.43285168  0.37129835 24.52876724  5.39880389  0.46635508]
grad_E = [ 0.00700807  0.0250518  -0.51470968 -0.10368648 -0.06393831 -0.2924582 ]
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((6, 2))
#exps[:, 0] = decaying_nums(5)

# S
exps[0,0] = 9.5045827955887916e+01
exps[1,0] = 4.4881042475048387e+00
exps[2,0] = 3.9799528004692630e-01
             
# P          
exps[3,0] = 18.0
exps[4,0] = 8.5469650038718257e+00
exps[5,0] = 4.8929328703550412e-01

basis = "3s3p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc11947.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 24
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 18 12:43:45 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35676253.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 32000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 32000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 32000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  94.838100138         1
[INPUT] 0    0    [1    /1   ]  4.37811402936        1
[INPUT] 0    0    [1    /1   ]  0.415728695995       1
[INPUT] 1    0    [1    /1   ]  28.0658955461        1
[INPUT] 1    0    [1    /1   ]  5.9576463416         1
[INPUT] 1    0    [1    /1   ]  0.481180234463       1

nuclear repulsion = 0
number of shells = 6
number of NR pGTOs = 12
number of NR cGTOs = 12
basis = {'Ar': [[0, [94.83810013797316, 1.0]], [0, [4.37811402936474, 1.0]], [0, [0.415728695994721, 1.0]], [1, [28.065895546059412, 1.0]], [1, [5.957646341601263, 1.0]], [1, [0.4811802344627401, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [94.83810014]
bas 1, expnt(s) = [4.37811403]
bas 2, expnt(s) = [0.4157287]
bas 3, expnt(s) = [28.06589555]
bas 4, expnt(s) = [5.95764634]
bas 5, expnt(s) = [0.48118023]
CPU time:        73.18
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  1  1  1  0 30 31  0]
 [ 0  1  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]]
arg.env = [  0.           0.           0.           0.           0.
   0.           0.           0.           0.           0.
   0.           0.           0.           0.           0.
   0.           0.           0.           0.           0.
   0.           0.           0.           0.          94.83810014
  76.78071609   4.37811403   7.64681046   0.4157287    1.30804452
  28.06589555 188.45515569   5.95764634  27.15362346   0.48118023
   1.16914699]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.596672348939762
cond(S) = 3.3166140413826097
E1 = -663.6025321151286  E_coul = 197.01122116704025
init E= -466.591310948088
    CPU time for initialize scf      0.19 sec, wall time      0.02 sec
  HOMO = -0.59457443868879  LUMO = 25.1218616598287
  mo_energy =
[-97.50941973 -10.51580857  -9.31045271  -9.31045271  -9.31045271
  -1.16125303  -0.59457444  -0.59457444  -0.59457444  25.12186166
  25.12186166  25.12186166]
E1 = -677.5572327748125  E_coul = 202.77825275068741
cycle= 1 E= -474.778980024125  delta_E= -8.19  |g|= 0.381  |ddm|= 0.367
    CPU time for cycle= 1      0.22 sec, wall time      0.01 sec
diis-norm(errvec)=0.421669
diis-c [-0.17780445  1.        ]
  HOMO = -0.377742561851476  LUMO = 25.6090272991202
  mo_energy =
[-97.10561714 -10.13878871  -8.90253883  -8.90253883  -8.90253883
  -0.91627416  -0.37774256  -0.37774256  -0.37774256  25.6090273
  25.6090273   25.6090273 ]
E1 = -677.2790145340122  E_coul = 202.4978324441272
cycle= 2 E= -474.781182089885  delta_E= -0.0022  |g|= 0.0225  |ddm|= 0.0252
    CPU time for cycle= 2      0.14 sec, wall time      0.01 sec
diis-norm(errvec)=0.0270505
diis-c [-8.75545334e-05  5.67867120e-02  9.43213288e-01]
  HOMO = -0.378763996747623  LUMO = 25.5846691862676
  mo_energy =
[-97.16018077 -10.15715172  -8.92040869  -8.92040869  -8.92040869
  -0.91886888  -0.378764    -0.378764    -0.378764    25.58466919
  25.58466919  25.58466919]
E1 = -677.2935805127937  E_coul = 202.51239139047556
cycle= 3 E= -474.781189122318  delta_E= -7.03e-06  |g|= 0.000221  |ddm|= 0.00115
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.000249363
diis-c [-2.40886205e-13 -1.41086038e-03 -2.54189710e-02  1.02682983e+00]
  HOMO = -0.378785390904596  LUMO = 25.5845820828354
  mo_energy =
[-97.16027021 -10.15725857  -8.92053605  -8.92053605  -8.92053605
  -0.91890819  -0.37878539  -0.37878539  -0.37878539  25.58458208
  25.58458208  25.58458208]
E1 = -677.2935766737083  E_coul = 202.51238755049565
cycle= 4 E= -474.781189123213  delta_E= -8.95e-10  |g|= 1.05e-07  |ddm|= 1.59e-05
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
E1 = -677.2935766737083  E_coul = 202.51238755049565
  HOMO = -0.378785379690821  LUMO = 25.5845821200811
  mo_energy =
[-97.16027006 -10.1572585   -8.92053597  -8.92053597  -8.92053597
  -0.91890818  -0.37878538  -0.37878538  -0.37878538  25.58458212
  25.58458212  25.58458212]
E1 = -677.2935765988406  E_coul = 202.5123874756282
Extra cycle  E= -474.781189123212  delta_E= 3.41e-13  |g|= 6.15e-09  |ddm|= 6.07e-09
    CPU time for scf_cycle      0.58 sec, wall time      0.08 sec
exp = [94.83810014  4.37811403  0.4157287  28.06589555  5.95764634  0.48118023]
E = -474.78118912321236
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((6, 2))
#exps[:, 0] = decaying_nums(5)

# S
exps[0,0] = 9.5045827955887916e+01
exps[1,0] = 4.4881042475048387e+00
exps[2,0] = 3.9799528004692630e-01
             
# P          
exps[3,0] = 18.0
exps[4,0] = 8.5469650038718257e+00
exps[5,0] = 4.8929328703550412e-01

basis = "3s3p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc11947.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 24
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 18 12:43:45 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35676253.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 32000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 32000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 32000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  94.838100138         1
[INPUT] 0    0    [1    /1   ]  4.37811402936        1
[INPUT] 0    0    [1    /1   ]  0.415728695995       1
[INPUT] 1    0    [1    /1   ]  28.0658955461        1
[INPUT] 1    0    [1    /1   ]  5.9576463416         1
[INPUT] 1    0    [1    /1   ]  0.481180234463       1

nuclear repulsion = 0
number of shells = 6
number of NR pGTOs = 12
number of NR cGTOs = 12
basis = {'Ar': [[0, [94.83810013797316, 1.0]], [0, [4.37811402936474, 1.0]], [0, [0.415728695994721, 1.0]], [1, [28.065895546059412, 1.0]], [1, [5.957646341601263, 1.0]], [1, [0.4811802344627401, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [94.83810014]
bas 1, expnt(s) = [4.37811403]
bas 2, expnt(s) = [0.4157287]
bas 3, expnt(s) = [28.06589555]
bas 4, expnt(s) = [5.95764634]
bas 5, expnt(s) = [0.48118023]
CPU time:        73.80
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  1  1  1  0 30 31  0]
 [ 0  1  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]]
arg.env = [  0.           0.           0.           0.           0.
   0.           0.           0.           0.           0.
   0.           0.           0.           0.           0.
   0.           0.           0.           0.           0.
   0.           0.           0.           0.          94.83810014
  76.78071609   4.37811403   7.64681046   0.4157287    1.30804452
  28.06589555 188.45515569   5.95764634  27.15362346   0.48118023
   1.16914699]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.596672348939762
cond(S) = 3.3166140413826097
E1 = -663.6025321151286  E_coul = 197.01122116704025
init E= -466.591310948088
    CPU time for initialize scf      0.18 sec, wall time      0.02 sec
  HOMO = -0.59457443868879  LUMO = 25.1218616598287
  mo_energy =
[-97.50941973 -10.51580857  -9.31045271  -9.31045271  -9.31045271
  -1.16125303  -0.59457444  -0.59457444  -0.59457444  25.12186166
  25.12186166  25.12186166]
E1 = -677.5572327748125  E_coul = 202.77825275068741
cycle= 1 E= -474.778980024125  delta_E= -8.19  |g|= 0.381  |ddm|= 0.367
    CPU time for cycle= 1      0.21 sec, wall time      0.01 sec
diis-norm(errvec)=0.421669
diis-c [-0.17780445  1.        ]
  HOMO = -0.377742561851476  LUMO = 25.6090272991202
  mo_energy =
[-97.10561714 -10.13878871  -8.90253883  -8.90253883  -8.90253883
  -0.91627416  -0.37774256  -0.37774256  -0.37774256  25.6090273
  25.6090273   25.6090273 ]
E1 = -677.2790145340122  E_coul = 202.4978324441272
cycle= 2 E= -474.781182089885  delta_E= -0.0022  |g|= 0.0225  |ddm|= 0.0252
    CPU time for cycle= 2      0.15 sec, wall time      0.01 sec
diis-norm(errvec)=0.0270505
diis-c [-8.75545334e-05  5.67867120e-02  9.43213288e-01]
  HOMO = -0.378763996747623  LUMO = 25.5846691862676
  mo_energy =
[-97.16018077 -10.15715172  -8.92040869  -8.92040869  -8.92040869
  -0.91886888  -0.378764    -0.378764    -0.378764    25.58466919
  25.58466919  25.58466919]
E1 = -677.2935805127937  E_coul = 202.51239139047556
cycle= 3 E= -474.781189122318  delta_E= -7.03e-06  |g|= 0.000221  |ddm|= 0.00115
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.000249363
diis-c [-2.40886205e-13 -1.41086038e-03 -2.54189710e-02  1.02682983e+00]
  HOMO = -0.378785390904596  LUMO = 25.5845820828354
  mo_energy =
[-97.16027021 -10.15725857  -8.92053605  -8.92053605  -8.92053605
  -0.91890819  -0.37878539  -0.37878539  -0.37878539  25.58458208
  25.58458208  25.58458208]
E1 = -677.2935766737083  E_coul = 202.51238755049565
cycle= 4 E= -474.781189123213  delta_E= -8.95e-10  |g|= 1.05e-07  |ddm|= 1.59e-05
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
E1 = -677.2935766737083  E_coul = 202.51238755049565
  HOMO = -0.378785379690821  LUMO = 25.5845821200811
  mo_energy =
[-97.16027006 -10.1572585   -8.92053597  -8.92053597  -8.92053597
  -0.91890818  -0.37878538  -0.37878538  -0.37878538  25.58458212
  25.58458212  25.58458212]
E1 = -677.2935765988406  E_coul = 202.5123874756282
Extra cycle  E= -474.781189123212  delta_E= 3.41e-13  |g|= 6.15e-09  |ddm|= 6.07e-09
    CPU time for scf_cycle      0.57 sec, wall time      0.07 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 3.3166140413826097
E1 = -677.2935765988406  E_coul = 202.5123874756282
init E= -474.781189123212
    CPU time for initialize scf      1.07 sec, wall time      0.05 sec
  HOMO = -0.37878537992832  LUMO = 25.584582113059
  mo_energy =
[-97.16027007 -10.15725851  -8.92053597  -8.92053597  -8.92053597
  -0.91890818  -0.37878538  -0.37878538  -0.37878538  25.58458211
  25.58458211  25.58458211]
E1 = -677.2935766032127  E_coul = 202.5123874800004
cycle= 1 E= -474.781189123212  delta_E=    0  |g|= 3.61e-10  |ddm|= 3.52e-10
    CPU time for cycle= 1      0.20 sec, wall time      0.01 sec
E1 = -677.2935766032127  E_coul = 202.5123874800004
  HOMO = -0.378785379914834  LUMO = 25.58458211347
  mo_energy =
[-97.16027007 -10.15725851  -8.92053597  -8.92053597  -8.92053597
  -0.91890818  -0.37878538  -0.37878538  -0.37878538  25.58458211
  25.58458211  25.58458211]
E1 = -677.2935766029557  E_coul = 202.51238747974315
Extra cycle  E= -474.781189123213  delta_E= -1.71e-13  |g|= 2.12e-11  |ddm|= 2.08e-11
    CPU time for scf_cycle      1.38 sec, wall time      0.11 sec
exp = [94.83810014  4.37811403  0.4157287  28.06589555  5.95764634  0.48118023]
grad_E = [ 0.00718278 -0.01445222  0.26564812 -0.04666735  0.10640235  0.0369259 ]
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((6, 2))
#exps[:, 0] = decaying_nums(5)

# S
exps[0,0] = 9.5045827955887916e+01
exps[1,0] = 4.4881042475048387e+00
exps[2,0] = 3.9799528004692630e-01
             
# P          
exps[3,0] = 18.0
exps[4,0] = 8.5469650038718257e+00
exps[5,0] = 4.8929328703550412e-01

basis = "3s3p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc11947.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 24
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 18 12:43:48 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35676253.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 32000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 32000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 32000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  94.7981085865        1
[INPUT] 0    0    [1    /1   ]  4.38441219605        1
[INPUT] 0    0    [1    /1   ]  0.396289586294       1
[INPUT] 1    0    [1    /1   ]  29.4531015451        1
[INPUT] 1    0    [1    /1   ]  6.11935130912        1
[INPUT] 1    0    [1    /1   ]  0.486795076802       1

nuclear repulsion = 0
number of shells = 6
number of NR pGTOs = 12
number of NR cGTOs = 12
basis = {'Ar': [[0, [94.79810858646992, 1.0]], [0, [4.384412196053745, 1.0]], [0, [0.39628958629388616, 1.0]], [1, [29.45310154505254, 1.0]], [1, [6.119351309120877, 1.0]], [1, [0.4867950768024042, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [94.79810859]
bas 1, expnt(s) = [4.3844122]
bas 2, expnt(s) = [0.39628959]
bas 3, expnt(s) = [29.45310155]
bas 4, expnt(s) = [6.11935131]
bas 5, expnt(s) = [0.48679508]
CPU time:        78.27
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  1  1  1  0 30 31  0]
 [ 0  1  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]]
arg.env = [  0.           0.           0.           0.           0.
   0.           0.           0.           0.           0.
   0.           0.           0.           0.           0.
   0.           0.           0.           0.           0.
   0.           0.           0.           0.          94.79810859
  76.75643201   4.3844122    7.65505926   0.39628959   1.26189878
  29.45310155 200.16962978   6.11935131  28.07799716   0.48679508
   1.18622511]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.587790506465293
cond(S) = 3.2343512013301816
E1 = -663.5028320786938  E_coul = 196.90628885291054
init E= -466.596543225783
    CPU time for initialize scf      0.18 sec, wall time      0.02 sec
  HOMO = -0.604445258709589  LUMO = 26.6583268499595
  mo_energy =
[-97.48922726 -10.51205975  -9.32643399  -9.32643399  -9.32643399
  -1.17999961  -0.60444526  -0.60444526  -0.60444526  26.65832685
  26.65832685  26.65832685]
E1 = -677.918591316493  E_coul = 203.10677929921863
cycle= 1 E= -474.811812017274  delta_E= -8.22  |g|= 0.406  |ddm|= 0.349
    CPU time for cycle= 1      0.21 sec, wall time      0.01 sec
diis-norm(errvec)=0.456415
diis-c [-0.2083148  1.       ]
  HOMO = -0.379476656060997  LUMO = 27.189155296935
  mo_energy =
[-97.02590078 -10.10315042  -8.88648792  -8.88648792  -8.88648792
  -0.92681984  -0.37947666  -0.37947666  -0.37947666  27.1891553
  27.1891553   27.1891553 ]
E1 = -677.63642086482  E_coul = 202.82223830475766
cycle= 2 E= -474.814182560062  delta_E= -0.00237  |g|= 0.0231  |ddm|= 0.025
    CPU time for cycle= 2      0.15 sec, wall time      0.01 sec
diis-norm(errvec)=0.0278872
diis-c [-7.76597682e-05  5.48029552e-02  9.45197045e-01]
  HOMO = -0.38048667602848  LUMO = 27.1634402687075
  mo_energy =
[-97.08226912 -10.12172588  -8.90447846  -8.90447846  -8.90447846
  -0.92929168  -0.38048668  -0.38048668  -0.38048668  27.16344027
  27.16344027  27.16344027]
E1 = -677.6507742672206  E_coul = 202.83658461465288
cycle= 3 E= -474.814189652568  delta_E= -7.09e-06  |g|= 0.000199  |ddm|= 0.00113
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.000228752
diis-c [-2.00425945e-13 -1.30048808e-03 -2.45536165e-02  1.02585410e+00]
  HOMO = -0.380505218338904  LUMO = 27.1633590436882
  mo_energy =
[-97.0823614  -10.12182198  -8.90459268  -8.90459268  -8.90459268
  -0.92932492  -0.38050522  -0.38050522  -0.38050522  27.16335904
  27.16335904  27.16335904]
E1 = -677.650776230497  E_coul = 202.8365865772473
cycle= 4 E= -474.81418965325  delta_E= -6.82e-10  |g|= 1e-07  |ddm|= 1.32e-05
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
E1 = -677.650776230497  E_coul = 202.8365865772473
  HOMO = -0.380505208537015  LUMO = 27.1633590773533
  mo_energy =
[-97.08236126 -10.12182193  -8.90459261  -8.90459261  -8.90459261
  -0.92932491  -0.38050521  -0.38050521  -0.38050521  27.16335908
  27.16335908  27.16335908]
E1 = -677.6507761622252  E_coul = 202.8365865089752
Extra cycle  E= -474.81418965325  delta_E= -3.41e-13  |g|= 5.67e-09  |ddm|= 5.48e-09
    CPU time for scf_cycle      0.58 sec, wall time      0.07 sec
exp = [94.79810859  4.3844122   0.39628959 29.45310155  6.11935131  0.48679508]
E = -474.81418965324997
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((6, 2))
#exps[:, 0] = decaying_nums(5)

# S
exps[0,0] = 9.5045827955887916e+01
exps[1,0] = 4.4881042475048387e+00
exps[2,0] = 3.9799528004692630e-01
             
# P          
exps[3,0] = 18.0
exps[4,0] = 8.5469650038718257e+00
exps[5,0] = 4.8929328703550412e-01

basis = "3s3p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc11947.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 24
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 18 12:43:48 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35676253.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 32000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 32000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 32000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  94.7981085865        1
[INPUT] 0    0    [1    /1   ]  4.38441219605        1
[INPUT] 0    0    [1    /1   ]  0.396289586294       1
[INPUT] 1    0    [1    /1   ]  29.4531015451        1
[INPUT] 1    0    [1    /1   ]  6.11935130912        1
[INPUT] 1    0    [1    /1   ]  0.486795076802       1

nuclear repulsion = 0
number of shells = 6
number of NR pGTOs = 12
number of NR cGTOs = 12
basis = {'Ar': [[0, [94.79810858646992, 1.0]], [0, [4.384412196053745, 1.0]], [0, [0.39628958629388616, 1.0]], [1, [29.45310154505254, 1.0]], [1, [6.119351309120877, 1.0]], [1, [0.4867950768024042, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [94.79810859]
bas 1, expnt(s) = [4.3844122]
bas 2, expnt(s) = [0.39628959]
bas 3, expnt(s) = [29.45310155]
bas 4, expnt(s) = [6.11935131]
bas 5, expnt(s) = [0.48679508]
CPU time:        78.90
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  1  1  1  0 30 31  0]
 [ 0  1  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]]
arg.env = [  0.           0.           0.           0.           0.
   0.           0.           0.           0.           0.
   0.           0.           0.           0.           0.
   0.           0.           0.           0.           0.
   0.           0.           0.           0.          94.79810859
  76.75643201   4.3844122    7.65505926   0.39628959   1.26189878
  29.45310155 200.16962978   6.11935131  28.07799716   0.48679508
   1.18622511]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.587790506465293
cond(S) = 3.2343512013301816
E1 = -663.5028320786938  E_coul = 196.90628885291054
init E= -466.596543225783
    CPU time for initialize scf      0.18 sec, wall time      0.02 sec
  HOMO = -0.604445258709589  LUMO = 26.6583268499595
  mo_energy =
[-97.48922726 -10.51205975  -9.32643399  -9.32643399  -9.32643399
  -1.17999961  -0.60444526  -0.60444526  -0.60444526  26.65832685
  26.65832685  26.65832685]
E1 = -677.918591316493  E_coul = 203.10677929921863
cycle= 1 E= -474.811812017274  delta_E= -8.22  |g|= 0.406  |ddm|= 0.349
    CPU time for cycle= 1      0.21 sec, wall time      0.01 sec
diis-norm(errvec)=0.456415
diis-c [-0.2083148  1.       ]
  HOMO = -0.379476656060997  LUMO = 27.189155296935
  mo_energy =
[-97.02590078 -10.10315042  -8.88648792  -8.88648792  -8.88648792
  -0.92681984  -0.37947666  -0.37947666  -0.37947666  27.1891553
  27.1891553   27.1891553 ]
E1 = -677.63642086482  E_coul = 202.82223830475766
cycle= 2 E= -474.814182560062  delta_E= -0.00237  |g|= 0.0231  |ddm|= 0.025
    CPU time for cycle= 2      0.15 sec, wall time      0.01 sec
diis-norm(errvec)=0.0278872
diis-c [-7.76597682e-05  5.48029552e-02  9.45197045e-01]
  HOMO = -0.38048667602848  LUMO = 27.1634402687075
  mo_energy =
[-97.08226912 -10.12172588  -8.90447846  -8.90447846  -8.90447846
  -0.92929168  -0.38048668  -0.38048668  -0.38048668  27.16344027
  27.16344027  27.16344027]
E1 = -677.6507742672206  E_coul = 202.83658461465288
cycle= 3 E= -474.814189652568  delta_E= -7.09e-06  |g|= 0.000199  |ddm|= 0.00113
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.000228752
diis-c [-2.00425945e-13 -1.30048808e-03 -2.45536165e-02  1.02585410e+00]
  HOMO = -0.380505218338904  LUMO = 27.1633590436882
  mo_energy =
[-97.0823614  -10.12182198  -8.90459268  -8.90459268  -8.90459268
  -0.92932492  -0.38050522  -0.38050522  -0.38050522  27.16335904
  27.16335904  27.16335904]
E1 = -677.650776230497  E_coul = 202.8365865772473
cycle= 4 E= -474.81418965325  delta_E= -6.82e-10  |g|= 1e-07  |ddm|= 1.32e-05
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
E1 = -677.650776230497  E_coul = 202.8365865772473
  HOMO = -0.380505208537015  LUMO = 27.1633590773533
  mo_energy =
[-97.08236126 -10.12182193  -8.90459261  -8.90459261  -8.90459261
  -0.92932491  -0.38050521  -0.38050521  -0.38050521  27.16335908
  27.16335908  27.16335908]
E1 = -677.6507761622252  E_coul = 202.8365865089752
Extra cycle  E= -474.81418965325  delta_E= -3.41e-13  |g|= 5.67e-09  |ddm|= 5.48e-09
    CPU time for scf_cycle      0.57 sec, wall time      0.07 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 3.2343512013301816
E1 = -677.6507761622252  E_coul = 202.8365865089752
init E= -474.81418965325
    CPU time for initialize scf      1.09 sec, wall time      0.05 sec
  HOMO = -0.380505208749131  LUMO = 27.1633590707028
  mo_energy =
[-97.08236128 -10.12182193  -8.90459261  -8.90459261  -8.90459261
  -0.92932491  -0.38050521  -0.38050521  -0.38050521  27.16335907
  27.16335907  27.16335907]
E1 = -677.6507761660716  E_coul = 202.83658651282116
cycle= 1 E= -474.81418965325  delta_E= -5.12e-13  |g|= 3.19e-10  |ddm|= 3.08e-10
    CPU time for cycle= 1      0.20 sec, wall time      0.01 sec
E1 = -677.6507761660716  E_coul = 202.83658651282116
  HOMO = -0.380505208737243  LUMO = 27.1633590710776
  mo_energy =
[-97.08236127 -10.12182193  -8.90459261  -8.90459261  -8.90459261
  -0.92932491  -0.38050521  -0.38050521  -0.38050521  27.16335907
  27.16335907  27.16335907]
E1 = -677.6507761658542  E_coul = 202.8365865126042
Extra cycle  E= -474.81418965325  delta_E= 5.12e-13  |g|= 1.8e-11  |ddm|= 1.74e-11
    CPU time for scf_cycle      1.39 sec, wall time      0.11 sec
exp = [94.79810859  4.3844122   0.39628959 29.45310155  6.11935131  0.48679508]
grad_E = [ 0.00724577 -0.0017214   0.00395719 -0.02112867  0.09430497  0.09587514]
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((6, 2))
#exps[:, 0] = decaying_nums(5)

# S
exps[0,0] = 9.5045827955887916e+01
exps[1,0] = 4.4881042475048387e+00
exps[2,0] = 3.9799528004692630e-01
             
# P          
exps[3,0] = 18.0
exps[4,0] = 8.5469650038718257e+00
exps[5,0] = 4.8929328703550412e-01

basis = "3s3p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc11947.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 24
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 18 12:43:51 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35676253.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 32000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 32000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 32000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  94.7740690275        1
[INPUT] 0    0    [1    /1   ]  4.38466191296        1
[INPUT] 0    0    [1    /1   ]  0.398623741595       1
[INPUT] 1    0    [1    /1   ]  30.03527157          1
[INPUT] 1    0    [1    /1   ]  6.14140283036        1
[INPUT] 1    0    [1    /1   ]  0.485226392399       1

nuclear repulsion = 0
number of shells = 6
number of NR pGTOs = 12
number of NR cGTOs = 12
basis = {'Ar': [[0, [94.77406902747448, 1.0]], [0, [4.384661912960287, 1.0]], [0, [0.3986237415950478, 1.0]], [1, [30.03527156996601, 1.0]], [1, [6.141402830360308, 1.0]], [1, [0.485226392399108, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [94.77406903]
bas 1, expnt(s) = [4.38466191]
bas 2, expnt(s) = [0.39862374]
bas 3, expnt(s) = [30.03527157]
bas 4, expnt(s) = [6.14140283]
bas 5, expnt(s) = [0.48522639]
CPU time:        83.36
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  1  1  1  0 30 31  0]
 [ 0  1  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]]
arg.env = [  0.           0.           0.           0.           0.
   0.           0.           0.           0.           0.
   0.           0.           0.           0.           0.
   0.           0.           0.           0.           0.
   0.           0.           0.           0.          94.77406903
  76.74183322   4.38466191   7.65538626   0.39862374   1.26746914
  30.03527157 205.12748077   6.14140283  28.20453042   0.48522639
   1.18144882]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.588788623257162
cond(S) = 3.178096648118003
E1 = -663.4808980926172  E_coul = 196.8967014581029
init E= -466.584196634514
    CPU time for initialize scf      0.19 sec, wall time      0.02 sec
  HOMO = -0.604941747996074  LUMO = 27.1609256356901
  mo_energy =
[-97.4773372  -10.51506282  -9.33133263  -9.33133263  -9.33133263
  -1.17965997  -0.60494175  -0.60494175  -0.60494175  27.16092564
  27.16092564  27.16092564]
E1 = -677.8190147961984  E_coul = 203.0011064093188
cycle= 1 E= -474.81790838688  delta_E= -8.23  |g|=  0.4  |ddm|= 0.352
    CPU time for cycle= 1      0.21 sec, wall time      0.01 sec
diis-norm(errvec)=0.450933
diis-c [-0.20334021  1.        ]
  HOMO = -0.380873804231731  LUMO = 27.6854891197562
  mo_energy =
[-97.03522413 -10.11243678  -8.89731939  -8.89731939  -8.89731939
  -0.92735029  -0.3808738   -0.3808738   -0.3808738   27.68548912
  27.68548912  27.68548912]
E1 = -677.5459972792338  E_coul = 202.72582845330024
cycle= 2 E= -474.820168825934  delta_E= -0.00226  |g|= 0.0225  |ddm|= 0.0241
    CPU time for cycle= 2      0.15 sec, wall time      0.01 sec
diis-norm(errvec)=0.0273293
diis-c [-7.68309074e-05  5.42976652e-02  9.45702335e-01]
  HOMO = -0.381838526408822  LUMO = 27.6602159525068
  mo_energy =
[-97.09004123 -10.1303829   -8.91467141  -8.91467141  -8.91467141
  -0.92974914  -0.38183853  -0.38183853  -0.38183853  27.66021595
  27.66021595  27.66021595]
E1 = -677.5597963198884  E_coul = 202.73962084307016
cycle= 3 E= -474.820175476818  delta_E= -6.65e-06  |g|= 0.000192  |ddm|= 0.00108
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.000221884
diis-c [-1.68796360e-13 -1.27177808e-03 -2.40620548e-02  1.02533383e+00]
  HOMO = -0.381856028903346  LUMO = 27.6601417775802
  mo_energy =
[-97.09012186 -10.13047217  -8.91477825  -8.91477825  -8.91477825
  -0.92978072  -0.38185603  -0.38185603  -0.38185603  27.66014178
  27.66014178  27.66014178]
E1 = -677.5597966658629  E_coul = 202.7396211884143
cycle= 4 E= -474.820175477449  delta_E= -6.3e-10  |g|= 9.56e-08  |ddm|= 1.26e-05
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
E1 = -677.5597966658629  E_coul = 202.7396211884143
  HOMO = -0.381856019842683  LUMO = 27.6601418108482
  mo_energy =
[-97.09012173 -10.13047212  -8.91477818  -8.91477818  -8.91477818
  -0.92978071  -0.38185602  -0.38185602  -0.38185602  27.66014181
  27.66014181  27.66014181]
E1 = -677.5597966018526  E_coul = 202.7396211244039
Extra cycle  E= -474.820175477449  delta_E=    0  |g|= 5.35e-09  |ddm|= 5.11e-09
    CPU time for scf_cycle      0.58 sec, wall time      0.07 sec
exp = [94.77406903  4.38466191  0.39862374 30.03527157  6.14140283  0.48522639]
E = -474.82017547744863
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((6, 2))
#exps[:, 0] = decaying_nums(5)

# S
exps[0,0] = 9.5045827955887916e+01
exps[1,0] = 4.4881042475048387e+00
exps[2,0] = 3.9799528004692630e-01
             
# P          
exps[3,0] = 18.0
exps[4,0] = 8.5469650038718257e+00
exps[5,0] = 4.8929328703550412e-01

basis = "3s3p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc11947.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 24
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 18 12:43:51 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35676253.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 32000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 32000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 32000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  94.7740690275        1
[INPUT] 0    0    [1    /1   ]  4.38466191296        1
[INPUT] 0    0    [1    /1   ]  0.398623741595       1
[INPUT] 1    0    [1    /1   ]  30.03527157          1
[INPUT] 1    0    [1    /1   ]  6.14140283036        1
[INPUT] 1    0    [1    /1   ]  0.485226392399       1

nuclear repulsion = 0
number of shells = 6
number of NR pGTOs = 12
number of NR cGTOs = 12
basis = {'Ar': [[0, [94.77406902747448, 1.0]], [0, [4.384661912960287, 1.0]], [0, [0.3986237415950478, 1.0]], [1, [30.03527156996601, 1.0]], [1, [6.141402830360308, 1.0]], [1, [0.485226392399108, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [94.77406903]
bas 1, expnt(s) = [4.38466191]
bas 2, expnt(s) = [0.39862374]
bas 3, expnt(s) = [30.03527157]
bas 4, expnt(s) = [6.14140283]
bas 5, expnt(s) = [0.48522639]
CPU time:        83.99
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  1  1  1  0 30 31  0]
 [ 0  1  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]]
arg.env = [  0.           0.           0.           0.           0.
   0.           0.           0.           0.           0.
   0.           0.           0.           0.           0.
   0.           0.           0.           0.           0.
   0.           0.           0.           0.          94.77406903
  76.74183322   4.38466191   7.65538626   0.39862374   1.26746914
  30.03527157 205.12748077   6.14140283  28.20453042   0.48522639
   1.18144882]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.588788623257162
cond(S) = 3.178096648118003
E1 = -663.4808980926172  E_coul = 196.8967014581029
init E= -466.584196634514
    CPU time for initialize scf      0.18 sec, wall time      0.02 sec
  HOMO = -0.604941747996074  LUMO = 27.1609256356901
  mo_energy =
[-97.4773372  -10.51506282  -9.33133263  -9.33133263  -9.33133263
  -1.17965997  -0.60494175  -0.60494175  -0.60494175  27.16092564
  27.16092564  27.16092564]
E1 = -677.8190147961984  E_coul = 203.0011064093188
cycle= 1 E= -474.81790838688  delta_E= -8.23  |g|=  0.4  |ddm|= 0.352
    CPU time for cycle= 1      0.21 sec, wall time      0.01 sec
diis-norm(errvec)=0.450933
diis-c [-0.20334021  1.        ]
  HOMO = -0.380873804231731  LUMO = 27.6854891197562
  mo_energy =
[-97.03522413 -10.11243678  -8.89731939  -8.89731939  -8.89731939
  -0.92735029  -0.3808738   -0.3808738   -0.3808738   27.68548912
  27.68548912  27.68548912]
E1 = -677.5459972792338  E_coul = 202.72582845330024
cycle= 2 E= -474.820168825934  delta_E= -0.00226  |g|= 0.0225  |ddm|= 0.0241
    CPU time for cycle= 2      0.15 sec, wall time      0.01 sec
diis-norm(errvec)=0.0273293
diis-c [-7.68309074e-05  5.42976652e-02  9.45702335e-01]
  HOMO = -0.381838526408822  LUMO = 27.6602159525068
  mo_energy =
[-97.09004123 -10.1303829   -8.91467141  -8.91467141  -8.91467141
  -0.92974914  -0.38183853  -0.38183853  -0.38183853  27.66021595
  27.66021595  27.66021595]
E1 = -677.5597963198884  E_coul = 202.73962084307016
cycle= 3 E= -474.820175476818  delta_E= -6.65e-06  |g|= 0.000192  |ddm|= 0.00108
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.000221884
diis-c [-1.68796360e-13 -1.27177808e-03 -2.40620548e-02  1.02533383e+00]
  HOMO = -0.381856028903346  LUMO = 27.6601417775802
  mo_energy =
[-97.09012186 -10.13047217  -8.91477825  -8.91477825  -8.91477825
  -0.92978072  -0.38185603  -0.38185603  -0.38185603  27.66014178
  27.66014178  27.66014178]
E1 = -677.5597966658629  E_coul = 202.7396211884143
cycle= 4 E= -474.820175477449  delta_E= -6.3e-10  |g|= 9.56e-08  |ddm|= 1.26e-05
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
E1 = -677.5597966658629  E_coul = 202.7396211884143
  HOMO = -0.381856019842683  LUMO = 27.6601418108482
  mo_energy =
[-97.09012173 -10.13047212  -8.91477818  -8.91477818  -8.91477818
  -0.92978071  -0.38185602  -0.38185602  -0.38185602  27.66014181
  27.66014181  27.66014181]
E1 = -677.5597966018526  E_coul = 202.7396211244039
Extra cycle  E= -474.820175477449  delta_E=    0  |g|= 5.35e-09  |ddm|= 5.11e-09
    CPU time for scf_cycle      0.57 sec, wall time      0.07 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 3.178096648118003
E1 = -677.5597966018526  E_coul = 202.7396211244039
init E= -474.820175477449
    CPU time for initialize scf      1.07 sec, wall time      0.05 sec
  HOMO = -0.381856020038228  LUMO = 27.6601418045131
  mo_energy =
[-97.09012174 -10.13047212  -8.91477818  -8.91477818  -8.91477818
  -0.92978071  -0.38185602  -0.38185602  -0.38185602  27.6601418
  27.6601418   27.6601418 ]
E1 = -677.559796605434  E_coul = 202.73962112798517
cycle= 1 E= -474.820175477449  delta_E= -2.27e-13  |g|= 3e-10  |ddm|= 2.86e-10
    CPU time for cycle= 1      0.20 sec, wall time      0.01 sec
E1 = -677.559796605434  E_coul = 202.73962112798517
  HOMO = -0.381856020027318  LUMO = 27.6601418048676
  mo_energy =
[-97.09012174 -10.13047212  -8.91477818  -8.91477818  -8.91477818
  -0.92978071  -0.38185602  -0.38185602  -0.38185602  27.6601418
  27.6601418   27.6601418 ]
E1 = -677.5597966052329  E_coul = 202.7396211277847
Extra cycle  E= -474.820175477448  delta_E= 6.25e-13  |g|= 1.68e-11  |ddm|= 1.6e-11
    CPU time for scf_cycle      1.38 sec, wall time      0.11 sec
exp = [94.77406903  4.38466191  0.39862374 30.03527157  6.14140283  0.48522639]
grad_E = [ 0.00691939 -0.00178895  0.03463715 -0.00306948  0.01814579  0.04476796]
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((6, 2))
#exps[:, 0] = decaying_nums(5)

# S
exps[0,0] = 9.5045827955887916e+01
exps[1,0] = 4.4881042475048387e+00
exps[2,0] = 3.9799528004692630e-01
             
# P          
exps[3,0] = 18.0
exps[4,0] = 8.5469650038718257e+00
exps[5,0] = 4.8929328703550412e-01

basis = "3s3p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc11947.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 24
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 18 12:43:53 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35676253.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 32000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 32000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 32000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  94.7632678415        1
[INPUT] 0    0    [1    /1   ]  4.38666133101        1
[INPUT] 0    0    [1    /1   ]  0.396482804694       1
[INPUT] 1    0    [1    /1   ]  30.1187135801        1
[INPUT] 1    0    [1    /1   ]  6.14089379507        1
[INPUT] 1    0    [1    /1   ]  0.484059981186       1

nuclear repulsion = 0
number of shells = 6
number of NR pGTOs = 12
number of NR cGTOs = 12
basis = {'Ar': [[0, [94.76326784149266, 1.0]], [0, [4.3866613310087486, 1.0]], [0, [0.3964828046940651, 1.0]], [1, [30.11871358005356, 1.0]], [1, [6.140893795067935, 1.0]], [1, [0.48405998118642823, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [94.76326784]
bas 1, expnt(s) = [4.38666133]
bas 2, expnt(s) = [0.3964828]
bas 3, expnt(s) = [30.11871358]
bas 4, expnt(s) = [6.1408938]
bas 5, expnt(s) = [0.48405998]
CPU time:        88.50
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  1  1  1  0 30 31  0]
 [ 0  1  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]]
arg.env = [  0.           0.           0.           0.           0.
   0.           0.           0.           0.           0.
   0.           0.           0.           0.           0.
   0.           0.           0.           0.           0.
   0.           0.           0.           0.          94.76326784
  76.73527356   4.38666133   7.65800427   0.3964828    1.2623602
  30.11871358 205.84006752   6.1408938   28.20160826   0.48405998
   1.17789985]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.59054493904709
cond(S) = 3.167587848836643
E1 = -663.4071025726904  E_coul = 196.82963918574308
init E= -466.577463386947
    CPU time for initialize scf      0.18 sec, wall time      0.02 sec
  HOMO = -0.606562330931716  LUMO = 27.2143373088125
  mo_energy =
[-97.48106288 -10.51876266  -9.33728956  -9.33728956  -9.33728956
  -1.18265869  -0.60656233  -0.60656233  -0.60656233  27.21433731
  27.21433731  27.21433731]
E1 = -677.6926539669907  E_coul = 202.87444427725367
cycle= 1 E= -474.818209689737  delta_E= -8.24  |g|= 0.397  |ddm|= 0.353
    CPU time for cycle= 1      0.21 sec, wall time      0.01 sec
diis-norm(errvec)=0.447743
diis-c [-0.2004741  1.       ]
  HOMO = -0.383769888665719  LUMO = 27.734308034945
  mo_energy =
[-97.04786705 -10.12011201  -8.90724965  -8.90724965  -8.90724965
  -0.93201542  -0.38376989  -0.38376989  -0.38376989  27.73430803
  27.73430803  27.73430803]
E1 = -677.4222833237885  E_coul = 202.60184975946726
cycle= 2 E= -474.820433564321  delta_E= -0.00222  |g|= 0.0223  |ddm|= 0.0239
    CPU time for cycle= 2      0.15 sec, wall time      0.01 sec
diis-norm(errvec)=0.0271299
diis-c [-7.71256430e-05  5.42313937e-02  9.45768606e-01]
  HOMO = -0.384721655199892  LUMO = 27.7092239960792
  mo_energy =
[-97.10218184 -10.13789541  -8.92442829  -8.92442829  -8.92442829
  -0.93437949  -0.38472166  -0.38472166  -0.38472166  27.709224
  27.709224    27.709224  ]
E1 = -677.4359400082471  E_coul = 202.6154999144666
cycle= 3 E= -474.820440093781  delta_E= -6.53e-06  |g|= 0.000192  |ddm|= 0.00107
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.000220926
diis-c [-1.62660009e-13 -1.26846435e-03 -2.39577112e-02  1.02522618e+00]
  HOMO = -0.384738992422424  LUMO = 27.7091516332884
  mo_energy =
[-97.10225884 -10.13798326  -8.92453365  -8.92453365  -8.92453365
  -0.9344107   -0.38473899  -0.38473899  -0.38473899  27.70915163
  27.70915163  27.70915163]
E1 = -677.4359395825104  E_coul = 202.61549948810466
cycle= 4 E= -474.820440094406  delta_E= -6.25e-10  |g|= 9.45e-08  |ddm|= 1.25e-05
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
E1 = -677.4359395825104  E_coul = 202.61549948810466
  HOMO = -0.384738983500974  LUMO = 27.7091516665837
  mo_energy =
[-97.10225871 -10.13798321  -8.92453358  -8.92453358  -8.92453358
  -0.93441069  -0.38473898  -0.38473898  -0.38473898  27.70915167
  27.70915167  27.70915167]
E1 = -677.4359395193762  E_coul = 202.6154994249708
Extra cycle  E= -474.820440094405  delta_E= 3.41e-13  |g|= 5.29e-09  |ddm|= 5.04e-09
    CPU time for scf_cycle      0.58 sec, wall time      0.07 sec
exp = [94.76326784  4.38666133  0.3964828  30.11871358  6.1408938   0.48405998]
E = -474.8204400944054
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((6, 2))
#exps[:, 0] = decaying_nums(5)

# S
exps[0,0] = 9.5045827955887916e+01
exps[1,0] = 4.4881042475048387e+00
exps[2,0] = 3.9799528004692630e-01
             
# P          
exps[3,0] = 18.0
exps[4,0] = 8.5469650038718257e+00
exps[5,0] = 4.8929328703550412e-01

basis = "3s3p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc11947.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 24
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 18 12:43:53 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35676253.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 32000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 32000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 32000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  94.7632678415        1
[INPUT] 0    0    [1    /1   ]  4.38666133101        1
[INPUT] 0    0    [1    /1   ]  0.396482804694       1
[INPUT] 1    0    [1    /1   ]  30.1187135801        1
[INPUT] 1    0    [1    /1   ]  6.14089379507        1
[INPUT] 1    0    [1    /1   ]  0.484059981186       1

nuclear repulsion = 0
number of shells = 6
number of NR pGTOs = 12
number of NR cGTOs = 12
basis = {'Ar': [[0, [94.76326784149266, 1.0]], [0, [4.3866613310087486, 1.0]], [0, [0.3964828046940651, 1.0]], [1, [30.11871358005356, 1.0]], [1, [6.140893795067935, 1.0]], [1, [0.48405998118642823, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [94.76326784]
bas 1, expnt(s) = [4.38666133]
bas 2, expnt(s) = [0.3964828]
bas 3, expnt(s) = [30.11871358]
bas 4, expnt(s) = [6.1408938]
bas 5, expnt(s) = [0.48405998]
CPU time:        89.13
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  1  1  1  0 30 31  0]
 [ 0  1  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]]
arg.env = [  0.           0.           0.           0.           0.
   0.           0.           0.           0.           0.
   0.           0.           0.           0.           0.
   0.           0.           0.           0.           0.
   0.           0.           0.           0.          94.76326784
  76.73527356   4.38666133   7.65800427   0.3964828    1.2623602
  30.11871358 205.84006752   6.1408938   28.20160826   0.48405998
   1.17789985]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.59054493904709
cond(S) = 3.167587848836643
E1 = -663.4071025726904  E_coul = 196.82963918574308
init E= -466.577463386947
    CPU time for initialize scf      0.18 sec, wall time      0.02 sec
  HOMO = -0.606562330931716  LUMO = 27.2143373088125
  mo_energy =
[-97.48106288 -10.51876266  -9.33728956  -9.33728956  -9.33728956
  -1.18265869  -0.60656233  -0.60656233  -0.60656233  27.21433731
  27.21433731  27.21433731]
E1 = -677.6926539669907  E_coul = 202.87444427725367
cycle= 1 E= -474.818209689737  delta_E= -8.24  |g|= 0.397  |ddm|= 0.353
    CPU time for cycle= 1      0.21 sec, wall time      0.01 sec
diis-norm(errvec)=0.447743
diis-c [-0.2004741  1.       ]
  HOMO = -0.383769888665719  LUMO = 27.734308034945
  mo_energy =
[-97.04786705 -10.12011201  -8.90724965  -8.90724965  -8.90724965
  -0.93201542  -0.38376989  -0.38376989  -0.38376989  27.73430803
  27.73430803  27.73430803]
E1 = -677.4222833237885  E_coul = 202.60184975946726
cycle= 2 E= -474.820433564321  delta_E= -0.00222  |g|= 0.0223  |ddm|= 0.0239
    CPU time for cycle= 2      0.15 sec, wall time      0.01 sec
diis-norm(errvec)=0.0271299
diis-c [-7.71256430e-05  5.42313937e-02  9.45768606e-01]
  HOMO = -0.384721655199892  LUMO = 27.7092239960792
  mo_energy =
[-97.10218184 -10.13789541  -8.92442829  -8.92442829  -8.92442829
  -0.93437949  -0.38472166  -0.38472166  -0.38472166  27.709224
  27.709224    27.709224  ]
E1 = -677.4359400082471  E_coul = 202.6154999144666
cycle= 3 E= -474.820440093781  delta_E= -6.53e-06  |g|= 0.000192  |ddm|= 0.00107
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.000220926
diis-c [-1.62660009e-13 -1.26846435e-03 -2.39577112e-02  1.02522618e+00]
  HOMO = -0.384738992422424  LUMO = 27.7091516332884
  mo_energy =
[-97.10225884 -10.13798326  -8.92453365  -8.92453365  -8.92453365
  -0.9344107   -0.38473899  -0.38473899  -0.38473899  27.70915163
  27.70915163  27.70915163]
E1 = -677.4359395825104  E_coul = 202.61549948810466
cycle= 4 E= -474.820440094406  delta_E= -6.25e-10  |g|= 9.45e-08  |ddm|= 1.25e-05
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
E1 = -677.4359395825104  E_coul = 202.61549948810466
  HOMO = -0.384738983500974  LUMO = 27.7091516665837
  mo_energy =
[-97.10225871 -10.13798321  -8.92453358  -8.92453358  -8.92453358
  -0.93441069  -0.38473898  -0.38473898  -0.38473898  27.70915167
  27.70915167  27.70915167]
E1 = -677.4359395193762  E_coul = 202.6154994249708
Extra cycle  E= -474.820440094405  delta_E= 3.41e-13  |g|= 5.29e-09  |ddm|= 5.04e-09
    CPU time for scf_cycle      0.57 sec, wall time      0.07 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 3.167587848836643
E1 = -677.4359395193762  E_coul = 202.6154994249708
init E= -474.820440094405
    CPU time for initialize scf      1.07 sec, wall time      0.05 sec
  HOMO = -0.384738983692788  LUMO = 27.7091516603205
  mo_energy =
[-97.10225872 -10.13798321  -8.92453358  -8.92453358  -8.92453358
  -0.93441069  -0.38473898  -0.38473898  -0.38473898  27.70915166
  27.70915166  27.70915166]
E1 = -677.4359395229072  E_coul = 202.61549942850158
cycle= 1 E= -474.820440094406  delta_E= -2.27e-13  |g|= 2.96e-10  |ddm|= 2.81e-10
    CPU time for cycle= 1      0.20 sec, wall time      0.01 sec
E1 = -677.4359395229072  E_coul = 202.61549942850158
  HOMO = -0.384738983682109  LUMO = 27.7091516606709
  mo_energy =
[-97.10225872 -10.13798321  -8.92453358  -8.92453358  -8.92453358
  -0.93441069  -0.38473898  -0.38473898  -0.38473898  27.70915166
  27.70915166  27.70915166]
E1 = -677.4359395227096  E_coul = 202.61549942830393
Extra cycle  E= -474.820440094406  delta_E= -1.14e-13  |g|= 1.65e-11  |ddm|= 1.58e-11
    CPU time for scf_cycle      1.38 sec, wall time      0.11 sec
exp = [94.76326784  4.38666133  0.3964828  30.11871358  6.1408938   0.48405998]
grad_E = [ 0.00675833  0.00016235 -0.00169663  0.00013024  0.0015342   0.00036936]
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((6, 2))
#exps[:, 0] = decaying_nums(5)

# S
exps[0,0] = 9.5045827955887916e+01
exps[1,0] = 4.4881042475048387e+00
exps[2,0] = 3.9799528004692630e-01
             
# P          
exps[3,0] = 18.0
exps[4,0] = 8.5469650038718257e+00
exps[5,0] = 4.8929328703550412e-01

basis = "3s3p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc11947.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 24
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 18 12:43:56 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35676253.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 32000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 32000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 32000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  94.7543054488        1
[INPUT] 0    0    [1    /1   ]  4.38677324215        1
[INPUT] 0    0    [1    /1   ]  0.39639906517        1
[INPUT] 1    0    [1    /1   ]  30.1240891771        1
[INPUT] 1    0    [1    /1   ]  6.13910427029        1
[INPUT] 1    0    [1    /1   ]  0.483885345187       1

nuclear repulsion = 0
number of shells = 6
number of NR pGTOs = 12
number of NR cGTOs = 12
basis = {'Ar': [[0, [94.75430544882454, 1.0]], [0, [4.3867732421513415, 1.0]], [0, [0.39639906517045564, 1.0]], [1, [30.12408917705054, 1.0]], [1, [6.139104270287313, 1.0]], [1, [0.4838853451868235, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [94.75430545]
bas 1, expnt(s) = [4.38677324]
bas 2, expnt(s) = [0.39639907]
bas 3, expnt(s) = [30.12408918]
bas 4, expnt(s) = [6.13910427]
bas 5, expnt(s) = [0.48388535]
CPU time:        93.61
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  1  1  1  0 30 31  0]
 [ 0  1  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]]
arg.env = [  0.           0.           0.           0.           0.
   0.           0.           0.           0.           0.
   0.           0.           0.           0.           0.
   0.           0.           0.           0.           0.
   0.           0.           0.           0.          94.75430545
  76.72983047   4.38677324   7.65815079   0.39639907   1.26216023
  30.12408918 205.88599154   6.13910427  28.1913358    0.48388535
   1.17736868]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.590838589954977
cond(S) = 3.1660467083660335
E1 = -663.3990501856235  E_coul = 196.82208570278002
init E= -466.576964482844
    CPU time for initialize scf      0.18 sec, wall time      0.02 sec
  HOMO = -0.606630037652979  LUMO = 27.2115728026724
  mo_energy =
[-97.48160503 -10.51936038  -9.33800666  -9.33800666  -9.33800666
  -1.18285465  -0.60663004  -0.60663004  -0.60663004  27.2115728
  27.2115728   27.2115728 ]
E1 = -677.6708961029711  E_coul = 202.85262089041342
cycle= 1 E= -474.818275212558  delta_E= -8.24  |g|= 0.396  |ddm|= 0.353
    CPU time for cycle= 1      0.21 sec, wall time      0.01 sec
diis-norm(errvec)=0.446752
diis-c [-0.19958725  1.        ]
  HOMO = -0.384077409693659  LUMO = 27.7303006754834
  mo_energy =
[-97.05073741 -10.12169257  -8.90894019  -8.90894019  -8.90894019
  -0.93250986  -0.38407741  -0.38407741  -0.38407741  27.73030068
  27.73030068  27.73030068]
E1 = -677.4011079847651  E_coul = 202.58061816370068
cycle= 2 E= -474.820489821064  delta_E= -0.00221  |g|= 0.0223  |ddm|= 0.0238
    CPU time for cycle= 2      0.15 sec, wall time      0.01 sec
diis-norm(errvec)=0.0270834
diis-c [-7.72315708e-05  5.42427128e-02  9.45757287e-01]
  HOMO = -0.385026892387166  LUMO = 27.7052676357164
  mo_energy =
[-97.10493229 -10.13943899  -8.92608145  -8.92608145  -8.92608145
  -0.93486866  -0.38502689  -0.38502689  -0.38502689  27.70526764
  27.70526764  27.70526764]
E1 = -677.4147386856163  E_coul = 202.59424235953017
cycle= 3 E= -474.820496326086  delta_E= -6.51e-06  |g|= 0.000192  |ddm|= 0.00107
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.000220899
diis-c [-1.61647931e-13 -1.26894057e-03 -2.39473239e-02  1.02521626e+00]
  HOMO = -0.385044219826927  LUMO = 27.705195557955
  mo_energy =
[-97.10500862 -10.13952666  -8.92618664  -8.92618664  -8.92618664
  -0.93489986  -0.38504422  -0.38504422  -0.38504422  27.70519556
  27.70519556  27.70519556]
E1 = -677.4147380886837  E_coul = 202.59424176197166
cycle= 4 E= -474.820496326712  delta_E= -6.26e-10  |g|= 9.43e-08  |ddm|= 1.25e-05
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
E1 = -677.4147380886837  E_coul = 202.59424176197166
  HOMO = -0.385044210923286  LUMO = 27.7051955912711
  mo_energy =
[-97.10500849 -10.1395266   -8.92618657  -8.92618657  -8.92618657
  -0.93489984  -0.38504421  -0.38504421  -0.38504421  27.70519559
  27.70519559  27.70519559]
E1 = -677.4147380256799  E_coul = 202.5942416989677
Extra cycle  E= -474.820496326712  delta_E= -5.68e-14  |g|= 5.28e-09  |ddm|= 5.03e-09
    CPU time for scf_cycle      0.58 sec, wall time      0.07 sec
exp = [94.75430545  4.38677324  0.39639907 30.12408918  6.13910427  0.48388535]
E = -474.82049632671215
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((6, 2))
#exps[:, 0] = decaying_nums(5)

# S
exps[0,0] = 9.5045827955887916e+01
exps[1,0] = 4.4881042475048387e+00
exps[2,0] = 3.9799528004692630e-01
             
# P          
exps[3,0] = 18.0
exps[4,0] = 8.5469650038718257e+00
exps[5,0] = 4.8929328703550412e-01

basis = "3s3p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc11947.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 24
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 18 12:43:56 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35676253.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 32000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 32000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 32000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  94.7543054488        1
[INPUT] 0    0    [1    /1   ]  4.38677324215        1
[INPUT] 0    0    [1    /1   ]  0.39639906517        1
[INPUT] 1    0    [1    /1   ]  30.1240891771        1
[INPUT] 1    0    [1    /1   ]  6.13910427029        1
[INPUT] 1    0    [1    /1   ]  0.483885345187       1

nuclear repulsion = 0
number of shells = 6
number of NR pGTOs = 12
number of NR cGTOs = 12
basis = {'Ar': [[0, [94.75430544882454, 1.0]], [0, [4.3867732421513415, 1.0]], [0, [0.39639906517045564, 1.0]], [1, [30.12408917705054, 1.0]], [1, [6.139104270287313, 1.0]], [1, [0.4838853451868235, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [94.75430545]
bas 1, expnt(s) = [4.38677324]
bas 2, expnt(s) = [0.39639907]
bas 3, expnt(s) = [30.12408918]
bas 4, expnt(s) = [6.13910427]
bas 5, expnt(s) = [0.48388535]
CPU time:        94.24
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  1  1  1  0 30 31  0]
 [ 0  1  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]]
arg.env = [  0.           0.           0.           0.           0.
   0.           0.           0.           0.           0.
   0.           0.           0.           0.           0.
   0.           0.           0.           0.           0.
   0.           0.           0.           0.          94.75430545
  76.72983047   4.38677324   7.65815079   0.39639907   1.26216023
  30.12408918 205.88599154   6.13910427  28.1913358    0.48388535
   1.17736868]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.590838589954977
cond(S) = 3.1660467083660335
E1 = -663.3990501856235  E_coul = 196.82208570278002
init E= -466.576964482844
    CPU time for initialize scf      0.18 sec, wall time      0.02 sec
  HOMO = -0.606630037652979  LUMO = 27.2115728026724
  mo_energy =
[-97.48160503 -10.51936038  -9.33800666  -9.33800666  -9.33800666
  -1.18285465  -0.60663004  -0.60663004  -0.60663004  27.2115728
  27.2115728   27.2115728 ]
E1 = -677.6708961029711  E_coul = 202.85262089041342
cycle= 1 E= -474.818275212558  delta_E= -8.24  |g|= 0.396  |ddm|= 0.353
    CPU time for cycle= 1      0.21 sec, wall time      0.01 sec
diis-norm(errvec)=0.446752
diis-c [-0.19958725  1.        ]
  HOMO = -0.384077409693659  LUMO = 27.7303006754834
  mo_energy =
[-97.05073741 -10.12169257  -8.90894019  -8.90894019  -8.90894019
  -0.93250986  -0.38407741  -0.38407741  -0.38407741  27.73030068
  27.73030068  27.73030068]
E1 = -677.4011079847651  E_coul = 202.58061816370068
cycle= 2 E= -474.820489821064  delta_E= -0.00221  |g|= 0.0223  |ddm|= 0.0238
    CPU time for cycle= 2      0.15 sec, wall time      0.01 sec
diis-norm(errvec)=0.0270834
diis-c [-7.72315708e-05  5.42427128e-02  9.45757287e-01]
  HOMO = -0.385026892387166  LUMO = 27.7052676357164
  mo_energy =
[-97.10493229 -10.13943899  -8.92608145  -8.92608145  -8.92608145
  -0.93486866  -0.38502689  -0.38502689  -0.38502689  27.70526764
  27.70526764  27.70526764]
E1 = -677.4147386856163  E_coul = 202.59424235953017
cycle= 3 E= -474.820496326086  delta_E= -6.51e-06  |g|= 0.000192  |ddm|= 0.00107
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.000220899
diis-c [-1.61647931e-13 -1.26894057e-03 -2.39473239e-02  1.02521626e+00]
  HOMO = -0.385044219826927  LUMO = 27.705195557955
  mo_energy =
[-97.10500862 -10.13952666  -8.92618664  -8.92618664  -8.92618664
  -0.93489986  -0.38504422  -0.38504422  -0.38504422  27.70519556
  27.70519556  27.70519556]
E1 = -677.4147380886837  E_coul = 202.59424176197166
cycle= 4 E= -474.820496326712  delta_E= -6.26e-10  |g|= 9.43e-08  |ddm|= 1.25e-05
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
E1 = -677.4147380886837  E_coul = 202.59424176197166
  HOMO = -0.385044210923286  LUMO = 27.7051955912711
  mo_energy =
[-97.10500849 -10.1395266   -8.92618657  -8.92618657  -8.92618657
  -0.93489984  -0.38504421  -0.38504421  -0.38504421  27.70519559
  27.70519559  27.70519559]
E1 = -677.4147380256799  E_coul = 202.5942416989677
Extra cycle  E= -474.820496326712  delta_E= -5.68e-14  |g|= 5.28e-09  |ddm|= 5.03e-09
    CPU time for scf_cycle      0.57 sec, wall time      0.07 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 3.1660467083660335
E1 = -677.4147380256799  E_coul = 202.5942416989677
init E= -474.820496326712
    CPU time for initialize scf      1.07 sec, wall time      0.05 sec
  HOMO = -0.385044211114592  LUMO = 27.7051955850197
  mo_energy =
[-97.1050085  -10.13952661  -8.92618657  -8.92618657  -8.92618657
  -0.93489985  -0.38504421  -0.38504421  -0.38504421  27.70519559
  27.70519559  27.70519559]
E1 = -677.4147380292044  E_coul = 202.59424170249238
cycle= 1 E= -474.820496326712  delta_E= 1.14e-13  |g|= 2.95e-10  |ddm|= 2.81e-10
    CPU time for cycle= 1      0.20 sec, wall time      0.01 sec
E1 = -677.4147380292044  E_coul = 202.59424170249238
  HOMO = -0.385044211103927  LUMO = 27.7051955853695
  mo_energy =
[-97.1050085  -10.13952661  -8.92618657  -8.92618657  -8.92618657
  -0.93489985  -0.38504421  -0.38504421  -0.38504421  27.70519559
  27.70519559  27.70519559]
E1 = -677.4147380290073  E_coul = 202.59424170229534
Extra cycle  E= -474.820496326712  delta_E= 1.14e-13  |g|= 1.65e-11  |ddm|= 1.57e-11
    CPU time for scf_cycle      1.38 sec, wall time      0.11 sec
exp = [94.75430545  4.38677324  0.39639907 30.12408918  6.13910427  0.48388535]
grad_E = [ 0.00661152  0.0003237  -0.00350983  0.00067809 -0.00253637 -0.00456801]
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((6, 2))
#exps[:, 0] = decaying_nums(5)

# S
exps[0,0] = 9.5045827955887916e+01
exps[1,0] = 4.4881042475048387e+00
exps[2,0] = 3.9799528004692630e-01
             
# P          
exps[3,0] = 18.0
exps[4,0] = 8.5469650038718257e+00
exps[5,0] = 4.8929328703550412e-01

basis = "3s3p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc11947.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 24
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 18 12:43:59 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35676253.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 32000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 32000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 32000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  94.6852126441        1
[INPUT] 0    0    [1    /1   ]  4.3866398152         1
[INPUT] 0    0    [1    /1   ]  0.395940268423       1
[INPUT] 1    0    [1    /1   ]  30.1367583623        1
[INPUT] 1    0    [1    /1   ]  6.1320957886         1
[INPUT] 1    0    [1    /1   ]  0.483172403231       1

nuclear repulsion = 0
number of shells = 6
number of NR pGTOs = 12
number of NR cGTOs = 12
basis = {'Ar': [[0, [94.68521264409463, 1.0]], [0, [4.386639815199839, 1.0]], [0, [0.3959402684234836, 1.0]], [1, [30.136758362308694, 1.0]], [1, [6.132095788595639, 1.0]], [1, [0.48317240323132465, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [94.68521264]
bas 1, expnt(s) = [4.38663982]
bas 2, expnt(s) = [0.39594027]
bas 3, expnt(s) = [30.13675836]
bas 4, expnt(s) = [6.13209579]
bas 5, expnt(s) = [0.4831724]
CPU time:        98.71
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  1  1  1  0 30 31  0]
 [ 0  1  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]]
arg.env = [  0.           0.           0.           0.           0.
   0.           0.           0.           0.           0.
   0.           0.           0.           0.           0.
   0.           0.           0.           0.           0.
   0.           0.           0.           0.          94.68521264
  76.68786434   4.38663982   7.6579761    0.39594027   1.26106444
  30.13675836 205.99423319   6.13209579  28.15111205   0.4831724
   1.17520071]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.592047311526972
cond(S) = 3.160873386137397
E1 = -663.3606868453642  E_coul = 196.78518886563754
init E= -466.575497979727
    CPU time for initialize scf      0.18 sec, wall time      0.02 sec
  HOMO = -0.606992061564842  LUMO = 27.1936064832413
  mo_energy =
[-97.48493319 -10.52251914  -9.34120047  -9.34120047  -9.34120047
  -1.18386916  -0.60699206  -0.60699206  -0.60699206  27.19360648
  27.19360648  27.19360648]
E1 = -677.579514991466  E_coul = 202.76088943445373
cycle= 1 E= -474.818625557012  delta_E= -8.24  |g|= 0.392  |ddm|= 0.355
    CPU time for cycle= 1      0.21 sec, wall time      0.01 sec
diis-norm(errvec)=0.442961
diis-c [-0.19621455  1.        ]
  HOMO = -0.38541076691853  LUMO = 27.7075647175253
  mo_energy =
[-97.0627851  -10.12861634  -8.91588014  -8.91588014  -8.91588014
  -0.93474122  -0.38541077  -0.38541077  -0.38541077  27.70756472
  27.70756472  27.70756472]
E1 = -677.3118888278725  E_coul = 202.49108308315095
cycle= 2 E= -474.820805744722  delta_E= -0.00218  |g|= 0.0221  |ddm|= 0.0236
    CPU time for cycle= 2      0.15 sec, wall time      0.01 sec
diis-norm(errvec)=0.0269081
diis-c [-7.76833709e-05  5.42896371e-02  9.45710363e-01]
  HOMO = -0.386351807604678  LUMO = 27.6827253221482
  mo_energy =
[-97.116531   -10.14622479  -8.93288445  -8.93288445  -8.93288445
  -0.93707905  -0.38635181  -0.38635181  -0.38635181  27.68272532
  27.68272532  27.68272532]
E1 = -677.3254241057261  E_coul = 202.50461194582917
cycle= 3 E= -474.820812159897  delta_E= -6.42e-06  |g|= 0.000192  |ddm|= 0.00106
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.000220888
diis-c [-1.58238476e-13 -1.27109664e-03 -2.39102649e-02  1.02518136e+00]
  HOMO = -0.386369109651096  LUMO = 27.6826543067518
  mo_energy =
[-97.11660481 -10.1463118   -8.93298902  -8.93298902  -8.93298902
  -0.93711018  -0.38636911  -0.38636911  -0.38636911  27.68265431
  27.68265431  27.68265431]
E1 = -677.3254228293824  E_coul = 202.50461066885794
cycle= 4 E= -474.820812160524  delta_E= -6.28e-10  |g|= 9.35e-08  |ddm|= 1.26e-05
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
E1 = -677.3254228293824  E_coul = 202.50461066885794
  HOMO = -0.38636910080695  LUMO = 27.6826543401597
  mo_energy =
[-97.11660468 -10.14631175  -8.93298895  -8.93298895  -8.93298895
  -0.93711017  -0.3863691   -0.3863691   -0.3863691   27.68265434
  27.68265434  27.68265434]
E1 = -677.3254227668309  E_coul = 202.5046106063061
Extra cycle  E= -474.820812160525  delta_E= -3.41e-13  |g|= 5.25e-09  |ddm|= 4.99e-09
    CPU time for scf_cycle      0.57 sec, wall time      0.07 sec
exp = [94.68521264  4.38663982  0.39594027 30.13675836  6.13209579  0.4831724 ]
E = -474.82081216052484
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((6, 2))
#exps[:, 0] = decaying_nums(5)

# S
exps[0,0] = 9.5045827955887916e+01
exps[1,0] = 4.4881042475048387e+00
exps[2,0] = 3.9799528004692630e-01
             
# P          
exps[3,0] = 18.0
exps[4,0] = 8.5469650038718257e+00
exps[5,0] = 4.8929328703550412e-01

basis = "3s3p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc11947.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 24
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 18 12:43:59 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35676253.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 32000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 32000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 32000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  94.6852126441        1
[INPUT] 0    0    [1    /1   ]  4.3866398152         1
[INPUT] 0    0    [1    /1   ]  0.395940268423       1
[INPUT] 1    0    [1    /1   ]  30.1367583623        1
[INPUT] 1    0    [1    /1   ]  6.1320957886         1
[INPUT] 1    0    [1    /1   ]  0.483172403231       1

nuclear repulsion = 0
number of shells = 6
number of NR pGTOs = 12
number of NR cGTOs = 12
basis = {'Ar': [[0, [94.68521264409463, 1.0]], [0, [4.386639815199839, 1.0]], [0, [0.3959402684234836, 1.0]], [1, [30.136758362308694, 1.0]], [1, [6.132095788595639, 1.0]], [1, [0.48317240323132465, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [94.68521264]
bas 1, expnt(s) = [4.38663982]
bas 2, expnt(s) = [0.39594027]
bas 3, expnt(s) = [30.13675836]
bas 4, expnt(s) = [6.13209579]
bas 5, expnt(s) = [0.4831724]
CPU time:        99.34
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  1  1  1  0 30 31  0]
 [ 0  1  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]]
arg.env = [  0.           0.           0.           0.           0.
   0.           0.           0.           0.           0.
   0.           0.           0.           0.           0.
   0.           0.           0.           0.           0.
   0.           0.           0.           0.          94.68521264
  76.68786434   4.38663982   7.6579761    0.39594027   1.26106444
  30.13675836 205.99423319   6.13209579  28.15111205   0.4831724
   1.17520071]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.592047311526972
cond(S) = 3.160873386137397
E1 = -663.3606868453642  E_coul = 196.78518886563754
init E= -466.575497979727
    CPU time for initialize scf      0.18 sec, wall time      0.02 sec
  HOMO = -0.606992061564842  LUMO = 27.1936064832413
  mo_energy =
[-97.48493319 -10.52251914  -9.34120047  -9.34120047  -9.34120047
  -1.18386916  -0.60699206  -0.60699206  -0.60699206  27.19360648
  27.19360648  27.19360648]
E1 = -677.579514991466  E_coul = 202.76088943445373
cycle= 1 E= -474.818625557012  delta_E= -8.24  |g|= 0.392  |ddm|= 0.355
    CPU time for cycle= 1      0.21 sec, wall time      0.01 sec
diis-norm(errvec)=0.442961
diis-c [-0.19621455  1.        ]
  HOMO = -0.38541076691853  LUMO = 27.7075647175253
  mo_energy =
[-97.0627851  -10.12861634  -8.91588014  -8.91588014  -8.91588014
  -0.93474122  -0.38541077  -0.38541077  -0.38541077  27.70756472
  27.70756472  27.70756472]
E1 = -677.3118888278725  E_coul = 202.49108308315095
cycle= 2 E= -474.820805744722  delta_E= -0.00218  |g|= 0.0221  |ddm|= 0.0236
    CPU time for cycle= 2      0.15 sec, wall time      0.01 sec
diis-norm(errvec)=0.0269081
diis-c [-7.76833709e-05  5.42896371e-02  9.45710363e-01]
  HOMO = -0.386351807604678  LUMO = 27.6827253221482
  mo_energy =
[-97.116531   -10.14622479  -8.93288445  -8.93288445  -8.93288445
  -0.93707905  -0.38635181  -0.38635181  -0.38635181  27.68272532
  27.68272532  27.68272532]
E1 = -677.3254241057261  E_coul = 202.50461194582917
cycle= 3 E= -474.820812159897  delta_E= -6.42e-06  |g|= 0.000192  |ddm|= 0.00106
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.000220888
diis-c [-1.58238476e-13 -1.27109664e-03 -2.39102649e-02  1.02518136e+00]
  HOMO = -0.386369109651096  LUMO = 27.6826543067518
  mo_energy =
[-97.11660481 -10.1463118   -8.93298902  -8.93298902  -8.93298902
  -0.93711018  -0.38636911  -0.38636911  -0.38636911  27.68265431
  27.68265431  27.68265431]
E1 = -677.3254228293824  E_coul = 202.50461066885794
cycle= 4 E= -474.820812160524  delta_E= -6.28e-10  |g|= 9.35e-08  |ddm|= 1.26e-05
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
E1 = -677.3254228293824  E_coul = 202.50461066885794
  HOMO = -0.38636910080695  LUMO = 27.6826543401597
  mo_energy =
[-97.11660468 -10.14631175  -8.93298895  -8.93298895  -8.93298895
  -0.93711017  -0.3863691   -0.3863691   -0.3863691   27.68265434
  27.68265434  27.68265434]
E1 = -677.3254227668309  E_coul = 202.5046106063061
Extra cycle  E= -474.820812160525  delta_E= -3.41e-13  |g|= 5.25e-09  |ddm|= 4.99e-09
    CPU time for scf_cycle      0.57 sec, wall time      0.07 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 3.160873386137397
E1 = -677.3254227668309  E_coul = 202.5046106063061
init E= -474.820812160525
    CPU time for initialize scf      1.07 sec, wall time      0.05 sec
  HOMO = -0.386369100996495  LUMO = 27.6826543339499
  mo_energy =
[-97.11660469 -10.14631175  -8.93298895  -8.93298895  -8.93298895
  -0.93711017  -0.3863691   -0.3863691   -0.3863691   27.68265433
  27.68265433  27.68265433]
E1 = -677.3254227703354  E_coul = 202.50461060981067
cycle= 1 E= -474.820812160525  delta_E= 1.14e-13  |g|= 2.94e-10  |ddm|= 2.79e-10
    CPU time for cycle= 1      0.20 sec, wall time      0.01 sec
E1 = -677.3254227703354  E_coul = 202.50461060981067
  HOMO = -0.386369100985924  LUMO = 27.682654334298
  mo_energy =
[-97.11660469 -10.14631175  -8.93298895  -8.93298895  -8.93298895
  -0.93711017  -0.3863691   -0.3863691   -0.3863691   27.68265433
  27.68265433  27.68265433]
E1 = -677.3254227701385  E_coul = 202.50461060961396
Extra cycle  E= -474.820812160525  delta_E= 1.71e-13  |g|= 1.65e-11  |ddm|= 1.57e-11
    CPU time for scf_cycle      1.38 sec, wall time      0.11 sec
exp = [94.68521264  4.38663982  0.39594027 30.13675836  6.13209579  0.4831724 ]
grad_E = [ 0.00549966  0.00098835 -0.01198643  0.00250879 -0.01690825 -0.02574908]
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((6, 2))
#exps[:, 0] = decaying_nums(5)

# S
exps[0,0] = 9.5045827955887916e+01
exps[1,0] = 4.4881042475048387e+00
exps[2,0] = 3.9799528004692630e-01
             
# P          
exps[3,0] = 18.0
exps[4,0] = 8.5469650038718257e+00
exps[5,0] = 4.8929328703550412e-01

basis = "3s3p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc11947.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 24
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 18 12:44:02 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35676253.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 32000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 32000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 32000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  94.5721667375        1
[INPUT] 0    0    [1    /1   ]  4.38526893651        1
[INPUT] 0    0    [1    /1   ]  0.395608794545       1
[INPUT] 1    0    [1    /1   ]  30.1399701478        1
[INPUT] 1    0    [1    /1   ]  6.12762011364        1
[INPUT] 1    0    [1    /1   ]  0.482786060545       1

nuclear repulsion = 0
number of shells = 6
number of NR pGTOs = 12
number of NR cGTOs = 12
basis = {'Ar': [[0, [94.57216673751405, 1.0]], [0, [4.3852689365054065, 1.0]], [0, [0.3956087945450041, 1.0]], [1, [30.1399701478346, 1.0]], [1, [6.127620113636506, 1.0]], [1, [0.48278606054463885, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [94.57216674]
bas 1, expnt(s) = [4.38526894]
bas 2, expnt(s) = [0.39560879]
bas 3, expnt(s) = [30.13997015]
bas 4, expnt(s) = [6.12762011]
bas 5, expnt(s) = [0.48278606]
CPU time:       103.88
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  1  1  1  0 30 31  0]
 [ 0  1  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]]
arg.env = [  0.           0.           0.           0.           0.
   0.           0.           0.           0.           0.
   0.           0.           0.           0.           0.
   0.           0.           0.           0.           0.
   0.           0.           0.           0.          94.57216674
  76.61918511   4.38526894   7.65618112   0.39560879   1.26027255
  30.13997015 206.02167551   6.12762011  28.12543084   0.48278606
   1.17402622]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.5927591052479
cond(S) = 3.1581726991982246
E1 = -663.3296630831168  E_coul = 196.75381089379547
init E= -466.575852189321
    CPU time for initialize scf      0.19 sec, wall time      0.02 sec
  HOMO = -0.607217598022035  LUMO = 27.1776217369751
  mo_energy =
[-97.48859853 -10.52582651  -9.34359024  -9.34359024  -9.34359024
  -1.18468974  -0.6072176   -0.6072176   -0.6072176   27.17762174
  27.17762174  27.17762174]
E1 = -677.5161167573796  E_coul = 202.69706977559298
cycle= 1 E= -474.819046981787  delta_E= -8.24  |g|= 0.39  |ddm|= 0.356
    CPU time for cycle= 1      0.22 sec, wall time      0.01 sec
diis-norm(errvec)=0.440589
diis-c [-0.19411851  1.        ]
  HOMO = -0.386210958223428  LUMO = 27.6887246972133
  mo_energy =
[-97.07160467 -10.13413096  -8.92048307  -8.92048307  -8.92048307
  -0.9363072   -0.38621096  -0.38621096  -0.38621096  27.6887247
  27.6887247   27.6887247 ]
E1 = -677.2498041752755  E_coul = 202.428597912211
cycle= 2 E= -474.821206263064  delta_E= -0.00216  |g|= 0.022  |ddm|= 0.0235
    CPU time for cycle= 2      0.14 sec, wall time      0.01 sec
diis-norm(errvec)=0.0268013
diis-c [-7.79649571e-05  5.43254087e-02  9.45674591e-01]
  HOMO = -0.387147153933005  LUMO = 27.6640050584654
  mo_energy =
[-97.12507549 -10.15165227  -8.93740602  -8.93740602  -8.93740602
  -0.93863054  -0.38714715  -0.38714715  -0.38714715  27.66400506
  27.66400506  27.66400506]
E1 = -677.2632827646755  E_coul = 202.4420701395887
cycle= 3 E= -474.821212625087  delta_E= -6.36e-06  |g|= 0.000192  |ddm|= 0.00106
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.000220937
diis-c [-1.56346136e-13 -1.27280144e-03 -2.38918586e-02  1.02516466e+00]
  HOMO = -0.38716444993565  LUMO = 27.6639346492222
  mo_energy =
[-97.12514781 -10.15173893  -8.93751026  -8.93751026  -8.93751026
  -0.93866165  -0.38716445  -0.38716445  -0.38716445  27.66393465
  27.66393465  27.66393465]
E1 = -677.2632810707856  E_coul = 202.44206844506937
cycle= 4 E= -474.821212625716  delta_E= -6.29e-10  |g|= 9.31e-08  |ddm|= 1.26e-05
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
E1 = -677.2632810707856  E_coul = 202.44206844506937
  HOMO = -0.387164441122775  LUMO = 27.6639346826863
  mo_energy =
[-97.12514768 -10.15173888  -8.93751019  -8.93751019  -8.93751019
  -0.93866164  -0.38716444  -0.38716444  -0.38716444  27.66393468
  27.66393468  27.66393468]
E1 = -677.2632810084918  E_coul = 202.4420683827752
Extra cycle  E= -474.821212625717  delta_E= -3.41e-13  |g|= 5.23e-09  |ddm|= 4.97e-09
    CPU time for scf_cycle      0.58 sec, wall time      0.08 sec
exp = [94.57216674  4.38526894  0.39560879 30.13997015  6.12762011  0.48278606]
E = -474.8212126257166
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((6, 2))
#exps[:, 0] = decaying_nums(5)

# S
exps[0,0] = 9.5045827955887916e+01
exps[1,0] = 4.4881042475048387e+00
exps[2,0] = 3.9799528004692630e-01
             
# P          
exps[3,0] = 18.0
exps[4,0] = 8.5469650038718257e+00
exps[5,0] = 4.8929328703550412e-01

basis = "3s3p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc11947.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 24
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 18 12:44:02 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35676253.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 32000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 32000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 32000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  94.5721667375        1
[INPUT] 0    0    [1    /1   ]  4.38526893651        1
[INPUT] 0    0    [1    /1   ]  0.395608794545       1
[INPUT] 1    0    [1    /1   ]  30.1399701478        1
[INPUT] 1    0    [1    /1   ]  6.12762011364        1
[INPUT] 1    0    [1    /1   ]  0.482786060545       1

nuclear repulsion = 0
number of shells = 6
number of NR pGTOs = 12
number of NR cGTOs = 12
basis = {'Ar': [[0, [94.57216673751405, 1.0]], [0, [4.3852689365054065, 1.0]], [0, [0.3956087945450041, 1.0]], [1, [30.1399701478346, 1.0]], [1, [6.127620113636506, 1.0]], [1, [0.48278606054463885, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [94.57216674]
bas 1, expnt(s) = [4.38526894]
bas 2, expnt(s) = [0.39560879]
bas 3, expnt(s) = [30.13997015]
bas 4, expnt(s) = [6.12762011]
bas 5, expnt(s) = [0.48278606]
CPU time:       104.52
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  1  1  1  0 30 31  0]
 [ 0  1  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]]
arg.env = [  0.           0.           0.           0.           0.
   0.           0.           0.           0.           0.
   0.           0.           0.           0.           0.
   0.           0.           0.           0.           0.
   0.           0.           0.           0.          94.57216674
  76.61918511   4.38526894   7.65618112   0.39560879   1.26027255
  30.13997015 206.02167551   6.12762011  28.12543084   0.48278606
   1.17402622]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.5927591052479
cond(S) = 3.1581726991982246
E1 = -663.3296630831168  E_coul = 196.75381089379547
init E= -466.575852189321
    CPU time for initialize scf      0.18 sec, wall time      0.02 sec
  HOMO = -0.607217598022035  LUMO = 27.1776217369751
  mo_energy =
[-97.48859853 -10.52582651  -9.34359024  -9.34359024  -9.34359024
  -1.18468974  -0.6072176   -0.6072176   -0.6072176   27.17762174
  27.17762174  27.17762174]
E1 = -677.5161167573796  E_coul = 202.69706977559298
cycle= 1 E= -474.819046981787  delta_E= -8.24  |g|= 0.39  |ddm|= 0.356
    CPU time for cycle= 1      0.21 sec, wall time      0.01 sec
diis-norm(errvec)=0.440589
diis-c [-0.19411851  1.        ]
  HOMO = -0.386210958223428  LUMO = 27.6887246972133
  mo_energy =
[-97.07160467 -10.13413096  -8.92048307  -8.92048307  -8.92048307
  -0.9363072   -0.38621096  -0.38621096  -0.38621096  27.6887247
  27.6887247   27.6887247 ]
E1 = -677.2498041752755  E_coul = 202.428597912211
cycle= 2 E= -474.821206263064  delta_E= -0.00216  |g|= 0.022  |ddm|= 0.0235
    CPU time for cycle= 2      0.15 sec, wall time      0.01 sec
diis-norm(errvec)=0.0268013
diis-c [-7.79649571e-05  5.43254087e-02  9.45674591e-01]
  HOMO = -0.387147153933005  LUMO = 27.6640050584654
  mo_energy =
[-97.12507549 -10.15165227  -8.93740602  -8.93740602  -8.93740602
  -0.93863054  -0.38714715  -0.38714715  -0.38714715  27.66400506
  27.66400506  27.66400506]
E1 = -677.2632827646755  E_coul = 202.4420701395887
cycle= 3 E= -474.821212625087  delta_E= -6.36e-06  |g|= 0.000192  |ddm|= 0.00106
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.000220937
diis-c [-1.56346136e-13 -1.27280144e-03 -2.38918586e-02  1.02516466e+00]
  HOMO = -0.38716444993565  LUMO = 27.6639346492222
  mo_energy =
[-97.12514781 -10.15173893  -8.93751026  -8.93751026  -8.93751026
  -0.93866165  -0.38716445  -0.38716445  -0.38716445  27.66393465
  27.66393465  27.66393465]
E1 = -677.2632810707856  E_coul = 202.44206844506937
cycle= 4 E= -474.821212625716  delta_E= -6.29e-10  |g|= 9.31e-08  |ddm|= 1.26e-05
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
E1 = -677.2632810707856  E_coul = 202.44206844506937
  HOMO = -0.387164441122775  LUMO = 27.6639346826863
  mo_energy =
[-97.12514768 -10.15173888  -8.93751019  -8.93751019  -8.93751019
  -0.93866164  -0.38716444  -0.38716444  -0.38716444  27.66393468
  27.66393468  27.66393468]
E1 = -677.2632810084918  E_coul = 202.4420683827752
Extra cycle  E= -474.821212625717  delta_E= -3.41e-13  |g|= 5.23e-09  |ddm|= 4.97e-09
    CPU time for scf_cycle      0.57 sec, wall time      0.07 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 3.1581726991982246
E1 = -677.2632810084918  E_coul = 202.4420683827752
init E= -474.821212625717
    CPU time for initialize scf      1.07 sec, wall time      0.05 sec
  HOMO = -0.387164441311353  LUMO = 27.6639346765006
  mo_energy =
[-97.1251477  -10.15173888  -8.93751019  -8.93751019  -8.93751019
  -0.93866164  -0.38716444  -0.38716444  -0.38716444  27.66393468
  27.66393468  27.66393468]
E1 = -677.2632810119848  E_coul = 202.4420683862687
cycle= 1 E= -474.821212625716  delta_E= 5.68e-13  |g|= 2.93e-10  |ddm|= 2.78e-10
    CPU time for cycle= 1      0.20 sec, wall time      0.01 sec
E1 = -677.2632810119848  E_coul = 202.4420683862687
  HOMO = -0.387164441300826  LUMO = 27.6639346768477
  mo_energy =
[-97.1251477  -10.15173888  -8.93751019  -8.93751019  -8.93751019
  -0.93866164  -0.38716444  -0.38716444  -0.38716444  27.66393468
  27.66393468  27.66393468]
E1 = -677.263281011789  E_coul = 202.44206838607258
Extra cycle  E= -474.821212625716  delta_E= -3.41e-13  |g|= 1.64e-11  |ddm|= 1.56e-11
    CPU time for scf_cycle      1.39 sec, wall time      0.11 sec
exp = [94.57216674  4.38526894  0.39560879 30.13997015  6.12762011  0.48278606]
grad_E = [ 0.00369931  0.00132612 -0.01639556  0.003493   -0.02533999 -0.03753065]
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((6, 2))
#exps[:, 0] = decaying_nums(5)

# S
exps[0,0] = 9.5045827955887916e+01
exps[1,0] = 4.4881042475048387e+00
exps[2,0] = 3.9799528004692630e-01
             
# P          
exps[3,0] = 18.0
exps[4,0] = 8.5469650038718257e+00
exps[5,0] = 4.8929328703550412e-01

basis = "3s3p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc11947.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 24
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 18 12:44:05 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35676253.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 32000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 32000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 32000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  94.4076583153        1
[INPUT] 0    0    [1    /1   ]  4.38213760804        1
[INPUT] 0    0    [1    /1   ]  0.395520602068       1
[INPUT] 1    0    [1    /1   ]  30.1304687675        1
[INPUT] 1    0    [1    /1   ]  6.12860778476        1
[INPUT] 1    0    [1    /1   ]  0.482988324828       1

nuclear repulsion = 0
number of shells = 6
number of NR pGTOs = 12
number of NR cGTOs = 12
basis = {'Ar': [[0, [94.40765831529812, 1.0]], [0, [4.382137608036665, 1.0]], [0, [0.3955206020683808, 1.0]], [1, [30.130468767492975, 1.0]], [1, [6.12860778476346, 1.0]], [1, [0.48298832482796805, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [94.40765832]
bas 1, expnt(s) = [4.38213761]
bas 2, expnt(s) = [0.3955206]
bas 3, expnt(s) = [30.13046877]
bas 4, expnt(s) = [6.12860778]
bas 5, expnt(s) = [0.48298832]
CPU time:       109.01
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  1  1  1  0 30 31  0]
 [ 0  1  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]]
arg.env = [  0.           0.           0.           0.           0.
   0.           0.           0.           0.           0.
   0.           0.           0.           0.           0.
   0.           0.           0.           0.           0.
   0.           0.           0.           0.          94.40765832
  76.51920397   4.38213761   7.65208054   0.3955206    1.26006183
  30.13046877 205.94049539   6.12860778  28.13109764   0.48298832
   1.17464108]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.592549556823435
cond(S) = 3.1598360932656098
E1 = -663.3155938376589  E_coul = 196.73662545130094
init E= -466.578968386358
    CPU time for initialize scf      0.18 sec, wall time      0.02 sec
  HOMO = -0.607217459600245  LUMO = 27.1718821069556
  mo_energy =
[-97.49207677 -10.52877418  -9.34429202  -9.34429202  -9.34429202
  -1.18508284  -0.60721746  -0.60721746  -0.60721746  27.17188211
  27.17188211  27.17188211]
E1 = -677.5102813547643  E_coul = 202.69078164358973
cycle= 1 E= -474.819499711175  delta_E= -8.24  |g|= 0.391  |ddm|= 0.355
    CPU time for cycle= 1      0.21 sec, wall time      0.01 sec
diis-norm(errvec)=0.441098
diis-c [-0.19456769  1.        ]
  HOMO = -0.38603903702127  LUMO = 27.6838893316043
  mo_energy =
[-97.07327947 -10.13627488  -8.92042764  -8.92042764  -8.92042764
  -0.93654381  -0.38603904  -0.38603904  -0.38603904  27.68388933
  27.68388933  27.68388933]
E1 = -677.2436226279933  E_coul = 202.42195823134543
cycle= 2 E= -474.821664396648  delta_E= -0.00216  |g|= 0.0221  |ddm|= 0.0236
    CPU time for cycle= 2      0.15 sec, wall time      0.01 sec
diis-norm(errvec)=0.0268305
diis-c [-7.78977298e-05  5.43314082e-02  9.45668592e-01]
  HOMO = -0.386977060500195  LUMO = 27.6591411481171
  mo_energy =
[-97.12681892 -10.15381007  -8.9373768   -8.9373768   -8.9373768
  -0.93886584  -0.38697706  -0.38697706  -0.38697706  27.65914115
  27.65914115  27.65914115]
E1 = -677.2571188092691  E_coul = 202.43544803362767
cycle= 3 E= -474.821670775641  delta_E= -6.38e-06  |g|= 0.000192  |ddm|= 0.00106
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.000221042
diis-c [-1.57177267e-13 -1.27311037e-03 -2.39069251e-02  1.02518004e+00]
  HOMO = -0.386994377784311  LUMO = 27.6590704626967
  mo_energy =
[-97.12689182 -10.15389694  -8.93748125  -8.93748125  -8.93748125
  -0.93889696  -0.38699438  -0.38699438  -0.38699438  27.65907046
  27.65907046  27.65907046]
E1 = -677.2571172363556  E_coul = 202.43544646008408
cycle= 4 E= -474.821670776272  delta_E= -6.3e-10  |g|= 9.33e-08  |ddm|= 1.26e-05
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
E1 = -677.2571172363556  E_coul = 202.43544646008408
  HOMO = -0.386994368953686  LUMO = 27.6590704961461
  mo_energy =
[-97.12689169 -10.15389688  -8.93748118  -8.93748118  -8.93748118
  -0.93889695  -0.38699437  -0.38699437  -0.38699437  27.6590705
  27.6590705   27.6590705 ]
E1 = -677.2571171739636  E_coul = 202.43544639769183
Extra cycle  E= -474.821670776272  delta_E= -2.27e-13  |g|= 5.24e-09  |ddm|= 4.98e-09
    CPU time for scf_cycle      0.57 sec, wall time      0.07 sec
exp = [94.40765832  4.38213761  0.3955206  30.13046877  6.12860778  0.48298832]
E = -474.82167077627173
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((6, 2))
#exps[:, 0] = decaying_nums(5)

# S
exps[0,0] = 9.5045827955887916e+01
exps[1,0] = 4.4881042475048387e+00
exps[2,0] = 3.9799528004692630e-01
             
# P          
exps[3,0] = 18.0
exps[4,0] = 8.5469650038718257e+00
exps[5,0] = 4.8929328703550412e-01

basis = "3s3p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc11947.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 24
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 18 12:44:05 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35676253.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 32000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 32000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 32000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  94.4076583153        1
[INPUT] 0    0    [1    /1   ]  4.38213760804        1
[INPUT] 0    0    [1    /1   ]  0.395520602068       1
[INPUT] 1    0    [1    /1   ]  30.1304687675        1
[INPUT] 1    0    [1    /1   ]  6.12860778476        1
[INPUT] 1    0    [1    /1   ]  0.482988324828       1

nuclear repulsion = 0
number of shells = 6
number of NR pGTOs = 12
number of NR cGTOs = 12
basis = {'Ar': [[0, [94.40765831529812, 1.0]], [0, [4.382137608036665, 1.0]], [0, [0.3955206020683808, 1.0]], [1, [30.130468767492975, 1.0]], [1, [6.12860778476346, 1.0]], [1, [0.48298832482796805, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [94.40765832]
bas 1, expnt(s) = [4.38213761]
bas 2, expnt(s) = [0.3955206]
bas 3, expnt(s) = [30.13046877]
bas 4, expnt(s) = [6.12860778]
bas 5, expnt(s) = [0.48298832]
CPU time:       109.65
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  1  1  1  0 30 31  0]
 [ 0  1  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]]
arg.env = [  0.           0.           0.           0.           0.
   0.           0.           0.           0.           0.
   0.           0.           0.           0.           0.
   0.           0.           0.           0.           0.
   0.           0.           0.           0.          94.40765832
  76.51920397   4.38213761   7.65208054   0.3955206    1.26006183
  30.13046877 205.94049539   6.12860778  28.13109764   0.48298832
   1.17464108]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.592549556823435
cond(S) = 3.1598360932656098
E1 = -663.3155938376589  E_coul = 196.73662545130094
init E= -466.578968386358
    CPU time for initialize scf      0.18 sec, wall time      0.02 sec
  HOMO = -0.607217459600245  LUMO = 27.1718821069556
  mo_energy =
[-97.49207677 -10.52877418  -9.34429202  -9.34429202  -9.34429202
  -1.18508284  -0.60721746  -0.60721746  -0.60721746  27.17188211
  27.17188211  27.17188211]
E1 = -677.5102813547643  E_coul = 202.69078164358973
cycle= 1 E= -474.819499711175  delta_E= -8.24  |g|= 0.391  |ddm|= 0.355
    CPU time for cycle= 1      0.21 sec, wall time      0.01 sec
diis-norm(errvec)=0.441098
diis-c [-0.19456769  1.        ]
  HOMO = -0.38603903702127  LUMO = 27.6838893316043
  mo_energy =
[-97.07327947 -10.13627488  -8.92042764  -8.92042764  -8.92042764
  -0.93654381  -0.38603904  -0.38603904  -0.38603904  27.68388933
  27.68388933  27.68388933]
E1 = -677.2436226279933  E_coul = 202.42195823134543
cycle= 2 E= -474.821664396648  delta_E= -0.00216  |g|= 0.0221  |ddm|= 0.0236
    CPU time for cycle= 2      0.15 sec, wall time      0.01 sec
diis-norm(errvec)=0.0268305
diis-c [-7.78977298e-05  5.43314082e-02  9.45668592e-01]
  HOMO = -0.386977060500195  LUMO = 27.6591411481171
  mo_energy =
[-97.12681892 -10.15381007  -8.9373768   -8.9373768   -8.9373768
  -0.93886584  -0.38697706  -0.38697706  -0.38697706  27.65914115
  27.65914115  27.65914115]
E1 = -677.2571188092691  E_coul = 202.43544803362767
cycle= 3 E= -474.821670775641  delta_E= -6.38e-06  |g|= 0.000192  |ddm|= 0.00106
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.000221042
diis-c [-1.57177267e-13 -1.27311037e-03 -2.39069251e-02  1.02518004e+00]
  HOMO = -0.386994377784311  LUMO = 27.6590704626967
  mo_energy =
[-97.12689182 -10.15389694  -8.93748125  -8.93748125  -8.93748125
  -0.93889696  -0.38699438  -0.38699438  -0.38699438  27.65907046
  27.65907046  27.65907046]
E1 = -677.2571172363556  E_coul = 202.43544646008408
cycle= 4 E= -474.821670776272  delta_E= -6.3e-10  |g|= 9.33e-08  |ddm|= 1.26e-05
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
E1 = -677.2571172363556  E_coul = 202.43544646008408
  HOMO = -0.386994368953686  LUMO = 27.6590704961461
  mo_energy =
[-97.12689169 -10.15389688  -8.93748118  -8.93748118  -8.93748118
  -0.93889695  -0.38699437  -0.38699437  -0.38699437  27.6590705
  27.6590705   27.6590705 ]
E1 = -677.2571171739636  E_coul = 202.43544639769183
Extra cycle  E= -474.821670776272  delta_E= -2.27e-13  |g|= 5.24e-09  |ddm|= 4.98e-09
    CPU time for scf_cycle      0.57 sec, wall time      0.07 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 3.1598360932656098
E1 = -677.2571171739636  E_coul = 202.43544639769183
init E= -474.821670776272
    CPU time for initialize scf      1.07 sec, wall time      0.05 sec
  HOMO = -0.386994369142744  LUMO = 27.6590704899518
  mo_energy =
[-97.1268917  -10.15389689  -8.93748118  -8.93748118  -8.93748118
  -0.93889695  -0.38699437  -0.38699437  -0.38699437  27.65907049
  27.65907049  27.65907049]
E1 = -677.2571171774623  E_coul = 202.4354464011911
cycle= 1 E= -474.821670776271  delta_E= 5.12e-13  |g|= 2.94e-10  |ddm|= 2.79e-10
    CPU time for cycle= 1      0.20 sec, wall time      0.01 sec
E1 = -677.2571171774623  E_coul = 202.4354464011911
  HOMO = -0.386994369132183  LUMO = 27.6590704902994
  mo_energy =
[-97.1268917  -10.15389689  -8.93748118  -8.93748118  -8.93748118
  -0.93889695  -0.38699437  -0.38699437  -0.38699437  27.65907049
  27.65907049  27.65907049]
E1 = -677.2571171772664  E_coul = 202.43544640099452
Extra cycle  E= -474.821670776272  delta_E= -6.82e-13  |g|= 1.65e-11  |ddm|= 1.57e-11
    CPU time for scf_cycle      1.38 sec, wall time      0.11 sec
exp = [94.40765832  4.38213761  0.3955206  30.13046877  6.12860778  0.48298832]
grad_E = [ 0.00109632  0.00110186 -0.01371342  0.0029344  -0.02222633 -0.03267439]
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((6, 2))
#exps[:, 0] = decaying_nums(5)

# S
exps[0,0] = 9.5045827955887916e+01
exps[1,0] = 4.4881042475048387e+00
exps[2,0] = 3.9799528004692630e-01
             
# P          
exps[3,0] = 18.0
exps[4,0] = 8.5469650038718257e+00
exps[5,0] = 4.8929328703550412e-01

basis = "3s3p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc11947.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 24
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 18 12:44:07 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35676253.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 32000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 32000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 32000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  94.3281457757        1
[INPUT] 0    0    [1    /1   ]  4.37974889496        1
[INPUT] 0    0    [1    /1   ]  0.395779591687       1
[INPUT] 1    0    [1    /1   ]  30.1155150246        1
[INPUT] 1    0    [1    /1   ]  6.13476111399        1
[INPUT] 1    0    [1    /1   ]  0.483673001338       1

nuclear repulsion = 0
number of shells = 6
number of NR pGTOs = 12
number of NR cGTOs = 12
basis = {'Ar': [[0, [94.32814577571821, 1.0]], [0, [4.379748894958513, 1.0]], [0, [0.39577959168682736, 1.0]], [1, [30.115515024634355, 1.0]], [1, [6.134761113994021, 1.0]], [1, [0.4836730013381578, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [94.32814578]
bas 1, expnt(s) = [4.37974889]
bas 2, expnt(s) = [0.39577959]
bas 3, expnt(s) = [30.11551502]
bas 4, expnt(s) = [6.13476111]
bas 5, expnt(s) = [0.483673]
CPU time:       114.13
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  1  1  1  0 30 31  0]
 [ 0  1  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]]
arg.env = [  0.           0.           0.           0.           0.
   0.           0.           0.           0.           0.
   0.           0.           0.           0.           0.
   0.           0.           0.           0.           0.
   0.           0.           0.           0.          94.32814578
  76.47086406   4.37974889   7.64895196   0.39577959   1.2606806
  30.11551502 205.81274306   6.13476111  28.16640779   0.483673
   1.17672288]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.59149031729396
cond(S) = 3.1648524245134904
E1 = -663.3325587439351  E_coul = 196.7500413042663
init E= -466.582517439669
    CPU time for initialize scf      0.19 sec, wall time      0.02 sec
  HOMO = -0.606962601989289  LUMO = 27.1826742528584
  mo_energy =
[-97.49237427 -10.52878731  -9.34251243  -9.34251243  -9.34251243
  -1.1846648   -0.6069626   -0.6069626   -0.6069626   27.18267425
  27.18267425  27.18267425]
E1 = -677.5732253915361  E_coul = 202.75357032613087
cycle= 1 E= -474.819655065405  delta_E= -8.24  |g|= 0.394  |ddm|= 0.354
    CPU time for cycle= 1      0.21 sec, wall time      0.01 sec
diis-norm(errvec)=0.444332
diis-c [-0.19743086  1.        ]
  HOMO = -0.384928503419322  LUMO = 27.6989527751132
  mo_energy =
[-97.06567258 -10.1328536   -8.91526117  -8.91526117  -8.91526117
  -0.93510203  -0.3849285   -0.3849285   -0.3849285   27.69895278
  27.69895278  27.69895278]
E1 = -677.3046993544302  E_coul = 202.48284990716783
cycle= 2 E= -474.821849447262  delta_E= -0.00219  |g|= 0.0222  |ddm|= 0.0237
    CPU time for cycle= 2      0.15 sec, wall time      0.01 sec
diis-norm(errvec)=0.0269835
diis-c [-7.75016336e-05  5.42988995e-02  9.45701100e-01]
  HOMO = -0.38587413981613  LUMO = 27.6740379485272
  mo_energy =
[-97.11959846 -10.15050124  -8.93233189  -8.93233189  -8.93233189
  -0.93743825  -0.38587414  -0.38587414  -0.38587414  27.67403795
  27.67403795  27.67403795]
E1 = -677.3182792795285  E_coul = 202.49642337389594
cycle= 3 E= -474.821855905633  delta_E= -6.46e-06  |g|= 0.000192  |ddm|= 0.00107
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.00022111
diis-c [-1.60313046e-13 -1.27160978e-03 -2.39452649e-02  1.02521687e+00]
  HOMO = -0.385891489467003  LUMO = 27.6739662642173
  mo_energy =
[-97.11967369 -10.15058874  -8.93243695  -8.93243695  -8.93243695
  -0.93746943  -0.38589149  -0.38589149  -0.38589149  27.67396626
  27.67396626  27.67396626]
E1 = -677.3182783121126  E_coul = 202.49642240585175
cycle= 4 E= -474.821855906261  delta_E= -6.28e-10  |g|= 9.39e-08  |ddm|= 1.26e-05
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
E1 = -677.3182783121126  E_coul = 202.49642240585175
  HOMO = -0.385891480580257  LUMO = 27.6739662975843
  mo_energy =
[-97.11967356 -10.15058869  -8.93243688  -8.93243688  -8.93243688
  -0.93746942  -0.38589148  -0.38589148  -0.38589148  27.6739663
  27.6739663   27.6739663 ]
E1 = -677.3182782493194  E_coul = 202.49642234305804
Extra cycle  E= -474.821855906261  delta_E= -4.55e-13  |g|= 5.27e-09  |ddm|= 5.01e-09
    CPU time for scf_cycle      0.58 sec, wall time      0.07 sec
exp = [94.32814578  4.37974889  0.39577959 30.11551502  6.13476111  0.483673  ]
E = -474.82185590626136
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((6, 2))
#exps[:, 0] = decaying_nums(5)

# S
exps[0,0] = 9.5045827955887916e+01
exps[1,0] = 4.4881042475048387e+00
exps[2,0] = 3.9799528004692630e-01
             
# P          
exps[3,0] = 18.0
exps[4,0] = 8.5469650038718257e+00
exps[5,0] = 4.8929328703550412e-01

basis = "3s3p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc11947.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 24
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 18 12:44:08 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35676253.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 32000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 32000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 32000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  94.3281457757        1
[INPUT] 0    0    [1    /1   ]  4.37974889496        1
[INPUT] 0    0    [1    /1   ]  0.395779591687       1
[INPUT] 1    0    [1    /1   ]  30.1155150246        1
[INPUT] 1    0    [1    /1   ]  6.13476111399        1
[INPUT] 1    0    [1    /1   ]  0.483673001338       1

nuclear repulsion = 0
number of shells = 6
number of NR pGTOs = 12
number of NR cGTOs = 12
basis = {'Ar': [[0, [94.32814577571821, 1.0]], [0, [4.379748894958513, 1.0]], [0, [0.39577959168682736, 1.0]], [1, [30.115515024634355, 1.0]], [1, [6.134761113994021, 1.0]], [1, [0.4836730013381578, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [94.32814578]
bas 1, expnt(s) = [4.37974889]
bas 2, expnt(s) = [0.39577959]
bas 3, expnt(s) = [30.11551502]
bas 4, expnt(s) = [6.13476111]
bas 5, expnt(s) = [0.483673]
CPU time:       114.77
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  1  1  1  0 30 31  0]
 [ 0  1  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]]
arg.env = [  0.           0.           0.           0.           0.
   0.           0.           0.           0.           0.
   0.           0.           0.           0.           0.
   0.           0.           0.           0.           0.
   0.           0.           0.           0.          94.32814578
  76.47086406   4.37974889   7.64895196   0.39577959   1.2606806
  30.11551502 205.81274306   6.13476111  28.16640779   0.483673
   1.17672288]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.59149031729396
cond(S) = 3.1648524245134904
E1 = -663.3325587439351  E_coul = 196.7500413042663
init E= -466.582517439669
    CPU time for initialize scf      0.18 sec, wall time      0.02 sec
  HOMO = -0.606962601989289  LUMO = 27.1826742528584
  mo_energy =
[-97.49237427 -10.52878731  -9.34251243  -9.34251243  -9.34251243
  -1.1846648   -0.6069626   -0.6069626   -0.6069626   27.18267425
  27.18267425  27.18267425]
E1 = -677.5732253915361  E_coul = 202.75357032613087
cycle= 1 E= -474.819655065405  delta_E= -8.24  |g|= 0.394  |ddm|= 0.354
    CPU time for cycle= 1      0.21 sec, wall time      0.01 sec
diis-norm(errvec)=0.444332
diis-c [-0.19743086  1.        ]
  HOMO = -0.384928503419322  LUMO = 27.6989527751132
  mo_energy =
[-97.06567258 -10.1328536   -8.91526117  -8.91526117  -8.91526117
  -0.93510203  -0.3849285   -0.3849285   -0.3849285   27.69895278
  27.69895278  27.69895278]
E1 = -677.3046993544302  E_coul = 202.48284990716783
cycle= 2 E= -474.821849447262  delta_E= -0.00219  |g|= 0.0222  |ddm|= 0.0237
    CPU time for cycle= 2      0.15 sec, wall time      0.01 sec
diis-norm(errvec)=0.0269835
diis-c [-7.75016336e-05  5.42988995e-02  9.45701100e-01]
  HOMO = -0.38587413981613  LUMO = 27.6740379485272
  mo_energy =
[-97.11959846 -10.15050124  -8.93233189  -8.93233189  -8.93233189
  -0.93743825  -0.38587414  -0.38587414  -0.38587414  27.67403795
  27.67403795  27.67403795]
E1 = -677.3182792795285  E_coul = 202.49642337389594
cycle= 3 E= -474.821855905633  delta_E= -6.46e-06  |g|= 0.000192  |ddm|= 0.00107
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.00022111
diis-c [-1.60313046e-13 -1.27160978e-03 -2.39452649e-02  1.02521687e+00]
  HOMO = -0.385891489467003  LUMO = 27.6739662642173
  mo_energy =
[-97.11967369 -10.15058874  -8.93243695  -8.93243695  -8.93243695
  -0.93746943  -0.38589149  -0.38589149  -0.38589149  27.67396626
  27.67396626  27.67396626]
E1 = -677.3182783121126  E_coul = 202.49642240585175
cycle= 4 E= -474.821855906261  delta_E= -6.28e-10  |g|= 9.39e-08  |ddm|= 1.26e-05
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
E1 = -677.3182783121126  E_coul = 202.49642240585175
  HOMO = -0.385891480580257  LUMO = 27.6739662975843
  mo_energy =
[-97.11967356 -10.15058869  -8.93243688  -8.93243688  -8.93243688
  -0.93746942  -0.38589148  -0.38589148  -0.38589148  27.6739663
  27.6739663   27.6739663 ]
E1 = -677.3182782493194  E_coul = 202.49642234305804
Extra cycle  E= -474.821855906261  delta_E= -4.55e-13  |g|= 5.27e-09  |ddm|= 5.01e-09
    CPU time for scf_cycle      0.57 sec, wall time      0.07 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 3.1648524245134904
E1 = -677.3182782493194  E_coul = 202.49642234305804
init E= -474.821855906261
    CPU time for initialize scf      1.06 sec, wall time      0.05 sec
  HOMO = -0.385891480770946  LUMO = 27.673966291353
  mo_energy =
[-97.11967357 -10.15058869  -8.93243688  -8.93243688  -8.93243688
  -0.93746942  -0.38589148  -0.38589148  -0.38589148  27.67396629
  27.67396629  27.67396629]
E1 = -677.3182782528368  E_coul = 202.49642234657549
cycle= 1 E= -474.821855906261  delta_E= 1.14e-13  |g|= 2.95e-10  |ddm|= 2.8e-10
    CPU time for cycle= 1      0.20 sec, wall time      0.01 sec
E1 = -677.3182782528368  E_coul = 202.49642234657549
  HOMO = -0.385891480760308  LUMO = 27.6739662917022
  mo_energy =
[-97.11967357 -10.15058869  -8.93243688  -8.93243688  -8.93243688
  -0.93746942  -0.38589148  -0.38589148  -0.38589148  27.67396629
  27.67396629  27.67396629]
E1 = -677.3182782526392  E_coul = 202.49642234637827
Extra cycle  E= -474.821855906261  delta_E= 3.41e-13  |g|= 1.65e-11  |ddm|= 1.57e-11
    CPU time for scf_cycle      1.38 sec, wall time      0.11 sec
exp = [94.32814578  4.37974889  0.39577959 30.11551502  6.13476111  0.483673  ]
grad_E = [-0.0001467   0.00043189 -0.00546718  0.00117095 -0.00917414 -0.01338151]
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((6, 2))
#exps[:, 0] = decaying_nums(5)

# S
exps[0,0] = 9.5045827955887916e+01
exps[1,0] = 4.4881042475048387e+00
exps[2,0] = 3.9799528004692630e-01
             
# P          
exps[3,0] = 18.0
exps[4,0] = 8.5469650038718257e+00
exps[5,0] = 4.8929328703550412e-01

basis = "3s3p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc11947.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 24
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 18 12:44:10 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35676253.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 32000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 32000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 32000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  94.3274310988        1
[INPUT] 0    0    [1    /1   ]  4.37914394424        1
[INPUT] 0    0    [1    /1   ]  0.395984723185       1
[INPUT] 1    0    [1    /1   ]  30.108703181         1
[INPUT] 1    0    [1    /1   ]  6.13868178408        1
[INPUT] 1    0    [1    /1   ]  0.484073965601       1

nuclear repulsion = 0
number of shells = 6
number of NR pGTOs = 12
number of NR cGTOs = 12
basis = {'Ar': [[0, [94.32743109878705, 1.0]], [0, [4.379143944237097, 1.0]], [0, [0.39598472318545674, 1.0]], [1, [30.108703180985156, 1.0]], [1, [6.138681784077232, 1.0]], [1, [0.48407396560058075, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [94.3274311]
bas 1, expnt(s) = [4.37914394]
bas 2, expnt(s) = [0.39598472]
bas 3, expnt(s) = [30.10870318]
bas 4, expnt(s) = [6.13868178]
bas 5, expnt(s) = [0.48407397]
CPU time:       119.25
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  1  1  1  0 30 31  0]
 [ 0  1  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]]
arg.env = [  0.           0.           0.           0.           0.
   0.           0.           0.           0.           0.
   0.           0.           0.           0.           0.
   0.           0.           0.           0.           0.
   0.           0.           0.           0.          94.3274311
  76.47042952   4.37914394   7.64815956   0.39598472   1.26117063
  30.10870318 205.75455359   6.13868178  28.18891071   0.48407397
   1.17794239]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.590830763013045
cond(S) = 3.167724422476603
E1 = -663.3487244694676  E_coul = 196.76474502211465
init E= -466.583979447353
    CPU time for initialize scf      0.19 sec, wall time      0.02 sec
  HOMO = -0.606791615031989  LUMO = 27.1922685132124
  mo_energy =
[-97.49148494 -10.52784592  -9.34106551  -9.34106551  -9.34106551
  -1.18425676  -0.60679162  -0.60679162  -0.60679162  27.19226851
  27.19226851  27.19226851]
E1 = -677.6181985263556  E_coul = 202.79853338615118
cycle= 1 E= -474.819665140204  delta_E= -8.24  |g|= 0.395  |ddm|= 0.353
    CPU time for cycle= 1      0.21 sec, wall time      0.01 sec
diis-norm(errvec)=0.446375
diis-c [-0.19925038  1.        ]
  HOMO = -0.384226077132476  LUMO = 27.7111773812287
  mo_energy =
[-97.05996382 -10.12982214  -8.91174134  -8.91174134  -8.91174134
  -0.93404232  -0.38422608  -0.38422608  -0.38422608  27.71117738
  27.71117738  27.71117738]
E1 = -677.3485140916576  E_coul = 202.526635965672
cycle= 2 E= -474.821878125986  delta_E= -0.00221  |g|= 0.0223  |ddm|= 0.0238
    CPU time for cycle= 2      0.15 sec, wall time      0.01 sec
diis-norm(errvec)=0.0270779
diis-c [-7.72538624e-05  5.42734982e-02  9.45726502e-01]
  HOMO = -0.385176314189157  LUMO = 27.6861582637715
  mo_energy =
[-97.11413063 -10.14754177  -8.9288863   -8.9288863   -8.9288863
  -0.93638865  -0.38517631  -0.38517631  -0.38517631  27.68615826
  27.68615826  27.68615826]
E1 = -677.3621450197786  E_coul = 202.54026038686584
cycle= 3 E= -474.821884632913  delta_E= -6.51e-06  |g|= 0.000192  |ddm|= 0.00107
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.000221115
diis-c [-1.62189521e-13 -1.27045760e-03 -2.39655256e-02  1.02523598e+00]
  HOMO = -0.385193678110093  LUMO = 27.6860860026394
  mo_energy =
[-97.11420723 -10.14762962  -8.92899171  -8.92899171  -8.92899171
  -0.93641986  -0.38519368  -0.38519368  -0.38519368  27.686086
  27.686086    27.686086  ]
E1 = -677.3621444188159  E_coul = 202.54025978527523
cycle= 4 E= -474.821884633541  delta_E= -6.28e-10  |g|= 9.43e-08  |ddm|= 1.25e-05
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
E1 = -677.3621444188159  E_coul = 202.54025978527523
  HOMO = -0.385193669190985  LUMO = 27.6860860359538
  mo_energy =
[-97.11420709 -10.14762957  -8.92899163  -8.92899163  -8.92899163
  -0.93641985  -0.38519367  -0.38519367  -0.38519367  27.68608604
  27.68608604  27.68608604]
E1 = -677.3621443557817  E_coul = 202.5402597222411
Extra cycle  E= -474.821884633541  delta_E= 1.14e-13  |g|= 5.28e-09  |ddm|= 5.03e-09
    CPU time for scf_cycle      0.58 sec, wall time      0.07 sec
exp = [94.3274311   4.37914394  0.39598472 30.10870318  6.13868178  0.48407397]
E = -474.82188463354055
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((6, 2))
#exps[:, 0] = decaying_nums(5)

# S
exps[0,0] = 9.5045827955887916e+01
exps[1,0] = 4.4881042475048387e+00
exps[2,0] = 3.9799528004692630e-01
             
# P          
exps[3,0] = 18.0
exps[4,0] = 8.5469650038718257e+00
exps[5,0] = 4.8929328703550412e-01

basis = "3s3p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc11947.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 24
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 18 12:44:10 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35676253.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 32000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 32000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 32000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  94.3274310988        1
[INPUT] 0    0    [1    /1   ]  4.37914394424        1
[INPUT] 0    0    [1    /1   ]  0.395984723185       1
[INPUT] 1    0    [1    /1   ]  30.108703181         1
[INPUT] 1    0    [1    /1   ]  6.13868178408        1
[INPUT] 1    0    [1    /1   ]  0.484073965601       1

nuclear repulsion = 0
number of shells = 6
number of NR pGTOs = 12
number of NR cGTOs = 12
basis = {'Ar': [[0, [94.32743109878705, 1.0]], [0, [4.379143944237097, 1.0]], [0, [0.39598472318545674, 1.0]], [1, [30.108703180985156, 1.0]], [1, [6.138681784077232, 1.0]], [1, [0.48407396560058075, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [94.3274311]
bas 1, expnt(s) = [4.37914394]
bas 2, expnt(s) = [0.39598472]
bas 3, expnt(s) = [30.10870318]
bas 4, expnt(s) = [6.13868178]
bas 5, expnt(s) = [0.48407397]
CPU time:       119.89
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  1  1  1  0 30 31  0]
 [ 0  1  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]]
arg.env = [  0.           0.           0.           0.           0.
   0.           0.           0.           0.           0.
   0.           0.           0.           0.           0.
   0.           0.           0.           0.           0.
   0.           0.           0.           0.          94.3274311
  76.47042952   4.37914394   7.64815956   0.39598472   1.26117063
  30.10870318 205.75455359   6.13868178  28.18891071   0.48407397
   1.17794239]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.590830763013045
cond(S) = 3.167724422476603
E1 = -663.3487244694676  E_coul = 196.76474502211465
init E= -466.583979447353
    CPU time for initialize scf      0.18 sec, wall time      0.02 sec
  HOMO = -0.606791615031989  LUMO = 27.1922685132124
  mo_energy =
[-97.49148494 -10.52784592  -9.34106551  -9.34106551  -9.34106551
  -1.18425676  -0.60679162  -0.60679162  -0.60679162  27.19226851
  27.19226851  27.19226851]
E1 = -677.6181985263556  E_coul = 202.79853338615118
cycle= 1 E= -474.819665140204  delta_E= -8.24  |g|= 0.395  |ddm|= 0.353
    CPU time for cycle= 1      0.21 sec, wall time      0.01 sec
diis-norm(errvec)=0.446375
diis-c [-0.19925038  1.        ]
  HOMO = -0.384226077132476  LUMO = 27.7111773812287
  mo_energy =
[-97.05996382 -10.12982214  -8.91174134  -8.91174134  -8.91174134
  -0.93404232  -0.38422608  -0.38422608  -0.38422608  27.71117738
  27.71117738  27.71117738]
E1 = -677.3485140916576  E_coul = 202.526635965672
cycle= 2 E= -474.821878125986  delta_E= -0.00221  |g|= 0.0223  |ddm|= 0.0238
    CPU time for cycle= 2      0.15 sec, wall time      0.01 sec
diis-norm(errvec)=0.0270779
diis-c [-7.72538624e-05  5.42734982e-02  9.45726502e-01]
  HOMO = -0.385176314189157  LUMO = 27.6861582637715
  mo_energy =
[-97.11413063 -10.14754177  -8.9288863   -8.9288863   -8.9288863
  -0.93638865  -0.38517631  -0.38517631  -0.38517631  27.68615826
  27.68615826  27.68615826]
E1 = -677.3621450197786  E_coul = 202.54026038686584
cycle= 3 E= -474.821884632913  delta_E= -6.51e-06  |g|= 0.000192  |ddm|= 0.00107
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.000221115
diis-c [-1.62189521e-13 -1.27045760e-03 -2.39655256e-02  1.02523598e+00]
  HOMO = -0.385193678110093  LUMO = 27.6860860026394
  mo_energy =
[-97.11420723 -10.14762962  -8.92899171  -8.92899171  -8.92899171
  -0.93641986  -0.38519368  -0.38519368  -0.38519368  27.686086
  27.686086    27.686086  ]
E1 = -677.3621444188159  E_coul = 202.54025978527523
cycle= 4 E= -474.821884633541  delta_E= -6.28e-10  |g|= 9.43e-08  |ddm|= 1.25e-05
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
E1 = -677.3621444188159  E_coul = 202.54025978527523
  HOMO = -0.385193669190985  LUMO = 27.6860860359538
  mo_energy =
[-97.11420709 -10.14762957  -8.92899163  -8.92899163  -8.92899163
  -0.93641985  -0.38519367  -0.38519367  -0.38519367  27.68608604
  27.68608604  27.68608604]
E1 = -677.3621443557817  E_coul = 202.5402597222411
Extra cycle  E= -474.821884633541  delta_E= 1.14e-13  |g|= 5.28e-09  |ddm|= 5.03e-09
    CPU time for scf_cycle      0.57 sec, wall time      0.07 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 3.167724422476603
E1 = -677.3621443557817  E_coul = 202.5402597222411
init E= -474.821884633541
    CPU time for initialize scf      1.06 sec, wall time      0.05 sec
  HOMO = -0.38519366938265  LUMO = 27.6860860297002
  mo_energy =
[-97.11420711 -10.14762957  -8.92899164  -8.92899164  -8.92899164
  -0.93641985  -0.38519367  -0.38519367  -0.38519367  27.68608603
  27.68608603  27.68608603]
E1 = -677.3621443593094  E_coul = 202.54025972576895
cycle= 1 E= -474.82188463354  delta_E= 1.14e-13  |g|= 2.96e-10  |ddm|= 2.81e-10
    CPU time for cycle= 1      0.20 sec, wall time      0.01 sec
E1 = -677.3621443593094  E_coul = 202.54025972576895
  HOMO = -0.385193669371973  LUMO = 27.6860860300503
  mo_energy =
[-97.11420711 -10.14762957  -8.92899164  -8.92899164  -8.92899164
  -0.93641985  -0.38519367  -0.38519367  -0.38519367  27.68608603
  27.68608603  27.68608603]
E1 = -677.3621443591127  E_coul = 202.54025972557164
Extra cycle  E= -474.821884633541  delta_E= -5.68e-13  |g|= 1.66e-11  |ddm|= 1.58e-11
    CPU time for scf_cycle      1.38 sec, wall time      0.11 sec
exp = [94.3274311   4.37914394  0.39598472 30.10870318  6.13868178  0.48407397]
grad_E = [-1.46141208e-04  5.55925937e-05 -7.24741881e-04  1.52721100e-04
 -1.27934278e-03 -1.85052626e-03]
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((6, 2))
#exps[:, 0] = decaying_nums(5)

# S
exps[0,0] = 9.5045827955887916e+01
exps[1,0] = 4.4881042475048387e+00
exps[2,0] = 3.9799528004692630e-01
             
# P          
exps[3,0] = 18.0
exps[4,0] = 8.5469650038718257e+00
exps[5,0] = 4.8929328703550412e-01

basis = "3s3p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc11947.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 24
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 18 12:44:13 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35676253.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 32000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 32000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 32000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  94.335163035         1
[INPUT] 0    0    [1    /1   ]  4.37918509291        1
[INPUT] 0    0    [1    /1   ]  0.396025801616       1
[INPUT] 1    0    [1    /1   ]  30.1081167801        1
[INPUT] 1    0    [1    /1   ]  6.13936219944        1
[INPUT] 1    0    [1    /1   ]  0.484136715333       1

nuclear repulsion = 0
number of shells = 6
number of NR pGTOs = 12
number of NR cGTOs = 12
basis = {'Ar': [[0, [94.33516303496562, 1.0]], [0, [4.379185092908072, 1.0]], [0, [0.39602580161566125, 1.0]], [1, [30.108116780088253, 1.0]], [1, [6.1393621994392475, 1.0]], [1, [0.4841367153332504, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [94.33516303]
bas 1, expnt(s) = [4.37918509]
bas 2, expnt(s) = [0.3960258]
bas 3, expnt(s) = [30.10811678]
bas 4, expnt(s) = [6.1393622]
bas 5, expnt(s) = [0.48413672]
CPU time:       124.41
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  1  1  1  0 30 31  0]
 [ 0  1  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]]
arg.env = [  0.           0.           0.           0.           0.
   0.           0.           0.           0.           0.
   0.           0.           0.           0.           0.
   0.           0.           0.           0.           0.
   0.           0.           0.           0.          94.33516303
  76.47513063   4.37918509   7.64821346   0.3960258    1.26126875
  30.10811678 205.74954448   6.1393622   28.19281635   0.48413672
   1.17813326]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.590720971608246
cond(S) = 3.168151784492248
E1 = -663.3523413766504  E_coul = 196.76822688573782
init E= -466.584114490913
    CPU time for initialize scf      0.19 sec, wall time      0.02 sec
  HOMO = -0.606761456946976  LUMO = 27.1944825177941
  mo_energy =
[-97.49116183 -10.52753632  -9.34077025  -9.34077025  -9.34077025
  -1.18416509  -0.60676146  -0.60676146  -0.60676146  27.19448252
  27.19448252  27.19448252]
E1 = -677.6266542345177  E_coul = 202.80699101021227
cycle= 1 E= -474.819663224305  delta_E= -8.24  |g|= 0.396  |ddm|= 0.353
    CPU time for cycle= 1      0.21 sec, wall time      0.01 sec
diis-norm(errvec)=0.446722
diis-c [-0.19956025  1.        ]
  HOMO = -0.384107530514608  LUMO = 27.713826788713
  mo_energy =
[-97.05885255 -10.12917095  -8.91110557  -8.91110557  -8.91110557
  -0.93383962  -0.38410753  -0.38410753  -0.38410753  27.71382679
  27.71382679  27.71382679]
E1 = -677.3567779991085  E_coul = 202.53489867970083
cycle= 2 E= -474.821879319408  delta_E= -0.00222  |g|= 0.0223  |ddm|= 0.0238
    CPU time for cycle= 2      0.15 sec, wall time      0.01 sec
diis-norm(errvec)=0.0270935
diis-c [-7.72115784e-05  5.42682997e-02  9.45731700e-01]
  HOMO = -0.385058504788392  LUMO = 27.688790151428
  mo_energy =
[-97.11305954 -10.14690285  -8.92826261  -8.92826261  -8.92826261
  -0.93618782  -0.3850585   -0.3850585   -0.3850585   27.68879015
  27.68879015  27.68879015]
E1 = -677.3704171851698  E_coul = 202.54853135093484
cycle= 3 E= -474.821885834235  delta_E= -6.51e-06  |g|= 0.000192  |ddm|= 0.00107
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.000221108
diis-c [-1.62465885e-13 -1.27022054e-03 -2.39682792e-02  1.02523850e+00]
  HOMO = -0.385075869901469  LUMO = 27.6887178014229
  mo_energy =
[-97.11313635 -10.14699075  -8.92836807  -8.92836807  -8.92836807
  -0.93621903  -0.38507587  -0.38507587  -0.38507587  27.6887178
  27.6887178   27.6887178 ]
E1 = -677.370416644322  E_coul = 202.5485308094598
cycle= 4 E= -474.821885834862  delta_E= -6.27e-10  |g|= 9.44e-08  |ddm|= 1.25e-05
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
E1 = -677.370416644322  E_coul = 202.5485308094598
  HOMO = -0.385075860977563  LUMO = 27.6887178347282
  mo_energy =
[-97.11313622 -10.1469907   -8.928368    -8.928368    -8.928368
  -0.93621902  -0.38507586  -0.38507586  -0.38507586  27.68871783
  27.68871783  27.68871783]
E1 = -677.3704165812496  E_coul = 202.5485307463878
Extra cycle  E= -474.821885834862  delta_E= 2.84e-13  |g|= 5.29e-09  |ddm|= 5.03e-09
    CPU time for scf_cycle      0.58 sec, wall time      0.07 sec
exp = [94.33516303  4.37918509  0.3960258  30.10811678  6.1393622   0.48413672]
E = -474.82188583486186
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((6, 2))
#exps[:, 0] = decaying_nums(5)

# S
exps[0,0] = 9.5045827955887916e+01
exps[1,0] = 4.4881042475048387e+00
exps[2,0] = 3.9799528004692630e-01
             
# P          
exps[3,0] = 18.0
exps[4,0] = 8.5469650038718257e+00
exps[5,0] = 4.8929328703550412e-01

basis = "3s3p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc11947.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 24
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 18 12:44:13 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35676253.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 32000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 32000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 32000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  94.335163035         1
[INPUT] 0    0    [1    /1   ]  4.37918509291        1
[INPUT] 0    0    [1    /1   ]  0.396025801616       1
[INPUT] 1    0    [1    /1   ]  30.1081167801        1
[INPUT] 1    0    [1    /1   ]  6.13936219944        1
[INPUT] 1    0    [1    /1   ]  0.484136715333       1

nuclear repulsion = 0
number of shells = 6
number of NR pGTOs = 12
number of NR cGTOs = 12
basis = {'Ar': [[0, [94.33516303496562, 1.0]], [0, [4.379185092908072, 1.0]], [0, [0.39602580161566125, 1.0]], [1, [30.108116780088253, 1.0]], [1, [6.1393621994392475, 1.0]], [1, [0.4841367153332504, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [94.33516303]
bas 1, expnt(s) = [4.37918509]
bas 2, expnt(s) = [0.3960258]
bas 3, expnt(s) = [30.10811678]
bas 4, expnt(s) = [6.1393622]
bas 5, expnt(s) = [0.48413672]
CPU time:       125.05
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  1  1  1  0 30 31  0]
 [ 0  1  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]]
arg.env = [  0.           0.           0.           0.           0.
   0.           0.           0.           0.           0.
   0.           0.           0.           0.           0.
   0.           0.           0.           0.           0.
   0.           0.           0.           0.          94.33516303
  76.47513063   4.37918509   7.64821346   0.3960258    1.26126875
  30.10811678 205.74954448   6.1393622   28.19281635   0.48413672
   1.17813326]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.590720971608246
cond(S) = 3.168151784492248
E1 = -663.3523413766504  E_coul = 196.76822688573782
init E= -466.584114490913
    CPU time for initialize scf      0.18 sec, wall time      0.02 sec
  HOMO = -0.606761456946976  LUMO = 27.1944825177941
  mo_energy =
[-97.49116183 -10.52753632  -9.34077025  -9.34077025  -9.34077025
  -1.18416509  -0.60676146  -0.60676146  -0.60676146  27.19448252
  27.19448252  27.19448252]
E1 = -677.6266542345177  E_coul = 202.80699101021227
cycle= 1 E= -474.819663224305  delta_E= -8.24  |g|= 0.396  |ddm|= 0.353
    CPU time for cycle= 1      0.21 sec, wall time      0.01 sec
diis-norm(errvec)=0.446722
diis-c [-0.19956025  1.        ]
  HOMO = -0.384107530514608  LUMO = 27.713826788713
  mo_energy =
[-97.05885255 -10.12917095  -8.91110557  -8.91110557  -8.91110557
  -0.93383962  -0.38410753  -0.38410753  -0.38410753  27.71382679
  27.71382679  27.71382679]
E1 = -677.3567779991085  E_coul = 202.53489867970083
cycle= 2 E= -474.821879319408  delta_E= -0.00222  |g|= 0.0223  |ddm|= 0.0238
    CPU time for cycle= 2      0.15 sec, wall time      0.01 sec
diis-norm(errvec)=0.0270935
diis-c [-7.72115784e-05  5.42682997e-02  9.45731700e-01]
  HOMO = -0.385058504788392  LUMO = 27.688790151428
  mo_energy =
[-97.11305954 -10.14690285  -8.92826261  -8.92826261  -8.92826261
  -0.93618782  -0.3850585   -0.3850585   -0.3850585   27.68879015
  27.68879015  27.68879015]
E1 = -677.3704171851698  E_coul = 202.54853135093484
cycle= 3 E= -474.821885834235  delta_E= -6.51e-06  |g|= 0.000192  |ddm|= 0.00107
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.000221108
diis-c [-1.62465885e-13 -1.27022054e-03 -2.39682792e-02  1.02523850e+00]
  HOMO = -0.385075869901469  LUMO = 27.6887178014229
  mo_energy =
[-97.11313635 -10.14699075  -8.92836807  -8.92836807  -8.92836807
  -0.93621903  -0.38507587  -0.38507587  -0.38507587  27.6887178
  27.6887178   27.6887178 ]
E1 = -677.370416644322  E_coul = 202.5485308094598
cycle= 4 E= -474.821885834862  delta_E= -6.27e-10  |g|= 9.44e-08  |ddm|= 1.25e-05
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
E1 = -677.370416644322  E_coul = 202.5485308094598
  HOMO = -0.385075860977563  LUMO = 27.6887178347282
  mo_energy =
[-97.11313622 -10.1469907   -8.928368    -8.928368    -8.928368
  -0.93621902  -0.38507586  -0.38507586  -0.38507586  27.68871783
  27.68871783  27.68871783]
E1 = -677.3704165812496  E_coul = 202.5485307463878
Extra cycle  E= -474.821885834862  delta_E= 2.84e-13  |g|= 5.29e-09  |ddm|= 5.03e-09
    CPU time for scf_cycle      0.57 sec, wall time      0.07 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 3.168151784492248
E1 = -677.3704165812496  E_coul = 202.5485307463878
init E= -474.821885834862
    CPU time for initialize scf      1.07 sec, wall time      0.05 sec
  HOMO = -0.385075861169372  LUMO = 27.688717828471
  mo_energy =
[-97.11313623 -10.14699071  -8.928368    -8.928368    -8.928368
  -0.93621902  -0.38507586  -0.38507586  -0.38507586  27.68871783
  27.68871783  27.68871783]
E1 = -677.3704165847796  E_coul = 202.54853074991766
cycle= 1 E= -474.821885834862  delta_E= -1.14e-13  |g|= 2.96e-10  |ddm|= 2.81e-10
    CPU time for cycle= 1      0.20 sec, wall time      0.01 sec
E1 = -677.3704165847796  E_coul = 202.54853074991766
  HOMO = -0.38507586115868  LUMO = 27.6887178288213
  mo_energy =
[-97.11313623 -10.14699071  -8.928368    -8.928368    -8.928368
  -0.93621902  -0.38507586  -0.38507586  -0.38507586  27.68871783
  27.68871783  27.68871783]
E1 = -677.3704165845824  E_coul = 202.54853074972007
Extra cycle  E= -474.821885834862  delta_E= -3.41e-13  |g|= 1.66e-11  |ddm|= 1.58e-11
    CPU time for scf_cycle      1.39 sec, wall time      0.11 sec
exp = [94.33516303  4.37918509  0.3960258  30.10811678  6.1393622   0.48413672]
grad_E = [-2.13136107e-05 -3.24152346e-07  1.04157137e-06 -1.13583628e-06
 -6.37105958e-06 -1.07710341e-05]
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((6, 2))
#exps[:, 0] = decaying_nums(5)

# S
exps[0,0] = 9.5045827955887916e+01
exps[1,0] = 4.4881042475048387e+00
exps[2,0] = 3.9799528004692630e-01
             
# P          
exps[3,0] = 18.0
exps[4,0] = 8.5469650038718257e+00
exps[5,0] = 4.8929328703550412e-01

basis = "3s3p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc11947.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 24
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 18 12:44:16 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35676253.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 32000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 32000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 32000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  94.3364487288        1
[INPUT] 0    0    [1    /1   ]  4.37920657554        1
[INPUT] 0    0    [1    /1   ]  0.396027546138       1
[INPUT] 1    0    [1    /1   ]  30.1081992808        1
[INPUT] 1    0    [1    /1   ]  6.13937813256        1
[INPUT] 1    0    [1    /1   ]  0.484137240805       1

nuclear repulsion = 0
number of shells = 6
number of NR pGTOs = 12
number of NR cGTOs = 12
basis = {'Ar': [[0, [94.33644872882927, 1.0]], [0, [4.37920657553923, 1.0]], [0, [0.39602754613751207, 1.0]], [1, [30.108199280832128, 1.0]], [1, [6.139378132559045, 1.0]], [1, [0.48413724080496556, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [94.33644873]
bas 1, expnt(s) = [4.37920658]
bas 2, expnt(s) = [0.39602755]
bas 3, expnt(s) = [30.10819928]
bas 4, expnt(s) = [6.13937813]
bas 5, expnt(s) = [0.48413724]
CPU time:       129.56
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  1  1  1  0 30 31  0]
 [ 0  1  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]]
arg.env = [  0.           0.           0.           0.           0.
   0.           0.           0.           0.           0.
   0.           0.           0.           0.           0.
   0.           0.           0.           0.           0.
   0.           0.           0.           0.          94.33644873
  76.47591234   4.37920658   7.6482416    0.39602755   1.26127292
  30.10819928 205.75024921   6.13937813  28.19290781   0.48413724
   1.17813486]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.590719088878437
cond(S) = 3.168150445655092
E1 = -663.35254205303  E_coul = 196.76844050758584
init E= -466.584101545444
    CPU time for initialize scf      0.18 sec, wall time      0.02 sec
  HOMO = -0.60676063662677  LUMO = 27.1946210985136
  mo_energy =
[-97.49113008 -10.52750846  -9.34075721  -9.34075721  -9.34075721
  -1.18415995  -0.60676064  -0.60676064  -0.60676064  27.1946211
  27.1946211   27.1946211 ]
E1 = -677.6269421686442  E_coul = 202.80727898163707
cycle= 1 E= -474.819663187007  delta_E= -8.24  |g|= 0.396  |ddm|= 0.353
    CPU time for cycle= 1      0.21 sec, wall time      0.01 sec
diis-norm(errvec)=0.446729
diis-c [-0.19956636  1.        ]
  HOMO = -0.384105209540408  LUMO = 27.7139723251714
  mo_energy =
[-97.05880985 -10.1291383   -8.91108748  -8.91108748  -8.91108748
  -0.93383221  -0.38410521  -0.38410521  -0.38410521  27.71397233
  27.71397233  27.71397233]
E1 = -677.3570629704737  E_coul = 202.5351836368315
cycle= 2 E= -474.821879333642  delta_E= -0.00222  |g|= 0.0223  |ddm|= 0.0238
    CPU time for cycle= 2      0.15 sec, wall time      0.01 sec
diis-norm(errvec)=0.0270937
diis-c [-7.72106295e-05  5.42680693e-02  9.45731931e-01]
  HOMO = -0.385056191347871  LUMO = 27.688935371858
  mo_energy =
[-97.11301751 -10.14687044  -8.92824468  -8.92824468  -8.92824468
  -0.93618047  -0.38505619  -0.38505619  -0.38505619  27.68893537
  27.68893537  27.68893537]
E1 = -677.3707022556597  E_coul = 202.54881640709175
cycle= 3 E= -474.821885848568  delta_E= -6.51e-06  |g|= 0.000192  |ddm|= 0.00107
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.000221106
diis-c [-1.62469716e-13 -1.27020939e-03 -2.39682363e-02  1.02523845e+00]
  HOMO = -0.385073556291166  LUMO = 27.6888630213542
  mo_energy =
[-97.11309433 -10.14695834  -8.92835013  -8.92835013  -8.92835013
  -0.93621169  -0.38507356  -0.38507356  -0.38507356  27.68886302
  27.68886302  27.68886302]
E1 = -677.3707017157844  E_coul = 202.5488158665892
cycle= 4 E= -474.821885849195  delta_E= -6.27e-10  |g|= 9.44e-08  |ddm|= 1.25e-05
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
E1 = -677.3707017157844  E_coul = 202.5488158665892
  HOMO = -0.385073547367296  LUMO = 27.6888630546593
  mo_energy =
[-97.11309419 -10.14695829  -8.92835006  -8.92835006  -8.92835006
  -0.93621168  -0.38507355  -0.38507355  -0.38507355  27.68886305
  27.68886305  27.68886305]
E1 = -677.3707016527126  E_coul = 202.54881580351736
Extra cycle  E= -474.821885849195  delta_E= 5.68e-14  |g|= 5.29e-09  |ddm|= 5.03e-09
    CPU time for scf_cycle      0.58 sec, wall time      0.07 sec
exp = [94.33644873  4.37920658  0.39602755 30.10819928  6.13937813  0.48413724]
E = -474.8218858491952
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((6, 2))
#exps[:, 0] = decaying_nums(5)

# S
exps[0,0] = 9.5045827955887916e+01
exps[1,0] = 4.4881042475048387e+00
exps[2,0] = 3.9799528004692630e-01
             
# P          
exps[3,0] = 18.0
exps[4,0] = 8.5469650038718257e+00
exps[5,0] = 4.8929328703550412e-01

basis = "3s3p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc11947.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 24
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 18 12:44:16 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35676253.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 32000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 32000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 32000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  94.3364487288        1
[INPUT] 0    0    [1    /1   ]  4.37920657554        1
[INPUT] 0    0    [1    /1   ]  0.396027546138       1
[INPUT] 1    0    [1    /1   ]  30.1081992808        1
[INPUT] 1    0    [1    /1   ]  6.13937813256        1
[INPUT] 1    0    [1    /1   ]  0.484137240805       1

nuclear repulsion = 0
number of shells = 6
number of NR pGTOs = 12
number of NR cGTOs = 12
basis = {'Ar': [[0, [94.33644872882927, 1.0]], [0, [4.37920657553923, 1.0]], [0, [0.39602754613751207, 1.0]], [1, [30.108199280832128, 1.0]], [1, [6.139378132559045, 1.0]], [1, [0.48413724080496556, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [94.33644873]
bas 1, expnt(s) = [4.37920658]
bas 2, expnt(s) = [0.39602755]
bas 3, expnt(s) = [30.10819928]
bas 4, expnt(s) = [6.13937813]
bas 5, expnt(s) = [0.48413724]
CPU time:       130.21
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  1  1  1  0 30 31  0]
 [ 0  1  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]]
arg.env = [  0.           0.           0.           0.           0.
   0.           0.           0.           0.           0.
   0.           0.           0.           0.           0.
   0.           0.           0.           0.           0.
   0.           0.           0.           0.          94.33644873
  76.47591234   4.37920658   7.6482416    0.39602755   1.26127292
  30.10819928 205.75024921   6.13937813  28.19290781   0.48413724
   1.17813486]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.590719088878437
cond(S) = 3.168150445655092
E1 = -663.35254205303  E_coul = 196.76844050758584
init E= -466.584101545444
    CPU time for initialize scf      0.18 sec, wall time      0.02 sec
  HOMO = -0.60676063662677  LUMO = 27.1946210985136
  mo_energy =
[-97.49113008 -10.52750846  -9.34075721  -9.34075721  -9.34075721
  -1.18415995  -0.60676064  -0.60676064  -0.60676064  27.1946211
  27.1946211   27.1946211 ]
E1 = -677.6269421686442  E_coul = 202.80727898163707
cycle= 1 E= -474.819663187007  delta_E= -8.24  |g|= 0.396  |ddm|= 0.353
    CPU time for cycle= 1      0.21 sec, wall time      0.01 sec
diis-norm(errvec)=0.446729
diis-c [-0.19956636  1.        ]
  HOMO = -0.384105209540408  LUMO = 27.7139723251714
  mo_energy =
[-97.05880985 -10.1291383   -8.91108748  -8.91108748  -8.91108748
  -0.93383221  -0.38410521  -0.38410521  -0.38410521  27.71397233
  27.71397233  27.71397233]
E1 = -677.3570629704737  E_coul = 202.5351836368315
cycle= 2 E= -474.821879333642  delta_E= -0.00222  |g|= 0.0223  |ddm|= 0.0238
    CPU time for cycle= 2      0.15 sec, wall time      0.01 sec
diis-norm(errvec)=0.0270937
diis-c [-7.72106295e-05  5.42680693e-02  9.45731931e-01]
  HOMO = -0.385056191347871  LUMO = 27.688935371858
  mo_energy =
[-97.11301751 -10.14687044  -8.92824468  -8.92824468  -8.92824468
  -0.93618047  -0.38505619  -0.38505619  -0.38505619  27.68893537
  27.68893537  27.68893537]
E1 = -677.3707022556597  E_coul = 202.54881640709175
cycle= 3 E= -474.821885848568  delta_E= -6.51e-06  |g|= 0.000192  |ddm|= 0.00107
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.000221106
diis-c [-1.62469716e-13 -1.27020939e-03 -2.39682363e-02  1.02523845e+00]
  HOMO = -0.385073556291166  LUMO = 27.6888630213542
  mo_energy =
[-97.11309433 -10.14695834  -8.92835013  -8.92835013  -8.92835013
  -0.93621169  -0.38507356  -0.38507356  -0.38507356  27.68886302
  27.68886302  27.68886302]
E1 = -677.3707017157844  E_coul = 202.5488158665892
cycle= 4 E= -474.821885849195  delta_E= -6.27e-10  |g|= 9.44e-08  |ddm|= 1.25e-05
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
E1 = -677.3707017157844  E_coul = 202.5488158665892
  HOMO = -0.385073547367296  LUMO = 27.6888630546593
  mo_energy =
[-97.11309419 -10.14695829  -8.92835006  -8.92835006  -8.92835006
  -0.93621168  -0.38507355  -0.38507355  -0.38507355  27.68886305
  27.68886305  27.68886305]
E1 = -677.3707016527126  E_coul = 202.54881580351736
Extra cycle  E= -474.821885849195  delta_E= 5.68e-14  |g|= 5.29e-09  |ddm|= 5.03e-09
    CPU time for scf_cycle      0.57 sec, wall time      0.07 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 3.168150445655092
E1 = -677.3707016527126  E_coul = 202.54881580351736
init E= -474.821885849195
    CPU time for initialize scf      1.07 sec, wall time      0.05 sec
  HOMO = -0.385073547559087  LUMO = 27.6888630484021
  mo_energy =
[-97.11309421 -10.14695829  -8.92835007  -8.92835007  -8.92835007
  -0.93621168  -0.38507355  -0.38507355  -0.38507355  27.68886305
  27.68886305  27.68886305]
E1 = -677.3707016562423  E_coul = 202.54881580704705
cycle= 1 E= -474.821885849195  delta_E= -5.68e-14  |g|= 2.96e-10  |ddm|= 2.81e-10
    CPU time for cycle= 1      0.20 sec, wall time      0.01 sec
E1 = -677.3707016562423  E_coul = 202.54881580704705
  HOMO = -0.385073547548396  LUMO = 27.6888630487524
  mo_energy =
[-97.11309421 -10.14695829  -8.92835007  -8.92835007  -8.92835007
  -0.93621168  -0.38507355  -0.38507355  -0.38507355  27.68886305
  27.68886305  27.68886305]
E1 = -677.3707016560447  E_coul = 202.5488158068493
Extra cycle  E= -474.821885849195  delta_E= -1.71e-13  |g|= 1.66e-11  |ddm|= 1.58e-11
    CPU time for scf_cycle      1.39 sec, wall time      0.11 sec
exp = [94.33644873  4.37920658  0.39602755 30.10819928  6.13937813  0.48413724]
grad_E = [-8.50935311e-07 -3.86498842e-07  4.61045654e-06 -1.06662058e-06
  7.48458875e-06  1.07456765e-05]
 message: Optimization terminated successfully
 success: True
  status: 0
     fun: -474.8218858491952
       x: [ 9.434e+01  4.379e+00  3.960e-01  3.011e+01  6.139e+00
            4.841e-01]
     nit: 21
     jac: [-8.509e-07 -3.865e-07  4.610e-06 -1.067e-06  7.485e-06
            1.075e-05]
    nfev: 26
    njev: 21
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((6, 2))
#exps[:, 0] = decaying_nums(5)

# S
exps[0,0] = 9.5045827955887916e+01
exps[1,0] = 4.4881042475048387e+00
exps[2,0] = 3.9799528004692630e-01
             
# P          
exps[3,0] = 18.0
exps[4,0] = 8.5469650038718257e+00
exps[5,0] = 4.8929328703550412e-01

basis = "3s3p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc11947.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 24
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 18 12:44:19 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35676253.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 32000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 32000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 32000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  94.3364487288        1
[INPUT] 0    0    [1    /1   ]  4.37920657554        1
[INPUT] 0    0    [1    /1   ]  0.396027546138       1
[INPUT] 1    0    [1    /1   ]  30.1081992808        1
[INPUT] 1    0    [1    /1   ]  6.13937813256        1
[INPUT] 1    0    [1    /1   ]  0.484137240805       1

nuclear repulsion = 0
number of shells = 6
number of NR pGTOs = 12
number of NR cGTOs = 12
basis = {'Ar': [[0, [94.33644872882927, 1.0]], [0, [4.37920657553923, 1.0]], [0, [0.39602754613751207, 1.0]], [1, [30.108199280832128, 1.0]], [1, [6.139378132559045, 1.0]], [1, [0.48413724080496556, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [94.33644873]
bas 1, expnt(s) = [4.37920658]
bas 2, expnt(s) = [0.39602755]
bas 3, expnt(s) = [30.10819928]
bas 4, expnt(s) = [6.13937813]
bas 5, expnt(s) = [0.48413724]
CPU time:       134.71
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  1  1  1  0 30 31  0]
 [ 0  1  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]]
arg.env = [  0.           0.           0.           0.           0.
   0.           0.           0.           0.           0.
   0.           0.           0.           0.           0.
   0.           0.           0.           0.           0.
   0.           0.           0.           0.          94.33644873
  76.47591234   4.37920658   7.6482416    0.39602755   1.26127292
  30.10819928 205.75024921   6.13937813  28.19290781   0.48413724
   1.17813486]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.590719088878437
cond(S) = 3.168150445655092
E1 = -663.35254205303  E_coul = 196.76844050758584
init E= -466.584101545444
    CPU time for initialize scf      0.18 sec, wall time      0.02 sec
  HOMO = -0.60676063662677  LUMO = 27.1946210985136
  mo_energy =
[-97.49113008 -10.52750846  -9.34075721  -9.34075721  -9.34075721
  -1.18415995  -0.60676064  -0.60676064  -0.60676064  27.1946211
  27.1946211   27.1946211 ]
E1 = -677.6269421686442  E_coul = 202.80727898163707
cycle= 1 E= -474.819663187007  delta_E= -8.24  |g|= 0.396  |ddm|= 0.353
    CPU time for cycle= 1      0.21 sec, wall time      0.01 sec
diis-norm(errvec)=0.446729
diis-c [-0.19956636  1.        ]
  HOMO = -0.384105209540408  LUMO = 27.7139723251714
  mo_energy =
[-97.05880985 -10.1291383   -8.91108748  -8.91108748  -8.91108748
  -0.93383221  -0.38410521  -0.38410521  -0.38410521  27.71397233
  27.71397233  27.71397233]
E1 = -677.3570629704737  E_coul = 202.5351836368315
cycle= 2 E= -474.821879333642  delta_E= -0.00222  |g|= 0.0223  |ddm|= 0.0238
    CPU time for cycle= 2      0.15 sec, wall time      0.01 sec
diis-norm(errvec)=0.0270937
diis-c [-7.72106295e-05  5.42680693e-02  9.45731931e-01]
  HOMO = -0.385056191347871  LUMO = 27.688935371858
  mo_energy =
[-97.11301751 -10.14687044  -8.92824468  -8.92824468  -8.92824468
  -0.93618047  -0.38505619  -0.38505619  -0.38505619  27.68893537
  27.68893537  27.68893537]
E1 = -677.3707022556597  E_coul = 202.54881640709175
cycle= 3 E= -474.821885848568  delta_E= -6.51e-06  |g|= 0.000192  |ddm|= 0.00107
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.000221106
diis-c [-1.62469716e-13 -1.27020939e-03 -2.39682363e-02  1.02523845e+00]
  HOMO = -0.385073556291166  LUMO = 27.6888630213542
  mo_energy =
[-97.11309433 -10.14695834  -8.92835013  -8.92835013  -8.92835013
  -0.93621169  -0.38507356  -0.38507356  -0.38507356  27.68886302
  27.68886302  27.68886302]
E1 = -677.3707017157844  E_coul = 202.5488158665892
cycle= 4 E= -474.821885849195  delta_E= -6.27e-10  |g|= 9.44e-08  |ddm|= 1.25e-05
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
E1 = -677.3707017157844  E_coul = 202.5488158665892
  HOMO = -0.385073547367296  LUMO = 27.6888630546593
  mo_energy =
[-97.11309419 -10.14695829  -8.92835006  -8.92835006  -8.92835006
  -0.93621168  -0.38507355  -0.38507355  -0.38507355  27.68886305
  27.68886305  27.68886305]
E1 = -677.3707016527126  E_coul = 202.54881580351736
Extra cycle  E= -474.821885849195  delta_E= 5.68e-14  |g|= 5.29e-09  |ddm|= 5.03e-09
    CPU time for scf_cycle      0.58 sec, wall time      0.07 sec
exp = [94.33644873  4.37920658  0.39602755 30.10819928  6.13937813  0.48413724]
E = -474.8218858491952
E = -474.8218858491952
exp = [9.4336448728829268e+01,4.3792065755392304e+00,3.9602754613751207e-01,3.0108199280832128e+01,6.1393781325590453e+00,4.8413724080496556e-01]
