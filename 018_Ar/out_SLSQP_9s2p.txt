#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((11, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([7.3419862888950534e+04,1.8354415279684519e+04,2.2337565691104060e+03,4.5509411588185179e+02,1.2132000689951782e+02,3.7517668969809321e+01,4.7408530341284303e+00,3.9118871783972831e-01,8.5986666061044215e+00,4.9085282207620301e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "9s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:02:50 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  293679.451556        1
[INPUT] 0    0    [1    /1   ]  73419.862889         1
[INPUT] 0    0    [1    /1   ]  18354.4152797        1
[INPUT] 0    0    [1    /1   ]  2233.75656911        1
[INPUT] 0    0    [1    /1   ]  455.094115882        1
[INPUT] 0    0    [1    /1   ]  121.3200069          1
[INPUT] 0    0    [1    /1   ]  37.5176689698        1
[INPUT] 0    0    [1    /1   ]  4.74085303413        1
[INPUT] 0    0    [1    /1   ]  0.39118871784        1
[INPUT] 1    0    [1    /1   ]  8.5986666061         1
[INPUT] 1    0    [1    /1   ]  0.490852822076       1

nuclear repulsion = 0
number of shells = 11
number of NR pGTOs = 15
number of NR cGTOs = 15
basis = {'Ar': [[0, [293679.45155580214, 1.0]], [0, [73419.86288895053, 1.0]], [0, [18354.41527968452, 1.0]], [0, [2233.756569110406, 1.0]], [0, [455.0941158818518, 1.0]], [0, [121.32000689951782, 1.0]], [0, [37.51766896980932, 1.0]], [0, [4.74085303412843, 1.0]], [0, [0.3911887178397283, 1.0]], [1, [8.598666606104421, 1.0]], [1, [0.490852822076203, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [293679.4515558]
bas 1, expnt(s) = [73419.86288895]
bas 2, expnt(s) = [18354.41527968]
bas 3, expnt(s) = [2233.75656911]
bas 4, expnt(s) = [455.09411588]
bas 5, expnt(s) = [121.3200069]
bas 6, expnt(s) = [37.51766897]
bas 7, expnt(s) = [4.74085303]
bas 8, expnt(s) = [0.39118872]
bas 9, expnt(s) = [8.59866661]
bas 10, expnt(s) = [0.49085282]
CPU time:         1.32
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]
 [ 0  1  1  1  0 44 45  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 2.93679452e+05 3.18727983e+04 7.34198629e+04 1.12687359e+04
 1.83544153e+04 3.98401018e+03 2.23375657e+03 8.20903120e+02
 4.55094116e+02 2.48937853e+02 1.21320007e+02 9.23558360e+01
 3.75176690e+01 3.82993946e+01 4.74085303e+00 8.11722144e+00
 3.91188718e-01 1.24969711e+00 8.59866661e+00 4.29559453e+01
 4.90852822e-01 1.19859789e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319982997055376
cond(S) = 45.79986843436158
E1 = -688.874132177791  E_coul = 184.91506988660132
init E= -503.95906229119
    CPU time for initialize scf      0.16 sec, wall time      0.16 sec
  HOMO = -0.680897471395839  LUMO = 84.7297731334878
  mo_energy =
[-1.21650429e+02 -1.32811248e+01 -7.62164343e+00 -7.62164343e+00
 -7.62164343e+00 -1.65068382e+00 -6.80897471e-01 -6.80897471e-01
 -6.80897471e-01  8.47297731e+01  6.74359437e+02  3.92775862e+03
  2.96676938e+04  1.56371145e+05  7.03813148e+05]
E1 = -706.5840150609163  E_coul = 198.94499687884326
cycle= 1 E= -507.639018182073  delta_E= -3.68  |g|= 0.318  |ddm|= 0.301
    CPU time for cycle= 1      0.37 sec, wall time      0.37 sec
diis-norm(errvec)=0.41738
diis-c [-0.17420578  1.        ]
  HOMO = -0.236283331863249  LUMO = 86.0623491449272
  mo_energy =
[-1.20262443e+02 -1.22530530e+01 -6.65313148e+00 -6.65313148e+00
 -6.65313148e+00 -1.16348198e+00 -2.36283332e-01 -2.36283332e-01
 -2.36283332e-01  8.60623491e+01  6.75730055e+02  3.92901009e+03
  2.96687820e+04  1.56372161e+05  7.03814134e+05]
E1 = -706.5524044760328  E_coul = 198.91295579786294
cycle= 2 E= -507.63944867817  delta_E= -0.00043  |g|= 0.00476  |ddm|= 0.0144
    CPU time for cycle= 2      0.11 sec, wall time      0.12 sec
diis-norm(errvec)=0.00505494
diis-c [-2.55083773e-05 -5.03224664e-04  1.00050322e+00]
  HOMO = -0.236459739973644  LUMO = 86.0588190803506
  mo_energy =
[-1.20271125e+02 -1.22542494e+01 -6.65498446e+00 -6.65498446e+00
 -6.65498446e+00 -1.16354719e+00 -2.36459740e-01 -2.36459740e-01
 -2.36459740e-01  8.60588191e+01  6.75719434e+02  3.92899414e+03
  2.96687626e+04  1.56372141e+05  7.03814114e+05]
E1 = -706.5519606893516  E_coul = 198.91251190001663
cycle= 3 E= -507.639448789335  delta_E= -1.11e-07  |g|= 9.53e-05  |ddm|= 0.000203
    CPU time for cycle= 3      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.00012736
diis-c [-3.97764958e-10  3.38356170e-05 -2.55153873e-02  1.02548155e+00]
  HOMO = -0.236461972448214  LUMO = 86.0587741099159
  mo_energy =
[-1.20271239e+02 -1.22542653e+01 -6.65501166e+00 -6.65501166e+00
 -6.65501166e+00 -1.16354785e+00 -2.36461972e-01 -2.36461972e-01
 -2.36461972e-01  8.60587741e+01  6.75719316e+02  3.92899399e+03
  2.96687625e+04  1.56372141e+05  7.03814114e+05]
E1 = -706.5519533738768  E_coul = 198.9125045845017
cycle= 4 E= -507.639448789375  delta_E= -4.01e-11  |g|= 3.75e-07  |ddm|= 3.48e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.5519533738768  E_coul = 198.9125045845017
  HOMO = -0.236461956013847  LUMO = 86.0587744490733
  mo_energy =
[-1.20271239e+02 -1.22542652e+01 -6.65501150e+00 -6.65501150e+00
 -6.65501150e+00 -1.16354784e+00 -2.36461956e-01 -2.36461956e-01
 -2.36461956e-01  8.60587744e+01  6.75719317e+02  3.92899399e+03
  2.96687625e+04  1.56372141e+05  7.03814114e+05]
E1 = -706.5519534111763  E_coul = 198.91250462180085
Extra cycle  E= -507.639448789375  delta_E= -3.41e-13  |g|= 6.48e-09  |ddm|= 1.66e-08
    CPU time for scf_cycle      0.70 sec, wall time      0.70 sec
exp = [2.93679452e+05 7.34198629e+04 1.83544153e+04 2.23375657e+03
 4.55094116e+02 1.21320007e+02 3.75176690e+01 4.74085303e+00
 3.91188718e-01 8.59866661e+00 4.90852822e-01]
E = -507.6394487893755
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((11, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([7.3419862888950534e+04,1.8354415279684519e+04,2.2337565691104060e+03,4.5509411588185179e+02,1.2132000689951782e+02,3.7517668969809321e+01,4.7408530341284303e+00,3.9118871783972831e-01,8.5986666061044215e+00,4.9085282207620301e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "9s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:02:51 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  293679.451556        1
[INPUT] 0    0    [1    /1   ]  73419.862889         1
[INPUT] 0    0    [1    /1   ]  18354.4152797        1
[INPUT] 0    0    [1    /1   ]  2233.75656911        1
[INPUT] 0    0    [1    /1   ]  455.094115882        1
[INPUT] 0    0    [1    /1   ]  121.3200069          1
[INPUT] 0    0    [1    /1   ]  37.5176689698        1
[INPUT] 0    0    [1    /1   ]  4.74085303413        1
[INPUT] 0    0    [1    /1   ]  0.39118871784        1
[INPUT] 1    0    [1    /1   ]  8.5986666061         1
[INPUT] 1    0    [1    /1   ]  0.490852822076       1

nuclear repulsion = 0
number of shells = 11
number of NR pGTOs = 15
number of NR cGTOs = 15
basis = {'Ar': [[0, [293679.45155580214, 1.0]], [0, [73419.86288895053, 1.0]], [0, [18354.41527968452, 1.0]], [0, [2233.756569110406, 1.0]], [0, [455.0941158818518, 1.0]], [0, [121.32000689951782, 1.0]], [0, [37.51766896980932, 1.0]], [0, [4.74085303412843, 1.0]], [0, [0.3911887178397283, 1.0]], [1, [8.598666606104421, 1.0]], [1, [0.490852822076203, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [293679.4515558]
bas 1, expnt(s) = [73419.86288895]
bas 2, expnt(s) = [18354.41527968]
bas 3, expnt(s) = [2233.75656911]
bas 4, expnt(s) = [455.09411588]
bas 5, expnt(s) = [121.3200069]
bas 6, expnt(s) = [37.51766897]
bas 7, expnt(s) = [4.74085303]
bas 8, expnt(s) = [0.39118872]
bas 9, expnt(s) = [8.59866661]
bas 10, expnt(s) = [0.49085282]
CPU time:         2.25
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]
 [ 0  1  1  1  0 44 45  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 2.93679452e+05 3.18727983e+04 7.34198629e+04 1.12687359e+04
 1.83544153e+04 3.98401018e+03 2.23375657e+03 8.20903120e+02
 4.55094116e+02 2.48937853e+02 1.21320007e+02 9.23558360e+01
 3.75176690e+01 3.82993946e+01 4.74085303e+00 8.11722144e+00
 3.91188718e-01 1.24969711e+00 8.59866661e+00 4.29559453e+01
 4.90852822e-01 1.19859789e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319982997055376
cond(S) = 45.79986843436158
E1 = -688.874132177791  E_coul = 184.91506988660132
init E= -503.95906229119
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.680897471395839  LUMO = 84.7297731334878
  mo_energy =
[-1.21650429e+02 -1.32811248e+01 -7.62164343e+00 -7.62164343e+00
 -7.62164343e+00 -1.65068382e+00 -6.80897471e-01 -6.80897471e-01
 -6.80897471e-01  8.47297731e+01  6.74359437e+02  3.92775862e+03
  2.96676938e+04  1.56371145e+05  7.03813148e+05]
E1 = -706.5840150609163  E_coul = 198.94499687884326
cycle= 1 E= -507.639018182073  delta_E= -3.68  |g|= 0.318  |ddm|= 0.301
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.41738
diis-c [-0.17420578  1.        ]
  HOMO = -0.236283331863249  LUMO = 86.0623491449272
  mo_energy =
[-1.20262443e+02 -1.22530530e+01 -6.65313148e+00 -6.65313148e+00
 -6.65313148e+00 -1.16348198e+00 -2.36283332e-01 -2.36283332e-01
 -2.36283332e-01  8.60623491e+01  6.75730055e+02  3.92901009e+03
  2.96687820e+04  1.56372161e+05  7.03814134e+05]
E1 = -706.5524044760328  E_coul = 198.91295579786294
cycle= 2 E= -507.63944867817  delta_E= -0.00043  |g|= 0.00476  |ddm|= 0.0144
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00505494
diis-c [-2.55083773e-05 -5.03224664e-04  1.00050322e+00]
  HOMO = -0.236459739973644  LUMO = 86.0588190803506
  mo_energy =
[-1.20271125e+02 -1.22542494e+01 -6.65498446e+00 -6.65498446e+00
 -6.65498446e+00 -1.16354719e+00 -2.36459740e-01 -2.36459740e-01
 -2.36459740e-01  8.60588191e+01  6.75719434e+02  3.92899414e+03
  2.96687626e+04  1.56372141e+05  7.03814114e+05]
E1 = -706.5519606893516  E_coul = 198.91251190001663
cycle= 3 E= -507.639448789335  delta_E= -1.11e-07  |g|= 9.53e-05  |ddm|= 0.000203
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00012736
diis-c [-3.97764958e-10  3.38356170e-05 -2.55153873e-02  1.02548155e+00]
  HOMO = -0.236461972448214  LUMO = 86.0587741099159
  mo_energy =
[-1.20271239e+02 -1.22542653e+01 -6.65501166e+00 -6.65501166e+00
 -6.65501166e+00 -1.16354785e+00 -2.36461972e-01 -2.36461972e-01
 -2.36461972e-01  8.60587741e+01  6.75719316e+02  3.92899399e+03
  2.96687625e+04  1.56372141e+05  7.03814114e+05]
E1 = -706.5519533738768  E_coul = 198.9125045845017
cycle= 4 E= -507.639448789375  delta_E= -4.01e-11  |g|= 3.75e-07  |ddm|= 3.48e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.5519533738768  E_coul = 198.9125045845017
  HOMO = -0.236461956013847  LUMO = 86.0587744490733
  mo_energy =
[-1.20271239e+02 -1.22542652e+01 -6.65501150e+00 -6.65501150e+00
 -6.65501150e+00 -1.16354784e+00 -2.36461956e-01 -2.36461956e-01
 -2.36461956e-01  8.60587744e+01  6.75719317e+02  3.92899399e+03
  2.96687625e+04  1.56372141e+05  7.03814114e+05]
E1 = -706.5519534111763  E_coul = 198.91250462180085
Extra cycle  E= -507.639448789375  delta_E= -3.41e-13  |g|= 6.48e-09  |ddm|= 1.66e-08
    CPU time for scf_cycle      0.11 sec, wall time      0.11 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 45.79986843436158
E1 = -706.5519534111763  E_coul = 198.91250462180085
init E= -507.639448789375
    CPU time for initialize scf      0.38 sec, wall time      0.38 sec
  HOMO = -0.236461955821301  LUMO = 86.0587744532292
  mo_energy =
[-1.20271239e+02 -1.22542652e+01 -6.65501150e+00 -6.65501150e+00
 -6.65501150e+00 -1.16354784e+00 -2.36461956e-01 -2.36461956e-01
 -2.36461956e-01  8.60587745e+01  6.75719317e+02  3.92899399e+03
  2.96687625e+04  1.56372141e+05  7.03814114e+05]
E1 = -706.5519534117416  E_coul = 198.91250462236593
cycle= 1 E= -507.639448789376  delta_E= -1.71e-13  |g|= 1.33e-10  |ddm|= 2.56e-10
    CPU time for cycle= 1      0.02 sec, wall time      0.02 sec
E1 = -706.5519534117416  E_coul = 198.91250462236593
  HOMO = -0.236461955818585  LUMO = 86.0587744532891
  mo_energy =
[-1.20271239e+02 -1.22542652e+01 -6.65501150e+00 -6.65501150e+00
 -6.65501150e+00 -1.16354784e+00 -2.36461956e-01 -2.36461956e-01
 -2.36461956e-01  8.60587745e+01  6.75719317e+02  3.92899399e+03
  2.96687625e+04  1.56372141e+05  7.03814114e+05]
E1 = -706.5519534117514  E_coul = 198.91250462237568
Extra cycle  E= -507.639448789376  delta_E= -5.68e-14  |g|= 3.47e-11  |ddm|= 4.57e-12
    CPU time for scf_cycle      1.38 sec, wall time      1.38 sec
exp = [2.93679452e+05 7.34198629e+04 1.83544153e+04 2.23375657e+03
 4.55094116e+02 1.21320007e+02 3.75176690e+01 4.74085303e+00
 3.91188718e-01 8.59866661e+00 4.90852822e-01]
grad_E = [ 9.33199391e-09 -3.26810099e-08  6.34588806e-06 -4.18973914e-06
 -3.72650778e-05  5.74332122e-05 -8.03613155e-05 -1.13474668e-04
 -9.06242767e-05  3.37960570e-06  4.65743477e-06]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((11, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([7.3419862888950534e+04,1.8354415279684519e+04,2.2337565691104060e+03,4.5509411588185179e+02,1.2132000689951782e+02,3.7517668969809321e+01,4.7408530341284303e+00,3.9118871783972831e-01,8.5986666061044215e+00,4.9085282207620301e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "9s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:02:58 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  293679.451556        1
[INPUT] 0    0    [1    /1   ]  73419.862889         1
[INPUT] 0    0    [1    /1   ]  18354.4152733        1
[INPUT] 0    0    [1    /1   ]  2233.7565733         1
[INPUT] 0    0    [1    /1   ]  455.094153147        1
[INPUT] 0    0    [1    /1   ]  121.319949466        1
[INPUT] 0    0    [1    /1   ]  37.5177493311        1
[INPUT] 0    0    [1    /1   ]  4.7409665088         1
[INPUT] 0    0    [1    /1   ]  0.391279342116       1
[INPUT] 1    0    [1    /1   ]  8.5986632265         1
[INPUT] 1    0    [1    /1   ]  0.490848164641       1

nuclear repulsion = 0
number of shells = 11
number of NR pGTOs = 15
number of NR cGTOs = 15
basis = {'Ar': [[0, [293679.4515557928, 1.0]], [0, [73419.86288898322, 1.0]], [0, [18354.415273338633, 1.0]], [0, [2233.756573300145, 1.0]], [0, [455.09415314692956, 1.0]], [0, [121.31994946630563, 1.0]], [0, [37.51774933112479, 1.0]], [0, [4.740966508796574, 1.0]], [0, [0.39127934211638016, 1.0]], [1, [8.59866322649872, 1.0]], [1, [0.49084816464143094, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [293679.45155579]
bas 1, expnt(s) = [73419.86288898]
bas 2, expnt(s) = [18354.41527334]
bas 3, expnt(s) = [2233.7565733]
bas 4, expnt(s) = [455.09415315]
bas 5, expnt(s) = [121.31994947]
bas 6, expnt(s) = [37.51774933]
bas 7, expnt(s) = [4.74096651]
bas 8, expnt(s) = [0.39127934]
bas 9, expnt(s) = [8.59866323]
bas 10, expnt(s) = [0.49084816]
CPU time:         8.83
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]
 [ 0  1  1  1  0 44 45  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 2.93679452e+05 3.18727983e+04 7.34198629e+04 1.12687359e+04
 1.83544153e+04 3.98401018e+03 2.23375657e+03 8.20903121e+02
 4.55094153e+02 2.48937868e+02 1.21319949e+02 9.23558032e+01
 3.75177493e+01 3.82994562e+01 4.74096651e+00 8.11736715e+00
 3.91279342e-01 1.24991423e+00 8.59866323e+00 4.29559242e+01
 4.90848165e-01 1.19858367e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319976796077242
cond(S) = 45.80038098618
E1 = -688.875672197204  E_coul = 184.9164188158494
init E= -503.959253381355
    CPU time for initialize scf      0.02 sec, wall time      0.03 sec
  HOMO = -0.680860729257937  LUMO = 84.7308814617408
  mo_energy =
[-1.21650309e+02 -1.32810277e+01 -7.62152792e+00 -7.62152792e+00
 -7.62152792e+00 -1.65068984e+00 -6.80860729e-01 -6.80860729e-01
 -6.80860729e-01  8.47308815e+01  6.74360387e+02  3.92775947e+03
  2.96676945e+04  1.56371145e+05  7.03813149e+05]
E1 = -706.5858212314852  E_coul = 198.94680302039993
cycle= 1 E= -507.639018211085  delta_E= -3.68  |g|= 0.318  |ddm|= 0.301
    CPU time for cycle= 1      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.417383
diis-c [-0.17420895  1.        ]
  HOMO = -0.236240970746265  LUMO = 86.0634954903143
  mo_energy =
[-1.20262252e+02 -1.22529328e+01 -6.65298797e+00 -6.65298797e+00
 -6.65298797e+00 -1.16344758e+00 -2.36240971e-01 -2.36240971e-01
 -2.36240971e-01  8.60634955e+01  6.75731084e+02  3.92901103e+03
  2.96687828e+04  1.56372162e+05  7.03814135e+05]
E1 = -706.5542123036649  E_coul = 198.9147636637519
cycle= 2 E= -507.639448639913  delta_E= -0.00043  |g|= 0.00476  |ddm|= 0.0144
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.0050545
diis-c [-2.55039721e-05 -5.02804867e-04  1.00050280e+00]
  HOMO = -0.236417365824815  LUMO = 86.0599656024167
  mo_energy =
[-1.20270934e+02 -1.22541292e+01 -6.65484082e+00 -6.65484082e+00
 -6.65484082e+00 -1.16351279e+00 -2.36417366e-01 -2.36417366e-01
 -2.36417366e-01  8.60599656e+01  6.75720464e+02  3.92899508e+03
  2.96687635e+04  1.56372142e+05  7.03814114e+05]
E1 = -706.5537685438012  E_coul = 198.91431979274006
cycle= 3 E= -507.639448751061  delta_E= -1.11e-07  |g|= 9.53e-05  |ddm|= 0.000203
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.000127353
diis-c [-3.97716673e-10  3.38363269e-05 -2.55161030e-02  1.02548227e+00]
  HOMO = -0.236419598248259  LUMO = 86.0599206331267
  mo_energy =
[-1.20271048e+02 -1.22541451e+01 -6.65486802e+00 -6.65486802e+00
 -6.65486802e+00 -1.16351345e+00 -2.36419598e-01 -2.36419598e-01
 -2.36419598e-01  8.60599206e+01  6.75720346e+02  3.92899494e+03
  2.96687633e+04  1.56372141e+05  7.03814114e+05]
E1 = -706.5537612286389  E_coul = 198.914312477537
cycle= 4 E= -507.639448751102  delta_E= -4.08e-11  |g|= 3.75e-07  |ddm|= 3.48e-06
    CPU time for cycle= 4      0.01 sec, wall time      0.02 sec
E1 = -706.5537612286389  E_coul = 198.914312477537
  HOMO = -0.236419581814294  LUMO = 86.0599209722803
  mo_energy =
[-1.20271047e+02 -1.22541450e+01 -6.65486786e+00 -6.65486786e+00
 -6.65486786e+00 -1.16351345e+00 -2.36419582e-01 -2.36419582e-01
 -2.36419582e-01  8.60599210e+01  6.75720347e+02  3.92899494e+03
  2.96687633e+04  1.56372141e+05  7.03814114e+05]
E1 = -706.5537612659382  E_coul = 198.91431251483633
Extra cycle  E= -507.639448751102  delta_E=    0  |g|= 6.48e-09  |ddm|= 1.66e-08
    CPU time for scf_cycle      0.11 sec, wall time      0.11 sec
exp = [2.93679452e+05 7.34198629e+04 1.83544153e+04 2.23375657e+03
 4.55094153e+02 1.21319949e+02 3.75177493e+01 4.74096651e+00
 3.91279342e-01 8.59866323e+00 4.90848165e-01]
E = -507.6394487511019
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((11, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([7.3419862888950534e+04,1.8354415279684519e+04,2.2337565691104060e+03,4.5509411588185179e+02,1.2132000689951782e+02,3.7517668969809321e+01,4.7408530341284303e+00,3.9118871783972831e-01,8.5986666061044215e+00,4.9085282207620301e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "9s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:02:58 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  293679.451556        1
[INPUT] 0    0    [1    /1   ]  73419.862889         1
[INPUT] 0    0    [1    /1   ]  18354.4152782        1
[INPUT] 0    0    [1    /1   ]  2233.75657007        1
[INPUT] 0    0    [1    /1   ]  455.094124413        1
[INPUT] 0    0    [1    /1   ]  121.319993751        1
[INPUT] 0    0    [1    /1   ]  37.5176873675        1
[INPUT] 0    0    [1    /1   ]  4.74087901265        1
[INPUT] 0    0    [1    /1   ]  0.391209465065       1
[INPUT] 1    0    [1    /1   ]  8.59866583239        1
[INPUT] 1    0    [1    /1   ]  0.490851755818       1

nuclear repulsion = 0
number of shells = 11
number of NR pGTOs = 15
number of NR cGTOs = 15
basis = {'Ar': [[0, [293679.4515558, 1.0]], [0, [73419.86288895801, 1.0]], [0, [18354.415278231714, 1.0]], [0, [2233.756570069591, 1.0]], [0, [455.09412441319654, 1.0]], [0, [121.31999375094647, 1.0]], [0, [37.5176873674655, 1.0]], [0, [4.740879012647041, 1.0]], [0, [0.3912094650646036, 1.0]], [1, [8.59866583238857, 1.0]], [1, [0.49085175581835105, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [293679.4515558]
bas 1, expnt(s) = [73419.86288896]
bas 2, expnt(s) = [18354.41527823]
bas 3, expnt(s) = [2233.75657007]
bas 4, expnt(s) = [455.09412441]
bas 5, expnt(s) = [121.31999375]
bas 6, expnt(s) = [37.51768737]
bas 7, expnt(s) = [4.74087901]
bas 8, expnt(s) = [0.39120947]
bas 9, expnt(s) = [8.59866583]
bas 10, expnt(s) = [0.49085176]
CPU time:         8.99
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]
 [ 0  1  1  1  0 44 45  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 2.93679452e+05 3.18727983e+04 7.34198629e+04 1.12687359e+04
 1.83544153e+04 3.98401018e+03 2.23375657e+03 8.20903120e+02
 4.55094124e+02 2.48937856e+02 1.21319994e+02 9.23558285e+01
 3.75176874e+01 3.82994087e+01 4.74087901e+00 8.11725480e+00
 3.91209465e-01 1.24974682e+00 8.59866583e+00 4.29559405e+01
 4.90851756e-01 1.19859463e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.31998158331339
cond(S) = 45.799985773736466
E1 = -688.8744849077872  E_coul = 184.91537880250098
init E= -503.959106105286
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.680889055433349  LUMO = 84.7300268766181
  mo_energy =
[-1.21650401e+02 -1.32811026e+01 -7.62161698e+00 -7.62161698e+00
 -7.62161698e+00 -1.65068520e+00 -6.80889055e-01 -6.80889055e-01
 -6.80889055e-01  8.47300269e+01  6.74359655e+02  3.92775881e+03
  2.96676940e+04  1.56371145e+05  7.03813149e+05]
E1 = -706.5844286022016  E_coul = 198.94541040102396
cycle= 1 E= -507.639018201178  delta_E= -3.68  |g|= 0.318  |ddm|= 0.301
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.417381
diis-c [-0.1742065  1.       ]
  HOMO = -0.236273632721833  LUMO = 86.0626115865874
  mo_energy =
[-1.20262400e+02 -1.22530255e+01 -6.65309863e+00 -6.65309863e+00
 -6.65309863e+00 -1.16347411e+00 -2.36273633e-01 -2.36273633e-01
 -2.36273633e-01  8.60626116e+01  6.75730290e+02  3.92901030e+03
  2.96687822e+04  1.56372161e+05  7.03814134e+05]
E1 = -706.5528183966611  E_coul = 198.9133697147874
cycle= 2 E= -507.639448681874  delta_E= -0.00043  |g|= 0.00476  |ddm|= 0.0144
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.00505484
diis-c [-2.55073687e-05 -5.03128551e-04  1.00050313e+00]
  HOMO = -0.236450037848915  LUMO = 86.0590815624569
  mo_energy =
[-1.20271082e+02 -1.22542219e+01 -6.65495158e+00 -6.65495158e+00
 -6.65495158e+00 -1.16353932e+00 -2.36450038e-01 -2.36450038e-01
 -2.36450038e-01  8.60590816e+01  6.75719670e+02  3.92899435e+03
  2.96687628e+04  1.56372141e+05  7.03814114e+05]
E1 = -706.5523746161191  E_coul = 198.91292582308452
cycle= 3 E= -507.639448793035  delta_E= -1.11e-07  |g|= 9.53e-05  |ddm|= 0.000203
    CPU time for cycle= 3      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.000127358
diis-c [-3.97753719e-10  3.38357590e-05 -2.55155492e-02  1.02548171e+00]
  HOMO = -0.236452270311784  LUMO = 86.0590365922864
  mo_energy =
[-1.20271196e+02 -1.22542378e+01 -6.65497877e+00 -6.65497877e+00
 -6.65497877e+00 -1.16353998e+00 -2.36452270e-01 -2.36452270e-01
 -2.36452270e-01  8.60590366e+01  6.75719552e+02  3.92899421e+03
  2.96687627e+04  1.56372141e+05  7.03814114e+05]
E1 = -706.5523673007154  E_coul = 198.9129185076406
cycle= 4 E= -507.639448793075  delta_E= -4.02e-11  |g|= 3.75e-07  |ddm|= 3.48e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.5523673007154  E_coul = 198.9129185076406
  HOMO = -0.236452253877513  LUMO = 86.0590369314424
  mo_energy =
[-1.20271195e+02 -1.22542377e+01 -6.65497861e+00 -6.65497861e+00
 -6.65497861e+00 -1.16353997e+00 -2.36452254e-01 -2.36452254e-01
 -2.36452254e-01  8.60590369e+01  6.75719553e+02  3.92899421e+03
  2.96687627e+04  1.56372141e+05  7.03814114e+05]
E1 = -706.5523673380147  E_coul = 198.91291854493977
Extra cycle  E= -507.639448793075  delta_E= -1.14e-13  |g|= 6.48e-09  |ddm|= 1.66e-08
    CPU time for scf_cycle      0.09 sec, wall time      0.10 sec
exp = [2.93679452e+05 7.34198629e+04 1.83544153e+04 2.23375657e+03
 4.55094124e+02 1.21319994e+02 3.75176874e+01 4.74087901e+00
 3.91209465e-01 8.59866583e+00 4.90851756e-01]
E = -507.63944879307496
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((11, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([7.3419862888950534e+04,1.8354415279684519e+04,2.2337565691104060e+03,4.5509411588185179e+02,1.2132000689951782e+02,3.7517668969809321e+01,4.7408530341284303e+00,3.9118871783972831e-01,8.5986666061044215e+00,4.9085282207620301e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "9s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:02:58 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  293679.451556        1
[INPUT] 0    0    [1    /1   ]  73419.862889         1
[INPUT] 0    0    [1    /1   ]  18354.4152782        1
[INPUT] 0    0    [1    /1   ]  2233.75657007        1
[INPUT] 0    0    [1    /1   ]  455.094124413        1
[INPUT] 0    0    [1    /1   ]  121.319993751        1
[INPUT] 0    0    [1    /1   ]  37.5176873675        1
[INPUT] 0    0    [1    /1   ]  4.74087901265        1
[INPUT] 0    0    [1    /1   ]  0.391209465065       1
[INPUT] 1    0    [1    /1   ]  8.59866583239        1
[INPUT] 1    0    [1    /1   ]  0.490851755818       1

nuclear repulsion = 0
number of shells = 11
number of NR pGTOs = 15
number of NR cGTOs = 15
basis = {'Ar': [[0, [293679.4515558, 1.0]], [0, [73419.86288895801, 1.0]], [0, [18354.415278231714, 1.0]], [0, [2233.756570069591, 1.0]], [0, [455.09412441319654, 1.0]], [0, [121.31999375094647, 1.0]], [0, [37.5176873674655, 1.0]], [0, [4.740879012647041, 1.0]], [0, [0.3912094650646036, 1.0]], [1, [8.59866583238857, 1.0]], [1, [0.49085175581835105, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [293679.4515558]
bas 1, expnt(s) = [73419.86288896]
bas 2, expnt(s) = [18354.41527823]
bas 3, expnt(s) = [2233.75657007]
bas 4, expnt(s) = [455.09412441]
bas 5, expnt(s) = [121.31999375]
bas 6, expnt(s) = [37.51768737]
bas 7, expnt(s) = [4.74087901]
bas 8, expnt(s) = [0.39120947]
bas 9, expnt(s) = [8.59866583]
bas 10, expnt(s) = [0.49085176]
CPU time:         9.14
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]
 [ 0  1  1  1  0 44 45  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 2.93679452e+05 3.18727983e+04 7.34198629e+04 1.12687359e+04
 1.83544153e+04 3.98401018e+03 2.23375657e+03 8.20903120e+02
 4.55094124e+02 2.48937856e+02 1.21319994e+02 9.23558285e+01
 3.75176874e+01 3.82994087e+01 4.74087901e+00 8.11725480e+00
 3.91209465e-01 1.24974682e+00 8.59866583e+00 4.29559405e+01
 4.90851756e-01 1.19859463e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.31998158331339
cond(S) = 45.799985773736466
E1 = -688.8744849077872  E_coul = 184.91537880250098
init E= -503.959106105286
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.680889055433349  LUMO = 84.7300268766181
  mo_energy =
[-1.21650401e+02 -1.32811026e+01 -7.62161698e+00 -7.62161698e+00
 -7.62161698e+00 -1.65068520e+00 -6.80889055e-01 -6.80889055e-01
 -6.80889055e-01  8.47300269e+01  6.74359655e+02  3.92775881e+03
  2.96676940e+04  1.56371145e+05  7.03813149e+05]
E1 = -706.5844286022016  E_coul = 198.94541040102396
cycle= 1 E= -507.639018201178  delta_E= -3.68  |g|= 0.318  |ddm|= 0.301
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.417381
diis-c [-0.1742065  1.       ]
  HOMO = -0.236273632721833  LUMO = 86.0626115865874
  mo_energy =
[-1.20262400e+02 -1.22530255e+01 -6.65309863e+00 -6.65309863e+00
 -6.65309863e+00 -1.16347411e+00 -2.36273633e-01 -2.36273633e-01
 -2.36273633e-01  8.60626116e+01  6.75730290e+02  3.92901030e+03
  2.96687822e+04  1.56372161e+05  7.03814134e+05]
E1 = -706.5528183966611  E_coul = 198.9133697147874
cycle= 2 E= -507.639448681874  delta_E= -0.00043  |g|= 0.00476  |ddm|= 0.0144
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.00505484
diis-c [-2.55073687e-05 -5.03128551e-04  1.00050313e+00]
  HOMO = -0.236450037848915  LUMO = 86.0590815624569
  mo_energy =
[-1.20271082e+02 -1.22542219e+01 -6.65495158e+00 -6.65495158e+00
 -6.65495158e+00 -1.16353932e+00 -2.36450038e-01 -2.36450038e-01
 -2.36450038e-01  8.60590816e+01  6.75719670e+02  3.92899435e+03
  2.96687628e+04  1.56372141e+05  7.03814114e+05]
E1 = -706.5523746161191  E_coul = 198.91292582308452
cycle= 3 E= -507.639448793035  delta_E= -1.11e-07  |g|= 9.53e-05  |ddm|= 0.000203
    CPU time for cycle= 3      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.000127358
diis-c [-3.97753719e-10  3.38357590e-05 -2.55155492e-02  1.02548171e+00]
  HOMO = -0.236452270311784  LUMO = 86.0590365922864
  mo_energy =
[-1.20271196e+02 -1.22542378e+01 -6.65497877e+00 -6.65497877e+00
 -6.65497877e+00 -1.16353998e+00 -2.36452270e-01 -2.36452270e-01
 -2.36452270e-01  8.60590366e+01  6.75719552e+02  3.92899421e+03
  2.96687627e+04  1.56372141e+05  7.03814114e+05]
E1 = -706.5523673007154  E_coul = 198.9129185076406
cycle= 4 E= -507.639448793075  delta_E= -4.02e-11  |g|= 3.75e-07  |ddm|= 3.48e-06
    CPU time for cycle= 4      0.01 sec, wall time      0.02 sec
E1 = -706.5523673007154  E_coul = 198.9129185076406
  HOMO = -0.236452253877513  LUMO = 86.0590369314424
  mo_energy =
[-1.20271195e+02 -1.22542377e+01 -6.65497861e+00 -6.65497861e+00
 -6.65497861e+00 -1.16353997e+00 -2.36452254e-01 -2.36452254e-01
 -2.36452254e-01  8.60590369e+01  6.75719553e+02  3.92899421e+03
  2.96687627e+04  1.56372141e+05  7.03814114e+05]
E1 = -706.5523673380147  E_coul = 198.91291854493977
Extra cycle  E= -507.639448793075  delta_E= -1.14e-13  |g|= 6.48e-09  |ddm|= 1.66e-08
    CPU time for scf_cycle      0.09 sec, wall time      0.09 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 45.799985773736466
E1 = -706.5523673380147  E_coul = 198.91291854493977
init E= -507.639448793075
    CPU time for initialize scf      0.07 sec, wall time      0.07 sec
  HOMO = -0.236452253684968  LUMO = 86.059036935598
  mo_energy =
[-1.20271195e+02 -1.22542377e+01 -6.65497861e+00 -6.65497861e+00
 -6.65497861e+00 -1.16353997e+00 -2.36452254e-01 -2.36452254e-01
 -2.36452254e-01  8.60590369e+01  6.75719553e+02  3.92899421e+03
  2.96687627e+04  1.56372141e+05  7.03814114e+05]
E1 = -706.5523673385806  E_coul = 198.91291854550516
cycle= 1 E= -507.639448793075  delta_E= -4.55e-13  |g|= 1.29e-10  |ddm|= 2.56e-10
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -706.5523673385806  E_coul = 198.91291854550516
  HOMO = -0.236452253682247  LUMO = 86.0590369356567
  mo_energy =
[-1.20271195e+02 -1.22542377e+01 -6.65497861e+00 -6.65497861e+00
 -6.65497861e+00 -1.16353997e+00 -2.36452254e-01 -2.36452254e-01
 -2.36452254e-01  8.60590369e+01  6.75719553e+02  3.92899421e+03
  2.96687627e+04  1.56372141e+05  7.03814114e+05]
E1 = -706.5523673385903  E_coul = 198.912918545515
Extra cycle  E= -507.639448793075  delta_E= 1.14e-13  |g|= 1.87e-11  |ddm|= 4.57e-12
    CPU time for scf_cycle      0.14 sec, wall time      0.14 sec
exp = [2.93679452e+05 7.34198629e+04 1.83544153e+04 2.23375657e+03
 4.55094124e+02 1.21319994e+02 3.75176874e+01 4.74087901e+00
 3.91209465e-01 8.59866583e+00 4.90851756e-01]
grad_E = [ 9.33200777e-09 -3.26810062e-08  6.34589696e-06 -4.19031271e-06
 -3.72534455e-05  5.73112233e-05 -8.00469060e-05 -9.27453310e-05
  2.41180304e-04  7.13493808e-06  2.91415104e-05]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((11, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([7.3419862888950534e+04,1.8354415279684519e+04,2.2337565691104060e+03,4.5509411588185179e+02,1.2132000689951782e+02,3.7517668969809321e+01,4.7408530341284303e+00,3.9118871783972831e-01,8.5986666061044215e+00,4.9085282207620301e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "9s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:03:01 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  293679.451556        1
[INPUT] 0    0    [1    /1   ]  73419.8628891        1
[INPUT] 0    0    [1    /1   ]  18354.4152564        1
[INPUT] 0    0    [1    /1   ]  2233.75658447        1
[INPUT] 0    0    [1    /1   ]  455.094252503        1
[INPUT] 0    0    [1    /1   ]  121.319796442        1
[INPUT] 0    0    [1    /1   ]  37.5179633005        1
[INPUT] 0    0    [1    /1   ]  4.74124836163        1
[INPUT] 0    0    [1    /1   ]  0.391189211995       1
[INPUT] 1    0    [1    /1   ]  8.59865045971        1
[INPUT] 1    0    [1    /1   ]  0.490811263304       1

nuclear repulsion = 0
number of shells = 11
number of NR pGTOs = 15
number of NR cGTOs = 15
basis = {'Ar': [[0, [293679.4515557679, 1.0]], [0, [73419.86288907035, 1.0]], [0, [18354.415256417287, 1.0]], [0, [2233.756584472674, 1.0]], [0, [455.09425250277366, 1.0]], [0, [121.31979644240081, 1.0]], [0, [37.51796330050027, 1.0]], [0, [4.741248361634364, 1.0]], [0, [0.391189211995337, 1.0]], [1, [8.598650459711504, 1.0]], [1, [0.4908112633036118, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [293679.45155577]
bas 1, expnt(s) = [73419.86288907]
bas 2, expnt(s) = [18354.41525642]
bas 3, expnt(s) = [2233.75658447]
bas 4, expnt(s) = [455.0942525]
bas 5, expnt(s) = [121.31979644]
bas 6, expnt(s) = [37.5179633]
bas 7, expnt(s) = [4.74124836]
bas 8, expnt(s) = [0.39118921]
bas 9, expnt(s) = [8.59865046]
bas 10, expnt(s) = [0.49081126]
CPU time:        11.92
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]
 [ 0  1  1  1  0 44 45  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 2.93679452e+05 3.18727983e+04 7.34198629e+04 1.12687359e+04
 1.83544153e+04 3.98401018e+03 2.23375658e+03 8.20903124e+02
 4.55094253e+02 2.48937909e+02 1.21319796e+02 9.23557159e+01
 3.75179633e+01 3.82996200e+01 4.74124836e+00 8.11772909e+00
 3.91189212e-01 1.24969829e+00 8.59865046e+00 4.29558445e+01
 4.90811263e-01 1.19847104e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.320030574717883
cond(S) = 45.80096575310322
E1 = -688.8731229238933  E_coul = 184.9140569762283
init E= -503.959065947665
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.680946599535366  LUMO = 84.7319747886098
  mo_energy =
[-1.21650497e+02 -1.32812222e+01 -7.62168933e+00 -7.62168933e+00
 -7.62168933e+00 -1.65073378e+00 -6.80946600e-01 -6.80946600e-01
 -6.80946600e-01  8.47319748e+01  6.74361445e+02  3.92776043e+03
  2.96676953e+04  1.56371146e+05  7.03813150e+05]
E1 = -706.5827516794697  E_coul = 198.94373332983474
cycle= 1 E= -507.639018349635  delta_E= -3.68  |g|= 0.318  |ddm|= 0.301
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.417383
diis-c [-0.17420835  1.        ]
  HOMO = -0.236369907473179  LUMO = 86.0645563237382
  mo_energy =
[-1.20262454e+02 -1.22531695e+01 -6.65318972e+00 -6.65318972e+00
 -6.65318972e+00 -1.16355224e+00 -2.36369907e-01 -2.36369907e-01
 -2.36369907e-01  8.60645563e+01  6.75732138e+02  3.92901201e+03
  2.96687836e+04  1.56372162e+05  7.03814135e+05]
E1 = -706.551147678312  E_coul = 198.91169900955586
cycle= 2 E= -507.639448668756  delta_E= -0.00043  |g|= 0.00476  |ddm|= 0.0144
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.0050534
diis-c [-2.54929020e-05 -5.02303413e-04  1.00050230e+00]
  HOMO = -0.236546256768855  LUMO = 86.0610269965931
  mo_energy =
[-1.20271134e+02 -1.22543657e+01 -6.65504228e+00 -6.65504228e+00
 -6.65504228e+00 -1.16361743e+00 -2.36546257e-01 -2.36546257e-01
 -2.36546257e-01  8.60610270e+01  6.75721519e+02  3.92899606e+03
  2.96687643e+04  1.56372142e+05  7.03814115e+05]
E1 = -706.5507039985237  E_coul = 198.91125521865794
cycle= 3 E= -507.639448779866  delta_E= -1.11e-07  |g|= 9.52e-05  |ddm|= 0.000203
    CPU time for cycle= 3      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.00012733
diis-c [-3.97656223e-10  3.38417883e-05 -2.55169568e-02  1.02548312e+00]
  HOMO = -0.236548488564076  LUMO = 86.0609820335709
  mo_energy =
[-1.20271248e+02 -1.22543817e+01 -6.65506948e+00 -6.65506948e+00
 -6.65506948e+00 -1.16361809e+00 -2.36548489e-01 -2.36548489e-01
 -2.36548489e-01  8.60609820e+01  6.75721401e+02  3.92899592e+03
  2.96687641e+04  1.56372142e+05  7.03814115e+05]
E1 = -706.5506966845126  E_coul = 198.91124790460688
cycle= 4 E= -507.639448779906  delta_E= -4e-11  |g|= 3.75e-07  |ddm|= 3.48e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.5506966845126  E_coul = 198.91124790460688
  HOMO = -0.236548472134663  LUMO = 86.060982372663
  mo_energy =
[-1.20271247e+02 -1.22543815e+01 -6.65506932e+00 -6.65506932e+00
 -6.65506932e+00 -1.16361809e+00 -2.36548472e-01 -2.36548472e-01
 -2.36548472e-01  8.60609824e+01  6.75721402e+02  3.92899592e+03
  2.96687641e+04  1.56372142e+05  7.03814115e+05]
E1 = -706.5506967218049  E_coul = 198.91124794189892
Extra cycle  E= -507.639448779906  delta_E= -2.84e-13  |g|= 6.48e-09  |ddm|= 1.66e-08
    CPU time for scf_cycle      0.10 sec, wall time      0.11 sec
exp = [2.93679452e+05 7.34198629e+04 1.83544153e+04 2.23375658e+03
 4.55094253e+02 1.21319796e+02 3.75179633e+01 4.74124836e+00
 3.91189212e-01 8.59865046e+00 4.90811263e-01]
E = -507.639448779906
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((11, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([7.3419862888950534e+04,1.8354415279684519e+04,2.2337565691104060e+03,4.5509411588185179e+02,1.2132000689951782e+02,3.7517668969809321e+01,4.7408530341284303e+00,3.9118871783972831e-01,8.5986666061044215e+00,4.9085282207620301e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "9s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:03:01 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  293679.451556        1
[INPUT] 0    0    [1    /1   ]  73419.862889         1
[INPUT] 0    0    [1    /1   ]  18354.4152689        1
[INPUT] 0    0    [1    /1   ]  2233.75657624        1
[INPUT] 0    0    [1    /1   ]  455.094179287        1
[INPUT] 0    0    [1    /1   ]  121.319909224        1
[INPUT] 0    0    [1    /1   ]  37.5178055778        1
[INPUT] 0    0    [1    /1   ]  4.74103724255        1
[INPUT] 0    0    [1    /1   ]  0.391200788606       1
[INPUT] 1    0    [1    /1   ]  8.5986592467         1
[INPUT] 1    0    [1    /1   ]  0.490834408738       1

nuclear repulsion = 0
number of shells = 11
number of NR pGTOs = 15
number of NR cGTOs = 15
basis = {'Ar': [[0, [293679.45155578625, 1.0]], [0, [73419.86288900614, 1.0]], [0, [18354.41526888637, 1.0]], [0, [2233.7565762399026, 1.0]], [0, [455.0941792870464, 1.0]], [0, [121.31990922354186, 1.0]], [0, [37.517805577770076, 1.0]], [0, [4.74103724254627, 1.0]], [0, [0.39120078860624274, 1.0]], [1, [8.598659246700706, 1.0]], [1, [0.490834408738092, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [293679.45155579]
bas 1, expnt(s) = [73419.86288901]
bas 2, expnt(s) = [18354.41526889]
bas 3, expnt(s) = [2233.75657624]
bas 4, expnt(s) = [455.09417929]
bas 5, expnt(s) = [121.31990922]
bas 6, expnt(s) = [37.51780558]
bas 7, expnt(s) = [4.74103724]
bas 8, expnt(s) = [0.39120079]
bas 9, expnt(s) = [8.59865925]
bas 10, expnt(s) = [0.49083441]
CPU time:        12.10
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]
 [ 0  1  1  1  0 44 45  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 2.93679452e+05 3.18727983e+04 7.34198629e+04 1.12687359e+04
 1.83544153e+04 3.98401018e+03 2.23375658e+03 8.20903122e+02
 4.55094179e+02 2.48937879e+02 1.21319909e+02 9.23557803e+01
 3.75178056e+01 3.82994992e+01 4.74103724e+00 8.11745798e+00
 3.91200789e-01 1.24972603e+00 8.59865925e+00 4.29558993e+01
 4.90834409e-01 1.19854168e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.320002575535607
cond(S) = 45.80040559220208
E1 = -688.8739015907172  E_coul = 184.91481260901298
init E= -503.959088981704
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.680913706134505  LUMO = 84.73086137415
  mo_energy =
[-1.21650442e+02 -1.32811538e+01 -7.62164797e+00 -7.62164797e+00
 -7.62164797e+00 -1.65070601e+00 -6.80913706e-01 -6.80913706e-01
 -6.80913706e-01  8.47308614e+01  6.74360422e+02  3.92775951e+03
  2.96676946e+04  1.56371145e+05  7.03813149e+05]
E1 = -706.5837102546805  E_coul = 198.9446919673772
cycle= 1 E= -507.639018287303  delta_E= -3.68  |g|= 0.318  |ddm|= 0.301
    CPU time for cycle= 1      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.417381
diis-c [-0.17420729  1.        ]
  HOMO = -0.236314877891654  LUMO = 86.063444719814
  mo_energy =
[-1.20262423e+02 -1.22530872e+01 -6.65313765e+00 -6.65313765e+00
 -6.65313765e+00 -1.16350758e+00 -2.36314878e-01 -2.36314878e-01
 -2.36314878e-01  8.60634447e+01  6.75731082e+02  3.92901104e+03
  2.96687828e+04  1.56372162e+05  7.03814135e+05]
E1 = -706.5521027071927  E_coul = 198.9126540084194
cycle= 2 E= -507.639448698773  delta_E= -0.00043  |g|= 0.00476  |ddm|= 0.0144
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00505422
diis-c [-2.55011704e-05 -5.02774979e-04  1.00050277e+00]
  HOMO = -0.236491259098584  LUMO = 86.0599149942848
  mo_energy =
[-1.20271104e+02 -1.22542835e+01 -6.65499043e+00 -6.65499043e+00
 -6.65499043e+00 -1.16357278e+00 -2.36491259e-01 -2.36491259e-01
 -2.36491259e-01  8.60599150e+01  6.75720462e+02  3.92899509e+03
  2.96687635e+04  1.56372142e+05  7.03814114e+05]
E1 = -706.5516589698153  E_coul = 198.9122101599028
cycle= 3 E= -507.639448809913  delta_E= -1.11e-07  |g|= 9.52e-05  |ddm|= 0.000203
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.000127346
diis-c [-3.97712381e-10  3.38383126e-05 -2.55161531e-02  1.02548231e+00]
  HOMO = -0.236493491275429  LUMO = 86.059870027175
  mo_energy =
[-1.20271218e+02 -1.22542994e+01 -6.65501763e+00 -6.65501763e+00
 -6.65501763e+00 -1.16357344e+00 -2.36493491e-01 -2.36493491e-01
 -2.36493491e-01  8.60598700e+01  6.75720344e+02  3.92899494e+03
  2.96687633e+04  1.56372141e+05  7.03814114e+05]
E1 = -706.5516516550084  E_coul = 198.9122028450554
cycle= 4 E= -507.639448809953  delta_E= -4.05e-11  |g|= 3.75e-07  |ddm|= 3.48e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.5516516550084  E_coul = 198.9122028450554
  HOMO = -0.23649347484324  LUMO = 86.0598703663039
  mo_energy =
[-1.20271217e+02 -1.22542993e+01 -6.65501747e+00 -6.65501747e+00
 -6.65501747e+00 -1.16357344e+00 -2.36493475e-01 -2.36493475e-01
 -2.36493475e-01  8.60598704e+01  6.75720345e+02  3.92899494e+03
  2.96687633e+04  1.56372141e+05  7.03814114e+05]
E1 = -706.5516516923049  E_coul = 198.91220288235158
Extra cycle  E= -507.639448809953  delta_E= -2.27e-13  |g|= 6.48e-09  |ddm|= 1.66e-08
    CPU time for scf_cycle      0.10 sec, wall time      0.11 sec
exp = [2.93679452e+05 7.34198629e+04 1.83544153e+04 2.23375658e+03
 4.55094179e+02 1.21319909e+02 3.75178056e+01 4.74103724e+00
 3.91200789e-01 8.59865925e+00 4.90834409e-01]
E = -507.63944880995325
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((11, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([7.3419862888950534e+04,1.8354415279684519e+04,2.2337565691104060e+03,4.5509411588185179e+02,1.2132000689951782e+02,3.7517668969809321e+01,4.7408530341284303e+00,3.9118871783972831e-01,8.5986666061044215e+00,4.9085282207620301e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "9s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:03:01 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  293679.451556        1
[INPUT] 0    0    [1    /1   ]  73419.862889         1
[INPUT] 0    0    [1    /1   ]  18354.4152689        1
[INPUT] 0    0    [1    /1   ]  2233.75657624        1
[INPUT] 0    0    [1    /1   ]  455.094179287        1
[INPUT] 0    0    [1    /1   ]  121.319909224        1
[INPUT] 0    0    [1    /1   ]  37.5178055778        1
[INPUT] 0    0    [1    /1   ]  4.74103724255        1
[INPUT] 0    0    [1    /1   ]  0.391200788606       1
[INPUT] 1    0    [1    /1   ]  8.5986592467         1
[INPUT] 1    0    [1    /1   ]  0.490834408738       1

nuclear repulsion = 0
number of shells = 11
number of NR pGTOs = 15
number of NR cGTOs = 15
basis = {'Ar': [[0, [293679.45155578625, 1.0]], [0, [73419.86288900614, 1.0]], [0, [18354.41526888637, 1.0]], [0, [2233.7565762399026, 1.0]], [0, [455.0941792870464, 1.0]], [0, [121.31990922354186, 1.0]], [0, [37.517805577770076, 1.0]], [0, [4.74103724254627, 1.0]], [0, [0.39120078860624274, 1.0]], [1, [8.598659246700706, 1.0]], [1, [0.490834408738092, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [293679.45155579]
bas 1, expnt(s) = [73419.86288901]
bas 2, expnt(s) = [18354.41526889]
bas 3, expnt(s) = [2233.75657624]
bas 4, expnt(s) = [455.09417929]
bas 5, expnt(s) = [121.31990922]
bas 6, expnt(s) = [37.51780558]
bas 7, expnt(s) = [4.74103724]
bas 8, expnt(s) = [0.39120079]
bas 9, expnt(s) = [8.59865925]
bas 10, expnt(s) = [0.49083441]
CPU time:        12.28
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]
 [ 0  1  1  1  0 44 45  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 2.93679452e+05 3.18727983e+04 7.34198629e+04 1.12687359e+04
 1.83544153e+04 3.98401018e+03 2.23375658e+03 8.20903122e+02
 4.55094179e+02 2.48937879e+02 1.21319909e+02 9.23557803e+01
 3.75178056e+01 3.82994992e+01 4.74103724e+00 8.11745798e+00
 3.91200789e-01 1.24972603e+00 8.59865925e+00 4.29558993e+01
 4.90834409e-01 1.19854168e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.320002575535607
cond(S) = 45.80040559220208
E1 = -688.8739015907172  E_coul = 184.91481260901298
init E= -503.959088981704
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.680913706134505  LUMO = 84.73086137415
  mo_energy =
[-1.21650442e+02 -1.32811538e+01 -7.62164797e+00 -7.62164797e+00
 -7.62164797e+00 -1.65070601e+00 -6.80913706e-01 -6.80913706e-01
 -6.80913706e-01  8.47308614e+01  6.74360422e+02  3.92775951e+03
  2.96676946e+04  1.56371145e+05  7.03813149e+05]
E1 = -706.5837102546805  E_coul = 198.9446919673772
cycle= 1 E= -507.639018287303  delta_E= -3.68  |g|= 0.318  |ddm|= 0.301
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.417381
diis-c [-0.17420729  1.        ]
  HOMO = -0.236314877891654  LUMO = 86.063444719814
  mo_energy =
[-1.20262423e+02 -1.22530872e+01 -6.65313765e+00 -6.65313765e+00
 -6.65313765e+00 -1.16350758e+00 -2.36314878e-01 -2.36314878e-01
 -2.36314878e-01  8.60634447e+01  6.75731082e+02  3.92901104e+03
  2.96687828e+04  1.56372162e+05  7.03814135e+05]
E1 = -706.5521027071927  E_coul = 198.9126540084194
cycle= 2 E= -507.639448698773  delta_E= -0.00043  |g|= 0.00476  |ddm|= 0.0144
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00505422
diis-c [-2.55011704e-05 -5.02774979e-04  1.00050277e+00]
  HOMO = -0.236491259098584  LUMO = 86.0599149942848
  mo_energy =
[-1.20271104e+02 -1.22542835e+01 -6.65499043e+00 -6.65499043e+00
 -6.65499043e+00 -1.16357278e+00 -2.36491259e-01 -2.36491259e-01
 -2.36491259e-01  8.60599150e+01  6.75720462e+02  3.92899509e+03
  2.96687635e+04  1.56372142e+05  7.03814114e+05]
E1 = -706.5516589698153  E_coul = 198.9122101599028
cycle= 3 E= -507.639448809913  delta_E= -1.11e-07  |g|= 9.52e-05  |ddm|= 0.000203
    CPU time for cycle= 3      0.03 sec, wall time      0.05 sec
diis-norm(errvec)=0.000127346
diis-c [-3.97712381e-10  3.38383126e-05 -2.55161531e-02  1.02548231e+00]
  HOMO = -0.236493491275429  LUMO = 86.059870027175
  mo_energy =
[-1.20271218e+02 -1.22542994e+01 -6.65501763e+00 -6.65501763e+00
 -6.65501763e+00 -1.16357344e+00 -2.36493491e-01 -2.36493491e-01
 -2.36493491e-01  8.60598700e+01  6.75720344e+02  3.92899494e+03
  2.96687633e+04  1.56372141e+05  7.03814114e+05]
E1 = -706.5516516550084  E_coul = 198.9122028450554
cycle= 4 E= -507.639448809953  delta_E= -4.05e-11  |g|= 3.75e-07  |ddm|= 3.48e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.03 sec
E1 = -706.5516516550084  E_coul = 198.9122028450554
  HOMO = -0.23649347484324  LUMO = 86.0598703663039
  mo_energy =
[-1.20271217e+02 -1.22542993e+01 -6.65501747e+00 -6.65501747e+00
 -6.65501747e+00 -1.16357344e+00 -2.36493475e-01 -2.36493475e-01
 -2.36493475e-01  8.60598704e+01  6.75720345e+02  3.92899494e+03
  2.96687633e+04  1.56372141e+05  7.03814114e+05]
E1 = -706.5516516923049  E_coul = 198.91220288235158
Extra cycle  E= -507.639448809953  delta_E= -2.27e-13  |g|= 6.48e-09  |ddm|= 1.66e-08
    CPU time for scf_cycle      0.13 sec, wall time      0.17 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 45.80040559220208
E1 = -706.5516516923049  E_coul = 198.91220288235158
init E= -507.639448809953
    CPU time for initialize scf      0.08 sec, wall time      0.08 sec
  HOMO = -0.23649347465072  LUMO = 86.0598703704581
  mo_energy =
[-1.20271217e+02 -1.22542993e+01 -6.65501746e+00 -6.65501746e+00
 -6.65501746e+00 -1.16357344e+00 -2.36493475e-01 -2.36493475e-01
 -2.36493475e-01  8.60598704e+01  6.75720345e+02  3.92899494e+03
  2.96687633e+04  1.56372141e+05  7.03814114e+05]
E1 = -706.5516516928699  E_coul = 198.91220288291694
cycle= 1 E= -507.639448809953  delta_E= 3.41e-13  |g|= 1.32e-10  |ddm|= 2.57e-10
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -706.5516516928699  E_coul = 198.91220288291694
  HOMO = -0.236493474648004  LUMO = 86.0598703705185
  mo_energy =
[-1.20271217e+02 -1.22542993e+01 -6.65501746e+00 -6.65501746e+00
 -6.65501746e+00 -1.16357344e+00 -2.36493475e-01 -2.36493475e-01
 -2.36493475e-01  8.60598704e+01  6.75720345e+02  3.92899494e+03
  2.96687633e+04  1.56372141e+05  7.03814114e+05]
E1 = -706.5516516928794  E_coul = 198.91220288292655
Extra cycle  E= -507.639448809953  delta_E=    0  |g|= 2.21e-11  |ddm|= 4.53e-12
    CPU time for scf_cycle      0.14 sec, wall time      0.15 sec
exp = [2.93679452e+05 7.34198629e+04 1.83544153e+04 2.23375658e+03
 4.55094179e+02 1.21319909e+02 3.75178056e+01 4.74103724e+00
 3.91200789e-01 8.59865925e+00 4.90834409e-01]
grad_E = [ 9.33208627e-09 -3.26808919e-08  6.34594649e-06 -4.19455689e-06
 -3.71649454e-05  5.63629772e-05 -7.72052058e-05  3.76669292e-05
  4.25461153e-05  2.70801281e-05 -6.11212481e-04]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((11, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([7.3419862888950534e+04,1.8354415279684519e+04,2.2337565691104060e+03,4.5509411588185179e+02,1.2132000689951782e+02,3.7517668969809321e+01,4.7408530341284303e+00,3.9118871783972831e-01,8.5986666061044215e+00,4.9085282207620301e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "9s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:03:04 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  293679.451556        1
[INPUT] 0    0    [1    /1   ]  73419.8628896        1
[INPUT] 0    0    [1    /1   ]  18354.4151551        1
[INPUT] 0    0    [1    /1   ]  2233.75665138        1
[INPUT] 0    0    [1    /1   ]  455.094847372        1
[INPUT] 0    0    [1    /1   ]  121.318880995        1
[INPUT] 0    0    [1    /1   ]  37.5192419224        1
[INPUT] 0    0    [1    /1   ]  4.74281884667        1
[INPUT] 0    0    [1    /1   ]  0.391058491956       1
[INPUT] 1    0    [1    /1   ]  8.59855644684        1
[INPUT] 1    0    [1    /1   ]  0.491246170314       1

nuclear repulsion = 0
number of shells = 11
number of NR pGTOs = 15
number of NR cGTOs = 15
basis = {'Ar': [[0, [293679.4515556189, 1.0]], [0, [73419.86288959217, 1.0]], [0, [18354.415155091, 1.0]], [0, [2233.7566513784786, 1.0]], [0, [455.09484737172045, 1.0]], [0, [121.31888099495772, 1.0]], [0, [37.519241922422445, 1.0]], [0, [4.74281884666556, 1.0]], [0, [0.39105849195646797, 1.0]], [1, [8.598556446839963, 1.0]], [1, [0.49124617031423745, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [293679.45155562]
bas 1, expnt(s) = [73419.86288959]
bas 2, expnt(s) = [18354.41515509]
bas 3, expnt(s) = [2233.75665138]
bas 4, expnt(s) = [455.09484737]
bas 5, expnt(s) = [121.31888099]
bas 6, expnt(s) = [37.51924192]
bas 7, expnt(s) = [4.74281885]
bas 8, expnt(s) = [0.39105849]
bas 9, expnt(s) = [8.59855645]
bas 10, expnt(s) = [0.49124617]
CPU time:        15.15
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]
 [ 0  1  1  1  0 44 45  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 2.93679452e+05 3.18727983e+04 7.34198629e+04 1.12687359e+04
 1.83544152e+04 3.98401016e+03 2.23375665e+03 8.20903143e+02
 4.55094847e+02 2.48938153e+02 1.21318881e+02 9.23551932e+01
 3.75192419e+01 3.83005989e+01 4.74281885e+00 8.11974568e+00
 3.91058492e-01 1.24938508e+00 8.59855645e+00 4.29552574e+01
 4.91246170e-01 1.19979864e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319461950419317
cond(S) = 45.80515854177259
E1 = -688.888559890501  E_coul = 184.92778822244014
init E= -503.960771668061
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.680469456230321  LUMO = 84.7419114797438
  mo_energy =
[-1.21649252e+02 -1.32800987e+01 -7.62084452e+00 -7.62084452e+00
 -7.62084452e+00 -1.65037073e+00 -6.80469456e-01 -6.80469456e-01
 -6.80469456e-01  8.47419115e+01  6.74370815e+02  3.92776914e+03
  2.96677028e+04  1.56371152e+05  7.03813155e+05]
E1 = -706.6065648356598  E_coul = 198.96755030709778
cycle= 1 E= -507.639014528562  delta_E= -3.68  |g|= 0.318  |ddm|= 0.301
    CPU time for cycle= 1      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.417414
diis-c [-0.17423468  1.        ]
  HOMO = -0.235412350999495  LUMO = 86.075274288407
  mo_energy =
[-1.20260219e+02 -1.22514159e+01 -6.65173702e+00 -6.65173702e+00
 -6.65173702e+00 -1.16286055e+00 -2.35412351e-01 -2.35412351e-01
 -2.35412351e-01  8.60752743e+01  6.75742563e+02  3.92902189e+03
  2.96687924e+04  1.56372170e+05  7.03814142e+05]
E1 = -706.574978537307  E_coul = 198.93553413187095
cycle= 2 E= -507.639444405436  delta_E= -0.00043  |g|= 0.00475  |ddm|= 0.0143
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00504837
diis-c [-2.54427612e-05 -4.98734145e-04  1.00049873e+00]
  HOMO = -0.235588888019431  LUMO = 86.0717470204649
  mo_energy =
[-1.20268895e+02 -1.22526116e+01 -6.65358815e+00 -6.65358815e+00
 -6.65358815e+00 -1.16292572e+00 -2.35588888e-01 -2.35588888e-01
 -2.35588888e-01  8.60717470e+01  6.75731950e+02  3.92900595e+03
  2.96687731e+04  1.56372150e+05  7.03814122e+05]
E1 = -706.5745351759685  E_coul = 198.93509065959222
cycle= 3 E= -507.639444516376  delta_E= -1.11e-07  |g|= 9.52e-05  |ddm|= 0.000203
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.000127237
diis-c [-3.97506634e-10  3.38651891e-05 -2.55225009e-02  1.02548864e+00]
  HOMO = -0.235591122626316  LUMO = 86.0717020770673
  mo_energy =
[-1.20269009e+02 -1.22526275e+01 -6.65361533e+00 -6.65361533e+00
 -6.65361533e+00 -1.16292638e+00 -2.35591123e-01 -2.35591123e-01
 -2.35591123e-01  8.60717021e+01  6.75731832e+02  3.92900580e+03
  2.96687729e+04  1.56372150e+05  7.03814122e+05]
E1 = -706.5745278661876  E_coul = 198.935083349771
cycle= 4 E= -507.639444516417  delta_E= -4.03e-11  |g|= 3.75e-07  |ddm|= 3.48e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.5745278661876  E_coul = 198.935083349771
  HOMO = -0.235591106179519  LUMO = 86.0717024159523
  mo_energy =
[-1.20269008e+02 -1.22526274e+01 -6.65361517e+00 -6.65361517e+00
 -6.65361517e+00 -1.16292638e+00 -2.35591106e-01 -2.35591106e-01
 -2.35591106e-01  8.60717024e+01  6.75731833e+02  3.92900581e+03
  2.96687729e+04  1.56372150e+05  7.03814122e+05]
E1 = -706.5745279034576  E_coul = 198.93508338704098
Extra cycle  E= -507.639444516417  delta_E= 5.68e-14  |g|= 6.48e-09  |ddm|= 1.66e-08
    CPU time for scf_cycle      0.10 sec, wall time      0.11 sec
exp = [2.93679452e+05 7.34198629e+04 1.83544152e+04 2.23375665e+03
 4.55094847e+02 1.21318881e+02 3.75192419e+01 4.74281885e+00
 3.91058492e-01 8.59855645e+00 4.91246170e-01]
E = -507.6394445164166
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((11, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([7.3419862888950534e+04,1.8354415279684519e+04,2.2337565691104060e+03,4.5509411588185179e+02,1.2132000689951782e+02,3.7517668969809321e+01,4.7408530341284303e+00,3.9118871783972831e-01,8.5986666061044215e+00,4.9085282207620301e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "9s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:03:04 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  293679.451556        1
[INPUT] 0    0    [1    /1   ]  73419.8628891        1
[INPUT] 0    0    [1    /1   ]  18354.4152575        1
[INPUT] 0    0    [1    /1   ]  2233.75658375        1
[INPUT] 0    0    [1    /1   ]  455.094246096        1
[INPUT] 0    0    [1    /1   ]  121.319806401        1
[INPUT] 0    0    [1    /1   ]  37.5179492122        1
[INPUT] 0    0    [1    /1   ]  4.74121540296        1
[INPUT] 0    0    [1    /1   ]  0.391186558941       1
[INPUT] 1    0    [1    /1   ]  8.59864896671        1
[INPUT] 1    0    [1    /1   ]  0.490875584896       1

nuclear repulsion = 0
number of shells = 11
number of NR pGTOs = 15
number of NR cGTOs = 15
basis = {'Ar': [[0, [293679.45155576954, 1.0]], [0, [73419.86288906474, 1.0]], [0, [18354.415257506833, 1.0]], [0, [2233.7565837537604, 1.0]], [0, [455.0942460955138, 1.0]], [0, [121.31980640068345, 1.0]], [0, [37.517949212235315, 1.0]], [0, [4.741215402958199, 1.0]], [0, [0.39118655894126525, 1.0]], [1, [8.59864896671463, 1.0]], [1, [0.49087558489570654, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [293679.45155577]
bas 1, expnt(s) = [73419.86288906]
bas 2, expnt(s) = [18354.41525751]
bas 3, expnt(s) = [2233.75658375]
bas 4, expnt(s) = [455.0942461]
bas 5, expnt(s) = [121.3198064]
bas 6, expnt(s) = [37.51794921]
bas 7, expnt(s) = [4.7412154]
bas 8, expnt(s) = [0.39118656]
bas 9, expnt(s) = [8.59864897]
bas 10, expnt(s) = [0.49087558]
CPU time:        15.33
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]
 [ 0  1  1  1  0 44 45  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 2.93679452e+05 3.18727983e+04 7.34198629e+04 1.12687359e+04
 1.83544153e+04 3.98401018e+03 2.23375658e+03 8.20903124e+02
 4.55094246e+02 2.48937906e+02 1.21319806e+02 9.23557216e+01
 3.75179492e+01 3.82996092e+01 4.74121540e+00 8.11768676e+00
 3.91186559e-01 1.24969194e+00 8.59864897e+00 4.29558351e+01
 4.90875585e-01 1.19866737e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319948651244808
cond(S) = 45.80088082695728
E1 = -688.8753707459033  E_coul = 184.91611254472895
init E= -503.959258201174
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.680869249368925  LUMO = 84.7319665707453
  mo_energy =
[-1.21650323e+02 -1.32810482e+01 -7.62156744e+00 -7.62156744e+00
 -7.62156744e+00 -1.65067238e+00 -6.80869249e-01 -6.80869249e-01
 -6.80869249e-01  8.47319666e+01  6.74361461e+02  3.92776047e+03
  2.96676954e+04  1.56371146e+05  7.03813150e+05]
E1 = -706.585996819112  E_coul = 198.9469784862894
cycle= 1 E= -507.639018332823  delta_E= -3.68  |g|= 0.318  |ddm|= 0.301
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.417385
diis-c [-0.17421003  1.        ]
  HOMO = -0.236224667554231  LUMO = 86.0646277384002
  mo_energy =
[-1.20262202e+02 -1.22529201e+01 -6.65299752e+00 -6.65299752e+00
 -6.65299752e+00 -1.16344286e+00 -2.36224668e-01 -2.36224668e-01
 -2.36224668e-01  8.60646277e+01  6.75732230e+02  3.92901212e+03
  2.96687837e+04  1.56372163e+05  7.03814135e+05]
E1 = -706.5543913975515  E_coul = 198.91494270677327
cycle= 2 E= -507.639448690778  delta_E= -0.00043  |g|= 0.00476  |ddm|= 0.0144
    CPU time for cycle= 2      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.00505364
diis-c [-2.54953248e-05 -5.02370056e-04  1.00050237e+00]
  HOMO = -0.236401064345809  LUMO = 86.0610982587384
  mo_energy =
[-1.20270883e+02 -1.22541163e+01 -6.65485014e+00 -6.65485014e+00
 -6.65485014e+00 -1.16350805e+00 -2.36401064e-01 -2.36401064e-01
 -2.36401064e-01  8.60610983e+01  6.75721611e+02  3.92899617e+03
  2.96687644e+04  1.56372142e+05  7.03814115e+05]
E1 = -706.5539476977929  E_coul = 198.91449889589484
cycle= 3 E= -507.639448801898  delta_E= -1.11e-07  |g|= 9.52e-05  |ddm|= 0.000203
    CPU time for cycle= 3      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.000127335
diis-c [-3.97691539e-10  3.38410211e-05 -2.55167890e-02  1.02548295e+00]
  HOMO = -0.236403296765856  LUMO = 86.061053293996
  mo_energy =
[-1.20270997e+02 -1.22541323e+01 -6.65487733e+00 -6.65487733e+00
 -6.65487733e+00 -1.16350871e+00 -2.36403297e-01 -2.36403297e-01
 -2.36403297e-01  8.60610533e+01  6.75721493e+02  3.92899603e+03
  2.96687643e+04  1.56372142e+05  7.03814115e+05]
E1 = -706.5539403834875  E_coul = 198.91449158154984
cycle= 4 E= -507.639448801938  delta_E= -3.97e-11  |g|= 3.75e-07  |ddm|= 3.48e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.5539403834875  E_coul = 198.91449158154984
  HOMO = -0.236403280332209  LUMO = 86.0610536331008
  mo_energy =
[-1.20270996e+02 -1.22541321e+01 -6.65487717e+00 -6.65487717e+00
 -6.65487717e+00 -1.16350871e+00 -2.36403280e-01 -2.36403280e-01
 -2.36403280e-01  8.60610536e+01  6.75721494e+02  3.92899603e+03
  2.96687643e+04  1.56372142e+05  7.03814115e+05]
E1 = -706.5539404207816  E_coul = 198.9144916188435
Extra cycle  E= -507.639448801938  delta_E= -3.98e-13  |g|= 6.48e-09  |ddm|= 1.66e-08
    CPU time for scf_cycle      0.09 sec, wall time      0.10 sec
exp = [2.93679452e+05 7.34198629e+04 1.83544153e+04 2.23375658e+03
 4.55094246e+02 1.21319806e+02 3.75179492e+01 4.74121540e+00
 3.91186559e-01 8.59864897e+00 4.90875585e-01]
E = -507.6394488019381
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((11, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([7.3419862888950534e+04,1.8354415279684519e+04,2.2337565691104060e+03,4.5509411588185179e+02,1.2132000689951782e+02,3.7517668969809321e+01,4.7408530341284303e+00,3.9118871783972831e-01,8.5986666061044215e+00,4.9085282207620301e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "9s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:03:04 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  293679.451556        1
[INPUT] 0    0    [1    /1   ]  73419.862889         1
[INPUT] 0    0    [1    /1   ]  18354.4152642        1
[INPUT] 0    0    [1    /1   ]  2233.75657935        1
[INPUT] 0    0    [1    /1   ]  455.094206974        1
[INPUT] 0    0    [1    /1   ]  121.319866612        1
[INPUT] 0    0    [1    /1   ]  37.5178651024        1
[INPUT] 0    0    [1    /1   ]  4.74111107532        1
[INPUT] 0    0    [1    /1   ]  0.391194891586       1
[INPUT] 1    0    [1    /1   ]  8.5986549865         1
[INPUT] 1    0    [1    /1   ]  0.490851472854       1

nuclear repulsion = 0
number of shells = 11
number of NR pGTOs = 15
number of NR cGTOs = 15
basis = {'Ar': [[0, [293679.4515557793, 1.0]], [0, [73419.86288903042, 1.0]], [0, [18354.41526417049, 1.0]], [0, [2233.756579353776, 1.0]], [0, [455.09420697363686, 1.0]], [0, [121.3198666119616, 1.0]], [0, [37.51786510238976, 1.0]], [0, [4.741111075318551, 1.0]], [0, [0.39119489158567267, 1.0]], [1, [8.598654986495744, 1.0]], [1, [0.49085147285371483, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [293679.45155578]
bas 1, expnt(s) = [73419.86288903]
bas 2, expnt(s) = [18354.41526417]
bas 3, expnt(s) = [2233.75657935]
bas 4, expnt(s) = [455.09420697]
bas 5, expnt(s) = [121.31986661]
bas 6, expnt(s) = [37.5178651]
bas 7, expnt(s) = [4.74111108]
bas 8, expnt(s) = [0.39119489]
bas 9, expnt(s) = [8.59865499]
bas 10, expnt(s) = [0.49085147]
CPU time:        15.50
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]
 [ 0  1  1  1  0 44 45  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 2.93679452e+05 3.18727983e+04 7.34198629e+04 1.12687359e+04
 1.83544153e+04 3.98401018e+03 2.23375658e+03 8.20903123e+02
 4.55094207e+02 2.48937890e+02 1.21319867e+02 9.23557559e+01
 3.75178651e+01 3.82995448e+01 4.74111108e+00 8.11755279e+00
 3.91194892e-01 1.24971190e+00 8.59865499e+00 4.29558727e+01
 4.90851473e-01 1.19859377e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.31998023210224
cond(S) = 45.80060253612406
E1 = -688.8745105238697  E_coul = 184.91535138902796
init E= -503.959159134842
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.680895281620709  LUMO = 84.731319391852
  mo_energy =
[-1.21650393e+02 -1.32811101e+01 -7.62161459e+00 -7.62161459e+00
 -7.62161459e+00 -1.65069207e+00 -6.80895282e-01 -6.80895282e-01
 -6.80895282e-01  8.47313194e+01  6.74360852e+02  3.92775991e+03
  2.96676949e+04  1.56371145e+05  7.03813149e+05]
E1 = -706.584657876576  E_coul = 198.94563955904343
cycle= 1 E= -507.639018317533  delta_E= -3.68  |g|= 0.318  |ddm|= 0.301
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.417383
diis-c [-0.17420843  1.        ]
  HOMO = -0.23627749430181  LUMO = 86.0639349849497
  mo_energy =
[-1.20262332e+02 -1.22530179e+01 -6.65307958e+00 -6.65307958e+00
 -6.65307958e+00 -1.16348076e+00 -2.36277494e-01 -2.36277494e-01
 -2.36277494e-01  8.60639350e+01  6.75731557e+02  3.92901149e+03
  2.96687832e+04  1.56372162e+05  7.03814135e+05]
E1 = -706.5530512101368  E_coul = 198.91360250331297
cycle= 2 E= -507.639448706824  delta_E= -0.00043  |g|= 0.00476  |ddm|= 0.0144
    CPU time for cycle= 2      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.00505398
diis-c [-2.54987478e-05 -5.02607130e-04  1.00050261e+00]
  HOMO = -0.236453881967376  LUMO = 86.0604053613132
  mo_energy =
[-1.20271012e+02 -1.22542142e+01 -6.65493229e+00 -6.65493229e+00
 -6.65493229e+00 -1.16354596e+00 -2.36453882e-01 -2.36453882e-01
 -2.36453882e-01  8.60604054e+01  6.75720938e+02  3.92899554e+03
  2.96687639e+04  1.56372142e+05  7.03814115e+05]
E1 = -706.5526074883493  E_coul = 198.91315867039464
cycle= 3 E= -507.639448817955  delta_E= -1.11e-07  |g|= 9.52e-05  |ddm|= 0.000203
    CPU time for cycle= 3      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.000127342
diis-c [-3.97704368e-10  3.38393118e-05 -2.55164138e-02  1.02548257e+00]
  HOMO = -0.236456114245038  LUMO = 86.0603603951869
  mo_energy =
[-1.20271127e+02 -1.22542302e+01 -6.65495949e+00 -6.65495949e+00
 -6.65495949e+00 -1.16354662e+00 -2.36456114e-01 -2.36456114e-01
 -2.36456114e-01  8.60603604e+01  6.75720820e+02  3.92899539e+03
  2.96687637e+04  1.56372142e+05  7.03814114e+05]
E1 = -706.5526001737512  E_coul = 198.91315135575584
cycle= 4 E= -507.639448817995  delta_E= -4.07e-11  |g|= 3.75e-07  |ddm|= 3.48e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.5526001737512  E_coul = 198.91315135575584
  HOMO = -0.236456097812217  LUMO = 86.0603607343042
  mo_energy =
[-1.20271126e+02 -1.22542300e+01 -6.65495932e+00 -6.65495932e+00
 -6.65495932e+00 -1.16354661e+00 -2.36456098e-01 -2.36456098e-01
 -2.36456098e-01  8.60603607e+01  6.75720821e+02  3.92899539e+03
  2.96687637e+04  1.56372142e+05  7.03814114e+05]
E1 = -706.5526002110455  E_coul = 198.9131513930505
Extra cycle  E= -507.639448817995  delta_E= 3.41e-13  |g|= 6.48e-09  |ddm|= 1.66e-08
    CPU time for scf_cycle      0.09 sec, wall time      0.10 sec
exp = [2.93679452e+05 7.34198629e+04 1.83544153e+04 2.23375658e+03
 4.55094207e+02 1.21319867e+02 3.75178651e+01 4.74111108e+00
 3.91194892e-01 8.59865499e+00 4.90851473e-01]
E = -507.639448817995
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((11, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([7.3419862888950534e+04,1.8354415279684519e+04,2.2337565691104060e+03,4.5509411588185179e+02,1.2132000689951782e+02,3.7517668969809321e+01,4.7408530341284303e+00,3.9118871783972831e-01,8.5986666061044215e+00,4.9085282207620301e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "9s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:03:04 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  293679.451556        1
[INPUT] 0    0    [1    /1   ]  73419.862889         1
[INPUT] 0    0    [1    /1   ]  18354.4152642        1
[INPUT] 0    0    [1    /1   ]  2233.75657935        1
[INPUT] 0    0    [1    /1   ]  455.094206974        1
[INPUT] 0    0    [1    /1   ]  121.319866612        1
[INPUT] 0    0    [1    /1   ]  37.5178651024        1
[INPUT] 0    0    [1    /1   ]  4.74111107532        1
[INPUT] 0    0    [1    /1   ]  0.391194891586       1
[INPUT] 1    0    [1    /1   ]  8.5986549865         1
[INPUT] 1    0    [1    /1   ]  0.490851472854       1

nuclear repulsion = 0
number of shells = 11
number of NR pGTOs = 15
number of NR cGTOs = 15
basis = {'Ar': [[0, [293679.4515557793, 1.0]], [0, [73419.86288903042, 1.0]], [0, [18354.41526417049, 1.0]], [0, [2233.756579353776, 1.0]], [0, [455.09420697363686, 1.0]], [0, [121.3198666119616, 1.0]], [0, [37.51786510238976, 1.0]], [0, [4.741111075318551, 1.0]], [0, [0.39119489158567267, 1.0]], [1, [8.598654986495744, 1.0]], [1, [0.49085147285371483, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [293679.45155578]
bas 1, expnt(s) = [73419.86288903]
bas 2, expnt(s) = [18354.41526417]
bas 3, expnt(s) = [2233.75657935]
bas 4, expnt(s) = [455.09420697]
bas 5, expnt(s) = [121.31986661]
bas 6, expnt(s) = [37.5178651]
bas 7, expnt(s) = [4.74111108]
bas 8, expnt(s) = [0.39119489]
bas 9, expnt(s) = [8.59865499]
bas 10, expnt(s) = [0.49085147]
CPU time:        15.68
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]
 [ 0  1  1  1  0 44 45  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 2.93679452e+05 3.18727983e+04 7.34198629e+04 1.12687359e+04
 1.83544153e+04 3.98401018e+03 2.23375658e+03 8.20903123e+02
 4.55094207e+02 2.48937890e+02 1.21319867e+02 9.23557559e+01
 3.75178651e+01 3.82995448e+01 4.74111108e+00 8.11755279e+00
 3.91194892e-01 1.24971190e+00 8.59865499e+00 4.29558727e+01
 4.90851473e-01 1.19859377e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.31998023210224
cond(S) = 45.80060253612406
E1 = -688.8745105238697  E_coul = 184.91535138902796
init E= -503.959159134842
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.680895281620709  LUMO = 84.731319391852
  mo_energy =
[-1.21650393e+02 -1.32811101e+01 -7.62161459e+00 -7.62161459e+00
 -7.62161459e+00 -1.65069207e+00 -6.80895282e-01 -6.80895282e-01
 -6.80895282e-01  8.47313194e+01  6.74360852e+02  3.92775991e+03
  2.96676949e+04  1.56371145e+05  7.03813149e+05]
E1 = -706.584657876576  E_coul = 198.94563955904343
cycle= 1 E= -507.639018317533  delta_E= -3.68  |g|= 0.318  |ddm|= 0.301
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.417383
diis-c [-0.17420843  1.        ]
  HOMO = -0.23627749430181  LUMO = 86.0639349849497
  mo_energy =
[-1.20262332e+02 -1.22530179e+01 -6.65307958e+00 -6.65307958e+00
 -6.65307958e+00 -1.16348076e+00 -2.36277494e-01 -2.36277494e-01
 -2.36277494e-01  8.60639350e+01  6.75731557e+02  3.92901149e+03
  2.96687832e+04  1.56372162e+05  7.03814135e+05]
E1 = -706.5530512101368  E_coul = 198.91360250331297
cycle= 2 E= -507.639448706824  delta_E= -0.00043  |g|= 0.00476  |ddm|= 0.0144
    CPU time for cycle= 2      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.00505398
diis-c [-2.54987478e-05 -5.02607130e-04  1.00050261e+00]
  HOMO = -0.236453881967376  LUMO = 86.0604053613132
  mo_energy =
[-1.20271012e+02 -1.22542142e+01 -6.65493229e+00 -6.65493229e+00
 -6.65493229e+00 -1.16354596e+00 -2.36453882e-01 -2.36453882e-01
 -2.36453882e-01  8.60604054e+01  6.75720938e+02  3.92899554e+03
  2.96687639e+04  1.56372142e+05  7.03814115e+05]
E1 = -706.5526074883493  E_coul = 198.91315867039464
cycle= 3 E= -507.639448817955  delta_E= -1.11e-07  |g|= 9.52e-05  |ddm|= 0.000203
    CPU time for cycle= 3      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.000127342
diis-c [-3.97704368e-10  3.38393118e-05 -2.55164138e-02  1.02548257e+00]
  HOMO = -0.236456114245038  LUMO = 86.0603603951869
  mo_energy =
[-1.20271127e+02 -1.22542302e+01 -6.65495949e+00 -6.65495949e+00
 -6.65495949e+00 -1.16354662e+00 -2.36456114e-01 -2.36456114e-01
 -2.36456114e-01  8.60603604e+01  6.75720820e+02  3.92899539e+03
  2.96687637e+04  1.56372142e+05  7.03814114e+05]
E1 = -706.5526001737512  E_coul = 198.91315135575584
cycle= 4 E= -507.639448817995  delta_E= -4.07e-11  |g|= 3.75e-07  |ddm|= 3.48e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.5526001737512  E_coul = 198.91315135575584
  HOMO = -0.236456097812217  LUMO = 86.0603607343042
  mo_energy =
[-1.20271126e+02 -1.22542300e+01 -6.65495932e+00 -6.65495932e+00
 -6.65495932e+00 -1.16354661e+00 -2.36456098e-01 -2.36456098e-01
 -2.36456098e-01  8.60603607e+01  6.75720821e+02  3.92899539e+03
  2.96687637e+04  1.56372142e+05  7.03814114e+05]
E1 = -706.5526002110455  E_coul = 198.9131513930505
Extra cycle  E= -507.639448817995  delta_E= 3.41e-13  |g|= 6.48e-09  |ddm|= 1.66e-08
    CPU time for scf_cycle      0.09 sec, wall time      0.10 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 45.80060253612406
E1 = -706.5526002110455  E_coul = 198.9131513930505
init E= -507.639448817995
    CPU time for initialize scf      0.07 sec, wall time      0.07 sec
  HOMO = -0.236456097619702  LUMO = 86.0603607384602
  mo_energy =
[-1.20271126e+02 -1.22542300e+01 -6.65495932e+00 -6.65495932e+00
 -6.65495932e+00 -1.16354661e+00 -2.36456098e-01 -2.36456098e-01
 -2.36456098e-01  8.60603607e+01  6.75720821e+02  3.92899539e+03
  2.96687637e+04  1.56372142e+05  7.03814114e+05]
E1 = -706.552600211611  E_coul = 198.9131513936157
cycle= 1 E= -507.639448817995  delta_E= -2.84e-13  |g|= 1.3e-10  |ddm|= 2.56e-10
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -706.552600211611  E_coul = 198.9131513936157
  HOMO = -0.236456097616981  LUMO = 86.0603607385202
  mo_energy =
[-1.20271126e+02 -1.22542300e+01 -6.65495932e+00 -6.65495932e+00
 -6.65495932e+00 -1.16354661e+00 -2.36456098e-01 -2.36456098e-01
 -2.36456098e-01  8.60603607e+01  6.75720821e+02  3.92899539e+03
  2.96687637e+04  1.56372142e+05  7.03814114e+05]
E1 = -706.5526002116208  E_coul = 198.91315139362538
Extra cycle  E= -507.639448817995  delta_E= -5.68e-14  |g|= 2.22e-11  |ddm|= 4.56e-12
    CPU time for scf_cycle      0.14 sec, wall time      0.14 sec
exp = [2.93679452e+05 7.34198629e+04 1.83544153e+04 2.23375658e+03
 4.55094207e+02 1.21319867e+02 3.75178651e+01 4.74111108e+00
 3.91194892e-01 8.59865499e+00 4.90851473e-01]
grad_E = [ 9.33212491e-09 -3.26808302e-08  6.34597082e-06 -4.19669372e-06
 -3.71202456e-05  5.58885033e-05 -7.57709575e-05  1.02434257e-04
 -8.15385603e-06  1.08703991e-05  2.33159904e-05]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((11, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([7.3419862888950534e+04,1.8354415279684519e+04,2.2337565691104060e+03,4.5509411588185179e+02,1.2132000689951782e+02,3.7517668969809321e+01,4.7408530341284303e+00,3.9118871783972831e-01,8.5986666061044215e+00,4.9085282207620301e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "9s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:03:07 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  293679.451556        1
[INPUT] 0    0    [1    /1   ]  73419.8628891        1
[INPUT] 0    0    [1    /1   ]  18354.4152515        1
[INPUT] 0    0    [1    /1   ]  2233.75658772        1
[INPUT] 0    0    [1    /1   ]  455.094281139        1
[INPUT] 0    0    [1    /1   ]  121.319753708        1
[INPUT] 0    0    [1    /1   ]  37.5180205193        1
[INPUT] 0    0    [1    /1   ]  4.74110743117        1
[INPUT] 0    0    [1    /1   ]  0.39119515021        1
[INPUT] 1    0    [1    /1   ]  8.59863841539        1
[INPUT] 1    0    [1    /1   ]  0.490851000954       1

nuclear repulsion = 0
number of shells = 11
number of NR pGTOs = 15
number of NR cGTOs = 15
basis = {'Ar': [[0, [293679.4515557607, 1.0]], [0, [73419.8628890956, 1.0]], [0, [18354.415251514514, 1.0]], [0, [2233.7565877169377, 1.0]], [0, [455.09428113947774, 1.0]], [0, [121.31975370772494, 1.0]], [0, [37.51802051929297, 1.0]], [0, [4.741107431165986, 1.0]], [0, [0.3911951502103536, 1.0]], [1, [8.598638415394221, 1.0]], [1, [0.49085100095360096, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [293679.45155576]
bas 1, expnt(s) = [73419.8628891]
bas 2, expnt(s) = [18354.41525151]
bas 3, expnt(s) = [2233.75658772]
bas 4, expnt(s) = [455.09428114]
bas 5, expnt(s) = [121.31975371]
bas 6, expnt(s) = [37.51802052]
bas 7, expnt(s) = [4.74110743]
bas 8, expnt(s) = [0.39119515]
bas 9, expnt(s) = [8.59863842]
bas 10, expnt(s) = [0.490851]
CPU time:        18.61
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]
 [ 0  1  1  1  0 44 45  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 2.93679452e+05 3.18727983e+04 7.34198629e+04 1.12687359e+04
 1.83544153e+04 3.98401018e+03 2.23375659e+03 8.20903125e+02
 4.55094281e+02 2.48937921e+02 1.21319754e+02 9.23556915e+01
 3.75180205e+01 3.82996638e+01 4.74110743e+00 8.11754811e+00
 3.91195150e-01 1.24971252e+00 8.59863842e+00 4.29557693e+01
 4.90851001e-01 1.19859233e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.31998090552691
cond(S) = 45.80078071590853
E1 = -688.8744099026088  E_coul = 184.91526426779623
init E= -503.959145634813
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.680895535905383  LUMO = 84.731561581531
  mo_energy =
[-1.21650409e+02 -1.32811181e+01 -7.62162060e+00 -7.62162060e+00
 -7.62162060e+00 -1.65069282e+00 -6.80895536e-01 -6.80895536e-01
 -6.80895536e-01  8.47315616e+01  6.74361159e+02  3.92776025e+03
  2.96676952e+04  1.56371146e+05  7.03813150e+05]
E1 = -706.5845538674366  E_coul = 198.94553552529922
cycle= 1 E= -507.639018342137  delta_E= -3.68  |g|= 0.318  |ddm|= 0.301
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.417383
diis-c [-0.17420866  1.        ]
  HOMO = -0.236278485374447  LUMO = 86.064176281914
  mo_energy =
[-1.20262348e+02 -1.22530271e+01 -6.65308687e+00 -6.65308687e+00
 -6.65308687e+00 -1.16348195e+00 -2.36278485e-01 -2.36278485e-01
 -2.36278485e-01  8.60641763e+01  6.75731864e+02  3.92901183e+03
  2.96687835e+04  1.56372162e+05  7.03814135e+05]
E1 = -706.5529474499162  E_coul = 198.91349872191776
cycle= 2 E= -507.639448727998  delta_E= -0.00043  |g|= 0.00476  |ddm|= 0.0144
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00505395
diis-c [-2.54984690e-05 -5.02662362e-04  1.00050266e+00]
  HOMO = -0.236454871140201  LUMO = 86.0606466855386
  mo_energy =
[-1.20271029e+02 -1.22542234e+01 -6.65493957e+00 -6.65493957e+00
 -6.65493957e+00 -1.16354715e+00 -2.36454871e-01 -2.36454871e-01
 -2.36454871e-01  8.60606467e+01  6.75721245e+02  3.92899588e+03
  2.96687642e+04  1.56372142e+05  7.03814115e+05]
E1 = -706.5525037318226  E_coul = 198.9130548926944
cycle= 3 E= -507.639448839128  delta_E= -1.11e-07  |g|= 9.52e-05  |ddm|= 0.000203
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.000127341
diis-c [-3.97697127e-10  3.38399468e-05 -2.55163610e-02  1.02548252e+00]
  HOMO = -0.236457103381717  LUMO = 86.0606017199912
  mo_energy =
[-1.20271143e+02 -1.22542394e+01 -6.65496676e+00 -6.65496676e+00
 -6.65496676e+00 -1.16354781e+00 -2.36457103e-01 -2.36457103e-01
 -2.36457103e-01  8.60606017e+01  6.75721127e+02  3.92899574e+03
  2.96687640e+04  1.56372142e+05  7.03814115e+05]
E1 = -706.5524964173154  E_coul = 198.91304757814677
cycle= 4 E= -507.639448839169  delta_E= -4.04e-11  |g|= 3.75e-07  |ddm|= 3.48e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.5524964173154  E_coul = 198.91304757814677
  HOMO = -0.236457086949172  LUMO = 86.0606020591032
  mo_energy =
[-1.20271143e+02 -1.22542393e+01 -6.65496660e+00 -6.65496660e+00
 -6.65496660e+00 -1.16354781e+00 -2.36457087e-01 -2.36457087e-01
 -2.36457087e-01  8.60606021e+01  6.75721128e+02  3.92899574e+03
  2.96687640e+04  1.56372142e+05  7.03814115e+05]
E1 = -706.55249645461  E_coul = 198.91304761544157
Extra cycle  E= -507.639448839168  delta_E= 1.14e-13  |g|= 6.48e-09  |ddm|= 1.66e-08
    CPU time for scf_cycle      0.10 sec, wall time      0.10 sec
exp = [2.93679452e+05 7.34198629e+04 1.83544153e+04 2.23375659e+03
 4.55094281e+02 1.21319754e+02 3.75180205e+01 4.74110743e+00
 3.91195150e-01 8.59863842e+00 4.90851001e-01]
E = -507.6394488391685
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((11, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([7.3419862888950534e+04,1.8354415279684519e+04,2.2337565691104060e+03,4.5509411588185179e+02,1.2132000689951782e+02,3.7517668969809321e+01,4.7408530341284303e+00,3.9118871783972831e-01,8.5986666061044215e+00,4.9085282207620301e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "9s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:03:08 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  293679.451556        1
[INPUT] 0    0    [1    /1   ]  73419.8628891        1
[INPUT] 0    0    [1    /1   ]  18354.4152515        1
[INPUT] 0    0    [1    /1   ]  2233.75658772        1
[INPUT] 0    0    [1    /1   ]  455.094281139        1
[INPUT] 0    0    [1    /1   ]  121.319753708        1
[INPUT] 0    0    [1    /1   ]  37.5180205193        1
[INPUT] 0    0    [1    /1   ]  4.74110743117        1
[INPUT] 0    0    [1    /1   ]  0.39119515021        1
[INPUT] 1    0    [1    /1   ]  8.59863841539        1
[INPUT] 1    0    [1    /1   ]  0.490851000954       1

nuclear repulsion = 0
number of shells = 11
number of NR pGTOs = 15
number of NR cGTOs = 15
basis = {'Ar': [[0, [293679.4515557607, 1.0]], [0, [73419.8628890956, 1.0]], [0, [18354.415251514514, 1.0]], [0, [2233.7565877169377, 1.0]], [0, [455.09428113947774, 1.0]], [0, [121.31975370772494, 1.0]], [0, [37.51802051929297, 1.0]], [0, [4.741107431165986, 1.0]], [0, [0.3911951502103536, 1.0]], [1, [8.598638415394221, 1.0]], [1, [0.49085100095360096, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [293679.45155576]
bas 1, expnt(s) = [73419.8628891]
bas 2, expnt(s) = [18354.41525151]
bas 3, expnt(s) = [2233.75658772]
bas 4, expnt(s) = [455.09428114]
bas 5, expnt(s) = [121.31975371]
bas 6, expnt(s) = [37.51802052]
bas 7, expnt(s) = [4.74110743]
bas 8, expnt(s) = [0.39119515]
bas 9, expnt(s) = [8.59863842]
bas 10, expnt(s) = [0.490851]
CPU time:        18.81
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]
 [ 0  1  1  1  0 44 45  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 2.93679452e+05 3.18727983e+04 7.34198629e+04 1.12687359e+04
 1.83544153e+04 3.98401018e+03 2.23375659e+03 8.20903125e+02
 4.55094281e+02 2.48937921e+02 1.21319754e+02 9.23556915e+01
 3.75180205e+01 3.82996638e+01 4.74110743e+00 8.11754811e+00
 3.91195150e-01 1.24971252e+00 8.59863842e+00 4.29557693e+01
 4.90851001e-01 1.19859233e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.31998090552691
cond(S) = 45.80078071590853
E1 = -688.8744099026088  E_coul = 184.91526426779623
init E= -503.959145634813
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.680895535905383  LUMO = 84.731561581531
  mo_energy =
[-1.21650409e+02 -1.32811181e+01 -7.62162060e+00 -7.62162060e+00
 -7.62162060e+00 -1.65069282e+00 -6.80895536e-01 -6.80895536e-01
 -6.80895536e-01  8.47315616e+01  6.74361159e+02  3.92776025e+03
  2.96676952e+04  1.56371146e+05  7.03813150e+05]
E1 = -706.5845538674366  E_coul = 198.94553552529922
cycle= 1 E= -507.639018342137  delta_E= -3.68  |g|= 0.318  |ddm|= 0.301
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.417383
diis-c [-0.17420866  1.        ]
  HOMO = -0.236278485374447  LUMO = 86.064176281914
  mo_energy =
[-1.20262348e+02 -1.22530271e+01 -6.65308687e+00 -6.65308687e+00
 -6.65308687e+00 -1.16348195e+00 -2.36278485e-01 -2.36278485e-01
 -2.36278485e-01  8.60641763e+01  6.75731864e+02  3.92901183e+03
  2.96687835e+04  1.56372162e+05  7.03814135e+05]
E1 = -706.5529474499162  E_coul = 198.91349872191776
cycle= 2 E= -507.639448727998  delta_E= -0.00043  |g|= 0.00476  |ddm|= 0.0144
    CPU time for cycle= 2      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.00505395
diis-c [-2.54984690e-05 -5.02662362e-04  1.00050266e+00]
  HOMO = -0.236454871140201  LUMO = 86.0606466855386
  mo_energy =
[-1.20271029e+02 -1.22542234e+01 -6.65493957e+00 -6.65493957e+00
 -6.65493957e+00 -1.16354715e+00 -2.36454871e-01 -2.36454871e-01
 -2.36454871e-01  8.60606467e+01  6.75721245e+02  3.92899588e+03
  2.96687642e+04  1.56372142e+05  7.03814115e+05]
E1 = -706.5525037318226  E_coul = 198.9130548926944
cycle= 3 E= -507.639448839128  delta_E= -1.11e-07  |g|= 9.52e-05  |ddm|= 0.000203
    CPU time for cycle= 3      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.000127341
diis-c [-3.97697127e-10  3.38399468e-05 -2.55163610e-02  1.02548252e+00]
  HOMO = -0.236457103381717  LUMO = 86.0606017199912
  mo_energy =
[-1.20271143e+02 -1.22542394e+01 -6.65496676e+00 -6.65496676e+00
 -6.65496676e+00 -1.16354781e+00 -2.36457103e-01 -2.36457103e-01
 -2.36457103e-01  8.60606017e+01  6.75721127e+02  3.92899574e+03
  2.96687640e+04  1.56372142e+05  7.03814115e+05]
E1 = -706.5524964173154  E_coul = 198.91304757814677
cycle= 4 E= -507.639448839169  delta_E= -4.04e-11  |g|= 3.75e-07  |ddm|= 3.48e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.5524964173154  E_coul = 198.91304757814677
  HOMO = -0.236457086949172  LUMO = 86.0606020591032
  mo_energy =
[-1.20271143e+02 -1.22542393e+01 -6.65496660e+00 -6.65496660e+00
 -6.65496660e+00 -1.16354781e+00 -2.36457087e-01 -2.36457087e-01
 -2.36457087e-01  8.60606021e+01  6.75721128e+02  3.92899574e+03
  2.96687640e+04  1.56372142e+05  7.03814115e+05]
E1 = -706.55249645461  E_coul = 198.91304761544157
Extra cycle  E= -507.639448839168  delta_E= 1.14e-13  |g|= 6.48e-09  |ddm|= 1.66e-08
    CPU time for scf_cycle      0.10 sec, wall time      0.10 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 45.80078071590853
E1 = -706.55249645461  E_coul = 198.91304761544157
init E= -507.639448839168
    CPU time for initialize scf      0.07 sec, wall time      0.07 sec
  HOMO = -0.236457086756653  LUMO = 86.0606020632577
  mo_energy =
[-1.20271142e+02 -1.22542393e+01 -6.65496660e+00 -6.65496660e+00
 -6.65496660e+00 -1.16354781e+00 -2.36457087e-01 -2.36457087e-01
 -2.36457087e-01  8.60606021e+01  6.75721128e+02  3.92899574e+03
  2.96687640e+04  1.56372142e+05  7.03814115e+05]
E1 = -706.5524964551755  E_coul = 198.91304761600702
cycle= 1 E= -507.639448839168  delta_E=    0  |g|= 1.32e-10  |ddm|= 2.56e-10
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -706.5524964551755  E_coul = 198.91304761600702
  HOMO = -0.236457086753927  LUMO = 86.0606020633172
  mo_energy =
[-1.20271142e+02 -1.22542393e+01 -6.65496660e+00 -6.65496660e+00
 -6.65496660e+00 -1.16354781e+00 -2.36457087e-01 -2.36457087e-01
 -2.36457087e-01  8.60606021e+01  6.75721128e+02  3.92899574e+03
  2.96687640e+04  1.56372142e+05  7.03814115e+05]
E1 = -706.5524964551855  E_coul = 198.91304761601663
Extra cycle  E= -507.639448839169  delta_E= -3.98e-13  |g|= 1.83e-11  |ddm|= 4.57e-12
    CPU time for scf_cycle      0.14 sec, wall time      0.14 sec
exp = [2.93679452e+05 7.34198629e+04 1.83544153e+04 2.23375659e+03
 4.55094281e+02 1.21319754e+02 3.75180205e+01 4.74110743e+00
 3.91195150e-01 8.59863842e+00 4.90851001e-01]
grad_E = [ 9.33219456e-09 -3.26806089e-08  6.34601374e-06 -4.20122330e-06
 -3.70224164e-05  5.50917458e-05 -7.34154223e-05  9.95611144e-05
 -7.74481538e-06 -2.45772289e-06  2.21869531e-05]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((11, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([7.3419862888950534e+04,1.8354415279684519e+04,2.2337565691104060e+03,4.5509411588185179e+02,1.2132000689951782e+02,3.7517668969809321e+01,4.7408530341284303e+00,3.9118871783972831e-01,8.5986666061044215e+00,4.9085282207620301e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "9s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:03:10 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  293679.451556        1
[INPUT] 0    0    [1    /1   ]  73419.8628894        1
[INPUT] 0    0    [1    /1   ]  18354.4151872        1
[INPUT] 0    0    [1    /1   ]  2233.75663026        1
[INPUT] 0    0    [1    /1   ]  455.094657678        1
[INPUT] 0    0    [1    /1   ]  121.319183835        1
[INPUT] 0    0    [1    /1   ]  37.5187984894        1
[INPUT] 0    0    [1    /1   ]  4.74108701969        1
[INPUT] 0    0    [1    /1   ]  0.391195709291       1
[INPUT] 1    0    [1    /1   ]  8.59862040103        1
[INPUT] 1    0    [1    /1   ]  0.490850457755       1

nuclear repulsion = 0
number of shells = 11
number of NR pGTOs = 15
number of NR cGTOs = 15
basis = {'Ar': [[0, [293679.4515556661, 1.0]], [0, [73419.86288942695, 1.0]], [0, [18354.415187174833, 1.0]], [0, [2233.7566302561004, 1.0]], [0, [455.0946576778939, 1.0]], [0, [121.3191838346583, 1.0]], [0, [37.51879848938694, 1.0]], [0, [4.741087019686657, 1.0]], [0, [0.3911957092909961, 1.0]], [1, [8.598620401027743, 1.0]], [1, [0.49085045775515357, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [293679.45155567]
bas 1, expnt(s) = [73419.86288943]
bas 2, expnt(s) = [18354.41518717]
bas 3, expnt(s) = [2233.75663026]
bas 4, expnt(s) = [455.09465768]
bas 5, expnt(s) = [121.31918383]
bas 6, expnt(s) = [37.51879849]
bas 7, expnt(s) = [4.74108702]
bas 8, expnt(s) = [0.39119571]
bas 9, expnt(s) = [8.5986204]
bas 10, expnt(s) = [0.49085046]
CPU time:        21.63
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]
 [ 0  1  1  1  0 44 45  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 2.93679452e+05 3.18727983e+04 7.34198629e+04 1.12687359e+04
 1.83544152e+04 3.98401017e+03 2.23375663e+03 8.20903137e+02
 4.55094658e+02 2.48938075e+02 1.21319184e+02 9.23553661e+01
 3.75187985e+01 3.83002594e+01 4.74108702e+00 8.11752190e+00
 3.91195709e-01 1.24971386e+00 8.59862040e+00 4.29556568e+01
 4.90850458e-01 1.19859067e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319981844095363
cond(S) = 45.801666455367354
E1 = -688.8742436398713  E_coul = 184.91516245442352
init E= -503.959081185448
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.680895741154177  LUMO = 84.7328131756578
  mo_energy =
[-1.21650422e+02 -1.32811321e+01 -7.62162774e+00 -7.62162774e+00
 -7.62162774e+00 -1.65069371e+00 -6.80895741e-01 -6.80895741e-01
 -6.80895741e-01  8.47328132e+01  6.74362743e+02  3.92776205e+03
  2.96676969e+04  1.56371147e+05  7.03813151e+05]
E1 = -706.5844370491178  E_coul = 198.94541859812352
cycle= 1 E= -507.639018450994  delta_E= -3.68  |g|= 0.318  |ddm|= 0.301
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.417385
diis-c [-0.17421038  1.        ]
  HOMO = -0.236279639560232  LUMO = 86.0654300180127
  mo_energy =
[-1.20262361e+02 -1.22530425e+01 -6.65309546e+00 -6.65309546e+00
 -6.65309546e+00 -1.16348359e+00 -2.36279640e-01 -2.36279640e-01
 -2.36279640e-01  8.60654300e+01  6.75733454e+02  3.92901364e+03
  2.96687852e+04  1.56372164e+05  7.03814136e+05]
E1 = -706.5528315529567  E_coul = 198.9133827260472
cycle= 2 E= -507.63944882691  delta_E= -0.00043  |g|= 0.00476  |ddm|= 0.0144
    CPU time for cycle= 2      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.00505387
diis-c [-2.54975476e-05 -5.02945751e-04  1.00050295e+00]
  HOMO = -0.236456019648106  LUMO = 86.0619005258522
  mo_energy =
[-1.20271041e+02 -1.22542387e+01 -6.65494811e+00 -6.65494811e+00
 -6.65494811e+00 -1.16354879e+00 -2.36456020e-01 -2.36456020e-01
 -2.36456020e-01  8.60619005e+01  6.75722835e+02  3.92899769e+03
  2.96687659e+04  1.56372144e+05  7.03814116e+05]
E1 = -706.5523878486822  E_coul = 198.9129389106451
cycle= 3 E= -507.639448938037  delta_E= -1.11e-07  |g|= 9.52e-05  |ddm|= 0.000203
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.000127337
diis-c [-3.97668550e-10  3.38429577e-05 -2.55160636e-02  1.02548222e+00]
  HOMO = -0.236458251760307  LUMO = 86.0618555628022
  mo_energy =
[-1.20271155e+02 -1.22542547e+01 -6.65497530e+00 -6.65497530e+00
 -6.65497530e+00 -1.16354945e+00 -2.36458252e-01 -2.36458252e-01
 -2.36458252e-01  8.60618556e+01  6.75722717e+02  3.92899754e+03
  2.96687657e+04  1.56372143e+05  7.03814116e+05]
E1 = -706.5523805345616  E_coul = 198.91293159648416
cycle= 4 E= -507.639448938077  delta_E= -4.04e-11  |g|= 3.75e-07  |ddm|= 3.48e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.5523805345616  E_coul = 198.91293159648416
  HOMO = -0.236458235328783  LUMO = 86.0618559018962
  mo_energy =
[-1.20271155e+02 -1.22542545e+01 -6.65497514e+00 -6.65497514e+00
 -6.65497514e+00 -1.16354944e+00 -2.36458235e-01 -2.36458235e-01
 -2.36458235e-01  8.60618559e+01  6.75722718e+02  3.92899754e+03
  2.96687657e+04  1.56372143e+05  7.03814116e+05]
E1 = -706.5523805718542  E_coul = 198.91293163377685
Extra cycle  E= -507.639448938077  delta_E= 1.14e-13  |g|= 6.48e-09  |ddm|= 1.66e-08
    CPU time for scf_cycle      0.10 sec, wall time      0.10 sec
exp = [2.93679452e+05 7.34198629e+04 1.83544152e+04 2.23375663e+03
 4.55094658e+02 1.21319184e+02 3.75187985e+01 4.74108702e+00
 3.91195709e-01 8.59862040e+00 4.90850458e-01]
E = -507.63944893807735
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((11, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([7.3419862888950534e+04,1.8354415279684519e+04,2.2337565691104060e+03,4.5509411588185179e+02,1.2132000689951782e+02,3.7517668969809321e+01,4.7408530341284303e+00,3.9118871783972831e-01,8.5986666061044215e+00,4.9085282207620301e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "9s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:03:11 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  293679.451556        1
[INPUT] 0    0    [1    /1   ]  73419.8628894        1
[INPUT] 0    0    [1    /1   ]  18354.4151872        1
[INPUT] 0    0    [1    /1   ]  2233.75663026        1
[INPUT] 0    0    [1    /1   ]  455.094657678        1
[INPUT] 0    0    [1    /1   ]  121.319183835        1
[INPUT] 0    0    [1    /1   ]  37.5187984894        1
[INPUT] 0    0    [1    /1   ]  4.74108701969        1
[INPUT] 0    0    [1    /1   ]  0.391195709291       1
[INPUT] 1    0    [1    /1   ]  8.59862040103        1
[INPUT] 1    0    [1    /1   ]  0.490850457755       1

nuclear repulsion = 0
number of shells = 11
number of NR pGTOs = 15
number of NR cGTOs = 15
basis = {'Ar': [[0, [293679.4515556661, 1.0]], [0, [73419.86288942695, 1.0]], [0, [18354.415187174833, 1.0]], [0, [2233.7566302561004, 1.0]], [0, [455.0946576778939, 1.0]], [0, [121.3191838346583, 1.0]], [0, [37.51879848938694, 1.0]], [0, [4.741087019686657, 1.0]], [0, [0.3911957092909961, 1.0]], [1, [8.598620401027743, 1.0]], [1, [0.49085045775515357, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [293679.45155567]
bas 1, expnt(s) = [73419.86288943]
bas 2, expnt(s) = [18354.41518717]
bas 3, expnt(s) = [2233.75663026]
bas 4, expnt(s) = [455.09465768]
bas 5, expnt(s) = [121.31918383]
bas 6, expnt(s) = [37.51879849]
bas 7, expnt(s) = [4.74108702]
bas 8, expnt(s) = [0.39119571]
bas 9, expnt(s) = [8.5986204]
bas 10, expnt(s) = [0.49085046]
CPU time:        21.83
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]
 [ 0  1  1  1  0 44 45  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 2.93679452e+05 3.18727983e+04 7.34198629e+04 1.12687359e+04
 1.83544152e+04 3.98401017e+03 2.23375663e+03 8.20903137e+02
 4.55094658e+02 2.48938075e+02 1.21319184e+02 9.23553661e+01
 3.75187985e+01 3.83002594e+01 4.74108702e+00 8.11752190e+00
 3.91195709e-01 1.24971386e+00 8.59862040e+00 4.29556568e+01
 4.90850458e-01 1.19859067e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319981844095363
cond(S) = 45.801666455367354
E1 = -688.8742436398713  E_coul = 184.91516245442352
init E= -503.959081185448
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.680895741154177  LUMO = 84.7328131756578
  mo_energy =
[-1.21650422e+02 -1.32811321e+01 -7.62162774e+00 -7.62162774e+00
 -7.62162774e+00 -1.65069371e+00 -6.80895741e-01 -6.80895741e-01
 -6.80895741e-01  8.47328132e+01  6.74362743e+02  3.92776205e+03
  2.96676969e+04  1.56371147e+05  7.03813151e+05]
E1 = -706.5844370491178  E_coul = 198.94541859812352
cycle= 1 E= -507.639018450994  delta_E= -3.68  |g|= 0.318  |ddm|= 0.301
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.417385
diis-c [-0.17421038  1.        ]
  HOMO = -0.236279639560232  LUMO = 86.0654300180127
  mo_energy =
[-1.20262361e+02 -1.22530425e+01 -6.65309546e+00 -6.65309546e+00
 -6.65309546e+00 -1.16348359e+00 -2.36279640e-01 -2.36279640e-01
 -2.36279640e-01  8.60654300e+01  6.75733454e+02  3.92901364e+03
  2.96687852e+04  1.56372164e+05  7.03814136e+05]
E1 = -706.5528315529567  E_coul = 198.9133827260472
cycle= 2 E= -507.63944882691  delta_E= -0.00043  |g|= 0.00476  |ddm|= 0.0144
    CPU time for cycle= 2      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.00505387
diis-c [-2.54975476e-05 -5.02945751e-04  1.00050295e+00]
  HOMO = -0.236456019648106  LUMO = 86.0619005258522
  mo_energy =
[-1.20271041e+02 -1.22542387e+01 -6.65494811e+00 -6.65494811e+00
 -6.65494811e+00 -1.16354879e+00 -2.36456020e-01 -2.36456020e-01
 -2.36456020e-01  8.60619005e+01  6.75722835e+02  3.92899769e+03
  2.96687659e+04  1.56372144e+05  7.03814116e+05]
E1 = -706.5523878486822  E_coul = 198.9129389106451
cycle= 3 E= -507.639448938037  delta_E= -1.11e-07  |g|= 9.52e-05  |ddm|= 0.000203
    CPU time for cycle= 3      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.000127337
diis-c [-3.97668550e-10  3.38429577e-05 -2.55160636e-02  1.02548222e+00]
  HOMO = -0.236458251760307  LUMO = 86.0618555628022
  mo_energy =
[-1.20271155e+02 -1.22542547e+01 -6.65497530e+00 -6.65497530e+00
 -6.65497530e+00 -1.16354945e+00 -2.36458252e-01 -2.36458252e-01
 -2.36458252e-01  8.60618556e+01  6.75722717e+02  3.92899754e+03
  2.96687657e+04  1.56372143e+05  7.03814116e+05]
E1 = -706.5523805345616  E_coul = 198.91293159648416
cycle= 4 E= -507.639448938077  delta_E= -4.04e-11  |g|= 3.75e-07  |ddm|= 3.48e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.5523805345616  E_coul = 198.91293159648416
  HOMO = -0.236458235328783  LUMO = 86.0618559018962
  mo_energy =
[-1.20271155e+02 -1.22542545e+01 -6.65497514e+00 -6.65497514e+00
 -6.65497514e+00 -1.16354944e+00 -2.36458235e-01 -2.36458235e-01
 -2.36458235e-01  8.60618559e+01  6.75722718e+02  3.92899754e+03
  2.96687657e+04  1.56372143e+05  7.03814116e+05]
E1 = -706.5523805718542  E_coul = 198.91293163377685
Extra cycle  E= -507.639448938077  delta_E= 1.14e-13  |g|= 6.48e-09  |ddm|= 1.66e-08
    CPU time for scf_cycle      0.09 sec, wall time      0.10 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 45.801666455367354
E1 = -706.5523805718542  E_coul = 198.91293163377685
init E= -507.639448938077
    CPU time for initialize scf      0.07 sec, wall time      0.07 sec
  HOMO = -0.236458235136273  LUMO = 86.061855906053
  mo_energy =
[-1.20271155e+02 -1.22542545e+01 -6.65497514e+00 -6.65497514e+00
 -6.65497514e+00 -1.16354944e+00 -2.36458235e-01 -2.36458235e-01
 -2.36458235e-01  8.60618559e+01  6.75722718e+02  3.92899754e+03
  2.96687657e+04  1.56372143e+05  7.03814116e+05]
E1 = -706.5523805724192  E_coul = 198.9129316343419
cycle= 1 E= -507.639448938077  delta_E= 5.68e-14  |g|= 1.29e-10  |ddm|= 2.56e-10
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -706.5523805724192  E_coul = 198.9129316343419
  HOMO = -0.236458235133552  LUMO = 86.061855906111
  mo_energy =
[-1.20271155e+02 -1.22542545e+01 -6.65497514e+00 -6.65497514e+00
 -6.65497514e+00 -1.16354944e+00 -2.36458235e-01 -2.36458235e-01
 -2.36458235e-01  8.60618559e+01  6.75722718e+02  3.92899754e+03
  2.96687657e+04  1.56372143e+05  7.03814116e+05]
E1 = -706.5523805724288  E_coul = 198.91293163435157
Extra cycle  E= -507.639448938077  delta_E= 1.14e-13  |g|= 3.04e-11  |ddm|= 4.6e-12
    CPU time for scf_cycle      0.14 sec, wall time      0.14 sec
exp = [2.93679452e+05 7.34198629e+04 1.83544152e+04 2.23375663e+03
 4.55094658e+02 1.21319184e+02 3.75187985e+01 4.74108702e+00
 3.91195709e-01 8.59862040e+00 4.90850458e-01]
grad_E = [ 9.33254516e-09 -3.26794882e-08  6.34622974e-06 -4.22410003e-06
 -3.65284428e-05  5.10621579e-05 -6.14814852e-05  8.74543777e-05
 -6.60796498e-06 -1.63772585e-05  1.89907723e-05]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((11, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([7.3419862888950534e+04,1.8354415279684519e+04,2.2337565691104060e+03,4.5509411588185179e+02,1.2132000689951782e+02,3.7517668969809321e+01,4.7408530341284303e+00,3.9118871783972831e-01,8.5986666061044215e+00,4.9085282207620301e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "9s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:03:13 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  293679.451555        1
[INPUT] 0    0    [1    /1   ]  73419.8628909        1
[INPUT] 0    0    [1    /1   ]  18354.4148965        1
[INPUT] 0    0    [1    /1   ]  2233.75682256        1
[INPUT] 0    0    [1    /1   ]  455.096356339        1
[INPUT] 0    0    [1    /1   ]  121.316629872        1
[INPUT] 0    0    [1    /1   ]  37.5222520106        1
[INPUT] 0    0    [1    /1   ]  4.74099398111        1
[INPUT] 0    0    [1    /1   ]  0.391197417693       1
[INPUT] 1    0    [1    /1   ]  8.59860886826        1
[INPUT] 1    0    [1    /1   ]  0.490849961886       1

nuclear repulsion = 0
number of shells = 11
number of NR pGTOs = 15
number of NR cGTOs = 15
basis = {'Ar': [[0, [293679.45155523863, 1.0]], [0, [73419.86289092393, 1.0]], [0, [18354.414896489547, 1.0]], [0, [2233.7568225633836, 1.0]], [0, [455.0963563388719, 1.0]], [0, [121.31662987180772, 1.0]], [0, [37.52225201057056, 1.0]], [0, [4.740993981111472, 1.0]], [0, [0.39119741769324595, 1.0]], [1, [8.598608868257429, 1.0]], [1, [0.49084996188641816, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [293679.45155524]
bas 1, expnt(s) = [73419.86289092]
bas 2, expnt(s) = [18354.41489649]
bas 3, expnt(s) = [2233.75682256]
bas 4, expnt(s) = [455.09635634]
bas 5, expnt(s) = [121.31662987]
bas 6, expnt(s) = [37.52225201]
bas 7, expnt(s) = [4.74099398]
bas 8, expnt(s) = [0.39119742]
bas 9, expnt(s) = [8.59860887]
bas 10, expnt(s) = [0.49084996]
CPU time:        24.67
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]
 [ 0  1  1  1  0 44 45  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 2.93679452e+05 3.18727983e+04 7.34198629e+04 1.12687359e+04
 1.83544149e+04 3.98401012e+03 2.23375682e+03 8.20903190e+02
 4.55096356e+02 2.48938772e+02 1.21316630e+02 9.23539079e+01
 3.75222520e+01 3.83029035e+01 4.74099398e+00 8.11740243e+00
 3.91197418e-01 1.24971795e+00 8.59860887e+00 4.29555848e+01
 4.90849962e-01 1.19858916e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.31998345054539
cond(S) = 45.805590339958364
E1 = -688.8738600470602  E_coul = 184.9150626395478
init E= -503.958797407512
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.68089552875685  LUMO = 84.738401182144
  mo_energy =
[-1.21650414e+02 -1.32811663e+01 -7.62163533e+00 -7.62163533e+00
 -7.62163533e+00 -1.65069470e+00 -6.80895529e-01 -6.80895529e-01
 -6.80895529e-01  8.47384012e+01  6.74369791e+02  3.92777010e+03
  2.96677045e+04  1.56371153e+05  7.03813156e+05]
E1 = -706.5843437611142  E_coul = 198.94532497737808
cycle= 1 E= -507.639018783736  delta_E= -3.68  |g|= 0.318  |ddm|= 0.301
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.417395
diis-c [-0.17421859  1.        ]
  HOMO = -0.236280755574519  LUMO = 86.0710345037381
  mo_energy =
[-1.20262340e+02 -1.22530781e+01 -6.65310422e+00 -6.65310422e+00
 -6.65310422e+00 -1.16348630e+00 -2.36280756e-01 -2.36280756e-01
 -2.36280756e-01  8.60710345e+01  6.75740533e+02  3.92902172e+03
  2.96687928e+04  1.56372170e+05  7.03814142e+05]
E1 = -706.5527420082548  E_coul = 198.91329288503152
cycle= 2 E= -507.639449123223  delta_E= -0.00043  |g|= 0.00476  |ddm|= 0.0144
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00505353
diis-c [-2.54939620e-05 -5.04212432e-04  1.00050421e+00]
  HOMO = -0.236457114531357  LUMO = 86.0675054401401
  mo_energy =
[-1.20271019e+02 -1.22542742e+01 -6.65495666e+00 -6.65495666e+00
 -6.65495666e+00 -1.16355149e+00 -2.36457115e-01 -2.36457115e-01
 -2.36457115e-01  8.60675054e+01  6.75729916e+02  3.92900577e+03
  2.96687735e+04  1.56372150e+05  7.03814121e+05]
E1 = -706.552298360288  E_coul = 198.91284912594492
cycle= 3 E= -507.639449234343  delta_E= -1.11e-07  |g|= 9.52e-05  |ddm|= 0.000203
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.000127321
diis-c [-3.97555554e-10  3.38551874e-05 -2.55146952e-02  1.02548084e+00]
  HOMO = -0.236459346124453  LUMO = 86.0674604877709
  mo_energy =
[-1.20271133e+02 -1.22542901e+01 -6.65498385e+00 -6.65498385e+00
 -6.65498385e+00 -1.16355215e+00 -2.36459346e-01 -2.36459346e-01
 -2.36459346e-01  8.60674605e+01  6.75729798e+02  3.92900562e+03
  2.96687733e+04  1.56372150e+05  7.03814121e+05]
E1 = -706.5522910478014  E_coul = 198.91284181341837
cycle= 4 E= -507.639449234383  delta_E= -4e-11  |g|= 3.75e-07  |ddm|= 3.48e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.5522910478014  E_coul = 198.91284181341837
  HOMO = -0.236459329697012  LUMO = 86.0674608267848
  mo_energy =
[-1.20271133e+02 -1.22542900e+01 -6.65498369e+00 -6.65498369e+00
 -6.65498369e+00 -1.16355214e+00 -2.36459330e-01 -2.36459330e-01
 -2.36459330e-01  8.60674608e+01  6.75729799e+02  3.92900563e+03
  2.96687733e+04  1.56372150e+05  7.03814121e+05]
E1 = -706.5522910850864  E_coul = 198.91284185070305
Extra cycle  E= -507.639449234383  delta_E= -2.84e-13  |g|= 6.48e-09  |ddm|= 1.66e-08
    CPU time for scf_cycle      0.10 sec, wall time      0.10 sec
exp = [2.93679452e+05 7.34198629e+04 1.83544149e+04 2.23375682e+03
 4.55096356e+02 1.21316630e+02 3.75222520e+01 4.74099398e+00
 3.91197418e-01 8.59860887e+00 4.90849962e-01]
E = -507.63944923438333
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((11, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([7.3419862888950534e+04,1.8354415279684519e+04,2.2337565691104060e+03,4.5509411588185179e+02,1.2132000689951782e+02,3.7517668969809321e+01,4.7408530341284303e+00,3.9118871783972831e-01,8.5986666061044215e+00,4.9085282207620301e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "9s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:03:14 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  293679.451555        1
[INPUT] 0    0    [1    /1   ]  73419.8628909        1
[INPUT] 0    0    [1    /1   ]  18354.4148965        1
[INPUT] 0    0    [1    /1   ]  2233.75682256        1
[INPUT] 0    0    [1    /1   ]  455.096356339        1
[INPUT] 0    0    [1    /1   ]  121.316629872        1
[INPUT] 0    0    [1    /1   ]  37.5222520106        1
[INPUT] 0    0    [1    /1   ]  4.74099398111        1
[INPUT] 0    0    [1    /1   ]  0.391197417693       1
[INPUT] 1    0    [1    /1   ]  8.59860886826        1
[INPUT] 1    0    [1    /1   ]  0.490849961886       1

nuclear repulsion = 0
number of shells = 11
number of NR pGTOs = 15
number of NR cGTOs = 15
basis = {'Ar': [[0, [293679.45155523863, 1.0]], [0, [73419.86289092393, 1.0]], [0, [18354.414896489547, 1.0]], [0, [2233.7568225633836, 1.0]], [0, [455.0963563388719, 1.0]], [0, [121.31662987180772, 1.0]], [0, [37.52225201057056, 1.0]], [0, [4.740993981111472, 1.0]], [0, [0.39119741769324595, 1.0]], [1, [8.598608868257429, 1.0]], [1, [0.49084996188641816, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [293679.45155524]
bas 1, expnt(s) = [73419.86289092]
bas 2, expnt(s) = [18354.41489649]
bas 3, expnt(s) = [2233.75682256]
bas 4, expnt(s) = [455.09635634]
bas 5, expnt(s) = [121.31662987]
bas 6, expnt(s) = [37.52225201]
bas 7, expnt(s) = [4.74099398]
bas 8, expnt(s) = [0.39119742]
bas 9, expnt(s) = [8.59860887]
bas 10, expnt(s) = [0.49084996]
CPU time:        24.90
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]
 [ 0  1  1  1  0 44 45  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 2.93679452e+05 3.18727983e+04 7.34198629e+04 1.12687359e+04
 1.83544149e+04 3.98401012e+03 2.23375682e+03 8.20903190e+02
 4.55096356e+02 2.48938772e+02 1.21316630e+02 9.23539079e+01
 3.75222520e+01 3.83029035e+01 4.74099398e+00 8.11740243e+00
 3.91197418e-01 1.24971795e+00 8.59860887e+00 4.29555848e+01
 4.90849962e-01 1.19858916e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.31998345054539
cond(S) = 45.805590339958364
E1 = -688.8738600470602  E_coul = 184.9150626395478
init E= -503.958797407512
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.68089552875685  LUMO = 84.738401182144
  mo_energy =
[-1.21650414e+02 -1.32811663e+01 -7.62163533e+00 -7.62163533e+00
 -7.62163533e+00 -1.65069470e+00 -6.80895529e-01 -6.80895529e-01
 -6.80895529e-01  8.47384012e+01  6.74369791e+02  3.92777010e+03
  2.96677045e+04  1.56371153e+05  7.03813156e+05]
E1 = -706.5843437611142  E_coul = 198.94532497737808
cycle= 1 E= -507.639018783736  delta_E= -3.68  |g|= 0.318  |ddm|= 0.301
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.417395
diis-c [-0.17421859  1.        ]
  HOMO = -0.236280755574519  LUMO = 86.0710345037381
  mo_energy =
[-1.20262340e+02 -1.22530781e+01 -6.65310422e+00 -6.65310422e+00
 -6.65310422e+00 -1.16348630e+00 -2.36280756e-01 -2.36280756e-01
 -2.36280756e-01  8.60710345e+01  6.75740533e+02  3.92902172e+03
  2.96687928e+04  1.56372170e+05  7.03814142e+05]
E1 = -706.5527420082548  E_coul = 198.91329288503152
cycle= 2 E= -507.639449123223  delta_E= -0.00043  |g|= 0.00476  |ddm|= 0.0144
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00505353
diis-c [-2.54939620e-05 -5.04212432e-04  1.00050421e+00]
  HOMO = -0.236457114531357  LUMO = 86.0675054401401
  mo_energy =
[-1.20271019e+02 -1.22542742e+01 -6.65495666e+00 -6.65495666e+00
 -6.65495666e+00 -1.16355149e+00 -2.36457115e-01 -2.36457115e-01
 -2.36457115e-01  8.60675054e+01  6.75729916e+02  3.92900577e+03
  2.96687735e+04  1.56372150e+05  7.03814121e+05]
E1 = -706.552298360288  E_coul = 198.91284912594492
cycle= 3 E= -507.639449234343  delta_E= -1.11e-07  |g|= 9.52e-05  |ddm|= 0.000203
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.000127321
diis-c [-3.97555554e-10  3.38551874e-05 -2.55146952e-02  1.02548084e+00]
  HOMO = -0.236459346124453  LUMO = 86.0674604877709
  mo_energy =
[-1.20271133e+02 -1.22542901e+01 -6.65498385e+00 -6.65498385e+00
 -6.65498385e+00 -1.16355215e+00 -2.36459346e-01 -2.36459346e-01
 -2.36459346e-01  8.60674605e+01  6.75729798e+02  3.92900562e+03
  2.96687733e+04  1.56372150e+05  7.03814121e+05]
E1 = -706.5522910478014  E_coul = 198.91284181341837
cycle= 4 E= -507.639449234383  delta_E= -4e-11  |g|= 3.75e-07  |ddm|= 3.48e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.5522910478014  E_coul = 198.91284181341837
  HOMO = -0.236459329697012  LUMO = 86.0674608267848
  mo_energy =
[-1.20271133e+02 -1.22542900e+01 -6.65498369e+00 -6.65498369e+00
 -6.65498369e+00 -1.16355214e+00 -2.36459330e-01 -2.36459330e-01
 -2.36459330e-01  8.60674608e+01  6.75729799e+02  3.92900563e+03
  2.96687733e+04  1.56372150e+05  7.03814121e+05]
E1 = -706.5522910850864  E_coul = 198.91284185070305
Extra cycle  E= -507.639449234383  delta_E= -2.84e-13  |g|= 6.48e-09  |ddm|= 1.66e-08
    CPU time for scf_cycle      0.10 sec, wall time      0.10 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 45.805590339958364
E1 = -706.5522910850864  E_coul = 198.91284185070305
init E= -507.639449234383
    CPU time for initialize scf      0.07 sec, wall time      0.07 sec
  HOMO = -0.236459329504542  LUMO = 86.0674608309384
  mo_energy =
[-1.20271132e+02 -1.22542900e+01 -6.65498368e+00 -6.65498368e+00
 -6.65498368e+00 -1.16355214e+00 -2.36459330e-01 -2.36459330e-01
 -2.36459330e-01  8.60674608e+01  6.75729799e+02  3.92900563e+03
  2.96687733e+04  1.56372150e+05  7.03814121e+05]
E1 = -706.5522910856514  E_coul = 198.91284185126807
cycle= 1 E= -507.639449234383  delta_E=    0  |g|= 1.3e-10  |ddm|= 2.56e-10
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -706.5522910856514  E_coul = 198.91284185126807
  HOMO = -0.236459329501824  LUMO = 86.067460830999
  mo_energy =
[-1.20271132e+02 -1.22542900e+01 -6.65498368e+00 -6.65498368e+00
 -6.65498368e+00 -1.16355214e+00 -2.36459330e-01 -2.36459330e-01
 -2.36459330e-01  8.60674608e+01  6.75729799e+02  3.92900563e+03
  2.96687733e+04  1.56372150e+05  7.03814121e+05]
E1 = -706.5522910856607  E_coul = 198.9128418512775
Extra cycle  E= -507.639449234383  delta_E= 1.14e-13  |g|= 4.88e-11  |ddm|= 4.54e-12
    CPU time for scf_cycle      0.14 sec, wall time      0.14 sec
exp = [2.93679452e+05 7.34198629e+04 1.83544149e+04 2.23375682e+03
 4.55096356e+02 1.21316630e+02 3.75222520e+01 4.74099398e+00
 3.91197418e-01 8.59860887e+00 4.90849962e-01]
grad_E = [ 9.33410940e-09 -3.26744793e-08  6.34719338e-06 -4.32622769e-06
 -3.43244583e-05  3.30947711e-05 -8.28256931e-06  3.60184574e-05
 -2.52231771e-06 -2.25212778e-05  7.31991736e-06]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((11, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([7.3419862888950534e+04,1.8354415279684519e+04,2.2337565691104060e+03,4.5509411588185179e+02,1.2132000689951782e+02,3.7517668969809321e+01,4.7408530341284303e+00,3.9118871783972831e-01,8.5986666061044215e+00,4.9085282207620301e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "9s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:03:17 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  293679.451555        1
[INPUT] 0    0    [1    /1   ]  73419.8628921        1
[INPUT] 0    0    [1    /1   ]  18354.4146722        1
[INPUT] 0    0    [1    /1   ]  2233.75697113        1
[INPUT] 0    0    [1    /1   ]  455.097662501        1
[INPUT] 0    0    [1    /1   ]  121.314695348        1
[INPUT] 0    0    [1    /1   ]  37.5248101437        1
[INPUT] 0    0    [1    /1   ]  4.74092392991        1
[INPUT] 0    0    [1    /1   ]  0.391198395436       1
[INPUT] 1    0    [1    /1   ]  8.59862608845        1
[INPUT] 1    0    [1    /1   ]  0.490850315281       1

nuclear repulsion = 0
number of shells = 11
number of NR pGTOs = 15
number of NR cGTOs = 15
basis = {'Ar': [[0, [293679.4515549088, 1.0]], [0, [73419.86289207886, 1.0]], [0, [18354.414672219027, 1.0]], [0, [2233.7569711348856, 1.0]], [0, [455.09766250147806, 1.0]], [0, [121.31469534843269, 1.0]], [0, [37.52481014368796, 1.0]], [0, [4.740923929913548, 1.0]], [0, [0.3911983954364732, 1.0]], [1, [8.598626088445943, 1.0]], [1, [0.49085031528146283, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [293679.45155491]
bas 1, expnt(s) = [73419.86289208]
bas 2, expnt(s) = [18354.41467222]
bas 3, expnt(s) = [2233.75697113]
bas 4, expnt(s) = [455.0976625]
bas 5, expnt(s) = [121.31469535]
bas 6, expnt(s) = [37.52481014]
bas 7, expnt(s) = [4.74092393]
bas 8, expnt(s) = [0.3911984]
bas 9, expnt(s) = [8.59862609]
bas 10, expnt(s) = [0.49085032]
CPU time:        27.76
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]
 [ 0  1  1  1  0 44 45  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 2.93679452e+05 3.18727983e+04 7.34198629e+04 1.12687359e+04
 1.83544147e+04 3.98401008e+03 2.23375697e+03 8.20903231e+02
 4.55097663e+02 2.48939308e+02 1.21314695e+02 9.23528034e+01
 3.75248101e+01 3.83048620e+01 4.74092393e+00 8.11731248e+00
 3.91198395e-01 1.24972030e+00 8.59862609e+00 4.29556923e+01
 4.90850315e-01 1.19859024e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.31998367972919
cond(S) = 45.80849059544654
E1 = -688.8737079462684  E_coul = 184.9151211332669
init E= -503.958586813001
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.680894947768381  LUMO = 84.7425364340086
  mo_energy =
[-1.21650383e+02 -1.32811813e+01 -7.62163188e+00 -7.62163188e+00
 -7.62163188e+00 -1.65069431e+00 -6.80894948e-01 -6.80894948e-01
 -6.80894948e-01  8.47425364e+01  6.74374956e+02  3.92777608e+03
  2.96677101e+04  1.56371158e+05  7.03813160e+05]
E1 = -706.5844345951322  E_coul = 198.94541571861618
cycle= 1 E= -507.639018876516  delta_E= -3.68  |g|= 0.318  |ddm|= 0.301
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.417403
diis-c [-0.17422488  1.        ]
  HOMO = -0.236280074878145  LUMO = 86.0751845999753
  mo_energy =
[-1.20262296e+02 -1.22530923e+01 -6.65309965e+00 -6.65309965e+00
 -6.65309965e+00 -1.16348659e+00 -2.36280075e-01 -2.36280075e-01
 -2.36280075e-01  8.60751846e+01  6.75745725e+02  3.92902773e+03
  2.96687985e+04  1.56372175e+05  7.03814146e+05]
E1 = -706.5528354775055  E_coul = 198.913386285428
cycle= 2 E= -507.639449192077  delta_E= -0.00043  |g|= 0.00476  |ddm|= 0.0144
    CPU time for cycle= 2      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.00505331
diis-c [-2.54915023e-05 -5.05155894e-04  1.00050516e+00]
  HOMO = -0.236456419773348  LUMO = 86.0716558409583
  mo_energy =
[-1.20270974e+02 -1.22542883e+01 -6.65495195e+00 -6.65495195e+00
 -6.65495195e+00 -1.16355177e+00 -2.36456420e-01 -2.36456420e-01
 -2.36456420e-01  8.60716558e+01  6.75735108e+02  3.92901178e+03
  2.96687792e+04  1.56372155e+05  7.03814125e+05]
E1 = -706.5523918691661  E_coul = 198.91294256597473
cycle= 3 E= -507.639449303191  delta_E= -1.11e-07  |g|= 9.52e-05  |ddm|= 0.000203
    CPU time for cycle= 3      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.000127309
diis-c [-3.97474850e-10  3.38642871e-05 -2.55136726e-02  1.02547981e+00]
  HOMO = -0.236458651003374  LUMO = 86.0716108963407
  mo_energy =
[-1.20271088e+02 -1.22543043e+01 -6.65497913e+00 -6.65497913e+00
 -6.65497913e+00 -1.16355243e+00 -2.36458651e-01 -2.36458651e-01
 -2.36458651e-01  8.60716109e+01  6.75734990e+02  3.92901164e+03
  2.96687790e+04  1.56372154e+05  7.03814125e+05]
E1 = -706.5523845578575  E_coul = 198.9129352546261
cycle= 4 E= -507.639449303231  delta_E= -4.01e-11  |g|= 3.75e-07  |ddm|= 3.48e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.5523845578575  E_coul = 198.9129352546261
  HOMO = -0.236458634578821  LUMO = 86.0716112352954
  mo_energy =
[-1.20271088e+02 -1.22543041e+01 -6.65497897e+00 -6.65497897e+00
 -6.65497897e+00 -1.16355242e+00 -2.36458635e-01 -2.36458635e-01
 -2.36458635e-01  8.60716112e+01  6.75734991e+02  3.92901164e+03
  2.96687790e+04  1.56372154e+05  7.03814125e+05]
E1 = -706.5523845951359  E_coul = 198.9129352919044
Extra cycle  E= -507.639449303231  delta_E=    0  |g|= 6.48e-09  |ddm|= 1.66e-08
    CPU time for scf_cycle      0.10 sec, wall time      0.10 sec
exp = [2.93679452e+05 7.34198629e+04 1.83544147e+04 2.23375697e+03
 4.55097663e+02 1.21314695e+02 3.75248101e+01 4.74092393e+00
 3.91198395e-01 8.59862609e+00 4.90850315e-01]
E = -507.63944930323146
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((11, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([7.3419862888950534e+04,1.8354415279684519e+04,2.2337565691104060e+03,4.5509411588185179e+02,1.2132000689951782e+02,3.7517668969809321e+01,4.7408530341284303e+00,3.9118871783972831e-01,8.5986666061044215e+00,4.9085282207620301e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "9s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:03:17 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  293679.451555        1
[INPUT] 0    0    [1    /1   ]  73419.8628921        1
[INPUT] 0    0    [1    /1   ]  18354.4146722        1
[INPUT] 0    0    [1    /1   ]  2233.75697113        1
[INPUT] 0    0    [1    /1   ]  455.097662501        1
[INPUT] 0    0    [1    /1   ]  121.314695348        1
[INPUT] 0    0    [1    /1   ]  37.5248101437        1
[INPUT] 0    0    [1    /1   ]  4.74092392991        1
[INPUT] 0    0    [1    /1   ]  0.391198395436       1
[INPUT] 1    0    [1    /1   ]  8.59862608845        1
[INPUT] 1    0    [1    /1   ]  0.490850315281       1

nuclear repulsion = 0
number of shells = 11
number of NR pGTOs = 15
number of NR cGTOs = 15
basis = {'Ar': [[0, [293679.4515549088, 1.0]], [0, [73419.86289207886, 1.0]], [0, [18354.414672219027, 1.0]], [0, [2233.7569711348856, 1.0]], [0, [455.09766250147806, 1.0]], [0, [121.31469534843269, 1.0]], [0, [37.52481014368796, 1.0]], [0, [4.740923929913548, 1.0]], [0, [0.3911983954364732, 1.0]], [1, [8.598626088445943, 1.0]], [1, [0.49085031528146283, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [293679.45155491]
bas 1, expnt(s) = [73419.86289208]
bas 2, expnt(s) = [18354.41467222]
bas 3, expnt(s) = [2233.75697113]
bas 4, expnt(s) = [455.0976625]
bas 5, expnt(s) = [121.31469535]
bas 6, expnt(s) = [37.52481014]
bas 7, expnt(s) = [4.74092393]
bas 8, expnt(s) = [0.3911984]
bas 9, expnt(s) = [8.59862609]
bas 10, expnt(s) = [0.49085032]
CPU time:        28.00
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]
 [ 0  1  1  1  0 44 45  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 2.93679452e+05 3.18727983e+04 7.34198629e+04 1.12687359e+04
 1.83544147e+04 3.98401008e+03 2.23375697e+03 8.20903231e+02
 4.55097663e+02 2.48939308e+02 1.21314695e+02 9.23528034e+01
 3.75248101e+01 3.83048620e+01 4.74092393e+00 8.11731248e+00
 3.91198395e-01 1.24972030e+00 8.59862609e+00 4.29556923e+01
 4.90850315e-01 1.19859024e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.31998367972919
cond(S) = 45.80849059544654
E1 = -688.8737079462684  E_coul = 184.9151211332669
init E= -503.958586813001
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.680894947768381  LUMO = 84.7425364340086
  mo_energy =
[-1.21650383e+02 -1.32811813e+01 -7.62163188e+00 -7.62163188e+00
 -7.62163188e+00 -1.65069431e+00 -6.80894948e-01 -6.80894948e-01
 -6.80894948e-01  8.47425364e+01  6.74374956e+02  3.92777608e+03
  2.96677101e+04  1.56371158e+05  7.03813160e+05]
E1 = -706.5844345951322  E_coul = 198.94541571861618
cycle= 1 E= -507.639018876516  delta_E= -3.68  |g|= 0.318  |ddm|= 0.301
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.417403
diis-c [-0.17422488  1.        ]
  HOMO = -0.236280074878145  LUMO = 86.0751845999753
  mo_energy =
[-1.20262296e+02 -1.22530923e+01 -6.65309965e+00 -6.65309965e+00
 -6.65309965e+00 -1.16348659e+00 -2.36280075e-01 -2.36280075e-01
 -2.36280075e-01  8.60751846e+01  6.75745725e+02  3.92902773e+03
  2.96687985e+04  1.56372175e+05  7.03814146e+05]
E1 = -706.5528354775055  E_coul = 198.913386285428
cycle= 2 E= -507.639449192077  delta_E= -0.00043  |g|= 0.00476  |ddm|= 0.0144
    CPU time for cycle= 2      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.00505331
diis-c [-2.54915023e-05 -5.05155894e-04  1.00050516e+00]
  HOMO = -0.236456419773348  LUMO = 86.0716558409583
  mo_energy =
[-1.20270974e+02 -1.22542883e+01 -6.65495195e+00 -6.65495195e+00
 -6.65495195e+00 -1.16355177e+00 -2.36456420e-01 -2.36456420e-01
 -2.36456420e-01  8.60716558e+01  6.75735108e+02  3.92901178e+03
  2.96687792e+04  1.56372155e+05  7.03814125e+05]
E1 = -706.5523918691661  E_coul = 198.91294256597473
cycle= 3 E= -507.639449303191  delta_E= -1.11e-07  |g|= 9.52e-05  |ddm|= 0.000203
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.000127309
diis-c [-3.97474850e-10  3.38642871e-05 -2.55136726e-02  1.02547981e+00]
  HOMO = -0.236458651003374  LUMO = 86.0716108963407
  mo_energy =
[-1.20271088e+02 -1.22543043e+01 -6.65497913e+00 -6.65497913e+00
 -6.65497913e+00 -1.16355243e+00 -2.36458651e-01 -2.36458651e-01
 -2.36458651e-01  8.60716109e+01  6.75734990e+02  3.92901164e+03
  2.96687790e+04  1.56372154e+05  7.03814125e+05]
E1 = -706.5523845578575  E_coul = 198.9129352546261
cycle= 4 E= -507.639449303231  delta_E= -4.01e-11  |g|= 3.75e-07  |ddm|= 3.48e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.5523845578575  E_coul = 198.9129352546261
  HOMO = -0.236458634578821  LUMO = 86.0716112352954
  mo_energy =
[-1.20271088e+02 -1.22543041e+01 -6.65497897e+00 -6.65497897e+00
 -6.65497897e+00 -1.16355242e+00 -2.36458635e-01 -2.36458635e-01
 -2.36458635e-01  8.60716112e+01  6.75734991e+02  3.92901164e+03
  2.96687790e+04  1.56372154e+05  7.03814125e+05]
E1 = -706.5523845951359  E_coul = 198.9129352919044
Extra cycle  E= -507.639449303231  delta_E=    0  |g|= 6.48e-09  |ddm|= 1.66e-08
    CPU time for scf_cycle      0.10 sec, wall time      0.10 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 45.80849059544654
E1 = -706.5523845951359  E_coul = 198.9129352919044
init E= -507.639449303231
    CPU time for initialize scf      0.07 sec, wall time      0.07 sec
  HOMO = -0.236458634386391  LUMO = 86.0716112394495
  mo_energy =
[-1.20271088e+02 -1.22543041e+01 -6.65497897e+00 -6.65497897e+00
 -6.65497897e+00 -1.16355242e+00 -2.36458634e-01 -2.36458634e-01
 -2.36458634e-01  8.60716112e+01  6.75734991e+02  3.92901164e+03
  2.96687790e+04  1.56372154e+05  7.03814125e+05]
E1 = -706.5523845957009  E_coul = 198.91293529246954
cycle= 1 E= -507.639449303231  delta_E= 1.14e-13  |g|= 1.29e-10  |ddm|= 2.56e-10
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -706.5523845957009  E_coul = 198.91293529246954
  HOMO = -0.236458634383668  LUMO = 86.0716112395061
  mo_energy =
[-1.20271088e+02 -1.22543041e+01 -6.65497897e+00 -6.65497897e+00
 -6.65497897e+00 -1.16355242e+00 -2.36458634e-01 -2.36458634e-01
 -2.36458634e-01  8.60716112e+01  6.75734991e+02  3.92901164e+03
  2.96687790e+04  1.56372154e+05  7.03814125e+05]
E1 = -706.5523845957113  E_coul = 198.91293529247957
Extra cycle  E= -507.639449303232  delta_E= -3.41e-13  |g|= 2.26e-11  |ddm|= 4.63e-12
    CPU time for scf_cycle      0.14 sec, wall time      0.14 sec
exp = [2.93679452e+05 7.34198629e+04 1.83544147e+04 2.23375697e+03
 4.55097663e+02 1.21314695e+02 3.75248101e+01 4.74092393e+00
 3.91198395e-01 8.59862609e+00 4.90850315e-01]
grad_E = [ 9.33528125e-09 -3.26707226e-08  6.34791525e-06 -4.40273174e-06
 -3.26760471e-05  1.96900838e-05  3.13432945e-05 -1.33346455e-06
  1.56171808e-07 -6.11688615e-06 -4.05886510e-07]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((11, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([7.3419862888950534e+04,1.8354415279684519e+04,2.2337565691104060e+03,4.5509411588185179e+02,1.2132000689951782e+02,3.7517668969809321e+01,4.7408530341284303e+00,3.9118871783972831e-01,8.5986666061044215e+00,4.9085282207620301e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "9s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:03:20 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  293679.451555        1
[INPUT] 0    0    [1    /1   ]  73419.8628921        1
[INPUT] 0    0    [1    /1   ]  18354.4146598        1
[INPUT] 0    0    [1    /1   ]  2233.75697956        1
[INPUT] 0    0    [1    /1   ]  455.097730464        1
[INPUT] 0    0    [1    /1   ]  121.314623711        1
[INPUT] 0    0    [1    /1   ]  37.5248468651        1
[INPUT] 0    0    [1    /1   ]  4.7409224176         1
[INPUT] 0    0    [1    /1   ]  0.391198348271       1
[INPUT] 1    0    [1    /1   ]  8.59863210648        1
[INPUT] 1    0    [1    /1   ]  0.490850481444       1

nuclear repulsion = 0
number of shells = 11
number of NR pGTOs = 15
number of NR cGTOs = 15
basis = {'Ar': [[0, [293679.45155489055, 1.0]], [0, [73419.86289214277, 1.0]], [0, [18354.414659804363, 1.0]], [0, [2233.7569795587874, 1.0]], [0, [455.09773046371345, 1.0]], [0, [121.31462371140672, 1.0]], [0, [37.52484686505096, 1.0]], [0, [4.740922417598027, 1.0]], [0, [0.3911983482712897, 1.0]], [1, [8.59863210647628, 1.0]], [1, [0.4908504814444336, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [293679.45155489]
bas 1, expnt(s) = [73419.86289214]
bas 2, expnt(s) = [18354.4146598]
bas 3, expnt(s) = [2233.75697956]
bas 4, expnt(s) = [455.09773046]
bas 5, expnt(s) = [121.31462371]
bas 6, expnt(s) = [37.52484687]
bas 7, expnt(s) = [4.74092242]
bas 8, expnt(s) = [0.39119835]
bas 9, expnt(s) = [8.59863211]
bas 10, expnt(s) = [0.49085048]
CPU time:        30.87
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]
 [ 0  1  1  1  0 44 45  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 2.93679452e+05 3.18727983e+04 7.34198629e+04 1.12687359e+04
 1.83544147e+04 3.98401008e+03 2.23375698e+03 8.20903233e+02
 4.55097730e+02 2.48939336e+02 1.21314624e+02 9.23527625e+01
 3.75248469e+01 3.83048901e+01 4.74092242e+00 8.11731053e+00
 3.91198348e-01 1.24972018e+00 8.59863211e+00 4.29557299e+01
 4.90850481e-01 1.19859074e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319983471601695
cond(S) = 45.80852682445536
E1 = -688.8737342847652  E_coul = 184.91515148714967
init E= -503.958582797616
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.680894843532304  LUMO = 84.7425786586066
  mo_energy =
[-1.21650376e+02 -1.32811792e+01 -7.62162982e+00 -7.62162982e+00
 -7.62162982e+00 -1.65069405e+00 -6.80894844e-01 -6.80894844e-01
 -6.80894844e-01  8.47425787e+01  6.74374955e+02  3.92777617e+03
  2.96677103e+04  1.56371158e+05  7.03813160e+05]
E1 = -706.5844716358552  E_coul = 198.94545275723814
cycle= 1 E= -507.639018878617  delta_E= -3.68  |g|= 0.318  |ddm|= 0.301
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.417403
diis-c [-0.17422502  1.        ]
  HOMO = -0.236279729253578  LUMO = 86.0752276372522
  mo_energy =
[-1.20262288e+02 -1.22530899e+01 -6.65309712e+00 -6.65309712e+00
 -6.65309712e+00 -1.16348621e+00 -2.36279729e-01 -2.36279729e-01
 -2.36279729e-01  8.60752276e+01  6.75745725e+02  3.92902782e+03
  2.96687986e+04  1.56372175e+05  7.03814146e+05]
E1 = -706.5528725182779  E_coul = 198.91342332361057
cycle= 2 E= -507.639449194667  delta_E= -0.00043  |g|= 0.00476  |ddm|= 0.0144
    CPU time for cycle= 2      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.00505331
diis-c [-2.54915177e-05 -5.05172327e-04  1.00050517e+00]
  HOMO = -0.236456074360196  LUMO = 86.071698879687
  mo_energy =
[-1.20270967e+02 -1.22542859e+01 -6.65494942e+00 -6.65494942e+00
 -6.65494942e+00 -1.16355139e+00 -2.36456074e-01 -2.36456074e-01
 -2.36456074e-01  8.60716989e+01  6.75735109e+02  3.92901187e+03
  2.96687793e+04  1.56372155e+05  7.03814125e+05]
E1 = -706.5524289098564  E_coul = 198.91297960407513
cycle= 3 E= -507.639449305781  delta_E= -1.11e-07  |g|= 9.52e-05  |ddm|= 0.000203
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.000127309
diis-c [-3.97474112e-10  3.38645088e-05 -2.55136593e-02  1.02547979e+00]
  HOMO = -0.236458305590617  LUMO = 86.0716539351409
  mo_energy =
[-1.20271081e+02 -1.22543018e+01 -6.65497661e+00 -6.65497661e+00
 -6.65497661e+00 -1.16355205e+00 -2.36458306e-01 -2.36458306e-01
 -2.36458306e-01  8.60716539e+01  6.75734991e+02  3.92901173e+03
  2.96687791e+04  1.56372154e+05  7.03814125e+05]
E1 = -706.5524215985537  E_coul = 198.91297229273226
cycle= 4 E= -507.639449305821  delta_E= -4.01e-11  |g|= 3.75e-07  |ddm|= 3.48e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.5524215985537  E_coul = 198.91297229273226
  HOMO = -0.236458289166079  LUMO = 86.0716542740939
  mo_energy =
[-1.20271081e+02 -1.22543017e+01 -6.65497644e+00 -6.65497644e+00
 -6.65497644e+00 -1.16355205e+00 -2.36458289e-01 -2.36458289e-01
 -2.36458289e-01  8.60716543e+01  6.75734992e+02  3.92901173e+03
  2.96687791e+04  1.56372154e+05  7.03814125e+05]
E1 = -706.552421635832  E_coul = 198.9129723300108
Extra cycle  E= -507.639449305821  delta_E= 1.71e-13  |g|= 6.48e-09  |ddm|= 1.66e-08
    CPU time for scf_cycle      0.10 sec, wall time      0.10 sec
exp = [2.93679452e+05 7.34198629e+04 1.83544147e+04 2.23375698e+03
 4.55097730e+02 1.21314624e+02 3.75248469e+01 4.74092242e+00
 3.91198348e-01 8.59863211e+00 4.90850481e-01]
E = -507.63944930582124
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((11, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([7.3419862888950534e+04,1.8354415279684519e+04,2.2337565691104060e+03,4.5509411588185179e+02,1.2132000689951782e+02,3.7517668969809321e+01,4.7408530341284303e+00,3.9118871783972831e-01,8.5986666061044215e+00,4.9085282207620301e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "9s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:03:20 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  293679.451555        1
[INPUT] 0    0    [1    /1   ]  73419.8628921        1
[INPUT] 0    0    [1    /1   ]  18354.4146598        1
[INPUT] 0    0    [1    /1   ]  2233.75697956        1
[INPUT] 0    0    [1    /1   ]  455.097730464        1
[INPUT] 0    0    [1    /1   ]  121.314623711        1
[INPUT] 0    0    [1    /1   ]  37.5248468651        1
[INPUT] 0    0    [1    /1   ]  4.7409224176         1
[INPUT] 0    0    [1    /1   ]  0.391198348271       1
[INPUT] 1    0    [1    /1   ]  8.59863210648        1
[INPUT] 1    0    [1    /1   ]  0.490850481444       1

nuclear repulsion = 0
number of shells = 11
number of NR pGTOs = 15
number of NR cGTOs = 15
basis = {'Ar': [[0, [293679.45155489055, 1.0]], [0, [73419.86289214277, 1.0]], [0, [18354.414659804363, 1.0]], [0, [2233.7569795587874, 1.0]], [0, [455.09773046371345, 1.0]], [0, [121.31462371140672, 1.0]], [0, [37.52484686505096, 1.0]], [0, [4.740922417598027, 1.0]], [0, [0.3911983482712897, 1.0]], [1, [8.59863210647628, 1.0]], [1, [0.4908504814444336, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [293679.45155489]
bas 1, expnt(s) = [73419.86289214]
bas 2, expnt(s) = [18354.4146598]
bas 3, expnt(s) = [2233.75697956]
bas 4, expnt(s) = [455.09773046]
bas 5, expnt(s) = [121.31462371]
bas 6, expnt(s) = [37.52484687]
bas 7, expnt(s) = [4.74092242]
bas 8, expnt(s) = [0.39119835]
bas 9, expnt(s) = [8.59863211]
bas 10, expnt(s) = [0.49085048]
CPU time:        31.13
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]
 [ 0  1  1  1  0 44 45  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 2.93679452e+05 3.18727983e+04 7.34198629e+04 1.12687359e+04
 1.83544147e+04 3.98401008e+03 2.23375698e+03 8.20903233e+02
 4.55097730e+02 2.48939336e+02 1.21314624e+02 9.23527625e+01
 3.75248469e+01 3.83048901e+01 4.74092242e+00 8.11731053e+00
 3.91198348e-01 1.24972018e+00 8.59863211e+00 4.29557299e+01
 4.90850481e-01 1.19859074e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319983471601695
cond(S) = 45.80852682445536
E1 = -688.8737342847652  E_coul = 184.91515148714967
init E= -503.958582797616
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.680894843532304  LUMO = 84.7425786586066
  mo_energy =
[-1.21650376e+02 -1.32811792e+01 -7.62162982e+00 -7.62162982e+00
 -7.62162982e+00 -1.65069405e+00 -6.80894844e-01 -6.80894844e-01
 -6.80894844e-01  8.47425787e+01  6.74374955e+02  3.92777617e+03
  2.96677103e+04  1.56371158e+05  7.03813160e+05]
E1 = -706.5844716358552  E_coul = 198.94545275723814
cycle= 1 E= -507.639018878617  delta_E= -3.68  |g|= 0.318  |ddm|= 0.301
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.417403
diis-c [-0.17422502  1.        ]
  HOMO = -0.236279729253578  LUMO = 86.0752276372522
  mo_energy =
[-1.20262288e+02 -1.22530899e+01 -6.65309712e+00 -6.65309712e+00
 -6.65309712e+00 -1.16348621e+00 -2.36279729e-01 -2.36279729e-01
 -2.36279729e-01  8.60752276e+01  6.75745725e+02  3.92902782e+03
  2.96687986e+04  1.56372175e+05  7.03814146e+05]
E1 = -706.5528725182779  E_coul = 198.91342332361057
cycle= 2 E= -507.639449194667  delta_E= -0.00043  |g|= 0.00476  |ddm|= 0.0144
    CPU time for cycle= 2      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.00505331
diis-c [-2.54915177e-05 -5.05172327e-04  1.00050517e+00]
  HOMO = -0.236456074360196  LUMO = 86.071698879687
  mo_energy =
[-1.20270967e+02 -1.22542859e+01 -6.65494942e+00 -6.65494942e+00
 -6.65494942e+00 -1.16355139e+00 -2.36456074e-01 -2.36456074e-01
 -2.36456074e-01  8.60716989e+01  6.75735109e+02  3.92901187e+03
  2.96687793e+04  1.56372155e+05  7.03814125e+05]
E1 = -706.5524289098564  E_coul = 198.91297960407513
cycle= 3 E= -507.639449305781  delta_E= -1.11e-07  |g|= 9.52e-05  |ddm|= 0.000203
    CPU time for cycle= 3      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.000127309
diis-c [-3.97474112e-10  3.38645088e-05 -2.55136593e-02  1.02547979e+00]
  HOMO = -0.236458305590617  LUMO = 86.0716539351409
  mo_energy =
[-1.20271081e+02 -1.22543018e+01 -6.65497661e+00 -6.65497661e+00
 -6.65497661e+00 -1.16355205e+00 -2.36458306e-01 -2.36458306e-01
 -2.36458306e-01  8.60716539e+01  6.75734991e+02  3.92901173e+03
  2.96687791e+04  1.56372154e+05  7.03814125e+05]
E1 = -706.5524215985537  E_coul = 198.91297229273226
cycle= 4 E= -507.639449305821  delta_E= -4.01e-11  |g|= 3.75e-07  |ddm|= 3.48e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.5524215985537  E_coul = 198.91297229273226
  HOMO = -0.236458289166079  LUMO = 86.0716542740939
  mo_energy =
[-1.20271081e+02 -1.22543017e+01 -6.65497644e+00 -6.65497644e+00
 -6.65497644e+00 -1.16355205e+00 -2.36458289e-01 -2.36458289e-01
 -2.36458289e-01  8.60716543e+01  6.75734992e+02  3.92901173e+03
  2.96687791e+04  1.56372154e+05  7.03814125e+05]
E1 = -706.552421635832  E_coul = 198.9129723300108
Extra cycle  E= -507.639449305821  delta_E= 1.71e-13  |g|= 6.48e-09  |ddm|= 1.66e-08
    CPU time for scf_cycle      0.09 sec, wall time      0.10 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 45.80852682445536
E1 = -706.552421635832  E_coul = 198.9129723300108
init E= -507.639449305821
    CPU time for initialize scf      0.08 sec, wall time      0.08 sec
  HOMO = -0.236458288973648  LUMO = 86.0716542782479
  mo_energy =
[-1.20271081e+02 -1.22543017e+01 -6.65497644e+00 -6.65497644e+00
 -6.65497644e+00 -1.16355205e+00 -2.36458289e-01 -2.36458289e-01
 -2.36458289e-01  8.60716543e+01  6.75734992e+02  3.92901173e+03
  2.96687791e+04  1.56372154e+05  7.03814125e+05]
E1 = -706.5524216363967  E_coul = 198.91297233057554
cycle= 1 E= -507.639449305821  delta_E= 5.68e-14  |g|= 1.35e-10  |ddm|= 2.56e-10
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -706.5524216363967  E_coul = 198.91297233057554
  HOMO = -0.236458288970934  LUMO = 86.0716542783069
  mo_energy =
[-1.20271081e+02 -1.22543017e+01 -6.65497644e+00 -6.65497644e+00
 -6.65497644e+00 -1.16355205e+00 -2.36458289e-01 -2.36458289e-01
 -2.36458289e-01  8.60716543e+01  6.75734992e+02  3.92901173e+03
  2.96687791e+04  1.56372154e+05  7.03814125e+05]
E1 = -706.5524216364068  E_coul = 198.9129723305855
Extra cycle  E= -507.639449305821  delta_E= -1.71e-13  |g|= 9.73e-12  |ddm|= 4.58e-12
    CPU time for scf_cycle      0.14 sec, wall time      0.15 sec
exp = [2.93679452e+05 7.34198629e+04 1.83544147e+04 2.23375698e+03
 4.55097730e+02 1.21314624e+02 3.75248469e+01 4.74092242e+00
 3.91198348e-01 8.59863211e+00 4.90850481e-01]
grad_E = [ 9.33531146e-09 -3.26706245e-08  6.34793384e-06 -4.40468151e-06
 -3.26369404e-05  1.94064549e-05  3.21097389e-05 -1.83545649e-06
  1.31211110e-07 -1.18125817e-06 -3.42318629e-07]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((11, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([7.3419862888950534e+04,1.8354415279684519e+04,2.2337565691104060e+03,4.5509411588185179e+02,1.2132000689951782e+02,3.7517668969809321e+01,4.7408530341284303e+00,3.9118871783972831e-01,8.5986666061044215e+00,4.9085282207620301e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "9s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:03:23 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  293679.451555        1
[INPUT] 0    0    [1    /1   ]  73419.8628924        1
[INPUT] 0    0    [1    /1   ]  18354.4146128        1
[INPUT] 0    0    [1    /1   ]  2233.75701183        1
[INPUT] 0    0    [1    /1   ]  455.097980194        1
[INPUT] 0    0    [1    /1   ]  121.314415405        1
[INPUT] 0    0    [1    /1   ]  37.5247996692        1
[INPUT] 0    0    [1    /1   ]  4.74092146961        1
[INPUT] 0    0    [1    /1   ]  0.391198240547       1
[INPUT] 1    0    [1    /1   ]  8.59864164639        1
[INPUT] 1    0    [1    /1   ]  0.490850748617       1

nuclear repulsion = 0
number of shells = 11
number of NR pGTOs = 15
number of NR cGTOs = 15
basis = {'Ar': [[0, [293679.4515548214, 1.0]], [0, [73419.86289238487, 1.0]], [0, [18354.414612770754, 1.0]], [0, [2233.7570118301146, 1.0]], [0, [455.0979801936998, 1.0]], [0, [121.31441540511187, 1.0]], [0, [37.52479966922785, 1.0]], [0, [4.740921469607322, 1.0]], [0, [0.3911982405471977, 1.0]], [1, [8.598641646391586, 1.0]], [1, [0.4908507486168218, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [293679.45155482]
bas 1, expnt(s) = [73419.86289238]
bas 2, expnt(s) = [18354.41461277]
bas 3, expnt(s) = [2233.75701183]
bas 4, expnt(s) = [455.09798019]
bas 5, expnt(s) = [121.31441541]
bas 6, expnt(s) = [37.52479967]
bas 7, expnt(s) = [4.74092147]
bas 8, expnt(s) = [0.39119824]
bas 9, expnt(s) = [8.59864165]
bas 10, expnt(s) = [0.49085075]
CPU time:        33.99
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]
 [ 0  1  1  1  0 44 45  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 2.93679452e+05 3.18727983e+04 7.34198629e+04 1.12687359e+04
 1.83544146e+04 3.98401007e+03 2.23375701e+03 8.20903242e+02
 4.55097980e+02 2.48939438e+02 1.21314415e+02 9.23526436e+01
 3.75247997e+01 3.83048540e+01 4.74092147e+00 8.11730932e+00
 3.91198241e-01 1.24971992e+00 8.59864165e+00 4.29557894e+01
 4.90850749e-01 1.19859156e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319983126187292
cond(S) = 45.80844487841502
E1 = -688.8737798987408  E_coul = 184.91519990425076
init E= -503.95857999449
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.680894686728498  LUMO = 84.7423921369196
  mo_energy =
[-1.21650367e+02 -1.32811754e+01 -7.62162652e+00 -7.62162652e+00
 -7.62162652e+00 -1.65069363e+00 -6.80894687e-01 -6.80894687e-01
 -6.80894687e-01  8.47423921e+01  6.74374425e+02  3.92777606e+03
  2.96677104e+04  1.56371158e+05  7.03813160e+05]
E1 = -706.5845300529712  E_coul = 198.94551116291674
cycle= 1 E= -507.639018890054  delta_E= -3.68  |g|= 0.318  |ddm|= 0.301
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.417403
diis-c [-0.174225  1.      ]
  HOMO = -0.236279180013199  LUMO = 86.0750418906081
  mo_energy =
[-1.20262278e+02 -1.22530855e+01 -6.65309311e+00 -6.65309311e+00
 -6.65309311e+00 -1.16348558e+00 -2.36279180e-01 -2.36279180e-01
 -2.36279180e-01  8.60750419e+01  6.75745196e+02  3.92902771e+03
  2.96687987e+04  1.56372175e+05  7.03814146e+05]
E1 = -706.5529307853647  E_coul = 198.91348157660147
cycle= 2 E= -507.639449208763  delta_E= -0.00043  |g|= 0.00476  |ddm|= 0.0144
    CPU time for cycle= 2      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.00505333
diis-c [-2.54916876e-05 -5.05169816e-04  1.00050517e+00]
  HOMO = -0.236455526379355  LUMO = 86.0715131219872
  mo_energy =
[-1.20270957e+02 -1.22542815e+01 -6.65494541e+00 -6.65494541e+00
 -6.65494541e+00 -1.16355076e+00 -2.36455526e-01 -2.36455526e-01
 -2.36455526e-01  8.60715131e+01  6.75734579e+02  3.92901176e+03
  2.96687794e+04  1.56372155e+05  7.03814125e+05]
E1 = -706.5524871741457  E_coul = 198.91303785426754
cycle= 3 E= -507.639449319878  delta_E= -1.11e-07  |g|= 9.52e-05  |ddm|= 0.000203
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00012731
diis-c [-3.97479169e-10  3.38642944e-05 -2.55136864e-02  1.02547982e+00]
  HOMO = -0.236457757630114  LUMO = 86.0714681772017
  mo_energy =
[-1.20271071e+02 -1.22542974e+01 -6.65497260e+00 -6.65497260e+00
 -6.65497260e+00 -1.16355142e+00 -2.36457758e-01 -2.36457758e-01
 -2.36457758e-01  8.60714682e+01  6.75734462e+02  3.92901162e+03
  2.96687793e+04  1.56372155e+05  7.03814125e+05]
E1 = -706.5524798627844  E_coul = 198.91303054286598
cycle= 4 E= -507.639449319918  delta_E= -4.03e-11  |g|= 3.75e-07  |ddm|= 3.48e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.5524798627844  E_coul = 198.91303054286598
  HOMO = -0.236457741205379  LUMO = 86.071468516157
  mo_energy =
[-1.20271070e+02 -1.22542973e+01 -6.65497244e+00 -6.65497244e+00
 -6.65497244e+00 -1.16355142e+00 -2.36457741e-01 -2.36457741e-01
 -2.36457741e-01  8.60714685e+01  6.75734463e+02  3.92901162e+03
  2.96687793e+04  1.56372155e+05  7.03814125e+05]
E1 = -706.5524799000633  E_coul = 198.91303058014503
Extra cycle  E= -507.639449319918  delta_E= 1.14e-13  |g|= 6.48e-09  |ddm|= 1.66e-08
    CPU time for scf_cycle      0.10 sec, wall time      0.10 sec
exp = [2.93679452e+05 7.34198629e+04 1.83544146e+04 2.23375701e+03
 4.55097980e+02 1.21314415e+02 3.75247997e+01 4.74092147e+00
 3.91198241e-01 8.59864165e+00 4.90850749e-01]
E = -507.6394493199183
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((11, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([7.3419862888950534e+04,1.8354415279684519e+04,2.2337565691104060e+03,4.5509411588185179e+02,1.2132000689951782e+02,3.7517668969809321e+01,4.7408530341284303e+00,3.9118871783972831e-01,8.5986666061044215e+00,4.9085282207620301e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "9s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:03:23 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  293679.451555        1
[INPUT] 0    0    [1    /1   ]  73419.8628924        1
[INPUT] 0    0    [1    /1   ]  18354.4146128        1
[INPUT] 0    0    [1    /1   ]  2233.75701183        1
[INPUT] 0    0    [1    /1   ]  455.097980194        1
[INPUT] 0    0    [1    /1   ]  121.314415405        1
[INPUT] 0    0    [1    /1   ]  37.5247996692        1
[INPUT] 0    0    [1    /1   ]  4.74092146961        1
[INPUT] 0    0    [1    /1   ]  0.391198240547       1
[INPUT] 1    0    [1    /1   ]  8.59864164639        1
[INPUT] 1    0    [1    /1   ]  0.490850748617       1

nuclear repulsion = 0
number of shells = 11
number of NR pGTOs = 15
number of NR cGTOs = 15
basis = {'Ar': [[0, [293679.4515548214, 1.0]], [0, [73419.86289238487, 1.0]], [0, [18354.414612770754, 1.0]], [0, [2233.7570118301146, 1.0]], [0, [455.0979801936998, 1.0]], [0, [121.31441540511187, 1.0]], [0, [37.52479966922785, 1.0]], [0, [4.740921469607322, 1.0]], [0, [0.3911982405471977, 1.0]], [1, [8.598641646391586, 1.0]], [1, [0.4908507486168218, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [293679.45155482]
bas 1, expnt(s) = [73419.86289238]
bas 2, expnt(s) = [18354.41461277]
bas 3, expnt(s) = [2233.75701183]
bas 4, expnt(s) = [455.09798019]
bas 5, expnt(s) = [121.31441541]
bas 6, expnt(s) = [37.52479967]
bas 7, expnt(s) = [4.74092147]
bas 8, expnt(s) = [0.39119824]
bas 9, expnt(s) = [8.59864165]
bas 10, expnt(s) = [0.49085075]
CPU time:        34.26
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]
 [ 0  1  1  1  0 44 45  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 2.93679452e+05 3.18727983e+04 7.34198629e+04 1.12687359e+04
 1.83544146e+04 3.98401007e+03 2.23375701e+03 8.20903242e+02
 4.55097980e+02 2.48939438e+02 1.21314415e+02 9.23526436e+01
 3.75247997e+01 3.83048540e+01 4.74092147e+00 8.11730932e+00
 3.91198241e-01 1.24971992e+00 8.59864165e+00 4.29557894e+01
 4.90850749e-01 1.19859156e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319983126187292
cond(S) = 45.80844487841502
E1 = -688.8737798987408  E_coul = 184.91519990425076
init E= -503.95857999449
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.680894686728498  LUMO = 84.7423921369196
  mo_energy =
[-1.21650367e+02 -1.32811754e+01 -7.62162652e+00 -7.62162652e+00
 -7.62162652e+00 -1.65069363e+00 -6.80894687e-01 -6.80894687e-01
 -6.80894687e-01  8.47423921e+01  6.74374425e+02  3.92777606e+03
  2.96677104e+04  1.56371158e+05  7.03813160e+05]
E1 = -706.5845300529712  E_coul = 198.94551116291674
cycle= 1 E= -507.639018890054  delta_E= -3.68  |g|= 0.318  |ddm|= 0.301
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.417403
diis-c [-0.174225  1.      ]
  HOMO = -0.236279180013199  LUMO = 86.0750418906081
  mo_energy =
[-1.20262278e+02 -1.22530855e+01 -6.65309311e+00 -6.65309311e+00
 -6.65309311e+00 -1.16348558e+00 -2.36279180e-01 -2.36279180e-01
 -2.36279180e-01  8.60750419e+01  6.75745196e+02  3.92902771e+03
  2.96687987e+04  1.56372175e+05  7.03814146e+05]
E1 = -706.5529307853647  E_coul = 198.91348157660147
cycle= 2 E= -507.639449208763  delta_E= -0.00043  |g|= 0.00476  |ddm|= 0.0144
    CPU time for cycle= 2      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.00505333
diis-c [-2.54916876e-05 -5.05169816e-04  1.00050517e+00]
  HOMO = -0.236455526379355  LUMO = 86.0715131219872
  mo_energy =
[-1.20270957e+02 -1.22542815e+01 -6.65494541e+00 -6.65494541e+00
 -6.65494541e+00 -1.16355076e+00 -2.36455526e-01 -2.36455526e-01
 -2.36455526e-01  8.60715131e+01  6.75734579e+02  3.92901176e+03
  2.96687794e+04  1.56372155e+05  7.03814125e+05]
E1 = -706.5524871741457  E_coul = 198.91303785426754
cycle= 3 E= -507.639449319878  delta_E= -1.11e-07  |g|= 9.52e-05  |ddm|= 0.000203
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00012731
diis-c [-3.97479169e-10  3.38642944e-05 -2.55136864e-02  1.02547982e+00]
  HOMO = -0.236457757630114  LUMO = 86.0714681772017
  mo_energy =
[-1.20271071e+02 -1.22542974e+01 -6.65497260e+00 -6.65497260e+00
 -6.65497260e+00 -1.16355142e+00 -2.36457758e-01 -2.36457758e-01
 -2.36457758e-01  8.60714682e+01  6.75734462e+02  3.92901162e+03
  2.96687793e+04  1.56372155e+05  7.03814125e+05]
E1 = -706.5524798627844  E_coul = 198.91303054286598
cycle= 4 E= -507.639449319918  delta_E= -4.03e-11  |g|= 3.75e-07  |ddm|= 3.48e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.5524798627844  E_coul = 198.91303054286598
  HOMO = -0.236457741205379  LUMO = 86.071468516157
  mo_energy =
[-1.20271070e+02 -1.22542973e+01 -6.65497244e+00 -6.65497244e+00
 -6.65497244e+00 -1.16355142e+00 -2.36457741e-01 -2.36457741e-01
 -2.36457741e-01  8.60714685e+01  6.75734463e+02  3.92901162e+03
  2.96687793e+04  1.56372155e+05  7.03814125e+05]
E1 = -706.5524799000633  E_coul = 198.91303058014503
Extra cycle  E= -507.639449319918  delta_E= 1.14e-13  |g|= 6.48e-09  |ddm|= 1.66e-08
    CPU time for scf_cycle      0.09 sec, wall time      0.10 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 45.80844487841502
E1 = -706.5524799000633  E_coul = 198.91303058014503
init E= -507.639449319918
    CPU time for initialize scf      0.08 sec, wall time      0.08 sec
  HOMO = -0.236457741012941  LUMO = 86.0714685203099
  mo_energy =
[-1.20271070e+02 -1.22542973e+01 -6.65497243e+00 -6.65497243e+00
 -6.65497243e+00 -1.16355142e+00 -2.36457741e-01 -2.36457741e-01
 -2.36457741e-01  8.60714685e+01  6.75734463e+02  3.92901162e+03
  2.96687793e+04  1.56372155e+05  7.03814125e+05]
E1 = -706.5524799006287  E_coul = 198.91303058071003
cycle= 1 E= -507.639449319919  delta_E= -3.41e-13  |g|= 1.29e-10  |ddm|= 2.56e-10
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -706.5524799006287  E_coul = 198.91303058071003
  HOMO = -0.236457741010224  LUMO = 86.0714685203692
  mo_energy =
[-1.20271070e+02 -1.22542973e+01 -6.65497243e+00 -6.65497243e+00
 -6.65497243e+00 -1.16355142e+00 -2.36457741e-01 -2.36457741e-01
 -2.36457741e-01  8.60714685e+01  6.75734463e+02  3.92901162e+03
  2.96687793e+04  1.56372155e+05  7.03814125e+05]
E1 = -706.5524799006386  E_coul = 198.91303058071998
Extra cycle  E= -507.639449319919  delta_E= 5.68e-14  |g|= 1.88e-11  |ddm|= 4.57e-12
    CPU time for scf_cycle      0.14 sec, wall time      0.15 sec
exp = [2.93679452e+05 7.34198629e+04 1.83544146e+04 2.23375701e+03
 4.55097980e+02 1.21314415e+02 3.75247997e+01 4.74092147e+00
 3.91198241e-01 8.59864165e+00 4.90850749e-01]
grad_E = [ 9.33536413e-09 -3.26704512e-08  6.34796619e-06 -4.40796816e-06
 -3.25823590e-05  1.91575346e-05  3.24352305e-05 -1.86928922e-06
  2.84923942e-08  6.56638843e-06 -7.26852249e-08]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((11, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([7.3419862888950534e+04,1.8354415279684519e+04,2.2337565691104060e+03,4.5509411588185179e+02,1.2132000689951782e+02,3.7517668969809321e+01,4.7408530341284303e+00,3.9118871783972831e-01,8.5986666061044215e+00,4.9085282207620301e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "9s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:03:26 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  293679.451554        1
[INPUT] 0    0    [1    /1   ]  73419.8628936        1
[INPUT] 0    0    [1    /1   ]  18354.4143848        1
[INPUT] 0    0    [1    /1   ]  2233.75716847        1
[INPUT] 0    0    [1    /1   ]  455.099185131        1
[INPUT] 0    0    [1    /1   ]  121.31344803         1
[INPUT] 0    0    [1    /1   ]  37.524448497         1
[INPUT] 0    0    [1    /1   ]  4.7409208208         1
[INPUT] 0    0    [1    /1   ]  0.391198044578       1
[INPUT] 1    0    [1    /1   ]  8.59865449919        1
[INPUT] 1    0    [1    /1   ]  0.490851114826       1

nuclear repulsion = 0
number of shells = 11
number of NR pGTOs = 15
number of NR cGTOs = 15
basis = {'Ar': [[0, [293679.4515544862, 1.0]], [0, [73419.8628935581, 1.0]], [0, [18354.41438484121, 1.0]], [0, [2233.757168466739, 1.0]], [0, [455.09918513052963, 1.0]], [0, [121.31344803039848, 1.0]], [0, [37.524448497021375, 1.0]], [0, [4.740920820800078, 1.0]], [0, [0.39119804457783164, 1.0]], [1, [8.59865449919191, 1.0]], [1, [0.49085111482641464, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [293679.45155449]
bas 1, expnt(s) = [73419.86289356]
bas 2, expnt(s) = [18354.41438484]
bas 3, expnt(s) = [2233.75716847]
bas 4, expnt(s) = [455.09918513]
bas 5, expnt(s) = [121.31344803]
bas 6, expnt(s) = [37.5244485]
bas 7, expnt(s) = [4.74092082]
bas 8, expnt(s) = [0.39119804]
bas 9, expnt(s) = [8.5986545]
bas 10, expnt(s) = [0.49085111]
CPU time:        37.18
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]
 [ 0  1  1  1  0 44 45  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 2.93679452e+05 3.18727983e+04 7.34198629e+04 1.12687359e+04
 1.83544144e+04 3.98401003e+03 2.23375717e+03 8.20903285e+02
 4.55099185e+02 2.48939933e+02 1.21313448e+02 9.23520913e+01
 3.75244485e+01 3.83045851e+01 4.74092082e+00 8.11730848e+00
 3.91198045e-01 1.24971945e+00 8.59865450e+00 4.29558697e+01
 4.90851115e-01 1.19859268e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.31998266698144
cond(S) = 45.807905862198375
E1 = -688.8738371344886  E_coul = 184.91526380565352
init E= -503.958573328835
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.68089448825668  LUMO = 84.7412449745192
  mo_energy =
[-1.21650355e+02 -1.32811698e+01 -7.62162222e+00 -7.62162222e+00
 -7.62162222e+00 -1.65069299e+00 -6.80894488e-01 -6.80894488e-01
 -6.80894488e-01  8.47412450e+01  6.74371488e+02  3.92777521e+03
  2.96677107e+04  1.56371158e+05  7.03813160e+05]
E1 = -706.5846059188952  E_coul = 198.94558696882524
cycle= 1 E= -507.63901895007  delta_E= -3.68  |g|= 0.318  |ddm|= 0.301
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.417402
diis-c [-0.17422436  1.        ]
  HOMO = -0.236278463038333  LUMO = 86.0738944582273
  mo_energy =
[-1.20262265e+02 -1.22530791e+01 -6.65308789e+00 -6.65308789e+00
 -6.65308789e+00 -1.16348469e+00 -2.36278463e-01 -2.36278463e-01
 -2.36278463e-01  8.60738945e+01  6.75742259e+02  3.92902686e+03
  2.96687990e+04  1.56372175e+05  7.03814146e+05]
E1 = -706.5530059483372  E_coul = 198.9135566688743
cycle= 2 E= -507.639449279463  delta_E= -0.00043  |g|= 0.00476  |ddm|= 0.0144
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.0050534
diis-c [-2.54924057e-05 -5.05111791e-04  1.00050511e+00]
  HOMO = -0.236454814357875  LUMO = 86.0703656373667
  mo_energy =
[-1.20270944e+02 -1.22542752e+01 -6.65494024e+00 -6.65494024e+00
 -6.65494024e+00 -1.16354988e+00 -2.36454814e-01 -2.36454814e-01
 -2.36454814e-01  8.60703656e+01  6.75731643e+02  3.92901091e+03
  2.96687797e+04  1.56372155e+05  7.03814125e+05]
E1 = -706.5525623236933  E_coul = 198.91311293311125
cycle= 3 E= -507.639449390582  delta_E= -1.11e-07  |g|= 9.52e-05  |ddm|= 0.000203
    CPU time for cycle= 3      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.000127312
diis-c [-3.97497561e-10  3.38640646e-05 -2.55139048e-02  1.02548004e+00]
  HOMO = -0.236457045699923  LUMO = 86.0703206912354
  mo_energy =
[-1.20271058e+02 -1.22542911e+01 -6.65496743e+00 -6.65496743e+00
 -6.65496743e+00 -1.16355054e+00 -2.36457046e-01 -2.36457046e-01
 -2.36457046e-01  8.60703207e+01  6.75731525e+02  3.92901077e+03
  2.96687796e+04  1.56372154e+05  7.03814125e+05]
E1 = -706.5525550120235  E_coul = 198.91310562140114
cycle= 4 E= -507.639449390622  delta_E= -4.03e-11  |g|= 3.75e-07  |ddm|= 3.48e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.5525550120235  E_coul = 198.91310562140114
  HOMO = -0.236457029274402  LUMO = 86.0703210302011
  mo_energy =
[-1.20271057e+02 -1.22542910e+01 -6.65496727e+00 -6.65496727e+00
 -6.65496727e+00 -1.16355053e+00 -2.36457029e-01 -2.36457029e-01
 -2.36457029e-01  8.60703210e+01  6.75731526e+02  3.92901077e+03
  2.96687796e+04  1.56372154e+05  7.03814125e+05]
E1 = -706.5525550493041  E_coul = 198.9131056586817
Extra cycle  E= -507.639449390622  delta_E= -5.68e-14  |g|= 6.48e-09  |ddm|= 1.66e-08
    CPU time for scf_cycle      0.10 sec, wall time      0.10 sec
exp = [2.93679452e+05 7.34198629e+04 1.83544144e+04 2.23375717e+03
 4.55099185e+02 1.21313448e+02 3.75244485e+01 4.74092082e+00
 3.91198045e-01 8.59865450e+00 4.90851115e-01]
E = -507.6394493906224
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((11, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([7.3419862888950534e+04,1.8354415279684519e+04,2.2337565691104060e+03,4.5509411588185179e+02,1.2132000689951782e+02,3.7517668969809321e+01,4.7408530341284303e+00,3.9118871783972831e-01,8.5986666061044215e+00,4.9085282207620301e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "9s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:03:26 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  293679.451554        1
[INPUT] 0    0    [1    /1   ]  73419.8628936        1
[INPUT] 0    0    [1    /1   ]  18354.4143848        1
[INPUT] 0    0    [1    /1   ]  2233.75716847        1
[INPUT] 0    0    [1    /1   ]  455.099185131        1
[INPUT] 0    0    [1    /1   ]  121.31344803         1
[INPUT] 0    0    [1    /1   ]  37.524448497         1
[INPUT] 0    0    [1    /1   ]  4.7409208208         1
[INPUT] 0    0    [1    /1   ]  0.391198044578       1
[INPUT] 1    0    [1    /1   ]  8.59865449919        1
[INPUT] 1    0    [1    /1   ]  0.490851114826       1

nuclear repulsion = 0
number of shells = 11
number of NR pGTOs = 15
number of NR cGTOs = 15
basis = {'Ar': [[0, [293679.4515544862, 1.0]], [0, [73419.8628935581, 1.0]], [0, [18354.41438484121, 1.0]], [0, [2233.757168466739, 1.0]], [0, [455.09918513052963, 1.0]], [0, [121.31344803039848, 1.0]], [0, [37.524448497021375, 1.0]], [0, [4.740920820800078, 1.0]], [0, [0.39119804457783164, 1.0]], [1, [8.59865449919191, 1.0]], [1, [0.49085111482641464, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [293679.45155449]
bas 1, expnt(s) = [73419.86289356]
bas 2, expnt(s) = [18354.41438484]
bas 3, expnt(s) = [2233.75716847]
bas 4, expnt(s) = [455.09918513]
bas 5, expnt(s) = [121.31344803]
bas 6, expnt(s) = [37.5244485]
bas 7, expnt(s) = [4.74092082]
bas 8, expnt(s) = [0.39119804]
bas 9, expnt(s) = [8.5986545]
bas 10, expnt(s) = [0.49085111]
CPU time:        37.47
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]
 [ 0  1  1  1  0 44 45  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 2.93679452e+05 3.18727983e+04 7.34198629e+04 1.12687359e+04
 1.83544144e+04 3.98401003e+03 2.23375717e+03 8.20903285e+02
 4.55099185e+02 2.48939933e+02 1.21313448e+02 9.23520913e+01
 3.75244485e+01 3.83045851e+01 4.74092082e+00 8.11730848e+00
 3.91198045e-01 1.24971945e+00 8.59865450e+00 4.29558697e+01
 4.90851115e-01 1.19859268e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.31998266698144
cond(S) = 45.807905862198375
E1 = -688.8738371344886  E_coul = 184.91526380565352
init E= -503.958573328835
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.68089448825668  LUMO = 84.7412449745192
  mo_energy =
[-1.21650355e+02 -1.32811698e+01 -7.62162222e+00 -7.62162222e+00
 -7.62162222e+00 -1.65069299e+00 -6.80894488e-01 -6.80894488e-01
 -6.80894488e-01  8.47412450e+01  6.74371488e+02  3.92777521e+03
  2.96677107e+04  1.56371158e+05  7.03813160e+05]
E1 = -706.5846059188952  E_coul = 198.94558696882524
cycle= 1 E= -507.63901895007  delta_E= -3.68  |g|= 0.318  |ddm|= 0.301
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.417402
diis-c [-0.17422436  1.        ]
  HOMO = -0.236278463038333  LUMO = 86.0738944582273
  mo_energy =
[-1.20262265e+02 -1.22530791e+01 -6.65308789e+00 -6.65308789e+00
 -6.65308789e+00 -1.16348469e+00 -2.36278463e-01 -2.36278463e-01
 -2.36278463e-01  8.60738945e+01  6.75742259e+02  3.92902686e+03
  2.96687990e+04  1.56372175e+05  7.03814146e+05]
E1 = -706.5530059483372  E_coul = 198.9135566688743
cycle= 2 E= -507.639449279463  delta_E= -0.00043  |g|= 0.00476  |ddm|= 0.0144
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.0050534
diis-c [-2.54924057e-05 -5.05111791e-04  1.00050511e+00]
  HOMO = -0.236454814357875  LUMO = 86.0703656373667
  mo_energy =
[-1.20270944e+02 -1.22542752e+01 -6.65494024e+00 -6.65494024e+00
 -6.65494024e+00 -1.16354988e+00 -2.36454814e-01 -2.36454814e-01
 -2.36454814e-01  8.60703656e+01  6.75731643e+02  3.92901091e+03
  2.96687797e+04  1.56372155e+05  7.03814125e+05]
E1 = -706.5525623236933  E_coul = 198.91311293311125
cycle= 3 E= -507.639449390582  delta_E= -1.11e-07  |g|= 9.52e-05  |ddm|= 0.000203
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.000127312
diis-c [-3.97497561e-10  3.38640646e-05 -2.55139048e-02  1.02548004e+00]
  HOMO = -0.236457045699923  LUMO = 86.0703206912354
  mo_energy =
[-1.20271058e+02 -1.22542911e+01 -6.65496743e+00 -6.65496743e+00
 -6.65496743e+00 -1.16355054e+00 -2.36457046e-01 -2.36457046e-01
 -2.36457046e-01  8.60703207e+01  6.75731525e+02  3.92901077e+03
  2.96687796e+04  1.56372154e+05  7.03814125e+05]
E1 = -706.5525550120235  E_coul = 198.91310562140114
cycle= 4 E= -507.639449390622  delta_E= -4.03e-11  |g|= 3.75e-07  |ddm|= 3.48e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.5525550120235  E_coul = 198.91310562140114
  HOMO = -0.236457029274402  LUMO = 86.0703210302011
  mo_energy =
[-1.20271057e+02 -1.22542910e+01 -6.65496727e+00 -6.65496727e+00
 -6.65496727e+00 -1.16355053e+00 -2.36457029e-01 -2.36457029e-01
 -2.36457029e-01  8.60703210e+01  6.75731526e+02  3.92901077e+03
  2.96687796e+04  1.56372154e+05  7.03814125e+05]
E1 = -706.5525550493041  E_coul = 198.9131056586817
Extra cycle  E= -507.639449390622  delta_E= -5.68e-14  |g|= 6.48e-09  |ddm|= 1.66e-08
    CPU time for scf_cycle      0.10 sec, wall time      0.11 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 45.807905862198375
E1 = -706.5525550493041  E_coul = 198.9131056586817
init E= -507.639449390622
    CPU time for initialize scf      0.08 sec, wall time      0.09 sec
  HOMO = -0.236457029081957  LUMO = 86.0703210343531
  mo_energy =
[-1.20271057e+02 -1.22542910e+01 -6.65496726e+00 -6.65496726e+00
 -6.65496726e+00 -1.16355053e+00 -2.36457029e-01 -2.36457029e-01
 -2.36457029e-01  8.60703210e+01  6.75731526e+02  3.92901077e+03
  2.96687796e+04  1.56372154e+05  7.03814125e+05]
E1 = -706.5525550498694  E_coul = 198.91310565924707
cycle= 1 E= -507.639449390622  delta_E= 1.14e-13  |g|= 1.31e-10  |ddm|= 2.56e-10
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -706.5525550498694  E_coul = 198.91310565924707
  HOMO = -0.236457029079237  LUMO = 86.0703210344132
  mo_energy =
[-1.20271057e+02 -1.22542910e+01 -6.65496726e+00 -6.65496726e+00
 -6.65496726e+00 -1.16355053e+00 -2.36457029e-01 -2.36457029e-01
 -2.36457029e-01  8.60703210e+01  6.75731526e+02  3.92901077e+03
  2.96687796e+04  1.56372154e+05  7.03814125e+05]
E1 = -706.5525550498786  E_coul = 198.91310565925644
Extra cycle  E= -507.639449390622  delta_E= 1.14e-13  |g|= 1.4e-11  |ddm|= 4.54e-12
    CPU time for scf_cycle      0.15 sec, wall time      0.16 sec
exp = [2.93679452e+05 7.34198629e+04 1.83544144e+04 2.23375717e+03
 4.55099185e+02 1.21313448e+02 3.75244485e+01 4.74092082e+00
 3.91198045e-01 8.59865450e+00 4.90851115e-01]
grad_E = [ 9.33557838e-09 -3.26697452e-08  6.34809776e-06 -4.42114858e-06
 -3.23805359e-05  1.85071212e-05  3.22687239e-05 -1.68534930e-06
 -1.27170651e-07  1.68602428e-05  3.36197729e-07]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((11, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([7.3419862888950534e+04,1.8354415279684519e+04,2.2337565691104060e+03,4.5509411588185179e+02,1.2132000689951782e+02,3.7517668969809321e+01,4.7408530341284303e+00,3.9118871783972831e-01,8.5986666061044215e+00,4.9085282207620301e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "9s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:03:29 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  293679.451553        1
[INPUT] 0    0    [1    /1   ]  73419.8628993        1
[INPUT] 0    0    [1    /1   ]  18354.4132631        1
[INPUT] 0    0    [1    /1   ]  2233.75793956        1
[INPUT] 0    0    [1    /1   ]  455.105110187        1
[INPUT] 0    0    [1    /1   ]  121.30872144         1
[INPUT] 0    0    [1    /1   ]  37.5226297646        1
[INPUT] 0    0    [1    /1   ]  4.74092129102        1
[INPUT] 0    0    [1    /1   ]  0.391197572751       1
[INPUT] 1    0    [1    /1   ]  8.59867086207        1
[INPUT] 1    0    [1    /1   ]  0.490851608815       1

nuclear repulsion = 0
number of shells = 11
number of NR pGTOs = 15
number of NR cGTOs = 15
basis = {'Ar': [[0, [293679.4515528366, 1.0]], [0, [73419.86289933186, 1.0]], [0, [18354.413263131148, 1.0]], [0, [2233.7579395626085, 1.0]], [0, [455.10511018693614, 1.0]], [0, [121.30872143971338, 1.0]], [0, [37.522629764618934, 1.0]], [0, [4.740921291022514, 1.0]], [0, [0.3911975727507629, 1.0]], [1, [8.598670862073915, 1.0]], [1, [0.49085160881524154, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [293679.45155284]
bas 1, expnt(s) = [73419.86289933]
bas 2, expnt(s) = [18354.41326313]
bas 3, expnt(s) = [2233.75793956]
bas 4, expnt(s) = [455.10511019]
bas 5, expnt(s) = [121.30872144]
bas 6, expnt(s) = [37.52262976]
bas 7, expnt(s) = [4.74092129]
bas 8, expnt(s) = [0.39119757]
bas 9, expnt(s) = [8.59867086]
bas 10, expnt(s) = [0.49085161]
CPU time:        40.40
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]
 [ 0  1  1  1  0 44 45  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 2.93679452e+05 3.18727983e+04 7.34198629e+04 1.12687359e+04
 1.83544133e+04 3.98400985e+03 2.23375794e+03 8.20903498e+02
 4.55105110e+02 2.48942363e+02 1.21308721e+02 9.23493926e+01
 3.75226298e+01 3.83031927e+01 4.74092129e+00 8.11730909e+00
 3.91197573e-01 1.24971832e+00 8.59867086e+00 4.29559719e+01
 4.90851609e-01 1.19859418e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.31998213651201
cond(S) = 45.80515059943279
E1 = -688.8738822848451  E_coul = 184.91533772501384
init E= -503.958544559831
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.680894291276254  LUMO = 84.7354069038087
  mo_energy =
[-1.21650344e+02 -1.32811605e+01 -7.62161751e+00 -7.62161751e+00
 -7.62161751e+00 -1.65069187e+00 -6.80894291e-01 -6.80894291e-01
 -6.80894291e-01  8.47354069e+01  6.74356753e+02  3.92777078e+03
  2.96677119e+04  1.56371158e+05  7.03813159e+05]
E1 = -706.5846879431145  E_coul = 198.94566870466934
cycle= 1 E= -507.639019238445  delta_E= -3.68  |g|= 0.318  |ddm|= 0.301
    CPU time for cycle= 1      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.417397
diis-c [-0.17422057  1.        ]
  HOMO = -0.236277673486891  LUMO = 86.0680498212712
  mo_energy =
[-1.20262255e+02 -1.22530693e+01 -6.65308230e+00 -6.65308230e+00
 -6.65308230e+00 -1.16348343e+00 -2.36277673e-01 -2.36277673e-01
 -2.36277673e-01  8.60680498e+01  6.75727519e+02  3.92902242e+03
  2.96688003e+04  1.56372174e+05  7.03814144e+05]
E1 = -706.5530846419794  E_coul = 198.91363502566173
cycle= 2 E= -507.639449616318  delta_E= -0.00043  |g|= 0.00476  |ddm|= 0.0144
    CPU time for cycle= 2      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.00505372
diis-c [-2.54956995e-05 -5.04790538e-04  1.00050479e+00]
  HOMO = -0.236454047022728  LUMO = 86.0645207553261
  mo_energy =
[-1.20270935e+02 -1.22542655e+01 -6.65493487e+00 -6.65493487e+00
 -6.65493487e+00 -1.16354862e+00 -2.36454047e-01 -2.36454047e-01
 -2.36454047e-01  8.60645208e+01  6.75716902e+02  3.92900647e+03
  2.96687809e+04  1.56372154e+05  7.03814124e+05]
E1 = -706.552640952964  E_coul = 198.9131912255071
cycle= 3 E= -507.639449727457  delta_E= -1.11e-07  |g|= 9.52e-05  |ddm|= 0.000203
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.000127326
diis-c [-3.97583797e-10  3.38629523e-05 -2.55150404e-02  1.02548118e+00]
  HOMO = -0.236456278791046  LUMO = 86.0644758025735
  mo_energy =
[-1.20271049e+02 -1.22542814e+01 -6.65496206e+00 -6.65496206e+00
 -6.65496206e+00 -1.16354928e+00 -2.36456279e-01 -2.36456279e-01
 -2.36456279e-01  8.60644758e+01  6.75716784e+02  3.92900633e+03
  2.96687808e+04  1.56372154e+05  7.03814124e+05]
E1 = -706.5526336397802  E_coul = 198.91318391228282
cycle= 4 E= -507.639449727497  delta_E= -4.05e-11  |g|= 3.75e-07  |ddm|= 3.48e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.5526336397802  E_coul = 198.91318391228282
  HOMO = -0.236456262361809  LUMO = 86.0644761415907
  mo_energy =
[-1.20271048e+02 -1.22542813e+01 -6.65496190e+00 -6.65496190e+00
 -6.65496190e+00 -1.16354928e+00 -2.36456262e-01 -2.36456262e-01
 -2.36456262e-01  8.60644761e+01  6.75716785e+02  3.92900633e+03
  2.96687808e+04  1.56372154e+05  7.03814124e+05]
E1 = -706.552633677069  E_coul = 198.91318394957162
Extra cycle  E= -507.639449727497  delta_E= -5.68e-14  |g|= 6.48e-09  |ddm|= 1.66e-08
    CPU time for scf_cycle      0.10 sec, wall time      0.11 sec
exp = [2.93679452e+05 7.34198629e+04 1.83544133e+04 2.23375794e+03
 4.55105110e+02 1.21308721e+02 3.75226298e+01 4.74092129e+00
 3.91197573e-01 8.59867086e+00 4.90851609e-01]
E = -507.63944972749744
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((11, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([7.3419862888950534e+04,1.8354415279684519e+04,2.2337565691104060e+03,4.5509411588185179e+02,1.2132000689951782e+02,3.7517668969809321e+01,4.7408530341284303e+00,3.9118871783972831e-01,8.5986666061044215e+00,4.9085282207620301e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "9s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:03:30 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  293679.451553        1
[INPUT] 0    0    [1    /1   ]  73419.8628993        1
[INPUT] 0    0    [1    /1   ]  18354.4132631        1
[INPUT] 0    0    [1    /1   ]  2233.75793956        1
[INPUT] 0    0    [1    /1   ]  455.105110187        1
[INPUT] 0    0    [1    /1   ]  121.30872144         1
[INPUT] 0    0    [1    /1   ]  37.5226297646        1
[INPUT] 0    0    [1    /1   ]  4.74092129102        1
[INPUT] 0    0    [1    /1   ]  0.391197572751       1
[INPUT] 1    0    [1    /1   ]  8.59867086207        1
[INPUT] 1    0    [1    /1   ]  0.490851608815       1

nuclear repulsion = 0
number of shells = 11
number of NR pGTOs = 15
number of NR cGTOs = 15
basis = {'Ar': [[0, [293679.4515528366, 1.0]], [0, [73419.86289933186, 1.0]], [0, [18354.413263131148, 1.0]], [0, [2233.7579395626085, 1.0]], [0, [455.10511018693614, 1.0]], [0, [121.30872143971338, 1.0]], [0, [37.522629764618934, 1.0]], [0, [4.740921291022514, 1.0]], [0, [0.3911975727507629, 1.0]], [1, [8.598670862073915, 1.0]], [1, [0.49085160881524154, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [293679.45155284]
bas 1, expnt(s) = [73419.86289933]
bas 2, expnt(s) = [18354.41326313]
bas 3, expnt(s) = [2233.75793956]
bas 4, expnt(s) = [455.10511019]
bas 5, expnt(s) = [121.30872144]
bas 6, expnt(s) = [37.52262976]
bas 7, expnt(s) = [4.74092129]
bas 8, expnt(s) = [0.39119757]
bas 9, expnt(s) = [8.59867086]
bas 10, expnt(s) = [0.49085161]
CPU time:        40.71
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]
 [ 0  1  1  1  0 44 45  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 2.93679452e+05 3.18727983e+04 7.34198629e+04 1.12687359e+04
 1.83544133e+04 3.98400985e+03 2.23375794e+03 8.20903498e+02
 4.55105110e+02 2.48942363e+02 1.21308721e+02 9.23493926e+01
 3.75226298e+01 3.83031927e+01 4.74092129e+00 8.11730909e+00
 3.91197573e-01 1.24971832e+00 8.59867086e+00 4.29559719e+01
 4.90851609e-01 1.19859418e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.31998213651201
cond(S) = 45.80515059943279
E1 = -688.8738822848451  E_coul = 184.91533772501384
init E= -503.958544559831
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.680894291276254  LUMO = 84.7354069038087
  mo_energy =
[-1.21650344e+02 -1.32811605e+01 -7.62161751e+00 -7.62161751e+00
 -7.62161751e+00 -1.65069187e+00 -6.80894291e-01 -6.80894291e-01
 -6.80894291e-01  8.47354069e+01  6.74356753e+02  3.92777078e+03
  2.96677119e+04  1.56371158e+05  7.03813159e+05]
E1 = -706.5846879431145  E_coul = 198.94566870466934
cycle= 1 E= -507.639019238445  delta_E= -3.68  |g|= 0.318  |ddm|= 0.301
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.417397
diis-c [-0.17422057  1.        ]
  HOMO = -0.236277673486891  LUMO = 86.0680498212712
  mo_energy =
[-1.20262255e+02 -1.22530693e+01 -6.65308230e+00 -6.65308230e+00
 -6.65308230e+00 -1.16348343e+00 -2.36277673e-01 -2.36277673e-01
 -2.36277673e-01  8.60680498e+01  6.75727519e+02  3.92902242e+03
  2.96688003e+04  1.56372174e+05  7.03814144e+05]
E1 = -706.5530846419794  E_coul = 198.91363502566173
cycle= 2 E= -507.639449616318  delta_E= -0.00043  |g|= 0.00476  |ddm|= 0.0144
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00505372
diis-c [-2.54956995e-05 -5.04790538e-04  1.00050479e+00]
  HOMO = -0.236454047022728  LUMO = 86.0645207553261
  mo_energy =
[-1.20270935e+02 -1.22542655e+01 -6.65493487e+00 -6.65493487e+00
 -6.65493487e+00 -1.16354862e+00 -2.36454047e-01 -2.36454047e-01
 -2.36454047e-01  8.60645208e+01  6.75716902e+02  3.92900647e+03
  2.96687809e+04  1.56372154e+05  7.03814124e+05]
E1 = -706.552640952964  E_coul = 198.9131912255071
cycle= 3 E= -507.639449727457  delta_E= -1.11e-07  |g|= 9.52e-05  |ddm|= 0.000203
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.000127326
diis-c [-3.97583797e-10  3.38629523e-05 -2.55150404e-02  1.02548118e+00]
  HOMO = -0.236456278791046  LUMO = 86.0644758025735
  mo_energy =
[-1.20271049e+02 -1.22542814e+01 -6.65496206e+00 -6.65496206e+00
 -6.65496206e+00 -1.16354928e+00 -2.36456279e-01 -2.36456279e-01
 -2.36456279e-01  8.60644758e+01  6.75716784e+02  3.92900633e+03
  2.96687808e+04  1.56372154e+05  7.03814124e+05]
E1 = -706.5526336397802  E_coul = 198.91318391228282
cycle= 4 E= -507.639449727497  delta_E= -4.05e-11  |g|= 3.75e-07  |ddm|= 3.48e-06
    CPU time for cycle= 4      0.01 sec, wall time      0.02 sec
E1 = -706.5526336397802  E_coul = 198.91318391228282
  HOMO = -0.236456262361809  LUMO = 86.0644761415907
  mo_energy =
[-1.20271048e+02 -1.22542813e+01 -6.65496190e+00 -6.65496190e+00
 -6.65496190e+00 -1.16354928e+00 -2.36456262e-01 -2.36456262e-01
 -2.36456262e-01  8.60644761e+01  6.75716785e+02  3.92900633e+03
  2.96687808e+04  1.56372154e+05  7.03814124e+05]
E1 = -706.552633677069  E_coul = 198.91318394957162
Extra cycle  E= -507.639449727497  delta_E= -5.68e-14  |g|= 6.48e-09  |ddm|= 1.66e-08
    CPU time for scf_cycle      0.10 sec, wall time      0.10 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 45.80515059943279
E1 = -706.552633677069  E_coul = 198.91318394957162
init E= -507.639449727497
    CPU time for initialize scf      0.08 sec, wall time      0.08 sec
  HOMO = -0.236456262169308  LUMO = 86.0644761457435
  mo_energy =
[-1.20271048e+02 -1.22542813e+01 -6.65496190e+00 -6.65496190e+00
 -6.65496190e+00 -1.16354928e+00 -2.36456262e-01 -2.36456262e-01
 -2.36456262e-01  8.60644761e+01  6.75716785e+02  3.92900633e+03
  2.96687808e+04  1.56372154e+05  7.03814124e+05]
E1 = -706.5526336776342  E_coul = 198.91318395013698
cycle= 1 E= -507.639449727497  delta_E= 2.27e-13  |g|= 1.31e-10  |ddm|= 2.56e-10
    CPU time for cycle= 1      0.01 sec, wall time      0.02 sec
E1 = -706.5526336776342  E_coul = 198.91318395013698
  HOMO = -0.236456262166591  LUMO = 86.0644761458022
  mo_energy =
[-1.20271048e+02 -1.22542813e+01 -6.65496190e+00 -6.65496190e+00
 -6.65496190e+00 -1.16354928e+00 -2.36456262e-01 -2.36456262e-01
 -2.36456262e-01  8.60644761e+01  6.75716785e+02  3.92900633e+03
  2.96687808e+04  1.56372154e+05  7.03814124e+05]
E1 = -706.5526336776438  E_coul = 198.91318395014667
Extra cycle  E= -507.639449727497  delta_E= 5.68e-14  |g|= 8.63e-12  |ddm|= 4.58e-12
    CPU time for scf_cycle      0.15 sec, wall time      0.15 sec
exp = [2.93679452e+05 7.34198629e+04 1.83544133e+04 2.23375794e+03
 4.55105110e+02 1.21308721e+02 3.75226298e+01 4.74092129e+00
 3.91197573e-01 8.59867086e+00 4.90851609e-01]
grad_E = [ 9.33660173e-09 -3.26663743e-08  6.34872615e-06 -4.48390236e-06
 -3.14352927e-05  1.57326747e-05  3.01071651e-05 -1.29990442e-06
 -3.27927964e-07  2.93107697e-05  8.61973888e-07]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((11, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([7.3419862888950534e+04,1.8354415279684519e+04,2.2337565691104060e+03,4.5509411588185179e+02,1.2132000689951782e+02,3.7517668969809321e+01,4.7408530341284303e+00,3.9118871783972831e-01,8.5986666061044215e+00,4.9085282207620301e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "9s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:03:33 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  293679.451545        1
[INPUT] 0    0    [1    /1   ]  73419.8629263        1
[INPUT] 0    0    [1    /1   ]  18354.4080183        1
[INPUT] 0    0    [1    /1   ]  2233.7615455         1
[INPUT] 0    0    [1    /1   ]  455.132805066        1
[INPUT] 0    0    [1    /1   ]  121.286669479        1
[INPUT] 0    0    [1    /1   ]  37.5140359202        1
[INPUT] 0    0    [1    /1   ]  4.74092771152        1
[INPUT] 0    0    [1    /1   ]  0.391196024784       1
[INPUT] 1    0    [1    /1   ]  8.59868580233        1
[INPUT] 1    0    [1    /1   ]  0.490852199525       1

nuclear repulsion = 0
number of shells = 11
number of NR pGTOs = 15
number of NR cGTOs = 15
basis = {'Ar': [[0, [293679.4515451236, 1.0]], [0, [73419.86292632828, 1.0]], [0, [18354.40801833381, 1.0]], [0, [2233.761545496525, 1.0]], [0, [455.13280506649943, 1.0]], [0, [121.28666947942594, 1.0]], [0, [37.51403592019532, 1.0]], [0, [4.740927711521485, 1.0]], [0, [0.39119602478355864, 1.0]], [1, [8.598685802330417, 1.0]], [1, [0.49085219952524906, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [293679.45154512]
bas 1, expnt(s) = [73419.86292633]
bas 2, expnt(s) = [18354.40801833]
bas 3, expnt(s) = [2233.7615455]
bas 4, expnt(s) = [455.13280507]
bas 5, expnt(s) = [121.28666948]
bas 6, expnt(s) = [37.51403592]
bas 7, expnt(s) = [4.74092771]
bas 8, expnt(s) = [0.39119602]
bas 9, expnt(s) = [8.5986858]
bas 10, expnt(s) = [0.4908522]
CPU time:        43.65
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]
 [ 0  1  1  1  0 44 45  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 2.93679452e+05 3.18727983e+04 7.34198629e+04 1.12687359e+04
 1.83544080e+04 3.98400900e+03 2.23376155e+03 8.20904492e+02
 4.55132805e+02 2.48953725e+02 1.21286669e+02 9.23368016e+01
 3.75140359e+01 3.82966130e+01 4.74092771e+00 8.11731733e+00
 3.91196025e-01 1.24971462e+00 8.59868580e+00 4.29560652e+01
 4.90852200e-01 1.19859599e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319981933531324
cond(S) = 45.79217183860194
E1 = -688.8737802909245  E_coul = 184.9153672891733
init E= -503.958413001751
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.680894391436255  LUMO = 84.7079166182303
  mo_energy =
[-1.21650352e+02 -1.32811413e+01 -7.62161712e+00 -7.62161712e+00
 -7.62161712e+00 -1.65068931e+00 -6.80894391e-01 -6.80894391e-01
 -6.80894391e-01  8.47079166e+01  6.74287591e+02  3.92774985e+03
  2.96677175e+04  1.56371156e+05  7.03813153e+05]
E1 = -706.5846887031046  E_coul = 198.94566840803043
cycle= 1 E= -507.639020295074  delta_E= -3.68  |g|= 0.318  |ddm|= 0.301
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.417375
diis-c [-0.17420217  1.        ]
  HOMO = -0.236277579455209  LUMO = 86.0405221077697
  mo_energy =
[-1.20262274e+02 -1.22530520e+01 -6.65308253e+00 -6.65308253e+00
 -6.65308253e+00 -1.16348160e+00 -2.36277579e-01 -2.36277579e-01
 -2.36277579e-01  8.60405221e+01  6.75658329e+02  3.92900144e+03
  2.96688058e+04  1.56372173e+05  7.03814139e+05]
E1 = -706.5530700295583  E_coul = 198.9136191356538
cycle= 2 E= -507.639450893904  delta_E= -0.000431  |g|= 0.00476  |ddm|= 0.0144
    CPU time for cycle= 2      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.00505518
diis-c [-2.55107546e-05 -5.03249932e-04  1.00050325e+00]
  HOMO = -0.236454053858548  LUMO = 86.0369919151548
  mo_energy =
[-1.20270958e+02 -1.22542489e+01 -6.65493611e+00 -6.65493611e+00
 -6.65493611e+00 -1.16354683e+00 -2.36454054e-01 -2.36454054e-01
 -2.36454054e-01  8.60369919e+01  6.75647707e+02  3.92898548e+03
  2.96687865e+04  1.56372152e+05  7.03814119e+05]
E1 = -706.5526260422522  E_coul = 198.91317503711687
cycle= 3 E= -507.639451005135  delta_E= -1.11e-07  |g|= 9.53e-05  |ddm|= 0.000203
    CPU time for cycle= 3      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.000127391
diis-c [-3.97992258e-10  3.38561884e-05 -2.55203934e-02  1.02548654e+00]
  HOMO = -0.236456287586391  LUMO = 86.0369469315229
  mo_energy =
[-1.20271072e+02 -1.22542648e+01 -6.65496332e+00 -6.65496332e+00
 -6.65496332e+00 -1.16354749e+00 -2.36456288e-01 -2.36456288e-01
 -2.36456288e-01  8.60369469e+01  6.75647589e+02  3.92898534e+03
  2.96687864e+04  1.56372152e+05  7.03814118e+05]
E1 = -706.5526187220077  E_coul = 198.9131677168319
cycle= 4 E= -507.639451005176  delta_E= -4.04e-11  |g|= 3.75e-07  |ddm|= 3.48e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.5526187220077  E_coul = 198.9131677168319
  HOMO = -0.236456271139762  LUMO = 86.0369472707706
  mo_energy =
[-1.20271071e+02 -1.22542647e+01 -6.65496316e+00 -6.65496316e+00
 -6.65496316e+00 -1.16354748e+00 -2.36456271e-01 -2.36456271e-01
 -2.36456271e-01  8.60369473e+01  6.75647590e+02  3.92898534e+03
  2.96687864e+04  1.56372152e+05  7.03814118e+05]
E1 = -706.5526187593364  E_coul = 198.9131677541606
Extra cycle  E= -507.639451005176  delta_E= -5.68e-14  |g|= 6.48e-09  |ddm|= 1.66e-08
    CPU time for scf_cycle      0.09 sec, wall time      0.10 sec
exp = [2.93679452e+05 7.34198629e+04 1.83544080e+04 2.23376155e+03
 4.55132805e+02 1.21286669e+02 3.75140359e+01 4.74092771e+00
 3.91196025e-01 8.59868580e+00 4.90852200e-01]
E = -507.6394510051758
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((11, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([7.3419862888950534e+04,1.8354415279684519e+04,2.2337565691104060e+03,4.5509411588185179e+02,1.2132000689951782e+02,3.7517668969809321e+01,4.7408530341284303e+00,3.9118871783972831e-01,8.5986666061044215e+00,4.9085282207620301e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "9s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:03:33 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  293679.451545        1
[INPUT] 0    0    [1    /1   ]  73419.8629263        1
[INPUT] 0    0    [1    /1   ]  18354.4080183        1
[INPUT] 0    0    [1    /1   ]  2233.7615455         1
[INPUT] 0    0    [1    /1   ]  455.132805066        1
[INPUT] 0    0    [1    /1   ]  121.286669479        1
[INPUT] 0    0    [1    /1   ]  37.5140359202        1
[INPUT] 0    0    [1    /1   ]  4.74092771152        1
[INPUT] 0    0    [1    /1   ]  0.391196024784       1
[INPUT] 1    0    [1    /1   ]  8.59868580233        1
[INPUT] 1    0    [1    /1   ]  0.490852199525       1

nuclear repulsion = 0
number of shells = 11
number of NR pGTOs = 15
number of NR cGTOs = 15
basis = {'Ar': [[0, [293679.4515451236, 1.0]], [0, [73419.86292632828, 1.0]], [0, [18354.40801833381, 1.0]], [0, [2233.761545496525, 1.0]], [0, [455.13280506649943, 1.0]], [0, [121.28666947942594, 1.0]], [0, [37.51403592019532, 1.0]], [0, [4.740927711521485, 1.0]], [0, [0.39119602478355864, 1.0]], [1, [8.598685802330417, 1.0]], [1, [0.49085219952524906, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [293679.45154512]
bas 1, expnt(s) = [73419.86292633]
bas 2, expnt(s) = [18354.40801833]
bas 3, expnt(s) = [2233.7615455]
bas 4, expnt(s) = [455.13280507]
bas 5, expnt(s) = [121.28666948]
bas 6, expnt(s) = [37.51403592]
bas 7, expnt(s) = [4.74092771]
bas 8, expnt(s) = [0.39119602]
bas 9, expnt(s) = [8.5986858]
bas 10, expnt(s) = [0.4908522]
CPU time:        43.96
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]
 [ 0  1  1  1  0 44 45  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 2.93679452e+05 3.18727983e+04 7.34198629e+04 1.12687359e+04
 1.83544080e+04 3.98400900e+03 2.23376155e+03 8.20904492e+02
 4.55132805e+02 2.48953725e+02 1.21286669e+02 9.23368016e+01
 3.75140359e+01 3.82966130e+01 4.74092771e+00 8.11731733e+00
 3.91196025e-01 1.24971462e+00 8.59868580e+00 4.29560652e+01
 4.90852200e-01 1.19859599e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319981933531324
cond(S) = 45.79217183860194
E1 = -688.8737802909245  E_coul = 184.9153672891733
init E= -503.958413001751
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.680894391436255  LUMO = 84.7079166182303
  mo_energy =
[-1.21650352e+02 -1.32811413e+01 -7.62161712e+00 -7.62161712e+00
 -7.62161712e+00 -1.65068931e+00 -6.80894391e-01 -6.80894391e-01
 -6.80894391e-01  8.47079166e+01  6.74287591e+02  3.92774985e+03
  2.96677175e+04  1.56371156e+05  7.03813153e+05]
E1 = -706.5846887031046  E_coul = 198.94566840803043
cycle= 1 E= -507.639020295074  delta_E= -3.68  |g|= 0.318  |ddm|= 0.301
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.417375
diis-c [-0.17420217  1.        ]
  HOMO = -0.236277579455209  LUMO = 86.0405221077697
  mo_energy =
[-1.20262274e+02 -1.22530520e+01 -6.65308253e+00 -6.65308253e+00
 -6.65308253e+00 -1.16348160e+00 -2.36277579e-01 -2.36277579e-01
 -2.36277579e-01  8.60405221e+01  6.75658329e+02  3.92900144e+03
  2.96688058e+04  1.56372173e+05  7.03814139e+05]
E1 = -706.5530700295583  E_coul = 198.9136191356538
cycle= 2 E= -507.639450893904  delta_E= -0.000431  |g|= 0.00476  |ddm|= 0.0144
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00505518
diis-c [-2.55107546e-05 -5.03249932e-04  1.00050325e+00]
  HOMO = -0.236454053858548  LUMO = 86.0369919151548
  mo_energy =
[-1.20270958e+02 -1.22542489e+01 -6.65493611e+00 -6.65493611e+00
 -6.65493611e+00 -1.16354683e+00 -2.36454054e-01 -2.36454054e-01
 -2.36454054e-01  8.60369919e+01  6.75647707e+02  3.92898548e+03
  2.96687865e+04  1.56372152e+05  7.03814119e+05]
E1 = -706.5526260422522  E_coul = 198.91317503711687
cycle= 3 E= -507.639451005135  delta_E= -1.11e-07  |g|= 9.53e-05  |ddm|= 0.000203
    CPU time for cycle= 3      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.000127391
diis-c [-3.97992258e-10  3.38561884e-05 -2.55203934e-02  1.02548654e+00]
  HOMO = -0.236456287586391  LUMO = 86.0369469315229
  mo_energy =
[-1.20271072e+02 -1.22542648e+01 -6.65496332e+00 -6.65496332e+00
 -6.65496332e+00 -1.16354749e+00 -2.36456288e-01 -2.36456288e-01
 -2.36456288e-01  8.60369469e+01  6.75647589e+02  3.92898534e+03
  2.96687864e+04  1.56372152e+05  7.03814118e+05]
E1 = -706.5526187220077  E_coul = 198.9131677168319
cycle= 4 E= -507.639451005176  delta_E= -4.04e-11  |g|= 3.75e-07  |ddm|= 3.48e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.5526187220077  E_coul = 198.9131677168319
  HOMO = -0.236456271139762  LUMO = 86.0369472707706
  mo_energy =
[-1.20271071e+02 -1.22542647e+01 -6.65496316e+00 -6.65496316e+00
 -6.65496316e+00 -1.16354748e+00 -2.36456271e-01 -2.36456271e-01
 -2.36456271e-01  8.60369473e+01  6.75647590e+02  3.92898534e+03
  2.96687864e+04  1.56372152e+05  7.03814118e+05]
E1 = -706.5526187593364  E_coul = 198.9131677541606
Extra cycle  E= -507.639451005176  delta_E= -5.68e-14  |g|= 6.48e-09  |ddm|= 1.66e-08
    CPU time for scf_cycle      0.09 sec, wall time      0.10 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 45.79217183860194
E1 = -706.5526187593364  E_coul = 198.9131677541606
init E= -507.639451005176
    CPU time for initialize scf      0.07 sec, wall time      0.07 sec
  HOMO = -0.236456270947031  LUMO = 86.0369472749277
  mo_energy =
[-1.20271071e+02 -1.22542647e+01 -6.65496316e+00 -6.65496316e+00
 -6.65496316e+00 -1.16354748e+00 -2.36456271e-01 -2.36456271e-01
 -2.36456271e-01  8.60369473e+01  6.75647590e+02  3.92898534e+03
  2.96687864e+04  1.56372152e+05  7.03814118e+05]
E1 = -706.5526187599022  E_coul = 198.91316775472652
cycle= 1 E= -507.639451005176  delta_E= 5.68e-14  |g|= 1.31e-10  |ddm|= 2.57e-10
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -706.5526187599022  E_coul = 198.91316775472652
  HOMO = -0.236456270944313  LUMO = 86.0369472749886
  mo_energy =
[-1.20271071e+02 -1.22542647e+01 -6.65496316e+00 -6.65496316e+00
 -6.65496316e+00 -1.16354748e+00 -2.36456271e-01 -2.36456271e-01
 -2.36456271e-01  8.60369473e+01  6.75647590e+02  3.92898534e+03
  2.96687864e+04  1.56372152e+05  7.03814118e+05]
E1 = -706.5526187599121  E_coul = 198.9131677547363
Extra cycle  E= -507.639451005176  delta_E= -1.14e-13  |g|= 5.55e-11  |ddm|= 4.53e-12
    CPU time for scf_cycle      0.14 sec, wall time      0.14 sec
exp = [2.93679452e+05 7.34198629e+04 1.83544080e+04 2.23376155e+03
 4.55132805e+02 1.21286669e+02 3.75140359e+01 4.74092771e+00
 3.91196025e-01 8.59868580e+00 4.90852200e-01]
grad_E = [ 9.34135430e-09 -3.26507144e-08  6.35164444e-06 -4.77504831e-06
 -2.70653464e-05  3.19999474e-06  1.86013023e-05 -4.82663662e-07
 -5.07971464e-07  3.73851717e-05  1.30012353e-06]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((11, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([7.3419862888950534e+04,1.8354415279684519e+04,2.2337565691104060e+03,4.5509411588185179e+02,1.2132000689951782e+02,3.7517668969809321e+01,4.7408530341284303e+00,3.9118871783972831e-01,8.5986666061044215e+00,4.9085282207620301e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "9s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:03:36 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  293679.451529        1
[INPUT] 0    0    [1    /1   ]  73419.8629825        1
[INPUT] 0    0    [1    /1   ]  18354.3971049        1
[INPUT] 0    0    [1    /1   ]  2233.76904992        1
[INPUT] 0    0    [1    /1   ]  455.190414206        1
[INPUT] 0    0    [1    /1   ]  121.240858597        1
[INPUT] 0    0    [1    /1   ]  37.4960940042        1
[INPUT] 0    0    [1    /1   ]  4.7409443107         1
[INPUT] 0    0    [1    /1   ]  0.391193334328       1
[INPUT] 1    0    [1    /1   ]  8.59866765357        1
[INPUT] 1    0    [1    /1   ]  0.490852053503       1

nuclear repulsion = 0
number of shells = 11
number of NR pGTOs = 15
number of NR cGTOs = 15
basis = {'Ar': [[0, [293679.45152907434, 1.0]], [0, [73419.86298250266, 1.0]], [0, [18354.397104891872, 1.0]], [0, [2233.7690499237106, 1.0]], [0, [455.1904142056349, 1.0]], [0, [121.2408585968018, 1.0]], [0, [37.49609400417715, 1.0]], [0, [4.740944310702035, 1.0]], [0, [0.3911933343280446, 1.0]], [1, [8.59866765357075, 1.0]], [1, [0.4908520535026313, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [293679.45152907]
bas 1, expnt(s) = [73419.8629825]
bas 2, expnt(s) = [18354.39710489]
bas 3, expnt(s) = [2233.76904992]
bas 4, expnt(s) = [455.19041421]
bas 5, expnt(s) = [121.2408586]
bas 6, expnt(s) = [37.496094]
bas 7, expnt(s) = [4.74094431]
bas 8, expnt(s) = [0.39119333]
bas 9, expnt(s) = [8.59866765]
bas 10, expnt(s) = [0.49085205]
CPU time:        46.94
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]
 [ 0  1  1  1  0 44 45  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 2.93679452e+05 3.18727983e+04 7.34198630e+04 1.12687359e+04
 1.83543971e+04 3.98400722e+03 2.23376905e+03 8.20906560e+02
 4.55190414e+02 2.48977359e+02 1.21240859e+02 9.23106431e+01
 3.74960940e+01 3.82828751e+01 4.74094431e+00 8.11733865e+00
 3.91193334e-01 1.24970817e+00 8.59866765e+00 4.29559518e+01
 4.90852054e-01 1.19859554e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319983331217703
cond(S) = 45.765123964166605
E1 = -688.8733147138454  E_coul = 184.91517603233356
init E= -503.958138681512
    CPU time for initialize scf      0.02 sec, wall time      0.03 sec
  HOMO = -0.680895416879674  LUMO = 84.650606166
  mo_energy =
[-1.21650417e+02 -1.32811211e+01 -7.62163364e+00 -7.62163364e+00
 -7.62163364e+00 -1.65068611e+00 -6.80895417e-01 -6.80895417e-01
 -6.80895417e-01  8.46506062e+01  6.74143584e+02  3.92770626e+03
  2.96677292e+04  1.56371152e+05  7.03813142e+05]
E1 = -706.584383144507  E_coul = 198.9453622326257
cycle= 1 E= -507.639020911881  delta_E= -3.68  |g|= 0.318  |ddm|= 0.301
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.417329
diis-c [-0.17416335  1.        ]
  HOMO = -0.236280259088139  LUMO = 85.9831284645896
  mo_energy =
[-1.20262369e+02 -1.22530389e+01 -6.65310409e+00 -6.65310409e+00
 -6.65310409e+00 -1.16348104e+00 -2.36280259e-01 -2.36280259e-01
 -2.36280259e-01  8.59831285e+01  6.75514256e+02  3.92895773e+03
  2.96688174e+04  1.56372169e+05  7.03814127e+05]
E1 = -706.5527326415081  E_coul = 198.9132806755163
cycle= 2 E= -507.639451965992  delta_E= -0.000431  |g|= 0.00476  |ddm|= 0.0144
    CPU time for cycle= 2      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.00505819
diis-c [-2.55418066e-05 -5.00015922e-04  1.00050002e+00]
  HOMO = -0.23645694102522  LUMO = 85.9795959439139
  mo_energy =
[-1.20271060e+02 -1.22542371e+01 -6.65495975e+00 -6.65495975e+00
 -6.65495975e+00 -1.16354634e+00 -2.36456941e-01 -2.36456941e-01
 -2.36456941e-01  8.59795959e+01  6.75503625e+02  3.92894176e+03
  2.96687981e+04  1.56372148e+05  7.03814107e+05]
E1 = -706.5522880354547  E_coul = 198.91283595804097
cycle= 3 E= -507.639452077414  delta_E= -1.11e-07  |g|= 9.54e-05  |ddm|= 0.000204
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.000127524
diis-c [-3.98835959e-10  3.38427209e-05 -2.55315972e-02  1.02549775e+00]
  HOMO = -0.236459178805541  LUMO = 85.9795508960873
  mo_energy =
[-1.20271175e+02 -1.22542531e+01 -6.65498701e+00 -6.65498701e+00
 -6.65498701e+00 -1.16354701e+00 -2.36459179e-01 -2.36459179e-01
 -2.36459179e-01  8.59795509e+01  6.75503506e+02  3.92894162e+03
  2.96687979e+04  1.56372148e+05  7.03814107e+05]
E1 = -706.5522807005246  E_coul = 198.91282862307054
cycle= 4 E= -507.639452077454  delta_E= -4.04e-11  |g|= 3.76e-07  |ddm|= 3.49e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.5522807005246  E_coul = 198.91282862307054
  HOMO = -0.236459162322931  LUMO = 85.9795512358174
  mo_energy =
[-1.20271174e+02 -1.22542530e+01 -6.65498685e+00 -6.65498685e+00
 -6.65498685e+00 -1.16354700e+00 -2.36459162e-01 -2.36459162e-01
 -2.36459162e-01  8.59795512e+01  6.75503508e+02  3.92894162e+03
  2.96687979e+04  1.56372148e+05  7.03814107e+05]
E1 = -706.5522807379365  E_coul = 198.9128286604824
Extra cycle  E= -507.639452077454  delta_E= 5.68e-14  |g|= 6.5e-09  |ddm|= 1.66e-08
    CPU time for scf_cycle      0.10 sec, wall time      0.10 sec
exp = [2.93679452e+05 7.34198630e+04 1.83543971e+04 2.23376905e+03
 4.55190414e+02 1.21240859e+02 3.74960940e+01 4.74094431e+00
 3.91193334e-01 8.59866765e+00 4.90852054e-01]
E = -507.63945207745405
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((11, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([7.3419862888950534e+04,1.8354415279684519e+04,2.2337565691104060e+03,4.5509411588185179e+02,1.2132000689951782e+02,3.7517668969809321e+01,4.7408530341284303e+00,3.9118871783972831e-01,8.5986666061044215e+00,4.9085282207620301e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "9s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:03:36 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  293679.451529        1
[INPUT] 0    0    [1    /1   ]  73419.8629825        1
[INPUT] 0    0    [1    /1   ]  18354.3971049        1
[INPUT] 0    0    [1    /1   ]  2233.76904992        1
[INPUT] 0    0    [1    /1   ]  455.190414206        1
[INPUT] 0    0    [1    /1   ]  121.240858597        1
[INPUT] 0    0    [1    /1   ]  37.4960940042        1
[INPUT] 0    0    [1    /1   ]  4.7409443107         1
[INPUT] 0    0    [1    /1   ]  0.391193334328       1
[INPUT] 1    0    [1    /1   ]  8.59866765357        1
[INPUT] 1    0    [1    /1   ]  0.490852053503       1

nuclear repulsion = 0
number of shells = 11
number of NR pGTOs = 15
number of NR cGTOs = 15
basis = {'Ar': [[0, [293679.45152907434, 1.0]], [0, [73419.86298250266, 1.0]], [0, [18354.397104891872, 1.0]], [0, [2233.7690499237106, 1.0]], [0, [455.1904142056349, 1.0]], [0, [121.2408585968018, 1.0]], [0, [37.49609400417715, 1.0]], [0, [4.740944310702035, 1.0]], [0, [0.3911933343280446, 1.0]], [1, [8.59866765357075, 1.0]], [1, [0.4908520535026313, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [293679.45152907]
bas 1, expnt(s) = [73419.8629825]
bas 2, expnt(s) = [18354.39710489]
bas 3, expnt(s) = [2233.76904992]
bas 4, expnt(s) = [455.19041421]
bas 5, expnt(s) = [121.2408586]
bas 6, expnt(s) = [37.496094]
bas 7, expnt(s) = [4.74094431]
bas 8, expnt(s) = [0.39119333]
bas 9, expnt(s) = [8.59866765]
bas 10, expnt(s) = [0.49085205]
CPU time:        47.28
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]
 [ 0  1  1  1  0 44 45  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 2.93679452e+05 3.18727983e+04 7.34198630e+04 1.12687359e+04
 1.83543971e+04 3.98400722e+03 2.23376905e+03 8.20906560e+02
 4.55190414e+02 2.48977359e+02 1.21240859e+02 9.23106431e+01
 3.74960940e+01 3.82828751e+01 4.74094431e+00 8.11733865e+00
 3.91193334e-01 1.24970817e+00 8.59866765e+00 4.29559518e+01
 4.90852054e-01 1.19859554e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319983331217703
cond(S) = 45.765123964166605
E1 = -688.8733147138454  E_coul = 184.91517603233356
init E= -503.958138681512
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.680895416879674  LUMO = 84.650606166
  mo_energy =
[-1.21650417e+02 -1.32811211e+01 -7.62163364e+00 -7.62163364e+00
 -7.62163364e+00 -1.65068611e+00 -6.80895417e-01 -6.80895417e-01
 -6.80895417e-01  8.46506062e+01  6.74143584e+02  3.92770626e+03
  2.96677292e+04  1.56371152e+05  7.03813142e+05]
E1 = -706.584383144507  E_coul = 198.9453622326257
cycle= 1 E= -507.639020911881  delta_E= -3.68  |g|= 0.318  |ddm|= 0.301
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.417329
diis-c [-0.17416335  1.        ]
  HOMO = -0.236280259088139  LUMO = 85.9831284645896
  mo_energy =
[-1.20262369e+02 -1.22530389e+01 -6.65310409e+00 -6.65310409e+00
 -6.65310409e+00 -1.16348104e+00 -2.36280259e-01 -2.36280259e-01
 -2.36280259e-01  8.59831285e+01  6.75514256e+02  3.92895773e+03
  2.96688174e+04  1.56372169e+05  7.03814127e+05]
E1 = -706.5527326415081  E_coul = 198.9132806755163
cycle= 2 E= -507.639451965992  delta_E= -0.000431  |g|= 0.00476  |ddm|= 0.0144
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00505819
diis-c [-2.55418066e-05 -5.00015922e-04  1.00050002e+00]
  HOMO = -0.23645694102522  LUMO = 85.9795959439139
  mo_energy =
[-1.20271060e+02 -1.22542371e+01 -6.65495975e+00 -6.65495975e+00
 -6.65495975e+00 -1.16354634e+00 -2.36456941e-01 -2.36456941e-01
 -2.36456941e-01  8.59795959e+01  6.75503625e+02  3.92894176e+03
  2.96687981e+04  1.56372148e+05  7.03814107e+05]
E1 = -706.5522880354547  E_coul = 198.91283595804097
cycle= 3 E= -507.639452077414  delta_E= -1.11e-07  |g|= 9.54e-05  |ddm|= 0.000204
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.000127524
diis-c [-3.98835959e-10  3.38427209e-05 -2.55315972e-02  1.02549775e+00]
  HOMO = -0.236459178805541  LUMO = 85.9795508960873
  mo_energy =
[-1.20271175e+02 -1.22542531e+01 -6.65498701e+00 -6.65498701e+00
 -6.65498701e+00 -1.16354701e+00 -2.36459179e-01 -2.36459179e-01
 -2.36459179e-01  8.59795509e+01  6.75503506e+02  3.92894162e+03
  2.96687979e+04  1.56372148e+05  7.03814107e+05]
E1 = -706.5522807005246  E_coul = 198.91282862307054
cycle= 4 E= -507.639452077454  delta_E= -4.04e-11  |g|= 3.76e-07  |ddm|= 3.49e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.5522807005246  E_coul = 198.91282862307054
  HOMO = -0.236459162322931  LUMO = 85.9795512358174
  mo_energy =
[-1.20271174e+02 -1.22542530e+01 -6.65498685e+00 -6.65498685e+00
 -6.65498685e+00 -1.16354700e+00 -2.36459162e-01 -2.36459162e-01
 -2.36459162e-01  8.59795512e+01  6.75503508e+02  3.92894162e+03
  2.96687979e+04  1.56372148e+05  7.03814107e+05]
E1 = -706.5522807379365  E_coul = 198.9128286604824
Extra cycle  E= -507.639452077454  delta_E= 5.68e-14  |g|= 6.5e-09  |ddm|= 1.66e-08
    CPU time for scf_cycle      0.10 sec, wall time      0.11 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 45.765123964166605
E1 = -706.5522807379365  E_coul = 198.9128286604824
init E= -507.639452077454
    CPU time for initialize scf      0.08 sec, wall time      0.09 sec
  HOMO = -0.236459162129714  LUMO = 85.9795512399816
  mo_energy =
[-1.20271174e+02 -1.22542530e+01 -6.65498685e+00 -6.65498685e+00
 -6.65498685e+00 -1.16354700e+00 -2.36459162e-01 -2.36459162e-01
 -2.36459162e-01  8.59795512e+01  6.75503508e+02  3.92894162e+03
  2.96687979e+04  1.56372148e+05  7.03814107e+05]
E1 = -706.5522807385037  E_coul = 198.9128286610497
cycle= 1 E= -507.639452077454  delta_E= 1.14e-13  |g|= 1.3e-10  |ddm|= 2.57e-10
    CPU time for cycle= 1      0.02 sec, wall time      0.02 sec
E1 = -706.5522807385037  E_coul = 198.9128286610497
  HOMO = -0.236459162126989  LUMO = 85.9795512400419
  mo_energy =
[-1.20271174e+02 -1.22542530e+01 -6.65498685e+00 -6.65498685e+00
 -6.65498685e+00 -1.16354700e+00 -2.36459162e-01 -2.36459162e-01
 -2.36459162e-01  8.59795512e+01  6.75503508e+02  3.92894162e+03
  2.96687979e+04  1.56372148e+05  7.03814107e+05]
E1 = -706.5522807385138  E_coul = 198.9128286610596
Extra cycle  E= -507.639452077454  delta_E= -2.27e-13  |g|= 2.57e-11  |ddm|= 4.55e-12
    CPU time for scf_cycle      0.15 sec, wall time      0.16 sec
exp = [2.93679452e+05 7.34198630e+04 1.83543971e+04 2.23376905e+03
 4.55190414e+02 1.21240859e+02 3.74960940e+01 4.74094431e+00
 3.91193334e-01 8.59866765e+00 4.90852054e-01]
grad_E = [ 9.35122140e-09 -3.26181617e-08  6.35770316e-06 -5.37901124e-06
 -1.80050904e-05 -2.25863532e-05 -6.36035412e-06  3.90229985e-07
 -2.92842159e-07  1.41080113e-05  5.85541784e-07]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((11, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([7.3419862888950534e+04,1.8354415279684519e+04,2.2337565691104060e+03,4.5509411588185179e+02,1.2132000689951782e+02,3.7517668969809321e+01,4.7408530341284303e+00,3.9118871783972831e-01,8.5986666061044215e+00,4.9085282207620301e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "9s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:03:39 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  293679.451529        1
[INPUT] 0    0    [1    /1   ]  73419.8629825        1
[INPUT] 0    0    [1    /1   ]  18354.3971073        1
[INPUT] 0    0    [1    /1   ]  2233.76904934        1
[INPUT] 0    0    [1    /1   ]  455.1903849          1
[INPUT] 0    0    [1    /1   ]  121.240927346        1
[INPUT] 0    0    [1    /1   ]  37.496086724         1
[INPUT] 0    0    [1    /1   ]  4.74094511662        1
[INPUT] 0    0    [1    /1   ]  0.391193474668       1
[INPUT] 1    0    [1    /1   ]  8.59865489715        1
[INPUT] 1    0    [1    /1   ]  0.49085169695        1

nuclear repulsion = 0
number of shells = 11
number of NR pGTOs = 15
number of NR cGTOs = 15
basis = {'Ar': [[0, [293679.45152907784, 1.0]], [0, [73419.86298249026, 1.0]], [0, [18354.397107277455, 1.0]], [0, [2233.7690493437462, 1.0]], [0, [455.19038489971706, 1.0]], [0, [121.24092734577376, 1.0]], [0, [37.496086724044304, 1.0]], [0, [4.74094511662129, 1.0]], [0, [0.39119347466769594, 1.0]], [1, [8.598654897147785, 1.0]], [1, [0.49085169695029723, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [293679.45152908]
bas 1, expnt(s) = [73419.86298249]
bas 2, expnt(s) = [18354.39710728]
bas 3, expnt(s) = [2233.76904934]
bas 4, expnt(s) = [455.1903849]
bas 5, expnt(s) = [121.24092735]
bas 6, expnt(s) = [37.49608672]
bas 7, expnt(s) = [4.74094512]
bas 8, expnt(s) = [0.39119347]
bas 9, expnt(s) = [8.5986549]
bas 10, expnt(s) = [0.4908517]
CPU time:        50.27
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]
 [ 0  1  1  1  0 44 45  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 2.93679452e+05 3.18727983e+04 7.34198630e+04 1.12687359e+04
 1.83543971e+04 3.98400722e+03 2.23376905e+03 8.20906560e+02
 4.55190385e+02 2.48977346e+02 1.21240927e+02 9.23106824e+01
 3.74960867e+01 3.82828695e+01 4.74094512e+00 8.11733968e+00
 3.91193475e-01 1.24970851e+00 8.59865490e+00 4.29558722e+01
 4.90851697e-01 1.19859445e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319983803619667
cond(S) = 45.76512007449404
E1 = -688.8732506765162  E_coul = 184.9151105022594
init E= -503.958140174257
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.680895627847272  LUMO = 84.6506149026937
  mo_energy =
[-1.21650430e+02 -1.32811261e+01 -7.62163813e+00 -7.62163813e+00
 -7.62163813e+00 -1.65068666e+00 -6.80895628e-01 -6.80895628e-01
 -6.80895628e-01  8.46506149e+01  6.74143709e+02  3.92770638e+03
  2.96677293e+04  1.56371152e+05  7.03813142e+05]
E1 = -706.5843035304846  E_coul = 198.9452826160159
cycle= 1 E= -507.639020914469  delta_E= -3.68  |g|= 0.318  |ddm|= 0.301
    CPU time for cycle= 1      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.417329
diis-c [-0.17416322  1.        ]
  HOMO = -0.236281005948094  LUMO = 85.9831358158799
  mo_energy =
[-1.20262383e+02 -1.22530448e+01 -6.65310958e+00 -6.65310958e+00
 -6.65310958e+00 -1.16348188e+00 -2.36281006e-01 -2.36281006e-01
 -2.36281006e-01  8.59831358e+01  6.75514380e+02  3.92895785e+03
  2.96688175e+04  1.56372169e+05  7.03814127e+05]
E1 = -706.5526530930032  E_coul = 198.91320112594374
cycle= 2 E= -507.639451967059  delta_E= -0.000431  |g|= 0.00476  |ddm|= 0.0144
    CPU time for cycle= 2      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.00505818
diis-c [-2.55417182e-05 -5.00009187e-04  1.00050001e+00]
  HOMO = -0.236457687086745  LUMO = 85.9796033003756
  mo_energy =
[-1.20271075e+02 -1.22542430e+01 -6.65496524e+00 -6.65496524e+00
 -6.65496524e+00 -1.16354718e+00 -2.36457687e-01 -2.36457687e-01
 -2.36457687e-01  8.59796033e+01  6.75503748e+02  3.92894188e+03
  2.96687982e+04  1.56372148e+05  7.03814107e+05]
E1 = -706.5522084880308  E_coul = 198.9127564095508
cycle= 3 E= -507.63945207848  delta_E= -1.11e-07  |g|= 9.54e-05  |ddm|= 0.000204
    CPU time for cycle= 3      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.000127524
diis-c [-3.98834308e-10  3.38426340e-05 -2.55315978e-02  1.02549776e+00]
  HOMO = -0.236459924856673  LUMO = 85.9795582526114
  mo_energy =
[-1.20271189e+02 -1.22542590e+01 -6.65499250e+00 -6.65499250e+00
 -6.65499250e+00 -1.16354785e+00 -2.36459925e-01 -2.36459925e-01
 -2.36459925e-01  8.59795583e+01  6.75503630e+02  3.92894173e+03
  2.96687980e+04  1.56372148e+05  7.03814107e+05]
E1 = -706.5522011531173  E_coul = 198.91274907459692
cycle= 4 E= -507.63945207852  delta_E= -4.03e-11  |g|= 3.76e-07  |ddm|= 3.49e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.5522011531173  E_coul = 198.91274907459692
  HOMO = -0.236459908374131  LUMO = 85.9795585923411
  mo_energy =
[-1.20271188e+02 -1.22542589e+01 -6.65499233e+00 -6.65499233e+00
 -6.65499233e+00 -1.16354784e+00 -2.36459908e-01 -2.36459908e-01
 -2.36459908e-01  8.59795586e+01  6.75503631e+02  3.92894174e+03
  2.96687980e+04  1.56372148e+05  7.03814107e+05]
E1 = -706.5522011905289  E_coul = 198.91274911200847
Extra cycle  E= -507.63945207852  delta_E= -1.14e-13  |g|= 6.5e-09  |ddm|= 1.66e-08
    CPU time for scf_cycle      0.10 sec, wall time      0.10 sec
exp = [2.93679452e+05 7.34198630e+04 1.83543971e+04 2.23376905e+03
 4.55190385e+02 1.21240927e+02 3.74960867e+01 4.74094512e+00
 3.91193475e-01 8.59865490e+00 4.90851697e-01]
E = -507.63945207852043
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((11, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([7.3419862888950534e+04,1.8354415279684519e+04,2.2337565691104060e+03,4.5509411588185179e+02,1.2132000689951782e+02,3.7517668969809321e+01,4.7408530341284303e+00,3.9118871783972831e-01,8.5986666061044215e+00,4.9085282207620301e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "9s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:03:40 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  293679.451529        1
[INPUT] 0    0    [1    /1   ]  73419.8629825        1
[INPUT] 0    0    [1    /1   ]  18354.3971073        1
[INPUT] 0    0    [1    /1   ]  2233.76904934        1
[INPUT] 0    0    [1    /1   ]  455.1903849          1
[INPUT] 0    0    [1    /1   ]  121.240927346        1
[INPUT] 0    0    [1    /1   ]  37.496086724         1
[INPUT] 0    0    [1    /1   ]  4.74094511662        1
[INPUT] 0    0    [1    /1   ]  0.391193474668       1
[INPUT] 1    0    [1    /1   ]  8.59865489715        1
[INPUT] 1    0    [1    /1   ]  0.49085169695        1

nuclear repulsion = 0
number of shells = 11
number of NR pGTOs = 15
number of NR cGTOs = 15
basis = {'Ar': [[0, [293679.45152907784, 1.0]], [0, [73419.86298249026, 1.0]], [0, [18354.397107277455, 1.0]], [0, [2233.7690493437462, 1.0]], [0, [455.19038489971706, 1.0]], [0, [121.24092734577376, 1.0]], [0, [37.496086724044304, 1.0]], [0, [4.74094511662129, 1.0]], [0, [0.39119347466769594, 1.0]], [1, [8.598654897147785, 1.0]], [1, [0.49085169695029723, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [293679.45152908]
bas 1, expnt(s) = [73419.86298249]
bas 2, expnt(s) = [18354.39710728]
bas 3, expnt(s) = [2233.76904934]
bas 4, expnt(s) = [455.1903849]
bas 5, expnt(s) = [121.24092735]
bas 6, expnt(s) = [37.49608672]
bas 7, expnt(s) = [4.74094512]
bas 8, expnt(s) = [0.39119347]
bas 9, expnt(s) = [8.5986549]
bas 10, expnt(s) = [0.4908517]
CPU time:        50.61
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]
 [ 0  1  1  1  0 44 45  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 2.93679452e+05 3.18727983e+04 7.34198630e+04 1.12687359e+04
 1.83543971e+04 3.98400722e+03 2.23376905e+03 8.20906560e+02
 4.55190385e+02 2.48977346e+02 1.21240927e+02 9.23106824e+01
 3.74960867e+01 3.82828695e+01 4.74094512e+00 8.11733968e+00
 3.91193475e-01 1.24970851e+00 8.59865490e+00 4.29558722e+01
 4.90851697e-01 1.19859445e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319983803619667
cond(S) = 45.76512007449404
E1 = -688.8732506765162  E_coul = 184.9151105022594
init E= -503.958140174257
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.680895627847272  LUMO = 84.6506149026937
  mo_energy =
[-1.21650430e+02 -1.32811261e+01 -7.62163813e+00 -7.62163813e+00
 -7.62163813e+00 -1.65068666e+00 -6.80895628e-01 -6.80895628e-01
 -6.80895628e-01  8.46506149e+01  6.74143709e+02  3.92770638e+03
  2.96677293e+04  1.56371152e+05  7.03813142e+05]
E1 = -706.5843035304846  E_coul = 198.9452826160159
cycle= 1 E= -507.639020914469  delta_E= -3.68  |g|= 0.318  |ddm|= 0.301
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.417329
diis-c [-0.17416322  1.        ]
  HOMO = -0.236281005948094  LUMO = 85.9831358158799
  mo_energy =
[-1.20262383e+02 -1.22530448e+01 -6.65310958e+00 -6.65310958e+00
 -6.65310958e+00 -1.16348188e+00 -2.36281006e-01 -2.36281006e-01
 -2.36281006e-01  8.59831358e+01  6.75514380e+02  3.92895785e+03
  2.96688175e+04  1.56372169e+05  7.03814127e+05]
E1 = -706.5526530930032  E_coul = 198.91320112594374
cycle= 2 E= -507.639451967059  delta_E= -0.000431  |g|= 0.00476  |ddm|= 0.0144
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00505818
diis-c [-2.55417182e-05 -5.00009187e-04  1.00050001e+00]
  HOMO = -0.236457687086745  LUMO = 85.9796033003756
  mo_energy =
[-1.20271075e+02 -1.22542430e+01 -6.65496524e+00 -6.65496524e+00
 -6.65496524e+00 -1.16354718e+00 -2.36457687e-01 -2.36457687e-01
 -2.36457687e-01  8.59796033e+01  6.75503748e+02  3.92894188e+03
  2.96687982e+04  1.56372148e+05  7.03814107e+05]
E1 = -706.5522084880308  E_coul = 198.9127564095508
cycle= 3 E= -507.63945207848  delta_E= -1.11e-07  |g|= 9.54e-05  |ddm|= 0.000204
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.000127524
diis-c [-3.98834308e-10  3.38426340e-05 -2.55315978e-02  1.02549776e+00]
  HOMO = -0.236459924856673  LUMO = 85.9795582526114
  mo_energy =
[-1.20271189e+02 -1.22542590e+01 -6.65499250e+00 -6.65499250e+00
 -6.65499250e+00 -1.16354785e+00 -2.36459925e-01 -2.36459925e-01
 -2.36459925e-01  8.59795583e+01  6.75503630e+02  3.92894173e+03
  2.96687980e+04  1.56372148e+05  7.03814107e+05]
E1 = -706.5522011531173  E_coul = 198.91274907459692
cycle= 4 E= -507.63945207852  delta_E= -4.03e-11  |g|= 3.76e-07  |ddm|= 3.49e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.5522011531173  E_coul = 198.91274907459692
  HOMO = -0.236459908374131  LUMO = 85.9795585923411
  mo_energy =
[-1.20271188e+02 -1.22542589e+01 -6.65499233e+00 -6.65499233e+00
 -6.65499233e+00 -1.16354784e+00 -2.36459908e-01 -2.36459908e-01
 -2.36459908e-01  8.59795586e+01  6.75503631e+02  3.92894174e+03
  2.96687980e+04  1.56372148e+05  7.03814107e+05]
E1 = -706.5522011905289  E_coul = 198.91274911200847
Extra cycle  E= -507.63945207852  delta_E= -1.14e-13  |g|= 6.5e-09  |ddm|= 1.66e-08
    CPU time for scf_cycle      0.10 sec, wall time      0.10 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 45.76512007449404
E1 = -706.5522011905289  E_coul = 198.91274911200847
init E= -507.63945207852
    CPU time for initialize scf      0.08 sec, wall time      0.08 sec
  HOMO = -0.236459908180914  LUMO = 85.9795585965056
  mo_energy =
[-1.20271188e+02 -1.22542589e+01 -6.65499233e+00 -6.65499233e+00
 -6.65499233e+00 -1.16354784e+00 -2.36459908e-01 -2.36459908e-01
 -2.36459908e-01  8.59795586e+01  6.75503631e+02  3.92894174e+03
  2.96687980e+04  1.56372148e+05  7.03814107e+05]
E1 = -706.5522011910966  E_coul = 198.912749112576
cycle= 1 E= -507.639452078521  delta_E= -2.27e-13  |g|= 1.32e-10  |ddm|= 2.57e-10
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -706.5522011910966  E_coul = 198.912749112576
  HOMO = -0.236459908178181  LUMO = 85.9795585965654
  mo_energy =
[-1.20271188e+02 -1.22542589e+01 -6.65499233e+00 -6.65499233e+00
 -6.65499233e+00 -1.16354784e+00 -2.36459908e-01 -2.36459908e-01
 -2.36459908e-01  8.59795586e+01  6.75503631e+02  3.92894174e+03
  2.96687980e+04  1.56372148e+05  7.03814107e+05]
E1 = -706.5522011911061  E_coul = 198.91274911258566
Extra cycle  E= -507.63945207852  delta_E= 2.27e-13  |g|= 1.96e-11  |ddm|= 4.59e-12
    CPU time for scf_cycle      0.15 sec, wall time      0.15 sec
exp = [2.93679452e+05 7.34198630e+04 1.83543971e+04 2.23376905e+03
 4.55190385e+02 1.21240927e+02 3.74960867e+01 4.74094512e+00
 3.91193475e-01 8.59865490e+00 4.90851697e-01]
grad_E = [ 9.35120271e-09 -3.26182236e-08  6.35769169e-06 -5.37779854e-06
 -1.80291997e-05 -2.24256481e-05 -6.75023105e-06  7.08606862e-08
 -5.79241686e-08  3.70490059e-06  1.49458174e-07]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((11, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([7.3419862888950534e+04,1.8354415279684519e+04,2.2337565691104060e+03,4.5509411588185179e+02,1.2132000689951782e+02,3.7517668969809321e+01,4.7408530341284303e+00,3.9118871783972831e-01,8.5986666061044215e+00,4.9085282207620301e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "9s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:03:43 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  293679.451529        1
[INPUT] 0    0    [1    /1   ]  73419.8629827        1
[INPUT] 0    0    [1    /1   ]  18354.3970689        1
[INPUT] 0    0    [1    /1   ]  2233.76908273        1
[INPUT] 0    0    [1    /1   ]  455.190478073        1
[INPUT] 0    0    [1    /1   ]  121.241128138        1
[INPUT] 0    0    [1    /1   ]  37.4960628282        1
[INPUT] 0    0    [1    /1   ]  4.74094779703        1
[INPUT] 0    0    [1    /1   ]  0.391193912203       1
[INPUT] 1    0    [1    /1   ]  8.59861478246        1
[INPUT] 1    0    [1    /1   ]  0.490850575913       1

nuclear repulsion = 0
number of shells = 11
number of NR pGTOs = 15
number of NR cGTOs = 15
basis = {'Ar': [[0, [293679.45152902143, 1.0]], [0, [73419.86298268693, 1.0]], [0, [18354.39706892459, 1.0]], [0, [2233.769082734106, 1.0]], [0, [455.19047807297056, 1.0]], [0, [121.24112813776617, 1.0]], [0, [37.49606282822628, 1.0]], [0, [4.740947797033154, 1.0]], [0, [0.39119391220309974, 1.0]], [1, [8.598614782461235, 1.0]], [1, [0.4908505759125586, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [293679.45152902]
bas 1, expnt(s) = [73419.86298269]
bas 2, expnt(s) = [18354.39706892]
bas 3, expnt(s) = [2233.76908273]
bas 4, expnt(s) = [455.19047807]
bas 5, expnt(s) = [121.24112814]
bas 6, expnt(s) = [37.49606283]
bas 7, expnt(s) = [4.7409478]
bas 8, expnt(s) = [0.39119391]
bas 9, expnt(s) = [8.59861478]
bas 10, expnt(s) = [0.49085058]
CPU time:        53.60
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]
 [ 0  1  1  1  0 44 45  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 2.93679452e+05 3.18727983e+04 7.34198630e+04 1.12687359e+04
 1.83543971e+04 3.98400722e+03 2.23376908e+03 8.20906569e+02
 4.55190478e+02 2.48977385e+02 1.21241128e+02 9.23107970e+01
 3.74960628e+01 3.82828512e+01 4.74094780e+00 8.11734312e+00
 3.91193912e-01 1.24970955e+00 8.59861478e+00 4.29556217e+01
 4.90850576e-01 1.19859103e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.31998528704755
cond(S) = 45.76509319985384
E1 = -688.8730482906714  E_coul = 184.91490456833893
init E= -503.958143722332
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.68089629208652  LUMO = 84.6506334857706
  mo_energy =
[-1.21650471e+02 -1.32811419e+01 -7.62165222e+00 -7.62165222e+00
 -7.62165222e+00 -1.65068839e+00 -6.80896292e-01 -6.80896292e-01
 -6.80896292e-01  8.46506335e+01  6.74144210e+02  3.92770730e+03
  2.96677302e+04  1.56371153e+05  7.03813142e+05]
E1 = -706.5840537610286  E_coul = 198.94503283587258
cycle= 1 E= -507.639020925156  delta_E= -3.68  |g|= 0.318  |ddm|= 0.301
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.417328
diis-c [-0.17416278  1.        ]
  HOMO = -0.236283351533899  LUMO = 85.983150101063
  mo_energy =
[-1.20262428e+02 -1.22530633e+01 -6.65312680e+00 -6.65312680e+00
 -6.65312680e+00 -1.16348453e+00 -2.36283352e-01 -2.36283352e-01
 -2.36283352e-01  8.59831501e+01  6.75514876e+02  3.92895876e+03
  2.96688184e+04  1.56372169e+05  7.03814128e+05]
E1 = -706.5524035296078  E_coul = 198.91295155666253
cycle= 2 E= -507.639451972945  delta_E= -0.000431  |g|= 0.00476  |ddm|= 0.0144
    CPU time for cycle= 2      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.00505815
diis-c [-2.55414354e-05 -4.99989048e-04  1.00049999e+00]
  HOMO = -0.236460030176626  LUMO = 85.9796176023104
  mo_energy =
[-1.20271119e+02 -1.22542616e+01 -6.65498244e+00 -6.65498244e+00
 -6.65498244e+00 -1.16354983e+00 -2.36460030e-01 -2.36460030e-01
 -2.36460030e-01  8.59796176e+01  6.75504245e+02  3.92894280e+03
  2.96687990e+04  1.56372149e+05  7.03814108e+05]
E1 = -706.551958927991  E_coul = 198.912506843627
cycle= 3 E= -507.639452084364  delta_E= -1.11e-07  |g|= 9.54e-05  |ddm|= 0.000204
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.000127523
diis-c [-3.98830348e-10  3.38424572e-05 -2.55316132e-02  1.02549777e+00]
  HOMO = -0.236462267914134  LUMO = 85.9795725547376
  mo_energy =
[-1.20271234e+02 -1.22542775e+01 -6.65500970e+00 -6.65500970e+00
 -6.65500970e+00 -1.16355050e+00 -2.36462268e-01 -2.36462268e-01
 -2.36462268e-01  8.59795726e+01  6.75504127e+02  3.92894265e+03
  2.96687989e+04  1.56372149e+05  7.03814107e+05]
E1 = -706.5519515931295  E_coul = 198.91249950872438
cycle= 4 E= -507.639452084405  delta_E= -4.11e-11  |g|= 3.76e-07  |ddm|= 3.49e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.5519515931295  E_coul = 198.91249950872438
  HOMO = -0.236462251431793  LUMO = 85.9795728944652
  mo_energy =
[-1.20271233e+02 -1.22542774e+01 -6.65500954e+00 -6.65500954e+00
 -6.65500954e+00 -1.16355049e+00 -2.36462251e-01 -2.36462251e-01
 -2.36462251e-01  8.59795729e+01  6.75504128e+02  3.92894265e+03
  2.96687989e+04  1.56372149e+05  7.03814107e+05]
E1 = -706.5519516305407  E_coul = 198.91249954613593
Extra cycle  E= -507.639452084405  delta_E= 3.41e-13  |g|= 6.5e-09  |ddm|= 1.66e-08
    CPU time for scf_cycle      0.10 sec, wall time      0.10 sec
exp = [2.93679452e+05 7.34198630e+04 1.83543971e+04 2.23376908e+03
 4.55190478e+02 1.21241128e+02 3.74960628e+01 4.74094780e+00
 3.91193912e-01 8.59861478e+00 4.90850576e-01]
E = -507.63945208440475
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((11, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([7.3419862888950534e+04,1.8354415279684519e+04,2.2337565691104060e+03,4.5509411588185179e+02,1.2132000689951782e+02,3.7517668969809321e+01,4.7408530341284303e+00,3.9118871783972831e-01,8.5986666061044215e+00,4.9085282207620301e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "9s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:03:43 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  293679.451529        1
[INPUT] 0    0    [1    /1   ]  73419.8629827        1
[INPUT] 0    0    [1    /1   ]  18354.3970689        1
[INPUT] 0    0    [1    /1   ]  2233.76908273        1
[INPUT] 0    0    [1    /1   ]  455.190478073        1
[INPUT] 0    0    [1    /1   ]  121.241128138        1
[INPUT] 0    0    [1    /1   ]  37.4960628282        1
[INPUT] 0    0    [1    /1   ]  4.74094779703        1
[INPUT] 0    0    [1    /1   ]  0.391193912203       1
[INPUT] 1    0    [1    /1   ]  8.59861478246        1
[INPUT] 1    0    [1    /1   ]  0.490850575913       1

nuclear repulsion = 0
number of shells = 11
number of NR pGTOs = 15
number of NR cGTOs = 15
basis = {'Ar': [[0, [293679.45152902143, 1.0]], [0, [73419.86298268693, 1.0]], [0, [18354.39706892459, 1.0]], [0, [2233.769082734106, 1.0]], [0, [455.19047807297056, 1.0]], [0, [121.24112813776617, 1.0]], [0, [37.49606282822628, 1.0]], [0, [4.740947797033154, 1.0]], [0, [0.39119391220309974, 1.0]], [1, [8.598614782461235, 1.0]], [1, [0.4908505759125586, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [293679.45152902]
bas 1, expnt(s) = [73419.86298269]
bas 2, expnt(s) = [18354.39706892]
bas 3, expnt(s) = [2233.76908273]
bas 4, expnt(s) = [455.19047807]
bas 5, expnt(s) = [121.24112814]
bas 6, expnt(s) = [37.49606283]
bas 7, expnt(s) = [4.7409478]
bas 8, expnt(s) = [0.39119391]
bas 9, expnt(s) = [8.59861478]
bas 10, expnt(s) = [0.49085058]
CPU time:        53.98
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]
 [ 0  1  1  1  0 44 45  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 2.93679452e+05 3.18727983e+04 7.34198630e+04 1.12687359e+04
 1.83543971e+04 3.98400722e+03 2.23376908e+03 8.20906569e+02
 4.55190478e+02 2.48977385e+02 1.21241128e+02 9.23107970e+01
 3.74960628e+01 3.82828512e+01 4.74094780e+00 8.11734312e+00
 3.91193912e-01 1.24970955e+00 8.59861478e+00 4.29556217e+01
 4.90850576e-01 1.19859103e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.31998528704755
cond(S) = 45.76509319985384
E1 = -688.8730482906714  E_coul = 184.91490456833893
init E= -503.958143722332
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.68089629208652  LUMO = 84.6506334857706
  mo_energy =
[-1.21650471e+02 -1.32811419e+01 -7.62165222e+00 -7.62165222e+00
 -7.62165222e+00 -1.65068839e+00 -6.80896292e-01 -6.80896292e-01
 -6.80896292e-01  8.46506335e+01  6.74144210e+02  3.92770730e+03
  2.96677302e+04  1.56371153e+05  7.03813142e+05]
E1 = -706.5840537610286  E_coul = 198.94503283587258
cycle= 1 E= -507.639020925156  delta_E= -3.68  |g|= 0.318  |ddm|= 0.301
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.417328
diis-c [-0.17416278  1.        ]
  HOMO = -0.236283351533899  LUMO = 85.983150101063
  mo_energy =
[-1.20262428e+02 -1.22530633e+01 -6.65312680e+00 -6.65312680e+00
 -6.65312680e+00 -1.16348453e+00 -2.36283352e-01 -2.36283352e-01
 -2.36283352e-01  8.59831501e+01  6.75514876e+02  3.92895876e+03
  2.96688184e+04  1.56372169e+05  7.03814128e+05]
E1 = -706.5524035296078  E_coul = 198.91295155666253
cycle= 2 E= -507.639451972945  delta_E= -0.000431  |g|= 0.00476  |ddm|= 0.0144
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00505815
diis-c [-2.55414354e-05 -4.99989048e-04  1.00049999e+00]
  HOMO = -0.236460030176626  LUMO = 85.9796176023104
  mo_energy =
[-1.20271119e+02 -1.22542616e+01 -6.65498244e+00 -6.65498244e+00
 -6.65498244e+00 -1.16354983e+00 -2.36460030e-01 -2.36460030e-01
 -2.36460030e-01  8.59796176e+01  6.75504245e+02  3.92894280e+03
  2.96687990e+04  1.56372149e+05  7.03814108e+05]
E1 = -706.551958927991  E_coul = 198.912506843627
cycle= 3 E= -507.639452084364  delta_E= -1.11e-07  |g|= 9.54e-05  |ddm|= 0.000204
    CPU time for cycle= 3      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.000127523
diis-c [-3.98830348e-10  3.38424572e-05 -2.55316132e-02  1.02549777e+00]
  HOMO = -0.236462267914134  LUMO = 85.9795725547376
  mo_energy =
[-1.20271234e+02 -1.22542775e+01 -6.65500970e+00 -6.65500970e+00
 -6.65500970e+00 -1.16355050e+00 -2.36462268e-01 -2.36462268e-01
 -2.36462268e-01  8.59795726e+01  6.75504127e+02  3.92894265e+03
  2.96687989e+04  1.56372149e+05  7.03814107e+05]
E1 = -706.5519515931295  E_coul = 198.91249950872438
cycle= 4 E= -507.639452084405  delta_E= -4.11e-11  |g|= 3.76e-07  |ddm|= 3.49e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.5519515931295  E_coul = 198.91249950872438
  HOMO = -0.236462251431793  LUMO = 85.9795728944652
  mo_energy =
[-1.20271233e+02 -1.22542774e+01 -6.65500954e+00 -6.65500954e+00
 -6.65500954e+00 -1.16355049e+00 -2.36462251e-01 -2.36462251e-01
 -2.36462251e-01  8.59795729e+01  6.75504128e+02  3.92894265e+03
  2.96687989e+04  1.56372149e+05  7.03814107e+05]
E1 = -706.5519516305407  E_coul = 198.91249954613593
Extra cycle  E= -507.639452084405  delta_E= 3.41e-13  |g|= 6.5e-09  |ddm|= 1.66e-08
    CPU time for scf_cycle      0.10 sec, wall time      0.10 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 45.76509319985384
E1 = -706.5519516305407  E_coul = 198.91249954613593
init E= -507.639452084405
    CPU time for initialize scf      0.08 sec, wall time      0.08 sec
  HOMO = -0.236462251238578  LUMO = 85.979572898632
  mo_energy =
[-1.20271233e+02 -1.22542774e+01 -6.65500954e+00 -6.65500954e+00
 -6.65500954e+00 -1.16355049e+00 -2.36462251e-01 -2.36462251e-01
 -2.36462251e-01  8.59795729e+01  6.75504128e+02  3.92894265e+03
  2.96687989e+04  1.56372149e+05  7.03814107e+05]
E1 = -706.5519516311085  E_coul = 198.9124995467034
cycle= 1 E= -507.639452084405  delta_E= -3.41e-13  |g|= 1.29e-10  |ddm|= 2.57e-10
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -706.5519516311085  E_coul = 198.9124995467034
  HOMO = -0.236462251235845  LUMO = 85.9795728986921
  mo_energy =
[-1.20271233e+02 -1.22542774e+01 -6.65500954e+00 -6.65500954e+00
 -6.65500954e+00 -1.16355049e+00 -2.36462251e-01 -2.36462251e-01
 -2.36462251e-01  8.59795729e+01  6.75504128e+02  3.92894265e+03
  2.96687989e+04  1.56372149e+05  7.03814107e+05]
E1 = -706.5519516311178  E_coul = 198.9124995467129
Extra cycle  E= -507.639452084405  delta_E= 1.14e-13  |g|= 1.26e-11  |ddm|= 4.6e-12
    CPU time for scf_cycle      0.15 sec, wall time      0.15 sec
exp = [2.93679452e+05 7.34198630e+04 1.83543971e+04 2.23376908e+03
 4.55190478e+02 1.21241128e+02 3.74960628e+01 4.74094780e+00
 3.91193912e-01 8.59861478e+00 4.90850576e-01]
grad_E = [ 9.35116346e-09 -3.26183550e-08  6.35766762e-06 -5.37516158e-06
 -1.80885702e-05 -2.19932003e-05 -7.85372211e-06 -7.69713591e-07
  5.80646471e-07 -2.89876687e-05 -1.19592994e-06]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((11, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([7.3419862888950534e+04,1.8354415279684519e+04,2.2337565691104060e+03,4.5509411588185179e+02,1.2132000689951782e+02,3.7517668969809321e+01,4.7408530341284303e+00,3.9118871783972831e-01,8.5986666061044215e+00,4.9085282207620301e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "9s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:03:46 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  293679.451529        1
[INPUT] 0    0    [1    /1   ]  73419.8629842        1
[INPUT] 0    0    [1    /1   ]  18354.3967672        1
[INPUT] 0    0    [1    /1   ]  2233.7693332         1
[INPUT] 0    0    [1    /1   ]  455.191404259        1
[INPUT] 0    0    [1    /1   ]  121.24202775         1
[INPUT] 0    0    [1    /1   ]  37.4960117677        1
[INPUT] 0    0    [1    /1   ]  4.74095762135        1
[INPUT] 0    0    [1    /1   ]  0.391195513283       1
[INPUT] 1    0    [1    /1   ]  8.59846840709        1
[INPUT] 1    0    [1    /1   ]  0.490846484395       1

nuclear repulsion = 0
number of shells = 11
number of NR pGTOs = 15
number of NR cGTOs = 15
basis = {'Ar': [[0, [293679.4515285776, 1.0]], [0, [73419.86298423559, 1.0]], [0, [18354.396767170274, 1.0]], [0, [2233.7693331978835, 1.0]], [0, [455.19140425911314, 1.0]], [0, [121.24202775008766, 1.0]], [0, [37.496011767746815, 1.0]], [0, [4.740957621346003, 1.0]], [0, [0.3911955132830821, 1.0]], [1, [8.598468407085457, 1.0]], [1, [0.4908464843945292, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [293679.45152858]
bas 1, expnt(s) = [73419.86298424]
bas 2, expnt(s) = [18354.39676717]
bas 3, expnt(s) = [2233.7693332]
bas 4, expnt(s) = [455.19140426]
bas 5, expnt(s) = [121.24202775]
bas 6, expnt(s) = [37.49601177]
bas 7, expnt(s) = [4.74095762]
bas 8, expnt(s) = [0.39119551]
bas 9, expnt(s) = [8.59846841]
bas 10, expnt(s) = [0.49084648]
CPU time:        56.99
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]
 [ 0  1  1  1  0 44 45  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 2.93679452e+05 3.18727983e+04 7.34198630e+04 1.12687359e+04
 1.83543968e+04 3.98400717e+03 2.23376933e+03 8.20906638e+02
 4.55191404e+02 2.48977765e+02 1.21242028e+02 9.23113108e+01
 3.74960118e+01 3.82828121e+01 4.74095762e+00 8.11735574e+00
 3.91195513e-01 1.24971339e+00 8.59846841e+00 4.29547076e+01
 4.90846484e-01 1.19857854e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.31999069666625
cond(S) = 45.765000105593224
E1 = -688.8723085025698  E_coul = 184.91415320957097
init E= -503.958155292999
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.68089871660517  LUMO = 84.6508468983979
  mo_energy =
[-1.21650618e+02 -1.32811998e+01 -7.62170366e+00 -7.62170366e+00
 -7.62170366e+00 -1.65069473e+00 -6.80898717e-01 -6.80898717e-01
 -6.80898717e-01  8.46508469e+01  6.74147106e+02  3.92771330e+03
  2.96677361e+04  1.56371158e+05  7.03813146e+05]
E1 = -706.5831425362484  E_coul = 198.94412156672462
cycle= 1 E= -507.639020969524  delta_E= -3.68  |g|= 0.318  |ddm|= 0.301
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.417326
diis-c [-0.17416113  1.        ]
  HOMO = -0.236291908393863  LUMO = 85.9833480236956
  mo_energy =
[-1.20262592e+02 -1.22531310e+01 -6.65318963e+00 -6.65318963e+00
 -6.65318963e+00 -1.16349419e+00 -2.36291908e-01 -2.36291908e-01
 -2.36291908e-01  8.59833480e+01  6.75517755e+02  3.92896475e+03
  2.96688243e+04  1.56372174e+05  7.03814132e+05]
E1 = -706.5514931353852  E_coul = 198.91204113671358
cycle= 2 E= -507.639451998672  delta_E= -0.000431  |g|= 0.00476  |ddm|= 0.0144
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00505804
diis-c [-2.55403416e-05 -4.99922996e-04  1.00049992e+00]
  HOMO = -0.236468577402212  LUMO = 85.9798155913272
  mo_energy =
[-1.20271283e+02 -1.22543292e+01 -6.65504522e+00 -6.65504522e+00
 -6.65504522e+00 -1.16355949e+00 -2.36468577e-01 -2.36468577e-01
 -2.36468577e-01  8.59798156e+01  6.75507124e+02  3.92894878e+03
  2.96688050e+04  1.56372154e+05  7.03814112e+05]
E1 = -706.5510485475882  E_coul = 198.91159643750265
cycle= 3 E= -507.639452110085  delta_E= -1.11e-07  |g|= 9.54e-05  |ddm|= 0.000204
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00012752
diis-c [-3.98811531e-10  3.38419888e-05 -2.55316332e-02  1.02549779e+00]
  HOMO = -0.236470815011132  LUMO = 85.9797705446313
  mo_energy =
[-1.20271398e+02 -1.22543452e+01 -6.65507247e+00 -6.65507247e+00
 -6.65507247e+00 -1.16356016e+00 -2.36470815e-01 -2.36470815e-01
 -2.36470815e-01  8.59797705e+01  6.75507006e+02  3.92894864e+03
  2.96688048e+04  1.56372154e+05  7.03814111e+05]
E1 = -706.5510412129489  E_coul = 198.9115891028233
cycle= 4 E= -507.639452110126  delta_E= -4.01e-11  |g|= 3.76e-07  |ddm|= 3.49e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.5510412129489  E_coul = 198.9115891028233
  HOMO = -0.236470798529666  LUMO = 85.9797708843527
  mo_energy =
[-1.20271397e+02 -1.22543451e+01 -6.65507231e+00 -6.65507231e+00
 -6.65507231e+00 -1.16356015e+00 -2.36470799e-01 -2.36470799e-01
 -2.36470799e-01  8.59797709e+01  6.75507007e+02  3.92894864e+03
  2.96688048e+04  1.56372154e+05  7.03814111e+05]
E1 = -706.5510412503593  E_coul = 198.9115891402334
Extra cycle  E= -507.639452110126  delta_E= -2.84e-13  |g|= 6.5e-09  |ddm|= 1.66e-08
    CPU time for scf_cycle      0.10 sec, wall time      0.11 sec
exp = [2.93679452e+05 7.34198630e+04 1.83543968e+04 2.23376933e+03
 4.55191404e+02 1.21242028e+02 3.74960118e+01 4.74095762e+00
 3.91195513e-01 8.59846841e+00 4.90846484e-01]
E = -507.6394521101259
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((11, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([7.3419862888950534e+04,1.8354415279684519e+04,2.2337565691104060e+03,4.5509411588185179e+02,1.2132000689951782e+02,3.7517668969809321e+01,4.7408530341284303e+00,3.9118871783972831e-01,8.5986666061044215e+00,4.9085282207620301e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "9s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:03:46 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  293679.451529        1
[INPUT] 0    0    [1    /1   ]  73419.8629842        1
[INPUT] 0    0    [1    /1   ]  18354.3967672        1
[INPUT] 0    0    [1    /1   ]  2233.7693332         1
[INPUT] 0    0    [1    /1   ]  455.191404259        1
[INPUT] 0    0    [1    /1   ]  121.24202775         1
[INPUT] 0    0    [1    /1   ]  37.4960117677        1
[INPUT] 0    0    [1    /1   ]  4.74095762135        1
[INPUT] 0    0    [1    /1   ]  0.391195513283       1
[INPUT] 1    0    [1    /1   ]  8.59846840709        1
[INPUT] 1    0    [1    /1   ]  0.490846484395       1

nuclear repulsion = 0
number of shells = 11
number of NR pGTOs = 15
number of NR cGTOs = 15
basis = {'Ar': [[0, [293679.4515285776, 1.0]], [0, [73419.86298423559, 1.0]], [0, [18354.396767170274, 1.0]], [0, [2233.7693331978835, 1.0]], [0, [455.19140425911314, 1.0]], [0, [121.24202775008766, 1.0]], [0, [37.496011767746815, 1.0]], [0, [4.740957621346003, 1.0]], [0, [0.3911955132830821, 1.0]], [1, [8.598468407085457, 1.0]], [1, [0.4908464843945292, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [293679.45152858]
bas 1, expnt(s) = [73419.86298424]
bas 2, expnt(s) = [18354.39676717]
bas 3, expnt(s) = [2233.7693332]
bas 4, expnt(s) = [455.19140426]
bas 5, expnt(s) = [121.24202775]
bas 6, expnt(s) = [37.49601177]
bas 7, expnt(s) = [4.74095762]
bas 8, expnt(s) = [0.39119551]
bas 9, expnt(s) = [8.59846841]
bas 10, expnt(s) = [0.49084648]
CPU time:        57.38
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]
 [ 0  1  1  1  0 44 45  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 2.93679452e+05 3.18727983e+04 7.34198630e+04 1.12687359e+04
 1.83543968e+04 3.98400717e+03 2.23376933e+03 8.20906638e+02
 4.55191404e+02 2.48977765e+02 1.21242028e+02 9.23113108e+01
 3.74960118e+01 3.82828121e+01 4.74095762e+00 8.11735574e+00
 3.91195513e-01 1.24971339e+00 8.59846841e+00 4.29547076e+01
 4.90846484e-01 1.19857854e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.31999069666625
cond(S) = 45.765000105593224
E1 = -688.8723085025698  E_coul = 184.91415320957097
init E= -503.958155292999
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.68089871660517  LUMO = 84.6508468983979
  mo_energy =
[-1.21650618e+02 -1.32811998e+01 -7.62170366e+00 -7.62170366e+00
 -7.62170366e+00 -1.65069473e+00 -6.80898717e-01 -6.80898717e-01
 -6.80898717e-01  8.46508469e+01  6.74147106e+02  3.92771330e+03
  2.96677361e+04  1.56371158e+05  7.03813146e+05]
E1 = -706.5831425362484  E_coul = 198.94412156672462
cycle= 1 E= -507.639020969524  delta_E= -3.68  |g|= 0.318  |ddm|= 0.301
    CPU time for cycle= 1      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.417326
diis-c [-0.17416113  1.        ]
  HOMO = -0.236291908393863  LUMO = 85.9833480236956
  mo_energy =
[-1.20262592e+02 -1.22531310e+01 -6.65318963e+00 -6.65318963e+00
 -6.65318963e+00 -1.16349419e+00 -2.36291908e-01 -2.36291908e-01
 -2.36291908e-01  8.59833480e+01  6.75517755e+02  3.92896475e+03
  2.96688243e+04  1.56372174e+05  7.03814132e+05]
E1 = -706.5514931353852  E_coul = 198.91204113671358
cycle= 2 E= -507.639451998672  delta_E= -0.000431  |g|= 0.00476  |ddm|= 0.0144
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00505804
diis-c [-2.55403416e-05 -4.99922996e-04  1.00049992e+00]
  HOMO = -0.236468577402212  LUMO = 85.9798155913272
  mo_energy =
[-1.20271283e+02 -1.22543292e+01 -6.65504522e+00 -6.65504522e+00
 -6.65504522e+00 -1.16355949e+00 -2.36468577e-01 -2.36468577e-01
 -2.36468577e-01  8.59798156e+01  6.75507124e+02  3.92894878e+03
  2.96688050e+04  1.56372154e+05  7.03814112e+05]
E1 = -706.5510485475882  E_coul = 198.91159643750265
cycle= 3 E= -507.639452110085  delta_E= -1.11e-07  |g|= 9.54e-05  |ddm|= 0.000204
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00012752
diis-c [-3.98811531e-10  3.38419888e-05 -2.55316332e-02  1.02549779e+00]
  HOMO = -0.236470815011132  LUMO = 85.9797705446313
  mo_energy =
[-1.20271398e+02 -1.22543452e+01 -6.65507247e+00 -6.65507247e+00
 -6.65507247e+00 -1.16356016e+00 -2.36470815e-01 -2.36470815e-01
 -2.36470815e-01  8.59797705e+01  6.75507006e+02  3.92894864e+03
  2.96688048e+04  1.56372154e+05  7.03814111e+05]
E1 = -706.5510412129489  E_coul = 198.9115891028233
cycle= 4 E= -507.639452110126  delta_E= -4.01e-11  |g|= 3.76e-07  |ddm|= 3.49e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.5510412129489  E_coul = 198.9115891028233
  HOMO = -0.236470798529666  LUMO = 85.9797708843527
  mo_energy =
[-1.20271397e+02 -1.22543451e+01 -6.65507231e+00 -6.65507231e+00
 -6.65507231e+00 -1.16356015e+00 -2.36470799e-01 -2.36470799e-01
 -2.36470799e-01  8.59797709e+01  6.75507007e+02  3.92894864e+03
  2.96688048e+04  1.56372154e+05  7.03814111e+05]
E1 = -706.5510412503593  E_coul = 198.9115891402334
Extra cycle  E= -507.639452110126  delta_E= -2.84e-13  |g|= 6.5e-09  |ddm|= 1.66e-08
    CPU time for scf_cycle      0.10 sec, wall time      0.11 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 45.765000105593224
E1 = -706.5510412503593  E_coul = 198.9115891402334
init E= -507.639452110126
    CPU time for initialize scf      0.07 sec, wall time      0.08 sec
  HOMO = -0.236470798336464  LUMO = 85.9797708885187
  mo_energy =
[-1.20271397e+02 -1.22543451e+01 -6.65507231e+00 -6.65507231e+00
 -6.65507231e+00 -1.16356015e+00 -2.36470798e-01 -2.36470798e-01
 -2.36470798e-01  8.59797709e+01  6.75507007e+02  3.92894864e+03
  2.96688048e+04  1.56372154e+05  7.03814111e+05]
E1 = -706.5510412509265  E_coul = 198.91158914080083
cycle= 1 E= -507.639452110126  delta_E= 2.84e-13  |g|= 1.37e-10  |ddm|= 2.57e-10
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -706.5510412509265  E_coul = 198.91158914080083
  HOMO = -0.236470798333736  LUMO = 85.979770888576
  mo_energy =
[-1.20271397e+02 -1.22543451e+01 -6.65507231e+00 -6.65507231e+00
 -6.65507231e+00 -1.16356015e+00 -2.36470798e-01 -2.36470798e-01
 -2.36470798e-01  8.59797709e+01  6.75507007e+02  3.92894864e+03
  2.96688048e+04  1.56372154e+05  7.03814111e+05]
E1 = -706.5510412509366  E_coul = 198.91158914081083
Extra cycle  E= -507.639452110126  delta_E= -1.14e-13  |g|= 9.52e-12  |ddm|= 4.63e-12
    CPU time for scf_cycle      0.14 sec, wall time      0.15 sec
exp = [2.93679452e+05 7.34198630e+04 1.83543968e+04 2.23376933e+03
 4.55191404e+02 1.21242028e+02 3.74960118e+01 4.74095762e+00
 3.91195513e-01 8.59846841e+00 4.90846484e-01]
grad_E = [ 9.35104790e-09 -3.26187449e-08  6.35759697e-06 -5.36708247e-06
 -1.82957691e-05 -2.04221805e-05 -1.18343452e-05 -3.87316866e-06
  2.91173563e-06 -1.48271748e-04 -6.11277471e-06]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((11, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([7.3419862888950534e+04,1.8354415279684519e+04,2.2337565691104060e+03,4.5509411588185179e+02,1.2132000689951782e+02,3.7517668969809321e+01,4.7408530341284303e+00,3.9118871783972831e-01,8.5986666061044215e+00,4.9085282207620301e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "9s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:03:49 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  293679.451528        1
[INPUT] 0    0    [1    /1   ]  73419.8629871        1
[INPUT] 0    0    [1    /1   ]  18354.3962063        1
[INPUT] 0    0    [1    /1   ]  2233.76978823        1
[INPUT] 0    0    [1    /1   ]  455.193290909        1
[INPUT] 0    0    [1    /1   ]  121.243118406        1
[INPUT] 0    0    [1    /1   ]  37.4960306676        1
[INPUT] 0    0    [1    /1   ]  4.74096628455        1
[INPUT] 0    0    [1    /1   ]  0.391196898587       1
[INPUT] 1    0    [1    /1   ]  8.59834235364        1
[INPUT] 1    0    [1    /1   ]  0.490842959374       1

nuclear repulsion = 0
number of shells = 11
number of NR pGTOs = 15
number of NR cGTOs = 15
basis = {'Ar': [[0, [293679.45152775274, 1.0]], [0, [73419.86298711506, 1.0]], [0, [18354.396206326423, 1.0]], [0, [2233.76978823376, 1.0]], [0, [455.1932909091371, 1.0]], [0, [121.24311840606248, 1.0]], [0, [37.49603066759028, 1.0]], [0, [4.740966284548036, 1.0]], [0, [0.39119689858721146, 1.0]], [1, [8.598342353636475, 1.0]], [1, [0.4908429593738273, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [293679.45152775]
bas 1, expnt(s) = [73419.86298712]
bas 2, expnt(s) = [18354.39620633]
bas 3, expnt(s) = [2233.76978823]
bas 4, expnt(s) = [455.19329091]
bas 5, expnt(s) = [121.24311841]
bas 6, expnt(s) = [37.49603067]
bas 7, expnt(s) = [4.74096628]
bas 8, expnt(s) = [0.3911969]
bas 9, expnt(s) = [8.59834235]
bas 10, expnt(s) = [0.49084296]
CPU time:        60.44
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]
 [ 0  1  1  1  0 44 45  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 2.93679452e+05 3.18727983e+04 7.34198630e+04 1.12687359e+04
 1.83543962e+04 3.98400708e+03 2.23376979e+03 8.20906763e+02
 4.55193291e+02 2.48978539e+02 1.21243118e+02 9.23119336e+01
 3.74960307e+01 3.82828266e+01 4.74096628e+00 8.11736686e+00
 3.91196899e-01 1.24971671e+00 8.59834235e+00 4.29539205e+01
 4.90842959e-01 1.19856778e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.31999534818076
cond(S) = 45.764924237687694
E1 = -688.8716694888165  E_coul = 184.91350637773542
init E= -503.958163111081
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.680900806212223  LUMO = 84.6512954754608
  mo_energy =
[-1.21650746e+02 -1.32812496e+01 -7.62174793e+00 -7.62174793e+00
 -7.62174793e+00 -1.65070019e+00 -6.80900806e-01 -6.80900806e-01
 -6.80900806e-01  8.46512955e+01  6.74151584e+02  3.92772339e+03
  2.96677464e+04  1.56371166e+05  7.03813153e+05]
E1 = -706.5823581486245  E_coul = 198.94333712368638
cycle= 1 E= -507.639021024938  delta_E= -3.68  |g|= 0.318  |ddm|= 0.301
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.417324
diis-c [-0.17415966  1.        ]
  HOMO = -0.236299273246713  LUMO = 85.9837835942901
  mo_energy =
[-1.20262734e+02 -1.22531893e+01 -6.65324371e+00 -6.65324371e+00
 -6.65324371e+00 -1.16350251e+00 -2.36299273e-01 -2.36299273e-01
 -2.36299273e-01  8.59837836e+01  6.75522218e+02  3.92897482e+03
  2.96688345e+04  1.56372182e+05  7.03814139e+05]
E1 = -706.5507096050283  E_coul = 198.91125756903938
cycle= 2 E= -507.639452035989  delta_E= -0.000431  |g|= 0.00476  |ddm|= 0.0144
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00505794
diis-c [-2.55392894e-05 -4.99877675e-04  1.00049988e+00]
  HOMO = -0.236475933000422  LUMO = 85.9802512283611
  mo_energy =
[-1.20271425e+02 -1.22543874e+01 -6.65509923e+00 -6.65509923e+00
 -6.65509923e+00 -1.16356781e+00 -2.36475933e-01 -2.36475933e-01
 -2.36475933e-01  8.59802512e+01  6.75511588e+02  3.92895885e+03
  2.96688152e+04  1.56372162e+05  7.03814118e+05]
E1 = -706.5502650319938  E_coul = 198.91081288459753
cycle= 3 E= -507.639452147396  delta_E= -1.11e-07  |g|= 9.54e-05  |ddm|= 0.000204
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.000127518
diis-c [-3.98792293e-10  3.38416061e-05 -2.55316036e-02  1.02549776e+00]
  HOMO = -0.236478170480341  LUMO = 85.9802061826953
  mo_energy =
[-1.20271539e+02 -1.22544034e+01 -6.65512648e+00 -6.65512648e+00
 -6.65512648e+00 -1.16356847e+00 -2.36478170e-01 -2.36478170e-01
 -2.36478170e-01  8.59802062e+01  6.75511469e+02  3.92895871e+03
  2.96688150e+04  1.56372162e+05  7.03814118e+05]
E1 = -706.5502576976148  E_coul = 198.91080555017768
cycle= 4 E= -507.639452147437  delta_E= -4.09e-11  |g|= 3.76e-07  |ddm|= 3.49e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.5502576976148  E_coul = 198.91080555017768
  HOMO = -0.236478153999783  LUMO = 85.9802065224117
  mo_energy =
[-1.20271538e+02 -1.22544033e+01 -6.65512632e+00 -6.65512632e+00
 -6.65512632e+00 -1.16356847e+00 -2.36478154e-01 -2.36478154e-01
 -2.36478154e-01  8.59802065e+01  6.75511470e+02  3.92895871e+03
  2.96688150e+04  1.56372162e+05  7.03814118e+05]
E1 = -706.5502577350233  E_coul = 198.91080558758634
Extra cycle  E= -507.639452147437  delta_E= 2.27e-13  |g|= 6.5e-09  |ddm|= 1.66e-08
    CPU time for scf_cycle      0.10 sec, wall time      0.10 sec
exp = [2.93679452e+05 7.34198630e+04 1.83543962e+04 2.23376979e+03
 4.55193291e+02 1.21243118e+02 3.74960307e+01 4.74096628e+00
 3.91196899e-01 8.59834235e+00 4.90842959e-01]
E = -507.63945214743694
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((11, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([7.3419862888950534e+04,1.8354415279684519e+04,2.2337565691104060e+03,4.5509411588185179e+02,1.2132000689951782e+02,3.7517668969809321e+01,4.7408530341284303e+00,3.9118871783972831e-01,8.5986666061044215e+00,4.9085282207620301e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "9s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:03:50 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  293679.451528        1
[INPUT] 0    0    [1    /1   ]  73419.8629871        1
[INPUT] 0    0    [1    /1   ]  18354.3962063        1
[INPUT] 0    0    [1    /1   ]  2233.76978823        1
[INPUT] 0    0    [1    /1   ]  455.193290909        1
[INPUT] 0    0    [1    /1   ]  121.243118406        1
[INPUT] 0    0    [1    /1   ]  37.4960306676        1
[INPUT] 0    0    [1    /1   ]  4.74096628455        1
[INPUT] 0    0    [1    /1   ]  0.391196898587       1
[INPUT] 1    0    [1    /1   ]  8.59834235364        1
[INPUT] 1    0    [1    /1   ]  0.490842959374       1

nuclear repulsion = 0
number of shells = 11
number of NR pGTOs = 15
number of NR cGTOs = 15
basis = {'Ar': [[0, [293679.45152775274, 1.0]], [0, [73419.86298711506, 1.0]], [0, [18354.396206326423, 1.0]], [0, [2233.76978823376, 1.0]], [0, [455.1932909091371, 1.0]], [0, [121.24311840606248, 1.0]], [0, [37.49603066759028, 1.0]], [0, [4.740966284548036, 1.0]], [0, [0.39119689858721146, 1.0]], [1, [8.598342353636475, 1.0]], [1, [0.4908429593738273, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [293679.45152775]
bas 1, expnt(s) = [73419.86298712]
bas 2, expnt(s) = [18354.39620633]
bas 3, expnt(s) = [2233.76978823]
bas 4, expnt(s) = [455.19329091]
bas 5, expnt(s) = [121.24311841]
bas 6, expnt(s) = [37.49603067]
bas 7, expnt(s) = [4.74096628]
bas 8, expnt(s) = [0.3911969]
bas 9, expnt(s) = [8.59834235]
bas 10, expnt(s) = [0.49084296]
CPU time:        60.84
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]
 [ 0  1  1  1  0 44 45  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 2.93679452e+05 3.18727983e+04 7.34198630e+04 1.12687359e+04
 1.83543962e+04 3.98400708e+03 2.23376979e+03 8.20906763e+02
 4.55193291e+02 2.48978539e+02 1.21243118e+02 9.23119336e+01
 3.74960307e+01 3.82828266e+01 4.74096628e+00 8.11736686e+00
 3.91196899e-01 1.24971671e+00 8.59834235e+00 4.29539205e+01
 4.90842959e-01 1.19856778e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.31999534818076
cond(S) = 45.764924237687694
E1 = -688.8716694888165  E_coul = 184.91350637773542
init E= -503.958163111081
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.680900806212223  LUMO = 84.6512954754608
  mo_energy =
[-1.21650746e+02 -1.32812496e+01 -7.62174793e+00 -7.62174793e+00
 -7.62174793e+00 -1.65070019e+00 -6.80900806e-01 -6.80900806e-01
 -6.80900806e-01  8.46512955e+01  6.74151584e+02  3.92772339e+03
  2.96677464e+04  1.56371166e+05  7.03813153e+05]
E1 = -706.5823581486245  E_coul = 198.94333712368638
cycle= 1 E= -507.639021024938  delta_E= -3.68  |g|= 0.318  |ddm|= 0.301
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.417324
diis-c [-0.17415966  1.        ]
  HOMO = -0.236299273246713  LUMO = 85.9837835942901
  mo_energy =
[-1.20262734e+02 -1.22531893e+01 -6.65324371e+00 -6.65324371e+00
 -6.65324371e+00 -1.16350251e+00 -2.36299273e-01 -2.36299273e-01
 -2.36299273e-01  8.59837836e+01  6.75522218e+02  3.92897482e+03
  2.96688345e+04  1.56372182e+05  7.03814139e+05]
E1 = -706.5507096050283  E_coul = 198.91125756903938
cycle= 2 E= -507.639452035989  delta_E= -0.000431  |g|= 0.00476  |ddm|= 0.0144
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00505794
diis-c [-2.55392894e-05 -4.99877675e-04  1.00049988e+00]
  HOMO = -0.236475933000422  LUMO = 85.9802512283611
  mo_energy =
[-1.20271425e+02 -1.22543874e+01 -6.65509923e+00 -6.65509923e+00
 -6.65509923e+00 -1.16356781e+00 -2.36475933e-01 -2.36475933e-01
 -2.36475933e-01  8.59802512e+01  6.75511588e+02  3.92895885e+03
  2.96688152e+04  1.56372162e+05  7.03814118e+05]
E1 = -706.5502650319938  E_coul = 198.91081288459753
cycle= 3 E= -507.639452147396  delta_E= -1.11e-07  |g|= 9.54e-05  |ddm|= 0.000204
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.000127518
diis-c [-3.98792293e-10  3.38416061e-05 -2.55316036e-02  1.02549776e+00]
  HOMO = -0.236478170480341  LUMO = 85.9802061826953
  mo_energy =
[-1.20271539e+02 -1.22544034e+01 -6.65512648e+00 -6.65512648e+00
 -6.65512648e+00 -1.16356847e+00 -2.36478170e-01 -2.36478170e-01
 -2.36478170e-01  8.59802062e+01  6.75511469e+02  3.92895871e+03
  2.96688150e+04  1.56372162e+05  7.03814118e+05]
E1 = -706.5502576976148  E_coul = 198.91080555017768
cycle= 4 E= -507.639452147437  delta_E= -4.09e-11  |g|= 3.76e-07  |ddm|= 3.49e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.5502576976148  E_coul = 198.91080555017768
  HOMO = -0.236478153999783  LUMO = 85.9802065224117
  mo_energy =
[-1.20271538e+02 -1.22544033e+01 -6.65512632e+00 -6.65512632e+00
 -6.65512632e+00 -1.16356847e+00 -2.36478154e-01 -2.36478154e-01
 -2.36478154e-01  8.59802065e+01  6.75511470e+02  3.92895871e+03
  2.96688150e+04  1.56372162e+05  7.03814118e+05]
E1 = -706.5502577350233  E_coul = 198.91080558758634
Extra cycle  E= -507.639452147437  delta_E= 2.27e-13  |g|= 6.5e-09  |ddm|= 1.66e-08
    CPU time for scf_cycle      0.10 sec, wall time      0.10 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 45.764924237687694
E1 = -706.5502577350233  E_coul = 198.91080558758634
init E= -507.639452147437
    CPU time for initialize scf      0.08 sec, wall time      0.08 sec
  HOMO = -0.236478153806594  LUMO = 85.9802065265762
  mo_energy =
[-1.20271538e+02 -1.22544033e+01 -6.65512632e+00 -6.65512632e+00
 -6.65512632e+00 -1.16356847e+00 -2.36478154e-01 -2.36478154e-01
 -2.36478154e-01  8.59802065e+01  6.75511470e+02  3.92895871e+03
  2.96688150e+04  1.56372162e+05  7.03814118e+05]
E1 = -706.5502577355907  E_coul = 198.91080558815378
cycle= 1 E= -507.639452147437  delta_E= 5.68e-14  |g|= 1.29e-10  |ddm|= 2.57e-10
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -706.5502577355907  E_coul = 198.91080558815378
  HOMO = -0.236478153803864  LUMO = 85.9802065266347
  mo_energy =
[-1.20271538e+02 -1.22544033e+01 -6.65512632e+00 -6.65512632e+00
 -6.65512632e+00 -1.16356847e+00 -2.36478154e-01 -2.36478154e-01
 -2.36478154e-01  8.59802065e+01  6.75511470e+02  3.92895871e+03
  2.96688150e+04  1.56372162e+05  7.03814118e+05]
E1 = -706.5502577356003  E_coul = 198.91080558816367
Extra cycle  E= -507.639452147437  delta_E= 2.27e-13  |g|= 1.03e-11  |ddm|= 4.62e-12
    CPU time for scf_cycle      0.14 sec, wall time      0.15 sec
exp = [2.93679452e+05 7.34198630e+04 1.83543962e+04 2.23376979e+03
 4.55193291e+02 1.21243118e+02 3.74960307e+01 4.74096628e+00
 3.91196899e-01 8.59834235e+00 4.90842959e-01]
grad_E = [ 9.35099749e-09 -3.26189222e-08  6.35756656e-06 -5.36284176e-06
 -1.84599610e-05 -1.90559648e-05 -1.52519164e-05 -6.55017514e-06
  4.91941015e-06 -2.50982960e-04 -1.03479833e-05]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((11, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([7.3419862888950534e+04,1.8354415279684519e+04,2.2337565691104060e+03,4.5509411588185179e+02,1.2132000689951782e+02,3.7517668969809321e+01,4.7408530341284303e+00,3.9118871783972831e-01,8.5986666061044215e+00,4.9085282207620301e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "9s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:03:53 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  293679.451525        1
[INPUT] 0    0    [1    /1   ]  73419.8629982        1
[INPUT] 0    0    [1    /1   ]  18354.3940534        1
[INPUT] 0    0    [1    /1   ]  2233.77151973        1
[INPUT] 0    0    [1    /1   ]  455.20077474         1
[INPUT] 0    0    [1    /1   ]  121.246455988        1
[INPUT] 0    0    [1    /1   ]  37.4962687006        1
[INPUT] 0    0    [1    /1   ]  4.74098553266        1
[INPUT] 0    0    [1    /1   ]  0.391199889952       1
[INPUT] 1    0    [1    /1   ]  8.59807198475        1
[INPUT] 1    0    [1    /1   ]  0.490835393853       1

nuclear repulsion = 0
number of shells = 11
number of NR pGTOs = 15
number of NR cGTOs = 15
basis = {'Ar': [[0, [293679.4515245862, 1.0]], [0, [73419.86299817041, 1.0]], [0, [18354.39405335466, 1.0]], [0, [2233.7715197282387, 1.0]], [0, [455.20077473959554, 1.0]], [0, [121.24645598795166, 1.0]], [0, [37.496268700596204, 1.0]], [0, [4.740985532661574, 1.0]], [0, [0.39119988995208643, 1.0]], [1, [8.598071984746035, 1.0]], [1, [0.4908353938530327, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [293679.45152459]
bas 1, expnt(s) = [73419.86299817]
bas 2, expnt(s) = [18354.39405335]
bas 3, expnt(s) = [2233.77151973]
bas 4, expnt(s) = [455.20077474]
bas 5, expnt(s) = [121.24645599]
bas 6, expnt(s) = [37.4962687]
bas 7, expnt(s) = [4.74098553]
bas 8, expnt(s) = [0.39119989]
bas 9, expnt(s) = [8.59807198]
bas 10, expnt(s) = [0.49083539]
CPU time:        63.84
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]
 [ 0  1  1  1  0 44 45  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 2.93679452e+05 3.18727983e+04 7.34198630e+04 1.12687359e+04
 1.83543941e+04 3.98400672e+03 2.23377152e+03 8.20907241e+02
 4.55200775e+02 2.48981609e+02 1.21246456e+02 9.23138394e+01
 3.74962687e+01 3.82830088e+01 4.74098553e+00 8.11739158e+00
 3.91199890e-01 1.24972388e+00 8.59807198e+00 4.29522322e+01
 4.90835394e-01 1.19854469e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.32000530246396
cond(S) = 45.76477403095295
E1 = -688.8702928808451  E_coul = 184.91211968846477
init E= -503.95817319238
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.680905293576428  LUMO = 84.6530920199906
  mo_energy =
[-1.21651018e+02 -1.32813564e+01 -7.62184279e+00 -7.62184279e+00
 -7.62184279e+00 -1.65071196e+00 -6.80905294e-01 -6.80905294e-01
 -6.80905294e-01  8.46530920e+01  6.74167453e+02  3.92776054e+03
  2.96677845e+04  1.56371196e+05  7.03813179e+05]
E1 = -706.5806767756245  E_coul = 198.94165557758802
cycle= 1 E= -507.639021198037  delta_E= -3.68  |g|= 0.318  |ddm|= 0.301
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.41732
diis-c [-0.1741563  1.       ]
  HOMO = -0.236315057076256  LUMO = 85.9855532872926
  mo_energy =
[-1.20263037e+02 -1.22533142e+01 -6.65335958e+00 -6.65335958e+00
 -6.65335958e+00 -1.16352036e+00 -2.36315057e-01 -2.36315057e-01
 -2.36315057e-01  8.59855533e+01  6.75538055e+02  3.92901194e+03
  2.96688727e+04  1.56372213e+05  7.03814164e+05]
E1 = -706.5490305179984  E_coul = 198.90957835417208
cycle= 2 E= -507.639452163826  delta_E= -0.000431  |g|= 0.00476  |ddm|= 0.0144
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00505768
diis-c [-2.55366848e-05 -4.99817178e-04  1.00049982e+00]
  HOMO = -0.236491693962579  LUMO = 85.9820210929945
  mo_energy =
[-1.20271727e+02 -1.22545123e+01 -6.65521493e+00 -6.65521493e+00
 -6.65521493e+00 -1.16358565e+00 -2.36491694e-01 -2.36491694e-01
 -2.36491694e-01  8.59820211e+01  6.75527425e+02  3.92899598e+03
  2.96688533e+04  1.56372192e+05  7.03814144e+05]
E1 = -706.5485859856519  E_coul = 198.9091337104332
cycle= 3 E= -507.639452275219  delta_E= -1.11e-07  |g|= 9.54e-05  |ddm|= 0.000204
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00012751
diis-c [-3.98742189e-10  3.38404624e-05 -2.55313726e-02  1.02549753e+00]
  HOMO = -0.236493931108232  LUMO = 85.9819760504298
  mo_energy =
[-1.20271841e+02 -1.22545283e+01 -6.65524219e+00 -6.65524219e+00
 -6.65524219e+00 -1.16358632e+00 -2.36493931e-01 -2.36493931e-01
 -2.36493931e-01  8.59819761e+01  6.75527307e+02  3.92899583e+03
  2.96688532e+04  1.56372192e+05  7.03814144e+05]
E1 = -706.5485786520385  E_coul = 198.90912637677903
cycle= 4 E= -507.639452275259  delta_E= -4.08e-11  |g|= 3.76e-07  |ddm|= 3.49e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.5485786520385  E_coul = 198.90912637677903
  HOMO = -0.236493914630099  LUMO = 85.981976390127
  mo_energy =
[-1.20271841e+02 -1.22545281e+01 -6.65524203e+00 -6.65524203e+00
 -6.65524203e+00 -1.16358631e+00 -2.36493915e-01 -2.36493915e-01
 -2.36493915e-01  8.59819764e+01  6.75527308e+02  3.92899583e+03
  2.96688532e+04  1.56372192e+05  7.03814144e+05]
E1 = -706.5485786894433  E_coul = 198.90912641418376
Extra cycle  E= -507.639452275259  delta_E=    0  |g|= 6.49e-09  |ddm|= 1.66e-08
    CPU time for scf_cycle      0.10 sec, wall time      0.10 sec
exp = [2.93679452e+05 7.34198630e+04 1.83543941e+04 2.23377152e+03
 4.55200775e+02 1.21246456e+02 3.74962687e+01 4.74098553e+00
 3.91199890e-01 8.59807198e+00 4.90835394e-01]
E = -507.6394522752595
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((11, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([7.3419862888950534e+04,1.8354415279684519e+04,2.2337565691104060e+03,4.5509411588185179e+02,1.2132000689951782e+02,3.7517668969809321e+01,4.7408530341284303e+00,3.9118871783972831e-01,8.5986666061044215e+00,4.9085282207620301e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "9s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:03:53 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  293679.451525        1
[INPUT] 0    0    [1    /1   ]  73419.8629982        1
[INPUT] 0    0    [1    /1   ]  18354.3940534        1
[INPUT] 0    0    [1    /1   ]  2233.77151973        1
[INPUT] 0    0    [1    /1   ]  455.20077474         1
[INPUT] 0    0    [1    /1   ]  121.246455988        1
[INPUT] 0    0    [1    /1   ]  37.4962687006        1
[INPUT] 0    0    [1    /1   ]  4.74098553266        1
[INPUT] 0    0    [1    /1   ]  0.391199889952       1
[INPUT] 1    0    [1    /1   ]  8.59807198475        1
[INPUT] 1    0    [1    /1   ]  0.490835393853       1

nuclear repulsion = 0
number of shells = 11
number of NR pGTOs = 15
number of NR cGTOs = 15
basis = {'Ar': [[0, [293679.4515245862, 1.0]], [0, [73419.86299817041, 1.0]], [0, [18354.39405335466, 1.0]], [0, [2233.7715197282387, 1.0]], [0, [455.20077473959554, 1.0]], [0, [121.24645598795166, 1.0]], [0, [37.496268700596204, 1.0]], [0, [4.740985532661574, 1.0]], [0, [0.39119988995208643, 1.0]], [1, [8.598071984746035, 1.0]], [1, [0.4908353938530327, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [293679.45152459]
bas 1, expnt(s) = [73419.86299817]
bas 2, expnt(s) = [18354.39405335]
bas 3, expnt(s) = [2233.77151973]
bas 4, expnt(s) = [455.20077474]
bas 5, expnt(s) = [121.24645599]
bas 6, expnt(s) = [37.4962687]
bas 7, expnt(s) = [4.74098553]
bas 8, expnt(s) = [0.39119989]
bas 9, expnt(s) = [8.59807198]
bas 10, expnt(s) = [0.49083539]
CPU time:        64.25
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]
 [ 0  1  1  1  0 44 45  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 2.93679452e+05 3.18727983e+04 7.34198630e+04 1.12687359e+04
 1.83543941e+04 3.98400672e+03 2.23377152e+03 8.20907241e+02
 4.55200775e+02 2.48981609e+02 1.21246456e+02 9.23138394e+01
 3.74962687e+01 3.82830088e+01 4.74098553e+00 8.11739158e+00
 3.91199890e-01 1.24972388e+00 8.59807198e+00 4.29522322e+01
 4.90835394e-01 1.19854469e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.32000530246396
cond(S) = 45.76477403095295
E1 = -688.8702928808451  E_coul = 184.91211968846477
init E= -503.95817319238
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.680905293576428  LUMO = 84.6530920199906
  mo_energy =
[-1.21651018e+02 -1.32813564e+01 -7.62184279e+00 -7.62184279e+00
 -7.62184279e+00 -1.65071196e+00 -6.80905294e-01 -6.80905294e-01
 -6.80905294e-01  8.46530920e+01  6.74167453e+02  3.92776054e+03
  2.96677845e+04  1.56371196e+05  7.03813179e+05]
E1 = -706.5806767756245  E_coul = 198.94165557758802
cycle= 1 E= -507.639021198037  delta_E= -3.68  |g|= 0.318  |ddm|= 0.301
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.41732
diis-c [-0.1741563  1.       ]
  HOMO = -0.236315057076256  LUMO = 85.9855532872926
  mo_energy =
[-1.20263037e+02 -1.22533142e+01 -6.65335958e+00 -6.65335958e+00
 -6.65335958e+00 -1.16352036e+00 -2.36315057e-01 -2.36315057e-01
 -2.36315057e-01  8.59855533e+01  6.75538055e+02  3.92901194e+03
  2.96688727e+04  1.56372213e+05  7.03814164e+05]
E1 = -706.5490305179984  E_coul = 198.90957835417208
cycle= 2 E= -507.639452163826  delta_E= -0.000431  |g|= 0.00476  |ddm|= 0.0144
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00505768
diis-c [-2.55366848e-05 -4.99817178e-04  1.00049982e+00]
  HOMO = -0.236491693962579  LUMO = 85.9820210929945
  mo_energy =
[-1.20271727e+02 -1.22545123e+01 -6.65521493e+00 -6.65521493e+00
 -6.65521493e+00 -1.16358565e+00 -2.36491694e-01 -2.36491694e-01
 -2.36491694e-01  8.59820211e+01  6.75527425e+02  3.92899598e+03
  2.96688533e+04  1.56372192e+05  7.03814144e+05]
E1 = -706.5485859856519  E_coul = 198.9091337104332
cycle= 3 E= -507.639452275219  delta_E= -1.11e-07  |g|= 9.54e-05  |ddm|= 0.000204
    CPU time for cycle= 3      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.00012751
diis-c [-3.98742189e-10  3.38404624e-05 -2.55313726e-02  1.02549753e+00]
  HOMO = -0.236493931108232  LUMO = 85.9819760504298
  mo_energy =
[-1.20271841e+02 -1.22545283e+01 -6.65524219e+00 -6.65524219e+00
 -6.65524219e+00 -1.16358632e+00 -2.36493931e-01 -2.36493931e-01
 -2.36493931e-01  8.59819761e+01  6.75527307e+02  3.92899583e+03
  2.96688532e+04  1.56372192e+05  7.03814144e+05]
E1 = -706.5485786520385  E_coul = 198.90912637677903
cycle= 4 E= -507.639452275259  delta_E= -4.08e-11  |g|= 3.76e-07  |ddm|= 3.49e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.5485786520385  E_coul = 198.90912637677903
  HOMO = -0.236493914630099  LUMO = 85.981976390127
  mo_energy =
[-1.20271841e+02 -1.22545281e+01 -6.65524203e+00 -6.65524203e+00
 -6.65524203e+00 -1.16358631e+00 -2.36493915e-01 -2.36493915e-01
 -2.36493915e-01  8.59819764e+01  6.75527308e+02  3.92899583e+03
  2.96688532e+04  1.56372192e+05  7.03814144e+05]
E1 = -706.5485786894433  E_coul = 198.90912641418376
Extra cycle  E= -507.639452275259  delta_E=    0  |g|= 6.49e-09  |ddm|= 1.66e-08
    CPU time for scf_cycle      0.10 sec, wall time      0.10 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 45.76477403095295
E1 = -706.5485786894433  E_coul = 198.90912641418376
init E= -507.639452275259
    CPU time for initialize scf      0.08 sec, wall time      0.08 sec
  HOMO = -0.23649391443694  LUMO = 85.9819763942898
  mo_energy =
[-1.20271841e+02 -1.22545281e+01 -6.65524202e+00 -6.65524202e+00
 -6.65524202e+00 -1.16358631e+00 -2.36493914e-01 -2.36493914e-01
 -2.36493914e-01  8.59819764e+01  6.75527308e+02  3.92899583e+03
  2.96688532e+04  1.56372192e+05  7.03814144e+05]
E1 = -706.5485786900102  E_coul = 198.9091264147512
cycle= 1 E= -507.639452275259  delta_E= 4.55e-13  |g|= 1.3e-10  |ddm|= 2.57e-10
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -706.5485786900102  E_coul = 198.9091264147512
  HOMO = -0.236493914434214  LUMO = 85.9819763943493
  mo_energy =
[-1.20271841e+02 -1.22545281e+01 -6.65524202e+00 -6.65524202e+00
 -6.65524202e+00 -1.16358631e+00 -2.36493914e-01 -2.36493914e-01
 -2.36493914e-01  8.59819764e+01  6.75527308e+02  3.92899583e+03
  2.96688532e+04  1.56372192e+05  7.03814144e+05]
E1 = -706.5485786900202  E_coul = 198.90912641476098
Extra cycle  E= -507.639452275259  delta_E= -2.27e-13  |g|= 1.22e-11  |ddm|= 4.59e-12
    CPU time for scf_cycle      0.15 sec, wall time      0.15 sec
exp = [2.93679452e+05 7.34198630e+04 1.83543941e+04 2.23377152e+03
 4.55200775e+02 1.21246456e+02 3.74962687e+01 4.74098553e+00
 3.91199890e-01 8.59807198e+00 4.90835394e-01]
grad_E = [ 9.35104381e-09 -3.26188039e-08  6.35759711e-06 -5.36228921e-06
 -1.87678559e-05 -1.60782055e-05 -2.25651628e-05 -1.22918075e-05
  9.22490862e-06 -4.71248304e-04 -1.94306865e-05]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((11, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([7.3419862888950534e+04,1.8354415279684519e+04,2.2337565691104060e+03,4.5509411588185179e+02,1.2132000689951782e+02,3.7517668969809321e+01,4.7408530341284303e+00,3.9118871783972831e-01,8.5986666061044215e+00,4.9085282207620301e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "9s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:03:56 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  293679.451517        1
[INPUT] 0    0    [1    /1   ]  73419.863026         1
[INPUT] 0    0    [1    /1   ]  18354.3886246        1
[INPUT] 0    0    [1    /1   ]  2233.77586474        1
[INPUT] 0    0    [1    /1   ]  455.219976744        1
[INPUT] 0    0    [1    /1   ]  121.253705271        1
[INPUT] 0    0    [1    /1   ]  37.4970962062        1
[INPUT] 0    0    [1    /1   ]  4.74101482277        1
[INPUT] 0    0    [1    /1   ]  0.39120423587        1
[INPUT] 1    0    [1    /1   ]  8.59768364045        1
[INPUT] 1    0    [1    /1   ]  0.490824515345       1

nuclear repulsion = 0
number of shells = 11
number of NR pGTOs = 15
number of NR cGTOs = 15
basis = {'Ar': [[0, [293679.45151660166, 1.0]], [0, [73419.86302604893, 1.0]], [0, [18354.388624588973, 1.0]], [0, [2233.775864735795, 1.0]], [0, [455.21997674372943, 1.0]], [0, [121.25370527085173, 1.0]], [0, [37.4970962062005, 1.0]], [0, [4.741014822766029, 1.0]], [0, [0.3912042358698507, 1.0]], [1, [8.597683640446489, 1.0]], [1, [0.49082451534465266, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [293679.4515166]
bas 1, expnt(s) = [73419.86302605]
bas 2, expnt(s) = [18354.38862459]
bas 3, expnt(s) = [2233.77586474]
bas 4, expnt(s) = [455.21997674]
bas 5, expnt(s) = [121.25370527]
bas 6, expnt(s) = [37.49709621]
bas 7, expnt(s) = [4.74101482]
bas 8, expnt(s) = [0.39120424]
bas 9, expnt(s) = [8.59768364]
bas 10, expnt(s) = [0.49082452]
CPU time:        67.26
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]
 [ 0  1  1  1  0 44 45  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 2.93679452e+05 3.18727983e+04 7.34198630e+04 1.12687359e+04
 1.83543886e+04 3.98400584e+03 2.23377586e+03 8.20908438e+02
 4.55219977e+02 2.48989486e+02 1.21253705e+02 9.23179790e+01
 3.74970962e+01 3.82836425e+01 4.74101482e+00 8.11742919e+00
 3.91204236e-01 1.24973429e+00 8.59768364e+00 4.29498072e+01
 4.90824515e-01 1.19851149e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.320019544836825
cond(S) = 45.76458916308578
E1 = -688.8683008606761  E_coul = 184.91012961153478
init E= -503.958171249141
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.680911752212213  LUMO = 84.6577245586344
  mo_energy =
[-1.21651409e+02 -1.32815099e+01 -7.62197884e+00 -7.62197884e+00
 -7.62197884e+00 -1.65072895e+00 -6.80911752e-01 -6.80911752e-01
 -6.80911752e-01  8.46577246e+01  6.74205649e+02  3.92785207e+03
  2.96678791e+04  1.56371271e+05  7.03813241e+05]
E1 = -706.5782642985273  E_coul = 198.93924271881414
cycle= 1 E= -507.639021579713  delta_E= -3.68  |g|= 0.318  |ddm|= 0.301
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.417314
diis-c [-0.174151  1.      ]
  HOMO = -0.236337696597522  LUMO = 85.9901498277345
  mo_energy =
[-1.20263472e+02 -1.22534936e+01 -6.65352573e+00 -6.65352573e+00
 -6.65352573e+00 -1.16354599e+00 -2.36337697e-01 -2.36337697e-01
 -2.36337697e-01  8.59901498e+01  6.75576205e+02  3.92910344e+03
  2.96689672e+04  1.56372288e+05  7.03814227e+05]
E1 = -706.5466224239601  E_coul = 198.9071699593087
cycle= 2 E= -507.639452464651  delta_E= -0.000431  |g|= 0.00476  |ddm|= 0.0144
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00505723
diis-c [-2.55320893e-05 -4.99820300e-04  1.00049982e+00]
  HOMO = -0.236514293220588  LUMO = 85.9866179515867
  mo_energy =
[-1.20272161e+02 -1.22546915e+01 -6.65538078e+00 -6.65538078e+00
 -6.65538078e+00 -1.16361128e+00 -2.36514293e-01 -2.36514293e-01
 -2.36514293e-01  8.59866180e+01  6.75565575e+02  3.92908747e+03
  2.96689479e+04  1.56372268e+05  7.03814207e+05]
E1 = -706.546177972235  E_coul = 198.90672539622017
cycle= 3 E= -507.639452576015  delta_E= -1.11e-07  |g|= 9.54e-05  |ddm|= 0.000203
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.000127495
diis-c [-3.98644157e-10  3.38389601e-05 -2.55306552e-02  1.02549682e+00]
  HOMO = -0.236516529744522  LUMO = 85.9865729156533
  mo_energy =
[-1.20272276e+02 -1.22547074e+01 -6.65540803e+00 -6.65540803e+00
 -6.65540803e+00 -1.16361195e+00 -2.36516530e-01 -2.36516530e-01
 -2.36516530e-01  8.59865729e+01  6.75565457e+02  3.92908733e+03
  2.96689477e+04  1.56372268e+05  7.03814206e+05]
E1 = -706.5461706402383  E_coul = 198.9067180641832
cycle= 4 E= -507.639452576055  delta_E= -4.02e-11  |g|= 3.76e-07  |ddm|= 3.49e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.5461706402383  E_coul = 198.9067180641832
  HOMO = -0.236516513271127  LUMO = 85.9865732553031
  mo_energy =
[-1.20272275e+02 -1.22547073e+01 -6.65540787e+00 -6.65540787e+00
 -6.65540787e+00 -1.16361194e+00 -2.36516513e-01 -2.36516513e-01
 -2.36516513e-01  8.59865733e+01  6.75565458e+02  3.92908733e+03
  2.96689477e+04  1.56372268e+05  7.03814206e+05]
E1 = -706.5461706776344  E_coul = 198.90671810157932
Extra cycle  E= -507.639452576055  delta_E= -5.68e-14  |g|= 6.5e-09  |ddm|= 1.66e-08
    CPU time for scf_cycle      0.10 sec, wall time      0.10 sec
exp = [2.93679452e+05 7.34198630e+04 1.83543886e+04 2.23377586e+03
 4.55219977e+02 1.21253705e+02 3.74970962e+01 4.74101482e+00
 3.91204236e-01 8.59768364e+00 4.90824515e-01]
E = -507.63945257605513
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((11, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([7.3419862888950534e+04,1.8354415279684519e+04,2.2337565691104060e+03,4.5509411588185179e+02,1.2132000689951782e+02,3.7517668969809321e+01,4.7408530341284303e+00,3.9118871783972831e-01,8.5986666061044215e+00,4.9085282207620301e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "9s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:03:57 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  293679.451517        1
[INPUT] 0    0    [1    /1   ]  73419.863026         1
[INPUT] 0    0    [1    /1   ]  18354.3886246        1
[INPUT] 0    0    [1    /1   ]  2233.77586474        1
[INPUT] 0    0    [1    /1   ]  455.219976744        1
[INPUT] 0    0    [1    /1   ]  121.253705271        1
[INPUT] 0    0    [1    /1   ]  37.4970962062        1
[INPUT] 0    0    [1    /1   ]  4.74101482277        1
[INPUT] 0    0    [1    /1   ]  0.39120423587        1
[INPUT] 1    0    [1    /1   ]  8.59768364045        1
[INPUT] 1    0    [1    /1   ]  0.490824515345       1

nuclear repulsion = 0
number of shells = 11
number of NR pGTOs = 15
number of NR cGTOs = 15
basis = {'Ar': [[0, [293679.45151660166, 1.0]], [0, [73419.86302604893, 1.0]], [0, [18354.388624588973, 1.0]], [0, [2233.775864735795, 1.0]], [0, [455.21997674372943, 1.0]], [0, [121.25370527085173, 1.0]], [0, [37.4970962062005, 1.0]], [0, [4.741014822766029, 1.0]], [0, [0.3912042358698507, 1.0]], [1, [8.597683640446489, 1.0]], [1, [0.49082451534465266, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [293679.4515166]
bas 1, expnt(s) = [73419.86302605]
bas 2, expnt(s) = [18354.38862459]
bas 3, expnt(s) = [2233.77586474]
bas 4, expnt(s) = [455.21997674]
bas 5, expnt(s) = [121.25370527]
bas 6, expnt(s) = [37.49709621]
bas 7, expnt(s) = [4.74101482]
bas 8, expnt(s) = [0.39120424]
bas 9, expnt(s) = [8.59768364]
bas 10, expnt(s) = [0.49082452]
CPU time:        67.70
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]
 [ 0  1  1  1  0 44 45  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 2.93679452e+05 3.18727983e+04 7.34198630e+04 1.12687359e+04
 1.83543886e+04 3.98400584e+03 2.23377586e+03 8.20908438e+02
 4.55219977e+02 2.48989486e+02 1.21253705e+02 9.23179790e+01
 3.74970962e+01 3.82836425e+01 4.74101482e+00 8.11742919e+00
 3.91204236e-01 1.24973429e+00 8.59768364e+00 4.29498072e+01
 4.90824515e-01 1.19851149e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.320019544836825
cond(S) = 45.76458916308578
E1 = -688.8683008606761  E_coul = 184.91012961153478
init E= -503.958171249141
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.680911752212213  LUMO = 84.6577245586344
  mo_energy =
[-1.21651409e+02 -1.32815099e+01 -7.62197884e+00 -7.62197884e+00
 -7.62197884e+00 -1.65072895e+00 -6.80911752e-01 -6.80911752e-01
 -6.80911752e-01  8.46577246e+01  6.74205649e+02  3.92785207e+03
  2.96678791e+04  1.56371271e+05  7.03813241e+05]
E1 = -706.5782642985273  E_coul = 198.93924271881414
cycle= 1 E= -507.639021579713  delta_E= -3.68  |g|= 0.318  |ddm|= 0.301
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.417314
diis-c [-0.174151  1.      ]
  HOMO = -0.236337696597522  LUMO = 85.9901498277345
  mo_energy =
[-1.20263472e+02 -1.22534936e+01 -6.65352573e+00 -6.65352573e+00
 -6.65352573e+00 -1.16354599e+00 -2.36337697e-01 -2.36337697e-01
 -2.36337697e-01  8.59901498e+01  6.75576205e+02  3.92910344e+03
  2.96689672e+04  1.56372288e+05  7.03814227e+05]
E1 = -706.5466224239601  E_coul = 198.9071699593087
cycle= 2 E= -507.639452464651  delta_E= -0.000431  |g|= 0.00476  |ddm|= 0.0144
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00505723
diis-c [-2.55320893e-05 -4.99820300e-04  1.00049982e+00]
  HOMO = -0.236514293220588  LUMO = 85.9866179515867
  mo_energy =
[-1.20272161e+02 -1.22546915e+01 -6.65538078e+00 -6.65538078e+00
 -6.65538078e+00 -1.16361128e+00 -2.36514293e-01 -2.36514293e-01
 -2.36514293e-01  8.59866180e+01  6.75565575e+02  3.92908747e+03
  2.96689479e+04  1.56372268e+05  7.03814207e+05]
E1 = -706.546177972235  E_coul = 198.90672539622017
cycle= 3 E= -507.639452576015  delta_E= -1.11e-07  |g|= 9.54e-05  |ddm|= 0.000203
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.000127495
diis-c [-3.98644157e-10  3.38389601e-05 -2.55306552e-02  1.02549682e+00]
  HOMO = -0.236516529744522  LUMO = 85.9865729156533
  mo_energy =
[-1.20272276e+02 -1.22547074e+01 -6.65540803e+00 -6.65540803e+00
 -6.65540803e+00 -1.16361195e+00 -2.36516530e-01 -2.36516530e-01
 -2.36516530e-01  8.59865729e+01  6.75565457e+02  3.92908733e+03
  2.96689477e+04  1.56372268e+05  7.03814206e+05]
E1 = -706.5461706402383  E_coul = 198.9067180641832
cycle= 4 E= -507.639452576055  delta_E= -4.02e-11  |g|= 3.76e-07  |ddm|= 3.49e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.5461706402383  E_coul = 198.9067180641832
  HOMO = -0.236516513271127  LUMO = 85.9865732553031
  mo_energy =
[-1.20272275e+02 -1.22547073e+01 -6.65540787e+00 -6.65540787e+00
 -6.65540787e+00 -1.16361194e+00 -2.36516513e-01 -2.36516513e-01
 -2.36516513e-01  8.59865733e+01  6.75565458e+02  3.92908733e+03
  2.96689477e+04  1.56372268e+05  7.03814206e+05]
E1 = -706.5461706776344  E_coul = 198.90671810157932
Extra cycle  E= -507.639452576055  delta_E= -5.68e-14  |g|= 6.5e-09  |ddm|= 1.66e-08
    CPU time for scf_cycle      0.10 sec, wall time      0.10 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 45.76458916308578
E1 = -706.5461706776344  E_coul = 198.90671810157932
init E= -507.639452576055
    CPU time for initialize scf      0.08 sec, wall time      0.08 sec
  HOMO = -0.236516513078035  LUMO = 85.9865732594668
  mo_energy =
[-1.20272275e+02 -1.22547073e+01 -6.65540787e+00 -6.65540787e+00
 -6.65540787e+00 -1.16361194e+00 -2.36516513e-01 -2.36516513e-01
 -2.36516513e-01  8.59865733e+01  6.75565458e+02  3.92908733e+03
  2.96689477e+04  1.56372268e+05  7.03814206e+05]
E1 = -706.5461706782014  E_coul = 198.9067181021461
cycle= 1 E= -507.639452576055  delta_E= -1.71e-13  |g|= 1.29e-10  |ddm|= 2.57e-10
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -706.5461706782014  E_coul = 198.9067181021461
  HOMO = -0.236516513075308  LUMO = 85.9865732595257
  mo_energy =
[-1.20272275e+02 -1.22547073e+01 -6.65540787e+00 -6.65540787e+00
 -6.65540787e+00 -1.16361194e+00 -2.36516513e-01 -2.36516513e-01
 -2.36516513e-01  8.59865733e+01  6.75565458e+02  3.92908733e+03
  2.96689477e+04  1.56372268e+05  7.03814206e+05]
E1 = -706.5461706782114  E_coul = 198.906718102156
Extra cycle  E= -507.639452576055  delta_E= -1.14e-13  |g|= 3.15e-11  |ddm|= 4.61e-12
    CPU time for scf_cycle      0.15 sec, wall time      0.15 sec
exp = [2.93679452e+05 7.34198630e+04 1.83543886e+04 2.23377586e+03
 4.55219977e+02 1.21253705e+02 3.74970962e+01 4.74101482e+00
 3.91204236e-01 8.59768364e+00 4.90824515e-01]
grad_E = [ 9.35149004e-09 -3.26174082e-08  6.35787641e-06 -5.38249296e-06
 -1.91013578e-05 -1.16837748e-05 -3.30301035e-05 -2.05353831e-05
  1.54071268e-05 -7.87534013e-04 -3.24730061e-05]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((11, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([7.3419862888950534e+04,1.8354415279684519e+04,2.2337565691104060e+03,4.5509411588185179e+02,1.2132000689951782e+02,3.7517668969809321e+01,4.7408530341284303e+00,3.9118871783972831e-01,8.5986666061044215e+00,4.9085282207620301e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "9s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:04:00 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  293679.451495        1
[INPUT] 0    0    [1    /1   ]  73419.8631028        1
[INPUT] 0    0    [1    /1   ]  18354.3736734        1
[INPUT] 0    0    [1    /1   ]  2233.78779922        1
[INPUT] 0    0    [1    /1   ]  455.273364722        1
[INPUT] 0    0    [1    /1   ]  121.271892815        1
[INPUT] 0    0    [1    /1   ]  37.4997218562        1
[INPUT] 0    0    [1    /1   ]  4.74106615202        1
[INPUT] 0    0    [1    /1   ]  0.391211331707       1
[INPUT] 1    0    [1    /1   ]  8.59706135056        1
[INPUT] 1    0    [1    /1   ]  0.490807051942       1

nuclear repulsion = 0
number of shells = 11
number of NR pGTOs = 15
number of NR cGTOs = 15
basis = {'Ar': [[0, [293679.4514946119, 1.0]], [0, [73419.86310283143, 1.0]], [0, [18354.373673438742, 1.0]], [0, [2233.7877992245194, 1.0]], [0, [455.27336472215245, 1.0]], [0, [121.27189281507108, 1.0]], [0, [37.49972185615057, 1.0]], [0, [4.741066152017648, 1.0]], [0, [0.3912113317067151, 1.0]], [1, [8.597061350555471, 1.0]], [1, [0.4908070519422942, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [293679.45149461]
bas 1, expnt(s) = [73419.86310283]
bas 2, expnt(s) = [18354.37367344]
bas 3, expnt(s) = [2233.78779922]
bas 4, expnt(s) = [455.27336472]
bas 5, expnt(s) = [121.27189282]
bas 6, expnt(s) = [37.49972186]
bas 7, expnt(s) = [4.74106615]
bas 8, expnt(s) = [0.39121133]
bas 9, expnt(s) = [8.59706135]
bas 10, expnt(s) = [0.49080705]
CPU time:        70.84
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]
 [ 0  1  1  1  0 44 45  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 2.93679451e+05 3.18727983e+04 7.34198631e+04 1.12687359e+04
 1.83543737e+04 3.98400341e+03 2.23378780e+03 8.20911728e+02
 4.55273365e+02 2.49011387e+02 1.21271893e+02 9.23283642e+01
 3.74997219e+01 3.82856530e+01 4.74106615e+00 8.11749511e+00
 3.91211332e-01 1.24975129e+00 8.59706135e+00 4.29459214e+01
 4.90807052e-01 1.19845818e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.32004222053199
cond(S) = 45.76437679206579
E1 = -688.8650694996763  E_coul = 184.90694527483177
init E= -503.958124224845
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.680922136072451  LUMO = 84.6706402034061
  mo_energy =
[-1.21652035e+02 -1.32817558e+01 -7.62219626e+00 -7.62219626e+00
 -7.62219626e+00 -1.65075644e+00 -6.80922136e-01 -6.80922136e-01
 -6.80922136e-01  8.46706402e+01  6.74308073e+02  3.92810089e+03
  2.96681372e+04  1.56371477e+05  7.03813413e+05]
E1 = -706.5744053847865  E_coul = 198.93538283993288
cycle= 1 E= -507.639022544854  delta_E= -3.68  |g|= 0.318  |ddm|= 0.301
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.417302
diis-c [-0.17414123  1.        ]
  HOMO = -0.236373890527982  LUMO = 86.0030146595179
  mo_energy =
[-1.20264169e+02 -1.22537807e+01 -6.65379126e+00 -6.65379126e+00
 -6.65379126e+00 -1.16358708e+00 -2.36373891e-01 -2.36373891e-01
 -2.36373891e-01  8.60030147e+01  6.75678555e+02  3.92935219e+03
  2.96692253e+04  1.56372493e+05  7.03814398e+05]
E1 = -706.542773475205  E_coul = 198.90332021734807
cycle= 2 E= -507.639453257857  delta_E= -0.000431  |g|= 0.00476  |ddm|= 0.0144
    CPU time for cycle= 2      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.00505628
diis-c [-2.55224396e-05 -5.00065868e-04  1.00050007e+00]
  HOMO = -0.236550402794738  LUMO = 85.9994834848255
  mo_energy =
[-1.20272856e+02 -1.22549782e+01 -6.65564562e+00 -6.65564562e+00
 -6.65564562e+00 -1.16365235e+00 -2.36550403e-01 -2.36550403e-01
 -2.36550403e-01  8.59994835e+01  6.75667928e+02  3.92933623e+03
  2.96692060e+04  1.56372473e+05  7.03814378e+05]
E1 = -706.5423292119958  E_coul = 198.90287584283897
cycle= 3 E= -507.639453369157  delta_E= -1.11e-07  |g|= 9.53e-05  |ddm|= 0.000203
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00012746
diis-c [-3.98419039e-10  3.38364537e-05 -2.55284576e-02  1.02549462e+00]
  HOMO = -0.236552637943887  LUMO = 85.9994384653456
  mo_energy =
[-1.20272970e+02 -1.22549941e+01 -6.65567286e+00 -6.65567286e+00
 -6.65567286e+00 -1.16365301e+00 -2.36552638e-01 -2.36552638e-01
 -2.36552638e-01  8.59994385e+01  6.75667810e+02  3.92933609e+03
  2.96692058e+04  1.56372473e+05  7.03814378e+05]
E1 = -706.5423218839713  E_coul = 198.90286851477447
cycle= 4 E= -507.639453369197  delta_E= -4e-11  |g|= 3.76e-07  |ddm|= 3.49e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.5423218839713  E_coul = 198.90286851477447
  HOMO = -0.236552621481442  LUMO = 85.999438804879
  mo_energy =
[-1.20272969e+02 -1.22549940e+01 -6.65567269e+00 -6.65567269e+00
 -6.65567269e+00 -1.16365301e+00 -2.36552621e-01 -2.36552621e-01
 -2.36552621e-01  8.59994388e+01  6.75667811e+02  3.92933609e+03
  2.96692058e+04  1.56372473e+05  7.03814378e+05]
E1 = -706.5423219213459  E_coul = 198.90286855214882
Extra cycle  E= -507.639453369197  delta_E= -2.27e-13  |g|= 6.49e-09  |ddm|= 1.66e-08
    CPU time for scf_cycle      0.10 sec, wall time      0.10 sec
exp = [2.93679451e+05 7.34198631e+04 1.83543737e+04 2.23378780e+03
 4.55273365e+02 1.21271893e+02 3.74997219e+01 4.74106615e+00
 3.91211332e-01 8.59706135e+00 4.90807052e-01]
E = -507.6394533691971
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((11, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([7.3419862888950534e+04,1.8354415279684519e+04,2.2337565691104060e+03,4.5509411588185179e+02,1.2132000689951782e+02,3.7517668969809321e+01,4.7408530341284303e+00,3.9118871783972831e-01,8.5986666061044215e+00,4.9085282207620301e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "9s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:04:00 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  293679.451495        1
[INPUT] 0    0    [1    /1   ]  73419.8631028        1
[INPUT] 0    0    [1    /1   ]  18354.3736734        1
[INPUT] 0    0    [1    /1   ]  2233.78779922        1
[INPUT] 0    0    [1    /1   ]  455.273364722        1
[INPUT] 0    0    [1    /1   ]  121.271892815        1
[INPUT] 0    0    [1    /1   ]  37.4997218562        1
[INPUT] 0    0    [1    /1   ]  4.74106615202        1
[INPUT] 0    0    [1    /1   ]  0.391211331707       1
[INPUT] 1    0    [1    /1   ]  8.59706135056        1
[INPUT] 1    0    [1    /1   ]  0.490807051942       1

nuclear repulsion = 0
number of shells = 11
number of NR pGTOs = 15
number of NR cGTOs = 15
basis = {'Ar': [[0, [293679.4514946119, 1.0]], [0, [73419.86310283143, 1.0]], [0, [18354.373673438742, 1.0]], [0, [2233.7877992245194, 1.0]], [0, [455.27336472215245, 1.0]], [0, [121.27189281507108, 1.0]], [0, [37.49972185615057, 1.0]], [0, [4.741066152017648, 1.0]], [0, [0.3912113317067151, 1.0]], [1, [8.597061350555471, 1.0]], [1, [0.4908070519422942, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [293679.45149461]
bas 1, expnt(s) = [73419.86310283]
bas 2, expnt(s) = [18354.37367344]
bas 3, expnt(s) = [2233.78779922]
bas 4, expnt(s) = [455.27336472]
bas 5, expnt(s) = [121.27189282]
bas 6, expnt(s) = [37.49972186]
bas 7, expnt(s) = [4.74106615]
bas 8, expnt(s) = [0.39121133]
bas 9, expnt(s) = [8.59706135]
bas 10, expnt(s) = [0.49080705]
CPU time:        71.29
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]
 [ 0  1  1  1  0 44 45  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 2.93679451e+05 3.18727983e+04 7.34198631e+04 1.12687359e+04
 1.83543737e+04 3.98400341e+03 2.23378780e+03 8.20911728e+02
 4.55273365e+02 2.49011387e+02 1.21271893e+02 9.23283642e+01
 3.74997219e+01 3.82856530e+01 4.74106615e+00 8.11749511e+00
 3.91211332e-01 1.24975129e+00 8.59706135e+00 4.29459214e+01
 4.90807052e-01 1.19845818e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.32004222053199
cond(S) = 45.76437679206579
E1 = -688.8650694996763  E_coul = 184.90694527483177
init E= -503.958124224845
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.680922136072451  LUMO = 84.6706402034061
  mo_energy =
[-1.21652035e+02 -1.32817558e+01 -7.62219626e+00 -7.62219626e+00
 -7.62219626e+00 -1.65075644e+00 -6.80922136e-01 -6.80922136e-01
 -6.80922136e-01  8.46706402e+01  6.74308073e+02  3.92810089e+03
  2.96681372e+04  1.56371477e+05  7.03813413e+05]
E1 = -706.5744053847865  E_coul = 198.93538283993288
cycle= 1 E= -507.639022544854  delta_E= -3.68  |g|= 0.318  |ddm|= 0.301
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.417302
diis-c [-0.17414123  1.        ]
  HOMO = -0.236373890527982  LUMO = 86.0030146595179
  mo_energy =
[-1.20264169e+02 -1.22537807e+01 -6.65379126e+00 -6.65379126e+00
 -6.65379126e+00 -1.16358708e+00 -2.36373891e-01 -2.36373891e-01
 -2.36373891e-01  8.60030147e+01  6.75678555e+02  3.92935219e+03
  2.96692253e+04  1.56372493e+05  7.03814398e+05]
E1 = -706.542773475205  E_coul = 198.90332021734807
cycle= 2 E= -507.639453257857  delta_E= -0.000431  |g|= 0.00476  |ddm|= 0.0144
    CPU time for cycle= 2      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.00505628
diis-c [-2.55224396e-05 -5.00065868e-04  1.00050007e+00]
  HOMO = -0.236550402794738  LUMO = 85.9994834848255
  mo_energy =
[-1.20272856e+02 -1.22549782e+01 -6.65564562e+00 -6.65564562e+00
 -6.65564562e+00 -1.16365235e+00 -2.36550403e-01 -2.36550403e-01
 -2.36550403e-01  8.59994835e+01  6.75667928e+02  3.92933623e+03
  2.96692060e+04  1.56372473e+05  7.03814378e+05]
E1 = -706.5423292119958  E_coul = 198.90287584283897
cycle= 3 E= -507.639453369157  delta_E= -1.11e-07  |g|= 9.53e-05  |ddm|= 0.000203
    CPU time for cycle= 3      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.00012746
diis-c [-3.98419039e-10  3.38364537e-05 -2.55284576e-02  1.02549462e+00]
  HOMO = -0.236552637943887  LUMO = 85.9994384653456
  mo_energy =
[-1.20272970e+02 -1.22549941e+01 -6.65567286e+00 -6.65567286e+00
 -6.65567286e+00 -1.16365301e+00 -2.36552638e-01 -2.36552638e-01
 -2.36552638e-01  8.59994385e+01  6.75667810e+02  3.92933609e+03
  2.96692058e+04  1.56372473e+05  7.03814378e+05]
E1 = -706.5423218839713  E_coul = 198.90286851477447
cycle= 4 E= -507.639453369197  delta_E= -4e-11  |g|= 3.76e-07  |ddm|= 3.49e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.5423218839713  E_coul = 198.90286851477447
  HOMO = -0.236552621481442  LUMO = 85.999438804879
  mo_energy =
[-1.20272969e+02 -1.22549940e+01 -6.65567269e+00 -6.65567269e+00
 -6.65567269e+00 -1.16365301e+00 -2.36552621e-01 -2.36552621e-01
 -2.36552621e-01  8.59994388e+01  6.75667811e+02  3.92933609e+03
  2.96692058e+04  1.56372473e+05  7.03814378e+05]
E1 = -706.5423219213459  E_coul = 198.90286855214882
Extra cycle  E= -507.639453369197  delta_E= -2.27e-13  |g|= 6.49e-09  |ddm|= 1.66e-08
    CPU time for scf_cycle      0.09 sec, wall time      0.10 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 45.76437679206579
E1 = -706.5423219213459  E_coul = 198.90286855214882
init E= -507.639453369197
    CPU time for initialize scf      0.08 sec, wall time      0.08 sec
  HOMO = -0.236552621288504  LUMO = 85.9994388090411
  mo_energy =
[-1.20272969e+02 -1.22549940e+01 -6.65567269e+00 -6.65567269e+00
 -6.65567269e+00 -1.16365301e+00 -2.36552621e-01 -2.36552621e-01
 -2.36552621e-01  8.59994388e+01  6.75667811e+02  3.92933609e+03
  2.96692058e+04  1.56372473e+05  7.03814378e+05]
E1 = -706.5423219219125  E_coul = 198.90286855271552
cycle= 1 E= -507.639453369197  delta_E= 1.14e-13  |g|= 1.32e-10  |ddm|= 2.57e-10
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -706.5423219219125  E_coul = 198.90286855271552
  HOMO = -0.236552621285779  LUMO = 85.9994388090995
  mo_energy =
[-1.20272969e+02 -1.22549940e+01 -6.65567269e+00 -6.65567269e+00
 -6.65567269e+00 -1.16365301e+00 -2.36552621e-01 -2.36552621e-01
 -2.36552621e-01  8.59994388e+01  6.75667811e+02  3.92933609e+03
  2.96692058e+04  1.56372473e+05  7.03814378e+05]
E1 = -706.5423219219226  E_coul = 198.90286855272547
Extra cycle  E= -507.639453369197  delta_E= -1.71e-13  |g|= 1.36e-11  |ddm|= 4.6e-12
    CPU time for scf_cycle      0.16 sec, wall time      0.17 sec
exp = [2.93679451e+05 7.34198631e+04 1.83543737e+04 2.23378780e+03
 4.55273365e+02 1.21271893e+02 3.74997219e+01 4.74106615e+00
 3.91211332e-01 8.59706135e+00 4.90807052e-01]
grad_E = [ 9.35322058e-09 -3.26118924e-08  6.35895361e-06 -5.47100954e-06
 -1.93450340e-05 -4.32870152e-06 -4.96927207e-05 -3.37312642e-05
  2.53073703e-05 -1.29410419e-03 -5.33628422e-05]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((11, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([7.3419862888950534e+04,1.8354415279684519e+04,2.2337565691104060e+03,4.5509411588185179e+02,1.2132000689951782e+02,3.7517668969809321e+01,4.7408530341284303e+00,3.9118871783972831e-01,8.5986666061044215e+00,4.9085282207620301e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "9s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:04:03 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  293679.45144         1
[INPUT] 0    0    [1    /1   ]  73419.8632926        1
[INPUT] 0    0    [1    /1   ]  18354.3367239        1
[INPUT] 0    0    [1    /1   ]  2233.81724575        1
[INPUT] 0    0    [1    /1   ]  455.406060859        1
[INPUT] 0    0    [1    /1   ]  121.314173884        1
[INPUT] 0    0    [1    /1   ]  37.5067312703        1
[INPUT] 0    0    [1    /1   ]  4.74114894523        1
[INPUT] 0    0    [1    /1   ]  0.391221552745       1
[INPUT] 1    0    [1    /1   ]  8.59619482477        1
[INPUT] 1    0    [1    /1   ]  0.490782653429       1

nuclear repulsion = 0
number of shells = 11
number of NR pGTOs = 15
number of NR cGTOs = 15
basis = {'Ar': [[0, [293679.4514402677, 1.0]], [0, [73419.8632925927, 1.0]], [0, [18354.33672394998, 1.0]], [0, [2233.8172457531655, 1.0]], [0, [455.4060608588648, 1.0]], [0, [121.314173883932, 1.0]], [0, [37.50673127033535, 1.0]], [0, [4.741148945227441, 1.0]], [0, [0.3912215527450383, 1.0]], [1, [8.596194824766823, 1.0]], [1, [0.4907826534287787, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [293679.45144027]
bas 1, expnt(s) = [73419.86329259]
bas 2, expnt(s) = [18354.33672395]
bas 3, expnt(s) = [2233.81724575]
bas 4, expnt(s) = [455.40606086]
bas 5, expnt(s) = [121.31417388]
bas 6, expnt(s) = [37.50673127]
bas 7, expnt(s) = [4.74114895]
bas 8, expnt(s) = [0.39122155]
bas 9, expnt(s) = [8.59619482]
bas 10, expnt(s) = [0.49078265]
CPU time:        74.36
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]
 [ 0  1  1  1  0 44 45  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 2.93679451e+05 3.18727983e+04 7.34198633e+04 1.12687360e+04
 1.83543367e+04 3.98399739e+03 2.23381725e+03 8.20919844e+02
 4.55406061e+02 2.49065818e+02 1.21314174e+02 9.23525057e+01
 3.75067313e+01 3.82910201e+01 4.74114895e+00 8.11760142e+00
 3.91221553e-01 1.24977578e+00 8.59619482e+00 4.29405107e+01
 4.90782653e-01 1.19838371e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.320073429294364
cond(S) = 45.764302900059775
E1 = -688.8604689679514  E_coul = 184.9025233900773
init E= -503.957945577874
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.680936678696766  LUMO = 84.7027990463949
  mo_energy =
[-1.21652905e+02 -1.32820983e+01 -7.62249755e+00 -7.62249755e+00
 -7.62249755e+00 -1.65079538e+00 -6.80936679e-01 -6.80936679e-01
 -6.80936679e-01  8.47027990e+01  6.74557051e+02  3.92871089e+03
  2.96687714e+04  1.56371981e+05  7.03813833e+05]
E1 = -706.5690498322074  E_coul = 198.93002504569057
cycle= 1 E= -507.639024786517  delta_E= -3.68  |g|= 0.318  |ddm|= 0.301
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.417282
diis-c [-0.17412434  1.        ]
  HOMO = -0.236424075802263  LUMO = 86.0351204402308
  mo_energy =
[-1.20265138e+02 -1.22541797e+01 -6.65415914e+00 -6.65415914e+00
 -6.65415914e+00 -1.16364431e+00 -2.36424076e-01 -2.36424076e-01
 -2.36424076e-01  8.60351204e+01  6.75927427e+02  3.92996212e+03
  2.96698594e+04  1.56372997e+05  7.03814819e+05]
E1 = -706.5374393815305  E_coul = 198.89798423065918
cycle= 2 E= -507.639455150871  delta_E= -0.00043  |g|= 0.00476  |ddm|= 0.0144
    CPU time for cycle= 2      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.00505438
diis-c [-2.55031069e-05 -5.01029091e-04  1.00050103e+00]
  HOMO = -0.236600419484545  LUMO = 86.0315907366426
  mo_energy =
[-1.20273820e+02 -1.22553764e+01 -6.65601202e+00 -6.65601202e+00
 -6.65601202e+00 -1.16370953e+00 -2.36600419e-01 -2.36600419e-01
 -2.36600419e-01  8.60315907e+01  6.75916804e+02  3.92994616e+03
  2.96698401e+04  1.56372977e+05  7.03814798e+05]
E1 = -706.5369955337028  E_coul = 198.89754027166776
cycle= 3 E= -507.639455262035  delta_E= -1.11e-07  |g|= 9.53e-05  |ddm|= 0.000203
    CPU time for cycle= 3      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.000127384
diis-c [-3.97930271e-10  3.38329562e-05 -2.55227075e-02  1.02548887e+00]
  HOMO = -0.236602651744195  LUMO = 86.0315457550857
  mo_energy =
[-1.20273934e+02 -1.22553923e+01 -6.65603923e+00 -6.65603923e+00
 -6.65603923e+00 -1.16371019e+00 -2.36602652e-01 -2.36602652e-01
 -2.36602652e-01  8.60315458e+01  6.75916686e+02  3.92994602e+03
  2.96698399e+04  1.56372977e+05  7.03814798e+05]
E1 = -706.5369882147717  E_coul = 198.89753295269628
cycle= 4 E= -507.639455262075  delta_E= -4.04e-11  |g|= 3.75e-07  |ddm|= 3.48e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.5369882147717  E_coul = 198.89753295269628
  HOMO = -0.236602635305599  LUMO = 86.0315460943542
  mo_energy =
[-1.20273934e+02 -1.22553922e+01 -6.65603906e+00 -6.65603906e+00
 -6.65603906e+00 -1.16371019e+00 -2.36602635e-01 -2.36602635e-01
 -2.36602635e-01  8.60315461e+01  6.75916687e+02  3.92994602e+03
  2.96698399e+04  1.56372977e+05  7.03814798e+05]
E1 = -706.5369882520959  E_coul = 198.89753299002015
Extra cycle  E= -507.639455262076  delta_E= -2.84e-13  |g|= 6.48e-09  |ddm|= 1.66e-08
    CPU time for scf_cycle      0.10 sec, wall time      0.10 sec
exp = [2.93679451e+05 7.34198633e+04 1.83543367e+04 2.23381725e+03
 4.55406061e+02 1.21314174e+02 3.75067313e+01 4.74114895e+00
 3.91221553e-01 8.59619482e+00 4.90782653e-01]
E = -507.63945526207567
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((11, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([7.3419862888950534e+04,1.8354415279684519e+04,2.2337565691104060e+03,4.5509411588185179e+02,1.2132000689951782e+02,3.7517668969809321e+01,4.7408530341284303e+00,3.9118871783972831e-01,8.5986666061044215e+00,4.9085282207620301e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "9s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:04:04 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  293679.45144         1
[INPUT] 0    0    [1    /1   ]  73419.8632926        1
[INPUT] 0    0    [1    /1   ]  18354.3367239        1
[INPUT] 0    0    [1    /1   ]  2233.81724575        1
[INPUT] 0    0    [1    /1   ]  455.406060859        1
[INPUT] 0    0    [1    /1   ]  121.314173884        1
[INPUT] 0    0    [1    /1   ]  37.5067312703        1
[INPUT] 0    0    [1    /1   ]  4.74114894523        1
[INPUT] 0    0    [1    /1   ]  0.391221552745       1
[INPUT] 1    0    [1    /1   ]  8.59619482477        1
[INPUT] 1    0    [1    /1   ]  0.490782653429       1

nuclear repulsion = 0
number of shells = 11
number of NR pGTOs = 15
number of NR cGTOs = 15
basis = {'Ar': [[0, [293679.4514402677, 1.0]], [0, [73419.8632925927, 1.0]], [0, [18354.33672394998, 1.0]], [0, [2233.8172457531655, 1.0]], [0, [455.4060608588648, 1.0]], [0, [121.314173883932, 1.0]], [0, [37.50673127033535, 1.0]], [0, [4.741148945227441, 1.0]], [0, [0.3912215527450383, 1.0]], [1, [8.596194824766823, 1.0]], [1, [0.4907826534287787, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [293679.45144027]
bas 1, expnt(s) = [73419.86329259]
bas 2, expnt(s) = [18354.33672395]
bas 3, expnt(s) = [2233.81724575]
bas 4, expnt(s) = [455.40606086]
bas 5, expnt(s) = [121.31417388]
bas 6, expnt(s) = [37.50673127]
bas 7, expnt(s) = [4.74114895]
bas 8, expnt(s) = [0.39122155]
bas 9, expnt(s) = [8.59619482]
bas 10, expnt(s) = [0.49078265]
CPU time:        74.80
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]
 [ 0  1  1  1  0 44 45  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 2.93679451e+05 3.18727983e+04 7.34198633e+04 1.12687360e+04
 1.83543367e+04 3.98399739e+03 2.23381725e+03 8.20919844e+02
 4.55406061e+02 2.49065818e+02 1.21314174e+02 9.23525057e+01
 3.75067313e+01 3.82910201e+01 4.74114895e+00 8.11760142e+00
 3.91221553e-01 1.24977578e+00 8.59619482e+00 4.29405107e+01
 4.90782653e-01 1.19838371e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.320073429294364
cond(S) = 45.764302900059775
E1 = -688.8604689679514  E_coul = 184.9025233900773
init E= -503.957945577874
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.680936678696766  LUMO = 84.7027990463949
  mo_energy =
[-1.21652905e+02 -1.32820983e+01 -7.62249755e+00 -7.62249755e+00
 -7.62249755e+00 -1.65079538e+00 -6.80936679e-01 -6.80936679e-01
 -6.80936679e-01  8.47027990e+01  6.74557051e+02  3.92871089e+03
  2.96687714e+04  1.56371981e+05  7.03813833e+05]
E1 = -706.5690498322074  E_coul = 198.93002504569057
cycle= 1 E= -507.639024786517  delta_E= -3.68  |g|= 0.318  |ddm|= 0.301
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.417282
diis-c [-0.17412434  1.        ]
  HOMO = -0.236424075802263  LUMO = 86.0351204402308
  mo_energy =
[-1.20265138e+02 -1.22541797e+01 -6.65415914e+00 -6.65415914e+00
 -6.65415914e+00 -1.16364431e+00 -2.36424076e-01 -2.36424076e-01
 -2.36424076e-01  8.60351204e+01  6.75927427e+02  3.92996212e+03
  2.96698594e+04  1.56372997e+05  7.03814819e+05]
E1 = -706.5374393815305  E_coul = 198.89798423065918
cycle= 2 E= -507.639455150871  delta_E= -0.00043  |g|= 0.00476  |ddm|= 0.0144
    CPU time for cycle= 2      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.00505438
diis-c [-2.55031069e-05 -5.01029091e-04  1.00050103e+00]
  HOMO = -0.236600419484545  LUMO = 86.0315907366426
  mo_energy =
[-1.20273820e+02 -1.22553764e+01 -6.65601202e+00 -6.65601202e+00
 -6.65601202e+00 -1.16370953e+00 -2.36600419e-01 -2.36600419e-01
 -2.36600419e-01  8.60315907e+01  6.75916804e+02  3.92994616e+03
  2.96698401e+04  1.56372977e+05  7.03814798e+05]
E1 = -706.5369955337028  E_coul = 198.89754027166776
cycle= 3 E= -507.639455262035  delta_E= -1.11e-07  |g|= 9.53e-05  |ddm|= 0.000203
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.000127384
diis-c [-3.97930271e-10  3.38329562e-05 -2.55227075e-02  1.02548887e+00]
  HOMO = -0.236602651744195  LUMO = 86.0315457550857
  mo_energy =
[-1.20273934e+02 -1.22553923e+01 -6.65603923e+00 -6.65603923e+00
 -6.65603923e+00 -1.16371019e+00 -2.36602652e-01 -2.36602652e-01
 -2.36602652e-01  8.60315458e+01  6.75916686e+02  3.92994602e+03
  2.96698399e+04  1.56372977e+05  7.03814798e+05]
E1 = -706.5369882147717  E_coul = 198.89753295269628
cycle= 4 E= -507.639455262075  delta_E= -4.04e-11  |g|= 3.75e-07  |ddm|= 3.48e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.5369882147717  E_coul = 198.89753295269628
  HOMO = -0.236602635305599  LUMO = 86.0315460943542
  mo_energy =
[-1.20273934e+02 -1.22553922e+01 -6.65603906e+00 -6.65603906e+00
 -6.65603906e+00 -1.16371019e+00 -2.36602635e-01 -2.36602635e-01
 -2.36602635e-01  8.60315461e+01  6.75916687e+02  3.92994602e+03
  2.96698399e+04  1.56372977e+05  7.03814798e+05]
E1 = -706.5369882520959  E_coul = 198.89753299002015
Extra cycle  E= -507.639455262076  delta_E= -2.84e-13  |g|= 6.48e-09  |ddm|= 1.66e-08
    CPU time for scf_cycle      0.09 sec, wall time      0.10 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 45.764302900059775
E1 = -706.5369882520959  E_coul = 198.89753299002015
init E= -507.639455262076
    CPU time for initialize scf      0.07 sec, wall time      0.07 sec
  HOMO = -0.236602635112987  LUMO = 86.0315460985114
  mo_energy =
[-1.20273934e+02 -1.22553922e+01 -6.65603906e+00 -6.65603906e+00
 -6.65603906e+00 -1.16371019e+00 -2.36602635e-01 -2.36602635e-01
 -2.36602635e-01  8.60315461e+01  6.75916687e+02  3.92994602e+03
  2.96698399e+04  1.56372977e+05  7.03814798e+05]
E1 = -706.5369882526619  E_coul = 198.89753299058623
cycle= 1 E= -507.639455262076  delta_E=    0  |g|= 1.31e-10  |ddm|= 2.57e-10
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -706.5369882526619  E_coul = 198.89753299058623
  HOMO = -0.236602635110264  LUMO = 86.0315460985716
  mo_energy =
[-1.20273934e+02 -1.22553922e+01 -6.65603906e+00 -6.65603906e+00
 -6.65603906e+00 -1.16371019e+00 -2.36602635e-01 -2.36602635e-01
 -2.36602635e-01  8.60315461e+01  6.75916687e+02  3.92994602e+03
  2.96698399e+04  1.56372977e+05  7.03814798e+05]
E1 = -706.5369882526717  E_coul = 198.89753299059595
Extra cycle  E= -507.639455262076  delta_E= -5.68e-14  |g|= 2.92e-11  |ddm|= 4.57e-12
    CPU time for scf_cycle      0.14 sec, wall time      0.14 sec
exp = [2.93679451e+05 7.34198633e+04 1.83543367e+04 2.23381725e+03
 4.55406061e+02 1.21314174e+02 3.75067313e+01 4.74114895e+00
 3.91221553e-01 8.59619482e+00 4.90782653e-01]
grad_E = [ 9.35824767e-09 -3.25957506e-08  6.36207642e-06 -5.73884827e-06
 -1.89359767e-05  6.71851414e-06 -7.26106664e-05 -5.20493848e-05
  3.90714778e-05 -1.99881621e-03 -8.24290944e-05]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((11, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([7.3419862888950534e+04,1.8354415279684519e+04,2.2337565691104060e+03,4.5509411588185179e+02,1.2132000689951782e+02,3.7517668969809321e+01,4.7408530341284303e+00,3.9118871783972831e-01,8.5986666061044215e+00,4.9085282207620301e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "9s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:04:07 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  293679.451318        1
[INPUT] 0    0    [1    /1   ]  73419.8637202        1
[INPUT] 0    0    [1    /1   ]  18354.253465         1
[INPUT] 0    0    [1    /1   ]  2233.88352802        1
[INPUT] 0    0    [1    /1   ]  455.706180507        1
[INPUT] 0    0    [1    /1   ]  121.405511608        1
[INPUT] 0    0    [1    /1   ]  37.5232893274        1
[INPUT] 0    0    [1    /1   ]  4.74127045569        1
[INPUT] 0    0    [1    /1   ]  0.391233799731       1
[INPUT] 1    0    [1    /1   ]  8.5952319823         1
[INPUT] 1    0    [1    /1   ]  0.490755331657       1

nuclear repulsion = 0
number of shells = 11
number of NR pGTOs = 15
number of NR cGTOs = 15
basis = {'Ar': [[0, [293679.451317813, 1.0]], [0, [73419.8637201923, 1.0]], [0, [18354.253465049307, 1.0]], [0, [2233.8835280241938, 1.0]], [0, [455.70618050691763, 1.0]], [0, [121.4055116082471, 1.0]], [0, [37.52328932744265, 1.0]], [0, [4.741270455689019, 1.0]], [0, [0.3912337997310045, 1.0]], [1, [8.595231982302886, 1.0]], [1, [0.4907553316571459, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [293679.45131781]
bas 1, expnt(s) = [73419.86372019]
bas 2, expnt(s) = [18354.25346505]
bas 3, expnt(s) = [2233.88352802]
bas 4, expnt(s) = [455.70618051]
bas 5, expnt(s) = [121.40551161]
bas 6, expnt(s) = [37.52328933]
bas 7, expnt(s) = [4.74127046]
bas 8, expnt(s) = [0.3912338]
bas 9, expnt(s) = [8.59523198]
bas 10, expnt(s) = [0.49075533]
CPU time:        77.91
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]
 [ 0  1  1  1  0 44 45  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 2.93679451e+05 3.18727983e+04 7.34198637e+04 1.12687360e+04
 1.83542535e+04 3.98398384e+03 2.23388353e+03 8.20938113e+02
 4.55706181e+02 2.49188912e+02 1.21405512e+02 9.24046501e+01
 3.75232893e+01 3.83036977e+01 4.74127046e+00 8.11775746e+00
 3.91233800e-01 1.24980512e+00 8.59523198e+00 4.29344986e+01
 4.90755332e-01 1.19830032e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.32010720366544
cond(S) = 45.764819617490524
E1 = -688.8550950429501  E_coul = 184.89764377229534
init E= -503.957451270655
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.680953029148363  LUMO = 84.7756203492189
  mo_energy =
[-1.21653866e+02 -1.32824788e+01 -7.62282842e+00 -7.62282842e+00
 -7.62282842e+00 -1.65084030e+00 -6.80953029e-01 -6.80953029e-01
 -6.80953029e-01  8.47756203e+01  6.75111945e+02  3.93007809e+03
  2.96701951e+04  1.56373113e+05  7.03814777e+05]
E1 = -706.5631465074943  E_coul = 198.924116953034
cycle= 1 E= -507.63902955446  delta_E= -3.68  |g|= 0.318  |ddm|= 0.301
    CPU time for cycle= 1      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.417249
diis-c [-0.17409704  1.        ]
  HOMO = -0.236479293270533  LUMO = 86.1079289090166
  mo_energy =
[-1.20266212e+02 -1.22546212e+01 -6.65456306e+00 -6.65456306e+00
 -6.65456306e+00 -1.16370794e+00 -2.36479293e-01 -2.36479293e-01
 -2.36479293e-01  8.61079289e+01  6.76482198e+02  3.93132923e+03
  2.96712830e+04  1.56374129e+05  7.03815762e+05]
E1 = -706.5315797068923  E_coul = 198.89212046079754
cycle= 2 E= -507.639459246095  delta_E= -0.00043  |g|= 0.00475  |ddm|= 0.0143
    CPU time for cycle= 2      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.00505078
diis-c [-2.54662146e-05 -5.03722477e-04  1.00050372e+00]
  HOMO = -0.236655316163127  LUMO = 86.1044021325421
  mo_energy =
[-1.20274884e+02 -1.22558160e+01 -6.65641297e+00 -6.65641297e+00
 -6.65641297e+00 -1.16377305e+00 -2.36655316e-01 -2.36655316e-01
 -2.36655316e-01  8.61044021e+01  6.76471585e+02  3.93131330e+03
  2.96712637e+04  1.56374109e+05  7.03815742e+05]
E1 = -706.5311367196852  E_coul = 198.89167736269863
cycle= 3 E= -507.639459356987  delta_E= -1.11e-07  |g|= 9.51e-05  |ddm|= 0.000203
    CPU time for cycle= 3      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.000127225
diis-c [-3.96933591e-10  3.38282385e-05 -2.55092675e-02  1.02547544e+00]
  HOMO = -0.236657542668351  LUMO = 86.1043572323421
  mo_energy =
[-1.20274998e+02 -1.22558319e+01 -6.65644012e+00 -6.65644012e+00
 -6.65644012e+00 -1.16377371e+00 -2.36657543e-01 -2.36657543e-01
 -2.36657543e-01  8.61043572e+01  6.76471468e+02  3.93131315e+03
  2.96712635e+04  1.56374109e+05  7.03815742e+05]
E1 = -706.5311294201446  E_coul = 198.8916700631175
cycle= 4 E= -507.639459357027  delta_E= -4.05e-11  |g|= 3.75e-07  |ddm|= 3.47e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.5311294201446  E_coul = 198.8916700631175
  HOMO = -0.236657526278617  LUMO = 86.1043575710435
  mo_energy =
[-1.20274997e+02 -1.22558318e+01 -6.65643995e+00 -6.65643995e+00
 -6.65643995e+00 -1.16377371e+00 -2.36657526e-01 -2.36657526e-01
 -2.36657526e-01  8.61043576e+01  6.76471469e+02  3.93131315e+03
  2.96712636e+04  1.56374109e+05  7.03815742e+05]
E1 = -706.5311294573604  E_coul = 198.89167010033344
Extra cycle  E= -507.639459357027  delta_E= 1.14e-13  |g|= 6.47e-09  |ddm|= 1.65e-08
    CPU time for scf_cycle      0.10 sec, wall time      0.11 sec
exp = [2.93679451e+05 7.34198637e+04 1.83542535e+04 2.23388353e+03
 4.55706181e+02 1.21405512e+02 3.75232893e+01 4.74127046e+00
 3.91233800e-01 8.59523198e+00 4.90755332e-01]
E = -507.63945935702696
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((11, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([7.3419862888950534e+04,1.8354415279684519e+04,2.2337565691104060e+03,4.5509411588185179e+02,1.2132000689951782e+02,3.7517668969809321e+01,4.7408530341284303e+00,3.9118871783972831e-01,8.5986666061044215e+00,4.9085282207620301e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "9s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:04:07 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  293679.451318        1
[INPUT] 0    0    [1    /1   ]  73419.8637202        1
[INPUT] 0    0    [1    /1   ]  18354.253465         1
[INPUT] 0    0    [1    /1   ]  2233.88352802        1
[INPUT] 0    0    [1    /1   ]  455.706180507        1
[INPUT] 0    0    [1    /1   ]  121.405511608        1
[INPUT] 0    0    [1    /1   ]  37.5232893274        1
[INPUT] 0    0    [1    /1   ]  4.74127045569        1
[INPUT] 0    0    [1    /1   ]  0.391233799731       1
[INPUT] 1    0    [1    /1   ]  8.5952319823         1
[INPUT] 1    0    [1    /1   ]  0.490755331657       1

nuclear repulsion = 0
number of shells = 11
number of NR pGTOs = 15
number of NR cGTOs = 15
basis = {'Ar': [[0, [293679.451317813, 1.0]], [0, [73419.8637201923, 1.0]], [0, [18354.253465049307, 1.0]], [0, [2233.8835280241938, 1.0]], [0, [455.70618050691763, 1.0]], [0, [121.4055116082471, 1.0]], [0, [37.52328932744265, 1.0]], [0, [4.741270455689019, 1.0]], [0, [0.3912337997310045, 1.0]], [1, [8.595231982302886, 1.0]], [1, [0.4907553316571459, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [293679.45131781]
bas 1, expnt(s) = [73419.86372019]
bas 2, expnt(s) = [18354.25346505]
bas 3, expnt(s) = [2233.88352802]
bas 4, expnt(s) = [455.70618051]
bas 5, expnt(s) = [121.40551161]
bas 6, expnt(s) = [37.52328933]
bas 7, expnt(s) = [4.74127046]
bas 8, expnt(s) = [0.3912338]
bas 9, expnt(s) = [8.59523198]
bas 10, expnt(s) = [0.49075533]
CPU time:        78.39
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]
 [ 0  1  1  1  0 44 45  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 2.93679451e+05 3.18727983e+04 7.34198637e+04 1.12687360e+04
 1.83542535e+04 3.98398384e+03 2.23388353e+03 8.20938113e+02
 4.55706181e+02 2.49188912e+02 1.21405512e+02 9.24046501e+01
 3.75232893e+01 3.83036977e+01 4.74127046e+00 8.11775746e+00
 3.91233800e-01 1.24980512e+00 8.59523198e+00 4.29344986e+01
 4.90755332e-01 1.19830032e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.32010720366544
cond(S) = 45.764819617490524
E1 = -688.8550950429501  E_coul = 184.89764377229534
init E= -503.957451270655
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.680953029148363  LUMO = 84.7756203492189
  mo_energy =
[-1.21653866e+02 -1.32824788e+01 -7.62282842e+00 -7.62282842e+00
 -7.62282842e+00 -1.65084030e+00 -6.80953029e-01 -6.80953029e-01
 -6.80953029e-01  8.47756203e+01  6.75111945e+02  3.93007809e+03
  2.96701951e+04  1.56373113e+05  7.03814777e+05]
E1 = -706.5631465074943  E_coul = 198.924116953034
cycle= 1 E= -507.63902955446  delta_E= -3.68  |g|= 0.318  |ddm|= 0.301
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.417249
diis-c [-0.17409704  1.        ]
  HOMO = -0.236479293270533  LUMO = 86.1079289090166
  mo_energy =
[-1.20266212e+02 -1.22546212e+01 -6.65456306e+00 -6.65456306e+00
 -6.65456306e+00 -1.16370794e+00 -2.36479293e-01 -2.36479293e-01
 -2.36479293e-01  8.61079289e+01  6.76482198e+02  3.93132923e+03
  2.96712830e+04  1.56374129e+05  7.03815762e+05]
E1 = -706.5315797068923  E_coul = 198.89212046079754
cycle= 2 E= -507.639459246095  delta_E= -0.00043  |g|= 0.00475  |ddm|= 0.0143
    CPU time for cycle= 2      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.00505078
diis-c [-2.54662146e-05 -5.03722477e-04  1.00050372e+00]
  HOMO = -0.236655316163127  LUMO = 86.1044021325421
  mo_energy =
[-1.20274884e+02 -1.22558160e+01 -6.65641297e+00 -6.65641297e+00
 -6.65641297e+00 -1.16377305e+00 -2.36655316e-01 -2.36655316e-01
 -2.36655316e-01  8.61044021e+01  6.76471585e+02  3.93131330e+03
  2.96712637e+04  1.56374109e+05  7.03815742e+05]
E1 = -706.5311367196852  E_coul = 198.89167736269863
cycle= 3 E= -507.639459356987  delta_E= -1.11e-07  |g|= 9.51e-05  |ddm|= 0.000203
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.000127225
diis-c [-3.96933591e-10  3.38282385e-05 -2.55092675e-02  1.02547544e+00]
  HOMO = -0.236657542668351  LUMO = 86.1043572323421
  mo_energy =
[-1.20274998e+02 -1.22558319e+01 -6.65644012e+00 -6.65644012e+00
 -6.65644012e+00 -1.16377371e+00 -2.36657543e-01 -2.36657543e-01
 -2.36657543e-01  8.61043572e+01  6.76471468e+02  3.93131315e+03
  2.96712635e+04  1.56374109e+05  7.03815742e+05]
E1 = -706.5311294201446  E_coul = 198.8916700631175
cycle= 4 E= -507.639459357027  delta_E= -4.05e-11  |g|= 3.75e-07  |ddm|= 3.47e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.5311294201446  E_coul = 198.8916700631175
  HOMO = -0.236657526278617  LUMO = 86.1043575710435
  mo_energy =
[-1.20274997e+02 -1.22558318e+01 -6.65643995e+00 -6.65643995e+00
 -6.65643995e+00 -1.16377371e+00 -2.36657526e-01 -2.36657526e-01
 -2.36657526e-01  8.61043576e+01  6.76471469e+02  3.93131315e+03
  2.96712636e+04  1.56374109e+05  7.03815742e+05]
E1 = -706.5311294573604  E_coul = 198.89167010033344
Extra cycle  E= -507.639459357027  delta_E= 1.14e-13  |g|= 6.47e-09  |ddm|= 1.65e-08
    CPU time for scf_cycle      0.09 sec, wall time      0.10 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 45.764819617490524
E1 = -706.5311294573604  E_coul = 198.89167010033344
init E= -507.639459357027
    CPU time for initialize scf      0.08 sec, wall time      0.08 sec
  HOMO = -0.236657526086679  LUMO = 86.1043575751913
  mo_energy =
[-1.20274997e+02 -1.22558318e+01 -6.65643995e+00 -6.65643995e+00
 -6.65643995e+00 -1.16377371e+00 -2.36657526e-01 -2.36657526e-01
 -2.36657526e-01  8.61043576e+01  6.76471469e+02  3.93131315e+03
  2.96712636e+04  1.56374109e+05  7.03815742e+05]
E1 = -706.5311294579243  E_coul = 198.89167010089736
cycle= 1 E= -507.639459357027  delta_E= 5.68e-14  |g|= 1.28e-10  |ddm|= 2.56e-10
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -706.5311294579243  E_coul = 198.89167010089736
  HOMO = -0.236657526083966  LUMO = 86.1043575752498
  mo_energy =
[-1.20274997e+02 -1.22558318e+01 -6.65643995e+00 -6.65643995e+00
 -6.65643995e+00 -1.16377371e+00 -2.36657526e-01 -2.36657526e-01
 -2.36657526e-01  8.61043576e+01  6.76471469e+02  3.93131315e+03
  2.96712636e+04  1.56374109e+05  7.03815742e+05]
E1 = -706.5311294579341  E_coul = 198.89167010090716
Extra cycle  E= -507.639459357027  delta_E=    0  |g|= 8.28e-12  |ddm|= 4.58e-12
    CPU time for scf_cycle      0.14 sec, wall time      0.15 sec
exp = [2.93679451e+05 7.34198637e+04 1.83542535e+04 2.23388353e+03
 4.55706181e+02 1.21405512e+02 3.75232893e+01 4.74127046e+00
 3.91233800e-01 8.59523198e+00 4.90755332e-01]
grad_E = [ 9.37067072e-09 -3.25556616e-08  6.36978546e-06 -6.41346713e-06
 -1.65328182e-05  2.10914931e-05 -9.72876337e-05 -7.21727541e-05
  5.42825124e-05 -2.77996019e-03 -1.14674054e-04]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((11, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([7.3419862888950534e+04,1.8354415279684519e+04,2.2337565691104060e+03,4.5509411588185179e+02,1.2132000689951782e+02,3.7517668969809321e+01,4.7408530341284303e+00,3.9118871783972831e-01,8.5986666061044215e+00,4.9085282207620301e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "9s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:04:10 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  293679.451104        1
[INPUT] 0    0    [1    /1   ]  73419.8644665        1
[INPUT] 0    0    [1    /1   ]  18354.1081586        1
[INPUT] 0    0    [1    /1   ]  2233.99911157        1
[INPUT] 0    0    [1    /1   ]  456.231472182        1
[INPUT] 0    0    [1    /1   ]  121.559563609        1
[INPUT] 0    0    [1    /1   ]  37.553182853         1
[INPUT] 0    0    [1    /1   ]  4.74139459695        1
[INPUT] 0    0    [1    /1   ]  0.391240659189       1
[INPUT] 1    0    [1    /1   ]  8.59488336527        1
[INPUT] 1    0    [1    /1   ]  0.490744866507       1

nuclear repulsion = 0
number of shells = 11
number of NR pGTOs = 15
number of NR cGTOs = 15
basis = {'Ar': [[0, [293679.4511041008, 1.0]], [0, [73419.86446646476, 1.0]], [0, [18354.10815856531, 1.0]], [0, [2233.9991115663192, 1.0]], [0, [456.2314721822298, 1.0]], [0, [121.55956360886229, 1.0]], [0, [37.55318285304301, 1.0]], [0, [4.741394596953968, 1.0]], [0, [0.39124065918934037, 1.0]], [1, [8.594883365274649, 1.0]], [1, [0.49074486650674565, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [293679.4511041]
bas 1, expnt(s) = [73419.86446646]
bas 2, expnt(s) = [18354.10815857]
bas 3, expnt(s) = [2233.99911157]
bas 4, expnt(s) = [456.23147218]
bas 5, expnt(s) = [121.55956361]
bas 6, expnt(s) = [37.55318285]
bas 7, expnt(s) = [4.7413946]
bas 8, expnt(s) = [0.39124066]
bas 9, expnt(s) = [8.59488337]
bas 10, expnt(s) = [0.49074487]
CPU time:        81.46
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]
 [ 0  1  1  1  0 44 45  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 2.93679451e+05 3.18727983e+04 7.34198645e+04 1.12687361e+04
 1.83541082e+04 3.98396018e+03 2.23399911e+03 8.20969970e+02
 4.56231472e+02 2.49404310e+02 1.21559564e+02 9.24925757e+01
 3.75531829e+01 3.83265818e+01 4.74139460e+00 8.11791687e+00
 3.91240659e-01 1.24982156e+00 8.59488337e+00 4.29323219e+01
 4.90744867e-01 1.19826838e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.320117121181035
cond(S) = 45.76665578676081
E1 = -688.8524385508288  E_coul = 184.89597353691846
init E= -503.95646501391
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.680959399556322  LUMO = 84.9031358020041
  mo_energy =
[-1.21654196e+02 -1.32826161e+01 -7.62293754e+00 -7.62293754e+00
 -7.62293754e+00 -1.65086095e+00 -6.80959400e-01 -6.80959400e-01
 -6.80959400e-01  8.49031358e+01  6.76071880e+02  3.93245388e+03
  2.96726723e+04  1.56375081e+05  7.03816419e+05]
E1 = -706.5611399637826  E_coul = 198.92210267449244
cycle= 1 E= -507.63903728929  delta_E= -3.68  |g|= 0.317  |ddm|= 0.301
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.41721
diis-c [-0.17406402  1.        ]
  HOMO = -0.236497835609775  LUMO = 86.2355650630997
  mo_energy =
[-1.20266590e+02 -1.22547757e+01 -6.65469625e+00 -6.65469625e+00
 -6.65469625e+00 -1.16373105e+00 -2.36497836e-01 -2.36497836e-01
 -2.36497836e-01  8.62355651e+01  6.77442074e+02  3.93370503e+03
  2.96737603e+04  1.56376098e+05  7.03817405e+05]
E1 = -706.5296428981277  E_coul = 198.8901769378258
cycle= 2 E= -507.639465960302  delta_E= -0.000429  |g|= 0.00475  |ddm|= 0.0143
    CPU time for cycle= 2      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.00504539
diis-c [-2.54108641e-05 -5.09118301e-04  1.00050912e+00]
  HOMO = -0.236673378958597  LUMO = 86.2320428687581
  mo_energy =
[-1.20275245e+02 -1.22559675e+01 -6.65654147e+00 -6.65654147e+00
 -6.65654147e+00 -1.16379600e+00 -2.36673379e-01 -2.36673379e-01
 -2.36673379e-01  8.62320429e+01  6.77431477e+02  3.93368912e+03
  2.96737411e+04  1.56376078e+05  7.03817384e+05]
E1 = -706.5292013085847  E_coul = 198.88973523781934
cycle= 3 E= -507.639466070765  delta_E= -1.1e-07  |g|= 9.49e-05  |ddm|= 0.000202
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.000126967
diis-c [-3.95335367e-10  3.38249983e-05 -2.54852072e-02  1.02545138e+00]
  HOMO = -0.236675596459469  LUMO = 86.2319981047788
  mo_energy =
[-1.20275358e+02 -1.22559833e+01 -6.65656851e+00 -6.65656851e+00
 -6.65656851e+00 -1.16379665e+00 -2.36675596e-01 -2.36675596e-01
 -2.36675596e-01  8.62319981e+01  6.77431359e+02  3.93368898e+03
  2.96737409e+04  1.56376078e+05  7.03817384e+05]
E1 = -706.5291940413209  E_coul = 198.88972797051596
cycle= 4 E= -507.639466070805  delta_E= -3.96e-11  |g|= 3.73e-07  |ddm|= 3.46e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.5291940413209  E_coul = 198.88972797051596
  HOMO = -0.236675580148327  LUMO = 86.2319984425276
  mo_energy =
[-1.20275357e+02 -1.22559832e+01 -6.65656835e+00 -6.65656835e+00
 -6.65656835e+00 -1.16379665e+00 -2.36675580e-01 -2.36675580e-01
 -2.36675580e-01  8.62319984e+01  6.77431360e+02  3.93368898e+03
  2.96737409e+04  1.56376078e+05  7.03817384e+05]
E1 = -706.5291940783561  E_coul = 198.88972800755093
Extra cycle  E= -507.639466070805  delta_E= -2.27e-13  |g|= 6.44e-09  |ddm|= 1.64e-08
    CPU time for scf_cycle      0.10 sec, wall time      0.10 sec
exp = [2.93679451e+05 7.34198645e+04 1.83541082e+04 2.23399911e+03
 4.56231472e+02 1.21559564e+02 3.75531829e+01 4.74139460e+00
 3.91240659e-01 8.59488337e+00 4.90744867e-01]
E = -507.63946607080516
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((11, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([7.3419862888950534e+04,1.8354415279684519e+04,2.2337565691104060e+03,4.5509411588185179e+02,1.2132000689951782e+02,3.7517668969809321e+01,4.7408530341284303e+00,3.9118871783972831e-01,8.5986666061044215e+00,4.9085282207620301e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "9s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:04:11 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  293679.451104        1
[INPUT] 0    0    [1    /1   ]  73419.8644665        1
[INPUT] 0    0    [1    /1   ]  18354.1081586        1
[INPUT] 0    0    [1    /1   ]  2233.99911157        1
[INPUT] 0    0    [1    /1   ]  456.231472182        1
[INPUT] 0    0    [1    /1   ]  121.559563609        1
[INPUT] 0    0    [1    /1   ]  37.553182853         1
[INPUT] 0    0    [1    /1   ]  4.74139459695        1
[INPUT] 0    0    [1    /1   ]  0.391240659189       1
[INPUT] 1    0    [1    /1   ]  8.59488336527        1
[INPUT] 1    0    [1    /1   ]  0.490744866507       1

nuclear repulsion = 0
number of shells = 11
number of NR pGTOs = 15
number of NR cGTOs = 15
basis = {'Ar': [[0, [293679.4511041008, 1.0]], [0, [73419.86446646476, 1.0]], [0, [18354.10815856531, 1.0]], [0, [2233.9991115663192, 1.0]], [0, [456.2314721822298, 1.0]], [0, [121.55956360886229, 1.0]], [0, [37.55318285304301, 1.0]], [0, [4.741394596953968, 1.0]], [0, [0.39124065918934037, 1.0]], [1, [8.594883365274649, 1.0]], [1, [0.49074486650674565, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [293679.4511041]
bas 1, expnt(s) = [73419.86446646]
bas 2, expnt(s) = [18354.10815857]
bas 3, expnt(s) = [2233.99911157]
bas 4, expnt(s) = [456.23147218]
bas 5, expnt(s) = [121.55956361]
bas 6, expnt(s) = [37.55318285]
bas 7, expnt(s) = [4.7413946]
bas 8, expnt(s) = [0.39124066]
bas 9, expnt(s) = [8.59488337]
bas 10, expnt(s) = [0.49074487]
CPU time:        81.94
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]
 [ 0  1  1  1  0 44 45  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 2.93679451e+05 3.18727983e+04 7.34198645e+04 1.12687361e+04
 1.83541082e+04 3.98396018e+03 2.23399911e+03 8.20969970e+02
 4.56231472e+02 2.49404310e+02 1.21559564e+02 9.24925757e+01
 3.75531829e+01 3.83265818e+01 4.74139460e+00 8.11791687e+00
 3.91240659e-01 1.24982156e+00 8.59488337e+00 4.29323219e+01
 4.90744867e-01 1.19826838e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.320117121181035
cond(S) = 45.76665578676081
E1 = -688.8524385508288  E_coul = 184.89597353691846
init E= -503.95646501391
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.680959399556322  LUMO = 84.9031358020041
  mo_energy =
[-1.21654196e+02 -1.32826161e+01 -7.62293754e+00 -7.62293754e+00
 -7.62293754e+00 -1.65086095e+00 -6.80959400e-01 -6.80959400e-01
 -6.80959400e-01  8.49031358e+01  6.76071880e+02  3.93245388e+03
  2.96726723e+04  1.56375081e+05  7.03816419e+05]
E1 = -706.5611399637826  E_coul = 198.92210267449244
cycle= 1 E= -507.63903728929  delta_E= -3.68  |g|= 0.317  |ddm|= 0.301
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.41721
diis-c [-0.17406402  1.        ]
  HOMO = -0.236497835609775  LUMO = 86.2355650630997
  mo_energy =
[-1.20266590e+02 -1.22547757e+01 -6.65469625e+00 -6.65469625e+00
 -6.65469625e+00 -1.16373105e+00 -2.36497836e-01 -2.36497836e-01
 -2.36497836e-01  8.62355651e+01  6.77442074e+02  3.93370503e+03
  2.96737603e+04  1.56376098e+05  7.03817405e+05]
E1 = -706.5296428981277  E_coul = 198.8901769378258
cycle= 2 E= -507.639465960302  delta_E= -0.000429  |g|= 0.00475  |ddm|= 0.0143
    CPU time for cycle= 2      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.00504539
diis-c [-2.54108641e-05 -5.09118301e-04  1.00050912e+00]
  HOMO = -0.236673378958597  LUMO = 86.2320428687581
  mo_energy =
[-1.20275245e+02 -1.22559675e+01 -6.65654147e+00 -6.65654147e+00
 -6.65654147e+00 -1.16379600e+00 -2.36673379e-01 -2.36673379e-01
 -2.36673379e-01  8.62320429e+01  6.77431477e+02  3.93368912e+03
  2.96737411e+04  1.56376078e+05  7.03817384e+05]
E1 = -706.5292013085847  E_coul = 198.88973523781934
cycle= 3 E= -507.639466070765  delta_E= -1.1e-07  |g|= 9.49e-05  |ddm|= 0.000202
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.000126967
diis-c [-3.95335367e-10  3.38249983e-05 -2.54852072e-02  1.02545138e+00]
  HOMO = -0.236675596459469  LUMO = 86.2319981047788
  mo_energy =
[-1.20275358e+02 -1.22559833e+01 -6.65656851e+00 -6.65656851e+00
 -6.65656851e+00 -1.16379665e+00 -2.36675596e-01 -2.36675596e-01
 -2.36675596e-01  8.62319981e+01  6.77431359e+02  3.93368898e+03
  2.96737409e+04  1.56376078e+05  7.03817384e+05]
E1 = -706.5291940413209  E_coul = 198.88972797051596
cycle= 4 E= -507.639466070805  delta_E= -3.96e-11  |g|= 3.73e-07  |ddm|= 3.46e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.5291940413209  E_coul = 198.88972797051596
  HOMO = -0.236675580148327  LUMO = 86.2319984425276
  mo_energy =
[-1.20275357e+02 -1.22559832e+01 -6.65656835e+00 -6.65656835e+00
 -6.65656835e+00 -1.16379665e+00 -2.36675580e-01 -2.36675580e-01
 -2.36675580e-01  8.62319984e+01  6.77431360e+02  3.93368898e+03
  2.96737409e+04  1.56376078e+05  7.03817384e+05]
E1 = -706.5291940783561  E_coul = 198.88972800755093
Extra cycle  E= -507.639466070805  delta_E= -2.27e-13  |g|= 6.44e-09  |ddm|= 1.64e-08
    CPU time for scf_cycle      0.10 sec, wall time      0.10 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 45.76665578676081
E1 = -706.5291940783561  E_coul = 198.88972800755093
init E= -507.639466070805
    CPU time for initialize scf      0.07 sec, wall time      0.07 sec
  HOMO = -0.236675579957458  LUMO = 86.2319984466567
  mo_energy =
[-1.20275357e+02 -1.22559832e+01 -6.65656835e+00 -6.65656835e+00
 -6.65656835e+00 -1.16379665e+00 -2.36675580e-01 -2.36675580e-01
 -2.36675580e-01  8.62319984e+01  6.77431360e+02  3.93368898e+03
  2.96737409e+04  1.56376078e+05  7.03817384e+05]
E1 = -706.529194078917  E_coul = 198.88972800811175
cycle= 1 E= -507.639466070805  delta_E= -1.14e-13  |g|= 1.32e-10  |ddm|= 2.54e-10
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -706.529194078917  E_coul = 198.88972800811175
  HOMO = -0.236675579954769  LUMO = 86.2319984467167
  mo_energy =
[-1.20275357e+02 -1.22559832e+01 -6.65656835e+00 -6.65656835e+00
 -6.65656835e+00 -1.16379665e+00 -2.36675580e-01 -2.36675580e-01
 -2.36675580e-01  8.62319984e+01  6.77431360e+02  3.93368898e+03
  2.96737409e+04  1.56376078e+05  7.03817384e+05]
E1 = -706.5291940789272  E_coul = 198.8897280081217
Extra cycle  E= -507.639466070805  delta_E= -2.27e-13  |g|= 1.03e-11  |ddm|= 4.53e-12
    CPU time for scf_cycle      0.14 sec, wall time      0.14 sec
exp = [2.93679451e+05 7.34198645e+04 1.83541082e+04 2.23399911e+03
 4.56231472e+02 1.21559564e+02 3.75531829e+01 4.74139460e+00
 3.91240659e-01 8.59488337e+00 4.90744867e-01]
grad_E = [ 9.39380355e-09 -3.24806050e-08  6.38413004e-06 -7.68321204e-06
 -1.03728207e-05  3.20169486e-05 -1.04003937e-04 -7.87858953e-05
  5.95251797e-05 -3.05728441e-03 -1.26202124e-04]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((11, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([7.3419862888950534e+04,1.8354415279684519e+04,2.2337565691104060e+03,4.5509411588185179e+02,1.2132000689951782e+02,3.7517668969809321e+01,4.7408530341284303e+00,3.9118871783972831e-01,8.5986666061044215e+00,4.9085282207620301e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "9s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:04:14 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  293679.450881        1
[INPUT] 0    0    [1    /1   ]  73419.8652448        1
[INPUT] 0    0    [1    /1   ]  18353.9566096        1
[INPUT] 0    0    [1    /1   ]  2234.11955003        1
[INPUT] 0    0    [1    /1   ]  456.781110628        1
[INPUT] 0    0    [1    /1   ]  121.713929672        1
[INPUT] 0    0    [1    /1   ]  37.5853732322        1
[INPUT] 0    0    [1    /1   ]  4.74142382873        1
[INPUT] 0    0    [1    /1   ]  0.391231385453       1
[INPUT] 1    0    [1    /1   ]  8.59602606648        1
[INPUT] 1    0    [1    /1   ]  0.49077605592        1

nuclear repulsion = 0
number of shells = 11
number of NR pGTOs = 15
number of NR cGTOs = 15
basis = {'Ar': [[0, [293679.4508812075, 1.0]], [0, [73419.8652448095, 1.0]], [0, [18353.956609562592, 1.0]], [0, [2234.1195500322274, 1.0]], [0, [456.7811106282708, 1.0]], [0, [121.71392967235184, 1.0]], [0, [37.58537323224877, 1.0]], [0, [4.741423828726367, 1.0]], [0, [0.3912313854532506, 1.0]], [1, [8.59602606648284, 1.0]], [1, [0.4907760559198334, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [293679.45088121]
bas 1, expnt(s) = [73419.86524481]
bas 2, expnt(s) = [18353.95660956]
bas 3, expnt(s) = [2234.11955003]
bas 4, expnt(s) = [456.78111063]
bas 5, expnt(s) = [121.71392967]
bas 6, expnt(s) = [37.58537323]
bas 7, expnt(s) = [4.74142383]
bas 8, expnt(s) = [0.39123139]
bas 9, expnt(s) = [8.59602607]
bas 10, expnt(s) = [0.49077606]
CPU time:        85.12
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]
 [ 0  1  1  1  0 44 45  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 2.93679451e+05 3.18727983e+04 7.34198652e+04 1.12687362e+04
 1.83539566e+04 3.98393551e+03 2.23411955e+03 8.21003164e+02
 4.56781111e+02 2.49629626e+02 1.21713930e+02 9.25806525e+01
 3.75853732e+01 3.83512192e+01 4.74142383e+00 8.11795440e+00
 3.91231385e-01 1.24979934e+00 8.59602607e+00 4.29394569e+01
 4.90776056e-01 1.19836358e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.320072079696367
cond(S) = 45.76948273533012
E1 = -688.8572695534584  E_coul = 184.90197467578528
init E= -503.955294877673
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.680940946191238  LUMO = 85.0362774075262
  mo_energy =
[-1.21653017e+02 -1.32821633e+01 -7.62252178e+00 -7.62252178e+00
 -7.62252178e+00 -1.65081709e+00 -6.80940946e-01 -6.80940946e-01
 -6.80940946e-01  8.50362774e+01  6.77062422e+02  3.93491896e+03
  2.96752469e+04  1.56377127e+05  7.03818125e+05]
E1 = -706.5684279802106  E_coul = 198.92938332177408
cycle= 1 E= -507.639044658436  delta_E= -3.68  |g|= 0.317  |ddm|= 0.301
    CPU time for cycle= 1      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.417188
diis-c [-0.17404613  1.        ]
  HOMO = -0.23642917696357  LUMO = 86.3689937174352
  mo_energy =
[-1.20265292e+02 -1.22542400e+01 -6.65418881e+00 -6.65418881e+00
 -6.65418881e+00 -1.16365568e+00 -2.36429177e-01 -2.36429177e-01
 -2.36429177e-01  8.63689937e+01  6.78432731e+02  3.93617028e+03
  2.96763352e+04  1.56378144e+05  7.03819111e+05]
E1 = -706.5369961619234  E_coul = 198.89752372087648
cycle= 2 E= -507.639472441047  delta_E= -0.000428  |g|= 0.00474  |ddm|= 0.0143
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00504081
diis-c [-2.53635329e-05 -5.15512555e-04  1.00051551e+00]
  HOMO = -0.236604311985703  LUMO = 86.3654756920617
  mo_energy =
[-1.20273931e+02 -1.22554288e+01 -6.65602970e+00 -6.65602970e+00
 -6.65602970e+00 -1.16372045e+00 -2.36604312e-01 -2.36604312e-01
 -2.36604312e-01  8.63654757e+01  6.78422147e+02  3.93615439e+03
  2.96763159e+04  1.56378124e+05  7.03819090e+05]
E1 = -706.5365559083118  E_coul = 198.89708335719598
cycle= 3 E= -507.639472551116  delta_E= -1.1e-07  |g|= 9.47e-05  |ddm|= 0.000202
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.000126721
diis-c [-3.93835114e-10  3.38268057e-05 -2.54594892e-02  1.02542566e+00]
  HOMO = -0.236606521289844  LUMO = 86.3654310632337
  mo_energy =
[-1.20274045e+02 -1.22554446e+01 -6.65605664e+00 -6.65605664e+00
 -6.65605664e+00 -1.16372111e+00 -2.36606521e-01 -2.36606521e-01
 -2.36606521e-01  8.63654311e+01  6.78422030e+02  3.93615425e+03
  2.96763158e+04  1.56378124e+05  7.03819090e+05]
E1 = -706.5365486728491  E_coul = 198.89707612169312
cycle= 4 E= -507.639472551156  delta_E= -4.02e-11  |g|= 3.72e-07  |ddm|= 3.44e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.5365486728491  E_coul = 198.89707612169312
  HOMO = -0.236606505052871  LUMO = 86.36543140003
  mo_energy =
[-1.20274044e+02 -1.22554445e+01 -6.65605648e+00 -6.65605648e+00
 -6.65605648e+00 -1.16372110e+00 -2.36606505e-01 -2.36606505e-01
 -2.36606505e-01  8.63654314e+01  6.78422031e+02  3.93615425e+03
  2.96763158e+04  1.56378124e+05  7.03819090e+05]
E1 = -706.5365487097046  E_coul = 198.89707615854908
Extra cycle  E= -507.639472551155  delta_E= 5.68e-13  |g|= 6.42e-09  |ddm|= 1.64e-08
    CPU time for scf_cycle      0.10 sec, wall time      0.11 sec
exp = [2.93679451e+05 7.34198652e+04 1.83539566e+04 2.23411955e+03
 4.56781111e+02 1.21713930e+02 3.75853732e+01 4.74142383e+00
 3.91231385e-01 8.59602607e+00 4.90776056e-01]
E = -507.63947255115545
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((11, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([7.3419862888950534e+04,1.8354415279684519e+04,2.2337565691104060e+03,4.5509411588185179e+02,1.2132000689951782e+02,3.7517668969809321e+01,4.7408530341284303e+00,3.9118871783972831e-01,8.5986666061044215e+00,4.9085282207620301e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "9s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:04:15 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  293679.450881        1
[INPUT] 0    0    [1    /1   ]  73419.8652448        1
[INPUT] 0    0    [1    /1   ]  18353.9566096        1
[INPUT] 0    0    [1    /1   ]  2234.11955003        1
[INPUT] 0    0    [1    /1   ]  456.781110628        1
[INPUT] 0    0    [1    /1   ]  121.713929672        1
[INPUT] 0    0    [1    /1   ]  37.5853732322        1
[INPUT] 0    0    [1    /1   ]  4.74142382873        1
[INPUT] 0    0    [1    /1   ]  0.391231385453       1
[INPUT] 1    0    [1    /1   ]  8.59602606648        1
[INPUT] 1    0    [1    /1   ]  0.49077605592        1

nuclear repulsion = 0
number of shells = 11
number of NR pGTOs = 15
number of NR cGTOs = 15
basis = {'Ar': [[0, [293679.4508812075, 1.0]], [0, [73419.8652448095, 1.0]], [0, [18353.956609562592, 1.0]], [0, [2234.1195500322274, 1.0]], [0, [456.7811106282708, 1.0]], [0, [121.71392967235184, 1.0]], [0, [37.58537323224877, 1.0]], [0, [4.741423828726367, 1.0]], [0, [0.3912313854532506, 1.0]], [1, [8.59602606648284, 1.0]], [1, [0.4907760559198334, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [293679.45088121]
bas 1, expnt(s) = [73419.86524481]
bas 2, expnt(s) = [18353.95660956]
bas 3, expnt(s) = [2234.11955003]
bas 4, expnt(s) = [456.78111063]
bas 5, expnt(s) = [121.71392967]
bas 6, expnt(s) = [37.58537323]
bas 7, expnt(s) = [4.74142383]
bas 8, expnt(s) = [0.39123139]
bas 9, expnt(s) = [8.59602607]
bas 10, expnt(s) = [0.49077606]
CPU time:        85.63
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]
 [ 0  1  1  1  0 44 45  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 2.93679451e+05 3.18727983e+04 7.34198652e+04 1.12687362e+04
 1.83539566e+04 3.98393551e+03 2.23411955e+03 8.21003164e+02
 4.56781111e+02 2.49629626e+02 1.21713930e+02 9.25806525e+01
 3.75853732e+01 3.83512192e+01 4.74142383e+00 8.11795440e+00
 3.91231385e-01 1.24979934e+00 8.59602607e+00 4.29394569e+01
 4.90776056e-01 1.19836358e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.320072079696367
cond(S) = 45.76948273533012
E1 = -688.8572695534584  E_coul = 184.90197467578528
init E= -503.955294877673
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.680940946191238  LUMO = 85.0362774075262
  mo_energy =
[-1.21653017e+02 -1.32821633e+01 -7.62252178e+00 -7.62252178e+00
 -7.62252178e+00 -1.65081709e+00 -6.80940946e-01 -6.80940946e-01
 -6.80940946e-01  8.50362774e+01  6.77062422e+02  3.93491896e+03
  2.96752469e+04  1.56377127e+05  7.03818125e+05]
E1 = -706.5684279802106  E_coul = 198.92938332177408
cycle= 1 E= -507.639044658436  delta_E= -3.68  |g|= 0.317  |ddm|= 0.301
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.417188
diis-c [-0.17404613  1.        ]
  HOMO = -0.23642917696357  LUMO = 86.3689937174352
  mo_energy =
[-1.20265292e+02 -1.22542400e+01 -6.65418881e+00 -6.65418881e+00
 -6.65418881e+00 -1.16365568e+00 -2.36429177e-01 -2.36429177e-01
 -2.36429177e-01  8.63689937e+01  6.78432731e+02  3.93617028e+03
  2.96763352e+04  1.56378144e+05  7.03819111e+05]
E1 = -706.5369961619234  E_coul = 198.89752372087648
cycle= 2 E= -507.639472441047  delta_E= -0.000428  |g|= 0.00474  |ddm|= 0.0143
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00504081
diis-c [-2.53635329e-05 -5.15512555e-04  1.00051551e+00]
  HOMO = -0.236604311985703  LUMO = 86.3654756920617
  mo_energy =
[-1.20273931e+02 -1.22554288e+01 -6.65602970e+00 -6.65602970e+00
 -6.65602970e+00 -1.16372045e+00 -2.36604312e-01 -2.36604312e-01
 -2.36604312e-01  8.63654757e+01  6.78422147e+02  3.93615439e+03
  2.96763159e+04  1.56378124e+05  7.03819090e+05]
E1 = -706.5365559083118  E_coul = 198.89708335719598
cycle= 3 E= -507.639472551116  delta_E= -1.1e-07  |g|= 9.47e-05  |ddm|= 0.000202
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.000126721
diis-c [-3.93835114e-10  3.38268057e-05 -2.54594892e-02  1.02542566e+00]
  HOMO = -0.236606521289844  LUMO = 86.3654310632337
  mo_energy =
[-1.20274045e+02 -1.22554446e+01 -6.65605664e+00 -6.65605664e+00
 -6.65605664e+00 -1.16372111e+00 -2.36606521e-01 -2.36606521e-01
 -2.36606521e-01  8.63654311e+01  6.78422030e+02  3.93615425e+03
  2.96763158e+04  1.56378124e+05  7.03819090e+05]
E1 = -706.5365486728491  E_coul = 198.89707612169312
cycle= 4 E= -507.639472551156  delta_E= -4.02e-11  |g|= 3.72e-07  |ddm|= 3.44e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.5365486728491  E_coul = 198.89707612169312
  HOMO = -0.236606505052871  LUMO = 86.36543140003
  mo_energy =
[-1.20274044e+02 -1.22554445e+01 -6.65605648e+00 -6.65605648e+00
 -6.65605648e+00 -1.16372110e+00 -2.36606505e-01 -2.36606505e-01
 -2.36606505e-01  8.63654314e+01  6.78422031e+02  3.93615425e+03
  2.96763158e+04  1.56378124e+05  7.03819090e+05]
E1 = -706.5365487097046  E_coul = 198.89707615854908
Extra cycle  E= -507.639472551155  delta_E= 5.68e-13  |g|= 6.42e-09  |ddm|= 1.64e-08
    CPU time for scf_cycle      0.10 sec, wall time      0.10 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 45.76948273533012
E1 = -706.5365487097046  E_coul = 198.89707615854908
init E= -507.639472551155
    CPU time for initialize scf      0.08 sec, wall time      0.08 sec
  HOMO = -0.23660650486303  LUMO = 86.3654314041474
  mo_energy =
[-1.20274044e+02 -1.22554445e+01 -6.65605648e+00 -6.65605648e+00
 -6.65605648e+00 -1.16372110e+00 -2.36606505e-01 -2.36606505e-01
 -2.36606505e-01  8.63654314e+01  6.78422031e+02  3.93615425e+03
  2.96763158e+04  1.56378124e+05  7.03819090e+05]
E1 = -706.5365487102623  E_coul = 198.89707615910658
cycle= 1 E= -507.639472551156  delta_E= -2.84e-13  |g|= 1.29e-10  |ddm|= 2.53e-10
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -706.5365487102623  E_coul = 198.89707615910658
  HOMO = -0.236606504860347  LUMO = 86.365431404205
  mo_energy =
[-1.20274044e+02 -1.22554445e+01 -6.65605648e+00 -6.65605648e+00
 -6.65605648e+00 -1.16372110e+00 -2.36606505e-01 -2.36606505e-01
 -2.36606505e-01  8.63654314e+01  6.78422031e+02  3.93615425e+03
  2.96763158e+04  1.56378124e+05  7.03819090e+05]
E1 = -706.536548710272  E_coul = 198.89707615911604
Extra cycle  E= -507.639472551156  delta_E= -1.71e-13  |g|= 2.41e-11  |ddm|= 4.5e-12
    CPU time for scf_cycle      0.14 sec, wall time      0.15 sec
exp = [2.93679451e+05 7.34198652e+04 1.83539566e+04 2.23411955e+03
 4.56781111e+02 1.21713930e+02 3.75853732e+01 4.74142383e+00
 3.91231385e-01 8.59602607e+00 4.90776056e-01]
grad_E = [ 9.41959210e-09 -3.23963813e-08  6.40010981e-06 -9.11190324e-06
 -1.72800276e-06  2.74477274e-05 -7.02069038e-05 -5.42398196e-05
  4.10825551e-05 -2.11826072e-03 -8.75103064e-05]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((11, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([7.3419862888950534e+04,1.8354415279684519e+04,2.2337565691104060e+03,4.5509411588185179e+02,1.2132000689951782e+02,3.7517668969809321e+01,4.7408530341284303e+00,3.9118871783972831e-01,8.5986666061044215e+00,4.9085282207620301e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "9s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:04:18 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  293679.450803        1
[INPUT] 0    0    [1    /1   ]  73419.8655194        1
[INPUT] 0    0    [1    /1   ]  18353.9031476        1
[INPUT] 0    0    [1    /1   ]  2234.16193465        1
[INPUT] 0    0    [1    /1   ]  456.976676109        1
[INPUT] 0    0    [1    /1   ]  121.762448865        1
[INPUT] 0    0    [1    /1   ]  37.5975288685        1
[INPUT] 0    0    [1    /1   ]  4.74134428554        1
[INPUT] 0    0    [1    /1   ]  0.391213371978       1
[INPUT] 1    0    [1    /1   ]  8.59777976799        1
[INPUT] 1    0    [1    /1   ]  0.490824813494       1

nuclear repulsion = 0
number of shells = 11
number of NR pGTOs = 15
number of NR cGTOs = 15
basis = {'Ar': [[0, [293679.45080257754, 1.0]], [0, [73419.86551939692, 1.0]], [0, [18353.903147619305, 1.0]], [0, [2234.1619346491616, 1.0]], [0, [456.9766761093164, 1.0]], [0, [121.7624488648758, 1.0]], [0, [37.597528868534866, 1.0]], [0, [4.741344285537143, 1.0]], [0, [0.39121337197781253, 1.0]], [1, [8.597779767990806, 1.0]], [1, [0.49082481349418805, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [293679.45080258]
bas 1, expnt(s) = [73419.8655194]
bas 2, expnt(s) = [18353.90314762]
bas 3, expnt(s) = [2234.16193465]
bas 4, expnt(s) = [456.97667611]
bas 5, expnt(s) = [121.76244886]
bas 6, expnt(s) = [37.59752887]
bas 7, expnt(s) = [4.74134429]
bas 8, expnt(s) = [0.39121337]
bas 9, expnt(s) = [8.59777977]
bas 10, expnt(s) = [0.49082481]
CPU time:        88.77
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]
 [ 0  1  1  1  0 44 45  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 2.93679451e+05 3.18727983e+04 7.34198655e+04 1.12687362e+04
 1.83539031e+04 3.98392681e+03 2.23416193e+03 8.21014846e+02
 4.56976676e+02 2.49709779e+02 1.21762449e+02 9.26083304e+01
 3.75975289e+01 3.83605213e+01 4.74134429e+00 8.11785226e+00
 3.91213372e-01 1.24975618e+00 8.59777977e+00 4.29504075e+01
 4.90824813e-01 1.19851240e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.320006352880014
cond(S) = 45.77105649766691
E1 = -688.8657818846846  E_coul = 184.91102748464527
init E= -503.954754400039
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.680912021469454  LUMO = 85.0829751682879
  mo_energy =
[-1.21651238e+02 -1.32814692e+01 -7.62190050e+00 -7.62190050e+00
 -7.62190050e+00 -1.65074306e+00 -6.80912021e-01 -6.80912021e-01
 -6.80912021e-01  8.50829752e+01  6.77401162e+02  3.93577614e+03
  2.96761458e+04  1.56377841e+05  7.03818720e+05]
E1 = -706.5794054778964  E_coul = 198.94035800918675
cycle= 1 E= -507.63904746871  delta_E= -3.68  |g|= 0.317  |ddm|= 0.301
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.417198
diis-c [-0.17405423  1.        ]
  HOMO = -0.236326022548633  LUMO = 86.4159371559033
  mo_energy =
[-1.20263320e+02 -1.22534261e+01 -6.65343034e+00 -6.65343034e+00
 -6.65343034e+00 -1.16353988e+00 -2.36326023e-01 -2.36326023e-01
 -2.36326023e-01  8.64159372e+01  6.78771668e+02  3.93702767e+03
  2.96772344e+04  1.56378858e+05  7.03819706e+05]
E1 = -706.547989888931  E_coul = 198.90851479203047
cycle= 2 E= -507.639475096901  delta_E= -0.000428  |g|= 0.00474  |ddm|= 0.0143
    CPU time for cycle= 2      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.00504014
diis-c [-2.53563190e-05 -5.18440131e-04  1.00051844e+00]
  HOMO = -0.236501096012017  LUMO = 86.4124200411281
  mo_energy =
[-1.20271956e+02 -1.22546141e+01 -6.65527019e+00 -6.65527019e+00
 -6.65527019e+00 -1.16360460e+00 -2.36501096e-01 -2.36501096e-01
 -2.36501096e-01  8.64124200e+01  6.78761087e+02  3.93701178e+03
  2.96772151e+04  1.56378838e+05  7.03819686e+05]
E1 = -706.5475499970844  E_coul = 198.90807479020606
cycle= 3 E= -507.639475206878  delta_E= -1.1e-07  |g|= 9.47e-05  |ddm|= 0.000201
    CPU time for cycle= 3      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.000126655
diis-c [-3.93453800e-10  3.38321475e-05 -2.54499044e-02  1.02541607e+00]
  HOMO = -0.236503303490799  LUMO = 86.4123754536193
  mo_energy =
[-1.20272069e+02 -1.22546298e+01 -6.65529711e+00 -6.65529711e+00
 -6.65529711e+00 -1.16360526e+00 -2.36503303e-01 -2.36503303e-01
 -2.36503303e-01  8.64123755e+01  6.78760970e+02  3.93701164e+03
  2.96772150e+04  1.56378838e+05  7.03819685e+05]
E1 = -706.5475427711871  E_coul = 198.90806756426858
cycle= 4 E= -507.639475206919  delta_E= -4.02e-11  |g|= 3.72e-07  |ddm|= 3.44e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.5475427711871  E_coul = 198.90806756426858
  HOMO = -0.236503287273085  LUMO = 86.4123757901265
  mo_energy =
[-1.20272068e+02 -1.22546297e+01 -6.65529695e+00 -6.65529695e+00
 -6.65529695e+00 -1.16360525e+00 -2.36503287e-01 -2.36503287e-01
 -2.36503287e-01  8.64123758e+01  6.78760971e+02  3.93701164e+03
  2.96772150e+04  1.56378838e+05  7.03819685e+05]
E1 = -706.5475428079866  E_coul = 198.9080676010689
Extra cycle  E= -507.639475206918  delta_E= 7.96e-13  |g|= 6.41e-09  |ddm|= 1.63e-08
    CPU time for scf_cycle      0.10 sec, wall time      0.10 sec
exp = [2.93679451e+05 7.34198655e+04 1.83539031e+04 2.23416193e+03
 4.56976676e+02 1.21762449e+02 3.75975289e+01 4.74134429e+00
 3.91213372e-01 8.59777977e+00 4.90824813e-01]
E = -507.6394752069177
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((11, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([7.3419862888950534e+04,1.8354415279684519e+04,2.2337565691104060e+03,4.5509411588185179e+02,1.2132000689951782e+02,3.7517668969809321e+01,4.7408530341284303e+00,3.9118871783972831e-01,8.5986666061044215e+00,4.9085282207620301e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "9s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:04:18 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  293679.450803        1
[INPUT] 0    0    [1    /1   ]  73419.8655194        1
[INPUT] 0    0    [1    /1   ]  18353.9031476        1
[INPUT] 0    0    [1    /1   ]  2234.16193465        1
[INPUT] 0    0    [1    /1   ]  456.976676109        1
[INPUT] 0    0    [1    /1   ]  121.762448865        1
[INPUT] 0    0    [1    /1   ]  37.5975288685        1
[INPUT] 0    0    [1    /1   ]  4.74134428554        1
[INPUT] 0    0    [1    /1   ]  0.391213371978       1
[INPUT] 1    0    [1    /1   ]  8.59777976799        1
[INPUT] 1    0    [1    /1   ]  0.490824813494       1

nuclear repulsion = 0
number of shells = 11
number of NR pGTOs = 15
number of NR cGTOs = 15
basis = {'Ar': [[0, [293679.45080257754, 1.0]], [0, [73419.86551939692, 1.0]], [0, [18353.903147619305, 1.0]], [0, [2234.1619346491616, 1.0]], [0, [456.9766761093164, 1.0]], [0, [121.7624488648758, 1.0]], [0, [37.597528868534866, 1.0]], [0, [4.741344285537143, 1.0]], [0, [0.39121337197781253, 1.0]], [1, [8.597779767990806, 1.0]], [1, [0.49082481349418805, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [293679.45080258]
bas 1, expnt(s) = [73419.8655194]
bas 2, expnt(s) = [18353.90314762]
bas 3, expnt(s) = [2234.16193465]
bas 4, expnt(s) = [456.97667611]
bas 5, expnt(s) = [121.76244886]
bas 6, expnt(s) = [37.59752887]
bas 7, expnt(s) = [4.74134429]
bas 8, expnt(s) = [0.39121337]
bas 9, expnt(s) = [8.59777977]
bas 10, expnt(s) = [0.49082481]
CPU time:        89.28
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]
 [ 0  1  1  1  0 44 45  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 2.93679451e+05 3.18727983e+04 7.34198655e+04 1.12687362e+04
 1.83539031e+04 3.98392681e+03 2.23416193e+03 8.21014846e+02
 4.56976676e+02 2.49709779e+02 1.21762449e+02 9.26083304e+01
 3.75975289e+01 3.83605213e+01 4.74134429e+00 8.11785226e+00
 3.91213372e-01 1.24975618e+00 8.59777977e+00 4.29504075e+01
 4.90824813e-01 1.19851240e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.320006352880014
cond(S) = 45.77105649766691
E1 = -688.8657818846846  E_coul = 184.91102748464527
init E= -503.954754400039
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.680912021469454  LUMO = 85.0829751682879
  mo_energy =
[-1.21651238e+02 -1.32814692e+01 -7.62190050e+00 -7.62190050e+00
 -7.62190050e+00 -1.65074306e+00 -6.80912021e-01 -6.80912021e-01
 -6.80912021e-01  8.50829752e+01  6.77401162e+02  3.93577614e+03
  2.96761458e+04  1.56377841e+05  7.03818720e+05]
E1 = -706.5794054778964  E_coul = 198.94035800918675
cycle= 1 E= -507.63904746871  delta_E= -3.68  |g|= 0.317  |ddm|= 0.301
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.417198
diis-c [-0.17405423  1.        ]
  HOMO = -0.236326022548633  LUMO = 86.4159371559033
  mo_energy =
[-1.20263320e+02 -1.22534261e+01 -6.65343034e+00 -6.65343034e+00
 -6.65343034e+00 -1.16353988e+00 -2.36326023e-01 -2.36326023e-01
 -2.36326023e-01  8.64159372e+01  6.78771668e+02  3.93702767e+03
  2.96772344e+04  1.56378858e+05  7.03819706e+05]
E1 = -706.547989888931  E_coul = 198.90851479203047
cycle= 2 E= -507.639475096901  delta_E= -0.000428  |g|= 0.00474  |ddm|= 0.0143
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.00504014
diis-c [-2.53563190e-05 -5.18440131e-04  1.00051844e+00]
  HOMO = -0.236501096012017  LUMO = 86.4124200411281
  mo_energy =
[-1.20271956e+02 -1.22546141e+01 -6.65527019e+00 -6.65527019e+00
 -6.65527019e+00 -1.16360460e+00 -2.36501096e-01 -2.36501096e-01
 -2.36501096e-01  8.64124200e+01  6.78761087e+02  3.93701178e+03
  2.96772151e+04  1.56378838e+05  7.03819686e+05]
E1 = -706.5475499970844  E_coul = 198.90807479020606
cycle= 3 E= -507.639475206878  delta_E= -1.1e-07  |g|= 9.47e-05  |ddm|= 0.000201
    CPU time for cycle= 3      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.000126655
diis-c [-3.93453800e-10  3.38321475e-05 -2.54499044e-02  1.02541607e+00]
  HOMO = -0.236503303490799  LUMO = 86.4123754536193
  mo_energy =
[-1.20272069e+02 -1.22546298e+01 -6.65529711e+00 -6.65529711e+00
 -6.65529711e+00 -1.16360526e+00 -2.36503303e-01 -2.36503303e-01
 -2.36503303e-01  8.64123755e+01  6.78760970e+02  3.93701164e+03
  2.96772150e+04  1.56378838e+05  7.03819685e+05]
E1 = -706.5475427711871  E_coul = 198.90806756426858
cycle= 4 E= -507.639475206919  delta_E= -4.02e-11  |g|= 3.72e-07  |ddm|= 3.44e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.5475427711871  E_coul = 198.90806756426858
  HOMO = -0.236503287273085  LUMO = 86.4123757901265
  mo_energy =
[-1.20272068e+02 -1.22546297e+01 -6.65529695e+00 -6.65529695e+00
 -6.65529695e+00 -1.16360525e+00 -2.36503287e-01 -2.36503287e-01
 -2.36503287e-01  8.64123758e+01  6.78760971e+02  3.93701164e+03
  2.96772150e+04  1.56378838e+05  7.03819685e+05]
E1 = -706.5475428079866  E_coul = 198.9080676010689
Extra cycle  E= -507.639475206918  delta_E= 7.96e-13  |g|= 6.41e-09  |ddm|= 1.63e-08
    CPU time for scf_cycle      0.09 sec, wall time      0.10 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 45.77105649766691
E1 = -706.5475428079866  E_coul = 198.9080676010689
init E= -507.639475206918
    CPU time for initialize scf      0.07 sec, wall time      0.07 sec
  HOMO = -0.236503287083516  LUMO = 86.4123757942356
  mo_energy =
[-1.20272068e+02 -1.22546297e+01 -6.65529695e+00 -6.65529695e+00
 -6.65529695e+00 -1.16360525e+00 -2.36503287e-01 -2.36503287e-01
 -2.36503287e-01  8.64123758e+01  6.78760971e+02  3.93701164e+03
  2.96772150e+04  1.56378838e+05  7.03819685e+05]
E1 = -706.5475428085433  E_coul = 198.9080676016255
cycle= 1 E= -507.639475206918  delta_E= -1.14e-13  |g|= 1.28e-10  |ddm|= 2.52e-10
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -706.5475428085433  E_coul = 198.9080676016255
  HOMO = -0.236503287080842  LUMO = 86.4123757942928
  mo_energy =
[-1.20272068e+02 -1.22546297e+01 -6.65529695e+00 -6.65529695e+00
 -6.65529695e+00 -1.16360525e+00 -2.36503287e-01 -2.36503287e-01
 -2.36503287e-01  8.64123758e+01  6.78760971e+02  3.93701164e+03
  2.96772150e+04  1.56378838e+05  7.03819685e+05]
E1 = -706.5475428085531  E_coul = 198.90806760163525
Extra cycle  E= -507.639475206918  delta_E=    0  |g|= 2.87e-11  |ddm|= 4.5e-12
    CPU time for scf_cycle      0.14 sec, wall time      0.14 sec
exp = [2.93679451e+05 7.34198655e+04 1.83539031e+04 2.23416193e+03
 4.56976676e+02 1.21762449e+02 3.75975289e+01 4.74134429e+00
 3.91213372e-01 8.59777977e+00 4.90824813e-01]
grad_E = [ 9.43025902e-09 -3.23612721e-08  6.40670994e-06 -9.71672224e-06
  3.38143552e-06  1.15160303e-05 -2.22439777e-05 -1.82010297e-05
  1.34505522e-05 -6.86254530e-04 -2.83073882e-05]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((11, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([7.3419862888950534e+04,1.8354415279684519e+04,2.2337565691104060e+03,4.5509411588185179e+02,1.2132000689951782e+02,3.7517668969809321e+01,4.7408530341284303e+00,3.9118871783972831e-01,8.5986666061044215e+00,4.9085282207620301e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "9s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:04:21 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  293679.450824        1
[INPUT] 0    0    [1    /1   ]  73419.8654445        1
[INPUT] 0    0    [1    /1   ]  18353.9177371        1
[INPUT] 0    0    [1    /1   ]  2234.15027945        1
[INPUT] 0    0    [1    /1   ]  456.924788846        1
[INPUT] 0    0    [1    /1   ]  121.743846856        1
[INPUT] 0    0    [1    /1   ]  37.5950065559        1
[INPUT] 0    0    [1    /1   ]  4.74128443047        1
[INPUT] 0    0    [1    /1   ]  0.391204746614       1
[INPUT] 1    0    [1    /1   ]  8.59854206377        1
[INPUT] 1    0    [1    /1   ]  0.490846187843       1

nuclear repulsion = 0
number of shells = 11
number of NR pGTOs = 15
number of NR cGTOs = 15
basis = {'Ar': [[0, [293679.45082403533, 1.0]], [0, [73419.86544447292, 1.0]], [0, [18353.91773706088, 1.0]], [0, [2234.1502794467115, 1.0]], [0, [456.92478884647625, 1.0]], [0, [121.74384685647904, 1.0]], [0, [37.595006555915504, 1.0]], [0, [4.741284430472546, 1.0]], [0, [0.3912047466143846, 1.0]], [1, [8.598542063772959, 1.0]], [1, [0.49084618784271267, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [293679.45082404]
bas 1, expnt(s) = [73419.86544447]
bas 2, expnt(s) = [18353.91773706]
bas 3, expnt(s) = [2234.15027945]
bas 4, expnt(s) = [456.92478885]
bas 5, expnt(s) = [121.74384686]
bas 6, expnt(s) = [37.59500656]
bas 7, expnt(s) = [4.74128443]
bas 8, expnt(s) = [0.39120475]
bas 9, expnt(s) = [8.59854206]
bas 10, expnt(s) = [0.49084619]
CPU time:        92.41
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]
 [ 0  1  1  1  0 44 45  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 2.93679451e+05 3.18727983e+04 7.34198654e+04 1.12687362e+04
 1.83539177e+04 3.98392918e+03 2.23415028e+03 8.21011634e+02
 4.56924789e+02 2.49688514e+02 1.21743847e+02 9.25977192e+01
 3.75950066e+01 3.83585912e+01 4.74128443e+00 8.11777540e+00
 3.91204747e-01 1.24973551e+00 8.59854206e+00 4.29551676e+01
 4.90846188e-01 1.19857764e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319978462964528
cond(S) = 45.77120811453117
E1 = -688.8697148002576  E_coul = 184.9149295885883
init E= -503.954785211669
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.680899338988005  LUMO = 85.0701327729886
  mo_energy =
[-1.21650472e+02 -1.32811678e+01 -7.62163388e+00 -7.62163388e+00
 -7.62163388e+00 -1.65070954e+00 -6.80899339e-01 -6.80899339e-01
 -6.80899339e-01  8.50701328e+01  6.77299318e+02  3.93553128e+03
  2.96758922e+04  1.56377639e+05  7.03818551e+05]
E1 = -706.5841365045957  E_coul = 198.94508885192428
cycle= 1 E= -507.639047652671  delta_E= -3.68  |g|= 0.317  |ddm|= 0.301
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.417211
diis-c [-0.17406525  1.        ]
  HOMO = -0.236281634925239  LUMO = 86.4031609271855
  mo_energy =
[-1.20262468e+02 -1.22530741e+01 -6.65310468e+00 -6.65310468e+00
 -6.65310468e+00 -1.16348954e+00 -2.36281635e-01 -2.36281635e-01
 -2.36281635e-01  8.64031609e+01  6.78669914e+02  3.93678288e+03
  2.96769808e+04  1.56378656e+05  7.03819537e+05]
E1 = -706.5527103940303  E_coul = 198.91323492711498
cycle= 2 E= -507.639475466915  delta_E= -0.000428  |g|= 0.00474  |ddm|= 0.0143
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00504119
diis-c [-2.53668613e-05 -5.18270354e-04  1.00051827e+00]
  HOMO = -0.236456800060523  LUMO = 86.3996430593938
  mo_energy =
[-1.20271106e+02 -1.22542625e+01 -6.65494528e+00 -6.65494528e+00
 -6.65494528e+00 -1.16355428e+00 -2.36456800e-01 -2.36456800e-01
 -2.36456800e-01  8.63996431e+01  6.78659331e+02  3.93676699e+03
  2.96769615e+04  1.56378636e+05  7.03819517e+05]
E1 = -706.5522703058399  E_coul = 198.91279472887948
cycle= 3 E= -507.63947557696  delta_E= -1.1e-07  |g|= 9.47e-05  |ddm|= 0.000202
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.000126691
diis-c [-3.93691014e-10  3.38348492e-05 -2.54520092e-02  1.02541817e+00]
  HOMO = -0.236459008997412  LUMO = 86.399598455058
  mo_energy =
[-1.20271219e+02 -1.22542782e+01 -6.65497220e+00 -6.65497220e+00
 -6.65497220e+00 -1.16355494e+00 -2.36459009e-01 -2.36459009e-01
 -2.36459009e-01  8.63995985e+01  6.78659214e+02  3.93676685e+03
  2.96769614e+04  1.56378636e+05  7.03819517e+05]
E1 = -706.5522630758911  E_coul = 198.91278749889045
cycle= 4 E= -507.639475577001  delta_E= -4.02e-11  |g|= 3.72e-07  |ddm|= 3.44e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.5522630758911  E_coul = 198.91278749889045
  HOMO = -0.236458992768266  LUMO = 86.3995987916821
  mo_energy =
[-1.20271218e+02 -1.22542781e+01 -6.65497204e+00 -6.65497204e+00
 -6.65497204e+00 -1.16355493e+00 -2.36458993e-01 -2.36458993e-01
 -2.36458993e-01  8.63995988e+01  6.78659215e+02  3.93676685e+03
  2.96769614e+04  1.56378636e+05  7.03819517e+05]
E1 = -706.5522631127133  E_coul = 198.9127875357131
Extra cycle  E= -507.639475577  delta_E= 5.12e-13  |g|= 6.41e-09  |ddm|= 1.63e-08
    CPU time for scf_cycle      0.10 sec, wall time      0.11 sec
exp = [2.93679451e+05 7.34198654e+04 1.83539177e+04 2.23415028e+03
 4.56924789e+02 1.21743847e+02 3.75950066e+01 4.74128443e+00
 3.91204747e-01 8.59854206e+00 4.90846188e-01]
E = -507.63947557700016
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((11, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([7.3419862888950534e+04,1.8354415279684519e+04,2.2337565691104060e+03,4.5509411588185179e+02,1.2132000689951782e+02,3.7517668969809321e+01,4.7408530341284303e+00,3.9118871783972831e-01,8.5986666061044215e+00,4.9085282207620301e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "9s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:04:22 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  293679.450824        1
[INPUT] 0    0    [1    /1   ]  73419.8654445        1
[INPUT] 0    0    [1    /1   ]  18353.9177371        1
[INPUT] 0    0    [1    /1   ]  2234.15027945        1
[INPUT] 0    0    [1    /1   ]  456.924788846        1
[INPUT] 0    0    [1    /1   ]  121.743846856        1
[INPUT] 0    0    [1    /1   ]  37.5950065559        1
[INPUT] 0    0    [1    /1   ]  4.74128443047        1
[INPUT] 0    0    [1    /1   ]  0.391204746614       1
[INPUT] 1    0    [1    /1   ]  8.59854206377        1
[INPUT] 1    0    [1    /1   ]  0.490846187843       1

nuclear repulsion = 0
number of shells = 11
number of NR pGTOs = 15
number of NR cGTOs = 15
basis = {'Ar': [[0, [293679.45082403533, 1.0]], [0, [73419.86544447292, 1.0]], [0, [18353.91773706088, 1.0]], [0, [2234.1502794467115, 1.0]], [0, [456.92478884647625, 1.0]], [0, [121.74384685647904, 1.0]], [0, [37.595006555915504, 1.0]], [0, [4.741284430472546, 1.0]], [0, [0.3912047466143846, 1.0]], [1, [8.598542063772959, 1.0]], [1, [0.49084618784271267, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [293679.45082404]
bas 1, expnt(s) = [73419.86544447]
bas 2, expnt(s) = [18353.91773706]
bas 3, expnt(s) = [2234.15027945]
bas 4, expnt(s) = [456.92478885]
bas 5, expnt(s) = [121.74384686]
bas 6, expnt(s) = [37.59500656]
bas 7, expnt(s) = [4.74128443]
bas 8, expnt(s) = [0.39120475]
bas 9, expnt(s) = [8.59854206]
bas 10, expnt(s) = [0.49084619]
CPU time:        92.94
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]
 [ 0  1  1  1  0 44 45  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 2.93679451e+05 3.18727983e+04 7.34198654e+04 1.12687362e+04
 1.83539177e+04 3.98392918e+03 2.23415028e+03 8.21011634e+02
 4.56924789e+02 2.49688514e+02 1.21743847e+02 9.25977192e+01
 3.75950066e+01 3.83585912e+01 4.74128443e+00 8.11777540e+00
 3.91204747e-01 1.24973551e+00 8.59854206e+00 4.29551676e+01
 4.90846188e-01 1.19857764e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319978462964528
cond(S) = 45.77120811453117
E1 = -688.8697148002576  E_coul = 184.9149295885883
init E= -503.954785211669
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.680899338988005  LUMO = 85.0701327729886
  mo_energy =
[-1.21650472e+02 -1.32811678e+01 -7.62163388e+00 -7.62163388e+00
 -7.62163388e+00 -1.65070954e+00 -6.80899339e-01 -6.80899339e-01
 -6.80899339e-01  8.50701328e+01  6.77299318e+02  3.93553128e+03
  2.96758922e+04  1.56377639e+05  7.03818551e+05]
E1 = -706.5841365045957  E_coul = 198.94508885192428
cycle= 1 E= -507.639047652671  delta_E= -3.68  |g|= 0.317  |ddm|= 0.301
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.417211
diis-c [-0.17406525  1.        ]
  HOMO = -0.236281634925239  LUMO = 86.4031609271855
  mo_energy =
[-1.20262468e+02 -1.22530741e+01 -6.65310468e+00 -6.65310468e+00
 -6.65310468e+00 -1.16348954e+00 -2.36281635e-01 -2.36281635e-01
 -2.36281635e-01  8.64031609e+01  6.78669914e+02  3.93678288e+03
  2.96769808e+04  1.56378656e+05  7.03819537e+05]
E1 = -706.5527103940303  E_coul = 198.91323492711498
cycle= 2 E= -507.639475466915  delta_E= -0.000428  |g|= 0.00474  |ddm|= 0.0143
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00504119
diis-c [-2.53668613e-05 -5.18270354e-04  1.00051827e+00]
  HOMO = -0.236456800060523  LUMO = 86.3996430593938
  mo_energy =
[-1.20271106e+02 -1.22542625e+01 -6.65494528e+00 -6.65494528e+00
 -6.65494528e+00 -1.16355428e+00 -2.36456800e-01 -2.36456800e-01
 -2.36456800e-01  8.63996431e+01  6.78659331e+02  3.93676699e+03
  2.96769615e+04  1.56378636e+05  7.03819517e+05]
E1 = -706.5522703058399  E_coul = 198.91279472887948
cycle= 3 E= -507.63947557696  delta_E= -1.1e-07  |g|= 9.47e-05  |ddm|= 0.000202
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.000126691
diis-c [-3.93691014e-10  3.38348492e-05 -2.54520092e-02  1.02541817e+00]
  HOMO = -0.236459008997412  LUMO = 86.399598455058
  mo_energy =
[-1.20271219e+02 -1.22542782e+01 -6.65497220e+00 -6.65497220e+00
 -6.65497220e+00 -1.16355494e+00 -2.36459009e-01 -2.36459009e-01
 -2.36459009e-01  8.63995985e+01  6.78659214e+02  3.93676685e+03
  2.96769614e+04  1.56378636e+05  7.03819517e+05]
E1 = -706.5522630758911  E_coul = 198.91278749889045
cycle= 4 E= -507.639475577001  delta_E= -4.02e-11  |g|= 3.72e-07  |ddm|= 3.44e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.5522630758911  E_coul = 198.91278749889045
  HOMO = -0.236458992768266  LUMO = 86.3995987916821
  mo_energy =
[-1.20271218e+02 -1.22542781e+01 -6.65497204e+00 -6.65497204e+00
 -6.65497204e+00 -1.16355493e+00 -2.36458993e-01 -2.36458993e-01
 -2.36458993e-01  8.63995988e+01  6.78659215e+02  3.93676685e+03
  2.96769614e+04  1.56378636e+05  7.03819517e+05]
E1 = -706.5522631127133  E_coul = 198.9127875357131
Extra cycle  E= -507.639475577  delta_E= 5.12e-13  |g|= 6.41e-09  |ddm|= 1.63e-08
    CPU time for scf_cycle      0.10 sec, wall time      0.10 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 45.77120811453117
E1 = -706.5522631127133  E_coul = 198.9127875357131
init E= -507.639475577
    CPU time for initialize scf      0.08 sec, wall time      0.08 sec
  HOMO = -0.236458992578538  LUMO = 86.3995987957936
  mo_energy =
[-1.20271218e+02 -1.22542781e+01 -6.65497204e+00 -6.65497204e+00
 -6.65497204e+00 -1.16355493e+00 -2.36458993e-01 -2.36458993e-01
 -2.36458993e-01  8.63995988e+01  6.78659215e+02  3.93676685e+03
  2.96769614e+04  1.56378636e+05  7.03819517e+05]
E1 = -706.5522631132706  E_coul = 198.91278753627012
cycle= 1 E= -507.639475577  delta_E= -2.84e-13  |g|= 1.28e-10  |ddm|= 2.53e-10
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -706.5522631132706  E_coul = 198.91278753627012
  HOMO = -0.236458992575859  LUMO = 86.3995987958531
  mo_energy =
[-1.20271218e+02 -1.22542781e+01 -6.65497204e+00 -6.65497204e+00
 -6.65497204e+00 -1.16355493e+00 -2.36458993e-01 -2.36458993e-01
 -2.36458993e-01  8.63995988e+01  6.78659215e+02  3.93676685e+03
  2.96769614e+04  1.56378636e+05  7.03819517e+05]
E1 = -706.55226311328  E_coul = 198.91278753627967
Extra cycle  E= -507.639475577  delta_E= 1.14e-13  |g|= 1.38e-11  |ddm|= 4.48e-12
    CPU time for scf_cycle      0.14 sec, wall time      0.14 sec
exp = [2.93679451e+05 7.34198654e+04 1.83539177e+04 2.23415028e+03
 4.56924789e+02 1.21743847e+02 3.75950066e+01 4.74128443e+00
 3.91204747e-01 8.59854206e+00 4.90846188e-01]
grad_E = [ 9.42879643e-09 -3.23659688e-08  6.40579782e-06 -9.64580731e-06
  3.89384797e-06  2.65222511e-06 -1.96180249e-06 -2.09431590e-06
  1.40885240e-06 -6.56820893e-05 -2.69753082e-06]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((11, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([7.3419862888950534e+04,1.8354415279684519e+04,2.2337565691104060e+03,4.5509411588185179e+02,1.2132000689951782e+02,3.7517668969809321e+01,4.7408530341284303e+00,3.9118871783972831e-01,8.5986666061044215e+00,4.9085282207620301e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "9s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:04:25 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  293679.450839        1
[INPUT] 0    0    [1    /1   ]  73419.8653937        1
[INPUT] 0    0    [1    /1   ]  18353.9276274        1
[INPUT] 0    0    [1    /1   ]  2234.14241458        1
[INPUT] 0    0    [1    /1   ]  456.889049964        1
[INPUT] 0    0    [1    /1   ]  121.733172723        1
[INPUT] 0    0    [1    /1   ]  37.5930612475        1
[INPUT] 0    0    [1    /1   ]  4.74127225567        1
[INPUT] 0    0    [1    /1   ]  0.391203584918       1
[INPUT] 1    0    [1    /1   ]  8.59862972372        1
[INPUT] 1    0    [1    /1   ]  0.490848683363       1

nuclear repulsion = 0
number of shells = 11
number of NR pGTOs = 15
number of NR cGTOs = 15
basis = {'Ar': [[0, [293679.4508385818, 1.0]], [0, [73419.8653936771, 1.0]], [0, [18353.927627435987, 1.0]], [0, [2234.142414581903, 1.0]], [0, [456.8890499644957, 1.0]], [0, [121.73317272260677, 1.0]], [0, [37.59306124750853, 1.0]], [0, [4.741272255672015, 1.0]], [0, [0.39120358491841306, 1.0]], [1, [8.598629723724605, 1.0]], [1, [0.4908486833632788, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [293679.45083858]
bas 1, expnt(s) = [73419.86539368]
bas 2, expnt(s) = [18353.92762744]
bas 3, expnt(s) = [2234.14241458]
bas 4, expnt(s) = [456.88904996]
bas 5, expnt(s) = [121.73317272]
bas 6, expnt(s) = [37.59306125]
bas 7, expnt(s) = [4.74127226]
bas 8, expnt(s) = [0.39120358]
bas 9, expnt(s) = [8.59862972]
bas 10, expnt(s) = [0.49084868]
CPU time:        96.15
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]
 [ 0  1  1  1  0 44 45  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 2.93679451e+05 3.18727983e+04 7.34198654e+04 1.12687362e+04
 1.83539276e+04 3.98393079e+03 2.23414241e+03 8.21009466e+02
 4.56889050e+02 2.49673866e+02 1.21733173e+02 9.25916301e+01
 3.75930612e+01 3.83571025e+01 4.74127226e+00 8.11775977e+00
 3.91203585e-01 1.24973273e+00 8.59862972e+00 4.29557150e+01
 4.90848683e-01 1.19858525e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319975411707848
cond(S) = 45.77116444606129
E1 = -688.8702185924387  E_coul = 184.91537195327717
init E= -503.954846639162
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.6808978513191  LUMO = 85.0615800132251
  mo_energy =
[-1.21650385e+02 -1.32811333e+01 -7.62160391e+00 -7.62160391e+00
 -7.62160391e+00 -1.65070541e+00 -6.80897851e-01 -6.80897851e-01
 -6.80897851e-01  8.50615800e+01  6.77233857e+02  3.93536935e+03
  2.96757233e+04  1.56377505e+05  7.03818439e+05]
E1 = -706.5846731340838  E_coul = 198.94562554046598
cycle= 1 E= -507.639047593618  delta_E= -3.68  |g|= 0.317  |ddm|= 0.301
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.417215
diis-c [-0.17406822  1.        ]
  HOMO = -0.236276625892739  LUMO = 86.3946071702041
  mo_energy =
[-1.20262370e+02 -1.22530340e+01 -6.65306804e+00 -6.65306804e+00
 -6.65306804e+00 -1.16348375e+00 -2.36276626e-01 -2.36276626e-01
 -2.36276626e-01  8.63946072e+01  6.78604465e+02  3.93662096e+03
  2.96768119e+04  1.56378522e+05  7.03819425e+05]
E1 = -706.5532420686073  E_coul = 198.91376658544027
cycle= 2 E= -507.639475483167  delta_E= -0.000428  |g|= 0.00474  |ddm|= 0.0143
    CPU time for cycle= 2      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.00504159
diis-c [-2.53709659e-05 -5.17944895e-04  1.00051794e+00]
  HOMO = -0.236451826840233  LUMO = 86.3910889721881
  mo_energy =
[-1.20271009e+02 -1.22542226e+01 -6.65490897e+00 -6.65490897e+00
 -6.65490897e+00 -1.16354851e+00 -2.36451827e-01 -2.36451827e-01
 -2.36451827e-01  8.63910890e+01  6.78593881e+02  3.93660507e+03
  2.96767927e+04  1.56378502e+05  7.03819405e+05]
E1 = -706.5528018823888  E_coul = 198.91332628914626
cycle= 3 E= -507.639475593243  delta_E= -1.1e-07  |g|= 9.47e-05  |ddm|= 0.000202
    CPU time for cycle= 3      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.000126709
diis-c [-3.93803182e-10  3.38354309e-05 -2.54535944e-02  1.02541976e+00]
  HOMO = -0.236454036425224  LUMO = 86.3910443585092
  mo_energy =
[-1.20271122e+02 -1.22542384e+01 -6.65493590e+00 -6.65493590e+00
 -6.65493590e+00 -1.16354917e+00 -2.36454036e-01 -2.36454036e-01
 -2.36454036e-01  8.63910444e+01  6.78593764e+02  3.93660492e+03
  2.96767925e+04  1.56378502e+05  7.03819405e+05]
E1 = -706.5527946502218  E_coul = 198.91331905693949
cycle= 4 E= -507.639475593282  delta_E= -3.97e-11  |g|= 3.72e-07  |ddm|= 3.44e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.5527946502218  E_coul = 198.91331905693949
  HOMO = -0.236454020190554  LUMO = 86.3910446951988
  mo_energy =
[-1.20271122e+02 -1.22542383e+01 -6.65493574e+00 -6.65493574e+00
 -6.65493574e+00 -1.16354916e+00 -2.36454020e-01 -2.36454020e-01
 -2.36454020e-01  8.63910447e+01  6.78593765e+02  3.93660493e+03
  2.96767925e+04  1.56378502e+05  7.03819405e+05]
E1 = -706.5527946870568  E_coul = 198.91331909377456
Extra cycle  E= -507.639475593282  delta_E= 1.14e-13  |g|= 6.42e-09  |ddm|= 1.63e-08
    CPU time for scf_cycle      0.10 sec, wall time      0.10 sec
exp = [2.93679451e+05 7.34198654e+04 1.83539276e+04 2.23414241e+03
 4.56889050e+02 1.21733173e+02 3.75930612e+01 4.74127226e+00
 3.91203585e-01 8.59862972e+00 4.90848683e-01]
E = -507.6394755932822
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((11, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([7.3419862888950534e+04,1.8354415279684519e+04,2.2337565691104060e+03,4.5509411588185179e+02,1.2132000689951782e+02,3.7517668969809321e+01,4.7408530341284303e+00,3.9118871783972831e-01,8.5986666061044215e+00,4.9085282207620301e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "9s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:04:26 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  293679.450839        1
[INPUT] 0    0    [1    /1   ]  73419.8653937        1
[INPUT] 0    0    [1    /1   ]  18353.9276274        1
[INPUT] 0    0    [1    /1   ]  2234.14241458        1
[INPUT] 0    0    [1    /1   ]  456.889049964        1
[INPUT] 0    0    [1    /1   ]  121.733172723        1
[INPUT] 0    0    [1    /1   ]  37.5930612475        1
[INPUT] 0    0    [1    /1   ]  4.74127225567        1
[INPUT] 0    0    [1    /1   ]  0.391203584918       1
[INPUT] 1    0    [1    /1   ]  8.59862972372        1
[INPUT] 1    0    [1    /1   ]  0.490848683363       1

nuclear repulsion = 0
number of shells = 11
number of NR pGTOs = 15
number of NR cGTOs = 15
basis = {'Ar': [[0, [293679.4508385818, 1.0]], [0, [73419.8653936771, 1.0]], [0, [18353.927627435987, 1.0]], [0, [2234.142414581903, 1.0]], [0, [456.8890499644957, 1.0]], [0, [121.73317272260677, 1.0]], [0, [37.59306124750853, 1.0]], [0, [4.741272255672015, 1.0]], [0, [0.39120358491841306, 1.0]], [1, [8.598629723724605, 1.0]], [1, [0.4908486833632788, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [293679.45083858]
bas 1, expnt(s) = [73419.86539368]
bas 2, expnt(s) = [18353.92762744]
bas 3, expnt(s) = [2234.14241458]
bas 4, expnt(s) = [456.88904996]
bas 5, expnt(s) = [121.73317272]
bas 6, expnt(s) = [37.59306125]
bas 7, expnt(s) = [4.74127226]
bas 8, expnt(s) = [0.39120358]
bas 9, expnt(s) = [8.59862972]
bas 10, expnt(s) = [0.49084868]
CPU time:        96.70
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]
 [ 0  1  1  1  0 44 45  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 2.93679451e+05 3.18727983e+04 7.34198654e+04 1.12687362e+04
 1.83539276e+04 3.98393079e+03 2.23414241e+03 8.21009466e+02
 4.56889050e+02 2.49673866e+02 1.21733173e+02 9.25916301e+01
 3.75930612e+01 3.83571025e+01 4.74127226e+00 8.11775977e+00
 3.91203585e-01 1.24973273e+00 8.59862972e+00 4.29557150e+01
 4.90848683e-01 1.19858525e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319975411707848
cond(S) = 45.77116444606129
E1 = -688.8702185924387  E_coul = 184.91537195327717
init E= -503.954846639162
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.6808978513191  LUMO = 85.0615800132251
  mo_energy =
[-1.21650385e+02 -1.32811333e+01 -7.62160391e+00 -7.62160391e+00
 -7.62160391e+00 -1.65070541e+00 -6.80897851e-01 -6.80897851e-01
 -6.80897851e-01  8.50615800e+01  6.77233857e+02  3.93536935e+03
  2.96757233e+04  1.56377505e+05  7.03818439e+05]
E1 = -706.5846731340838  E_coul = 198.94562554046598
cycle= 1 E= -507.639047593618  delta_E= -3.68  |g|= 0.317  |ddm|= 0.301
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.417215
diis-c [-0.17406822  1.        ]
  HOMO = -0.236276625892739  LUMO = 86.3946071702041
  mo_energy =
[-1.20262370e+02 -1.22530340e+01 -6.65306804e+00 -6.65306804e+00
 -6.65306804e+00 -1.16348375e+00 -2.36276626e-01 -2.36276626e-01
 -2.36276626e-01  8.63946072e+01  6.78604465e+02  3.93662096e+03
  2.96768119e+04  1.56378522e+05  7.03819425e+05]
E1 = -706.5532420686073  E_coul = 198.91376658544027
cycle= 2 E= -507.639475483167  delta_E= -0.000428  |g|= 0.00474  |ddm|= 0.0143
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00504159
diis-c [-2.53709659e-05 -5.17944895e-04  1.00051794e+00]
  HOMO = -0.236451826840233  LUMO = 86.3910889721881
  mo_energy =
[-1.20271009e+02 -1.22542226e+01 -6.65490897e+00 -6.65490897e+00
 -6.65490897e+00 -1.16354851e+00 -2.36451827e-01 -2.36451827e-01
 -2.36451827e-01  8.63910890e+01  6.78593881e+02  3.93660507e+03
  2.96767927e+04  1.56378502e+05  7.03819405e+05]
E1 = -706.5528018823888  E_coul = 198.91332628914626
cycle= 3 E= -507.639475593243  delta_E= -1.1e-07  |g|= 9.47e-05  |ddm|= 0.000202
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.000126709
diis-c [-3.93803182e-10  3.38354309e-05 -2.54535944e-02  1.02541976e+00]
  HOMO = -0.236454036425224  LUMO = 86.3910443585092
  mo_energy =
[-1.20271122e+02 -1.22542384e+01 -6.65493590e+00 -6.65493590e+00
 -6.65493590e+00 -1.16354917e+00 -2.36454036e-01 -2.36454036e-01
 -2.36454036e-01  8.63910444e+01  6.78593764e+02  3.93660492e+03
  2.96767925e+04  1.56378502e+05  7.03819405e+05]
E1 = -706.5527946502218  E_coul = 198.91331905693949
cycle= 4 E= -507.639475593282  delta_E= -3.97e-11  |g|= 3.72e-07  |ddm|= 3.44e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.5527946502218  E_coul = 198.91331905693949
  HOMO = -0.236454020190554  LUMO = 86.3910446951988
  mo_energy =
[-1.20271122e+02 -1.22542383e+01 -6.65493574e+00 -6.65493574e+00
 -6.65493574e+00 -1.16354916e+00 -2.36454020e-01 -2.36454020e-01
 -2.36454020e-01  8.63910447e+01  6.78593765e+02  3.93660493e+03
  2.96767925e+04  1.56378502e+05  7.03819405e+05]
E1 = -706.5527946870568  E_coul = 198.91331909377456
Extra cycle  E= -507.639475593282  delta_E= 1.14e-13  |g|= 6.42e-09  |ddm|= 1.63e-08
    CPU time for scf_cycle      0.10 sec, wall time      0.10 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 45.77116444606129
E1 = -706.5527946870568  E_coul = 198.91331909377456
init E= -507.639475593282
    CPU time for initialize scf      0.08 sec, wall time      0.08 sec
  HOMO = -0.236454020000747  LUMO = 86.3910446993125
  mo_energy =
[-1.20271122e+02 -1.22542383e+01 -6.65493574e+00 -6.65493574e+00
 -6.65493574e+00 -1.16354916e+00 -2.36454020e-01 -2.36454020e-01
 -2.36454020e-01  8.63910447e+01  6.78593765e+02  3.93660493e+03
  2.96767925e+04  1.56378502e+05  7.03819405e+05]
E1 = -706.552794687614  E_coul = 198.91331909433163
cycle= 1 E= -507.639475593282  delta_E= -1.14e-13  |g|= 1.27e-10  |ddm|= 2.53e-10
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -706.552794687614  E_coul = 198.91331909433163
  HOMO = -0.236454019998073  LUMO = 86.3910446993709
  mo_energy =
[-1.20271122e+02 -1.22542383e+01 -6.65493574e+00 -6.65493574e+00
 -6.65493574e+00 -1.16354916e+00 -2.36454020e-01 -2.36454020e-01
 -2.36454020e-01  8.63910447e+01  6.78593765e+02  3.93660493e+03
  2.96767925e+04  1.56378502e+05  7.03819405e+05]
E1 = -706.5527946876236  E_coul = 198.9133190943412
Extra cycle  E= -507.639475593282  delta_E= -1.14e-13  |g|= 8.53e-12  |ddm|= 4.48e-12
    CPU time for scf_cycle      0.14 sec, wall time      0.15 sec
exp = [2.93679451e+05 7.34198654e+04 1.83539276e+04 2.23414241e+03
 4.56889050e+02 1.21733173e+02 3.75930612e+01 4.74127226e+00
 3.91203585e-01 8.59862972e+00 4.90848683e-01]
grad_E = [ 9.42729251e-09 -3.23708828e-08  6.40486499e-06 -9.56450566e-06
  3.57265377e-06  1.21325765e-06  4.08258947e-07  9.59167092e-08
 -8.18033499e-08  5.34089077e-06  2.15625903e-07]
 message: Optimization terminated successfully
 success: True
  status: 0
     fun: -507.6394755932822
       x: [ 2.937e+05  7.342e+04  1.835e+04  2.234e+03  4.569e+02
            1.217e+02  3.759e+01  4.741e+00  3.912e-01  8.599e+00
            4.908e-01]
     nit: 28
     jac: [ 9.427e-09 -3.237e-08  6.405e-06 -9.565e-06  3.573e-06
            1.213e-06  4.083e-07  9.592e-08 -8.180e-08  5.341e-06
            2.156e-07]
    nfev: 32
    njev: 28
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((11, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([7.3419862888950534e+04,1.8354415279684519e+04,2.2337565691104060e+03,4.5509411588185179e+02,1.2132000689951782e+02,3.7517668969809321e+01,4.7408530341284303e+00,3.9118871783972831e-01,8.5986666061044215e+00,4.9085282207620301e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "9s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:04:29 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  293679.450839        1
[INPUT] 0    0    [1    /1   ]  73419.8653937        1
[INPUT] 0    0    [1    /1   ]  18353.9276274        1
[INPUT] 0    0    [1    /1   ]  2234.14241458        1
[INPUT] 0    0    [1    /1   ]  456.889049964        1
[INPUT] 0    0    [1    /1   ]  121.733172723        1
[INPUT] 0    0    [1    /1   ]  37.5930612475        1
[INPUT] 0    0    [1    /1   ]  4.74127225567        1
[INPUT] 0    0    [1    /1   ]  0.391203584918       1
[INPUT] 1    0    [1    /1   ]  8.59862972372        1
[INPUT] 1    0    [1    /1   ]  0.490848683363       1

nuclear repulsion = 0
number of shells = 11
number of NR pGTOs = 15
number of NR cGTOs = 15
basis = {'Ar': [[0, [293679.4508385818, 1.0]], [0, [73419.8653936771, 1.0]], [0, [18353.927627435987, 1.0]], [0, [2234.142414581903, 1.0]], [0, [456.8890499644957, 1.0]], [0, [121.73317272260677, 1.0]], [0, [37.59306124750853, 1.0]], [0, [4.741272255672015, 1.0]], [0, [0.39120358491841306, 1.0]], [1, [8.598629723724605, 1.0]], [1, [0.4908486833632788, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [293679.45083858]
bas 1, expnt(s) = [73419.86539368]
bas 2, expnt(s) = [18353.92762744]
bas 3, expnt(s) = [2234.14241458]
bas 4, expnt(s) = [456.88904996]
bas 5, expnt(s) = [121.73317272]
bas 6, expnt(s) = [37.59306125]
bas 7, expnt(s) = [4.74127226]
bas 8, expnt(s) = [0.39120358]
bas 9, expnt(s) = [8.59862972]
bas 10, expnt(s) = [0.49084868]
CPU time:        99.98
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]
 [ 0  1  1  1  0 44 45  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 2.93679451e+05 3.18727983e+04 7.34198654e+04 1.12687362e+04
 1.83539276e+04 3.98393079e+03 2.23414241e+03 8.21009466e+02
 4.56889050e+02 2.49673866e+02 1.21733173e+02 9.25916301e+01
 3.75930612e+01 3.83571025e+01 4.74127226e+00 8.11775977e+00
 3.91203585e-01 1.24973273e+00 8.59862972e+00 4.29557150e+01
 4.90848683e-01 1.19858525e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319975411707848
cond(S) = 45.77116444606129
E1 = -688.8702185924387  E_coul = 184.91537195327717
init E= -503.954846639162
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.6808978513191  LUMO = 85.0615800132251
  mo_energy =
[-1.21650385e+02 -1.32811333e+01 -7.62160391e+00 -7.62160391e+00
 -7.62160391e+00 -1.65070541e+00 -6.80897851e-01 -6.80897851e-01
 -6.80897851e-01  8.50615800e+01  6.77233857e+02  3.93536935e+03
  2.96757233e+04  1.56377505e+05  7.03818439e+05]
E1 = -706.5846731340838  E_coul = 198.94562554046598
cycle= 1 E= -507.639047593618  delta_E= -3.68  |g|= 0.317  |ddm|= 0.301
    CPU time for cycle= 1      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.417215
diis-c [-0.17406822  1.        ]
  HOMO = -0.236276625892739  LUMO = 86.3946071702041
  mo_energy =
[-1.20262370e+02 -1.22530340e+01 -6.65306804e+00 -6.65306804e+00
 -6.65306804e+00 -1.16348375e+00 -2.36276626e-01 -2.36276626e-01
 -2.36276626e-01  8.63946072e+01  6.78604465e+02  3.93662096e+03
  2.96768119e+04  1.56378522e+05  7.03819425e+05]
E1 = -706.5532420686073  E_coul = 198.91376658544027
cycle= 2 E= -507.639475483167  delta_E= -0.000428  |g|= 0.00474  |ddm|= 0.0143
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00504159
diis-c [-2.53709659e-05 -5.17944895e-04  1.00051794e+00]
  HOMO = -0.236451826840233  LUMO = 86.3910889721881
  mo_energy =
[-1.20271009e+02 -1.22542226e+01 -6.65490897e+00 -6.65490897e+00
 -6.65490897e+00 -1.16354851e+00 -2.36451827e-01 -2.36451827e-01
 -2.36451827e-01  8.63910890e+01  6.78593881e+02  3.93660507e+03
  2.96767927e+04  1.56378502e+05  7.03819405e+05]
E1 = -706.5528018823888  E_coul = 198.91332628914626
cycle= 3 E= -507.639475593243  delta_E= -1.1e-07  |g|= 9.47e-05  |ddm|= 0.000202
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.000126709
diis-c [-3.93803182e-10  3.38354309e-05 -2.54535944e-02  1.02541976e+00]
  HOMO = -0.236454036425224  LUMO = 86.3910443585092
  mo_energy =
[-1.20271122e+02 -1.22542384e+01 -6.65493590e+00 -6.65493590e+00
 -6.65493590e+00 -1.16354917e+00 -2.36454036e-01 -2.36454036e-01
 -2.36454036e-01  8.63910444e+01  6.78593764e+02  3.93660492e+03
  2.96767925e+04  1.56378502e+05  7.03819405e+05]
E1 = -706.5527946502218  E_coul = 198.91331905693949
cycle= 4 E= -507.639475593282  delta_E= -3.97e-11  |g|= 3.72e-07  |ddm|= 3.44e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.5527946502218  E_coul = 198.91331905693949
  HOMO = -0.236454020190554  LUMO = 86.3910446951988
  mo_energy =
[-1.20271122e+02 -1.22542383e+01 -6.65493574e+00 -6.65493574e+00
 -6.65493574e+00 -1.16354916e+00 -2.36454020e-01 -2.36454020e-01
 -2.36454020e-01  8.63910447e+01  6.78593765e+02  3.93660493e+03
  2.96767925e+04  1.56378502e+05  7.03819405e+05]
E1 = -706.5527946870568  E_coul = 198.91331909377456
Extra cycle  E= -507.639475593282  delta_E= 1.14e-13  |g|= 6.42e-09  |ddm|= 1.63e-08
    CPU time for scf_cycle      0.10 sec, wall time      0.11 sec
exp = [2.93679451e+05 7.34198654e+04 1.83539276e+04 2.23414241e+03
 4.56889050e+02 1.21733173e+02 3.75930612e+01 4.74127226e+00
 3.91203585e-01 8.59862972e+00 4.90848683e-01]
E = -507.6394755932822
E = -507.6394755932822
exp = [2.9367945083858178e+05,7.3419865393677101e+04,1.8353927627435987e+04,2.2341424145819028e+03,4.5688904996449571e+02,1.2173317272260677e+02,3.7593061247508530e+01,4.7412722556720146e+00,3.9120358491841306e-01,8.5986297237246045e+00,4.9084868336327880e-01]
