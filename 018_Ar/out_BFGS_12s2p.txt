#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="BFGS",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((14, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.6988712134173084e+06,1.1747178033543271e+06,2.9367945083858178e+05,7.3419865393677101e+04,1.8353927627435987e+04,2.2341424145819028e+03,4.5688904996449571e+02,1.2173317272260677e+02,3.7593061247508530e+01,4.7412722556720146e+00,3.9120358491841306e-01,8.5986297237246045e+00,4.9084868336327880e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "12s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:13:40 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  18795484.8537        1
[INPUT] 0    0    [1    /1   ]  4698871.21342        1
[INPUT] 0    0    [1    /1   ]  1174717.80335        1
[INPUT] 0    0    [1    /1   ]  293679.450839        1
[INPUT] 0    0    [1    /1   ]  73419.8653937        1
[INPUT] 0    0    [1    /1   ]  18353.9276274        1
[INPUT] 0    0    [1    /1   ]  2234.14241458        1
[INPUT] 0    0    [1    /1   ]  456.889049964        1
[INPUT] 0    0    [1    /1   ]  121.733172723        1
[INPUT] 0    0    [1    /1   ]  37.5930612475        1
[INPUT] 0    0    [1    /1   ]  4.74127225567        1
[INPUT] 0    0    [1    /1   ]  0.391203584918       1
[INPUT] 1    0    [1    /1   ]  8.59862972372        1
[INPUT] 1    0    [1    /1   ]  0.490848683363       1

nuclear repulsion = 0
number of shells = 14
number of NR pGTOs = 18
number of NR cGTOs = 18
basis = {'Ar': [[0, [18795484.853669234, 1.0]], [0, [4698871.213417308, 1.0]], [0, [1174717.803354327, 1.0]], [0, [293679.4508385818, 1.0]], [0, [73419.8653936771, 1.0]], [0, [18353.927627435987, 1.0]], [0, [2234.142414581903, 1.0]], [0, [456.8890499644957, 1.0]], [0, [121.73317272260677, 1.0]], [0, [37.59306124750853, 1.0]], [0, [4.741272255672015, 1.0]], [0, [0.39120358491841306, 1.0]], [1, [8.598629723724605, 1.0]], [1, [0.4908486833632788, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [18795484.85366923]
bas 1, expnt(s) = [4698871.21341731]
bas 2, expnt(s) = [1174717.80335433]
bas 3, expnt(s) = [293679.45083858]
bas 4, expnt(s) = [73419.86539368]
bas 5, expnt(s) = [18353.92762744]
bas 6, expnt(s) = [2234.14241458]
bas 7, expnt(s) = [456.88904996]
bas 8, expnt(s) = [121.73317272]
bas 9, expnt(s) = [37.59306125]
bas 10, expnt(s) = [4.74127226]
bas 11, expnt(s) = [0.39120358]
bas 12, expnt(s) = [8.59862972]
bas 13, expnt(s) = [0.49084868]
CPU time:         1.06
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  0  1  1  0 42 43  0]
 [ 0  0  1  1  0 44 45  0]
 [ 0  0  1  1  0 46 47  0]
 [ 0  1  1  1  0 48 49  0]
 [ 0  1  1  1  0 50 51  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.87954849e+07 7.21199097e+05 4.69887121e+06 2.54982386e+05
 1.17471780e+06 9.01498871e+04 2.93679451e+05 3.18727983e+04
 7.34198654e+04 1.12687362e+04 1.83539276e+04 3.98393079e+03
 2.23414241e+03 8.21009466e+02 4.56889050e+02 2.49673866e+02
 1.21733173e+02 9.25916301e+01 3.75930612e+01 3.83571025e+01
 4.74127226e+00 8.11775977e+00 3.91203585e-01 1.24973273e+00
 8.59862972e+00 4.29557150e+01 4.90848683e-01 1.19858525e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.31997542584935
cond(S) = 56.39526514662862
E1 = -688.8312841655792  E_coul = 184.91537499636783
init E= -503.915909169211
    CPU time for initialize scf      0.16 sec, wall time      0.16 sec
  HOMO = -0.680897819666845  LUMO = 85.0613322692788
  mo_energy =
[-1.21650495e+02 -1.32811426e+01 -7.62160364e+00 -7.62160364e+00
 -7.62160364e+00 -1.65070622e+00 -6.80897820e-01 -6.80897820e-01
 -6.80897820e-01  8.50613323e+01  6.77228652e+02  3.93503191e+03
  2.96196452e+04  1.54738903e+05  6.64892046e+05  2.71962805e+06
  1.10459661e+07  4.65100872e+07]
E1 = -706.5849321798701  E_coul = 198.94564234453657
cycle= 1 E= -507.639289835333  delta_E= -3.72  |g|= 0.317  |ddm|= 0.301
    CPU time for cycle= 1      0.37 sec, wall time      0.37 sec
diis-norm(errvec)=0.420501
diis-c [-0.17682113  1.        ]
  HOMO = -0.236276575118712  LUMO = 86.394361736767
  mo_energy =
[-1.20262475e+02 -1.22530430e+01 -6.65306743e+00 -6.65306743e+00
 -6.65306743e+00 -1.16348458e+00 -2.36276575e-01 -2.36276575e-01
 -2.36276575e-01  8.63943617e+01  6.78599269e+02  3.93628357e+03
  2.96207340e+04  1.54739920e+05  6.64893033e+05  2.71962902e+06
  1.10459671e+07  4.65100881e+07]
E1 = -706.5535010225527  E_coul = 198.91378329655515
cycle= 2 E= -507.639717725998  delta_E= -0.000428  |g|= 0.00474  |ddm|= 0.0143
    CPU time for cycle= 2      0.12 sec, wall time      0.12 sec
diis-norm(errvec)=0.00504168
diis-c [-2.53733014e-05 -5.06259892e-04  1.00050626e+00]
  HOMO = -0.236451774901736  LUMO = 86.3908435800202
  mo_energy =
[-1.20271114e+02 -1.22542316e+01 -6.65490834e+00 -6.65490834e+00
 -6.65490834e+00 -1.16354934e+00 -2.36451775e-01 -2.36451775e-01
 -2.36451775e-01  8.63908436e+01  6.78588685e+02  3.93626769e+03
  2.96207148e+04  1.54739900e+05  6.64893013e+05  2.71962900e+06
  1.10459670e+07  4.65100881e+07]
E1 = -706.5530608388187  E_coul = 198.9133430027451
cycle= 3 E= -507.639717836074  delta_E= -1.1e-07  |g|= 9.48e-05  |ddm|= 0.000202
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00012677
diis-c [-3.95755563e-10  3.34164168e-05 -2.54629045e-02  1.02542949e+00]
  HOMO = -0.23645398661671  LUMO = 86.3907989236711
  mo_energy =
[-1.20271227e+02 -1.22542473e+01 -6.65493530e+00 -6.65493530e+00
 -6.65493530e+00 -1.16354999e+00 -2.36453987e-01 -2.36453987e-01
 -2.36453987e-01  8.63907989e+01  6.78588568e+02  3.93626754e+03
  2.96207146e+04  1.54739900e+05  6.64893013e+05  2.71962900e+06
  1.10459670e+07  4.65100881e+07]
E1 = -706.5530536012826  E_coul = 198.91333576516874
cycle= 4 E= -507.639717836114  delta_E= -4.02e-11  |g|= 3.74e-07  |ddm|= 3.44e-06
    CPU time for cycle= 4      0.01 sec, wall time      0.02 sec
E1 = -706.5530536012826  E_coul = 198.91333576516874
  HOMO = -0.236453970314514  LUMO = 86.3907992617131
  mo_energy =
[-1.20271226e+02 -1.22542472e+01 -6.65493514e+00 -6.65493514e+00
 -6.65493514e+00 -1.16354999e+00 -2.36453970e-01 -2.36453970e-01
 -2.36453970e-01  8.63907993e+01  6.78588569e+02  3.93626754e+03
  2.96207146e+04  1.54739900e+05  6.64893013e+05  2.71962900e+06
  1.10459670e+07  4.65100881e+07]
E1 = -706.5530536382827  E_coul = 198.91333580216914
Extra cycle  E= -507.639717836114  delta_E= 3.41e-13  |g|= 6.45e-09  |ddm|= 1.64e-08
    CPU time for scf_cycle      0.69 sec, wall time      0.70 sec
exp = [1.87954849e+07 4.69887121e+06 1.17471780e+06 2.93679451e+05
 7.34198654e+04 1.83539276e+04 2.23414241e+03 4.56889050e+02
 1.21733173e+02 3.75930612e+01 4.74127226e+00 3.91203585e-01
 8.59862972e+00 4.90848683e-01]
E = -507.6397178361135
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="BFGS",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((14, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.6988712134173084e+06,1.1747178033543271e+06,2.9367945083858178e+05,7.3419865393677101e+04,1.8353927627435987e+04,2.2341424145819028e+03,4.5688904996449571e+02,1.2173317272260677e+02,3.7593061247508530e+01,4.7412722556720146e+00,3.9120358491841306e-01,8.5986297237246045e+00,4.9084868336327880e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "12s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:13:41 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  18795484.8537        1
[INPUT] 0    0    [1    /1   ]  4698871.21342        1
[INPUT] 0    0    [1    /1   ]  1174717.80335        1
[INPUT] 0    0    [1    /1   ]  293679.450839        1
[INPUT] 0    0    [1    /1   ]  73419.8653937        1
[INPUT] 0    0    [1    /1   ]  18353.9276274        1
[INPUT] 0    0    [1    /1   ]  2234.14241458        1
[INPUT] 0    0    [1    /1   ]  456.889049964        1
[INPUT] 0    0    [1    /1   ]  121.733172723        1
[INPUT] 0    0    [1    /1   ]  37.5930612475        1
[INPUT] 0    0    [1    /1   ]  4.74127225567        1
[INPUT] 0    0    [1    /1   ]  0.391203584918       1
[INPUT] 1    0    [1    /1   ]  8.59862972372        1
[INPUT] 1    0    [1    /1   ]  0.490848683363       1

nuclear repulsion = 0
number of shells = 14
number of NR pGTOs = 18
number of NR cGTOs = 18
basis = {'Ar': [[0, [18795484.853669234, 1.0]], [0, [4698871.213417308, 1.0]], [0, [1174717.803354327, 1.0]], [0, [293679.4508385818, 1.0]], [0, [73419.8653936771, 1.0]], [0, [18353.927627435987, 1.0]], [0, [2234.142414581903, 1.0]], [0, [456.8890499644957, 1.0]], [0, [121.73317272260677, 1.0]], [0, [37.59306124750853, 1.0]], [0, [4.741272255672015, 1.0]], [0, [0.39120358491841306, 1.0]], [1, [8.598629723724605, 1.0]], [1, [0.4908486833632788, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [18795484.85366923]
bas 1, expnt(s) = [4698871.21341731]
bas 2, expnt(s) = [1174717.80335433]
bas 3, expnt(s) = [293679.45083858]
bas 4, expnt(s) = [73419.86539368]
bas 5, expnt(s) = [18353.92762744]
bas 6, expnt(s) = [2234.14241458]
bas 7, expnt(s) = [456.88904996]
bas 8, expnt(s) = [121.73317272]
bas 9, expnt(s) = [37.59306125]
bas 10, expnt(s) = [4.74127226]
bas 11, expnt(s) = [0.39120358]
bas 12, expnt(s) = [8.59862972]
bas 13, expnt(s) = [0.49084868]
CPU time:         2.02
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  0  1  1  0 42 43  0]
 [ 0  0  1  1  0 44 45  0]
 [ 0  0  1  1  0 46 47  0]
 [ 0  1  1  1  0 48 49  0]
 [ 0  1  1  1  0 50 51  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.87954849e+07 7.21199097e+05 4.69887121e+06 2.54982386e+05
 1.17471780e+06 9.01498871e+04 2.93679451e+05 3.18727983e+04
 7.34198654e+04 1.12687362e+04 1.83539276e+04 3.98393079e+03
 2.23414241e+03 8.21009466e+02 4.56889050e+02 2.49673866e+02
 1.21733173e+02 9.25916301e+01 3.75930612e+01 3.83571025e+01
 4.74127226e+00 8.11775977e+00 3.91203585e-01 1.24973273e+00
 8.59862972e+00 4.29557150e+01 4.90848683e-01 1.19858525e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.31997542584935
cond(S) = 56.39526514662862
E1 = -688.8312841655792  E_coul = 184.91537499636783
init E= -503.915909169211
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.680897819666845  LUMO = 85.0613322692788
  mo_energy =
[-1.21650495e+02 -1.32811426e+01 -7.62160364e+00 -7.62160364e+00
 -7.62160364e+00 -1.65070622e+00 -6.80897820e-01 -6.80897820e-01
 -6.80897820e-01  8.50613323e+01  6.77228652e+02  3.93503191e+03
  2.96196452e+04  1.54738903e+05  6.64892046e+05  2.71962805e+06
  1.10459661e+07  4.65100872e+07]
E1 = -706.5849321798701  E_coul = 198.94564234453657
cycle= 1 E= -507.639289835333  delta_E= -3.72  |g|= 0.317  |ddm|= 0.301
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.420501
diis-c [-0.17682113  1.        ]
  HOMO = -0.236276575118712  LUMO = 86.394361736767
  mo_energy =
[-1.20262475e+02 -1.22530430e+01 -6.65306743e+00 -6.65306743e+00
 -6.65306743e+00 -1.16348458e+00 -2.36276575e-01 -2.36276575e-01
 -2.36276575e-01  8.63943617e+01  6.78599269e+02  3.93628357e+03
  2.96207340e+04  1.54739920e+05  6.64893033e+05  2.71962902e+06
  1.10459671e+07  4.65100881e+07]
E1 = -706.5535010225527  E_coul = 198.91378329655515
cycle= 2 E= -507.639717725998  delta_E= -0.000428  |g|= 0.00474  |ddm|= 0.0143
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00504168
diis-c [-2.53733014e-05 -5.06259892e-04  1.00050626e+00]
  HOMO = -0.236451774901736  LUMO = 86.3908435800202
  mo_energy =
[-1.20271114e+02 -1.22542316e+01 -6.65490834e+00 -6.65490834e+00
 -6.65490834e+00 -1.16354934e+00 -2.36451775e-01 -2.36451775e-01
 -2.36451775e-01  8.63908436e+01  6.78588685e+02  3.93626769e+03
  2.96207148e+04  1.54739900e+05  6.64893013e+05  2.71962900e+06
  1.10459670e+07  4.65100881e+07]
E1 = -706.5530608388187  E_coul = 198.9133430027451
cycle= 3 E= -507.639717836074  delta_E= -1.1e-07  |g|= 9.48e-05  |ddm|= 0.000202
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00012677
diis-c [-3.95755563e-10  3.34164168e-05 -2.54629045e-02  1.02542949e+00]
  HOMO = -0.23645398661671  LUMO = 86.3907989236711
  mo_energy =
[-1.20271227e+02 -1.22542473e+01 -6.65493530e+00 -6.65493530e+00
 -6.65493530e+00 -1.16354999e+00 -2.36453987e-01 -2.36453987e-01
 -2.36453987e-01  8.63907989e+01  6.78588568e+02  3.93626754e+03
  2.96207146e+04  1.54739900e+05  6.64893013e+05  2.71962900e+06
  1.10459670e+07  4.65100881e+07]
E1 = -706.5530536012826  E_coul = 198.91333576516874
cycle= 4 E= -507.639717836114  delta_E= -4.02e-11  |g|= 3.74e-07  |ddm|= 3.44e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.5530536012826  E_coul = 198.91333576516874
  HOMO = -0.236453970314514  LUMO = 86.3907992617131
  mo_energy =
[-1.20271226e+02 -1.22542472e+01 -6.65493514e+00 -6.65493514e+00
 -6.65493514e+00 -1.16354999e+00 -2.36453970e-01 -2.36453970e-01
 -2.36453970e-01  8.63907993e+01  6.78588569e+02  3.93626754e+03
  2.96207146e+04  1.54739900e+05  6.64893013e+05  2.71962900e+06
  1.10459670e+07  4.65100881e+07]
E1 = -706.5530536382827  E_coul = 198.91333580216914
Extra cycle  E= -507.639717836114  delta_E= 3.41e-13  |g|= 6.45e-09  |ddm|= 1.64e-08
    CPU time for scf_cycle      0.10 sec, wall time      0.11 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 56.39526514662862
E1 = -706.5530536382827  E_coul = 198.91333580216914
init E= -507.639717836114
    CPU time for initialize scf      0.42 sec, wall time      0.42 sec
  HOMO = -0.236453970123855  LUMO = 86.3907992658432
  mo_energy =
[-1.20271226e+02 -1.22542472e+01 -6.65493513e+00 -6.65493513e+00
 -6.65493513e+00 -1.16354999e+00 -2.36453970e-01 -2.36453970e-01
 -2.36453970e-01  8.63907993e+01  6.78588569e+02  3.93626754e+03
  2.96207146e+04  1.54739900e+05  6.64893013e+05  2.71962900e+06
  1.10459670e+07  4.65100881e+07]
E1 = -706.5530536388422  E_coul = 198.91333580272897
cycle= 1 E= -507.639717836113  delta_E= 2.27e-13  |g|= 2.32e-10  |ddm|= 2.54e-10
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -706.5530536388422  E_coul = 198.91333580272897
  HOMO = -0.236453970121168  LUMO = 86.3907992659027
  mo_energy =
[-1.20271226e+02 -1.22542472e+01 -6.65493513e+00 -6.65493513e+00
 -6.65493513e+00 -1.16354999e+00 -2.36453970e-01 -2.36453970e-01
 -2.36453970e-01  8.63907993e+01  6.78588569e+02  3.93626754e+03
  2.96207146e+04  1.54739900e+05  6.64893013e+05  2.71962900e+06
  1.10459670e+07  4.65100881e+07]
E1 = -706.5530536388521  E_coul = 198.9133358027384
Extra cycle  E= -507.639717836114  delta_E= -4.55e-13  |g|= 1.22e-10  |ddm|= 4.49e-12
    CPU time for scf_cycle      1.39 sec, wall time      1.39 sec
exp = [1.87954849e+07 4.69887121e+06 1.17471780e+06 2.93679451e+05
 7.34198654e+04 1.83539276e+04 2.23414241e+03 4.56889050e+02
 1.21733173e+02 3.75930612e+01 4.74127226e+00 3.91203585e-01
 8.59862972e+00 4.90848683e-01]
grad_E = [-1.11279574e-13  1.80103145e-11  8.62825063e-12  1.05339886e-08
 -3.42032848e-08  6.42104482e-06 -9.72129996e-06  4.03886447e-06
  2.56130753e-07  1.52691770e-06 -2.20220571e-06 -3.67993289e-06
  5.79483257e-06  4.30862030e-07]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="BFGS",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((14, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.6988712134173084e+06,1.1747178033543271e+06,2.9367945083858178e+05,7.3419865393677101e+04,1.8353927627435987e+04,2.2341424145819028e+03,4.5688904996449571e+02,1.2173317272260677e+02,3.7593061247508530e+01,4.7412722556720146e+00,3.9120358491841306e-01,8.5986297237246045e+00,4.9084868336327880e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "12s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:13:47 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  18795484.8537        1
[INPUT] 0    0    [1    /1   ]  4698871.21342        1
[INPUT] 0    0    [1    /1   ]  1174717.80335        1
[INPUT] 0    0    [1    /1   ]  293679.450839        1
[INPUT] 0    0    [1    /1   ]  73419.8653937        1
[INPUT] 0    0    [1    /1   ]  18353.927621         1
[INPUT] 0    0    [1    /1   ]  2234.1424243         1
[INPUT] 0    0    [1    /1   ]  456.889045926        1
[INPUT] 0    0    [1    /1   ]  121.733172466        1
[INPUT] 0    0    [1    /1   ]  37.5930597206        1
[INPUT] 0    0    [1    /1   ]  4.74127445788        1
[INPUT] 0    0    [1    /1   ]  0.391207264851       1
[INPUT] 1    0    [1    /1   ]  8.59862392889        1
[INPUT] 1    0    [1    /1   ]  0.490848252501       1

nuclear repulsion = 0
number of shells = 14
number of NR pGTOs = 18
number of NR cGTOs = 18
basis = {'Ar': [[0, [18795484.853669234, 1.0]], [0, [4698871.213417308, 1.0]], [0, [1174717.803354327, 1.0]], [0, [293679.45083857124, 1.0]], [0, [73419.8653937113, 1.0]], [0, [18353.927621014944, 1.0]], [0, [2234.142424303203, 1.0]], [0, [456.88904592563125, 1.0]], [0, [121.73317246647602, 1.0]], [0, [37.59305972059082, 1.0]], [0, [4.741274457877723, 1.0]], [0, [0.39120726485130125, 1.0]], [1, [8.598623928892037, 1.0]], [1, [0.4908482525012483, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [18795484.85366923]
bas 1, expnt(s) = [4698871.21341731]
bas 2, expnt(s) = [1174717.80335433]
bas 3, expnt(s) = [293679.45083857]
bas 4, expnt(s) = [73419.86539371]
bas 5, expnt(s) = [18353.92762101]
bas 6, expnt(s) = [2234.1424243]
bas 7, expnt(s) = [456.88904593]
bas 8, expnt(s) = [121.73317247]
bas 9, expnt(s) = [37.59305972]
bas 10, expnt(s) = [4.74127446]
bas 11, expnt(s) = [0.39120726]
bas 12, expnt(s) = [8.59862393]
bas 13, expnt(s) = [0.49084825]
CPU time:         8.67
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  0  1  1  0 42 43  0]
 [ 0  0  1  1  0 44 45  0]
 [ 0  0  1  1  0 46 47  0]
 [ 0  1  1  1  0 48 49  0]
 [ 0  1  1  1  0 50 51  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.87954849e+07 7.21199097e+05 4.69887121e+06 2.54982386e+05
 1.17471780e+06 9.01498871e+04 2.93679451e+05 3.18727983e+04
 7.34198654e+04 1.12687362e+04 1.83539276e+04 3.98393079e+03
 2.23414242e+03 8.21009469e+02 4.56889046e+02 2.49673865e+02
 1.21733172e+02 9.25916300e+01 3.75930597e+01 3.83571014e+01
 4.74127446e+00 8.11776260e+00 3.91207265e-01 1.24974155e+00
 8.59862393e+00 4.29556788e+01 4.90848253e-01 1.19858394e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.31997553979273
cond(S) = 56.39526736124347
E1 = -688.8313111640997  E_coul = 184.91539405693018
init E= -503.91591710717
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.680896559830184  LUMO = 85.0613522220364
  mo_energy =
[-1.21650497e+02 -1.32811414e+01 -7.62160147e+00 -7.62160147e+00
 -7.62160147e+00 -1.65070672e+00 -6.80896560e-01 -6.80896560e-01
 -6.80896560e-01  8.50613522e+01  6.77228659e+02  3.93503192e+03
  2.96196452e+04  1.54738903e+05  6.64892046e+05  2.71962805e+06
  1.10459661e+07  4.65100872e+07]
E1 = -706.584958021928  E_coul = 198.94566818424687
cycle= 1 E= -507.639289837681  delta_E= -3.72  |g|= 0.317  |ddm|= 0.301
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.420501
diis-c [-0.17682118  1.        ]
  HOMO = -0.23627546910182  LUMO = 86.394382096147
  mo_energy =
[-1.20262475e+02 -1.22530415e+01 -6.65306491e+00 -6.65306491e+00
 -6.65306491e+00 -1.16348374e+00 -2.36275469e-01 -2.36275469e-01
 -2.36275469e-01  8.63943821e+01  6.78599277e+02  3.93628358e+03
  2.96207340e+04  1.54739920e+05  6.64893033e+05  2.71962902e+06
  1.10459671e+07  4.65100881e+07]
E1 = -706.5535269180685  E_coul = 198.91380919198306
cycle= 2 E= -507.639717726085  delta_E= -0.000428  |g|= 0.00474  |ddm|= 0.0143
    CPU time for cycle= 2      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.00504167
diis-c [-2.53731814e-05 -5.06247695e-04  1.00050625e+00]
  HOMO = -0.236450668184215  LUMO = 86.3908639446683
  mo_energy =
[-1.20271114e+02 -1.22542301e+01 -6.65490582e+00 -6.65490582e+00
 -6.65490582e+00 -1.16354850e+00 -2.36450668e-01 -2.36450668e-01
 -2.36450668e-01  8.63908639e+01  6.78588693e+02  3.93626769e+03
  2.96207148e+04  1.54739900e+05  6.64893013e+05  2.71962900e+06
  1.10459670e+07  4.65100881e+07]
E1 = -706.5530867351271  E_coul = 198.91336889896584
cycle= 3 E= -507.639717836161  delta_E= -1.1e-07  |g|= 9.48e-05  |ddm|= 0.000202
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00012677
diis-c [-3.95752825e-10  3.34165102e-05 -2.54629275e-02  1.02542951e+00]
  HOMO = -0.236452879894157  LUMO = 86.3908192883506
  mo_energy =
[-1.20271227e+02 -1.22542459e+01 -6.65493278e+00 -6.65493278e+00
 -6.65493278e+00 -1.16354916e+00 -2.36452880e-01 -2.36452880e-01
 -2.36452880e-01  8.63908193e+01  6.78588576e+02  3.93626755e+03
  2.96207146e+04  1.54739900e+05  6.64893013e+05  2.71962900e+06
  1.10459670e+07  4.65100881e+07]
E1 = -706.5530794975988  E_coul = 198.9133616613978
cycle= 4 E= -507.639717836201  delta_E= -3.97e-11  |g|= 3.74e-07  |ddm|= 3.44e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.5530794975988  E_coul = 198.9133616613978
  HOMO = -0.236452863592013  LUMO = 86.3908196263907
  mo_energy =
[-1.20271227e+02 -1.22542458e+01 -6.65493262e+00 -6.65493262e+00
 -6.65493262e+00 -1.16354915e+00 -2.36452864e-01 -2.36452864e-01
 -2.36452864e-01  8.63908196e+01  6.78588577e+02  3.93626755e+03
  2.96207146e+04  1.54739900e+05  6.64893013e+05  2.71962900e+06
  1.10459670e+07  4.65100881e+07]
E1 = -706.5530795345998  E_coul = 198.9133616983985
Extra cycle  E= -507.639717836201  delta_E= -2.84e-13  |g|= 6.45e-09  |ddm|= 1.64e-08
    CPU time for scf_cycle      0.10 sec, wall time      0.11 sec
exp = [1.87954849e+07 4.69887121e+06 1.17471780e+06 2.93679451e+05
 7.34198654e+04 1.83539276e+04 2.23414242e+03 4.56889046e+02
 1.21733172e+02 3.75930597e+01 4.74127446e+00 3.91207265e-01
 8.59862393e+00 4.90848253e-01]
E = -507.63971783620127
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="BFGS",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((14, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.6988712134173084e+06,1.1747178033543271e+06,2.9367945083858178e+05,7.3419865393677101e+04,1.8353927627435987e+04,2.2341424145819028e+03,4.5688904996449571e+02,1.2173317272260677e+02,3.7593061247508530e+01,4.7412722556720146e+00,3.9120358491841306e-01,8.5986297237246045e+00,4.9084868336327880e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "12s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:13:48 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  18795484.8537        1
[INPUT] 0    0    [1    /1   ]  4698871.21342        1
[INPUT] 0    0    [1    /1   ]  1174717.80335        1
[INPUT] 0    0    [1    /1   ]  293679.450839        1
[INPUT] 0    0    [1    /1   ]  73419.8653937        1
[INPUT] 0    0    [1    /1   ]  18353.927621         1
[INPUT] 0    0    [1    /1   ]  2234.1424243         1
[INPUT] 0    0    [1    /1   ]  456.889045926        1
[INPUT] 0    0    [1    /1   ]  121.733172466        1
[INPUT] 0    0    [1    /1   ]  37.5930597206        1
[INPUT] 0    0    [1    /1   ]  4.74127445788        1
[INPUT] 0    0    [1    /1   ]  0.391207264851       1
[INPUT] 1    0    [1    /1   ]  8.59862392889        1
[INPUT] 1    0    [1    /1   ]  0.490848252501       1

nuclear repulsion = 0
number of shells = 14
number of NR pGTOs = 18
number of NR cGTOs = 18
basis = {'Ar': [[0, [18795484.853669234, 1.0]], [0, [4698871.213417308, 1.0]], [0, [1174717.803354327, 1.0]], [0, [293679.45083857124, 1.0]], [0, [73419.8653937113, 1.0]], [0, [18353.927621014944, 1.0]], [0, [2234.142424303203, 1.0]], [0, [456.88904592563125, 1.0]], [0, [121.73317246647602, 1.0]], [0, [37.59305972059082, 1.0]], [0, [4.741274457877723, 1.0]], [0, [0.39120726485130125, 1.0]], [1, [8.598623928892037, 1.0]], [1, [0.4908482525012483, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [18795484.85366923]
bas 1, expnt(s) = [4698871.21341731]
bas 2, expnt(s) = [1174717.80335433]
bas 3, expnt(s) = [293679.45083857]
bas 4, expnt(s) = [73419.86539371]
bas 5, expnt(s) = [18353.92762101]
bas 6, expnt(s) = [2234.1424243]
bas 7, expnt(s) = [456.88904593]
bas 8, expnt(s) = [121.73317247]
bas 9, expnt(s) = [37.59305972]
bas 10, expnt(s) = [4.74127446]
bas 11, expnt(s) = [0.39120726]
bas 12, expnt(s) = [8.59862393]
bas 13, expnt(s) = [0.49084825]
CPU time:         8.83
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  0  1  1  0 42 43  0]
 [ 0  0  1  1  0 44 45  0]
 [ 0  0  1  1  0 46 47  0]
 [ 0  1  1  1  0 48 49  0]
 [ 0  1  1  1  0 50 51  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.87954849e+07 7.21199097e+05 4.69887121e+06 2.54982386e+05
 1.17471780e+06 9.01498871e+04 2.93679451e+05 3.18727983e+04
 7.34198654e+04 1.12687362e+04 1.83539276e+04 3.98393079e+03
 2.23414242e+03 8.21009469e+02 4.56889046e+02 2.49673865e+02
 1.21733172e+02 9.25916300e+01 3.75930597e+01 3.83571014e+01
 4.74127446e+00 8.11776260e+00 3.91207265e-01 1.24974155e+00
 8.59862393e+00 4.29556788e+01 4.90848253e-01 1.19858394e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.31997553979273
cond(S) = 56.39526736124347
E1 = -688.8313111640997  E_coul = 184.91539405693018
init E= -503.91591710717
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.680896559830184  LUMO = 85.0613522220364
  mo_energy =
[-1.21650497e+02 -1.32811414e+01 -7.62160147e+00 -7.62160147e+00
 -7.62160147e+00 -1.65070672e+00 -6.80896560e-01 -6.80896560e-01
 -6.80896560e-01  8.50613522e+01  6.77228659e+02  3.93503192e+03
  2.96196452e+04  1.54738903e+05  6.64892046e+05  2.71962805e+06
  1.10459661e+07  4.65100872e+07]
E1 = -706.584958021928  E_coul = 198.94566818424687
cycle= 1 E= -507.639289837681  delta_E= -3.72  |g|= 0.317  |ddm|= 0.301
    CPU time for cycle= 1      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.420501
diis-c [-0.17682118  1.        ]
  HOMO = -0.23627546910182  LUMO = 86.394382096147
  mo_energy =
[-1.20262475e+02 -1.22530415e+01 -6.65306491e+00 -6.65306491e+00
 -6.65306491e+00 -1.16348374e+00 -2.36275469e-01 -2.36275469e-01
 -2.36275469e-01  8.63943821e+01  6.78599277e+02  3.93628358e+03
  2.96207340e+04  1.54739920e+05  6.64893033e+05  2.71962902e+06
  1.10459671e+07  4.65100881e+07]
E1 = -706.5535269180685  E_coul = 198.91380919198306
cycle= 2 E= -507.639717726085  delta_E= -0.000428  |g|= 0.00474  |ddm|= 0.0143
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00504167
diis-c [-2.53731814e-05 -5.06247695e-04  1.00050625e+00]
  HOMO = -0.236450668184215  LUMO = 86.3908639446683
  mo_energy =
[-1.20271114e+02 -1.22542301e+01 -6.65490582e+00 -6.65490582e+00
 -6.65490582e+00 -1.16354850e+00 -2.36450668e-01 -2.36450668e-01
 -2.36450668e-01  8.63908639e+01  6.78588693e+02  3.93626769e+03
  2.96207148e+04  1.54739900e+05  6.64893013e+05  2.71962900e+06
  1.10459670e+07  4.65100881e+07]
E1 = -706.5530867351271  E_coul = 198.91336889896584
cycle= 3 E= -507.639717836161  delta_E= -1.1e-07  |g|= 9.48e-05  |ddm|= 0.000202
    CPU time for cycle= 3      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.00012677
diis-c [-3.95752825e-10  3.34165102e-05 -2.54629275e-02  1.02542951e+00]
  HOMO = -0.236452879894157  LUMO = 86.3908192883506
  mo_energy =
[-1.20271227e+02 -1.22542459e+01 -6.65493278e+00 -6.65493278e+00
 -6.65493278e+00 -1.16354916e+00 -2.36452880e-01 -2.36452880e-01
 -2.36452880e-01  8.63908193e+01  6.78588576e+02  3.93626755e+03
  2.96207146e+04  1.54739900e+05  6.64893013e+05  2.71962900e+06
  1.10459670e+07  4.65100881e+07]
E1 = -706.5530794975988  E_coul = 198.9133616613978
cycle= 4 E= -507.639717836201  delta_E= -3.97e-11  |g|= 3.74e-07  |ddm|= 3.44e-06
    CPU time for cycle= 4      0.01 sec, wall time      0.02 sec
E1 = -706.5530794975988  E_coul = 198.9133616613978
  HOMO = -0.236452863592013  LUMO = 86.3908196263907
  mo_energy =
[-1.20271227e+02 -1.22542458e+01 -6.65493262e+00 -6.65493262e+00
 -6.65493262e+00 -1.16354915e+00 -2.36452864e-01 -2.36452864e-01
 -2.36452864e-01  8.63908196e+01  6.78588577e+02  3.93626755e+03
  2.96207146e+04  1.54739900e+05  6.64893013e+05  2.71962900e+06
  1.10459670e+07  4.65100881e+07]
E1 = -706.5530795345998  E_coul = 198.9133616983985
Extra cycle  E= -507.639717836201  delta_E= -2.84e-13  |g|= 6.45e-09  |ddm|= 1.64e-08
    CPU time for scf_cycle      0.10 sec, wall time      0.11 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 56.39526736124347
E1 = -706.5530795345998  E_coul = 198.9133616983985
init E= -507.639717836201
    CPU time for initialize scf      0.12 sec, wall time      0.12 sec
  HOMO = -0.23645286340135  LUMO = 86.3908196305226
  mo_energy =
[-1.20271227e+02 -1.22542458e+01 -6.65493262e+00 -6.65493262e+00
 -6.65493262e+00 -1.16354915e+00 -2.36452863e-01 -2.36452863e-01
 -2.36452863e-01  8.63908196e+01  6.78588577e+02  3.93626755e+03
  2.96207146e+04  1.54739900e+05  6.64893013e+05  2.71962900e+06
  1.10459670e+07  4.65100881e+07]
E1 = -706.553079535159  E_coul = 198.913361698958
cycle= 1 E= -507.639717836201  delta_E= 2.84e-13  |g|= 1.41e-10  |ddm|= 2.54e-10
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -706.553079535159  E_coul = 198.913361698958
  HOMO = -0.236452863398668  LUMO = 86.39081963058
  mo_energy =
[-1.20271227e+02 -1.22542458e+01 -6.65493262e+00 -6.65493262e+00
 -6.65493262e+00 -1.16354915e+00 -2.36452863e-01 -2.36452863e-01
 -2.36452863e-01  8.63908196e+01  6.78588577e+02  3.93626755e+03
  2.96207146e+04  1.54739900e+05  6.64893013e+05  2.71962900e+06
  1.10459670e+07  4.65100881e+07]
E1 = -706.5530795351686  E_coul = 198.91336169896778
Extra cycle  E= -507.639717836201  delta_E= 1.14e-13  |g|= 1.43e-10  |ddm|= 4.56e-12
    CPU time for scf_cycle      0.18 sec, wall time      0.18 sec
exp = [1.87954849e+07 4.69887121e+06 1.17471780e+06 2.93679451e+05
 7.34198654e+04 1.83539276e+04 2.23414242e+03 4.56889046e+02
 1.21733172e+02 3.75930597e+01 4.74127446e+00 3.91207265e-01
 8.59862393e+00 4.90848253e-01]
grad_E = [-1.11279615e-13  1.80103140e-11  8.62823463e-12  1.05339883e-08
 -3.42032929e-08  6.42104456e-06 -9.72123144e-06  4.03754642e-06
  2.66283346e-07  1.48524645e-06 -9.34382454e-07  5.41222069e-05
  1.77468684e-06  8.68185055e-07]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="BFGS",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((14, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.6988712134173084e+06,1.1747178033543271e+06,2.9367945083858178e+05,7.3419865393677101e+04,1.8353927627435987e+04,2.2341424145819028e+03,4.5688904996449571e+02,1.2173317272260677e+02,3.7593061247508530e+01,4.7412722556720146e+00,3.9120358491841306e-01,8.5986297237246045e+00,4.9084868336327880e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "12s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:13:51 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  18795484.8537        1
[INPUT] 0    0    [1    /1   ]  4698871.21342        1
[INPUT] 0    0    [1    /1   ]  1174717.80335        1
[INPUT] 0    0    [1    /1   ]  293679.450839        1
[INPUT] 0    0    [1    /1   ]  73419.8653937        1
[INPUT] 0    0    [1    /1   ]  18353.9276151        1
[INPUT] 0    0    [1    /1   ]  2234.14243327        1
[INPUT] 0    0    [1    /1   ]  456.889042199        1
[INPUT] 0    0    [1    /1   ]  121.733172229        1
[INPUT] 0    0    [1    /1   ]  37.5930583143        1
[INPUT] 0    0    [1    /1   ]  4.74127640605        1
[INPUT] 0    0    [1    /1   ]  0.391206828393       1
[INPUT] 1    0    [1    /1   ]  8.59861884786        1
[INPUT] 1    0    [1    /1   ]  0.490847825899       1

nuclear repulsion = 0
number of shells = 14
number of NR pGTOs = 18
number of NR cGTOs = 18
basis = {'Ar': [[0, [18795484.853669234, 1.0]], [0, [4698871.213417308, 1.0]], [0, [1174717.803354327, 1.0]], [0, [293679.4508385615, 1.0]], [0, [73419.86539374286, 1.0]], [0, [18353.927615089488, 1.0]], [0, [2234.142433274188, 1.0]], [0, [456.8890421985822, 1.0]], [0, [121.73317222944085, 1.0]], [0, [37.59305831428671, 1.0]], [0, [4.7412764060540304, 1.0]], [0, [0.39120682839325766, 1.0]], [1, [8.598618847858361, 1.0]], [1, [0.490847825898904, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [18795484.85366923]
bas 1, expnt(s) = [4698871.21341731]
bas 2, expnt(s) = [1174717.80335433]
bas 3, expnt(s) = [293679.45083856]
bas 4, expnt(s) = [73419.86539374]
bas 5, expnt(s) = [18353.92761509]
bas 6, expnt(s) = [2234.14243327]
bas 7, expnt(s) = [456.8890422]
bas 8, expnt(s) = [121.73317223]
bas 9, expnt(s) = [37.59305831]
bas 10, expnt(s) = [4.74127641]
bas 11, expnt(s) = [0.39120683]
bas 12, expnt(s) = [8.59861885]
bas 13, expnt(s) = [0.49084783]
CPU time:        11.73
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  0  1  1  0 42 43  0]
 [ 0  0  1  1  0 44 45  0]
 [ 0  0  1  1  0 46 47  0]
 [ 0  1  1  1  0 48 49  0]
 [ 0  1  1  1  0 50 51  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.87954849e+07 7.21199097e+05 4.69887121e+06 2.54982386e+05
 1.17471780e+06 9.01498871e+04 2.93679451e+05 3.18727983e+04
 7.34198654e+04 1.12687362e+04 1.83539276e+04 3.98393079e+03
 2.23414243e+03 8.21009471e+02 4.56889042e+02 2.49673863e+02
 1.21733172e+02 9.25916298e+01 3.75930583e+01 3.83571003e+01
 4.74127641e+00 8.11776510e+00 3.91206828e-01 1.24974050e+00
 8.59861885e+00 4.29556471e+01 4.90847826e-01 1.19858264e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319976126797854
cond(S) = 56.395267577439036
E1 = -688.8312688487587  E_coul = 184.9153527640555
init E= -503.915916084703
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.680897214660931  LUMO = 85.0613508188159
  mo_energy =
[-1.21650503e+02 -1.32811447e+01 -7.62160426e+00 -7.62160426e+00
 -7.62160426e+00 -1.65070726e+00 -6.80897215e-01 -6.80897215e-01
 -6.80897215e-01  8.50613508e+01  6.77228649e+02  3.93503191e+03
  2.96196452e+04  1.54738903e+05  6.64892046e+05  2.71962805e+06
  1.10459661e+07  4.65100872e+07]
E1 = -706.584906092361  E_coul = 198.9456162532958
cycle= 1 E= -507.639289839065  delta_E= -3.72  |g|= 0.317  |ddm|= 0.301
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.420501
diis-c [-0.17682113  1.        ]
  HOMO = -0.236276657353804  LUMO = 86.3943799063537
  mo_energy =
[-1.20262482e+02 -1.22530455e+01 -6.65306840e+00 -6.65306840e+00
 -6.65306840e+00 -1.16348479e+00 -2.36276657e-01 -2.36276657e-01
 -2.36276657e-01  8.63943799e+01  6.78599267e+02  3.93628357e+03
  2.96207340e+04  1.54739920e+05  6.64893033e+05  2.71962902e+06
  1.10459671e+07  4.65100881e+07]
E1 = -706.5534750408543  E_coul = 198.91375731460684
cycle= 2 E= -507.639717726247  delta_E= -0.000428  |g|= 0.00474  |ddm|= 0.0143
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00504166
diis-c [-2.53730800e-05 -5.06242585e-04  1.00050624e+00]
  HOMO = -0.236451855840167  LUMO = 86.3908617605021
  mo_energy =
[-1.20271121e+02 -1.22542341e+01 -6.65490930e+00 -6.65490930e+00
 -6.65490930e+00 -1.16354955e+00 -2.36451856e-01 -2.36451856e-01
 -2.36451856e-01  8.63908618e+01  6.78588683e+02  3.93626768e+03
  2.96207148e+04  1.54739900e+05  6.64893013e+05  2.71962900e+06
  1.10459670e+07  4.65100881e+07]
E1 = -706.553034858713  E_coul = 198.91331702239012
cycle= 3 E= -507.639717836323  delta_E= -1.1e-07  |g|= 9.48e-05  |ddm|= 0.000202
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.000126769
diis-c [-3.95752678e-10  3.34164144e-05 -2.54629347e-02  1.02542952e+00]
  HOMO = -0.236454067542393  LUMO = 86.3908171042352
  mo_energy =
[-1.20271234e+02 -1.22542499e+01 -6.65493626e+00 -6.65493626e+00
 -6.65493626e+00 -1.16355021e+00 -2.36454068e-01 -2.36454068e-01
 -2.36454068e-01  8.63908171e+01  6.78588566e+02  3.93626754e+03
  2.96207146e+04  1.54739900e+05  6.64893013e+05  2.71962900e+06
  1.10459670e+07  4.65100881e+07]
E1 = -706.5530276211972  E_coul = 198.91330978483393
cycle= 4 E= -507.639717836363  delta_E= -4.04e-11  |g|= 3.74e-07  |ddm|= 3.44e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.5530276211972  E_coul = 198.91330978483393
  HOMO = -0.236454051240272  LUMO = 86.3908174422799
  mo_energy =
[-1.20271234e+02 -1.22542498e+01 -6.65493610e+00 -6.65493610e+00
 -6.65493610e+00 -1.16355020e+00 -2.36454051e-01 -2.36454051e-01
 -2.36454051e-01  8.63908174e+01  6.78588567e+02  3.93626754e+03
  2.96207146e+04  1.54739900e+05  6.64893013e+05  2.71962900e+06
  1.10459670e+07  4.65100881e+07]
E1 = -706.5530276581967  E_coul = 198.91330982183382
Extra cycle  E= -507.639717836363  delta_E= 3.98e-13  |g|= 6.44e-09  |ddm|= 1.64e-08
    CPU time for scf_cycle      0.11 sec, wall time      0.11 sec
exp = [1.87954849e+07 4.69887121e+06 1.17471780e+06 2.93679451e+05
 7.34198654e+04 1.83539276e+04 2.23414243e+03 4.56889042e+02
 1.21733172e+02 3.75930583e+01 4.74127641e+00 3.91206828e-01
 8.59861885e+00 4.90847826e-01]
E = -507.6397178363629
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="BFGS",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((14, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.6988712134173084e+06,1.1747178033543271e+06,2.9367945083858178e+05,7.3419865393677101e+04,1.8353927627435987e+04,2.2341424145819028e+03,4.5688904996449571e+02,1.2173317272260677e+02,3.7593061247508530e+01,4.7412722556720146e+00,3.9120358491841306e-01,8.5986297237246045e+00,4.9084868336327880e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "12s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:13:51 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  18795484.8537        1
[INPUT] 0    0    [1    /1   ]  4698871.21342        1
[INPUT] 0    0    [1    /1   ]  1174717.80335        1
[INPUT] 0    0    [1    /1   ]  293679.450839        1
[INPUT] 0    0    [1    /1   ]  73419.8653937        1
[INPUT] 0    0    [1    /1   ]  18353.9276151        1
[INPUT] 0    0    [1    /1   ]  2234.14243327        1
[INPUT] 0    0    [1    /1   ]  456.889042199        1
[INPUT] 0    0    [1    /1   ]  121.733172229        1
[INPUT] 0    0    [1    /1   ]  37.5930583143        1
[INPUT] 0    0    [1    /1   ]  4.74127640605        1
[INPUT] 0    0    [1    /1   ]  0.391206828393       1
[INPUT] 1    0    [1    /1   ]  8.59861884786        1
[INPUT] 1    0    [1    /1   ]  0.490847825899       1

nuclear repulsion = 0
number of shells = 14
number of NR pGTOs = 18
number of NR cGTOs = 18
basis = {'Ar': [[0, [18795484.853669234, 1.0]], [0, [4698871.213417308, 1.0]], [0, [1174717.803354327, 1.0]], [0, [293679.4508385615, 1.0]], [0, [73419.86539374286, 1.0]], [0, [18353.927615089488, 1.0]], [0, [2234.142433274188, 1.0]], [0, [456.8890421985822, 1.0]], [0, [121.73317222944085, 1.0]], [0, [37.59305831428671, 1.0]], [0, [4.7412764060540304, 1.0]], [0, [0.39120682839325766, 1.0]], [1, [8.598618847858361, 1.0]], [1, [0.490847825898904, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [18795484.85366923]
bas 1, expnt(s) = [4698871.21341731]
bas 2, expnt(s) = [1174717.80335433]
bas 3, expnt(s) = [293679.45083856]
bas 4, expnt(s) = [73419.86539374]
bas 5, expnt(s) = [18353.92761509]
bas 6, expnt(s) = [2234.14243327]
bas 7, expnt(s) = [456.8890422]
bas 8, expnt(s) = [121.73317223]
bas 9, expnt(s) = [37.59305831]
bas 10, expnt(s) = [4.74127641]
bas 11, expnt(s) = [0.39120683]
bas 12, expnt(s) = [8.59861885]
bas 13, expnt(s) = [0.49084783]
CPU time:        11.91
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  0  1  1  0 42 43  0]
 [ 0  0  1  1  0 44 45  0]
 [ 0  0  1  1  0 46 47  0]
 [ 0  1  1  1  0 48 49  0]
 [ 0  1  1  1  0 50 51  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.87954849e+07 7.21199097e+05 4.69887121e+06 2.54982386e+05
 1.17471780e+06 9.01498871e+04 2.93679451e+05 3.18727983e+04
 7.34198654e+04 1.12687362e+04 1.83539276e+04 3.98393079e+03
 2.23414243e+03 8.21009471e+02 4.56889042e+02 2.49673863e+02
 1.21733172e+02 9.25916298e+01 3.75930583e+01 3.83571003e+01
 4.74127641e+00 8.11776510e+00 3.91206828e-01 1.24974050e+00
 8.59861885e+00 4.29556471e+01 4.90847826e-01 1.19858264e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319976126797854
cond(S) = 56.395267577439036
E1 = -688.8312688487587  E_coul = 184.9153527640555
init E= -503.915916084703
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.680897214660931  LUMO = 85.0613508188159
  mo_energy =
[-1.21650503e+02 -1.32811447e+01 -7.62160426e+00 -7.62160426e+00
 -7.62160426e+00 -1.65070726e+00 -6.80897215e-01 -6.80897215e-01
 -6.80897215e-01  8.50613508e+01  6.77228649e+02  3.93503191e+03
  2.96196452e+04  1.54738903e+05  6.64892046e+05  2.71962805e+06
  1.10459661e+07  4.65100872e+07]
E1 = -706.584906092361  E_coul = 198.9456162532958
cycle= 1 E= -507.639289839065  delta_E= -3.72  |g|= 0.317  |ddm|= 0.301
    CPU time for cycle= 1      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.420501
diis-c [-0.17682113  1.        ]
  HOMO = -0.236276657353804  LUMO = 86.3943799063537
  mo_energy =
[-1.20262482e+02 -1.22530455e+01 -6.65306840e+00 -6.65306840e+00
 -6.65306840e+00 -1.16348479e+00 -2.36276657e-01 -2.36276657e-01
 -2.36276657e-01  8.63943799e+01  6.78599267e+02  3.93628357e+03
  2.96207340e+04  1.54739920e+05  6.64893033e+05  2.71962902e+06
  1.10459671e+07  4.65100881e+07]
E1 = -706.5534750408543  E_coul = 198.91375731460684
cycle= 2 E= -507.639717726247  delta_E= -0.000428  |g|= 0.00474  |ddm|= 0.0143
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00504166
diis-c [-2.53730800e-05 -5.06242585e-04  1.00050624e+00]
  HOMO = -0.236451855840167  LUMO = 86.3908617605021
  mo_energy =
[-1.20271121e+02 -1.22542341e+01 -6.65490930e+00 -6.65490930e+00
 -6.65490930e+00 -1.16354955e+00 -2.36451856e-01 -2.36451856e-01
 -2.36451856e-01  8.63908618e+01  6.78588683e+02  3.93626768e+03
  2.96207148e+04  1.54739900e+05  6.64893013e+05  2.71962900e+06
  1.10459670e+07  4.65100881e+07]
E1 = -706.553034858713  E_coul = 198.91331702239012
cycle= 3 E= -507.639717836323  delta_E= -1.1e-07  |g|= 9.48e-05  |ddm|= 0.000202
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.000126769
diis-c [-3.95752678e-10  3.34164144e-05 -2.54629347e-02  1.02542952e+00]
  HOMO = -0.236454067542393  LUMO = 86.3908171042352
  mo_energy =
[-1.20271234e+02 -1.22542499e+01 -6.65493626e+00 -6.65493626e+00
 -6.65493626e+00 -1.16355021e+00 -2.36454068e-01 -2.36454068e-01
 -2.36454068e-01  8.63908171e+01  6.78588566e+02  3.93626754e+03
  2.96207146e+04  1.54739900e+05  6.64893013e+05  2.71962900e+06
  1.10459670e+07  4.65100881e+07]
E1 = -706.5530276211972  E_coul = 198.91330978483393
cycle= 4 E= -507.639717836363  delta_E= -4.04e-11  |g|= 3.74e-07  |ddm|= 3.44e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.5530276211972  E_coul = 198.91330978483393
  HOMO = -0.236454051240272  LUMO = 86.3908174422799
  mo_energy =
[-1.20271234e+02 -1.22542498e+01 -6.65493610e+00 -6.65493610e+00
 -6.65493610e+00 -1.16355020e+00 -2.36454051e-01 -2.36454051e-01
 -2.36454051e-01  8.63908174e+01  6.78588567e+02  3.93626754e+03
  2.96207146e+04  1.54739900e+05  6.64893013e+05  2.71962900e+06
  1.10459670e+07  4.65100881e+07]
E1 = -706.5530276581967  E_coul = 198.91330982183382
Extra cycle  E= -507.639717836363  delta_E= 3.98e-13  |g|= 6.44e-09  |ddm|= 1.64e-08
    CPU time for scf_cycle      0.11 sec, wall time      0.11 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 56.395267577439036
E1 = -706.5530276581967  E_coul = 198.91330982183382
init E= -507.639717836363
    CPU time for initialize scf      0.12 sec, wall time      0.12 sec
  HOMO = -0.236454051049616  LUMO = 86.3908174464081
  mo_energy =
[-1.20271234e+02 -1.22542498e+01 -6.65493610e+00 -6.65493610e+00
 -6.65493610e+00 -1.16355020e+00 -2.36454051e-01 -2.36454051e-01
 -2.36454051e-01  8.63908174e+01  6.78588567e+02  3.93626754e+03
  2.96207146e+04  1.54739900e+05  6.64893013e+05  2.71962900e+06
  1.10459670e+07  4.65100881e+07]
E1 = -706.5530276587572  E_coul = 198.91330982239393
cycle= 1 E= -507.639717836363  delta_E= -3.98e-13  |g|= 1.77e-10  |ddm|= 2.54e-10
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -706.5530276587572  E_coul = 198.91330982239393
  HOMO = -0.236454051046927  LUMO = 86.3908174464671
  mo_energy =
[-1.20271234e+02 -1.22542498e+01 -6.65493610e+00 -6.65493610e+00
 -6.65493610e+00 -1.16355020e+00 -2.36454051e-01 -2.36454051e-01
 -2.36454051e-01  8.63908174e+01  6.78588567e+02  3.93626754e+03
  2.96207146e+04  1.54739900e+05  6.64893013e+05  2.71962900e+06
  1.10459670e+07  4.65100881e+07]
E1 = -706.5530276587662  E_coul = 198.9133098224036
Extra cycle  E= -507.639717836363  delta_E= 6.82e-13  |g|= 1.17e-10  |ddm|= 4.51e-12
    CPU time for scf_cycle      0.19 sec, wall time      0.19 sec
exp = [1.87954849e+07 4.69887121e+06 1.17471780e+06 2.93679451e+05
 7.34198654e+04 1.83539276e+04 2.23414243e+03 4.56889042e+02
 1.21733172e+02 3.75930583e+01 4.74127641e+00 3.91206828e-01
 8.59861885e+00 4.90847826e-01]
grad_E = [-1.11279641e-13  1.80103129e-11  8.62822230e-12  1.05339877e-08
 -3.42032977e-08  6.42104413e-06 -9.72118451e-06  4.03672810e-06
  2.70661523e-07  1.47100726e-06  3.43788564e-07  4.53045043e-05
 -2.02415557e-06 -1.10598357e-05]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="BFGS",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((14, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.6988712134173084e+06,1.1747178033543271e+06,2.9367945083858178e+05,7.3419865393677101e+04,1.8353927627435987e+04,2.2341424145819028e+03,4.5688904996449571e+02,1.2173317272260677e+02,3.7593061247508530e+01,4.7412722556720146e+00,3.9120358491841306e-01,8.5986297237246045e+00,4.9084868336327880e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "12s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:13:54 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  18795484.8537        1
[INPUT] 0    0    [1    /1   ]  4698871.21342        1
[INPUT] 0    0    [1    /1   ]  1174717.80335        1
[INPUT] 0    0    [1    /1   ]  293679.450839        1
[INPUT] 0    0    [1    /1   ]  73419.8653938        1
[INPUT] 0    0    [1    /1   ]  18353.9276036        1
[INPUT] 0    0    [1    /1   ]  2234.14245069        1
[INPUT] 0    0    [1    /1   ]  456.889034962        1
[INPUT] 0    0    [1    /1   ]  121.733171767        1
[INPUT] 0    0    [1    /1   ]  37.5930555901        1
[INPUT] 0    0    [1    /1   ]  4.74127972117        1
[INPUT] 0    0    [1    /1   ]  0.391206045259       1
[INPUT] 1    0    [1    /1   ]  8.59861038395        1
[INPUT] 1    0    [1    /1   ]  0.49085077988        1

nuclear repulsion = 0
number of shells = 14
number of NR pGTOs = 18
number of NR cGTOs = 18
basis = {'Ar': [[0, [18795484.853669234, 1.0]], [0, [4698871.213417308, 1.0]], [0, [1174717.803354327, 1.0]], [0, [293679.45083854266, 1.0]], [0, [73419.86539380415, 1.0]], [0, [18353.92760358363, 1.0]], [0, [2234.1424506937383, 1.0]], [0, [456.8890349618427, 1.0]], [0, [121.73317176729519, 1.0]], [0, [37.593055590091375, 1.0]], [0, [4.741279721174187, 1.0]], [0, [0.39120604525913666, 1.0]], [1, [8.598610383952629, 1.0]], [1, [0.4908507798796615, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [18795484.85366923]
bas 1, expnt(s) = [4698871.21341731]
bas 2, expnt(s) = [1174717.80335433]
bas 3, expnt(s) = [293679.45083854]
bas 4, expnt(s) = [73419.8653938]
bas 5, expnt(s) = [18353.92760358]
bas 6, expnt(s) = [2234.14245069]
bas 7, expnt(s) = [456.88903496]
bas 8, expnt(s) = [121.73317177]
bas 9, expnt(s) = [37.59305559]
bas 10, expnt(s) = [4.74127972]
bas 11, expnt(s) = [0.39120605]
bas 12, expnt(s) = [8.59861038]
bas 13, expnt(s) = [0.49085078]
CPU time:        14.85
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  0  1  1  0 42 43  0]
 [ 0  0  1  1  0 44 45  0]
 [ 0  0  1  1  0 46 47  0]
 [ 0  1  1  1  0 48 49  0]
 [ 0  1  1  1  0 50 51  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.87954849e+07 7.21199097e+05 4.69887121e+06 2.54982386e+05
 1.17471780e+06 9.01498871e+04 2.93679451e+05 3.18727983e+04
 7.34198654e+04 1.12687362e+04 1.83539276e+04 3.98393079e+03
 2.23414245e+03 8.21009476e+02 4.56889035e+02 2.49673860e+02
 1.21733172e+02 9.25916296e+01 3.75930556e+01 3.83570982e+01
 4.74127972e+00 8.11776936e+00 3.91206045e-01 1.24973862e+00
 8.59861038e+00 4.29555942e+01 4.90850780e-01 1.19859165e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.31997239675195
cond(S) = 56.39526784451671
E1 = -688.8313313056037  E_coul = 184.9154050469642
init E= -503.91592625864
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.680893849361631  LUMO = 85.0613580949032
  mo_energy =
[-1.21650503e+02 -1.32811400e+01 -7.62160163e+00 -7.62160163e+00
 -7.62160163e+00 -1.65070472e+00 -6.80893849e-01 -6.80893849e-01
 -6.80893849e-01  8.50613581e+01  6.77228642e+02  3.93503190e+03
  2.96196452e+04  1.54738903e+05  6.64892046e+05  2.71962805e+06
  1.10459661e+07  4.65100872e+07]
E1 = -706.5850116319843  E_coul = 198.94572179220575
cycle= 1 E= -507.639289839779  delta_E= -3.72  |g|= 0.317  |ddm|= 0.301
    CPU time for cycle= 1      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.420501
diis-c [-0.17682116  1.        ]
  HOMO = -0.236270267358008  LUMO = 86.3943907400584
  mo_energy =
[-1.20262478e+02 -1.22530375e+01 -6.65306270e+00 -6.65306270e+00
 -6.65306270e+00 -1.16348026e+00 -2.36270267e-01 -2.36270267e-01
 -2.36270267e-01  8.63943907e+01  6.78599263e+02  3.93628357e+03
  2.96207340e+04  1.54739920e+05  6.64893033e+05  2.71962902e+06
  1.10459671e+07  4.65100881e+07]
E1 = -706.5535806141555  E_coul = 198.91386288780194
cycle= 2 E= -507.639717726354  delta_E= -0.000428  |g|= 0.00474  |ddm|= 0.0143
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00504165
diis-c [-2.53729781e-05 -5.06234551e-04  1.00050623e+00]
  HOMO = -0.236445467408302  LUMO = 86.390872597962
  mo_energy =
[-1.20271117e+02 -1.22542261e+01 -6.65490360e+00 -6.65490360e+00
 -6.65490360e+00 -1.16354502e+00 -2.36445467e-01 -2.36445467e-01
 -2.36445467e-01  8.63908726e+01  6.78588680e+02  3.93626768e+03
  2.96207148e+04  1.54739900e+05  6.64893013e+05  2.71962900e+06
  1.10459670e+07  4.65100881e+07]
E1 = -706.5531404326656  E_coul = 198.9134225962363
cycle= 3 E= -507.639717836429  delta_E= -1.1e-07  |g|= 9.48e-05  |ddm|= 0.000202
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.000126769
diis-c [-3.95754312e-10  3.34163506e-05 -2.54629499e-02  1.02542953e+00]
  HOMO = -0.236447679131565  LUMO = 86.3908279417316
  mo_energy =
[-1.20271230e+02 -1.22542418e+01 -6.65493056e+00 -6.65493056e+00
 -6.65493056e+00 -1.16354567e+00 -2.36447679e-01 -2.36447679e-01
 -2.36447679e-01  8.63908279e+01  6.78588562e+02  3.93626754e+03
  2.96207147e+04  1.54739900e+05  6.64893013e+05  2.71962900e+06
  1.10459670e+07  4.65100881e+07]
E1 = -706.553133195157  E_coul = 198.91341535868773
cycle= 4 E= -507.639717836469  delta_E= -3.99e-11  |g|= 3.74e-07  |ddm|= 3.44e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.553133195157  E_coul = 198.91341535868773
  HOMO = -0.236447662829288  LUMO = 86.390828279771
  mo_energy =
[-1.20271230e+02 -1.22542417e+01 -6.65493039e+00 -6.65493039e+00
 -6.65493039e+00 -1.16354567e+00 -2.36447663e-01 -2.36447663e-01
 -2.36447663e-01  8.63908283e+01  6.78588564e+02  3.93626754e+03
  2.96207147e+04  1.54739900e+05  6.64893013e+05  2.71962900e+06
  1.10459670e+07  4.65100881e+07]
E1 = -706.5531332321584  E_coul = 198.91341539568865
Extra cycle  E= -507.63971783647  delta_E= -5.68e-13  |g|= 6.45e-09  |ddm|= 1.64e-08
    CPU time for scf_cycle      0.10 sec, wall time      0.11 sec
exp = [1.87954849e+07 4.69887121e+06 1.17471780e+06 2.93679451e+05
 7.34198654e+04 1.83539276e+04 2.23414245e+03 4.56889035e+02
 1.21733172e+02 3.75930556e+01 4.74127972e+00 3.91206045e-01
 8.59861038e+00 4.90850780e-01]
E = -507.6397178364698
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="BFGS",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((14, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.6988712134173084e+06,1.1747178033543271e+06,2.9367945083858178e+05,7.3419865393677101e+04,1.8353927627435987e+04,2.2341424145819028e+03,4.5688904996449571e+02,1.2173317272260677e+02,3.7593061247508530e+01,4.7412722556720146e+00,3.9120358491841306e-01,8.5986297237246045e+00,4.9084868336327880e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "12s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:13:54 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  18795484.8537        1
[INPUT] 0    0    [1    /1   ]  4698871.21342        1
[INPUT] 0    0    [1    /1   ]  1174717.80335        1
[INPUT] 0    0    [1    /1   ]  293679.450839        1
[INPUT] 0    0    [1    /1   ]  73419.8653938        1
[INPUT] 0    0    [1    /1   ]  18353.9276036        1
[INPUT] 0    0    [1    /1   ]  2234.14245069        1
[INPUT] 0    0    [1    /1   ]  456.889034962        1
[INPUT] 0    0    [1    /1   ]  121.733171767        1
[INPUT] 0    0    [1    /1   ]  37.5930555901        1
[INPUT] 0    0    [1    /1   ]  4.74127972117        1
[INPUT] 0    0    [1    /1   ]  0.391206045259       1
[INPUT] 1    0    [1    /1   ]  8.59861038395        1
[INPUT] 1    0    [1    /1   ]  0.49085077988        1

nuclear repulsion = 0
number of shells = 14
number of NR pGTOs = 18
number of NR cGTOs = 18
basis = {'Ar': [[0, [18795484.853669234, 1.0]], [0, [4698871.213417308, 1.0]], [0, [1174717.803354327, 1.0]], [0, [293679.45083854266, 1.0]], [0, [73419.86539380415, 1.0]], [0, [18353.92760358363, 1.0]], [0, [2234.1424506937383, 1.0]], [0, [456.8890349618427, 1.0]], [0, [121.73317176729519, 1.0]], [0, [37.593055590091375, 1.0]], [0, [4.741279721174187, 1.0]], [0, [0.39120604525913666, 1.0]], [1, [8.598610383952629, 1.0]], [1, [0.4908507798796615, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [18795484.85366923]
bas 1, expnt(s) = [4698871.21341731]
bas 2, expnt(s) = [1174717.80335433]
bas 3, expnt(s) = [293679.45083854]
bas 4, expnt(s) = [73419.8653938]
bas 5, expnt(s) = [18353.92760358]
bas 6, expnt(s) = [2234.14245069]
bas 7, expnt(s) = [456.88903496]
bas 8, expnt(s) = [121.73317177]
bas 9, expnt(s) = [37.59305559]
bas 10, expnt(s) = [4.74127972]
bas 11, expnt(s) = [0.39120605]
bas 12, expnt(s) = [8.59861038]
bas 13, expnt(s) = [0.49085078]
CPU time:        15.04
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  0  1  1  0 42 43  0]
 [ 0  0  1  1  0 44 45  0]
 [ 0  0  1  1  0 46 47  0]
 [ 0  1  1  1  0 48 49  0]
 [ 0  1  1  1  0 50 51  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.87954849e+07 7.21199097e+05 4.69887121e+06 2.54982386e+05
 1.17471780e+06 9.01498871e+04 2.93679451e+05 3.18727983e+04
 7.34198654e+04 1.12687362e+04 1.83539276e+04 3.98393079e+03
 2.23414245e+03 8.21009476e+02 4.56889035e+02 2.49673860e+02
 1.21733172e+02 9.25916296e+01 3.75930556e+01 3.83570982e+01
 4.74127972e+00 8.11776936e+00 3.91206045e-01 1.24973862e+00
 8.59861038e+00 4.29555942e+01 4.90850780e-01 1.19859165e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.31997239675195
cond(S) = 56.39526784451671
E1 = -688.8313313056037  E_coul = 184.9154050469642
init E= -503.91592625864
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.680893849361631  LUMO = 85.0613580949032
  mo_energy =
[-1.21650503e+02 -1.32811400e+01 -7.62160163e+00 -7.62160163e+00
 -7.62160163e+00 -1.65070472e+00 -6.80893849e-01 -6.80893849e-01
 -6.80893849e-01  8.50613581e+01  6.77228642e+02  3.93503190e+03
  2.96196452e+04  1.54738903e+05  6.64892046e+05  2.71962805e+06
  1.10459661e+07  4.65100872e+07]
E1 = -706.5850116319843  E_coul = 198.94572179220575
cycle= 1 E= -507.639289839779  delta_E= -3.72  |g|= 0.317  |ddm|= 0.301
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.420501
diis-c [-0.17682116  1.        ]
  HOMO = -0.236270267358008  LUMO = 86.3943907400584
  mo_energy =
[-1.20262478e+02 -1.22530375e+01 -6.65306270e+00 -6.65306270e+00
 -6.65306270e+00 -1.16348026e+00 -2.36270267e-01 -2.36270267e-01
 -2.36270267e-01  8.63943907e+01  6.78599263e+02  3.93628357e+03
  2.96207340e+04  1.54739920e+05  6.64893033e+05  2.71962902e+06
  1.10459671e+07  4.65100881e+07]
E1 = -706.5535806141555  E_coul = 198.91386288780194
cycle= 2 E= -507.639717726354  delta_E= -0.000428  |g|= 0.00474  |ddm|= 0.0143
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00504165
diis-c [-2.53729781e-05 -5.06234551e-04  1.00050623e+00]
  HOMO = -0.236445467408302  LUMO = 86.390872597962
  mo_energy =
[-1.20271117e+02 -1.22542261e+01 -6.65490360e+00 -6.65490360e+00
 -6.65490360e+00 -1.16354502e+00 -2.36445467e-01 -2.36445467e-01
 -2.36445467e-01  8.63908726e+01  6.78588680e+02  3.93626768e+03
  2.96207148e+04  1.54739900e+05  6.64893013e+05  2.71962900e+06
  1.10459670e+07  4.65100881e+07]
E1 = -706.5531404326656  E_coul = 198.9134225962363
cycle= 3 E= -507.639717836429  delta_E= -1.1e-07  |g|= 9.48e-05  |ddm|= 0.000202
    CPU time for cycle= 3      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.000126769
diis-c [-3.95754312e-10  3.34163506e-05 -2.54629499e-02  1.02542953e+00]
  HOMO = -0.236447679131565  LUMO = 86.3908279417316
  mo_energy =
[-1.20271230e+02 -1.22542418e+01 -6.65493056e+00 -6.65493056e+00
 -6.65493056e+00 -1.16354567e+00 -2.36447679e-01 -2.36447679e-01
 -2.36447679e-01  8.63908279e+01  6.78588562e+02  3.93626754e+03
  2.96207147e+04  1.54739900e+05  6.64893013e+05  2.71962900e+06
  1.10459670e+07  4.65100881e+07]
E1 = -706.553133195157  E_coul = 198.91341535868773
cycle= 4 E= -507.639717836469  delta_E= -3.99e-11  |g|= 3.74e-07  |ddm|= 3.44e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.553133195157  E_coul = 198.91341535868773
  HOMO = -0.236447662829288  LUMO = 86.390828279771
  mo_energy =
[-1.20271230e+02 -1.22542417e+01 -6.65493039e+00 -6.65493039e+00
 -6.65493039e+00 -1.16354567e+00 -2.36447663e-01 -2.36447663e-01
 -2.36447663e-01  8.63908283e+01  6.78588564e+02  3.93626754e+03
  2.96207147e+04  1.54739900e+05  6.64893013e+05  2.71962900e+06
  1.10459670e+07  4.65100881e+07]
E1 = -706.5531332321584  E_coul = 198.91341539568865
Extra cycle  E= -507.63971783647  delta_E= -5.68e-13  |g|= 6.45e-09  |ddm|= 1.64e-08
    CPU time for scf_cycle      0.10 sec, wall time      0.10 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 56.39526784451671
E1 = -706.5531332321584  E_coul = 198.91341539568865
init E= -507.63971783647
    CPU time for initialize scf      0.12 sec, wall time      0.12 sec
  HOMO = -0.236447662638624  LUMO = 86.3908282839037
  mo_energy =
[-1.20271230e+02 -1.22542417e+01 -6.65493039e+00 -6.65493039e+00
 -6.65493039e+00 -1.16354566e+00 -2.36447663e-01 -2.36447663e-01
 -2.36447663e-01  8.63908283e+01  6.78588564e+02  3.93626754e+03
  2.96207147e+04  1.54739900e+05  6.64893013e+05  2.71962900e+06
  1.10459670e+07  4.65100881e+07]
E1 = -706.5531332327172  E_coul = 198.91341539624813
cycle= 1 E= -507.639717836469  delta_E= 7.39e-13  |g|= 1.75e-10  |ddm|= 2.54e-10
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -706.5531332327172  E_coul = 198.91341539624813
  HOMO = -0.236447662635936  LUMO = 86.3908282839623
  mo_energy =
[-1.20271230e+02 -1.22542417e+01 -6.65493039e+00 -6.65493039e+00
 -6.65493039e+00 -1.16354566e+00 -2.36447663e-01 -2.36447663e-01
 -2.36447663e-01  8.63908283e+01  6.78588564e+02  3.93626754e+03
  2.96207147e+04  1.54739900e+05  6.64893013e+05  2.71962900e+06
  1.10459670e+07  4.65100881e+07]
E1 = -706.5531332327275  E_coul = 198.91341539625782
Extra cycle  E= -507.63971783647  delta_E= -6.25e-13  |g|= 2.05e-10  |ddm|= 4.55e-12
    CPU time for scf_cycle      0.19 sec, wall time      0.19 sec
exp = [1.87954849e+07 4.69887121e+06 1.17471780e+06 2.93679451e+05
 7.34198654e+04 1.83539276e+04 2.23414245e+03 4.56889035e+02
 1.21733172e+02 3.75930556e+01 4.74127972e+00 3.91206045e-01
 8.59861038e+00 4.90850780e-01]
grad_E = [-1.11279690e-13  1.80103108e-11  8.62819896e-12  1.05339866e-08
 -3.42033065e-08  6.42104327e-06 -9.72109677e-06  4.03522625e-06
  2.78331908e-07  1.44762381e-06  3.09545964e-06  4.02059893e-05
 -1.19026606e-05  1.05470578e-04]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="BFGS",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((14, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.6988712134173084e+06,1.1747178033543271e+06,2.9367945083858178e+05,7.3419865393677101e+04,1.8353927627435987e+04,2.2341424145819028e+03,4.5688904996449571e+02,1.2173317272260677e+02,3.7593061247508530e+01,4.7412722556720146e+00,3.9120358491841306e-01,8.5986297237246045e+00,4.9084868336327880e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "12s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:13:57 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  18795484.8537        1
[INPUT] 0    0    [1    /1   ]  4698871.21342        1
[INPUT] 0    0    [1    /1   ]  1174717.80335        1
[INPUT] 0    0    [1    /1   ]  293679.450839        1
[INPUT] 0    0    [1    /1   ]  73419.8653938        1
[INPUT] 0    0    [1    /1   ]  18353.9275953        1
[INPUT] 0    0    [1    /1   ]  2234.14246329        1
[INPUT] 0    0    [1    /1   ]  456.889029729        1
[INPUT] 0    0    [1    /1   ]  121.733171429        1
[INPUT] 0    0    [1    /1   ]  37.5930536336        1
[INPUT] 0    0    [1    /1   ]  4.74128107004        1
[INPUT] 0    0    [1    /1   ]  0.391205728477       1
[INPUT] 1    0    [1    /1   ]  8.59860753597        1
[INPUT] 1    0    [1    /1   ]  0.490850387408       1

nuclear repulsion = 0
number of shells = 14
number of NR pGTOs = 18
number of NR cGTOs = 18
basis = {'Ar': [[0, [18795484.853669234, 1.0]], [0, [4698871.213417308, 1.0]], [0, [1174717.803354327, 1.0]], [0, [293679.450838529, 1.0]], [0, [73419.86539384848, 1.0]], [0, [18353.927595263074, 1.0]], [0, [2234.1424632907897, 1.0]], [0, [456.88902972923063, 1.0]], [0, [121.73317142912389, 1.0]], [0, [37.59305363361067, 1.0]], [0, [4.74128107003834, 1.0]], [0, [0.39120572847656737, 1.0]], [1, [8.598607535967812, 1.0]], [1, [0.49085038740823916, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [18795484.85366923]
bas 1, expnt(s) = [4698871.21341731]
bas 2, expnt(s) = [1174717.80335433]
bas 3, expnt(s) = [293679.45083853]
bas 4, expnt(s) = [73419.86539385]
bas 5, expnt(s) = [18353.92759526]
bas 6, expnt(s) = [2234.14246329]
bas 7, expnt(s) = [456.88902973]
bas 8, expnt(s) = [121.73317143]
bas 9, expnt(s) = [37.59305363]
bas 10, expnt(s) = [4.74128107]
bas 11, expnt(s) = [0.39120573]
bas 12, expnt(s) = [8.59860754]
bas 13, expnt(s) = [0.49085039]
CPU time:        18.03
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  0  1  1  0 42 43  0]
 [ 0  0  1  1  0 44 45  0]
 [ 0  0  1  1  0 46 47  0]
 [ 0  1  1  1  0 48 49  0]
 [ 0  1  1  1  0 50 51  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.87954849e+07 7.21199097e+05 4.69887121e+06 2.54982386e+05
 1.17471780e+06 9.01498871e+04 2.93679451e+05 3.18727983e+04
 7.34198654e+04 1.12687362e+04 1.83539276e+04 3.98393079e+03
 2.23414246e+03 8.21009479e+02 4.56889030e+02 2.49673858e+02
 1.21733171e+02 9.25916294e+01 3.75930536e+01 3.83570967e+01
 4.74128107e+00 8.11777109e+00 3.91205728e-01 1.24973787e+00
 8.59860754e+00 4.29555764e+01 4.90850387e-01 1.19859046e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319972927676837
cond(S) = 56.39526774437643
E1 = -688.831301237194  E_coul = 184.91537595928622
init E= -503.915925277908
    CPU time for initialize scf      0.02 sec, wall time      0.03 sec
  HOMO = -0.680894436661993  LUMO = 85.0613551937804
  mo_energy =
[-1.21650507e+02 -1.32811424e+01 -7.62160357e+00 -7.62160357e+00
 -7.62160357e+00 -1.65070517e+00 -6.80894437e-01 -6.80894437e-01
 -6.80894437e-01  8.50613552e+01  6.77228629e+02  3.93503189e+03
  2.96196452e+04  1.54738903e+05  6.64892046e+05  2.71962805e+06
  1.10459661e+07  4.65100872e+07]
E1 = -706.5849736146466  E_coul = 198.9456837738571
cycle= 1 E= -507.63928984079  delta_E= -3.72  |g|= 0.317  |ddm|= 0.301
    CPU time for cycle= 1      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.420501
diis-c [-0.17682112  1.        ]
  HOMO = -0.236271320069378  LUMO = 86.3943872013288
  mo_energy =
[-1.20262483e+02 -1.22530404e+01 -6.65306520e+00 -6.65306520e+00
 -6.65306520e+00 -1.16348114e+00 -2.36271320e-01 -2.36271320e-01
 -2.36271320e-01  8.63943872e+01  6.78599250e+02  3.93628356e+03
  2.96207341e+04  1.54739920e+05  6.64893033e+05  2.71962902e+06
  1.10459671e+07  4.65100881e+07]
E1 = -706.5535426302391  E_coul = 198.9138249036762
cycle= 2 E= -507.639717726563  delta_E= -0.000428  |g|= 0.00474  |ddm|= 0.0143
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00504164
diis-c [-2.53729117e-05 -5.06230645e-04  1.00050623e+00]
  HOMO = -0.236446519672564  LUMO = 86.390869062853
  mo_energy =
[-1.20271122e+02 -1.22542290e+01 -6.65490610e+00 -6.65490610e+00
 -6.65490610e+00 -1.16354590e+00 -2.36446520e-01 -2.36446520e-01
 -2.36446520e-01  8.63908691e+01  6.78588667e+02  3.93626767e+03
  2.96207148e+04  1.54739900e+05  6.64893013e+05  2.71962900e+06
  1.10459670e+07  4.65100881e+07]
E1 = -706.5531024492576  E_coul = 198.9133846126196
cycle= 3 E= -507.639717836638  delta_E= -1.1e-07  |g|= 9.48e-05  |ddm|= 0.000202
    CPU time for cycle= 3      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.000126769
diis-c [-3.95755173e-10  3.34160806e-05 -2.54629495e-02  1.02542953e+00]
  HOMO = -0.236448731390135  LUMO = 86.3908244066564
  mo_energy =
[-1.20271235e+02 -1.22542447e+01 -6.65493305e+00 -6.65493305e+00
 -6.65493305e+00 -1.16354656e+00 -2.36448731e-01 -2.36448731e-01
 -2.36448731e-01  8.63908244e+01  6.78588549e+02  3.93626752e+03
  2.96207147e+04  1.54739900e+05  6.64893013e+05  2.71962900e+06
  1.10459670e+07  4.65100881e+07]
E1 = -706.5530952117554  E_coul = 198.91337737507743
cycle= 4 E= -507.639717836678  delta_E= -4e-11  |g|= 3.74e-07  |ddm|= 3.44e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.5530952117554  E_coul = 198.91337737507743
  HOMO = -0.236448715087858  LUMO = 86.3908247446984
  mo_energy =
[-1.20271234e+02 -1.22542446e+01 -6.65493289e+00 -6.65493289e+00
 -6.65493289e+00 -1.16354655e+00 -2.36448715e-01 -2.36448715e-01
 -2.36448715e-01  8.63908247e+01  6.78588551e+02  3.93626753e+03
  2.96207147e+04  1.54739900e+05  6.64893013e+05  2.71962900e+06
  1.10459670e+07  4.65100881e+07]
E1 = -706.5530952487558  E_coul = 198.91337741207784
Extra cycle  E= -507.639717836678  delta_E=    0  |g|= 6.45e-09  |ddm|= 1.64e-08
    CPU time for scf_cycle      0.10 sec, wall time      0.11 sec
exp = [1.87954849e+07 4.69887121e+06 1.17471780e+06 2.93679451e+05
 7.34198654e+04 1.83539276e+04 2.23414246e+03 4.56889030e+02
 1.21733171e+02 3.75930536e+01 4.74128107e+00 3.91205728e-01
 8.59860754e+00 4.90850387e-01]
E = -507.63971783667796
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="BFGS",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((14, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.6988712134173084e+06,1.1747178033543271e+06,2.9367945083858178e+05,7.3419865393677101e+04,1.8353927627435987e+04,2.2341424145819028e+03,4.5688904996449571e+02,1.2173317272260677e+02,3.7593061247508530e+01,4.7412722556720146e+00,3.9120358491841306e-01,8.5986297237246045e+00,4.9084868336327880e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "12s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:13:57 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  18795484.8537        1
[INPUT] 0    0    [1    /1   ]  4698871.21342        1
[INPUT] 0    0    [1    /1   ]  1174717.80335        1
[INPUT] 0    0    [1    /1   ]  293679.450839        1
[INPUT] 0    0    [1    /1   ]  73419.8653938        1
[INPUT] 0    0    [1    /1   ]  18353.9275953        1
[INPUT] 0    0    [1    /1   ]  2234.14246329        1
[INPUT] 0    0    [1    /1   ]  456.889029729        1
[INPUT] 0    0    [1    /1   ]  121.733171429        1
[INPUT] 0    0    [1    /1   ]  37.5930536336        1
[INPUT] 0    0    [1    /1   ]  4.74128107004        1
[INPUT] 0    0    [1    /1   ]  0.391205728477       1
[INPUT] 1    0    [1    /1   ]  8.59860753597        1
[INPUT] 1    0    [1    /1   ]  0.490850387408       1

nuclear repulsion = 0
number of shells = 14
number of NR pGTOs = 18
number of NR cGTOs = 18
basis = {'Ar': [[0, [18795484.853669234, 1.0]], [0, [4698871.213417308, 1.0]], [0, [1174717.803354327, 1.0]], [0, [293679.450838529, 1.0]], [0, [73419.86539384848, 1.0]], [0, [18353.927595263074, 1.0]], [0, [2234.1424632907897, 1.0]], [0, [456.88902972923063, 1.0]], [0, [121.73317142912389, 1.0]], [0, [37.59305363361067, 1.0]], [0, [4.74128107003834, 1.0]], [0, [0.39120572847656737, 1.0]], [1, [8.598607535967812, 1.0]], [1, [0.49085038740823916, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [18795484.85366923]
bas 1, expnt(s) = [4698871.21341731]
bas 2, expnt(s) = [1174717.80335433]
bas 3, expnt(s) = [293679.45083853]
bas 4, expnt(s) = [73419.86539385]
bas 5, expnt(s) = [18353.92759526]
bas 6, expnt(s) = [2234.14246329]
bas 7, expnt(s) = [456.88902973]
bas 8, expnt(s) = [121.73317143]
bas 9, expnt(s) = [37.59305363]
bas 10, expnt(s) = [4.74128107]
bas 11, expnt(s) = [0.39120573]
bas 12, expnt(s) = [8.59860754]
bas 13, expnt(s) = [0.49085039]
CPU time:        18.24
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  0  1  1  0 42 43  0]
 [ 0  0  1  1  0 44 45  0]
 [ 0  0  1  1  0 46 47  0]
 [ 0  1  1  1  0 48 49  0]
 [ 0  1  1  1  0 50 51  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.87954849e+07 7.21199097e+05 4.69887121e+06 2.54982386e+05
 1.17471780e+06 9.01498871e+04 2.93679451e+05 3.18727983e+04
 7.34198654e+04 1.12687362e+04 1.83539276e+04 3.98393079e+03
 2.23414246e+03 8.21009479e+02 4.56889030e+02 2.49673858e+02
 1.21733171e+02 9.25916294e+01 3.75930536e+01 3.83570967e+01
 4.74128107e+00 8.11777109e+00 3.91205728e-01 1.24973787e+00
 8.59860754e+00 4.29555764e+01 4.90850387e-01 1.19859046e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319972927676837
cond(S) = 56.39526774437643
E1 = -688.831301237194  E_coul = 184.91537595928622
init E= -503.915925277908
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.680894436661993  LUMO = 85.0613551937804
  mo_energy =
[-1.21650507e+02 -1.32811424e+01 -7.62160357e+00 -7.62160357e+00
 -7.62160357e+00 -1.65070517e+00 -6.80894437e-01 -6.80894437e-01
 -6.80894437e-01  8.50613552e+01  6.77228629e+02  3.93503189e+03
  2.96196452e+04  1.54738903e+05  6.64892046e+05  2.71962805e+06
  1.10459661e+07  4.65100872e+07]
E1 = -706.5849736146466  E_coul = 198.9456837738571
cycle= 1 E= -507.63928984079  delta_E= -3.72  |g|= 0.317  |ddm|= 0.301
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.420501
diis-c [-0.17682112  1.        ]
  HOMO = -0.236271320069378  LUMO = 86.3943872013288
  mo_energy =
[-1.20262483e+02 -1.22530404e+01 -6.65306520e+00 -6.65306520e+00
 -6.65306520e+00 -1.16348114e+00 -2.36271320e-01 -2.36271320e-01
 -2.36271320e-01  8.63943872e+01  6.78599250e+02  3.93628356e+03
  2.96207341e+04  1.54739920e+05  6.64893033e+05  2.71962902e+06
  1.10459671e+07  4.65100881e+07]
E1 = -706.5535426302391  E_coul = 198.9138249036762
cycle= 2 E= -507.639717726563  delta_E= -0.000428  |g|= 0.00474  |ddm|= 0.0143
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00504164
diis-c [-2.53729117e-05 -5.06230645e-04  1.00050623e+00]
  HOMO = -0.236446519672564  LUMO = 86.390869062853
  mo_energy =
[-1.20271122e+02 -1.22542290e+01 -6.65490610e+00 -6.65490610e+00
 -6.65490610e+00 -1.16354590e+00 -2.36446520e-01 -2.36446520e-01
 -2.36446520e-01  8.63908691e+01  6.78588667e+02  3.93626767e+03
  2.96207148e+04  1.54739900e+05  6.64893013e+05  2.71962900e+06
  1.10459670e+07  4.65100881e+07]
E1 = -706.5531024492576  E_coul = 198.9133846126196
cycle= 3 E= -507.639717836638  delta_E= -1.1e-07  |g|= 9.48e-05  |ddm|= 0.000202
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.000126769
diis-c [-3.95755173e-10  3.34160806e-05 -2.54629495e-02  1.02542953e+00]
  HOMO = -0.236448731390135  LUMO = 86.3908244066564
  mo_energy =
[-1.20271235e+02 -1.22542447e+01 -6.65493305e+00 -6.65493305e+00
 -6.65493305e+00 -1.16354656e+00 -2.36448731e-01 -2.36448731e-01
 -2.36448731e-01  8.63908244e+01  6.78588549e+02  3.93626752e+03
  2.96207147e+04  1.54739900e+05  6.64893013e+05  2.71962900e+06
  1.10459670e+07  4.65100881e+07]
E1 = -706.5530952117554  E_coul = 198.91337737507743
cycle= 4 E= -507.639717836678  delta_E= -4e-11  |g|= 3.74e-07  |ddm|= 3.44e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.5530952117554  E_coul = 198.91337737507743
  HOMO = -0.236448715087858  LUMO = 86.3908247446984
  mo_energy =
[-1.20271234e+02 -1.22542446e+01 -6.65493289e+00 -6.65493289e+00
 -6.65493289e+00 -1.16354655e+00 -2.36448715e-01 -2.36448715e-01
 -2.36448715e-01  8.63908247e+01  6.78588551e+02  3.93626753e+03
  2.96207147e+04  1.54739900e+05  6.64893013e+05  2.71962900e+06
  1.10459670e+07  4.65100881e+07]
E1 = -706.5530952487558  E_coul = 198.91337741207784
Extra cycle  E= -507.639717836678  delta_E=    0  |g|= 6.45e-09  |ddm|= 1.64e-08
    CPU time for scf_cycle      0.10 sec, wall time      0.11 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 56.39526774437643
E1 = -706.5530952487558  E_coul = 198.91337741207784
init E= -507.639717836678
    CPU time for initialize scf      0.12 sec, wall time      0.13 sec
  HOMO = -0.236448714897197  LUMO = 86.3908247488286
  mo_energy =
[-1.20271234e+02 -1.22542446e+01 -6.65493289e+00 -6.65493289e+00
 -6.65493289e+00 -1.16354655e+00 -2.36448715e-01 -2.36448715e-01
 -2.36448715e-01  8.63908247e+01  6.78588551e+02  3.93626753e+03
  2.96207147e+04  1.54739900e+05  6.64893013e+05  2.71962900e+06
  1.10459670e+07  4.65100881e+07]
E1 = -706.5530952493154  E_coul = 198.9133774126378
cycle= 1 E= -507.639717836678  delta_E= 3.41e-13  |g|= 2.67e-10  |ddm|= 2.54e-10
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -706.5530952493154  E_coul = 198.9133774126378
  HOMO = -0.236448714894506  LUMO = 86.3908247488869
  mo_energy =
[-1.20271234e+02 -1.22542446e+01 -6.65493289e+00 -6.65493289e+00
 -6.65493289e+00 -1.16354655e+00 -2.36448715e-01 -2.36448715e-01
 -2.36448715e-01  8.63908247e+01  6.78588551e+02  3.93626753e+03
  2.96207147e+04  1.54739900e+05  6.64893013e+05  2.71962900e+06
  1.10459670e+07  4.65100881e+07]
E1 = -706.5530952493253  E_coul = 198.9133774126474
Extra cycle  E= -507.639717836678  delta_E= -3.41e-13  |g|= 8.31e-11  |ddm|= 4.53e-12
    CPU time for scf_cycle      0.19 sec, wall time      0.20 sec
exp = [1.87954849e+07 4.69887121e+06 1.17471780e+06 2.93679451e+05
 7.34198654e+04 1.83539276e+04 2.23414246e+03 4.56889030e+02
 1.21733171e+02 3.75930536e+01 4.74128107e+00 3.91205728e-01
 8.59860754e+00 4.90850387e-01]
grad_E = [-1.11279724e-13  1.80103090e-11  8.62818205e-12  1.05339856e-08
 -3.42033123e-08  6.42104256e-06 -9.72103113e-06  4.03412005e-06
  2.85293137e-07  1.42618165e-06  3.99895731e-06  3.36513523e-05
 -1.38772671e-05  9.29019154e-05]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="BFGS",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((14, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.6988712134173084e+06,1.1747178033543271e+06,2.9367945083858178e+05,7.3419865393677101e+04,1.8353927627435987e+04,2.2341424145819028e+03,4.5688904996449571e+02,1.2173317272260677e+02,3.7593061247508530e+01,4.7412722556720146e+00,3.9120358491841306e-01,8.5986297237246045e+00,4.9084868336327880e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "12s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:14:00 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  18795484.8537        1
[INPUT] 0    0    [1    /1   ]  4698871.21342        1
[INPUT] 0    0    [1    /1   ]  1174717.80335        1
[INPUT] 0    0    [1    /1   ]  293679.450838        1
[INPUT] 0    0    [1    /1   ]  73419.865394         1
[INPUT] 0    0    [1    /1   ]  18353.927562         1
[INPUT] 0    0    [1    /1   ]  2234.14251368        1
[INPUT] 0    0    [1    /1   ]  456.889008799        1
[INPUT] 0    0    [1    /1   ]  121.733170076        1
[INPUT] 0    0    [1    /1   ]  37.5930458077        1
[INPUT] 0    0    [1    /1   ]  4.74128646549        1
[INPUT] 0    0    [1    /1   ]  0.391204461346       1
[INPUT] 1    0    [1    /1   ]  8.59859614403        1
[INPUT] 1    0    [1    /1   ]  0.490848817523       1

nuclear repulsion = 0
number of shells = 14
number of NR pGTOs = 18
number of NR cGTOs = 18
basis = {'Ar': [[0, [18795484.853669234, 1.0]], [0, [4698871.213417308, 1.0]], [0, [1174717.803354327, 1.0]], [0, [293679.4508384744, 1.0]], [0, [73419.86539402576, 1.0]], [0, [18353.927561980858, 1.0]], [0, [2234.1425136789944, 1.0]], [0, [456.8890087987824, 1.0]], [0, [121.73317007643867, 1.0]], [0, [37.59304580768786, 1.0]], [0, [4.741286465494955, 1.0]], [0, [0.39120446134629033, 1.0]], [1, [8.598596144028544, 1.0]], [1, [0.4908488175225498, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [18795484.85366923]
bas 1, expnt(s) = [4698871.21341731]
bas 2, expnt(s) = [1174717.80335433]
bas 3, expnt(s) = [293679.45083847]
bas 4, expnt(s) = [73419.86539403]
bas 5, expnt(s) = [18353.92756198]
bas 6, expnt(s) = [2234.14251368]
bas 7, expnt(s) = [456.8890088]
bas 8, expnt(s) = [121.73317008]
bas 9, expnt(s) = [37.59304581]
bas 10, expnt(s) = [4.74128647]
bas 11, expnt(s) = [0.39120446]
bas 12, expnt(s) = [8.59859614]
bas 13, expnt(s) = [0.49084882]
CPU time:        21.13
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  0  1  1  0 42 43  0]
 [ 0  0  1  1  0 44 45  0]
 [ 0  0  1  1  0 46 47  0]
 [ 0  1  1  1  0 48 49  0]
 [ 0  1  1  1  0 50 51  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.87954849e+07 7.21199097e+05 4.69887121e+06 2.54982386e+05
 1.17471780e+06 9.01498871e+04 2.93679451e+05 3.18727983e+04
 7.34198654e+04 1.12687362e+04 1.83539276e+04 3.98393078e+03
 2.23414251e+03 8.21009493e+02 4.56889009e+02 2.49673849e+02
 1.21733170e+02 9.25916286e+01 3.75930458e+01 3.83570907e+01
 4.74128647e+00 8.11777802e+00 3.91204461e-01 1.24973483e+00
 8.59859614e+00 4.29555053e+01 4.90848818e-01 1.19858566e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319975051338297
cond(S) = 56.39526734381751
E1 = -688.8311809625853  E_coul = 184.91525960786768
init E= -503.915921354718
    CPU time for initialize scf      0.02 sec, wall time      0.03 sec
  HOMO = -0.680896785874171  LUMO = 85.061343589244
  mo_energy =
[-1.21650523e+02 -1.32811518e+01 -7.62161133e+00 -7.62161133e+00
 -7.62161133e+00 -1.65070699e+00 -6.80896786e-01 -6.80896786e-01
 -6.80896786e-01  8.50613436e+01  6.77228579e+02  3.93503185e+03
  2.96196452e+04  1.54738903e+05  6.64892046e+05  2.71962805e+06
  1.10459661e+07  4.65100872e+07]
E1 = -706.584821544978  E_coul = 198.94553170027973
cycle= 1 E= -507.639289844698  delta_E= -3.72  |g|= 0.317  |ddm|= 0.301
    CPU time for cycle= 1      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.420501
diis-c [-0.17682098  1.        ]
  HOMO = -0.236275530903768  LUMO = 86.3943730463876
  mo_energy =
[-1.20262501e+02 -1.22530519e+01 -6.65307520e+00 -6.65307520e+00
 -6.65307520e+00 -1.16348468e+00 -2.36275531e-01 -2.36275531e-01
 -2.36275531e-01  8.63943730e+01  6.78599198e+02  3.93628351e+03
  2.96207341e+04  1.54739920e+05  6.64893033e+05  2.71962902e+06
  1.10459671e+07  4.65100881e+07]
E1 = -706.5533906942522  E_coul = 198.91367296699144
cycle= 2 E= -507.639717727261  delta_E= -0.000428  |g|= 0.00474  |ddm|= 0.0143
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00504162
diis-c [-2.53726444e-05 -5.06217723e-04  1.00050622e+00]
  HOMO = -0.236450728719014  LUMO = 86.3908549223944
  mo_energy =
[-1.20271140e+02 -1.22542405e+01 -6.65491609e+00 -6.65491609e+00
 -6.65491609e+00 -1.16354944e+00 -2.36450729e-01 -2.36450729e-01
 -2.36450729e-01  8.63908549e+01  6.78588614e+02  3.93626762e+03
  2.96207148e+04  1.54739900e+05  6.64893013e+05  2.71962900e+06
  1.10459670e+07  4.65100881e+07]
E1 = -706.5529505153022  E_coul = 198.9132326779671
cycle= 3 E= -507.639717837335  delta_E= -1.1e-07  |g|= 9.48e-05  |ddm|= 0.000202
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.000126768
diis-c [-3.95751713e-10  3.34163875e-05 -2.54629790e-02  1.02542956e+00]
  HOMO = -0.23645294041317  LUMO = 86.3908102663475
  mo_energy =
[-1.20271253e+02 -1.22542563e+01 -6.65494305e+00 -6.65494305e+00
 -6.65494305e+00 -1.16355010e+00 -2.36452940e-01 -2.36452940e-01
 -2.36452940e-01  8.63908103e+01  6.78588497e+02  3.93626748e+03
  2.96207147e+04  1.54739900e+05  6.64893013e+05  2.71962900e+06
  1.10459670e+07  4.65100881e+07]
E1 = -706.5529432778275  E_coul = 198.91322544045252
cycle= 4 E= -507.639717837375  delta_E= -3.99e-11  |g|= 3.74e-07  |ddm|= 3.44e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.5529432778275  E_coul = 198.91322544045252
  HOMO = -0.236452924111076  LUMO = 86.3908106043858
  mo_energy =
[-1.20271252e+02 -1.22542562e+01 -6.65494289e+00 -6.65494289e+00
 -6.65494289e+00 -1.16355009e+00 -2.36452924e-01 -2.36452924e-01
 -2.36452924e-01  8.63908106e+01  6.78588498e+02  3.93626748e+03
  2.96207147e+04  1.54739900e+05  6.64893013e+05  2.71962900e+06
  1.10459670e+07  4.65100881e+07]
E1 = -706.5529433148278  E_coul = 198.91322547745307
Extra cycle  E= -507.639717837375  delta_E= 2.84e-13  |g|= 6.45e-09  |ddm|= 1.64e-08
    CPU time for scf_cycle      0.10 sec, wall time      0.11 sec
exp = [1.87954849e+07 4.69887121e+06 1.17471780e+06 2.93679451e+05
 7.34198654e+04 1.83539276e+04 2.23414251e+03 4.56889009e+02
 1.21733170e+02 3.75930458e+01 4.74128647e+00 3.91204461e-01
 8.59859614e+00 4.90848818e-01]
E = -507.6397178373747
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="BFGS",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((14, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.6988712134173084e+06,1.1747178033543271e+06,2.9367945083858178e+05,7.3419865393677101e+04,1.8353927627435987e+04,2.2341424145819028e+03,4.5688904996449571e+02,1.2173317272260677e+02,3.7593061247508530e+01,4.7412722556720146e+00,3.9120358491841306e-01,8.5986297237246045e+00,4.9084868336327880e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "12s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:14:00 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  18795484.8537        1
[INPUT] 0    0    [1    /1   ]  4698871.21342        1
[INPUT] 0    0    [1    /1   ]  1174717.80335        1
[INPUT] 0    0    [1    /1   ]  293679.450838        1
[INPUT] 0    0    [1    /1   ]  73419.865394         1
[INPUT] 0    0    [1    /1   ]  18353.927562         1
[INPUT] 0    0    [1    /1   ]  2234.14251368        1
[INPUT] 0    0    [1    /1   ]  456.889008799        1
[INPUT] 0    0    [1    /1   ]  121.733170076        1
[INPUT] 0    0    [1    /1   ]  37.5930458077        1
[INPUT] 0    0    [1    /1   ]  4.74128646549        1
[INPUT] 0    0    [1    /1   ]  0.391204461346       1
[INPUT] 1    0    [1    /1   ]  8.59859614403        1
[INPUT] 1    0    [1    /1   ]  0.490848817523       1

nuclear repulsion = 0
number of shells = 14
number of NR pGTOs = 18
number of NR cGTOs = 18
basis = {'Ar': [[0, [18795484.853669234, 1.0]], [0, [4698871.213417308, 1.0]], [0, [1174717.803354327, 1.0]], [0, [293679.4508384744, 1.0]], [0, [73419.86539402576, 1.0]], [0, [18353.927561980858, 1.0]], [0, [2234.1425136789944, 1.0]], [0, [456.8890087987824, 1.0]], [0, [121.73317007643867, 1.0]], [0, [37.59304580768786, 1.0]], [0, [4.741286465494955, 1.0]], [0, [0.39120446134629033, 1.0]], [1, [8.598596144028544, 1.0]], [1, [0.4908488175225498, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [18795484.85366923]
bas 1, expnt(s) = [4698871.21341731]
bas 2, expnt(s) = [1174717.80335433]
bas 3, expnt(s) = [293679.45083847]
bas 4, expnt(s) = [73419.86539403]
bas 5, expnt(s) = [18353.92756198]
bas 6, expnt(s) = [2234.14251368]
bas 7, expnt(s) = [456.8890088]
bas 8, expnt(s) = [121.73317008]
bas 9, expnt(s) = [37.59304581]
bas 10, expnt(s) = [4.74128647]
bas 11, expnt(s) = [0.39120446]
bas 12, expnt(s) = [8.59859614]
bas 13, expnt(s) = [0.49084882]
CPU time:        21.35
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  0  1  1  0 42 43  0]
 [ 0  0  1  1  0 44 45  0]
 [ 0  0  1  1  0 46 47  0]
 [ 0  1  1  1  0 48 49  0]
 [ 0  1  1  1  0 50 51  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.87954849e+07 7.21199097e+05 4.69887121e+06 2.54982386e+05
 1.17471780e+06 9.01498871e+04 2.93679451e+05 3.18727983e+04
 7.34198654e+04 1.12687362e+04 1.83539276e+04 3.98393078e+03
 2.23414251e+03 8.21009493e+02 4.56889009e+02 2.49673849e+02
 1.21733170e+02 9.25916286e+01 3.75930458e+01 3.83570907e+01
 4.74128647e+00 8.11777802e+00 3.91204461e-01 1.24973483e+00
 8.59859614e+00 4.29555053e+01 4.90848818e-01 1.19858566e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319975051338297
cond(S) = 56.39526734381751
E1 = -688.8311809625853  E_coul = 184.91525960786768
init E= -503.915921354718
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.680896785874171  LUMO = 85.061343589244
  mo_energy =
[-1.21650523e+02 -1.32811518e+01 -7.62161133e+00 -7.62161133e+00
 -7.62161133e+00 -1.65070699e+00 -6.80896786e-01 -6.80896786e-01
 -6.80896786e-01  8.50613436e+01  6.77228579e+02  3.93503185e+03
  2.96196452e+04  1.54738903e+05  6.64892046e+05  2.71962805e+06
  1.10459661e+07  4.65100872e+07]
E1 = -706.584821544978  E_coul = 198.94553170027973
cycle= 1 E= -507.639289844698  delta_E= -3.72  |g|= 0.317  |ddm|= 0.301
    CPU time for cycle= 1      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.420501
diis-c [-0.17682098  1.        ]
  HOMO = -0.236275530903768  LUMO = 86.3943730463876
  mo_energy =
[-1.20262501e+02 -1.22530519e+01 -6.65307520e+00 -6.65307520e+00
 -6.65307520e+00 -1.16348468e+00 -2.36275531e-01 -2.36275531e-01
 -2.36275531e-01  8.63943730e+01  6.78599198e+02  3.93628351e+03
  2.96207341e+04  1.54739920e+05  6.64893033e+05  2.71962902e+06
  1.10459671e+07  4.65100881e+07]
E1 = -706.5533906942522  E_coul = 198.91367296699144
cycle= 2 E= -507.639717727261  delta_E= -0.000428  |g|= 0.00474  |ddm|= 0.0143
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00504162
diis-c [-2.53726444e-05 -5.06217723e-04  1.00050622e+00]
  HOMO = -0.236450728719014  LUMO = 86.3908549223944
  mo_energy =
[-1.20271140e+02 -1.22542405e+01 -6.65491609e+00 -6.65491609e+00
 -6.65491609e+00 -1.16354944e+00 -2.36450729e-01 -2.36450729e-01
 -2.36450729e-01  8.63908549e+01  6.78588614e+02  3.93626762e+03
  2.96207148e+04  1.54739900e+05  6.64893013e+05  2.71962900e+06
  1.10459670e+07  4.65100881e+07]
E1 = -706.5529505153022  E_coul = 198.9132326779671
cycle= 3 E= -507.639717837335  delta_E= -1.1e-07  |g|= 9.48e-05  |ddm|= 0.000202
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.000126768
diis-c [-3.95751713e-10  3.34163875e-05 -2.54629790e-02  1.02542956e+00]
  HOMO = -0.23645294041317  LUMO = 86.3908102663475
  mo_energy =
[-1.20271253e+02 -1.22542563e+01 -6.65494305e+00 -6.65494305e+00
 -6.65494305e+00 -1.16355010e+00 -2.36452940e-01 -2.36452940e-01
 -2.36452940e-01  8.63908103e+01  6.78588497e+02  3.93626748e+03
  2.96207147e+04  1.54739900e+05  6.64893013e+05  2.71962900e+06
  1.10459670e+07  4.65100881e+07]
E1 = -706.5529432778275  E_coul = 198.91322544045252
cycle= 4 E= -507.639717837375  delta_E= -3.99e-11  |g|= 3.74e-07  |ddm|= 3.44e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.5529432778275  E_coul = 198.91322544045252
  HOMO = -0.236452924111076  LUMO = 86.3908106043858
  mo_energy =
[-1.20271252e+02 -1.22542562e+01 -6.65494289e+00 -6.65494289e+00
 -6.65494289e+00 -1.16355009e+00 -2.36452924e-01 -2.36452924e-01
 -2.36452924e-01  8.63908106e+01  6.78588498e+02  3.93626748e+03
  2.96207147e+04  1.54739900e+05  6.64893013e+05  2.71962900e+06
  1.10459670e+07  4.65100881e+07]
E1 = -706.5529433148278  E_coul = 198.91322547745307
Extra cycle  E= -507.639717837375  delta_E= 2.84e-13  |g|= 6.45e-09  |ddm|= 1.64e-08
    CPU time for scf_cycle      0.11 sec, wall time      0.11 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 56.39526734381751
E1 = -706.5529433148278  E_coul = 198.91322547745307
init E= -507.639717837375
    CPU time for initialize scf      0.12 sec, wall time      0.12 sec
  HOMO = -0.23645292392042  LUMO = 86.3908106085179
  mo_energy =
[-1.20271252e+02 -1.22542562e+01 -6.65494289e+00 -6.65494289e+00
 -6.65494289e+00 -1.16355009e+00 -2.36452924e-01 -2.36452924e-01
 -2.36452924e-01  8.63908106e+01  6.78588498e+02  3.93626748e+03
  2.96207147e+04  1.54739900e+05  6.64893013e+05  2.71962900e+06
  1.10459670e+07  4.65100881e+07]
E1 = -706.5529433153878  E_coul = 198.91322547801278
cycle= 1 E= -507.639717837375  delta_E= -2.84e-13  |g|= 1.96e-10  |ddm|= 2.54e-10
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -706.5529433153878  E_coul = 198.91322547801278
  HOMO = -0.236452923917728  LUMO = 86.3908106085746
  mo_energy =
[-1.20271252e+02 -1.22542562e+01 -6.65494289e+00 -6.65494289e+00
 -6.65494289e+00 -1.16355009e+00 -2.36452924e-01 -2.36452924e-01
 -2.36452924e-01  8.63908106e+01  6.78588498e+02  3.93626748e+03
  2.96207147e+04  1.54739900e+05  6.64893013e+05  2.71962900e+06
  1.10459670e+07  4.65100881e+07]
E1 = -706.5529433153978  E_coul = 198.91322547802258
Extra cycle  E= -507.639717837375  delta_E= -2.27e-13  |g|= 1.73e-10  |ddm|= 4.56e-12
    CPU time for scf_cycle      0.19 sec, wall time      0.19 sec
exp = [1.87954849e+07 4.69887121e+06 1.17471780e+06 2.93679451e+05
 7.34198654e+04 1.83539276e+04 2.23414251e+03 4.56889009e+02
 1.21733170e+02 3.75930458e+01 4.74128647e+00 3.91204461e-01
 8.59859614e+00 4.90848818e-01]
grad_E = [-1.11279859e-13  1.80103020e-11  8.62811440e-12  1.05339816e-08
 -3.42033358e-08  6.42103974e-06 -9.72076860e-06  4.02969524e-06
  3.13138059e-07  1.34041316e-06  7.61294672e-06  7.43268571e-06
 -2.17757035e-05  4.26271147e-05]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="BFGS",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((14, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.6988712134173084e+06,1.1747178033543271e+06,2.9367945083858178e+05,7.3419865393677101e+04,1.8353927627435987e+04,2.2341424145819028e+03,4.5688904996449571e+02,1.2173317272260677e+02,3.7593061247508530e+01,4.7412722556720146e+00,3.9120358491841306e-01,8.5986297237246045e+00,4.9084868336327880e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "12s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:14:03 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  18795484.8537        1
[INPUT] 0    0    [1    /1   ]  4698871.21342        1
[INPUT] 0    0    [1    /1   ]  1174717.80335        1
[INPUT] 0    0    [1    /1   ]  293679.450838        1
[INPUT] 0    0    [1    /1   ]  73419.8653945        1
[INPUT] 0    0    [1    /1   ]  18353.9274738        1
[INPUT] 0    0    [1    /1   ]  2234.14264718        1
[INPUT] 0    0    [1    /1   ]  456.888953353        1
[INPUT] 0    0    [1    /1   ]  121.733166436        1
[INPUT] 0    0    [1    /1   ]  37.5930252524        1
[INPUT] 0    0    [1    /1   ]  4.74129426113        1
[INPUT] 0    0    [1    /1   ]  0.39120269626        1
[INPUT] 1    0    [1    /1   ]  8.59858048344        1
[INPUT] 1    0    [1    /1   ]  0.490846493672       1

nuclear repulsion = 0
number of shells = 14
number of NR pGTOs = 18
number of NR cGTOs = 18
basis = {'Ar': [[0, [18795484.853669234, 1.0]], [0, [4698871.213417308, 1.0]], [0, [1174717.8033543269, 1.0]], [0, [293679.45083832974, 1.0]], [0, [73419.86539449547, 1.0]], [0, [18353.92747380139, 1.0]], [0, [2234.1426471793643, 1.0]], [0, [456.88895335338964, 1.0]], [0, [121.73316643560759, 1.0]], [0, [37.59302525243243, 1.0]], [0, [4.741294261132968, 1.0]], [0, [0.3912026962598995, 1.0]], [1, [8.598580483439171, 1.0]], [1, [0.490846493672037, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [18795484.85366923]
bas 1, expnt(s) = [4698871.21341731]
bas 2, expnt(s) = [1174717.80335433]
bas 3, expnt(s) = [293679.45083833]
bas 4, expnt(s) = [73419.8653945]
bas 5, expnt(s) = [18353.9274738]
bas 6, expnt(s) = [2234.14264718]
bas 7, expnt(s) = [456.88895335]
bas 8, expnt(s) = [121.73316644]
bas 9, expnt(s) = [37.59302525]
bas 10, expnt(s) = [4.74129426]
bas 11, expnt(s) = [0.3912027]
bas 12, expnt(s) = [8.59858048]
bas 13, expnt(s) = [0.49084649]
CPU time:        24.27
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  0  1  1  0 42 43  0]
 [ 0  0  1  1  0 44 45  0]
 [ 0  0  1  1  0 46 47  0]
 [ 0  1  1  1  0 48 49  0]
 [ 0  1  1  1  0 50 51  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.87954849e+07 7.21199097e+05 4.69887121e+06 2.54982386e+05
 1.17471780e+06 9.01498871e+04 2.93679451e+05 3.18727983e+04
 7.34198654e+04 1.12687362e+04 1.83539275e+04 3.98393077e+03
 2.23414265e+03 8.21009530e+02 4.56888953e+02 2.49673827e+02
 1.21733166e+02 9.25916265e+01 3.75930253e+01 3.83570750e+01
 4.74129426e+00 8.11778803e+00 3.91202696e-01 1.24973060e+00
 8.59858048e+00 4.29554075e+01 4.90846494e-01 1.19857857e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319978181565553
cond(S) = 56.39526450978321
E1 = -688.8310104831789  E_coul = 184.9150941004021
init E= -503.915916382777
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.680900227950647  LUMO = 85.0613078791609
  mo_energy =
[-1.21650546e+02 -1.32811650e+01 -7.62162234e+00 -7.62162234e+00
 -7.62162234e+00 -1.65070966e+00 -6.80900228e-01 -6.80900228e-01
 -6.80900228e-01  8.50613079e+01  6.77228448e+02  3.93503173e+03
  2.96196453e+04  1.54738903e+05  6.64892046e+05  2.71962805e+06
  1.10459661e+07  4.65100872e+07]
E1 = -706.5846038071652  E_coul = 198.94531395646266
cycle= 1 E= -507.639289850703  delta_E= -3.72  |g|= 0.317  |ddm|= 0.301
    CPU time for cycle= 1      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.420501
diis-c [-0.17682076  1.        ]
  HOMO = -0.236281706791758  LUMO = 86.3943335772946
  mo_energy =
[-1.20262527e+02 -1.22530685e+01 -6.65308947e+00 -6.65308947e+00
 -6.65308947e+00 -1.16348984e+00 -2.36281707e-01 -2.36281707e-01
 -2.36281707e-01  8.63943336e+01  6.78599064e+02  3.93628340e+03
  2.96207342e+04  1.54739920e+05  6.64893033e+05  2.71962902e+06
  1.10459671e+07  4.65100881e+07]
E1 = -706.5531731326795  E_coul = 198.9134554038163
cycle= 2 E= -507.639717728863  delta_E= -0.000428  |g|= 0.00474  |ddm|= 0.0143
    CPU time for cycle= 2      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.00504158
diis-c [-2.53722794e-05 -5.06195386e-04  1.00050620e+00]
  HOMO = -0.236456902094303  LUMO = 86.3908154724892
  mo_energy =
[-1.20271166e+02 -1.22542570e+01 -6.65493035e+00 -6.65493035e+00
 -6.65493035e+00 -1.16355460e+00 -2.36456902e-01 -2.36456902e-01
 -2.36456902e-01  8.63908155e+01  6.78588480e+02  3.93626751e+03
  2.96207149e+04  1.54739900e+05  6.64893013e+05  2.71962900e+06
  1.10459670e+07  4.65100881e+07]
E1 = -706.5527329563898  E_coul = 198.91301511745402
cycle= 3 E= -507.639717838936  delta_E= -1.1e-07  |g|= 9.48e-05  |ddm|= 0.000202
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.000126768
diis-c [-3.95746767e-10  3.34167421e-05 -2.54630219e-02  1.02542961e+00]
  HOMO = -0.236459113756422  LUMO = 86.3907708166161
  mo_energy =
[-1.20271279e+02 -1.22542728e+01 -6.65495730e+00 -6.65495730e+00
 -6.65495730e+00 -1.16355525e+00 -2.36459114e-01 -2.36459114e-01
 -2.36459114e-01  8.63907708e+01  6.78588363e+02  3.93626736e+03
  2.96207148e+04  1.54739900e+05  6.64893013e+05  2.71962900e+06
  1.10459670e+07  4.65100881e+07]
E1 = -706.5527257189495  E_coul = 198.91300787997284
cycle= 4 E= -507.639717838977  delta_E= -4.09e-11  |g|= 3.74e-07  |ddm|= 3.44e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.5527257189495  E_coul = 198.91300787997284
  HOMO = -0.236459097454574  LUMO = 86.3907711546573
  mo_energy =
[-1.20271278e+02 -1.22542727e+01 -6.65495714e+00 -6.65495714e+00
 -6.65495714e+00 -1.16355525e+00 -2.36459097e-01 -2.36459097e-01
 -2.36459097e-01  8.63907712e+01  6.78588364e+02  3.93626737e+03
  2.96207148e+04  1.54739900e+05  6.64893013e+05  2.71962900e+06
  1.10459670e+07  4.65100881e+07]
E1 = -706.5527257559482  E_coul = 198.9130079169725
Extra cycle  E= -507.639717838976  delta_E= 9.66e-13  |g|= 6.44e-09  |ddm|= 1.64e-08
    CPU time for scf_cycle      0.10 sec, wall time      0.11 sec
exp = [1.87954849e+07 4.69887121e+06 1.17471780e+06 2.93679451e+05
 7.34198654e+04 1.83539275e+04 2.23414265e+03 4.56888953e+02
 1.21733166e+02 3.75930253e+01 4.74129426e+00 3.91202696e-01
 8.59858048e+00 4.90846494e-01]
E = -507.63971783897574
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="BFGS",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((14, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.6988712134173084e+06,1.1747178033543271e+06,2.9367945083858178e+05,7.3419865393677101e+04,1.8353927627435987e+04,2.2341424145819028e+03,4.5688904996449571e+02,1.2173317272260677e+02,3.7593061247508530e+01,4.7412722556720146e+00,3.9120358491841306e-01,8.5986297237246045e+00,4.9084868336327880e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "12s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:14:03 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  18795484.8537        1
[INPUT] 0    0    [1    /1   ]  4698871.21342        1
[INPUT] 0    0    [1    /1   ]  1174717.80335        1
[INPUT] 0    0    [1    /1   ]  293679.450838        1
[INPUT] 0    0    [1    /1   ]  73419.8653945        1
[INPUT] 0    0    [1    /1   ]  18353.9274738        1
[INPUT] 0    0    [1    /1   ]  2234.14264718        1
[INPUT] 0    0    [1    /1   ]  456.888953353        1
[INPUT] 0    0    [1    /1   ]  121.733166436        1
[INPUT] 0    0    [1    /1   ]  37.5930252524        1
[INPUT] 0    0    [1    /1   ]  4.74129426113        1
[INPUT] 0    0    [1    /1   ]  0.39120269626        1
[INPUT] 1    0    [1    /1   ]  8.59858048344        1
[INPUT] 1    0    [1    /1   ]  0.490846493672       1

nuclear repulsion = 0
number of shells = 14
number of NR pGTOs = 18
number of NR cGTOs = 18
basis = {'Ar': [[0, [18795484.853669234, 1.0]], [0, [4698871.213417308, 1.0]], [0, [1174717.8033543269, 1.0]], [0, [293679.45083832974, 1.0]], [0, [73419.86539449547, 1.0]], [0, [18353.92747380139, 1.0]], [0, [2234.1426471793643, 1.0]], [0, [456.88895335338964, 1.0]], [0, [121.73316643560759, 1.0]], [0, [37.59302525243243, 1.0]], [0, [4.741294261132968, 1.0]], [0, [0.3912026962598995, 1.0]], [1, [8.598580483439171, 1.0]], [1, [0.490846493672037, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [18795484.85366923]
bas 1, expnt(s) = [4698871.21341731]
bas 2, expnt(s) = [1174717.80335433]
bas 3, expnt(s) = [293679.45083833]
bas 4, expnt(s) = [73419.8653945]
bas 5, expnt(s) = [18353.9274738]
bas 6, expnt(s) = [2234.14264718]
bas 7, expnt(s) = [456.88895335]
bas 8, expnt(s) = [121.73316644]
bas 9, expnt(s) = [37.59302525]
bas 10, expnt(s) = [4.74129426]
bas 11, expnt(s) = [0.3912027]
bas 12, expnt(s) = [8.59858048]
bas 13, expnt(s) = [0.49084649]
CPU time:        24.50
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  0  1  1  0 42 43  0]
 [ 0  0  1  1  0 44 45  0]
 [ 0  0  1  1  0 46 47  0]
 [ 0  1  1  1  0 48 49  0]
 [ 0  1  1  1  0 50 51  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.87954849e+07 7.21199097e+05 4.69887121e+06 2.54982386e+05
 1.17471780e+06 9.01498871e+04 2.93679451e+05 3.18727983e+04
 7.34198654e+04 1.12687362e+04 1.83539275e+04 3.98393077e+03
 2.23414265e+03 8.21009530e+02 4.56888953e+02 2.49673827e+02
 1.21733166e+02 9.25916265e+01 3.75930253e+01 3.83570750e+01
 4.74129426e+00 8.11778803e+00 3.91202696e-01 1.24973060e+00
 8.59858048e+00 4.29554075e+01 4.90846494e-01 1.19857857e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319978181565553
cond(S) = 56.39526450978321
E1 = -688.8310104831789  E_coul = 184.9150941004021
init E= -503.915916382777
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.680900227950647  LUMO = 85.0613078791609
  mo_energy =
[-1.21650546e+02 -1.32811650e+01 -7.62162234e+00 -7.62162234e+00
 -7.62162234e+00 -1.65070966e+00 -6.80900228e-01 -6.80900228e-01
 -6.80900228e-01  8.50613079e+01  6.77228448e+02  3.93503173e+03
  2.96196453e+04  1.54738903e+05  6.64892046e+05  2.71962805e+06
  1.10459661e+07  4.65100872e+07]
E1 = -706.5846038071652  E_coul = 198.94531395646266
cycle= 1 E= -507.639289850703  delta_E= -3.72  |g|= 0.317  |ddm|= 0.301
    CPU time for cycle= 1      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.420501
diis-c [-0.17682076  1.        ]
  HOMO = -0.236281706791758  LUMO = 86.3943335772946
  mo_energy =
[-1.20262527e+02 -1.22530685e+01 -6.65308947e+00 -6.65308947e+00
 -6.65308947e+00 -1.16348984e+00 -2.36281707e-01 -2.36281707e-01
 -2.36281707e-01  8.63943336e+01  6.78599064e+02  3.93628340e+03
  2.96207342e+04  1.54739920e+05  6.64893033e+05  2.71962902e+06
  1.10459671e+07  4.65100881e+07]
E1 = -706.5531731326795  E_coul = 198.9134554038163
cycle= 2 E= -507.639717728863  delta_E= -0.000428  |g|= 0.00474  |ddm|= 0.0143
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00504158
diis-c [-2.53722794e-05 -5.06195386e-04  1.00050620e+00]
  HOMO = -0.236456902094303  LUMO = 86.3908154724892
  mo_energy =
[-1.20271166e+02 -1.22542570e+01 -6.65493035e+00 -6.65493035e+00
 -6.65493035e+00 -1.16355460e+00 -2.36456902e-01 -2.36456902e-01
 -2.36456902e-01  8.63908155e+01  6.78588480e+02  3.93626751e+03
  2.96207149e+04  1.54739900e+05  6.64893013e+05  2.71962900e+06
  1.10459670e+07  4.65100881e+07]
E1 = -706.5527329563898  E_coul = 198.91301511745402
cycle= 3 E= -507.639717838936  delta_E= -1.1e-07  |g|= 9.48e-05  |ddm|= 0.000202
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.000126768
diis-c [-3.95746767e-10  3.34167421e-05 -2.54630219e-02  1.02542961e+00]
  HOMO = -0.236459113756422  LUMO = 86.3907708166161
  mo_energy =
[-1.20271279e+02 -1.22542728e+01 -6.65495730e+00 -6.65495730e+00
 -6.65495730e+00 -1.16355525e+00 -2.36459114e-01 -2.36459114e-01
 -2.36459114e-01  8.63907708e+01  6.78588363e+02  3.93626736e+03
  2.96207148e+04  1.54739900e+05  6.64893013e+05  2.71962900e+06
  1.10459670e+07  4.65100881e+07]
E1 = -706.5527257189495  E_coul = 198.91300787997284
cycle= 4 E= -507.639717838977  delta_E= -4.09e-11  |g|= 3.74e-07  |ddm|= 3.44e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.5527257189495  E_coul = 198.91300787997284
  HOMO = -0.236459097454574  LUMO = 86.3907711546573
  mo_energy =
[-1.20271278e+02 -1.22542727e+01 -6.65495714e+00 -6.65495714e+00
 -6.65495714e+00 -1.16355525e+00 -2.36459097e-01 -2.36459097e-01
 -2.36459097e-01  8.63907712e+01  6.78588364e+02  3.93626737e+03
  2.96207148e+04  1.54739900e+05  6.64893013e+05  2.71962900e+06
  1.10459670e+07  4.65100881e+07]
E1 = -706.5527257559482  E_coul = 198.9130079169725
Extra cycle  E= -507.639717838976  delta_E= 9.66e-13  |g|= 6.44e-09  |ddm|= 1.64e-08
    CPU time for scf_cycle      0.10 sec, wall time      0.11 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 56.39526450978321
E1 = -706.5527257559482  E_coul = 198.9130079169725
init E= -507.639717838976
    CPU time for initialize scf      0.12 sec, wall time      0.12 sec
  HOMO = -0.236459097263921  LUMO = 86.3907711587834
  mo_energy =
[-1.20271278e+02 -1.22542727e+01 -6.65495714e+00 -6.65495714e+00
 -6.65495714e+00 -1.16355524e+00 -2.36459097e-01 -2.36459097e-01
 -2.36459097e-01  8.63907712e+01  6.78588364e+02  3.93626737e+03
  2.96207148e+04  1.54739900e+05  6.64893013e+05  2.71962900e+06
  1.10459670e+07  4.65100881e+07]
E1 = -706.5527257565088  E_coul = 198.91300791753292
cycle= 1 E= -507.639717838976  delta_E= -1.71e-13  |g|= 1.49e-10  |ddm|= 2.54e-10
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -706.5527257565088  E_coul = 198.91300791753292
  HOMO = -0.23645909726123  LUMO = 86.3907711588435
  mo_energy =
[-1.20271278e+02 -1.22542727e+01 -6.65495714e+00 -6.65495714e+00
 -6.65495714e+00 -1.16355524e+00 -2.36459097e-01 -2.36459097e-01
 -2.36459097e-01  8.63907712e+01  6.78588364e+02  3.93626737e+03
  2.96207148e+04  1.54739900e+05  6.64893013e+05  2.71962900e+06
  1.10459670e+07  4.65100881e+07]
E1 = -706.5527257565186  E_coul = 198.91300791754222
Extra cycle  E= -507.639717838976  delta_E= -4.55e-13  |g|= 1.23e-10  |ddm|= 4.48e-12
    CPU time for scf_cycle      0.19 sec, wall time      0.19 sec
exp = [1.87954849e+07 4.69887121e+06 1.17471780e+06 2.93679451e+05
 7.34198654e+04 1.83539275e+04 2.23414265e+03 4.56888953e+02
 1.21733166e+02 3.75930253e+01 4.74129426e+00 3.91202696e-01
 8.59858048e+00 4.90846494e-01]
grad_E = [-1.11280207e-13  1.80102820e-11  8.62793581e-12  1.05339702e-08
 -3.42033946e-08  6.42103179e-06 -9.72006613e-06  4.01798517e-06
  3.93301907e-07  1.09629640e-06  1.28126588e-05 -2.94146013e-05
 -3.24732993e-05 -3.26816988e-05]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="BFGS",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((14, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.6988712134173084e+06,1.1747178033543271e+06,2.9367945083858178e+05,7.3419865393677101e+04,1.8353927627435987e+04,2.2341424145819028e+03,4.5688904996449571e+02,1.2173317272260677e+02,3.7593061247508530e+01,4.7412722556720146e+00,3.9120358491841306e-01,8.5986297237246045e+00,4.9084868336327880e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "12s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:14:06 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  18795484.8537        1
[INPUT] 0    0    [1    /1   ]  4698871.21342        1
[INPUT] 0    0    [1    /1   ]  1174717.80335        1
[INPUT] 0    0    [1    /1   ]  293679.450838        1
[INPUT] 0    0    [1    /1   ]  73419.8653954        1
[INPUT] 0    0    [1    /1   ]  18353.9273019        1
[INPUT] 0    0    [1    /1   ]  2234.14290743        1
[INPUT] 0    0    [1    /1   ]  456.888845283        1
[INPUT] 0    0    [1    /1   ]  121.733159224        1
[INPUT] 0    0    [1    /1   ]  37.5929855303        1
[INPUT] 0    0    [1    /1   ]  4.74130372657        1
[INPUT] 0    0    [1    /1   ]  0.391200576353       1
[INPUT] 1    0    [1    /1   ]  8.59856183928        1
[INPUT] 1    0    [1    /1   ]  0.490843713638       1

nuclear repulsion = 0
number of shells = 14
number of NR pGTOs = 18
number of NR cGTOs = 18
basis = {'Ar': [[0, [18795484.853669234, 1.0]], [0, [4698871.2134173075, 1.0]], [0, [1174717.8033543266, 1.0]], [0, [293679.4508380477, 1.0]], [0, [73419.86539541114, 1.0]], [0, [18353.927301901702, 1.0]], [0, [2234.142907428012, 1.0]], [0, [456.8888452826441, 1.0]], [0, [121.73315922430392, 1.0]], [0, [37.592985530287486, 1.0]], [0, [4.741303726573104, 1.0]], [0, [0.3912005763528594, 1.0]], [1, [8.598561839277881, 1.0]], [1, [0.49084371363826396, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [18795484.85366923]
bas 1, expnt(s) = [4698871.21341731]
bas 2, expnt(s) = [1174717.80335433]
bas 3, expnt(s) = [293679.45083805]
bas 4, expnt(s) = [73419.86539541]
bas 5, expnt(s) = [18353.9273019]
bas 6, expnt(s) = [2234.14290743]
bas 7, expnt(s) = [456.88884528]
bas 8, expnt(s) = [121.73315922]
bas 9, expnt(s) = [37.59298553]
bas 10, expnt(s) = [4.74130373]
bas 11, expnt(s) = [0.39120058]
bas 12, expnt(s) = [8.59856184]
bas 13, expnt(s) = [0.49084371]
CPU time:        27.49
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  0  1  1  0 42 43  0]
 [ 0  0  1  1  0 44 45  0]
 [ 0  0  1  1  0 46 47  0]
 [ 0  1  1  1  0 48 49  0]
 [ 0  1  1  1  0 50 51  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.87954849e+07 7.21199097e+05 4.69887121e+06 2.54982386e+05
 1.17471780e+06 9.01498871e+04 2.93679451e+05 3.18727983e+04
 7.34198654e+04 1.12687362e+04 1.83539273e+04 3.98393074e+03
 2.23414291e+03 8.21009602e+02 4.56888845e+02 2.49673782e+02
 1.21733159e+02 9.25916224e+01 3.75929855e+01 3.83570446e+01
 4.74130373e+00 8.11780018e+00 3.91200576e-01 1.24972552e+00
 8.59856184e+00 4.29552911e+01 4.90843714e-01 1.19857009e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319981925775828
cond(S) = 56.39525743099907
E1 = -688.8308080834958  E_coul = 184.91489636861203
init E= -503.915911714884
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.680904350861726  LUMO = 85.0612334945559
  mo_energy =
[-1.21650573e+02 -1.32811808e+01 -7.62163549e+00 -7.62163549e+00
 -7.62163549e+00 -1.65071284e+00 -6.80904351e-01 -6.80904351e-01
 -6.80904351e-01  8.50612335e+01  6.77228193e+02  3.93503152e+03
  2.96196455e+04  1.54738902e+05  6.64892045e+05  2.71962805e+06
  1.10459661e+07  4.65100872e+07]
E1 = -706.5843432821093  E_coul = 198.94505342352457
cycle= 1 E= -507.639289858585  delta_E= -3.72  |g|= 0.317  |ddm|= 0.301
    CPU time for cycle= 1      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.4205
diis-c [-0.17682047  1.        ]
  HOMO = -0.236289100382598  LUMO = 86.3942545937673
  mo_energy =
[-1.20262558e+02 -1.22530881e+01 -6.65310653e+00 -6.65310653e+00
 -6.65310653e+00 -1.16349600e+00 -2.36289100e-01 -2.36289100e-01
 -2.36289100e-01  8.63942546e+01  6.78598806e+02  3.93628318e+03
  2.96207343e+04  1.54739920e+05  6.64893033e+05  2.71962902e+06
  1.10459671e+07  4.65100881e+07]
E1 = -706.5529127964979  E_coul = 198.91319506472982
cycle= 2 E= -507.639717731768  delta_E= -0.000428  |g|= 0.00474  |ddm|= 0.0143
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00504154
diis-c [-2.53718671e-05 -5.06164342e-04  1.00050616e+00]
  HOMO = -0.236464292806413  LUMO = 86.3907365096679
  mo_energy =
[-1.20271197e+02 -1.22542767e+01 -6.65494740e+00 -6.65494740e+00
 -6.65494740e+00 -1.16356076e+00 -2.36464293e-01 -2.36464293e-01
 -2.36464293e-01  8.63907365e+01  6.78588222e+02  3.93626729e+03
  2.96207151e+04  1.54739900e+05  6.64893013e+05  2.71962900e+06
  1.10459670e+07  4.65100881e+07]
E1 = -706.5524726230302  E_coul = 198.91275478119059
cycle= 3 E= -507.63971784184  delta_E= -1.1e-07  |g|= 9.48e-05  |ddm|= 0.000202
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.000126767
diis-c [-3.95741066e-10  3.34171643e-05 -2.54630783e-02  1.02542966e+00]
  HOMO = -0.236466504432852  LUMO = 86.3906918539536
  mo_energy =
[-1.20271310e+02 -1.22542925e+01 -6.65497436e+00 -6.65497436e+00
 -6.65497436e+00 -1.16356141e+00 -2.36466504e-01 -2.36466504e-01
 -2.36466504e-01  8.63906919e+01  6.78588105e+02  3.93626715e+03
  2.96207149e+04  1.54739900e+05  6.64893013e+05  2.71962900e+06
  1.10459670e+07  4.65100881e+07]
E1 = -706.5524653856194  E_coul = 198.91274754373978
cycle= 4 E= -507.63971784188  delta_E= -4e-11  |g|= 3.74e-07  |ddm|= 3.44e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.5524653856194  E_coul = 198.91274754373978
  HOMO = -0.236466488131301  LUMO = 86.3906921919876
  mo_energy =
[-1.20271309e+02 -1.22542924e+01 -6.65497419e+00 -6.65497419e+00
 -6.65497419e+00 -1.16356141e+00 -2.36466488e-01 -2.36466488e-01
 -2.36466488e-01  8.63906922e+01  6.78588106e+02  3.93626715e+03
  2.96207149e+04  1.54739900e+05  6.64893013e+05  2.71962900e+06
  1.10459670e+07  4.65100881e+07]
E1 = -706.5524654226191  E_coul = 198.91274758073985
Extra cycle  E= -507.639717841879  delta_E= 3.41e-13  |g|= 6.45e-09  |ddm|= 1.64e-08
    CPU time for scf_cycle      0.10 sec, wall time      0.10 sec
exp = [1.87954849e+07 4.69887121e+06 1.17471780e+06 2.93679451e+05
 7.34198654e+04 1.83539273e+04 2.23414291e+03 4.56888845e+02
 1.21733159e+02 3.75929855e+01 4.74130373e+00 3.91200576e-01
 8.59856184e+00 4.90843714e-01]
E = -507.63971784187925
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="BFGS",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((14, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.6988712134173084e+06,1.1747178033543271e+06,2.9367945083858178e+05,7.3419865393677101e+04,1.8353927627435987e+04,2.2341424145819028e+03,4.5688904996449571e+02,1.2173317272260677e+02,3.7593061247508530e+01,4.7412722556720146e+00,3.9120358491841306e-01,8.5986297237246045e+00,4.9084868336327880e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "12s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:14:07 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  18795484.8537        1
[INPUT] 0    0    [1    /1   ]  4698871.21342        1
[INPUT] 0    0    [1    /1   ]  1174717.80335        1
[INPUT] 0    0    [1    /1   ]  293679.450838        1
[INPUT] 0    0    [1    /1   ]  73419.8653954        1
[INPUT] 0    0    [1    /1   ]  18353.9273019        1
[INPUT] 0    0    [1    /1   ]  2234.14290743        1
[INPUT] 0    0    [1    /1   ]  456.888845283        1
[INPUT] 0    0    [1    /1   ]  121.733159224        1
[INPUT] 0    0    [1    /1   ]  37.5929855303        1
[INPUT] 0    0    [1    /1   ]  4.74130372657        1
[INPUT] 0    0    [1    /1   ]  0.391200576353       1
[INPUT] 1    0    [1    /1   ]  8.59856183928        1
[INPUT] 1    0    [1    /1   ]  0.490843713638       1

nuclear repulsion = 0
number of shells = 14
number of NR pGTOs = 18
number of NR cGTOs = 18
basis = {'Ar': [[0, [18795484.853669234, 1.0]], [0, [4698871.2134173075, 1.0]], [0, [1174717.8033543266, 1.0]], [0, [293679.4508380477, 1.0]], [0, [73419.86539541114, 1.0]], [0, [18353.927301901702, 1.0]], [0, [2234.142907428012, 1.0]], [0, [456.8888452826441, 1.0]], [0, [121.73315922430392, 1.0]], [0, [37.592985530287486, 1.0]], [0, [4.741303726573104, 1.0]], [0, [0.3912005763528594, 1.0]], [1, [8.598561839277881, 1.0]], [1, [0.49084371363826396, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [18795484.85366923]
bas 1, expnt(s) = [4698871.21341731]
bas 2, expnt(s) = [1174717.80335433]
bas 3, expnt(s) = [293679.45083805]
bas 4, expnt(s) = [73419.86539541]
bas 5, expnt(s) = [18353.9273019]
bas 6, expnt(s) = [2234.14290743]
bas 7, expnt(s) = [456.88884528]
bas 8, expnt(s) = [121.73315922]
bas 9, expnt(s) = [37.59298553]
bas 10, expnt(s) = [4.74130373]
bas 11, expnt(s) = [0.39120058]
bas 12, expnt(s) = [8.59856184]
bas 13, expnt(s) = [0.49084371]
CPU time:        27.73
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  0  1  1  0 42 43  0]
 [ 0  0  1  1  0 44 45  0]
 [ 0  0  1  1  0 46 47  0]
 [ 0  1  1  1  0 48 49  0]
 [ 0  1  1  1  0 50 51  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.87954849e+07 7.21199097e+05 4.69887121e+06 2.54982386e+05
 1.17471780e+06 9.01498871e+04 2.93679451e+05 3.18727983e+04
 7.34198654e+04 1.12687362e+04 1.83539273e+04 3.98393074e+03
 2.23414291e+03 8.21009602e+02 4.56888845e+02 2.49673782e+02
 1.21733159e+02 9.25916224e+01 3.75929855e+01 3.83570446e+01
 4.74130373e+00 8.11780018e+00 3.91200576e-01 1.24972552e+00
 8.59856184e+00 4.29552911e+01 4.90843714e-01 1.19857009e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319981925775828
cond(S) = 56.39525743099907
E1 = -688.8308080834958  E_coul = 184.91489636861203
init E= -503.915911714884
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.680904350861726  LUMO = 85.0612334945559
  mo_energy =
[-1.21650573e+02 -1.32811808e+01 -7.62163549e+00 -7.62163549e+00
 -7.62163549e+00 -1.65071284e+00 -6.80904351e-01 -6.80904351e-01
 -6.80904351e-01  8.50612335e+01  6.77228193e+02  3.93503152e+03
  2.96196455e+04  1.54738902e+05  6.64892045e+05  2.71962805e+06
  1.10459661e+07  4.65100872e+07]
E1 = -706.5843432821093  E_coul = 198.94505342352457
cycle= 1 E= -507.639289858585  delta_E= -3.72  |g|= 0.317  |ddm|= 0.301
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.4205
diis-c [-0.17682047  1.        ]
  HOMO = -0.236289100382598  LUMO = 86.3942545937673
  mo_energy =
[-1.20262558e+02 -1.22530881e+01 -6.65310653e+00 -6.65310653e+00
 -6.65310653e+00 -1.16349600e+00 -2.36289100e-01 -2.36289100e-01
 -2.36289100e-01  8.63942546e+01  6.78598806e+02  3.93628318e+03
  2.96207343e+04  1.54739920e+05  6.64893033e+05  2.71962902e+06
  1.10459671e+07  4.65100881e+07]
E1 = -706.5529127964979  E_coul = 198.91319506472982
cycle= 2 E= -507.639717731768  delta_E= -0.000428  |g|= 0.00474  |ddm|= 0.0143
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00504154
diis-c [-2.53718671e-05 -5.06164342e-04  1.00050616e+00]
  HOMO = -0.236464292806413  LUMO = 86.3907365096679
  mo_energy =
[-1.20271197e+02 -1.22542767e+01 -6.65494740e+00 -6.65494740e+00
 -6.65494740e+00 -1.16356076e+00 -2.36464293e-01 -2.36464293e-01
 -2.36464293e-01  8.63907365e+01  6.78588222e+02  3.93626729e+03
  2.96207151e+04  1.54739900e+05  6.64893013e+05  2.71962900e+06
  1.10459670e+07  4.65100881e+07]
E1 = -706.5524726230302  E_coul = 198.91275478119059
cycle= 3 E= -507.63971784184  delta_E= -1.1e-07  |g|= 9.48e-05  |ddm|= 0.000202
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.000126767
diis-c [-3.95741066e-10  3.34171643e-05 -2.54630783e-02  1.02542966e+00]
  HOMO = -0.236466504432852  LUMO = 86.3906918539536
  mo_energy =
[-1.20271310e+02 -1.22542925e+01 -6.65497436e+00 -6.65497436e+00
 -6.65497436e+00 -1.16356141e+00 -2.36466504e-01 -2.36466504e-01
 -2.36466504e-01  8.63906919e+01  6.78588105e+02  3.93626715e+03
  2.96207149e+04  1.54739900e+05  6.64893013e+05  2.71962900e+06
  1.10459670e+07  4.65100881e+07]
E1 = -706.5524653856194  E_coul = 198.91274754373978
cycle= 4 E= -507.63971784188  delta_E= -4e-11  |g|= 3.74e-07  |ddm|= 3.44e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.5524653856194  E_coul = 198.91274754373978
  HOMO = -0.236466488131301  LUMO = 86.3906921919876
  mo_energy =
[-1.20271309e+02 -1.22542924e+01 -6.65497419e+00 -6.65497419e+00
 -6.65497419e+00 -1.16356141e+00 -2.36466488e-01 -2.36466488e-01
 -2.36466488e-01  8.63906922e+01  6.78588106e+02  3.93626715e+03
  2.96207149e+04  1.54739900e+05  6.64893013e+05  2.71962900e+06
  1.10459670e+07  4.65100881e+07]
E1 = -706.5524654226191  E_coul = 198.91274758073985
Extra cycle  E= -507.639717841879  delta_E= 3.41e-13  |g|= 6.45e-09  |ddm|= 1.64e-08
    CPU time for scf_cycle      0.10 sec, wall time      0.10 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 56.39525743099907
E1 = -706.5524654226191  E_coul = 198.91274758073985
init E= -507.639717841879
    CPU time for initialize scf      0.12 sec, wall time      0.12 sec
  HOMO = -0.236466487940645  LUMO = 86.3906921961157
  mo_energy =
[-1.20271309e+02 -1.22542924e+01 -6.65497419e+00 -6.65497419e+00
 -6.65497419e+00 -1.16356141e+00 -2.36466488e-01 -2.36466488e-01
 -2.36466488e-01  8.63906922e+01  6.78588106e+02  3.93626715e+03
  2.96207149e+04  1.54739900e+05  6.64893013e+05  2.71962900e+06
  1.10459670e+07  4.65100881e+07]
E1 = -706.5524654231795  E_coul = 198.91274758129978
cycle= 1 E= -507.63971784188  delta_E= -4.55e-13  |g|= 2.74e-10  |ddm|= 2.54e-10
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -706.5524654231795  E_coul = 198.91274758129978
  HOMO = -0.236466487937957  LUMO = 86.3906921961779
  mo_energy =
[-1.20271309e+02 -1.22542924e+01 -6.65497419e+00 -6.65497419e+00
 -6.65497419e+00 -1.16356141e+00 -2.36466488e-01 -2.36466488e-01
 -2.36466488e-01  8.63906922e+01  6.78588106e+02  3.93626715e+03
  2.96207149e+04  1.54739900e+05  6.64893013e+05  2.71962900e+06
  1.10459670e+07  4.65100881e+07]
E1 = -706.5524654231882  E_coul = 198.91274758130905
Extra cycle  E= -507.639717841879  delta_E= 5.68e-13  |g|= 9.36e-11  |ddm|= 4.44e-12
    CPU time for scf_cycle      0.19 sec, wall time      0.19 sec
exp = [1.87954849e+07 4.69887121e+06 1.17471780e+06 2.93679451e+05
 7.34198654e+04 1.83539273e+04 2.23414291e+03 4.56888845e+02
 1.21733159e+02 3.75929855e+01 4.74130373e+00 3.91200576e-01
 8.59856184e+00 4.90843714e-01]
grad_E = [-1.11280875e-13  1.80102420e-11  8.62758883e-12  1.05339474e-08
 -3.42035061e-08  6.42101589e-06 -9.71869358e-06  3.99523668e-06
  5.54710453e-07  6.07015303e-07  1.90623143e-05 -7.35321877e-05
 -4.52178758e-05 -1.22883744e-04]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="BFGS",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((14, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.6988712134173084e+06,1.1747178033543271e+06,2.9367945083858178e+05,7.3419865393677101e+04,1.8353927627435987e+04,2.2341424145819028e+03,4.5688904996449571e+02,1.2173317272260677e+02,3.7593061247508530e+01,4.7412722556720146e+00,3.9120358491841306e-01,8.5986297237246045e+00,4.9084868336327880e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "12s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:14:09 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  18795484.8537        1
[INPUT] 0    0    [1    /1   ]  4698871.21342        1
[INPUT] 0    0    [1    /1   ]  1174717.80335        1
[INPUT] 0    0    [1    /1   ]  293679.450838        1
[INPUT] 0    0    [1    /1   ]  73419.8653972        1
[INPUT] 0    0    [1    /1   ]  18353.9269741        1
[INPUT] 0    0    [1    /1   ]  2234.14340369        1
[INPUT] 0    0    [1    /1   ]  456.888639236        1
[INPUT] 0    0    [1    /1   ]  121.733145252        1
[INPUT] 0    0    [1    /1   ]  37.5929104563        1
[INPUT] 0    0    [1    /1   ]  4.74131596308        1
[INPUT] 0    0    [1    /1   ]  0.391197857835       1
[INPUT] 1    0    [1    /1   ]  8.59853817576        1
[INPUT] 1    0    [1    /1   ]  0.490840164798       1

nuclear repulsion = 0
number of shells = 14
number of NR pGTOs = 18
number of NR cGTOs = 18
basis = {'Ar': [[0, [18795484.853669234, 1.0]], [0, [4698871.213417307, 1.0]], [0, [1174717.8033543262, 1.0]], [0, [293679.45083750994, 1.0]], [0, [73419.86539715719, 1.0]], [0, [18353.92697411047, 1.0]], [0, [2234.143403687869, 1.0]], [0, [456.8886392356661, 1.0]], [0, [121.73314525245621, 1.0]], [0, [37.59291045632266, 1.0]], [0, [4.741315963075565, 1.0]], [0, [0.3911978578349173, 1.0]], [1, [8.598538175762966, 1.0]], [1, [0.4908401647977052, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [18795484.85366923]
bas 1, expnt(s) = [4698871.21341731]
bas 2, expnt(s) = [1174717.80335433]
bas 3, expnt(s) = [293679.45083751]
bas 4, expnt(s) = [73419.86539716]
bas 5, expnt(s) = [18353.92697411]
bas 6, expnt(s) = [2234.14340369]
bas 7, expnt(s) = [456.88863924]
bas 8, expnt(s) = [121.73314525]
bas 9, expnt(s) = [37.59291046]
bas 10, expnt(s) = [4.74131596]
bas 11, expnt(s) = [0.39119786]
bas 12, expnt(s) = [8.59853818]
bas 13, expnt(s) = [0.49084016]
CPU time:        30.70
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  0  1  1  0 42 43  0]
 [ 0  0  1  1  0 44 45  0]
 [ 0  0  1  1  0 46 47  0]
 [ 0  1  1  1  0 48 49  0]
 [ 0  1  1  1  0 50 51  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.87954849e+07 7.21199097e+05 4.69887121e+06 2.54982386e+05
 1.17471780e+06 9.01498871e+04 2.93679451e+05 3.18727983e+04
 7.34198654e+04 1.12687362e+04 1.83539270e+04 3.98393069e+03
 2.23414340e+03 8.21009739e+02 4.56888639e+02 2.49673698e+02
 1.21733145e+02 9.25916144e+01 3.75929105e+01 3.83569871e+01
 4.74131596e+00 8.11781589e+00 3.91197858e-01 1.24971901e+00
 8.59853818e+00 4.29551433e+01 4.90840165e-01 1.19855925e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319986705598424
cond(S) = 56.39524242936924
E1 = -688.830552060636  E_coul = 184.9146442799883
init E= -503.915907780648
    CPU time for initialize scf      0.03 sec, wall time      0.03 sec
  HOMO = -0.680909621840678  LUMO = 85.0610871532312
  mo_energy =
[-1.21650608e+02 -1.32812008e+01 -7.62165227e+00 -7.62165227e+00
 -7.62165227e+00 -1.65071688e+00 -6.80909622e-01 -6.80909622e-01
 -6.80909622e-01  8.50610872e+01  6.77227710e+02  3.93503111e+03
  2.96196458e+04  1.54738902e+05  6.64892045e+05  2.71962805e+06
  1.10459661e+07  4.65100872e+07]
E1 = -706.5840104363442  E_coul = 198.94472056659265
cycle= 1 E= -507.639289869752  delta_E= -3.72  |g|= 0.317  |ddm|= 0.301
    CPU time for cycle= 1      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.4205
diis-c [-0.17682004  1.        ]
  HOMO = -0.236298548172391  LUMO = 86.3941022065125
  mo_energy =
[-1.20262598e+02 -1.22531130e+01 -6.65312833e+00 -6.65312833e+00
 -6.65312833e+00 -1.16350386e+00 -2.36298548e-01 -2.36298548e-01
 -2.36298548e-01  8.63941022e+01  6.78598317e+02  3.93628277e+03
  2.96207346e+04  1.54739920e+05  6.64893033e+05  2.71962902e+06
  1.10459671e+07  4.65100881e+07]
E1 = -706.5525801555042  E_coul = 198.91286241842926
cycle= 2 E= -507.639717737075  delta_E= -0.000428  |g|= 0.00474  |ddm|= 0.0143
    CPU time for cycle= 2      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.00504149
diis-c [-2.53713821e-05 -5.06117578e-04  1.00050612e+00]
  HOMO = -0.236473737130814  LUMO = 86.3905841451041
  mo_energy =
[-1.20271237e+02 -1.22543016e+01 -6.65496918e+00 -6.65496918e+00
 -6.65496918e+00 -1.16356861e+00 -2.36473737e-01 -2.36473737e-01
 -2.36473737e-01  8.63905841e+01  6.78587733e+02  3.93626688e+03
  2.96207154e+04  1.54739900e+05  6.64893012e+05  2.71962900e+06
  1.10459670e+07  4.65100881e+07]
E1 = -706.5521399850401  E_coul = 198.91242213789533
cycle= 3 E= -507.639717847145  delta_E= -1.1e-07  |g|= 9.48e-05  |ddm|= 0.000202
    CPU time for cycle= 3      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.000126766
diis-c [-3.95738010e-10  3.34172371e-05 -2.54631586e-02  1.02542974e+00]
  HOMO = -0.236475948716154  LUMO = 86.390539489506
  mo_energy =
[-1.20271350e+02 -1.22543174e+01 -6.65499614e+00 -6.65499614e+00
 -6.65499614e+00 -1.16356927e+00 -2.36475949e-01 -2.36475949e-01
 -2.36475949e-01  8.63905395e+01  6.78587616e+02  3.93626674e+03
  2.96207152e+04  1.54739900e+05  6.64893012e+05  2.71962900e+06
  1.10459670e+07  4.65100881e+07]
E1 = -706.5521327476533  E_coul = 198.91241490046892
cycle= 4 E= -507.639717847184  delta_E= -3.97e-11  |g|= 3.74e-07  |ddm|= 3.44e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.5521327476533  E_coul = 198.91241490046892
  HOMO = -0.236475932414868  LUMO = 86.3905398275364
  mo_energy =
[-1.20271349e+02 -1.22543173e+01 -6.65499598e+00 -6.65499598e+00
 -6.65499598e+00 -1.16356926e+00 -2.36475932e-01 -2.36475932e-01
 -2.36475932e-01  8.63905398e+01  6.78587617e+02  3.93626674e+03
  2.96207152e+04  1.54739900e+05  6.64893012e+05  2.71962900e+06
  1.10459670e+07  4.65100881e+07]
E1 = -706.5521327846533  E_coul = 198.91241493746895
Extra cycle  E= -507.639717847184  delta_E= 1.14e-13  |g|= 6.45e-09  |ddm|= 1.64e-08
    CPU time for scf_cycle      0.10 sec, wall time      0.11 sec
exp = [1.87954849e+07 4.69887121e+06 1.17471780e+06 2.93679451e+05
 7.34198654e+04 1.83539270e+04 2.23414340e+03 4.56888639e+02
 1.21733145e+02 3.75929105e+01 4.74131596e+00 3.91197858e-01
 8.59853818e+00 4.90840165e-01]
E = -507.63971784718433
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="BFGS",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((14, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.6988712134173084e+06,1.1747178033543271e+06,2.9367945083858178e+05,7.3419865393677101e+04,1.8353927627435987e+04,2.2341424145819028e+03,4.5688904996449571e+02,1.2173317272260677e+02,3.7593061247508530e+01,4.7412722556720146e+00,3.9120358491841306e-01,8.5986297237246045e+00,4.9084868336327880e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "12s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:14:10 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  18795484.8537        1
[INPUT] 0    0    [1    /1   ]  4698871.21342        1
[INPUT] 0    0    [1    /1   ]  1174717.80335        1
[INPUT] 0    0    [1    /1   ]  293679.450838        1
[INPUT] 0    0    [1    /1   ]  73419.8653972        1
[INPUT] 0    0    [1    /1   ]  18353.9269741        1
[INPUT] 0    0    [1    /1   ]  2234.14340369        1
[INPUT] 0    0    [1    /1   ]  456.888639236        1
[INPUT] 0    0    [1    /1   ]  121.733145252        1
[INPUT] 0    0    [1    /1   ]  37.5929104563        1
[INPUT] 0    0    [1    /1   ]  4.74131596308        1
[INPUT] 0    0    [1    /1   ]  0.391197857835       1
[INPUT] 1    0    [1    /1   ]  8.59853817576        1
[INPUT] 1    0    [1    /1   ]  0.490840164798       1

nuclear repulsion = 0
number of shells = 14
number of NR pGTOs = 18
number of NR cGTOs = 18
basis = {'Ar': [[0, [18795484.853669234, 1.0]], [0, [4698871.213417307, 1.0]], [0, [1174717.8033543262, 1.0]], [0, [293679.45083750994, 1.0]], [0, [73419.86539715719, 1.0]], [0, [18353.92697411047, 1.0]], [0, [2234.143403687869, 1.0]], [0, [456.8886392356661, 1.0]], [0, [121.73314525245621, 1.0]], [0, [37.59291045632266, 1.0]], [0, [4.741315963075565, 1.0]], [0, [0.3911978578349173, 1.0]], [1, [8.598538175762966, 1.0]], [1, [0.4908401647977052, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [18795484.85366923]
bas 1, expnt(s) = [4698871.21341731]
bas 2, expnt(s) = [1174717.80335433]
bas 3, expnt(s) = [293679.45083751]
bas 4, expnt(s) = [73419.86539716]
bas 5, expnt(s) = [18353.92697411]
bas 6, expnt(s) = [2234.14340369]
bas 7, expnt(s) = [456.88863924]
bas 8, expnt(s) = [121.73314525]
bas 9, expnt(s) = [37.59291046]
bas 10, expnt(s) = [4.74131596]
bas 11, expnt(s) = [0.39119786]
bas 12, expnt(s) = [8.59853818]
bas 13, expnt(s) = [0.49084016]
CPU time:        30.95
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  0  1  1  0 42 43  0]
 [ 0  0  1  1  0 44 45  0]
 [ 0  0  1  1  0 46 47  0]
 [ 0  1  1  1  0 48 49  0]
 [ 0  1  1  1  0 50 51  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.87954849e+07 7.21199097e+05 4.69887121e+06 2.54982386e+05
 1.17471780e+06 9.01498871e+04 2.93679451e+05 3.18727983e+04
 7.34198654e+04 1.12687362e+04 1.83539270e+04 3.98393069e+03
 2.23414340e+03 8.21009739e+02 4.56888639e+02 2.49673698e+02
 1.21733145e+02 9.25916144e+01 3.75929105e+01 3.83569871e+01
 4.74131596e+00 8.11781589e+00 3.91197858e-01 1.24971901e+00
 8.59853818e+00 4.29551433e+01 4.90840165e-01 1.19855925e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319986705598424
cond(S) = 56.39524242936924
E1 = -688.830552060636  E_coul = 184.9146442799883
init E= -503.915907780648
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.680909621840678  LUMO = 85.0610871532312
  mo_energy =
[-1.21650608e+02 -1.32812008e+01 -7.62165227e+00 -7.62165227e+00
 -7.62165227e+00 -1.65071688e+00 -6.80909622e-01 -6.80909622e-01
 -6.80909622e-01  8.50610872e+01  6.77227710e+02  3.93503111e+03
  2.96196458e+04  1.54738902e+05  6.64892045e+05  2.71962805e+06
  1.10459661e+07  4.65100872e+07]
E1 = -706.5840104363442  E_coul = 198.94472056659265
cycle= 1 E= -507.639289869752  delta_E= -3.72  |g|= 0.317  |ddm|= 0.301
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.4205
diis-c [-0.17682004  1.        ]
  HOMO = -0.236298548172391  LUMO = 86.3941022065125
  mo_energy =
[-1.20262598e+02 -1.22531130e+01 -6.65312833e+00 -6.65312833e+00
 -6.65312833e+00 -1.16350386e+00 -2.36298548e-01 -2.36298548e-01
 -2.36298548e-01  8.63941022e+01  6.78598317e+02  3.93628277e+03
  2.96207346e+04  1.54739920e+05  6.64893033e+05  2.71962902e+06
  1.10459671e+07  4.65100881e+07]
E1 = -706.5525801555042  E_coul = 198.91286241842926
cycle= 2 E= -507.639717737075  delta_E= -0.000428  |g|= 0.00474  |ddm|= 0.0143
    CPU time for cycle= 2      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.00504149
diis-c [-2.53713821e-05 -5.06117578e-04  1.00050612e+00]
  HOMO = -0.236473737130814  LUMO = 86.3905841451041
  mo_energy =
[-1.20271237e+02 -1.22543016e+01 -6.65496918e+00 -6.65496918e+00
 -6.65496918e+00 -1.16356861e+00 -2.36473737e-01 -2.36473737e-01
 -2.36473737e-01  8.63905841e+01  6.78587733e+02  3.93626688e+03
  2.96207154e+04  1.54739900e+05  6.64893012e+05  2.71962900e+06
  1.10459670e+07  4.65100881e+07]
E1 = -706.5521399850401  E_coul = 198.91242213789533
cycle= 3 E= -507.639717847145  delta_E= -1.1e-07  |g|= 9.48e-05  |ddm|= 0.000202
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.000126766
diis-c [-3.95738010e-10  3.34172371e-05 -2.54631586e-02  1.02542974e+00]
  HOMO = -0.236475948716154  LUMO = 86.390539489506
  mo_energy =
[-1.20271350e+02 -1.22543174e+01 -6.65499614e+00 -6.65499614e+00
 -6.65499614e+00 -1.16356927e+00 -2.36475949e-01 -2.36475949e-01
 -2.36475949e-01  8.63905395e+01  6.78587616e+02  3.93626674e+03
  2.96207152e+04  1.54739900e+05  6.64893012e+05  2.71962900e+06
  1.10459670e+07  4.65100881e+07]
E1 = -706.5521327476533  E_coul = 198.91241490046892
cycle= 4 E= -507.639717847184  delta_E= -3.97e-11  |g|= 3.74e-07  |ddm|= 3.44e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.5521327476533  E_coul = 198.91241490046892
  HOMO = -0.236475932414868  LUMO = 86.3905398275364
  mo_energy =
[-1.20271349e+02 -1.22543173e+01 -6.65499598e+00 -6.65499598e+00
 -6.65499598e+00 -1.16356926e+00 -2.36475932e-01 -2.36475932e-01
 -2.36475932e-01  8.63905398e+01  6.78587617e+02  3.93626674e+03
  2.96207152e+04  1.54739900e+05  6.64893012e+05  2.71962900e+06
  1.10459670e+07  4.65100881e+07]
E1 = -706.5521327846533  E_coul = 198.91241493746895
Extra cycle  E= -507.639717847184  delta_E= 1.14e-13  |g|= 6.45e-09  |ddm|= 1.64e-08
    CPU time for scf_cycle      0.10 sec, wall time      0.10 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 56.39524242936924
E1 = -706.5521327846533  E_coul = 198.91241493746895
init E= -507.639717847184
    CPU time for initialize scf      0.12 sec, wall time      0.12 sec
  HOMO = -0.236475932224223  LUMO = 86.3905398316675
  mo_energy =
[-1.20271349e+02 -1.22543173e+01 -6.65499598e+00 -6.65499598e+00
 -6.65499598e+00 -1.16356926e+00 -2.36475932e-01 -2.36475932e-01
 -2.36475932e-01  8.63905398e+01  6.78587617e+02  3.93626674e+03
  2.96207152e+04  1.54739900e+05  6.64893012e+05  2.71962900e+06
  1.10459670e+07  4.65100881e+07]
E1 = -706.5521327852132  E_coul = 198.91241493802863
cycle= 1 E= -507.639717847185  delta_E= -2.27e-13  |g|= 1.56e-10  |ddm|= 2.54e-10
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -706.5521327852132  E_coul = 198.91241493802863
  HOMO = -0.23647593222153  LUMO = 86.3905398317269
  mo_energy =
[-1.20271349e+02 -1.22543173e+01 -6.65499598e+00 -6.65499598e+00
 -6.65499598e+00 -1.16356926e+00 -2.36475932e-01 -2.36475932e-01
 -2.36475932e-01  8.63905398e+01  6.78587617e+02  3.93626674e+03
  2.96207152e+04  1.54739900e+05  6.64893012e+05  2.71962900e+06
  1.10459670e+07  4.65100881e+07]
E1 = -706.5521327852225  E_coul = 198.91241493803824
Extra cycle  E= -507.639717847184  delta_E= 2.84e-13  |g|= 8.34e-11  |ddm|= 4.51e-12
    CPU time for scf_cycle      0.19 sec, wall time      0.19 sec
exp = [1.87954849e+07 4.69887121e+06 1.17471780e+06 2.93679451e+05
 7.34198654e+04 1.83539270e+04 2.23414340e+03 4.56888639e+02
 1.21733145e+02 3.75929105e+01 4.74131596e+00 3.91197858e-01
 8.59853818e+00 4.90840165e-01]
grad_E = [-1.11282135e-13  1.80101646e-11  8.62692961e-12  1.05339033e-08
 -3.42037151e-08  6.42098523e-06 -9.71607984e-06  3.95209067e-06
  8.66371728e-07 -3.35415266e-07  2.70275010e-05 -1.29890749e-04
 -6.14134708e-05 -2.38206307e-04]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="BFGS",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((14, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.6988712134173084e+06,1.1747178033543271e+06,2.9367945083858178e+05,7.3419865393677101e+04,1.8353927627435987e+04,2.2341424145819028e+03,4.5688904996449571e+02,1.2173317272260677e+02,3.7593061247508530e+01,4.7412722556720146e+00,3.9120358491841306e-01,8.5986297237246045e+00,4.9084868336327880e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "12s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:14:13 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  18795484.8537        1
[INPUT] 0    0    [1    /1   ]  4698871.21342        1
[INPUT] 0    0    [1    /1   ]  1174717.80335        1
[INPUT] 0    0    [1    /1   ]  293679.450836        1
[INPUT] 0    0    [1    /1   ]  73419.8654005        1
[INPUT] 0    0    [1    /1   ]  18353.9263505        1
[INPUT] 0    0    [1    /1   ]  2234.1443478         1
[INPUT] 0    0    [1    /1   ]  456.888247299        1
[INPUT] 0    0    [1    /1   ]  121.73311824         1
[INPUT] 0    0    [1    /1   ]  37.5927689384        1
[INPUT] 0    0    [1    /1   ]  4.7413325794         1
[INPUT] 0    0    [1    /1   ]  0.391194199601       1
[INPUT] 1    0    [1    /1   ]  8.5985067396         1
[INPUT] 1    0    [1    /1   ]  0.490835416418       1

nuclear repulsion = 0
number of shells = 14
number of NR pGTOs = 18
number of NR cGTOs = 18
basis = {'Ar': [[0, [18795484.853669234, 1.0]], [0, [4698871.213417305, 1.0]], [0, [1174717.8033543252, 1.0]], [0, [293679.4508364869, 1.0]], [0, [73419.865400479, 1.0]], [0, [18353.926350502694, 1.0]], [0, [2234.1443477959674, 1.0]], [0, [456.88824729948, 1.0]], [0, [121.73311823997223, 1.0]], [0, [37.59276893843668, 1.0]], [0, [4.741332579398751, 1.0]], [0, [0.3911941996012175, 1.0]], [1, [8.598506739596138, 1.0]], [1, [0.49083541641818035, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [18795484.85366923]
bas 1, expnt(s) = [4698871.2134173]
bas 2, expnt(s) = [1174717.80335433]
bas 3, expnt(s) = [293679.45083649]
bas 4, expnt(s) = [73419.86540048]
bas 5, expnt(s) = [18353.9263505]
bas 6, expnt(s) = [2234.1443478]
bas 7, expnt(s) = [456.8882473]
bas 8, expnt(s) = [121.73311824]
bas 9, expnt(s) = [37.59276894]
bas 10, expnt(s) = [4.74133258]
bas 11, expnt(s) = [0.3911942]
bas 12, expnt(s) = [8.59850674]
bas 13, expnt(s) = [0.49083542]
CPU time:        33.96
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  0  1  1  0 42 43  0]
 [ 0  0  1  1  0 44 45  0]
 [ 0  0  1  1  0 46 47  0]
 [ 0  1  1  1  0 48 49  0]
 [ 0  1  1  1  0 50 51  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.87954849e+07 7.21199097e+05 4.69887121e+06 2.54982386e+05
 1.17471780e+06 9.01498871e+04 2.93679451e+05 3.18727983e+04
 7.34198654e+04 1.12687362e+04 1.83539264e+04 3.98393058e+03
 2.23414435e+03 8.21009999e+02 4.56888247e+02 2.49673537e+02
 1.21733118e+02 9.25915990e+01 3.75927689e+01 3.83568788e+01
 4.74133258e+00 8.11783723e+00 3.91194200e-01 1.24971024e+00
 8.59850674e+00 4.29549470e+01 4.90835416e-01 1.19854476e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319993101538095
cond(S) = 56.39521230060701
E1 = -688.830213420418  E_coul = 184.9143074955408
init E= -503.915905924877
    CPU time for initialize scf      0.03 sec, wall time      0.03 sec
  HOMO = -0.680916687755196  LUMO = 85.060804553318
  mo_energy =
[-1.21650654e+02 -1.32812272e+01 -7.62167469e+00 -7.62167469e+00
 -7.62167469e+00 -1.65072227e+00 -6.80916688e-01 -6.80916688e-01
 -6.80916688e-01  8.50608046e+01  6.77226793e+02  3.93503035e+03
  2.96196464e+04  1.54738902e+05  6.64892044e+05  2.71962805e+06
  1.10459661e+07  4.65100872e+07]
E1 = -706.5835645674574  E_coul = 198.94427468105272
cycle= 1 E= -507.639289886405  delta_E= -3.72  |g|= 0.317  |ddm|= 0.301
    CPU time for cycle= 1      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.420499
diis-c [-0.17681938  1.        ]
  HOMO = -0.236311205766307  LUMO = 86.3938112193504
  mo_energy =
[-1.20262652e+02 -1.22531461e+01 -6.65315752e+00 -6.65315752e+00
 -6.65315752e+00 -1.16351435e+00 -2.36311206e-01 -2.36311206e-01
 -2.36311206e-01  8.63938112e+01  6.78597392e+02  3.93628200e+03
  2.96207352e+04  1.54739920e+05  6.64893032e+05  2.71962902e+06
  1.10459671e+07  4.65100881e+07]
E1 = -706.5521344991383  E_coul = 198.91241675241406
cycle= 2 E= -507.639717746724  delta_E= -0.000428  |g|= 0.00474  |ddm|= 0.0143
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00504143
diis-c [-2.53708038e-05 -5.06042690e-04  1.00050604e+00]
  HOMO = -0.236486390442129  LUMO = 86.390293181995
  mo_energy =
[-1.20271291e+02 -1.22543347e+01 -6.65499836e+00 -6.65499836e+00
 -6.65499836e+00 -1.16357911e+00 -2.36486390e-01 -2.36486390e-01
 -2.36486390e-01  8.63902932e+01  6.78586809e+02  3.93626611e+03
  2.96207160e+04  1.54739900e+05  6.64893012e+05  2.71962900e+06
  1.10459670e+07  4.65100881e+07]
E1 = -706.5516943316799  E_coul = 198.91197647488832
cycle= 3 E= -507.639717856792  delta_E= -1.1e-07  |g|= 9.48e-05  |ddm|= 0.000202
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.000126765
diis-c [-3.95739267e-10  3.34166537e-05 -2.54632740e-02  1.02542986e+00]
  HOMO = -0.23648860198002  LUMO = 86.3902485264021
  mo_energy =
[-1.20271404e+02 -1.22543504e+01 -6.65502532e+00 -6.65502532e+00
 -6.65502532e+00 -1.16357976e+00 -2.36488602e-01 -2.36488602e-01
 -2.36488602e-01  8.63902485e+01  6.78586691e+02  3.93626597e+03
  2.96207158e+04  1.54739899e+05  6.64893012e+05  2.71962900e+06
  1.10459670e+07  4.65100881e+07]
E1 = -706.5516870943006  E_coul = 198.9119692374691
cycle= 4 E= -507.639717856832  delta_E= -4e-11  |g|= 3.74e-07  |ddm|= 3.44e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.5516870943006  E_coul = 198.9119692374691
  HOMO = -0.236488585678952  LUMO = 86.390248864436
  mo_energy =
[-1.20271403e+02 -1.22543503e+01 -6.65502515e+00 -6.65502515e+00
 -6.65502515e+00 -1.16357976e+00 -2.36488586e-01 -2.36488586e-01
 -2.36488586e-01  8.63902489e+01  6.78586692e+02  3.93626597e+03
  2.96207158e+04  1.54739899e+05  6.64893012e+05  2.71962900e+06
  1.10459670e+07  4.65100881e+07]
E1 = -706.5516871313006  E_coul = 198.91196927446902
Extra cycle  E= -507.639717856832  delta_E=    0  |g|= 6.45e-09  |ddm|= 1.64e-08
    CPU time for scf_cycle      0.10 sec, wall time      0.10 sec
exp = [1.87954849e+07 4.69887121e+06 1.17471780e+06 2.93679451e+05
 7.34198654e+04 1.83539264e+04 2.23414435e+03 4.56888247e+02
 1.21733118e+02 3.75927689e+01 4.74133258e+00 3.91194200e-01
 8.59850674e+00 4.90835416e-01]
E = -507.63971785683157
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="BFGS",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((14, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.6988712134173084e+06,1.1747178033543271e+06,2.9367945083858178e+05,7.3419865393677101e+04,1.8353927627435987e+04,2.2341424145819028e+03,4.5688904996449571e+02,1.2173317272260677e+02,3.7593061247508530e+01,4.7412722556720146e+00,3.9120358491841306e-01,8.5986297237246045e+00,4.9084868336327880e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "12s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:14:13 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  18795484.8537        1
[INPUT] 0    0    [1    /1   ]  4698871.21342        1
[INPUT] 0    0    [1    /1   ]  1174717.80335        1
[INPUT] 0    0    [1    /1   ]  293679.450836        1
[INPUT] 0    0    [1    /1   ]  73419.8654005        1
[INPUT] 0    0    [1    /1   ]  18353.9263505        1
[INPUT] 0    0    [1    /1   ]  2234.1443478         1
[INPUT] 0    0    [1    /1   ]  456.888247299        1
[INPUT] 0    0    [1    /1   ]  121.73311824         1
[INPUT] 0    0    [1    /1   ]  37.5927689384        1
[INPUT] 0    0    [1    /1   ]  4.7413325794         1
[INPUT] 0    0    [1    /1   ]  0.391194199601       1
[INPUT] 1    0    [1    /1   ]  8.5985067396         1
[INPUT] 1    0    [1    /1   ]  0.490835416418       1

nuclear repulsion = 0
number of shells = 14
number of NR pGTOs = 18
number of NR cGTOs = 18
basis = {'Ar': [[0, [18795484.853669234, 1.0]], [0, [4698871.213417305, 1.0]], [0, [1174717.8033543252, 1.0]], [0, [293679.4508364869, 1.0]], [0, [73419.865400479, 1.0]], [0, [18353.926350502694, 1.0]], [0, [2234.1443477959674, 1.0]], [0, [456.88824729948, 1.0]], [0, [121.73311823997223, 1.0]], [0, [37.59276893843668, 1.0]], [0, [4.741332579398751, 1.0]], [0, [0.3911941996012175, 1.0]], [1, [8.598506739596138, 1.0]], [1, [0.49083541641818035, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [18795484.85366923]
bas 1, expnt(s) = [4698871.2134173]
bas 2, expnt(s) = [1174717.80335433]
bas 3, expnt(s) = [293679.45083649]
bas 4, expnt(s) = [73419.86540048]
bas 5, expnt(s) = [18353.9263505]
bas 6, expnt(s) = [2234.1443478]
bas 7, expnt(s) = [456.8882473]
bas 8, expnt(s) = [121.73311824]
bas 9, expnt(s) = [37.59276894]
bas 10, expnt(s) = [4.74133258]
bas 11, expnt(s) = [0.3911942]
bas 12, expnt(s) = [8.59850674]
bas 13, expnt(s) = [0.49083542]
CPU time:        34.24
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  0  1  1  0 42 43  0]
 [ 0  0  1  1  0 44 45  0]
 [ 0  0  1  1  0 46 47  0]
 [ 0  1  1  1  0 48 49  0]
 [ 0  1  1  1  0 50 51  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.87954849e+07 7.21199097e+05 4.69887121e+06 2.54982386e+05
 1.17471780e+06 9.01498871e+04 2.93679451e+05 3.18727983e+04
 7.34198654e+04 1.12687362e+04 1.83539264e+04 3.98393058e+03
 2.23414435e+03 8.21009999e+02 4.56888247e+02 2.49673537e+02
 1.21733118e+02 9.25915990e+01 3.75927689e+01 3.83568788e+01
 4.74133258e+00 8.11783723e+00 3.91194200e-01 1.24971024e+00
 8.59850674e+00 4.29549470e+01 4.90835416e-01 1.19854476e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319993101538095
cond(S) = 56.39521230060701
E1 = -688.830213420418  E_coul = 184.9143074955408
init E= -503.915905924877
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.680916687755196  LUMO = 85.060804553318
  mo_energy =
[-1.21650654e+02 -1.32812272e+01 -7.62167469e+00 -7.62167469e+00
 -7.62167469e+00 -1.65072227e+00 -6.80916688e-01 -6.80916688e-01
 -6.80916688e-01  8.50608046e+01  6.77226793e+02  3.93503035e+03
  2.96196464e+04  1.54738902e+05  6.64892044e+05  2.71962805e+06
  1.10459661e+07  4.65100872e+07]
E1 = -706.5835645674574  E_coul = 198.94427468105272
cycle= 1 E= -507.639289886405  delta_E= -3.72  |g|= 0.317  |ddm|= 0.301
    CPU time for cycle= 1      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.420499
diis-c [-0.17681938  1.        ]
  HOMO = -0.236311205766307  LUMO = 86.3938112193504
  mo_energy =
[-1.20262652e+02 -1.22531461e+01 -6.65315752e+00 -6.65315752e+00
 -6.65315752e+00 -1.16351435e+00 -2.36311206e-01 -2.36311206e-01
 -2.36311206e-01  8.63938112e+01  6.78597392e+02  3.93628200e+03
  2.96207352e+04  1.54739920e+05  6.64893032e+05  2.71962902e+06
  1.10459671e+07  4.65100881e+07]
E1 = -706.5521344991383  E_coul = 198.91241675241406
cycle= 2 E= -507.639717746724  delta_E= -0.000428  |g|= 0.00474  |ddm|= 0.0143
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00504143
diis-c [-2.53708038e-05 -5.06042690e-04  1.00050604e+00]
  HOMO = -0.236486390442129  LUMO = 86.390293181995
  mo_energy =
[-1.20271291e+02 -1.22543347e+01 -6.65499836e+00 -6.65499836e+00
 -6.65499836e+00 -1.16357911e+00 -2.36486390e-01 -2.36486390e-01
 -2.36486390e-01  8.63902932e+01  6.78586809e+02  3.93626611e+03
  2.96207160e+04  1.54739900e+05  6.64893012e+05  2.71962900e+06
  1.10459670e+07  4.65100881e+07]
E1 = -706.5516943316799  E_coul = 198.91197647488832
cycle= 3 E= -507.639717856792  delta_E= -1.1e-07  |g|= 9.48e-05  |ddm|= 0.000202
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.000126765
diis-c [-3.95739267e-10  3.34166537e-05 -2.54632740e-02  1.02542986e+00]
  HOMO = -0.23648860198002  LUMO = 86.3902485264021
  mo_energy =
[-1.20271404e+02 -1.22543504e+01 -6.65502532e+00 -6.65502532e+00
 -6.65502532e+00 -1.16357976e+00 -2.36488602e-01 -2.36488602e-01
 -2.36488602e-01  8.63902485e+01  6.78586691e+02  3.93626597e+03
  2.96207158e+04  1.54739899e+05  6.64893012e+05  2.71962900e+06
  1.10459670e+07  4.65100881e+07]
E1 = -706.5516870943006  E_coul = 198.9119692374691
cycle= 4 E= -507.639717856832  delta_E= -4e-11  |g|= 3.74e-07  |ddm|= 3.44e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.5516870943006  E_coul = 198.9119692374691
  HOMO = -0.236488585678952  LUMO = 86.390248864436
  mo_energy =
[-1.20271403e+02 -1.22543503e+01 -6.65502515e+00 -6.65502515e+00
 -6.65502515e+00 -1.16357976e+00 -2.36488586e-01 -2.36488586e-01
 -2.36488586e-01  8.63902489e+01  6.78586692e+02  3.93626597e+03
  2.96207158e+04  1.54739899e+05  6.64893012e+05  2.71962900e+06
  1.10459670e+07  4.65100881e+07]
E1 = -706.5516871313006  E_coul = 198.91196927446902
Extra cycle  E= -507.639717856832  delta_E=    0  |g|= 6.45e-09  |ddm|= 1.64e-08
    CPU time for scf_cycle      0.10 sec, wall time      0.10 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 56.39521230060701
E1 = -706.5516871313006  E_coul = 198.91196927446902
init E= -507.639717856832
    CPU time for initialize scf      0.12 sec, wall time      0.12 sec
  HOMO = -0.236488585488307  LUMO = 86.3902488685702
  mo_energy =
[-1.20271403e+02 -1.22543503e+01 -6.65502515e+00 -6.65502515e+00
 -6.65502515e+00 -1.16357976e+00 -2.36488585e-01 -2.36488585e-01
 -2.36488585e-01  8.63902489e+01  6.78586692e+02  3.93626597e+03
  2.96207158e+04  1.54739899e+05  6.64893012e+05  2.71962900e+06
  1.10459670e+07  4.65100881e+07]
E1 = -706.5516871318598  E_coul = 198.91196927502844
cycle= 1 E= -507.639717856831  delta_E= 2.27e-13  |g|= 3.22e-10  |ddm|= 2.54e-10
    CPU time for cycle= 1      0.01 sec, wall time      0.02 sec
E1 = -706.5516871318598  E_coul = 198.91196927502844
  HOMO = -0.236488585485612  LUMO = 86.3902488686288
  mo_energy =
[-1.20271403e+02 -1.22543503e+01 -6.65502515e+00 -6.65502515e+00
 -6.65502515e+00 -1.16357976e+00 -2.36488585e-01 -2.36488585e-01
 -2.36488585e-01  8.63902489e+01  6.78586692e+02  3.93626597e+03
  2.96207158e+04  1.54739899e+05  6.64893012e+05  2.71962900e+06
  1.10459670e+07  4.65100881e+07]
E1 = -706.5516871318691  E_coul = 198.91196927503796
Extra cycle  E= -507.639717856831  delta_E= 1.71e-13  |g|= 1.43e-10  |ddm|= 4.5e-12
    CPU time for scf_cycle      0.19 sec, wall time      0.19 sec
exp = [1.87954849e+07 4.69887121e+06 1.17471780e+06 2.93679451e+05
 7.34198654e+04 1.83539264e+04 2.23414435e+03 4.56888247e+02
 1.21733118e+02 3.75927689e+01 4.74133258e+00 3.91194200e-01
 8.59850674e+00 4.90835416e-01]
grad_E = [-1.11284513e-13  1.80100167e-11  8.62568047e-12  1.05338190e-08
 -3.42041081e-08  6.42092662e-06 -9.71112304e-06  3.87053913e-06
  1.46137522e-06 -2.13176612e-06  3.76512138e-05 -2.05367214e-04
 -8.29640494e-05 -3.92802748e-04]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="BFGS",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((14, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.6988712134173084e+06,1.1747178033543271e+06,2.9367945083858178e+05,7.3419865393677101e+04,1.8353927627435987e+04,2.2341424145819028e+03,4.5688904996449571e+02,1.2173317272260677e+02,3.7593061247508530e+01,4.7412722556720146e+00,3.9120358491841306e-01,8.5986297237246045e+00,4.9084868336327880e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "12s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:14:16 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  18795484.8537        1
[INPUT] 0    0    [1    /1   ]  4698871.21342        1
[INPUT] 0    0    [1    /1   ]  1174717.80335        1
[INPUT] 0    0    [1    /1   ]  293679.450835        1
[INPUT] 0    0    [1    /1   ]  73419.8654068        1
[INPUT] 0    0    [1    /1   ]  18353.9251631        1
[INPUT] 0    0    [1    /1   ]  2234.14614552        1
[INPUT] 0    0    [1    /1   ]  456.887501106        1
[INPUT] 0    0    [1    /1   ]  121.733065938        1
[INPUT] 0    0    [1    /1   ]  37.592502081         1
[INPUT] 0    0    [1    /1   ]  4.74135573455        1
[INPUT] 0    0    [1    /1   ]  0.391189159532       1
[INPUT] 1    0    [1    /1   ]  8.59846415029        1
[INPUT] 1    0    [1    /1   ]  0.490828922659       1

nuclear repulsion = 0
number of shells = 14
number of NR pGTOs = 18
number of NR cGTOs = 18
basis = {'Ar': [[0, [18795484.853669234, 1.0]], [0, [4698871.213417301, 1.0]], [0, [1174717.8033543236, 1.0]], [0, [293679.45083453885, 1.0]], [0, [73419.86540680425, 1.0]], [0, [18353.925163052234, 1.0]], [0, [2234.146145524072, 1.0]], [0, [456.8875011064538, 1.0]], [0, [121.73306593782432, 1.0]], [0, [37.592502080975656, 1.0]], [0, [4.7413557345484945, 1.0]], [0, [0.39118915953153577, 1.0]], [1, [8.598464150285665, 1.0]], [1, [0.4908289226593674, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [18795484.85366923]
bas 1, expnt(s) = [4698871.2134173]
bas 2, expnt(s) = [1174717.80335432]
bas 3, expnt(s) = [293679.45083454]
bas 4, expnt(s) = [73419.8654068]
bas 5, expnt(s) = [18353.92516305]
bas 6, expnt(s) = [2234.14614552]
bas 7, expnt(s) = [456.88750111]
bas 8, expnt(s) = [121.73306594]
bas 9, expnt(s) = [37.59250208]
bas 10, expnt(s) = [4.74135573]
bas 11, expnt(s) = [0.39118916]
bas 12, expnt(s) = [8.59846415]
bas 13, expnt(s) = [0.49082892]
CPU time:        37.25
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  0  1  1  0 42 43  0]
 [ 0  0  1  1  0 44 45  0]
 [ 0  0  1  1  0 46 47  0]
 [ 0  1  1  1  0 48 49  0]
 [ 0  1  1  1  0 50 51  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.87954849e+07 7.21199097e+05 4.69887121e+06 2.54982386e+05
 1.17471780e+06 9.01498871e+04 2.93679451e+05 3.18727983e+04
 7.34198654e+04 1.12687362e+04 1.83539252e+04 3.98393039e+03
 2.23414615e+03 8.21010494e+02 4.56887501e+02 2.49673231e+02
 1.21733066e+02 9.25915692e+01 3.75925021e+01 3.83566746e+01
 4.74135573e+00 8.11786696e+00 3.91189160e-01 1.24969817e+00
 8.59846415e+00 4.29546811e+01 4.90828923e-01 1.19852494e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.32000184936964
cond(S) = 56.395153148012604
E1 = -688.829757300943  E_coul = 184.91384782365796
init E= -503.915909477285
    CPU time for initialize scf      0.03 sec, wall time      0.03 sec
  HOMO = -0.68092637464414  LUMO = 85.0602628922119
  mo_energy =
[-1.21650718e+02 -1.32812627e+01 -7.62170531e+00 -7.62170531e+00
 -7.62170531e+00 -1.65072959e+00 -6.80926375e-01 -6.80926375e-01
 -6.80926375e-01  8.50602629e+01  6.77225054e+02  3.93502891e+03
  2.96196475e+04  1.54738901e+05  6.64892043e+05  2.71962805e+06
  1.10459661e+07  4.65100872e+07]
E1 = -706.5829538709526  E_coul = 198.94366395920605
cycle= 1 E= -507.639289911747  delta_E= -3.72  |g|= 0.317  |ddm|= 0.301
    CPU time for cycle= 1      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.420498
diis-c [-0.17681833  1.        ]
  HOMO = -0.236328545226135  LUMO = 86.3932575560139
  mo_energy =
[-1.20262726e+02 -1.22531908e+01 -6.65319748e+00 -6.65319748e+00
 -6.65319748e+00 -1.16352867e+00 -2.36328545e-01 -2.36328545e-01
 -2.36328545e-01  8.63932576e+01  6.78595642e+02  3.93628054e+03
  2.96207364e+04  1.54739919e+05  6.64893031e+05  2.71962902e+06
  1.10459670e+07  4.65100881e+07]
E1 = -706.5515239834042  E_coul = 198.9118062194212
cycle= 2 E= -507.639717763983  delta_E= -0.000428  |g|= 0.00474  |ddm|= 0.0143
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00504136
diis-c [-2.53701386e-05 -5.05919218e-04  1.00050592e+00]
  HOMO = -0.236503724678425  LUMO = 86.3897395402708
  mo_energy =
[-1.20271365e+02 -1.22543794e+01 -6.65503831e+00 -6.65503831e+00
 -6.65503831e+00 -1.16359343e+00 -2.36503725e-01 -2.36503725e-01
 -2.36503725e-01  8.63897395e+01  6.78585058e+02  3.93626466e+03
  2.96207171e+04  1.54739899e+05  6.64893010e+05  2.71962900e+06
  1.10459670e+07  4.65100881e+07]
E1 = -706.5510838182466  E_coul = 198.91136594419862
cycle= 3 E= -507.639717874048  delta_E= -1.1e-07  |g|= 9.48e-05  |ddm|= 0.000202
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.000126765
diis-c [-3.95737736e-10  3.34164496e-05 -2.54634690e-02  1.02543005e+00]
  HOMO = -0.236505936164458  LUMO = 86.3896948844327
  mo_energy =
[-1.20271478e+02 -1.22543952e+01 -6.65506527e+00 -6.65506527e+00
 -6.65506527e+00 -1.16359408e+00 -2.36505936e-01 -2.36505936e-01
 -2.36505936e-01  8.63896949e+01  6.78584941e+02  3.93626451e+03
  2.96207170e+04  1.54739899e+05  6.64893010e+05  2.71962900e+06
  1.10459670e+07  4.65100881e+07]
E1 = -706.5510765808324  E_coul = 198.91135870674478
cycle= 4 E= -507.639717874088  delta_E= -3.96e-11  |g|= 3.74e-07  |ddm|= 3.44e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.5510765808324  E_coul = 198.91135870674478
  HOMO = -0.236505919863702  LUMO = 86.3896952224684
  mo_energy =
[-1.20271477e+02 -1.22543951e+01 -6.65506511e+00 -6.65506511e+00
 -6.65506511e+00 -1.16359408e+00 -2.36505920e-01 -2.36505920e-01
 -2.36505920e-01  8.63896952e+01  6.78584942e+02  3.93626451e+03
  2.96207170e+04  1.54739899e+05  6.64893010e+05  2.71962900e+06
  1.10459670e+07  4.65100881e+07]
E1 = -706.5510766178323  E_coul = 198.9113587437444
Extra cycle  E= -507.639717874088  delta_E= -3.41e-13  |g|= 6.45e-09  |ddm|= 1.64e-08
    CPU time for scf_cycle      0.10 sec, wall time      0.11 sec
exp = [1.87954849e+07 4.69887121e+06 1.17471780e+06 2.93679451e+05
 7.34198654e+04 1.83539252e+04 2.23414615e+03 4.56887501e+02
 1.21733066e+02 3.75925021e+01 4.74135573e+00 3.91189160e-01
 8.59846415e+00 4.90828923e-01]
E = -507.639717874088
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="BFGS",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((14, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.6988712134173084e+06,1.1747178033543271e+06,2.9367945083858178e+05,7.3419865393677101e+04,1.8353927627435987e+04,2.2341424145819028e+03,4.5688904996449571e+02,1.2173317272260677e+02,3.7593061247508530e+01,4.7412722556720146e+00,3.9120358491841306e-01,8.5986297237246045e+00,4.9084868336327880e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "12s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:14:16 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  18795484.8537        1
[INPUT] 0    0    [1    /1   ]  4698871.21342        1
[INPUT] 0    0    [1    /1   ]  1174717.80335        1
[INPUT] 0    0    [1    /1   ]  293679.450835        1
[INPUT] 0    0    [1    /1   ]  73419.8654068        1
[INPUT] 0    0    [1    /1   ]  18353.9251631        1
[INPUT] 0    0    [1    /1   ]  2234.14614552        1
[INPUT] 0    0    [1    /1   ]  456.887501106        1
[INPUT] 0    0    [1    /1   ]  121.733065938        1
[INPUT] 0    0    [1    /1   ]  37.592502081         1
[INPUT] 0    0    [1    /1   ]  4.74135573455        1
[INPUT] 0    0    [1    /1   ]  0.391189159532       1
[INPUT] 1    0    [1    /1   ]  8.59846415029        1
[INPUT] 1    0    [1    /1   ]  0.490828922659       1

nuclear repulsion = 0
number of shells = 14
number of NR pGTOs = 18
number of NR cGTOs = 18
basis = {'Ar': [[0, [18795484.853669234, 1.0]], [0, [4698871.213417301, 1.0]], [0, [1174717.8033543236, 1.0]], [0, [293679.45083453885, 1.0]], [0, [73419.86540680425, 1.0]], [0, [18353.925163052234, 1.0]], [0, [2234.146145524072, 1.0]], [0, [456.8875011064538, 1.0]], [0, [121.73306593782432, 1.0]], [0, [37.592502080975656, 1.0]], [0, [4.7413557345484945, 1.0]], [0, [0.39118915953153577, 1.0]], [1, [8.598464150285665, 1.0]], [1, [0.4908289226593674, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [18795484.85366923]
bas 1, expnt(s) = [4698871.2134173]
bas 2, expnt(s) = [1174717.80335432]
bas 3, expnt(s) = [293679.45083454]
bas 4, expnt(s) = [73419.8654068]
bas 5, expnt(s) = [18353.92516305]
bas 6, expnt(s) = [2234.14614552]
bas 7, expnt(s) = [456.88750111]
bas 8, expnt(s) = [121.73306594]
bas 9, expnt(s) = [37.59250208]
bas 10, expnt(s) = [4.74135573]
bas 11, expnt(s) = [0.39118916]
bas 12, expnt(s) = [8.59846415]
bas 13, expnt(s) = [0.49082892]
CPU time:        37.54
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  0  1  1  0 42 43  0]
 [ 0  0  1  1  0 44 45  0]
 [ 0  0  1  1  0 46 47  0]
 [ 0  1  1  1  0 48 49  0]
 [ 0  1  1  1  0 50 51  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.87954849e+07 7.21199097e+05 4.69887121e+06 2.54982386e+05
 1.17471780e+06 9.01498871e+04 2.93679451e+05 3.18727983e+04
 7.34198654e+04 1.12687362e+04 1.83539252e+04 3.98393039e+03
 2.23414615e+03 8.21010494e+02 4.56887501e+02 2.49673231e+02
 1.21733066e+02 9.25915692e+01 3.75925021e+01 3.83566746e+01
 4.74135573e+00 8.11786696e+00 3.91189160e-01 1.24969817e+00
 8.59846415e+00 4.29546811e+01 4.90828923e-01 1.19852494e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.32000184936964
cond(S) = 56.395153148012604
E1 = -688.829757300943  E_coul = 184.91384782365796
init E= -503.915909477285
    CPU time for initialize scf      0.03 sec, wall time      0.03 sec
  HOMO = -0.68092637464414  LUMO = 85.0602628922119
  mo_energy =
[-1.21650718e+02 -1.32812627e+01 -7.62170531e+00 -7.62170531e+00
 -7.62170531e+00 -1.65072959e+00 -6.80926375e-01 -6.80926375e-01
 -6.80926375e-01  8.50602629e+01  6.77225054e+02  3.93502891e+03
  2.96196475e+04  1.54738901e+05  6.64892043e+05  2.71962805e+06
  1.10459661e+07  4.65100872e+07]
E1 = -706.5829538709526  E_coul = 198.94366395920605
cycle= 1 E= -507.639289911747  delta_E= -3.72  |g|= 0.317  |ddm|= 0.301
    CPU time for cycle= 1      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.420498
diis-c [-0.17681833  1.        ]
  HOMO = -0.236328545226135  LUMO = 86.3932575560139
  mo_energy =
[-1.20262726e+02 -1.22531908e+01 -6.65319748e+00 -6.65319748e+00
 -6.65319748e+00 -1.16352867e+00 -2.36328545e-01 -2.36328545e-01
 -2.36328545e-01  8.63932576e+01  6.78595642e+02  3.93628054e+03
  2.96207364e+04  1.54739919e+05  6.64893031e+05  2.71962902e+06
  1.10459670e+07  4.65100881e+07]
E1 = -706.5515239834042  E_coul = 198.9118062194212
cycle= 2 E= -507.639717763983  delta_E= -0.000428  |g|= 0.00474  |ddm|= 0.0143
    CPU time for cycle= 2      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.00504136
diis-c [-2.53701386e-05 -5.05919218e-04  1.00050592e+00]
  HOMO = -0.236503724678425  LUMO = 86.3897395402708
  mo_energy =
[-1.20271365e+02 -1.22543794e+01 -6.65503831e+00 -6.65503831e+00
 -6.65503831e+00 -1.16359343e+00 -2.36503725e-01 -2.36503725e-01
 -2.36503725e-01  8.63897395e+01  6.78585058e+02  3.93626466e+03
  2.96207171e+04  1.54739899e+05  6.64893010e+05  2.71962900e+06
  1.10459670e+07  4.65100881e+07]
E1 = -706.5510838182466  E_coul = 198.91136594419862
cycle= 3 E= -507.639717874048  delta_E= -1.1e-07  |g|= 9.48e-05  |ddm|= 0.000202
    CPU time for cycle= 3      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.000126765
diis-c [-3.95737736e-10  3.34164496e-05 -2.54634690e-02  1.02543005e+00]
  HOMO = -0.236505936164458  LUMO = 86.3896948844327
  mo_energy =
[-1.20271478e+02 -1.22543952e+01 -6.65506527e+00 -6.65506527e+00
 -6.65506527e+00 -1.16359408e+00 -2.36505936e-01 -2.36505936e-01
 -2.36505936e-01  8.63896949e+01  6.78584941e+02  3.93626451e+03
  2.96207170e+04  1.54739899e+05  6.64893010e+05  2.71962900e+06
  1.10459670e+07  4.65100881e+07]
E1 = -706.5510765808324  E_coul = 198.91135870674478
cycle= 4 E= -507.639717874088  delta_E= -3.96e-11  |g|= 3.74e-07  |ddm|= 3.44e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.5510765808324  E_coul = 198.91135870674478
  HOMO = -0.236505919863702  LUMO = 86.3896952224684
  mo_energy =
[-1.20271477e+02 -1.22543951e+01 -6.65506511e+00 -6.65506511e+00
 -6.65506511e+00 -1.16359408e+00 -2.36505920e-01 -2.36505920e-01
 -2.36505920e-01  8.63896952e+01  6.78584942e+02  3.93626451e+03
  2.96207170e+04  1.54739899e+05  6.64893010e+05  2.71962900e+06
  1.10459670e+07  4.65100881e+07]
E1 = -706.5510766178323  E_coul = 198.9113587437444
Extra cycle  E= -507.639717874088  delta_E= -3.41e-13  |g|= 6.45e-09  |ddm|= 1.64e-08
    CPU time for scf_cycle      0.10 sec, wall time      0.11 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 56.395153148012604
E1 = -706.5510766178323  E_coul = 198.9113587437444
init E= -507.639717874088
    CPU time for initialize scf      0.12 sec, wall time      0.12 sec
  HOMO = -0.236505919673061  LUMO = 86.389695226599
  mo_energy =
[-1.20271477e+02 -1.22543951e+01 -6.65506511e+00 -6.65506511e+00
 -6.65506511e+00 -1.16359408e+00 -2.36505920e-01 -2.36505920e-01
 -2.36505920e-01  8.63896952e+01  6.78584942e+02  3.93626451e+03
  2.96207170e+04  1.54739899e+05  6.64893010e+05  2.71962900e+06
  1.10459670e+07  4.65100881e+07]
E1 = -706.5510766183922  E_coul = 198.9113587443041
cycle= 1 E= -507.639717874088  delta_E= -1.71e-13  |g|= 1.59e-10  |ddm|= 2.54e-10
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -706.5510766183922  E_coul = 198.9113587443041
  HOMO = -0.236505919670375  LUMO = 86.3896952266575
  mo_energy =
[-1.20271477e+02 -1.22543951e+01 -6.65506511e+00 -6.65506511e+00
 -6.65506511e+00 -1.16359408e+00 -2.36505920e-01 -2.36505920e-01
 -2.36505920e-01  8.63896952e+01  6.78584942e+02  3.93626451e+03
  2.96207170e+04  1.54739899e+05  6.64893010e+05  2.71962900e+06
  1.10459670e+07  4.65100881e+07]
E1 = -706.5510766184024  E_coul = 198.91135874431401
Extra cycle  E= -507.639717874088  delta_E= -1.71e-13  |g|= 1.81e-10  |ddm|= 4.51e-12
    CPU time for scf_cycle      0.19 sec, wall time      0.19 sec
exp = [1.87954849e+07 4.69887121e+06 1.17471780e+06 2.93679451e+05
 7.34198654e+04 1.83539252e+04 2.23414615e+03 4.56887501e+02
 1.21733066e+02 3.75925021e+01 4.74135573e+00 3.91189160e-01
 8.59846415e+00 4.90828923e-01]
grad_E = [-1.11289009e-13  1.80097344e-11  8.62331213e-12  1.05336581e-08
 -3.42048493e-08  6.42081487e-06 -9.70172523e-06  3.71639989e-06
  2.59281492e-06 -5.54351257e-06  5.21168286e-05 -3.08708615e-04
 -1.12224226e-04 -6.04748826e-04]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="BFGS",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((14, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.6988712134173084e+06,1.1747178033543271e+06,2.9367945083858178e+05,7.3419865393677101e+04,1.8353927627435987e+04,2.2341424145819028e+03,4.5688904996449571e+02,1.2173317272260677e+02,3.7593061247508530e+01,4.7412722556720146e+00,3.9120358491841306e-01,8.5986297237246045e+00,4.9084868336327880e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "12s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:14:19 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  18795484.8537        1
[INPUT] 0    0    [1    /1   ]  4698871.21342        1
[INPUT] 0    0    [1    /1   ]  1174717.80335        1
[INPUT] 0    0    [1    /1   ]  293679.450831        1
[INPUT] 0    0    [1    /1   ]  73419.8654188        1
[INPUT] 0    0    [1    /1   ]  18353.9229081        1
[INPUT] 0    0    [1    /1   ]  2234.14955935        1
[INPUT] 0    0    [1    /1   ]  456.886084349        1
[INPUT] 0    0    [1    /1   ]  121.732964816        1
[INPUT] 0    0    [1    /1   ]  37.5920007593        1
[INPUT] 0    0    [1    /1   ]  4.74138787223        1
[INPUT] 0    0    [1    /1   ]  0.391182272368       1
[INPUT] 1    0    [1    /1   ]  8.59840732294        1
[INPUT] 1    0    [1    /1   ]  0.490820140691       1

nuclear repulsion = 0
number of shells = 14
number of NR pGTOs = 18
number of NR cGTOs = 18
basis = {'Ar': [[0, [18795484.853669234, 1.0]], [0, [4698871.213417294, 1.0]], [0, [1174717.8033543206, 1.0]], [0, [293679.4508308395, 1.0]], [0, [73419.86541881574, 1.0]], [0, [18353.922908116285, 1.0]], [0, [2234.149559346, 1.0]], [0, [456.8860843492681, 1.0]], [0, [121.73296481579646, 1.0]], [0, [37.592000759258134, 1.0]], [0, [4.741387872229388, 1.0]], [0, [0.39118227236761394, 1.0]], [1, [8.598407322938337, 1.0]], [1, [0.49082014069082025, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [18795484.85366923]
bas 1, expnt(s) = [4698871.21341729]
bas 2, expnt(s) = [1174717.80335432]
bas 3, expnt(s) = [293679.45083084]
bas 4, expnt(s) = [73419.86541882]
bas 5, expnt(s) = [18353.92290812]
bas 6, expnt(s) = [2234.14955935]
bas 7, expnt(s) = [456.88608435]
bas 8, expnt(s) = [121.73296482]
bas 9, expnt(s) = [37.59200076]
bas 10, expnt(s) = [4.74138787]
bas 11, expnt(s) = [0.39118227]
bas 12, expnt(s) = [8.59840732]
bas 13, expnt(s) = [0.49082014]
CPU time:        40.63
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  0  1  1  0 42 43  0]
 [ 0  0  1  1  0 44 45  0]
 [ 0  0  1  1  0 46 47  0]
 [ 0  1  1  1  0 48 49  0]
 [ 0  1  1  1  0 50 51  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.87954849e+07 7.21199097e+05 4.69887121e+06 2.54982386e+05
 1.17471780e+06 9.01498871e+04 2.93679451e+05 3.18727983e+04
 7.34198654e+04 1.12687362e+04 1.83539229e+04 3.98393002e+03
 2.23414956e+03 8.21011435e+02 4.56886084e+02 2.49672651e+02
 1.21732965e+02 9.25915115e+01 3.75920008e+01 3.83562910e+01
 4.74138787e+00 8.11790823e+00 3.91182272e-01 1.24968167e+00
 8.59840732e+00 4.29543262e+01 4.90820141e-01 1.19849813e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.320013681520177
cond(S) = 56.39503878761206
E1 = -688.8291538672008  E_coul = 184.91322790979592
init E= -503.915925957405
    CPU time for initialize scf      0.03 sec, wall time      0.03 sec
  HOMO = -0.68093952030122  LUMO = 85.0592327356925
  mo_energy =
[-1.21650804e+02 -1.32813096e+01 -7.62174664e+00 -7.62174664e+00
 -7.62174664e+00 -1.65073941e+00 -6.80939520e-01 -6.80939520e-01
 -6.80939520e-01  8.50592327e+01  6.77221767e+02  3.93502619e+03
  2.96196498e+04  1.54738900e+05  6.64892040e+05  2.71962804e+06
  1.10459661e+07  4.65100872e+07]
E1 = -706.5821261848893  E_coul = 198.94283623513485
cycle= 1 E= -507.639289949754  delta_E= -3.72  |g|= 0.317  |ddm|= 0.301
    CPU time for cycle= 1      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.420496
diis-c [-0.17681662  1.        ]
  HOMO = -0.236352050657322  LUMO = 86.3922101488813
  mo_energy =
[-1.20262828e+02 -1.22532504e+01 -6.65325162e+00 -6.65325162e+00
 -6.65325162e+00 -1.16354799e+00 -2.36352051e-01 -2.36352051e-01
 -2.36352051e-01  8.63922101e+01  6.78592337e+02  3.93627781e+03
  2.96207386e+04  1.54739918e+05  6.64893028e+05  2.71962902e+06
  1.10459670e+07  4.65100881e+07]
E1 = -706.5506963312147  E_coul = 198.91097853728382
cycle= 2 E= -507.639717793931  delta_E= -0.000428  |g|= 0.00474  |ddm|= 0.0143
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00504129
diis-c [-2.53694797e-05 -5.05711177e-04  1.00050571e+00]
  HOMO = -0.23652722425941  LUMO = 86.3886921407733
  mo_energy =
[-1.20271467e+02 -1.22544390e+01 -6.65509245e+00 -6.65509245e+00
 -6.65509245e+00 -1.16361274e+00 -2.36527224e-01 -2.36527224e-01
 -2.36527224e-01  8.63886921e+01  6.78581754e+02  3.93626192e+03
  2.96207193e+04  1.54739898e+05  6.64893008e+05  2.71962900e+06
  1.10459670e+07  4.65100881e+07]
E1 = -706.5502561656941  E_coul = 198.91053826170094
cycle= 3 E= -507.639717903993  delta_E= -1.1e-07  |g|= 9.48e-05  |ddm|= 0.000202
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.000126765
diis-c [-3.95743472e-10  3.34155273e-05 -2.54637895e-02  1.02543037e+00]
  HOMO = -0.236529435700703  LUMO = 86.3886474841055
  mo_energy =
[-1.20271580e+02 -1.22544547e+01 -6.65511941e+00 -6.65511941e+00
 -6.65511941e+00 -1.16361340e+00 -2.36529436e-01 -2.36529436e-01
 -2.36529436e-01  8.63886475e+01  6.78581637e+02  3.93626177e+03
  2.96207192e+04  1.54739898e+05  6.64893008e+05  2.71962900e+06
  1.10459670e+07  4.65100881e+07]
E1 = -706.5502489281473  E_coul = 198.91053102411428
cycle= 4 E= -507.639717904033  delta_E= -3.98e-11  |g|= 3.74e-07  |ddm|= 3.44e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.5502489281473  E_coul = 198.91053102411428
  HOMO = -0.236529419400134  LUMO = 86.388647822149
  mo_energy =
[-1.20271579e+02 -1.22544546e+01 -6.65511925e+00 -6.65511925e+00
 -6.65511925e+00 -1.16361339e+00 -2.36529419e-01 -2.36529419e-01
 -2.36529419e-01  8.63886478e+01  6.78581638e+02  3.93626178e+03
  2.96207192e+04  1.54739898e+05  6.64893008e+05  2.71962900e+06
  1.10459670e+07  4.65100881e+07]
E1 = -706.550248965147  E_coul = 198.91053106111414
Extra cycle  E= -507.639717904033  delta_E= 1.71e-13  |g|= 6.45e-09  |ddm|= 1.64e-08
    CPU time for scf_cycle      0.10 sec, wall time      0.11 sec
exp = [1.87954849e+07 4.69887121e+06 1.17471780e+06 2.93679451e+05
 7.34198654e+04 1.83539229e+04 2.23414956e+03 4.56886084e+02
 1.21732965e+02 3.75920008e+01 4.74138787e+00 3.91182272e-01
 8.59840732e+00 4.90820141e-01]
E = -507.63971790403286
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="BFGS",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((14, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.6988712134173084e+06,1.1747178033543271e+06,2.9367945083858178e+05,7.3419865393677101e+04,1.8353927627435987e+04,2.2341424145819028e+03,4.5688904996449571e+02,1.2173317272260677e+02,3.7593061247508530e+01,4.7412722556720146e+00,3.9120358491841306e-01,8.5986297237246045e+00,4.9084868336327880e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "12s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:14:20 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  18795484.8537        1
[INPUT] 0    0    [1    /1   ]  4698871.21342        1
[INPUT] 0    0    [1    /1   ]  1174717.80335        1
[INPUT] 0    0    [1    /1   ]  293679.450831        1
[INPUT] 0    0    [1    /1   ]  73419.8654188        1
[INPUT] 0    0    [1    /1   ]  18353.9229081        1
[INPUT] 0    0    [1    /1   ]  2234.14955935        1
[INPUT] 0    0    [1    /1   ]  456.886084349        1
[INPUT] 0    0    [1    /1   ]  121.732964816        1
[INPUT] 0    0    [1    /1   ]  37.5920007593        1
[INPUT] 0    0    [1    /1   ]  4.74138787223        1
[INPUT] 0    0    [1    /1   ]  0.391182272368       1
[INPUT] 1    0    [1    /1   ]  8.59840732294        1
[INPUT] 1    0    [1    /1   ]  0.490820140691       1

nuclear repulsion = 0
number of shells = 14
number of NR pGTOs = 18
number of NR cGTOs = 18
basis = {'Ar': [[0, [18795484.853669234, 1.0]], [0, [4698871.213417294, 1.0]], [0, [1174717.8033543206, 1.0]], [0, [293679.4508308395, 1.0]], [0, [73419.86541881574, 1.0]], [0, [18353.922908116285, 1.0]], [0, [2234.149559346, 1.0]], [0, [456.8860843492681, 1.0]], [0, [121.73296481579646, 1.0]], [0, [37.592000759258134, 1.0]], [0, [4.741387872229388, 1.0]], [0, [0.39118227236761394, 1.0]], [1, [8.598407322938337, 1.0]], [1, [0.49082014069082025, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [18795484.85366923]
bas 1, expnt(s) = [4698871.21341729]
bas 2, expnt(s) = [1174717.80335432]
bas 3, expnt(s) = [293679.45083084]
bas 4, expnt(s) = [73419.86541882]
bas 5, expnt(s) = [18353.92290812]
bas 6, expnt(s) = [2234.14955935]
bas 7, expnt(s) = [456.88608435]
bas 8, expnt(s) = [121.73296482]
bas 9, expnt(s) = [37.59200076]
bas 10, expnt(s) = [4.74138787]
bas 11, expnt(s) = [0.39118227]
bas 12, expnt(s) = [8.59840732]
bas 13, expnt(s) = [0.49082014]
CPU time:        40.93
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  0  1  1  0 42 43  0]
 [ 0  0  1  1  0 44 45  0]
 [ 0  0  1  1  0 46 47  0]
 [ 0  1  1  1  0 48 49  0]
 [ 0  1  1  1  0 50 51  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.87954849e+07 7.21199097e+05 4.69887121e+06 2.54982386e+05
 1.17471780e+06 9.01498871e+04 2.93679451e+05 3.18727983e+04
 7.34198654e+04 1.12687362e+04 1.83539229e+04 3.98393002e+03
 2.23414956e+03 8.21011435e+02 4.56886084e+02 2.49672651e+02
 1.21732965e+02 9.25915115e+01 3.75920008e+01 3.83562910e+01
 4.74138787e+00 8.11790823e+00 3.91182272e-01 1.24968167e+00
 8.59840732e+00 4.29543262e+01 4.90820141e-01 1.19849813e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.320013681520177
cond(S) = 56.39503878761206
E1 = -688.8291538672008  E_coul = 184.91322790979592
init E= -503.915925957405
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.68093952030122  LUMO = 85.0592327356925
  mo_energy =
[-1.21650804e+02 -1.32813096e+01 -7.62174664e+00 -7.62174664e+00
 -7.62174664e+00 -1.65073941e+00 -6.80939520e-01 -6.80939520e-01
 -6.80939520e-01  8.50592327e+01  6.77221767e+02  3.93502619e+03
  2.96196498e+04  1.54738900e+05  6.64892040e+05  2.71962804e+06
  1.10459661e+07  4.65100872e+07]
E1 = -706.5821261848893  E_coul = 198.94283623513485
cycle= 1 E= -507.639289949754  delta_E= -3.72  |g|= 0.317  |ddm|= 0.301
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.420496
diis-c [-0.17681662  1.        ]
  HOMO = -0.236352050657322  LUMO = 86.3922101488813
  mo_energy =
[-1.20262828e+02 -1.22532504e+01 -6.65325162e+00 -6.65325162e+00
 -6.65325162e+00 -1.16354799e+00 -2.36352051e-01 -2.36352051e-01
 -2.36352051e-01  8.63922101e+01  6.78592337e+02  3.93627781e+03
  2.96207386e+04  1.54739918e+05  6.64893028e+05  2.71962902e+06
  1.10459670e+07  4.65100881e+07]
E1 = -706.5506963312147  E_coul = 198.91097853728382
cycle= 2 E= -507.639717793931  delta_E= -0.000428  |g|= 0.00474  |ddm|= 0.0143
    CPU time for cycle= 2      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.00504129
diis-c [-2.53694797e-05 -5.05711177e-04  1.00050571e+00]
  HOMO = -0.23652722425941  LUMO = 86.3886921407733
  mo_energy =
[-1.20271467e+02 -1.22544390e+01 -6.65509245e+00 -6.65509245e+00
 -6.65509245e+00 -1.16361274e+00 -2.36527224e-01 -2.36527224e-01
 -2.36527224e-01  8.63886921e+01  6.78581754e+02  3.93626192e+03
  2.96207193e+04  1.54739898e+05  6.64893008e+05  2.71962900e+06
  1.10459670e+07  4.65100881e+07]
E1 = -706.5502561656941  E_coul = 198.91053826170094
cycle= 3 E= -507.639717903993  delta_E= -1.1e-07  |g|= 9.48e-05  |ddm|= 0.000202
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.000126765
diis-c [-3.95743472e-10  3.34155273e-05 -2.54637895e-02  1.02543037e+00]
  HOMO = -0.236529435700703  LUMO = 86.3886474841055
  mo_energy =
[-1.20271580e+02 -1.22544547e+01 -6.65511941e+00 -6.65511941e+00
 -6.65511941e+00 -1.16361340e+00 -2.36529436e-01 -2.36529436e-01
 -2.36529436e-01  8.63886475e+01  6.78581637e+02  3.93626177e+03
  2.96207192e+04  1.54739898e+05  6.64893008e+05  2.71962900e+06
  1.10459670e+07  4.65100881e+07]
E1 = -706.5502489281473  E_coul = 198.91053102411428
cycle= 4 E= -507.639717904033  delta_E= -3.98e-11  |g|= 3.74e-07  |ddm|= 3.44e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.5502489281473  E_coul = 198.91053102411428
  HOMO = -0.236529419400134  LUMO = 86.388647822149
  mo_energy =
[-1.20271579e+02 -1.22544546e+01 -6.65511925e+00 -6.65511925e+00
 -6.65511925e+00 -1.16361339e+00 -2.36529419e-01 -2.36529419e-01
 -2.36529419e-01  8.63886478e+01  6.78581638e+02  3.93626178e+03
  2.96207192e+04  1.54739898e+05  6.64893008e+05  2.71962900e+06
  1.10459670e+07  4.65100881e+07]
E1 = -706.550248965147  E_coul = 198.91053106111414
Extra cycle  E= -507.639717904033  delta_E= 1.71e-13  |g|= 6.45e-09  |ddm|= 1.64e-08
    CPU time for scf_cycle      0.10 sec, wall time      0.11 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 56.39503878761206
E1 = -706.550248965147  E_coul = 198.91053106111414
init E= -507.639717904033
    CPU time for initialize scf      0.12 sec, wall time      0.12 sec
  HOMO = -0.236529419209507  LUMO = 86.3886478262749
  mo_energy =
[-1.20271579e+02 -1.22544546e+01 -6.65511924e+00 -6.65511924e+00
 -6.65511924e+00 -1.16361339e+00 -2.36529419e-01 -2.36529419e-01
 -2.36529419e-01  8.63886478e+01  6.78581638e+02  3.93626178e+03
  2.96207192e+04  1.54739898e+05  6.64893008e+05  2.71962900e+06
  1.10459670e+07  4.65100881e+07]
E1 = -706.5502489657076  E_coul = 198.91053106167462
cycle= 1 E= -507.639717904033  delta_E= -1.14e-13  |g|= 1.98e-10  |ddm|= 2.54e-10
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -706.5502489657076  E_coul = 198.91053106167462
  HOMO = -0.236529419206811  LUMO = 86.3886478263326
  mo_energy =
[-1.20271579e+02 -1.22544546e+01 -6.65511924e+00 -6.65511924e+00
 -6.65511924e+00 -1.16361339e+00 -2.36529419e-01 -2.36529419e-01
 -2.36529419e-01  8.63886478e+01  6.78581638e+02  3.93626178e+03
  2.96207192e+04  1.54739898e+05  6.64893008e+05  2.71962900e+06
  1.10459670e+07  4.65100881e+07]
E1 = -706.5502489657173  E_coul = 198.91053106168454
Extra cycle  E= -507.639717904033  delta_E= 2.27e-13  |g|= 1.22e-10  |ddm|= 4.56e-12
    CPU time for scf_cycle      0.19 sec, wall time      0.19 sec
exp = [1.87954849e+07 4.69887121e+06 1.17471780e+06 2.93679451e+05
 7.34198654e+04 1.83539229e+04 2.23414956e+03 4.56886084e+02
 1.21732965e+02 3.75920008e+01 4.74138787e+00 3.91182272e-01
 8.59840732e+00 4.90820141e-01]
grad_E = [-1.11297489e-13  1.80091984e-11  8.61883634e-12  1.05333525e-08
 -3.42062446e-08  6.42060282e-06 -9.68397475e-06  3.42617845e-06
  4.73137141e-06 -1.19853914e-05  7.15581699e-05 -4.48697345e-04
 -1.51389525e-04 -8.92381287e-04]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="BFGS",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((14, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.6988712134173084e+06,1.1747178033543271e+06,2.9367945083858178e+05,7.3419865393677101e+04,1.8353927627435987e+04,2.2341424145819028e+03,4.5688904996449571e+02,1.2173317272260677e+02,3.7593061247508530e+01,4.7412722556720146e+00,3.9120358491841306e-01,8.5986297237246045e+00,4.9084868336327880e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "12s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:14:23 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  18795484.8537        1
[INPUT] 0    0    [1    /1   ]  4698871.21342        1
[INPUT] 0    0    [1    /1   ]  1174717.80335        1
[INPUT] 0    0    [1    /1   ]  293679.450824        1
[INPUT] 0    0    [1    /1   ]  73419.8654413        1
[INPUT] 0    0    [1    /1   ]  18353.9186819        1
[INPUT] 0    0    [1    /1   ]  2234.15595758        1
[INPUT] 0    0    [1    /1   ]  456.883429558        1
[INPUT] 0    0    [1    /1   ]  121.732771359        1
[INPUT] 0    0    [1    /1   ]  37.5910730111        1
[INPUT] 0    0    [1    /1   ]  4.74143016199        1
[INPUT] 0    0    [1    /1   ]  0.391173430224       1
[INPUT] 1    0    [1    /1   ]  8.59833721132        1
[INPUT] 1    0    [1    /1   ]  0.490809056246       1

nuclear repulsion = 0
number of shells = 14
number of NR pGTOs = 18
number of NR cGTOs = 18
basis = {'Ar': [[0, [18795484.853669234, 1.0]], [0, [4698871.213417282, 1.0]], [0, [1174717.803354315, 1.0]], [0, [293679.45082390617, 1.0]], [0, [73419.86544132797, 1.0]], [0, [18353.918681859628, 1.0]], [0, [2234.155957583521, 1.0]], [0, [456.88342955750045, 1.0]], [0, [121.73277135935685, 1.0]], [0, [37.59107301109703, 1.0]], [0, [4.741430161989442, 1.0]], [0, [0.3911734302239607, 1.0]], [1, [8.598337211321393, 1.0]], [1, [0.4908090562458873, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [18795484.85366923]
bas 1, expnt(s) = [4698871.21341728]
bas 2, expnt(s) = [1174717.80335431]
bas 3, expnt(s) = [293679.45082391]
bas 4, expnt(s) = [73419.86544133]
bas 5, expnt(s) = [18353.91868186]
bas 6, expnt(s) = [2234.15595758]
bas 7, expnt(s) = [456.88342956]
bas 8, expnt(s) = [121.73277136]
bas 9, expnt(s) = [37.59107301]
bas 10, expnt(s) = [4.74143016]
bas 11, expnt(s) = [0.39117343]
bas 12, expnt(s) = [8.59833721]
bas 13, expnt(s) = [0.49080906]
CPU time:        43.99
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  0  1  1  0 42 43  0]
 [ 0  0  1  1  0 44 45  0]
 [ 0  0  1  1  0 46 47  0]
 [ 0  1  1  1  0 48 49  0]
 [ 0  1  1  1  0 50 51  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.87954849e+07 7.21199097e+05 4.69887121e+06 2.54982386e+05
 1.17471780e+06 9.01498871e+04 2.93679451e+05 3.18727983e+04
 7.34198654e+04 1.12687362e+04 1.83539187e+04 3.98392934e+03
 2.23415596e+03 8.21013199e+02 4.56883430e+02 2.49671563e+02
 1.21732771e+02 9.25914012e+01 3.75910730e+01 3.83555810e+01
 4.74143016e+00 8.11796254e+00 3.91173430e-01 1.24966048e+00
 8.59833721e+00 4.29538884e+01 4.90809056e-01 1.19846430e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.32002862047086
cond(S) = 56.39482229411226
E1 = -688.8284204202516  E_coul = 184.91244911648397
init E= -503.915971303768
    CPU time for initialize scf      0.03 sec, wall time      0.03 sec
  HOMO = -0.680956207604365  LUMO = 85.0573064682886
  mo_energy =
[-1.21650914e+02 -1.32813666e+01 -7.62179865e+00 -7.62179865e+00
 -7.62179865e+00 -1.65075161e+00 -6.80956208e-01 -6.80956208e-01
 -6.80956208e-01  8.50573065e+01  6.77215639e+02  3.93502112e+03
  2.96196540e+04  1.54738899e+05  6.64892036e+05  2.71962804e+06
  1.10459661e+07  4.65100872e+07]
E1 = -706.5810777229783  E_coul = 198.94178771960378
cycle= 1 E= -507.639290003375  delta_E= -3.72  |g|= 0.317  |ddm|= 0.301
    CPU time for cycle= 1      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.420492
diis-c [-0.17681385  1.        ]
  HOMO = -0.236381836697526  LUMO = 86.3902599666568
  mo_energy =
[-1.20262960e+02 -1.22533236e+01 -6.65332015e+00 -6.65332015e+00
 -6.65332015e+00 -1.16357224e+00 -2.36381837e-01 -2.36381837e-01
 -2.36381837e-01  8.63902600e+01  6.78586184e+02  3.93627272e+03
  2.96207428e+04  1.54739916e+05  6.64893023e+05  2.71962901e+06
  1.10459670e+07  4.65100881e+07]
E1 = -706.5496474693306  E_coul = 198.90992962592154
cycle= 2 E= -507.639717843409  delta_E= -0.000428  |g|= 0.00474  |ddm|= 0.0143
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00504126
diis-c [-2.53691539e-05 -5.05362615e-04  1.00050536e+00]
  HOMO = -0.236557005468142  LUMO = 86.3867419227911
  mo_energy =
[-1.20271599e+02 -1.22545122e+01 -6.65516100e+00 -6.65516100e+00
 -6.65516100e+00 -1.16363700e+00 -2.36557005e-01 -2.36557005e-01
 -2.36557005e-01  8.63867419e+01  6.78575600e+02  3.93625683e+03
  2.96207235e+04  1.54739896e+05  6.64893003e+05  2.71962899e+06
  1.10459670e+07  4.65100881e+07]
E1 = -706.54920729605  E_coul = 198.90948934257975
cycle= 3 E= -507.63971795347  delta_E= -1.1e-07  |g|= 9.48e-05  |ddm|= 0.000202
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.000126767
diis-c [-3.95766738e-10  3.34126253e-05 -2.54642957e-02  1.02543088e+00]
  HOMO = -0.236559216906363  LUMO = 86.3866972640382
  mo_energy =
[-1.20271712e+02 -1.22545280e+01 -6.65518796e+00 -6.65518796e+00
 -6.65518796e+00 -1.16363765e+00 -2.36559217e-01 -2.36559217e-01
 -2.36559217e-01  8.63866973e+01  6.78575483e+02  3.93625669e+03
  2.96207234e+04  1.54739896e+05  6.64893003e+05  2.71962899e+06
  1.10459670e+07  4.65100881e+07]
E1 = -706.5492000581547  E_coul = 198.90948210464458
cycle= 4 E= -507.63971795351  delta_E= -3.99e-11  |g|= 3.74e-07  |ddm|= 3.44e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.5492000581547  E_coul = 198.90948210464458
  HOMO = -0.236559200605483  LUMO = 86.3866976020997
  mo_energy =
[-1.20271711e+02 -1.22545279e+01 -6.65518780e+00 -6.65518780e+00
 -6.65518780e+00 -1.16363765e+00 -2.36559201e-01 -2.36559201e-01
 -2.36559201e-01  8.63866976e+01  6.78575484e+02  3.93625669e+03
  2.96207234e+04  1.54739896e+05  6.64893003e+05  2.71962899e+06
  1.10459670e+07  4.65100881e+07]
E1 = -706.5492000951566  E_coul = 198.9094821416465
Extra cycle  E= -507.63971795351  delta_E= 5.68e-14  |g|= 6.44e-09  |ddm|= 1.64e-08
    CPU time for scf_cycle      0.10 sec, wall time      0.11 sec
exp = [1.87954849e+07 4.69887121e+06 1.17471780e+06 2.93679451e+05
 7.34198654e+04 1.83539187e+04 2.23415596e+03 4.56883430e+02
 1.21732771e+02 3.75910730e+01 4.74143016e+00 3.91173430e-01
 8.59833721e+00 4.90809056e-01]
E = -507.6397179535101
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="BFGS",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((14, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.6988712134173084e+06,1.1747178033543271e+06,2.9367945083858178e+05,7.3419865393677101e+04,1.8353927627435987e+04,2.2341424145819028e+03,4.5688904996449571e+02,1.2173317272260677e+02,3.7593061247508530e+01,4.7412722556720146e+00,3.9120358491841306e-01,8.5986297237246045e+00,4.9084868336327880e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "12s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:14:23 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  18795484.8537        1
[INPUT] 0    0    [1    /1   ]  4698871.21342        1
[INPUT] 0    0    [1    /1   ]  1174717.80335        1
[INPUT] 0    0    [1    /1   ]  293679.450824        1
[INPUT] 0    0    [1    /1   ]  73419.8654413        1
[INPUT] 0    0    [1    /1   ]  18353.9186819        1
[INPUT] 0    0    [1    /1   ]  2234.15595758        1
[INPUT] 0    0    [1    /1   ]  456.883429558        1
[INPUT] 0    0    [1    /1   ]  121.732771359        1
[INPUT] 0    0    [1    /1   ]  37.5910730111        1
[INPUT] 0    0    [1    /1   ]  4.74143016199        1
[INPUT] 0    0    [1    /1   ]  0.391173430224       1
[INPUT] 1    0    [1    /1   ]  8.59833721132        1
[INPUT] 1    0    [1    /1   ]  0.490809056246       1

nuclear repulsion = 0
number of shells = 14
number of NR pGTOs = 18
number of NR cGTOs = 18
basis = {'Ar': [[0, [18795484.853669234, 1.0]], [0, [4698871.213417282, 1.0]], [0, [1174717.803354315, 1.0]], [0, [293679.45082390617, 1.0]], [0, [73419.86544132797, 1.0]], [0, [18353.918681859628, 1.0]], [0, [2234.155957583521, 1.0]], [0, [456.88342955750045, 1.0]], [0, [121.73277135935685, 1.0]], [0, [37.59107301109703, 1.0]], [0, [4.741430161989442, 1.0]], [0, [0.3911734302239607, 1.0]], [1, [8.598337211321393, 1.0]], [1, [0.4908090562458873, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [18795484.85366923]
bas 1, expnt(s) = [4698871.21341728]
bas 2, expnt(s) = [1174717.80335431]
bas 3, expnt(s) = [293679.45082391]
bas 4, expnt(s) = [73419.86544133]
bas 5, expnt(s) = [18353.91868186]
bas 6, expnt(s) = [2234.15595758]
bas 7, expnt(s) = [456.88342956]
bas 8, expnt(s) = [121.73277136]
bas 9, expnt(s) = [37.59107301]
bas 10, expnt(s) = [4.74143016]
bas 11, expnt(s) = [0.39117343]
bas 12, expnt(s) = [8.59833721]
bas 13, expnt(s) = [0.49080906]
CPU time:        44.32
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  0  1  1  0 42 43  0]
 [ 0  0  1  1  0 44 45  0]
 [ 0  0  1  1  0 46 47  0]
 [ 0  1  1  1  0 48 49  0]
 [ 0  1  1  1  0 50 51  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.87954849e+07 7.21199097e+05 4.69887121e+06 2.54982386e+05
 1.17471780e+06 9.01498871e+04 2.93679451e+05 3.18727983e+04
 7.34198654e+04 1.12687362e+04 1.83539187e+04 3.98392934e+03
 2.23415596e+03 8.21013199e+02 4.56883430e+02 2.49671563e+02
 1.21732771e+02 9.25914012e+01 3.75910730e+01 3.83555810e+01
 4.74143016e+00 8.11796254e+00 3.91173430e-01 1.24966048e+00
 8.59833721e+00 4.29538884e+01 4.90809056e-01 1.19846430e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.32002862047086
cond(S) = 56.39482229411226
E1 = -688.8284204202516  E_coul = 184.91244911648397
init E= -503.915971303768
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.680956207604365  LUMO = 85.0573064682886
  mo_energy =
[-1.21650914e+02 -1.32813666e+01 -7.62179865e+00 -7.62179865e+00
 -7.62179865e+00 -1.65075161e+00 -6.80956208e-01 -6.80956208e-01
 -6.80956208e-01  8.50573065e+01  6.77215639e+02  3.93502112e+03
  2.96196540e+04  1.54738899e+05  6.64892036e+05  2.71962804e+06
  1.10459661e+07  4.65100872e+07]
E1 = -706.5810777229783  E_coul = 198.94178771960378
cycle= 1 E= -507.639290003375  delta_E= -3.72  |g|= 0.317  |ddm|= 0.301
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.420492
diis-c [-0.17681385  1.        ]
  HOMO = -0.236381836697526  LUMO = 86.3902599666568
  mo_energy =
[-1.20262960e+02 -1.22533236e+01 -6.65332015e+00 -6.65332015e+00
 -6.65332015e+00 -1.16357224e+00 -2.36381837e-01 -2.36381837e-01
 -2.36381837e-01  8.63902600e+01  6.78586184e+02  3.93627272e+03
  2.96207428e+04  1.54739916e+05  6.64893023e+05  2.71962901e+06
  1.10459670e+07  4.65100881e+07]
E1 = -706.5496474693306  E_coul = 198.90992962592154
cycle= 2 E= -507.639717843409  delta_E= -0.000428  |g|= 0.00474  |ddm|= 0.0143
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00504126
diis-c [-2.53691539e-05 -5.05362615e-04  1.00050536e+00]
  HOMO = -0.236557005468142  LUMO = 86.3867419227911
  mo_energy =
[-1.20271599e+02 -1.22545122e+01 -6.65516100e+00 -6.65516100e+00
 -6.65516100e+00 -1.16363700e+00 -2.36557005e-01 -2.36557005e-01
 -2.36557005e-01  8.63867419e+01  6.78575600e+02  3.93625683e+03
  2.96207235e+04  1.54739896e+05  6.64893003e+05  2.71962899e+06
  1.10459670e+07  4.65100881e+07]
E1 = -706.54920729605  E_coul = 198.90948934257975
cycle= 3 E= -507.63971795347  delta_E= -1.1e-07  |g|= 9.48e-05  |ddm|= 0.000202
    CPU time for cycle= 3      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.000126767
diis-c [-3.95766738e-10  3.34126253e-05 -2.54642957e-02  1.02543088e+00]
  HOMO = -0.236559216906363  LUMO = 86.3866972640382
  mo_energy =
[-1.20271712e+02 -1.22545280e+01 -6.65518796e+00 -6.65518796e+00
 -6.65518796e+00 -1.16363765e+00 -2.36559217e-01 -2.36559217e-01
 -2.36559217e-01  8.63866973e+01  6.78575483e+02  3.93625669e+03
  2.96207234e+04  1.54739896e+05  6.64893003e+05  2.71962899e+06
  1.10459670e+07  4.65100881e+07]
E1 = -706.5492000581547  E_coul = 198.90948210464458
cycle= 4 E= -507.63971795351  delta_E= -3.99e-11  |g|= 3.74e-07  |ddm|= 3.44e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.5492000581547  E_coul = 198.90948210464458
  HOMO = -0.236559200605483  LUMO = 86.3866976020997
  mo_energy =
[-1.20271711e+02 -1.22545279e+01 -6.65518780e+00 -6.65518780e+00
 -6.65518780e+00 -1.16363765e+00 -2.36559201e-01 -2.36559201e-01
 -2.36559201e-01  8.63866976e+01  6.78575484e+02  3.93625669e+03
  2.96207234e+04  1.54739896e+05  6.64893003e+05  2.71962899e+06
  1.10459670e+07  4.65100881e+07]
E1 = -706.5492000951566  E_coul = 198.9094821416465
Extra cycle  E= -507.63971795351  delta_E= 5.68e-14  |g|= 6.44e-09  |ddm|= 1.64e-08
    CPU time for scf_cycle      0.10 sec, wall time      0.10 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 56.39482229411226
E1 = -706.5492000951566  E_coul = 198.9094821416465
init E= -507.63971795351
    CPU time for initialize scf      0.12 sec, wall time      0.12 sec
  HOMO = -0.236559200414844  LUMO = 86.3866976062258
  mo_energy =
[-1.20271711e+02 -1.22545279e+01 -6.65518780e+00 -6.65518780e+00
 -6.65518780e+00 -1.16363765e+00 -2.36559200e-01 -2.36559200e-01
 -2.36559200e-01  8.63866976e+01  6.78575484e+02  3.93625669e+03
  2.96207234e+04  1.54739896e+05  6.64893003e+05  2.71962899e+06
  1.10459670e+07  4.65100881e+07]
E1 = -706.5492000957175  E_coul = 198.90948214220708
cycle= 1 E= -507.63971795351  delta_E= -3.41e-13  |g|= 2.33e-10  |ddm|= 2.54e-10
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -706.5492000957175  E_coul = 198.90948214220708
  HOMO = -0.236559200412149  LUMO = 86.3866976062866
  mo_energy =
[-1.20271711e+02 -1.22545279e+01 -6.65518780e+00 -6.65518780e+00
 -6.65518780e+00 -1.16363765e+00 -2.36559200e-01 -2.36559200e-01
 -2.36559200e-01  8.63866976e+01  6.78575484e+02  3.93625669e+03
  2.96207234e+04  1.54739896e+05  6.64893003e+05  2.71962899e+06
  1.10459670e+07  4.65100881e+07]
E1 = -706.5492000957265  E_coul = 198.90948214221638
Extra cycle  E= -507.63971795351  delta_E= 2.84e-13  |g|= 2.13e-10  |ddm|= 4.47e-12
    CPU time for scf_cycle      0.19 sec, wall time      0.19 sec
exp = [1.87954849e+07 4.69887121e+06 1.17471780e+06 2.93679451e+05
 7.34198654e+04 1.83539187e+04 2.23415596e+03 4.56883430e+02
 1.21732771e+02 3.75910730e+01 4.74143016e+00 3.91173430e-01
 8.59833721e+00 4.90809056e-01]
grad_E = [-1.11313267e-13  1.80081958e-11  8.61049540e-12  1.05327809e-08
 -3.42088366e-08  6.42020635e-06 -9.65092984e-06  2.88778649e-06
  8.70849361e-06 -2.39532567e-05  9.58411658e-05 -6.25875513e-04
 -1.99972065e-04 -1.25752841e-03]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="BFGS",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((14, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.6988712134173084e+06,1.1747178033543271e+06,2.9367945083858178e+05,7.3419865393677101e+04,1.8353927627435987e+04,2.2341424145819028e+03,4.5688904996449571e+02,1.2173317272260677e+02,3.7593061247508530e+01,4.7412722556720146e+00,3.9120358491841306e-01,8.5986297237246045e+00,4.9084868336327880e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "12s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:14:26 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  18795484.8537        1
[INPUT] 0    0    [1    /1   ]  4698871.21342        1
[INPUT] 0    0    [1    /1   ]  1174717.80335        1
[INPUT] 0    0    [1    /1   ]  293679.450811        1
[INPUT] 0    0    [1    /1   ]  73419.8654819        1
[INPUT] 0    0    [1    /1   ]  18353.9110743        1
[INPUT] 0    0    [1    /1   ]  2234.16747472        1
[INPUT] 0    0    [1    /1   ]  456.878651999        1
[INPUT] 0    0    [1    /1   ]  121.732414035        1
[INPUT] 0    0    [1    /1   ]  37.5894303704        1
[INPUT] 0    0    [1    /1   ]  4.74147684382        1
[INPUT] 0    0    [1    /1   ]  0.391164177355       1
[INPUT] 1    0    [1    /1   ]  8.59827057116        1
[INPUT] 1    0    [1    /1   ]  0.490797906825       1

nuclear repulsion = 0
number of shells = 14
number of NR pGTOs = 18
number of NR cGTOs = 18
basis = {'Ar': [[0, [18795484.853669234, 1.0]], [0, [4698871.213417261, 1.0]], [0, [1174717.8033543047, 1.0]], [0, [293679.45081142575, 1.0]], [0, [73419.86548185135, 1.0]], [0, [18353.911074346062, 1.0]], [0, [2234.167474718042, 1.0]], [0, [456.8786519988953, 1.0]], [0, [121.73241403464326, 1.0]], [0, [37.58943037037954, 1.0]], [0, [4.741476843818374, 1.0]], [0, [0.3911641773545898, 1.0]], [1, [8.59827057115931, 1.0]], [1, [0.4907979068249625, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [18795484.85366923]
bas 1, expnt(s) = [4698871.21341726]
bas 2, expnt(s) = [1174717.8033543]
bas 3, expnt(s) = [293679.45081143]
bas 4, expnt(s) = [73419.86548185]
bas 5, expnt(s) = [18353.91107435]
bas 6, expnt(s) = [2234.16747472]
bas 7, expnt(s) = [456.878652]
bas 8, expnt(s) = [121.73241403]
bas 9, expnt(s) = [37.58943037]
bas 10, expnt(s) = [4.74147684]
bas 11, expnt(s) = [0.39116418]
bas 12, expnt(s) = [8.59827057]
bas 13, expnt(s) = [0.49079791]
CPU time:        47.35
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  0  1  1  0 42 43  0]
 [ 0  0  1  1  0 44 45  0]
 [ 0  0  1  1  0 46 47  0]
 [ 0  1  1  1  0 48 49  0]
 [ 0  1  1  1  0 50 51  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.87954849e+07 7.21199097e+05 4.69887121e+06 2.54982386e+05
 1.17471780e+06 9.01498871e+04 2.93679451e+05 3.18727983e+04
 7.34198655e+04 1.12687362e+04 1.83539111e+04 3.98392810e+03
 2.23416747e+03 8.21016373e+02 4.56878652e+02 2.49669605e+02
 1.21732414e+02 9.25911973e+01 3.75894304e+01 3.83543240e+01
 4.74147684e+00 8.11802248e+00 3.91164177e-01 1.24963831e+00
 8.59827057e+00 4.29534722e+01 4.90797907e-01 1.19843027e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.32004366150123
cond(S) = 56.39443109826986
E1 = -688.8277505821378  E_coul = 184.91167459597872
init E= -503.916075986159
    CPU time for initialize scf      0.02 sec, wall time      0.03 sec
  HOMO = -0.680973220416238  LUMO = 85.0538614743248
  mo_energy =
[-1.21651026e+02 -1.32814184e+01 -7.62185057e+00 -7.62185057e+00
 -7.62185057e+00 -1.65076346e+00 -6.80973220e-01 -6.80973220e-01
 -6.80973220e-01  8.50538615e+01  6.77204684e+02  3.93501210e+03
  2.96196617e+04  1.54738895e+05  6.64892027e+05  2.71962803e+06
  1.10459661e+07  4.65100871e+07]
E1 = -706.5800140715019  E_coul = 198.94072400238574
cycle= 1 E= -507.639290069116  delta_E= -3.72  |g|= 0.317  |ddm|= 0.301
    CPU time for cycle= 1      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.420487
diis-c [-0.17680959  1.        ]
  HOMO = -0.236412081794356  LUMO = 86.3867857645169
  mo_energy =
[-1.20263100e+02 -1.22533925e+01 -6.65338954e+00 -6.65338954e+00
 -6.65338954e+00 -1.16359636e+00 -2.36412082e-01 -2.36412082e-01
 -2.36412082e-01  8.63867858e+01  6.78575195e+02  3.93626366e+03
  2.96207504e+04  1.54739913e+05  6.64893015e+05  2.71962900e+06
  1.10459670e+07  4.65100881e+07]
E1 = -706.5485823499625  E_coul = 198.908864430458
cycle= 2 E= -507.639717919505  delta_E= -0.000428  |g|= 0.00474  |ddm|= 0.0143
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00504133
diis-c [-2.53700432e-05 -5.04803980e-04  1.00050480e+00]
  HOMO = -0.236587251849455  LUMO = 86.3832675755275
  mo_energy =
[-1.20271739e+02 -1.22545812e+01 -6.65523047e+00 -6.65523047e+00
 -6.65523047e+00 -1.16366111e+00 -2.36587252e-01 -2.36587252e-01
 -2.36587252e-01  8.63832676e+01  6.78564610e+02  3.93624777e+03
  2.96207311e+04  1.54739893e+05  6.64892994e+05  2.71962898e+06
  1.10459670e+07  4.65100881e+07]
E1 = -706.5481421512922  E_coul = 198.90842412172276
cycle= 3 E= -507.639718029569  delta_E= -1.1e-07  |g|= 9.48e-05  |ddm|= 0.000202
    CPU time for cycle= 3      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.000126773
diis-c [-3.95811379e-10  3.34083838e-05 -2.54650984e-02  1.02543169e+00]
  HOMO = -0.236589463412906  LUMO = 86.3832229121692
  mo_energy =
[-1.20271853e+02 -1.22545969e+01 -6.65525743e+00 -6.65525743e+00
 -6.65525743e+00 -1.16366177e+00 -2.36589463e-01 -2.36589463e-01
 -2.36589463e-01  8.63832229e+01  6.78564493e+02  3.93624762e+03
  2.96207310e+04  1.54739893e+05  6.64892994e+05  2.71962898e+06
  1.10459670e+07  4.65100881e+07]
E1 = -706.5481349126126  E_coul = 198.90841688300327
cycle= 4 E= -507.639718029609  delta_E= -3.99e-11  |g|= 3.74e-07  |ddm|= 3.45e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.5481349126126  E_coul = 198.90841688300327
  HOMO = -0.236589447110791  LUMO = 86.3832232502601
  mo_energy =
[-1.20271852e+02 -1.22545968e+01 -6.65525727e+00 -6.65525727e+00
 -6.65525727e+00 -1.16366176e+00 -2.36589447e-01 -2.36589447e-01
 -2.36589447e-01  8.63832233e+01  6.78564494e+02  3.93624763e+03
  2.96207310e+04  1.54739893e+05  6.64892994e+05  2.71962898e+06
  1.10459670e+07  4.65100881e+07]
E1 = -706.5481349496189  E_coul = 198.90841692000964
Extra cycle  E= -507.639718029609  delta_E= 5.68e-14  |g|= 6.45e-09  |ddm|= 1.64e-08
    CPU time for scf_cycle      0.10 sec, wall time      0.10 sec
exp = [1.87954849e+07 4.69887121e+06 1.17471780e+06 2.93679451e+05
 7.34198655e+04 1.83539111e+04 2.23416747e+03 4.56878652e+02
 1.21732414e+02 3.75894304e+01 4.74147684e+00 3.91164177e-01
 8.59827057e+00 4.90797907e-01]
E = -507.63971802960924
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="BFGS",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((14, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.6988712134173084e+06,1.1747178033543271e+06,2.9367945083858178e+05,7.3419865393677101e+04,1.8353927627435987e+04,2.2341424145819028e+03,4.5688904996449571e+02,1.2173317272260677e+02,3.7593061247508530e+01,4.7412722556720146e+00,3.9120358491841306e-01,8.5986297237246045e+00,4.9084868336327880e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "12s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:14:26 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  18795484.8537        1
[INPUT] 0    0    [1    /1   ]  4698871.21342        1
[INPUT] 0    0    [1    /1   ]  1174717.80335        1
[INPUT] 0    0    [1    /1   ]  293679.450811        1
[INPUT] 0    0    [1    /1   ]  73419.8654819        1
[INPUT] 0    0    [1    /1   ]  18353.9110743        1
[INPUT] 0    0    [1    /1   ]  2234.16747472        1
[INPUT] 0    0    [1    /1   ]  456.878651999        1
[INPUT] 0    0    [1    /1   ]  121.732414035        1
[INPUT] 0    0    [1    /1   ]  37.5894303704        1
[INPUT] 0    0    [1    /1   ]  4.74147684382        1
[INPUT] 0    0    [1    /1   ]  0.391164177355       1
[INPUT] 1    0    [1    /1   ]  8.59827057116        1
[INPUT] 1    0    [1    /1   ]  0.490797906825       1

nuclear repulsion = 0
number of shells = 14
number of NR pGTOs = 18
number of NR cGTOs = 18
basis = {'Ar': [[0, [18795484.853669234, 1.0]], [0, [4698871.213417261, 1.0]], [0, [1174717.8033543047, 1.0]], [0, [293679.45081142575, 1.0]], [0, [73419.86548185135, 1.0]], [0, [18353.911074346062, 1.0]], [0, [2234.167474718042, 1.0]], [0, [456.8786519988953, 1.0]], [0, [121.73241403464326, 1.0]], [0, [37.58943037037954, 1.0]], [0, [4.741476843818374, 1.0]], [0, [0.3911641773545898, 1.0]], [1, [8.59827057115931, 1.0]], [1, [0.4907979068249625, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [18795484.85366923]
bas 1, expnt(s) = [4698871.21341726]
bas 2, expnt(s) = [1174717.8033543]
bas 3, expnt(s) = [293679.45081143]
bas 4, expnt(s) = [73419.86548185]
bas 5, expnt(s) = [18353.91107435]
bas 6, expnt(s) = [2234.16747472]
bas 7, expnt(s) = [456.878652]
bas 8, expnt(s) = [121.73241403]
bas 9, expnt(s) = [37.58943037]
bas 10, expnt(s) = [4.74147684]
bas 11, expnt(s) = [0.39116418]
bas 12, expnt(s) = [8.59827057]
bas 13, expnt(s) = [0.49079791]
CPU time:        47.68
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  0  1  1  0 42 43  0]
 [ 0  0  1  1  0 44 45  0]
 [ 0  0  1  1  0 46 47  0]
 [ 0  1  1  1  0 48 49  0]
 [ 0  1  1  1  0 50 51  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.87954849e+07 7.21199097e+05 4.69887121e+06 2.54982386e+05
 1.17471780e+06 9.01498871e+04 2.93679451e+05 3.18727983e+04
 7.34198655e+04 1.12687362e+04 1.83539111e+04 3.98392810e+03
 2.23416747e+03 8.21016373e+02 4.56878652e+02 2.49669605e+02
 1.21732414e+02 9.25911973e+01 3.75894304e+01 3.83543240e+01
 4.74147684e+00 8.11802248e+00 3.91164177e-01 1.24963831e+00
 8.59827057e+00 4.29534722e+01 4.90797907e-01 1.19843027e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.32004366150123
cond(S) = 56.39443109826986
E1 = -688.8277505821378  E_coul = 184.91167459597872
init E= -503.916075986159
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.680973220416238  LUMO = 85.0538614743248
  mo_energy =
[-1.21651026e+02 -1.32814184e+01 -7.62185057e+00 -7.62185057e+00
 -7.62185057e+00 -1.65076346e+00 -6.80973220e-01 -6.80973220e-01
 -6.80973220e-01  8.50538615e+01  6.77204684e+02  3.93501210e+03
  2.96196617e+04  1.54738895e+05  6.64892027e+05  2.71962803e+06
  1.10459661e+07  4.65100871e+07]
E1 = -706.5800140715019  E_coul = 198.94072400238574
cycle= 1 E= -507.639290069116  delta_E= -3.72  |g|= 0.317  |ddm|= 0.301
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.420487
diis-c [-0.17680959  1.        ]
  HOMO = -0.236412081794356  LUMO = 86.3867857645169
  mo_energy =
[-1.20263100e+02 -1.22533925e+01 -6.65338954e+00 -6.65338954e+00
 -6.65338954e+00 -1.16359636e+00 -2.36412082e-01 -2.36412082e-01
 -2.36412082e-01  8.63867858e+01  6.78575195e+02  3.93626366e+03
  2.96207504e+04  1.54739913e+05  6.64893015e+05  2.71962900e+06
  1.10459670e+07  4.65100881e+07]
E1 = -706.5485823499625  E_coul = 198.908864430458
cycle= 2 E= -507.639717919505  delta_E= -0.000428  |g|= 0.00474  |ddm|= 0.0143
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00504133
diis-c [-2.53700432e-05 -5.04803980e-04  1.00050480e+00]
  HOMO = -0.236587251849455  LUMO = 86.3832675755275
  mo_energy =
[-1.20271739e+02 -1.22545812e+01 -6.65523047e+00 -6.65523047e+00
 -6.65523047e+00 -1.16366111e+00 -2.36587252e-01 -2.36587252e-01
 -2.36587252e-01  8.63832676e+01  6.78564610e+02  3.93624777e+03
  2.96207311e+04  1.54739893e+05  6.64892994e+05  2.71962898e+06
  1.10459670e+07  4.65100881e+07]
E1 = -706.5481421512922  E_coul = 198.90842412172276
cycle= 3 E= -507.639718029569  delta_E= -1.1e-07  |g|= 9.48e-05  |ddm|= 0.000202
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.000126773
diis-c [-3.95811379e-10  3.34083838e-05 -2.54650984e-02  1.02543169e+00]
  HOMO = -0.236589463412906  LUMO = 86.3832229121692
  mo_energy =
[-1.20271853e+02 -1.22545969e+01 -6.65525743e+00 -6.65525743e+00
 -6.65525743e+00 -1.16366177e+00 -2.36589463e-01 -2.36589463e-01
 -2.36589463e-01  8.63832229e+01  6.78564493e+02  3.93624762e+03
  2.96207310e+04  1.54739893e+05  6.64892994e+05  2.71962898e+06
  1.10459670e+07  4.65100881e+07]
E1 = -706.5481349126126  E_coul = 198.90841688300327
cycle= 4 E= -507.639718029609  delta_E= -3.99e-11  |g|= 3.74e-07  |ddm|= 3.45e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.5481349126126  E_coul = 198.90841688300327
  HOMO = -0.236589447110791  LUMO = 86.3832232502601
  mo_energy =
[-1.20271852e+02 -1.22545968e+01 -6.65525727e+00 -6.65525727e+00
 -6.65525727e+00 -1.16366176e+00 -2.36589447e-01 -2.36589447e-01
 -2.36589447e-01  8.63832233e+01  6.78564494e+02  3.93624763e+03
  2.96207310e+04  1.54739893e+05  6.64892994e+05  2.71962898e+06
  1.10459670e+07  4.65100881e+07]
E1 = -706.5481349496189  E_coul = 198.90841692000964
Extra cycle  E= -507.639718029609  delta_E= 5.68e-14  |g|= 6.45e-09  |ddm|= 1.64e-08
    CPU time for scf_cycle      0.10 sec, wall time      0.10 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 56.39443109826986
E1 = -706.5481349496189  E_coul = 198.90841692000964
init E= -507.639718029609
    CPU time for initialize scf      0.12 sec, wall time      0.12 sec
  HOMO = -0.236589446920138  LUMO = 86.3832232543896
  mo_energy =
[-1.20271852e+02 -1.22545968e+01 -6.65525727e+00 -6.65525727e+00
 -6.65525727e+00 -1.16366176e+00 -2.36589447e-01 -2.36589447e-01
 -2.36589447e-01  8.63832233e+01  6.78564494e+02  3.93624763e+03
  2.96207310e+04  1.54739893e+05  6.64892994e+05  2.71962898e+06
  1.10459670e+07  4.65100881e+07]
E1 = -706.5481349501798  E_coul = 198.90841692056986
cycle= 1 E= -507.63971802961  delta_E= -7.39e-13  |g|= 1.5e-10  |ddm|= 2.54e-10
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -706.5481349501798  E_coul = 198.90841692056986
  HOMO = -0.236589446917441  LUMO = 86.3832232544488
  mo_energy =
[-1.20271852e+02 -1.22545968e+01 -6.65525727e+00 -6.65525727e+00
 -6.65525727e+00 -1.16366176e+00 -2.36589447e-01 -2.36589447e-01
 -2.36589447e-01  8.63832233e+01  6.78564494e+02  3.93624763e+03
  2.96207310e+04  1.54739893e+05  6.64892994e+05  2.71962898e+06
  1.10459670e+07  4.65100881e+07]
E1 = -706.5481349501886  E_coul = 198.9084169205794
Extra cycle  E= -507.639718029609  delta_E= 7.96e-13  |g|= 2.76e-10  |ddm|= 4.56e-12
    CPU time for scf_cycle      0.19 sec, wall time      0.19 sec
exp = [1.87954849e+07 4.69887121e+06 1.17471780e+06 2.93679451e+05
 7.34198655e+04 1.83539111e+04 2.23416747e+03 4.56878652e+02
 1.21732414e+02 3.75894304e+01 4.74147684e+00 3.91164177e-01
 8.59827057e+00 4.90797907e-01]
grad_E = [-1.11341416e-13  1.80063982e-11  8.59559243e-12  1.05317560e-08
 -3.42134547e-08  6.41949591e-06 -9.59198596e-06  1.93166866e-06
  1.57818883e-05 -4.52136073e-05  1.19651843e-04 -8.05254349e-04
 -2.46791674e-04 -1.62985754e-03]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="BFGS",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((14, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.6988712134173084e+06,1.1747178033543271e+06,2.9367945083858178e+05,7.3419865393677101e+04,1.8353927627435987e+04,2.2341424145819028e+03,4.5688904996449571e+02,1.2173317272260677e+02,3.7593061247508530e+01,4.7412722556720146e+00,3.9120358491841306e-01,8.5986297237246045e+00,4.9084868336327880e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "12s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:14:30 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  18795484.8537        1
[INPUT] 0    0    [1    /1   ]  4698871.21342        1
[INPUT] 0    0    [1    /1   ]  1174717.80335        1
[INPUT] 0    0    [1    /1   ]  293679.450794        1
[INPUT] 0    0    [1    /1   ]  73419.8655375        1
[INPUT] 0    0    [1    /1   ]  18353.9006348        1
[INPUT] 0    0    [1    /1   ]  2234.18327919        1
[INPUT] 0    0    [1    /1   ]  456.872098459        1
[INPUT] 0    0    [1    /1   ]  121.731904674        1
[INPUT] 0    0    [1    /1   ]  37.5872334002        1
[INPUT] 0    0    [1    /1   ]  4.74149702027        1
[INPUT] 0    0    [1    /1   ]  0.391161394619       1
[INPUT] 1    0    [1    /1   ]  8.59826758417        1
[INPUT] 1    0    [1    /1   ]  0.490795694238       1

nuclear repulsion = 0
number of shells = 14
number of NR pGTOs = 18
number of NR cGTOs = 18
basis = {'Ar': [[0, [18795484.853669234, 1.0]], [0, [4698871.213417232, 1.0]], [0, [1174717.8033542908, 1.0]], [0, [293679.4507942992, 1.0]], [0, [73419.8655374604, 1.0]], [0, [18353.90063477979, 1.0]], [0, [2234.1832791866486, 1.0]], [0, [456.87209845890726, 1.0]], [0, [121.73190467394299, 1.0]], [0, [37.587233400249985, 1.0]], [0, [4.741497020274441, 1.0]], [0, [0.3911613946193959, 1.0]], [1, [8.598267584171001, 1.0]], [1, [0.4907956942379682, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [18795484.85366923]
bas 1, expnt(s) = [4698871.21341723]
bas 2, expnt(s) = [1174717.80335429]
bas 3, expnt(s) = [293679.4507943]
bas 4, expnt(s) = [73419.86553746]
bas 5, expnt(s) = [18353.90063478]
bas 6, expnt(s) = [2234.18327919]
bas 7, expnt(s) = [456.87209846]
bas 8, expnt(s) = [121.73190467]
bas 9, expnt(s) = [37.5872334]
bas 10, expnt(s) = [4.74149702]
bas 11, expnt(s) = [0.39116139]
bas 12, expnt(s) = [8.59826758]
bas 13, expnt(s) = [0.49079569]
CPU time:        50.78
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  0  1  1  0 42 43  0]
 [ 0  0  1  1  0 44 45  0]
 [ 0  0  1  1  0 46 47  0]
 [ 0  1  1  1  0 48 49  0]
 [ 0  1  1  1  0 50 51  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.87954849e+07 7.21199097e+05 4.69887121e+06 2.54982386e+05
 1.17471780e+06 9.01498871e+04 2.93679451e+05 3.18727983e+04
 7.34198655e+04 1.12687362e+04 1.83539006e+04 3.98392640e+03
 2.23418328e+03 8.21020729e+02 4.56872098e+02 2.49666919e+02
 1.21731905e+02 9.25909067e+01 3.75872334e+01 3.83526427e+01
 4.74149702e+00 8.11804839e+00 3.91161395e-01 1.24963164e+00
 8.59826758e+00 4.29534536e+01 4.90795694e-01 1.19842352e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.32004669226891
cond(S) = 56.39389622433114
E1 = -688.8277970074513  E_coul = 184.91154433193114
init E= -503.91625267552
    CPU time for initialize scf      0.03 sec, wall time      0.03 sec
  HOMO = -0.680977194960511  LUMO = 85.0491985285737
  mo_energy =
[-1.21651054e+02 -1.32814143e+01 -7.62185982e+00 -7.62185982e+00
 -7.62185982e+00 -1.65076466e+00 -6.80977195e-01 -6.80977195e-01
 -6.80977195e-01  8.50491985e+01  6.77189813e+02  3.93499987e+03
  2.96196723e+04  1.54738891e+05  6.64892016e+05  2.71962802e+06
  1.10459661e+07  4.65100871e+07]
E1 = -706.5797792147811  E_coul = 198.94048908901576
cycle= 1 E= -507.639290125765  delta_E= -3.72  |g|= 0.317  |ddm|= 0.301
    CPU time for cycle= 1      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.420482
diis-c [-0.1768049  1.       ]
  HOMO = -0.236418836235891  LUMO = 86.3821034251845
  mo_energy =
[-1.20263147e+02 -1.22533937e+01 -6.65340451e+00 -6.65340451e+00
 -6.65340451e+00 -1.16360039e+00 -2.36418836e-01 -2.36418836e-01
 -2.36418836e-01  8.63821034e+01  6.78560292e+02  3.93625140e+03
  2.96207610e+04  1.54739909e+05  6.64893003e+05  2.71962899e+06
  1.10459670e+07  4.65100881e+07]
E1 = -706.5483443900442  E_coul = 198.90862637351734
cycle= 2 E= -507.639718016527  delta_E= -0.000428  |g|= 0.00474  |ddm|= 0.0143
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00504166
diis-c [-2.53734290e-05 -5.04146126e-04  1.00050415e+00]
  HOMO = -0.236594022763336  LUMO = 86.3785849194695
  mo_energy =
[-1.20271787e+02 -1.22545825e+01 -6.65524564e+00 -6.65524564e+00
 -6.65524564e+00 -1.16366515e+00 -2.36594023e-01 -2.36594023e-01
 -2.36594023e-01  8.63785849e+01  6.78549706e+02  3.93623551e+03
  2.96207418e+04  1.54739889e+05  6.64892983e+05  2.71962897e+06
  1.10459670e+07  4.65100881e+07]
E1 = -706.5479041399196  E_coul = 198.90818601331506
cycle= 3 E= -507.639718126605  delta_E= -1.1e-07  |g|= 9.48e-05  |ddm|= 0.000202
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.000126786
diis-c [-3.95886061e-10  3.34025159e-05 -2.54660048e-02  1.02543260e+00]
  HOMO = -0.236596234690254  LUMO = 86.3785402485845
  mo_energy =
[-1.20271901e+02 -1.22545983e+01 -6.65527260e+00 -6.65527260e+00
 -6.65527260e+00 -1.16366580e+00 -2.36596235e-01 -2.36596235e-01
 -2.36596235e-01  8.63785402e+01  6.78549589e+02  3.93623536e+03
  2.96207416e+04  1.54739889e+05  6.64892983e+05  2.71962897e+06
  1.10459670e+07  4.65100881e+07]
E1 = -706.5478968999382  E_coul = 198.90817877329403
cycle= 4 E= -507.639718126644  delta_E= -3.96e-11  |g|= 3.74e-07  |ddm|= 3.45e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.5478968999382  E_coul = 198.90817877329403
  HOMO = -0.236596218385274  LUMO = 86.3785405867304
  mo_energy =
[-1.20271900e+02 -1.22545982e+01 -6.65527244e+00 -6.65527244e+00
 -6.65527244e+00 -1.16366580e+00 -2.36596218e-01 -2.36596218e-01
 -2.36596218e-01  8.63785406e+01  6.78549590e+02  3.93623536e+03
  2.96207416e+04  1.54739889e+05  6.64892983e+05  2.71962897e+06
  1.10459670e+07  4.65100881e+07]
E1 = -706.547896936951  E_coul = 198.90817881030694
Extra cycle  E= -507.639718126644  delta_E= 1.14e-13  |g|= 6.45e-09  |ddm|= 1.64e-08
    CPU time for scf_cycle      0.10 sec, wall time      0.11 sec
exp = [1.87954849e+07 4.69887121e+06 1.17471780e+06 2.93679451e+05
 7.34198655e+04 1.83539006e+04 2.23418328e+03 4.56872098e+02
 1.21731905e+02 3.75872334e+01 4.74149702e+00 3.91161395e-01
 8.59826758e+00 4.90795694e-01]
E = -507.6397181266441
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="BFGS",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((14, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.6988712134173084e+06,1.1747178033543271e+06,2.9367945083858178e+05,7.3419865393677101e+04,1.8353927627435987e+04,2.2341424145819028e+03,4.5688904996449571e+02,1.2173317272260677e+02,3.7593061247508530e+01,4.7412722556720146e+00,3.9120358491841306e-01,8.5986297237246045e+00,4.9084868336327880e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "12s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:14:30 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  18795484.8537        1
[INPUT] 0    0    [1    /1   ]  4698871.21342        1
[INPUT] 0    0    [1    /1   ]  1174717.80335        1
[INPUT] 0    0    [1    /1   ]  293679.450794        1
[INPUT] 0    0    [1    /1   ]  73419.8655375        1
[INPUT] 0    0    [1    /1   ]  18353.9006348        1
[INPUT] 0    0    [1    /1   ]  2234.18327919        1
[INPUT] 0    0    [1    /1   ]  456.872098459        1
[INPUT] 0    0    [1    /1   ]  121.731904674        1
[INPUT] 0    0    [1    /1   ]  37.5872334002        1
[INPUT] 0    0    [1    /1   ]  4.74149702027        1
[INPUT] 0    0    [1    /1   ]  0.391161394619       1
[INPUT] 1    0    [1    /1   ]  8.59826758417        1
[INPUT] 1    0    [1    /1   ]  0.490795694238       1

nuclear repulsion = 0
number of shells = 14
number of NR pGTOs = 18
number of NR cGTOs = 18
basis = {'Ar': [[0, [18795484.853669234, 1.0]], [0, [4698871.213417232, 1.0]], [0, [1174717.8033542908, 1.0]], [0, [293679.4507942992, 1.0]], [0, [73419.8655374604, 1.0]], [0, [18353.90063477979, 1.0]], [0, [2234.1832791866486, 1.0]], [0, [456.87209845890726, 1.0]], [0, [121.73190467394299, 1.0]], [0, [37.587233400249985, 1.0]], [0, [4.741497020274441, 1.0]], [0, [0.3911613946193959, 1.0]], [1, [8.598267584171001, 1.0]], [1, [0.4907956942379682, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [18795484.85366923]
bas 1, expnt(s) = [4698871.21341723]
bas 2, expnt(s) = [1174717.80335429]
bas 3, expnt(s) = [293679.4507943]
bas 4, expnt(s) = [73419.86553746]
bas 5, expnt(s) = [18353.90063478]
bas 6, expnt(s) = [2234.18327919]
bas 7, expnt(s) = [456.87209846]
bas 8, expnt(s) = [121.73190467]
bas 9, expnt(s) = [37.5872334]
bas 10, expnt(s) = [4.74149702]
bas 11, expnt(s) = [0.39116139]
bas 12, expnt(s) = [8.59826758]
bas 13, expnt(s) = [0.49079569]
CPU time:        51.13
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  0  1  1  0 42 43  0]
 [ 0  0  1  1  0 44 45  0]
 [ 0  0  1  1  0 46 47  0]
 [ 0  1  1  1  0 48 49  0]
 [ 0  1  1  1  0 50 51  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.87954849e+07 7.21199097e+05 4.69887121e+06 2.54982386e+05
 1.17471780e+06 9.01498871e+04 2.93679451e+05 3.18727983e+04
 7.34198655e+04 1.12687362e+04 1.83539006e+04 3.98392640e+03
 2.23418328e+03 8.21020729e+02 4.56872098e+02 2.49666919e+02
 1.21731905e+02 9.25909067e+01 3.75872334e+01 3.83526427e+01
 4.74149702e+00 8.11804839e+00 3.91161395e-01 1.24963164e+00
 8.59826758e+00 4.29534536e+01 4.90795694e-01 1.19842352e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.32004669226891
cond(S) = 56.39389622433114
E1 = -688.8277970074513  E_coul = 184.91154433193114
init E= -503.91625267552
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.680977194960511  LUMO = 85.0491985285737
  mo_energy =
[-1.21651054e+02 -1.32814143e+01 -7.62185982e+00 -7.62185982e+00
 -7.62185982e+00 -1.65076466e+00 -6.80977195e-01 -6.80977195e-01
 -6.80977195e-01  8.50491985e+01  6.77189813e+02  3.93499987e+03
  2.96196723e+04  1.54738891e+05  6.64892016e+05  2.71962802e+06
  1.10459661e+07  4.65100871e+07]
E1 = -706.5797792147811  E_coul = 198.94048908901576
cycle= 1 E= -507.639290125765  delta_E= -3.72  |g|= 0.317  |ddm|= 0.301
    CPU time for cycle= 1      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.420482
diis-c [-0.1768049  1.       ]
  HOMO = -0.236418836235891  LUMO = 86.3821034251845
  mo_energy =
[-1.20263147e+02 -1.22533937e+01 -6.65340451e+00 -6.65340451e+00
 -6.65340451e+00 -1.16360039e+00 -2.36418836e-01 -2.36418836e-01
 -2.36418836e-01  8.63821034e+01  6.78560292e+02  3.93625140e+03
  2.96207610e+04  1.54739909e+05  6.64893003e+05  2.71962899e+06
  1.10459670e+07  4.65100881e+07]
E1 = -706.5483443900442  E_coul = 198.90862637351734
cycle= 2 E= -507.639718016527  delta_E= -0.000428  |g|= 0.00474  |ddm|= 0.0143
    CPU time for cycle= 2      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.00504166
diis-c [-2.53734290e-05 -5.04146126e-04  1.00050415e+00]
  HOMO = -0.236594022763336  LUMO = 86.3785849194695
  mo_energy =
[-1.20271787e+02 -1.22545825e+01 -6.65524564e+00 -6.65524564e+00
 -6.65524564e+00 -1.16366515e+00 -2.36594023e-01 -2.36594023e-01
 -2.36594023e-01  8.63785849e+01  6.78549706e+02  3.93623551e+03
  2.96207418e+04  1.54739889e+05  6.64892983e+05  2.71962897e+06
  1.10459670e+07  4.65100881e+07]
E1 = -706.5479041399196  E_coul = 198.90818601331506
cycle= 3 E= -507.639718126605  delta_E= -1.1e-07  |g|= 9.48e-05  |ddm|= 0.000202
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.000126786
diis-c [-3.95886061e-10  3.34025159e-05 -2.54660048e-02  1.02543260e+00]
  HOMO = -0.236596234690254  LUMO = 86.3785402485845
  mo_energy =
[-1.20271901e+02 -1.22545983e+01 -6.65527260e+00 -6.65527260e+00
 -6.65527260e+00 -1.16366580e+00 -2.36596235e-01 -2.36596235e-01
 -2.36596235e-01  8.63785402e+01  6.78549589e+02  3.93623536e+03
  2.96207416e+04  1.54739889e+05  6.64892983e+05  2.71962897e+06
  1.10459670e+07  4.65100881e+07]
E1 = -706.5478968999382  E_coul = 198.90817877329403
cycle= 4 E= -507.639718126644  delta_E= -3.96e-11  |g|= 3.74e-07  |ddm|= 3.45e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.5478968999382  E_coul = 198.90817877329403
  HOMO = -0.236596218385274  LUMO = 86.3785405867304
  mo_energy =
[-1.20271900e+02 -1.22545982e+01 -6.65527244e+00 -6.65527244e+00
 -6.65527244e+00 -1.16366580e+00 -2.36596218e-01 -2.36596218e-01
 -2.36596218e-01  8.63785406e+01  6.78549590e+02  3.93623536e+03
  2.96207416e+04  1.54739889e+05  6.64892983e+05  2.71962897e+06
  1.10459670e+07  4.65100881e+07]
E1 = -706.547896936951  E_coul = 198.90817881030694
Extra cycle  E= -507.639718126644  delta_E= 1.14e-13  |g|= 6.45e-09  |ddm|= 1.64e-08
    CPU time for scf_cycle      0.10 sec, wall time      0.11 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 56.39389622433114
E1 = -706.547896936951  E_coul = 198.90817881030694
init E= -507.639718126644
    CPU time for initialize scf      0.12 sec, wall time      0.12 sec
  HOMO = -0.236596218194582  LUMO = 86.3785405908623
  mo_energy =
[-1.20271900e+02 -1.22545982e+01 -6.65527244e+00 -6.65527244e+00
 -6.65527244e+00 -1.16366580e+00 -2.36596218e-01 -2.36596218e-01
 -2.36596218e-01  8.63785406e+01  6.78549590e+02  3.93623536e+03
  2.96207416e+04  1.54739889e+05  6.64892983e+05  2.71962897e+06
  1.10459670e+07  4.65100881e+07]
E1 = -706.5478969375116  E_coul = 198.9081788108671
cycle= 1 E= -507.639718126645  delta_E= -4.55e-13  |g|= 1.96e-10  |ddm|= 2.54e-10
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -706.5478969375116  E_coul = 198.9081788108671
  HOMO = -0.236596218191891  LUMO = 86.3785405909189
  mo_energy =
[-1.20271900e+02 -1.22545982e+01 -6.65527244e+00 -6.65527244e+00
 -6.65527244e+00 -1.16366580e+00 -2.36596218e-01 -2.36596218e-01
 -2.36596218e-01  8.63785406e+01  6.78549590e+02  3.93623536e+03
  2.96207416e+04  1.54739889e+05  6.64892983e+05  2.71962897e+06
  1.10459670e+07  4.65100881e+07]
E1 = -706.5478969375217  E_coul = 198.90817881087702
Extra cycle  E= -507.639718126645  delta_E= -1.71e-13  |g|= 1.07e-10  |ddm|= 4.59e-12
    CPU time for scf_cycle      0.19 sec, wall time      0.19 sec
exp = [1.87954849e+07 4.69887121e+06 1.17471780e+06 2.93679451e+05
 7.34198655e+04 1.83539006e+04 2.23418328e+03 4.56872098e+02
 1.21731905e+02 3.75872334e+01 4.74149702e+00 3.91161395e-01
 8.59826758e+00 4.90795694e-01]
grad_E = [-1.11379541e-13  1.80039505e-11  8.57537483e-12  1.05303601e-08
 -3.42197007e-08  6.41852921e-06 -9.51225953e-06  6.47135907e-07
  2.52885832e-05 -7.37409944e-05  1.22757071e-04 -8.43899796e-04
 -2.50680341e-04 -1.71701039e-03]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="BFGS",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((14, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.6988712134173084e+06,1.1747178033543271e+06,2.9367945083858178e+05,7.3419865393677101e+04,1.8353927627435987e+04,2.2341424145819028e+03,4.5688904996449571e+02,1.2173317272260677e+02,3.7593061247508530e+01,4.7412722556720146e+00,3.9120358491841306e-01,8.5986297237246045e+00,4.9084868336327880e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "12s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:14:33 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  18795484.8537        1
[INPUT] 0    0    [1    /1   ]  4698871.21342        1
[INPUT] 0    0    [1    /1   ]  1174717.80335        1
[INPUT] 0    0    [1    /1   ]  293679.450777        1
[INPUT] 0    0    [1    /1   ]  73419.865594         1
[INPUT] 0    0    [1    /1   ]  18353.8900281        1
[INPUT] 0    0    [1    /1   ]  2234.19933639        1
[INPUT] 0    0    [1    /1   ]  456.865444707        1
[INPUT] 0    0    [1    /1   ]  121.731352288        1
[INPUT] 0    0    [1    /1   ]  37.5851060335        1
[INPUT] 0    0    [1    /1   ]  4.74146108707        1
[INPUT] 0    0    [1    /1   ]  0.391171282855       1
[INPUT] 1    0    [1    /1   ]  8.59837768719        1
[INPUT] 1    0    [1    /1   ]  0.490810210256       1

nuclear repulsion = 0
number of shells = 14
number of NR pGTOs = 18
number of NR cGTOs = 18
basis = {'Ar': [[0, [18795484.853669234, 1.0]], [0, [4698871.213417202, 1.0]], [0, [1174717.8033542766, 1.0]], [0, [293679.4507768985, 1.0]], [0, [73419.86559395974, 1.0]], [0, [18353.890028084916, 1.0]], [0, [2234.1993363858032, 1.0]], [0, [456.86544470703467, 1.0]], [0, [121.73135228785702, 1.0]], [0, [37.58510603351966, 1.0]], [0, [4.741461087068922, 1.0]], [0, [0.39117128285529573, 1.0]], [1, [8.598377687190068, 1.0]], [1, [0.49081021025581056, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [18795484.85366923]
bas 1, expnt(s) = [4698871.2134172]
bas 2, expnt(s) = [1174717.80335428]
bas 3, expnt(s) = [293679.4507769]
bas 4, expnt(s) = [73419.86559396]
bas 5, expnt(s) = [18353.89002808]
bas 6, expnt(s) = [2234.19933639]
bas 7, expnt(s) = [456.86544471]
bas 8, expnt(s) = [121.73135229]
bas 9, expnt(s) = [37.58510603]
bas 10, expnt(s) = [4.74146109]
bas 11, expnt(s) = [0.39117128]
bas 12, expnt(s) = [8.59837769]
bas 13, expnt(s) = [0.49081021]
CPU time:        54.24
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  0  1  1  0 42 43  0]
 [ 0  0  1  1  0 44 45  0]
 [ 0  0  1  1  0 46 47  0]
 [ 0  1  1  1  0 48 49  0]
 [ 0  1  1  1  0 50 51  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.87954849e+07 7.21199097e+05 4.69887121e+06 2.54982386e+05
 1.17471780e+06 9.01498871e+04 2.93679451e+05 3.18727982e+04
 7.34198656e+04 1.12687362e+04 1.83538900e+04 3.98392467e+03
 2.23419934e+03 8.21025154e+02 4.56865445e+02 2.49664192e+02
 1.21731352e+02 9.25905916e+01 3.75851060e+01 3.83510147e+01
 4.74146109e+00 8.11800225e+00 3.91171283e-01 1.24965533e+00
 8.59837769e+00 4.29541411e+01 4.90810210e-01 1.19846782e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.32002721586356
cond(S) = 56.39336313182149
E1 = -688.8290783959375  E_coul = 184.91260616584614
init E= -503.916472230091
    CPU time for initialize scf      0.03 sec, wall time      0.03 sec
  HOMO = -0.680956409060909  LUMO = 85.0446032167459
  mo_energy =
[-1.21650918e+02 -1.32813140e+01 -7.62178982e+00 -7.62178982e+00
 -7.62178982e+00 -1.65074661e+00 -6.80956409e-01 -6.80956409e-01
 -6.80956409e-01  8.50446032e+01  6.77174998e+02  3.93498774e+03
  2.96196835e+04  1.54738887e+05  6.64892004e+05  2.71962800e+06
  1.10459660e+07  4.65100871e+07]
E1 = -706.5811098839245  E_coul = 198.94181972543456
cycle= 1 E= -507.63929015849  delta_E= -3.72  |g|= 0.317  |ddm|= 0.301
    CPU time for cycle= 1      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.420478
diis-c [-0.17680166  1.        ]
  HOMO = -0.236381174454488  LUMO = 86.3775151372525
  mo_energy =
[-1.20263009e+02 -1.22532756e+01 -6.65331692e+00 -6.65331692e+00
 -6.65331692e+00 -1.16356727e+00 -2.36381174e-01 -2.36381174e-01
 -2.36381174e-01  8.63775151e+01  6.78545468e+02  3.93623924e+03
  2.96207721e+04  1.54739905e+05  6.64892992e+05  2.71962898e+06
  1.10459670e+07  4.65100881e+07]
E1 = -706.5496705556153  E_coul = 198.909952432418
cycle= 2 E= -507.639718123197  delta_E= -0.000428  |g|= 0.00474  |ddm|= 0.0143
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00504226
diis-c [-2.53795899e-05 -5.03625141e-04  1.00050363e+00]
  HOMO = -0.236556396315822  LUMO = 86.3739961639138
  mo_energy =
[-1.20271650e+02 -1.22544646e+01 -6.65515832e+00 -6.65515832e+00
 -6.65515832e+00 -1.16363205e+00 -2.36556396e-01 -2.36556396e-01
 -2.36556396e-01  8.63739962e+01  6.78534881e+02  3.93622335e+03
  2.96207529e+04  1.54739885e+05  6.64892972e+05  2.71962896e+06
  1.10459670e+07  4.65100881e+07]
E1 = -706.5492302326339  E_coul = 198.90951199933664
cycle= 3 E= -507.639718233297  delta_E= -1.1e-07  |g|= 9.48e-05  |ddm|= 0.000202
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.000126805
diis-c [-3.95992062e-10  3.33944974e-05 -2.54666353e-02  1.02543324e+00]
  HOMO = -0.236558608852843  LUMO = 86.3739514839506
  mo_energy =
[-1.20271763e+02 -1.22544804e+01 -6.65518529e+00 -6.65518529e+00
 -6.65518529e+00 -1.16363270e+00 -2.36558609e-01 -2.36558609e-01
 -2.36558609e-01  8.63739515e+01  6.78534763e+02  3.93622321e+03
  2.96207527e+04  1.54739884e+05  6.64892971e+05  2.71962896e+06
  1.10459670e+07  4.65100881e+07]
E1 = -706.5492229910565  E_coul = 198.90950475771967
cycle= 4 E= -507.639718233337  delta_E= -3.95e-11  |g|= 3.74e-07  |ddm|= 3.45e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.5492229910565  E_coul = 198.90950475771967
  HOMO = -0.236558592543154  LUMO = 86.3739518221667
  mo_energy =
[-1.20271763e+02 -1.22544803e+01 -6.65518513e+00 -6.65518513e+00
 -6.65518513e+00 -1.16363270e+00 -2.36558593e-01 -2.36558593e-01
 -2.36558593e-01  8.63739518e+01  6.78534765e+02  3.93622321e+03
  2.96207527e+04  1.54739884e+05  6.64892971e+05  2.71962896e+06
  1.10459670e+07  4.65100881e+07]
E1 = -706.5492230280779  E_coul = 198.9095047947408
Extra cycle  E= -507.639718233337  delta_E= -3.41e-13  |g|= 6.45e-09  |ddm|= 1.64e-08
    CPU time for scf_cycle      0.10 sec, wall time      0.11 sec
exp = [1.87954849e+07 4.69887121e+06 1.17471780e+06 2.93679451e+05
 7.34198656e+04 1.83538900e+04 2.23419934e+03 4.56865445e+02
 1.21731352e+02 3.75851060e+01 4.74146109e+00 3.91171283e-01
 8.59837769e+00 4.90810210e-01]
E = -507.63971823333713
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="BFGS",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((14, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.6988712134173084e+06,1.1747178033543271e+06,2.9367945083858178e+05,7.3419865393677101e+04,1.8353927627435987e+04,2.2341424145819028e+03,4.5688904996449571e+02,1.2173317272260677e+02,3.7593061247508530e+01,4.7412722556720146e+00,3.9120358491841306e-01,8.5986297237246045e+00,4.9084868336327880e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "12s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:14:33 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  18795484.8537        1
[INPUT] 0    0    [1    /1   ]  4698871.21342        1
[INPUT] 0    0    [1    /1   ]  1174717.80335        1
[INPUT] 0    0    [1    /1   ]  293679.450777        1
[INPUT] 0    0    [1    /1   ]  73419.865594         1
[INPUT] 0    0    [1    /1   ]  18353.8900281        1
[INPUT] 0    0    [1    /1   ]  2234.19933639        1
[INPUT] 0    0    [1    /1   ]  456.865444707        1
[INPUT] 0    0    [1    /1   ]  121.731352288        1
[INPUT] 0    0    [1    /1   ]  37.5851060335        1
[INPUT] 0    0    [1    /1   ]  4.74146108707        1
[INPUT] 0    0    [1    /1   ]  0.391171282855       1
[INPUT] 1    0    [1    /1   ]  8.59837768719        1
[INPUT] 1    0    [1    /1   ]  0.490810210256       1

nuclear repulsion = 0
number of shells = 14
number of NR pGTOs = 18
number of NR cGTOs = 18
basis = {'Ar': [[0, [18795484.853669234, 1.0]], [0, [4698871.213417202, 1.0]], [0, [1174717.8033542766, 1.0]], [0, [293679.4507768985, 1.0]], [0, [73419.86559395974, 1.0]], [0, [18353.890028084916, 1.0]], [0, [2234.1993363858032, 1.0]], [0, [456.86544470703467, 1.0]], [0, [121.73135228785702, 1.0]], [0, [37.58510603351966, 1.0]], [0, [4.741461087068922, 1.0]], [0, [0.39117128285529573, 1.0]], [1, [8.598377687190068, 1.0]], [1, [0.49081021025581056, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [18795484.85366923]
bas 1, expnt(s) = [4698871.2134172]
bas 2, expnt(s) = [1174717.80335428]
bas 3, expnt(s) = [293679.4507769]
bas 4, expnt(s) = [73419.86559396]
bas 5, expnt(s) = [18353.89002808]
bas 6, expnt(s) = [2234.19933639]
bas 7, expnt(s) = [456.86544471]
bas 8, expnt(s) = [121.73135229]
bas 9, expnt(s) = [37.58510603]
bas 10, expnt(s) = [4.74146109]
bas 11, expnt(s) = [0.39117128]
bas 12, expnt(s) = [8.59837769]
bas 13, expnt(s) = [0.49081021]
CPU time:        54.61
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  0  1  1  0 42 43  0]
 [ 0  0  1  1  0 44 45  0]
 [ 0  0  1  1  0 46 47  0]
 [ 0  1  1  1  0 48 49  0]
 [ 0  1  1  1  0 50 51  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.87954849e+07 7.21199097e+05 4.69887121e+06 2.54982386e+05
 1.17471780e+06 9.01498871e+04 2.93679451e+05 3.18727982e+04
 7.34198656e+04 1.12687362e+04 1.83538900e+04 3.98392467e+03
 2.23419934e+03 8.21025154e+02 4.56865445e+02 2.49664192e+02
 1.21731352e+02 9.25905916e+01 3.75851060e+01 3.83510147e+01
 4.74146109e+00 8.11800225e+00 3.91171283e-01 1.24965533e+00
 8.59837769e+00 4.29541411e+01 4.90810210e-01 1.19846782e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.32002721586356
cond(S) = 56.39336313182149
E1 = -688.8290783959375  E_coul = 184.91260616584614
init E= -503.916472230091
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.680956409060909  LUMO = 85.0446032167459
  mo_energy =
[-1.21650918e+02 -1.32813140e+01 -7.62178982e+00 -7.62178982e+00
 -7.62178982e+00 -1.65074661e+00 -6.80956409e-01 -6.80956409e-01
 -6.80956409e-01  8.50446032e+01  6.77174998e+02  3.93498774e+03
  2.96196835e+04  1.54738887e+05  6.64892004e+05  2.71962800e+06
  1.10459660e+07  4.65100871e+07]
E1 = -706.5811098839245  E_coul = 198.94181972543456
cycle= 1 E= -507.63929015849  delta_E= -3.72  |g|= 0.317  |ddm|= 0.301
    CPU time for cycle= 1      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.420478
diis-c [-0.17680166  1.        ]
  HOMO = -0.236381174454488  LUMO = 86.3775151372525
  mo_energy =
[-1.20263009e+02 -1.22532756e+01 -6.65331692e+00 -6.65331692e+00
 -6.65331692e+00 -1.16356727e+00 -2.36381174e-01 -2.36381174e-01
 -2.36381174e-01  8.63775151e+01  6.78545468e+02  3.93623924e+03
  2.96207721e+04  1.54739905e+05  6.64892992e+05  2.71962898e+06
  1.10459670e+07  4.65100881e+07]
E1 = -706.5496705556153  E_coul = 198.909952432418
cycle= 2 E= -507.639718123197  delta_E= -0.000428  |g|= 0.00474  |ddm|= 0.0143
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00504226
diis-c [-2.53795899e-05 -5.03625141e-04  1.00050363e+00]
  HOMO = -0.236556396315822  LUMO = 86.3739961639138
  mo_energy =
[-1.20271650e+02 -1.22544646e+01 -6.65515832e+00 -6.65515832e+00
 -6.65515832e+00 -1.16363205e+00 -2.36556396e-01 -2.36556396e-01
 -2.36556396e-01  8.63739962e+01  6.78534881e+02  3.93622335e+03
  2.96207529e+04  1.54739885e+05  6.64892972e+05  2.71962896e+06
  1.10459670e+07  4.65100881e+07]
E1 = -706.5492302326339  E_coul = 198.90951199933664
cycle= 3 E= -507.639718233297  delta_E= -1.1e-07  |g|= 9.48e-05  |ddm|= 0.000202
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.000126805
diis-c [-3.95992062e-10  3.33944974e-05 -2.54666353e-02  1.02543324e+00]
  HOMO = -0.236558608852843  LUMO = 86.3739514839506
  mo_energy =
[-1.20271763e+02 -1.22544804e+01 -6.65518529e+00 -6.65518529e+00
 -6.65518529e+00 -1.16363270e+00 -2.36558609e-01 -2.36558609e-01
 -2.36558609e-01  8.63739515e+01  6.78534763e+02  3.93622321e+03
  2.96207527e+04  1.54739884e+05  6.64892971e+05  2.71962896e+06
  1.10459670e+07  4.65100881e+07]
E1 = -706.5492229910565  E_coul = 198.90950475771967
cycle= 4 E= -507.639718233337  delta_E= -3.95e-11  |g|= 3.74e-07  |ddm|= 3.45e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.5492229910565  E_coul = 198.90950475771967
  HOMO = -0.236558592543154  LUMO = 86.3739518221667
  mo_energy =
[-1.20271763e+02 -1.22544803e+01 -6.65518513e+00 -6.65518513e+00
 -6.65518513e+00 -1.16363270e+00 -2.36558593e-01 -2.36558593e-01
 -2.36558593e-01  8.63739518e+01  6.78534765e+02  3.93622321e+03
  2.96207527e+04  1.54739884e+05  6.64892971e+05  2.71962896e+06
  1.10459670e+07  4.65100881e+07]
E1 = -706.5492230280779  E_coul = 198.9095047947408
Extra cycle  E= -507.639718233337  delta_E= -3.41e-13  |g|= 6.45e-09  |ddm|= 1.64e-08
    CPU time for scf_cycle      0.10 sec, wall time      0.11 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 56.39336313182149
E1 = -706.5492230280779  E_coul = 198.9095047947408
init E= -507.639718233337
    CPU time for initialize scf      0.12 sec, wall time      0.12 sec
  HOMO = -0.236558592352418  LUMO = 86.3739518262952
  mo_energy =
[-1.20271763e+02 -1.22544803e+01 -6.65518513e+00 -6.65518513e+00
 -6.65518513e+00 -1.16363270e+00 -2.36558592e-01 -2.36558592e-01
 -2.36558592e-01  8.63739518e+01  6.78534765e+02  3.93622321e+03
  2.96207527e+04  1.54739884e+05  6.64892971e+05  2.71962896e+06
  1.10459670e+07  4.65100881e+07]
E1 = -706.5492230286385  E_coul = 198.90950479530136
cycle= 1 E= -507.639718233337  delta_E=    0  |g|= 2.81e-10  |ddm|= 2.54e-10
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -706.5492230286385  E_coul = 198.90950479530136
  HOMO = -0.236558592349724  LUMO = 86.3739518263567
  mo_energy =
[-1.20271763e+02 -1.22544803e+01 -6.65518513e+00 -6.65518513e+00
 -6.65518513e+00 -1.16363270e+00 -2.36558592e-01 -2.36558592e-01
 -2.36558592e-01  8.63739518e+01  6.78534765e+02  3.93622321e+03
  2.96207527e+04  1.54739884e+05  6.64892971e+05  2.71962896e+06
  1.10459670e+07  4.65100881e+07]
E1 = -706.5492230286478  E_coul = 198.90950479531065
Extra cycle  E= -507.639718233337  delta_E=    0  |g|= 1.43e-10  |ddm|= 4.47e-12
    CPU time for scf_cycle      0.19 sec, wall time      0.19 sec
exp = [1.87954849e+07 4.69887121e+06 1.17471780e+06 2.93679451e+05
 7.34198656e+04 1.83538900e+04 2.23419934e+03 4.56865445e+02
 1.21731352e+02 3.75851060e+01 4.74146109e+00 3.91171283e-01
 8.59837769e+00 4.90810210e-01]
grad_E = [-1.11417393e-13  1.80015036e-11  8.55526058e-12  1.05289647e-08
 -3.42258917e-08  6.41756402e-06 -9.43343309e-06 -6.07052864e-07
  3.45517233e-05 -1.01458160e-04  8.80639291e-05 -6.17317678e-04
 -1.77403648e-04 -1.26249674e-03]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="BFGS",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((14, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.6988712134173084e+06,1.1747178033543271e+06,2.9367945083858178e+05,7.3419865393677101e+04,1.8353927627435987e+04,2.2341424145819028e+03,4.5688904996449571e+02,1.2173317272260677e+02,3.7593061247508530e+01,4.7412722556720146e+00,3.9120358491841306e-01,8.5986297237246045e+00,4.9084868336327880e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "12s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:14:37 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  18795484.8537        1
[INPUT] 0    0    [1    /1   ]  4698871.21342        1
[INPUT] 0    0    [1    /1   ]  1174717.80335        1
[INPUT] 0    0    [1    /1   ]  293679.450767        1
[INPUT] 0    0    [1    /1   ]  73419.865627         1
[INPUT] 0    0    [1    /1   ]  18353.8838195        1
[INPUT] 0    0    [1    /1   ]  2234.20873489        1
[INPUT] 0    0    [1    /1   ]  456.861557878        1
[INPUT] 0    0    [1    /1   ]  121.730970442        1
[INPUT] 0    0    [1    /1   ]  37.584036457         1
[INPUT] 0    0    [1    /1   ]  4.74137566223        1
[INPUT] 0    0    [1    /1   ]  0.391191519771       1
[INPUT] 1    0    [1    /1   ]  8.59857010795        1
[INPUT] 1    0    [1    /1   ]  0.490837717338       1

nuclear repulsion = 0
number of shells = 14
number of NR pGTOs = 18
number of NR cGTOs = 18
basis = {'Ar': [[0, [18795484.853669234, 1.0]], [0, [4698871.213417185, 1.0]], [0, [1174717.8033542682, 1.0]], [0, [293679.45076671307, 1.0]], [0, [73419.86562703137, 1.0]], [0, [18353.883819517265, 1.0]], [0, [2234.2087348931354, 1.0]], [0, [456.8615578780839, 1.0]], [0, [121.73097044155763, 1.0]], [0, [37.58403645697291, 1.0]], [0, [4.7413756622326915, 1.0]], [0, [0.39119151977068695, 1.0]], [1, [8.598570107946117, 1.0]], [1, [0.4908377173381022, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [18795484.85366923]
bas 1, expnt(s) = [4698871.21341718]
bas 2, expnt(s) = [1174717.80335427]
bas 3, expnt(s) = [293679.45076671]
bas 4, expnt(s) = [73419.86562703]
bas 5, expnt(s) = [18353.88381952]
bas 6, expnt(s) = [2234.20873489]
bas 7, expnt(s) = [456.86155788]
bas 8, expnt(s) = [121.73097044]
bas 9, expnt(s) = [37.58403646]
bas 10, expnt(s) = [4.74137566]
bas 11, expnt(s) = [0.39119152]
bas 12, expnt(s) = [8.59857011]
bas 13, expnt(s) = [0.49083772]
CPU time:        57.72
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  0  1  1  0 42 43  0]
 [ 0  0  1  1  0 44 45  0]
 [ 0  0  1  1  0 46 47  0]
 [ 0  1  1  1  0 48 49  0]
 [ 0  1  1  1  0 50 51  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.87954849e+07 7.21199097e+05 4.69887121e+06 2.54982386e+05
 1.17471780e+06 9.01498871e+04 2.93679451e+05 3.18727982e+04
 7.34198656e+04 1.12687362e+04 1.83538838e+04 3.98392366e+03
 2.23420873e+03 8.21027745e+02 4.56861558e+02 2.49662599e+02
 1.21730970e+02 9.25903738e+01 3.75840365e+01 3.83501962e+01
 4.74137566e+00 8.11789255e+00 3.91191520e-01 1.24970382e+00
 8.59857011e+00 4.29553427e+01 4.90837717e-01 1.19855178e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.3199902231651
cond(S) = 56.39307684454819
E1 = -688.8312229923589  E_coul = 184.9145808804636
init E= -503.916642111895
    CPU time for initialize scf      0.03 sec, wall time      0.03 sec
  HOMO = -0.680916076498264  LUMO = 85.0421822480357
  mo_energy =
[-1.21650654e+02 -1.32811467e+01 -7.62165887e+00 -7.62165887e+00
 -7.62165887e+00 -1.65071424e+00 -6.80916076e-01 -6.80916076e-01
 -6.80916076e-01  8.50421822e+01  6.77166824e+02  3.93498110e+03
  2.96196904e+04  1.54738885e+05  6.64891998e+05  2.71962800e+06
  1.10459660e+07  4.65100871e+07]
E1 = -706.5836690450368  E_coul = 198.94437888622213
cycle= 1 E= -507.639290158815  delta_E= -3.72  |g|= 0.317  |ddm|= 0.301
    CPU time for cycle= 1      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.420478
diis-c [-0.17680166  1.        ]
  HOMO = -0.236308611668184  LUMO = 86.3751290170201
  mo_energy =
[-1.20262716e+02 -1.22530716e+01 -6.65314904e+00 -6.65314904e+00
 -6.65314904e+00 -1.16350573e+00 -2.36308612e-01 -2.36308612e-01
 -2.36308612e-01  8.63751290e+01  6.78537313e+02  3.93623261e+03
  2.96207790e+04  1.54739903e+05  6.64892986e+05  2.71962897e+06
  1.10459670e+07  4.65100881e+07]
E1 = -706.5522256287676  E_coul = 198.91250742569886
cycle= 2 E= -507.639718203069  delta_E= -0.000428  |g|= 0.00474  |ddm|= 0.0143
    CPU time for cycle= 2      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.00504291
diis-c [-2.53861838e-05 -5.03505590e-04  1.00050351e+00]
  HOMO = -0.236483874859156  LUMO = 86.3716096132272
  mo_energy =
[-1.20271359e+02 -1.22542607e+01 -6.65499068e+00 -6.65499068e+00
 -6.65499068e+00 -1.16357051e+00 -2.36483875e-01 -2.36483875e-01
 -2.36483875e-01  8.63716096e+01  6.78526725e+02  3.93621672e+03
  2.96207598e+04  1.54739883e+05  6.64892965e+05  2.71962895e+06
  1.10459670e+07  4.65100881e+07]
E1 = -706.5517852410778  E_coul = 198.9120669278846
cycle= 3 E= -507.639718313193  delta_E= -1.1e-07  |g|= 9.48e-05  |ddm|= 0.000202
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.000126821
diis-c [-3.96075646e-10  3.33895183e-05 -2.54666896e-02  1.02543330e+00]
  HOMO = -0.236486088016416  LUMO = 86.3715649265076
  mo_energy =
[-1.20271472e+02 -1.22542765e+01 -6.65501766e+00 -6.65501766e+00
 -6.65501766e+00 -1.16357117e+00 -2.36486088e-01 -2.36486088e-01
 -2.36486088e-01  8.63715649e+01  6.78526608e+02  3.93621657e+03
  2.96207596e+04  1.54739882e+05  6.64892965e+05  2.71962895e+06
  1.10459670e+07  4.65100881e+07]
E1 = -706.5517779982905  E_coul = 198.91205968505773
cycle= 4 E= -507.639718313233  delta_E= -3.96e-11  |g|= 3.74e-07  |ddm|= 3.45e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.5517779982905  E_coul = 198.91205968505773
  HOMO = -0.236486071702294  LUMO = 86.3715652647768
  mo_energy =
[-1.20271471e+02 -1.22542764e+01 -6.65501750e+00 -6.65501750e+00
 -6.65501750e+00 -1.16357116e+00 -2.36486072e-01 -2.36486072e-01
 -2.36486072e-01  8.63715653e+01  6.78526609e+02  3.93621658e+03
  2.96207596e+04  1.54739882e+05  6.64892965e+05  2.71962895e+06
  1.10459670e+07  4.65100881e+07]
E1 = -706.5517780353184  E_coul = 198.9120597220856
Extra cycle  E= -507.639718313233  delta_E= -5.68e-14  |g|= 6.45e-09  |ddm|= 1.64e-08
    CPU time for scf_cycle      0.10 sec, wall time      0.11 sec
exp = [1.87954849e+07 4.69887121e+06 1.17471780e+06 2.93679451e+05
 7.34198656e+04 1.83538838e+04 2.23420873e+03 4.56861558e+02
 1.21730970e+02 3.75840365e+01 4.74137566e+00 3.91191520e-01
 8.59857011e+00 4.90837717e-01]
E = -507.63971831323283
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="BFGS",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((14, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.6988712134173084e+06,1.1747178033543271e+06,2.9367945083858178e+05,7.3419865393677101e+04,1.8353927627435987e+04,2.2341424145819028e+03,4.5688904996449571e+02,1.2173317272260677e+02,3.7593061247508530e+01,4.7412722556720146e+00,3.9120358491841306e-01,8.5986297237246045e+00,4.9084868336327880e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "12s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:14:37 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  18795484.8537        1
[INPUT] 0    0    [1    /1   ]  4698871.21342        1
[INPUT] 0    0    [1    /1   ]  1174717.80335        1
[INPUT] 0    0    [1    /1   ]  293679.450767        1
[INPUT] 0    0    [1    /1   ]  73419.865627         1
[INPUT] 0    0    [1    /1   ]  18353.8838195        1
[INPUT] 0    0    [1    /1   ]  2234.20873489        1
[INPUT] 0    0    [1    /1   ]  456.861557878        1
[INPUT] 0    0    [1    /1   ]  121.730970442        1
[INPUT] 0    0    [1    /1   ]  37.584036457         1
[INPUT] 0    0    [1    /1   ]  4.74137566223        1
[INPUT] 0    0    [1    /1   ]  0.391191519771       1
[INPUT] 1    0    [1    /1   ]  8.59857010795        1
[INPUT] 1    0    [1    /1   ]  0.490837717338       1

nuclear repulsion = 0
number of shells = 14
number of NR pGTOs = 18
number of NR cGTOs = 18
basis = {'Ar': [[0, [18795484.853669234, 1.0]], [0, [4698871.213417185, 1.0]], [0, [1174717.8033542682, 1.0]], [0, [293679.45076671307, 1.0]], [0, [73419.86562703137, 1.0]], [0, [18353.883819517265, 1.0]], [0, [2234.2087348931354, 1.0]], [0, [456.8615578780839, 1.0]], [0, [121.73097044155763, 1.0]], [0, [37.58403645697291, 1.0]], [0, [4.7413756622326915, 1.0]], [0, [0.39119151977068695, 1.0]], [1, [8.598570107946117, 1.0]], [1, [0.4908377173381022, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [18795484.85366923]
bas 1, expnt(s) = [4698871.21341718]
bas 2, expnt(s) = [1174717.80335427]
bas 3, expnt(s) = [293679.45076671]
bas 4, expnt(s) = [73419.86562703]
bas 5, expnt(s) = [18353.88381952]
bas 6, expnt(s) = [2234.20873489]
bas 7, expnt(s) = [456.86155788]
bas 8, expnt(s) = [121.73097044]
bas 9, expnt(s) = [37.58403646]
bas 10, expnt(s) = [4.74137566]
bas 11, expnt(s) = [0.39119152]
bas 12, expnt(s) = [8.59857011]
bas 13, expnt(s) = [0.49083772]
CPU time:        58.10
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  0  1  1  0 42 43  0]
 [ 0  0  1  1  0 44 45  0]
 [ 0  0  1  1  0 46 47  0]
 [ 0  1  1  1  0 48 49  0]
 [ 0  1  1  1  0 50 51  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.87954849e+07 7.21199097e+05 4.69887121e+06 2.54982386e+05
 1.17471780e+06 9.01498871e+04 2.93679451e+05 3.18727982e+04
 7.34198656e+04 1.12687362e+04 1.83538838e+04 3.98392366e+03
 2.23420873e+03 8.21027745e+02 4.56861558e+02 2.49662599e+02
 1.21730970e+02 9.25903738e+01 3.75840365e+01 3.83501962e+01
 4.74137566e+00 8.11789255e+00 3.91191520e-01 1.24970382e+00
 8.59857011e+00 4.29553427e+01 4.90837717e-01 1.19855178e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.3199902231651
cond(S) = 56.39307684454819
E1 = -688.8312229923589  E_coul = 184.9145808804636
init E= -503.916642111895
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.680916076498264  LUMO = 85.0421822480357
  mo_energy =
[-1.21650654e+02 -1.32811467e+01 -7.62165887e+00 -7.62165887e+00
 -7.62165887e+00 -1.65071424e+00 -6.80916076e-01 -6.80916076e-01
 -6.80916076e-01  8.50421822e+01  6.77166824e+02  3.93498110e+03
  2.96196904e+04  1.54738885e+05  6.64891998e+05  2.71962800e+06
  1.10459660e+07  4.65100871e+07]
E1 = -706.5836690450368  E_coul = 198.94437888622213
cycle= 1 E= -507.639290158815  delta_E= -3.72  |g|= 0.317  |ddm|= 0.301
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.420478
diis-c [-0.17680166  1.        ]
  HOMO = -0.236308611668184  LUMO = 86.3751290170201
  mo_energy =
[-1.20262716e+02 -1.22530716e+01 -6.65314904e+00 -6.65314904e+00
 -6.65314904e+00 -1.16350573e+00 -2.36308612e-01 -2.36308612e-01
 -2.36308612e-01  8.63751290e+01  6.78537313e+02  3.93623261e+03
  2.96207790e+04  1.54739903e+05  6.64892986e+05  2.71962897e+06
  1.10459670e+07  4.65100881e+07]
E1 = -706.5522256287676  E_coul = 198.91250742569886
cycle= 2 E= -507.639718203069  delta_E= -0.000428  |g|= 0.00474  |ddm|= 0.0143
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00504291
diis-c [-2.53861838e-05 -5.03505590e-04  1.00050351e+00]
  HOMO = -0.236483874859156  LUMO = 86.3716096132272
  mo_energy =
[-1.20271359e+02 -1.22542607e+01 -6.65499068e+00 -6.65499068e+00
 -6.65499068e+00 -1.16357051e+00 -2.36483875e-01 -2.36483875e-01
 -2.36483875e-01  8.63716096e+01  6.78526725e+02  3.93621672e+03
  2.96207598e+04  1.54739883e+05  6.64892965e+05  2.71962895e+06
  1.10459670e+07  4.65100881e+07]
E1 = -706.5517852410778  E_coul = 198.9120669278846
cycle= 3 E= -507.639718313193  delta_E= -1.1e-07  |g|= 9.48e-05  |ddm|= 0.000202
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.000126821
diis-c [-3.96075646e-10  3.33895183e-05 -2.54666896e-02  1.02543330e+00]
  HOMO = -0.236486088016416  LUMO = 86.3715649265076
  mo_energy =
[-1.20271472e+02 -1.22542765e+01 -6.65501766e+00 -6.65501766e+00
 -6.65501766e+00 -1.16357117e+00 -2.36486088e-01 -2.36486088e-01
 -2.36486088e-01  8.63715649e+01  6.78526608e+02  3.93621657e+03
  2.96207596e+04  1.54739882e+05  6.64892965e+05  2.71962895e+06
  1.10459670e+07  4.65100881e+07]
E1 = -706.5517779982905  E_coul = 198.91205968505773
cycle= 4 E= -507.639718313233  delta_E= -3.96e-11  |g|= 3.74e-07  |ddm|= 3.45e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.5517779982905  E_coul = 198.91205968505773
  HOMO = -0.236486071702294  LUMO = 86.3715652647768
  mo_energy =
[-1.20271471e+02 -1.22542764e+01 -6.65501750e+00 -6.65501750e+00
 -6.65501750e+00 -1.16357116e+00 -2.36486072e-01 -2.36486072e-01
 -2.36486072e-01  8.63715653e+01  6.78526609e+02  3.93621658e+03
  2.96207596e+04  1.54739882e+05  6.64892965e+05  2.71962895e+06
  1.10459670e+07  4.65100881e+07]
E1 = -706.5517780353184  E_coul = 198.9120597220856
Extra cycle  E= -507.639718313233  delta_E= -5.68e-14  |g|= 6.45e-09  |ddm|= 1.64e-08
    CPU time for scf_cycle      0.10 sec, wall time      0.10 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 56.39307684454819
E1 = -706.5517780353184  E_coul = 198.9120597220856
init E= -507.639718313233
    CPU time for initialize scf      0.12 sec, wall time      0.12 sec
  HOMO = -0.236486071511491  LUMO = 86.3715652689127
  mo_energy =
[-1.20271471e+02 -1.22542764e+01 -6.65501749e+00 -6.65501749e+00
 -6.65501749e+00 -1.16357116e+00 -2.36486072e-01 -2.36486072e-01
 -2.36486072e-01  8.63715653e+01  6.78526609e+02  3.93621658e+03
  2.96207596e+04  1.54739882e+05  6.64892965e+05  2.71962895e+06
  1.10459670e+07  4.65100881e+07]
E1 = -706.5517780358787  E_coul = 198.91205972264564
cycle= 1 E= -507.639718313233  delta_E= -2.27e-13  |g|= 1.55e-10  |ddm|= 2.54e-10
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -706.5517780358787  E_coul = 198.91205972264564
  HOMO = -0.236486071508796  LUMO = 86.3715652689724
  mo_energy =
[-1.20271471e+02 -1.22542764e+01 -6.65501749e+00 -6.65501749e+00
 -6.65501749e+00 -1.16357116e+00 -2.36486072e-01 -2.36486072e-01
 -2.36486072e-01  8.63715653e+01  6.78526609e+02  3.93621658e+03
  2.96207596e+04  1.54739882e+05  6.64892965e+05  2.71962895e+06
  1.10459670e+07  4.65100881e+07]
E1 = -706.551778035888  E_coul = 198.91205972265502
Extra cycle  E= -507.639718313233  delta_E= 1.14e-13  |g|= 2.11e-10  |ddm|= 4.49e-12
    CPU time for scf_cycle      0.19 sec, wall time      0.19 sec
exp = [1.87954849e+07 4.69887121e+06 1.17471780e+06 2.93679451e+05
 7.34198656e+04 1.83538838e+04 2.23420873e+03 4.56861558e+02
 1.21730970e+02 3.75840365e+01 4.74137566e+00 3.91191520e-01
 8.59857011e+00 4.90837717e-01]
grad_E = [-1.11438117e-13  1.80001453e-11  8.54420062e-12  1.05281898e-08
 -3.42292720e-08  6.41702998e-06 -9.39100675e-06 -1.25517639e-06
  3.92724870e-05 -1.15454786e-04  2.48862026e-05 -1.83174989e-04
 -4.71092664e-05 -3.80267028e-04]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="BFGS",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((14, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.6988712134173084e+06,1.1747178033543271e+06,2.9367945083858178e+05,7.3419865393677101e+04,1.8353927627435987e+04,2.2341424145819028e+03,4.5688904996449571e+02,1.2173317272260677e+02,3.7593061247508530e+01,4.7412722556720146e+00,3.9120358491841306e-01,8.5986297237246045e+00,4.9084868336327880e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "12s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:14:40 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  18795484.8537        1
[INPUT] 0    0    [1    /1   ]  4698871.21342        1
[INPUT] 0    0    [1    /1   ]  1174717.80335        1
[INPUT] 0    0    [1    /1   ]  293679.450766        1
[INPUT] 0    0    [1    /1   ]  73419.8656282        1
[INPUT] 0    0    [1    /1   ]  18353.8836083        1
[INPUT] 0    0    [1    /1   ]  2234.20905401        1
[INPUT] 0    0    [1    /1   ]  456.861437034        1
[INPUT] 0    0    [1    /1   ]  121.730873114        1
[INPUT] 0    0    [1    /1   ]  37.5842530649        1
[INPUT] 0    0    [1    /1   ]  4.74131136824        1
[INPUT] 0    0    [1    /1   ]  0.391205896405       1
[INPUT] 1    0    [1    /1   ]  8.598696958          1
[INPUT] 1    0    [1    /1   ]  0.490856599618       1

nuclear repulsion = 0
number of shells = 14
number of NR pGTOs = 18
number of NR cGTOs = 18
basis = {'Ar': [[0, [18795484.853669234, 1.0]], [0, [4698871.213417184, 1.0]], [0, [1174717.803354268, 1.0]], [0, [293679.4507663665, 1.0]], [0, [73419.86562815684, 1.0]], [0, [18353.883608250846, 1.0]], [0, [2234.209054009669, 1.0]], [0, [456.8614370335349, 1.0]], [0, [121.73087311386392, 1.0]], [0, [37.58425306485073, 1.0]], [0, [4.741311368243471, 1.0]], [0, [0.3912058964046522, 1.0]], [1, [8.598696958001318, 1.0]], [1, [0.49085659961837463, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [18795484.85366923]
bas 1, expnt(s) = [4698871.21341718]
bas 2, expnt(s) = [1174717.80335427]
bas 3, expnt(s) = [293679.45076637]
bas 4, expnt(s) = [73419.86562816]
bas 5, expnt(s) = [18353.88360825]
bas 6, expnt(s) = [2234.20905401]
bas 7, expnt(s) = [456.86143703]
bas 8, expnt(s) = [121.73087311]
bas 9, expnt(s) = [37.58425306]
bas 10, expnt(s) = [4.74131137]
bas 11, expnt(s) = [0.3912059]
bas 12, expnt(s) = [8.59869696]
bas 13, expnt(s) = [0.4908566]
CPU time:        61.23
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  0  1  1  0 42 43  0]
 [ 0  0  1  1  0 44 45  0]
 [ 0  0  1  1  0 46 47  0]
 [ 0  1  1  1  0 48 49  0]
 [ 0  1  1  1  0 50 51  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.87954849e+07 7.21199097e+05 4.69887121e+06 2.54982386e+05
 1.17471780e+06 9.01498871e+04 2.93679451e+05 3.18727982e+04
 7.34198656e+04 1.12687362e+04 1.83538836e+04 3.98392363e+03
 2.23420905e+03 8.21027833e+02 4.56861437e+02 2.49662549e+02
 1.21730873e+02 9.25903183e+01 3.75842531e+01 3.83503619e+01
 4.74131137e+00 8.11780999e+00 3.91205896e-01 1.24973827e+00
 8.59869696e+00 4.29561348e+01 4.90856600e-01 1.19860942e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.31996479697286
cond(S) = 56.3931130751369
E1 = -688.8326049179897  E_coul = 184.91592423418524
init E= -503.916680683804
    CPU time for initialize scf      0.03 sec, wall time      0.03 sec
  HOMO = -0.680888085945586  LUMO = 85.0425185758382
  mo_energy =
[-1.21650471e+02 -1.32810392e+01 -7.62156953e+00 -7.62156953e+00
 -7.62156953e+00 -1.65069262e+00 -6.80888086e-01 -6.80888086e-01
 -6.80888086e-01  8.50425186e+01  6.77167263e+02  3.93498152e+03
  2.96196912e+04  1.54738886e+05  6.64891998e+05  2.71962800e+06
  1.10459660e+07  4.65100871e+07]
E1 = -706.5854379273535  E_coul = 198.94614776854957
cycle= 1 E= -507.639290158804  delta_E= -3.72  |g|= 0.317  |ddm|= 0.301
    CPU time for cycle= 1      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.42048
diis-c [-0.17680367  1.        ]
  HOMO = -0.236258413038916  LUMO = 86.3754961891179
  mo_energy =
[-1.20262506e+02 -1.22529379e+01 -6.65303318e+00 -6.65303318e+00
 -6.65303318e+00 -1.16346386e+00 -2.36258413e-01 -2.36258413e-01
 -2.36258413e-01  8.63754962e+01  6.78537779e+02  3.93623306e+03
  2.96207798e+04  1.54739903e+05  6.64892986e+05  2.71962897e+06
  1.10459670e+07  4.65100881e+07]
E1 = -706.553993124279  E_coul = 198.91427488594306
cycle= 2 E= -507.639718238336  delta_E= -0.000428  |g|= 0.00474  |ddm|= 0.0143
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.0050432
diis-c [-2.53890777e-05 -5.03702048e-04  1.00050370e+00]
  HOMO = -0.236433696438181  LUMO = 86.3719766360036
  mo_energy =
[-1.20271148e+02 -1.22541271e+01 -6.65487491e+00 -6.65487491e+00
 -6.65487491e+00 -1.16352865e+00 -2.36433696e-01 -2.36433696e-01
 -2.36433696e-01  8.63719766e+01  6.78527190e+02  3.93621716e+03
  2.96207606e+04  1.54739883e+05  6.64892965e+05  2.71962895e+06
  1.10459670e+07  4.65100881e+07]
E1 = -706.5535527155183  E_coul = 198.91383436704723
cycle= 3 E= -507.639718348471  delta_E= -1.1e-07  |g|= 9.48e-05  |ddm|= 0.000202
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.000126827
diis-c [-3.96094761e-10  3.33893109e-05 -2.54663590e-02  1.02543297e+00]
  HOMO = -0.236435909850354  LUMO = 86.3719319479864
  mo_energy =
[-1.20271262e+02 -1.22541428e+01 -6.65490189e+00 -6.65490189e+00
 -6.65490189e+00 -1.16352930e+00 -2.36435910e-01 -2.36435910e-01
 -2.36435910e-01  8.63719319e+01  6.78527073e+02  3.93621702e+03
  2.96207604e+04  1.54739883e+05  6.64892965e+05  2.71962895e+06
  1.10459670e+07  4.65100881e+07]
E1 = -706.5535454724794  E_coul = 198.91382712396847
cycle= 4 E= -507.639718348511  delta_E= -3.98e-11  |g|= 3.74e-07  |ddm|= 3.45e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.5535454724794  E_coul = 198.91382712396847
  HOMO = -0.236435893534599  LUMO = 86.3719322862728
  mo_energy =
[-1.20271261e+02 -1.22541427e+01 -6.65490173e+00 -6.65490173e+00
 -6.65490173e+00 -1.16352930e+00 -2.36435894e-01 -2.36435894e-01
 -2.36435894e-01  8.63719323e+01  6.78527074e+02  3.93621702e+03
  2.96207604e+04  1.54739883e+05  6.64892965e+05  2.71962895e+06
  1.10459670e+07  4.65100881e+07]
E1 = -706.5535455095082  E_coul = 198.9138271609969
Extra cycle  E= -507.639718348511  delta_E= -3.98e-13  |g|= 6.45e-09  |ddm|= 1.64e-08
    CPU time for scf_cycle      0.10 sec, wall time      0.11 sec
exp = [1.87954849e+07 4.69887121e+06 1.17471780e+06 2.93679451e+05
 7.34198656e+04 1.83538836e+04 2.23420905e+03 4.56861437e+02
 1.21730873e+02 3.75842531e+01 4.74131137e+00 3.91205896e-01
 8.59869696e+00 4.90856600e-01]
E = -507.63971834851134
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="BFGS",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((14, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.6988712134173084e+06,1.1747178033543271e+06,2.9367945083858178e+05,7.3419865393677101e+04,1.8353927627435987e+04,2.2341424145819028e+03,4.5688904996449571e+02,1.2173317272260677e+02,3.7593061247508530e+01,4.7412722556720146e+00,3.9120358491841306e-01,8.5986297237246045e+00,4.9084868336327880e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "12s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:14:40 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  18795484.8537        1
[INPUT] 0    0    [1    /1   ]  4698871.21342        1
[INPUT] 0    0    [1    /1   ]  1174717.80335        1
[INPUT] 0    0    [1    /1   ]  293679.450766        1
[INPUT] 0    0    [1    /1   ]  73419.8656282        1
[INPUT] 0    0    [1    /1   ]  18353.8836083        1
[INPUT] 0    0    [1    /1   ]  2234.20905401        1
[INPUT] 0    0    [1    /1   ]  456.861437034        1
[INPUT] 0    0    [1    /1   ]  121.730873114        1
[INPUT] 0    0    [1    /1   ]  37.5842530649        1
[INPUT] 0    0    [1    /1   ]  4.74131136824        1
[INPUT] 0    0    [1    /1   ]  0.391205896405       1
[INPUT] 1    0    [1    /1   ]  8.598696958          1
[INPUT] 1    0    [1    /1   ]  0.490856599618       1

nuclear repulsion = 0
number of shells = 14
number of NR pGTOs = 18
number of NR cGTOs = 18
basis = {'Ar': [[0, [18795484.853669234, 1.0]], [0, [4698871.213417184, 1.0]], [0, [1174717.803354268, 1.0]], [0, [293679.4507663665, 1.0]], [0, [73419.86562815684, 1.0]], [0, [18353.883608250846, 1.0]], [0, [2234.209054009669, 1.0]], [0, [456.8614370335349, 1.0]], [0, [121.73087311386392, 1.0]], [0, [37.58425306485073, 1.0]], [0, [4.741311368243471, 1.0]], [0, [0.3912058964046522, 1.0]], [1, [8.598696958001318, 1.0]], [1, [0.49085659961837463, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [18795484.85366923]
bas 1, expnt(s) = [4698871.21341718]
bas 2, expnt(s) = [1174717.80335427]
bas 3, expnt(s) = [293679.45076637]
bas 4, expnt(s) = [73419.86562816]
bas 5, expnt(s) = [18353.88360825]
bas 6, expnt(s) = [2234.20905401]
bas 7, expnt(s) = [456.86143703]
bas 8, expnt(s) = [121.73087311]
bas 9, expnt(s) = [37.58425306]
bas 10, expnt(s) = [4.74131137]
bas 11, expnt(s) = [0.3912059]
bas 12, expnt(s) = [8.59869696]
bas 13, expnt(s) = [0.4908566]
CPU time:        61.62
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  0  1  1  0 42 43  0]
 [ 0  0  1  1  0 44 45  0]
 [ 0  0  1  1  0 46 47  0]
 [ 0  1  1  1  0 48 49  0]
 [ 0  1  1  1  0 50 51  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.87954849e+07 7.21199097e+05 4.69887121e+06 2.54982386e+05
 1.17471780e+06 9.01498871e+04 2.93679451e+05 3.18727982e+04
 7.34198656e+04 1.12687362e+04 1.83538836e+04 3.98392363e+03
 2.23420905e+03 8.21027833e+02 4.56861437e+02 2.49662549e+02
 1.21730873e+02 9.25903183e+01 3.75842531e+01 3.83503619e+01
 4.74131137e+00 8.11780999e+00 3.91205896e-01 1.24973827e+00
 8.59869696e+00 4.29561348e+01 4.90856600e-01 1.19860942e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.31996479697286
cond(S) = 56.3931130751369
E1 = -688.8326049179897  E_coul = 184.91592423418524
init E= -503.916680683804
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.680888085945586  LUMO = 85.0425185758382
  mo_energy =
[-1.21650471e+02 -1.32810392e+01 -7.62156953e+00 -7.62156953e+00
 -7.62156953e+00 -1.65069262e+00 -6.80888086e-01 -6.80888086e-01
 -6.80888086e-01  8.50425186e+01  6.77167263e+02  3.93498152e+03
  2.96196912e+04  1.54738886e+05  6.64891998e+05  2.71962800e+06
  1.10459660e+07  4.65100871e+07]
E1 = -706.5854379273535  E_coul = 198.94614776854957
cycle= 1 E= -507.639290158804  delta_E= -3.72  |g|= 0.317  |ddm|= 0.301
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.42048
diis-c [-0.17680367  1.        ]
  HOMO = -0.236258413038916  LUMO = 86.3754961891179
  mo_energy =
[-1.20262506e+02 -1.22529379e+01 -6.65303318e+00 -6.65303318e+00
 -6.65303318e+00 -1.16346386e+00 -2.36258413e-01 -2.36258413e-01
 -2.36258413e-01  8.63754962e+01  6.78537779e+02  3.93623306e+03
  2.96207798e+04  1.54739903e+05  6.64892986e+05  2.71962897e+06
  1.10459670e+07  4.65100881e+07]
E1 = -706.553993124279  E_coul = 198.91427488594306
cycle= 2 E= -507.639718238336  delta_E= -0.000428  |g|= 0.00474  |ddm|= 0.0143
    CPU time for cycle= 2      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.0050432
diis-c [-2.53890777e-05 -5.03702048e-04  1.00050370e+00]
  HOMO = -0.236433696438181  LUMO = 86.3719766360036
  mo_energy =
[-1.20271148e+02 -1.22541271e+01 -6.65487491e+00 -6.65487491e+00
 -6.65487491e+00 -1.16352865e+00 -2.36433696e-01 -2.36433696e-01
 -2.36433696e-01  8.63719766e+01  6.78527190e+02  3.93621716e+03
  2.96207606e+04  1.54739883e+05  6.64892965e+05  2.71962895e+06
  1.10459670e+07  4.65100881e+07]
E1 = -706.5535527155183  E_coul = 198.91383436704723
cycle= 3 E= -507.639718348471  delta_E= -1.1e-07  |g|= 9.48e-05  |ddm|= 0.000202
    CPU time for cycle= 3      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.000126827
diis-c [-3.96094761e-10  3.33893109e-05 -2.54663590e-02  1.02543297e+00]
  HOMO = -0.236435909850354  LUMO = 86.3719319479864
  mo_energy =
[-1.20271262e+02 -1.22541428e+01 -6.65490189e+00 -6.65490189e+00
 -6.65490189e+00 -1.16352930e+00 -2.36435910e-01 -2.36435910e-01
 -2.36435910e-01  8.63719319e+01  6.78527073e+02  3.93621702e+03
  2.96207604e+04  1.54739883e+05  6.64892965e+05  2.71962895e+06
  1.10459670e+07  4.65100881e+07]
E1 = -706.5535454724794  E_coul = 198.91382712396847
cycle= 4 E= -507.639718348511  delta_E= -3.98e-11  |g|= 3.74e-07  |ddm|= 3.45e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.5535454724794  E_coul = 198.91382712396847
  HOMO = -0.236435893534599  LUMO = 86.3719322862728
  mo_energy =
[-1.20271261e+02 -1.22541427e+01 -6.65490173e+00 -6.65490173e+00
 -6.65490173e+00 -1.16352930e+00 -2.36435894e-01 -2.36435894e-01
 -2.36435894e-01  8.63719323e+01  6.78527074e+02  3.93621702e+03
  2.96207604e+04  1.54739883e+05  6.64892965e+05  2.71962895e+06
  1.10459670e+07  4.65100881e+07]
E1 = -706.5535455095082  E_coul = 198.9138271609969
Extra cycle  E= -507.639718348511  delta_E= -3.98e-13  |g|= 6.45e-09  |ddm|= 1.64e-08
    CPU time for scf_cycle      0.10 sec, wall time      0.10 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 56.3931130751369
E1 = -706.5535455095082  E_coul = 198.9138271609969
init E= -507.639718348511
    CPU time for initialize scf      0.12 sec, wall time      0.12 sec
  HOMO = -0.236435893343774  LUMO = 86.3719322904061
  mo_energy =
[-1.20271261e+02 -1.22541427e+01 -6.65490173e+00 -6.65490173e+00
 -6.65490173e+00 -1.16352930e+00 -2.36435893e-01 -2.36435893e-01
 -2.36435893e-01  8.63719323e+01  6.78527074e+02  3.93621702e+03
  2.96207604e+04  1.54739883e+05  6.64892965e+05  2.71962895e+06
  1.10459670e+07  4.65100881e+07]
E1 = -706.5535455100683  E_coul = 198.9138271615572
cycle= 1 E= -507.639718348511  delta_E= 2.84e-13  |g|= 2.12e-10  |ddm|= 2.54e-10
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -706.5535455100683  E_coul = 198.9138271615572
  HOMO = -0.236435893341085  LUMO = 86.3719322904643
  mo_energy =
[-1.20271261e+02 -1.22541427e+01 -6.65490173e+00 -6.65490173e+00
 -6.65490173e+00 -1.16352930e+00 -2.36435893e-01 -2.36435893e-01
 -2.36435893e-01  8.63719323e+01  6.78527074e+02  3.93621702e+03
  2.96207604e+04  1.54739883e+05  6.64892965e+05  2.71962895e+06
  1.10459670e+07  4.65100881e+07]
E1 = -706.5535455100779  E_coul = 198.9138271615668
Extra cycle  E= -507.639718348511  delta_E= -5.68e-14  |g|= 1.16e-10  |ddm|= 4.5e-12
    CPU time for scf_cycle      0.19 sec, wall time      0.19 sec
exp = [1.87954849e+07 4.69887121e+06 1.17471780e+06 2.93679451e+05
 7.34198656e+04 1.83538836e+04 2.23420905e+03 4.56861437e+02
 1.21730873e+02 3.75842531e+01 4.74131137e+00 3.91205896e-01
 8.59869696e+00 4.90856600e-01]
grad_E = [-1.11436807e-13  1.80002124e-11  8.54485215e-12  1.05282279e-08
 -3.42290520e-08  6.41705893e-06 -9.39497700e-06 -1.15273059e-06
  3.83848620e-05 -1.12618609e-04 -1.76587383e-05  1.16384833e-04
  3.95656660e-05  2.32077277e-04]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="BFGS",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((14, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.6988712134173084e+06,1.1747178033543271e+06,2.9367945083858178e+05,7.3419865393677101e+04,1.8353927627435987e+04,2.2341424145819028e+03,4.5688904996449571e+02,1.2173317272260677e+02,3.7593061247508530e+01,4.7412722556720146e+00,3.9120358491841306e-01,8.5986297237246045e+00,4.9084868336327880e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "12s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:14:44 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  18795484.8537        1
[INPUT] 0    0    [1    /1   ]  4698871.21342        1
[INPUT] 0    0    [1    /1   ]  1174717.80335        1
[INPUT] 0    0    [1    /1   ]  293679.450768        1
[INPUT] 0    0    [1    /1   ]  73419.8656238        1
[INPUT] 0    0    [1    /1   ]  18353.8844345        1
[INPUT] 0    0    [1    /1   ]  2234.20780218        1
[INPUT] 0    0    [1    /1   ]  456.861971446        1
[INPUT] 0    0    [1    /1   ]  121.730797602        1
[INPUT] 0    0    [1    /1   ]  37.5847740805        1
[INPUT] 0    0    [1    /1   ]  4.74126863147        1
[INPUT] 0    0    [1    /1   ]  0.391215109729       1
[INPUT] 1    0    [1    /1   ]  8.59877430917        1
[INPUT] 1    0    [1    /1   ]  0.490868435866       1

nuclear repulsion = 0
number of shells = 14
number of NR pGTOs = 18
number of NR cGTOs = 18
basis = {'Ar': [[0, [18795484.853669234, 1.0]], [0, [4698871.2134171855, 1.0]], [0, [1174717.8033542691, 1.0]], [0, [293679.450767722, 1.0]], [0, [73419.86562375573, 1.0]], [0, [18353.884434503212, 1.0]], [0, [2234.2078021799125, 1.0]], [0, [456.86197144576613, 1.0]], [0, [121.73079760181238, 1.0]], [0, [37.58477408049019, 1.0]], [0, [4.741268631465067, 1.0]], [0, [0.3912151097292765, 1.0]], [1, [8.598774309166094, 1.0]], [1, [0.4908684358656814, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [18795484.85366923]
bas 1, expnt(s) = [4698871.21341719]
bas 2, expnt(s) = [1174717.80335427]
bas 3, expnt(s) = [293679.45076772]
bas 4, expnt(s) = [73419.86562376]
bas 5, expnt(s) = [18353.8844345]
bas 6, expnt(s) = [2234.20780218]
bas 7, expnt(s) = [456.86197145]
bas 8, expnt(s) = [121.7307976]
bas 9, expnt(s) = [37.58477408]
bas 10, expnt(s) = [4.74126863]
bas 11, expnt(s) = [0.39121511]
bas 12, expnt(s) = [8.59877431]
bas 13, expnt(s) = [0.49086844]
CPU time:        64.75
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  0  1  1  0 42 43  0]
 [ 0  0  1  1  0 44 45  0]
 [ 0  0  1  1  0 46 47  0]
 [ 0  1  1  1  0 48 49  0]
 [ 0  1  1  1  0 50 51  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.87954849e+07 7.21199097e+05 4.69887121e+06 2.54982386e+05
 1.17471780e+06 9.01498871e+04 2.93679451e+05 3.18727982e+04
 7.34198656e+04 1.12687362e+04 1.83538844e+04 3.98392376e+03
 2.23420780e+03 8.21027488e+02 4.56861971e+02 2.49662768e+02
 1.21730798e+02 9.25902752e+01 3.75847741e+01 3.83507607e+01
 4.74126863e+00 8.11775511e+00 3.91215110e-01 1.24976034e+00
 8.59877431e+00 4.29566179e+01 4.90868436e-01 1.19864555e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319948847146378
cond(S) = 56.39323084890123
E1 = -688.8334359727281  E_coul = 184.91676126552935
init E= -503.916674707199
    CPU time for initialize scf      0.03 sec, wall time      0.03 sec
  HOMO = -0.680870413361927  LUMO = 85.0435053412867
  mo_energy =
[-1.21650354e+02 -1.32809750e+01 -7.62151376e+00 -7.62151376e+00
 -7.62151376e+00 -1.65067931e+00 -6.80870413e-01 -6.80870413e-01
 -6.80870413e-01  8.50435053e+01  6.77169427e+02  3.93498335e+03
  2.96196910e+04  1.54738887e+05  6.64892000e+05  2.71962800e+06
  1.10459660e+07  4.65100871e+07]
E1 = -706.5865518370972  E_coul = 198.9472616630466
cycle= 1 E= -507.639290174051  delta_E= -3.72  |g|= 0.317  |ddm|= 0.301
    CPU time for cycle= 1      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.420483
diis-c [-0.17680581  1.        ]
  HOMO = -0.236226786158507  LUMO = 86.3765050980303
  mo_energy =
[-1.20262369e+02 -1.22528568e+01 -6.65296030e+00 -6.65296030e+00
 -6.65296030e+00 -1.16343778e+00 -2.36226786e-01 -2.36226786e-01
 -2.36226786e-01  8.63765051e+01  6.78539964e+02  3.93623491e+03
  2.96207797e+04  1.54739904e+05  6.64892987e+05  2.71962897e+06
  1.10459670e+07  4.65100881e+07]
E1 = -706.5551067261168  E_coul = 198.91538845804402
cycle= 2 E= -507.639718268073  delta_E= -0.000428  |g|= 0.00474  |ddm|= 0.0143
    CPU time for cycle= 2      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.00504332
diis-c [-2.53902284e-05 -5.03938052e-04  1.00050394e+00]
  HOMO = -0.23640207902716  LUMO = 86.3729855103113
  mo_energy =
[-1.20271012e+02 -1.22540459e+01 -6.65480206e+00 -6.65480206e+00
 -6.65480206e+00 -1.16350257e+00 -2.36402079e-01 -2.36402079e-01
 -2.36402079e-01  8.63729855e+01  6.78529375e+02  3.93621901e+03
  2.96207605e+04  1.54739884e+05  6.64892967e+05  2.71962895e+06
  1.10459670e+07  4.65100881e+07]
E1 = -706.5546663132692  E_coul = 198.91494793505626
cycle= 3 E= -507.639718378213  delta_E= -1.1e-07  |g|= 9.48e-05  |ddm|= 0.000202
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.000126828
diis-c [-3.96094972e-10  3.33900954e-05 -2.54660064e-02  1.02543262e+00]
  HOMO = -0.236404292531971  LUMO = 86.3729408228156
  mo_energy =
[-1.20271125e+02 -1.22540617e+01 -6.65482903e+00 -6.65482903e+00
 -6.65482903e+00 -1.16350323e+00 -2.36404293e-01 -2.36404293e-01
 -2.36404293e-01  8.63729408e+01  6.78529258e+02  3.93621887e+03
  2.96207603e+04  1.54739884e+05  6.64892967e+05  2.71962895e+06
  1.10459670e+07  4.65100881e+07]
E1 = -706.5546590702971  E_coul = 198.9149406920448
cycle= 4 E= -507.639718378252  delta_E= -3.94e-11  |g|= 3.74e-07  |ddm|= 3.45e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.5546590702971  E_coul = 198.9149406920448
  HOMO = -0.236404276215688  LUMO = 86.3729411610984
  mo_energy =
[-1.20271125e+02 -1.22540616e+01 -6.65482887e+00 -6.65482887e+00
 -6.65482887e+00 -1.16350322e+00 -2.36404276e-01 -2.36404276e-01
 -2.36404276e-01  8.63729412e+01  6.78529259e+02  3.93621887e+03
  2.96207603e+04  1.54739884e+05  6.64892967e+05  2.71962895e+06
  1.10459670e+07  4.65100881e+07]
E1 = -706.5546591073261  E_coul = 198.91494072907335
Extra cycle  E= -507.639718378253  delta_E= -3.98e-13  |g|= 6.45e-09  |ddm|= 1.64e-08
    CPU time for scf_cycle      0.10 sec, wall time      0.11 sec
exp = [1.87954849e+07 4.69887121e+06 1.17471780e+06 2.93679451e+05
 7.34198656e+04 1.83538844e+04 2.23420780e+03 4.56861971e+02
 1.21730798e+02 3.75847741e+01 4.74126863e+00 3.91215110e-01
 8.59877431e+00 4.90868436e-01]
E = -507.6397183782527
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="BFGS",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((14, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.6988712134173084e+06,1.1747178033543271e+06,2.9367945083858178e+05,7.3419865393677101e+04,1.8353927627435987e+04,2.2341424145819028e+03,4.5688904996449571e+02,1.2173317272260677e+02,3.7593061247508530e+01,4.7412722556720146e+00,3.9120358491841306e-01,8.5986297237246045e+00,4.9084868336327880e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "12s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:14:44 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  18795484.8537        1
[INPUT] 0    0    [1    /1   ]  4698871.21342        1
[INPUT] 0    0    [1    /1   ]  1174717.80335        1
[INPUT] 0    0    [1    /1   ]  293679.450768        1
[INPUT] 0    0    [1    /1   ]  73419.8656238        1
[INPUT] 0    0    [1    /1   ]  18353.8844345        1
[INPUT] 0    0    [1    /1   ]  2234.20780218        1
[INPUT] 0    0    [1    /1   ]  456.861971446        1
[INPUT] 0    0    [1    /1   ]  121.730797602        1
[INPUT] 0    0    [1    /1   ]  37.5847740805        1
[INPUT] 0    0    [1    /1   ]  4.74126863147        1
[INPUT] 0    0    [1    /1   ]  0.391215109729       1
[INPUT] 1    0    [1    /1   ]  8.59877430917        1
[INPUT] 1    0    [1    /1   ]  0.490868435866       1

nuclear repulsion = 0
number of shells = 14
number of NR pGTOs = 18
number of NR cGTOs = 18
basis = {'Ar': [[0, [18795484.853669234, 1.0]], [0, [4698871.2134171855, 1.0]], [0, [1174717.8033542691, 1.0]], [0, [293679.450767722, 1.0]], [0, [73419.86562375573, 1.0]], [0, [18353.884434503212, 1.0]], [0, [2234.2078021799125, 1.0]], [0, [456.86197144576613, 1.0]], [0, [121.73079760181238, 1.0]], [0, [37.58477408049019, 1.0]], [0, [4.741268631465067, 1.0]], [0, [0.3912151097292765, 1.0]], [1, [8.598774309166094, 1.0]], [1, [0.4908684358656814, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [18795484.85366923]
bas 1, expnt(s) = [4698871.21341719]
bas 2, expnt(s) = [1174717.80335427]
bas 3, expnt(s) = [293679.45076772]
bas 4, expnt(s) = [73419.86562376]
bas 5, expnt(s) = [18353.8844345]
bas 6, expnt(s) = [2234.20780218]
bas 7, expnt(s) = [456.86197145]
bas 8, expnt(s) = [121.7307976]
bas 9, expnt(s) = [37.58477408]
bas 10, expnt(s) = [4.74126863]
bas 11, expnt(s) = [0.39121511]
bas 12, expnt(s) = [8.59877431]
bas 13, expnt(s) = [0.49086844]
CPU time:        65.16
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  0  1  1  0 42 43  0]
 [ 0  0  1  1  0 44 45  0]
 [ 0  0  1  1  0 46 47  0]
 [ 0  1  1  1  0 48 49  0]
 [ 0  1  1  1  0 50 51  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.87954849e+07 7.21199097e+05 4.69887121e+06 2.54982386e+05
 1.17471780e+06 9.01498871e+04 2.93679451e+05 3.18727982e+04
 7.34198656e+04 1.12687362e+04 1.83538844e+04 3.98392376e+03
 2.23420780e+03 8.21027488e+02 4.56861971e+02 2.49662768e+02
 1.21730798e+02 9.25902752e+01 3.75847741e+01 3.83507607e+01
 4.74126863e+00 8.11775511e+00 3.91215110e-01 1.24976034e+00
 8.59877431e+00 4.29566179e+01 4.90868436e-01 1.19864555e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319948847146378
cond(S) = 56.39323084890123
E1 = -688.8334359727281  E_coul = 184.91676126552935
init E= -503.916674707199
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.680870413361927  LUMO = 85.0435053412867
  mo_energy =
[-1.21650354e+02 -1.32809750e+01 -7.62151376e+00 -7.62151376e+00
 -7.62151376e+00 -1.65067931e+00 -6.80870413e-01 -6.80870413e-01
 -6.80870413e-01  8.50435053e+01  6.77169427e+02  3.93498335e+03
  2.96196910e+04  1.54738887e+05  6.64892000e+05  2.71962800e+06
  1.10459660e+07  4.65100871e+07]
E1 = -706.5865518370972  E_coul = 198.9472616630466
cycle= 1 E= -507.639290174051  delta_E= -3.72  |g|= 0.317  |ddm|= 0.301
    CPU time for cycle= 1      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.420483
diis-c [-0.17680581  1.        ]
  HOMO = -0.236226786158507  LUMO = 86.3765050980303
  mo_energy =
[-1.20262369e+02 -1.22528568e+01 -6.65296030e+00 -6.65296030e+00
 -6.65296030e+00 -1.16343778e+00 -2.36226786e-01 -2.36226786e-01
 -2.36226786e-01  8.63765051e+01  6.78539964e+02  3.93623491e+03
  2.96207797e+04  1.54739904e+05  6.64892987e+05  2.71962897e+06
  1.10459670e+07  4.65100881e+07]
E1 = -706.5551067261168  E_coul = 198.91538845804402
cycle= 2 E= -507.639718268073  delta_E= -0.000428  |g|= 0.00474  |ddm|= 0.0143
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00504332
diis-c [-2.53902284e-05 -5.03938052e-04  1.00050394e+00]
  HOMO = -0.23640207902716  LUMO = 86.3729855103113
  mo_energy =
[-1.20271012e+02 -1.22540459e+01 -6.65480206e+00 -6.65480206e+00
 -6.65480206e+00 -1.16350257e+00 -2.36402079e-01 -2.36402079e-01
 -2.36402079e-01  8.63729855e+01  6.78529375e+02  3.93621901e+03
  2.96207605e+04  1.54739884e+05  6.64892967e+05  2.71962895e+06
  1.10459670e+07  4.65100881e+07]
E1 = -706.5546663132692  E_coul = 198.91494793505626
cycle= 3 E= -507.639718378213  delta_E= -1.1e-07  |g|= 9.48e-05  |ddm|= 0.000202
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.000126828
diis-c [-3.96094972e-10  3.33900954e-05 -2.54660064e-02  1.02543262e+00]
  HOMO = -0.236404292531971  LUMO = 86.3729408228156
  mo_energy =
[-1.20271125e+02 -1.22540617e+01 -6.65482903e+00 -6.65482903e+00
 -6.65482903e+00 -1.16350323e+00 -2.36404293e-01 -2.36404293e-01
 -2.36404293e-01  8.63729408e+01  6.78529258e+02  3.93621887e+03
  2.96207603e+04  1.54739884e+05  6.64892967e+05  2.71962895e+06
  1.10459670e+07  4.65100881e+07]
E1 = -706.5546590702971  E_coul = 198.9149406920448
cycle= 4 E= -507.639718378252  delta_E= -3.94e-11  |g|= 3.74e-07  |ddm|= 3.45e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.5546590702971  E_coul = 198.9149406920448
  HOMO = -0.236404276215688  LUMO = 86.3729411610984
  mo_energy =
[-1.20271125e+02 -1.22540616e+01 -6.65482887e+00 -6.65482887e+00
 -6.65482887e+00 -1.16350322e+00 -2.36404276e-01 -2.36404276e-01
 -2.36404276e-01  8.63729412e+01  6.78529259e+02  3.93621887e+03
  2.96207603e+04  1.54739884e+05  6.64892967e+05  2.71962895e+06
  1.10459670e+07  4.65100881e+07]
E1 = -706.5546591073261  E_coul = 198.91494072907335
Extra cycle  E= -507.639718378253  delta_E= -3.98e-13  |g|= 6.45e-09  |ddm|= 1.64e-08
    CPU time for scf_cycle      0.10 sec, wall time      0.11 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 56.39323084890123
E1 = -706.5546591073261  E_coul = 198.91494072907335
init E= -507.639718378253
    CPU time for initialize scf      0.12 sec, wall time      0.12 sec
  HOMO = -0.236404276024851  LUMO = 86.3729411652286
  mo_energy =
[-1.20271125e+02 -1.22540616e+01 -6.65482887e+00 -6.65482887e+00
 -6.65482887e+00 -1.16350322e+00 -2.36404276e-01 -2.36404276e-01
 -2.36404276e-01  8.63729412e+01  6.78529259e+02  3.93621887e+03
  2.96207603e+04  1.54739884e+05  6.64892967e+05  2.71962895e+06
  1.10459670e+07  4.65100881e+07]
E1 = -706.5546591078868  E_coul = 198.91494072963388
cycle= 1 E= -507.639718378253  delta_E= -1.71e-13  |g|= 2.2e-10  |ddm|= 2.54e-10
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -706.5546591078868  E_coul = 198.91494072963388
  HOMO = -0.236404276022159  LUMO = 86.3729411652897
  mo_energy =
[-1.20271125e+02 -1.22540616e+01 -6.65482887e+00 -6.65482887e+00
 -6.65482887e+00 -1.16350322e+00 -2.36404276e-01 -2.36404276e-01
 -2.36404276e-01  8.63729412e+01  6.78529259e+02  3.93621887e+03
  2.96207603e+04  1.54739884e+05  6.64892967e+05  2.71962895e+06
  1.10459670e+07  4.65100881e+07]
E1 = -706.5546591078959  E_coul = 198.91494072964323
Extra cycle  E= -507.639718378253  delta_E= 2.84e-13  |g|= 1.64e-10  |ddm|= 4.47e-12
    CPU time for scf_cycle      0.19 sec, wall time      0.19 sec
exp = [1.87954849e+07 4.69887121e+06 1.17471780e+06 2.93679451e+05
 7.34198656e+04 1.83538844e+04 2.23420780e+03 4.56861971e+02
 1.21730798e+02 3.75847741e+01 4.74126863e+00 3.91215110e-01
 8.59877431e+00 4.90868436e-01]
grad_E = [-1.11431084e-13  1.80005712e-11  8.54786473e-12  1.05284326e-08
 -3.42281185e-08  6.41720363e-06 -9.40880054e-06 -8.79444576e-07
  3.61429036e-05 -1.05675456e-04 -4.39906249e-05  3.04809162e-04
  9.27576279e-05  6.18697831e-04]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="BFGS",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((14, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.6988712134173084e+06,1.1747178033543271e+06,2.9367945083858178e+05,7.3419865393677101e+04,1.8353927627435987e+04,2.2341424145819028e+03,4.5688904996449571e+02,1.2173317272260677e+02,3.7593061247508530e+01,4.7412722556720146e+00,3.9120358491841306e-01,8.5986297237246045e+00,4.9084868336327880e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "12s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:14:47 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  18795484.8537        1
[INPUT] 0    0    [1    /1   ]  4698871.21342        1
[INPUT] 0    0    [1    /1   ]  1174717.80335        1
[INPUT] 0    0    [1    /1   ]  293679.450768        1
[INPUT] 0    0    [1    /1   ]  73419.865624         1
[INPUT] 0    0    [1    /1   ]  18353.8843869        1
[INPUT] 0    0    [1    /1   ]  2234.20787244        1
[INPUT] 0    0    [1    /1   ]  456.861971857        1
[INPUT] 0    0    [1    /1   ]  121.730572454        1
[INPUT] 0    0    [1    /1   ]  37.5854313771        1
[INPUT] 0    0    [1    /1   ]  4.74122620032        1
[INPUT] 0    0    [1    /1   ]  0.39122407855        1
[INPUT] 1    0    [1    /1   ]  8.59884792536        1
[INPUT] 1    0    [1    /1   ]  0.490879844216       1

nuclear repulsion = 0
number of shells = 14
number of NR pGTOs = 18
number of NR cGTOs = 18
basis = {'Ar': [[0, [18795484.853669234, 1.0]], [0, [4698871.2134171855, 1.0]], [0, [1174717.8033542691, 1.0]], [0, [293679.4507676438, 1.0]], [0, [73419.86562400978, 1.0]], [0, [18353.884386861075, 1.0]], [0, [2234.207872436971, 1.0]], [0, [456.8619718571348, 1.0]], [0, [121.73057245449395, 1.0]], [0, [37.585431377144474, 1.0]], [0, [4.741226200317416, 1.0]], [0, [0.39122407855011776, 1.0]], [1, [8.598847925356608, 1.0]], [1, [0.49087984421632574, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [18795484.85366923]
bas 1, expnt(s) = [4698871.21341719]
bas 2, expnt(s) = [1174717.80335427]
bas 3, expnt(s) = [293679.45076764]
bas 4, expnt(s) = [73419.86562401]
bas 5, expnt(s) = [18353.88438686]
bas 6, expnt(s) = [2234.20787244]
bas 7, expnt(s) = [456.86197186]
bas 8, expnt(s) = [121.73057245]
bas 9, expnt(s) = [37.58543138]
bas 10, expnt(s) = [4.7412262]
bas 11, expnt(s) = [0.39122408]
bas 12, expnt(s) = [8.59884793]
bas 13, expnt(s) = [0.49087984]
CPU time:        68.32
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  0  1  1  0 42 43  0]
 [ 0  0  1  1  0 44 45  0]
 [ 0  0  1  1  0 46 47  0]
 [ 0  1  1  1  0 48 49  0]
 [ 0  1  1  1  0 50 51  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.87954849e+07 7.21199097e+05 4.69887121e+06 2.54982386e+05
 1.17471780e+06 9.01498871e+04 2.93679451e+05 3.18727982e+04
 7.34198656e+04 1.12687362e+04 1.83538844e+04 3.98392375e+03
 2.23420787e+03 8.21027507e+02 4.56861972e+02 2.49662768e+02
 1.21730572e+02 9.25901468e+01 3.75854314e+01 3.83512637e+01
 4.74122620e+00 8.11770063e+00 3.91224079e-01 1.24978183e+00
 8.59884793e+00 4.29570776e+01 4.90879844e-01 1.19868037e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319933471064267
cond(S) = 56.39338402695789
E1 = -688.8342252239534  E_coul = 184.91756581632794
init E= -503.916659407625
    CPU time for initialize scf      0.03 sec, wall time      0.03 sec
  HOMO = -0.680853323137502  LUMO = 85.0447081786784
  mo_energy =
[-1.21650242e+02 -1.32809144e+01 -7.62146011e+00 -7.62146011e+00
 -7.62146011e+00 -1.65066659e+00 -6.80853323e-01 -6.80853323e-01
 -6.80853323e-01  8.50447082e+01  6.77171257e+02  3.93498493e+03
  2.96196924e+04  1.54738888e+05  6.64892001e+05  2.71962800e+06
  1.10459660e+07  4.65100871e+07]
E1 = -706.5876278503667  E_coul = 198.9483376361493
cycle= 1 E= -507.639290214217  delta_E= -3.72  |g|= 0.317  |ddm|= 0.301
    CPU time for cycle= 1      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.420486
diis-c [-0.17680836  1.        ]
  HOMO = -0.236196233043962  LUMO = 86.3777304185511
  mo_energy =
[-1.20262236e+02 -1.22527798e+01 -6.65288995e+00 -6.65288995e+00
 -6.65288995e+00 -1.16341272e+00 -2.36196233e-01 -2.36196233e-01
 -2.36196233e-01  8.63777304e+01  6.78541817e+02  3.93623651e+03
  2.96207811e+04  1.54739905e+05  6.64892988e+05  2.71962898e+06
  1.10459670e+07  4.65100881e+07]
E1 = -706.5561826438407  E_coul = 198.91646432432424
cycle= 2 E= -507.639718319516  delta_E= -0.000428  |g|= 0.00474  |ddm|= 0.0143
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00504341
diis-c [-2.53910667e-05 -5.04213628e-04  1.00050421e+00]
  HOMO = -0.236371533951556  LUMO = 86.3742108208113
  mo_energy =
[-1.20270879e+02 -1.22539690e+01 -6.65473171e+00 -6.65473171e+00
 -6.65473171e+00 -1.16347751e+00 -2.36371534e-01 -2.36371534e-01
 -2.36371534e-01  8.63742108e+01  6.78531228e+02  3.93622062e+03
  2.96207619e+04  1.54739885e+05  6.64892968e+05  2.71962895e+06
  1.10459670e+07  4.65100881e+07]
E1 = -706.5557422301088  E_coul = 198.91602380044907
cycle= 3 E= -507.63971842966  delta_E= -1.1e-07  |g|= 9.48e-05  |ddm|= 0.000202
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.000126828
diis-c [-3.96084523e-10  3.33920241e-05 -2.54656227e-02  1.02543223e+00]
  HOMO = -0.236373747521699  LUMO = 86.3741661343233
  mo_energy =
[-1.20270992e+02 -1.22539847e+01 -6.65475869e+00 -6.65475869e+00
 -6.65475869e+00 -1.16347816e+00 -2.36373748e-01 -2.36373748e-01
 -2.36373748e-01  8.63741661e+01  6.78531111e+02  3.93622047e+03
  2.96207617e+04  1.54739885e+05  6.64892968e+05  2.71962895e+06
  1.10459670e+07  4.65100881e+07]
E1 = -706.5557349872812  E_coul = 198.9160165575814
cycle= 4 E= -507.6397184297  delta_E= -4.01e-11  |g|= 3.74e-07  |ddm|= 3.45e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.5557349872812  E_coul = 198.9160165575814
  HOMO = -0.236373731205177  LUMO = 86.3741664725929
  mo_energy =
[-1.20270991e+02 -1.22539846e+01 -6.65475853e+00 -6.65475853e+00
 -6.65475853e+00 -1.16347816e+00 -2.36373731e-01 -2.36373731e-01
 -2.36373731e-01  8.63741665e+01  6.78531112e+02  3.93622047e+03
  2.96207617e+04  1.54739885e+05  6.64892968e+05  2.71962895e+06
  1.10459670e+07  4.65100881e+07]
E1 = -706.5557350243083  E_coul = 198.91601659460895
Extra cycle  E= -507.639718429699  delta_E= 3.98e-13  |g|= 6.45e-09  |ddm|= 1.64e-08
    CPU time for scf_cycle      0.11 sec, wall time      0.11 sec
exp = [1.87954849e+07 4.69887121e+06 1.17471780e+06 2.93679451e+05
 7.34198656e+04 1.83538844e+04 2.23420787e+03 4.56861972e+02
 1.21730572e+02 3.75854314e+01 4.74122620e+00 3.91224079e-01
 8.59884793e+00 4.90879844e-01]
E = -507.63971842969937
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="BFGS",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((14, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.6988712134173084e+06,1.1747178033543271e+06,2.9367945083858178e+05,7.3419865393677101e+04,1.8353927627435987e+04,2.2341424145819028e+03,4.5688904996449571e+02,1.2173317272260677e+02,3.7593061247508530e+01,4.7412722556720146e+00,3.9120358491841306e-01,8.5986297237246045e+00,4.9084868336327880e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "12s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:14:48 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  18795484.8537        1
[INPUT] 0    0    [1    /1   ]  4698871.21342        1
[INPUT] 0    0    [1    /1   ]  1174717.80335        1
[INPUT] 0    0    [1    /1   ]  293679.450768        1
[INPUT] 0    0    [1    /1   ]  73419.865624         1
[INPUT] 0    0    [1    /1   ]  18353.8843869        1
[INPUT] 0    0    [1    /1   ]  2234.20787244        1
[INPUT] 0    0    [1    /1   ]  456.861971857        1
[INPUT] 0    0    [1    /1   ]  121.730572454        1
[INPUT] 0    0    [1    /1   ]  37.5854313771        1
[INPUT] 0    0    [1    /1   ]  4.74122620032        1
[INPUT] 0    0    [1    /1   ]  0.39122407855        1
[INPUT] 1    0    [1    /1   ]  8.59884792536        1
[INPUT] 1    0    [1    /1   ]  0.490879844216       1

nuclear repulsion = 0
number of shells = 14
number of NR pGTOs = 18
number of NR cGTOs = 18
basis = {'Ar': [[0, [18795484.853669234, 1.0]], [0, [4698871.2134171855, 1.0]], [0, [1174717.8033542691, 1.0]], [0, [293679.4507676438, 1.0]], [0, [73419.86562400978, 1.0]], [0, [18353.884386861075, 1.0]], [0, [2234.207872436971, 1.0]], [0, [456.8619718571348, 1.0]], [0, [121.73057245449395, 1.0]], [0, [37.585431377144474, 1.0]], [0, [4.741226200317416, 1.0]], [0, [0.39122407855011776, 1.0]], [1, [8.598847925356608, 1.0]], [1, [0.49087984421632574, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [18795484.85366923]
bas 1, expnt(s) = [4698871.21341719]
bas 2, expnt(s) = [1174717.80335427]
bas 3, expnt(s) = [293679.45076764]
bas 4, expnt(s) = [73419.86562401]
bas 5, expnt(s) = [18353.88438686]
bas 6, expnt(s) = [2234.20787244]
bas 7, expnt(s) = [456.86197186]
bas 8, expnt(s) = [121.73057245]
bas 9, expnt(s) = [37.58543138]
bas 10, expnt(s) = [4.7412262]
bas 11, expnt(s) = [0.39122408]
bas 12, expnt(s) = [8.59884793]
bas 13, expnt(s) = [0.49087984]
CPU time:        68.75
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  0  1  1  0 42 43  0]
 [ 0  0  1  1  0 44 45  0]
 [ 0  0  1  1  0 46 47  0]
 [ 0  1  1  1  0 48 49  0]
 [ 0  1  1  1  0 50 51  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.87954849e+07 7.21199097e+05 4.69887121e+06 2.54982386e+05
 1.17471780e+06 9.01498871e+04 2.93679451e+05 3.18727982e+04
 7.34198656e+04 1.12687362e+04 1.83538844e+04 3.98392375e+03
 2.23420787e+03 8.21027507e+02 4.56861972e+02 2.49662768e+02
 1.21730572e+02 9.25901468e+01 3.75854314e+01 3.83512637e+01
 4.74122620e+00 8.11770063e+00 3.91224079e-01 1.24978183e+00
 8.59884793e+00 4.29570776e+01 4.90879844e-01 1.19868037e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319933471064267
cond(S) = 56.39338402695789
E1 = -688.8342252239534  E_coul = 184.91756581632794
init E= -503.916659407625
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.680853323137502  LUMO = 85.0447081786784
  mo_energy =
[-1.21650242e+02 -1.32809144e+01 -7.62146011e+00 -7.62146011e+00
 -7.62146011e+00 -1.65066659e+00 -6.80853323e-01 -6.80853323e-01
 -6.80853323e-01  8.50447082e+01  6.77171257e+02  3.93498493e+03
  2.96196924e+04  1.54738888e+05  6.64892001e+05  2.71962800e+06
  1.10459660e+07  4.65100871e+07]
E1 = -706.5876278503667  E_coul = 198.9483376361493
cycle= 1 E= -507.639290214217  delta_E= -3.72  |g|= 0.317  |ddm|= 0.301
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.420486
diis-c [-0.17680836  1.        ]
  HOMO = -0.236196233043962  LUMO = 86.3777304185511
  mo_energy =
[-1.20262236e+02 -1.22527798e+01 -6.65288995e+00 -6.65288995e+00
 -6.65288995e+00 -1.16341272e+00 -2.36196233e-01 -2.36196233e-01
 -2.36196233e-01  8.63777304e+01  6.78541817e+02  3.93623651e+03
  2.96207811e+04  1.54739905e+05  6.64892988e+05  2.71962898e+06
  1.10459670e+07  4.65100881e+07]
E1 = -706.5561826438407  E_coul = 198.91646432432424
cycle= 2 E= -507.639718319516  delta_E= -0.000428  |g|= 0.00474  |ddm|= 0.0143
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00504341
diis-c [-2.53910667e-05 -5.04213628e-04  1.00050421e+00]
  HOMO = -0.236371533951556  LUMO = 86.3742108208113
  mo_energy =
[-1.20270879e+02 -1.22539690e+01 -6.65473171e+00 -6.65473171e+00
 -6.65473171e+00 -1.16347751e+00 -2.36371534e-01 -2.36371534e-01
 -2.36371534e-01  8.63742108e+01  6.78531228e+02  3.93622062e+03
  2.96207619e+04  1.54739885e+05  6.64892968e+05  2.71962895e+06
  1.10459670e+07  4.65100881e+07]
E1 = -706.5557422301088  E_coul = 198.91602380044907
cycle= 3 E= -507.63971842966  delta_E= -1.1e-07  |g|= 9.48e-05  |ddm|= 0.000202
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.000126828
diis-c [-3.96084523e-10  3.33920241e-05 -2.54656227e-02  1.02543223e+00]
  HOMO = -0.236373747521699  LUMO = 86.3741661343233
  mo_energy =
[-1.20270992e+02 -1.22539847e+01 -6.65475869e+00 -6.65475869e+00
 -6.65475869e+00 -1.16347816e+00 -2.36373748e-01 -2.36373748e-01
 -2.36373748e-01  8.63741661e+01  6.78531111e+02  3.93622047e+03
  2.96207617e+04  1.54739885e+05  6.64892968e+05  2.71962895e+06
  1.10459670e+07  4.65100881e+07]
E1 = -706.5557349872812  E_coul = 198.9160165575814
cycle= 4 E= -507.6397184297  delta_E= -4.01e-11  |g|= 3.74e-07  |ddm|= 3.45e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.5557349872812  E_coul = 198.9160165575814
  HOMO = -0.236373731205177  LUMO = 86.3741664725929
  mo_energy =
[-1.20270991e+02 -1.22539846e+01 -6.65475853e+00 -6.65475853e+00
 -6.65475853e+00 -1.16347816e+00 -2.36373731e-01 -2.36373731e-01
 -2.36373731e-01  8.63741665e+01  6.78531112e+02  3.93622047e+03
  2.96207617e+04  1.54739885e+05  6.64892968e+05  2.71962895e+06
  1.10459670e+07  4.65100881e+07]
E1 = -706.5557350243083  E_coul = 198.91601659460895
Extra cycle  E= -507.639718429699  delta_E= 3.98e-13  |g|= 6.45e-09  |ddm|= 1.64e-08
    CPU time for scf_cycle      0.10 sec, wall time      0.11 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 56.39338402695789
E1 = -706.5557350243083  E_coul = 198.91601659460895
init E= -507.639718429699
    CPU time for initialize scf      0.12 sec, wall time      0.12 sec
  HOMO = -0.236373731014347  LUMO = 86.3741664767262
  mo_energy =
[-1.20270991e+02 -1.22539846e+01 -6.65475852e+00 -6.65475852e+00
 -6.65475852e+00 -1.16347816e+00 -2.36373731e-01 -2.36373731e-01
 -2.36373731e-01  8.63741665e+01  6.78531112e+02  3.93622047e+03
  2.96207617e+04  1.54739885e+05  6.64892968e+05  2.71962895e+06
  1.10459670e+07  4.65100881e+07]
E1 = -706.5557350248691  E_coul = 198.91601659516934
cycle= 1 E= -507.6397184297  delta_E= -3.98e-13  |g|= 1.44e-10  |ddm|= 2.54e-10
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -706.5557350248691  E_coul = 198.91601659516934
  HOMO = -0.236373731011655  LUMO = 86.3741664767844
  mo_energy =
[-1.20270991e+02 -1.22539846e+01 -6.65475852e+00 -6.65475852e+00
 -6.65475852e+00 -1.16347816e+00 -2.36373731e-01 -2.36373731e-01
 -2.36373731e-01  8.63741665e+01  6.78531112e+02  3.93622047e+03
  2.96207617e+04  1.54739885e+05  6.64892968e+05  2.71962895e+06
  1.10459670e+07  4.65100881e+07]
E1 = -706.5557350248785  E_coul = 198.91601659517914
Extra cycle  E= -507.639718429699  delta_E= 4.55e-13  |g|= 1.17e-10  |ddm|= 4.58e-12
    CPU time for scf_cycle      0.19 sec, wall time      0.19 sec
exp = [1.87954849e+07 4.69887121e+06 1.17471780e+06 2.93679451e+05
 7.34198656e+04 1.83538844e+04 2.23420787e+03 4.56861972e+02
 1.21730572e+02 3.75854314e+01 4.74122620e+00 3.91224079e-01
 8.59884793e+00 4.90879844e-01]
grad_E = [-1.11426105e-13  1.80008857e-11  8.55049108e-12  1.05286121e-08
 -3.42273192e-08  6.41733334e-06 -9.42295158e-06 -5.54730685e-07
  3.32799302e-05 -9.66811355e-05 -6.92273710e-05  4.86697854e-04
  1.43539943e-04  9.92526631e-04]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="BFGS",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((14, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.6988712134173084e+06,1.1747178033543271e+06,2.9367945083858178e+05,7.3419865393677101e+04,1.8353927627435987e+04,2.2341424145819028e+03,4.5688904996449571e+02,1.2173317272260677e+02,3.7593061247508530e+01,4.7412722556720146e+00,3.9120358491841306e-01,8.5986297237246045e+00,4.9084868336327880e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "12s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:14:51 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  18795484.8537        1
[INPUT] 0    0    [1    /1   ]  4698871.21342        1
[INPUT] 0    0    [1    /1   ]  1174717.80335        1
[INPUT] 0    0    [1    /1   ]  293679.450764        1
[INPUT] 0    0    [1    /1   ]  73419.8656361        1
[INPUT] 0    0    [1    /1   ]  18353.8821165        1
[INPUT] 0    0    [1    /1   ]  2234.21130606        1
[INPUT] 0    0    [1    /1   ]  456.8606022          1
[INPUT] 0    0    [1    /1   ]  121.730054077        1
[INPUT] 0    0    [1    /1   ]  37.5861736462        1
[INPUT] 0    0    [1    /1   ]  4.74118005984        1
[INPUT] 0    0    [1    /1   ]  0.391233710793       1
[INPUT] 1    0    [1    /1   ]  8.59892635908        1
[INPUT] 1    0    [1    /1   ]  0.490892052652       1

nuclear repulsion = 0
number of shells = 14
number of NR pGTOs = 18
number of NR cGTOs = 18
basis = {'Ar': [[0, [18795484.853669234, 1.0]], [0, [4698871.213417179, 1.0]], [0, [1174717.803354266, 1.0]], [0, [293679.4507639192, 1.0]], [0, [73419.86563610379, 1.0]], [0, [18353.882116529465, 1.0]], [0, [2234.2113060603256, 1.0]], [0, [456.860602200417, 1.0]], [0, [121.73005407726345, 1.0]], [0, [37.58617364616597, 1.0]], [0, [4.741180059840299, 1.0]], [0, [0.39123371079289576, 1.0]], [1, [8.598926359076751, 1.0]], [1, [0.4908920526521395, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [18795484.85366923]
bas 1, expnt(s) = [4698871.21341718]
bas 2, expnt(s) = [1174717.80335427]
bas 3, expnt(s) = [293679.45076392]
bas 4, expnt(s) = [73419.8656361]
bas 5, expnt(s) = [18353.88211653]
bas 6, expnt(s) = [2234.21130606]
bas 7, expnt(s) = [456.8606022]
bas 8, expnt(s) = [121.73005408]
bas 9, expnt(s) = [37.58617365]
bas 10, expnt(s) = [4.74118006]
bas 11, expnt(s) = [0.39123371]
bas 12, expnt(s) = [8.59892636]
bas 13, expnt(s) = [0.49089205]
CPU time:        71.90
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  0  1  1  0 42 43  0]
 [ 0  0  1  1  0 44 45  0]
 [ 0  0  1  1  0 46 47  0]
 [ 0  1  1  1  0 48 49  0]
 [ 0  1  1  1  0 50 51  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.87954849e+07 7.21199097e+05 4.69887121e+06 2.54982386e+05
 1.17471780e+06 9.01498871e+04 2.93679451e+05 3.18727982e+04
 7.34198656e+04 1.12687362e+04 1.83538821e+04 3.98392338e+03
 2.23421131e+03 8.21028453e+02 4.56860602e+02 2.49662207e+02
 1.21730054e+02 9.25898511e+01 3.75861736e+01 3.83518317e+01
 4.74118006e+00 8.11764138e+00 3.91233711e-01 1.24980491e+00
 8.59892636e+00 4.29575673e+01 4.90892053e-01 1.19871763e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319917018513344
cond(S) = 56.39356014431959
E1 = -688.8350708161797  E_coul = 184.91842591776881
init E= -503.916644898411
    CPU time for initialize scf      0.03 sec, wall time      0.03 sec
  HOMO = -0.680835011357453  LUMO = 85.0459593633836
  mo_energy =
[-1.21650121e+02 -1.32808503e+01 -7.62140274e+00 -7.62140274e+00
 -7.62140274e+00 -1.65065301e+00 -6.80835011e-01 -6.80835011e-01
 -6.80835011e-01  8.50459594e+01  6.77171494e+02  3.93498525e+03
  2.96196971e+04  1.54738889e+05  6.64892000e+05  2.71962800e+06
  1.10459660e+07  4.65100871e+07]
E1 = -706.5887804438165  E_coul = 198.94949014835476
cycle= 1 E= -507.639290295462  delta_E= -3.72  |g|= 0.317  |ddm|= 0.301
    CPU time for cycle= 1      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.420489
diis-c [-0.17681142  1.        ]
  HOMO = -0.236163511301382  LUMO = 86.379005964281
  mo_energy =
[-1.20262093e+02 -1.22526980e+01 -6.65281462e+00 -6.65281462e+00
 -6.65281462e+00 -1.16338593e+00 -2.36163511e-01 -2.36163511e-01
 -2.36163511e-01  8.63790060e+01  6.78542080e+02  3.93623685e+03
  2.96207858e+04  1.54739906e+05  6.64892988e+05  2.71962897e+06
  1.10459670e+07  4.65100881e+07]
E1 = -706.5573351449389  E_coul = 198.91761673216524
cycle= 2 E= -507.639718412774  delta_E= -0.000428  |g|= 0.00474  |ddm|= 0.0143
    CPU time for cycle= 2      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.0050435
diis-c [-2.53918917e-05 -5.04521065e-04  1.00050452e+00]
  HOMO = -0.236338820864513  LUMO = 86.3754863609826
  mo_energy =
[-1.20270735e+02 -1.22538871e+01 -6.65465639e+00 -6.65465639e+00
 -6.65465639e+00 -1.16345072e+00 -2.36338821e-01 -2.36338821e-01
 -2.36338821e-01  8.63754864e+01  6.78531491e+02  3.93622096e+03
  2.96207666e+04  1.54739886e+05  6.64892967e+05  2.71962895e+06
  1.10459670e+07  4.65100881e+07]
E1 = -706.5568947300219  E_coul = 198.91717620710074
cycle= 3 E= -507.639718522921  delta_E= -1.1e-07  |g|= 9.48e-05  |ddm|= 0.000202
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.000126828
diis-c [-3.96075355e-10  3.33940022e-05 -2.54652175e-02  1.02543182e+00]
  HOMO = -0.236341034504559  LUMO = 86.3754416756206
  mo_energy =
[-1.20270849e+02 -1.22539029e+01 -6.65468336e+00 -6.65468336e+00
 -6.65468336e+00 -1.16345137e+00 -2.36341035e-01 -2.36341035e-01
 -2.36341035e-01  8.63754417e+01  6.78531374e+02  3.93622082e+03
  2.96207664e+04  1.54739886e+05  6.64892967e+05  2.71962895e+06
  1.10459670e+07  4.65100881e+07]
E1 = -706.5568874873452  E_coul = 198.91716896438425
cycle= 4 E= -507.639718522961  delta_E= -3.98e-11  |g|= 3.74e-07  |ddm|= 3.45e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.5568874873452  E_coul = 198.91716896438425
  HOMO = -0.236341018187728  LUMO = 86.3754420138823
  mo_energy =
[-1.20270848e+02 -1.22539028e+01 -6.65468320e+00 -6.65468320e+00
 -6.65468320e+00 -1.16345137e+00 -2.36341018e-01 -2.36341018e-01
 -2.36341018e-01  8.63754420e+01  6.78531375e+02  3.93622082e+03
  2.96207664e+04  1.54739886e+05  6.64892967e+05  2.71962895e+06
  1.10459670e+07  4.65100881e+07]
E1 = -706.5568875243721  E_coul = 198.91716900141134
Extra cycle  E= -507.639718522961  delta_E= 2.27e-13  |g|= 6.45e-09  |ddm|= 1.64e-08
    CPU time for scf_cycle      0.10 sec, wall time      0.11 sec
exp = [1.87954849e+07 4.69887121e+06 1.17471780e+06 2.93679451e+05
 7.34198656e+04 1.83538821e+04 2.23421131e+03 4.56860602e+02
 1.21730054e+02 3.75861736e+01 4.74118006e+00 3.91233711e-01
 8.59892636e+00 4.90892053e-01]
E = -507.6397185229607
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="BFGS",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((14, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.6988712134173084e+06,1.1747178033543271e+06,2.9367945083858178e+05,7.3419865393677101e+04,1.8353927627435987e+04,2.2341424145819028e+03,4.5688904996449571e+02,1.2173317272260677e+02,3.7593061247508530e+01,4.7412722556720146e+00,3.9120358491841306e-01,8.5986297237246045e+00,4.9084868336327880e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "12s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:14:51 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  18795484.8537        1
[INPUT] 0    0    [1    /1   ]  4698871.21342        1
[INPUT] 0    0    [1    /1   ]  1174717.80335        1
[INPUT] 0    0    [1    /1   ]  293679.450764        1
[INPUT] 0    0    [1    /1   ]  73419.8656361        1
[INPUT] 0    0    [1    /1   ]  18353.8821165        1
[INPUT] 0    0    [1    /1   ]  2234.21130606        1
[INPUT] 0    0    [1    /1   ]  456.8606022          1
[INPUT] 0    0    [1    /1   ]  121.730054077        1
[INPUT] 0    0    [1    /1   ]  37.5861736462        1
[INPUT] 0    0    [1    /1   ]  4.74118005984        1
[INPUT] 0    0    [1    /1   ]  0.391233710793       1
[INPUT] 1    0    [1    /1   ]  8.59892635908        1
[INPUT] 1    0    [1    /1   ]  0.490892052652       1

nuclear repulsion = 0
number of shells = 14
number of NR pGTOs = 18
number of NR cGTOs = 18
basis = {'Ar': [[0, [18795484.853669234, 1.0]], [0, [4698871.213417179, 1.0]], [0, [1174717.803354266, 1.0]], [0, [293679.4507639192, 1.0]], [0, [73419.86563610379, 1.0]], [0, [18353.882116529465, 1.0]], [0, [2234.2113060603256, 1.0]], [0, [456.860602200417, 1.0]], [0, [121.73005407726345, 1.0]], [0, [37.58617364616597, 1.0]], [0, [4.741180059840299, 1.0]], [0, [0.39123371079289576, 1.0]], [1, [8.598926359076751, 1.0]], [1, [0.4908920526521395, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [18795484.85366923]
bas 1, expnt(s) = [4698871.21341718]
bas 2, expnt(s) = [1174717.80335427]
bas 3, expnt(s) = [293679.45076392]
bas 4, expnt(s) = [73419.8656361]
bas 5, expnt(s) = [18353.88211653]
bas 6, expnt(s) = [2234.21130606]
bas 7, expnt(s) = [456.8606022]
bas 8, expnt(s) = [121.73005408]
bas 9, expnt(s) = [37.58617365]
bas 10, expnt(s) = [4.74118006]
bas 11, expnt(s) = [0.39123371]
bas 12, expnt(s) = [8.59892636]
bas 13, expnt(s) = [0.49089205]
CPU time:        72.34
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  0  1  1  0 42 43  0]
 [ 0  0  1  1  0 44 45  0]
 [ 0  0  1  1  0 46 47  0]
 [ 0  1  1  1  0 48 49  0]
 [ 0  1  1  1  0 50 51  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.87954849e+07 7.21199097e+05 4.69887121e+06 2.54982386e+05
 1.17471780e+06 9.01498871e+04 2.93679451e+05 3.18727982e+04
 7.34198656e+04 1.12687362e+04 1.83538821e+04 3.98392338e+03
 2.23421131e+03 8.21028453e+02 4.56860602e+02 2.49662207e+02
 1.21730054e+02 9.25898511e+01 3.75861736e+01 3.83518317e+01
 4.74118006e+00 8.11764138e+00 3.91233711e-01 1.24980491e+00
 8.59892636e+00 4.29575673e+01 4.90892053e-01 1.19871763e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319917018513344
cond(S) = 56.39356014431959
E1 = -688.8350708161797  E_coul = 184.91842591776881
init E= -503.916644898411
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.680835011357453  LUMO = 85.0459593633836
  mo_energy =
[-1.21650121e+02 -1.32808503e+01 -7.62140274e+00 -7.62140274e+00
 -7.62140274e+00 -1.65065301e+00 -6.80835011e-01 -6.80835011e-01
 -6.80835011e-01  8.50459594e+01  6.77171494e+02  3.93498525e+03
  2.96196971e+04  1.54738889e+05  6.64892000e+05  2.71962800e+06
  1.10459660e+07  4.65100871e+07]
E1 = -706.5887804438165  E_coul = 198.94949014835476
cycle= 1 E= -507.639290295462  delta_E= -3.72  |g|= 0.317  |ddm|= 0.301
    CPU time for cycle= 1      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.420489
diis-c [-0.17681142  1.        ]
  HOMO = -0.236163511301382  LUMO = 86.379005964281
  mo_energy =
[-1.20262093e+02 -1.22526980e+01 -6.65281462e+00 -6.65281462e+00
 -6.65281462e+00 -1.16338593e+00 -2.36163511e-01 -2.36163511e-01
 -2.36163511e-01  8.63790060e+01  6.78542080e+02  3.93623685e+03
  2.96207858e+04  1.54739906e+05  6.64892988e+05  2.71962897e+06
  1.10459670e+07  4.65100881e+07]
E1 = -706.5573351449389  E_coul = 198.91761673216524
cycle= 2 E= -507.639718412774  delta_E= -0.000428  |g|= 0.00474  |ddm|= 0.0143
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.0050435
diis-c [-2.53918917e-05 -5.04521065e-04  1.00050452e+00]
  HOMO = -0.236338820864513  LUMO = 86.3754863609826
  mo_energy =
[-1.20270735e+02 -1.22538871e+01 -6.65465639e+00 -6.65465639e+00
 -6.65465639e+00 -1.16345072e+00 -2.36338821e-01 -2.36338821e-01
 -2.36338821e-01  8.63754864e+01  6.78531491e+02  3.93622096e+03
  2.96207666e+04  1.54739886e+05  6.64892967e+05  2.71962895e+06
  1.10459670e+07  4.65100881e+07]
E1 = -706.5568947300219  E_coul = 198.91717620710074
cycle= 3 E= -507.639718522921  delta_E= -1.1e-07  |g|= 9.48e-05  |ddm|= 0.000202
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.000126828
diis-c [-3.96075355e-10  3.33940022e-05 -2.54652175e-02  1.02543182e+00]
  HOMO = -0.236341034504559  LUMO = 86.3754416756206
  mo_energy =
[-1.20270849e+02 -1.22539029e+01 -6.65468336e+00 -6.65468336e+00
 -6.65468336e+00 -1.16345137e+00 -2.36341035e-01 -2.36341035e-01
 -2.36341035e-01  8.63754417e+01  6.78531374e+02  3.93622082e+03
  2.96207664e+04  1.54739886e+05  6.64892967e+05  2.71962895e+06
  1.10459670e+07  4.65100881e+07]
E1 = -706.5568874873452  E_coul = 198.91716896438425
cycle= 4 E= -507.639718522961  delta_E= -3.98e-11  |g|= 3.74e-07  |ddm|= 3.45e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.5568874873452  E_coul = 198.91716896438425
  HOMO = -0.236341018187728  LUMO = 86.3754420138823
  mo_energy =
[-1.20270848e+02 -1.22539028e+01 -6.65468320e+00 -6.65468320e+00
 -6.65468320e+00 -1.16345137e+00 -2.36341018e-01 -2.36341018e-01
 -2.36341018e-01  8.63754420e+01  6.78531375e+02  3.93622082e+03
  2.96207664e+04  1.54739886e+05  6.64892967e+05  2.71962895e+06
  1.10459670e+07  4.65100881e+07]
E1 = -706.5568875243721  E_coul = 198.91716900141134
Extra cycle  E= -507.639718522961  delta_E= 2.27e-13  |g|= 6.45e-09  |ddm|= 1.64e-08
    CPU time for scf_cycle      0.10 sec, wall time      0.11 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 56.39356014431959
E1 = -706.5568875243721  E_coul = 198.91716900141134
init E= -507.639718522961
    CPU time for initialize scf      0.12 sec, wall time      0.12 sec
  HOMO = -0.236341017996889  LUMO = 86.3754420180144
  mo_energy =
[-1.20270848e+02 -1.22539028e+01 -6.65468320e+00 -6.65468320e+00
 -6.65468320e+00 -1.16345137e+00 -2.36341018e-01 -2.36341018e-01
 -2.36341018e-01  8.63754420e+01  6.78531375e+02  3.93622082e+03
  2.96207664e+04  1.54739886e+05  6.64892967e+05  2.71962895e+06
  1.10459670e+07  4.65100881e+07]
E1 = -706.5568875249326  E_coul = 198.91716900197147
cycle= 1 E= -507.639718522961  delta_E= -3.41e-13  |g|= 1.79e-10  |ddm|= 2.54e-10
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -706.5568875249326  E_coul = 198.91716900197147
  HOMO = -0.236341017994194  LUMO = 86.3754420180734
  mo_energy =
[-1.20270848e+02 -1.22539028e+01 -6.65468320e+00 -6.65468320e+00
 -6.65468320e+00 -1.16345137e+00 -2.36341018e-01 -2.36341018e-01
 -2.36341018e-01  8.63754420e+01  6.78531375e+02  3.93622082e+03
  2.96207664e+04  1.54739886e+05  6.64892967e+05  2.71962895e+06
  1.10459670e+07  4.65100881e+07]
E1 = -706.5568875249421  E_coul = 198.91716900198114
Extra cycle  E= -507.639718522961  delta_E= 1.14e-13  |g|= 1.81e-10  |ddm|= 4.55e-12
    CPU time for scf_cycle      0.19 sec, wall time      0.20 sec
exp = [1.87954849e+07 4.69887121e+06 1.17471780e+06 2.93679451e+05
 7.34198656e+04 1.83538821e+04 2.23421131e+03 4.56860602e+02
 1.21730054e+02 3.75861736e+01 4.74118006e+00 3.91233711e-01
 8.59892636e+00 4.90892053e-01]
grad_E = [-1.11425010e-13  1.80009551e-11  8.55106789e-12  1.05286520e-08
 -3.42271762e-08  6.41737058e-06 -9.43220418e-06 -2.29188711e-07
  3.00018963e-05 -8.61157979e-05 -9.61855732e-05  6.81437107e-04
  1.97716119e-04  1.39297855e-03]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="BFGS",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((14, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.6988712134173084e+06,1.1747178033543271e+06,2.9367945083858178e+05,7.3419865393677101e+04,1.8353927627435987e+04,2.2341424145819028e+03,4.5688904996449571e+02,1.2173317272260677e+02,3.7593061247508530e+01,4.7412722556720146e+00,3.9120358491841306e-01,8.5986297237246045e+00,4.9084868336327880e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "12s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:14:54 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  18795484.8537        1
[INPUT] 0    0    [1    /1   ]  4698871.21342        1
[INPUT] 0    0    [1    /1   ]  1174717.80335        1
[INPUT] 0    0    [1    /1   ]  293679.450753        1
[INPUT] 0    0    [1    /1   ]  73419.8656704        1
[INPUT] 0    0    [1    /1   ]  18353.8756726        1
[INPUT] 0    0    [1    /1   ]  2234.22105512        1
[INPUT] 0    0    [1    /1   ]  456.85665946         1
[INPUT] 0    0    [1    /1   ]  121.72898924         1
[INPUT] 0    0    [1    /1   ]  37.5870627054        1
[INPUT] 0    0    [1    /1   ]  4.74112367876        1
[INPUT] 0    0    [1    /1   ]  0.391245345766       1
[INPUT] 1    0    [1    /1   ]  8.59902077456        1
[INPUT] 1    0    [1    /1   ]  0.490906774946       1

nuclear repulsion = 0
number of shells = 14
number of NR pGTOs = 18
number of NR cGTOs = 18
basis = {'Ar': [[0, [18795484.853669234, 1.0]], [0, [4698871.213417161, 1.0]], [0, [1174717.8033542575, 1.0]], [0, [293679.4507533477, 1.0]], [0, [73419.86567042975, 1.0]], [0, [18353.87567264177, 1.0]], [0, [2234.22105512016, 1.0]], [0, [456.85665946016076, 1.0]], [0, [121.72898924000935, 1.0]], [0, [37.587062705407305, 1.0]], [0, [4.741123678757502, 1.0]], [0, [0.39124534576584474, 1.0]], [1, [8.599020774557037, 1.0]], [1, [0.49090677494599044, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [18795484.85366923]
bas 1, expnt(s) = [4698871.21341716]
bas 2, expnt(s) = [1174717.80335426]
bas 3, expnt(s) = [293679.45075335]
bas 4, expnt(s) = [73419.86567043]
bas 5, expnt(s) = [18353.87567264]
bas 6, expnt(s) = [2234.22105512]
bas 7, expnt(s) = [456.85665946]
bas 8, expnt(s) = [121.72898924]
bas 9, expnt(s) = [37.58706271]
bas 10, expnt(s) = [4.74112368]
bas 11, expnt(s) = [0.39124535]
bas 12, expnt(s) = [8.59902077]
bas 13, expnt(s) = [0.49090677]
CPU time:        75.49
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  0  1  1  0 42 43  0]
 [ 0  0  1  1  0 44 45  0]
 [ 0  0  1  1  0 46 47  0]
 [ 0  1  1  1  0 48 49  0]
 [ 0  1  1  1  0 50 51  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.87954849e+07 7.21199097e+05 4.69887121e+06 2.54982386e+05
 1.17471780e+06 9.01498871e+04 2.93679451e+05 3.18727982e+04
 7.34198657e+04 1.12687362e+04 1.83538757e+04 3.98392233e+03
 2.23422106e+03 8.21031140e+02 4.56856659e+02 2.49660591e+02
 1.21728989e+02 9.25892436e+01 3.75870627e+01 3.83525121e+01
 4.74112368e+00 8.11756898e+00 3.91245346e-01 1.24983278e+00
 8.59902077e+00 4.29581569e+01 4.90906775e-01 1.19876257e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.31989718321936
cond(S) = 56.3937751860662
E1 = -688.8360983203211  E_coul = 184.9194626200713
init E= -503.91663570025
    CPU time for initialize scf      0.03 sec, wall time      0.03 sec
  HOMO = -0.680812914706746  LUMO = 85.0472737497234
  mo_energy =
[-1.21649976e+02 -1.32807733e+01 -7.62133358e+00 -7.62133358e+00
 -7.62133358e+00 -1.65063667e+00 -6.80812915e-01 -6.80812915e-01
 -6.80812915e-01  8.50472737e+01  6.77168702e+02  3.93498317e+03
  2.96197080e+04  1.54738890e+05  6.64891996e+05  2.71962800e+06
  1.10459660e+07  4.65100871e+07]
E1 = -706.5901712501378  E_coul = 198.9508807983796
cycle= 1 E= -507.639290451758  delta_E= -3.72  |g|= 0.317  |ddm|= 0.301
    CPU time for cycle= 1      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.420494
diis-c [-0.17681547  1.        ]
  HOMO = -0.236124038762958  LUMO = 86.3803497118962
  mo_energy =
[-1.20261919e+02 -1.22525997e+01 -6.65272375e+00 -6.65272375e+00
 -6.65272375e+00 -1.16335365e+00 -2.36124039e-01 -2.36124039e-01
 -2.36124039e-01  8.63803497e+01  6.78539321e+02  3.93623481e+03
  2.96207968e+04  1.54739908e+05  6.64892984e+05  2.71962897e+06
  1.10459670e+07  4.65100881e+07]
E1 = -706.5587257565297  E_coul = 198.91900717171507
cycle= 2 E= -507.639718584815  delta_E= -0.000428  |g|= 0.00474  |ddm|= 0.0143
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.0050436
diis-c [-2.53928878e-05 -5.04893499e-04  1.00050489e+00]
  HOMO = -0.236299359413298  LUMO = 86.3768300997087
  mo_energy =
[-1.20270562e+02 -1.22537888e+01 -6.65456554e+00 -6.65456554e+00
 -6.65456554e+00 -1.16341844e+00 -2.36299359e-01 -2.36299359e-01
 -2.36299359e-01  8.63768301e+01  6.78528732e+02  3.93621891e+03
  2.96207776e+04  1.54739888e+05  6.64892964e+05  2.71962895e+06
  1.10459670e+07  4.65100881e+07]
E1 = -706.5582853381909  E_coul = 198.9185666432235
cycle= 3 E= -507.639718694967  delta_E= -1.1e-07  |g|= 9.48e-05  |ddm|= 0.000202
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.000126828
diis-c [-3.96067920e-10  3.33961441e-05 -2.54647563e-02  1.02543136e+00]
  HOMO = -0.236301573149161  LUMO = 86.3767854155618
  mo_energy =
[-1.20270675e+02 -1.22538046e+01 -6.65459251e+00 -6.65459251e+00
 -6.65459251e+00 -1.16341910e+00 -2.36301573e-01 -2.36301573e-01
 -2.36301573e-01  8.63767854e+01  6.78528615e+02  3.93621877e+03
  2.96207774e+04  1.54739888e+05  6.64892964e+05  2.71962895e+06
  1.10459670e+07  4.65100881e+07]
E1 = -706.5582780956523  E_coul = 198.91855940064448
cycle= 4 E= -507.639718695008  delta_E= -4.04e-11  |g|= 3.74e-07  |ddm|= 3.45e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.5582780956523  E_coul = 198.91855940064448
  HOMO = -0.236301556831804  LUMO = 86.3767857538188
  mo_energy =
[-1.20270674e+02 -1.22538045e+01 -6.65459235e+00 -6.65459235e+00
 -6.65459235e+00 -1.16341909e+00 -2.36301557e-01 -2.36301557e-01
 -2.36301557e-01  8.63767858e+01  6.78528616e+02  3.93621877e+03
  2.96207774e+04  1.54739888e+05  6.64892964e+05  2.71962895e+06
  1.10459670e+07  4.65100881e+07]
E1 = -706.5582781326777  E_coul = 198.91855943767064
Extra cycle  E= -507.639718695007  delta_E= 7.39e-13  |g|= 6.45e-09  |ddm|= 1.64e-08
    CPU time for scf_cycle      0.11 sec, wall time      0.11 sec
exp = [1.87954849e+07 4.69887121e+06 1.17471780e+06 2.93679451e+05
 7.34198657e+04 1.83538757e+04 2.23422106e+03 4.56856659e+02
 1.21728989e+02 3.75870627e+01 4.74112368e+00 3.91245346e-01
 8.59902077e+00 4.90906775e-01]
E = -507.6397186950071
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="BFGS",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((14, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.6988712134173084e+06,1.1747178033543271e+06,2.9367945083858178e+05,7.3419865393677101e+04,1.8353927627435987e+04,2.2341424145819028e+03,4.5688904996449571e+02,1.2173317272260677e+02,3.7593061247508530e+01,4.7412722556720146e+00,3.9120358491841306e-01,8.5986297237246045e+00,4.9084868336327880e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "12s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:14:55 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  18795484.8537        1
[INPUT] 0    0    [1    /1   ]  4698871.21342        1
[INPUT] 0    0    [1    /1   ]  1174717.80335        1
[INPUT] 0    0    [1    /1   ]  293679.450753        1
[INPUT] 0    0    [1    /1   ]  73419.8656704        1
[INPUT] 0    0    [1    /1   ]  18353.8756726        1
[INPUT] 0    0    [1    /1   ]  2234.22105512        1
[INPUT] 0    0    [1    /1   ]  456.85665946         1
[INPUT] 0    0    [1    /1   ]  121.72898924         1
[INPUT] 0    0    [1    /1   ]  37.5870627054        1
[INPUT] 0    0    [1    /1   ]  4.74112367876        1
[INPUT] 0    0    [1    /1   ]  0.391245345766       1
[INPUT] 1    0    [1    /1   ]  8.59902077456        1
[INPUT] 1    0    [1    /1   ]  0.490906774946       1

nuclear repulsion = 0
number of shells = 14
number of NR pGTOs = 18
number of NR cGTOs = 18
basis = {'Ar': [[0, [18795484.853669234, 1.0]], [0, [4698871.213417161, 1.0]], [0, [1174717.8033542575, 1.0]], [0, [293679.4507533477, 1.0]], [0, [73419.86567042975, 1.0]], [0, [18353.87567264177, 1.0]], [0, [2234.22105512016, 1.0]], [0, [456.85665946016076, 1.0]], [0, [121.72898924000935, 1.0]], [0, [37.587062705407305, 1.0]], [0, [4.741123678757502, 1.0]], [0, [0.39124534576584474, 1.0]], [1, [8.599020774557037, 1.0]], [1, [0.49090677494599044, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [18795484.85366923]
bas 1, expnt(s) = [4698871.21341716]
bas 2, expnt(s) = [1174717.80335426]
bas 3, expnt(s) = [293679.45075335]
bas 4, expnt(s) = [73419.86567043]
bas 5, expnt(s) = [18353.87567264]
bas 6, expnt(s) = [2234.22105512]
bas 7, expnt(s) = [456.85665946]
bas 8, expnt(s) = [121.72898924]
bas 9, expnt(s) = [37.58706271]
bas 10, expnt(s) = [4.74112368]
bas 11, expnt(s) = [0.39124535]
bas 12, expnt(s) = [8.59902077]
bas 13, expnt(s) = [0.49090677]
CPU time:        75.95
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  0  1  1  0 42 43  0]
 [ 0  0  1  1  0 44 45  0]
 [ 0  0  1  1  0 46 47  0]
 [ 0  1  1  1  0 48 49  0]
 [ 0  1  1  1  0 50 51  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.87954849e+07 7.21199097e+05 4.69887121e+06 2.54982386e+05
 1.17471780e+06 9.01498871e+04 2.93679451e+05 3.18727982e+04
 7.34198657e+04 1.12687362e+04 1.83538757e+04 3.98392233e+03
 2.23422106e+03 8.21031140e+02 4.56856659e+02 2.49660591e+02
 1.21728989e+02 9.25892436e+01 3.75870627e+01 3.83525121e+01
 4.74112368e+00 8.11756898e+00 3.91245346e-01 1.24983278e+00
 8.59902077e+00 4.29581569e+01 4.90906775e-01 1.19876257e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.31989718321936
cond(S) = 56.3937751860662
E1 = -688.8360983203211  E_coul = 184.9194626200713
init E= -503.91663570025
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.680812914706746  LUMO = 85.0472737497234
  mo_energy =
[-1.21649976e+02 -1.32807733e+01 -7.62133358e+00 -7.62133358e+00
 -7.62133358e+00 -1.65063667e+00 -6.80812915e-01 -6.80812915e-01
 -6.80812915e-01  8.50472737e+01  6.77168702e+02  3.93498317e+03
  2.96197080e+04  1.54738890e+05  6.64891996e+05  2.71962800e+06
  1.10459660e+07  4.65100871e+07]
E1 = -706.5901712501378  E_coul = 198.9508807983796
cycle= 1 E= -507.639290451758  delta_E= -3.72  |g|= 0.317  |ddm|= 0.301
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.420494
diis-c [-0.17681547  1.        ]
  HOMO = -0.236124038762958  LUMO = 86.3803497118962
  mo_energy =
[-1.20261919e+02 -1.22525997e+01 -6.65272375e+00 -6.65272375e+00
 -6.65272375e+00 -1.16335365e+00 -2.36124039e-01 -2.36124039e-01
 -2.36124039e-01  8.63803497e+01  6.78539321e+02  3.93623481e+03
  2.96207968e+04  1.54739908e+05  6.64892984e+05  2.71962897e+06
  1.10459670e+07  4.65100881e+07]
E1 = -706.5587257565297  E_coul = 198.91900717171507
cycle= 2 E= -507.639718584815  delta_E= -0.000428  |g|= 0.00474  |ddm|= 0.0143
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.0050436
diis-c [-2.53928878e-05 -5.04893499e-04  1.00050489e+00]
  HOMO = -0.236299359413298  LUMO = 86.3768300997087
  mo_energy =
[-1.20270562e+02 -1.22537888e+01 -6.65456554e+00 -6.65456554e+00
 -6.65456554e+00 -1.16341844e+00 -2.36299359e-01 -2.36299359e-01
 -2.36299359e-01  8.63768301e+01  6.78528732e+02  3.93621891e+03
  2.96207776e+04  1.54739888e+05  6.64892964e+05  2.71962895e+06
  1.10459670e+07  4.65100881e+07]
E1 = -706.5582853381909  E_coul = 198.9185666432235
cycle= 3 E= -507.639718694967  delta_E= -1.1e-07  |g|= 9.48e-05  |ddm|= 0.000202
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.000126828
diis-c [-3.96067920e-10  3.33961441e-05 -2.54647563e-02  1.02543136e+00]
  HOMO = -0.236301573149161  LUMO = 86.3767854155618
  mo_energy =
[-1.20270675e+02 -1.22538046e+01 -6.65459251e+00 -6.65459251e+00
 -6.65459251e+00 -1.16341910e+00 -2.36301573e-01 -2.36301573e-01
 -2.36301573e-01  8.63767854e+01  6.78528615e+02  3.93621877e+03
  2.96207774e+04  1.54739888e+05  6.64892964e+05  2.71962895e+06
  1.10459670e+07  4.65100881e+07]
E1 = -706.5582780956523  E_coul = 198.91855940064448
cycle= 4 E= -507.639718695008  delta_E= -4.04e-11  |g|= 3.74e-07  |ddm|= 3.45e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.5582780956523  E_coul = 198.91855940064448
  HOMO = -0.236301556831804  LUMO = 86.3767857538188
  mo_energy =
[-1.20270674e+02 -1.22538045e+01 -6.65459235e+00 -6.65459235e+00
 -6.65459235e+00 -1.16341909e+00 -2.36301557e-01 -2.36301557e-01
 -2.36301557e-01  8.63767858e+01  6.78528616e+02  3.93621877e+03
  2.96207774e+04  1.54739888e+05  6.64892964e+05  2.71962895e+06
  1.10459670e+07  4.65100881e+07]
E1 = -706.5582781326777  E_coul = 198.91855943767064
Extra cycle  E= -507.639718695007  delta_E= 7.39e-13  |g|= 6.45e-09  |ddm|= 1.64e-08
    CPU time for scf_cycle      0.11 sec, wall time      0.11 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 56.3937751860662
E1 = -706.5582781326777  E_coul = 198.91855943767064
init E= -507.639718695007
    CPU time for initialize scf      0.12 sec, wall time      0.12 sec
  HOMO = -0.236301556640962  LUMO = 86.3767857579488
  mo_energy =
[-1.20270674e+02 -1.22538045e+01 -6.65459235e+00 -6.65459235e+00
 -6.65459235e+00 -1.16341909e+00 -2.36301557e-01 -2.36301557e-01
 -2.36301557e-01  8.63767858e+01  6.78528616e+02  3.93621877e+03
  2.96207774e+04  1.54739888e+05  6.64892964e+05  2.71962895e+06
  1.10459670e+07  4.65100881e+07]
E1 = -706.5582781332386  E_coul = 198.91855943823128
cycle= 1 E= -507.639718695007  delta_E= -1.71e-13  |g|= 1.6e-10  |ddm|= 2.54e-10
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -706.5582781332386  E_coul = 198.91855943823128
  HOMO = -0.236301556638268  LUMO = 86.3767857580097
  mo_energy =
[-1.20270674e+02 -1.22538045e+01 -6.65459235e+00 -6.65459235e+00
 -6.65459235e+00 -1.16341909e+00 -2.36301557e-01 -2.36301557e-01
 -2.36301557e-01  8.63767858e+01  6.78528616e+02  3.93621877e+03
  2.96207774e+04  1.54739888e+05  6.64892964e+05  2.71962895e+06
  1.10459670e+07  4.65100881e+07]
E1 = -706.5582781332478  E_coul = 198.91855943824058
Extra cycle  E= -507.639718695007  delta_E= 5.68e-14  |g|= 1.64e-10  |ddm|= 4.43e-12
    CPU time for scf_cycle      0.19 sec, wall time      0.19 sec
exp = [1.87954849e+07 4.69887121e+06 1.17471780e+06 2.93679451e+05
 7.34198657e+04 1.83538757e+04 2.23422106e+03 4.56856659e+02
 1.21728989e+02 3.75870627e+01 4.74112368e+00 3.91245346e-01
 8.59902077e+00 4.90906775e-01]
grad_E = [-1.11431300e-13  1.80005569e-11  8.54774435e-12  1.05284257e-08
 -3.42282791e-08  6.41723130e-06 -9.43197523e-06  9.15556283e-08
  2.60046902e-05 -7.27879731e-05 -1.28677120e-04  9.16312130e-04
  2.62981614e-04  1.87604541e-03]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="BFGS",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((14, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.6988712134173084e+06,1.1747178033543271e+06,2.9367945083858178e+05,7.3419865393677101e+04,1.8353927627435987e+04,2.2341424145819028e+03,4.5688904996449571e+02,1.2173317272260677e+02,3.7593061247508530e+01,4.7412722556720146e+00,3.9120358491841306e-01,8.5986297237246045e+00,4.9084868336327880e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "12s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:14:58 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  18795484.8537        1
[INPUT] 0    0    [1    /1   ]  4698871.21342        1
[INPUT] 0    0    [1    /1   ]  1174717.80335        1
[INPUT] 0    0    [1    /1   ]  293679.450729        1
[INPUT] 0    0    [1    /1   ]  73419.8657481        1
[INPUT] 0    0    [1    /1   ]  18353.8610999        1
[INPUT] 0    0    [1    /1   ]  2234.24310495        1
[INPUT] 0    0    [1    /1   ]  456.847703285        1
[INPUT] 0    0    [1    /1   ]  121.726874178        1
[INPUT] 0    0    [1    /1   ]  37.588194665         1
[INPUT] 0    0    [1    /1   ]  4.74104883458        1
[INPUT] 0    0    [1    /1   ]  0.391260588239       1
[INPUT] 1    0    [1    /1   ]  8.59914413813        1
[INPUT] 1    0    [1    /1   ]  0.490926035804       1

nuclear repulsion = 0
number of shells = 14
number of NR pGTOs = 18
number of NR cGTOs = 18
basis = {'Ar': [[0, [18795484.853669234, 1.0]], [0, [4698871.21341712, 1.0]], [0, [1174717.803354238, 1.0]], [0, [293679.45072944043, 1.0]], [0, [73419.86574805721, 1.0]], [0, [18353.861099854676, 1.0]], [0, [2234.2431049533825, 1.0]], [0, [456.84770328463327, 1.0]], [0, [121.72687417835292, 1.0]], [0, [37.58819466495312, 1.0]], [0, [4.741048834581636, 1.0]], [0, [0.39126058823855125, 1.0]], [1, [8.599144138132822, 1.0]], [1, [0.4909260358035762, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [18795484.85366923]
bas 1, expnt(s) = [4698871.21341712]
bas 2, expnt(s) = [1174717.80335424]
bas 3, expnt(s) = [293679.45072944]
bas 4, expnt(s) = [73419.86574806]
bas 5, expnt(s) = [18353.86109985]
bas 6, expnt(s) = [2234.24310495]
bas 7, expnt(s) = [456.84770328]
bas 8, expnt(s) = [121.72687418]
bas 9, expnt(s) = [37.58819466]
bas 10, expnt(s) = [4.74104883]
bas 11, expnt(s) = [0.39126059]
bas 12, expnt(s) = [8.59914414]
bas 13, expnt(s) = [0.49092604]
CPU time:        79.14
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  0  1  1  0 42 43  0]
 [ 0  0  1  1  0 44 45  0]
 [ 0  0  1  1  0 46 47  0]
 [ 0  1  1  1  0 48 49  0]
 [ 0  1  1  1  0 50 51  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.87954849e+07 7.21199097e+05 4.69887121e+06 2.54982386e+05
 1.17471780e+06 9.01498871e+04 2.93679451e+05 3.18727982e+04
 7.34198657e+04 1.12687362e+04 1.83538611e+04 3.98391996e+03
 2.23424310e+03 8.21037217e+02 4.56847703e+02 2.49656920e+02
 1.21726874e+02 9.25880370e+01 3.75881947e+01 3.83533784e+01
 4.74104883e+00 8.11747287e+00 3.91260588e-01 1.24986930e+00
 8.59914414e+00 4.29589273e+01 4.90926036e-01 1.19882136e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319871241757898
cond(S) = 56.39405567877152
E1 = -688.8374573236243  E_coul = 184.9208183581464
init E= -503.916638965478
    CPU time for initialize scf      0.03 sec, wall time      0.03 sec
  HOMO = -0.680783989769384  LUMO = 85.0486309588937
  mo_energy =
[-1.21649785e+02 -1.32806732e+01 -7.62124313e+00 -7.62124313e+00
 -7.62124313e+00 -1.65061530e+00 -6.80783990e-01 -6.80783990e-01
 -6.80783990e-01  8.50486310e+01  6.77159889e+02  3.93497631e+03
  2.96197310e+04  1.54738891e+05  6.64891987e+05  2.71962798e+06
  1.10459660e+07  4.65100871e+07]
E1 = -706.5919919700661  E_coul = 198.95270122383843
cycle= 1 E= -507.639290746228  delta_E= -3.72  |g|= 0.317  |ddm|= 0.301
    CPU time for cycle= 1      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.420501
diis-c [-0.17682135  1.        ]
  HOMO = -0.236072385064649  LUMO = 86.3817451529882
  mo_energy =
[-1.20261691e+02 -1.22524716e+01 -6.65260484e+00 -6.65260484e+00
 -6.65260484e+00 -1.16331145e+00 -2.36072385e-01 -2.36072385e-01
 -2.36072385e-01  8.63817452e+01  6.78530551e+02  3.93622799e+03
  2.96208199e+04  1.54739909e+05  6.64892974e+05  2.71962896e+06
  1.10459670e+07  4.65100881e+07]
E1 = -706.5605460537155  E_coul = 198.92082715134256
cycle= 2 E= -507.639718902373  delta_E= -0.000428  |g|= 0.00474  |ddm|= 0.0143
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00504374
diis-c [-2.53942300e-05 -5.05377149e-04  1.00050538e+00]
  HOMO = -0.236247721464097  LUMO = 86.3782255223223
  mo_energy =
[-1.20270334e+02 -1.22536607e+01 -6.65444666e+00 -6.65444666e+00
 -6.65444666e+00 -1.16337624e+00 -2.36247721e-01 -2.36247721e-01
 -2.36247721e-01  8.63782255e+01  6.78519962e+02  3.93621210e+03
  2.96208006e+04  1.54739889e+05  6.64892954e+05  2.71962894e+06
  1.10459670e+07  4.65100881e+07]
E1 = -706.5601056271212  E_coul = 198.92038661458758
cycle= 3 E= -507.639719012534  delta_E= -1.1e-07  |g|= 9.48e-05  |ddm|= 0.000202
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.000126828
diis-c [-3.96060654e-10  3.33992923e-05 -2.54642259e-02  1.02543083e+00]
  HOMO = -0.236249935347903  LUMO = 86.3781808394582
  mo_energy =
[-1.20270447e+02 -1.22536765e+01 -6.65447363e+00 -6.65447363e+00
 -6.65447363e+00 -1.16337690e+00 -2.36249935e-01 -2.36249935e-01
 -2.36249935e-01  8.63781808e+01  6.78519845e+02  3.93621195e+03
  2.96208004e+04  1.54739889e+05  6.64892954e+05  2.71962894e+06
  1.10459670e+07  4.65100881e+07]
E1 = -706.5600983846774  E_coul = 198.92037937210395
cycle= 4 E= -507.639719012573  delta_E= -3.98e-11  |g|= 3.74e-07  |ddm|= 3.45e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.5600983846774  E_coul = 198.92037937210395
  HOMO = -0.23624991902967  LUMO = 86.3781811777067
  mo_energy =
[-1.20270446e+02 -1.22536764e+01 -6.65447347e+00 -6.65447347e+00
 -6.65447347e+00 -1.16337689e+00 -2.36249919e-01 -2.36249919e-01
 -2.36249919e-01  8.63781812e+01  6.78519846e+02  3.93621195e+03
  2.96208004e+04  1.54739889e+05  6.64892954e+05  2.71962894e+06
  1.10459670e+07  4.65100881e+07]
E1 = -706.5600984217037  E_coul = 198.9203794091301
Extra cycle  E= -507.639719012574  delta_E= -2.27e-13  |g|= 6.45e-09  |ddm|= 1.64e-08
    CPU time for scf_cycle      0.10 sec, wall time      0.11 sec
exp = [1.87954849e+07 4.69887121e+06 1.17471780e+06 2.93679451e+05
 7.34198657e+04 1.83538611e+04 2.23424310e+03 4.56847703e+02
 1.21726874e+02 3.75881947e+01 4.74104883e+00 3.91260588e-01
 8.59914414e+00 4.90926036e-01]
E = -507.63971901257366
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="BFGS",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((14, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.6988712134173084e+06,1.1747178033543271e+06,2.9367945083858178e+05,7.3419865393677101e+04,1.8353927627435987e+04,2.2341424145819028e+03,4.5688904996449571e+02,1.2173317272260677e+02,3.7593061247508530e+01,4.7412722556720146e+00,3.9120358491841306e-01,8.5986297237246045e+00,4.9084868336327880e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "12s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:14:58 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  18795484.8537        1
[INPUT] 0    0    [1    /1   ]  4698871.21342        1
[INPUT] 0    0    [1    /1   ]  1174717.80335        1
[INPUT] 0    0    [1    /1   ]  293679.450729        1
[INPUT] 0    0    [1    /1   ]  73419.8657481        1
[INPUT] 0    0    [1    /1   ]  18353.8610999        1
[INPUT] 0    0    [1    /1   ]  2234.24310495        1
[INPUT] 0    0    [1    /1   ]  456.847703285        1
[INPUT] 0    0    [1    /1   ]  121.726874178        1
[INPUT] 0    0    [1    /1   ]  37.588194665         1
[INPUT] 0    0    [1    /1   ]  4.74104883458        1
[INPUT] 0    0    [1    /1   ]  0.391260588239       1
[INPUT] 1    0    [1    /1   ]  8.59914413813        1
[INPUT] 1    0    [1    /1   ]  0.490926035804       1

nuclear repulsion = 0
number of shells = 14
number of NR pGTOs = 18
number of NR cGTOs = 18
basis = {'Ar': [[0, [18795484.853669234, 1.0]], [0, [4698871.21341712, 1.0]], [0, [1174717.803354238, 1.0]], [0, [293679.45072944043, 1.0]], [0, [73419.86574805721, 1.0]], [0, [18353.861099854676, 1.0]], [0, [2234.2431049533825, 1.0]], [0, [456.84770328463327, 1.0]], [0, [121.72687417835292, 1.0]], [0, [37.58819466495312, 1.0]], [0, [4.741048834581636, 1.0]], [0, [0.39126058823855125, 1.0]], [1, [8.599144138132822, 1.0]], [1, [0.4909260358035762, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [18795484.85366923]
bas 1, expnt(s) = [4698871.21341712]
bas 2, expnt(s) = [1174717.80335424]
bas 3, expnt(s) = [293679.45072944]
bas 4, expnt(s) = [73419.86574806]
bas 5, expnt(s) = [18353.86109985]
bas 6, expnt(s) = [2234.24310495]
bas 7, expnt(s) = [456.84770328]
bas 8, expnt(s) = [121.72687418]
bas 9, expnt(s) = [37.58819466]
bas 10, expnt(s) = [4.74104883]
bas 11, expnt(s) = [0.39126059]
bas 12, expnt(s) = [8.59914414]
bas 13, expnt(s) = [0.49092604]
CPU time:        79.62
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  0  1  1  0 42 43  0]
 [ 0  0  1  1  0 44 45  0]
 [ 0  0  1  1  0 46 47  0]
 [ 0  1  1  1  0 48 49  0]
 [ 0  1  1  1  0 50 51  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.87954849e+07 7.21199097e+05 4.69887121e+06 2.54982386e+05
 1.17471780e+06 9.01498871e+04 2.93679451e+05 3.18727982e+04
 7.34198657e+04 1.12687362e+04 1.83538611e+04 3.98391996e+03
 2.23424310e+03 8.21037217e+02 4.56847703e+02 2.49656920e+02
 1.21726874e+02 9.25880370e+01 3.75881947e+01 3.83533784e+01
 4.74104883e+00 8.11747287e+00 3.91260588e-01 1.24986930e+00
 8.59914414e+00 4.29589273e+01 4.90926036e-01 1.19882136e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319871241757898
cond(S) = 56.39405567877152
E1 = -688.8374573236243  E_coul = 184.9208183581464
init E= -503.916638965478
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.680783989769384  LUMO = 85.0486309588937
  mo_energy =
[-1.21649785e+02 -1.32806732e+01 -7.62124313e+00 -7.62124313e+00
 -7.62124313e+00 -1.65061530e+00 -6.80783990e-01 -6.80783990e-01
 -6.80783990e-01  8.50486310e+01  6.77159889e+02  3.93497631e+03
  2.96197310e+04  1.54738891e+05  6.64891987e+05  2.71962798e+06
  1.10459660e+07  4.65100871e+07]
E1 = -706.5919919700661  E_coul = 198.95270122383843
cycle= 1 E= -507.639290746228  delta_E= -3.72  |g|= 0.317  |ddm|= 0.301
    CPU time for cycle= 1      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.420501
diis-c [-0.17682135  1.        ]
  HOMO = -0.236072385064649  LUMO = 86.3817451529882
  mo_energy =
[-1.20261691e+02 -1.22524716e+01 -6.65260484e+00 -6.65260484e+00
 -6.65260484e+00 -1.16331145e+00 -2.36072385e-01 -2.36072385e-01
 -2.36072385e-01  8.63817452e+01  6.78530551e+02  3.93622799e+03
  2.96208199e+04  1.54739909e+05  6.64892974e+05  2.71962896e+06
  1.10459670e+07  4.65100881e+07]
E1 = -706.5605460537155  E_coul = 198.92082715134256
cycle= 2 E= -507.639718902373  delta_E= -0.000428  |g|= 0.00474  |ddm|= 0.0143
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00504374
diis-c [-2.53942300e-05 -5.05377149e-04  1.00050538e+00]
  HOMO = -0.236247721464097  LUMO = 86.3782255223223
  mo_energy =
[-1.20270334e+02 -1.22536607e+01 -6.65444666e+00 -6.65444666e+00
 -6.65444666e+00 -1.16337624e+00 -2.36247721e-01 -2.36247721e-01
 -2.36247721e-01  8.63782255e+01  6.78519962e+02  3.93621210e+03
  2.96208006e+04  1.54739889e+05  6.64892954e+05  2.71962894e+06
  1.10459670e+07  4.65100881e+07]
E1 = -706.5601056271212  E_coul = 198.92038661458758
cycle= 3 E= -507.639719012534  delta_E= -1.1e-07  |g|= 9.48e-05  |ddm|= 0.000202
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.000126828
diis-c [-3.96060654e-10  3.33992923e-05 -2.54642259e-02  1.02543083e+00]
  HOMO = -0.236249935347903  LUMO = 86.3781808394582
  mo_energy =
[-1.20270447e+02 -1.22536765e+01 -6.65447363e+00 -6.65447363e+00
 -6.65447363e+00 -1.16337690e+00 -2.36249935e-01 -2.36249935e-01
 -2.36249935e-01  8.63781808e+01  6.78519845e+02  3.93621195e+03
  2.96208004e+04  1.54739889e+05  6.64892954e+05  2.71962894e+06
  1.10459670e+07  4.65100881e+07]
E1 = -706.5600983846774  E_coul = 198.92037937210395
cycle= 4 E= -507.639719012573  delta_E= -3.98e-11  |g|= 3.74e-07  |ddm|= 3.45e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.5600983846774  E_coul = 198.92037937210395
  HOMO = -0.23624991902967  LUMO = 86.3781811777067
  mo_energy =
[-1.20270446e+02 -1.22536764e+01 -6.65447347e+00 -6.65447347e+00
 -6.65447347e+00 -1.16337689e+00 -2.36249919e-01 -2.36249919e-01
 -2.36249919e-01  8.63781812e+01  6.78519846e+02  3.93621195e+03
  2.96208004e+04  1.54739889e+05  6.64892954e+05  2.71962894e+06
  1.10459670e+07  4.65100881e+07]
E1 = -706.5600984217037  E_coul = 198.9203794091301
Extra cycle  E= -507.639719012574  delta_E= -2.27e-13  |g|= 6.45e-09  |ddm|= 1.64e-08
    CPU time for scf_cycle      0.10 sec, wall time      0.11 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 56.39405567877152
E1 = -706.5600984217037  E_coul = 198.9203794091301
init E= -507.639719012574
    CPU time for initialize scf      0.16 sec, wall time      0.16 sec
  HOMO = -0.236249918838811  LUMO = 86.3781811818418
  mo_energy =
[-1.20270446e+02 -1.22536764e+01 -6.65447347e+00 -6.65447347e+00
 -6.65447347e+00 -1.16337689e+00 -2.36249919e-01 -2.36249919e-01
 -2.36249919e-01  8.63781812e+01  6.78519846e+02  3.93621195e+03
  2.96208004e+04  1.54739889e+05  6.64892954e+05  2.71962894e+06
  1.10459670e+07  4.65100881e+07]
E1 = -706.560098422263  E_coul = 198.92037940968984
cycle= 1 E= -507.639719012573  delta_E= 5.68e-13  |g|= 1.52e-10  |ddm|= 2.54e-10
    CPU time for cycle= 1      0.02 sec, wall time      0.02 sec
E1 = -706.560098422263  E_coul = 198.92037940968984
  HOMO = -0.236249918836123  LUMO = 86.3781811818971
  mo_energy =
[-1.20270446e+02 -1.22536764e+01 -6.65447347e+00 -6.65447347e+00
 -6.65447347e+00 -1.16337689e+00 -2.36249919e-01 -2.36249919e-01
 -2.36249919e-01  8.63781812e+01  6.78519846e+02  3.93621195e+03
  2.96208004e+04  1.54739889e+05  6.64892954e+05  2.71962894e+06
  1.10459670e+07  4.65100881e+07]
E1 = -706.5600984222733  E_coul = 198.92037940969965
Extra cycle  E= -507.639719012574  delta_E= -5.68e-13  |g|= 2.22e-10  |ddm|= 4.63e-12
    CPU time for scf_cycle      0.26 sec, wall time      0.26 sec
exp = [1.87954849e+07 4.69887121e+06 1.17471780e+06 2.93679451e+05
 7.34198657e+04 1.83538611e+04 2.23424310e+03 4.56847703e+02
 1.21726874e+02 3.75881947e+01 4.74104883e+00 3.91260588e-01
 8.59914414e+00 4.90926036e-01]
grad_E = [-1.11452302e-13  1.79992269e-11  8.53664986e-12  1.05276688e-08
 -3.42318610e-08  6.41673952e-06 -9.41234319e-06  3.81693583e-07
  2.07952073e-05 -5.46714381e-05 -1.71174965e-04  1.22361773e-03
  3.48320822e-04  2.50813582e-03]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="BFGS",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((14, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.6988712134173084e+06,1.1747178033543271e+06,2.9367945083858178e+05,7.3419865393677101e+04,1.8353927627435987e+04,2.2341424145819028e+03,4.5688904996449571e+02,1.2173317272260677e+02,3.7593061247508530e+01,4.7412722556720146e+00,3.9120358491841306e-01,8.5986297237246045e+00,4.9084868336327880e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "12s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:15:02 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  18795484.8537        1
[INPUT] 0    0    [1    /1   ]  4698871.21342        1
[INPUT] 0    0    [1    /1   ]  1174717.80335        1
[INPUT] 0    0    [1    /1   ]  293679.450679        1
[INPUT] 0    0    [1    /1   ]  73419.8659117        1
[INPUT] 0    0    [1    /1   ]  18353.8303789        1
[INPUT] 0    0    [1    /1   ]  2234.28959073        1
[INPUT] 0    0    [1    /1   ]  456.828782366        1
[INPUT] 0    0    [1    /1   ]  121.722714985        1
[INPUT] 0    0    [1    /1   ]  37.5896815295        1
[INPUT] 0    0    [1    /1   ]  4.74094459046        1
[INPUT] 0    0    [1    /1   ]  0.391281473576       1
[INPUT] 1    0    [1    /1   ]  8.59931266954        1
[INPUT] 1    0    [1    /1   ]  0.490952385904       1

nuclear repulsion = 0
number of shells = 14
number of NR pGTOs = 18
number of NR cGTOs = 18
basis = {'Ar': [[0, [18795484.853669234, 1.0]], [0, [4698871.213417034, 1.0]], [0, [1174717.8033541967, 1.0]], [0, [293679.4506790414, 1.0]], [0, [73419.86591170356, 1.0]], [0, [18353.83037891884, 1.0]], [0, [2234.289590727749, 1.0]], [0, [456.8287823657023, 1.0]], [0, [121.72271498534795, 1.0]], [0, [37.5896815294737, 1.0]], [0, [4.7409445904574135, 1.0]], [0, [0.39128147357575294, 1.0]], [1, [8.599312669542366, 1.0]], [1, [0.4909523859036739, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [18795484.85366923]
bas 1, expnt(s) = [4698871.21341703]
bas 2, expnt(s) = [1174717.8033542]
bas 3, expnt(s) = [293679.45067904]
bas 4, expnt(s) = [73419.8659117]
bas 5, expnt(s) = [18353.83037892]
bas 6, expnt(s) = [2234.28959073]
bas 7, expnt(s) = [456.82878237]
bas 8, expnt(s) = [121.72271499]
bas 9, expnt(s) = [37.58968153]
bas 10, expnt(s) = [4.74094459]
bas 11, expnt(s) = [0.39128147]
bas 12, expnt(s) = [8.59931267]
bas 13, expnt(s) = [0.49095239]
CPU time:        83.21
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  0  1  1  0 42 43  0]
 [ 0  0  1  1  0 44 45  0]
 [ 0  0  1  1  0 46 47  0]
 [ 0  1  1  1  0 48 49  0]
 [ 0  1  1  1  0 50 51  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.87954849e+07 7.21199097e+05 4.69887121e+06 2.54982386e+05
 1.17471780e+06 9.01498871e+04 2.93679451e+05 3.18727982e+04
 7.34198659e+04 1.12687363e+04 1.83538304e+04 3.98391496e+03
 2.23428959e+03 8.21050029e+02 4.56828782e+02 2.49649165e+02
 1.21722715e+02 9.25856643e+01 3.75896815e+01 3.83545162e+01
 4.74094459e+00 8.11733901e+00 3.91281474e-01 1.24991934e+00
 8.59931267e+00 4.29599797e+01 4.90952386e-01 1.19890180e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319835766729184
cond(S) = 56.394436285055235
E1 = -688.8393429945562  E_coul = 184.92267219653766
init E= -503.916670798019
    CPU time for initialize scf      0.03 sec, wall time      0.03 sec
  HOMO = -0.680744392407474  LUMO = 85.0498380237778
  mo_energy =
[-1.21649524e+02 -1.32805371e+01 -7.62111945e+00 -7.62111945e+00
 -7.62111945e+00 -1.65058611e+00 -6.80744392e-01 -6.80744392e-01
 -6.80744392e-01  8.50498380e+01  6.77138750e+02  3.93495965e+03
  2.96197778e+04  1.54738892e+05  6.64891965e+05  2.71962796e+06
  1.10459660e+07  4.65100871e+07]
E1 = -706.5944847475032  E_coul = 198.9551934583361
cycle= 1 E= -507.639291289167  delta_E= -3.72  |g|= 0.318  |ddm|= 0.301
    CPU time for cycle= 1      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.420512
diis-c [-0.17683035  1.        ]
  HOMO = -0.236001700005613  LUMO = 86.3830041536793
  mo_energy =
[-1.20261378e+02 -1.22522971e+01 -6.65244211e+00 -6.65244211e+00
 -6.65244211e+00 -1.16325377e+00 -2.36001700e-01 -2.36001700e-01
 -2.36001700e-01  8.63830042e+01  6.78509473e+02  3.93621139e+03
  2.96208667e+04  1.54739910e+05  6.64892953e+05  2.71962893e+06
  1.10459670e+07  4.65100881e+07]
E1 = -706.5630379479114  E_coul = 198.92331846650683
cycle= 2 E= -507.639719481405  delta_E= -0.000428  |g|= 0.00474  |ddm|= 0.0143
    CPU time for cycle= 2      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.00504394
diis-c [-2.53961475e-05 -5.06028695e-04  1.00050603e+00]
  HOMO = -0.236177060191306  LUMO = 86.3794844846389
  mo_energy =
[-1.20270021e+02 -1.22534862e+01 -6.65428400e+00 -6.65428400e+00
 -6.65428400e+00 -1.16331857e+00 -2.36177060e-01 -2.36177060e-01
 -2.36177060e-01  8.63794845e+01  6.78498885e+02  3.93619549e+03
  2.96208474e+04  1.54739890e+05  6.64892933e+05  2.71962891e+06
  1.10459669e+07  4.65100880e+07]
E1 = -706.5625975032325  E_coul = 198.92287791165296
cycle= 3 E= -507.63971959158  delta_E= -1.1e-07  |g|= 9.48e-05  |ddm|= 0.000202
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00012683
diis-c [-3.96048182e-10  3.34050296e-05 -2.54636360e-02  1.02543023e+00]
  HOMO = -0.236179274318512  LUMO = 86.3794398029656
  mo_energy =
[-1.20270134e+02 -1.22535020e+01 -6.65431098e+00 -6.65431098e+00
 -6.65431098e+00 -1.16331923e+00 -2.36179274e-01 -2.36179274e-01
 -2.36179274e-01  8.63794398e+01  6.78498767e+02  3.93619535e+03
  2.96208472e+04  1.54739890e+05  6.64892932e+05  2.71962891e+06
  1.10459669e+07  4.65100880e+07]
E1 = -706.5625902607654  E_coul = 198.922870669146
cycle= 4 E= -507.639719591619  delta_E= -3.99e-11  |g|= 3.74e-07  |ddm|= 3.45e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.5625902607654  E_coul = 198.922870669146
  HOMO = -0.236179257998869  LUMO = 86.3794401412045
  mo_energy =
[-1.20270133e+02 -1.22535019e+01 -6.65431082e+00 -6.65431082e+00
 -6.65431082e+00 -1.16331922e+00 -2.36179258e-01 -2.36179258e-01
 -2.36179258e-01  8.63794401e+01  6.78498769e+02  3.93619535e+03
  2.96208472e+04  1.54739890e+05  6.64892932e+05  2.71962891e+06
  1.10459669e+07  4.65100880e+07]
E1 = -706.5625902977914  E_coul = 198.92287070617218
Extra cycle  E= -507.639719591619  delta_E= 1.71e-13  |g|= 6.46e-09  |ddm|= 1.64e-08
    CPU time for scf_cycle      0.11 sec, wall time      0.11 sec
exp = [1.87954849e+07 4.69887121e+06 1.17471780e+06 2.93679451e+05
 7.34198659e+04 1.83538304e+04 2.23428959e+03 4.56828782e+02
 1.21722715e+02 3.75896815e+01 4.74094459e+00 3.91281474e-01
 8.59931267e+00 4.90952386e-01]
E = -507.63971959161927
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="BFGS",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((14, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.6988712134173084e+06,1.1747178033543271e+06,2.9367945083858178e+05,7.3419865393677101e+04,1.8353927627435987e+04,2.2341424145819028e+03,4.5688904996449571e+02,1.2173317272260677e+02,3.7593061247508530e+01,4.7412722556720146e+00,3.9120358491841306e-01,8.5986297237246045e+00,4.9084868336327880e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "12s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:15:03 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  18795484.8537        1
[INPUT] 0    0    [1    /1   ]  4698871.21342        1
[INPUT] 0    0    [1    /1   ]  1174717.80335        1
[INPUT] 0    0    [1    /1   ]  293679.450679        1
[INPUT] 0    0    [1    /1   ]  73419.8659117        1
[INPUT] 0    0    [1    /1   ]  18353.8303789        1
[INPUT] 0    0    [1    /1   ]  2234.28959073        1
[INPUT] 0    0    [1    /1   ]  456.828782366        1
[INPUT] 0    0    [1    /1   ]  121.722714985        1
[INPUT] 0    0    [1    /1   ]  37.5896815295        1
[INPUT] 0    0    [1    /1   ]  4.74094459046        1
[INPUT] 0    0    [1    /1   ]  0.391281473576       1
[INPUT] 1    0    [1    /1   ]  8.59931266954        1
[INPUT] 1    0    [1    /1   ]  0.490952385904       1

nuclear repulsion = 0
number of shells = 14
number of NR pGTOs = 18
number of NR cGTOs = 18
basis = {'Ar': [[0, [18795484.853669234, 1.0]], [0, [4698871.213417034, 1.0]], [0, [1174717.8033541967, 1.0]], [0, [293679.4506790414, 1.0]], [0, [73419.86591170356, 1.0]], [0, [18353.83037891884, 1.0]], [0, [2234.289590727749, 1.0]], [0, [456.8287823657023, 1.0]], [0, [121.72271498534795, 1.0]], [0, [37.5896815294737, 1.0]], [0, [4.7409445904574135, 1.0]], [0, [0.39128147357575294, 1.0]], [1, [8.599312669542366, 1.0]], [1, [0.4909523859036739, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [18795484.85366923]
bas 1, expnt(s) = [4698871.21341703]
bas 2, expnt(s) = [1174717.8033542]
bas 3, expnt(s) = [293679.45067904]
bas 4, expnt(s) = [73419.8659117]
bas 5, expnt(s) = [18353.83037892]
bas 6, expnt(s) = [2234.28959073]
bas 7, expnt(s) = [456.82878237]
bas 8, expnt(s) = [121.72271499]
bas 9, expnt(s) = [37.58968153]
bas 10, expnt(s) = [4.74094459]
bas 11, expnt(s) = [0.39128147]
bas 12, expnt(s) = [8.59931267]
bas 13, expnt(s) = [0.49095239]
CPU time:        83.73
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  0  1  1  0 42 43  0]
 [ 0  0  1  1  0 44 45  0]
 [ 0  0  1  1  0 46 47  0]
 [ 0  1  1  1  0 48 49  0]
 [ 0  1  1  1  0 50 51  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.87954849e+07 7.21199097e+05 4.69887121e+06 2.54982386e+05
 1.17471780e+06 9.01498871e+04 2.93679451e+05 3.18727982e+04
 7.34198659e+04 1.12687363e+04 1.83538304e+04 3.98391496e+03
 2.23428959e+03 8.21050029e+02 4.56828782e+02 2.49649165e+02
 1.21722715e+02 9.25856643e+01 3.75896815e+01 3.83545162e+01
 4.74094459e+00 8.11733901e+00 3.91281474e-01 1.24991934e+00
 8.59931267e+00 4.29599797e+01 4.90952386e-01 1.19890180e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319835766729184
cond(S) = 56.394436285055235
E1 = -688.8393429945562  E_coul = 184.92267219653766
init E= -503.916670798019
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.680744392407474  LUMO = 85.0498380237778
  mo_energy =
[-1.21649524e+02 -1.32805371e+01 -7.62111945e+00 -7.62111945e+00
 -7.62111945e+00 -1.65058611e+00 -6.80744392e-01 -6.80744392e-01
 -6.80744392e-01  8.50498380e+01  6.77138750e+02  3.93495965e+03
  2.96197778e+04  1.54738892e+05  6.64891965e+05  2.71962796e+06
  1.10459660e+07  4.65100871e+07]
E1 = -706.5944847475032  E_coul = 198.9551934583361
cycle= 1 E= -507.639291289167  delta_E= -3.72  |g|= 0.318  |ddm|= 0.301
    CPU time for cycle= 1      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.420512
diis-c [-0.17683035  1.        ]
  HOMO = -0.236001700005613  LUMO = 86.3830041536793
  mo_energy =
[-1.20261378e+02 -1.22522971e+01 -6.65244211e+00 -6.65244211e+00
 -6.65244211e+00 -1.16325377e+00 -2.36001700e-01 -2.36001700e-01
 -2.36001700e-01  8.63830042e+01  6.78509473e+02  3.93621139e+03
  2.96208667e+04  1.54739910e+05  6.64892953e+05  2.71962893e+06
  1.10459670e+07  4.65100881e+07]
E1 = -706.5630379479114  E_coul = 198.92331846650683
cycle= 2 E= -507.639719481405  delta_E= -0.000428  |g|= 0.00474  |ddm|= 0.0143
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00504394
diis-c [-2.53961475e-05 -5.06028695e-04  1.00050603e+00]
  HOMO = -0.236177060191306  LUMO = 86.3794844846389
  mo_energy =
[-1.20270021e+02 -1.22534862e+01 -6.65428400e+00 -6.65428400e+00
 -6.65428400e+00 -1.16331857e+00 -2.36177060e-01 -2.36177060e-01
 -2.36177060e-01  8.63794845e+01  6.78498885e+02  3.93619549e+03
  2.96208474e+04  1.54739890e+05  6.64892933e+05  2.71962891e+06
  1.10459669e+07  4.65100880e+07]
E1 = -706.5625975032325  E_coul = 198.92287791165296
cycle= 3 E= -507.63971959158  delta_E= -1.1e-07  |g|= 9.48e-05  |ddm|= 0.000202
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00012683
diis-c [-3.96048182e-10  3.34050296e-05 -2.54636360e-02  1.02543023e+00]
  HOMO = -0.236179274318512  LUMO = 86.3794398029656
  mo_energy =
[-1.20270134e+02 -1.22535020e+01 -6.65431098e+00 -6.65431098e+00
 -6.65431098e+00 -1.16331923e+00 -2.36179274e-01 -2.36179274e-01
 -2.36179274e-01  8.63794398e+01  6.78498767e+02  3.93619535e+03
  2.96208472e+04  1.54739890e+05  6.64892932e+05  2.71962891e+06
  1.10459669e+07  4.65100880e+07]
E1 = -706.5625902607654  E_coul = 198.922870669146
cycle= 4 E= -507.639719591619  delta_E= -3.99e-11  |g|= 3.74e-07  |ddm|= 3.45e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.5625902607654  E_coul = 198.922870669146
  HOMO = -0.236179257998869  LUMO = 86.3794401412045
  mo_energy =
[-1.20270133e+02 -1.22535019e+01 -6.65431082e+00 -6.65431082e+00
 -6.65431082e+00 -1.16331922e+00 -2.36179258e-01 -2.36179258e-01
 -2.36179258e-01  8.63794401e+01  6.78498769e+02  3.93619535e+03
  2.96208472e+04  1.54739890e+05  6.64892932e+05  2.71962891e+06
  1.10459669e+07  4.65100880e+07]
E1 = -706.5625902977914  E_coul = 198.92287070617218
Extra cycle  E= -507.639719591619  delta_E= 1.71e-13  |g|= 6.46e-09  |ddm|= 1.64e-08
    CPU time for scf_cycle      0.11 sec, wall time      0.12 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 56.394436285055235
E1 = -706.5625902977914  E_coul = 198.92287070617218
init E= -507.639719591619
    CPU time for initialize scf      0.12 sec, wall time      0.12 sec
  HOMO = -0.236179257807986  LUMO = 86.3794401453371
  mo_energy =
[-1.20270133e+02 -1.22535019e+01 -6.65431081e+00 -6.65431081e+00
 -6.65431081e+00 -1.16331922e+00 -2.36179258e-01 -2.36179258e-01
 -2.36179258e-01  8.63794401e+01  6.78498769e+02  3.93619535e+03
  2.96208472e+04  1.54739890e+05  6.64892932e+05  2.71962891e+06
  1.10459669e+07  4.65100880e+07]
E1 = -706.5625902983514  E_coul = 198.92287070673248
cycle= 1 E= -507.639719591619  delta_E= 3.41e-13  |g|= 1.44e-10  |ddm|= 2.54e-10
    CPU time for cycle= 1      0.02 sec, wall time      0.02 sec
E1 = -706.5625902983514  E_coul = 198.92287070673248
  HOMO = -0.236179257805293  LUMO = 86.3794401453944
  mo_energy =
[-1.20270133e+02 -1.22535019e+01 -6.65431081e+00 -6.65431081e+00
 -6.65431081e+00 -1.16331922e+00 -2.36179258e-01 -2.36179258e-01
 -2.36179258e-01  8.63794401e+01  6.78498769e+02  3.93619535e+03
  2.96208472e+04  1.54739890e+05  6.64892932e+05  2.71962891e+06
  1.10459669e+07  4.65100880e+07]
E1 = -706.5625902983614  E_coul = 198.92287070674237
Extra cycle  E= -507.639719591619  delta_E= -1.14e-13  |g|= 6.5e-11  |ddm|= 4.54e-12
    CPU time for scf_cycle      0.19 sec, wall time      0.20 sec
exp = [1.87954849e+07 4.69887121e+06 1.17471780e+06 2.93679451e+05
 7.34198659e+04 1.83538304e+04 2.23428959e+03 4.56828782e+02
 1.21722715e+02 3.75896815e+01 4.74094459e+00 3.91281474e-01
 8.59931267e+00 4.90952386e-01]
grad_E = [-1.11503506e-13  1.79959837e-11  8.50960232e-12  1.05258224e-08
 -3.42405234e-08  6.41552180e-06 -9.35138920e-06  5.47868675e-07
  1.37339136e-05 -2.87900282e-05 -2.29303357e-04  1.64405981e-03
  4.65009772e-04  3.37300622e-03]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="BFGS",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((14, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.6988712134173084e+06,1.1747178033543271e+06,2.9367945083858178e+05,7.3419865393677101e+04,1.8353927627435987e+04,2.2341424145819028e+03,4.5688904996449571e+02,1.2173317272260677e+02,3.7593061247508530e+01,4.7412722556720146e+00,3.9120358491841306e-01,8.5986297237246045e+00,4.9084868336327880e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "12s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:15:06 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  18795484.8537        1
[INPUT] 0    0    [1    /1   ]  4698871.21342        1
[INPUT] 0    0    [1    /1   ]  1174717.80335        1
[INPUT] 0    0    [1    /1   ]  293679.450576        1
[INPUT] 0    0    [1    /1   ]  73419.8662466        1
[INPUT] 0    0    [1    /1   ]  18353.7675002        1
[INPUT] 0    0    [1    /1   ]  2234.38473946        1
[INPUT] 0    0    [1    /1   ]  456.790006339        1
[INPUT] 0    0    [1    /1   ]  121.714570203        1
[INPUT] 0    0    [1    /1   ]  37.5916172031        1
[INPUT] 0    0    [1    /1   ]  4.7407970231         1
[INPUT] 0    0    [1    /1   ]  0.391310399992       1
[INPUT] 1    0    [1    /1   ]  8.5995451607         1
[INPUT] 1    0    [1    /1   ]  0.490988804508       1

nuclear repulsion = 0
number of shells = 14
number of NR pGTOs = 18
number of NR cGTOs = 18
basis = {'Ar': [[0, [18795484.853669234, 1.0]], [0, [4698871.213416858, 1.0]], [0, [1174717.8033541122, 1.0]], [0, [293679.4505758861, 1.0]], [0, [73419.86624664988, 1.0]], [0, [18353.767500169724, 1.0]], [0, [2234.384739464236, 1.0]], [0, [456.79000633851535, 1.0]], [0, [121.71457020349207, 1.0]], [0, [37.59161720311487, 1.0]], [0, [4.740797023097445, 1.0]], [0, [0.39131039999221096, 1.0]], [1, [8.599545160695243, 1.0]], [1, [0.4909888045075219, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [18795484.85366923]
bas 1, expnt(s) = [4698871.21341686]
bas 2, expnt(s) = [1174717.80335411]
bas 3, expnt(s) = [293679.45057589]
bas 4, expnt(s) = [73419.86624665]
bas 5, expnt(s) = [18353.76750017]
bas 6, expnt(s) = [2234.38473946]
bas 7, expnt(s) = [456.79000634]
bas 8, expnt(s) = [121.7145702]
bas 9, expnt(s) = [37.5916172]
bas 10, expnt(s) = [4.74079702]
bas 11, expnt(s) = [0.3913104]
bas 12, expnt(s) = [8.59954516]
bas 13, expnt(s) = [0.4909888]
CPU time:        87.02
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  0  1  1  0 42 43  0]
 [ 0  0  1  1  0 44 45  0]
 [ 0  0  1  1  0 46 47  0]
 [ 0  1  1  1  0 48 49  0]
 [ 0  1  1  1  0 50 51  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.87954849e+07 7.21199097e+05 4.69887121e+06 2.54982386e+05
 1.17471780e+06 9.01498871e+04 2.93679451e+05 3.18727982e+04
 7.34198662e+04 1.12687363e+04 1.83537675e+04 3.98390472e+03
 2.23438474e+03 8.21076253e+02 4.56790006e+02 2.49633272e+02
 1.21714570e+02 9.25810179e+01 3.75916172e+01 3.83559975e+01
 4.74079702e+00 8.11714951e+00 3.91310400e-01 1.24998864e+00
 8.59954516e+00 4.29614316e+01 4.90988805e-01 1.19901297e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319786763926416
cond(S) = 56.39495609111413
E1 = -688.8419994927375  E_coul = 184.92523272273542
init E= -503.916766770002
    CPU time for initialize scf      0.03 sec, wall time      0.03 sec
  HOMO = -0.680689615992012  LUMO = 85.0502711376992
  mo_energy =
[-1.21649161e+02 -1.32803506e+01 -7.62094861e+00 -7.62094861e+00
 -7.62094861e+00 -1.65054583e+00 -6.80689616e-01 -6.80689616e-01
 -6.80689616e-01  8.50502711e+01  6.77092328e+02  3.93492283e+03
  2.96198713e+04  1.54738892e+05  6.64891919e+05  2.71962791e+06
  1.10459660e+07  4.65100870e+07]
E1 = -706.5979335713231  E_coul = 198.95864131281854
cycle= 1 E= -507.639292258505  delta_E= -3.72  |g|= 0.318  |ddm|= 0.301
    CPU time for cycle= 1      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.420529
diis-c [-0.17684461  1.        ]
  HOMO = -0.235903969898829  LUMO = 86.3835083329974
  mo_energy =
[-1.20260942e+02 -1.22520574e+01 -6.65221713e+00 -6.65221713e+00
 -6.65221713e+00 -1.16317415e+00 -2.35903970e-01 -2.35903970e-01
 -2.35903970e-01  8.63835083e+01  6.78463140e+02  3.93617465e+03
  2.96209602e+04  1.54739910e+05  6.64892907e+05  2.71962888e+06
  1.10459669e+07  4.65100880e+07]
E1 = -706.5664849699536  E_coul = 198.92676446074222
cycle= 2 E= -507.639720509211  delta_E= -0.000428  |g|= 0.00474  |ddm|= 0.0143
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00504424
diis-c [-2.53989535e-05 -5.06912699e-04  1.00050691e+00]
  HOMO = -0.236079367224701  LUMO = 86.3799885857294
  mo_energy =
[-1.20269585e+02 -1.22532466e+01 -6.65405915e+00 -6.65405915e+00
 -6.65405915e+00 -1.16323896e+00 -2.36079367e-01 -2.36079367e-01
 -2.36079367e-01  8.63799886e+01  6.78452552e+02  3.93615875e+03
  2.96209410e+04  1.54739890e+05  6.64892886e+05  2.71962886e+06
  1.10459669e+07  4.65100880e+07]
E1 = -706.5660444873544  E_coul = 198.92632386794577
cycle= 3 E= -507.639720619409  delta_E= -1.1e-07  |g|= 9.48e-05  |ddm|= 0.000202
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.000126833
diis-c [-3.96041512e-10  3.34134284e-05 -2.54630431e-02  1.02542963e+00]
  HOMO = -0.236081581766146  LUMO = 86.3799439046242
  mo_energy =
[-1.20269698e+02 -1.22532624e+01 -6.65408613e+00 -6.65408613e+00
 -6.65408613e+00 -1.16323962e+00 -2.36081582e-01 -2.36081582e-01
 -2.36081582e-01  8.63799439e+01  6.78452434e+02  3.93615861e+03
  2.96209408e+04  1.54739890e+05  6.64892886e+05  2.71962886e+06
  1.10459669e+07  4.65100880e+07]
E1 = -706.5660372445642  E_coul = 198.92631662511587
cycle= 4 E= -507.639720619448  delta_E= -3.97e-11  |g|= 3.74e-07  |ddm|= 3.45e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.5660372445642  E_coul = 198.92631662511587
  HOMO = -0.236081565443842  LUMO = 86.3799442428566
  mo_energy =
[-1.20269698e+02 -1.22532623e+01 -6.65408597e+00 -6.65408597e+00
 -6.65408597e+00 -1.16323961e+00 -2.36081565e-01 -2.36081565e-01
 -2.36081565e-01  8.63799442e+01  6.78452436e+02  3.93615861e+03
  2.96209408e+04  1.54739890e+05  6.64892886e+05  2.71962886e+06
  1.10459669e+07  4.65100880e+07]
E1 = -706.566037281592  E_coul = 198.92631666214376
Extra cycle  E= -507.639720619448  delta_E= 1.14e-13  |g|= 6.45e-09  |ddm|= 1.64e-08
    CPU time for scf_cycle      0.10 sec, wall time      0.11 sec
exp = [1.87954849e+07 4.69887121e+06 1.17471780e+06 2.93679451e+05
 7.34198662e+04 1.83537675e+04 2.23438474e+03 4.56790006e+02
 1.21714570e+02 3.75916172e+01 4.74079702e+00 3.91310400e-01
 8.59954516e+00 4.90988805e-01]
E = -507.6397206194482
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="BFGS",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((14, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.6988712134173084e+06,1.1747178033543271e+06,2.9367945083858178e+05,7.3419865393677101e+04,1.8353927627435987e+04,2.2341424145819028e+03,4.5688904996449571e+02,1.2173317272260677e+02,3.7593061247508530e+01,4.7412722556720146e+00,3.9120358491841306e-01,8.5986297237246045e+00,4.9084868336327880e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "12s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:15:06 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  18795484.8537        1
[INPUT] 0    0    [1    /1   ]  4698871.21342        1
[INPUT] 0    0    [1    /1   ]  1174717.80335        1
[INPUT] 0    0    [1    /1   ]  293679.450576        1
[INPUT] 0    0    [1    /1   ]  73419.8662466        1
[INPUT] 0    0    [1    /1   ]  18353.7675002        1
[INPUT] 0    0    [1    /1   ]  2234.38473946        1
[INPUT] 0    0    [1    /1   ]  456.790006339        1
[INPUT] 0    0    [1    /1   ]  121.714570203        1
[INPUT] 0    0    [1    /1   ]  37.5916172031        1
[INPUT] 0    0    [1    /1   ]  4.7407970231         1
[INPUT] 0    0    [1    /1   ]  0.391310399992       1
[INPUT] 1    0    [1    /1   ]  8.5995451607         1
[INPUT] 1    0    [1    /1   ]  0.490988804508       1

nuclear repulsion = 0
number of shells = 14
number of NR pGTOs = 18
number of NR cGTOs = 18
basis = {'Ar': [[0, [18795484.853669234, 1.0]], [0, [4698871.213416858, 1.0]], [0, [1174717.8033541122, 1.0]], [0, [293679.4505758861, 1.0]], [0, [73419.86624664988, 1.0]], [0, [18353.767500169724, 1.0]], [0, [2234.384739464236, 1.0]], [0, [456.79000633851535, 1.0]], [0, [121.71457020349207, 1.0]], [0, [37.59161720311487, 1.0]], [0, [4.740797023097445, 1.0]], [0, [0.39131039999221096, 1.0]], [1, [8.599545160695243, 1.0]], [1, [0.4909888045075219, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [18795484.85366923]
bas 1, expnt(s) = [4698871.21341686]
bas 2, expnt(s) = [1174717.80335411]
bas 3, expnt(s) = [293679.45057589]
bas 4, expnt(s) = [73419.86624665]
bas 5, expnt(s) = [18353.76750017]
bas 6, expnt(s) = [2234.38473946]
bas 7, expnt(s) = [456.79000634]
bas 8, expnt(s) = [121.7145702]
bas 9, expnt(s) = [37.5916172]
bas 10, expnt(s) = [4.74079702]
bas 11, expnt(s) = [0.3913104]
bas 12, expnt(s) = [8.59954516]
bas 13, expnt(s) = [0.4909888]
CPU time:        87.52
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  0  1  1  0 42 43  0]
 [ 0  0  1  1  0 44 45  0]
 [ 0  0  1  1  0 46 47  0]
 [ 0  1  1  1  0 48 49  0]
 [ 0  1  1  1  0 50 51  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.87954849e+07 7.21199097e+05 4.69887121e+06 2.54982386e+05
 1.17471780e+06 9.01498871e+04 2.93679451e+05 3.18727982e+04
 7.34198662e+04 1.12687363e+04 1.83537675e+04 3.98390472e+03
 2.23438474e+03 8.21076253e+02 4.56790006e+02 2.49633272e+02
 1.21714570e+02 9.25810179e+01 3.75916172e+01 3.83559975e+01
 4.74079702e+00 8.11714951e+00 3.91310400e-01 1.24998864e+00
 8.59954516e+00 4.29614316e+01 4.90988805e-01 1.19901297e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319786763926416
cond(S) = 56.39495609111413
E1 = -688.8419994927375  E_coul = 184.92523272273542
init E= -503.916766770002
    CPU time for initialize scf      0.03 sec, wall time      0.03 sec
  HOMO = -0.680689615992012  LUMO = 85.0502711376992
  mo_energy =
[-1.21649161e+02 -1.32803506e+01 -7.62094861e+00 -7.62094861e+00
 -7.62094861e+00 -1.65054583e+00 -6.80689616e-01 -6.80689616e-01
 -6.80689616e-01  8.50502711e+01  6.77092328e+02  3.93492283e+03
  2.96198713e+04  1.54738892e+05  6.64891919e+05  2.71962791e+06
  1.10459660e+07  4.65100870e+07]
E1 = -706.5979335713231  E_coul = 198.95864131281854
cycle= 1 E= -507.639292258505  delta_E= -3.72  |g|= 0.318  |ddm|= 0.301
    CPU time for cycle= 1      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.420529
diis-c [-0.17684461  1.        ]
  HOMO = -0.235903969898829  LUMO = 86.3835083329974
  mo_energy =
[-1.20260942e+02 -1.22520574e+01 -6.65221713e+00 -6.65221713e+00
 -6.65221713e+00 -1.16317415e+00 -2.35903970e-01 -2.35903970e-01
 -2.35903970e-01  8.63835083e+01  6.78463140e+02  3.93617465e+03
  2.96209602e+04  1.54739910e+05  6.64892907e+05  2.71962888e+06
  1.10459669e+07  4.65100880e+07]
E1 = -706.5664849699536  E_coul = 198.92676446074222
cycle= 2 E= -507.639720509211  delta_E= -0.000428  |g|= 0.00474  |ddm|= 0.0143
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00504424
diis-c [-2.53989535e-05 -5.06912699e-04  1.00050691e+00]
  HOMO = -0.236079367224701  LUMO = 86.3799885857294
  mo_energy =
[-1.20269585e+02 -1.22532466e+01 -6.65405915e+00 -6.65405915e+00
 -6.65405915e+00 -1.16323896e+00 -2.36079367e-01 -2.36079367e-01
 -2.36079367e-01  8.63799886e+01  6.78452552e+02  3.93615875e+03
  2.96209410e+04  1.54739890e+05  6.64892886e+05  2.71962886e+06
  1.10459669e+07  4.65100880e+07]
E1 = -706.5660444873544  E_coul = 198.92632386794577
cycle= 3 E= -507.639720619409  delta_E= -1.1e-07  |g|= 9.48e-05  |ddm|= 0.000202
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.000126833
diis-c [-3.96041512e-10  3.34134284e-05 -2.54630431e-02  1.02542963e+00]
  HOMO = -0.236081581766146  LUMO = 86.3799439046242
  mo_energy =
[-1.20269698e+02 -1.22532624e+01 -6.65408613e+00 -6.65408613e+00
 -6.65408613e+00 -1.16323962e+00 -2.36081582e-01 -2.36081582e-01
 -2.36081582e-01  8.63799439e+01  6.78452434e+02  3.93615861e+03
  2.96209408e+04  1.54739890e+05  6.64892886e+05  2.71962886e+06
  1.10459669e+07  4.65100880e+07]
E1 = -706.5660372445642  E_coul = 198.92631662511587
cycle= 4 E= -507.639720619448  delta_E= -3.97e-11  |g|= 3.74e-07  |ddm|= 3.45e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.5660372445642  E_coul = 198.92631662511587
  HOMO = -0.236081565443842  LUMO = 86.3799442428566
  mo_energy =
[-1.20269698e+02 -1.22532623e+01 -6.65408597e+00 -6.65408597e+00
 -6.65408597e+00 -1.16323961e+00 -2.36081565e-01 -2.36081565e-01
 -2.36081565e-01  8.63799442e+01  6.78452436e+02  3.93615861e+03
  2.96209408e+04  1.54739890e+05  6.64892886e+05  2.71962886e+06
  1.10459669e+07  4.65100880e+07]
E1 = -706.566037281592  E_coul = 198.92631666214376
Extra cycle  E= -507.639720619448  delta_E= 1.14e-13  |g|= 6.45e-09  |ddm|= 1.64e-08
    CPU time for scf_cycle      0.11 sec, wall time      0.12 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 56.39495609111413
E1 = -706.566037281592  E_coul = 198.92631666214376
init E= -507.639720619448
    CPU time for initialize scf      0.13 sec, wall time      0.13 sec
  HOMO = -0.236081565252916  LUMO = 86.379944246986
  mo_energy =
[-1.20269698e+02 -1.22532623e+01 -6.65408596e+00 -6.65408596e+00
 -6.65408596e+00 -1.16323961e+00 -2.36081565e-01 -2.36081565e-01
 -2.36081565e-01  8.63799442e+01  6.78452436e+02  3.93615861e+03
  2.96209408e+04  1.54739890e+05  6.64892886e+05  2.71962886e+06
  1.10459669e+07  4.65100880e+07]
E1 = -706.5660372821528  E_coul = 198.9263166627045
cycle= 1 E= -507.639720619448  delta_E= -1.14e-13  |g|= 1.55e-10  |ddm|= 2.54e-10
    CPU time for cycle= 1      0.02 sec, wall time      0.02 sec
E1 = -706.5660372821528  E_coul = 198.9263166627045
  HOMO = -0.236081565250218  LUMO = 86.379944247047
  mo_energy =
[-1.20269698e+02 -1.22532623e+01 -6.65408596e+00 -6.65408596e+00
 -6.65408596e+00 -1.16323961e+00 -2.36081565e-01 -2.36081565e-01
 -2.36081565e-01  8.63799442e+01  6.78452436e+02  3.93615861e+03
  2.96209408e+04  1.54739890e+05  6.64892886e+05  2.71962886e+06
  1.10459669e+07  4.65100880e+07]
E1 = -706.5660372821617  E_coul = 198.92631666271376
Extra cycle  E= -507.639720619448  delta_E= 3.98e-13  |g|= 2.76e-10  |ddm|= 4.43e-12
    CPU time for scf_cycle      0.21 sec, wall time      0.22 sec
exp = [1.87954849e+07 4.69887121e+06 1.17471780e+06 2.93679451e+05
 7.34198662e+04 1.83537675e+04 2.23438474e+03 4.56790006e+02
 1.21714570e+02 3.75916172e+01 4.74079702e+00 3.91310400e-01
 8.59954516e+00 4.90988805e-01]
grad_E = [-1.11616812e-13  1.79888047e-11  8.44975064e-12  1.05217344e-08
 -3.42596134e-08  6.41280656e-06 -9.20251804e-06  3.39317534e-07
  4.10927660e-06  9.02148717e-06 -3.09622807e-04  2.22520579e-03
  6.26178294e-04  4.56857593e-03]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="BFGS",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((14, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.6988712134173084e+06,1.1747178033543271e+06,2.9367945083858178e+05,7.3419865393677101e+04,1.8353927627435987e+04,2.2341424145819028e+03,4.5688904996449571e+02,1.2173317272260677e+02,3.7593061247508530e+01,4.7412722556720146e+00,3.9120358491841306e-01,8.5986297237246045e+00,4.9084868336327880e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "12s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:15:10 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  18795484.8537        1
[INPUT] 0    0    [1    /1   ]  4698871.21342        1
[INPUT] 0    0    [1    /1   ]  1174717.80335        1
[INPUT] 0    0    [1    /1   ]  293679.450369        1
[INPUT] 0    0    [1    /1   ]  73419.8669195        1
[INPUT] 0    0    [1    /1   ]  18353.6411781        1
[INPUT] 0    0    [1    /1   ]  2234.57589525        1
[INPUT] 0    0    [1    /1   ]  456.712037714        1
[INPUT] 0    0    [1    /1   ]  121.698725325        1
[INPUT] 0    0    [1    /1   ]  37.593943316         1
[INPUT] 0    0    [1    /1   ]  4.74059335383        1
[INPUT] 0    0    [1    /1   ]  0.391349021244       1
[INPUT] 1    0    [1    /1   ]  8.59985364841        1
[INPUT] 1    0    [1    /1   ]  0.491037269743       1

nuclear repulsion = 0
number of shells = 14
number of NR pGTOs = 18
number of NR cGTOs = 18
basis = {'Ar': [[0, [18795484.853669237, 1.0]], [0, [4698871.213416504, 1.0]], [0, [1174717.8033539425, 1.0]], [0, [293679.4503686494, 1.0]], [0, [73419.8669195492, 1.0]], [0, [18353.64117812735, 1.0]], [0, [2234.5758952530696, 1.0]], [0, [456.7120377138078, 1.0]], [0, [121.69872532455653, 1.0]], [0, [37.59394331596677, 1.0]], [0, [4.740593353834139, 1.0]], [0, [0.3913490212440553, 1.0]], [1, [8.599853648405652, 1.0]], [1, [0.49103726974320594, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [18795484.85366924]
bas 1, expnt(s) = [4698871.2134165]
bas 2, expnt(s) = [1174717.80335394]
bas 3, expnt(s) = [293679.45036865]
bas 4, expnt(s) = [73419.86691955]
bas 5, expnt(s) = [18353.64117813]
bas 6, expnt(s) = [2234.57589525]
bas 7, expnt(s) = [456.71203771]
bas 8, expnt(s) = [121.69872532]
bas 9, expnt(s) = [37.59394332]
bas 10, expnt(s) = [4.74059335]
bas 11, expnt(s) = [0.39134902]
bas 12, expnt(s) = [8.59985365]
bas 13, expnt(s) = [0.49103727]
CPU time:        90.81
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  0  1  1  0 42 43  0]
 [ 0  0  1  1  0 44 45  0]
 [ 0  0  1  1  0 46 47  0]
 [ 0  1  1  1  0 48 49  0]
 [ 0  1  1  1  0 50 51  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.87954849e+07 7.21199097e+05 4.69887121e+06 2.54982386e+05
 1.17471780e+06 9.01498871e+04 2.93679450e+05 3.18727982e+04
 7.34198669e+04 1.12687364e+04 1.83536412e+04 3.98388416e+03
 2.23457590e+03 8.21128936e+02 4.56712038e+02 2.49601315e+02
 1.21698725e+02 9.25719786e+01 3.75939433e+01 3.83577775e+01
 4.74059335e+00 8.11688797e+00 3.91349021e-01 1.25008117e+00
 8.59985365e+00 4.29633580e+01 4.91037270e-01 1.19916091e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319721616872144
cond(S) = 56.395635528008434
E1 = -688.845639917692  E_coul = 184.9286368889279
init E= -503.917003028764
    CPU time for initialize scf      0.03 sec, wall time      0.03 sec
  HOMO = -0.680616616961917  LUMO = 85.0482659553816
  mo_energy =
[-1.21648677e+02 -1.32801059e+01 -7.62072147e+00 -7.62072147e+00
 -7.62072147e+00 -1.65049236e+00 -6.80616617e-01 -6.80616617e-01
 -6.80616617e-01  8.50482660e+01  6.76994614e+02  3.93484500e+03
  2.96200560e+04  1.54738890e+05  6.64891823e+05  2.71962780e+06
  1.10459658e+07  4.65100870e+07]
E1 = -706.6025305252988  E_coul = 198.96323662525623
cycle= 1 E= -507.639293900043  delta_E= -3.72  |g|= 0.318  |ddm|= 0.301
    CPU time for cycle= 1      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.420556
diis-c [-0.17686741  1.        ]
  HOMO = -0.23577383994206  LUMO = 86.3815962123066
  mo_energy =
[-1.20260356e+02 -1.22517415e+01 -6.65191754e+00 -6.65191754e+00
 -6.65191754e+00 -1.16306841e+00 -2.35773840e-01 -2.35773840e-01
 -2.35773840e-01  8.63815962e+01  6.78365551e+02  3.93609693e+03
  2.96211451e+04  1.54739908e+05  6.64892811e+05  2.71962878e+06
  1.10459668e+07  4.65100879e+07]
E1 = -706.5710783110719  E_coul = 198.93135606456167
cycle= 2 E= -507.63972224651  delta_E= -0.000428  |g|= 0.00475  |ddm|= 0.0143
    CPU time for cycle= 2      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.00504466
diis-c [-2.54030160e-05 -5.08051828e-04  1.00050805e+00]
  HOMO = -0.235949295611719  LUMO = 86.3780763081703
  mo_energy =
[-1.20269000e+02 -1.22529309e+01 -6.65375984e+00 -6.65375984e+00
 -6.65375984e+00 -1.16313323e+00 -2.35949296e-01 -2.35949296e-01
 -2.35949296e-01  8.63780763e+01  6.78354963e+02  3.93608104e+03
  2.96211258e+04  1.54739888e+05  6.64892791e+05  2.71962875e+06
  1.10459668e+07  4.65100879e+07]
E1 = -706.5706377509911  E_coul = 198.93091539424492
cycle= 3 E= -507.639722356746  delta_E= -1.1e-07  |g|= 9.48e-05  |ddm|= 0.000202
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.000126841
diis-c [-3.96053011e-10  3.34259195e-05 -2.54627298e-02  1.02542930e+00]
  HOMO = -0.235951510867648  LUMO = 86.378031625573
  mo_energy =
[-1.20269113e+02 -1.22529467e+01 -6.65378681e+00 -6.65378681e+00
 -6.65378681e+00 -1.16313388e+00 -2.35951511e-01 -2.35951511e-01
 -2.35951511e-01  8.63780316e+01  6.78354845e+02  3.93608089e+03
  2.96211257e+04  1.54739887e+05  6.64892791e+05  2.71962875e+06
  1.10459668e+07  4.65100879e+07]
E1 = -706.5706305071603  E_coul = 198.93090815037428
cycle= 4 E= -507.639722356786  delta_E= -3.99e-11  |g|= 3.74e-07  |ddm|= 3.45e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.5706305071603  E_coul = 198.93090815037428
  HOMO = -0.235951494540339  LUMO = 86.3780319638028
  mo_energy =
[-1.20269112e+02 -1.22529466e+01 -6.65378665e+00 -6.65378665e+00
 -6.65378665e+00 -1.16313388e+00 -2.35951495e-01 -2.35951495e-01
 -2.35951495e-01  8.63780320e+01  6.78354847e+02  3.93608089e+03
  2.96211257e+04  1.54739887e+05  6.64892791e+05  2.71962875e+06
  1.10459668e+07  4.65100879e+07]
E1 = -706.5706305441953  E_coul = 198.9309081874088
Extra cycle  E= -507.639722356786  delta_E= -4.55e-13  |g|= 6.45e-09  |ddm|= 1.64e-08
    CPU time for scf_cycle      0.10 sec, wall time      0.11 sec
exp = [1.87954849e+07 4.69887121e+06 1.17471780e+06 2.93679450e+05
 7.34198669e+04 1.83536412e+04 2.23457590e+03 4.56712038e+02
 1.21698725e+02 3.75939433e+01 4.74059335e+00 3.91349021e-01
 8.59985365e+00 4.91037270e-01]
E = -507.6397223567865
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="BFGS",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((14, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.6988712134173084e+06,1.1747178033543271e+06,2.9367945083858178e+05,7.3419865393677101e+04,1.8353927627435987e+04,2.2341424145819028e+03,4.5688904996449571e+02,1.2173317272260677e+02,3.7593061247508530e+01,4.7412722556720146e+00,3.9120358491841306e-01,8.5986297237246045e+00,4.9084868336327880e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "12s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:15:10 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  18795484.8537        1
[INPUT] 0    0    [1    /1   ]  4698871.21342        1
[INPUT] 0    0    [1    /1   ]  1174717.80335        1
[INPUT] 0    0    [1    /1   ]  293679.450369        1
[INPUT] 0    0    [1    /1   ]  73419.8669195        1
[INPUT] 0    0    [1    /1   ]  18353.6411781        1
[INPUT] 0    0    [1    /1   ]  2234.57589525        1
[INPUT] 0    0    [1    /1   ]  456.712037714        1
[INPUT] 0    0    [1    /1   ]  121.698725325        1
[INPUT] 0    0    [1    /1   ]  37.593943316         1
[INPUT] 0    0    [1    /1   ]  4.74059335383        1
[INPUT] 0    0    [1    /1   ]  0.391349021244       1
[INPUT] 1    0    [1    /1   ]  8.59985364841        1
[INPUT] 1    0    [1    /1   ]  0.491037269743       1

nuclear repulsion = 0
number of shells = 14
number of NR pGTOs = 18
number of NR cGTOs = 18
basis = {'Ar': [[0, [18795484.853669237, 1.0]], [0, [4698871.213416504, 1.0]], [0, [1174717.8033539425, 1.0]], [0, [293679.4503686494, 1.0]], [0, [73419.8669195492, 1.0]], [0, [18353.64117812735, 1.0]], [0, [2234.5758952530696, 1.0]], [0, [456.7120377138078, 1.0]], [0, [121.69872532455653, 1.0]], [0, [37.59394331596677, 1.0]], [0, [4.740593353834139, 1.0]], [0, [0.3913490212440553, 1.0]], [1, [8.599853648405652, 1.0]], [1, [0.49103726974320594, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [18795484.85366924]
bas 1, expnt(s) = [4698871.2134165]
bas 2, expnt(s) = [1174717.80335394]
bas 3, expnt(s) = [293679.45036865]
bas 4, expnt(s) = [73419.86691955]
bas 5, expnt(s) = [18353.64117813]
bas 6, expnt(s) = [2234.57589525]
bas 7, expnt(s) = [456.71203771]
bas 8, expnt(s) = [121.69872532]
bas 9, expnt(s) = [37.59394332]
bas 10, expnt(s) = [4.74059335]
bas 11, expnt(s) = [0.39134902]
bas 12, expnt(s) = [8.59985365]
bas 13, expnt(s) = [0.49103727]
CPU time:        91.35
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  0  1  1  0 42 43  0]
 [ 0  0  1  1  0 44 45  0]
 [ 0  0  1  1  0 46 47  0]
 [ 0  1  1  1  0 48 49  0]
 [ 0  1  1  1  0 50 51  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.87954849e+07 7.21199097e+05 4.69887121e+06 2.54982386e+05
 1.17471780e+06 9.01498871e+04 2.93679450e+05 3.18727982e+04
 7.34198669e+04 1.12687364e+04 1.83536412e+04 3.98388416e+03
 2.23457590e+03 8.21128936e+02 4.56712038e+02 2.49601315e+02
 1.21698725e+02 9.25719786e+01 3.75939433e+01 3.83577775e+01
 4.74059335e+00 8.11688797e+00 3.91349021e-01 1.25008117e+00
 8.59985365e+00 4.29633580e+01 4.91037270e-01 1.19916091e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319721616872144
cond(S) = 56.395635528008434
E1 = -688.845639917692  E_coul = 184.9286368889279
init E= -503.917003028764
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.680616616961917  LUMO = 85.0482659553816
  mo_energy =
[-1.21648677e+02 -1.32801059e+01 -7.62072147e+00 -7.62072147e+00
 -7.62072147e+00 -1.65049236e+00 -6.80616617e-01 -6.80616617e-01
 -6.80616617e-01  8.50482660e+01  6.76994614e+02  3.93484500e+03
  2.96200560e+04  1.54738890e+05  6.64891823e+05  2.71962780e+06
  1.10459658e+07  4.65100870e+07]
E1 = -706.6025305252988  E_coul = 198.96323662525623
cycle= 1 E= -507.639293900043  delta_E= -3.72  |g|= 0.318  |ddm|= 0.301
    CPU time for cycle= 1      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.420556
diis-c [-0.17686741  1.        ]
  HOMO = -0.23577383994206  LUMO = 86.3815962123066
  mo_energy =
[-1.20260356e+02 -1.22517415e+01 -6.65191754e+00 -6.65191754e+00
 -6.65191754e+00 -1.16306841e+00 -2.35773840e-01 -2.35773840e-01
 -2.35773840e-01  8.63815962e+01  6.78365551e+02  3.93609693e+03
  2.96211451e+04  1.54739908e+05  6.64892811e+05  2.71962878e+06
  1.10459668e+07  4.65100879e+07]
E1 = -706.5710783110719  E_coul = 198.93135606456167
cycle= 2 E= -507.63972224651  delta_E= -0.000428  |g|= 0.00475  |ddm|= 0.0143
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00504466
diis-c [-2.54030160e-05 -5.08051828e-04  1.00050805e+00]
  HOMO = -0.235949295611719  LUMO = 86.3780763081703
  mo_energy =
[-1.20269000e+02 -1.22529309e+01 -6.65375984e+00 -6.65375984e+00
 -6.65375984e+00 -1.16313323e+00 -2.35949296e-01 -2.35949296e-01
 -2.35949296e-01  8.63780763e+01  6.78354963e+02  3.93608104e+03
  2.96211258e+04  1.54739888e+05  6.64892791e+05  2.71962875e+06
  1.10459668e+07  4.65100879e+07]
E1 = -706.5706377509911  E_coul = 198.93091539424492
cycle= 3 E= -507.639722356746  delta_E= -1.1e-07  |g|= 9.48e-05  |ddm|= 0.000202
    CPU time for cycle= 3      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.000126841
diis-c [-3.96053011e-10  3.34259195e-05 -2.54627298e-02  1.02542930e+00]
  HOMO = -0.235951510867648  LUMO = 86.378031625573
  mo_energy =
[-1.20269113e+02 -1.22529467e+01 -6.65378681e+00 -6.65378681e+00
 -6.65378681e+00 -1.16313388e+00 -2.35951511e-01 -2.35951511e-01
 -2.35951511e-01  8.63780316e+01  6.78354845e+02  3.93608089e+03
  2.96211257e+04  1.54739887e+05  6.64892791e+05  2.71962875e+06
  1.10459668e+07  4.65100879e+07]
E1 = -706.5706305071603  E_coul = 198.93090815037428
cycle= 4 E= -507.639722356786  delta_E= -3.99e-11  |g|= 3.74e-07  |ddm|= 3.45e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.5706305071603  E_coul = 198.93090815037428
  HOMO = -0.235951494540339  LUMO = 86.3780319638028
  mo_energy =
[-1.20269112e+02 -1.22529466e+01 -6.65378665e+00 -6.65378665e+00
 -6.65378665e+00 -1.16313388e+00 -2.35951495e-01 -2.35951495e-01
 -2.35951495e-01  8.63780320e+01  6.78354847e+02  3.93608089e+03
  2.96211257e+04  1.54739887e+05  6.64892791e+05  2.71962875e+06
  1.10459668e+07  4.65100879e+07]
E1 = -706.5706305441953  E_coul = 198.9309081874088
Extra cycle  E= -507.639722356786  delta_E= -4.55e-13  |g|= 6.45e-09  |ddm|= 1.64e-08
    CPU time for scf_cycle      0.10 sec, wall time      0.11 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 56.395635528008434
E1 = -706.5706305441953  E_coul = 198.9309081874088
init E= -507.639722356786
    CPU time for initialize scf      0.12 sec, wall time      0.12 sec
  HOMO = -0.235951494349339  LUMO = 86.3780319679359
  mo_energy =
[-1.20269112e+02 -1.22529466e+01 -6.65378665e+00 -6.65378665e+00
 -6.65378665e+00 -1.16313388e+00 -2.35951494e-01 -2.35951494e-01
 -2.35951494e-01  8.63780320e+01  6.78354847e+02  3.93608089e+03
  2.96211257e+04  1.54739887e+05  6.64892791e+05  2.71962875e+06
  1.10459668e+07  4.65100879e+07]
E1 = -706.5706305447552  E_coul = 198.9309081879693
cycle= 1 E= -507.639722356786  delta_E= 5.68e-13  |g|= 2.93e-10  |ddm|= 2.54e-10
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -706.5706305447552  E_coul = 198.9309081879693
  HOMO = -0.235951494346644  LUMO = 86.3780319679945
  mo_energy =
[-1.20269112e+02 -1.22529466e+01 -6.65378665e+00 -6.65378665e+00
 -6.65378665e+00 -1.16313388e+00 -2.35951494e-01 -2.35951494e-01
 -2.35951494e-01  8.63780320e+01  6.78354847e+02  3.93608089e+03
  2.96211257e+04  1.54739887e+05  6.64892791e+05  2.71962875e+06
  1.10459668e+07  4.65100879e+07]
E1 = -706.5706305447654  E_coul = 198.93090818797904
Extra cycle  E= -507.639722356786  delta_E= -4.55e-13  |g|= 2.8e-10  |ddm|= 4.48e-12
    CPU time for scf_cycle      0.20 sec, wall time      0.20 sec
exp = [1.87954849e+07 4.69887121e+06 1.17471780e+06 2.93679450e+05
 7.34198669e+04 1.83536412e+04 2.23457590e+03 4.56712038e+02
 1.21698725e+02 3.75939433e+01 4.74059335e+00 3.91349021e-01
 8.59985365e+00 4.91037270e-01]
grad_E = [-1.11856327e-13  1.79736205e-11  8.32323088e-12  1.05130867e-08
 -3.42998501e-08  6.40703746e-06 -8.86934303e-06 -8.54707589e-07
 -8.41437992e-06  6.35872153e-05 -4.16465226e-04  2.99871632e-03
  8.40437777e-04  6.16012139e-03]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="BFGS",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((14, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.6988712134173084e+06,1.1747178033543271e+06,2.9367945083858178e+05,7.3419865393677101e+04,1.8353927627435987e+04,2.2341424145819028e+03,4.5688904996449571e+02,1.2173317272260677e+02,3.7593061247508530e+01,4.7412722556720146e+00,3.9120358491841306e-01,8.5986297237246045e+00,4.9084868336327880e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "12s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:15:13 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  18795484.8537        1
[INPUT] 0    0    [1    /1   ]  4698871.21342        1
[INPUT] 0    0    [1    /1   ]  1174717.80335        1
[INPUT] 0    0    [1    /1   ]  293679.449964        1
[INPUT] 0    0    [1    /1   ]  73419.8682342        1
[INPUT] 0    0    [1    /1   ]  18353.3943844        1
[INPUT] 0    0    [1    /1   ]  2234.94936001        1
[INPUT] 0    0    [1    /1   ]  456.559604339        1
[INPUT] 0    0    [1    /1   ]  121.668593401        1
[INPUT] 0    0    [1    /1   ]  37.5959906284        1
[INPUT] 0    0    [1    /1   ]  4.74034377093        1
[INPUT] 0    0    [1    /1   ]  0.391393311114       1
[INPUT] 1    0    [1    /1   ]  8.6002028031         1
[INPUT] 1    0    [1    /1   ]  0.491092466936       1

nuclear repulsion = 0
number of shells = 14
number of NR pGTOs = 18
number of NR cGTOs = 18
basis = {'Ar': [[0, [18795484.85366924, 1.0]], [0, [4698871.213415812, 1.0]], [0, [1174717.803353611, 1.0]], [0, [293679.44996377366, 1.0]], [0, [73419.86823418303, 1.0]], [0, [18353.394384384817, 1.0]], [0, [2234.9493600135315, 1.0]], [0, [456.55960433913856, 1.0]], [0, [121.66859340058606, 1.0]], [0, [37.59599062840318, 1.0]], [0, [4.740343770925894, 1.0]], [0, [0.3913933111135751, 1.0]], [1, [8.600202803095646, 1.0]], [1, [0.49109246693644054, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [18795484.85366924]
bas 1, expnt(s) = [4698871.21341581]
bas 2, expnt(s) = [1174717.80335361]
bas 3, expnt(s) = [293679.44996377]
bas 4, expnt(s) = [73419.86823418]
bas 5, expnt(s) = [18353.39438438]
bas 6, expnt(s) = [2234.94936001]
bas 7, expnt(s) = [456.55960434]
bas 8, expnt(s) = [121.6685934]
bas 9, expnt(s) = [37.59599063]
bas 10, expnt(s) = [4.74034377]
bas 11, expnt(s) = [0.39139331]
bas 12, expnt(s) = [8.6002028]
bas 13, expnt(s) = [0.49109247]
CPU time:        94.67
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  0  1  1  0 42 43  0]
 [ 0  0  1  1  0 44 45  0]
 [ 0  0  1  1  0 46 47  0]
 [ 0  1  1  1  0 48 49  0]
 [ 0  1  1  1  0 50 51  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.87954849e+07 7.21199097e+05 4.69887121e+06 2.54982386e+05
 1.17471780e+06 9.01498871e+04 2.93679450e+05 3.18727982e+04
 7.34198682e+04 1.12687365e+04 1.83533944e+04 3.98384398e+03
 2.23494936e+03 8.21231860e+02 4.56559604e+02 2.49538831e+02
 1.21668593e+02 9.25547878e+01 3.75959906e+01 3.83593442e+01
 4.74034377e+00 8.11656746e+00 3.91393311e-01 1.25018727e+00
 8.60020280e+00 4.29655384e+01 4.91092467e-01 1.19932941e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319647628158666
cond(S) = 56.39638199872702
E1 = -688.8500404626817  E_coul = 184.9325067773797
init E= -503.917533685302
    CPU time for initialize scf      0.03 sec, wall time      0.03 sec
  HOMO = -0.680533215188393  LUMO = 85.0397524266759
  mo_energy =
[-1.21648121e+02 -1.32798353e+01 -7.62046322e+00 -7.62046322e+00
 -7.62046322e+00 -1.65043174e+00 -6.80533215e-01 -6.80533215e-01
 -6.80533215e-01  8.50397524e+01  6.76796583e+02  3.93468676e+03
  2.96204120e+04  1.54738880e+05  6.64891633e+05  2.71962759e+06
  1.10459657e+07  4.65100868e+07]
E1 = -706.6077837362036  E_coul = 198.96848729087216
cycle= 1 E= -507.639296445331  delta_E= -3.72  |g|= 0.318  |ddm|= 0.301
    CPU time for cycle= 1      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.420598
diis-c [-0.17690263  1.        ]
  HOMO = -0.235625475327003  LUMO = 86.3731849662167
  mo_energy =
[-1.20259674e+02 -1.22513893e+01 -6.65157589e+00 -6.65157589e+00
 -6.65157589e+00 -1.16294848e+00 -2.35625475e-01 -2.35625475e-01
 -2.35625475e-01  8.63731850e+01  6.78167680e+02  3.93593884e+03
  2.96215012e+04  1.54739898e+05  6.64892621e+05  2.71962856e+06
  1.10459666e+07  4.65100877e+07]
E1 = -706.5763244746267  E_coul = 198.93659953045113
cycle= 2 E= -507.639724944176  delta_E= -0.000428  |g|= 0.00475  |ddm|= 0.0143
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00504522
diis-c [-2.54084310e-05 -5.09259922e-04  1.00050926e+00]
  HOMO = -0.235801018969627  LUMO = 86.3696647561623
  mo_energy =
[-1.20268319e+02 -1.22525789e+01 -6.65341870e+00 -6.65341870e+00
 -6.65341870e+00 -1.16301332e+00 -2.35801019e-01 -2.35801019e-01
 -2.35801019e-01  8.63696648e+01  6.78157092e+02  3.93592294e+03
  2.96214819e+04  1.54739878e+05  6.64892601e+05  2.71962854e+06
  1.10459666e+07  4.65100877e+07]
E1 = -706.5758837610737  E_coul = 198.9361587065977
cycle= 3 E= -507.639725054476  delta_E= -1.1e-07  |g|= 9.48e-05  |ddm|= 0.000202
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.000126858
diis-c [-3.96106794e-10  3.34447586e-05 -2.54635491e-02  1.02543010e+00]
  HOMO = -0.23580323543305  LUMO = 86.3696200664146
  mo_energy =
[-1.20268433e+02 -1.22525947e+01 -6.65344569e+00 -6.65344569e+00
 -6.65344569e+00 -1.16301398e+00 -2.35803235e-01 -2.35803235e-01
 -2.35803235e-01  8.63696201e+01  6.78156975e+02  3.93592280e+03
  2.96214818e+04  1.54739878e+05  6.64892601e+05  2.71962854e+06
  1.10459666e+07  4.65100877e+07]
E1 = -706.5758765145861  E_coul = 198.93615146007016
cycle= 4 E= -507.639725054516  delta_E= -3.99e-11  |g|= 3.74e-07  |ddm|= 3.45e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.5758765145861  E_coul = 198.93615146007016
  HOMO = -0.235803219096727  LUMO = 86.3696204046761
  mo_energy =
[-1.20268432e+02 -1.22525946e+01 -6.65344553e+00 -6.65344553e+00
 -6.65344553e+00 -1.16301397e+00 -2.35803219e-01 -2.35803219e-01
 -2.35803219e-01  8.63696204e+01  6.78156976e+02  3.93592280e+03
  2.96214818e+04  1.54739878e+05  6.64892601e+05  2.71962854e+06
  1.10459666e+07  4.65100877e+07]
E1 = -706.5758765516349  E_coul = 198.9361514971197
Extra cycle  E= -507.639725054515  delta_E= 6.82e-13  |g|= 6.46e-09  |ddm|= 1.64e-08
    CPU time for scf_cycle      0.10 sec, wall time      0.11 sec
exp = [1.87954849e+07 4.69887121e+06 1.17471780e+06 2.93679450e+05
 7.34198682e+04 1.83533944e+04 2.23494936e+03 4.56559604e+02
 1.21668593e+02 3.75959906e+01 4.74034377e+00 3.91393311e-01
 8.60020280e+00 4.91092467e-01]
E = -507.6397250545152
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="BFGS",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((14, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.6988712134173084e+06,1.1747178033543271e+06,2.9367945083858178e+05,7.3419865393677101e+04,1.8353927627435987e+04,2.2341424145819028e+03,4.5688904996449571e+02,1.2173317272260677e+02,3.7593061247508530e+01,4.7412722556720146e+00,3.9120358491841306e-01,8.5986297237246045e+00,4.9084868336327880e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "12s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:15:14 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  18795484.8537        1
[INPUT] 0    0    [1    /1   ]  4698871.21342        1
[INPUT] 0    0    [1    /1   ]  1174717.80335        1
[INPUT] 0    0    [1    /1   ]  293679.449964        1
[INPUT] 0    0    [1    /1   ]  73419.8682342        1
[INPUT] 0    0    [1    /1   ]  18353.3943844        1
[INPUT] 0    0    [1    /1   ]  2234.94936001        1
[INPUT] 0    0    [1    /1   ]  456.559604339        1
[INPUT] 0    0    [1    /1   ]  121.668593401        1
[INPUT] 0    0    [1    /1   ]  37.5959906284        1
[INPUT] 0    0    [1    /1   ]  4.74034377093        1
[INPUT] 0    0    [1    /1   ]  0.391393311114       1
[INPUT] 1    0    [1    /1   ]  8.6002028031         1
[INPUT] 1    0    [1    /1   ]  0.491092466936       1

nuclear repulsion = 0
number of shells = 14
number of NR pGTOs = 18
number of NR cGTOs = 18
basis = {'Ar': [[0, [18795484.85366924, 1.0]], [0, [4698871.213415812, 1.0]], [0, [1174717.803353611, 1.0]], [0, [293679.44996377366, 1.0]], [0, [73419.86823418303, 1.0]], [0, [18353.394384384817, 1.0]], [0, [2234.9493600135315, 1.0]], [0, [456.55960433913856, 1.0]], [0, [121.66859340058606, 1.0]], [0, [37.59599062840318, 1.0]], [0, [4.740343770925894, 1.0]], [0, [0.3913933111135751, 1.0]], [1, [8.600202803095646, 1.0]], [1, [0.49109246693644054, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [18795484.85366924]
bas 1, expnt(s) = [4698871.21341581]
bas 2, expnt(s) = [1174717.80335361]
bas 3, expnt(s) = [293679.44996377]
bas 4, expnt(s) = [73419.86823418]
bas 5, expnt(s) = [18353.39438438]
bas 6, expnt(s) = [2234.94936001]
bas 7, expnt(s) = [456.55960434]
bas 8, expnt(s) = [121.6685934]
bas 9, expnt(s) = [37.59599063]
bas 10, expnt(s) = [4.74034377]
bas 11, expnt(s) = [0.39139331]
bas 12, expnt(s) = [8.6002028]
bas 13, expnt(s) = [0.49109247]
CPU time:        95.20
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  0  1  1  0 42 43  0]
 [ 0  0  1  1  0 44 45  0]
 [ 0  0  1  1  0 46 47  0]
 [ 0  1  1  1  0 48 49  0]
 [ 0  1  1  1  0 50 51  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.87954849e+07 7.21199097e+05 4.69887121e+06 2.54982386e+05
 1.17471780e+06 9.01498871e+04 2.93679450e+05 3.18727982e+04
 7.34198682e+04 1.12687365e+04 1.83533944e+04 3.98384398e+03
 2.23494936e+03 8.21231860e+02 4.56559604e+02 2.49538831e+02
 1.21668593e+02 9.25547878e+01 3.75959906e+01 3.83593442e+01
 4.74034377e+00 8.11656746e+00 3.91393311e-01 1.25018727e+00
 8.60020280e+00 4.29655384e+01 4.91092467e-01 1.19932941e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319647628158666
cond(S) = 56.39638199872702
E1 = -688.8500404626817  E_coul = 184.9325067773797
init E= -503.917533685302
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.680533215188393  LUMO = 85.0397524266759
  mo_energy =
[-1.21648121e+02 -1.32798353e+01 -7.62046322e+00 -7.62046322e+00
 -7.62046322e+00 -1.65043174e+00 -6.80533215e-01 -6.80533215e-01
 -6.80533215e-01  8.50397524e+01  6.76796583e+02  3.93468676e+03
  2.96204120e+04  1.54738880e+05  6.64891633e+05  2.71962759e+06
  1.10459657e+07  4.65100868e+07]
E1 = -706.6077837362036  E_coul = 198.96848729087216
cycle= 1 E= -507.639296445331  delta_E= -3.72  |g|= 0.318  |ddm|= 0.301
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.420598
diis-c [-0.17690263  1.        ]
  HOMO = -0.235625475327003  LUMO = 86.3731849662167
  mo_energy =
[-1.20259674e+02 -1.22513893e+01 -6.65157589e+00 -6.65157589e+00
 -6.65157589e+00 -1.16294848e+00 -2.35625475e-01 -2.35625475e-01
 -2.35625475e-01  8.63731850e+01  6.78167680e+02  3.93593884e+03
  2.96215012e+04  1.54739898e+05  6.64892621e+05  2.71962856e+06
  1.10459666e+07  4.65100877e+07]
E1 = -706.5763244746267  E_coul = 198.93659953045113
cycle= 2 E= -507.639724944176  delta_E= -0.000428  |g|= 0.00475  |ddm|= 0.0143
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00504522
diis-c [-2.54084310e-05 -5.09259922e-04  1.00050926e+00]
  HOMO = -0.235801018969627  LUMO = 86.3696647561623
  mo_energy =
[-1.20268319e+02 -1.22525789e+01 -6.65341870e+00 -6.65341870e+00
 -6.65341870e+00 -1.16301332e+00 -2.35801019e-01 -2.35801019e-01
 -2.35801019e-01  8.63696648e+01  6.78157092e+02  3.93592294e+03
  2.96214819e+04  1.54739878e+05  6.64892601e+05  2.71962854e+06
  1.10459666e+07  4.65100877e+07]
E1 = -706.5758837610737  E_coul = 198.9361587065977
cycle= 3 E= -507.639725054476  delta_E= -1.1e-07  |g|= 9.48e-05  |ddm|= 0.000202
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.000126858
diis-c [-3.96106794e-10  3.34447586e-05 -2.54635491e-02  1.02543010e+00]
  HOMO = -0.23580323543305  LUMO = 86.3696200664146
  mo_energy =
[-1.20268433e+02 -1.22525947e+01 -6.65344569e+00 -6.65344569e+00
 -6.65344569e+00 -1.16301398e+00 -2.35803235e-01 -2.35803235e-01
 -2.35803235e-01  8.63696201e+01  6.78156975e+02  3.93592280e+03
  2.96214818e+04  1.54739878e+05  6.64892601e+05  2.71962854e+06
  1.10459666e+07  4.65100877e+07]
E1 = -706.5758765145861  E_coul = 198.93615146007016
cycle= 4 E= -507.639725054516  delta_E= -3.99e-11  |g|= 3.74e-07  |ddm|= 3.45e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.5758765145861  E_coul = 198.93615146007016
  HOMO = -0.235803219096727  LUMO = 86.3696204046761
  mo_energy =
[-1.20268432e+02 -1.22525946e+01 -6.65344553e+00 -6.65344553e+00
 -6.65344553e+00 -1.16301397e+00 -2.35803219e-01 -2.35803219e-01
 -2.35803219e-01  8.63696204e+01  6.78156976e+02  3.93592280e+03
  2.96214818e+04  1.54739878e+05  6.64892601e+05  2.71962854e+06
  1.10459666e+07  4.65100877e+07]
E1 = -706.5758765516349  E_coul = 198.9361514971197
Extra cycle  E= -507.639725054515  delta_E= 6.82e-13  |g|= 6.46e-09  |ddm|= 1.64e-08
    CPU time for scf_cycle      0.10 sec, wall time      0.10 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 56.39638199872702
E1 = -706.5758765516349  E_coul = 198.9361514971197
init E= -507.639725054515
    CPU time for initialize scf      0.12 sec, wall time      0.12 sec
  HOMO = -0.235803218905589  LUMO = 86.3696204088098
  mo_energy =
[-1.20268432e+02 -1.22525946e+01 -6.65344553e+00 -6.65344553e+00
 -6.65344553e+00 -1.16301397e+00 -2.35803219e-01 -2.35803219e-01
 -2.35803219e-01  8.63696204e+01  6.78156976e+02  3.93592280e+03
  2.96214818e+04  1.54739878e+05  6.64892601e+05  2.71962854e+06
  1.10459666e+07  4.65100877e+07]
E1 = -706.5758765521964  E_coul = 198.9361514976804
cycle= 1 E= -507.639725054516  delta_E= -7.96e-13  |g|= 2.44e-10  |ddm|= 2.54e-10
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -706.5758765521964  E_coul = 198.9361514976804
  HOMO = -0.235803218902886  LUMO = 86.3696204088712
  mo_energy =
[-1.20268432e+02 -1.22525946e+01 -6.65344553e+00 -6.65344553e+00
 -6.65344553e+00 -1.16301397e+00 -2.35803219e-01 -2.35803219e-01
 -2.35803219e-01  8.63696204e+01  6.78156976e+02  3.93592280e+03
  2.96214818e+04  1.54739878e+05  6.64892601e+05  2.71962854e+06
  1.10459666e+07  4.65100877e+07]
E1 = -706.5758765522058  E_coul = 198.93615149768988
Extra cycle  E= -507.639725054516  delta_E= 5.68e-14  |g|= 1.89e-10  |ddm|= 4.52e-12
    CPU time for scf_cycle      0.19 sec, wall time      0.19 sec
exp = [1.87954849e+07 4.69887121e+06 1.17471780e+06 2.93679450e+05
 7.34198682e+04 1.83533944e+04 2.23494936e+03 4.56559604e+02
 1.21668593e+02 3.75959906e+01 4.74034377e+00 3.91393311e-01
 8.60020280e+00 4.91092467e-01]
grad_E = [-1.12342828e-13  1.79427436e-11  8.06623415e-12  1.04954993e-08
 -3.43813466e-08  6.39526478e-06 -8.16363705e-06 -4.43062578e-06
 -2.19949344e-05  1.35991133e-04 -5.38023550e-04  3.88012547e-03
  1.08394343e-03  7.97414398e-03]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="BFGS",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((14, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.6988712134173084e+06,1.1747178033543271e+06,2.9367945083858178e+05,7.3419865393677101e+04,1.8353927627435987e+04,2.2341424145819028e+03,4.5688904996449571e+02,1.2173317272260677e+02,3.7593061247508530e+01,4.7412722556720146e+00,3.9120358491841306e-01,8.5986297237246045e+00,4.9084868336327880e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "12s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:15:18 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  18795484.8537        1
[INPUT] 0    0    [1    /1   ]  4698871.21341        1
[INPUT] 0    0    [1    /1   ]  1174717.80335        1
[INPUT] 0    0    [1    /1   ]  293679.449353        1
[INPUT] 0    0    [1    /1   ]  73419.8702188        1
[INPUT] 0    0    [1    /1   ]  18353.0218242        1
[INPUT] 0    0    [1    /1   ]  2235.51315169        1
[INPUT] 0    0    [1    /1   ]  456.329332401        1
[INPUT] 0    0    [1    /1   ]  121.6243548          1
[INPUT] 0    0    [1    /1   ]  37.5952744735        1
[INPUT] 0    0    [1    /1   ]  4.74019321088        1
[INPUT] 0    0    [1    /1   ]  0.391412602603       1
[INPUT] 1    0    [1    /1   ]  8.60034300527        1
[INPUT] 1    0    [1    /1   ]  0.491115529345       1

nuclear repulsion = 0
number of shells = 14
number of NR pGTOs = 18
number of NR cGTOs = 18
basis = {'Ar': [[0, [18795484.85366925, 1.0]], [0, [4698871.213414767, 1.0]], [0, [1174717.8033531103, 1.0]], [0, [293679.44935257273, 1.0]], [0, [73419.87021875486, 1.0]], [0, [18353.021824213916, 1.0]], [0, [2235.513151685731, 1.0]], [0, [456.32933240079495, 1.0]], [0, [121.62435479966136, 1.0]], [0, [37.595274473534246, 1.0]], [0, [4.740193210875977, 1.0]], [0, [0.3914126026030283, 1.0]], [1, [8.600343005268387, 1.0]], [1, [0.4911155293452963, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [18795484.85366925]
bas 1, expnt(s) = [4698871.21341477]
bas 2, expnt(s) = [1174717.80335311]
bas 3, expnt(s) = [293679.44935257]
bas 4, expnt(s) = [73419.87021875]
bas 5, expnt(s) = [18353.02182421]
bas 6, expnt(s) = [2235.51315169]
bas 7, expnt(s) = [456.3293324]
bas 8, expnt(s) = [121.6243548]
bas 9, expnt(s) = [37.59527447]
bas 10, expnt(s) = [4.74019321]
bas 11, expnt(s) = [0.3914126]
bas 12, expnt(s) = [8.60034301]
bas 13, expnt(s) = [0.49111553]
CPU time:        98.67
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  0  1  1  0 42 43  0]
 [ 0  0  1  1  0 44 45  0]
 [ 0  0  1  1  0 46 47  0]
 [ 0  1  1  1  0 48 49  0]
 [ 0  1  1  1  0 50 51  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.87954849e+07 7.21199097e+05 4.69887121e+06 2.54982386e+05
 1.17471780e+06 9.01498871e+04 2.93679449e+05 3.18727981e+04
 7.34198702e+04 1.12687368e+04 1.83530218e+04 3.98378333e+03
 2.23551315e+03 8.21387229e+02 4.56329332e+02 2.49444432e+02
 1.21624355e+02 9.25295471e+01 3.75952745e+01 3.83587962e+01
 4.74019321e+00 8.11637412e+00 3.91412603e-01 1.25023349e+00
 8.60034301e+00 4.29664139e+01 4.91115529e-01 1.19939981e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319617418286178
cond(S) = 56.396623616851585
E1 = -688.8525465230432  E_coul = 184.9341079046323
init E= -503.918438618411
    CPU time for initialize scf      0.03 sec, wall time      0.03 sec
  HOMO = -0.680497640190588  LUMO = 85.0198938893918
  mo_energy =
[-1.21647875e+02 -1.32797436e+01 -7.62035626e+00 -7.62035626e+00
 -7.62035626e+00 -1.65040712e+00 -6.80497640e-01 -6.80497640e-01
 -6.80497640e-01  8.50198939e+01  6.76486748e+02  3.93443839e+03
  2.96209418e+04  1.54738860e+05  6.64891340e+05  2.71962726e+06
  1.10459653e+07  4.65100865e+07]
E1 = -706.610026118129  E_coul = 198.97072650932728
cycle= 1 E= -507.639299608802  delta_E= -3.72  |g|= 0.318  |ddm|= 0.301
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.420644
diis-c [-0.17694167  1.        ]
  HOMO = -0.235563120963884  LUMO = 86.3533593106931
  mo_energy =
[-1.20259351e+02 -1.22512616e+01 -6.65143193e+00 -6.65143193e+00
 -6.65143193e+00 -1.16289972e+00 -2.35563121e-01 -2.35563121e-01
 -2.35563121e-01  8.63533593e+01  6.77857960e+02  3.93569056e+03
  2.96220311e+04  1.54739878e+05  6.64892329e+05  2.71962824e+06
  1.10459663e+07  4.65100875e+07]
E1 = -706.5785562396992  E_coul = 198.93882795511618
cycle= 2 E= -507.639728284583  delta_E= -0.000429  |g|= 0.00475  |ddm|= 0.0143
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00504565
diis-c [-2.54127458e-05 -5.09533018e-04  1.00050953e+00]
  HOMO = -0.235738757663457  LUMO = 86.3498386405466
  mo_energy =
[-1.20267999e+02 -1.22524517e+01 -6.65327550e+00 -6.65327550e+00
 -6.65327550e+00 -1.16296459e+00 -2.35738758e-01 -2.35738758e-01
 -2.35738758e-01  8.63498386e+01  6.77847371e+02  3.93567466e+03
  2.96220119e+04  1.54739858e+05  6.64892308e+05  2.71962822e+06
  1.10459663e+07  4.65100874e+07]
E1 = -706.5781152912848  E_coul = 198.9383868963215
cycle= 3 E= -507.639728394963  delta_E= -1.1e-07  |g|= 9.49e-05  |ddm|= 0.000202
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.000126885
diis-c [-3.96232927e-10  3.34644572e-05 -2.54669478e-02  1.02543348e+00]
  HOMO = -0.235740975661703  LUMO = 86.3497939335806
  mo_energy =
[-1.20268113e+02 -1.22524675e+01 -6.65330250e+00 -6.65330250e+00
 -6.65330250e+00 -1.16296525e+00 -2.35740976e-01 -2.35740976e-01
 -2.35740976e-01  8.63497939e+01  6.77847253e+02  3.93567452e+03
  2.96220117e+04  1.54739858e+05  6.64892308e+05  2.71962822e+06
  1.10459663e+07  4.65100874e+07]
E1 = -706.5781080398332  E_coul = 198.93837964483
cycle= 4 E= -507.639728395003  delta_E= -3.99e-11  |g|= 3.74e-07  |ddm|= 3.45e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.5781080398332  E_coul = 198.93837964483
  HOMO = -0.235740959312905  LUMO = 86.349794271934
  mo_energy =
[-1.20268112e+02 -1.22524674e+01 -6.65330234e+00 -6.65330234e+00
 -6.65330234e+00 -1.16296524e+00 -2.35740959e-01 -2.35740959e-01
 -2.35740959e-01  8.63497943e+01  6.77847254e+02  3.93567452e+03
  2.96220117e+04  1.54739858e+05  6.64892308e+05  2.71962822e+06
  1.10459663e+07  4.65100874e+07]
E1 = -706.5781080769098  E_coul = 198.93837968190633
Extra cycle  E= -507.639728395003  delta_E= -2.27e-13  |g|= 6.46e-09  |ddm|= 1.65e-08
    CPU time for scf_cycle      0.10 sec, wall time      0.11 sec
exp = [1.87954849e+07 4.69887121e+06 1.17471780e+06 2.93679449e+05
 7.34198702e+04 1.83530218e+04 2.23551315e+03 4.56329332e+02
 1.21624355e+02 3.75952745e+01 4.74019321e+00 3.91412603e-01
 8.60034301e+00 4.91115529e-01]
E = -507.63972839500343
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="BFGS",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((14, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.6988712134173084e+06,1.1747178033543271e+06,2.9367945083858178e+05,7.3419865393677101e+04,1.8353927627435987e+04,2.2341424145819028e+03,4.5688904996449571e+02,1.2173317272260677e+02,3.7593061247508530e+01,4.7412722556720146e+00,3.9120358491841306e-01,8.5986297237246045e+00,4.9084868336327880e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "12s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:15:18 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  18795484.8537        1
[INPUT] 0    0    [1    /1   ]  4698871.21341        1
[INPUT] 0    0    [1    /1   ]  1174717.80335        1
[INPUT] 0    0    [1    /1   ]  293679.449353        1
[INPUT] 0    0    [1    /1   ]  73419.8702188        1
[INPUT] 0    0    [1    /1   ]  18353.0218242        1
[INPUT] 0    0    [1    /1   ]  2235.51315169        1
[INPUT] 0    0    [1    /1   ]  456.329332401        1
[INPUT] 0    0    [1    /1   ]  121.6243548          1
[INPUT] 0    0    [1    /1   ]  37.5952744735        1
[INPUT] 0    0    [1    /1   ]  4.74019321088        1
[INPUT] 0    0    [1    /1   ]  0.391412602603       1
[INPUT] 1    0    [1    /1   ]  8.60034300527        1
[INPUT] 1    0    [1    /1   ]  0.491115529345       1

nuclear repulsion = 0
number of shells = 14
number of NR pGTOs = 18
number of NR cGTOs = 18
basis = {'Ar': [[0, [18795484.85366925, 1.0]], [0, [4698871.213414767, 1.0]], [0, [1174717.8033531103, 1.0]], [0, [293679.44935257273, 1.0]], [0, [73419.87021875486, 1.0]], [0, [18353.021824213916, 1.0]], [0, [2235.513151685731, 1.0]], [0, [456.32933240079495, 1.0]], [0, [121.62435479966136, 1.0]], [0, [37.595274473534246, 1.0]], [0, [4.740193210875977, 1.0]], [0, [0.3914126026030283, 1.0]], [1, [8.600343005268387, 1.0]], [1, [0.4911155293452963, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [18795484.85366925]
bas 1, expnt(s) = [4698871.21341477]
bas 2, expnt(s) = [1174717.80335311]
bas 3, expnt(s) = [293679.44935257]
bas 4, expnt(s) = [73419.87021875]
bas 5, expnt(s) = [18353.02182421]
bas 6, expnt(s) = [2235.51315169]
bas 7, expnt(s) = [456.3293324]
bas 8, expnt(s) = [121.6243548]
bas 9, expnt(s) = [37.59527447]
bas 10, expnt(s) = [4.74019321]
bas 11, expnt(s) = [0.3914126]
bas 12, expnt(s) = [8.60034301]
bas 13, expnt(s) = [0.49111553]
CPU time:        99.22
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  0  1  1  0 42 43  0]
 [ 0  0  1  1  0 44 45  0]
 [ 0  0  1  1  0 46 47  0]
 [ 0  1  1  1  0 48 49  0]
 [ 0  1  1  1  0 50 51  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.87954849e+07 7.21199097e+05 4.69887121e+06 2.54982386e+05
 1.17471780e+06 9.01498871e+04 2.93679449e+05 3.18727981e+04
 7.34198702e+04 1.12687368e+04 1.83530218e+04 3.98378333e+03
 2.23551315e+03 8.21387229e+02 4.56329332e+02 2.49444432e+02
 1.21624355e+02 9.25295471e+01 3.75952745e+01 3.83587962e+01
 4.74019321e+00 8.11637412e+00 3.91412603e-01 1.25023349e+00
 8.60034301e+00 4.29664139e+01 4.91115529e-01 1.19939981e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319617418286178
cond(S) = 56.396623616851585
E1 = -688.8525465230432  E_coul = 184.9341079046323
init E= -503.918438618411
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.680497640190588  LUMO = 85.0198938893918
  mo_energy =
[-1.21647875e+02 -1.32797436e+01 -7.62035626e+00 -7.62035626e+00
 -7.62035626e+00 -1.65040712e+00 -6.80497640e-01 -6.80497640e-01
 -6.80497640e-01  8.50198939e+01  6.76486748e+02  3.93443839e+03
  2.96209418e+04  1.54738860e+05  6.64891340e+05  2.71962726e+06
  1.10459653e+07  4.65100865e+07]
E1 = -706.610026118129  E_coul = 198.97072650932728
cycle= 1 E= -507.639299608802  delta_E= -3.72  |g|= 0.318  |ddm|= 0.301
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.420644
diis-c [-0.17694167  1.        ]
  HOMO = -0.235563120963884  LUMO = 86.3533593106931
  mo_energy =
[-1.20259351e+02 -1.22512616e+01 -6.65143193e+00 -6.65143193e+00
 -6.65143193e+00 -1.16289972e+00 -2.35563121e-01 -2.35563121e-01
 -2.35563121e-01  8.63533593e+01  6.77857960e+02  3.93569056e+03
  2.96220311e+04  1.54739878e+05  6.64892329e+05  2.71962824e+06
  1.10459663e+07  4.65100875e+07]
E1 = -706.5785562396992  E_coul = 198.93882795511618
cycle= 2 E= -507.639728284583  delta_E= -0.000429  |g|= 0.00475  |ddm|= 0.0143
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00504565
diis-c [-2.54127458e-05 -5.09533018e-04  1.00050953e+00]
  HOMO = -0.235738757663457  LUMO = 86.3498386405466
  mo_energy =
[-1.20267999e+02 -1.22524517e+01 -6.65327550e+00 -6.65327550e+00
 -6.65327550e+00 -1.16296459e+00 -2.35738758e-01 -2.35738758e-01
 -2.35738758e-01  8.63498386e+01  6.77847371e+02  3.93567466e+03
  2.96220119e+04  1.54739858e+05  6.64892308e+05  2.71962822e+06
  1.10459663e+07  4.65100874e+07]
E1 = -706.5781152912848  E_coul = 198.9383868963215
cycle= 3 E= -507.639728394963  delta_E= -1.1e-07  |g|= 9.49e-05  |ddm|= 0.000202
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.000126885
diis-c [-3.96232927e-10  3.34644572e-05 -2.54669478e-02  1.02543348e+00]
  HOMO = -0.235740975661703  LUMO = 86.3497939335806
  mo_energy =
[-1.20268113e+02 -1.22524675e+01 -6.65330250e+00 -6.65330250e+00
 -6.65330250e+00 -1.16296525e+00 -2.35740976e-01 -2.35740976e-01
 -2.35740976e-01  8.63497939e+01  6.77847253e+02  3.93567452e+03
  2.96220117e+04  1.54739858e+05  6.64892308e+05  2.71962822e+06
  1.10459663e+07  4.65100874e+07]
E1 = -706.5781080398332  E_coul = 198.93837964483
cycle= 4 E= -507.639728395003  delta_E= -3.99e-11  |g|= 3.74e-07  |ddm|= 3.45e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.5781080398332  E_coul = 198.93837964483
  HOMO = -0.235740959312905  LUMO = 86.349794271934
  mo_energy =
[-1.20268112e+02 -1.22524674e+01 -6.65330234e+00 -6.65330234e+00
 -6.65330234e+00 -1.16296524e+00 -2.35740959e-01 -2.35740959e-01
 -2.35740959e-01  8.63497943e+01  6.77847254e+02  3.93567452e+03
  2.96220117e+04  1.54739858e+05  6.64892308e+05  2.71962822e+06
  1.10459663e+07  4.65100874e+07]
E1 = -706.5781080769098  E_coul = 198.93837968190633
Extra cycle  E= -507.639728395003  delta_E= -2.27e-13  |g|= 6.46e-09  |ddm|= 1.65e-08
    CPU time for scf_cycle      0.10 sec, wall time      0.11 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 56.396623616851585
E1 = -706.5781080769098  E_coul = 198.93837968190633
init E= -507.639728395003
    CPU time for initialize scf      0.12 sec, wall time      0.12 sec
  HOMO = -0.235740959121579  LUMO = 86.3497942760702
  mo_energy =
[-1.20268112e+02 -1.22524674e+01 -6.65330234e+00 -6.65330234e+00
 -6.65330234e+00 -1.16296524e+00 -2.35740959e-01 -2.35740959e-01
 -2.35740959e-01  8.63497943e+01  6.77847254e+02  3.93567452e+03
  2.96220117e+04  1.54739858e+05  6.64892308e+05  2.71962822e+06
  1.10459663e+07  4.65100874e+07]
E1 = -706.5781080774709  E_coul = 198.9383796824677
cycle= 1 E= -507.639728395003  delta_E= 2.27e-13  |g|= 2.05e-10  |ddm|= 2.55e-10
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -706.5781080774709  E_coul = 198.9383796824677
  HOMO = -0.235740959118879  LUMO = 86.3497942761301
  mo_energy =
[-1.20268112e+02 -1.22524674e+01 -6.65330234e+00 -6.65330234e+00
 -6.65330234e+00 -1.16296524e+00 -2.35740959e-01 -2.35740959e-01
 -2.35740959e-01  8.63497943e+01  6.77847254e+02  3.93567452e+03
  2.96220117e+04  1.54739858e+05  6.64892308e+05  2.71962822e+06
  1.10459663e+07  4.65100874e+07]
E1 = -706.5781080774806  E_coul = 198.93837968247723
Extra cycle  E= -507.639728395003  delta_E= -1.14e-13  |g|= 1.35e-10  |ddm|= 4.51e-12
    CPU time for scf_cycle      0.19 sec, wall time      0.19 sec
exp = [1.87954849e+07 4.69887121e+06 1.17471780e+06 2.93679449e+05
 7.34198702e+04 1.83530218e+04 2.23551315e+03 4.56329332e+02
 1.21624355e+02 3.75952745e+01 4.74019321e+00 3.91412603e-01
 8.60034301e+00 4.91115529e-01]
grad_E = [-1.13104658e-13  1.78942989e-11  7.66376122e-12  1.04679004e-08
 -3.45085187e-08  6.37673065e-06 -7.01432602e-06 -1.17331773e-05
 -2.59154946e-05  1.93227272e-04 -5.88467066e-04  4.24992812e-03
  1.18440545e-03  8.73634112e-03]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="BFGS",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((14, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.6988712134173084e+06,1.1747178033543271e+06,2.9367945083858178e+05,7.3419865393677101e+04,1.8353927627435987e+04,2.2341424145819028e+03,4.5688904996449571e+02,1.2173317272260677e+02,3.7593061247508530e+01,4.7412722556720146e+00,3.9120358491841306e-01,8.5986297237246045e+00,4.9084868336327880e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "12s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:15:21 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  18795484.8537        1
[INPUT] 0    0    [1    /1   ]  4698871.21341        1
[INPUT] 0    0    [1    /1   ]  1174717.80335        1
[INPUT] 0    0    [1    /1   ]  293679.448747        1
[INPUT] 0    0    [1    /1   ]  73419.8721848        1
[INPUT] 0    0    [1    /1   ]  18352.6527421        1
[INPUT] 0    0    [1    /1   ]  2236.0716896         1
[INPUT] 0    0    [1    /1   ]  456.10102593         1
[INPUT] 0    0    [1    /1   ]  121.582039532        1
[INPUT] 0    0    [1    /1   ]  37.5899181659        1
[INPUT] 0    0    [1    /1   ]  4.74031987644        1
[INPUT] 0    0    [1    /1   ]  0.391373619547       1
[INPUT] 1    0    [1    /1   ]  8.60000973404        1
[INPUT] 1    0    [1    /1   ]  0.49106481596        1

nuclear repulsion = 0
number of shells = 14
number of NR pGTOs = 18
number of NR cGTOs = 18
basis = {'Ar': [[0, [18795484.853669256, 1.0]], [0, [4698871.213413731, 1.0]], [0, [1174717.8033526144, 1.0]], [0, [293679.4487470777, 1.0]], [0, [73419.87218479847, 1.0]], [0, [18352.65274208326, 1.0]], [0, [2236.0716896015247, 1.0]], [0, [456.10102592983736, 1.0]], [0, [121.58203953176496, 1.0]], [0, [37.589918165918064, 1.0]], [0, [4.740319876438362, 1.0]], [0, [0.39137361954705313, 1.0]], [1, [8.600009734039723, 1.0]], [1, [0.491064815960468, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [18795484.85366926]
bas 1, expnt(s) = [4698871.21341373]
bas 2, expnt(s) = [1174717.80335261]
bas 3, expnt(s) = [293679.44874708]
bas 4, expnt(s) = [73419.8721848]
bas 5, expnt(s) = [18352.65274208]
bas 6, expnt(s) = [2236.0716896]
bas 7, expnt(s) = [456.10102593]
bas 8, expnt(s) = [121.58203953]
bas 9, expnt(s) = [37.58991817]
bas 10, expnt(s) = [4.74031988]
bas 11, expnt(s) = [0.39137362]
bas 12, expnt(s) = [8.60000973]
bas 13, expnt(s) = [0.49106482]
CPU time:       102.50
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  0  1  1  0 42 43  0]
 [ 0  0  1  1  0 44 45  0]
 [ 0  0  1  1  0 46 47  0]
 [ 0  1  1  1  0 48 49  0]
 [ 0  1  1  1  0 50 51  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.87954849e+07 7.21199097e+05 4.69887121e+06 2.54982386e+05
 1.17471780e+06 9.01498871e+04 2.93679449e+05 3.18727981e+04
 7.34198722e+04 1.12687370e+04 1.83526527e+04 3.98372324e+03
 2.23607169e+03 8.21541141e+02 4.56101026e+02 2.49350826e+02
 1.21582040e+02 9.25054015e+01 3.75899182e+01 3.83546973e+01
 4.74031988e+00 8.11653678e+00 3.91373620e-01 1.25014010e+00
 8.60000973e+00 4.29643327e+01 4.91064816e-01 1.19924500e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319687041959867
cond(S) = 56.395774719197775
E1 = -688.84997715341  E_coul = 184.93051865039166
init E= -503.919458503018
    CPU time for initialize scf      0.03 sec, wall time      0.03 sec
  HOMO = -0.680572647330915  LUMO = 84.9916662061777
  mo_energy =
[-1.21648357e+02 -1.32800392e+01 -7.62059556e+00 -7.62059556e+00
 -7.62059556e+00 -1.65046430e+00 -6.80572647e-01 -6.80572647e-01
 -6.80572647e-01  8.49916662e+01  6.76166486e+02  3.93418073e+03
  2.96214576e+04  1.54738831e+05  6.64891043e+05  2.71962693e+06
  1.10459650e+07  4.65100862e+07]
E1 = -706.6053056074259  E_coul = 198.96600271624706
cycle= 1 E= -507.639302891179  delta_E= -3.72  |g|= 0.318  |ddm|= 0.301
    CPU time for cycle= 1      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.42067
diis-c [-0.1769632  1.       ]
  HOMO = -0.235698669538612  LUMO = 86.3250157910912
  mo_energy =
[-1.20259894e+02 -1.22516286e+01 -6.65174313e+00 -6.65174313e+00
 -6.65174313e+00 -1.16301292e+00 -2.35698670e-01 -2.35698670e-01
 -2.35698670e-01  8.63250158e+01  6.77537655e+02  3.93543284e+03
  2.96225468e+04  1.54739849e+05  6.64892031e+05  2.71962791e+06
  1.10459660e+07  4.65100872e+07]
E1 = -706.5738252379166  E_coul = 198.93409356048534
cycle= 2 E= -507.639731677431  delta_E= -0.000429  |g|= 0.00475  |ddm|= 0.0143
    CPU time for cycle= 2      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.00504558
diis-c [-2.54123126e-05 -5.07912454e-04  1.00050791e+00]
  HOMO = -0.235874349871204  LUMO = 86.3214946679724
  mo_energy =
[-1.20268545e+02 -1.22528192e+01 -6.65358745e+00 -6.65358745e+00
 -6.65358745e+00 -1.16307782e+00 -2.35874350e-01 -2.35874350e-01
 -2.35874350e-01  8.63214947e+01  6.77527065e+02  3.93541694e+03
  2.96225275e+04  1.54739829e+05  6.64892011e+05  2.71962789e+06
  1.10459660e+07  4.65100872e+07]
E1 = -706.5733840528759  E_coul = 198.93365226500617
cycle= 3 E= -507.63973178787  delta_E= -1.1e-07  |g|= 9.49e-05  |ddm|= 0.000202
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.000126915
diis-c [-3.96418173e-10  3.34730081e-05 -2.54729637e-02  1.02543949e+00]
  HOMO = -0.235876569038035  LUMO = 86.3214499361045
  mo_energy =
[-1.20268658e+02 -1.22528350e+01 -6.65361447e+00 -6.65361447e+00
 -6.65361447e+00 -1.16307847e+00 -2.35876569e-01 -2.35876569e-01
 -2.35876569e-01  8.63214499e+01  6.77526948e+02  3.93541679e+03
  2.96225274e+04  1.54739829e+05  6.64892011e+05  2.71962789e+06
  1.10459660e+07  4.65100872e+07]
E1 = -706.5733767953396  E_coul = 198.9336450074297
cycle= 4 E= -507.63973178791  delta_E= -4.02e-11  |g|= 3.74e-07  |ddm|= 3.46e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.5733767953396  E_coul = 198.9336450074297
  HOMO = -0.235876552678215  LUMO = 86.3214502745986
  mo_energy =
[-1.20268657e+02 -1.22528349e+01 -6.65361430e+00 -6.65361430e+00
 -6.65361430e+00 -1.16307847e+00 -2.35876553e-01 -2.35876553e-01
 -2.35876553e-01  8.63214503e+01  6.77526949e+02  3.93541679e+03
  2.96225274e+04  1.54739829e+05  6.64892011e+05  2.71962789e+06
  1.10459660e+07  4.65100872e+07]
E1 = -706.5733768324483  E_coul = 198.9336450445388
Extra cycle  E= -507.639731787909  delta_E= 4.55e-13  |g|= 6.47e-09  |ddm|= 1.65e-08
    CPU time for scf_cycle      0.10 sec, wall time      0.10 sec
exp = [1.87954849e+07 4.69887121e+06 1.17471780e+06 2.93679449e+05
 7.34198722e+04 1.83526527e+04 2.23607169e+03 4.56101026e+02
 1.21582040e+02 3.75899182e+01 4.74031988e+00 3.91373620e-01
 8.60000973e+00 4.91064816e-01]
E = -507.63973178790945
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="BFGS",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((14, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.6988712134173084e+06,1.1747178033543271e+06,2.9367945083858178e+05,7.3419865393677101e+04,1.8353927627435987e+04,2.2341424145819028e+03,4.5688904996449571e+02,1.2173317272260677e+02,3.7593061247508530e+01,4.7412722556720146e+00,3.9120358491841306e-01,8.5986297237246045e+00,4.9084868336327880e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "12s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:15:22 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  18795484.8537        1
[INPUT] 0    0    [1    /1   ]  4698871.21341        1
[INPUT] 0    0    [1    /1   ]  1174717.80335        1
[INPUT] 0    0    [1    /1   ]  293679.448747        1
[INPUT] 0    0    [1    /1   ]  73419.8721848        1
[INPUT] 0    0    [1    /1   ]  18352.6527421        1
[INPUT] 0    0    [1    /1   ]  2236.0716896         1
[INPUT] 0    0    [1    /1   ]  456.10102593         1
[INPUT] 0    0    [1    /1   ]  121.582039532        1
[INPUT] 0    0    [1    /1   ]  37.5899181659        1
[INPUT] 0    0    [1    /1   ]  4.74031987644        1
[INPUT] 0    0    [1    /1   ]  0.391373619547       1
[INPUT] 1    0    [1    /1   ]  8.60000973404        1
[INPUT] 1    0    [1    /1   ]  0.49106481596        1

nuclear repulsion = 0
number of shells = 14
number of NR pGTOs = 18
number of NR cGTOs = 18
basis = {'Ar': [[0, [18795484.853669256, 1.0]], [0, [4698871.213413731, 1.0]], [0, [1174717.8033526144, 1.0]], [0, [293679.4487470777, 1.0]], [0, [73419.87218479847, 1.0]], [0, [18352.65274208326, 1.0]], [0, [2236.0716896015247, 1.0]], [0, [456.10102592983736, 1.0]], [0, [121.58203953176496, 1.0]], [0, [37.589918165918064, 1.0]], [0, [4.740319876438362, 1.0]], [0, [0.39137361954705313, 1.0]], [1, [8.600009734039723, 1.0]], [1, [0.491064815960468, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [18795484.85366926]
bas 1, expnt(s) = [4698871.21341373]
bas 2, expnt(s) = [1174717.80335261]
bas 3, expnt(s) = [293679.44874708]
bas 4, expnt(s) = [73419.8721848]
bas 5, expnt(s) = [18352.65274208]
bas 6, expnt(s) = [2236.0716896]
bas 7, expnt(s) = [456.10102593]
bas 8, expnt(s) = [121.58203953]
bas 9, expnt(s) = [37.58991817]
bas 10, expnt(s) = [4.74031988]
bas 11, expnt(s) = [0.39137362]
bas 12, expnt(s) = [8.60000973]
bas 13, expnt(s) = [0.49106482]
CPU time:       103.06
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  0  1  1  0 42 43  0]
 [ 0  0  1  1  0 44 45  0]
 [ 0  0  1  1  0 46 47  0]
 [ 0  1  1  1  0 48 49  0]
 [ 0  1  1  1  0 50 51  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.87954849e+07 7.21199097e+05 4.69887121e+06 2.54982386e+05
 1.17471780e+06 9.01498871e+04 2.93679449e+05 3.18727981e+04
 7.34198722e+04 1.12687370e+04 1.83526527e+04 3.98372324e+03
 2.23607169e+03 8.21541141e+02 4.56101026e+02 2.49350826e+02
 1.21582040e+02 9.25054015e+01 3.75899182e+01 3.83546973e+01
 4.74031988e+00 8.11653678e+00 3.91373620e-01 1.25014010e+00
 8.60000973e+00 4.29643327e+01 4.91064816e-01 1.19924500e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319687041959867
cond(S) = 56.395774719197775
E1 = -688.84997715341  E_coul = 184.93051865039166
init E= -503.919458503018
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.680572647330915  LUMO = 84.9916662061777
  mo_energy =
[-1.21648357e+02 -1.32800392e+01 -7.62059556e+00 -7.62059556e+00
 -7.62059556e+00 -1.65046430e+00 -6.80572647e-01 -6.80572647e-01
 -6.80572647e-01  8.49916662e+01  6.76166486e+02  3.93418073e+03
  2.96214576e+04  1.54738831e+05  6.64891043e+05  2.71962693e+06
  1.10459650e+07  4.65100862e+07]
E1 = -706.6053056074259  E_coul = 198.96600271624706
cycle= 1 E= -507.639302891179  delta_E= -3.72  |g|= 0.318  |ddm|= 0.301
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.42067
diis-c [-0.1769632  1.       ]
  HOMO = -0.235698669538612  LUMO = 86.3250157910912
  mo_energy =
[-1.20259894e+02 -1.22516286e+01 -6.65174313e+00 -6.65174313e+00
 -6.65174313e+00 -1.16301292e+00 -2.35698670e-01 -2.35698670e-01
 -2.35698670e-01  8.63250158e+01  6.77537655e+02  3.93543284e+03
  2.96225468e+04  1.54739849e+05  6.64892031e+05  2.71962791e+06
  1.10459660e+07  4.65100872e+07]
E1 = -706.5738252379166  E_coul = 198.93409356048534
cycle= 2 E= -507.639731677431  delta_E= -0.000429  |g|= 0.00475  |ddm|= 0.0143
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00504558
diis-c [-2.54123126e-05 -5.07912454e-04  1.00050791e+00]
  HOMO = -0.235874349871204  LUMO = 86.3214946679724
  mo_energy =
[-1.20268545e+02 -1.22528192e+01 -6.65358745e+00 -6.65358745e+00
 -6.65358745e+00 -1.16307782e+00 -2.35874350e-01 -2.35874350e-01
 -2.35874350e-01  8.63214947e+01  6.77527065e+02  3.93541694e+03
  2.96225275e+04  1.54739829e+05  6.64892011e+05  2.71962789e+06
  1.10459660e+07  4.65100872e+07]
E1 = -706.5733840528759  E_coul = 198.93365226500617
cycle= 3 E= -507.63973178787  delta_E= -1.1e-07  |g|= 9.49e-05  |ddm|= 0.000202
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.000126915
diis-c [-3.96418173e-10  3.34730081e-05 -2.54729637e-02  1.02543949e+00]
  HOMO = -0.235876569038035  LUMO = 86.3214499361045
  mo_energy =
[-1.20268658e+02 -1.22528350e+01 -6.65361447e+00 -6.65361447e+00
 -6.65361447e+00 -1.16307847e+00 -2.35876569e-01 -2.35876569e-01
 -2.35876569e-01  8.63214499e+01  6.77526948e+02  3.93541679e+03
  2.96225274e+04  1.54739829e+05  6.64892011e+05  2.71962789e+06
  1.10459660e+07  4.65100872e+07]
E1 = -706.5733767953396  E_coul = 198.9336450074297
cycle= 4 E= -507.63973178791  delta_E= -4.02e-11  |g|= 3.74e-07  |ddm|= 3.46e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.5733767953396  E_coul = 198.9336450074297
  HOMO = -0.235876552678215  LUMO = 86.3214502745986
  mo_energy =
[-1.20268657e+02 -1.22528349e+01 -6.65361430e+00 -6.65361430e+00
 -6.65361430e+00 -1.16307847e+00 -2.35876553e-01 -2.35876553e-01
 -2.35876553e-01  8.63214503e+01  6.77526949e+02  3.93541679e+03
  2.96225274e+04  1.54739829e+05  6.64892011e+05  2.71962789e+06
  1.10459660e+07  4.65100872e+07]
E1 = -706.5733768324483  E_coul = 198.9336450445388
Extra cycle  E= -507.639731787909  delta_E= 4.55e-13  |g|= 6.47e-09  |ddm|= 1.65e-08
    CPU time for scf_cycle      0.10 sec, wall time      0.10 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 56.395774719197775
E1 = -706.5733768324483  E_coul = 198.9336450445388
init E= -507.639731787909
    CPU time for initialize scf      0.12 sec, wall time      0.12 sec
  HOMO = -0.235876552486733  LUMO = 86.3214502787389
  mo_energy =
[-1.20268657e+02 -1.22528349e+01 -6.65361430e+00 -6.65361430e+00
 -6.65361430e+00 -1.16307847e+00 -2.35876552e-01 -2.35876552e-01
 -2.35876552e-01  8.63214503e+01  6.77526949e+02  3.93541679e+03
  2.96225274e+04  1.54739829e+05  6.64892011e+05  2.71962789e+06
  1.10459660e+07  4.65100872e+07]
E1 = -706.5733768330105  E_coul = 198.93364504510075
cycle= 1 E= -507.63973178791  delta_E= -2.27e-13  |g|= 1.58e-10  |ddm|= 2.55e-10
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -706.5733768330105  E_coul = 198.93364504510075
  HOMO = -0.235876552484025  LUMO = 86.3214502787949
  mo_energy =
[-1.20268657e+02 -1.22528349e+01 -6.65361430e+00 -6.65361430e+00
 -6.65361430e+00 -1.16307847e+00 -2.35876552e-01 -2.35876552e-01
 -2.35876552e-01  8.63214503e+01  6.77526949e+02  3.93541679e+03
  2.96225274e+04  1.54739829e+05  6.64892011e+05  2.71962789e+06
  1.10459660e+07  4.65100872e+07]
E1 = -706.5733768330201  E_coul = 198.93364504511072
Extra cycle  E= -507.639731787909  delta_E= 2.84e-13  |g|= 8.85e-11  |ddm|= 4.63e-12
    CPU time for scf_cycle      0.19 sec, wall time      0.19 sec
exp = [1.87954849e+07 4.69887121e+06 1.17471780e+06 2.93679449e+05
 7.34198722e+04 1.83526527e+04 2.23607169e+03 4.56101026e+02
 1.21582040e+02 3.75899182e+01 4.74031988e+00 3.91373620e-01
 8.60000973e+00 4.91064816e-01]
grad_E = [-1.13892415e-13  1.78440846e-11  7.24754784e-12  1.04392873e-08
 -3.46394677e-08  6.35744483e-06 -5.77353795e-06 -2.12919880e-05
 -9.61248440e-06  1.86596844e-04 -4.76155169e-04  3.44329300e-03
  9.57940125e-04  7.07923516e-03]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="BFGS",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((14, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.6988712134173084e+06,1.1747178033543271e+06,2.9367945083858178e+05,7.3419865393677101e+04,1.8353927627435987e+04,2.2341424145819028e+03,4.5688904996449571e+02,1.2173317272260677e+02,3.7593061247508530e+01,4.7412722556720146e+00,3.9120358491841306e-01,8.5986297237246045e+00,4.9084868336327880e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "12s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:15:25 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  18795484.8537        1
[INPUT] 0    0    [1    /1   ]  4698871.21341        1
[INPUT] 0    0    [1    /1   ]  1174717.80335        1
[INPUT] 0    0    [1    /1   ]  293679.448314        1
[INPUT] 0    0    [1    /1   ]  73419.8735902        1
[INPUT] 0    0    [1    /1   ]  18352.3889066        1
[INPUT] 0    0    [1    /1   ]  2236.47096535        1
[INPUT] 0    0    [1    /1   ]  455.937617886        1
[INPUT] 0    0    [1    /1   ]  121.553583911        1
[INPUT] 0    0    [1    /1   ]  37.58049254          1
[INPUT] 0    0    [1    /1   ]  4.74074119602        1
[INPUT] 0    0    [1    /1   ]  0.391276031854       1
[INPUT] 1    0    [1    /1   ]  8.59920506007        1
[INPUT] 1    0    [1    /1   ]  0.490940312142       1

nuclear repulsion = 0
number of shells = 14
number of NR pGTOs = 18
number of NR cGTOs = 18
basis = {'Ar': [[0, [18795484.85366926, 1.0]], [0, [4698871.213412991, 1.0]], [0, [1174717.8033522598, 1.0]], [0, [293679.44831424434, 1.0]], [0, [73419.87359020831, 1.0]], [0, [18352.388906609613, 1.0]], [0, [2236.4709653457126, 1.0]], [0, [455.9376178857784, 1.0]], [0, [121.5535839107709, 1.0]], [0, [37.58049253995214, 1.0]], [0, [4.7407411960169545, 1.0]], [0, [0.3912760318535202, 1.0]], [1, [8.59920506007146, 1.0]], [1, [0.49094031214159906, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [18795484.85366926]
bas 1, expnt(s) = [4698871.21341299]
bas 2, expnt(s) = [1174717.80335226]
bas 3, expnt(s) = [293679.44831424]
bas 4, expnt(s) = [73419.87359021]
bas 5, expnt(s) = [18352.38890661]
bas 6, expnt(s) = [2236.47096535]
bas 7, expnt(s) = [455.93761789]
bas 8, expnt(s) = [121.55358391]
bas 9, expnt(s) = [37.58049254]
bas 10, expnt(s) = [4.7407412]
bas 11, expnt(s) = [0.39127603]
bas 12, expnt(s) = [8.59920506]
bas 13, expnt(s) = [0.49094031]
CPU time:       106.35
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  0  1  1  0 42 43  0]
 [ 0  0  1  1  0 44 45  0]
 [ 0  0  1  1  0 46 47  0]
 [ 0  1  1  1  0 48 49  0]
 [ 0  1  1  1  0 50 51  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.87954849e+07 7.21199097e+05 4.69887121e+06 2.54982386e+05
 1.17471780e+06 9.01498871e+04 2.93679448e+05 3.18727980e+04
 7.34198736e+04 1.12687371e+04 1.83523889e+04 3.98368029e+03
 2.23647097e+03 8.21651160e+02 4.55937618e+02 2.49283821e+02
 1.21553584e+02 9.24891632e+01 3.75804925e+01 3.83474840e+01
 4.74074120e+00 8.11707782e+00 3.91276032e-01 1.24990630e+00
 8.59920506e+00 4.29593077e+01 4.90940312e-01 1.19886494e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319855984334275
cond(S) = 56.39384563074274
E1 = -688.8420704123661  E_coul = 184.92173833643943
init E= -503.920332075927
    CPU time for initialize scf      0.03 sec, wall time      0.03 sec
  HOMO = -0.680758618748726  LUMO = 84.9611725987611
  mo_energy =
[-1.21649572e+02 -1.32807147e+01 -7.62118121e+00 -7.62118121e+00
 -7.62118121e+00 -1.65060317e+00 -6.80758619e-01 -6.80758619e-01
 -6.80758619e-01  8.49611726e+01  6.75921456e+02  3.93398261e+03
  2.96218151e+04  1.54738801e+05  6.64890822e+05  2.71962669e+06
  1.10459648e+07  4.65100860e+07]
E1 = -706.5936006039906  E_coul = 198.9542950266755
cycle= 1 E= -507.639305577315  delta_E= -3.72  |g|= 0.318  |ddm|= 0.301
    CPU time for cycle= 1      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.420664
diis-c [-0.17695795  1.        ]
  HOMO = -0.236032234188739  LUMO = 86.2942615155322
  mo_energy =
[-1.20261319e+02 -1.22524830e+01 -6.65251024e+00 -6.65251024e+00
 -6.65251024e+00 -1.16328757e+00 -2.36032234e-01 -2.36032234e-01
 -2.36032234e-01  8.62942615e+01  6.77292407e+02  3.93523449e+03
  2.96229041e+04  1.54739819e+05  6.64891810e+05  2.71962766e+06
  1.10459658e+07  4.65100870e+07]
E1 = -706.5621127341909  E_coul = 198.92237836884559
cycle= 2 E= -507.639734365345  delta_E= -0.000429  |g|= 0.00475  |ddm|= 0.0143
    CPU time for cycle= 2      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.00504494
diis-c [-2.54064050e-05 -5.04483312e-04  1.00050448e+00]
  HOMO = -0.236207887647168  LUMO = 86.2907400692967
  mo_energy =
[-1.20269971e+02 -1.22536740e+01 -6.65435507e+00 -6.65435507e+00
 -6.65435507e+00 -1.16335248e+00 -2.36207888e-01 -2.36207888e-01
 -2.36207888e-01  8.62907401e+01  6.77281816e+02  3.93521859e+03
  2.96228848e+04  1.54739799e+05  6.64891789e+05  2.71962764e+06
  1.10459658e+07  4.65100870e+07]
E1 = -706.5616713746822  E_coul = 198.92193689888106
cycle= 3 E= -507.639734475801  delta_E= -1.1e-07  |g|= 9.49e-05  |ddm|= 0.000202
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.000126939
diis-c [-3.96625949e-10  3.34656953e-05 -2.54804459e-02  1.02544698e+00]
  HOMO = -0.236210107229979  LUMO = 86.290695310153
  mo_energy =
[-1.20270084e+02 -1.22536899e+01 -6.65438210e+00 -6.65438210e+00
 -6.65438210e+00 -1.16335314e+00 -2.36210107e-01 -2.36210107e-01
 -2.36210107e-01  8.62906953e+01  6.77281698e+02  3.93521844e+03
  2.96228847e+04  1.54739799e+05  6.64891789e+05  2.71962764e+06
  1.10459658e+07  4.65100870e+07]
E1 = -706.561664111383  E_coul = 198.92192963554194
cycle= 4 E= -507.639734475841  delta_E= -4e-11  |g|= 3.74e-07  |ddm|= 3.46e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.561664111383  E_coul = 198.92192963554194
  HOMO = -0.236210090863806  LUMO = 86.2906956488141
  mo_energy =
[-1.20270083e+02 -1.22536898e+01 -6.65438194e+00 -6.65438194e+00
 -6.65438194e+00 -1.16335313e+00 -2.36210091e-01 -2.36210091e-01
 -2.36210091e-01  8.62906956e+01  6.77281699e+02  3.93521845e+03
  2.96228847e+04  1.54739799e+05  6.64891789e+05  2.71962764e+06
  1.10459658e+07  4.65100870e+07]
E1 = -706.5616641485225  E_coul = 198.9219296726814
Extra cycle  E= -507.639734475841  delta_E=    0  |g|= 6.47e-09  |ddm|= 1.65e-08
    CPU time for scf_cycle      0.10 sec, wall time      0.11 sec
exp = [1.87954849e+07 4.69887121e+06 1.17471780e+06 2.93679448e+05
 7.34198736e+04 1.83523889e+04 2.23647097e+03 4.55937618e+02
 1.21553584e+02 3.75804925e+01 4.74074120e+00 3.91276032e-01
 8.59920506e+00 4.90940312e-01]
E = -507.6397344758411
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="BFGS",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((14, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.6988712134173084e+06,1.1747178033543271e+06,2.9367945083858178e+05,7.3419865393677101e+04,1.8353927627435987e+04,2.2341424145819028e+03,4.5688904996449571e+02,1.2173317272260677e+02,3.7593061247508530e+01,4.7412722556720146e+00,3.9120358491841306e-01,8.5986297237246045e+00,4.9084868336327880e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "12s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:15:26 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  18795484.8537        1
[INPUT] 0    0    [1    /1   ]  4698871.21341        1
[INPUT] 0    0    [1    /1   ]  1174717.80335        1
[INPUT] 0    0    [1    /1   ]  293679.448314        1
[INPUT] 0    0    [1    /1   ]  73419.8735902        1
[INPUT] 0    0    [1    /1   ]  18352.3889066        1
[INPUT] 0    0    [1    /1   ]  2236.47096535        1
[INPUT] 0    0    [1    /1   ]  455.937617886        1
[INPUT] 0    0    [1    /1   ]  121.553583911        1
[INPUT] 0    0    [1    /1   ]  37.58049254          1
[INPUT] 0    0    [1    /1   ]  4.74074119602        1
[INPUT] 0    0    [1    /1   ]  0.391276031854       1
[INPUT] 1    0    [1    /1   ]  8.59920506007        1
[INPUT] 1    0    [1    /1   ]  0.490940312142       1

nuclear repulsion = 0
number of shells = 14
number of NR pGTOs = 18
number of NR cGTOs = 18
basis = {'Ar': [[0, [18795484.85366926, 1.0]], [0, [4698871.213412991, 1.0]], [0, [1174717.8033522598, 1.0]], [0, [293679.44831424434, 1.0]], [0, [73419.87359020831, 1.0]], [0, [18352.388906609613, 1.0]], [0, [2236.4709653457126, 1.0]], [0, [455.9376178857784, 1.0]], [0, [121.5535839107709, 1.0]], [0, [37.58049253995214, 1.0]], [0, [4.7407411960169545, 1.0]], [0, [0.3912760318535202, 1.0]], [1, [8.59920506007146, 1.0]], [1, [0.49094031214159906, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [18795484.85366926]
bas 1, expnt(s) = [4698871.21341299]
bas 2, expnt(s) = [1174717.80335226]
bas 3, expnt(s) = [293679.44831424]
bas 4, expnt(s) = [73419.87359021]
bas 5, expnt(s) = [18352.38890661]
bas 6, expnt(s) = [2236.47096535]
bas 7, expnt(s) = [455.93761789]
bas 8, expnt(s) = [121.55358391]
bas 9, expnt(s) = [37.58049254]
bas 10, expnt(s) = [4.7407412]
bas 11, expnt(s) = [0.39127603]
bas 12, expnt(s) = [8.59920506]
bas 13, expnt(s) = [0.49094031]
CPU time:       106.94
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  0  1  1  0 42 43  0]
 [ 0  0  1  1  0 44 45  0]
 [ 0  0  1  1  0 46 47  0]
 [ 0  1  1  1  0 48 49  0]
 [ 0  1  1  1  0 50 51  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.87954849e+07 7.21199097e+05 4.69887121e+06 2.54982386e+05
 1.17471780e+06 9.01498871e+04 2.93679448e+05 3.18727980e+04
 7.34198736e+04 1.12687371e+04 1.83523889e+04 3.98368029e+03
 2.23647097e+03 8.21651160e+02 4.55937618e+02 2.49283821e+02
 1.21553584e+02 9.24891632e+01 3.75804925e+01 3.83474840e+01
 4.74074120e+00 8.11707782e+00 3.91276032e-01 1.24990630e+00
 8.59920506e+00 4.29593077e+01 4.90940312e-01 1.19886494e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319855984334275
cond(S) = 56.39384563074274
E1 = -688.8420704123661  E_coul = 184.92173833643943
init E= -503.920332075927
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.680758618748726  LUMO = 84.9611725987611
  mo_energy =
[-1.21649572e+02 -1.32807147e+01 -7.62118121e+00 -7.62118121e+00
 -7.62118121e+00 -1.65060317e+00 -6.80758619e-01 -6.80758619e-01
 -6.80758619e-01  8.49611726e+01  6.75921456e+02  3.93398261e+03
  2.96218151e+04  1.54738801e+05  6.64890822e+05  2.71962669e+06
  1.10459648e+07  4.65100860e+07]
E1 = -706.5936006039906  E_coul = 198.9542950266755
cycle= 1 E= -507.639305577315  delta_E= -3.72  |g|= 0.318  |ddm|= 0.301
    CPU time for cycle= 1      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.420664
diis-c [-0.17695795  1.        ]
  HOMO = -0.236032234188739  LUMO = 86.2942615155322
  mo_energy =
[-1.20261319e+02 -1.22524830e+01 -6.65251024e+00 -6.65251024e+00
 -6.65251024e+00 -1.16328757e+00 -2.36032234e-01 -2.36032234e-01
 -2.36032234e-01  8.62942615e+01  6.77292407e+02  3.93523449e+03
  2.96229041e+04  1.54739819e+05  6.64891810e+05  2.71962766e+06
  1.10459658e+07  4.65100870e+07]
E1 = -706.5621127341909  E_coul = 198.92237836884559
cycle= 2 E= -507.639734365345  delta_E= -0.000429  |g|= 0.00475  |ddm|= 0.0143
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00504494
diis-c [-2.54064050e-05 -5.04483312e-04  1.00050448e+00]
  HOMO = -0.236207887647168  LUMO = 86.2907400692967
  mo_energy =
[-1.20269971e+02 -1.22536740e+01 -6.65435507e+00 -6.65435507e+00
 -6.65435507e+00 -1.16335248e+00 -2.36207888e-01 -2.36207888e-01
 -2.36207888e-01  8.62907401e+01  6.77281816e+02  3.93521859e+03
  2.96228848e+04  1.54739799e+05  6.64891789e+05  2.71962764e+06
  1.10459658e+07  4.65100870e+07]
E1 = -706.5616713746822  E_coul = 198.92193689888106
cycle= 3 E= -507.639734475801  delta_E= -1.1e-07  |g|= 9.49e-05  |ddm|= 0.000202
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.000126939
diis-c [-3.96625949e-10  3.34656953e-05 -2.54804459e-02  1.02544698e+00]
  HOMO = -0.236210107229979  LUMO = 86.290695310153
  mo_energy =
[-1.20270084e+02 -1.22536899e+01 -6.65438210e+00 -6.65438210e+00
 -6.65438210e+00 -1.16335314e+00 -2.36210107e-01 -2.36210107e-01
 -2.36210107e-01  8.62906953e+01  6.77281698e+02  3.93521844e+03
  2.96228847e+04  1.54739799e+05  6.64891789e+05  2.71962764e+06
  1.10459658e+07  4.65100870e+07]
E1 = -706.561664111383  E_coul = 198.92192963554194
cycle= 4 E= -507.639734475841  delta_E= -4e-11  |g|= 3.74e-07  |ddm|= 3.46e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.561664111383  E_coul = 198.92192963554194
  HOMO = -0.236210090863806  LUMO = 86.2906956488141
  mo_energy =
[-1.20270083e+02 -1.22536898e+01 -6.65438194e+00 -6.65438194e+00
 -6.65438194e+00 -1.16335313e+00 -2.36210091e-01 -2.36210091e-01
 -2.36210091e-01  8.62906956e+01  6.77281699e+02  3.93521845e+03
  2.96228847e+04  1.54739799e+05  6.64891789e+05  2.71962764e+06
  1.10459658e+07  4.65100870e+07]
E1 = -706.5616641485225  E_coul = 198.9219296726814
Extra cycle  E= -507.639734475841  delta_E=    0  |g|= 6.47e-09  |ddm|= 1.65e-08
    CPU time for scf_cycle      0.10 sec, wall time      0.11 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 56.39384563074274
E1 = -706.5616641485225  E_coul = 198.9219296726814
init E= -507.639734475841
    CPU time for initialize scf      0.12 sec, wall time      0.13 sec
  HOMO = -0.236210090672247  LUMO = 86.2906956529536
  mo_energy =
[-1.20270083e+02 -1.22536898e+01 -6.65438194e+00 -6.65438194e+00
 -6.65438194e+00 -1.16335313e+00 -2.36210091e-01 -2.36210091e-01
 -2.36210091e-01  8.62906957e+01  6.77281699e+02  3.93521845e+03
  2.96228847e+04  1.54739799e+05  6.64891789e+05  2.71962764e+06
  1.10459658e+07  4.65100870e+07]
E1 = -706.5616641490851  E_coul = 198.92192967324408
cycle= 1 E= -507.639734475841  delta_E= 1.14e-13  |g|= 1.76e-10  |ddm|= 2.55e-10
    CPU time for cycle= 1      0.01 sec, wall time      0.02 sec
E1 = -706.5616641490851  E_coul = 198.92192967324408
  HOMO = -0.236210090669539  LUMO = 86.2906956530174
  mo_energy =
[-1.20270083e+02 -1.22536898e+01 -6.65438194e+00 -6.65438194e+00
 -6.65438194e+00 -1.16335313e+00 -2.36210091e-01 -2.36210091e-01
 -2.36210091e-01  8.62906957e+01  6.77281699e+02  3.93521845e+03
  2.96228847e+04  1.54739799e+05  6.64891789e+05  2.71962764e+06
  1.10459658e+07  4.65100870e+07]
E1 = -706.5616641490939  E_coul = 198.92192967325315
Extra cycle  E= -507.639734475841  delta_E= 2.84e-13  |g|= 2.07e-10  |ddm|= 4.46e-12
    CPU time for scf_cycle      0.20 sec, wall time      0.20 sec
exp = [1.87954849e+07 4.69887121e+06 1.17471780e+06 2.93679448e+05
 7.34198736e+04 1.83523889e+04 2.23647097e+03 4.55937618e+02
 1.21553584e+02 3.75804925e+01 4.74074120e+00 3.91276032e-01
 8.59920506e+00 4.90940312e-01]
grad_E = [-1.14496099e-13  1.78055187e-11  6.92856181e-12  1.04173063e-08
 -3.47393221e-08  6.34255140e-06 -4.76497073e-06 -3.09032923e-05
  2.62771401e-05  1.05837821e-04 -2.01455148e-04  1.45827993e-03
  4.04892674e-04  2.99948393e-03]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="BFGS",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((14, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.6988712134173084e+06,1.1747178033543271e+06,2.9367945083858178e+05,7.3419865393677101e+04,1.8353927627435987e+04,2.2341424145819028e+03,4.5688904996449571e+02,1.2173317272260677e+02,3.7593061247508530e+01,4.7412722556720146e+00,3.9120358491841306e-01,8.5986297237246045e+00,4.9084868336327880e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "12s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:15:29 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  18795484.8537        1
[INPUT] 0    0    [1    /1   ]  4698871.21341        1
[INPUT] 0    0    [1    /1   ]  1174717.80335        1
[INPUT] 0    0    [1    /1   ]  293679.448335        1
[INPUT] 0    0    [1    /1   ]  73419.8735217        1
[INPUT] 0    0    [1    /1   ]  18352.4017745        1
[INPUT] 0    0    [1    /1   ]  2236.45149745        1
[INPUT] 0    0    [1    /1   ]  455.945416643        1
[INPUT] 0    0    [1    /1   ]  121.556639244        1
[INPUT] 0    0    [1    /1   ]  37.5756343624        1
[INPUT] 0    0    [1    /1   ]  4.74103330771        1
[INPUT] 0    0    [1    /1   ]  0.391214993023       1
[INPUT] 1    0    [1    /1   ]  8.59870939846        1
[INPUT] 1    0    [1    /1   ]  0.490863064571       1

nuclear repulsion = 0
number of shells = 14
number of NR pGTOs = 18
number of NR cGTOs = 18
basis = {'Ar': [[0, [18795484.85366926, 1.0]], [0, [4698871.213413027, 1.0]], [0, [1174717.803352277, 1.0]], [0, [293679.4483353547, 1.0]], [0, [73419.87352166261, 1.0]], [0, [18352.401774513943, 1.0]], [0, [2236.4514974468852, 1.0]], [0, [455.94541664303324, 1.0]], [0, [121.55663924390961, 1.0]], [0, [37.57563436237566, 1.0]], [0, [4.741033307709686, 1.0]], [0, [0.3912149930229941, 1.0]], [1, [8.59870939846267, 1.0]], [1, [0.4908630645707612, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [18795484.85366926]
bas 1, expnt(s) = [4698871.21341303]
bas 2, expnt(s) = [1174717.80335228]
bas 3, expnt(s) = [293679.44833535]
bas 4, expnt(s) = [73419.87352166]
bas 5, expnt(s) = [18352.40177451]
bas 6, expnt(s) = [2236.45149745]
bas 7, expnt(s) = [455.94541664]
bas 8, expnt(s) = [121.55663924]
bas 9, expnt(s) = [37.57563436]
bas 10, expnt(s) = [4.74103331]
bas 11, expnt(s) = [0.39121499]
bas 12, expnt(s) = [8.5987094]
bas 13, expnt(s) = [0.49086306]
CPU time:       110.27
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  0  1  1  0 42 43  0]
 [ 0  0  1  1  0 44 45  0]
 [ 0  0  1  1  0 46 47  0]
 [ 0  1  1  1  0 48 49  0]
 [ 0  1  1  1  0 50 51  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.87954849e+07 7.21199097e+05 4.69887121e+06 2.54982386e+05
 1.17471780e+06 9.01498871e+04 2.93679448e+05 3.18727981e+04
 7.34198735e+04 1.12687371e+04 1.83524018e+04 3.98368239e+03
 2.23645150e+03 8.21645795e+02 4.55945417e+02 2.49287019e+02
 1.21556639e+02 9.24909068e+01 3.75756344e+01 3.83437660e+01
 4.74103331e+00 8.11745293e+00 3.91214993e-01 1.24976006e+00
 8.59870940e+00 4.29562125e+01 4.90863065e-01 1.19862915e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319960136368493
cond(S) = 56.39267772844179
E1 = -688.8367276145347  E_coul = 184.91629710630158
init E= -503.920430508233
    CPU time for initialize scf      0.03 sec, wall time      0.03 sec
  HOMO = -0.680874523747439  LUMO = 84.952837433358
  mo_energy =
[-1.21650336e+02 -1.32811199e+01 -7.62154422e+00 -7.62154422e+00
 -7.62154422e+00 -1.65068896e+00 -6.80874524e-01 -6.80874524e-01
 -6.80874524e-01  8.49528374e+01  6.75918043e+02  3.93397905e+03
  2.96217871e+04  1.54738793e+05  6.64890824e+05  2.71962669e+06
  1.10459648e+07  4.65100860e+07]
E1 = -706.5863060383128  E_coul = 198.9469997420947
cycle= 1 E= -507.639306296218  delta_E= -3.72  |g|= 0.318  |ddm|= 0.301
    CPU time for cycle= 1      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.420641
diis-c [-0.17693849  1.        ]
  HOMO = -0.236239359640831  LUMO = 86.2857710966457
  mo_energy =
[-1.20262228e+02 -1.22530002e+01 -6.65298709e+00 -6.65298709e+00
 -6.65298709e+00 -1.16345705e+00 -2.36239360e-01 -2.36239360e-01
 -2.36239360e-01  8.62857711e+01  6.77288828e+02  3.93523078e+03
  2.96228759e+04  1.54739811e+05  6.64891812e+05  2.71962767e+06
  1.10459658e+07  4.65100870e+07]
E1 = -706.5548184856146  E_coul = 198.91508347366212
cycle= 2 E= -507.639735011953  delta_E= -0.000429  |g|= 0.00475  |ddm|= 0.0143
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00504441
diis-c [-2.54014666e-05 -5.02498726e-04  1.00050250e+00]
  HOMO = -0.236414959895746  LUMO = 86.2822496621663
  mo_energy =
[-1.20270880e+02 -1.22541913e+01 -6.65483188e+00 -6.65483188e+00
 -6.65483188e+00 -1.16352196e+00 -2.36414960e-01 -2.36414960e-01
 -2.36414960e-01  8.62822497e+01  6.77278236e+02  3.93521487e+03
  2.96228566e+04  1.54739791e+05  6.64891792e+05  2.71962765e+06
  1.10459658e+07  4.65100870e+07]
E1 = -706.5543771288017  E_coul = 198.91464200641764
cycle= 3 E= -507.639735122384  delta_E= -1.1e-07  |g|= 9.49e-05  |ddm|= 0.000202
    CPU time for cycle= 3      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.00012694
diis-c [-3.96684515e-10  3.34537063e-05 -2.54830998e-02  1.02544965e+00]
  HOMO = -0.23641717906801  LUMO = 86.2822048953061
  mo_energy =
[-1.20270994e+02 -1.22542071e+01 -6.65485892e+00 -6.65485892e+00
 -6.65485892e+00 -1.16352262e+00 -2.36417179e-01 -2.36417179e-01
 -2.36417179e-01  8.62822049e+01  6.77278119e+02  3.93521473e+03
  2.96228565e+04  1.54739791e+05  6.64891791e+05  2.71962765e+06
  1.10459658e+07  4.65100870e+07]
E1 = -706.5543698644312  E_coul = 198.91463474200697
cycle= 4 E= -507.639735122424  delta_E= -4.02e-11  |g|= 3.74e-07  |ddm|= 3.46e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.5543698644312  E_coul = 198.91463474200697
  HOMO = -0.23641716270362  LUMO = 86.2822052340193
  mo_energy =
[-1.20270993e+02 -1.22542070e+01 -6.65485876e+00 -6.65485876e+00
 -6.65485876e+00 -1.16352261e+00 -2.36417163e-01 -2.36417163e-01
 -2.36417163e-01  8.62822052e+01  6.77278120e+02  3.93521473e+03
  2.96228565e+04  1.54739791e+05  6.64891791e+05  2.71962765e+06
  1.10459658e+07  4.65100870e+07]
E1 = -706.5543699015759  E_coul = 198.91463477915164
Extra cycle  E= -507.639735122424  delta_E=    0  |g|= 6.47e-09  |ddm|= 1.65e-08
    CPU time for scf_cycle      0.10 sec, wall time      0.11 sec
exp = [1.87954849e+07 4.69887121e+06 1.17471780e+06 2.93679448e+05
 7.34198735e+04 1.83524018e+04 2.23645150e+03 4.55945417e+02
 1.21556639e+02 3.75756344e+01 4.74103331e+00 3.91214993e-01
 8.59870940e+00 4.90863065e-01]
E = -507.63973512242427
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="BFGS",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((14, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.6988712134173084e+06,1.1747178033543271e+06,2.9367945083858178e+05,7.3419865393677101e+04,1.8353927627435987e+04,2.2341424145819028e+03,4.5688904996449571e+02,1.2173317272260677e+02,3.7593061247508530e+01,4.7412722556720146e+00,3.9120358491841306e-01,8.5986297237246045e+00,4.9084868336327880e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "12s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:15:30 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  18795484.8537        1
[INPUT] 0    0    [1    /1   ]  4698871.21341        1
[INPUT] 0    0    [1    /1   ]  1174717.80335        1
[INPUT] 0    0    [1    /1   ]  293679.448335        1
[INPUT] 0    0    [1    /1   ]  73419.8735217        1
[INPUT] 0    0    [1    /1   ]  18352.4017745        1
[INPUT] 0    0    [1    /1   ]  2236.45149745        1
[INPUT] 0    0    [1    /1   ]  455.945416643        1
[INPUT] 0    0    [1    /1   ]  121.556639244        1
[INPUT] 0    0    [1    /1   ]  37.5756343624        1
[INPUT] 0    0    [1    /1   ]  4.74103330771        1
[INPUT] 0    0    [1    /1   ]  0.391214993023       1
[INPUT] 1    0    [1    /1   ]  8.59870939846        1
[INPUT] 1    0    [1    /1   ]  0.490863064571       1

nuclear repulsion = 0
number of shells = 14
number of NR pGTOs = 18
number of NR cGTOs = 18
basis = {'Ar': [[0, [18795484.85366926, 1.0]], [0, [4698871.213413027, 1.0]], [0, [1174717.803352277, 1.0]], [0, [293679.4483353547, 1.0]], [0, [73419.87352166261, 1.0]], [0, [18352.401774513943, 1.0]], [0, [2236.4514974468852, 1.0]], [0, [455.94541664303324, 1.0]], [0, [121.55663924390961, 1.0]], [0, [37.57563436237566, 1.0]], [0, [4.741033307709686, 1.0]], [0, [0.3912149930229941, 1.0]], [1, [8.59870939846267, 1.0]], [1, [0.4908630645707612, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [18795484.85366926]
bas 1, expnt(s) = [4698871.21341303]
bas 2, expnt(s) = [1174717.80335228]
bas 3, expnt(s) = [293679.44833535]
bas 4, expnt(s) = [73419.87352166]
bas 5, expnt(s) = [18352.40177451]
bas 6, expnt(s) = [2236.45149745]
bas 7, expnt(s) = [455.94541664]
bas 8, expnt(s) = [121.55663924]
bas 9, expnt(s) = [37.57563436]
bas 10, expnt(s) = [4.74103331]
bas 11, expnt(s) = [0.39121499]
bas 12, expnt(s) = [8.5987094]
bas 13, expnt(s) = [0.49086306]
CPU time:       110.86
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  0  1  1  0 42 43  0]
 [ 0  0  1  1  0 44 45  0]
 [ 0  0  1  1  0 46 47  0]
 [ 0  1  1  1  0 48 49  0]
 [ 0  1  1  1  0 50 51  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.87954849e+07 7.21199097e+05 4.69887121e+06 2.54982386e+05
 1.17471780e+06 9.01498871e+04 2.93679448e+05 3.18727981e+04
 7.34198735e+04 1.12687371e+04 1.83524018e+04 3.98368239e+03
 2.23645150e+03 8.21645795e+02 4.55945417e+02 2.49287019e+02
 1.21556639e+02 9.24909068e+01 3.75756344e+01 3.83437660e+01
 4.74103331e+00 8.11745293e+00 3.91214993e-01 1.24976006e+00
 8.59870940e+00 4.29562125e+01 4.90863065e-01 1.19862915e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319960136368493
cond(S) = 56.39267772844179
E1 = -688.8367276145347  E_coul = 184.91629710630158
init E= -503.920430508233
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.680874523747439  LUMO = 84.952837433358
  mo_energy =
[-1.21650336e+02 -1.32811199e+01 -7.62154422e+00 -7.62154422e+00
 -7.62154422e+00 -1.65068896e+00 -6.80874524e-01 -6.80874524e-01
 -6.80874524e-01  8.49528374e+01  6.75918043e+02  3.93397905e+03
  2.96217871e+04  1.54738793e+05  6.64890824e+05  2.71962669e+06
  1.10459648e+07  4.65100860e+07]
E1 = -706.5863060383128  E_coul = 198.9469997420947
cycle= 1 E= -507.639306296218  delta_E= -3.72  |g|= 0.318  |ddm|= 0.301
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.420641
diis-c [-0.17693849  1.        ]
  HOMO = -0.236239359640831  LUMO = 86.2857710966457
  mo_energy =
[-1.20262228e+02 -1.22530002e+01 -6.65298709e+00 -6.65298709e+00
 -6.65298709e+00 -1.16345705e+00 -2.36239360e-01 -2.36239360e-01
 -2.36239360e-01  8.62857711e+01  6.77288828e+02  3.93523078e+03
  2.96228759e+04  1.54739811e+05  6.64891812e+05  2.71962767e+06
  1.10459658e+07  4.65100870e+07]
E1 = -706.5548184856146  E_coul = 198.91508347366212
cycle= 2 E= -507.639735011953  delta_E= -0.000429  |g|= 0.00475  |ddm|= 0.0143
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00504441
diis-c [-2.54014666e-05 -5.02498726e-04  1.00050250e+00]
  HOMO = -0.236414959895746  LUMO = 86.2822496621663
  mo_energy =
[-1.20270880e+02 -1.22541913e+01 -6.65483188e+00 -6.65483188e+00
 -6.65483188e+00 -1.16352196e+00 -2.36414960e-01 -2.36414960e-01
 -2.36414960e-01  8.62822497e+01  6.77278236e+02  3.93521487e+03
  2.96228566e+04  1.54739791e+05  6.64891792e+05  2.71962765e+06
  1.10459658e+07  4.65100870e+07]
E1 = -706.5543771288017  E_coul = 198.91464200641764
cycle= 3 E= -507.639735122384  delta_E= -1.1e-07  |g|= 9.49e-05  |ddm|= 0.000202
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00012694
diis-c [-3.96684515e-10  3.34537063e-05 -2.54830998e-02  1.02544965e+00]
  HOMO = -0.23641717906801  LUMO = 86.2822048953061
  mo_energy =
[-1.20270994e+02 -1.22542071e+01 -6.65485892e+00 -6.65485892e+00
 -6.65485892e+00 -1.16352262e+00 -2.36417179e-01 -2.36417179e-01
 -2.36417179e-01  8.62822049e+01  6.77278119e+02  3.93521473e+03
  2.96228565e+04  1.54739791e+05  6.64891791e+05  2.71962765e+06
  1.10459658e+07  4.65100870e+07]
E1 = -706.5543698644312  E_coul = 198.91463474200697
cycle= 4 E= -507.639735122424  delta_E= -4.02e-11  |g|= 3.74e-07  |ddm|= 3.46e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.5543698644312  E_coul = 198.91463474200697
  HOMO = -0.23641716270362  LUMO = 86.2822052340193
  mo_energy =
[-1.20270993e+02 -1.22542070e+01 -6.65485876e+00 -6.65485876e+00
 -6.65485876e+00 -1.16352261e+00 -2.36417163e-01 -2.36417163e-01
 -2.36417163e-01  8.62822052e+01  6.77278120e+02  3.93521473e+03
  2.96228565e+04  1.54739791e+05  6.64891791e+05  2.71962765e+06
  1.10459658e+07  4.65100870e+07]
E1 = -706.5543699015759  E_coul = 198.91463477915164
Extra cycle  E= -507.639735122424  delta_E=    0  |g|= 6.47e-09  |ddm|= 1.65e-08
    CPU time for scf_cycle      0.10 sec, wall time      0.11 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 56.39267772844179
E1 = -706.5543699015759  E_coul = 198.91463477915164
init E= -507.639735122424
    CPU time for initialize scf      0.12 sec, wall time      0.12 sec
  HOMO = -0.236417162512088  LUMO = 86.2822052381594
  mo_energy =
[-1.20270993e+02 -1.22542070e+01 -6.65485876e+00 -6.65485876e+00
 -6.65485876e+00 -1.16352261e+00 -2.36417163e-01 -2.36417163e-01
 -2.36417163e-01  8.62822052e+01  6.77278120e+02  3.93521473e+03
  2.96228565e+04  1.54739791e+05  6.64891791e+05  2.71962765e+06
  1.10459658e+07  4.65100870e+07]
E1 = -706.5543699021384  E_coul = 198.91463477971453
cycle= 1 E= -507.639735122424  delta_E= 3.98e-13  |g|= 1.68e-10  |ddm|= 2.55e-10
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -706.5543699021384  E_coul = 198.91463477971453
  HOMO = -0.236417162509382  LUMO = 86.2822052382211
  mo_energy =
[-1.20270993e+02 -1.22542070e+01 -6.65485876e+00 -6.65485876e+00
 -6.65485876e+00 -1.16352261e+00 -2.36417163e-01 -2.36417163e-01
 -2.36417163e-01  8.62822052e+01  6.77278120e+02  3.93521473e+03
  2.96228565e+04  1.54739791e+05  6.64891791e+05  2.71962765e+06
  1.10459658e+07  4.65100870e+07]
E1 = -706.5543699021472  E_coul = 198.9146347797235
Extra cycle  E= -507.639735122424  delta_E= 2.27e-13  |g|= 1.02e-10  |ddm|= 4.44e-12
    CPU time for scf_cycle      0.20 sec, wall time      0.20 sec
exp = [1.87954849e+07 4.69887121e+06 1.17471780e+06 2.93679448e+05
 7.34198735e+04 1.83524018e+04 2.23645150e+03 4.55945417e+02
 1.21556639e+02 3.75756344e+01 4.74103331e+00 3.91214993e-01
 8.59870940e+00 4.90863065e-01]
grad_E = [-1.14506386e-13  1.78048588e-11  6.92312959e-12  1.04169276e-08
 -3.47407697e-08  6.34223009e-06 -4.70029609e-06 -3.30434903e-05
  4.74739777e-05  3.76869015e-05 -3.12461397e-05  2.25581967e-04
  6.24060530e-05  4.64815918e-04]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="BFGS",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((14, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.6988712134173084e+06,1.1747178033543271e+06,2.9367945083858178e+05,7.3419865393677101e+04,1.8353927627435987e+04,2.2341424145819028e+03,4.5688904996449571e+02,1.2173317272260677e+02,3.7593061247508530e+01,4.7412722556720146e+00,3.9120358491841306e-01,8.5986297237246045e+00,4.9084868336327880e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "12s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:15:33 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  18795484.8537        1
[INPUT] 0    0    [1    /1   ]  4698871.21341        1
[INPUT] 0    0    [1    /1   ]  1174717.80335        1
[INPUT] 0    0    [1    /1   ]  293679.448421        1
[INPUT] 0    0    [1    /1   ]  73419.873243         1
[INPUT] 0    0    [1    /1   ]  18352.4540787        1
[INPUT] 0    0    [1    /1   ]  2236.37234182        1
[INPUT] 0    0    [1    /1   ]  455.977757466        1
[INPUT] 0    0    [1    /1   ]  121.563050855        1
[INPUT] 0    0    [1    /1   ]  37.5749012517        1
[INPUT] 0    0    [1    /1   ]  4.74110147457        1
[INPUT] 0    0    [1    /1   ]  0.391202481236       1
[INPUT] 1    0    [1    /1   ]  8.59860985163        1
[INPUT] 1    0    [1    /1   ]  0.490847394012       1

nuclear repulsion = 0
number of shells = 14
number of NR pGTOs = 18
number of NR cGTOs = 18
basis = {'Ar': [[0, [18795484.85366926, 1.0]], [0, [4698871.213413174, 1.0]], [0, [1174717.8033523473, 1.0]], [0, [293679.4484211619, 1.0]], [0, [73419.873243047, 1.0]], [0, [18352.454078704974, 1.0]], [0, [2236.3723418228747, 1.0]], [0, [455.97775746574496, 1.0]], [0, [121.56305085513615, 1.0]], [0, [37.57490125170619, 1.0]], [0, [4.7411014745742825, 1.0]], [0, [0.3912024812359525, 1.0]], [1, [8.598609851629103, 1.0]], [1, [0.49084739401172495, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [18795484.85366926]
bas 1, expnt(s) = [4698871.21341317]
bas 2, expnt(s) = [1174717.80335235]
bas 3, expnt(s) = [293679.44842116]
bas 4, expnt(s) = [73419.87324305]
bas 5, expnt(s) = [18352.4540787]
bas 6, expnt(s) = [2236.37234182]
bas 7, expnt(s) = [455.97775747]
bas 8, expnt(s) = [121.56305086]
bas 9, expnt(s) = [37.57490125]
bas 10, expnt(s) = [4.74110147]
bas 11, expnt(s) = [0.39120248]
bas 12, expnt(s) = [8.59860985]
bas 13, expnt(s) = [0.49084739]
CPU time:       114.22
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  0  1  1  0 42 43  0]
 [ 0  0  1  1  0 44 45  0]
 [ 0  0  1  1  0 46 47  0]
 [ 0  1  1  1  0 48 49  0]
 [ 0  1  1  1  0 50 51  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.87954849e+07 7.21199097e+05 4.69887121e+06 2.54982386e+05
 1.17471780e+06 9.01498871e+04 2.93679448e+05 3.18727981e+04
 7.34198732e+04 1.12687371e+04 1.83524541e+04 3.98369090e+03
 2.23637234e+03 8.21623985e+02 4.55977757e+02 2.49300281e+02
 1.21563051e+02 9.24945657e+01 3.75749013e+01 3.83432049e+01
 4.74110147e+00 8.11754047e+00 3.91202481e-01 1.24973008e+00
 8.59860985e+00 4.29555909e+01 4.90847394e-01 1.19858132e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.31998110857517
cond(S) = 56.39244122522376
E1 = -688.835523509654  E_coul = 184.91519594996407
init E= -503.92032755969
    CPU time for initialize scf      0.03 sec, wall time      0.03 sec
  HOMO = -0.68089816876612  LUMO = 84.9540555735646
  mo_energy =
[-1.21650494e+02 -1.32811980e+01 -7.62161770e+00 -7.62161770e+00
 -7.62161770e+00 -1.65070624e+00 -6.80898169e-01 -6.80898169e-01
 -6.80898169e-01  8.49540556e+01  6.75959005e+02  3.93401179e+03
  2.96217110e+04  1.54738795e+05  6.64890864e+05  2.71962674e+06
  1.10459649e+07  4.65100860e+07]
E1 = -706.5848176236798  E_coul = 198.94551123244472
cycle= 1 E= -507.639306391235  delta_E= -3.72  |g|= 0.318  |ddm|= 0.301
    CPU time for cycle= 1      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.42063
diis-c [-0.17692991  1.        ]
  HOMO = -0.236281428394066  LUMO = 86.2869593990872
  mo_energy =
[-1.20262420e+02 -1.22531014e+01 -6.65308405e+00 -6.65308405e+00
 -6.65308405e+00 -1.16349117e+00 -2.36281428e-01 -2.36281428e-01
 -2.36281428e-01  8.62869594e+01  6.77329747e+02  3.93526348e+03
  2.96227998e+04  1.54739812e+05  6.64891852e+05  2.71962771e+06
  1.10459658e+07  4.65100870e+07]
E1 = -706.5533314943534  E_coul = 198.91359642219624
cycle= 2 E= -507.639735072157  delta_E= -0.000429  |g|= 0.00475  |ddm|= 0.0143
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00504427
diis-c [-2.54001455e-05 -5.02129465e-04  1.00050213e+00]
  HOMO = -0.236457007825291  LUMO = 86.2834380233064
  mo_energy =
[-1.20271072e+02 -1.22542924e+01 -6.65492874e+00 -6.65492874e+00
 -6.65492874e+00 -1.16355606e+00 -2.36457008e-01 -2.36457008e-01
 -2.36457008e-01  8.62834380e+01  6.77319155e+02  3.93524758e+03
  2.96227805e+04  1.54739792e+05  6.64891831e+05  2.71962769e+06
  1.10459658e+07  4.65100870e+07]
E1 = -706.5528901685855  E_coul = 198.91315498601136
cycle= 3 E= -507.639735182574  delta_E= -1.1e-07  |g|= 9.49e-05  |ddm|= 0.000202
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.000126937
diis-c [-3.96681415e-10  3.34486601e-05 -2.54830897e-02  1.02544964e+00]
  HOMO = -0.236459226731461  LUMO = 86.2833932573769
  mo_energy =
[-1.20271185e+02 -1.22543082e+01 -6.65495578e+00 -6.65495578e+00
 -6.65495578e+00 -1.16355672e+00 -2.36459227e-01 -2.36459227e-01
 -2.36459227e-01  8.62833933e+01  6.77319038e+02  3.93524743e+03
  2.96227803e+04  1.54739792e+05  6.64891831e+05  2.71962769e+06
  1.10459658e+07  4.65100870e+07]
E1 = -706.5528829046846  E_coul = 198.91314772207028
cycle= 4 E= -507.639735182614  delta_E= -4.02e-11  |g|= 3.74e-07  |ddm|= 3.46e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.5528829046846  E_coul = 198.91314772207028
  HOMO = -0.236459210368919  LUMO = 86.2833935960931
  mo_energy =
[-1.20271184e+02 -1.22543081e+01 -6.65495562e+00 -6.65495562e+00
 -6.65495562e+00 -1.16355672e+00 -2.36459210e-01 -2.36459210e-01
 -2.36459210e-01  8.62833936e+01  6.77319039e+02  3.93524743e+03
  2.96227803e+04  1.54739792e+05  6.64891831e+05  2.71962769e+06
  1.10459658e+07  4.65100870e+07]
E1 = -706.5528829418255  E_coul = 198.91314775921177
Extra cycle  E= -507.639735182614  delta_E= 5.68e-13  |g|= 6.46e-09  |ddm|= 1.65e-08
    CPU time for scf_cycle      0.10 sec, wall time      0.11 sec
exp = [1.87954849e+07 4.69887121e+06 1.17471780e+06 2.93679448e+05
 7.34198732e+04 1.83524541e+04 2.23637234e+03 4.55977757e+02
 1.21563051e+02 3.75749013e+01 4.74110147e+00 3.91202481e-01
 8.59860985e+00 4.90847394e-01]
E = -507.6397351826137
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="BFGS",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((14, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.6988712134173084e+06,1.1747178033543271e+06,2.9367945083858178e+05,7.3419865393677101e+04,1.8353927627435987e+04,2.2341424145819028e+03,4.5688904996449571e+02,1.2173317272260677e+02,3.7593061247508530e+01,4.7412722556720146e+00,3.9120358491841306e-01,8.5986297237246045e+00,4.9084868336327880e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "12s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:15:34 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  18795484.8537        1
[INPUT] 0    0    [1    /1   ]  4698871.21341        1
[INPUT] 0    0    [1    /1   ]  1174717.80335        1
[INPUT] 0    0    [1    /1   ]  293679.448421        1
[INPUT] 0    0    [1    /1   ]  73419.873243         1
[INPUT] 0    0    [1    /1   ]  18352.4540787        1
[INPUT] 0    0    [1    /1   ]  2236.37234182        1
[INPUT] 0    0    [1    /1   ]  455.977757466        1
[INPUT] 0    0    [1    /1   ]  121.563050855        1
[INPUT] 0    0    [1    /1   ]  37.5749012517        1
[INPUT] 0    0    [1    /1   ]  4.74110147457        1
[INPUT] 0    0    [1    /1   ]  0.391202481236       1
[INPUT] 1    0    [1    /1   ]  8.59860985163        1
[INPUT] 1    0    [1    /1   ]  0.490847394012       1

nuclear repulsion = 0
number of shells = 14
number of NR pGTOs = 18
number of NR cGTOs = 18
basis = {'Ar': [[0, [18795484.85366926, 1.0]], [0, [4698871.213413174, 1.0]], [0, [1174717.8033523473, 1.0]], [0, [293679.4484211619, 1.0]], [0, [73419.873243047, 1.0]], [0, [18352.454078704974, 1.0]], [0, [2236.3723418228747, 1.0]], [0, [455.97775746574496, 1.0]], [0, [121.56305085513615, 1.0]], [0, [37.57490125170619, 1.0]], [0, [4.7411014745742825, 1.0]], [0, [0.3912024812359525, 1.0]], [1, [8.598609851629103, 1.0]], [1, [0.49084739401172495, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [18795484.85366926]
bas 1, expnt(s) = [4698871.21341317]
bas 2, expnt(s) = [1174717.80335235]
bas 3, expnt(s) = [293679.44842116]
bas 4, expnt(s) = [73419.87324305]
bas 5, expnt(s) = [18352.4540787]
bas 6, expnt(s) = [2236.37234182]
bas 7, expnt(s) = [455.97775747]
bas 8, expnt(s) = [121.56305086]
bas 9, expnt(s) = [37.57490125]
bas 10, expnt(s) = [4.74110147]
bas 11, expnt(s) = [0.39120248]
bas 12, expnt(s) = [8.59860985]
bas 13, expnt(s) = [0.49084739]
CPU time:       114.82
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  0  1  1  0 42 43  0]
 [ 0  0  1  1  0 44 45  0]
 [ 0  0  1  1  0 46 47  0]
 [ 0  1  1  1  0 48 49  0]
 [ 0  1  1  1  0 50 51  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.87954849e+07 7.21199097e+05 4.69887121e+06 2.54982386e+05
 1.17471780e+06 9.01498871e+04 2.93679448e+05 3.18727981e+04
 7.34198732e+04 1.12687371e+04 1.83524541e+04 3.98369090e+03
 2.23637234e+03 8.21623985e+02 4.55977757e+02 2.49300281e+02
 1.21563051e+02 9.24945657e+01 3.75749013e+01 3.83432049e+01
 4.74110147e+00 8.11754047e+00 3.91202481e-01 1.24973008e+00
 8.59860985e+00 4.29555909e+01 4.90847394e-01 1.19858132e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.31998110857517
cond(S) = 56.39244122522376
E1 = -688.835523509654  E_coul = 184.91519594996407
init E= -503.92032755969
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.68089816876612  LUMO = 84.9540555735646
  mo_energy =
[-1.21650494e+02 -1.32811980e+01 -7.62161770e+00 -7.62161770e+00
 -7.62161770e+00 -1.65070624e+00 -6.80898169e-01 -6.80898169e-01
 -6.80898169e-01  8.49540556e+01  6.75959005e+02  3.93401179e+03
  2.96217110e+04  1.54738795e+05  6.64890864e+05  2.71962674e+06
  1.10459649e+07  4.65100860e+07]
E1 = -706.5848176236798  E_coul = 198.94551123244472
cycle= 1 E= -507.639306391235  delta_E= -3.72  |g|= 0.318  |ddm|= 0.301
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.42063
diis-c [-0.17692991  1.        ]
  HOMO = -0.236281428394066  LUMO = 86.2869593990872
  mo_energy =
[-1.20262420e+02 -1.22531014e+01 -6.65308405e+00 -6.65308405e+00
 -6.65308405e+00 -1.16349117e+00 -2.36281428e-01 -2.36281428e-01
 -2.36281428e-01  8.62869594e+01  6.77329747e+02  3.93526348e+03
  2.96227998e+04  1.54739812e+05  6.64891852e+05  2.71962771e+06
  1.10459658e+07  4.65100870e+07]
E1 = -706.5533314943534  E_coul = 198.91359642219624
cycle= 2 E= -507.639735072157  delta_E= -0.000429  |g|= 0.00475  |ddm|= 0.0143
    CPU time for cycle= 2      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.00504427
diis-c [-2.54001455e-05 -5.02129465e-04  1.00050213e+00]
  HOMO = -0.236457007825291  LUMO = 86.2834380233064
  mo_energy =
[-1.20271072e+02 -1.22542924e+01 -6.65492874e+00 -6.65492874e+00
 -6.65492874e+00 -1.16355606e+00 -2.36457008e-01 -2.36457008e-01
 -2.36457008e-01  8.62834380e+01  6.77319155e+02  3.93524758e+03
  2.96227805e+04  1.54739792e+05  6.64891831e+05  2.71962769e+06
  1.10459658e+07  4.65100870e+07]
E1 = -706.5528901685855  E_coul = 198.91315498601136
cycle= 3 E= -507.639735182574  delta_E= -1.1e-07  |g|= 9.49e-05  |ddm|= 0.000202
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.000126937
diis-c [-3.96681415e-10  3.34486601e-05 -2.54830897e-02  1.02544964e+00]
  HOMO = -0.236459226731461  LUMO = 86.2833932573769
  mo_energy =
[-1.20271185e+02 -1.22543082e+01 -6.65495578e+00 -6.65495578e+00
 -6.65495578e+00 -1.16355672e+00 -2.36459227e-01 -2.36459227e-01
 -2.36459227e-01  8.62833933e+01  6.77319038e+02  3.93524743e+03
  2.96227803e+04  1.54739792e+05  6.64891831e+05  2.71962769e+06
  1.10459658e+07  4.65100870e+07]
E1 = -706.5528829046846  E_coul = 198.91314772207028
cycle= 4 E= -507.639735182614  delta_E= -4.02e-11  |g|= 3.74e-07  |ddm|= 3.46e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.5528829046846  E_coul = 198.91314772207028
  HOMO = -0.236459210368919  LUMO = 86.2833935960931
  mo_energy =
[-1.20271184e+02 -1.22543081e+01 -6.65495562e+00 -6.65495562e+00
 -6.65495562e+00 -1.16355672e+00 -2.36459210e-01 -2.36459210e-01
 -2.36459210e-01  8.62833936e+01  6.77319039e+02  3.93524743e+03
  2.96227803e+04  1.54739792e+05  6.64891831e+05  2.71962769e+06
  1.10459658e+07  4.65100870e+07]
E1 = -706.5528829418255  E_coul = 198.91314775921177
Extra cycle  E= -507.639735182614  delta_E= 5.68e-13  |g|= 6.46e-09  |ddm|= 1.65e-08
    CPU time for scf_cycle      0.10 sec, wall time      0.10 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 56.39244122522376
E1 = -706.5528829418255  E_coul = 198.91314775921177
init E= -507.639735182614
    CPU time for initialize scf      0.12 sec, wall time      0.12 sec
  HOMO = -0.236459210177423  LUMO = 86.2833936002328
  mo_energy =
[-1.20271184e+02 -1.22543081e+01 -6.65495561e+00 -6.65495561e+00
 -6.65495561e+00 -1.16355672e+00 -2.36459210e-01 -2.36459210e-01
 -2.36459210e-01  8.62833936e+01  6.77319039e+02  3.93524743e+03
  2.96227803e+04  1.54739792e+05  6.64891831e+05  2.71962769e+06
  1.10459658e+07  4.65100870e+07]
E1 = -706.5528829423887  E_coul = 198.91314775977457
cycle= 1 E= -507.639735182614  delta_E= -3.98e-13  |g|= 1.7e-10  |ddm|= 2.55e-10
    CPU time for cycle= 1      0.01 sec, wall time      0.02 sec
E1 = -706.5528829423887  E_coul = 198.91314775977457
  HOMO = -0.236459210174715  LUMO = 86.2833936002917
  mo_energy =
[-1.20271184e+02 -1.22543081e+01 -6.65495561e+00 -6.65495561e+00
 -6.65495561e+00 -1.16355672e+00 -2.36459210e-01 -2.36459210e-01
 -2.36459210e-01  8.62833936e+01  6.77319039e+02  3.93524743e+03
  2.96227803e+04  1.54739792e+05  6.64891831e+05  2.71962769e+06
  1.10459658e+07  4.65100870e+07]
E1 = -706.5528829423984  E_coul = 198.91314775978415
Extra cycle  E= -507.639735182614  delta_E= -1.14e-13  |g|= 1.62e-10  |ddm|= 4.56e-12
    CPU time for scf_cycle      0.19 sec, wall time      0.19 sec
exp = [1.87954849e+07 4.69887121e+06 1.17471780e+06 2.93679448e+05
 7.34198732e+04 1.83524541e+04 2.23637234e+03 4.55977757e+02
 1.21563051e+02 3.75749013e+01 4.74110147e+00 3.91202481e-01
 8.59860985e+00 4.90847394e-01]
grad_E = [-1.14405985e-13  1.78112769e-11  6.97618471e-12  1.04205845e-08
 -3.47240539e-08  6.34467691e-06 -4.84534791e-06 -3.23986301e-05
  5.15004558e-05  1.85989240e-05  3.35967643e-06 -2.44437619e-05
 -6.90375212e-06 -5.01353942e-05]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="BFGS",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((14, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.6988712134173084e+06,1.1747178033543271e+06,2.9367945083858178e+05,7.3419865393677101e+04,1.8353927627435987e+04,2.2341424145819028e+03,4.5688904996449571e+02,1.2173317272260677e+02,3.7593061247508530e+01,4.7412722556720146e+00,3.9120358491841306e-01,8.5986297237246045e+00,4.9084868336327880e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "12s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:15:37 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  18795484.8537        1
[INPUT] 0    0    [1    /1   ]  4698871.21341        1
[INPUT] 0    0    [1    /1   ]  1174717.80335        1
[INPUT] 0    0    [1    /1   ]  293679.448443        1
[INPUT] 0    0    [1    /1   ]  73419.8731714        1
[INPUT] 0    0    [1    /1   ]  18352.4675224        1
[INPUT] 0    0    [1    /1   ]  2236.35199184        1
[INPUT] 0    0    [1    /1   ]  455.986112087        1
[INPUT] 0    0    [1    /1   ]  121.564572799        1
[INPUT] 0    0    [1    /1   ]  37.5749455147        1
[INPUT] 0    0    [1    /1   ]  4.74110419051        1
[INPUT] 0    0    [1    /1   ]  0.391202379523       1
[INPUT] 1    0    [1    /1   ]  8.59860968792        1
[INPUT] 1    0    [1    /1   ]  0.490847319697       1

nuclear repulsion = 0
number of shells = 14
number of NR pGTOs = 18
number of NR cGTOs = 18
basis = {'Ar': [[0, [18795484.85366926, 1.0]], [0, [4698871.2134132115, 1.0]], [0, [1174717.8033523655, 1.0]], [0, [293679.4484432168, 1.0]], [0, [73419.87317143574, 1.0]], [0, [18352.467522371448, 1.0]], [0, [2236.351991841744, 1.0]], [0, [455.98611208741346, 1.0]], [0, [121.56457279873842, 1.0]], [0, [37.57494551471992, 1.0]], [0, [4.7411041905074125, 1.0]], [0, [0.3912023795230522, 1.0]], [1, [8.59860968791626, 1.0]], [1, [0.4908473196970269, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [18795484.85366926]
bas 1, expnt(s) = [4698871.21341321]
bas 2, expnt(s) = [1174717.80335237]
bas 3, expnt(s) = [293679.44844322]
bas 4, expnt(s) = [73419.87317144]
bas 5, expnt(s) = [18352.46752237]
bas 6, expnt(s) = [2236.35199184]
bas 7, expnt(s) = [455.98611209]
bas 8, expnt(s) = [121.5645728]
bas 9, expnt(s) = [37.57494551]
bas 10, expnt(s) = [4.74110419]
bas 11, expnt(s) = [0.39120238]
bas 12, expnt(s) = [8.59860969]
bas 13, expnt(s) = [0.49084732]
CPU time:       118.18
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  0  1  1  0 42 43  0]
 [ 0  0  1  1  0 44 45  0]
 [ 0  0  1  1  0 46 47  0]
 [ 0  1  1  1  0 48 49  0]
 [ 0  1  1  1  0 50 51  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.87954849e+07 7.21199097e+05 4.69887121e+06 2.54982386e+05
 1.17471780e+06 9.01498871e+04 2.93679448e+05 3.18727981e+04
 7.34198732e+04 1.12687371e+04 1.83524675e+04 3.98369309e+03
 2.23635199e+03 8.21618377e+02 4.55986112e+02 2.49303707e+02
 1.21564573e+02 9.24954342e+01 3.75749455e+01 3.83432388e+01
 4.74110419e+00 8.11754395e+00 3.91202380e-01 1.24972984e+00
 8.59860969e+00 4.29555899e+01 4.90847320e-01 1.19858109e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319981172758887
cond(S) = 56.39243370610253
E1 = -688.8354858416398  E_coul = 184.91519151395477
init E= -503.920294327685
    CPU time for initialize scf      0.03 sec, wall time      0.03 sec
  HOMO = -0.680898318838555  LUMO = 84.9547735787365
  mo_energy =
[-1.21650495e+02 -1.32811973e+01 -7.62161800e+00 -7.62161800e+00
 -7.62161800e+00 -1.65070628e+00 -6.80898319e-01 -6.80898319e-01
 -6.80898319e-01  8.49547736e+01  6.75970089e+02  3.93402070e+03
  2.96216918e+04  1.54738795e+05  6.64890874e+05  2.71962675e+06
  1.10459649e+07  4.65100861e+07]
E1 = -706.5848081696604  E_coul = 198.94550176743226
cycle= 1 E= -507.639306402228  delta_E= -3.72  |g|= 0.318  |ddm|= 0.301
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.420629
diis-c [-0.1769286  1.       ]
  HOMO = -0.236281648220185  LUMO = 86.2876776048679
  mo_energy =
[-1.20262423e+02 -1.22531008e+01 -6.65308458e+00 -6.65308458e+00
 -6.65308458e+00 -1.16349126e+00 -2.36281648e-01 -2.36281648e-01
 -2.36281648e-01  8.62876776e+01  6.77340829e+02  3.93527238e+03
  2.96227806e+04  1.54739813e+05  6.64891862e+05  2.71962772e+06
  1.10459658e+07  4.65100870e+07]
E1 = -706.5533223739709  E_coul = 198.91358729585116
cycle= 2 E= -507.63973507812  delta_E= -0.000429  |g|= 0.00475  |ddm|= 0.0143
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00504427
diis-c [-2.54000881e-05 -5.02132478e-04  1.00050213e+00]
  HOMO = -0.236457225108685  LUMO = 86.2841562417485
  mo_energy =
[-1.20271075e+02 -1.22542919e+01 -6.65492924e+00 -6.65492924e+00
 -6.65492924e+00 -1.16355615e+00 -2.36457225e-01 -2.36457225e-01
 -2.36457225e-01  8.62841562e+01  6.77330237e+02  3.93525648e+03
  2.96227613e+04  1.54739793e+05  6.64891842e+05  2.71962770e+06
  1.10459658e+07  4.65100870e+07]
E1 = -706.5528810557987  E_coul = 198.91314586726378
cycle= 3 E= -507.639735188535  delta_E= -1.1e-07  |g|= 9.49e-05  |ddm|= 0.000202
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.000126936
diis-c [-3.96677581e-10  3.34480459e-05 -2.54829585e-02  1.02544951e+00]
  HOMO = -0.236459443969399  LUMO = 86.2841114764163
  mo_energy =
[-1.20271188e+02 -1.22543077e+01 -6.65495628e+00 -6.65495628e+00
 -6.65495628e+00 -1.16355681e+00 -2.36459444e-01 -2.36459444e-01
 -2.36459444e-01  8.62841115e+01  6.77330120e+02  3.93525633e+03
  2.96227612e+04  1.54739793e+05  6.64891842e+05  2.71962770e+06
  1.10459658e+07  4.65100870e+07]
E1 = -706.552873792066  E_coul = 198.91313860349163
cycle= 4 E= -507.639735188574  delta_E= -3.94e-11  |g|= 3.74e-07  |ddm|= 3.46e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.552873792066  E_coul = 198.91313860349163
  HOMO = -0.236459427607235  LUMO = 86.284111815126
  mo_energy =
[-1.20271187e+02 -1.22543076e+01 -6.65495612e+00 -6.65495612e+00
 -6.65495612e+00 -1.16355680e+00 -2.36459428e-01 -2.36459428e-01
 -2.36459428e-01  8.62841118e+01  6.77330121e+02  3.93525633e+03
  2.96227612e+04  1.54739793e+05  6.64891842e+05  2.71962770e+06
  1.10459658e+07  4.65100870e+07]
E1 = -706.5528738292069  E_coul = 198.91313864063244
Extra cycle  E= -507.639735188574  delta_E= -1.14e-13  |g|= 6.47e-09  |ddm|= 1.65e-08
    CPU time for scf_cycle      0.10 sec, wall time      0.11 sec
exp = [1.87954849e+07 4.69887121e+06 1.17471780e+06 2.93679448e+05
 7.34198732e+04 1.83524675e+04 2.23635199e+03 4.55986112e+02
 1.21564573e+02 3.75749455e+01 4.74110419e+00 3.91202380e-01
 8.59860969e+00 4.90847320e-01]
E = -507.63973518857443
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="BFGS",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((14, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.6988712134173084e+06,1.1747178033543271e+06,2.9367945083858178e+05,7.3419865393677101e+04,1.8353927627435987e+04,2.2341424145819028e+03,4.5688904996449571e+02,1.2173317272260677e+02,3.7593061247508530e+01,4.7412722556720146e+00,3.9120358491841306e-01,8.5986297237246045e+00,4.9084868336327880e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "12s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:15:38 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  18795484.8537        1
[INPUT] 0    0    [1    /1   ]  4698871.21341        1
[INPUT] 0    0    [1    /1   ]  1174717.80335        1
[INPUT] 0    0    [1    /1   ]  293679.448443        1
[INPUT] 0    0    [1    /1   ]  73419.8731714        1
[INPUT] 0    0    [1    /1   ]  18352.4675224        1
[INPUT] 0    0    [1    /1   ]  2236.35199184        1
[INPUT] 0    0    [1    /1   ]  455.986112087        1
[INPUT] 0    0    [1    /1   ]  121.564572799        1
[INPUT] 0    0    [1    /1   ]  37.5749455147        1
[INPUT] 0    0    [1    /1   ]  4.74110419051        1
[INPUT] 0    0    [1    /1   ]  0.391202379523       1
[INPUT] 1    0    [1    /1   ]  8.59860968792        1
[INPUT] 1    0    [1    /1   ]  0.490847319697       1

nuclear repulsion = 0
number of shells = 14
number of NR pGTOs = 18
number of NR cGTOs = 18
basis = {'Ar': [[0, [18795484.85366926, 1.0]], [0, [4698871.2134132115, 1.0]], [0, [1174717.8033523655, 1.0]], [0, [293679.4484432168, 1.0]], [0, [73419.87317143574, 1.0]], [0, [18352.467522371448, 1.0]], [0, [2236.351991841744, 1.0]], [0, [455.98611208741346, 1.0]], [0, [121.56457279873842, 1.0]], [0, [37.57494551471992, 1.0]], [0, [4.7411041905074125, 1.0]], [0, [0.3912023795230522, 1.0]], [1, [8.59860968791626, 1.0]], [1, [0.4908473196970269, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [18795484.85366926]
bas 1, expnt(s) = [4698871.21341321]
bas 2, expnt(s) = [1174717.80335237]
bas 3, expnt(s) = [293679.44844322]
bas 4, expnt(s) = [73419.87317144]
bas 5, expnt(s) = [18352.46752237]
bas 6, expnt(s) = [2236.35199184]
bas 7, expnt(s) = [455.98611209]
bas 8, expnt(s) = [121.5645728]
bas 9, expnt(s) = [37.57494551]
bas 10, expnt(s) = [4.74110419]
bas 11, expnt(s) = [0.39120238]
bas 12, expnt(s) = [8.59860969]
bas 13, expnt(s) = [0.49084732]
CPU time:       118.78
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  0  1  1  0 42 43  0]
 [ 0  0  1  1  0 44 45  0]
 [ 0  0  1  1  0 46 47  0]
 [ 0  1  1  1  0 48 49  0]
 [ 0  1  1  1  0 50 51  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.87954849e+07 7.21199097e+05 4.69887121e+06 2.54982386e+05
 1.17471780e+06 9.01498871e+04 2.93679448e+05 3.18727981e+04
 7.34198732e+04 1.12687371e+04 1.83524675e+04 3.98369309e+03
 2.23635199e+03 8.21618377e+02 4.55986112e+02 2.49303707e+02
 1.21564573e+02 9.24954342e+01 3.75749455e+01 3.83432388e+01
 4.74110419e+00 8.11754395e+00 3.91202380e-01 1.24972984e+00
 8.59860969e+00 4.29555899e+01 4.90847320e-01 1.19858109e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319981172758887
cond(S) = 56.39243370610253
E1 = -688.8354858416398  E_coul = 184.91519151395477
init E= -503.920294327685
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.680898318838555  LUMO = 84.9547735787365
  mo_energy =
[-1.21650495e+02 -1.32811973e+01 -7.62161800e+00 -7.62161800e+00
 -7.62161800e+00 -1.65070628e+00 -6.80898319e-01 -6.80898319e-01
 -6.80898319e-01  8.49547736e+01  6.75970089e+02  3.93402070e+03
  2.96216918e+04  1.54738795e+05  6.64890874e+05  2.71962675e+06
  1.10459649e+07  4.65100861e+07]
E1 = -706.5848081696604  E_coul = 198.94550176743226
cycle= 1 E= -507.639306402228  delta_E= -3.72  |g|= 0.318  |ddm|= 0.301
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.420629
diis-c [-0.1769286  1.       ]
  HOMO = -0.236281648220185  LUMO = 86.2876776048679
  mo_energy =
[-1.20262423e+02 -1.22531008e+01 -6.65308458e+00 -6.65308458e+00
 -6.65308458e+00 -1.16349126e+00 -2.36281648e-01 -2.36281648e-01
 -2.36281648e-01  8.62876776e+01  6.77340829e+02  3.93527238e+03
  2.96227806e+04  1.54739813e+05  6.64891862e+05  2.71962772e+06
  1.10459658e+07  4.65100870e+07]
E1 = -706.5533223739709  E_coul = 198.91358729585116
cycle= 2 E= -507.63973507812  delta_E= -0.000429  |g|= 0.00475  |ddm|= 0.0143
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00504427
diis-c [-2.54000881e-05 -5.02132478e-04  1.00050213e+00]
  HOMO = -0.236457225108685  LUMO = 86.2841562417485
  mo_energy =
[-1.20271075e+02 -1.22542919e+01 -6.65492924e+00 -6.65492924e+00
 -6.65492924e+00 -1.16355615e+00 -2.36457225e-01 -2.36457225e-01
 -2.36457225e-01  8.62841562e+01  6.77330237e+02  3.93525648e+03
  2.96227613e+04  1.54739793e+05  6.64891842e+05  2.71962770e+06
  1.10459658e+07  4.65100870e+07]
E1 = -706.5528810557987  E_coul = 198.91314586726378
cycle= 3 E= -507.639735188535  delta_E= -1.1e-07  |g|= 9.49e-05  |ddm|= 0.000202
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.000126936
diis-c [-3.96677581e-10  3.34480459e-05 -2.54829585e-02  1.02544951e+00]
  HOMO = -0.236459443969399  LUMO = 86.2841114764163
  mo_energy =
[-1.20271188e+02 -1.22543077e+01 -6.65495628e+00 -6.65495628e+00
 -6.65495628e+00 -1.16355681e+00 -2.36459444e-01 -2.36459444e-01
 -2.36459444e-01  8.62841115e+01  6.77330120e+02  3.93525633e+03
  2.96227612e+04  1.54739793e+05  6.64891842e+05  2.71962770e+06
  1.10459658e+07  4.65100870e+07]
E1 = -706.552873792066  E_coul = 198.91313860349163
cycle= 4 E= -507.639735188574  delta_E= -3.94e-11  |g|= 3.74e-07  |ddm|= 3.46e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.552873792066  E_coul = 198.91313860349163
  HOMO = -0.236459427607235  LUMO = 86.284111815126
  mo_energy =
[-1.20271187e+02 -1.22543076e+01 -6.65495612e+00 -6.65495612e+00
 -6.65495612e+00 -1.16355680e+00 -2.36459428e-01 -2.36459428e-01
 -2.36459428e-01  8.62841118e+01  6.77330121e+02  3.93525633e+03
  2.96227612e+04  1.54739793e+05  6.64891842e+05  2.71962770e+06
  1.10459658e+07  4.65100870e+07]
E1 = -706.5528738292069  E_coul = 198.91313864063244
Extra cycle  E= -507.639735188574  delta_E= -1.14e-13  |g|= 6.47e-09  |ddm|= 1.65e-08
    CPU time for scf_cycle      0.10 sec, wall time      0.10 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 56.39243370610253
E1 = -706.5528738292069  E_coul = 198.91313864063244
init E= -507.639735188574
    CPU time for initialize scf      0.12 sec, wall time      0.12 sec
  HOMO = -0.236459427415743  LUMO = 86.2841118192673
  mo_energy =
[-1.20271187e+02 -1.22543076e+01 -6.65495612e+00 -6.65495612e+00
 -6.65495612e+00 -1.16355680e+00 -2.36459427e-01 -2.36459427e-01
 -2.36459427e-01  8.62841118e+01  6.77330121e+02  3.93525633e+03
  2.96227612e+04  1.54739793e+05  6.64891842e+05  2.71962770e+06
  1.10459658e+07  4.65100870e+07]
E1 = -706.5528738297696  E_coul = 198.9131386411952
cycle= 1 E= -507.639735188574  delta_E=    0  |g|= 1.42e-10  |ddm|= 2.55e-10
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -706.5528738297696  E_coul = 198.9131386411952
  HOMO = -0.236459427413039  LUMO = 86.2841118193262
  mo_energy =
[-1.20271187e+02 -1.22543076e+01 -6.65495612e+00 -6.65495612e+00
 -6.65495612e+00 -1.16355680e+00 -2.36459427e-01 -2.36459427e-01
 -2.36459427e-01  8.62841118e+01  6.77330121e+02  3.93525633e+03
  2.96227612e+04  1.54739793e+05  6.64891842e+05  2.71962770e+06
  1.10459658e+07  4.65100870e+07]
E1 = -706.55287382978  E_coul = 198.913138641205
Extra cycle  E= -507.639735188575  delta_E= -5.12e-13  |g|= 2.16e-10  |ddm|= 4.55e-12
    CPU time for scf_cycle      0.19 sec, wall time      0.19 sec
exp = [1.87954849e+07 4.69887121e+06 1.17471780e+06 2.93679448e+05
 7.34198732e+04 1.83524675e+04 2.23635199e+03 4.55986112e+02
 1.21564573e+02 3.75749455e+01 4.74110419e+00 3.91202380e-01
 8.59860969e+00 4.90847320e-01]
grad_E = [-1.14378108e-13  1.78130586e-11  6.99091541e-12  1.04215998e-08
 -3.47194271e-08  6.34536022e-06 -4.88849368e-06 -3.21021555e-05
  5.14318611e-05  1.70616741e-05  3.54954908e-06 -2.56739467e-05
 -7.16319833e-06 -5.28305013e-05]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="BFGS",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((14, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.6988712134173084e+06,1.1747178033543271e+06,2.9367945083858178e+05,7.3419865393677101e+04,1.8353927627435987e+04,2.2341424145819028e+03,4.5688904996449571e+02,1.2173317272260677e+02,3.7593061247508530e+01,4.7412722556720146e+00,3.9120358491841306e-01,8.5986297237246045e+00,4.9084868336327880e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "12s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:15:41 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  18795484.8537        1
[INPUT] 0    0    [1    /1   ]  4698871.21341        1
[INPUT] 0    0    [1    /1   ]  1174717.80335        1
[INPUT] 0    0    [1    /1   ]  293679.448466        1
[INPUT] 0    0    [1    /1   ]  73419.8730966        1
[INPUT] 0    0    [1    /1   ]  18352.481568         1
[INPUT] 0    0    [1    /1   ]  2236.33072198        1
[INPUT] 0    0    [1    /1   ]  455.994907902        1
[INPUT] 0    0    [1    /1   ]  121.56606166         1
[INPUT] 0    0    [1    /1   ]  37.5749857638        1
[INPUT] 0    0    [1    /1   ]  4.74110533395        1
[INPUT] 0    0    [1    /1   ]  0.391202627237       1
[INPUT] 1    0    [1    /1   ]  8.59861248911        1
[INPUT] 1    0    [1    /1   ]  0.490847700975       1

nuclear repulsion = 0
number of shells = 14
number of NR pGTOs = 18
number of NR cGTOs = 18
basis = {'Ar': [[0, [18795484.85366926, 1.0]], [0, [4698871.213413251, 1.0]], [0, [1174717.8033523844, 1.0]], [0, [293679.4484662592, 1.0]], [0, [73419.87309661976, 1.0]], [0, [18352.481567982555, 1.0]], [0, [2236.330721980877, 1.0]], [0, [455.99490790249985, 1.0]], [0, [121.56606165974964, 1.0]], [0, [37.57498576383024, 1.0]], [0, [4.741105333945342, 1.0]], [0, [0.39120262723693144, 1.0]], [1, [8.59861248910719, 1.0]], [1, [0.49084770097453967, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [18795484.85366926]
bas 1, expnt(s) = [4698871.21341325]
bas 2, expnt(s) = [1174717.80335238]
bas 3, expnt(s) = [293679.44846626]
bas 4, expnt(s) = [73419.87309662]
bas 5, expnt(s) = [18352.48156798]
bas 6, expnt(s) = [2236.33072198]
bas 7, expnt(s) = [455.9949079]
bas 8, expnt(s) = [121.56606166]
bas 9, expnt(s) = [37.57498576]
bas 10, expnt(s) = [4.74110533]
bas 11, expnt(s) = [0.39120263]
bas 12, expnt(s) = [8.59861249]
bas 13, expnt(s) = [0.4908477]
CPU time:       122.11
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  0  1  1  0 42 43  0]
 [ 0  0  1  1  0 44 45  0]
 [ 0  0  1  1  0 46 47  0]
 [ 0  1  1  1  0 48 49  0]
 [ 0  1  1  1  0 50 51  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.87954849e+07 7.21199097e+05 4.69887121e+06 2.54982386e+05
 1.17471780e+06 9.01498871e+04 2.93679448e+05 3.18727981e+04
 7.34198731e+04 1.12687371e+04 1.83524816e+04 3.98369538e+03
 2.23633072e+03 8.21612517e+02 4.55994908e+02 2.49307314e+02
 1.21566062e+02 9.24962838e+01 3.75749858e+01 3.83432696e+01
 4.74110533e+00 8.11754542e+00 3.91202627e-01 1.24973043e+00
 8.59861249e+00 4.29556074e+01 4.90847701e-01 1.19858226e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319980624103817
cond(S) = 56.39242069862832
E1 = -688.8354774329715  E_coul = 184.91521907482013
init E= -503.920258358151
    CPU time for initialize scf      0.03 sec, wall time      0.03 sec
  HOMO = -0.680897790966393  LUMO = 84.9554643414792
  mo_energy =
[-1.21650493e+02 -1.32811940e+01 -7.62161618e+00 -7.62161618e+00
 -7.62161618e+00 -1.65070581e+00 -6.80897791e-01 -6.80897791e-01
 -6.80897791e-01  8.49554643e+01  6.75981428e+02  3.93402981e+03
  2.96216717e+04  1.54738796e+05  6.64890885e+05  2.71962676e+06
  1.10459649e+07  4.65100861e+07]
E1 = -706.5848412544465  E_coul = 198.9455348380175
cycle= 1 E= -507.639306416429  delta_E= -3.72  |g|= 0.318  |ddm|= 0.301
    CPU time for cycle= 1      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.420627
diis-c [-0.17692726  1.        ]
  HOMO = -0.236280654147696  LUMO = 86.2883693359283
  mo_energy =
[-1.20262421e+02 -1.22530971e+01 -6.65308233e+00 -6.65308233e+00
 -6.65308233e+00 -1.16349034e+00 -2.36280654e-01 -2.36280654e-01
 -2.36280654e-01  8.62883693e+01  6.77352166e+02  3.93528150e+03
  2.96227604e+04  1.54739813e+05  6.64891873e+05  2.71962774e+06
  1.10459658e+07  4.65100870e+07]
E1 = -706.5533557444538  E_coul = 198.91362065608593
cycle= 2 E= -507.639735088368  delta_E= -0.000429  |g|= 0.00475  |ddm|= 0.0143
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00504427
diis-c [-2.54001176e-05 -5.02141941e-04  1.00050214e+00]
  HOMO = -0.236456229091276  LUMO = 86.2848479813904
  mo_energy =
[-1.20271072e+02 -1.22542881e+01 -6.65492697e+00 -6.65492697e+00
 -6.65492697e+00 -1.16355524e+00 -2.36456229e-01 -2.36456229e-01
 -2.36456229e-01  8.62848480e+01  6.77341574e+02  3.93526559e+03
  2.96227412e+04  1.54739793e+05  6.64891853e+05  2.71962772e+06
  1.10459658e+07  4.65100870e+07]
E1 = -706.5529144330266  E_coul = 198.9131792342457
cycle= 3 E= -507.639735198781  delta_E= -1.1e-07  |g|= 9.49e-05  |ddm|= 0.000202
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.000126936
diis-c [-3.96676146e-10  3.34472144e-05 -2.54828205e-02  1.02544937e+00]
  HOMO = -0.236458447914512  LUMO = 86.2848032166116
  mo_energy =
[-1.20271186e+02 -1.22543040e+01 -6.65495401e+00 -6.65495401e+00
 -6.65495401e+00 -1.16355589e+00 -2.36458448e-01 -2.36458448e-01
 -2.36458448e-01  8.62848032e+01  6.77341456e+02  3.93526544e+03
  2.96227410e+04  1.54739793e+05  6.64891853e+05  2.71962772e+06
  1.10459658e+07  4.65100870e+07]
E1 = -706.5529071694492  E_coul = 198.91317197062853
cycle= 4 E= -507.639735198821  delta_E= -3.98e-11  |g|= 3.74e-07  |ddm|= 3.46e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.5529071694492  E_coul = 198.91317197062853
  HOMO = -0.236458431552648  LUMO = 86.2848035553179
  mo_energy =
[-1.20271185e+02 -1.22543038e+01 -6.65495385e+00 -6.65495385e+00
 -6.65495385e+00 -1.16355589e+00 -2.36458432e-01 -2.36458432e-01
 -2.36458432e-01  8.62848036e+01  6.77341457e+02  3.93526545e+03
  2.96227410e+04  1.54739793e+05  6.64891853e+05  2.71962772e+06
  1.10459658e+07  4.65100870e+07]
E1 = -706.5529072065893  E_coul = 198.9131720077687
Extra cycle  E= -507.639735198821  delta_E= 5.68e-14  |g|= 6.47e-09  |ddm|= 1.65e-08
    CPU time for scf_cycle      0.10 sec, wall time      0.11 sec
exp = [1.87954849e+07 4.69887121e+06 1.17471780e+06 2.93679448e+05
 7.34198731e+04 1.83524816e+04 2.23633072e+03 4.55994908e+02
 1.21566062e+02 3.75749858e+01 4.74110533e+00 3.91202627e-01
 8.59861249e+00 4.90847701e-01]
E = -507.63973519882063
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="BFGS",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((14, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.6988712134173084e+06,1.1747178033543271e+06,2.9367945083858178e+05,7.3419865393677101e+04,1.8353927627435987e+04,2.2341424145819028e+03,4.5688904996449571e+02,1.2173317272260677e+02,3.7593061247508530e+01,4.7412722556720146e+00,3.9120358491841306e-01,8.5986297237246045e+00,4.9084868336327880e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "12s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:15:42 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  18795484.8537        1
[INPUT] 0    0    [1    /1   ]  4698871.21341        1
[INPUT] 0    0    [1    /1   ]  1174717.80335        1
[INPUT] 0    0    [1    /1   ]  293679.448466        1
[INPUT] 0    0    [1    /1   ]  73419.8730966        1
[INPUT] 0    0    [1    /1   ]  18352.481568         1
[INPUT] 0    0    [1    /1   ]  2236.33072198        1
[INPUT] 0    0    [1    /1   ]  455.994907902        1
[INPUT] 0    0    [1    /1   ]  121.56606166         1
[INPUT] 0    0    [1    /1   ]  37.5749857638        1
[INPUT] 0    0    [1    /1   ]  4.74110533395        1
[INPUT] 0    0    [1    /1   ]  0.391202627237       1
[INPUT] 1    0    [1    /1   ]  8.59861248911        1
[INPUT] 1    0    [1    /1   ]  0.490847700975       1

nuclear repulsion = 0
number of shells = 14
number of NR pGTOs = 18
number of NR cGTOs = 18
basis = {'Ar': [[0, [18795484.85366926, 1.0]], [0, [4698871.213413251, 1.0]], [0, [1174717.8033523844, 1.0]], [0, [293679.4484662592, 1.0]], [0, [73419.87309661976, 1.0]], [0, [18352.481567982555, 1.0]], [0, [2236.330721980877, 1.0]], [0, [455.99490790249985, 1.0]], [0, [121.56606165974964, 1.0]], [0, [37.57498576383024, 1.0]], [0, [4.741105333945342, 1.0]], [0, [0.39120262723693144, 1.0]], [1, [8.59861248910719, 1.0]], [1, [0.49084770097453967, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [18795484.85366926]
bas 1, expnt(s) = [4698871.21341325]
bas 2, expnt(s) = [1174717.80335238]
bas 3, expnt(s) = [293679.44846626]
bas 4, expnt(s) = [73419.87309662]
bas 5, expnt(s) = [18352.48156798]
bas 6, expnt(s) = [2236.33072198]
bas 7, expnt(s) = [455.9949079]
bas 8, expnt(s) = [121.56606166]
bas 9, expnt(s) = [37.57498576]
bas 10, expnt(s) = [4.74110533]
bas 11, expnt(s) = [0.39120263]
bas 12, expnt(s) = [8.59861249]
bas 13, expnt(s) = [0.4908477]
CPU time:       122.73
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  0  1  1  0 42 43  0]
 [ 0  0  1  1  0 44 45  0]
 [ 0  0  1  1  0 46 47  0]
 [ 0  1  1  1  0 48 49  0]
 [ 0  1  1  1  0 50 51  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.87954849e+07 7.21199097e+05 4.69887121e+06 2.54982386e+05
 1.17471780e+06 9.01498871e+04 2.93679448e+05 3.18727981e+04
 7.34198731e+04 1.12687371e+04 1.83524816e+04 3.98369538e+03
 2.23633072e+03 8.21612517e+02 4.55994908e+02 2.49307314e+02
 1.21566062e+02 9.24962838e+01 3.75749858e+01 3.83432696e+01
 4.74110533e+00 8.11754542e+00 3.91202627e-01 1.24973043e+00
 8.59861249e+00 4.29556074e+01 4.90847701e-01 1.19858226e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319980624103817
cond(S) = 56.39242069862832
E1 = -688.8354774329715  E_coul = 184.91521907482013
init E= -503.920258358151
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.680897790966393  LUMO = 84.9554643414792
  mo_energy =
[-1.21650493e+02 -1.32811940e+01 -7.62161618e+00 -7.62161618e+00
 -7.62161618e+00 -1.65070581e+00 -6.80897791e-01 -6.80897791e-01
 -6.80897791e-01  8.49554643e+01  6.75981428e+02  3.93402981e+03
  2.96216717e+04  1.54738796e+05  6.64890885e+05  2.71962676e+06
  1.10459649e+07  4.65100861e+07]
E1 = -706.5848412544465  E_coul = 198.9455348380175
cycle= 1 E= -507.639306416429  delta_E= -3.72  |g|= 0.318  |ddm|= 0.301
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.420627
diis-c [-0.17692726  1.        ]
  HOMO = -0.236280654147696  LUMO = 86.2883693359283
  mo_energy =
[-1.20262421e+02 -1.22530971e+01 -6.65308233e+00 -6.65308233e+00
 -6.65308233e+00 -1.16349034e+00 -2.36280654e-01 -2.36280654e-01
 -2.36280654e-01  8.62883693e+01  6.77352166e+02  3.93528150e+03
  2.96227604e+04  1.54739813e+05  6.64891873e+05  2.71962774e+06
  1.10459658e+07  4.65100870e+07]
E1 = -706.5533557444538  E_coul = 198.91362065608593
cycle= 2 E= -507.639735088368  delta_E= -0.000429  |g|= 0.00475  |ddm|= 0.0143
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00504427
diis-c [-2.54001176e-05 -5.02141941e-04  1.00050214e+00]
  HOMO = -0.236456229091276  LUMO = 86.2848479813904
  mo_energy =
[-1.20271072e+02 -1.22542881e+01 -6.65492697e+00 -6.65492697e+00
 -6.65492697e+00 -1.16355524e+00 -2.36456229e-01 -2.36456229e-01
 -2.36456229e-01  8.62848480e+01  6.77341574e+02  3.93526559e+03
  2.96227412e+04  1.54739793e+05  6.64891853e+05  2.71962772e+06
  1.10459658e+07  4.65100870e+07]
E1 = -706.5529144330266  E_coul = 198.9131792342457
cycle= 3 E= -507.639735198781  delta_E= -1.1e-07  |g|= 9.49e-05  |ddm|= 0.000202
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.000126936
diis-c [-3.96676146e-10  3.34472144e-05 -2.54828205e-02  1.02544937e+00]
  HOMO = -0.236458447914512  LUMO = 86.2848032166116
  mo_energy =
[-1.20271186e+02 -1.22543040e+01 -6.65495401e+00 -6.65495401e+00
 -6.65495401e+00 -1.16355589e+00 -2.36458448e-01 -2.36458448e-01
 -2.36458448e-01  8.62848032e+01  6.77341456e+02  3.93526544e+03
  2.96227410e+04  1.54739793e+05  6.64891853e+05  2.71962772e+06
  1.10459658e+07  4.65100870e+07]
E1 = -706.5529071694492  E_coul = 198.91317197062853
cycle= 4 E= -507.639735198821  delta_E= -3.98e-11  |g|= 3.74e-07  |ddm|= 3.46e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.5529071694492  E_coul = 198.91317197062853
  HOMO = -0.236458431552648  LUMO = 86.2848035553179
  mo_energy =
[-1.20271185e+02 -1.22543038e+01 -6.65495385e+00 -6.65495385e+00
 -6.65495385e+00 -1.16355589e+00 -2.36458432e-01 -2.36458432e-01
 -2.36458432e-01  8.62848036e+01  6.77341457e+02  3.93526545e+03
  2.96227410e+04  1.54739793e+05  6.64891853e+05  2.71962772e+06
  1.10459658e+07  4.65100870e+07]
E1 = -706.5529072065893  E_coul = 198.9131720077687
Extra cycle  E= -507.639735198821  delta_E= 5.68e-14  |g|= 6.47e-09  |ddm|= 1.65e-08
    CPU time for scf_cycle      0.10 sec, wall time      0.10 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 56.39242069862832
E1 = -706.5529072065893  E_coul = 198.9131720077687
init E= -507.639735198821
    CPU time for initialize scf      0.12 sec, wall time      0.12 sec
  HOMO = -0.236458431361156  LUMO = 86.2848035594592
  mo_energy =
[-1.20271185e+02 -1.22543038e+01 -6.65495384e+00 -6.65495384e+00
 -6.65495384e+00 -1.16355589e+00 -2.36458431e-01 -2.36458431e-01
 -2.36458431e-01  8.62848036e+01  6.77341457e+02  3.93526545e+03
  2.96227410e+04  1.54739793e+05  6.64891853e+05  2.71962772e+06
  1.10459658e+07  4.65100870e+07]
E1 = -706.5529072071519  E_coul = 198.91317200833132
cycle= 1 E= -507.639735198821  delta_E= 1.14e-13  |g|= 1.49e-10  |ddm|= 2.55e-10
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -706.5529072071519  E_coul = 198.91317200833132
  HOMO = -0.236458431358453  LUMO = 86.2848035595192
  mo_energy =
[-1.20271185e+02 -1.22543038e+01 -6.65495384e+00 -6.65495384e+00
 -6.65495384e+00 -1.16355589e+00 -2.36458431e-01 -2.36458431e-01
 -2.36458431e-01  8.62848036e+01  6.77341457e+02  3.93526545e+03
  2.96227410e+04  1.54739793e+05  6.64891853e+05  2.71962772e+06
  1.10459658e+07  4.65100870e+07]
E1 = -706.5529072071612  E_coul = 198.91317200834075
Extra cycle  E= -507.63973519882  delta_E= 1.14e-13  |g|= 7.71e-11  |ddm|= 4.54e-12
    CPU time for scf_cycle      0.19 sec, wall time      0.19 sec
exp = [1.87954849e+07 4.69887121e+06 1.17471780e+06 2.93679448e+05
 7.34198731e+04 1.83524816e+04 2.23633072e+03 4.55994908e+02
 1.21566062e+02 3.75749858e+01 4.74110533e+00 3.91202627e-01
 8.59861249e+00 4.90847701e-01]
grad_E = [-1.14348386e-13  1.78149578e-11  7.00661954e-12  1.04226821e-08
 -3.47144978e-08  6.34608961e-06 -4.93516101e-06 -3.17630541e-05
  5.11930809e-05  1.57906081e-05  2.73717419e-06 -1.96747844e-05
 -5.39502058e-06 -4.06474593e-05]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="BFGS",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((14, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.6988712134173084e+06,1.1747178033543271e+06,2.9367945083858178e+05,7.3419865393677101e+04,1.8353927627435987e+04,2.2341424145819028e+03,4.5688904996449571e+02,1.2173317272260677e+02,3.7593061247508530e+01,4.7412722556720146e+00,3.9120358491841306e-01,8.5986297237246045e+00,4.9084868336327880e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "12s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:15:45 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  18795484.8537        1
[INPUT] 0    0    [1    /1   ]  4698871.21341        1
[INPUT] 0    0    [1    /1   ]  1174717.80335        1
[INPUT] 0    0    [1    /1   ]  293679.448491        1
[INPUT] 0    0    [1    /1   ]  73419.8730178        1
[INPUT] 0    0    [1    /1   ]  18352.4963636        1
[INPUT] 0    0    [1    /1   ]  2236.30830245        1
[INPUT] 0    0    [1    /1   ]  456.004279949        1
[INPUT] 0    0    [1    /1   ]  121.567480382        1
[INPUT] 0    0    [1    /1   ]  37.5749767973        1
[INPUT] 0    0    [1    /1   ]  4.74110632634        1
[INPUT] 0    0    [1    /1   ]  0.391202930476       1
[INPUT] 1    0    [1    /1   ]  8.59861590109        1
[INPUT] 1    0    [1    /1   ]  0.49084817034        1

nuclear repulsion = 0
number of shells = 14
number of NR pGTOs = 18
number of NR cGTOs = 18
basis = {'Ar': [[0, [18795484.85366926, 1.0]], [0, [4698871.213413293, 1.0]], [0, [1174717.8033524042, 1.0]], [0, [293679.4484905319, 1.0]], [0, [73419.87301781165, 1.0]], [0, [18352.49636356709, 1.0]], [0, [2236.308302453467, 1.0]], [0, [456.0042799486178, 1.0]], [0, [121.5674803815758, 1.0]], [0, [37.57497679733003, 1.0]], [0, [4.741106326337931, 1.0]], [0, [0.3912029304760624, 1.0]], [1, [8.598615901094332, 1.0]], [1, [0.49084817033962647, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [18795484.85366926]
bas 1, expnt(s) = [4698871.21341329]
bas 2, expnt(s) = [1174717.8033524]
bas 3, expnt(s) = [293679.44849053]
bas 4, expnt(s) = [73419.87301781]
bas 5, expnt(s) = [18352.49636357]
bas 6, expnt(s) = [2236.30830245]
bas 7, expnt(s) = [456.00427995]
bas 8, expnt(s) = [121.56748038]
bas 9, expnt(s) = [37.5749768]
bas 10, expnt(s) = [4.74110633]
bas 11, expnt(s) = [0.39120293]
bas 12, expnt(s) = [8.5986159]
bas 13, expnt(s) = [0.49084817]
CPU time:       126.12
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  0  1  1  0 42 43  0]
 [ 0  0  1  1  0 44 45  0]
 [ 0  0  1  1  0 46 47  0]
 [ 0  1  1  1  0 48 49  0]
 [ 0  1  1  1  0 50 51  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.87954849e+07 7.21199097e+05 4.69887121e+06 2.54982386e+05
 1.17471780e+06 9.01498871e+04 2.93679448e+05 3.18727981e+04
 7.34198730e+04 1.12687371e+04 1.83524964e+04 3.98369779e+03
 2.23630830e+03 8.21606339e+02 4.56004280e+02 2.49311157e+02
 1.21567480e+02 9.24970934e+01 3.75749768e+01 3.83432627e+01
 4.74110633e+00 8.11754670e+00 3.91202930e-01 1.24973116e+00
 8.59861590e+00 4.29556287e+01 4.90848170e-01 1.19858369e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319979958902692
cond(S) = 56.39238883695652
E1 = -688.8354721387486  E_coul = 184.91525262278677
init E= -503.920219515962
    CPU time for initialize scf      0.03 sec, wall time      0.03 sec
  HOMO = -0.680897138202375  LUMO = 84.9560195109549
  mo_energy =
[-1.21650489e+02 -1.32811901e+01 -7.62161397e+00 -7.62161397e+00
 -7.62161397e+00 -1.65070522e+00 -6.80897138e-01 -6.80897138e-01
 -6.80897138e-01  8.49560195e+01  6.75992862e+02  3.93403900e+03
  2.96216502e+04  1.54738796e+05  6.64890897e+05  2.71962677e+06
  1.10459649e+07  4.65100861e+07]
E1 = -706.5848819225695  E_coul = 198.94557548491585
cycle= 1 E= -507.639306437654  delta_E= -3.72  |g|= 0.318  |ddm|= 0.301
    CPU time for cycle= 1      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.420625
diis-c [-0.17692576  1.        ]
  HOMO = -0.236279434362597  LUMO = 86.2889254034901
  mo_energy =
[-1.20262418e+02 -1.22530927e+01 -6.65307958e+00 -6.65307958e+00
 -6.65307958e+00 -1.16348922e+00 -2.36279434e-01 -2.36279434e-01
 -2.36279434e-01  8.62889254e+01  6.77363597e+02  3.93529069e+03
  2.96227389e+04  1.54739814e+05  6.64891884e+05  2.71962775e+06
  1.10459659e+07  4.65100870e+07]
E1 = -706.5533966136006  E_coul = 198.91366150668094
cycle= 2 E= -507.63973510692  delta_E= -0.000429  |g|= 0.00475  |ddm|= 0.0143
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00504428
diis-c [-2.54002499e-05 -5.02143112e-04  1.00050214e+00]
  HOMO = -0.236455007954018  LUMO = 86.2854040506732
  mo_energy =
[-1.20271069e+02 -1.22542837e+01 -6.65492420e+00 -6.65492420e+00
 -6.65492420e+00 -1.16355412e+00 -2.36455008e-01 -2.36455008e-01
 -2.36455008e-01  8.62854041e+01  6.77353005e+02  3.93527478e+03
  2.96227197e+04  1.54739794e+05  6.64891864e+05  2.71962773e+06
  1.10459658e+07  4.65100870e+07]
E1 = -706.5529553073435  E_coul = 198.9132200900132
cycle= 3 E= -507.63973521733  delta_E= -1.1e-07  |g|= 9.49e-05  |ddm|= 0.000202
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.000126936
diis-c [-3.96678004e-10  3.34461735e-05 -2.54827067e-02  1.02544926e+00]
  HOMO = -0.236457226750879  LUMO = 86.2853592862747
  mo_energy =
[-1.20271183e+02 -1.22542995e+01 -6.65495124e+00 -6.65495124e+00
 -6.65495124e+00 -1.16355478e+00 -2.36457227e-01 -2.36457227e-01
 -2.36457227e-01  8.62853593e+01  6.77352888e+02  3.93527464e+03
  2.96227195e+04  1.54739794e+05  6.64891864e+05  2.71962773e+06
  1.10459658e+07  4.65100870e+07]
E1 = -706.5529480438861  E_coul = 198.91321282651523
cycle= 4 E= -507.639735217371  delta_E= -4.05e-11  |g|= 3.74e-07  |ddm|= 3.46e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.5529480438861  E_coul = 198.91321282651523
  HOMO = -0.236457210389183  LUMO = 86.2853596249828
  mo_energy =
[-1.20271182e+02 -1.22542994e+01 -6.65495108e+00 -6.65495108e+00
 -6.65495108e+00 -1.16355477e+00 -2.36457210e-01 -2.36457210e-01
 -2.36457210e-01  8.62853596e+01  6.77352889e+02  3.93527464e+03
  2.96227195e+04  1.54739794e+05  6.64891864e+05  2.71962773e+06
  1.10459658e+07  4.65100870e+07]
E1 = -706.5529480810255  E_coul = 198.91321286365468
Extra cycle  E= -507.639735217371  delta_E=    0  |g|= 6.47e-09  |ddm|= 1.65e-08
    CPU time for scf_cycle      0.11 sec, wall time      0.12 sec
exp = [1.87954849e+07 4.69887121e+06 1.17471780e+06 2.93679448e+05
 7.34198730e+04 1.83524964e+04 2.23630830e+03 4.56004280e+02
 1.21567480e+02 3.75749768e+01 4.74110633e+00 3.91202930e-01
 8.59861590e+00 4.90848170e-01]
E = -507.63973521737086
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="BFGS",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((14, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.6988712134173084e+06,1.1747178033543271e+06,2.9367945083858178e+05,7.3419865393677101e+04,1.8353927627435987e+04,2.2341424145819028e+03,4.5688904996449571e+02,1.2173317272260677e+02,3.7593061247508530e+01,4.7412722556720146e+00,3.9120358491841306e-01,8.5986297237246045e+00,4.9084868336327880e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "12s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:15:46 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  18795484.8537        1
[INPUT] 0    0    [1    /1   ]  4698871.21341        1
[INPUT] 0    0    [1    /1   ]  1174717.80335        1
[INPUT] 0    0    [1    /1   ]  293679.448491        1
[INPUT] 0    0    [1    /1   ]  73419.8730178        1
[INPUT] 0    0    [1    /1   ]  18352.4963636        1
[INPUT] 0    0    [1    /1   ]  2236.30830245        1
[INPUT] 0    0    [1    /1   ]  456.004279949        1
[INPUT] 0    0    [1    /1   ]  121.567480382        1
[INPUT] 0    0    [1    /1   ]  37.5749767973        1
[INPUT] 0    0    [1    /1   ]  4.74110632634        1
[INPUT] 0    0    [1    /1   ]  0.391202930476       1
[INPUT] 1    0    [1    /1   ]  8.59861590109        1
[INPUT] 1    0    [1    /1   ]  0.49084817034        1

nuclear repulsion = 0
number of shells = 14
number of NR pGTOs = 18
number of NR cGTOs = 18
basis = {'Ar': [[0, [18795484.85366926, 1.0]], [0, [4698871.213413293, 1.0]], [0, [1174717.8033524042, 1.0]], [0, [293679.4484905319, 1.0]], [0, [73419.87301781165, 1.0]], [0, [18352.49636356709, 1.0]], [0, [2236.308302453467, 1.0]], [0, [456.0042799486178, 1.0]], [0, [121.5674803815758, 1.0]], [0, [37.57497679733003, 1.0]], [0, [4.741106326337931, 1.0]], [0, [0.3912029304760624, 1.0]], [1, [8.598615901094332, 1.0]], [1, [0.49084817033962647, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [18795484.85366926]
bas 1, expnt(s) = [4698871.21341329]
bas 2, expnt(s) = [1174717.8033524]
bas 3, expnt(s) = [293679.44849053]
bas 4, expnt(s) = [73419.87301781]
bas 5, expnt(s) = [18352.49636357]
bas 6, expnt(s) = [2236.30830245]
bas 7, expnt(s) = [456.00427995]
bas 8, expnt(s) = [121.56748038]
bas 9, expnt(s) = [37.5749768]
bas 10, expnt(s) = [4.74110633]
bas 11, expnt(s) = [0.39120293]
bas 12, expnt(s) = [8.5986159]
bas 13, expnt(s) = [0.49084817]
CPU time:       126.75
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  0  1  1  0 42 43  0]
 [ 0  0  1  1  0 44 45  0]
 [ 0  0  1  1  0 46 47  0]
 [ 0  1  1  1  0 48 49  0]
 [ 0  1  1  1  0 50 51  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.87954849e+07 7.21199097e+05 4.69887121e+06 2.54982386e+05
 1.17471780e+06 9.01498871e+04 2.93679448e+05 3.18727981e+04
 7.34198730e+04 1.12687371e+04 1.83524964e+04 3.98369779e+03
 2.23630830e+03 8.21606339e+02 4.56004280e+02 2.49311157e+02
 1.21567480e+02 9.24970934e+01 3.75749768e+01 3.83432627e+01
 4.74110633e+00 8.11754670e+00 3.91202930e-01 1.24973116e+00
 8.59861590e+00 4.29556287e+01 4.90848170e-01 1.19858369e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319979958902692
cond(S) = 56.39238883695652
E1 = -688.8354721387486  E_coul = 184.91525262278677
init E= -503.920219515962
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.680897138202375  LUMO = 84.9560195109549
  mo_energy =
[-1.21650489e+02 -1.32811901e+01 -7.62161397e+00 -7.62161397e+00
 -7.62161397e+00 -1.65070522e+00 -6.80897138e-01 -6.80897138e-01
 -6.80897138e-01  8.49560195e+01  6.75992862e+02  3.93403900e+03
  2.96216502e+04  1.54738796e+05  6.64890897e+05  2.71962677e+06
  1.10459649e+07  4.65100861e+07]
E1 = -706.5848819225695  E_coul = 198.94557548491585
cycle= 1 E= -507.639306437654  delta_E= -3.72  |g|= 0.318  |ddm|= 0.301
    CPU time for cycle= 1      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.420625
diis-c [-0.17692576  1.        ]
  HOMO = -0.236279434362597  LUMO = 86.2889254034901
  mo_energy =
[-1.20262418e+02 -1.22530927e+01 -6.65307958e+00 -6.65307958e+00
 -6.65307958e+00 -1.16348922e+00 -2.36279434e-01 -2.36279434e-01
 -2.36279434e-01  8.62889254e+01  6.77363597e+02  3.93529069e+03
  2.96227389e+04  1.54739814e+05  6.64891884e+05  2.71962775e+06
  1.10459659e+07  4.65100870e+07]
E1 = -706.5533966136006  E_coul = 198.91366150668094
cycle= 2 E= -507.63973510692  delta_E= -0.000429  |g|= 0.00475  |ddm|= 0.0143
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00504428
diis-c [-2.54002499e-05 -5.02143112e-04  1.00050214e+00]
  HOMO = -0.236455007954018  LUMO = 86.2854040506732
  mo_energy =
[-1.20271069e+02 -1.22542837e+01 -6.65492420e+00 -6.65492420e+00
 -6.65492420e+00 -1.16355412e+00 -2.36455008e-01 -2.36455008e-01
 -2.36455008e-01  8.62854041e+01  6.77353005e+02  3.93527478e+03
  2.96227197e+04  1.54739794e+05  6.64891864e+05  2.71962773e+06
  1.10459658e+07  4.65100870e+07]
E1 = -706.5529553073435  E_coul = 198.9132200900132
cycle= 3 E= -507.63973521733  delta_E= -1.1e-07  |g|= 9.49e-05  |ddm|= 0.000202
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.000126936
diis-c [-3.96678004e-10  3.34461735e-05 -2.54827067e-02  1.02544926e+00]
  HOMO = -0.236457226750879  LUMO = 86.2853592862747
  mo_energy =
[-1.20271183e+02 -1.22542995e+01 -6.65495124e+00 -6.65495124e+00
 -6.65495124e+00 -1.16355478e+00 -2.36457227e-01 -2.36457227e-01
 -2.36457227e-01  8.62853593e+01  6.77352888e+02  3.93527464e+03
  2.96227195e+04  1.54739794e+05  6.64891864e+05  2.71962773e+06
  1.10459658e+07  4.65100870e+07]
E1 = -706.5529480438861  E_coul = 198.91321282651523
cycle= 4 E= -507.639735217371  delta_E= -4.05e-11  |g|= 3.74e-07  |ddm|= 3.46e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.5529480438861  E_coul = 198.91321282651523
  HOMO = -0.236457210389183  LUMO = 86.2853596249828
  mo_energy =
[-1.20271182e+02 -1.22542994e+01 -6.65495108e+00 -6.65495108e+00
 -6.65495108e+00 -1.16355477e+00 -2.36457210e-01 -2.36457210e-01
 -2.36457210e-01  8.62853596e+01  6.77352889e+02  3.93527464e+03
  2.96227195e+04  1.54739794e+05  6.64891864e+05  2.71962773e+06
  1.10459658e+07  4.65100870e+07]
E1 = -706.5529480810255  E_coul = 198.91321286365468
Extra cycle  E= -507.639735217371  delta_E=    0  |g|= 6.47e-09  |ddm|= 1.65e-08
    CPU time for scf_cycle      0.10 sec, wall time      0.11 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 56.39238883695652
E1 = -706.5529480810255  E_coul = 198.91321286365468
init E= -507.639735217371
    CPU time for initialize scf      0.12 sec, wall time      0.12 sec
  HOMO = -0.236457210197699  LUMO = 86.285359629123
  mo_energy =
[-1.20271182e+02 -1.22542994e+01 -6.65495108e+00 -6.65495108e+00
 -6.65495108e+00 -1.16355477e+00 -2.36457210e-01 -2.36457210e-01
 -2.36457210e-01  8.62853596e+01  6.77352889e+02  3.93527464e+03
  2.96227195e+04  1.54739794e+05  6.64891864e+05  2.71962773e+06
  1.10459658e+07  4.65100870e+07]
E1 = -706.5529480815882  E_coul = 198.9132128642173
cycle= 1 E= -507.639735217371  delta_E= -5.68e-14  |g|= 2.57e-10  |ddm|= 2.55e-10
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -706.5529480815882  E_coul = 198.9132128642173
  HOMO = -0.236457210194996  LUMO = 86.2853596291838
  mo_energy =
[-1.20271182e+02 -1.22542994e+01 -6.65495108e+00 -6.65495108e+00
 -6.65495108e+00 -1.16355477e+00 -2.36457210e-01 -2.36457210e-01
 -2.36457210e-01  8.62853596e+01  6.77352889e+02  3.93527464e+03
  2.96227195e+04  1.54739794e+05  6.64891864e+05  2.71962773e+06
  1.10459658e+07  4.65100870e+07]
E1 = -706.5529480815972  E_coul = 198.91321286422655
Extra cycle  E= -507.639735217371  delta_E= 3.41e-13  |g|= 1.02e-10  |ddm|= 4.5e-12
    CPU time for scf_cycle      0.19 sec, wall time      0.19 sec
exp = [1.87954849e+07 4.69887121e+06 1.17471780e+06 2.93679448e+05
 7.34198730e+04 1.83524964e+04 2.23630830e+03 4.56004280e+02
 1.21567480e+02 3.75749768e+01 4.74110633e+00 3.91202930e-01
 8.59861590e+00 4.90848170e-01]
grad_E = [-1.14316434e-13  1.78169990e-11  7.02350144e-12  1.04238455e-08
 -3.47092019e-08  6.34687462e-06 -4.98598334e-06 -3.13791138e-05
  5.08529446e-05  1.44245534e-05  1.73627469e-06 -1.23093483e-05
 -3.23614125e-06 -2.56663389e-05]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="BFGS",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((14, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.6988712134173084e+06,1.1747178033543271e+06,2.9367945083858178e+05,7.3419865393677101e+04,1.8353927627435987e+04,2.2341424145819028e+03,4.5688904996449571e+02,1.2173317272260677e+02,3.7593061247508530e+01,4.7412722556720146e+00,3.9120358491841306e-01,8.5986297237246045e+00,4.9084868336327880e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "12s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:15:49 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  18795484.8537        1
[INPUT] 0    0    [1    /1   ]  4698871.21341        1
[INPUT] 0    0    [1    /1   ]  1174717.80335        1
[INPUT] 0    0    [1    /1   ]  293679.448519        1
[INPUT] 0    0    [1    /1   ]  73419.8729267        1
[INPUT] 0    0    [1    /1   ]  18352.5134718        1
[INPUT] 0    0    [1    /1   ]  2236.28235644        1
[INPUT] 0    0    [1    /1   ]  456.015286513        1
[INPUT] 0    0    [1    /1   ]  121.568883902        1
[INPUT] 0    0    [1    /1   ]  37.5748803822        1
[INPUT] 0    0    [1    /1   ]  4.74110740505        1
[INPUT] 0    0    [1    /1   ]  0.39120329202        1
[INPUT] 1    0    [1    /1   ]  8.59862011593        1
[INPUT] 1    0    [1    /1   ]  0.490848748942       1

nuclear repulsion = 0
number of shells = 14
number of NR pGTOs = 18
number of NR cGTOs = 18
basis = {'Ar': [[0, [18795484.85366926, 1.0]], [0, [4698871.213413341, 1.0]], [0, [1174717.8033524272, 1.0]], [0, [293679.44851859845, 1.0]], [0, [73419.87292668983, 1.0]], [0, [18352.513471765713, 1.0]], [0, [2236.2823564369137, 1.0]], [0, [456.01528651296934, 1.0]], [0, [121.5688839018959, 1.0]], [0, [37.57488038223408, 1.0]], [0, [4.741107405050953, 1.0]], [0, [0.3912032920202561, 1.0]], [1, [8.598620115933594, 1.0]], [1, [0.49084874894160874, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [18795484.85366926]
bas 1, expnt(s) = [4698871.21341334]
bas 2, expnt(s) = [1174717.80335243]
bas 3, expnt(s) = [293679.4485186]
bas 4, expnt(s) = [73419.87292669]
bas 5, expnt(s) = [18352.51347177]
bas 6, expnt(s) = [2236.28235644]
bas 7, expnt(s) = [456.01528651]
bas 8, expnt(s) = [121.5688839]
bas 9, expnt(s) = [37.57488038]
bas 10, expnt(s) = [4.74110741]
bas 11, expnt(s) = [0.39120329]
bas 12, expnt(s) = [8.59862012]
bas 13, expnt(s) = [0.49084875]
CPU time:       130.17
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  0  1  1  0 42 43  0]
 [ 0  0  1  1  0 44 45  0]
 [ 0  0  1  1  0 46 47  0]
 [ 0  1  1  1  0 48 49  0]
 [ 0  1  1  1  0 50 51  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.87954849e+07 7.21199097e+05 4.69887121e+06 2.54982386e+05
 1.17471780e+06 9.01498871e+04 2.93679449e+05 3.18727981e+04
 7.34198729e+04 1.12687371e+04 1.83525135e+04 3.98370057e+03
 2.23628236e+03 8.21599190e+02 4.56015287e+02 2.49315670e+02
 1.21568884e+02 9.24978943e+01 3.75748804e+01 3.83431889e+01
 4.74110741e+00 8.11754808e+00 3.91203292e-01 1.24973203e+00
 8.59862012e+00 4.29556550e+01 4.90848749e-01 1.19858545e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.31997914773395
cond(S) = 56.39232207461219
E1 = -688.8354667130778  E_coul = 184.91529352854198
init E= -503.920173184536
    CPU time for initialize scf      0.03 sec, wall time      0.03 sec
  HOMO = -0.68089633717938  LUMO = 84.95637896323
  mo_energy =
[-1.21650485e+02 -1.32811853e+01 -7.62161129e+00 -7.62161129e+00
 -7.62161129e+00 -1.65070448e+00 -6.80896337e-01 -6.80896337e-01
 -6.80896337e-01  8.49563790e+01  6.76005258e+02  3.93404897e+03
  2.96216248e+04  1.54738796e+05  6.64890909e+05  2.71962679e+06
  1.10459649e+07  4.65100861e+07]
E1 = -706.5849314216488  E_coul = 198.94562494893583
cycle= 1 E= -507.639306472713  delta_E= -3.72  |g|= 0.318  |ddm|= 0.301
    CPU time for cycle= 1      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.420623
diis-c [-0.17692387  1.        ]
  HOMO = -0.236277941690033  LUMO = 86.2892855577444
  mo_energy =
[-1.20262414e+02 -1.22530872e+01 -6.65307624e+00 -6.65307624e+00
 -6.65307624e+00 -1.16348785e+00 -2.36277942e-01 -2.36277942e-01
 -2.36277942e-01  8.62892856e+01  6.77375991e+02  3.93530066e+03
  2.96227136e+04  1.54739814e+05  6.64891897e+05  2.71962776e+06
  1.10459659e+07  4.65100871e+07]
E1 = -706.5534461864548  E_coul = 198.9137110452641
cycle= 2 E= -507.639735141191  delta_E= -0.000429  |g|= 0.00475  |ddm|= 0.0143
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00504432
diis-c [-2.54005581e-05 -5.02129777e-04  1.00050213e+00]
  HOMO = -0.236453514777508  LUMO = 86.2857641953024
  mo_energy =
[-1.20271066e+02 -1.22542782e+01 -6.65492086e+00 -6.65492086e+00
 -6.65492086e+00 -1.16355275e+00 -2.36453515e-01 -2.36453515e-01
 -2.36453515e-01  8.62857642e+01  6.77365399e+02  3.93528475e+03
  2.96226943e+04  1.54739794e+05  6.64891877e+05  2.71962774e+06
  1.10459658e+07  4.65100870e+07]
E1 = -706.5530048831013  E_coul = 198.91326963149965
cycle= 3 E= -507.639735251602  delta_E= -1.1e-07  |g|= 9.49e-05  |ddm|= 0.000202
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.000126936
diis-c [-3.96680374e-10  3.34455304e-05 -2.54826395e-02  1.02544919e+00]
  HOMO = -0.236455733564011  LUMO = 86.2857194310334
  mo_energy =
[-1.20271180e+02 -1.22542940e+01 -6.65494790e+00 -6.65494790e+00
 -6.65494790e+00 -1.16355340e+00 -2.36455734e-01 -2.36455734e-01
 -2.36455734e-01  8.62857194e+01  6.77365281e+02  3.93528461e+03
  2.96226941e+04  1.54739794e+05  6.64891876e+05  2.71962774e+06
  1.10459658e+07  4.65100870e+07]
E1 = -706.5529976197085  E_coul = 198.9132623680668
cycle= 4 E= -507.639735251642  delta_E= -4.01e-11  |g|= 3.74e-07  |ddm|= 3.46e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.5529976197085  E_coul = 198.9132623680668
  HOMO = -0.236455717202435  LUMO = 86.2857197697399
  mo_energy =
[-1.20271179e+02 -1.22542939e+01 -6.65494773e+00 -6.65494773e+00
 -6.65494773e+00 -1.16355340e+00 -2.36455717e-01 -2.36455717e-01
 -2.36455717e-01  8.62857198e+01  6.77365282e+02  3.93528461e+03
  2.96226941e+04  1.54739794e+05  6.64891876e+05  2.71962774e+06
  1.10459658e+07  4.65100870e+07]
E1 = -706.552997656848  E_coul = 198.9132624052064
Extra cycle  E= -507.639735251642  delta_E= 1.71e-13  |g|= 6.47e-09  |ddm|= 1.65e-08
    CPU time for scf_cycle      0.10 sec, wall time      0.11 sec
exp = [1.87954849e+07 4.69887121e+06 1.17471780e+06 2.93679449e+05
 7.34198729e+04 1.83525135e+04 2.23628236e+03 4.56015287e+02
 1.21568884e+02 3.75748804e+01 4.74110741e+00 3.91203292e-01
 8.59862012e+00 4.90848749e-01]
E = -507.6397352516416
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="BFGS",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((14, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.6988712134173084e+06,1.1747178033543271e+06,2.9367945083858178e+05,7.3419865393677101e+04,1.8353927627435987e+04,2.2341424145819028e+03,4.5688904996449571e+02,1.2173317272260677e+02,3.7593061247508530e+01,4.7412722556720146e+00,3.9120358491841306e-01,8.5986297237246045e+00,4.9084868336327880e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "12s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:15:50 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  18795484.8537        1
[INPUT] 0    0    [1    /1   ]  4698871.21341        1
[INPUT] 0    0    [1    /1   ]  1174717.80335        1
[INPUT] 0    0    [1    /1   ]  293679.448519        1
[INPUT] 0    0    [1    /1   ]  73419.8729267        1
[INPUT] 0    0    [1    /1   ]  18352.5134718        1
[INPUT] 0    0    [1    /1   ]  2236.28235644        1
[INPUT] 0    0    [1    /1   ]  456.015286513        1
[INPUT] 0    0    [1    /1   ]  121.568883902        1
[INPUT] 0    0    [1    /1   ]  37.5748803822        1
[INPUT] 0    0    [1    /1   ]  4.74110740505        1
[INPUT] 0    0    [1    /1   ]  0.39120329202        1
[INPUT] 1    0    [1    /1   ]  8.59862011593        1
[INPUT] 1    0    [1    /1   ]  0.490848748942       1

nuclear repulsion = 0
number of shells = 14
number of NR pGTOs = 18
number of NR cGTOs = 18
basis = {'Ar': [[0, [18795484.85366926, 1.0]], [0, [4698871.213413341, 1.0]], [0, [1174717.8033524272, 1.0]], [0, [293679.44851859845, 1.0]], [0, [73419.87292668983, 1.0]], [0, [18352.513471765713, 1.0]], [0, [2236.2823564369137, 1.0]], [0, [456.01528651296934, 1.0]], [0, [121.5688839018959, 1.0]], [0, [37.57488038223408, 1.0]], [0, [4.741107405050953, 1.0]], [0, [0.3912032920202561, 1.0]], [1, [8.598620115933594, 1.0]], [1, [0.49084874894160874, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [18795484.85366926]
bas 1, expnt(s) = [4698871.21341334]
bas 2, expnt(s) = [1174717.80335243]
bas 3, expnt(s) = [293679.4485186]
bas 4, expnt(s) = [73419.87292669]
bas 5, expnt(s) = [18352.51347177]
bas 6, expnt(s) = [2236.28235644]
bas 7, expnt(s) = [456.01528651]
bas 8, expnt(s) = [121.5688839]
bas 9, expnt(s) = [37.57488038]
bas 10, expnt(s) = [4.74110741]
bas 11, expnt(s) = [0.39120329]
bas 12, expnt(s) = [8.59862012]
bas 13, expnt(s) = [0.49084875]
CPU time:       130.80
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  0  1  1  0 42 43  0]
 [ 0  0  1  1  0 44 45  0]
 [ 0  0  1  1  0 46 47  0]
 [ 0  1  1  1  0 48 49  0]
 [ 0  1  1  1  0 50 51  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.87954849e+07 7.21199097e+05 4.69887121e+06 2.54982386e+05
 1.17471780e+06 9.01498871e+04 2.93679449e+05 3.18727981e+04
 7.34198729e+04 1.12687371e+04 1.83525135e+04 3.98370057e+03
 2.23628236e+03 8.21599190e+02 4.56015287e+02 2.49315670e+02
 1.21568884e+02 9.24978943e+01 3.75748804e+01 3.83431889e+01
 4.74110741e+00 8.11754808e+00 3.91203292e-01 1.24973203e+00
 8.59862012e+00 4.29556550e+01 4.90848749e-01 1.19858545e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.31997914773395
cond(S) = 56.39232207461219
E1 = -688.8354667130778  E_coul = 184.91529352854198
init E= -503.920173184536
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.68089633717938  LUMO = 84.95637896323
  mo_energy =
[-1.21650485e+02 -1.32811853e+01 -7.62161129e+00 -7.62161129e+00
 -7.62161129e+00 -1.65070448e+00 -6.80896337e-01 -6.80896337e-01
 -6.80896337e-01  8.49563790e+01  6.76005258e+02  3.93404897e+03
  2.96216248e+04  1.54738796e+05  6.64890909e+05  2.71962679e+06
  1.10459649e+07  4.65100861e+07]
E1 = -706.5849314216488  E_coul = 198.94562494893583
cycle= 1 E= -507.639306472713  delta_E= -3.72  |g|= 0.318  |ddm|= 0.301
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.420623
diis-c [-0.17692387  1.        ]
  HOMO = -0.236277941690033  LUMO = 86.2892855577444
  mo_energy =
[-1.20262414e+02 -1.22530872e+01 -6.65307624e+00 -6.65307624e+00
 -6.65307624e+00 -1.16348785e+00 -2.36277942e-01 -2.36277942e-01
 -2.36277942e-01  8.62892856e+01  6.77375991e+02  3.93530066e+03
  2.96227136e+04  1.54739814e+05  6.64891897e+05  2.71962776e+06
  1.10459659e+07  4.65100871e+07]
E1 = -706.5534461864548  E_coul = 198.9137110452641
cycle= 2 E= -507.639735141191  delta_E= -0.000429  |g|= 0.00475  |ddm|= 0.0143
    CPU time for cycle= 2      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.00504432
diis-c [-2.54005581e-05 -5.02129777e-04  1.00050213e+00]
  HOMO = -0.236453514777508  LUMO = 86.2857641953024
  mo_energy =
[-1.20271066e+02 -1.22542782e+01 -6.65492086e+00 -6.65492086e+00
 -6.65492086e+00 -1.16355275e+00 -2.36453515e-01 -2.36453515e-01
 -2.36453515e-01  8.62857642e+01  6.77365399e+02  3.93528475e+03
  2.96226943e+04  1.54739794e+05  6.64891877e+05  2.71962774e+06
  1.10459658e+07  4.65100870e+07]
E1 = -706.5530048831013  E_coul = 198.91326963149965
cycle= 3 E= -507.639735251602  delta_E= -1.1e-07  |g|= 9.49e-05  |ddm|= 0.000202
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.000126936
diis-c [-3.96680374e-10  3.34455304e-05 -2.54826395e-02  1.02544919e+00]
  HOMO = -0.236455733564011  LUMO = 86.2857194310334
  mo_energy =
[-1.20271180e+02 -1.22542940e+01 -6.65494790e+00 -6.65494790e+00
 -6.65494790e+00 -1.16355340e+00 -2.36455734e-01 -2.36455734e-01
 -2.36455734e-01  8.62857194e+01  6.77365281e+02  3.93528461e+03
  2.96226941e+04  1.54739794e+05  6.64891876e+05  2.71962774e+06
  1.10459658e+07  4.65100870e+07]
E1 = -706.5529976197085  E_coul = 198.9132623680668
cycle= 4 E= -507.639735251642  delta_E= -4.01e-11  |g|= 3.74e-07  |ddm|= 3.46e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.5529976197085  E_coul = 198.9132623680668
  HOMO = -0.236455717202435  LUMO = 86.2857197697399
  mo_energy =
[-1.20271179e+02 -1.22542939e+01 -6.65494773e+00 -6.65494773e+00
 -6.65494773e+00 -1.16355340e+00 -2.36455717e-01 -2.36455717e-01
 -2.36455717e-01  8.62857198e+01  6.77365282e+02  3.93528461e+03
  2.96226941e+04  1.54739794e+05  6.64891876e+05  2.71962774e+06
  1.10459658e+07  4.65100870e+07]
E1 = -706.552997656848  E_coul = 198.9132624052064
Extra cycle  E= -507.639735251642  delta_E= 1.71e-13  |g|= 6.47e-09  |ddm|= 1.65e-08
    CPU time for scf_cycle      0.10 sec, wall time      0.10 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 56.39232207461219
E1 = -706.552997656848  E_coul = 198.9132624052064
init E= -507.639735251642
    CPU time for initialize scf      0.12 sec, wall time      0.12 sec
  HOMO = -0.236455717010944  LUMO = 86.2857197738823
  mo_energy =
[-1.20271179e+02 -1.22542939e+01 -6.65494773e+00 -6.65494773e+00
 -6.65494773e+00 -1.16355340e+00 -2.36455717e-01 -2.36455717e-01
 -2.36455717e-01  8.62857198e+01  6.77365282e+02  3.93528461e+03
  2.96226941e+04  1.54739794e+05  6.64891876e+05  2.71962774e+06
  1.10459658e+07  4.65100870e+07]
E1 = -706.5529976574098  E_coul = 198.91326240576845
cycle= 1 E= -507.639735251641  delta_E= 2.27e-13  |g|= 1.53e-10  |ddm|= 2.55e-10
    CPU time for cycle= 1      0.01 sec, wall time      0.02 sec
E1 = -706.5529976574098  E_coul = 198.91326240576845
  HOMO = -0.236455717008248  LUMO = 86.2857197739432
  mo_energy =
[-1.20271179e+02 -1.22542939e+01 -6.65494773e+00 -6.65494773e+00
 -6.65494773e+00 -1.16355340e+00 -2.36455717e-01 -2.36455717e-01
 -2.36455717e-01  8.62857198e+01  6.77365282e+02  3.93528461e+03
  2.96226941e+04  1.54739794e+05  6.64891876e+05  2.71962774e+06
  1.10459658e+07  4.65100870e+07]
E1 = -706.5529976574202  E_coul = 198.91326240577826
Extra cycle  E= -507.639735251642  delta_E= -5.68e-13  |g|= 2.93e-10  |ddm|= 4.51e-12
    CPU time for scf_cycle      0.19 sec, wall time      0.19 sec
exp = [1.87954849e+07 4.69887121e+06 1.17471780e+06 2.93679449e+05
 7.34198729e+04 1.83525135e+04 2.23628236e+03 4.56015287e+02
 1.21568884e+02 3.75748804e+01 4.74110741e+00 3.91203292e-01
 8.59862012e+00 4.90848749e-01]
grad_E = [-1.14278495e-13  1.78194221e-11  7.04354516e-12  1.04252264e-08
 -3.47029190e-08  6.34780805e-06 -5.04730792e-06 -3.08946631e-05
  5.03368489e-05  1.27442095e-05  5.07529846e-07 -3.27209806e-06
 -5.88868680e-07 -7.28169584e-06]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="BFGS",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((14, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.6988712134173084e+06,1.1747178033543271e+06,2.9367945083858178e+05,7.3419865393677101e+04,1.8353927627435987e+04,2.2341424145819028e+03,4.5688904996449571e+02,1.2173317272260677e+02,3.7593061247508530e+01,4.7412722556720146e+00,3.9120358491841306e-01,8.5986297237246045e+00,4.9084868336327880e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "12s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:15:53 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  18795484.8537        1
[INPUT] 0    0    [1    /1   ]  4698871.21341        1
[INPUT] 0    0    [1    /1   ]  1174717.80335        1
[INPUT] 0    0    [1    /1   ]  293679.448553        1
[INPUT] 0    0    [1    /1   ]  73419.8728135        1
[INPUT] 0    0    [1    /1   ]  18352.534723         1
[INPUT] 0    0    [1    /1   ]  2236.25008966        1
[INPUT] 0    0    [1    /1   ]  456.029244792        1
[INPUT] 0    0    [1    /1   ]  121.570227613        1
[INPUT] 0    0    [1    /1   ]  37.5746149854        1
[INPUT] 0    0    [1    /1   ]  4.74110866048        1
[INPUT] 0    0    [1    /1   ]  0.391203752892       1
[INPUT] 1    0    [1    /1   ]  8.59862575106        1
[INPUT] 1    0    [1    /1   ]  0.490849519695       1

nuclear repulsion = 0
number of shells = 14
number of NR pGTOs = 18
number of NR cGTOs = 18
basis = {'Ar': [[0, [18795484.85366926, 1.0]], [0, [4698871.213413401, 1.0]], [0, [1174717.8033524558, 1.0]], [0, [293679.44855346176, 1.0]], [0, [73419.87281350869, 1.0]], [0, [18352.53472299275, 1.0]], [0, [2236.2500896624388, 1.0]], [0, [456.0292447923707, 1.0]], [0, [121.57022761331935, 1.0]], [0, [37.57461498539434, 1.0]], [0, [4.741108660481651, 1.0]], [0, [0.3912037528921866, 1.0]], [1, [8.598625751057394, 1.0]], [1, [0.4908495196946598, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [18795484.85366926]
bas 1, expnt(s) = [4698871.2134134]
bas 2, expnt(s) = [1174717.80335246]
bas 3, expnt(s) = [293679.44855346]
bas 4, expnt(s) = [73419.87281351]
bas 5, expnt(s) = [18352.53472299]
bas 6, expnt(s) = [2236.25008966]
bas 7, expnt(s) = [456.02924479]
bas 8, expnt(s) = [121.57022761]
bas 9, expnt(s) = [37.57461499]
bas 10, expnt(s) = [4.74110866]
bas 11, expnt(s) = [0.39120375]
bas 12, expnt(s) = [8.59862575]
bas 13, expnt(s) = [0.49084952]
CPU time:       134.17
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  0  1  1  0 42 43  0]
 [ 0  0  1  1  0 44 45  0]
 [ 0  0  1  1  0 46 47  0]
 [ 0  1  1  1  0 48 49  0]
 [ 0  1  1  1  0 50 51  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.87954849e+07 7.21199097e+05 4.69887121e+06 2.54982386e+05
 1.17471780e+06 9.01498871e+04 2.93679449e+05 3.18727981e+04
 7.34198728e+04 1.12687371e+04 1.83525347e+04 3.98370403e+03
 2.23625009e+03 8.21590299e+02 4.56029245e+02 2.49321393e+02
 1.21570228e+02 9.24986611e+01 3.75746150e+01 3.83429858e+01
 4.74110866e+00 8.11754969e+00 3.91203753e-01 1.24973313e+00
 8.59862575e+00 4.29556902e+01 4.90849520e-01 1.19858781e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.31997808070744
cond(S) = 56.392188565023076
E1 = -688.8354605522575  E_coul = 184.9153473076322
init E= -503.920113244625
    CPU time for initialize scf      0.02 sec, wall time      0.03 sec
  HOMO = -0.680895276873064  LUMO = 84.9563479809362
  mo_energy =
[-1.21650479e+02 -1.32811788e+01 -7.62160780e+00 -7.62160780e+00
 -7.62160780e+00 -1.65070347e+00 -6.80895277e-01 -6.80895277e-01
 -6.80895277e-01  8.49563480e+01  6.76019263e+02  3.93406025e+03
  2.96215925e+04  1.54738796e+05  6.64890924e+05  2.71962681e+06
  1.10459649e+07  4.65100861e+07]
E1 = -706.5849962820222  E_coul = 198.94568974872408
cycle= 1 E= -507.639306533298  delta_E= -3.72  |g|= 0.318  |ddm|= 0.301
    CPU time for cycle= 1      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.42062
diis-c [-0.17692123  1.        ]
  HOMO = -0.236275971507504  LUMO = 86.2892548633559
  mo_energy =
[-1.20262410e+02 -1.22530799e+01 -6.65307189e+00 -6.65307189e+00
 -6.65307189e+00 -1.16348602e+00 -2.36275972e-01 -2.36275972e-01
 -2.36275972e-01  8.62892549e+01  6.77389992e+02  3.93531193e+03
  2.96226813e+04  1.54739813e+05  6.64891912e+05  2.71962778e+06
  1.10459659e+07  4.65100871e+07]
E1 = -706.5535108708858  E_coul = 198.91377566620778
cycle= 2 E= -507.639735204678  delta_E= -0.000429  |g|= 0.00475  |ddm|= 0.0143
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00504438
diis-c [-2.54012023e-05 -5.02087439e-04  1.00050209e+00]
  HOMO = -0.236451545750312  LUMO = 86.2857334693786
  mo_energy =
[-1.20271062e+02 -1.22542709e+01 -6.65491651e+00 -6.65491651e+00
 -6.65491651e+00 -1.16355092e+00 -2.36451546e-01 -2.36451546e-01
 -2.36451546e-01  8.62857335e+01  6.77379400e+02  3.93529602e+03
  2.96226620e+04  1.54739793e+05  6.64891892e+05  2.71962776e+06
  1.10459659e+07  4.65100871e+07]
E1 = -706.5530695659468  E_coul = 198.91333425085764
cycle= 3 E= -507.639735315089  delta_E= -1.1e-07  |g|= 9.49e-05  |ddm|= 0.000202
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.000126938
diis-c [-3.96689210e-10  3.34447711e-05 -2.54826497e-02  1.02544920e+00]
  HOMO = -0.236453764558168  LUMO = 86.2856887047347
  mo_energy =
[-1.20271175e+02 -1.22542867e+01 -6.65494355e+00 -6.65494355e+00
 -6.65494355e+00 -1.16355158e+00 -2.36453765e-01 -2.36453765e-01
 -2.36453765e-01  8.62856887e+01  6.77379282e+02  3.93529588e+03
  2.96226618e+04  1.54739793e+05  6.64891892e+05  2.71962776e+06
  1.10459659e+07  4.65100871e+07]
E1 = -706.5530623025144  E_coul = 198.91332698738483
cycle= 4 E= -507.63973531513  delta_E= -4.04e-11  |g|= 3.74e-07  |ddm|= 3.46e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.5530623025144  E_coul = 198.91332698738483
  HOMO = -0.236453748196433  LUMO = 86.2856890434463
  mo_energy =
[-1.20271175e+02 -1.22542866e+01 -6.65494339e+00 -6.65494339e+00
 -6.65494339e+00 -1.16355157e+00 -2.36453748e-01 -2.36453748e-01
 -2.36453748e-01  8.62856890e+01  6.77379284e+02  3.93529588e+03
  2.96226618e+04  1.54739793e+05  6.64891892e+05  2.71962776e+06
  1.10459659e+07  4.65100871e+07]
E1 = -706.5530623396534  E_coul = 198.91332702452445
Extra cycle  E= -507.639735315129  delta_E= 6.25e-13  |g|= 6.47e-09  |ddm|= 1.65e-08
    CPU time for scf_cycle      0.10 sec, wall time      0.11 sec
exp = [1.87954849e+07 4.69887121e+06 1.17471780e+06 2.93679449e+05
 7.34198728e+04 1.83525347e+04 2.23625009e+03 4.56029245e+02
 1.21570228e+02 3.75746150e+01 4.74110866e+00 3.91203753e-01
 8.59862575e+00 4.90849520e-01]
E = -507.6397353151289
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="BFGS",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((14, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.6988712134173084e+06,1.1747178033543271e+06,2.9367945083858178e+05,7.3419865393677101e+04,1.8353927627435987e+04,2.2341424145819028e+03,4.5688904996449571e+02,1.2173317272260677e+02,3.7593061247508530e+01,4.7412722556720146e+00,3.9120358491841306e-01,8.5986297237246045e+00,4.9084868336327880e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "12s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:15:54 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  18795484.8537        1
[INPUT] 0    0    [1    /1   ]  4698871.21341        1
[INPUT] 0    0    [1    /1   ]  1174717.80335        1
[INPUT] 0    0    [1    /1   ]  293679.448553        1
[INPUT] 0    0    [1    /1   ]  73419.8728135        1
[INPUT] 0    0    [1    /1   ]  18352.534723         1
[INPUT] 0    0    [1    /1   ]  2236.25008966        1
[INPUT] 0    0    [1    /1   ]  456.029244792        1
[INPUT] 0    0    [1    /1   ]  121.570227613        1
[INPUT] 0    0    [1    /1   ]  37.5746149854        1
[INPUT] 0    0    [1    /1   ]  4.74110866048        1
[INPUT] 0    0    [1    /1   ]  0.391203752892       1
[INPUT] 1    0    [1    /1   ]  8.59862575106        1
[INPUT] 1    0    [1    /1   ]  0.490849519695       1

nuclear repulsion = 0
number of shells = 14
number of NR pGTOs = 18
number of NR cGTOs = 18
basis = {'Ar': [[0, [18795484.85366926, 1.0]], [0, [4698871.213413401, 1.0]], [0, [1174717.8033524558, 1.0]], [0, [293679.44855346176, 1.0]], [0, [73419.87281350869, 1.0]], [0, [18352.53472299275, 1.0]], [0, [2236.2500896624388, 1.0]], [0, [456.0292447923707, 1.0]], [0, [121.57022761331935, 1.0]], [0, [37.57461498539434, 1.0]], [0, [4.741108660481651, 1.0]], [0, [0.3912037528921866, 1.0]], [1, [8.598625751057394, 1.0]], [1, [0.4908495196946598, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [18795484.85366926]
bas 1, expnt(s) = [4698871.2134134]
bas 2, expnt(s) = [1174717.80335246]
bas 3, expnt(s) = [293679.44855346]
bas 4, expnt(s) = [73419.87281351]
bas 5, expnt(s) = [18352.53472299]
bas 6, expnt(s) = [2236.25008966]
bas 7, expnt(s) = [456.02924479]
bas 8, expnt(s) = [121.57022761]
bas 9, expnt(s) = [37.57461499]
bas 10, expnt(s) = [4.74110866]
bas 11, expnt(s) = [0.39120375]
bas 12, expnt(s) = [8.59862575]
bas 13, expnt(s) = [0.49084952]
CPU time:       134.82
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  0  1  1  0 42 43  0]
 [ 0  0  1  1  0 44 45  0]
 [ 0  0  1  1  0 46 47  0]
 [ 0  1  1  1  0 48 49  0]
 [ 0  1  1  1  0 50 51  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.87954849e+07 7.21199097e+05 4.69887121e+06 2.54982386e+05
 1.17471780e+06 9.01498871e+04 2.93679449e+05 3.18727981e+04
 7.34198728e+04 1.12687371e+04 1.83525347e+04 3.98370403e+03
 2.23625009e+03 8.21590299e+02 4.56029245e+02 2.49321393e+02
 1.21570228e+02 9.24986611e+01 3.75746150e+01 3.83429858e+01
 4.74110866e+00 8.11754969e+00 3.91203753e-01 1.24973313e+00
 8.59862575e+00 4.29556902e+01 4.90849520e-01 1.19858781e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.31997808070744
cond(S) = 56.392188565023076
E1 = -688.8354605522575  E_coul = 184.9153473076322
init E= -503.920113244625
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.680895276873064  LUMO = 84.9563479809362
  mo_energy =
[-1.21650479e+02 -1.32811788e+01 -7.62160780e+00 -7.62160780e+00
 -7.62160780e+00 -1.65070347e+00 -6.80895277e-01 -6.80895277e-01
 -6.80895277e-01  8.49563480e+01  6.76019263e+02  3.93406025e+03
  2.96215925e+04  1.54738796e+05  6.64890924e+05  2.71962681e+06
  1.10459649e+07  4.65100861e+07]
E1 = -706.5849962820222  E_coul = 198.94568974872408
cycle= 1 E= -507.639306533298  delta_E= -3.72  |g|= 0.318  |ddm|= 0.301
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.42062
diis-c [-0.17692123  1.        ]
  HOMO = -0.236275971507504  LUMO = 86.2892548633559
  mo_energy =
[-1.20262410e+02 -1.22530799e+01 -6.65307189e+00 -6.65307189e+00
 -6.65307189e+00 -1.16348602e+00 -2.36275972e-01 -2.36275972e-01
 -2.36275972e-01  8.62892549e+01  6.77389992e+02  3.93531193e+03
  2.96226813e+04  1.54739813e+05  6.64891912e+05  2.71962778e+06
  1.10459659e+07  4.65100871e+07]
E1 = -706.5535108708858  E_coul = 198.91377566620778
cycle= 2 E= -507.639735204678  delta_E= -0.000429  |g|= 0.00475  |ddm|= 0.0143
    CPU time for cycle= 2      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.00504438
diis-c [-2.54012023e-05 -5.02087439e-04  1.00050209e+00]
  HOMO = -0.236451545750312  LUMO = 86.2857334693786
  mo_energy =
[-1.20271062e+02 -1.22542709e+01 -6.65491651e+00 -6.65491651e+00
 -6.65491651e+00 -1.16355092e+00 -2.36451546e-01 -2.36451546e-01
 -2.36451546e-01  8.62857335e+01  6.77379400e+02  3.93529602e+03
  2.96226620e+04  1.54739793e+05  6.64891892e+05  2.71962776e+06
  1.10459659e+07  4.65100871e+07]
E1 = -706.5530695659468  E_coul = 198.91333425085764
cycle= 3 E= -507.639735315089  delta_E= -1.1e-07  |g|= 9.49e-05  |ddm|= 0.000202
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.000126938
diis-c [-3.96689210e-10  3.34447711e-05 -2.54826497e-02  1.02544920e+00]
  HOMO = -0.236453764558168  LUMO = 86.2856887047347
  mo_energy =
[-1.20271175e+02 -1.22542867e+01 -6.65494355e+00 -6.65494355e+00
 -6.65494355e+00 -1.16355158e+00 -2.36453765e-01 -2.36453765e-01
 -2.36453765e-01  8.62856887e+01  6.77379282e+02  3.93529588e+03
  2.96226618e+04  1.54739793e+05  6.64891892e+05  2.71962776e+06
  1.10459659e+07  4.65100871e+07]
E1 = -706.5530623025144  E_coul = 198.91332698738483
cycle= 4 E= -507.63973531513  delta_E= -4.04e-11  |g|= 3.74e-07  |ddm|= 3.46e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.5530623025144  E_coul = 198.91332698738483
  HOMO = -0.236453748196433  LUMO = 86.2856890434463
  mo_energy =
[-1.20271175e+02 -1.22542866e+01 -6.65494339e+00 -6.65494339e+00
 -6.65494339e+00 -1.16355157e+00 -2.36453748e-01 -2.36453748e-01
 -2.36453748e-01  8.62856890e+01  6.77379284e+02  3.93529588e+03
  2.96226618e+04  1.54739793e+05  6.64891892e+05  2.71962776e+06
  1.10459659e+07  4.65100871e+07]
E1 = -706.5530623396534  E_coul = 198.91332702452445
Extra cycle  E= -507.639735315129  delta_E= 6.25e-13  |g|= 6.47e-09  |ddm|= 1.65e-08
    CPU time for scf_cycle      0.10 sec, wall time      0.10 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 56.392188565023076
E1 = -706.5530623396534  E_coul = 198.91332702452445
init E= -507.639735315129
    CPU time for initialize scf      0.12 sec, wall time      0.12 sec
  HOMO = -0.236453748004948  LUMO = 86.285689047589
  mo_energy =
[-1.20271175e+02 -1.22542866e+01 -6.65494338e+00 -6.65494338e+00
 -6.65494338e+00 -1.16355157e+00 -2.36453748e-01 -2.36453748e-01
 -2.36453748e-01  8.62856890e+01  6.77379284e+02  3.93529588e+03
  2.96226618e+04  1.54739793e+05  6.64891892e+05  2.71962776e+06
  1.10459659e+07  4.65100871e+07]
E1 = -706.5530623402159  E_coul = 198.91332702508672
cycle= 1 E= -507.639735315129  delta_E= -2.84e-13  |g|= 2.34e-10  |ddm|= 2.55e-10
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -706.5530623402159  E_coul = 198.91332702508672
  HOMO = -0.236453748002243  LUMO = 86.2856890476498
  mo_energy =
[-1.20271175e+02 -1.22542866e+01 -6.65494338e+00 -6.65494338e+00
 -6.65494338e+00 -1.16355157e+00 -2.36453748e-01 -2.36453748e-01
 -2.36453748e-01  8.62856890e+01  6.77379284e+02  3.93529588e+03
  2.96226618e+04  1.54739793e+05  6.64891892e+05  2.71962776e+06
  1.10459659e+07  4.65100871e+07]
E1 = -706.5530623402258  E_coul = 198.91332702509632
Extra cycle  E= -507.639735315129  delta_E= -2.27e-13  |g|= 1.05e-10  |ddm|= 4.52e-12
    CPU time for scf_cycle      0.19 sec, wall time      0.19 sec
exp = [1.87954849e+07 4.69887121e+06 1.17471780e+06 2.93679449e+05
 7.34198728e+04 1.83525347e+04 2.23625009e+03 4.56029245e+02
 1.21570228e+02 3.75746150e+01 4.74110866e+00 3.91203753e-01
 8.59862575e+00 4.90849520e-01]
grad_E = [-1.14229695e-13  1.78225377e-11  7.06932383e-12  1.04270022e-08
 -3.46948465e-08  6.34901084e-06 -5.12779195e-06 -3.02247597e-05
  4.94904177e-05  1.04809666e-05 -1.12021051e-06  8.69698178e-06
  2.91615045e-06  1.70690161e-05]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="BFGS",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((14, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.6988712134173084e+06,1.1747178033543271e+06,2.9367945083858178e+05,7.3419865393677101e+04,1.8353927627435987e+04,2.2341424145819028e+03,4.5688904996449571e+02,1.2173317272260677e+02,3.7593061247508530e+01,4.7412722556720146e+00,3.9120358491841306e-01,8.5986297237246045e+00,4.9084868336327880e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "12s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:15:57 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  18795484.8537        1
[INPUT] 0    0    [1    /1   ]  4698871.21341        1
[INPUT] 0    0    [1    /1   ]  1174717.80335        1
[INPUT] 0    0    [1    /1   ]  293679.448598        1
[INPUT] 0    0    [1    /1   ]  73419.872668         1
[INPUT] 0    0    [1    /1   ]  18352.5620386        1
[INPUT] 0    0    [1    /1   ]  2236.20854698        1
[INPUT] 0    0    [1    /1   ]  456.047705929        1
[INPUT] 0    0    [1    /1   ]  121.571229513        1
[INPUT] 0    0    [1    /1   ]  37.5740095499        1
[INPUT] 0    0    [1    /1   ]  4.74111012513        1
[INPUT] 0    0    [1    /1   ]  0.391204365764       1
[INPUT] 1    0    [1    /1   ]  8.59863371183        1
[INPUT] 1    0    [1    /1   ]  0.490850603671       1

nuclear repulsion = 0
number of shells = 14
number of NR pGTOs = 18
number of NR cGTOs = 18
basis = {'Ar': [[0, [18795484.85366926, 1.0]], [0, [4698871.213413477, 1.0]], [0, [1174717.8033524926, 1.0]], [0, [293679.4485982736, 1.0]], [0, [73419.87266804285, 1.0]], [0, [18352.562038581334, 1.0]], [0, [2236.2085469842323, 1.0]], [0, [456.0477059291701, 1.0]], [0, [121.57122951345974, 1.0]], [0, [37.57400954991134, 1.0]], [0, [4.741110125131677, 1.0]], [0, [0.3912043657640217, 1.0]], [1, [8.598633711834113, 1.0]], [1, [0.4908506036712745, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [18795484.85366926]
bas 1, expnt(s) = [4698871.21341348]
bas 2, expnt(s) = [1174717.80335249]
bas 3, expnt(s) = [293679.44859827]
bas 4, expnt(s) = [73419.87266804]
bas 5, expnt(s) = [18352.56203858]
bas 6, expnt(s) = [2236.20854698]
bas 7, expnt(s) = [456.04770593]
bas 8, expnt(s) = [121.57122951]
bas 9, expnt(s) = [37.57400955]
bas 10, expnt(s) = [4.74111013]
bas 11, expnt(s) = [0.39120437]
bas 12, expnt(s) = [8.59863371]
bas 13, expnt(s) = [0.4908506]
CPU time:       138.25
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  0  1  1  0 42 43  0]
 [ 0  0  1  1  0 44 45  0]
 [ 0  0  1  1  0 46 47  0]
 [ 0  1  1  1  0 48 49  0]
 [ 0  1  1  1  0 50 51  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.87954849e+07 7.21199097e+05 4.69887121e+06 2.54982386e+05
 1.17471780e+06 9.01498871e+04 2.93679449e+05 3.18727981e+04
 7.34198727e+04 1.12687370e+04 1.83525620e+04 3.98370848e+03
 2.23620855e+03 8.21578852e+02 4.56047706e+02 2.49328963e+02
 1.21571230e+02 9.24992329e+01 3.75740095e+01 3.83425224e+01
 4.74111013e+00 8.11755157e+00 3.91204366e-01 1.24973460e+00
 8.59863371e+00 4.29557399e+01 4.90850604e-01 1.19859112e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.31997660289182
cond(S) = 56.39192520320143
E1 = -688.8354535924855  E_coul = 184.9154217370651
init E= -503.92003185542
    CPU time for initialize scf      0.03 sec, wall time      0.03 sec
  HOMO = -0.680893797200142  LUMO = 84.9554416516844
  mo_energy =
[-1.21650472e+02 -1.32811695e+01 -7.62160300e+00 -7.62160300e+00
 -7.62160300e+00 -1.65070202e+00 -6.80893797e-01 -6.80893797e-01
 -6.80893797e-01  8.49554417e+01  6.76034737e+02  3.93407273e+03
  2.96215495e+04  1.54738794e+05  6.64890943e+05  2.71962683e+06
  1.10459649e+07  4.65100861e+07]
E1 = -706.5850856642065  E_coul = 198.94577902514519
cycle= 1 E= -507.639306639061  delta_E= -3.72  |g|= 0.318  |ddm|= 0.301
    CPU time for cycle= 1      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.420615
diis-c [-0.17691732  1.        ]
  HOMO = -0.236273231588273  LUMO = 86.2883478423219
  mo_energy =
[-1.20262405e+02 -1.22530695e+01 -6.65306591e+00 -6.65306591e+00
 -6.65306591e+00 -1.16348345e+00 -2.36273232e-01 -2.36273232e-01
 -2.36273232e-01  8.62883478e+01  6.77405461e+02  3.93532440e+03
  2.96226383e+04  1.54739811e+05  6.64891930e+05  2.71962780e+06
  1.10459659e+07  4.65100871e+07]
E1 = -706.5535995413957  E_coul = 198.913864220187
cycle= 2 E= -507.639735321209  delta_E= -0.000429  |g|= 0.00475  |ddm|= 0.0143
    CPU time for cycle= 2      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.00504451
diis-c [-2.54025048e-05 -5.01987043e-04  1.00050199e+00]
  HOMO = -0.236448810547704  LUMO = 86.2848263722707
  mo_energy =
[-1.20271057e+02 -1.22542605e+01 -6.65491058e+00 -6.65491058e+00
 -6.65491058e+00 -1.16354835e+00 -2.36448811e-01 -2.36448811e-01
 -2.36448811e-01  8.62848264e+01  6.77394868e+02  3.93530850e+03
  2.96226190e+04  1.54739791e+05  6.64891910e+05  2.71962778e+06
  1.10459659e+07  4.65100871e+07]
E1 = -706.5531582250044  E_coul = 198.91342279338087
cycle= 3 E= -507.639735431624  delta_E= -1.1e-07  |g|= 9.49e-05  |ddm|= 0.000202
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.000126942
diis-c [-3.96715815e-10  3.34430995e-05 -2.54828179e-02  1.02544937e+00]
  HOMO = -0.236451029445001  LUMO = 86.2847816061791
  mo_energy =
[-1.20271170e+02 -1.22542764e+01 -6.65493762e+00 -6.65493762e+00
 -6.65493762e+00 -1.16354901e+00 -2.36451029e-01 -2.36451029e-01
 -2.36451029e-01  8.62847816e+01  6.77394751e+02  3.93530835e+03
  2.96226189e+04  1.54739791e+05  6.64891910e+05  2.71962778e+06
  1.10459659e+07  4.65100871e+07]
E1 = -706.553150961298  E_coul = 198.91341552963448
cycle= 4 E= -507.639735431664  delta_E= -4e-11  |g|= 3.74e-07  |ddm|= 3.46e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.553150961298  E_coul = 198.91341552963448
  HOMO = -0.236451013082473  LUMO = 86.2847819449065
  mo_energy =
[-1.20271169e+02 -1.22542763e+01 -6.65493745e+00 -6.65493745e+00
 -6.65493745e+00 -1.16354900e+00 -2.36451013e-01 -2.36451013e-01
 -2.36451013e-01  8.62847819e+01  6.77394752e+02  3.93530835e+03
  2.96226189e+04  1.54739791e+05  6.64891910e+05  2.71962778e+06
  1.10459659e+07  4.65100871e+07]
E1 = -706.5531509984384  E_coul = 198.91341556677517
Extra cycle  E= -507.639735431663  delta_E= 3.41e-13  |g|= 6.46e-09  |ddm|= 1.65e-08
    CPU time for scf_cycle      0.11 sec, wall time      0.11 sec
exp = [1.87954849e+07 4.69887121e+06 1.17471780e+06 2.93679449e+05
 7.34198727e+04 1.83525620e+04 2.23620855e+03 4.56047706e+02
 1.21571230e+02 3.75740095e+01 4.74111013e+00 3.91204366e-01
 8.59863371e+00 4.90850604e-01]
E = -507.6397354316632
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="BFGS",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((14, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.6988712134173084e+06,1.1747178033543271e+06,2.9367945083858178e+05,7.3419865393677101e+04,1.8353927627435987e+04,2.2341424145819028e+03,4.5688904996449571e+02,1.2173317272260677e+02,3.7593061247508530e+01,4.7412722556720146e+00,3.9120358491841306e-01,8.5986297237246045e+00,4.9084868336327880e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "12s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:15:58 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  18795484.8537        1
[INPUT] 0    0    [1    /1   ]  4698871.21341        1
[INPUT] 0    0    [1    /1   ]  1174717.80335        1
[INPUT] 0    0    [1    /1   ]  293679.448598        1
[INPUT] 0    0    [1    /1   ]  73419.872668         1
[INPUT] 0    0    [1    /1   ]  18352.5620386        1
[INPUT] 0    0    [1    /1   ]  2236.20854698        1
[INPUT] 0    0    [1    /1   ]  456.047705929        1
[INPUT] 0    0    [1    /1   ]  121.571229513        1
[INPUT] 0    0    [1    /1   ]  37.5740095499        1
[INPUT] 0    0    [1    /1   ]  4.74111012513        1
[INPUT] 0    0    [1    /1   ]  0.391204365764       1
[INPUT] 1    0    [1    /1   ]  8.59863371183        1
[INPUT] 1    0    [1    /1   ]  0.490850603671       1

nuclear repulsion = 0
number of shells = 14
number of NR pGTOs = 18
number of NR cGTOs = 18
basis = {'Ar': [[0, [18795484.85366926, 1.0]], [0, [4698871.213413477, 1.0]], [0, [1174717.8033524926, 1.0]], [0, [293679.4485982736, 1.0]], [0, [73419.87266804285, 1.0]], [0, [18352.562038581334, 1.0]], [0, [2236.2085469842323, 1.0]], [0, [456.0477059291701, 1.0]], [0, [121.57122951345974, 1.0]], [0, [37.57400954991134, 1.0]], [0, [4.741110125131677, 1.0]], [0, [0.3912043657640217, 1.0]], [1, [8.598633711834113, 1.0]], [1, [0.4908506036712745, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [18795484.85366926]
bas 1, expnt(s) = [4698871.21341348]
bas 2, expnt(s) = [1174717.80335249]
bas 3, expnt(s) = [293679.44859827]
bas 4, expnt(s) = [73419.87266804]
bas 5, expnt(s) = [18352.56203858]
bas 6, expnt(s) = [2236.20854698]
bas 7, expnt(s) = [456.04770593]
bas 8, expnt(s) = [121.57122951]
bas 9, expnt(s) = [37.57400955]
bas 10, expnt(s) = [4.74111013]
bas 11, expnt(s) = [0.39120437]
bas 12, expnt(s) = [8.59863371]
bas 13, expnt(s) = [0.4908506]
CPU time:       138.90
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  0  1  1  0 42 43  0]
 [ 0  0  1  1  0 44 45  0]
 [ 0  0  1  1  0 46 47  0]
 [ 0  1  1  1  0 48 49  0]
 [ 0  1  1  1  0 50 51  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.87954849e+07 7.21199097e+05 4.69887121e+06 2.54982386e+05
 1.17471780e+06 9.01498871e+04 2.93679449e+05 3.18727981e+04
 7.34198727e+04 1.12687370e+04 1.83525620e+04 3.98370848e+03
 2.23620855e+03 8.21578852e+02 4.56047706e+02 2.49328963e+02
 1.21571230e+02 9.24992329e+01 3.75740095e+01 3.83425224e+01
 4.74111013e+00 8.11755157e+00 3.91204366e-01 1.24973460e+00
 8.59863371e+00 4.29557399e+01 4.90850604e-01 1.19859112e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.31997660289182
cond(S) = 56.39192520320143
E1 = -688.8354535924855  E_coul = 184.9154217370651
init E= -503.92003185542
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.680893797200142  LUMO = 84.9554416516844
  mo_energy =
[-1.21650472e+02 -1.32811695e+01 -7.62160300e+00 -7.62160300e+00
 -7.62160300e+00 -1.65070202e+00 -6.80893797e-01 -6.80893797e-01
 -6.80893797e-01  8.49554417e+01  6.76034737e+02  3.93407273e+03
  2.96215495e+04  1.54738794e+05  6.64890943e+05  2.71962683e+06
  1.10459649e+07  4.65100861e+07]
E1 = -706.5850856642065  E_coul = 198.94577902514519
cycle= 1 E= -507.639306639061  delta_E= -3.72  |g|= 0.318  |ddm|= 0.301
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.420615
diis-c [-0.17691732  1.        ]
  HOMO = -0.236273231588273  LUMO = 86.2883478423219
  mo_energy =
[-1.20262405e+02 -1.22530695e+01 -6.65306591e+00 -6.65306591e+00
 -6.65306591e+00 -1.16348345e+00 -2.36273232e-01 -2.36273232e-01
 -2.36273232e-01  8.62883478e+01  6.77405461e+02  3.93532440e+03
  2.96226383e+04  1.54739811e+05  6.64891930e+05  2.71962780e+06
  1.10459659e+07  4.65100871e+07]
E1 = -706.5535995413957  E_coul = 198.913864220187
cycle= 2 E= -507.639735321209  delta_E= -0.000429  |g|= 0.00475  |ddm|= 0.0143
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00504451
diis-c [-2.54025048e-05 -5.01987043e-04  1.00050199e+00]
  HOMO = -0.236448810547704  LUMO = 86.2848263722707
  mo_energy =
[-1.20271057e+02 -1.22542605e+01 -6.65491058e+00 -6.65491058e+00
 -6.65491058e+00 -1.16354835e+00 -2.36448811e-01 -2.36448811e-01
 -2.36448811e-01  8.62848264e+01  6.77394868e+02  3.93530850e+03
  2.96226190e+04  1.54739791e+05  6.64891910e+05  2.71962778e+06
  1.10459659e+07  4.65100871e+07]
E1 = -706.5531582250044  E_coul = 198.91342279338087
cycle= 3 E= -507.639735431624  delta_E= -1.1e-07  |g|= 9.49e-05  |ddm|= 0.000202
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.000126942
diis-c [-3.96715815e-10  3.34430995e-05 -2.54828179e-02  1.02544937e+00]
  HOMO = -0.236451029445001  LUMO = 86.2847816061791
  mo_energy =
[-1.20271170e+02 -1.22542764e+01 -6.65493762e+00 -6.65493762e+00
 -6.65493762e+00 -1.16354901e+00 -2.36451029e-01 -2.36451029e-01
 -2.36451029e-01  8.62847816e+01  6.77394751e+02  3.93530835e+03
  2.96226189e+04  1.54739791e+05  6.64891910e+05  2.71962778e+06
  1.10459659e+07  4.65100871e+07]
E1 = -706.553150961298  E_coul = 198.91341552963448
cycle= 4 E= -507.639735431664  delta_E= -4e-11  |g|= 3.74e-07  |ddm|= 3.46e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.553150961298  E_coul = 198.91341552963448
  HOMO = -0.236451013082473  LUMO = 86.2847819449065
  mo_energy =
[-1.20271169e+02 -1.22542763e+01 -6.65493745e+00 -6.65493745e+00
 -6.65493745e+00 -1.16354900e+00 -2.36451013e-01 -2.36451013e-01
 -2.36451013e-01  8.62847819e+01  6.77394752e+02  3.93530835e+03
  2.96226189e+04  1.54739791e+05  6.64891910e+05  2.71962778e+06
  1.10459659e+07  4.65100871e+07]
E1 = -706.5531509984384  E_coul = 198.91341556677517
Extra cycle  E= -507.639735431663  delta_E= 3.41e-13  |g|= 6.46e-09  |ddm|= 1.65e-08
    CPU time for scf_cycle      0.10 sec, wall time      0.11 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 56.39192520320143
E1 = -706.5531509984384  E_coul = 198.91341556677517
init E= -507.639735431663
    CPU time for initialize scf      0.12 sec, wall time      0.12 sec
  HOMO = -0.236451012890982  LUMO = 86.2847819490496
  mo_energy =
[-1.20271169e+02 -1.22542763e+01 -6.65493745e+00 -6.65493745e+00
 -6.65493745e+00 -1.16354900e+00 -2.36451013e-01 -2.36451013e-01
 -2.36451013e-01  8.62847819e+01  6.77394752e+02  3.93530835e+03
  2.96226189e+04  1.54739791e+05  6.64891910e+05  2.71962778e+06
  1.10459659e+07  4.65100871e+07]
E1 = -706.5531509990012  E_coul = 198.9134155673378
cycle= 1 E= -507.639735431663  delta_E= -2.27e-13  |g|= 2.37e-10  |ddm|= 2.55e-10
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -706.5531509990012  E_coul = 198.9134155673378
  HOMO = -0.236451012888272  LUMO = 86.2847819491079
  mo_energy =
[-1.20271169e+02 -1.22542763e+01 -6.65493745e+00 -6.65493745e+00
 -6.65493745e+00 -1.16354900e+00 -2.36451013e-01 -2.36451013e-01
 -2.36451013e-01  8.62847819e+01  6.77394752e+02  3.93530835e+03
  2.96226189e+04  1.54739791e+05  6.64891910e+05  2.71962778e+06
  1.10459659e+07  4.65100871e+07]
E1 = -706.5531509990105  E_coul = 198.91341556734727
Extra cycle  E= -507.639735431663  delta_E= 1.71e-13  |g|= 1.42e-10  |ddm|= 4.56e-12
    CPU time for scf_cycle      0.19 sec, wall time      0.19 sec
exp = [1.87954849e+07 4.69887121e+06 1.17471780e+06 2.93679449e+05
 7.34198727e+04 1.83525620e+04 2.23620855e+03 4.56047706e+02
 1.21571230e+02 3.75740095e+01 4.74111013e+00 3.91204366e-01
 8.59863371e+00 4.90850604e-01]
grad_E = [-1.14163934e-13  1.78267342e-11  7.10405797e-12  1.04293941e-08
 -3.46839835e-08  6.35063549e-06 -5.23906242e-06 -2.92400485e-05
  4.80298811e-05  7.25198158e-06 -3.39389684e-06  2.54122932e-05
  7.80939040e-06  5.10785326e-05]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="BFGS",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((14, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.6988712134173084e+06,1.1747178033543271e+06,2.9367945083858178e+05,7.3419865393677101e+04,1.8353927627435987e+04,2.2341424145819028e+03,4.5688904996449571e+02,1.2173317272260677e+02,3.7593061247508530e+01,4.7412722556720146e+00,3.9120358491841306e-01,8.5986297237246045e+00,4.9084868336327880e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "12s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:16:01 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  18795484.8537        1
[INPUT] 0    0    [1    /1   ]  4698871.21341        1
[INPUT] 0    0    [1    /1   ]  1174717.80335        1
[INPUT] 0    0    [1    /1   ]  293679.448655        1
[INPUT] 0    0    [1    /1   ]  73419.8724826        1
[INPUT] 0    0    [1    /1   ]  18352.5968704        1
[INPUT] 0    0    [1    /1   ]  2236.15543895        1
[INPUT] 0    0    [1    /1   ]  456.072272039        1
[INPUT] 0    0    [1    /1   ]  121.571076704        1
[INPUT] 0    0    [1    /1   ]  37.57271624          1
[INPUT] 0    0    [1    /1   ]  4.7411116998         1
[INPUT] 0    0    [1    /1   ]  0.391205187539       1
[INPUT] 1    0    [1    /1   ]  8.5986452772         1
[INPUT] 1    0    [1    /1   ]  0.49085216971        1

nuclear repulsion = 0
number of shells = 14
number of NR pGTOs = 18
number of NR cGTOs = 18
basis = {'Ar': [[0, [18795484.85366926, 1.0]], [0, [4698871.213413575, 1.0]], [0, [1174717.8033525397, 1.0]], [0, [293679.44865541573, 1.0]], [0, [73419.87248257635, 1.0]], [0, [18352.596870417256, 1.0]], [0, [2236.155438951064, 1.0]], [0, [456.07227203936657, 1.0]], [0, [121.57107670373226, 1.0]], [0, [37.572716239955945, 1.0]], [0, [4.741111699795709, 1.0]], [0, [0.39120518753898215, 1.0]], [1, [8.598645277200944, 1.0]], [1, [0.49085216970968154, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [18795484.85366926]
bas 1, expnt(s) = [4698871.21341357]
bas 2, expnt(s) = [1174717.80335254]
bas 3, expnt(s) = [293679.44865542]
bas 4, expnt(s) = [73419.87248258]
bas 5, expnt(s) = [18352.59687042]
bas 6, expnt(s) = [2236.15543895]
bas 7, expnt(s) = [456.07227204]
bas 8, expnt(s) = [121.5710767]
bas 9, expnt(s) = [37.57271624]
bas 10, expnt(s) = [4.7411117]
bas 11, expnt(s) = [0.39120519]
bas 12, expnt(s) = [8.59864528]
bas 13, expnt(s) = [0.49085217]
CPU time:       142.29
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  0  1  1  0 42 43  0]
 [ 0  0  1  1  0 44 45  0]
 [ 0  0  1  1  0 46 47  0]
 [ 0  1  1  1  0 48 49  0]
 [ 0  1  1  1  0 50 51  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.87954849e+07 7.21199097e+05 4.69887121e+06 2.54982386e+05
 1.17471780e+06 9.01498871e+04 2.93679449e+05 3.18727981e+04
 7.34198725e+04 1.12687370e+04 1.83525969e+04 3.98371415e+03
 2.23615544e+03 8.21564218e+02 4.56072272e+02 2.49339036e+02
 1.21571077e+02 9.24991457e+01 3.75727162e+01 3.83415326e+01
 4.74111170e+00 8.11755360e+00 3.91205188e-01 1.24973657e+00
 8.59864528e+00 4.29558121e+01 4.90852170e-01 1.19859590e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.31997450900259
cond(S) = 56.391408522486806
E1 = -688.8354465710047  E_coul = 184.91552709426168
init E= -503.919919476743
    CPU time for initialize scf      0.03 sec, wall time      0.03 sec
  HOMO = -0.680891680305346  LUMO = 84.9525769507849
  mo_energy =
[-1.21650462e+02 -1.32811558e+01 -7.62159630e+00 -7.62159630e+00
 -7.62159630e+00 -1.65069985e+00 -6.80891680e-01 -6.80891680e-01
 -6.80891680e-01  8.49525770e+01  6.76049484e+02  3.93408466e+03
  2.96214919e+04  1.54738788e+05  6.64890964e+05  2.71962685e+06
  1.10459650e+07  4.65100861e+07]
E1 = -706.5852114768486  E_coul = 198.94590465600228
cycle= 1 E= -507.639306820846  delta_E= -3.72  |g|= 0.318  |ddm|= 0.301
    CPU time for cycle= 1      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.420608
diis-c [-0.17691133  1.        ]
  HOMO = -0.236269328927308  LUMO = 86.2854801649131
  mo_energy =
[-1.20262398e+02 -1.22530544e+01 -6.65305755e+00 -6.65305755e+00
 -6.65305755e+00 -1.16347974e+00 -2.36269329e-01 -2.36269329e-01
 -2.36269329e-01  8.62854802e+01  6.77420199e+02  3.93533633e+03
  2.96225806e+04  1.54739806e+05  6.64891951e+05  2.71962783e+06
  1.10459659e+07  4.65100871e+07]
E1 = -706.5537234888858  E_coul = 198.91398795827965
cycle= 2 E= -507.639735530606  delta_E= -0.000429  |g|= 0.00475  |ddm|= 0.0143
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00504476
diis-c [-2.54051013e-05 -5.01767631e-04  1.00050177e+00]
  HOMO = -0.236444920275143  LUMO = 86.281958527779
  mo_energy =
[-1.20271050e+02 -1.22542455e+01 -6.65490233e+00 -6.65490233e+00
 -6.65490233e+00 -1.16354464e+00 -2.36444920e-01 -2.36444920e-01
 -2.36444920e-01  8.62819585e+01  6.77409606e+02  3.93532042e+03
  2.96225613e+04  1.54739786e+05  6.64891931e+05  2.71962781e+06
  1.10459659e+07  4.65100871e+07]
E1 = -706.5532821393165  E_coul = 198.91354649828475
cycle= 3 E= -507.639735641032  delta_E= -1.1e-07  |g|= 9.49e-05  |ddm|= 0.000202
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.000126951
diis-c [-3.96777236e-10  3.34403337e-05 -2.54833608e-02  1.02544992e+00]
  HOMO = -0.236447139408886  LUMO = 86.2819137579331
  mo_energy =
[-1.20271164e+02 -1.22542613e+01 -6.65492937e+00 -6.65492937e+00
 -6.65492937e+00 -1.16354530e+00 -2.36447139e-01 -2.36447139e-01
 -2.36447139e-01  8.62819138e+01  6.77409489e+02  3.93532027e+03
  2.96225612e+04  1.54739786e+05  6.64891931e+05  2.71962781e+06
  1.10459659e+07  4.65100871e+07]
E1 = -706.5532748748251  E_coul = 198.91353923375345
cycle= 4 E= -507.639735641072  delta_E= -3.99e-11  |g|= 3.75e-07  |ddm|= 3.46e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.5532748748251  E_coul = 198.91353923375345
  HOMO = -0.236447123044211  LUMO = 86.2819140966932
  mo_energy =
[-1.20271163e+02 -1.22542612e+01 -6.65492921e+00 -6.65492921e+00
 -6.65492921e+00 -1.16354529e+00 -2.36447123e-01 -2.36447123e-01
 -2.36447123e-01  8.62819141e+01  6.77409490e+02  3.93532027e+03
  2.96225612e+04  1.54739786e+05  6.64891931e+05  2.71962781e+06
  1.10459659e+07  4.65100871e+07]
E1 = -706.5532749119708  E_coul = 198.91353927089926
Extra cycle  E= -507.639735641072  delta_E= 1.14e-13  |g|= 6.47e-09  |ddm|= 1.65e-08
    CPU time for scf_cycle      0.10 sec, wall time      0.11 sec
exp = [1.87954849e+07 4.69887121e+06 1.17471780e+06 2.93679449e+05
 7.34198725e+04 1.83525969e+04 2.23615544e+03 4.56072272e+02
 1.21571077e+02 3.75727162e+01 4.74111170e+00 3.91205188e-01
 8.59864528e+00 4.90852170e-01]
E = -507.6397356410715
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="BFGS",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((14, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.6988712134173084e+06,1.1747178033543271e+06,2.9367945083858178e+05,7.3419865393677101e+04,1.8353927627435987e+04,2.2341424145819028e+03,4.5688904996449571e+02,1.2173317272260677e+02,3.7593061247508530e+01,4.7412722556720146e+00,3.9120358491841306e-01,8.5986297237246045e+00,4.9084868336327880e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "12s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:16:02 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  18795484.8537        1
[INPUT] 0    0    [1    /1   ]  4698871.21341        1
[INPUT] 0    0    [1    /1   ]  1174717.80335        1
[INPUT] 0    0    [1    /1   ]  293679.448655        1
[INPUT] 0    0    [1    /1   ]  73419.8724826        1
[INPUT] 0    0    [1    /1   ]  18352.5968704        1
[INPUT] 0    0    [1    /1   ]  2236.15543895        1
[INPUT] 0    0    [1    /1   ]  456.072272039        1
[INPUT] 0    0    [1    /1   ]  121.571076704        1
[INPUT] 0    0    [1    /1   ]  37.57271624          1
[INPUT] 0    0    [1    /1   ]  4.7411116998         1
[INPUT] 0    0    [1    /1   ]  0.391205187539       1
[INPUT] 1    0    [1    /1   ]  8.5986452772         1
[INPUT] 1    0    [1    /1   ]  0.49085216971        1

nuclear repulsion = 0
number of shells = 14
number of NR pGTOs = 18
number of NR cGTOs = 18
basis = {'Ar': [[0, [18795484.85366926, 1.0]], [0, [4698871.213413575, 1.0]], [0, [1174717.8033525397, 1.0]], [0, [293679.44865541573, 1.0]], [0, [73419.87248257635, 1.0]], [0, [18352.596870417256, 1.0]], [0, [2236.155438951064, 1.0]], [0, [456.07227203936657, 1.0]], [0, [121.57107670373226, 1.0]], [0, [37.572716239955945, 1.0]], [0, [4.741111699795709, 1.0]], [0, [0.39120518753898215, 1.0]], [1, [8.598645277200944, 1.0]], [1, [0.49085216970968154, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [18795484.85366926]
bas 1, expnt(s) = [4698871.21341357]
bas 2, expnt(s) = [1174717.80335254]
bas 3, expnt(s) = [293679.44865542]
bas 4, expnt(s) = [73419.87248258]
bas 5, expnt(s) = [18352.59687042]
bas 6, expnt(s) = [2236.15543895]
bas 7, expnt(s) = [456.07227204]
bas 8, expnt(s) = [121.5710767]
bas 9, expnt(s) = [37.57271624]
bas 10, expnt(s) = [4.7411117]
bas 11, expnt(s) = [0.39120519]
bas 12, expnt(s) = [8.59864528]
bas 13, expnt(s) = [0.49085217]
CPU time:       142.94
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  0  1  1  0 42 43  0]
 [ 0  0  1  1  0 44 45  0]
 [ 0  0  1  1  0 46 47  0]
 [ 0  1  1  1  0 48 49  0]
 [ 0  1  1  1  0 50 51  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.87954849e+07 7.21199097e+05 4.69887121e+06 2.54982386e+05
 1.17471780e+06 9.01498871e+04 2.93679449e+05 3.18727981e+04
 7.34198725e+04 1.12687370e+04 1.83525969e+04 3.98371415e+03
 2.23615544e+03 8.21564218e+02 4.56072272e+02 2.49339036e+02
 1.21571077e+02 9.24991457e+01 3.75727162e+01 3.83415326e+01
 4.74111170e+00 8.11755360e+00 3.91205188e-01 1.24973657e+00
 8.59864528e+00 4.29558121e+01 4.90852170e-01 1.19859590e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.31997450900259
cond(S) = 56.391408522486806
E1 = -688.8354465710047  E_coul = 184.91552709426168
init E= -503.919919476743
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.680891680305346  LUMO = 84.9525769507849
  mo_energy =
[-1.21650462e+02 -1.32811558e+01 -7.62159630e+00 -7.62159630e+00
 -7.62159630e+00 -1.65069985e+00 -6.80891680e-01 -6.80891680e-01
 -6.80891680e-01  8.49525770e+01  6.76049484e+02  3.93408466e+03
  2.96214919e+04  1.54738788e+05  6.64890964e+05  2.71962685e+06
  1.10459650e+07  4.65100861e+07]
E1 = -706.5852114768486  E_coul = 198.94590465600228
cycle= 1 E= -507.639306820846  delta_E= -3.72  |g|= 0.318  |ddm|= 0.301
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.420608
diis-c [-0.17691133  1.        ]
  HOMO = -0.236269328927308  LUMO = 86.2854801649131
  mo_energy =
[-1.20262398e+02 -1.22530544e+01 -6.65305755e+00 -6.65305755e+00
 -6.65305755e+00 -1.16347974e+00 -2.36269329e-01 -2.36269329e-01
 -2.36269329e-01  8.62854802e+01  6.77420199e+02  3.93533633e+03
  2.96225806e+04  1.54739806e+05  6.64891951e+05  2.71962783e+06
  1.10459659e+07  4.65100871e+07]
E1 = -706.5537234888858  E_coul = 198.91398795827965
cycle= 2 E= -507.639735530606  delta_E= -0.000429  |g|= 0.00475  |ddm|= 0.0143
    CPU time for cycle= 2      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.00504476
diis-c [-2.54051013e-05 -5.01767631e-04  1.00050177e+00]
  HOMO = -0.236444920275143  LUMO = 86.281958527779
  mo_energy =
[-1.20271050e+02 -1.22542455e+01 -6.65490233e+00 -6.65490233e+00
 -6.65490233e+00 -1.16354464e+00 -2.36444920e-01 -2.36444920e-01
 -2.36444920e-01  8.62819585e+01  6.77409606e+02  3.93532042e+03
  2.96225613e+04  1.54739786e+05  6.64891931e+05  2.71962781e+06
  1.10459659e+07  4.65100871e+07]
E1 = -706.5532821393165  E_coul = 198.91354649828475
cycle= 3 E= -507.639735641032  delta_E= -1.1e-07  |g|= 9.49e-05  |ddm|= 0.000202
    CPU time for cycle= 3      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.000126951
diis-c [-3.96777236e-10  3.34403337e-05 -2.54833608e-02  1.02544992e+00]
  HOMO = -0.236447139408886  LUMO = 86.2819137579331
  mo_energy =
[-1.20271164e+02 -1.22542613e+01 -6.65492937e+00 -6.65492937e+00
 -6.65492937e+00 -1.16354530e+00 -2.36447139e-01 -2.36447139e-01
 -2.36447139e-01  8.62819138e+01  6.77409489e+02  3.93532027e+03
  2.96225612e+04  1.54739786e+05  6.64891931e+05  2.71962781e+06
  1.10459659e+07  4.65100871e+07]
E1 = -706.5532748748251  E_coul = 198.91353923375345
cycle= 4 E= -507.639735641072  delta_E= -3.99e-11  |g|= 3.75e-07  |ddm|= 3.46e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.5532748748251  E_coul = 198.91353923375345
  HOMO = -0.236447123044211  LUMO = 86.2819140966932
  mo_energy =
[-1.20271163e+02 -1.22542612e+01 -6.65492921e+00 -6.65492921e+00
 -6.65492921e+00 -1.16354529e+00 -2.36447123e-01 -2.36447123e-01
 -2.36447123e-01  8.62819141e+01  6.77409490e+02  3.93532027e+03
  2.96225612e+04  1.54739786e+05  6.64891931e+05  2.71962781e+06
  1.10459659e+07  4.65100871e+07]
E1 = -706.5532749119708  E_coul = 198.91353927089926
Extra cycle  E= -507.639735641072  delta_E= 1.14e-13  |g|= 6.47e-09  |ddm|= 1.65e-08
    CPU time for scf_cycle      0.10 sec, wall time      0.10 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 56.391408522486806
E1 = -706.5532749119708  E_coul = 198.91353927089926
init E= -507.639735641072
    CPU time for initialize scf      0.12 sec, wall time      0.12 sec
  HOMO = -0.236447122852683  LUMO = 86.2819141008385
  mo_energy =
[-1.20271163e+02 -1.22542612e+01 -6.65492921e+00 -6.65492921e+00
 -6.65492921e+00 -1.16354529e+00 -2.36447123e-01 -2.36447123e-01
 -2.36447123e-01  8.62819141e+01  6.77409490e+02  3.93532027e+03
  2.96225612e+04  1.54739786e+05  6.64891931e+05  2.71962781e+06
  1.10459659e+07  4.65100871e+07]
E1 = -706.553274912533  E_coul = 198.91353927146145
cycle= 1 E= -507.639735641072  delta_E=    0  |g|= 1.79e-10  |ddm|= 2.55e-10
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -706.553274912533  E_coul = 198.91353927146145
  HOMO = -0.236447122849983  LUMO = 86.2819141008968
  mo_energy =
[-1.20271163e+02 -1.22542612e+01 -6.65492921e+00 -6.65492921e+00
 -6.65492921e+00 -1.16354529e+00 -2.36447123e-01 -2.36447123e-01
 -2.36447123e-01  8.62819141e+01  6.77409490e+02  3.93532027e+03
  2.96225612e+04  1.54739786e+05  6.64891931e+05  2.71962781e+06
  1.10459659e+07  4.65100871e+07]
E1 = -706.5532749125425  E_coul = 198.91353927147105
Extra cycle  E= -507.639735641071  delta_E= 5.68e-14  |g|= 2.62e-10  |ddm|= 4.58e-12
    CPU time for scf_cycle      0.19 sec, wall time      0.19 sec
exp = [1.87954849e+07 4.69887121e+06 1.17471780e+06 2.93679449e+05
 7.34198725e+04 1.83525969e+04 2.23615544e+03 4.56072272e+02
 1.21571077e+02 3.75727162e+01 4.74111170e+00 3.91205188e-01
 8.59864528e+00 4.90852170e-01]
grad_E = [-1.14074088e-13  1.78324640e-11  7.15150451e-12  1.04326603e-08
 -3.46691710e-08  6.35286230e-06 -5.39637619e-06 -2.77404377e-05
  4.54322613e-05  2.50376212e-06 -6.65051560e-06  4.93485104e-05
  1.48135756e-05  9.97852835e-05]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="BFGS",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((14, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.6988712134173084e+06,1.1747178033543271e+06,2.9367945083858178e+05,7.3419865393677101e+04,1.8353927627435987e+04,2.2341424145819028e+03,4.5688904996449571e+02,1.2173317272260677e+02,3.7593061247508530e+01,4.7412722556720146e+00,3.9120358491841306e-01,8.5986297237246045e+00,4.9084868336327880e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "12s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:16:05 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  18795484.8537        1
[INPUT] 0    0    [1    /1   ]  4698871.21341        1
[INPUT] 0    0    [1    /1   ]  1174717.80335        1
[INPUT] 0    0    [1    /1   ]  293679.448723        1
[INPUT] 0    0    [1    /1   ]  73419.8722634        1
[INPUT] 0    0    [1    /1   ]  18352.6380367        1
[INPUT] 0    0    [1    /1   ]  2236.09237792        1
[INPUT] 0    0    [1    /1   ]  456.10355609         1
[INPUT] 0    0    [1    /1   ]  121.567756807        1
[INPUT] 0    0    [1    /1   ]  37.5700436147        1
[INPUT] 0    0    [1    /1   ]  4.74111291851        1
[INPUT] 0    0    [1    /1   ]  0.391206247122       1
[INPUT] 1    0    [1    /1   ]  8.59866204922        1
[INPUT] 1    0    [1    /1   ]  0.490854423905       1

nuclear repulsion = 0
number of shells = 14
number of NR pGTOs = 18
number of NR cGTOs = 18
basis = {'Ar': [[0, [18795484.85366926, 1.0]], [0, [4698871.21341369, 1.0]], [0, [1174717.8033525953, 1.0]], [0, [293679.44872294884, 1.0]], [0, [73419.87226343893, 1.0]], [0, [18352.638036674456, 1.0]], [0, [2236.0923779178806, 1.0]], [0, [456.1035560904485, 1.0]], [0, [121.56775680737498, 1.0]], [0, [37.57004361471834, 1.0]], [0, [4.741112918508279, 1.0]], [0, [0.391206247121689, 1.0]], [1, [8.598662049215712, 1.0]], [1, [0.49085442390499434, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [18795484.85366926]
bas 1, expnt(s) = [4698871.21341369]
bas 2, expnt(s) = [1174717.8033526]
bas 3, expnt(s) = [293679.44872295]
bas 4, expnt(s) = [73419.87226344]
bas 5, expnt(s) = [18352.63803667]
bas 6, expnt(s) = [2236.09237792]
bas 7, expnt(s) = [456.10355609]
bas 8, expnt(s) = [121.56775681]
bas 9, expnt(s) = [37.57004361]
bas 10, expnt(s) = [4.74111292]
bas 11, expnt(s) = [0.39120625]
bas 12, expnt(s) = [8.59866205]
bas 13, expnt(s) = [0.49085442]
CPU time:       146.35
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  0  1  1  0 42 43  0]
 [ 0  0  1  1  0 44 45  0]
 [ 0  0  1  1  0 46 47  0]
 [ 0  1  1  1  0 48 49  0]
 [ 0  1  1  1  0 50 51  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.87954849e+07 7.21199097e+05 4.69887121e+06 2.54982386e+05
 1.17471780e+06 9.01498871e+04 2.93679449e+05 3.18727981e+04
 7.34198723e+04 1.12687370e+04 1.83526380e+04 3.98372085e+03
 2.23609238e+03 8.21546841e+02 4.56103556e+02 2.49351863e+02
 1.21567757e+02 9.24972512e+01 3.75700436e+01 3.83394871e+01
 4.74111292e+00 8.11755516e+00 3.91206247e-01 1.24973911e+00
 8.59866205e+00 4.29559168e+01 4.90854424e-01 1.19860278e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319971574629015
cond(S) = 56.3904012702527
E1 = -688.8354422872835  E_coul = 184.91567454040353
init E= -503.91976774688
    CPU time for initialize scf      0.03 sec, wall time      0.03 sec
  HOMO = -0.680888673539212  LUMO = 84.9454405055094
  mo_energy =
[-1.21650449e+02 -1.32811357e+01 -7.62158707e+00 -7.62158707e+00
 -7.62158707e+00 -1.65069658e+00 -6.80888674e-01 -6.80888674e-01
 -6.80888674e-01  8.49454405e+01  6.76055973e+02  3.93409005e+03
  2.96214174e+04  1.54738777e+05  6.64890984e+05  2.71962688e+06
  1.10459650e+07  4.65100862e+07]
E1 = -706.5853861337348  E_coul = 198.9460790134105
cycle= 1 E= -507.639307120324  delta_E= -3.72  |g|= 0.318  |ddm|= 0.301
    CPU time for cycle= 1      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.420597
diis-c [-0.17690203  1.        ]
  HOMO = -0.236263819278015  LUMO = 86.2783356057513
  mo_energy =
[-1.20262389e+02 -1.22530324e+01 -6.65304604e+00 -6.65304604e+00
 -6.65304604e+00 -1.16347440e+00 -2.36263819e-01 -2.36263819e-01
 -2.36263819e-01  8.62783356e+01  6.77426675e+02  3.93534169e+03
  2.96225061e+04  1.54739794e+05  6.64891971e+05  2.71962785e+06
  1.10459660e+07  4.65100871e+07]
E1 = -706.553893839195  E_coul = 198.91415794600496
cycle= 2 E= -507.63973589319  delta_E= -0.000429  |g|= 0.00475  |ddm|= 0.0143
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00504526
diis-c [-2.54102239e-05 -5.01308470e-04  1.00050131e+00]
  HOMO = -0.23643943926004  LUMO = 86.2748136173314
  mo_energy =
[-1.20271042e+02 -1.22542237e+01 -6.65489110e+00 -6.65489110e+00
 -6.65489110e+00 -1.16353931e+00 -2.36439439e-01 -2.36439439e-01
 -2.36439439e-01  8.62748136e+01  6.77416080e+02  3.93532578e+03
  2.96224869e+04  1.54739774e+05  6.64891951e+05  2.71962783e+06
  1.10459659e+07  4.65100871e+07]
E1 = -706.5534524096382  E_coul = 198.9137164059978
cycle= 3 E= -507.63973600364  delta_E= -1.1e-07  |g|= 9.49e-05  |ddm|= 0.000202
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.000126971
diis-c [-3.96903608e-10  3.34363552e-05 -2.54847259e-02  1.02545129e+00]
  HOMO = -0.236441658941654  LUMO = 86.2747688388662
  mo_energy =
[-1.20271156e+02 -1.22542395e+01 -6.65491815e+00 -6.65491815e+00
 -6.65491815e+00 -1.16353997e+00 -2.36441659e-01 -2.36441659e-01
 -2.36441659e-01  8.62747688e+01  6.77415962e+02  3.93532563e+03
  2.96224867e+04  1.54739774e+05  6.64891951e+05  2.71962783e+06
  1.10459659e+07  4.65100871e+07]
E1 = -706.5534451432619  E_coul = 198.91370913958133
cycle= 4 E= -507.639736003681  delta_E= -4.01e-11  |g|= 3.75e-07  |ddm|= 3.46e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.5534451432619  E_coul = 198.91370913958133
  HOMO = -0.236441642572077  LUMO = 86.2747691776948
  mo_energy =
[-1.20271155e+02 -1.22542394e+01 -6.65491798e+00 -6.65491798e+00
 -6.65491798e+00 -1.16353996e+00 -2.36441643e-01 -2.36441643e-01
 -2.36441643e-01  8.62747692e+01  6.77415963e+02  3.93532564e+03
  2.96224867e+04  1.54739774e+05  6.64891951e+05  2.71962783e+06
  1.10459659e+07  4.65100871e+07]
E1 = -706.5534451804181  E_coul = 198.9137091767376
Extra cycle  E= -507.63973600368  delta_E= 1.14e-13  |g|= 6.47e-09  |ddm|= 1.65e-08
    CPU time for scf_cycle      0.10 sec, wall time      0.11 sec
exp = [1.87954849e+07 4.69887121e+06 1.17471780e+06 2.93679449e+05
 7.34198723e+04 1.83526380e+04 2.23609238e+03 4.56103556e+02
 1.21567757e+02 3.75700436e+01 4.74111292e+00 3.91206247e-01
 8.59866205e+00 4.90854424e-01]
E = -507.63973600368047
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="BFGS",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((14, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.6988712134173084e+06,1.1747178033543271e+06,2.9367945083858178e+05,7.3419865393677101e+04,1.8353927627435987e+04,2.2341424145819028e+03,4.5688904996449571e+02,1.2173317272260677e+02,3.7593061247508530e+01,4.7412722556720146e+00,3.9120358491841306e-01,8.5986297237246045e+00,4.9084868336327880e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "12s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:16:06 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  18795484.8537        1
[INPUT] 0    0    [1    /1   ]  4698871.21341        1
[INPUT] 0    0    [1    /1   ]  1174717.80335        1
[INPUT] 0    0    [1    /1   ]  293679.448723        1
[INPUT] 0    0    [1    /1   ]  73419.8722634        1
[INPUT] 0    0    [1    /1   ]  18352.6380367        1
[INPUT] 0    0    [1    /1   ]  2236.09237792        1
[INPUT] 0    0    [1    /1   ]  456.10355609         1
[INPUT] 0    0    [1    /1   ]  121.567756807        1
[INPUT] 0    0    [1    /1   ]  37.5700436147        1
[INPUT] 0    0    [1    /1   ]  4.74111291851        1
[INPUT] 0    0    [1    /1   ]  0.391206247122       1
[INPUT] 1    0    [1    /1   ]  8.59866204922        1
[INPUT] 1    0    [1    /1   ]  0.490854423905       1

nuclear repulsion = 0
number of shells = 14
number of NR pGTOs = 18
number of NR cGTOs = 18
basis = {'Ar': [[0, [18795484.85366926, 1.0]], [0, [4698871.21341369, 1.0]], [0, [1174717.8033525953, 1.0]], [0, [293679.44872294884, 1.0]], [0, [73419.87226343893, 1.0]], [0, [18352.638036674456, 1.0]], [0, [2236.0923779178806, 1.0]], [0, [456.1035560904485, 1.0]], [0, [121.56775680737498, 1.0]], [0, [37.57004361471834, 1.0]], [0, [4.741112918508279, 1.0]], [0, [0.391206247121689, 1.0]], [1, [8.598662049215712, 1.0]], [1, [0.49085442390499434, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [18795484.85366926]
bas 1, expnt(s) = [4698871.21341369]
bas 2, expnt(s) = [1174717.8033526]
bas 3, expnt(s) = [293679.44872295]
bas 4, expnt(s) = [73419.87226344]
bas 5, expnt(s) = [18352.63803667]
bas 6, expnt(s) = [2236.09237792]
bas 7, expnt(s) = [456.10355609]
bas 8, expnt(s) = [121.56775681]
bas 9, expnt(s) = [37.57004361]
bas 10, expnt(s) = [4.74111292]
bas 11, expnt(s) = [0.39120625]
bas 12, expnt(s) = [8.59866205]
bas 13, expnt(s) = [0.49085442]
CPU time:       147.03
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  0  1  1  0 42 43  0]
 [ 0  0  1  1  0 44 45  0]
 [ 0  0  1  1  0 46 47  0]
 [ 0  1  1  1  0 48 49  0]
 [ 0  1  1  1  0 50 51  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.87954849e+07 7.21199097e+05 4.69887121e+06 2.54982386e+05
 1.17471780e+06 9.01498871e+04 2.93679449e+05 3.18727981e+04
 7.34198723e+04 1.12687370e+04 1.83526380e+04 3.98372085e+03
 2.23609238e+03 8.21546841e+02 4.56103556e+02 2.49351863e+02
 1.21567757e+02 9.24972512e+01 3.75700436e+01 3.83394871e+01
 4.74111292e+00 8.11755516e+00 3.91206247e-01 1.24973911e+00
 8.59866205e+00 4.29559168e+01 4.90854424e-01 1.19860278e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319971574629015
cond(S) = 56.3904012702527
E1 = -688.8354422872835  E_coul = 184.91567454040353
init E= -503.91976774688
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.680888673539212  LUMO = 84.9454405055094
  mo_energy =
[-1.21650449e+02 -1.32811357e+01 -7.62158707e+00 -7.62158707e+00
 -7.62158707e+00 -1.65069658e+00 -6.80888674e-01 -6.80888674e-01
 -6.80888674e-01  8.49454405e+01  6.76055973e+02  3.93409005e+03
  2.96214174e+04  1.54738777e+05  6.64890984e+05  2.71962688e+06
  1.10459650e+07  4.65100862e+07]
E1 = -706.5853861337348  E_coul = 198.9460790134105
cycle= 1 E= -507.639307120324  delta_E= -3.72  |g|= 0.318  |ddm|= 0.301
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.420597
diis-c [-0.17690203  1.        ]
  HOMO = -0.236263819278015  LUMO = 86.2783356057513
  mo_energy =
[-1.20262389e+02 -1.22530324e+01 -6.65304604e+00 -6.65304604e+00
 -6.65304604e+00 -1.16347440e+00 -2.36263819e-01 -2.36263819e-01
 -2.36263819e-01  8.62783356e+01  6.77426675e+02  3.93534169e+03
  2.96225061e+04  1.54739794e+05  6.64891971e+05  2.71962785e+06
  1.10459660e+07  4.65100871e+07]
E1 = -706.553893839195  E_coul = 198.91415794600496
cycle= 2 E= -507.63973589319  delta_E= -0.000429  |g|= 0.00475  |ddm|= 0.0143
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00504526
diis-c [-2.54102239e-05 -5.01308470e-04  1.00050131e+00]
  HOMO = -0.23643943926004  LUMO = 86.2748136173314
  mo_energy =
[-1.20271042e+02 -1.22542237e+01 -6.65489110e+00 -6.65489110e+00
 -6.65489110e+00 -1.16353931e+00 -2.36439439e-01 -2.36439439e-01
 -2.36439439e-01  8.62748136e+01  6.77416080e+02  3.93532578e+03
  2.96224869e+04  1.54739774e+05  6.64891951e+05  2.71962783e+06
  1.10459659e+07  4.65100871e+07]
E1 = -706.5534524096382  E_coul = 198.9137164059978
cycle= 3 E= -507.63973600364  delta_E= -1.1e-07  |g|= 9.49e-05  |ddm|= 0.000202
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.000126971
diis-c [-3.96903608e-10  3.34363552e-05 -2.54847259e-02  1.02545129e+00]
  HOMO = -0.236441658941654  LUMO = 86.2747688388662
  mo_energy =
[-1.20271156e+02 -1.22542395e+01 -6.65491815e+00 -6.65491815e+00
 -6.65491815e+00 -1.16353997e+00 -2.36441659e-01 -2.36441659e-01
 -2.36441659e-01  8.62747688e+01  6.77415962e+02  3.93532563e+03
  2.96224867e+04  1.54739774e+05  6.64891951e+05  2.71962783e+06
  1.10459659e+07  4.65100871e+07]
E1 = -706.5534451432619  E_coul = 198.91370913958133
cycle= 4 E= -507.639736003681  delta_E= -4.01e-11  |g|= 3.75e-07  |ddm|= 3.46e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.5534451432619  E_coul = 198.91370913958133
  HOMO = -0.236441642572077  LUMO = 86.2747691776948
  mo_energy =
[-1.20271155e+02 -1.22542394e+01 -6.65491798e+00 -6.65491798e+00
 -6.65491798e+00 -1.16353996e+00 -2.36441643e-01 -2.36441643e-01
 -2.36441643e-01  8.62747692e+01  6.77415963e+02  3.93532564e+03
  2.96224867e+04  1.54739774e+05  6.64891951e+05  2.71962783e+06
  1.10459659e+07  4.65100871e+07]
E1 = -706.5534451804181  E_coul = 198.9137091767376
Extra cycle  E= -507.63973600368  delta_E= 1.14e-13  |g|= 6.47e-09  |ddm|= 1.65e-08
    CPU time for scf_cycle      0.10 sec, wall time      0.11 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 56.3904012702527
E1 = -706.5534451804181  E_coul = 198.9137091767376
init E= -507.63973600368
    CPU time for initialize scf      0.13 sec, wall time      0.13 sec
  HOMO = -0.23644164238049  LUMO = 86.2747691818391
  mo_energy =
[-1.20271155e+02 -1.22542394e+01 -6.65491798e+00 -6.65491798e+00
 -6.65491798e+00 -1.16353996e+00 -2.36441642e-01 -2.36441642e-01
 -2.36441642e-01  8.62747692e+01  6.77415963e+02  3.93532564e+03
  2.96224867e+04  1.54739774e+05  6.64891951e+05  2.71962783e+06
  1.10459659e+07  4.65100871e+07]
E1 = -706.5534451809812  E_coul = 198.91370917730035
cycle= 1 E= -507.639736003681  delta_E= -3.41e-13  |g|= 2.08e-10  |ddm|= 2.55e-10
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -706.5534451809812  E_coul = 198.91370917730035
  HOMO = -0.236441642377787  LUMO = 86.2747691818977
  mo_energy =
[-1.20271155e+02 -1.22542394e+01 -6.65491798e+00 -6.65491798e+00
 -6.65491798e+00 -1.16353996e+00 -2.36441642e-01 -2.36441642e-01
 -2.36441642e-01  8.62747692e+01  6.77415963e+02  3.93532564e+03
  2.96224867e+04  1.54739774e+05  6.64891951e+05  2.71962783e+06
  1.10459659e+07  4.65100871e+07]
E1 = -706.5534451809908  E_coul = 198.91370917731018
Extra cycle  E= -507.639736003681  delta_E= 1.71e-13  |g|= 2.1e-10  |ddm|= 4.57e-12
    CPU time for scf_cycle      0.20 sec, wall time      0.20 sec
exp = [1.87954849e+07 4.69887121e+06 1.17471780e+06 2.93679449e+05
 7.34198723e+04 1.83526380e+04 2.23609238e+03 4.56103556e+02
 1.21567757e+02 3.75700436e+01 4.74111292e+00 3.91206247e-01
 8.59866205e+00 4.90854424e-01]
grad_E = [-1.13954759e-13  1.78400668e-11  7.21450291e-12  1.04369948e-08
 -3.46495582e-08  6.35583467e-06 -5.61617064e-06 -2.54323400e-05
  4.07471563e-05 -4.49100266e-06 -1.12825743e-05  8.33901130e-05
  2.47696378e-05  1.69067390e-04]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="BFGS",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((14, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.6988712134173084e+06,1.1747178033543271e+06,2.9367945083858178e+05,7.3419865393677101e+04,1.8353927627435987e+04,2.2341424145819028e+03,4.5688904996449571e+02,1.2173317272260677e+02,3.7593061247508530e+01,4.7412722556720146e+00,3.9120358491841306e-01,8.5986297237246045e+00,4.9084868336327880e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "12s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:16:09 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  18795484.8537        1
[INPUT] 0    0    [1    /1   ]  4698871.21341        1
[INPUT] 0    0    [1    /1   ]  1174717.80335        1
[INPUT] 0    0    [1    /1   ]  293679.448784        1
[INPUT] 0    0    [1    /1   ]  73419.8720663        1
[INPUT] 0    0    [1    /1   ]  18352.6750919        1
[INPUT] 0    0    [1    /1   ]  2236.03485219        1
[INPUT] 0    0    [1    /1   ]  456.137531604        1
[INPUT] 0    0    [1    /1   ]  121.556657369        1
[INPUT] 0    0    [1    /1   ]  37.5646813848        1
[INPUT] 0    0    [1    /1   ]  4.74111235717        1
[INPUT] 0    0    [1    /1   ]  0.391207429308       1
[INPUT] 1    0    [1    /1   ]  8.59868516552        1
[INPUT] 1    0    [1    /1   ]  0.490857495316       1

nuclear repulsion = 0
number of shells = 14
number of NR pGTOs = 18
number of NR cGTOs = 18
basis = {'Ar': [[0, [18795484.85366926, 1.0]], [0, [4698871.2134137945, 1.0]], [0, [1174717.8033526456, 1.0]], [0, [293679.4487837359, 1.0]], [0, [73419.87206633398, 1.0]], [0, [18352.675091916804, 1.0]], [0, [2236.0348521938727, 1.0]], [0, [456.1375316043171, 1.0]], [0, [121.55665736906195, 1.0]], [0, [37.564681384816474, 1.0]], [0, [4.741112357174451, 1.0]], [0, [0.3912074293077744, 1.0]], [1, [8.598685165522939, 1.0]], [1, [0.4908574953156552, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [18795484.85366926]
bas 1, expnt(s) = [4698871.21341379]
bas 2, expnt(s) = [1174717.80335265]
bas 3, expnt(s) = [293679.44878374]
bas 4, expnt(s) = [73419.87206633]
bas 5, expnt(s) = [18352.67509192]
bas 6, expnt(s) = [2236.03485219]
bas 7, expnt(s) = [456.1375316]
bas 8, expnt(s) = [121.55665737]
bas 9, expnt(s) = [37.56468138]
bas 10, expnt(s) = [4.74111236]
bas 11, expnt(s) = [0.39120743]
bas 12, expnt(s) = [8.59868517]
bas 13, expnt(s) = [0.4908575]
CPU time:       150.44
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  0  1  1  0 42 43  0]
 [ 0  0  1  1  0 44 45  0]
 [ 0  0  1  1  0 46 47  0]
 [ 0  1  1  1  0 48 49  0]
 [ 0  1  1  1  0 50 51  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.87954849e+07 7.21199097e+05 4.69887121e+06 2.54982386e+05
 1.17471780e+06 9.01498871e+04 2.93679449e+05 3.18727981e+04
 7.34198721e+04 1.12687370e+04 1.83526751e+04 3.98372688e+03
 2.23603485e+03 8.21530990e+02 4.56137532e+02 2.49365794e+02
 1.21556657e+02 9.24909172e+01 3.75646814e+01 3.83353830e+01
 4.74111236e+00 8.11755444e+00 3.91207429e-01 1.24974194e+00
 8.59868517e+00 4.29560612e+01 4.90857495e-01 1.19861215e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319967745242092
cond(S) = 56.3884706329628
E1 = -688.8354487522021  E_coul = 184.91586651811846
init E= -503.919582234084
    CPU time for initialize scf      0.03 sec, wall time      0.03 sec
  HOMO = -0.680884662343116  LUMO = 84.9293252904764
  mo_energy =
[-1.21650435e+02 -1.32811074e+01 -7.62157540e+00 -7.62157540e+00
 -7.62157540e+00 -1.65069184e+00 -6.80884662e-01 -6.80884662e-01
 -6.80884662e-01  8.49293253e+01  6.76033544e+02  3.93407236e+03
  2.96213341e+04  1.54738752e+05  6.64890989e+05  2.71962689e+06
  1.10459650e+07  4.65100862e+07]
E1 = -706.5856104472716  E_coul = 198.94630287057024
cycle= 1 E= -507.639307576701  delta_E= -3.72  |g|= 0.318  |ddm|= 0.301
    CPU time for cycle= 1      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.42058
diis-c [-0.17688792  1.        ]
  HOMO = -0.236256540991618  LUMO = 86.2622012131808
  mo_energy =
[-1.20262381e+02 -1.22530019e+01 -6.65303148e+00 -6.65303148e+00
 -6.65303148e+00 -1.16346713e+00 -2.36256541e-01 -2.36256541e-01
 -2.36256541e-01  8.62622012e+01  6.77404226e+02  3.93532397e+03
  2.96224228e+04  1.54739770e+05  6.64891976e+05  2.71962786e+06
  1.10459660e+07  4.65100871e+07]
E1 = -706.5541088424311  E_coul = 198.9143723572921
cycle= 2 E= -507.639736485139  delta_E= -0.000429  |g|= 0.00475  |ddm|= 0.0143
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00504622
diis-c [-2.54201445e-05 -5.00377769e-04  1.00050038e+00]
  HOMO = -0.236432222919538  LUMO = 86.2586785110473
  mo_energy =
[-1.20271036e+02 -1.22541935e+01 -6.65487714e+00 -6.65487714e+00
 -6.65487714e+00 -1.16353207e+00 -2.36432223e-01 -2.36432223e-01
 -2.36432223e-01  8.62586785e+01  6.77393628e+02  3.93530805e+03
  2.96224035e+04  1.54739750e+05  6.64891956e+05  2.71962784e+06
  1.10459659e+07  4.65100871e+07]
E1 = -706.5536672354671  E_coul = 198.9139306398229
cycle= 3 E= -507.639736595644  delta_E= -1.11e-07  |g|= 9.5e-05  |ddm|= 0.000202
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.000127011
diis-c [-3.97155826e-10  3.34310986e-05 -2.54878263e-02  1.02545440e+00]
  HOMO = -0.236434443788452  LUMO = 86.2586337139984
  mo_energy =
[-1.20271150e+02 -1.22542094e+01 -6.65490420e+00 -6.65490420e+00
 -6.65490420e+00 -1.16353273e+00 -2.36434444e-01 -2.36434444e-01
 -2.36434444e-01  8.62586337e+01  6.77393510e+02  3.93530791e+03
  2.96224034e+04  1.54739750e+05  6.64891956e+05  2.71962784e+06
  1.10459659e+07  4.65100871e+07]
E1 = -706.5536599649187  E_coul = 198.91392336923388
cycle= 4 E= -507.639736595685  delta_E= -4.06e-11  |g|= 3.75e-07  |ddm|= 3.46e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.5536599649187  E_coul = 198.91392336923388
  HOMO = -0.236434427408387  LUMO = 86.2586340529694
  mo_energy =
[-1.20271149e+02 -1.22542093e+01 -6.65490404e+00 -6.65490404e+00
 -6.65490404e+00 -1.16353272e+00 -2.36434427e-01 -2.36434427e-01
 -2.36434427e-01  8.62586341e+01  6.77393511e+02  3.93530791e+03
  2.96224034e+04  1.54739750e+05  6.64891956e+05  2.71962784e+06
  1.10459659e+07  4.65100871e+07]
E1 = -706.5536600020986  E_coul = 198.9139234064142
Extra cycle  E= -507.639736595684  delta_E= 3.98e-13  |g|= 6.48e-09  |ddm|= 1.65e-08
    CPU time for scf_cycle      0.10 sec, wall time      0.11 sec
exp = [1.87954849e+07 4.69887121e+06 1.17471780e+06 2.93679449e+05
 7.34198721e+04 1.83526751e+04 2.23603485e+03 4.56137532e+02
 1.21556657e+02 3.75646814e+01 4.74111236e+00 3.91207429e-01
 8.59868517e+00 4.90857495e-01]
E = -507.6397365956844
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="BFGS",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((14, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.6988712134173084e+06,1.1747178033543271e+06,2.9367945083858178e+05,7.3419865393677101e+04,1.8353927627435987e+04,2.2341424145819028e+03,4.5688904996449571e+02,1.2173317272260677e+02,3.7593061247508530e+01,4.7412722556720146e+00,3.9120358491841306e-01,8.5986297237246045e+00,4.9084868336327880e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "12s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:16:10 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  18795484.8537        1
[INPUT] 0    0    [1    /1   ]  4698871.21341        1
[INPUT] 0    0    [1    /1   ]  1174717.80335        1
[INPUT] 0    0    [1    /1   ]  293679.448784        1
[INPUT] 0    0    [1    /1   ]  73419.8720663        1
[INPUT] 0    0    [1    /1   ]  18352.6750919        1
[INPUT] 0    0    [1    /1   ]  2236.03485219        1
[INPUT] 0    0    [1    /1   ]  456.137531604        1
[INPUT] 0    0    [1    /1   ]  121.556657369        1
[INPUT] 0    0    [1    /1   ]  37.5646813848        1
[INPUT] 0    0    [1    /1   ]  4.74111235717        1
[INPUT] 0    0    [1    /1   ]  0.391207429308       1
[INPUT] 1    0    [1    /1   ]  8.59868516552        1
[INPUT] 1    0    [1    /1   ]  0.490857495316       1

nuclear repulsion = 0
number of shells = 14
number of NR pGTOs = 18
number of NR cGTOs = 18
basis = {'Ar': [[0, [18795484.85366926, 1.0]], [0, [4698871.2134137945, 1.0]], [0, [1174717.8033526456, 1.0]], [0, [293679.4487837359, 1.0]], [0, [73419.87206633398, 1.0]], [0, [18352.675091916804, 1.0]], [0, [2236.0348521938727, 1.0]], [0, [456.1375316043171, 1.0]], [0, [121.55665736906195, 1.0]], [0, [37.564681384816474, 1.0]], [0, [4.741112357174451, 1.0]], [0, [0.3912074293077744, 1.0]], [1, [8.598685165522939, 1.0]], [1, [0.4908574953156552, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [18795484.85366926]
bas 1, expnt(s) = [4698871.21341379]
bas 2, expnt(s) = [1174717.80335265]
bas 3, expnt(s) = [293679.44878374]
bas 4, expnt(s) = [73419.87206633]
bas 5, expnt(s) = [18352.67509192]
bas 6, expnt(s) = [2236.03485219]
bas 7, expnt(s) = [456.1375316]
bas 8, expnt(s) = [121.55665737]
bas 9, expnt(s) = [37.56468138]
bas 10, expnt(s) = [4.74111236]
bas 11, expnt(s) = [0.39120743]
bas 12, expnt(s) = [8.59868517]
bas 13, expnt(s) = [0.4908575]
CPU time:       151.11
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  0  1  1  0 42 43  0]
 [ 0  0  1  1  0 44 45  0]
 [ 0  0  1  1  0 46 47  0]
 [ 0  1  1  1  0 48 49  0]
 [ 0  1  1  1  0 50 51  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.87954849e+07 7.21199097e+05 4.69887121e+06 2.54982386e+05
 1.17471780e+06 9.01498871e+04 2.93679449e+05 3.18727981e+04
 7.34198721e+04 1.12687370e+04 1.83526751e+04 3.98372688e+03
 2.23603485e+03 8.21530990e+02 4.56137532e+02 2.49365794e+02
 1.21556657e+02 9.24909172e+01 3.75646814e+01 3.83353830e+01
 4.74111236e+00 8.11755444e+00 3.91207429e-01 1.24974194e+00
 8.59868517e+00 4.29560612e+01 4.90857495e-01 1.19861215e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319967745242092
cond(S) = 56.3884706329628
E1 = -688.8354487522021  E_coul = 184.91586651811846
init E= -503.919582234084
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.680884662343116  LUMO = 84.9293252904764
  mo_energy =
[-1.21650435e+02 -1.32811074e+01 -7.62157540e+00 -7.62157540e+00
 -7.62157540e+00 -1.65069184e+00 -6.80884662e-01 -6.80884662e-01
 -6.80884662e-01  8.49293253e+01  6.76033544e+02  3.93407236e+03
  2.96213341e+04  1.54738752e+05  6.64890989e+05  2.71962689e+06
  1.10459650e+07  4.65100862e+07]
E1 = -706.5856104472716  E_coul = 198.94630287057024
cycle= 1 E= -507.639307576701  delta_E= -3.72  |g|= 0.318  |ddm|= 0.301
    CPU time for cycle= 1      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.42058
diis-c [-0.17688792  1.        ]
  HOMO = -0.236256540991618  LUMO = 86.2622012131808
  mo_energy =
[-1.20262381e+02 -1.22530019e+01 -6.65303148e+00 -6.65303148e+00
 -6.65303148e+00 -1.16346713e+00 -2.36256541e-01 -2.36256541e-01
 -2.36256541e-01  8.62622012e+01  6.77404226e+02  3.93532397e+03
  2.96224228e+04  1.54739770e+05  6.64891976e+05  2.71962786e+06
  1.10459660e+07  4.65100871e+07]
E1 = -706.5541088424311  E_coul = 198.9143723572921
cycle= 2 E= -507.639736485139  delta_E= -0.000429  |g|= 0.00475  |ddm|= 0.0143
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00504622
diis-c [-2.54201445e-05 -5.00377769e-04  1.00050038e+00]
  HOMO = -0.236432222919538  LUMO = 86.2586785110473
  mo_energy =
[-1.20271036e+02 -1.22541935e+01 -6.65487714e+00 -6.65487714e+00
 -6.65487714e+00 -1.16353207e+00 -2.36432223e-01 -2.36432223e-01
 -2.36432223e-01  8.62586785e+01  6.77393628e+02  3.93530805e+03
  2.96224035e+04  1.54739750e+05  6.64891956e+05  2.71962784e+06
  1.10459659e+07  4.65100871e+07]
E1 = -706.5536672354671  E_coul = 198.9139306398229
cycle= 3 E= -507.639736595644  delta_E= -1.11e-07  |g|= 9.5e-05  |ddm|= 0.000202
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.000127011
diis-c [-3.97155826e-10  3.34310986e-05 -2.54878263e-02  1.02545440e+00]
  HOMO = -0.236434443788452  LUMO = 86.2586337139984
  mo_energy =
[-1.20271150e+02 -1.22542094e+01 -6.65490420e+00 -6.65490420e+00
 -6.65490420e+00 -1.16353273e+00 -2.36434444e-01 -2.36434444e-01
 -2.36434444e-01  8.62586337e+01  6.77393510e+02  3.93530791e+03
  2.96224034e+04  1.54739750e+05  6.64891956e+05  2.71962784e+06
  1.10459659e+07  4.65100871e+07]
E1 = -706.5536599649187  E_coul = 198.91392336923388
cycle= 4 E= -507.639736595685  delta_E= -4.06e-11  |g|= 3.75e-07  |ddm|= 3.46e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.5536599649187  E_coul = 198.91392336923388
  HOMO = -0.236434427408387  LUMO = 86.2586340529694
  mo_energy =
[-1.20271149e+02 -1.22542093e+01 -6.65490404e+00 -6.65490404e+00
 -6.65490404e+00 -1.16353272e+00 -2.36434427e-01 -2.36434427e-01
 -2.36434427e-01  8.62586341e+01  6.77393511e+02  3.93530791e+03
  2.96224034e+04  1.54739750e+05  6.64891956e+05  2.71962784e+06
  1.10459659e+07  4.65100871e+07]
E1 = -706.5536600020986  E_coul = 198.9139234064142
Extra cycle  E= -507.639736595684  delta_E= 3.98e-13  |g|= 6.48e-09  |ddm|= 1.65e-08
    CPU time for scf_cycle      0.10 sec, wall time      0.11 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 56.3884706329628
E1 = -706.5536600020986  E_coul = 198.9139234064142
init E= -507.639736595684
    CPU time for initialize scf      0.12 sec, wall time      0.12 sec
  HOMO = -0.236434427216656  LUMO = 86.258634057114
  mo_energy =
[-1.20271149e+02 -1.22542093e+01 -6.65490403e+00 -6.65490403e+00
 -6.65490403e+00 -1.16353272e+00 -2.36434427e-01 -2.36434427e-01
 -2.36434427e-01  8.62586341e+01  6.77393511e+02  3.93530791e+03
  2.96224034e+04  1.54739750e+05  6.64891956e+05  2.71962784e+06
  1.10459659e+07  4.65100871e+07]
E1 = -706.5536600026621  E_coul = 198.9139234069776
cycle= 1 E= -507.639736595685  delta_E= -1.71e-13  |g|= 3.84e-10  |ddm|= 2.56e-10
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -706.5536600026621  E_coul = 198.9139234069776
  HOMO = -0.23643442721395  LUMO = 86.2586340571736
  mo_energy =
[-1.20271149e+02 -1.22542093e+01 -6.65490403e+00 -6.65490403e+00
 -6.65490403e+00 -1.16353272e+00 -2.36434427e-01 -2.36434427e-01
 -2.36434427e-01  8.62586341e+01  6.77393511e+02  3.93530791e+03
  2.96224034e+04  1.54739750e+05  6.64891956e+05  2.71962784e+06
  1.10459659e+07  4.65100871e+07]
E1 = -706.5536600026712  E_coul = 198.91392340698698
Extra cycle  E= -507.639736595684  delta_E= 3.41e-13  |g|= 1.96e-10  |ddm|= 4.54e-12
    CPU time for scf_cycle      0.19 sec, wall time      0.19 sec
exp = [1.87954849e+07 4.69887121e+06 1.17471780e+06 2.93679449e+05
 7.34198721e+04 1.83526751e+04 2.23603485e+03 4.56137532e+02
 1.21556657e+02 3.75646814e+01 4.74111236e+00 3.91207429e-01
 8.59868517e+00 4.90857495e-01]
grad_E = [-1.13813415e-13  1.78490579e-11  7.28908515e-12  1.04421222e-08
 -3.46264709e-08  6.35939052e-06 -5.90159243e-06 -2.19689784e-05
  3.23516670e-05 -1.43555950e-05 -1.74712518e-05  1.28893903e-04
  3.80691052e-05  2.61711893e-04]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="BFGS",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((14, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.6988712134173084e+06,1.1747178033543271e+06,2.9367945083858178e+05,7.3419865393677101e+04,1.8353927627435987e+04,2.2341424145819028e+03,4.5688904996449571e+02,1.2173317272260677e+02,3.7593061247508530e+01,4.7412722556720146e+00,3.9120358491841306e-01,8.5986297237246045e+00,4.9084868336327880e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "12s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:16:13 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  18795484.8537        1
[INPUT] 0    0    [1    /1   ]  4698871.21341        1
[INPUT] 0    0    [1    /1   ]  1174717.80335        1
[INPUT] 0    0    [1    /1   ]  293679.448778        1
[INPUT] 0    0    [1    /1   ]  73419.872087         1
[INPUT] 0    0    [1    /1   ]  18352.6713087        1
[INPUT] 0    0    [1    /1   ]  2236.03796178        1
[INPUT] 0    0    [1    /1   ]  456.155147632        1
[INPUT] 0    0    [1    /1   ]  121.528387437        1
[INPUT] 0    0    [1    /1   ]  37.5545090954        1
[INPUT] 0    0    [1    /1   ]  4.74110640294        1
[INPUT] 0    0    [1    /1   ]  0.391208137226       1
[INPUT] 1    0    [1    /1   ]  8.59871188047        1
[INPUT] 1    0    [1    /1   ]  0.49086096105        1

nuclear repulsion = 0
number of shells = 14
number of NR pGTOs = 18
number of NR cGTOs = 18
basis = {'Ar': [[0, [18795484.85366926, 1.0]], [0, [4698871.213413784, 1.0]], [0, [1174717.8033526414, 1.0]], [0, [293679.44877752295, 1.0]], [0, [73419.87208699627, 1.0]], [0, [18352.671308749075, 1.0]], [0, [2236.0379617776034, 1.0]], [0, [456.1551476317302, 1.0]], [0, [121.52838743655094, 1.0]], [0, [37.55450909536579, 1.0]], [0, [4.741106402937358, 1.0]], [0, [0.391208137226295, 1.0]], [1, [8.598711880467143, 1.0]], [1, [0.49086096104955146, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [18795484.85366926]
bas 1, expnt(s) = [4698871.21341378]
bas 2, expnt(s) = [1174717.80335264]
bas 3, expnt(s) = [293679.44877752]
bas 4, expnt(s) = [73419.872087]
bas 5, expnt(s) = [18352.67130875]
bas 6, expnt(s) = [2236.03796178]
bas 7, expnt(s) = [456.15514763]
bas 8, expnt(s) = [121.52838744]
bas 9, expnt(s) = [37.5545091]
bas 10, expnt(s) = [4.7411064]
bas 11, expnt(s) = [0.39120814]
bas 12, expnt(s) = [8.59871188]
bas 13, expnt(s) = [0.49086096]
CPU time:       154.52
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  0  1  1  0 42 43  0]
 [ 0  0  1  1  0 44 45  0]
 [ 0  0  1  1  0 46 47  0]
 [ 0  1  1  1  0 48 49  0]
 [ 0  1  1  1  0 50 51  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.87954849e+07 7.21199097e+05 4.69887121e+06 2.54982386e+05
 1.17471780e+06 9.01498871e+04 2.93679449e+05 3.18727981e+04
 7.34198721e+04 1.12687370e+04 1.83526713e+04 3.98372627e+03
 2.23603796e+03 8.21531847e+02 4.56155148e+02 2.49373017e+02
 1.21528387e+02 9.24747840e+01 3.75545091e+01 3.83275970e+01
 4.74110640e+00 8.11754679e+00 3.91208137e-01 1.24974364e+00
 8.59871188e+00 4.29562280e+01 4.90860961e-01 1.19862273e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.31996382828774
cond(S) = 56.38495701109196
E1 = -688.8354857250526  E_coul = 184.91606179653718
init E= -503.919423928515
    CPU time for initialize scf      0.03 sec, wall time      0.03 sec
  HOMO = -0.680880341059075  LUMO = 84.8958357750807
  mo_energy =
[-1.21650424e+02 -1.32810731e+01 -7.62156441e+00 -7.62156441e+00
 -7.62156441e+00 -1.65068580e+00 -6.80880341e-01 -6.80880341e-01
 -6.80880341e-01  8.48958358e+01  6.75933349e+02  3.93399249e+03
  2.96212837e+04  1.54738703e+05  6.64890942e+05  2.71962685e+06
  1.10459650e+07  4.65100861e+07]
E1 = -706.5858309506793  E_coul = 198.94652275390783
cycle= 1 E= -507.639308196771  delta_E= -3.72  |g|= 0.318  |ddm|= 0.301
    CPU time for cycle= 1      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.420557
diis-c [-0.17686853  1.        ]
  HOMO = -0.236248875453825  LUMO = 86.2286706102619
  mo_energy =
[-1.20262379e+02 -1.22529662e+01 -6.65301770e+00 -6.65301770e+00
 -6.65301770e+00 -1.16345896e+00 -2.36248875e-01 -2.36248875e-01
 -2.36248875e-01  8.62286706e+01  6.77304003e+02  3.93524404e+03
  2.96223723e+04  1.54739721e+05  6.64891930e+05  2.71962782e+06
  1.10459659e+07  4.65100871e+07]
E1 = -706.5543105895521  E_coul = 198.9145732125174
cycle= 2 E= -507.639737377035  delta_E= -0.000429  |g|= 0.00475  |ddm|= 0.0143
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.005048
diis-c [-2.54383855e-05 -4.98599033e-04  1.00049860e+00]
  HOMO = -0.236424682251102  LUMO = 86.2251465396194
  mo_energy =
[-1.20271040e+02 -1.22541587e+01 -6.65486459e+00 -6.65486459e+00
 -6.65486459e+00 -1.16352394e+00 -2.36424682e-01 -2.36424682e-01
 -2.36424682e-01  8.62251465e+01  6.77293399e+02  3.93522812e+03
  2.96223530e+04  1.54739701e+05  6.64891910e+05  2.71962780e+06
  1.10459659e+07  4.65100871e+07]
E1 = -706.5538686183728  E_coul = 198.9141311307193
cycle= 3 E= -507.639737487654  delta_E= -1.11e-07  |g|= 9.5e-05  |ddm|= 0.000202
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.000127088
diis-c [-3.97637186e-10  3.34246596e-05 -2.54942756e-02  1.02546085e+00]
  HOMO = -0.236426905516484  LUMO = 86.2251017052229
  mo_energy =
[-1.20271153e+02 -1.22541745e+01 -6.65489168e+00 -6.65489168e+00
 -6.65489168e+00 -1.16352460e+00 -2.36426906e-01 -2.36426906e-01
 -2.36426906e-01  8.62251017e+01  6.77293282e+02  3.93522797e+03
  2.96223529e+04  1.54739701e+05  6.64891909e+05  2.71962780e+06
  1.10459659e+07  4.65100871e+07]
E1 = -706.5538613392697  E_coul = 198.91412385157628
cycle= 4 E= -507.639737487693  delta_E= -3.99e-11  |g|= 3.75e-07  |ddm|= 3.46e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.5538613392697  E_coul = 198.91412385157628
  HOMO = -0.236426889115316  LUMO = 86.2251020444745
  mo_energy =
[-1.20271153e+02 -1.22541744e+01 -6.65489152e+00 -6.65489152e+00
 -6.65489152e+00 -1.16352459e+00 -2.36426889e-01 -2.36426889e-01
 -2.36426889e-01  8.62251020e+01  6.77293283e+02  3.93522797e+03
  2.96223529e+04  1.54739701e+05  6.64891909e+05  2.71962780e+06
  1.10459659e+07  4.65100871e+07]
E1 = -706.5538613764979  E_coul = 198.91412388880474
Extra cycle  E= -507.639737487693  delta_E= 2.27e-13  |g|= 6.48e-09  |ddm|= 1.65e-08
    CPU time for scf_cycle      0.10 sec, wall time      0.11 sec
exp = [1.87954849e+07 4.69887121e+06 1.17471780e+06 2.93679449e+05
 7.34198721e+04 1.83526713e+04 2.23603796e+03 4.56155148e+02
 1.21528387e+02 3.75545091e+01 4.74110640e+00 3.91208137e-01
 8.59871188e+00 4.90860961e-01]
E = -507.6397374876932
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="BFGS",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((14, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.6988712134173084e+06,1.1747178033543271e+06,2.9367945083858178e+05,7.3419865393677101e+04,1.8353927627435987e+04,2.2341424145819028e+03,4.5688904996449571e+02,1.2173317272260677e+02,3.7593061247508530e+01,4.7412722556720146e+00,3.9120358491841306e-01,8.5986297237246045e+00,4.9084868336327880e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "12s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:16:14 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  18795484.8537        1
[INPUT] 0    0    [1    /1   ]  4698871.21341        1
[INPUT] 0    0    [1    /1   ]  1174717.80335        1
[INPUT] 0    0    [1    /1   ]  293679.448778        1
[INPUT] 0    0    [1    /1   ]  73419.872087         1
[INPUT] 0    0    [1    /1   ]  18352.6713087        1
[INPUT] 0    0    [1    /1   ]  2236.03796178        1
[INPUT] 0    0    [1    /1   ]  456.155147632        1
[INPUT] 0    0    [1    /1   ]  121.528387437        1
[INPUT] 0    0    [1    /1   ]  37.5545090954        1
[INPUT] 0    0    [1    /1   ]  4.74110640294        1
[INPUT] 0    0    [1    /1   ]  0.391208137226       1
[INPUT] 1    0    [1    /1   ]  8.59871188047        1
[INPUT] 1    0    [1    /1   ]  0.49086096105        1

nuclear repulsion = 0
number of shells = 14
number of NR pGTOs = 18
number of NR cGTOs = 18
basis = {'Ar': [[0, [18795484.85366926, 1.0]], [0, [4698871.213413784, 1.0]], [0, [1174717.8033526414, 1.0]], [0, [293679.44877752295, 1.0]], [0, [73419.87208699627, 1.0]], [0, [18352.671308749075, 1.0]], [0, [2236.0379617776034, 1.0]], [0, [456.1551476317302, 1.0]], [0, [121.52838743655094, 1.0]], [0, [37.55450909536579, 1.0]], [0, [4.741106402937358, 1.0]], [0, [0.391208137226295, 1.0]], [1, [8.598711880467143, 1.0]], [1, [0.49086096104955146, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [18795484.85366926]
bas 1, expnt(s) = [4698871.21341378]
bas 2, expnt(s) = [1174717.80335264]
bas 3, expnt(s) = [293679.44877752]
bas 4, expnt(s) = [73419.872087]
bas 5, expnt(s) = [18352.67130875]
bas 6, expnt(s) = [2236.03796178]
bas 7, expnt(s) = [456.15514763]
bas 8, expnt(s) = [121.52838744]
bas 9, expnt(s) = [37.5545091]
bas 10, expnt(s) = [4.7411064]
bas 11, expnt(s) = [0.39120814]
bas 12, expnt(s) = [8.59871188]
bas 13, expnt(s) = [0.49086096]
CPU time:       155.20
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  0  1  1  0 42 43  0]
 [ 0  0  1  1  0 44 45  0]
 [ 0  0  1  1  0 46 47  0]
 [ 0  1  1  1  0 48 49  0]
 [ 0  1  1  1  0 50 51  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.87954849e+07 7.21199097e+05 4.69887121e+06 2.54982386e+05
 1.17471780e+06 9.01498871e+04 2.93679449e+05 3.18727981e+04
 7.34198721e+04 1.12687370e+04 1.83526713e+04 3.98372627e+03
 2.23603796e+03 8.21531847e+02 4.56155148e+02 2.49373017e+02
 1.21528387e+02 9.24747840e+01 3.75545091e+01 3.83275970e+01
 4.74110640e+00 8.11754679e+00 3.91208137e-01 1.24974364e+00
 8.59871188e+00 4.29562280e+01 4.90860961e-01 1.19862273e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.31996382828774
cond(S) = 56.38495701109196
E1 = -688.8354857250526  E_coul = 184.91606179653718
init E= -503.919423928515
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.680880341059075  LUMO = 84.8958357750807
  mo_energy =
[-1.21650424e+02 -1.32810731e+01 -7.62156441e+00 -7.62156441e+00
 -7.62156441e+00 -1.65068580e+00 -6.80880341e-01 -6.80880341e-01
 -6.80880341e-01  8.48958358e+01  6.75933349e+02  3.93399249e+03
  2.96212837e+04  1.54738703e+05  6.64890942e+05  2.71962685e+06
  1.10459650e+07  4.65100861e+07]
E1 = -706.5858309506793  E_coul = 198.94652275390783
cycle= 1 E= -507.639308196771  delta_E= -3.72  |g|= 0.318  |ddm|= 0.301
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.420557
diis-c [-0.17686853  1.        ]
  HOMO = -0.236248875453825  LUMO = 86.2286706102619
  mo_energy =
[-1.20262379e+02 -1.22529662e+01 -6.65301770e+00 -6.65301770e+00
 -6.65301770e+00 -1.16345896e+00 -2.36248875e-01 -2.36248875e-01
 -2.36248875e-01  8.62286706e+01  6.77304003e+02  3.93524404e+03
  2.96223723e+04  1.54739721e+05  6.64891930e+05  2.71962782e+06
  1.10459659e+07  4.65100871e+07]
E1 = -706.5543105895521  E_coul = 198.9145732125174
cycle= 2 E= -507.639737377035  delta_E= -0.000429  |g|= 0.00475  |ddm|= 0.0143
    CPU time for cycle= 2      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.005048
diis-c [-2.54383855e-05 -4.98599033e-04  1.00049860e+00]
  HOMO = -0.236424682251102  LUMO = 86.2251465396194
  mo_energy =
[-1.20271040e+02 -1.22541587e+01 -6.65486459e+00 -6.65486459e+00
 -6.65486459e+00 -1.16352394e+00 -2.36424682e-01 -2.36424682e-01
 -2.36424682e-01  8.62251465e+01  6.77293399e+02  3.93522812e+03
  2.96223530e+04  1.54739701e+05  6.64891910e+05  2.71962780e+06
  1.10459659e+07  4.65100871e+07]
E1 = -706.5538686183728  E_coul = 198.9141311307193
cycle= 3 E= -507.639737487654  delta_E= -1.11e-07  |g|= 9.5e-05  |ddm|= 0.000202
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.000127088
diis-c [-3.97637186e-10  3.34246596e-05 -2.54942756e-02  1.02546085e+00]
  HOMO = -0.236426905516484  LUMO = 86.2251017052229
  mo_energy =
[-1.20271153e+02 -1.22541745e+01 -6.65489168e+00 -6.65489168e+00
 -6.65489168e+00 -1.16352460e+00 -2.36426906e-01 -2.36426906e-01
 -2.36426906e-01  8.62251017e+01  6.77293282e+02  3.93522797e+03
  2.96223529e+04  1.54739701e+05  6.64891909e+05  2.71962780e+06
  1.10459659e+07  4.65100871e+07]
E1 = -706.5538613392697  E_coul = 198.91412385157628
cycle= 4 E= -507.639737487693  delta_E= -3.99e-11  |g|= 3.75e-07  |ddm|= 3.46e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.5538613392697  E_coul = 198.91412385157628
  HOMO = -0.236426889115316  LUMO = 86.2251020444745
  mo_energy =
[-1.20271153e+02 -1.22541744e+01 -6.65489152e+00 -6.65489152e+00
 -6.65489152e+00 -1.16352459e+00 -2.36426889e-01 -2.36426889e-01
 -2.36426889e-01  8.62251020e+01  6.77293283e+02  3.93522797e+03
  2.96223529e+04  1.54739701e+05  6.64891909e+05  2.71962780e+06
  1.10459659e+07  4.65100871e+07]
E1 = -706.5538613764979  E_coul = 198.91412388880474
Extra cycle  E= -507.639737487693  delta_E= 2.27e-13  |g|= 6.48e-09  |ddm|= 1.65e-08
    CPU time for scf_cycle      0.10 sec, wall time      0.10 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 56.38495701109196
E1 = -706.5538613764979  E_coul = 198.91412388880474
init E= -507.639737487693
    CPU time for initialize scf      0.12 sec, wall time      0.12 sec
  HOMO = -0.236426888923298  LUMO = 86.2251020486255
  mo_energy =
[-1.20271153e+02 -1.22541744e+01 -6.65489152e+00 -6.65489152e+00
 -6.65489152e+00 -1.16352459e+00 -2.36426889e-01 -2.36426889e-01
 -2.36426889e-01  8.62251020e+01  6.77293283e+02  3.93522797e+03
  2.96223529e+04  1.54739701e+05  6.64891909e+05  2.71962780e+06
  1.10459659e+07  4.65100871e+07]
E1 = -706.5538613770615  E_coul = 198.91412388936826
cycle= 1 E= -507.639737487693  delta_E=    0  |g|= 2.04e-10  |ddm|= 2.56e-10
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -706.5538613770615  E_coul = 198.91412388936826
  HOMO = -0.236426888920592  LUMO = 86.2251020486832
  mo_energy =
[-1.20271153e+02 -1.22541744e+01 -6.65489152e+00 -6.65489152e+00
 -6.65489152e+00 -1.16352459e+00 -2.36426889e-01 -2.36426889e-01
 -2.36426889e-01  8.62251020e+01  6.77293283e+02  3.93522797e+03
  2.96223529e+04  1.54739701e+05  6.64891909e+05  2.71962780e+06
  1.10459659e+07  4.65100871e+07]
E1 = -706.5538613770717  E_coul = 198.9141238893785
Extra cycle  E= -507.639737487693  delta_E=    0  |g|= 1.03e-10  |ddm|= 4.6e-12
    CPU time for scf_cycle      0.19 sec, wall time      0.19 sec
exp = [1.87954849e+07 4.69887121e+06 1.17471780e+06 2.93679449e+05
 7.34198721e+04 1.83526713e+04 2.23603796e+03 4.56155148e+02
 1.21528387e+02 3.75545091e+01 4.74110640e+00 3.91208137e-01
 8.59871188e+00 4.90860961e-01]
grad_E = [-1.13704961e-13  1.78559244e-11  7.34620724e-12  1.04460421e-08
 -3.46091717e-08  6.36221906e-06 -6.19009288e-06 -1.72946518e-05
  1.80479330e-05 -2.62701414e-05 -2.41426374e-05  1.78125876e-04
  5.24428427e-05  3.62053883e-04]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="BFGS",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((14, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.6988712134173084e+06,1.1747178033543271e+06,2.9367945083858178e+05,7.3419865393677101e+04,1.8353927627435987e+04,2.2341424145819028e+03,4.5688904996449571e+02,1.2173317272260677e+02,3.7593061247508530e+01,4.7412722556720146e+00,3.9120358491841306e-01,8.5986297237246045e+00,4.9084868336327880e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "12s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:16:18 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  18795484.8537        1
[INPUT] 0    0    [1    /1   ]  4698871.21341        1
[INPUT] 0    0    [1    /1   ]  1174717.80335        1
[INPUT] 0    0    [1    /1   ]  293679.448606        1
[INPUT] 0    0    [1    /1   ]  73419.8726452        1
[INPUT] 0    0    [1    /1   ]  18352.566636         1
[INPUT] 0    0    [1    /1   ]  2236.19315152        1
[INPUT] 0    0    [1    /1   ]  456.114926358        1
[INPUT] 0    0    [1    /1   ]  121.482002296        1
[INPUT] 0    0    [1    /1   ]  37.5413067858        1
[INPUT] 0    0    [1    /1   ]  4.74109207826        1
[INPUT] 0    0    [1    /1   ]  0.391206990484       1
[INPUT] 1    0    [1    /1   ]  8.59872347042        1
[INPUT] 1    0    [1    /1   ]  0.490862279795       1

nuclear repulsion = 0
number of shells = 14
number of NR pGTOs = 18
number of NR cGTOs = 18
basis = {'Ar': [[0, [18795484.85366926, 1.0]], [0, [4698871.213413491, 1.0]], [0, [1174717.8033525017, 1.0]], [0, [293679.4486057948, 1.0]], [0, [73419.87264519831, 1.0]], [0, [18352.56663599882, 1.0]], [0, [2236.1931515185647, 1.0]], [0, [456.1149263576193, 1.0]], [0, [121.48200229622422, 1.0]], [0, [37.541306785808345, 1.0]], [0, [4.741092078259201, 1.0]], [0, [0.39120699048429863, 1.0]], [1, [8.598723470424131, 1.0]], [1, [0.490862279795342, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [18795484.85366926]
bas 1, expnt(s) = [4698871.21341349]
bas 2, expnt(s) = [1174717.8033525]
bas 3, expnt(s) = [293679.44860579]
bas 4, expnt(s) = [73419.8726452]
bas 5, expnt(s) = [18352.566636]
bas 6, expnt(s) = [2236.19315152]
bas 7, expnt(s) = [456.11492636]
bas 8, expnt(s) = [121.4820023]
bas 9, expnt(s) = [37.54130679]
bas 10, expnt(s) = [4.74109208]
bas 11, expnt(s) = [0.39120699]
bas 12, expnt(s) = [8.59872347]
bas 13, expnt(s) = [0.49086228]
CPU time:       158.60
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  0  1  1  0 42 43  0]
 [ 0  0  1  1  0 44 45  0]
 [ 0  0  1  1  0 46 47  0]
 [ 0  1  1  1  0 48 49  0]
 [ 0  1  1  1  0 50 51  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.87954849e+07 7.21199097e+05 4.69887121e+06 2.54982386e+05
 1.17471780e+06 9.01498871e+04 2.93679449e+05 3.18727981e+04
 7.34198726e+04 1.12687370e+04 1.83525666e+04 3.98370923e+03
 2.23619315e+03 8.21574609e+02 4.56114926e+02 2.49356525e+02
 1.21482002e+02 9.24483108e+01 3.75413068e+01 3.83174910e+01
 4.74109208e+00 8.11752840e+00 3.91206990e-01 1.24974089e+00
 8.59872347e+00 4.29563004e+01 4.90862280e-01 1.19862676e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319963253122616
cond(S) = 56.380597234533035
E1 = -688.8355683915293  E_coul = 184.91608780418554
init E= -503.919480587344
    CPU time for initialize scf      0.03 sec, wall time      0.03 sec
  HOMO = -0.68087915972496  LUMO = 84.8484532460062
  mo_energy =
[-1.21650435e+02 -1.32810548e+01 -7.62156512e+00 -7.62156512e+00
 -7.62156512e+00 -1.65068192e+00 -6.80879160e-01 -6.80879160e-01
 -6.80879160e-01  8.48484532e+01  6.75725725e+02  3.93382650e+03
  2.96213631e+04  1.54738637e+05  6.64890806e+05  2.71962671e+06
  1.10459648e+07  4.65100860e+07]
E1 = -706.5858413259765  E_coul = 198.94653242995176
cycle= 1 E= -507.639308896025  delta_E= -3.72  |g|= 0.318  |ddm|= 0.301
    CPU time for cycle= 1      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.420539
diis-c [-0.1768533  1.       ]
  HOMO = -0.236247196649368  LUMO = 86.1812284100698
  mo_energy =
[-1.20262397e+02 -1.22529498e+01 -6.65301848e+00 -6.65301848e+00
 -6.65301848e+00 -1.16345591e+00 -2.36247197e-01 -2.36247197e-01
 -2.36247197e-01  8.61812284e+01  6.77096356e+02  3.93507799e+03
  2.96224516e+04  1.54739654e+05  6.64891793e+05  2.71962768e+06
  1.10459658e+07  4.65100870e+07]
E1 = -706.5542951424309  E_coul = 198.9145566935536
cycle= 2 E= -507.639738448877  delta_E= -0.00043  |g|= 0.00475  |ddm|= 0.0143
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00505023
diis-c [-2.54612853e-05 -4.96270119e-04  1.00049627e+00]
  HOMO = -0.236423175463889  LUMO = 86.1777025435298
  mo_energy =
[-1.20271064e+02 -1.22541434e+01 -6.65486708e+00 -6.65486708e+00
 -6.65486708e+00 -1.16352095e+00 -2.36423175e-01 -2.36423175e-01
 -2.36423175e-01  8.61777025e+01  6.77085746e+02  3.93506206e+03
  2.96224323e+04  1.54739634e+05  6.64891773e+05  2.71962766e+06
  1.10459658e+07  4.65100870e+07]
E1 = -706.5538526611157  E_coul = 198.91411410146313
cycle= 3 E= -507.639738559653  delta_E= -1.11e-07  |g|= 9.51e-05  |ddm|= 0.000203
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.000127191
diis-c [-3.98277890e-10  3.34197225e-05 -2.55034071e-02  1.02546999e+00]
  HOMO = -0.236425402035776  LUMO = 86.1776576578187
  mo_energy =
[-1.20271178e+02 -1.22541593e+01 -6.65489421e+00 -6.65489421e+00
 -6.65489421e+00 -1.16352161e+00 -2.36425402e-01 -2.36425402e-01
 -2.36425402e-01  8.61776577e+01  6.77085629e+02  3.93506191e+03
  2.96224322e+04  1.54739634e+05  6.64891773e+05  2.71962766e+06
  1.10459658e+07  4.65100870e+07]
E1 = -706.5538453700431  E_coul = 198.9141068103502
cycle= 4 E= -507.639738559693  delta_E= -4.04e-11  |g|= 3.76e-07  |ddm|= 3.47e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.5538453700431  E_coul = 198.9141068103502
  HOMO = -0.236425385605355  LUMO = 86.1776579974437
  mo_energy =
[-1.20271177e+02 -1.22541592e+01 -6.65489404e+00 -6.65489404e+00
 -6.65489404e+00 -1.16352160e+00 -2.36425386e-01 -2.36425386e-01
 -2.36425386e-01  8.61776580e+01  6.77085630e+02  3.93506192e+03
  2.96224322e+04  1.54739634e+05  6.64891773e+05  2.71962766e+06
  1.10459658e+07  4.65100870e+07]
E1 = -706.5538454073392  E_coul = 198.9141068476462
Extra cycle  E= -507.639738559693  delta_E= -1.14e-13  |g|= 6.49e-09  |ddm|= 1.66e-08
    CPU time for scf_cycle      0.11 sec, wall time      0.12 sec
exp = [1.87954849e+07 4.69887121e+06 1.17471780e+06 2.93679449e+05
 7.34198726e+04 1.83525666e+04 2.23619315e+03 4.56114926e+02
 1.21482002e+02 3.75413068e+01 4.74109208e+00 3.91206990e-01
 8.59872347e+00 4.90862280e-01]
E = -507.639738559693
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="BFGS",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((14, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.6988712134173084e+06,1.1747178033543271e+06,2.9367945083858178e+05,7.3419865393677101e+04,1.8353927627435987e+04,2.2341424145819028e+03,4.5688904996449571e+02,1.2173317272260677e+02,3.7593061247508530e+01,4.7412722556720146e+00,3.9120358491841306e-01,8.5986297237246045e+00,4.9084868336327880e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "12s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:16:18 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  18795484.8537        1
[INPUT] 0    0    [1    /1   ]  4698871.21341        1
[INPUT] 0    0    [1    /1   ]  1174717.80335        1
[INPUT] 0    0    [1    /1   ]  293679.448606        1
[INPUT] 0    0    [1    /1   ]  73419.8726452        1
[INPUT] 0    0    [1    /1   ]  18352.566636         1
[INPUT] 0    0    [1    /1   ]  2236.19315152        1
[INPUT] 0    0    [1    /1   ]  456.114926358        1
[INPUT] 0    0    [1    /1   ]  121.482002296        1
[INPUT] 0    0    [1    /1   ]  37.5413067858        1
[INPUT] 0    0    [1    /1   ]  4.74109207826        1
[INPUT] 0    0    [1    /1   ]  0.391206990484       1
[INPUT] 1    0    [1    /1   ]  8.59872347042        1
[INPUT] 1    0    [1    /1   ]  0.490862279795       1

nuclear repulsion = 0
number of shells = 14
number of NR pGTOs = 18
number of NR cGTOs = 18
basis = {'Ar': [[0, [18795484.85366926, 1.0]], [0, [4698871.213413491, 1.0]], [0, [1174717.8033525017, 1.0]], [0, [293679.4486057948, 1.0]], [0, [73419.87264519831, 1.0]], [0, [18352.56663599882, 1.0]], [0, [2236.1931515185647, 1.0]], [0, [456.1149263576193, 1.0]], [0, [121.48200229622422, 1.0]], [0, [37.541306785808345, 1.0]], [0, [4.741092078259201, 1.0]], [0, [0.39120699048429863, 1.0]], [1, [8.598723470424131, 1.0]], [1, [0.490862279795342, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [18795484.85366926]
bas 1, expnt(s) = [4698871.21341349]
bas 2, expnt(s) = [1174717.8033525]
bas 3, expnt(s) = [293679.44860579]
bas 4, expnt(s) = [73419.8726452]
bas 5, expnt(s) = [18352.566636]
bas 6, expnt(s) = [2236.19315152]
bas 7, expnt(s) = [456.11492636]
bas 8, expnt(s) = [121.4820023]
bas 9, expnt(s) = [37.54130679]
bas 10, expnt(s) = [4.74109208]
bas 11, expnt(s) = [0.39120699]
bas 12, expnt(s) = [8.59872347]
bas 13, expnt(s) = [0.49086228]
CPU time:       159.30
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  0  1  1  0 42 43  0]
 [ 0  0  1  1  0 44 45  0]
 [ 0  0  1  1  0 46 47  0]
 [ 0  1  1  1  0 48 49  0]
 [ 0  1  1  1  0 50 51  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.87954849e+07 7.21199097e+05 4.69887121e+06 2.54982386e+05
 1.17471780e+06 9.01498871e+04 2.93679449e+05 3.18727981e+04
 7.34198726e+04 1.12687370e+04 1.83525666e+04 3.98370923e+03
 2.23619315e+03 8.21574609e+02 4.56114926e+02 2.49356525e+02
 1.21482002e+02 9.24483108e+01 3.75413068e+01 3.83174910e+01
 4.74109208e+00 8.11752840e+00 3.91206990e-01 1.24974089e+00
 8.59872347e+00 4.29563004e+01 4.90862280e-01 1.19862676e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319963253122616
cond(S) = 56.380597234533035
E1 = -688.8355683915293  E_coul = 184.91608780418554
init E= -503.919480587344
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.68087915972496  LUMO = 84.8484532460062
  mo_energy =
[-1.21650435e+02 -1.32810548e+01 -7.62156512e+00 -7.62156512e+00
 -7.62156512e+00 -1.65068192e+00 -6.80879160e-01 -6.80879160e-01
 -6.80879160e-01  8.48484532e+01  6.75725725e+02  3.93382650e+03
  2.96213631e+04  1.54738637e+05  6.64890806e+05  2.71962671e+06
  1.10459648e+07  4.65100860e+07]
E1 = -706.5858413259765  E_coul = 198.94653242995176
cycle= 1 E= -507.639308896025  delta_E= -3.72  |g|= 0.318  |ddm|= 0.301
    CPU time for cycle= 1      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.420539
diis-c [-0.1768533  1.       ]
  HOMO = -0.236247196649368  LUMO = 86.1812284100698
  mo_energy =
[-1.20262397e+02 -1.22529498e+01 -6.65301848e+00 -6.65301848e+00
 -6.65301848e+00 -1.16345591e+00 -2.36247197e-01 -2.36247197e-01
 -2.36247197e-01  8.61812284e+01  6.77096356e+02  3.93507799e+03
  2.96224516e+04  1.54739654e+05  6.64891793e+05  2.71962768e+06
  1.10459658e+07  4.65100870e+07]
E1 = -706.5542951424309  E_coul = 198.9145566935536
cycle= 2 E= -507.639738448877  delta_E= -0.00043  |g|= 0.00475  |ddm|= 0.0143
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00505023
diis-c [-2.54612853e-05 -4.96270119e-04  1.00049627e+00]
  HOMO = -0.236423175463889  LUMO = 86.1777025435298
  mo_energy =
[-1.20271064e+02 -1.22541434e+01 -6.65486708e+00 -6.65486708e+00
 -6.65486708e+00 -1.16352095e+00 -2.36423175e-01 -2.36423175e-01
 -2.36423175e-01  8.61777025e+01  6.77085746e+02  3.93506206e+03
  2.96224323e+04  1.54739634e+05  6.64891773e+05  2.71962766e+06
  1.10459658e+07  4.65100870e+07]
E1 = -706.5538526611157  E_coul = 198.91411410146313
cycle= 3 E= -507.639738559653  delta_E= -1.11e-07  |g|= 9.51e-05  |ddm|= 0.000203
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.000127191
diis-c [-3.98277890e-10  3.34197225e-05 -2.55034071e-02  1.02546999e+00]
  HOMO = -0.236425402035776  LUMO = 86.1776576578187
  mo_energy =
[-1.20271178e+02 -1.22541593e+01 -6.65489421e+00 -6.65489421e+00
 -6.65489421e+00 -1.16352161e+00 -2.36425402e-01 -2.36425402e-01
 -2.36425402e-01  8.61776577e+01  6.77085629e+02  3.93506191e+03
  2.96224322e+04  1.54739634e+05  6.64891773e+05  2.71962766e+06
  1.10459658e+07  4.65100870e+07]
E1 = -706.5538453700431  E_coul = 198.9141068103502
cycle= 4 E= -507.639738559693  delta_E= -4.04e-11  |g|= 3.76e-07  |ddm|= 3.47e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.5538453700431  E_coul = 198.9141068103502
  HOMO = -0.236425385605355  LUMO = 86.1776579974437
  mo_energy =
[-1.20271177e+02 -1.22541592e+01 -6.65489404e+00 -6.65489404e+00
 -6.65489404e+00 -1.16352160e+00 -2.36425386e-01 -2.36425386e-01
 -2.36425386e-01  8.61776580e+01  6.77085630e+02  3.93506192e+03
  2.96224322e+04  1.54739634e+05  6.64891773e+05  2.71962766e+06
  1.10459658e+07  4.65100870e+07]
E1 = -706.5538454073392  E_coul = 198.9141068476462
Extra cycle  E= -507.639738559693  delta_E= -1.14e-13  |g|= 6.49e-09  |ddm|= 1.66e-08
    CPU time for scf_cycle      0.10 sec, wall time      0.11 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 56.380597234533035
E1 = -706.5538454073392  E_coul = 198.9141068476462
init E= -507.639738559693
    CPU time for initialize scf      0.12 sec, wall time      0.12 sec
  HOMO = -0.236425385412937  LUMO = 86.1776580016014
  mo_energy =
[-1.20271177e+02 -1.22541592e+01 -6.65489404e+00 -6.65489404e+00
 -6.65489404e+00 -1.16352160e+00 -2.36425385e-01 -2.36425385e-01
 -2.36425385e-01  8.61776580e+01  6.77085630e+02  3.93506192e+03
  2.96224322e+04  1.54739634e+05  6.64891773e+05  2.71962766e+06
  1.10459658e+07  4.65100870e+07]
E1 = -706.5538454079046  E_coul = 198.91410684821133
cycle= 1 E= -507.639738559693  delta_E= -3.41e-13  |g|= 1.84e-10  |ddm|= 2.56e-10
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -706.5538454079046  E_coul = 198.91410684821133
  HOMO = -0.236425385410219  LUMO = 86.1776580016605
  mo_energy =
[-1.20271177e+02 -1.22541592e+01 -6.65489404e+00 -6.65489404e+00
 -6.65489404e+00 -1.16352160e+00 -2.36425385e-01 -2.36425385e-01
 -2.36425385e-01  8.61776580e+01  6.77085630e+02  3.93506192e+03
  2.96224322e+04  1.54739634e+05  6.64891773e+05  2.71962766e+06
  1.10459658e+07  4.65100870e+07]
E1 = -706.5538454079137  E_coul = 198.91410684822077
Extra cycle  E= -507.639738559693  delta_E= 3.41e-13  |g|= 1.39e-10  |ddm|= 4.56e-12
    CPU time for scf_cycle      0.19 sec, wall time      0.20 sec
exp = [1.87954849e+07 4.69887121e+06 1.17471780e+06 2.93679449e+05
 7.34198726e+04 1.83525666e+04 2.23619315e+03 4.56114926e+02
 1.21482002e+02 3.75413068e+01 4.74109208e+00 3.91206990e-01
 8.59872347e+00 4.90862280e-01]
grad_E = [-1.13779556e-13  1.78511027e-11  7.30657069e-12  1.04433037e-08
 -3.46224792e-08  6.36061129e-06 -6.22372621e-06 -1.37814787e-05
  1.68021688e-06 -3.25914759e-05 -2.59644340e-05  1.92085028e-04
  5.64777496e-05  3.90742969e-04]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="BFGS",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((14, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.6988712134173084e+06,1.1747178033543271e+06,2.9367945083858178e+05,7.3419865393677101e+04,1.8353927627435987e+04,2.2341424145819028e+03,4.5688904996449571e+02,1.2173317272260677e+02,3.7593061247508530e+01,4.7412722556720146e+00,3.9120358491841306e-01,8.5986297237246045e+00,4.9084868336327880e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "12s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:16:22 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  18795484.8537        1
[INPUT] 0    0    [1    /1   ]  4698871.21341        1
[INPUT] 0    0    [1    /1   ]  1174717.80335        1
[INPUT] 0    0    [1    /1   ]  293679.448193        1
[INPUT] 0    0    [1    /1   ]  73419.8739853        1
[INPUT] 0    0    [1    /1   ]  18352.315189         1
[INPUT] 0    0    [1    /1   ]  2236.57015751        1
[INPUT] 0    0    [1    /1   ]  455.986210383        1
[INPUT] 0    0    [1    /1   ]  121.415350642        1
[INPUT] 0    0    [1    /1   ]  37.5259020992        1
[INPUT] 0    0    [1    /1   ]  4.74106673925        1
[INPUT] 0    0    [1    /1   ]  0.391202979448       1
[INPUT] 1    0    [1    /1   ]  8.59870709525        1
[INPUT] 1    0    [1    /1   ]  0.490859700914       1

nuclear repulsion = 0
number of shells = 14
number of NR pGTOs = 18
number of NR cGTOs = 18
basis = {'Ar': [[0, [18795484.853669263, 1.0]], [0, [4698871.213412786, 1.0]], [0, [1174717.803352165, 1.0]], [0, [293679.44819327653, 1.0]], [0, [73419.87398530227, 1.0]], [0, [18352.315189047535, 1.0]], [0, [2236.570157509457, 1.0]], [0, [455.9862103832255, 1.0]], [0, [121.41535064180744, 1.0]], [0, [37.52590209920898, 1.0]], [0, [4.741066739246854, 1.0]], [0, [0.3912029794479119, 1.0]], [1, [8.598707095252012, 1.0]], [1, [0.49085970091408776, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [18795484.85366926]
bas 1, expnt(s) = [4698871.21341279]
bas 2, expnt(s) = [1174717.80335217]
bas 3, expnt(s) = [293679.44819328]
bas 4, expnt(s) = [73419.8739853]
bas 5, expnt(s) = [18352.31518905]
bas 6, expnt(s) = [2236.57015751]
bas 7, expnt(s) = [455.98621038]
bas 8, expnt(s) = [121.41535064]
bas 9, expnt(s) = [37.5259021]
bas 10, expnt(s) = [4.74106674]
bas 11, expnt(s) = [0.39120298]
bas 12, expnt(s) = [8.5987071]
bas 13, expnt(s) = [0.4908597]
CPU time:       162.70
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  0  1  1  0 42 43  0]
 [ 0  0  1  1  0 44 45  0]
 [ 0  0  1  1  0 46 47  0]
 [ 0  1  1  1  0 48 49  0]
 [ 0  1  1  1  0 50 51  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.87954849e+07 7.21199097e+05 4.69887121e+06 2.54982386e+05
 1.17471780e+06 9.01498871e+04 2.93679448e+05 3.18727980e+04
 7.34198740e+04 1.12687372e+04 1.83523152e+04 3.98366829e+03
 2.23657016e+03 8.21678491e+02 4.55986210e+02 2.49303747e+02
 1.21415351e+02 9.24102666e+01 3.75259021e+01 3.83056980e+01
 4.74106674e+00 8.11749586e+00 3.91202979e-01 1.24973128e+00
 8.59870710e+00 4.29561981e+01 4.90859701e-01 1.19861888e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319968422644855
cond(S) = 56.37576811365069
E1 = -688.8357116782834  E_coul = 184.91582356154336
init E= -503.91988811674
    CPU time for initialize scf      0.03 sec, wall time      0.03 sec
  HOMO = -0.68088351360425  LUMO = 84.7881100538682
  mo_energy =
[-1.21650479e+02 -1.32810675e+01 -7.62158537e+00 -7.62158537e+00
 -7.62158537e+00 -1.65068253e+00 -6.80883514e-01 -6.80883514e-01
 -6.80883514e-01  8.47881101e+01  6.75382994e+02  3.93355211e+03
  2.96216435e+04  1.54738556e+05  6.64890548e+05  2.71962643e+06
  1.10459646e+07  4.65100858e+07]
E1 = -706.585496121452  E_coul = 198.94618643532357
cycle= 1 E= -507.639309686128  delta_E= -3.72  |g|= 0.318  |ddm|= 0.301
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.420533
diis-c [-0.17684839  1.        ]
  HOMO = -0.236255949198224  LUMO = 86.1208073287436
  mo_energy =
[-1.20262443e+02 -1.22529694e+01 -6.65304356e+00 -6.65304356e+00
 -6.65304356e+00 -1.16346212e+00 -2.36255949e-01 -2.36255949e-01
 -2.36255949e-01  8.61208073e+01  6.76753618e+02  3.93480354e+03
  2.96227320e+04  1.54739573e+05  6.64891536e+05  2.71962741e+06
  1.10459655e+07  4.65100868e+07]
E1 = -706.553917886796  E_coul = 198.91417818736386
cycle= 2 E= -507.639739699432  delta_E= -0.00043  |g|= 0.00476  |ddm|= 0.0143
    CPU time for cycle= 2      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.00505272
diis-c [-2.54869999e-05 -4.93526256e-04  1.00049353e+00]
  HOMO = -0.236432141654324  LUMO = 86.117279340773
  mo_energy =
[-1.20271118e+02 -1.22541645e+01 -6.65489431e+00 -6.65489431e+00
 -6.65489431e+00 -1.16352725e+00 -2.36432142e-01 -2.36432142e-01
 -2.36432142e-01  8.61172793e+01  6.76743001e+02  3.93478759e+03
  2.96227127e+04  1.54739553e+05  6.64891515e+05  2.71962738e+06
  1.10459655e+07  4.65100867e+07]
E1 = -706.553474761615  E_coul = 198.91373495120968
cycle= 3 E= -507.639739810405  delta_E= -1.11e-07  |g|= 9.52e-05  |ddm|= 0.000203
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.000127313
diis-c [-3.99030267e-10  3.34203901e-05 -2.55150615e-02  1.02548164e+00]
  HOMO = -0.236434372339195  LUMO = 86.1172343914997
  mo_energy =
[-1.20271232e+02 -1.22541804e+01 -6.65492148e+00 -6.65492148e+00
 -6.65492148e+00 -1.16352791e+00 -2.36434372e-01 -2.36434372e-01
 -2.36434372e-01  8.61172344e+01  6.76742883e+02  3.93478745e+03
  2.96227125e+04  1.54739553e+05  6.64891515e+05  2.71962738e+06
  1.10459655e+07  4.65100867e+07]
E1 = -706.5534674554464  E_coul = 198.91372764500122
cycle= 4 E= -507.639739810445  delta_E= -3.98e-11  |g|= 3.76e-07  |ddm|= 3.48e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.5534674554464  E_coul = 198.91372764500122
  HOMO = -0.236434355872548  LUMO = 86.1172347315719
  mo_energy =
[-1.20271231e+02 -1.22541803e+01 -6.65492132e+00 -6.65492132e+00
 -6.65492132e+00 -1.16352790e+00 -2.36434356e-01 -2.36434356e-01
 -2.36434356e-01  8.61172347e+01  6.76742884e+02  3.93478745e+03
  2.96227125e+04  1.54739553e+05  6.64891515e+05  2.71962738e+06
  1.10459655e+07  4.65100867e+07]
E1 = -706.5534674928274  E_coul = 198.91372768238196
Extra cycle  E= -507.639739810445  delta_E= -3.41e-13  |g|= 6.5e-09  |ddm|= 1.66e-08
    CPU time for scf_cycle      0.10 sec, wall time      0.11 sec
exp = [1.87954849e+07 4.69887121e+06 1.17471780e+06 2.93679448e+05
 7.34198740e+04 1.83523152e+04 2.23657016e+03 4.55986210e+02
 1.21415351e+02 3.75259021e+01 4.74106674e+00 3.91202979e-01
 8.59870710e+00 4.90859701e-01]
E = -507.63973981044546
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="BFGS",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((14, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.6988712134173084e+06,1.1747178033543271e+06,2.9367945083858178e+05,7.3419865393677101e+04,1.8353927627435987e+04,2.2341424145819028e+03,4.5688904996449571e+02,1.2173317272260677e+02,3.7593061247508530e+01,4.7412722556720146e+00,3.9120358491841306e-01,8.5986297237246045e+00,4.9084868336327880e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "12s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:16:22 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  18795484.8537        1
[INPUT] 0    0    [1    /1   ]  4698871.21341        1
[INPUT] 0    0    [1    /1   ]  1174717.80335        1
[INPUT] 0    0    [1    /1   ]  293679.448193        1
[INPUT] 0    0    [1    /1   ]  73419.8739853        1
[INPUT] 0    0    [1    /1   ]  18352.315189         1
[INPUT] 0    0    [1    /1   ]  2236.57015751        1
[INPUT] 0    0    [1    /1   ]  455.986210383        1
[INPUT] 0    0    [1    /1   ]  121.415350642        1
[INPUT] 0    0    [1    /1   ]  37.5259020992        1
[INPUT] 0    0    [1    /1   ]  4.74106673925        1
[INPUT] 0    0    [1    /1   ]  0.391202979448       1
[INPUT] 1    0    [1    /1   ]  8.59870709525        1
[INPUT] 1    0    [1    /1   ]  0.490859700914       1

nuclear repulsion = 0
number of shells = 14
number of NR pGTOs = 18
number of NR cGTOs = 18
basis = {'Ar': [[0, [18795484.853669263, 1.0]], [0, [4698871.213412786, 1.0]], [0, [1174717.803352165, 1.0]], [0, [293679.44819327653, 1.0]], [0, [73419.87398530227, 1.0]], [0, [18352.315189047535, 1.0]], [0, [2236.570157509457, 1.0]], [0, [455.9862103832255, 1.0]], [0, [121.41535064180744, 1.0]], [0, [37.52590209920898, 1.0]], [0, [4.741066739246854, 1.0]], [0, [0.3912029794479119, 1.0]], [1, [8.598707095252012, 1.0]], [1, [0.49085970091408776, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [18795484.85366926]
bas 1, expnt(s) = [4698871.21341279]
bas 2, expnt(s) = [1174717.80335217]
bas 3, expnt(s) = [293679.44819328]
bas 4, expnt(s) = [73419.8739853]
bas 5, expnt(s) = [18352.31518905]
bas 6, expnt(s) = [2236.57015751]
bas 7, expnt(s) = [455.98621038]
bas 8, expnt(s) = [121.41535064]
bas 9, expnt(s) = [37.5259021]
bas 10, expnt(s) = [4.74106674]
bas 11, expnt(s) = [0.39120298]
bas 12, expnt(s) = [8.5987071]
bas 13, expnt(s) = [0.4908597]
CPU time:       163.40
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  0  1  1  0 42 43  0]
 [ 0  0  1  1  0 44 45  0]
 [ 0  0  1  1  0 46 47  0]
 [ 0  1  1  1  0 48 49  0]
 [ 0  1  1  1  0 50 51  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.87954849e+07 7.21199097e+05 4.69887121e+06 2.54982386e+05
 1.17471780e+06 9.01498871e+04 2.93679448e+05 3.18727980e+04
 7.34198740e+04 1.12687372e+04 1.83523152e+04 3.98366829e+03
 2.23657016e+03 8.21678491e+02 4.55986210e+02 2.49303747e+02
 1.21415351e+02 9.24102666e+01 3.75259021e+01 3.83056980e+01
 4.74106674e+00 8.11749586e+00 3.91202979e-01 1.24973128e+00
 8.59870710e+00 4.29561981e+01 4.90859701e-01 1.19861888e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319968422644855
cond(S) = 56.37576811365069
E1 = -688.8357116782834  E_coul = 184.91582356154336
init E= -503.91988811674
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.68088351360425  LUMO = 84.7881100538682
  mo_energy =
[-1.21650479e+02 -1.32810675e+01 -7.62158537e+00 -7.62158537e+00
 -7.62158537e+00 -1.65068253e+00 -6.80883514e-01 -6.80883514e-01
 -6.80883514e-01  8.47881101e+01  6.75382994e+02  3.93355211e+03
  2.96216435e+04  1.54738556e+05  6.64890548e+05  2.71962643e+06
  1.10459646e+07  4.65100858e+07]
E1 = -706.585496121452  E_coul = 198.94618643532357
cycle= 1 E= -507.639309686128  delta_E= -3.72  |g|= 0.318  |ddm|= 0.301
    CPU time for cycle= 1      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.420533
diis-c [-0.17684839  1.        ]
  HOMO = -0.236255949198224  LUMO = 86.1208073287436
  mo_energy =
[-1.20262443e+02 -1.22529694e+01 -6.65304356e+00 -6.65304356e+00
 -6.65304356e+00 -1.16346212e+00 -2.36255949e-01 -2.36255949e-01
 -2.36255949e-01  8.61208073e+01  6.76753618e+02  3.93480354e+03
  2.96227320e+04  1.54739573e+05  6.64891536e+05  2.71962741e+06
  1.10459655e+07  4.65100868e+07]
E1 = -706.553917886796  E_coul = 198.91417818736386
cycle= 2 E= -507.639739699432  delta_E= -0.00043  |g|= 0.00476  |ddm|= 0.0143
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00505272
diis-c [-2.54869999e-05 -4.93526256e-04  1.00049353e+00]
  HOMO = -0.236432141654324  LUMO = 86.117279340773
  mo_energy =
[-1.20271118e+02 -1.22541645e+01 -6.65489431e+00 -6.65489431e+00
 -6.65489431e+00 -1.16352725e+00 -2.36432142e-01 -2.36432142e-01
 -2.36432142e-01  8.61172793e+01  6.76743001e+02  3.93478759e+03
  2.96227127e+04  1.54739553e+05  6.64891515e+05  2.71962738e+06
  1.10459655e+07  4.65100867e+07]
E1 = -706.553474761615  E_coul = 198.91373495120968
cycle= 3 E= -507.639739810405  delta_E= -1.11e-07  |g|= 9.52e-05  |ddm|= 0.000203
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.000127313
diis-c [-3.99030267e-10  3.34203901e-05 -2.55150615e-02  1.02548164e+00]
  HOMO = -0.236434372339195  LUMO = 86.1172343914997
  mo_energy =
[-1.20271232e+02 -1.22541804e+01 -6.65492148e+00 -6.65492148e+00
 -6.65492148e+00 -1.16352791e+00 -2.36434372e-01 -2.36434372e-01
 -2.36434372e-01  8.61172344e+01  6.76742883e+02  3.93478745e+03
  2.96227125e+04  1.54739553e+05  6.64891515e+05  2.71962738e+06
  1.10459655e+07  4.65100867e+07]
E1 = -706.5534674554464  E_coul = 198.91372764500122
cycle= 4 E= -507.639739810445  delta_E= -3.98e-11  |g|= 3.76e-07  |ddm|= 3.48e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.5534674554464  E_coul = 198.91372764500122
  HOMO = -0.236434355872548  LUMO = 86.1172347315719
  mo_energy =
[-1.20271231e+02 -1.22541803e+01 -6.65492132e+00 -6.65492132e+00
 -6.65492132e+00 -1.16352790e+00 -2.36434356e-01 -2.36434356e-01
 -2.36434356e-01  8.61172347e+01  6.76742884e+02  3.93478745e+03
  2.96227125e+04  1.54739553e+05  6.64891515e+05  2.71962738e+06
  1.10459655e+07  4.65100867e+07]
E1 = -706.5534674928274  E_coul = 198.91372768238196
Extra cycle  E= -507.639739810445  delta_E= -3.41e-13  |g|= 6.5e-09  |ddm|= 1.66e-08
    CPU time for scf_cycle      0.11 sec, wall time      0.12 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 56.37576811365069
E1 = -706.5534674928274  E_coul = 198.91372768238196
init E= -507.639739810445
    CPU time for initialize scf      0.12 sec, wall time      0.12 sec
  HOMO = -0.236434355679634  LUMO = 86.1172347357397
  mo_energy =
[-1.20271231e+02 -1.22541803e+01 -6.65492132e+00 -6.65492132e+00
 -6.65492132e+00 -1.16352790e+00 -2.36434356e-01 -2.36434356e-01
 -2.36434356e-01  8.61172347e+01  6.76742884e+02  3.93478745e+03
  2.96227125e+04  1.54739553e+05  6.64891515e+05  2.71962738e+06
  1.10459655e+07  4.65100867e+07]
E1 = -706.5534674933945  E_coul = 198.9137276829487
cycle= 1 E= -507.639739810446  delta_E= -3.41e-13  |g|= 1.65e-10  |ddm|= 2.57e-10
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -706.5534674933945  E_coul = 198.9137276829487
  HOMO = -0.236434355676905  LUMO = 86.1172347357965
  mo_energy =
[-1.20271231e+02 -1.22541803e+01 -6.65492132e+00 -6.65492132e+00
 -6.65492132e+00 -1.16352790e+00 -2.36434356e-01 -2.36434356e-01
 -2.36434356e-01  8.61172347e+01  6.76742884e+02  3.93478745e+03
  2.96227125e+04  1.54739553e+05  6.64891515e+05  2.71962738e+06
  1.10459655e+07  4.65100867e+07]
E1 = -706.5534674934045  E_coul = 198.9137276829586
Extra cycle  E= -507.639739810446  delta_E= -5.68e-14  |g|= 1.28e-10  |ddm|= 4.63e-12
    CPU time for scf_cycle      0.19 sec, wall time      0.19 sec
exp = [1.87954849e+07 4.69887121e+06 1.17471780e+06 2.93679448e+05
 7.34198740e+04 1.83523152e+04 2.23657016e+03 4.55986210e+02
 1.21415351e+02 3.75259021e+01 4.74106674e+00 3.91202979e-01
 8.59870710e+00 4.90859701e-01]
grad_E = [-1.14145749e-13  1.78276593e-11  7.11283736e-12  1.04299548e-08
 -3.46843191e-08  6.35188495e-06 -5.82032570e-06 -1.30061429e-05
 -1.45093256e-05 -2.82123594e-05 -1.92731994e-05  1.43748792e-04
  4.22383607e-05  2.92707279e-04]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="BFGS",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((14, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.6988712134173084e+06,1.1747178033543271e+06,2.9367945083858178e+05,7.3419865393677101e+04,1.8353927627435987e+04,2.2341424145819028e+03,4.5688904996449571e+02,1.2173317272260677e+02,3.7593061247508530e+01,4.7412722556720146e+00,3.9120358491841306e-01,8.5986297237246045e+00,4.9084868336327880e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "12s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:16:26 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  18795484.8537        1
[INPUT] 0    0    [1    /1   ]  4698871.21341        1
[INPUT] 0    0    [1    /1   ]  1174717.80335        1
[INPUT] 0    0    [1    /1   ]  293679.447784        1
[INPUT] 0    0    [1    /1   ]  73419.8753151        1
[INPUT] 0    0    [1    /1   ]  18352.0655912        1
[INPUT] 0    0    [1    /1   ]  2236.94651432        1
[INPUT] 0    0    [1    /1   ]  455.842231978        1
[INPUT] 0    0    [1    /1   ]  121.3718271          1
[INPUT] 0    0    [1    /1   ]  37.5188482587        1
[INPUT] 0    0    [1    /1   ]  4.74104601089        1
[INPUT] 0    0    [1    /1   ]  0.391198367583       1
[INPUT] 1    0    [1    /1   ]  8.59866854171        1
[INPUT] 1    0    [1    /1   ]  0.490854243083       1

nuclear repulsion = 0
number of shells = 14
number of NR pGTOs = 18
number of NR cGTOs = 18
basis = {'Ar': [[0, [18795484.853669267, 1.0]], [0, [4698871.213412086, 1.0]], [0, [1174717.8033518302, 1.0]], [0, [293679.4477837972, 1.0]], [0, [73419.87531513724, 1.0]], [0, [18352.065591229773, 1.0]], [0, [2236.9465143172165, 1.0]], [0, [455.84223197750447, 1.0]], [0, [121.3718271002901, 1.0]], [0, [37.51884825873386, 1.0]], [0, [4.741046010888602, 1.0]], [0, [0.39119836758254106, 1.0]], [1, [8.59866854171177, 1.0]], [1, [0.4908542430827048, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [18795484.85366927]
bas 1, expnt(s) = [4698871.21341209]
bas 2, expnt(s) = [1174717.80335183]
bas 3, expnt(s) = [293679.4477838]
bas 4, expnt(s) = [73419.87531514]
bas 5, expnt(s) = [18352.06559123]
bas 6, expnt(s) = [2236.94651432]
bas 7, expnt(s) = [455.84223198]
bas 8, expnt(s) = [121.3718271]
bas 9, expnt(s) = [37.51884826]
bas 10, expnt(s) = [4.74104601]
bas 11, expnt(s) = [0.39119837]
bas 12, expnt(s) = [8.59866854]
bas 13, expnt(s) = [0.49085424]
CPU time:       166.82
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  0  1  1  0 42 43  0]
 [ 0  0  1  1  0 44 45  0]
 [ 0  0  1  1  0 46 47  0]
 [ 0  1  1  1  0 48 49  0]
 [ 0  1  1  1  0 50 51  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.87954849e+07 7.21199097e+05 4.69887121e+06 2.54982386e+05
 1.17471780e+06 9.01498871e+04 2.93679448e+05 3.18727980e+04
 7.34198753e+04 1.12687373e+04 1.83520656e+04 3.98362766e+03
 2.23694651e+03 8.21782189e+02 4.55842232e+02 2.49244706e+02
 1.21371827e+02 9.23854209e+01 3.75188483e+01 3.83002975e+01
 4.74104601e+00 8.11746924e+00 3.91198368e-01 1.24972023e+00
 8.59866854e+00 4.29559574e+01 4.90854243e-01 1.19860222e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319976859763223
cond(S) = 56.37381735166613
E1 = -688.8358268157132  E_coul = 184.9153963048126
init E= -503.920430510901
    CPU time for initialize scf      0.03 sec, wall time      0.03 sec
  HOMO = -0.68089146127929  LUMO = 84.7552264735716
  mo_energy =
[-1.21650532e+02 -1.32811086e+01 -7.62161483e+00 -7.62161483e+00
 -7.62161483e+00 -1.65068813e+00 -6.80891461e-01 -6.80891461e-01
 -6.80891461e-01  8.47552265e+01  6.75121660e+02  3.93334257e+03
  2.96219673e+04  1.54738515e+05  6.64890328e+05  2.71962619e+06
  1.10459643e+07  4.65100856e+07]
E1 = -706.5849658936344  E_coul = 198.94565576116298
cycle= 1 E= -507.639310132471  delta_E= -3.72  |g|= 0.318  |ddm|= 0.301
    CPU time for cycle= 1      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.420547
diis-c [-0.17685958  1.        ]
  HOMO = -0.236271089480397  LUMO = 86.0878794008245
  mo_energy =
[-1.20262491e+02 -1.22530186e+01 -6.65308024e+00 -6.65308024e+00
 -6.65308024e+00 -1.16347512e+00 -2.36271089e-01 -2.36271089e-01
 -2.36271089e-01  8.60878794e+01  6.76492299e+02  3.93459398e+03
  2.96230558e+04  1.54739532e+05  6.64891315e+05  2.71962717e+06
  1.10459653e+07  4.65100866e+07]
E1 = -706.5533710025466  E_coul = 198.91363061943707
cycle= 2 E= -507.639740383109  delta_E= -0.00043  |g|= 0.00476  |ddm|= 0.0143
    CPU time for cycle= 2      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.00505376
diis-c [-2.54977201e-05 -4.92240495e-04  1.00049224e+00]
  HOMO = -0.236447393039966  LUMO = 86.0843504141883
  mo_energy =
[-1.20271170e+02 -1.22542144e+01 -6.65493212e+00 -6.65493212e+00
 -6.65493212e+00 -1.16354029e+00 -2.36447393e-01 -2.36447393e-01
 -2.36447393e-01  8.60843504e+01  6.76481678e+02  3.93457803e+03
  2.96230365e+04  1.54739512e+05  6.64891295e+05  2.71962714e+06
  1.10459653e+07  4.65100865e+07]
E1 = -706.5529275324993  E_coul = 198.91318703831226
cycle= 3 E= -507.639740494187  delta_E= -1.11e-07  |g|= 9.53e-05  |ddm|= 0.000203
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.000127372
diis-c [-3.99381358e-10  3.34270554e-05 -2.55214340e-02  1.02548801e+00]
  HOMO = -0.236449625869274  LUMO = 86.0843054320039
  mo_energy =
[-1.20271284e+02 -1.22542303e+01 -6.65495932e+00 -6.65495932e+00
 -6.65495932e+00 -1.16354095e+00 -2.36449626e-01 -2.36449626e-01
 -2.36449626e-01  8.60843054e+01  6.76481560e+02  3.93457789e+03
  2.96230363e+04  1.54739512e+05  6.64891295e+05  2.71962714e+06
  1.10459653e+07  4.65100865e+07]
E1 = -706.5529202182623  E_coul = 198.9131797240344
cycle= 4 E= -507.639740494228  delta_E= -4.08e-11  |g|= 3.76e-07  |ddm|= 3.48e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.5529202182623  E_coul = 198.9131797240344
  HOMO = -0.236449609383838  LUMO = 86.0843057722983
  mo_energy =
[-1.20271283e+02 -1.22542302e+01 -6.65495916e+00 -6.65495916e+00
 -6.65495916e+00 -1.16354095e+00 -2.36449609e-01 -2.36449609e-01
 -2.36449609e-01  8.60843058e+01  6.76481561e+02  3.93457789e+03
  2.96230363e+04  1.54739512e+05  6.64891295e+05  2.71962714e+06
  1.10459653e+07  4.65100865e+07]
E1 = -706.5529202556878  E_coul = 198.91317976145973
Extra cycle  E= -507.639740494228  delta_E= -1.71e-13  |g|= 6.51e-09  |ddm|= 1.66e-08
    CPU time for scf_cycle      0.10 sec, wall time      0.11 sec
exp = [1.87954849e+07 4.69887121e+06 1.17471780e+06 2.93679448e+05
 7.34198753e+04 1.83520656e+04 2.23694651e+03 4.55842232e+02
 1.21371827e+02 3.75188483e+01 4.74104601e+00 3.91198368e-01
 8.59866854e+00 4.90854243e-01]
E = -507.6397404942281
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="BFGS",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((14, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.6988712134173084e+06,1.1747178033543271e+06,2.9367945083858178e+05,7.3419865393677101e+04,1.8353927627435987e+04,2.2341424145819028e+03,4.5688904996449571e+02,1.2173317272260677e+02,3.7593061247508530e+01,4.7412722556720146e+00,3.9120358491841306e-01,8.5986297237246045e+00,4.9084868336327880e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "12s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:16:26 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  18795484.8537        1
[INPUT] 0    0    [1    /1   ]  4698871.21341        1
[INPUT] 0    0    [1    /1   ]  1174717.80335        1
[INPUT] 0    0    [1    /1   ]  293679.447784        1
[INPUT] 0    0    [1    /1   ]  73419.8753151        1
[INPUT] 0    0    [1    /1   ]  18352.0655912        1
[INPUT] 0    0    [1    /1   ]  2236.94651432        1
[INPUT] 0    0    [1    /1   ]  455.842231978        1
[INPUT] 0    0    [1    /1   ]  121.3718271          1
[INPUT] 0    0    [1    /1   ]  37.5188482587        1
[INPUT] 0    0    [1    /1   ]  4.74104601089        1
[INPUT] 0    0    [1    /1   ]  0.391198367583       1
[INPUT] 1    0    [1    /1   ]  8.59866854171        1
[INPUT] 1    0    [1    /1   ]  0.490854243083       1

nuclear repulsion = 0
number of shells = 14
number of NR pGTOs = 18
number of NR cGTOs = 18
basis = {'Ar': [[0, [18795484.853669267, 1.0]], [0, [4698871.213412086, 1.0]], [0, [1174717.8033518302, 1.0]], [0, [293679.4477837972, 1.0]], [0, [73419.87531513724, 1.0]], [0, [18352.065591229773, 1.0]], [0, [2236.9465143172165, 1.0]], [0, [455.84223197750447, 1.0]], [0, [121.3718271002901, 1.0]], [0, [37.51884825873386, 1.0]], [0, [4.741046010888602, 1.0]], [0, [0.39119836758254106, 1.0]], [1, [8.59866854171177, 1.0]], [1, [0.4908542430827048, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [18795484.85366927]
bas 1, expnt(s) = [4698871.21341209]
bas 2, expnt(s) = [1174717.80335183]
bas 3, expnt(s) = [293679.4477838]
bas 4, expnt(s) = [73419.87531514]
bas 5, expnt(s) = [18352.06559123]
bas 6, expnt(s) = [2236.94651432]
bas 7, expnt(s) = [455.84223198]
bas 8, expnt(s) = [121.3718271]
bas 9, expnt(s) = [37.51884826]
bas 10, expnt(s) = [4.74104601]
bas 11, expnt(s) = [0.39119837]
bas 12, expnt(s) = [8.59866854]
bas 13, expnt(s) = [0.49085424]
CPU time:       167.52
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  0  1  1  0 42 43  0]
 [ 0  0  1  1  0 44 45  0]
 [ 0  0  1  1  0 46 47  0]
 [ 0  1  1  1  0 48 49  0]
 [ 0  1  1  1  0 50 51  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.87954849e+07 7.21199097e+05 4.69887121e+06 2.54982386e+05
 1.17471780e+06 9.01498871e+04 2.93679448e+05 3.18727980e+04
 7.34198753e+04 1.12687373e+04 1.83520656e+04 3.98362766e+03
 2.23694651e+03 8.21782189e+02 4.55842232e+02 2.49244706e+02
 1.21371827e+02 9.23854209e+01 3.75188483e+01 3.83002975e+01
 4.74104601e+00 8.11746924e+00 3.91198368e-01 1.24972023e+00
 8.59866854e+00 4.29559574e+01 4.90854243e-01 1.19860222e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319976859763223
cond(S) = 56.37381735166613
E1 = -688.8358268157132  E_coul = 184.9153963048126
init E= -503.920430510901
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.68089146127929  LUMO = 84.7552264735716
  mo_energy =
[-1.21650532e+02 -1.32811086e+01 -7.62161483e+00 -7.62161483e+00
 -7.62161483e+00 -1.65068813e+00 -6.80891461e-01 -6.80891461e-01
 -6.80891461e-01  8.47552265e+01  6.75121660e+02  3.93334257e+03
  2.96219673e+04  1.54738515e+05  6.64890328e+05  2.71962619e+06
  1.10459643e+07  4.65100856e+07]
E1 = -706.5849658936344  E_coul = 198.94565576116298
cycle= 1 E= -507.639310132471  delta_E= -3.72  |g|= 0.318  |ddm|= 0.301
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.420547
diis-c [-0.17685958  1.        ]
  HOMO = -0.236271089480397  LUMO = 86.0878794008245
  mo_energy =
[-1.20262491e+02 -1.22530186e+01 -6.65308024e+00 -6.65308024e+00
 -6.65308024e+00 -1.16347512e+00 -2.36271089e-01 -2.36271089e-01
 -2.36271089e-01  8.60878794e+01  6.76492299e+02  3.93459398e+03
  2.96230558e+04  1.54739532e+05  6.64891315e+05  2.71962717e+06
  1.10459653e+07  4.65100866e+07]
E1 = -706.5533710025466  E_coul = 198.91363061943707
cycle= 2 E= -507.639740383109  delta_E= -0.00043  |g|= 0.00476  |ddm|= 0.0143
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00505376
diis-c [-2.54977201e-05 -4.92240495e-04  1.00049224e+00]
  HOMO = -0.236447393039966  LUMO = 86.0843504141883
  mo_energy =
[-1.20271170e+02 -1.22542144e+01 -6.65493212e+00 -6.65493212e+00
 -6.65493212e+00 -1.16354029e+00 -2.36447393e-01 -2.36447393e-01
 -2.36447393e-01  8.60843504e+01  6.76481678e+02  3.93457803e+03
  2.96230365e+04  1.54739512e+05  6.64891295e+05  2.71962714e+06
  1.10459653e+07  4.65100865e+07]
E1 = -706.5529275324993  E_coul = 198.91318703831226
cycle= 3 E= -507.639740494187  delta_E= -1.11e-07  |g|= 9.53e-05  |ddm|= 0.000203
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.000127372
diis-c [-3.99381358e-10  3.34270554e-05 -2.55214340e-02  1.02548801e+00]
  HOMO = -0.236449625869274  LUMO = 86.0843054320039
  mo_energy =
[-1.20271284e+02 -1.22542303e+01 -6.65495932e+00 -6.65495932e+00
 -6.65495932e+00 -1.16354095e+00 -2.36449626e-01 -2.36449626e-01
 -2.36449626e-01  8.60843054e+01  6.76481560e+02  3.93457789e+03
  2.96230363e+04  1.54739512e+05  6.64891295e+05  2.71962714e+06
  1.10459653e+07  4.65100865e+07]
E1 = -706.5529202182623  E_coul = 198.9131797240344
cycle= 4 E= -507.639740494228  delta_E= -4.08e-11  |g|= 3.76e-07  |ddm|= 3.48e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.5529202182623  E_coul = 198.9131797240344
  HOMO = -0.236449609383838  LUMO = 86.0843057722983
  mo_energy =
[-1.20271283e+02 -1.22542302e+01 -6.65495916e+00 -6.65495916e+00
 -6.65495916e+00 -1.16354095e+00 -2.36449609e-01 -2.36449609e-01
 -2.36449609e-01  8.60843058e+01  6.76481561e+02  3.93457789e+03
  2.96230363e+04  1.54739512e+05  6.64891295e+05  2.71962714e+06
  1.10459653e+07  4.65100865e+07]
E1 = -706.5529202556878  E_coul = 198.91317976145973
Extra cycle  E= -507.639740494228  delta_E= -1.71e-13  |g|= 6.51e-09  |ddm|= 1.66e-08
    CPU time for scf_cycle      0.10 sec, wall time      0.11 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 56.37381735166613
E1 = -706.5529202556878  E_coul = 198.91317976145973
init E= -507.639740494228
    CPU time for initialize scf      0.12 sec, wall time      0.12 sec
  HOMO = -0.236449609190662  LUMO = 86.0843057764634
  mo_energy =
[-1.20271283e+02 -1.22542302e+01 -6.65495916e+00 -6.65495916e+00
 -6.65495916e+00 -1.16354095e+00 -2.36449609e-01 -2.36449609e-01
 -2.36449609e-01  8.60843058e+01  6.76481561e+02  3.93457789e+03
  2.96230363e+04  1.54739512e+05  6.64891295e+05  2.71962714e+06
  1.10459653e+07  4.65100865e+07]
E1 = -706.5529202562551  E_coul = 198.91317976202743
cycle= 1 E= -507.639740494228  delta_E= 3.98e-13  |g|= 1.46e-10  |ddm|= 2.57e-10
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -706.5529202562551  E_coul = 198.91317976202743
  HOMO = -0.236449609187932  LUMO = 86.0843057765224
  mo_energy =
[-1.20271283e+02 -1.22542302e+01 -6.65495916e+00 -6.65495916e+00
 -6.65495916e+00 -1.16354095e+00 -2.36449609e-01 -2.36449609e-01
 -2.36449609e-01  8.60843058e+01  6.76481561e+02  3.93457789e+03
  2.96230363e+04  1.54739512e+05  6.64891295e+05  2.71962714e+06
  1.10459653e+07  4.65100865e+07]
E1 = -706.552920256265  E_coul = 198.91317976203712
Extra cycle  E= -507.639740494228  delta_E= -2.27e-13  |g|= 9.59e-11  |ddm|= 4.6e-12
    CPU time for scf_cycle      0.19 sec, wall time      0.19 sec
exp = [1.87954849e+07 4.69887121e+06 1.17471780e+06 2.93679448e+05
 7.34198753e+04 1.83520656e+04 2.23694651e+03 4.55842232e+02
 1.21371827e+02 3.75188483e+01 4.74104601e+00 3.91198368e-01
 8.59866854e+00 4.90854243e-01]
grad_E = [-1.14603297e-13  1.77983895e-11  6.87096728e-12  1.04132787e-08
 -3.47606392e-08  6.34076003e-06 -5.17419690e-06 -1.61337234e-05
 -1.87796127e-05 -1.41972118e-05 -7.28350125e-06  5.46094862e-05
  1.59953157e-05  1.11176406e-04]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="BFGS",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((14, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.6988712134173084e+06,1.1747178033543271e+06,2.9367945083858178e+05,7.3419865393677101e+04,1.8353927627435987e+04,2.2341424145819028e+03,4.5688904996449571e+02,1.2173317272260677e+02,3.7593061247508530e+01,4.7412722556720146e+00,3.9120358491841306e-01,8.5986297237246045e+00,4.9084868336327880e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "12s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:16:30 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  18795484.8537        1
[INPUT] 0    0    [1    /1   ]  4698871.21341        1
[INPUT] 0    0    [1    /1   ]  1174717.80335        1
[INPUT] 0    0    [1    /1   ]  293679.447649        1
[INPUT] 0    0    [1    /1   ]  73419.8757516        1
[INPUT] 0    0    [1    /1   ]  18351.9836381        1
[INPUT] 0    0    [1    /1   ]  2237.07105491        1
[INPUT] 0    0    [1    /1   ]  455.787564878        1
[INPUT] 0    0    [1    /1   ]  121.367890935        1
[INPUT] 0    0    [1    /1   ]  37.5203124559        1
[INPUT] 0    0    [1    /1   ]  4.74104115783        1
[INPUT] 0    0    [1    /1   ]  0.391196569776       1
[INPUT] 1    0    [1    /1   ]  8.59864574468        1
[INPUT] 1    0    [1    /1   ]  0.490851133549       1

nuclear repulsion = 0
number of shells = 14
number of NR pGTOs = 18
number of NR cGTOs = 18
basis = {'Ar': [[0, [18795484.853669267, 1.0]], [0, [4698871.2134118555, 1.0]], [0, [1174717.8033517199, 1.0]], [0, [293679.4476493509, 1.0]], [0, [73419.87575158775, 1.0]], [0, [18351.983638098503, 1.0]], [0, [2237.071054914477, 1.0]], [0, [455.7875648779836, 1.0]], [0, [121.3678909350066, 1.0]], [0, [37.52031245592101, 1.0]], [0, [4.741041157834841, 1.0]], [0, [0.39119656977587774, 1.0]], [1, [8.598645744682615, 1.0]], [1, [0.4908511335486282, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [18795484.85366927]
bas 1, expnt(s) = [4698871.21341186]
bas 2, expnt(s) = [1174717.80335172]
bas 3, expnt(s) = [293679.44764935]
bas 4, expnt(s) = [73419.87575159]
bas 5, expnt(s) = [18351.9836381]
bas 6, expnt(s) = [2237.07105491]
bas 7, expnt(s) = [455.78756488]
bas 8, expnt(s) = [121.36789094]
bas 9, expnt(s) = [37.52031246]
bas 10, expnt(s) = [4.74104116]
bas 11, expnt(s) = [0.39119657]
bas 12, expnt(s) = [8.59864574]
bas 13, expnt(s) = [0.49085113]
CPU time:       170.96
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  0  1  1  0 42 43  0]
 [ 0  0  1  1  0 44 45  0]
 [ 0  0  1  1  0 46 47  0]
 [ 0  1  1  1  0 48 49  0]
 [ 0  1  1  1  0 50 51  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.87954849e+07 7.21199097e+05 4.69887121e+06 2.54982386e+05
 1.17471780e+06 9.01498871e+04 2.93679448e+05 3.18727980e+04
 7.34198758e+04 1.12687374e+04 1.83519836e+04 3.98361431e+03
 2.23707105e+03 8.21816503e+02 4.55787565e+02 2.49222288e+02
 1.21367891e+02 9.23831738e+01 3.75203125e+01 3.83014186e+01
 4.74104116e+00 8.11746301e+00 3.91196570e-01 1.24971592e+00
 8.59864574e+00 4.29558150e+01 4.90851134e-01 1.19859273e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.31998113161503
cond(S) = 56.374476937514096
E1 = -688.8358521188483  E_coul = 184.91518114207443
init E= -503.920670976774
    CPU time for initialize scf      0.03 sec, wall time      0.03 sec
  HOMO = -0.680895718160241  LUMO = 84.7568066079771
  mo_energy =
[-1.21650554e+02 -1.32811351e+01 -7.62162875e+00 -7.62162875e+00
 -7.62162875e+00 -1.65069225e+00 -6.80895718e-01 -6.80895718e-01
 -6.80895718e-01  8.47568066e+01  6.75071996e+02  3.93330262e+03
  2.96220945e+04  1.54738520e+05  6.64890272e+05  2.71962613e+06
  1.10459643e+07  4.65100855e+07]
E1 = -706.5847069603112  E_coul = 198.94539667145773
cycle= 1 E= -507.639310288853  delta_E= -3.72  |g|= 0.318  |ddm|= 0.301
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.42056
diis-c [-0.17687063  1.        ]
  HOMO = -0.23627899140777  LUMO = 86.0894601404078
  mo_energy =
[-1.20262508e+02 -1.22530484e+01 -6.65309762e+00 -6.65309762e+00
 -6.65309762e+00 -1.16348250e+00 -2.36278991e-01 -2.36278991e-01
 -2.36278991e-01  8.60894601e+01  6.76442650e+02  3.93455405e+03
  2.96231830e+04  1.54739537e+05  6.64891259e+05  2.71962710e+06
  1.10459653e+07  4.65100865e+07]
E1 = -706.5531135637274  E_coul = 198.9133730472243
cycle= 2 E= -507.639740516503  delta_E= -0.00043  |g|= 0.00476  |ddm|= 0.0143
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.00505344
diis-c [-2.54944425e-05 -4.92480388e-04  1.00049248e+00]
  HOMO = -0.236455285060806  LUMO = 86.0859313341716
  mo_energy =
[-1.20271186e+02 -1.22542441e+01 -6.65494942e+00 -6.65494942e+00
 -6.65494942e+00 -1.16354767e+00 -2.36455285e-01 -2.36455285e-01
 -2.36455285e-01  8.60859313e+01  6.76432030e+02  3.93453810e+03
  2.96231637e+04  1.54739517e+05  6.64891239e+05  2.71962708e+06
  1.10459652e+07  4.65100865e+07]
E1 = -706.5526701156994  E_coul = 198.91292948812614
cycle= 3 E= -507.639740627573  delta_E= -1.11e-07  |g|= 9.53e-05  |ddm|= 0.000203
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.000127362
diis-c [-3.99317327e-10  3.34314950e-05 -2.55211290e-02  1.02548770e+00]
  HOMO = -0.236457517702631  LUMO = 86.085886355052
  mo_energy =
[-1.20271300e+02 -1.22542600e+01 -6.65497662e+00 -6.65497662e+00
 -6.65497662e+00 -1.16354833e+00 -2.36457518e-01 -2.36457518e-01
 -2.36457518e-01  8.60858864e+01  6.76431912e+02  3.93453796e+03
  2.96231635e+04  1.54739517e+05  6.64891239e+05  2.71962708e+06
  1.10459652e+07  4.65100865e+07]
E1 = -706.5526628019945  E_coul = 198.9129221743806
cycle= 4 E= -507.639740627614  delta_E= -4.07e-11  |g|= 3.76e-07  |ddm|= 3.48e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.5526628019945  E_coul = 198.9129221743806
  HOMO = -0.236457501218863  LUMO = 86.0858866953143
  mo_energy =
[-1.20271299e+02 -1.22542599e+01 -6.65497645e+00 -6.65497645e+00
 -6.65497645e+00 -1.16354832e+00 -2.36457501e-01 -2.36457501e-01
 -2.36457501e-01  8.60858867e+01  6.76431913e+02  3.93453796e+03
  2.96231635e+04  1.54739517e+05  6.64891239e+05  2.71962708e+06
  1.10459652e+07  4.65100865e+07]
E1 = -706.5526628394165  E_coul = 198.91292221180257
Extra cycle  E= -507.639740627614  delta_E=    0  |g|= 6.51e-09  |ddm|= 1.66e-08
    CPU time for scf_cycle      0.10 sec, wall time      0.10 sec
exp = [1.87954849e+07 4.69887121e+06 1.17471780e+06 2.93679448e+05
 7.34198758e+04 1.83519836e+04 2.23707105e+03 4.55787565e+02
 1.21367891e+02 3.75203125e+01 4.74104116e+00 3.91196570e-01
 8.59864574e+00 4.90851134e-01]
E = -507.63974062761395
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="BFGS",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((14, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.6988712134173084e+06,1.1747178033543271e+06,2.9367945083858178e+05,7.3419865393677101e+04,1.8353927627435987e+04,2.2341424145819028e+03,4.5688904996449571e+02,1.2173317272260677e+02,3.7593061247508530e+01,4.7412722556720146e+00,3.9120358491841306e-01,8.5986297237246045e+00,4.9084868336327880e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "12s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:16:31 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  18795484.8537        1
[INPUT] 0    0    [1    /1   ]  4698871.21341        1
[INPUT] 0    0    [1    /1   ]  1174717.80335        1
[INPUT] 0    0    [1    /1   ]  293679.447649        1
[INPUT] 0    0    [1    /1   ]  73419.8757516        1
[INPUT] 0    0    [1    /1   ]  18351.9836381        1
[INPUT] 0    0    [1    /1   ]  2237.07105491        1
[INPUT] 0    0    [1    /1   ]  455.787564878        1
[INPUT] 0    0    [1    /1   ]  121.367890935        1
[INPUT] 0    0    [1    /1   ]  37.5203124559        1
[INPUT] 0    0    [1    /1   ]  4.74104115783        1
[INPUT] 0    0    [1    /1   ]  0.391196569776       1
[INPUT] 1    0    [1    /1   ]  8.59864574468        1
[INPUT] 1    0    [1    /1   ]  0.490851133549       1

nuclear repulsion = 0
number of shells = 14
number of NR pGTOs = 18
number of NR cGTOs = 18
basis = {'Ar': [[0, [18795484.853669267, 1.0]], [0, [4698871.2134118555, 1.0]], [0, [1174717.8033517199, 1.0]], [0, [293679.4476493509, 1.0]], [0, [73419.87575158775, 1.0]], [0, [18351.983638098503, 1.0]], [0, [2237.071054914477, 1.0]], [0, [455.7875648779836, 1.0]], [0, [121.3678909350066, 1.0]], [0, [37.52031245592101, 1.0]], [0, [4.741041157834841, 1.0]], [0, [0.39119656977587774, 1.0]], [1, [8.598645744682615, 1.0]], [1, [0.4908511335486282, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [18795484.85366927]
bas 1, expnt(s) = [4698871.21341186]
bas 2, expnt(s) = [1174717.80335172]
bas 3, expnt(s) = [293679.44764935]
bas 4, expnt(s) = [73419.87575159]
bas 5, expnt(s) = [18351.9836381]
bas 6, expnt(s) = [2237.07105491]
bas 7, expnt(s) = [455.78756488]
bas 8, expnt(s) = [121.36789094]
bas 9, expnt(s) = [37.52031246]
bas 10, expnt(s) = [4.74104116]
bas 11, expnt(s) = [0.39119657]
bas 12, expnt(s) = [8.59864574]
bas 13, expnt(s) = [0.49085113]
CPU time:       171.67
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  0  1  1  0 42 43  0]
 [ 0  0  1  1  0 44 45  0]
 [ 0  0  1  1  0 46 47  0]
 [ 0  1  1  1  0 48 49  0]
 [ 0  1  1  1  0 50 51  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.87954849e+07 7.21199097e+05 4.69887121e+06 2.54982386e+05
 1.17471780e+06 9.01498871e+04 2.93679448e+05 3.18727980e+04
 7.34198758e+04 1.12687374e+04 1.83519836e+04 3.98361431e+03
 2.23707105e+03 8.21816503e+02 4.55787565e+02 2.49222288e+02
 1.21367891e+02 9.23831738e+01 3.75203125e+01 3.83014186e+01
 4.74104116e+00 8.11746301e+00 3.91196570e-01 1.24971592e+00
 8.59864574e+00 4.29558150e+01 4.90851134e-01 1.19859273e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.31998113161503
cond(S) = 56.374476937514096
E1 = -688.8358521188483  E_coul = 184.91518114207443
init E= -503.920670976774
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.680895718160241  LUMO = 84.7568066079771
  mo_energy =
[-1.21650554e+02 -1.32811351e+01 -7.62162875e+00 -7.62162875e+00
 -7.62162875e+00 -1.65069225e+00 -6.80895718e-01 -6.80895718e-01
 -6.80895718e-01  8.47568066e+01  6.75071996e+02  3.93330262e+03
  2.96220945e+04  1.54738520e+05  6.64890272e+05  2.71962613e+06
  1.10459643e+07  4.65100855e+07]
E1 = -706.5847069603112  E_coul = 198.94539667145773
cycle= 1 E= -507.639310288853  delta_E= -3.72  |g|= 0.318  |ddm|= 0.301
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.42056
diis-c [-0.17687063  1.        ]
  HOMO = -0.23627899140777  LUMO = 86.0894601404078
  mo_energy =
[-1.20262508e+02 -1.22530484e+01 -6.65309762e+00 -6.65309762e+00
 -6.65309762e+00 -1.16348250e+00 -2.36278991e-01 -2.36278991e-01
 -2.36278991e-01  8.60894601e+01  6.76442650e+02  3.93455405e+03
  2.96231830e+04  1.54739537e+05  6.64891259e+05  2.71962710e+06
  1.10459653e+07  4.65100865e+07]
E1 = -706.5531135637274  E_coul = 198.9133730472243
cycle= 2 E= -507.639740516503  delta_E= -0.00043  |g|= 0.00476  |ddm|= 0.0143
    CPU time for cycle= 2      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.00505344
diis-c [-2.54944425e-05 -4.92480388e-04  1.00049248e+00]
  HOMO = -0.236455285060806  LUMO = 86.0859313341716
  mo_energy =
[-1.20271186e+02 -1.22542441e+01 -6.65494942e+00 -6.65494942e+00
 -6.65494942e+00 -1.16354767e+00 -2.36455285e-01 -2.36455285e-01
 -2.36455285e-01  8.60859313e+01  6.76432030e+02  3.93453810e+03
  2.96231637e+04  1.54739517e+05  6.64891239e+05  2.71962708e+06
  1.10459652e+07  4.65100865e+07]
E1 = -706.5526701156994  E_coul = 198.91292948812614
cycle= 3 E= -507.639740627573  delta_E= -1.11e-07  |g|= 9.53e-05  |ddm|= 0.000203
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.000127362
diis-c [-3.99317327e-10  3.34314950e-05 -2.55211290e-02  1.02548770e+00]
  HOMO = -0.236457517702631  LUMO = 86.085886355052
  mo_energy =
[-1.20271300e+02 -1.22542600e+01 -6.65497662e+00 -6.65497662e+00
 -6.65497662e+00 -1.16354833e+00 -2.36457518e-01 -2.36457518e-01
 -2.36457518e-01  8.60858864e+01  6.76431912e+02  3.93453796e+03
  2.96231635e+04  1.54739517e+05  6.64891239e+05  2.71962708e+06
  1.10459652e+07  4.65100865e+07]
E1 = -706.5526628019945  E_coul = 198.9129221743806
cycle= 4 E= -507.639740627614  delta_E= -4.07e-11  |g|= 3.76e-07  |ddm|= 3.48e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.5526628019945  E_coul = 198.9129221743806
  HOMO = -0.236457501218863  LUMO = 86.0858866953143
  mo_energy =
[-1.20271299e+02 -1.22542599e+01 -6.65497645e+00 -6.65497645e+00
 -6.65497645e+00 -1.16354832e+00 -2.36457501e-01 -2.36457501e-01
 -2.36457501e-01  8.60858867e+01  6.76431913e+02  3.93453796e+03
  2.96231635e+04  1.54739517e+05  6.64891239e+05  2.71962708e+06
  1.10459652e+07  4.65100865e+07]
E1 = -706.5526628394165  E_coul = 198.91292221180257
Extra cycle  E= -507.639740627614  delta_E=    0  |g|= 6.51e-09  |ddm|= 1.66e-08
    CPU time for scf_cycle      0.10 sec, wall time      0.10 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 56.374476937514096
E1 = -706.5526628394165  E_coul = 198.91292221180257
init E= -507.639740627614
    CPU time for initialize scf      0.12 sec, wall time      0.12 sec
  HOMO = -0.236457501025709  LUMO = 86.0858866994825
  mo_energy =
[-1.20271299e+02 -1.22542599e+01 -6.65497645e+00 -6.65497645e+00
 -6.65497645e+00 -1.16354832e+00 -2.36457501e-01 -2.36457501e-01
 -2.36457501e-01  8.60858867e+01  6.76431913e+02  3.93453796e+03
  2.96231635e+04  1.54739517e+05  6.64891239e+05  2.71962708e+06
  1.10459652e+07  4.65100865e+07]
E1 = -706.5526628399839  E_coul = 198.9129222123699
cycle= 1 E= -507.639740627614  delta_E= -5.68e-14  |g|= 1.92e-10  |ddm|= 2.57e-10
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -706.5526628399839  E_coul = 198.9129222123699
  HOMO = -0.236457501022985  LUMO = 86.0858866995423
  mo_energy =
[-1.20271299e+02 -1.22542599e+01 -6.65497645e+00 -6.65497645e+00
 -6.65497645e+00 -1.16354832e+00 -2.36457501e-01 -2.36457501e-01
 -2.36457501e-01  8.60858867e+01  6.76431913e+02  3.93453796e+03
  2.96231635e+04  1.54739517e+05  6.64891239e+05  2.71962708e+06
  1.10459652e+07  4.65100865e+07]
E1 = -706.5526628399937  E_coul = 198.91292221237993
Extra cycle  E= -507.639740627614  delta_E= 2.84e-13  |g|= 7.41e-11  |ddm|= 4.59e-12
    CPU time for scf_cycle      0.19 sec, wall time      0.19 sec
exp = [1.87954849e+07 4.69887121e+06 1.17471780e+06 2.93679448e+05
 7.34198758e+04 1.83519836e+04 2.23707105e+03 4.55787565e+02
 1.21367891e+02 3.75203125e+01 4.74104116e+00 3.91196570e-01
 8.59864574e+00 4.90851134e-01]
grad_E = [-1.14796455e-13  1.77860421e-11  6.76893062e-12  1.04062404e-08
 -3.47925177e-08  6.33598376e-06 -4.84991001e-06 -1.89423046e-05
 -1.48008742e-05 -5.08735826e-06 -9.59332484e-07  6.58968854e-06
  1.88856482e-06  1.32984460e-05]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="BFGS",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((14, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.6988712134173084e+06,1.1747178033543271e+06,2.9367945083858178e+05,7.3419865393677101e+04,1.8353927627435987e+04,2.2341424145819028e+03,4.5688904996449571e+02,1.2173317272260677e+02,3.7593061247508530e+01,4.7412722556720146e+00,3.9120358491841306e-01,8.5986297237246045e+00,4.9084868336327880e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "12s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:16:34 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  18795484.8537        1
[INPUT] 0    0    [1    /1   ]  4698871.21341        1
[INPUT] 0    0    [1    /1   ]  1174717.80335        1
[INPUT] 0    0    [1    /1   ]  293679.447651        1
[INPUT] 0    0    [1    /1   ]  73419.8757458        1
[INPUT] 0    0    [1    /1   ]  18351.9847032        1
[INPUT] 0    0    [1    /1   ]  2237.06982592        1
[INPUT] 0    0    [1    /1   ]  455.785287423        1
[INPUT] 0    0    [1    /1   ]  121.372163132        1
[INPUT] 0    0    [1    /1   ]  37.5218423543        1
[INPUT] 0    0    [1    /1   ]  4.74104208451        1
[INPUT] 0    0    [1    /1   ]  0.391196474477       1
[INPUT] 1    0    [1    /1   ]  8.59864187539        1
[INPUT] 1    0    [1    /1   ]  0.490850632626       1

nuclear repulsion = 0
number of shells = 14
number of NR pGTOs = 18
number of NR cGTOs = 18
basis = {'Ar': [[0, [18795484.853669267, 1.0]], [0, [4698871.213411858, 1.0]], [0, [1174717.8033517213, 1.0]], [0, [293679.4476510992, 1.0]], [0, [73419.87574583976, 1.0]], [0, [18351.98470317423, 1.0]], [0, [2237.0698259232195, 1.0]], [0, [455.7852874233462, 1.0]], [0, [121.37216313237926, 1.0]], [0, [37.5218423543356, 1.0]], [0, [4.741042084506474, 1.0]], [0, [0.39119647447663713, 1.0]], [1, [8.598641875388195, 1.0]], [1, [0.49085063262644296, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [18795484.85366927]
bas 1, expnt(s) = [4698871.21341186]
bas 2, expnt(s) = [1174717.80335172]
bas 3, expnt(s) = [293679.4476511]
bas 4, expnt(s) = [73419.87574584]
bas 5, expnt(s) = [18351.98470317]
bas 6, expnt(s) = [2237.06982592]
bas 7, expnt(s) = [455.78528742]
bas 8, expnt(s) = [121.37216313]
bas 9, expnt(s) = [37.52184235]
bas 10, expnt(s) = [4.74104208]
bas 11, expnt(s) = [0.39119647]
bas 12, expnt(s) = [8.59864188]
bas 13, expnt(s) = [0.49085063]
CPU time:       175.15
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  0  1  1  0 42 43  0]
 [ 0  0  1  1  0 44 45  0]
 [ 0  0  1  1  0 46 47  0]
 [ 0  1  1  1  0 48 49  0]
 [ 0  1  1  1  0 50 51  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.87954849e+07 7.21199097e+05 4.69887121e+06 2.54982386e+05
 1.17471780e+06 9.01498871e+04 2.93679448e+05 3.18727980e+04
 7.34198757e+04 1.12687374e+04 1.83519847e+04 3.98361449e+03
 2.23706983e+03 8.21816164e+02 4.55785287e+02 2.49221354e+02
 1.21372163e+02 9.23856127e+01 3.75218424e+01 3.83025899e+01
 4.74104208e+00 8.11746420e+00 3.91196474e-01 1.24971569e+00
 8.59864188e+00 4.29557909e+01 4.90850633e-01 1.19859120e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.31998169266127
cond(S) = 56.375000121312006
E1 = -688.8358460028945  E_coul = 184.91515323618452
init E= -503.92069276671
    CPU time for initialize scf      0.03 sec, wall time      0.03 sec
  HOMO = -0.68089634009906  LUMO = 84.7618478360962
  mo_energy =
[-1.21650555e+02 -1.32811401e+01 -7.62163031e+00 -7.62163031e+00
 -7.62163031e+00 -1.65069314e+00 -6.80896340e-01 -6.80896340e-01
 -6.80896340e-01  8.47618478e+01  6.75087426e+02  3.93331500e+03
  2.96221014e+04  1.54738527e+05  6.64890279e+05  2.71962613e+06
  1.10459643e+07  4.65100855e+07]
E1 = -706.5846758719266  E_coul = 198.94536553348107
cycle= 1 E= -507.639310338446  delta_E= -3.72  |g|= 0.318  |ddm|= 0.301
    CPU time for cycle= 1      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.420563
diis-c [-0.1768735  1.       ]
  HOMO = -0.236280091531729  LUMO = 86.0945076135929
  mo_energy =
[-1.20262508e+02 -1.22530536e+01 -6.65309956e+00 -6.65309956e+00
 -6.65309956e+00 -1.16348369e+00 -2.36280092e-01 -2.36280092e-01
 -2.36280092e-01  8.60945076e+01  6.76458085e+02  3.93456645e+03
  2.96231899e+04  1.54739544e+05  6.64891267e+05  2.71962711e+06
  1.10459653e+07  4.65100865e+07]
E1 = -706.553085308323  E_coul = 198.91334478327528
cycle= 2 E= -507.639740525048  delta_E= -0.00043  |g|= 0.00476  |ddm|= 0.0143
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00505318
diis-c [-2.54916969e-05 -4.92749287e-04  1.00049275e+00]
  HOMO = -0.236456366323672  LUMO = 86.090979013644
  mo_energy =
[-1.20271185e+02 -1.22542492e+01 -6.65495117e+00 -6.65495117e+00
 -6.65495117e+00 -1.16354884e+00 -2.36456366e-01 -2.36456366e-01
 -2.36456366e-01  8.60909790e+01  6.76447466e+02  3.93455050e+03
  2.96231706e+04  1.54739524e+05  6.64891246e+05  2.71962709e+06
  1.10459652e+07  4.65100865e+07]
E1 = -706.5526419153754  E_coul = 198.91290127927414
cycle= 3 E= -507.639740636101  delta_E= -1.11e-07  |g|= 9.53e-05  |ddm|= 0.000203
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00012735
diis-c [-3.99242167e-10  3.34327561e-05 -2.55201596e-02  1.02548673e+00]
  HOMO = -0.236458598602815  LUMO = 86.0909340401676
  mo_energy =
[-1.20271299e+02 -1.22542651e+01 -6.65497837e+00 -6.65497837e+00
 -6.65497837e+00 -1.16354951e+00 -2.36458599e-01 -2.36458599e-01
 -2.36458599e-01  8.60909340e+01  6.76447348e+02  3.93455035e+03
  2.96231704e+04  1.54739524e+05  6.64891246e+05  2.71962709e+06
  1.10459652e+07  4.65100865e+07]
E1 = -706.5526346029662  E_coul = 198.91289396682424
cycle= 4 E= -507.639740636142  delta_E= -4.08e-11  |g|= 3.76e-07  |ddm|= 3.48e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.5526346029662  E_coul = 198.91289396682424
  HOMO = -0.236458582122287  LUMO = 86.0909343803884
  mo_energy =
[-1.20271298e+02 -1.22542650e+01 -6.65497821e+00 -6.65497821e+00
 -6.65497821e+00 -1.16354950e+00 -2.36458582e-01 -2.36458582e-01
 -2.36458582e-01  8.60909344e+01  6.76447349e+02  3.93455035e+03
  2.96231704e+04  1.54739524e+05  6.64891246e+05  2.71962709e+06
  1.10459652e+07  4.65100865e+07]
E1 = -706.5526346403808  E_coul = 198.91289400423892
Extra cycle  E= -507.639740636142  delta_E= 1.14e-13  |g|= 6.5e-09  |ddm|= 1.66e-08
    CPU time for scf_cycle      0.10 sec, wall time      0.11 sec
exp = [1.87954849e+07 4.69887121e+06 1.17471780e+06 2.93679448e+05
 7.34198757e+04 1.83519847e+04 2.23706983e+03 4.55785287e+02
 1.21372163e+02 3.75218424e+01 4.74104208e+00 3.91196474e-01
 8.59864188e+00 4.90850633e-01]
E = -507.6397406361419
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="BFGS",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((14, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.6988712134173084e+06,1.1747178033543271e+06,2.9367945083858178e+05,7.3419865393677101e+04,1.8353927627435987e+04,2.2341424145819028e+03,4.5688904996449571e+02,1.2173317272260677e+02,3.7593061247508530e+01,4.7412722556720146e+00,3.9120358491841306e-01,8.5986297237246045e+00,4.9084868336327880e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "12s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:16:35 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  18795484.8537        1
[INPUT] 0    0    [1    /1   ]  4698871.21341        1
[INPUT] 0    0    [1    /1   ]  1174717.80335        1
[INPUT] 0    0    [1    /1   ]  293679.447651        1
[INPUT] 0    0    [1    /1   ]  73419.8757458        1
[INPUT] 0    0    [1    /1   ]  18351.9847032        1
[INPUT] 0    0    [1    /1   ]  2237.06982592        1
[INPUT] 0    0    [1    /1   ]  455.785287423        1
[INPUT] 0    0    [1    /1   ]  121.372163132        1
[INPUT] 0    0    [1    /1   ]  37.5218423543        1
[INPUT] 0    0    [1    /1   ]  4.74104208451        1
[INPUT] 0    0    [1    /1   ]  0.391196474477       1
[INPUT] 1    0    [1    /1   ]  8.59864187539        1
[INPUT] 1    0    [1    /1   ]  0.490850632626       1

nuclear repulsion = 0
number of shells = 14
number of NR pGTOs = 18
number of NR cGTOs = 18
basis = {'Ar': [[0, [18795484.853669267, 1.0]], [0, [4698871.213411858, 1.0]], [0, [1174717.8033517213, 1.0]], [0, [293679.4476510992, 1.0]], [0, [73419.87574583976, 1.0]], [0, [18351.98470317423, 1.0]], [0, [2237.0698259232195, 1.0]], [0, [455.7852874233462, 1.0]], [0, [121.37216313237926, 1.0]], [0, [37.5218423543356, 1.0]], [0, [4.741042084506474, 1.0]], [0, [0.39119647447663713, 1.0]], [1, [8.598641875388195, 1.0]], [1, [0.49085063262644296, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [18795484.85366927]
bas 1, expnt(s) = [4698871.21341186]
bas 2, expnt(s) = [1174717.80335172]
bas 3, expnt(s) = [293679.4476511]
bas 4, expnt(s) = [73419.87574584]
bas 5, expnt(s) = [18351.98470317]
bas 6, expnt(s) = [2237.06982592]
bas 7, expnt(s) = [455.78528742]
bas 8, expnt(s) = [121.37216313]
bas 9, expnt(s) = [37.52184235]
bas 10, expnt(s) = [4.74104208]
bas 11, expnt(s) = [0.39119647]
bas 12, expnt(s) = [8.59864188]
bas 13, expnt(s) = [0.49085063]
CPU time:       175.87
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  0  1  1  0 42 43  0]
 [ 0  0  1  1  0 44 45  0]
 [ 0  0  1  1  0 46 47  0]
 [ 0  1  1  1  0 48 49  0]
 [ 0  1  1  1  0 50 51  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.87954849e+07 7.21199097e+05 4.69887121e+06 2.54982386e+05
 1.17471780e+06 9.01498871e+04 2.93679448e+05 3.18727980e+04
 7.34198757e+04 1.12687374e+04 1.83519847e+04 3.98361449e+03
 2.23706983e+03 8.21816164e+02 4.55785287e+02 2.49221354e+02
 1.21372163e+02 9.23856127e+01 3.75218424e+01 3.83025899e+01
 4.74104208e+00 8.11746420e+00 3.91196474e-01 1.24971569e+00
 8.59864188e+00 4.29557909e+01 4.90850633e-01 1.19859120e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.31998169266127
cond(S) = 56.375000121312006
E1 = -688.8358460028945  E_coul = 184.91515323618452
init E= -503.92069276671
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.68089634009906  LUMO = 84.7618478360962
  mo_energy =
[-1.21650555e+02 -1.32811401e+01 -7.62163031e+00 -7.62163031e+00
 -7.62163031e+00 -1.65069314e+00 -6.80896340e-01 -6.80896340e-01
 -6.80896340e-01  8.47618478e+01  6.75087426e+02  3.93331500e+03
  2.96221014e+04  1.54738527e+05  6.64890279e+05  2.71962613e+06
  1.10459643e+07  4.65100855e+07]
E1 = -706.5846758719266  E_coul = 198.94536553348107
cycle= 1 E= -507.639310338446  delta_E= -3.72  |g|= 0.318  |ddm|= 0.301
    CPU time for cycle= 1      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.420563
diis-c [-0.1768735  1.       ]
  HOMO = -0.236280091531729  LUMO = 86.0945076135929
  mo_energy =
[-1.20262508e+02 -1.22530536e+01 -6.65309956e+00 -6.65309956e+00
 -6.65309956e+00 -1.16348369e+00 -2.36280092e-01 -2.36280092e-01
 -2.36280092e-01  8.60945076e+01  6.76458085e+02  3.93456645e+03
  2.96231899e+04  1.54739544e+05  6.64891267e+05  2.71962711e+06
  1.10459653e+07  4.65100865e+07]
E1 = -706.553085308323  E_coul = 198.91334478327528
cycle= 2 E= -507.639740525048  delta_E= -0.00043  |g|= 0.00476  |ddm|= 0.0143
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00505318
diis-c [-2.54916969e-05 -4.92749287e-04  1.00049275e+00]
  HOMO = -0.236456366323672  LUMO = 86.090979013644
  mo_energy =
[-1.20271185e+02 -1.22542492e+01 -6.65495117e+00 -6.65495117e+00
 -6.65495117e+00 -1.16354884e+00 -2.36456366e-01 -2.36456366e-01
 -2.36456366e-01  8.60909790e+01  6.76447466e+02  3.93455050e+03
  2.96231706e+04  1.54739524e+05  6.64891246e+05  2.71962709e+06
  1.10459652e+07  4.65100865e+07]
E1 = -706.5526419153754  E_coul = 198.91290127927414
cycle= 3 E= -507.639740636101  delta_E= -1.11e-07  |g|= 9.53e-05  |ddm|= 0.000203
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00012735
diis-c [-3.99242167e-10  3.34327561e-05 -2.55201596e-02  1.02548673e+00]
  HOMO = -0.236458598602815  LUMO = 86.0909340401676
  mo_energy =
[-1.20271299e+02 -1.22542651e+01 -6.65497837e+00 -6.65497837e+00
 -6.65497837e+00 -1.16354951e+00 -2.36458599e-01 -2.36458599e-01
 -2.36458599e-01  8.60909340e+01  6.76447348e+02  3.93455035e+03
  2.96231704e+04  1.54739524e+05  6.64891246e+05  2.71962709e+06
  1.10459652e+07  4.65100865e+07]
E1 = -706.5526346029662  E_coul = 198.91289396682424
cycle= 4 E= -507.639740636142  delta_E= -4.08e-11  |g|= 3.76e-07  |ddm|= 3.48e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.5526346029662  E_coul = 198.91289396682424
  HOMO = -0.236458582122287  LUMO = 86.0909343803884
  mo_energy =
[-1.20271298e+02 -1.22542650e+01 -6.65497821e+00 -6.65497821e+00
 -6.65497821e+00 -1.16354950e+00 -2.36458582e-01 -2.36458582e-01
 -2.36458582e-01  8.60909344e+01  6.76447349e+02  3.93455035e+03
  2.96231704e+04  1.54739524e+05  6.64891246e+05  2.71962709e+06
  1.10459652e+07  4.65100865e+07]
E1 = -706.5526346403808  E_coul = 198.91289400423892
Extra cycle  E= -507.639740636142  delta_E= 1.14e-13  |g|= 6.5e-09  |ddm|= 1.66e-08
    CPU time for scf_cycle      0.10 sec, wall time      0.10 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 56.375000121312006
E1 = -706.5526346403808  E_coul = 198.91289400423892
init E= -507.639740636142
    CPU time for initialize scf      0.12 sec, wall time      0.12 sec
  HOMO = -0.236458581929172  LUMO = 86.0909343845564
  mo_energy =
[-1.20271298e+02 -1.22542650e+01 -6.65497820e+00 -6.65497820e+00
 -6.65497820e+00 -1.16354950e+00 -2.36458582e-01 -2.36458582e-01
 -2.36458582e-01  8.60909344e+01  6.76447349e+02  3.93455035e+03
  2.96231704e+04  1.54739524e+05  6.64891246e+05  2.71962709e+06
  1.10459652e+07  4.65100865e+07]
E1 = -706.5526346409476  E_coul = 198.91289400480605
cycle= 1 E= -507.639740636142  delta_E= 2.84e-13  |g|= 2.32e-10  |ddm|= 2.57e-10
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -706.5526346409476  E_coul = 198.91289400480605
  HOMO = -0.236458581926447  LUMO = 86.0909343846152
  mo_energy =
[-1.20271298e+02 -1.22542650e+01 -6.65497820e+00 -6.65497820e+00
 -6.65497820e+00 -1.16354950e+00 -2.36458582e-01 -2.36458582e-01
 -2.36458582e-01  8.60909344e+01  6.76447349e+02  3.93455035e+03
  2.96231704e+04  1.54739524e+05  6.64891246e+05  2.71962709e+06
  1.10459652e+07  4.65100865e+07]
E1 = -706.5526346409575  E_coul = 198.91289400481585
Extra cycle  E= -507.639740636142  delta_E= -1.14e-13  |g|= 2.48e-10  |ddm|= 4.64e-12
    CPU time for scf_cycle      0.19 sec, wall time      0.19 sec
exp = [1.87954849e+07 4.69887121e+06 1.17471780e+06 2.93679448e+05
 7.34198757e+04 1.83519847e+04 2.23706983e+03 4.55785287e+02
 1.21372163e+02 3.75218424e+01 4.74104208e+00 3.91196474e-01
 8.59864188e+00 4.90850633e-01]
grad_E = [-1.14811401e-13  1.77850934e-11  6.76105992e-12  1.04056987e-08
 -3.47948864e-08  6.33559083e-06 -4.80875653e-06 -1.96261168e-05
 -1.26977362e-05 -3.25775624e-06  3.18922790e-08 -5.50309338e-07
 -1.69384897e-07 -1.14703857e-06]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="BFGS",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((14, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.6988712134173084e+06,1.1747178033543271e+06,2.9367945083858178e+05,7.3419865393677101e+04,1.8353927627435987e+04,2.2341424145819028e+03,4.5688904996449571e+02,1.2173317272260677e+02,3.7593061247508530e+01,4.7412722556720146e+00,3.9120358491841306e-01,8.5986297237246045e+00,4.9084868336327880e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "12s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:16:38 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  18795484.8537        1
[INPUT] 0    0    [1    /1   ]  4698871.21341        1
[INPUT] 0    0    [1    /1   ]  1174717.80335        1
[INPUT] 0    0    [1    /1   ]  293679.447656        1
[INPUT] 0    0    [1    /1   ]  73419.8757284        1
[INPUT] 0    0    [1    /1   ]  18351.9879718        1
[INPUT] 0    0    [1    /1   ]  2237.06494835        1
[INPUT] 0    0    [1    /1   ]  455.786767967        1
[INPUT] 0    0    [1    /1   ]  121.373352757        1
[INPUT] 0    0    [1    /1   ]  37.5221627214        1
[INPUT] 0    0    [1    /1   ]  4.74104253139        1
[INPUT] 0    0    [1    /1   ]  0.391196512996       1
[INPUT] 1    0    [1    /1   ]  8.598641724          1
[INPUT] 1    0    [1    /1   ]  0.490850618372       1

nuclear repulsion = 0
number of shells = 14
number of NR pGTOs = 18
number of NR cGTOs = 18
basis = {'Ar': [[0, [18795484.853669267, 1.0]], [0, [4698871.213411868, 1.0]], [0, [1174717.8033517257, 1.0]], [0, [293679.4476564617, 1.0]], [0, [73419.87572841498, 1.0]], [0, [18351.987971804185, 1.0]], [0, [2237.064948348742, 1.0]], [0, [455.78676796653394, 1.0]], [0, [121.37335275666952, 1.0]], [0, [37.522162721371764, 1.0]], [0, [4.741042531390048, 1.0]], [0, [0.39119651299599284, 1.0]], [1, [8.598641724004276, 1.0]], [1, [0.49085061837185084, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [18795484.85366927]
bas 1, expnt(s) = [4698871.21341187]
bas 2, expnt(s) = [1174717.80335173]
bas 3, expnt(s) = [293679.44765646]
bas 4, expnt(s) = [73419.87572841]
bas 5, expnt(s) = [18351.9879718]
bas 6, expnt(s) = [2237.06494835]
bas 7, expnt(s) = [455.78676797]
bas 8, expnt(s) = [121.37335276]
bas 9, expnt(s) = [37.52216272]
bas 10, expnt(s) = [4.74104253]
bas 11, expnt(s) = [0.39119651]
bas 12, expnt(s) = [8.59864172]
bas 13, expnt(s) = [0.49085062]
CPU time:       179.35
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  0  1  1  0 42 43  0]
 [ 0  0  1  1  0 44 45  0]
 [ 0  0  1  1  0 46 47  0]
 [ 0  1  1  1  0 48 49  0]
 [ 0  1  1  1  0 50 51  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.87954849e+07 7.21199097e+05 4.69887121e+06 2.54982386e+05
 1.17471780e+06 9.01498871e+04 2.93679448e+05 3.18727980e+04
 7.34198757e+04 1.12687374e+04 1.83519880e+04 3.98361502e+03
 2.23706495e+03 8.21814821e+02 4.55786768e+02 2.49221961e+02
 1.21373353e+02 9.23862918e+01 3.75221627e+01 3.83028351e+01
 4.74104253e+00 8.11746478e+00 3.91196513e-01 1.24971579e+00
 8.59864172e+00 4.29557899e+01 4.90850618e-01 1.19859116e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319981680628512
cond(S) = 56.37510358331146
E1 = -688.8358430032206  E_coul = 184.91515391011598
init E= -503.920689093105
    CPU time for initialize scf      0.03 sec, wall time      0.03 sec
  HOMO = -0.680896344422188  LUMO = 84.763022786869
  mo_energy =
[-1.21650555e+02 -1.32811404e+01 -7.62163021e+00 -7.62163021e+00
 -7.62163021e+00 -1.65069321e+00 -6.80896344e-01 -6.80896344e-01
 -6.80896344e-01  8.47630228e+01  6.75093049e+02  3.93331959e+03
  2.96220985e+04  1.54738529e+05  6.64890283e+05  2.71962614e+06
  1.10459643e+07  4.65100855e+07]
E1 = -706.5846772983574  E_coul = 198.94536694984203
cycle= 1 E= -507.639310348515  delta_E= -3.72  |g|= 0.318  |ddm|= 0.301
    CPU time for cycle= 1      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.420564
diis-c [-0.17687379  1.        ]
  HOMO = -0.236280085411463  LUMO = 86.0956840677232
  mo_energy =
[-1.20262508e+02 -1.22530538e+01 -6.65309943e+00 -6.65309943e+00
 -6.65309943e+00 -1.16348372e+00 -2.36280085e-01 -2.36280085e-01
 -2.36280085e-01  8.60956841e+01  6.76463708e+02  3.93457103e+03
  2.96231870e+04  1.54739546e+05  6.64891270e+05  2.71962711e+06
  1.10459653e+07  4.65100865e+07]
E1 = -706.5530873737401  E_coul = 198.9133468478401
cycle= 2 E= -507.6397405259  delta_E= -0.00043  |g|= 0.00476  |ddm|= 0.0143
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00505312
diis-c [-2.54911440e-05 -4.92806145e-04  1.00049281e+00]
  HOMO = -0.236456355945641  LUMO = 86.0921555117319
  mo_energy =
[-1.20271184e+02 -1.22542494e+01 -6.65495100e+00 -6.65495100e+00
 -6.65495100e+00 -1.16354887e+00 -2.36456356e-01 -2.36456356e-01
 -2.36456356e-01  8.60921555e+01  6.76453089e+02  3.93455508e+03
  2.96231677e+04  1.54739526e+05  6.64891250e+05  2.71962709e+06
  1.10459652e+07  4.65100865e+07]
E1 = -706.5526439934687  E_coul = 198.9129033565186
cycle= 3 E= -507.63974063695  delta_E= -1.11e-07  |g|= 9.53e-05  |ddm|= 0.000203
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.000127348
diis-c [-3.99226010e-10  3.34329126e-05 -2.55199331e-02  1.02548650e+00]
  HOMO = -0.236458588142873  LUMO = 86.0921105395275
  mo_energy =
[-1.20271299e+02 -1.22542653e+01 -6.65497819e+00 -6.65497819e+00
 -6.65497819e+00 -1.16354954e+00 -2.36458588e-01 -2.36458588e-01
 -2.36458588e-01  8.60921105e+01  6.76452971e+02  3.93455494e+03
  2.96231676e+04  1.54739526e+05  6.64891250e+05  2.71962709e+06
  1.10459652e+07  4.65100865e+07]
E1 = -706.5526366813561  E_coul = 198.91289604436588
cycle= 4 E= -507.63974063699  delta_E= -4.02e-11  |g|= 3.76e-07  |ddm|= 3.48e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.5526366813561  E_coul = 198.91289604436588
  HOMO = -0.236458571663082  LUMO = 86.0921108797381
  mo_energy =
[-1.20271298e+02 -1.22542652e+01 -6.65497803e+00 -6.65497803e+00
 -6.65497803e+00 -1.16354953e+00 -2.36458572e-01 -2.36458572e-01
 -2.36458572e-01  8.60921109e+01  6.76452972e+02  3.93455494e+03
  2.96231676e+04  1.54739526e+05  6.64891250e+05  2.71962709e+06
  1.10459652e+07  4.65100865e+07]
E1 = -706.5526367187696  E_coul = 198.912896081779
Extra cycle  E= -507.639740636991  delta_E= -3.41e-13  |g|= 6.5e-09  |ddm|= 1.66e-08
    CPU time for scf_cycle      0.10 sec, wall time      0.11 sec
exp = [1.87954849e+07 4.69887121e+06 1.17471780e+06 2.93679448e+05
 7.34198757e+04 1.83519880e+04 2.23706495e+03 4.55786768e+02
 1.21373353e+02 3.75221627e+01 4.74104253e+00 3.91196513e-01
 8.59864172e+00 4.90850618e-01]
E = -507.6397406369906
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="BFGS",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((14, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.6988712134173084e+06,1.1747178033543271e+06,2.9367945083858178e+05,7.3419865393677101e+04,1.8353927627435987e+04,2.2341424145819028e+03,4.5688904996449571e+02,1.2173317272260677e+02,3.7593061247508530e+01,4.7412722556720146e+00,3.9120358491841306e-01,8.5986297237246045e+00,4.9084868336327880e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "12s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:16:39 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  18795484.8537        1
[INPUT] 0    0    [1    /1   ]  4698871.21341        1
[INPUT] 0    0    [1    /1   ]  1174717.80335        1
[INPUT] 0    0    [1    /1   ]  293679.447656        1
[INPUT] 0    0    [1    /1   ]  73419.8757284        1
[INPUT] 0    0    [1    /1   ]  18351.9879718        1
[INPUT] 0    0    [1    /1   ]  2237.06494835        1
[INPUT] 0    0    [1    /1   ]  455.786767967        1
[INPUT] 0    0    [1    /1   ]  121.373352757        1
[INPUT] 0    0    [1    /1   ]  37.5221627214        1
[INPUT] 0    0    [1    /1   ]  4.74104253139        1
[INPUT] 0    0    [1    /1   ]  0.391196512996       1
[INPUT] 1    0    [1    /1   ]  8.598641724          1
[INPUT] 1    0    [1    /1   ]  0.490850618372       1

nuclear repulsion = 0
number of shells = 14
number of NR pGTOs = 18
number of NR cGTOs = 18
basis = {'Ar': [[0, [18795484.853669267, 1.0]], [0, [4698871.213411868, 1.0]], [0, [1174717.8033517257, 1.0]], [0, [293679.4476564617, 1.0]], [0, [73419.87572841498, 1.0]], [0, [18351.987971804185, 1.0]], [0, [2237.064948348742, 1.0]], [0, [455.78676796653394, 1.0]], [0, [121.37335275666952, 1.0]], [0, [37.522162721371764, 1.0]], [0, [4.741042531390048, 1.0]], [0, [0.39119651299599284, 1.0]], [1, [8.598641724004276, 1.0]], [1, [0.49085061837185084, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [18795484.85366927]
bas 1, expnt(s) = [4698871.21341187]
bas 2, expnt(s) = [1174717.80335173]
bas 3, expnt(s) = [293679.44765646]
bas 4, expnt(s) = [73419.87572841]
bas 5, expnt(s) = [18351.9879718]
bas 6, expnt(s) = [2237.06494835]
bas 7, expnt(s) = [455.78676797]
bas 8, expnt(s) = [121.37335276]
bas 9, expnt(s) = [37.52216272]
bas 10, expnt(s) = [4.74104253]
bas 11, expnt(s) = [0.39119651]
bas 12, expnt(s) = [8.59864172]
bas 13, expnt(s) = [0.49085062]
CPU time:       180.07
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  0  1  1  0 42 43  0]
 [ 0  0  1  1  0 44 45  0]
 [ 0  0  1  1  0 46 47  0]
 [ 0  1  1  1  0 48 49  0]
 [ 0  1  1  1  0 50 51  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.87954849e+07 7.21199097e+05 4.69887121e+06 2.54982386e+05
 1.17471780e+06 9.01498871e+04 2.93679448e+05 3.18727980e+04
 7.34198757e+04 1.12687374e+04 1.83519880e+04 3.98361502e+03
 2.23706495e+03 8.21814821e+02 4.55786768e+02 2.49221961e+02
 1.21373353e+02 9.23862918e+01 3.75221627e+01 3.83028351e+01
 4.74104253e+00 8.11746478e+00 3.91196513e-01 1.24971579e+00
 8.59864172e+00 4.29557899e+01 4.90850618e-01 1.19859116e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319981680628512
cond(S) = 56.37510358331146
E1 = -688.8358430032206  E_coul = 184.91515391011598
init E= -503.920689093105
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.680896344422188  LUMO = 84.763022786869
  mo_energy =
[-1.21650555e+02 -1.32811404e+01 -7.62163021e+00 -7.62163021e+00
 -7.62163021e+00 -1.65069321e+00 -6.80896344e-01 -6.80896344e-01
 -6.80896344e-01  8.47630228e+01  6.75093049e+02  3.93331959e+03
  2.96220985e+04  1.54738529e+05  6.64890283e+05  2.71962614e+06
  1.10459643e+07  4.65100855e+07]
E1 = -706.5846772983574  E_coul = 198.94536694984203
cycle= 1 E= -507.639310348515  delta_E= -3.72  |g|= 0.318  |ddm|= 0.301
    CPU time for cycle= 1      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.420564
diis-c [-0.17687379  1.        ]
  HOMO = -0.236280085411463  LUMO = 86.0956840677232
  mo_energy =
[-1.20262508e+02 -1.22530538e+01 -6.65309943e+00 -6.65309943e+00
 -6.65309943e+00 -1.16348372e+00 -2.36280085e-01 -2.36280085e-01
 -2.36280085e-01  8.60956841e+01  6.76463708e+02  3.93457103e+03
  2.96231870e+04  1.54739546e+05  6.64891270e+05  2.71962711e+06
  1.10459653e+07  4.65100865e+07]
E1 = -706.5530873737401  E_coul = 198.9133468478401
cycle= 2 E= -507.6397405259  delta_E= -0.00043  |g|= 0.00476  |ddm|= 0.0143
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00505312
diis-c [-2.54911440e-05 -4.92806145e-04  1.00049281e+00]
  HOMO = -0.236456355945641  LUMO = 86.0921555117319
  mo_energy =
[-1.20271184e+02 -1.22542494e+01 -6.65495100e+00 -6.65495100e+00
 -6.65495100e+00 -1.16354887e+00 -2.36456356e-01 -2.36456356e-01
 -2.36456356e-01  8.60921555e+01  6.76453089e+02  3.93455508e+03
  2.96231677e+04  1.54739526e+05  6.64891250e+05  2.71962709e+06
  1.10459652e+07  4.65100865e+07]
E1 = -706.5526439934687  E_coul = 198.9129033565186
cycle= 3 E= -507.63974063695  delta_E= -1.11e-07  |g|= 9.53e-05  |ddm|= 0.000203
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.000127348
diis-c [-3.99226010e-10  3.34329126e-05 -2.55199331e-02  1.02548650e+00]
  HOMO = -0.236458588142873  LUMO = 86.0921105395275
  mo_energy =
[-1.20271299e+02 -1.22542653e+01 -6.65497819e+00 -6.65497819e+00
 -6.65497819e+00 -1.16354954e+00 -2.36458588e-01 -2.36458588e-01
 -2.36458588e-01  8.60921105e+01  6.76452971e+02  3.93455494e+03
  2.96231676e+04  1.54739526e+05  6.64891250e+05  2.71962709e+06
  1.10459652e+07  4.65100865e+07]
E1 = -706.5526366813561  E_coul = 198.91289604436588
cycle= 4 E= -507.63974063699  delta_E= -4.02e-11  |g|= 3.76e-07  |ddm|= 3.48e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.5526366813561  E_coul = 198.91289604436588
  HOMO = -0.236458571663082  LUMO = 86.0921108797381
  mo_energy =
[-1.20271298e+02 -1.22542652e+01 -6.65497803e+00 -6.65497803e+00
 -6.65497803e+00 -1.16354953e+00 -2.36458572e-01 -2.36458572e-01
 -2.36458572e-01  8.60921109e+01  6.76452972e+02  3.93455494e+03
  2.96231676e+04  1.54739526e+05  6.64891250e+05  2.71962709e+06
  1.10459652e+07  4.65100865e+07]
E1 = -706.5526367187696  E_coul = 198.912896081779
Extra cycle  E= -507.639740636991  delta_E= -3.41e-13  |g|= 6.5e-09  |ddm|= 1.66e-08
    CPU time for scf_cycle      0.11 sec, wall time      0.11 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 56.37510358331146
E1 = -706.5526367187696  E_coul = 198.912896081779
init E= -507.639740636991
    CPU time for initialize scf      0.14 sec, wall time      0.14 sec
  HOMO = -0.236458571469976  LUMO = 86.092110883906
  mo_energy =
[-1.20271298e+02 -1.22542652e+01 -6.65497803e+00 -6.65497803e+00
 -6.65497803e+00 -1.16354953e+00 -2.36458571e-01 -2.36458571e-01
 -2.36458571e-01  8.60921109e+01  6.76452972e+02  3.93455494e+03
  2.96231676e+04  1.54739526e+05  6.64891250e+05  2.71962709e+06
  1.10459652e+07  4.65100865e+07]
E1 = -706.5526367193362  E_coul = 198.9128960823461
cycle= 1 E= -507.63974063699  delta_E= 5.12e-13  |g|= 2.07e-10  |ddm|= 2.57e-10
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -706.5526367193362  E_coul = 198.9128960823461
  HOMO = -0.236458571467249  LUMO = 86.0921108839674
  mo_energy =
[-1.20271298e+02 -1.22542652e+01 -6.65497803e+00 -6.65497803e+00
 -6.65497803e+00 -1.16354953e+00 -2.36458571e-01 -2.36458571e-01
 -2.36458571e-01  8.60921109e+01  6.76452972e+02  3.93455494e+03
  2.96231676e+04  1.54739526e+05  6.64891250e+05  2.71962709e+06
  1.10459652e+07  4.65100865e+07]
E1 = -706.5526367193465  E_coul = 198.9128960823559
Extra cycle  E= -507.639740636991  delta_E= -5.12e-13  |g|= 1.6e-10  |ddm|= 4.58e-12
    CPU time for scf_cycle      0.21 sec, wall time      0.21 sec
exp = [1.87954849e+07 4.69887121e+06 1.17471780e+06 2.93679448e+05
 7.34198757e+04 1.83519880e+04 2.23706495e+03 4.55786768e+02
 1.21373353e+02 3.75221627e+01 4.74104253e+00 3.91196513e-01
 8.59864172e+00 4.90850618e-01]
grad_E = [-1.14807897e-13  1.77853192e-11  6.76291659e-12  1.04058272e-08
 -3.47942850e-08  6.33567191e-06 -4.81076665e-06 -1.96881394e-05
 -1.23373627e-05 -3.13322480e-06  7.61466072e-08 -6.26464228e-07
 -1.81310433e-07 -1.27087026e-06]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="BFGS",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((14, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.6988712134173084e+06,1.1747178033543271e+06,2.9367945083858178e+05,7.3419865393677101e+04,1.8353927627435987e+04,2.2341424145819028e+03,4.5688904996449571e+02,1.2173317272260677e+02,3.7593061247508530e+01,4.7412722556720146e+00,3.9120358491841306e-01,8.5986297237246045e+00,4.9084868336327880e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "12s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:16:43 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  18795484.8537        1
[INPUT] 0    0    [1    /1   ]  4698871.21341        1
[INPUT] 0    0    [1    /1   ]  1174717.80335        1
[INPUT] 0    0    [1    /1   ]  293679.447662        1
[INPUT] 0    0    [1    /1   ]  73419.8757089        1
[INPUT] 0    0    [1    /1   ]  18351.9916265        1
[INPUT] 0    0    [1    /1   ]  2237.05947962        1
[INPUT] 0    0    [1    /1   ]  455.788518397        1
[INPUT] 0    0    [1    /1   ]  121.374622811        1
[INPUT] 0    0    [1    /1   ]  37.5224968292        1
[INPUT] 0    0    [1    /1   ]  4.74104303622        1
[INPUT] 0    0    [1    /1   ]  0.3911965569         1
[INPUT] 1    0    [1    /1   ]  8.5986416117         1
[INPUT] 1    0    [1    /1   ]  0.490850609624       1

nuclear repulsion = 0
number of shells = 14
number of NR pGTOs = 18
number of NR cGTOs = 18
basis = {'Ar': [[0, [18795484.853669267, 1.0]], [0, [4698871.213411878, 1.0]], [0, [1174717.8033517306, 1.0]], [0, [293679.4476624575, 1.0]], [0, [73419.87570893545, 1.0]], [0, [18351.991626459796, 1.0]], [0, [2237.059479622527, 1.0]], [0, [455.7885183974644, 1.0]], [0, [121.374622810682, 1.0]], [0, [37.52249682915727, 1.0]], [0, [4.741043036224947, 1.0]], [0, [0.39119655689958427, 1.0]], [1, [8.598641611704776, 1.0]], [1, [0.49085060962448535, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [18795484.85366927]
bas 1, expnt(s) = [4698871.21341188]
bas 2, expnt(s) = [1174717.80335173]
bas 3, expnt(s) = [293679.44766246]
bas 4, expnt(s) = [73419.87570894]
bas 5, expnt(s) = [18351.99162646]
bas 6, expnt(s) = [2237.05947962]
bas 7, expnt(s) = [455.7885184]
bas 8, expnt(s) = [121.37462281]
bas 9, expnt(s) = [37.52249683]
bas 10, expnt(s) = [4.74104304]
bas 11, expnt(s) = [0.39119656]
bas 12, expnt(s) = [8.59864161]
bas 13, expnt(s) = [0.49085061]
CPU time:       183.60
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  0  1  1  0 42 43  0]
 [ 0  0  1  1  0 44 45  0]
 [ 0  0  1  1  0 46 47  0]
 [ 0  1  1  1  0 48 49  0]
 [ 0  1  1  1  0 50 51  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.87954849e+07 7.21199097e+05 4.69887121e+06 2.54982386e+05
 1.17471780e+06 9.01498871e+04 2.93679448e+05 3.18727980e+04
 7.34198757e+04 1.12687374e+04 1.83519916e+04 3.98361561e+03
 2.23705948e+03 8.21813314e+02 4.55788518e+02 2.49222679e+02
 1.21374623e+02 9.23870169e+01 3.75224968e+01 3.83030909e+01
 4.74104304e+00 8.11746542e+00 3.91196557e-01 1.24971589e+00
 8.59864161e+00 4.29557892e+01 4.90850610e-01 1.19859113e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319981659020968
cond(S) = 56.375210703004115
E1 = -688.8358394930946  E_coul = 184.91515505934913
init E= -503.920684433745
    CPU time for initialize scf      0.03 sec, wall time      0.03 sec
  HOMO = -0.680896340626185  LUMO = 84.7642600763931
  mo_energy =
[-1.21650554e+02 -1.32811407e+01 -7.62163007e+00 -7.62163007e+00
 -7.62163007e+00 -1.65069328e+00 -6.80896341e-01 -6.80896341e-01
 -6.80896341e-01  8.47642601e+01  6.75099161e+02  3.93332469e+03
  2.96220953e+04  1.54738531e+05  6.64890287e+05  2.71962614e+06
  1.10459643e+07  4.65100855e+07]
E1 = -706.5846793216488  E_coul = 198.94536896194165
cycle= 1 E= -507.639310359707  delta_E= -3.72  |g|= 0.318  |ddm|= 0.301
    CPU time for cycle= 1      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.420564
diis-c [-0.17687407  1.        ]
  HOMO = -0.236280063018221  LUMO = 86.0969229418847
  mo_energy =
[-1.20262507e+02 -1.22530540e+01 -6.65309925e+00 -6.65309925e+00
 -6.65309925e+00 -1.16348374e+00 -2.36280063e-01 -2.36280063e-01
 -2.36280063e-01  8.60969229e+01  6.76469820e+02  3.93457613e+03
  2.96231838e+04  1.54739548e+05  6.64891275e+05  2.71962712e+06
  1.10459653e+07  4.65100865e+07]
E1 = -706.5530900683751  E_coul = 198.91334954096652
cycle= 2 E= -507.639740527409  delta_E= -0.00043  |g|= 0.00476  |ddm|= 0.0143
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00505307
diis-c [-2.54905692e-05 -4.92865062e-04  1.00049287e+00]
  HOMO = -0.236456329077309  LUMO = 86.0933944318644
  mo_energy =
[-1.20271184e+02 -1.22542495e+01 -6.65495078e+00 -6.65495078e+00
 -6.65495078e+00 -1.16354889e+00 -2.36456329e-01 -2.36456329e-01
 -2.36456329e-01  8.60933944e+01  6.76459201e+02  3.93456019e+03
  2.96231645e+04  1.54739528e+05  6.64891255e+05  2.71962710e+06
  1.10459652e+07  4.65100865e+07]
E1 = -706.5526467014428  E_coul = 198.91290606298816
cycle= 3 E= -507.639740638455  delta_E= -1.11e-07  |g|= 9.53e-05  |ddm|= 0.000203
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.000127345
diis-c [-3.99212198e-10  3.34326803e-05 -2.55196928e-02  1.02548626e+00]
  HOMO = -0.236458561188605  LUMO = 86.0933494609918
  mo_energy =
[-1.20271298e+02 -1.22542654e+01 -6.65497797e+00 -6.65497797e+00
 -6.65497797e+00 -1.16354955e+00 -2.36458561e-01 -2.36458561e-01
 -2.36458561e-01  8.60933495e+01  6.76459083e+02  3.93456004e+03
  2.96231643e+04  1.54739528e+05  6.64891254e+05  2.71962710e+06
  1.10459652e+07  4.65100865e+07]
E1 = -706.552639389643  E_coul = 198.91289875114796
cycle= 4 E= -507.639740638495  delta_E= -4.04e-11  |g|= 3.76e-07  |ddm|= 3.48e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.552639389643  E_coul = 198.91289875114796
  HOMO = -0.236458544709527  LUMO = 86.0933498011918
  mo_energy =
[-1.20271297e+02 -1.22542653e+01 -6.65497781e+00 -6.65497781e+00
 -6.65497781e+00 -1.16354955e+00 -2.36458545e-01 -2.36458545e-01
 -2.36458545e-01  8.60933498e+01  6.76459084e+02  3.93456004e+03
  2.96231643e+04  1.54739528e+05  6.64891254e+05  2.71962710e+06
  1.10459652e+07  4.65100865e+07]
E1 = -706.5526394270547  E_coul = 198.91289878855972
Extra cycle  E= -507.639740638495  delta_E=    0  |g|= 6.5e-09  |ddm|= 1.66e-08
    CPU time for scf_cycle      0.11 sec, wall time      0.11 sec
exp = [1.87954849e+07 4.69887121e+06 1.17471780e+06 2.93679448e+05
 7.34198757e+04 1.83519916e+04 2.23705948e+03 4.55788518e+02
 1.21374623e+02 3.75224968e+01 4.74104304e+00 3.91196557e-01
 8.59864161e+00 4.90850610e-01]
E = -507.639740638495
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="BFGS",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((14, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.6988712134173084e+06,1.1747178033543271e+06,2.9367945083858178e+05,7.3419865393677101e+04,1.8353927627435987e+04,2.2341424145819028e+03,4.5688904996449571e+02,1.2173317272260677e+02,3.7593061247508530e+01,4.7412722556720146e+00,3.9120358491841306e-01,8.5986297237246045e+00,4.9084868336327880e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "12s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:16:43 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  18795484.8537        1
[INPUT] 0    0    [1    /1   ]  4698871.21341        1
[INPUT] 0    0    [1    /1   ]  1174717.80335        1
[INPUT] 0    0    [1    /1   ]  293679.447662        1
[INPUT] 0    0    [1    /1   ]  73419.8757089        1
[INPUT] 0    0    [1    /1   ]  18351.9916265        1
[INPUT] 0    0    [1    /1   ]  2237.05947962        1
[INPUT] 0    0    [1    /1   ]  455.788518397        1
[INPUT] 0    0    [1    /1   ]  121.374622811        1
[INPUT] 0    0    [1    /1   ]  37.5224968292        1
[INPUT] 0    0    [1    /1   ]  4.74104303622        1
[INPUT] 0    0    [1    /1   ]  0.3911965569         1
[INPUT] 1    0    [1    /1   ]  8.5986416117         1
[INPUT] 1    0    [1    /1   ]  0.490850609624       1

nuclear repulsion = 0
number of shells = 14
number of NR pGTOs = 18
number of NR cGTOs = 18
basis = {'Ar': [[0, [18795484.853669267, 1.0]], [0, [4698871.213411878, 1.0]], [0, [1174717.8033517306, 1.0]], [0, [293679.4476624575, 1.0]], [0, [73419.87570893545, 1.0]], [0, [18351.991626459796, 1.0]], [0, [2237.059479622527, 1.0]], [0, [455.7885183974644, 1.0]], [0, [121.374622810682, 1.0]], [0, [37.52249682915727, 1.0]], [0, [4.741043036224947, 1.0]], [0, [0.39119655689958427, 1.0]], [1, [8.598641611704776, 1.0]], [1, [0.49085060962448535, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [18795484.85366927]
bas 1, expnt(s) = [4698871.21341188]
bas 2, expnt(s) = [1174717.80335173]
bas 3, expnt(s) = [293679.44766246]
bas 4, expnt(s) = [73419.87570894]
bas 5, expnt(s) = [18351.99162646]
bas 6, expnt(s) = [2237.05947962]
bas 7, expnt(s) = [455.7885184]
bas 8, expnt(s) = [121.37462281]
bas 9, expnt(s) = [37.52249683]
bas 10, expnt(s) = [4.74104304]
bas 11, expnt(s) = [0.39119656]
bas 12, expnt(s) = [8.59864161]
bas 13, expnt(s) = [0.49085061]
CPU time:       184.34
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  0  1  1  0 42 43  0]
 [ 0  0  1  1  0 44 45  0]
 [ 0  0  1  1  0 46 47  0]
 [ 0  1  1  1  0 48 49  0]
 [ 0  1  1  1  0 50 51  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.87954849e+07 7.21199097e+05 4.69887121e+06 2.54982386e+05
 1.17471780e+06 9.01498871e+04 2.93679448e+05 3.18727980e+04
 7.34198757e+04 1.12687374e+04 1.83519916e+04 3.98361561e+03
 2.23705948e+03 8.21813314e+02 4.55788518e+02 2.49222679e+02
 1.21374623e+02 9.23870169e+01 3.75224968e+01 3.83030909e+01
 4.74104304e+00 8.11746542e+00 3.91196557e-01 1.24971589e+00
 8.59864161e+00 4.29557892e+01 4.90850610e-01 1.19859113e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319981659020968
cond(S) = 56.375210703004115
E1 = -688.8358394930946  E_coul = 184.91515505934913
init E= -503.920684433745
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.680896340626185  LUMO = 84.7642600763931
  mo_energy =
[-1.21650554e+02 -1.32811407e+01 -7.62163007e+00 -7.62163007e+00
 -7.62163007e+00 -1.65069328e+00 -6.80896341e-01 -6.80896341e-01
 -6.80896341e-01  8.47642601e+01  6.75099161e+02  3.93332469e+03
  2.96220953e+04  1.54738531e+05  6.64890287e+05  2.71962614e+06
  1.10459643e+07  4.65100855e+07]
E1 = -706.5846793216488  E_coul = 198.94536896194165
cycle= 1 E= -507.639310359707  delta_E= -3.72  |g|= 0.318  |ddm|= 0.301
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.420564
diis-c [-0.17687407  1.        ]
  HOMO = -0.236280063018221  LUMO = 86.0969229418847
  mo_energy =
[-1.20262507e+02 -1.22530540e+01 -6.65309925e+00 -6.65309925e+00
 -6.65309925e+00 -1.16348374e+00 -2.36280063e-01 -2.36280063e-01
 -2.36280063e-01  8.60969229e+01  6.76469820e+02  3.93457613e+03
  2.96231838e+04  1.54739548e+05  6.64891275e+05  2.71962712e+06
  1.10459653e+07  4.65100865e+07]
E1 = -706.5530900683751  E_coul = 198.91334954096652
cycle= 2 E= -507.639740527409  delta_E= -0.00043  |g|= 0.00476  |ddm|= 0.0143
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00505307
diis-c [-2.54905692e-05 -4.92865062e-04  1.00049287e+00]
  HOMO = -0.236456329077309  LUMO = 86.0933944318644
  mo_energy =
[-1.20271184e+02 -1.22542495e+01 -6.65495078e+00 -6.65495078e+00
 -6.65495078e+00 -1.16354889e+00 -2.36456329e-01 -2.36456329e-01
 -2.36456329e-01  8.60933944e+01  6.76459201e+02  3.93456019e+03
  2.96231645e+04  1.54739528e+05  6.64891255e+05  2.71962710e+06
  1.10459652e+07  4.65100865e+07]
E1 = -706.5526467014428  E_coul = 198.91290606298816
cycle= 3 E= -507.639740638455  delta_E= -1.11e-07  |g|= 9.53e-05  |ddm|= 0.000203
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.000127345
diis-c [-3.99212198e-10  3.34326803e-05 -2.55196928e-02  1.02548626e+00]
  HOMO = -0.236458561188605  LUMO = 86.0933494609918
  mo_energy =
[-1.20271298e+02 -1.22542654e+01 -6.65497797e+00 -6.65497797e+00
 -6.65497797e+00 -1.16354955e+00 -2.36458561e-01 -2.36458561e-01
 -2.36458561e-01  8.60933495e+01  6.76459083e+02  3.93456004e+03
  2.96231643e+04  1.54739528e+05  6.64891254e+05  2.71962710e+06
  1.10459652e+07  4.65100865e+07]
E1 = -706.552639389643  E_coul = 198.91289875114796
cycle= 4 E= -507.639740638495  delta_E= -4.04e-11  |g|= 3.76e-07  |ddm|= 3.48e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.552639389643  E_coul = 198.91289875114796
  HOMO = -0.236458544709527  LUMO = 86.0933498011918
  mo_energy =
[-1.20271297e+02 -1.22542653e+01 -6.65497781e+00 -6.65497781e+00
 -6.65497781e+00 -1.16354955e+00 -2.36458545e-01 -2.36458545e-01
 -2.36458545e-01  8.60933498e+01  6.76459084e+02  3.93456004e+03
  2.96231643e+04  1.54739528e+05  6.64891254e+05  2.71962710e+06
  1.10459652e+07  4.65100865e+07]
E1 = -706.5526394270547  E_coul = 198.91289878855972
Extra cycle  E= -507.639740638495  delta_E=    0  |g|= 6.5e-09  |ddm|= 1.66e-08
    CPU time for scf_cycle      0.10 sec, wall time      0.11 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 56.375210703004115
E1 = -706.5526394270547  E_coul = 198.91289878855972
init E= -507.639740638495
    CPU time for initialize scf      0.12 sec, wall time      0.12 sec
  HOMO = -0.236458544516433  LUMO = 86.0933498053565
  mo_energy =
[-1.20271297e+02 -1.22542653e+01 -6.65497781e+00 -6.65497781e+00
 -6.65497781e+00 -1.16354955e+00 -2.36458545e-01 -2.36458545e-01
 -2.36458545e-01  8.60933498e+01  6.76459084e+02  3.93456004e+03
  2.96231643e+04  1.54739528e+05  6.64891254e+05  2.71962710e+06
  1.10459652e+07  4.65100865e+07]
E1 = -706.5526394276218  E_coul = 198.91289878912696
cycle= 1 E= -507.639740638495  delta_E= 2.27e-13  |g|= 4.64e-10  |ddm|= 2.57e-10
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -706.5526394276218  E_coul = 198.91289878912696
  HOMO = -0.236458544513706  LUMO = 86.0933498054182
  mo_energy =
[-1.20271297e+02 -1.22542653e+01 -6.65497781e+00 -6.65497781e+00
 -6.65497781e+00 -1.16354955e+00 -2.36458545e-01 -2.36458545e-01
 -2.36458545e-01  8.60933498e+01  6.76459084e+02  3.93456004e+03
  2.96231643e+04  1.54739528e+05  6.64891254e+05  2.71962710e+06
  1.10459652e+07  4.65100865e+07]
E1 = -706.552639427632  E_coul = 198.91289878913685
Extra cycle  E= -507.639740638495  delta_E= -3.41e-13  |g|= 1.26e-10  |ddm|= 4.55e-12
    CPU time for scf_cycle      0.19 sec, wall time      0.20 sec
exp = [1.87954849e+07 4.69887121e+06 1.17471780e+06 2.93679448e+05
 7.34198757e+04 1.83519916e+04 2.23705948e+03 4.55788518e+02
 1.21374623e+02 3.75224968e+01 4.74104304e+00 3.91196557e-01
 8.59864161e+00 4.90850610e-01]
grad_E = [-1.14803620e-13  1.77855946e-11  6.76518260e-12  1.04059839e-08
 -3.47935552e-08  6.33577196e-06 -4.81391977e-06 -1.97443801e-05
 -1.19715704e-05 -3.02579112e-06  1.16482184e-07 -6.10005415e-07
 -1.65155548e-07 -1.20379946e-06]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="BFGS",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((14, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.6988712134173084e+06,1.1747178033543271e+06,2.9367945083858178e+05,7.3419865393677101e+04,1.8353927627435987e+04,2.2341424145819028e+03,4.5688904996449571e+02,1.2173317272260677e+02,3.7593061247508530e+01,4.7412722556720146e+00,3.9120358491841306e-01,8.5986297237246045e+00,4.9084868336327880e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "12s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:16:47 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  18795484.8537        1
[INPUT] 0    0    [1    /1   ]  4698871.21341        1
[INPUT] 0    0    [1    /1   ]  1174717.80335        1
[INPUT] 0    0    [1    /1   ]  293679.447669        1
[INPUT] 0    0    [1    /1   ]  73419.875687         1
[INPUT] 0    0    [1    /1   ]  18351.9957473        1
[INPUT] 0    0    [1    /1   ]  2237.05330022        1
[INPUT] 0    0    [1    /1   ]  455.790558533        1
[INPUT] 0    0    [1    /1   ]  121.376081005        1
[INPUT] 0    0    [1    /1   ]  37.5228794455        1
[INPUT] 0    0    [1    /1   ]  4.74104362309        1
[INPUT] 0    0    [1    /1   ]  0.391196606876       1
[INPUT] 1    0    [1    /1   ]  8.59864148135        1
[INPUT] 1    0    [1    /1   ]  0.490850599306       1

nuclear repulsion = 0
number of shells = 14
number of NR pGTOs = 18
number of NR cGTOs = 18
basis = {'Ar': [[0, [18795484.853669267, 1.0]], [0, [4698871.213411889, 1.0]], [0, [1174717.8033517362, 1.0]], [0, [293679.44766921806, 1.0]], [0, [73419.87568697384, 1.0]], [0, [18351.995747323148, 1.0]], [0, [2237.0533002239686, 1.0]], [0, [455.79055853315987, 1.0]], [0, [121.3760810051808, 1.0]], [0, [37.52287944547684, 1.0]], [0, [4.7410436230949955, 1.0]], [0, [0.39119660687639624, 1.0]], [1, [8.59864148134628, 1.0]], [1, [0.49085059930595787, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [18795484.85366927]
bas 1, expnt(s) = [4698871.21341189]
bas 2, expnt(s) = [1174717.80335174]
bas 3, expnt(s) = [293679.44766922]
bas 4, expnt(s) = [73419.87568697]
bas 5, expnt(s) = [18351.99574732]
bas 6, expnt(s) = [2237.05330022]
bas 7, expnt(s) = [455.79055853]
bas 8, expnt(s) = [121.37608101]
bas 9, expnt(s) = [37.52287945]
bas 10, expnt(s) = [4.74104362]
bas 11, expnt(s) = [0.39119661]
bas 12, expnt(s) = [8.59864148]
bas 13, expnt(s) = [0.4908506]
CPU time:       187.80
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  0  1  1  0 42 43  0]
 [ 0  0  1  1  0 44 45  0]
 [ 0  0  1  1  0 46 47  0]
 [ 0  1  1  1  0 48 49  0]
 [ 0  1  1  1  0 50 51  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.87954849e+07 7.21199097e+05 4.69887121e+06 2.54982386e+05
 1.17471780e+06 9.01498871e+04 2.93679448e+05 3.18727980e+04
 7.34198757e+04 1.12687374e+04 1.83519957e+04 3.98361629e+03
 2.23705330e+03 8.21811611e+02 4.55790559e+02 2.49223515e+02
 1.21376081e+02 9.23878493e+01 3.75228794e+01 3.83033839e+01
 4.74104362e+00 8.11746618e+00 3.91196607e-01 1.24971601e+00
 8.59864148e+00 4.29557884e+01 4.90850599e-01 1.19859110e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319981634564172
cond(S) = 56.375333068871306
E1 = -688.8358354006772  E_coul = 184.91515635503018
init E= -503.920679045647
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.680896336799157  LUMO = 84.7656786117659
  mo_energy =
[-1.21650554e+02 -1.32811409e+01 -7.62162991e+00 -7.62162991e+00
 -7.62162991e+00 -1.65069336e+00 -6.80896337e-01 -6.80896337e-01
 -6.80896337e-01  8.47656786e+01  6.75106200e+02  3.93333074e+03
  2.96220920e+04  1.54738533e+05  6.64890293e+05  2.71962615e+06
  1.10459643e+07  4.65100856e+07]
E1 = -706.5846816101587  E_coul = 198.9453712365816
cycle= 1 E= -507.639310373577  delta_E= -3.72  |g|= 0.318  |ddm|= 0.301
    CPU time for cycle= 1      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.420564
diis-c [-0.17687437  1.        ]
  HOMO = -0.236280038158444  LUMO = 86.0983432930678
  mo_energy =
[-1.20262506e+02 -1.22530542e+01 -6.65309905e+00 -6.65309905e+00
 -6.65309905e+00 -1.16348376e+00 -2.36280038e-01 -2.36280038e-01
 -2.36280038e-01  8.60983433e+01  6.76476859e+02  3.93458219e+03
  2.96231805e+04  1.54739550e+05  6.64891280e+05  2.71962712e+06
  1.10459653e+07  4.65100865e+07]
E1 = -706.5530931264934  E_coul = 198.9133525963151
cycle= 2 E= -507.639740530178  delta_E= -0.00043  |g|= 0.00476  |ddm|= 0.0143
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.005053
diis-c [-2.54899097e-05 -4.92933584e-04  1.00049293e+00]
  HOMO = -0.236456299086944  LUMO = 86.0948148357216
  mo_energy =
[-1.20271183e+02 -1.22542497e+01 -6.65495053e+00 -6.65495053e+00
 -6.65495053e+00 -1.16354891e+00 -2.36456299e-01 -2.36456299e-01
 -2.36456299e-01  8.60948148e+01  6.76466241e+02  3.93456624e+03
  2.96231612e+04  1.54739530e+05  6.64891260e+05  2.71962710e+06
  1.10459653e+07  4.65100865e+07]
E1 = -706.5526497748529  E_coul = 198.91290913363363
cycle= 3 E= -507.639740641219  delta_E= -1.11e-07  |g|= 9.53e-05  |ddm|= 0.000203
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.000127342
diis-c [-3.99194488e-10  3.34326742e-05 -2.55194196e-02  1.02548599e+00]
  HOMO = -0.236458531099508  LUMO = 86.0947698663782
  mo_energy =
[-1.20271297e+02 -1.22542656e+01 -6.65497772e+00 -6.65497772e+00
 -6.65497772e+00 -1.16354957e+00 -2.36458531e-01 -2.36458531e-01
 -2.36458531e-01  8.60947699e+01  6.76466123e+02  3.93456609e+03
  2.96231610e+04  1.54739530e+05  6.64891260e+05  2.71962710e+06
  1.10459653e+07  4.65100865e+07]
E1 = -706.5526424634124  E_coul = 198.91290182215252
cycle= 4 E= -507.63974064126  delta_E= -4.07e-11  |g|= 3.76e-07  |ddm|= 3.48e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.5526424634124  E_coul = 198.91290182215252
  HOMO = -0.236458514621277  LUMO = 86.0947702065702
  mo_energy =
[-1.20271296e+02 -1.22542655e+01 -6.65497756e+00 -6.65497756e+00
 -6.65497756e+00 -1.16354957e+00 -2.36458515e-01 -2.36458515e-01
 -2.36458515e-01  8.60947702e+01  6.76466124e+02  3.93456609e+03
  2.96231610e+04  1.54739530e+05  6.64891260e+05  2.71962710e+06
  1.10459653e+07  4.65100865e+07]
E1 = -706.5526425008222  E_coul = 198.9129018595622
Extra cycle  E= -507.63974064126  delta_E= -1.14e-13  |g|= 6.51e-09  |ddm|= 1.66e-08
    CPU time for scf_cycle      0.11 sec, wall time      0.11 sec
exp = [1.87954849e+07 4.69887121e+06 1.17471780e+06 2.93679448e+05
 7.34198757e+04 1.83519957e+04 2.23705330e+03 4.55790559e+02
 1.21376081e+02 3.75228794e+01 4.74104362e+00 3.91196607e-01
 8.59864148e+00 4.90850599e-01]
E = -507.63974064126
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="BFGS",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((14, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.6988712134173084e+06,1.1747178033543271e+06,2.9367945083858178e+05,7.3419865393677101e+04,1.8353927627435987e+04,2.2341424145819028e+03,4.5688904996449571e+02,1.2173317272260677e+02,3.7593061247508530e+01,4.7412722556720146e+00,3.9120358491841306e-01,8.5986297237246045e+00,4.9084868336327880e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "12s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:16:48 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  18795484.8537        1
[INPUT] 0    0    [1    /1   ]  4698871.21341        1
[INPUT] 0    0    [1    /1   ]  1174717.80335        1
[INPUT] 0    0    [1    /1   ]  293679.447669        1
[INPUT] 0    0    [1    /1   ]  73419.875687         1
[INPUT] 0    0    [1    /1   ]  18351.9957473        1
[INPUT] 0    0    [1    /1   ]  2237.05330022        1
[INPUT] 0    0    [1    /1   ]  455.790558533        1
[INPUT] 0    0    [1    /1   ]  121.376081005        1
[INPUT] 0    0    [1    /1   ]  37.5228794455        1
[INPUT] 0    0    [1    /1   ]  4.74104362309        1
[INPUT] 0    0    [1    /1   ]  0.391196606876       1
[INPUT] 1    0    [1    /1   ]  8.59864148135        1
[INPUT] 1    0    [1    /1   ]  0.490850599306       1

nuclear repulsion = 0
number of shells = 14
number of NR pGTOs = 18
number of NR cGTOs = 18
basis = {'Ar': [[0, [18795484.853669267, 1.0]], [0, [4698871.213411889, 1.0]], [0, [1174717.8033517362, 1.0]], [0, [293679.44766921806, 1.0]], [0, [73419.87568697384, 1.0]], [0, [18351.995747323148, 1.0]], [0, [2237.0533002239686, 1.0]], [0, [455.79055853315987, 1.0]], [0, [121.3760810051808, 1.0]], [0, [37.52287944547684, 1.0]], [0, [4.7410436230949955, 1.0]], [0, [0.39119660687639624, 1.0]], [1, [8.59864148134628, 1.0]], [1, [0.49085059930595787, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [18795484.85366927]
bas 1, expnt(s) = [4698871.21341189]
bas 2, expnt(s) = [1174717.80335174]
bas 3, expnt(s) = [293679.44766922]
bas 4, expnt(s) = [73419.87568697]
bas 5, expnt(s) = [18351.99574732]
bas 6, expnt(s) = [2237.05330022]
bas 7, expnt(s) = [455.79055853]
bas 8, expnt(s) = [121.37608101]
bas 9, expnt(s) = [37.52287945]
bas 10, expnt(s) = [4.74104362]
bas 11, expnt(s) = [0.39119661]
bas 12, expnt(s) = [8.59864148]
bas 13, expnt(s) = [0.4908506]
CPU time:       188.55
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  0  1  1  0 42 43  0]
 [ 0  0  1  1  0 44 45  0]
 [ 0  0  1  1  0 46 47  0]
 [ 0  1  1  1  0 48 49  0]
 [ 0  1  1  1  0 50 51  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.87954849e+07 7.21199097e+05 4.69887121e+06 2.54982386e+05
 1.17471780e+06 9.01498871e+04 2.93679448e+05 3.18727980e+04
 7.34198757e+04 1.12687374e+04 1.83519957e+04 3.98361629e+03
 2.23705330e+03 8.21811611e+02 4.55790559e+02 2.49223515e+02
 1.21376081e+02 9.23878493e+01 3.75228794e+01 3.83033839e+01
 4.74104362e+00 8.11746618e+00 3.91196607e-01 1.24971601e+00
 8.59864148e+00 4.29557884e+01 4.90850599e-01 1.19859110e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319981634564172
cond(S) = 56.375333068871306
E1 = -688.8358354006772  E_coul = 184.91515635503018
init E= -503.920679045647
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.680896336799157  LUMO = 84.7656786117659
  mo_energy =
[-1.21650554e+02 -1.32811409e+01 -7.62162991e+00 -7.62162991e+00
 -7.62162991e+00 -1.65069336e+00 -6.80896337e-01 -6.80896337e-01
 -6.80896337e-01  8.47656786e+01  6.75106200e+02  3.93333074e+03
  2.96220920e+04  1.54738533e+05  6.64890293e+05  2.71962615e+06
  1.10459643e+07  4.65100856e+07]
E1 = -706.5846816101587  E_coul = 198.9453712365816
cycle= 1 E= -507.639310373577  delta_E= -3.72  |g|= 0.318  |ddm|= 0.301
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.420564
diis-c [-0.17687437  1.        ]
  HOMO = -0.236280038158444  LUMO = 86.0983432930678
  mo_energy =
[-1.20262506e+02 -1.22530542e+01 -6.65309905e+00 -6.65309905e+00
 -6.65309905e+00 -1.16348376e+00 -2.36280038e-01 -2.36280038e-01
 -2.36280038e-01  8.60983433e+01  6.76476859e+02  3.93458219e+03
  2.96231805e+04  1.54739550e+05  6.64891280e+05  2.71962712e+06
  1.10459653e+07  4.65100865e+07]
E1 = -706.5530931264934  E_coul = 198.9133525963151
cycle= 2 E= -507.639740530178  delta_E= -0.00043  |g|= 0.00476  |ddm|= 0.0143
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.005053
diis-c [-2.54899097e-05 -4.92933584e-04  1.00049293e+00]
  HOMO = -0.236456299086944  LUMO = 86.0948148357216
  mo_energy =
[-1.20271183e+02 -1.22542497e+01 -6.65495053e+00 -6.65495053e+00
 -6.65495053e+00 -1.16354891e+00 -2.36456299e-01 -2.36456299e-01
 -2.36456299e-01  8.60948148e+01  6.76466241e+02  3.93456624e+03
  2.96231612e+04  1.54739530e+05  6.64891260e+05  2.71962710e+06
  1.10459653e+07  4.65100865e+07]
E1 = -706.5526497748529  E_coul = 198.91290913363363
cycle= 3 E= -507.639740641219  delta_E= -1.11e-07  |g|= 9.53e-05  |ddm|= 0.000203
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.000127342
diis-c [-3.99194488e-10  3.34326742e-05 -2.55194196e-02  1.02548599e+00]
  HOMO = -0.236458531099508  LUMO = 86.0947698663782
  mo_energy =
[-1.20271297e+02 -1.22542656e+01 -6.65497772e+00 -6.65497772e+00
 -6.65497772e+00 -1.16354957e+00 -2.36458531e-01 -2.36458531e-01
 -2.36458531e-01  8.60947699e+01  6.76466123e+02  3.93456609e+03
  2.96231610e+04  1.54739530e+05  6.64891260e+05  2.71962710e+06
  1.10459653e+07  4.65100865e+07]
E1 = -706.5526424634124  E_coul = 198.91290182215252
cycle= 4 E= -507.63974064126  delta_E= -4.07e-11  |g|= 3.76e-07  |ddm|= 3.48e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.5526424634124  E_coul = 198.91290182215252
  HOMO = -0.236458514621277  LUMO = 86.0947702065702
  mo_energy =
[-1.20271296e+02 -1.22542655e+01 -6.65497756e+00 -6.65497756e+00
 -6.65497756e+00 -1.16354957e+00 -2.36458515e-01 -2.36458515e-01
 -2.36458515e-01  8.60947702e+01  6.76466124e+02  3.93456609e+03
  2.96231610e+04  1.54739530e+05  6.64891260e+05  2.71962710e+06
  1.10459653e+07  4.65100865e+07]
E1 = -706.5526425008222  E_coul = 198.9129018595622
Extra cycle  E= -507.63974064126  delta_E= -1.14e-13  |g|= 6.51e-09  |ddm|= 1.66e-08
    CPU time for scf_cycle      0.10 sec, wall time      0.11 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 56.375333068871306
E1 = -706.5526425008222  E_coul = 198.9129018595622
init E= -507.63974064126
    CPU time for initialize scf      0.12 sec, wall time      0.12 sec
  HOMO = -0.236458514428194  LUMO = 86.0947702107373
  mo_energy =
[-1.20271296e+02 -1.22542655e+01 -6.65497756e+00 -6.65497756e+00
 -6.65497756e+00 -1.16354957e+00 -2.36458514e-01 -2.36458514e-01
 -2.36458514e-01  8.60947702e+01  6.76466124e+02  3.93456609e+03
  2.96231610e+04  1.54739530e+05  6.64891260e+05  2.71962710e+06
  1.10459653e+07  4.65100865e+07]
E1 = -706.552642501389  E_coul = 198.9129018601289
cycle= 1 E= -507.63974064126  delta_E= -5.68e-14  |g|= 2.18e-10  |ddm|= 2.57e-10
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -706.552642501389  E_coul = 198.9129018601289
  HOMO = -0.236458514425465  LUMO = 86.0947702107953
  mo_energy =
[-1.20271296e+02 -1.22542655e+01 -6.65497756e+00 -6.65497756e+00
 -6.65497756e+00 -1.16354957e+00 -2.36458514e-01 -2.36458514e-01
 -2.36458514e-01  8.60947702e+01  6.76466124e+02  3.93456609e+03
  2.96231610e+04  1.54739530e+05  6.64891260e+05  2.71962710e+06
  1.10459653e+07  4.65100865e+07]
E1 = -706.5526425013989  E_coul = 198.91290186013887
Extra cycle  E= -507.63974064126  delta_E= 5.68e-14  |g|= 1.2e-10  |ddm|= 4.63e-12
    CPU time for scf_cycle      0.19 sec, wall time      0.19 sec
exp = [1.87954849e+07 4.69887121e+06 1.17471780e+06 2.93679448e+05
 7.34198757e+04 1.83519957e+04 2.23705330e+03 4.55790559e+02
 1.21376081e+02 3.75228794e+01 4.74104362e+00 3.91196607e-01
 8.59864148e+00 4.90850599e-01]
grad_E = [-1.14798726e-13  1.77859097e-11  6.76777527e-12  1.04061632e-08
 -3.47927208e-08  6.33588660e-06 -4.81760808e-06 -1.98077897e-05
 -1.15547693e-05 -2.90402512e-06  1.64770594e-07 -5.95910890e-07
 -1.48020924e-07 -1.13650356e-06]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="BFGS",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((14, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.6988712134173084e+06,1.1747178033543271e+06,2.9367945083858178e+05,7.3419865393677101e+04,1.8353927627435987e+04,2.2341424145819028e+03,4.5688904996449571e+02,1.2173317272260677e+02,3.7593061247508530e+01,4.7412722556720146e+00,3.9120358491841306e-01,8.5986297237246045e+00,4.9084868336327880e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "12s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:16:51 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  18795484.8537        1
[INPUT] 0    0    [1    /1   ]  4698871.21341        1
[INPUT] 0    0    [1    /1   ]  1174717.80335        1
[INPUT] 0    0    [1    /1   ]  293679.447678        1
[INPUT] 0    0    [1    /1   ]  73419.8756597        1
[INPUT] 0    0    [1    /1   ]  18352.0008586        1
[INPUT] 0    0    [1    /1   ]  2237.04561581        1
[INPUT] 0    0    [1    /1   ]  455.793187578        1
[INPUT] 0    0    [1    /1   ]  121.377941687        1
[INPUT] 0    0    [1    /1   ]  37.5233670715        1
[INPUT] 0    0    [1    /1   ]  4.74104437584        1
[INPUT] 0    0    [1    /1   ]  0.391196670321       1
[INPUT] 1    0    [1    /1   ]  8.59864131332        1
[INPUT] 1    0    [1    /1   ]  0.490850585864       1

nuclear repulsion = 0
number of shells = 14
number of NR pGTOs = 18
number of NR cGTOs = 18
basis = {'Ar': [[0, [18795484.853669267, 1.0]], [0, [4698871.213411903, 1.0]], [0, [1174717.803351743, 1.0]], [0, [293679.44767760346, 1.0]], [0, [73419.87565973832, 1.0]], [0, [18352.000858597636, 1.0]], [0, [2237.045615805687, 1.0]], [0, [455.7931875776157, 1.0]], [0, [121.37794168699295, 1.0]], [0, [37.523367071500665, 1.0]], [0, [4.741044375839831, 1.0]], [0, [0.39119667032051814, 1.0]], [1, [8.598641313321536, 1.0]], [1, [0.4908505858638486, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [18795484.85366927]
bas 1, expnt(s) = [4698871.2134119]
bas 2, expnt(s) = [1174717.80335174]
bas 3, expnt(s) = [293679.4476776]
bas 4, expnt(s) = [73419.87565974]
bas 5, expnt(s) = [18352.0008586]
bas 6, expnt(s) = [2237.04561581]
bas 7, expnt(s) = [455.79318758]
bas 8, expnt(s) = [121.37794169]
bas 9, expnt(s) = [37.52336707]
bas 10, expnt(s) = [4.74104438]
bas 11, expnt(s) = [0.39119667]
bas 12, expnt(s) = [8.59864131]
bas 13, expnt(s) = [0.49085059]
CPU time:       192.00
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  0  1  1  0 42 43  0]
 [ 0  0  1  1  0 44 45  0]
 [ 0  0  1  1  0 46 47  0]
 [ 0  1  1  1  0 48 49  0]
 [ 0  1  1  1  0 50 51  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.87954849e+07 7.21199097e+05 4.69887121e+06 2.54982386e+05
 1.17471780e+06 9.01498871e+04 2.93679448e+05 3.18727980e+04
 7.34198757e+04 1.12687374e+04 1.83520009e+04 3.98361712e+03
 2.23704562e+03 8.21809494e+02 4.55793188e+02 2.49224594e+02
 1.21377942e+02 9.23889115e+01 3.75233671e+01 3.83037572e+01
 4.74104438e+00 8.11746714e+00 3.91196670e-01 1.24971616e+00
 8.59864131e+00 4.29557874e+01 4.90850586e-01 1.19859106e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319981603722276
cond(S) = 56.37548863327237
E1 = -688.8358302061722  E_coul = 184.91515798492674
init E= -503.920672221245
    CPU time for initialize scf      0.03 sec, wall time      0.03 sec
  HOMO = -0.68089633239585  LUMO = 84.767487538662
  mo_energy =
[-1.21650553e+02 -1.32811413e+01 -7.62162971e+00 -7.62162971e+00
 -7.62162971e+00 -1.65069346e+00 -6.80896332e-01 -6.80896332e-01
 -6.80896332e-01  8.47674875e+01  6.75115200e+02  3.93333875e+03
  2.96220883e+04  1.54738536e+05  6.64890299e+05  2.71962615e+06
  1.10459643e+07  4.65100856e+07]
E1 = -706.58468449927  E_coul = 198.94537410638915
cycle= 1 E= -507.639310392881  delta_E= -3.72  |g|= 0.318  |ddm|= 0.301
    CPU time for cycle= 1      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.420565
diis-c [-0.17687476  1.        ]
  HOMO = -0.236280007243797  LUMO = 86.1001545347724
  mo_energy =
[-1.20262505e+02 -1.22530544e+01 -6.65309880e+00 -6.65309880e+00
 -6.65309880e+00 -1.16348379e+00 -2.36280007e-01 -2.36280007e-01
 -2.36280007e-01  8.61001545e+01  6.76485861e+02  3.93459020e+03
  2.96231767e+04  1.54739554e+05  6.64891287e+05  2.71962713e+06
  1.10459653e+07  4.65100865e+07]
E1 = -706.5530969969583  E_coul = 198.91335646163216
cycle= 2 E= -507.639740535326  delta_E= -0.00043  |g|= 0.00476  |ddm|= 0.0143
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00505292
diis-c [-2.54890699e-05 -4.93019786e-04  1.00049302e+00]
  HOMO = -0.236456261629466  LUMO = 86.0966261445856
  mo_energy =
[-1.20271182e+02 -1.22542499e+01 -6.65495021e+00 -6.65495021e+00
 -6.65495021e+00 -1.16354894e+00 -2.36456262e-01 -2.36456262e-01
 -2.36456262e-01  8.60966261e+01  6.76475242e+02  3.93457426e+03
  2.96231574e+04  1.54739534e+05  6.64891267e+05  2.71962711e+06
  1.10459653e+07  4.65100865e+07]
E1 = -706.5526536648197  E_coul = 198.91291301845854
cycle= 3 E= -507.639740646361  delta_E= -1.11e-07  |g|= 9.53e-05  |ddm|= 0.000203
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.000127338
diis-c [-3.99169608e-10  3.34328893e-05 -2.55190712e-02  1.02548564e+00]
  HOMO = -0.236458493516285  LUMO = 86.0965811771876
  mo_energy =
[-1.20271296e+02 -1.22542658e+01 -6.65497740e+00 -6.65497740e+00
 -6.65497740e+00 -1.16354960e+00 -2.36458494e-01 -2.36458494e-01
 -2.36458494e-01  8.60965812e+01  6.76475124e+02  3.93457411e+03
  2.96231573e+04  1.54739533e+05  6.64891266e+05  2.71962711e+06
  1.10459653e+07  4.65100865e+07]
E1 = -706.5526463538367  E_coul = 198.91290570743476
cycle= 4 E= -507.639740646402  delta_E= -4.08e-11  |g|= 3.76e-07  |ddm|= 3.48e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.5526463538367  E_coul = 198.91290570743476
  HOMO = -0.236458477039188  LUMO = 86.0965815173652
  mo_energy =
[-1.20271295e+02 -1.22542657e+01 -6.65497724e+00 -6.65497724e+00
 -6.65497724e+00 -1.16354959e+00 -2.36458477e-01 -2.36458477e-01
 -2.36458477e-01  8.60965815e+01  6.76475126e+02  3.93457411e+03
  2.96231573e+04  1.54739533e+05  6.64891266e+05  2.71962711e+06
  1.10459653e+07  4.65100865e+07]
E1 = -706.5526463912427  E_coul = 198.91290574484134
Extra cycle  E= -507.639740646401  delta_E= 6.25e-13  |g|= 6.5e-09  |ddm|= 1.66e-08
    CPU time for scf_cycle      0.10 sec, wall time      0.11 sec
exp = [1.87954849e+07 4.69887121e+06 1.17471780e+06 2.93679448e+05
 7.34198757e+04 1.83520009e+04 2.23704562e+03 4.55793188e+02
 1.21377942e+02 3.75233671e+01 4.74104438e+00 3.91196670e-01
 8.59864131e+00 4.90850586e-01]
E = -507.6397406464013
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="BFGS",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((14, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.6988712134173084e+06,1.1747178033543271e+06,2.9367945083858178e+05,7.3419865393677101e+04,1.8353927627435987e+04,2.2341424145819028e+03,4.5688904996449571e+02,1.2173317272260677e+02,3.7593061247508530e+01,4.7412722556720146e+00,3.9120358491841306e-01,8.5986297237246045e+00,4.9084868336327880e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "12s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:16:52 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  18795484.8537        1
[INPUT] 0    0    [1    /1   ]  4698871.21341        1
[INPUT] 0    0    [1    /1   ]  1174717.80335        1
[INPUT] 0    0    [1    /1   ]  293679.447678        1
[INPUT] 0    0    [1    /1   ]  73419.8756597        1
[INPUT] 0    0    [1    /1   ]  18352.0008586        1
[INPUT] 0    0    [1    /1   ]  2237.04561581        1
[INPUT] 0    0    [1    /1   ]  455.793187578        1
[INPUT] 0    0    [1    /1   ]  121.377941687        1
[INPUT] 0    0    [1    /1   ]  37.5233670715        1
[INPUT] 0    0    [1    /1   ]  4.74104437584        1
[INPUT] 0    0    [1    /1   ]  0.391196670321       1
[INPUT] 1    0    [1    /1   ]  8.59864131332        1
[INPUT] 1    0    [1    /1   ]  0.490850585864       1

nuclear repulsion = 0
number of shells = 14
number of NR pGTOs = 18
number of NR cGTOs = 18
basis = {'Ar': [[0, [18795484.853669267, 1.0]], [0, [4698871.213411903, 1.0]], [0, [1174717.803351743, 1.0]], [0, [293679.44767760346, 1.0]], [0, [73419.87565973832, 1.0]], [0, [18352.000858597636, 1.0]], [0, [2237.045615805687, 1.0]], [0, [455.7931875776157, 1.0]], [0, [121.37794168699295, 1.0]], [0, [37.523367071500665, 1.0]], [0, [4.741044375839831, 1.0]], [0, [0.39119667032051814, 1.0]], [1, [8.598641313321536, 1.0]], [1, [0.4908505858638486, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [18795484.85366927]
bas 1, expnt(s) = [4698871.2134119]
bas 2, expnt(s) = [1174717.80335174]
bas 3, expnt(s) = [293679.4476776]
bas 4, expnt(s) = [73419.87565974]
bas 5, expnt(s) = [18352.0008586]
bas 6, expnt(s) = [2237.04561581]
bas 7, expnt(s) = [455.79318758]
bas 8, expnt(s) = [121.37794169]
bas 9, expnt(s) = [37.52336707]
bas 10, expnt(s) = [4.74104438]
bas 11, expnt(s) = [0.39119667]
bas 12, expnt(s) = [8.59864131]
bas 13, expnt(s) = [0.49085059]
CPU time:       192.77
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  0  1  1  0 42 43  0]
 [ 0  0  1  1  0 44 45  0]
 [ 0  0  1  1  0 46 47  0]
 [ 0  1  1  1  0 48 49  0]
 [ 0  1  1  1  0 50 51  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.87954849e+07 7.21199097e+05 4.69887121e+06 2.54982386e+05
 1.17471780e+06 9.01498871e+04 2.93679448e+05 3.18727980e+04
 7.34198757e+04 1.12687374e+04 1.83520009e+04 3.98361712e+03
 2.23704562e+03 8.21809494e+02 4.55793188e+02 2.49224594e+02
 1.21377942e+02 9.23889115e+01 3.75233671e+01 3.83037572e+01
 4.74104438e+00 8.11746714e+00 3.91196670e-01 1.24971616e+00
 8.59864131e+00 4.29557874e+01 4.90850586e-01 1.19859106e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319981603722276
cond(S) = 56.37548863327237
E1 = -688.8358302061722  E_coul = 184.91515798492674
init E= -503.920672221245
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.68089633239585  LUMO = 84.767487538662
  mo_energy =
[-1.21650553e+02 -1.32811413e+01 -7.62162971e+00 -7.62162971e+00
 -7.62162971e+00 -1.65069346e+00 -6.80896332e-01 -6.80896332e-01
 -6.80896332e-01  8.47674875e+01  6.75115200e+02  3.93333875e+03
  2.96220883e+04  1.54738536e+05  6.64890299e+05  2.71962615e+06
  1.10459643e+07  4.65100856e+07]
E1 = -706.58468449927  E_coul = 198.94537410638915
cycle= 1 E= -507.639310392881  delta_E= -3.72  |g|= 0.318  |ddm|= 0.301
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.420565
diis-c [-0.17687476  1.        ]
  HOMO = -0.236280007243797  LUMO = 86.1001545347724
  mo_energy =
[-1.20262505e+02 -1.22530544e+01 -6.65309880e+00 -6.65309880e+00
 -6.65309880e+00 -1.16348379e+00 -2.36280007e-01 -2.36280007e-01
 -2.36280007e-01  8.61001545e+01  6.76485861e+02  3.93459020e+03
  2.96231767e+04  1.54739554e+05  6.64891287e+05  2.71962713e+06
  1.10459653e+07  4.65100865e+07]
E1 = -706.5530969969583  E_coul = 198.91335646163216
cycle= 2 E= -507.639740535326  delta_E= -0.00043  |g|= 0.00476  |ddm|= 0.0143
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00505292
diis-c [-2.54890699e-05 -4.93019786e-04  1.00049302e+00]
  HOMO = -0.236456261629466  LUMO = 86.0966261445856
  mo_energy =
[-1.20271182e+02 -1.22542499e+01 -6.65495021e+00 -6.65495021e+00
 -6.65495021e+00 -1.16354894e+00 -2.36456262e-01 -2.36456262e-01
 -2.36456262e-01  8.60966261e+01  6.76475242e+02  3.93457426e+03
  2.96231574e+04  1.54739534e+05  6.64891267e+05  2.71962711e+06
  1.10459653e+07  4.65100865e+07]
E1 = -706.5526536648197  E_coul = 198.91291301845854
cycle= 3 E= -507.639740646361  delta_E= -1.11e-07  |g|= 9.53e-05  |ddm|= 0.000203
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.000127338
diis-c [-3.99169608e-10  3.34328893e-05 -2.55190712e-02  1.02548564e+00]
  HOMO = -0.236458493516285  LUMO = 86.0965811771876
  mo_energy =
[-1.20271296e+02 -1.22542658e+01 -6.65497740e+00 -6.65497740e+00
 -6.65497740e+00 -1.16354960e+00 -2.36458494e-01 -2.36458494e-01
 -2.36458494e-01  8.60965812e+01  6.76475124e+02  3.93457411e+03
  2.96231573e+04  1.54739533e+05  6.64891266e+05  2.71962711e+06
  1.10459653e+07  4.65100865e+07]
E1 = -706.5526463538367  E_coul = 198.91290570743476
cycle= 4 E= -507.639740646402  delta_E= -4.08e-11  |g|= 3.76e-07  |ddm|= 3.48e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.5526463538367  E_coul = 198.91290570743476
  HOMO = -0.236458477039188  LUMO = 86.0965815173652
  mo_energy =
[-1.20271295e+02 -1.22542657e+01 -6.65497724e+00 -6.65497724e+00
 -6.65497724e+00 -1.16354959e+00 -2.36458477e-01 -2.36458477e-01
 -2.36458477e-01  8.60965815e+01  6.76475126e+02  3.93457411e+03
  2.96231573e+04  1.54739533e+05  6.64891266e+05  2.71962711e+06
  1.10459653e+07  4.65100865e+07]
E1 = -706.5526463912427  E_coul = 198.91290574484134
Extra cycle  E= -507.639740646401  delta_E= 6.25e-13  |g|= 6.5e-09  |ddm|= 1.66e-08
    CPU time for scf_cycle      0.10 sec, wall time      0.11 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 56.37548863327237
E1 = -706.5526463912427  E_coul = 198.91290574484134
init E= -507.639740646401
    CPU time for initialize scf      0.12 sec, wall time      0.12 sec
  HOMO = -0.236458476846124  LUMO = 86.096581521532
  mo_energy =
[-1.20271295e+02 -1.22542657e+01 -6.65497724e+00 -6.65497724e+00
 -6.65497724e+00 -1.16354959e+00 -2.36458477e-01 -2.36458477e-01
 -2.36458477e-01  8.60965815e+01  6.76475126e+02  3.93457411e+03
  2.96231573e+04  1.54739533e+05  6.64891266e+05  2.71962711e+06
  1.10459653e+07  4.65100865e+07]
E1 = -706.5526463918101  E_coul = 198.9129057454086
cycle= 1 E= -507.639740646401  delta_E= -1.71e-13  |g|= 3.29e-10  |ddm|= 2.57e-10
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -706.5526463918101  E_coul = 198.9129057454086
  HOMO = -0.236458476843395  LUMO = 86.0965815215907
  mo_energy =
[-1.20271295e+02 -1.22542657e+01 -6.65497724e+00 -6.65497724e+00
 -6.65497724e+00 -1.16354959e+00 -2.36458477e-01 -2.36458477e-01
 -2.36458477e-01  8.60965815e+01  6.76475126e+02  3.93457411e+03
  2.96231573e+04  1.54739533e+05  6.64891266e+05  2.71962711e+06
  1.10459653e+07  4.65100865e+07]
E1 = -706.5526463918198  E_coul = 198.9129057454182
Extra cycle  E= -507.639740646402  delta_E= -1.71e-13  |g|= 2.31e-10  |ddm|= 4.58e-12
    CPU time for scf_cycle      0.19 sec, wall time      0.19 sec
exp = [1.87954849e+07 4.69887121e+06 1.17471780e+06 2.93679448e+05
 7.34198757e+04 1.83520009e+04 2.23704562e+03 4.55793188e+02
 1.21377942e+02 3.75233671e+01 4.74104438e+00 3.91196670e-01
 8.59864131e+00 4.90850586e-01]
grad_E = [-1.14792586e-13  1.77863050e-11  6.77102805e-12  1.04063883e-08
 -3.47916747e-08  6.33603059e-06 -4.82228117e-06 -1.98882549e-05
 -1.10250297e-05 -2.74898486e-06  2.27118822e-07 -5.82483381e-07
 -1.27568185e-07 -1.06000641e-06]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="BFGS",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((14, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.6988712134173084e+06,1.1747178033543271e+06,2.9367945083858178e+05,7.3419865393677101e+04,1.8353927627435987e+04,2.2341424145819028e+03,4.5688904996449571e+02,1.2173317272260677e+02,3.7593061247508530e+01,4.7412722556720146e+00,3.9120358491841306e-01,8.5986297237246045e+00,4.9084868336327880e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "12s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:16:55 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  18795484.8537        1
[INPUT] 0    0    [1    /1   ]  4698871.21341        1
[INPUT] 0    0    [1    /1   ]  1174717.80335        1
[INPUT] 0    0    [1    /1   ]  293679.447689        1
[INPUT] 0    0    [1    /1   ]  73419.8756235        1
[INPUT] 0    0    [1    /1   ]  18352.0076542        1
[INPUT] 0    0    [1    /1   ]  2237.03536595        1
[INPUT] 0    0    [1    /1   ]  455.796847186        1
[INPUT] 0    0    [1    /1   ]  121.380503648        1
[INPUT] 0    0    [1    /1   ]  37.5240375704        1
[INPUT] 0    0    [1    /1   ]  4.7410454167         1
[INPUT] 0    0    [1    /1   ]  0.391196757419       1
[INPUT] 1    0    [1    /1   ]  8.59864108168        1
[INPUT] 1    0    [1    /1   ]  0.490850567262       1

nuclear repulsion = 0
number of shells = 14
number of NR pGTOs = 18
number of NR cGTOs = 18
basis = {'Ar': [[0, [18795484.853669267, 1.0]], [0, [4698871.213411922, 1.0]], [0, [1174717.803351752, 1.0]], [0, [293679.4476887521, 1.0]], [0, [73419.87562353488, 1.0]], [0, [18352.00765423265, 1.0]], [0, [2237.035365947947, 1.0]], [0, [455.7968471863359, 1.0]], [0, [121.38050364792643, 1.0]], [0, [37.52403757038551, 1.0]], [0, [4.741045416696336, 1.0]], [0, [0.3911967574194637, 1.0]], [1, [8.598641081682548, 1.0]], [1, [0.4908505672618431, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [18795484.85366927]
bas 1, expnt(s) = [4698871.21341192]
bas 2, expnt(s) = [1174717.80335175]
bas 3, expnt(s) = [293679.44768875]
bas 4, expnt(s) = [73419.87562353]
bas 5, expnt(s) = [18352.00765423]
bas 6, expnt(s) = [2237.03536595]
bas 7, expnt(s) = [455.79684719]
bas 8, expnt(s) = [121.38050365]
bas 9, expnt(s) = [37.52403757]
bas 10, expnt(s) = [4.74104542]
bas 11, expnt(s) = [0.39119676]
bas 12, expnt(s) = [8.59864108]
bas 13, expnt(s) = [0.49085057]
CPU time:       196.24
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  0  1  1  0 42 43  0]
 [ 0  0  1  1  0 44 45  0]
 [ 0  0  1  1  0 46 47  0]
 [ 0  1  1  1  0 48 49  0]
 [ 0  1  1  1  0 50 51  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.87954849e+07 7.21199097e+05 4.69887121e+06 2.54982386e+05
 1.17471780e+06 9.01498871e+04 2.93679448e+05 3.18727980e+04
 7.34198756e+04 1.12687374e+04 1.83520077e+04 3.98361822e+03
 2.23703537e+03 8.21806670e+02 4.55796847e+02 2.49226094e+02
 1.21380504e+02 9.23903741e+01 3.75240376e+01 3.83042705e+01
 4.74104542e+00 8.11746848e+00 3.91196757e-01 1.24971637e+00
 8.59864108e+00 4.29557859e+01 4.90850567e-01 1.19859100e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.3199815613796
cond(S) = 56.37570192540594
E1 = -688.8358231380296  E_coul = 184.9151602164551
init E= -503.920662921574
    CPU time for initialize scf      0.03 sec, wall time      0.03 sec
  HOMO = -0.680896326587279  LUMO = 84.7699765131504
  mo_energy =
[-1.21650552e+02 -1.32811418e+01 -7.62162944e+00 -7.62162944e+00
 -7.62162944e+00 -1.65069360e+00 -6.80896327e-01 -6.80896327e-01
 -6.80896327e-01  8.47699765e+01  6.75127624e+02  3.93335027e+03
  2.96220841e+04  1.54738542e+05  6.64890309e+05  2.71962616e+06
  1.10459643e+07  4.65100856e+07]
E1 = -706.5846884594326  E_coul = 198.94537803751618
cycle= 1 E= -507.639310421916  delta_E= -3.72  |g|= 0.318  |ddm|= 0.301
    CPU time for cycle= 1      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.420565
diis-c [-0.17687529  1.        ]
  HOMO = -0.236279965054484  LUMO = 86.1026466935439
  mo_energy =
[-1.20262504e+02 -1.22530547e+01 -6.65309846e+00 -6.65309846e+00
 -6.65309846e+00 -1.16348383e+00 -2.36279965e-01 -2.36279965e-01
 -2.36279965e-01  8.61026467e+01  6.76498285e+02  3.93460172e+03
  2.96231726e+04  1.54739559e+05  6.64891296e+05  2.71962714e+06
  1.10459653e+07  4.65100865e+07]
E1 = -706.5531023072738  E_coul = 198.91336176238661
cycle= 2 E= -507.639740544887  delta_E= -0.00043  |g|= 0.00476  |ddm|= 0.0143
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00505281
diis-c [-2.54879135e-05 -4.93139850e-04  1.00049314e+00]
  HOMO = -0.236456210438279  LUMO = 86.0991183957322
  mo_energy =
[-1.20271180e+02 -1.22542502e+01 -6.65494978e+00 -6.65494978e+00
 -6.65494978e+00 -1.16354897e+00 -2.36456210e-01 -2.36456210e-01
 -2.36456210e-01  8.60991184e+01  6.76487667e+02  3.93458577e+03
  2.96231533e+04  1.54739539e+05  6.64891276e+05  2.71962712e+06
  1.10459653e+07  4.65100865e+07]
E1 = -706.5526590019648  E_coul = 198.91291834605158
cycle= 3 E= -507.639740655913  delta_E= -1.11e-07  |g|= 9.52e-05  |ddm|= 0.000203
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.000127333
diis-c [-3.99134475e-10  3.34334742e-05 -2.55185984e-02  1.02548516e+00]
  HOMO = -0.236458442151805  LUMO = 86.0990734310168
  mo_energy =
[-1.20271294e+02 -1.22542661e+01 -6.65497697e+00 -6.65497697e+00
 -6.65497697e+00 -1.16354963e+00 -2.36458442e-01 -2.36458442e-01
 -2.36458442e-01  8.60990734e+01  6.76487549e+02  3.93458563e+03
  2.96231531e+04  1.54739539e+05  6.64891276e+05  2.71962712e+06
  1.10459653e+07  4.65100865e+07]
E1 = -706.5526516916117  E_coul = 198.9129110356581
cycle= 4 E= -507.639740655954  delta_E= -4.04e-11  |g|= 3.76e-07  |ddm|= 3.48e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.5526516916117  E_coul = 198.9129110356581
  HOMO = -0.236458425676289  LUMO = 86.0990737711723
  mo_energy =
[-1.20271294e+02 -1.22542660e+01 -6.65497680e+00 -6.65497680e+00
 -6.65497680e+00 -1.16354963e+00 -2.36458426e-01 -2.36458426e-01
 -2.36458426e-01  8.60990738e+01  6.76487550e+02  3.93458563e+03
  2.96231531e+04  1.54739539e+05  6.64891276e+05  2.71962712e+06
  1.10459653e+07  4.65100865e+07]
E1 = -706.5526517290153  E_coul = 198.9129110730613
Extra cycle  E= -507.639740655954  delta_E= -4.55e-13  |g|= 6.52e-09  |ddm|= 1.66e-08
    CPU time for scf_cycle      0.10 sec, wall time      0.11 sec
exp = [1.87954849e+07 4.69887121e+06 1.17471780e+06 2.93679448e+05
 7.34198756e+04 1.83520077e+04 2.23703537e+03 4.55796847e+02
 1.21380504e+02 3.75240376e+01 4.74104542e+00 3.91196757e-01
 8.59864108e+00 4.90850567e-01]
E = -507.63974065595403
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="BFGS",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((14, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.6988712134173084e+06,1.1747178033543271e+06,2.9367945083858178e+05,7.3419865393677101e+04,1.8353927627435987e+04,2.2341424145819028e+03,4.5688904996449571e+02,1.2173317272260677e+02,3.7593061247508530e+01,4.7412722556720146e+00,3.9120358491841306e-01,8.5986297237246045e+00,4.9084868336327880e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "12s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:16:56 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  18795484.8537        1
[INPUT] 0    0    [1    /1   ]  4698871.21341        1
[INPUT] 0    0    [1    /1   ]  1174717.80335        1
[INPUT] 0    0    [1    /1   ]  293679.447689        1
[INPUT] 0    0    [1    /1   ]  73419.8756235        1
[INPUT] 0    0    [1    /1   ]  18352.0076542        1
[INPUT] 0    0    [1    /1   ]  2237.03536595        1
[INPUT] 0    0    [1    /1   ]  455.796847186        1
[INPUT] 0    0    [1    /1   ]  121.380503648        1
[INPUT] 0    0    [1    /1   ]  37.5240375704        1
[INPUT] 0    0    [1    /1   ]  4.7410454167         1
[INPUT] 0    0    [1    /1   ]  0.391196757419       1
[INPUT] 1    0    [1    /1   ]  8.59864108168        1
[INPUT] 1    0    [1    /1   ]  0.490850567262       1

nuclear repulsion = 0
number of shells = 14
number of NR pGTOs = 18
number of NR cGTOs = 18
basis = {'Ar': [[0, [18795484.853669267, 1.0]], [0, [4698871.213411922, 1.0]], [0, [1174717.803351752, 1.0]], [0, [293679.4476887521, 1.0]], [0, [73419.87562353488, 1.0]], [0, [18352.00765423265, 1.0]], [0, [2237.035365947947, 1.0]], [0, [455.7968471863359, 1.0]], [0, [121.38050364792643, 1.0]], [0, [37.52403757038551, 1.0]], [0, [4.741045416696336, 1.0]], [0, [0.3911967574194637, 1.0]], [1, [8.598641081682548, 1.0]], [1, [0.4908505672618431, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [18795484.85366927]
bas 1, expnt(s) = [4698871.21341192]
bas 2, expnt(s) = [1174717.80335175]
bas 3, expnt(s) = [293679.44768875]
bas 4, expnt(s) = [73419.87562353]
bas 5, expnt(s) = [18352.00765423]
bas 6, expnt(s) = [2237.03536595]
bas 7, expnt(s) = [455.79684719]
bas 8, expnt(s) = [121.38050365]
bas 9, expnt(s) = [37.52403757]
bas 10, expnt(s) = [4.74104542]
bas 11, expnt(s) = [0.39119676]
bas 12, expnt(s) = [8.59864108]
bas 13, expnt(s) = [0.49085057]
CPU time:       197.00
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  0  1  1  0 42 43  0]
 [ 0  0  1  1  0 44 45  0]
 [ 0  0  1  1  0 46 47  0]
 [ 0  1  1  1  0 48 49  0]
 [ 0  1  1  1  0 50 51  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.87954849e+07 7.21199097e+05 4.69887121e+06 2.54982386e+05
 1.17471780e+06 9.01498871e+04 2.93679448e+05 3.18727980e+04
 7.34198756e+04 1.12687374e+04 1.83520077e+04 3.98361822e+03
 2.23703537e+03 8.21806670e+02 4.55796847e+02 2.49226094e+02
 1.21380504e+02 9.23903741e+01 3.75240376e+01 3.83042705e+01
 4.74104542e+00 8.11746848e+00 3.91196757e-01 1.24971637e+00
 8.59864108e+00 4.29557859e+01 4.90850567e-01 1.19859100e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.3199815613796
cond(S) = 56.37570192540594
E1 = -688.8358231380296  E_coul = 184.9151602164551
init E= -503.920662921574
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.680896326587279  LUMO = 84.7699765131504
  mo_energy =
[-1.21650552e+02 -1.32811418e+01 -7.62162944e+00 -7.62162944e+00
 -7.62162944e+00 -1.65069360e+00 -6.80896327e-01 -6.80896327e-01
 -6.80896327e-01  8.47699765e+01  6.75127624e+02  3.93335027e+03
  2.96220841e+04  1.54738542e+05  6.64890309e+05  2.71962616e+06
  1.10459643e+07  4.65100856e+07]
E1 = -706.5846884594326  E_coul = 198.94537803751618
cycle= 1 E= -507.639310421916  delta_E= -3.72  |g|= 0.318  |ddm|= 0.301
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.420565
diis-c [-0.17687529  1.        ]
  HOMO = -0.236279965054484  LUMO = 86.1026466935439
  mo_energy =
[-1.20262504e+02 -1.22530547e+01 -6.65309846e+00 -6.65309846e+00
 -6.65309846e+00 -1.16348383e+00 -2.36279965e-01 -2.36279965e-01
 -2.36279965e-01  8.61026467e+01  6.76498285e+02  3.93460172e+03
  2.96231726e+04  1.54739559e+05  6.64891296e+05  2.71962714e+06
  1.10459653e+07  4.65100865e+07]
E1 = -706.5531023072738  E_coul = 198.91336176238661
cycle= 2 E= -507.639740544887  delta_E= -0.00043  |g|= 0.00476  |ddm|= 0.0143
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00505281
diis-c [-2.54879135e-05 -4.93139850e-04  1.00049314e+00]
  HOMO = -0.236456210438279  LUMO = 86.0991183957322
  mo_energy =
[-1.20271180e+02 -1.22542502e+01 -6.65494978e+00 -6.65494978e+00
 -6.65494978e+00 -1.16354897e+00 -2.36456210e-01 -2.36456210e-01
 -2.36456210e-01  8.60991184e+01  6.76487667e+02  3.93458577e+03
  2.96231533e+04  1.54739539e+05  6.64891276e+05  2.71962712e+06
  1.10459653e+07  4.65100865e+07]
E1 = -706.5526590019648  E_coul = 198.91291834605158
cycle= 3 E= -507.639740655913  delta_E= -1.11e-07  |g|= 9.52e-05  |ddm|= 0.000203
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.000127333
diis-c [-3.99134475e-10  3.34334742e-05 -2.55185984e-02  1.02548516e+00]
  HOMO = -0.236458442151805  LUMO = 86.0990734310168
  mo_energy =
[-1.20271294e+02 -1.22542661e+01 -6.65497697e+00 -6.65497697e+00
 -6.65497697e+00 -1.16354963e+00 -2.36458442e-01 -2.36458442e-01
 -2.36458442e-01  8.60990734e+01  6.76487549e+02  3.93458563e+03
  2.96231531e+04  1.54739539e+05  6.64891276e+05  2.71962712e+06
  1.10459653e+07  4.65100865e+07]
E1 = -706.5526516916117  E_coul = 198.9129110356581
cycle= 4 E= -507.639740655954  delta_E= -4.04e-11  |g|= 3.76e-07  |ddm|= 3.48e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.5526516916117  E_coul = 198.9129110356581
  HOMO = -0.236458425676289  LUMO = 86.0990737711723
  mo_energy =
[-1.20271294e+02 -1.22542660e+01 -6.65497680e+00 -6.65497680e+00
 -6.65497680e+00 -1.16354963e+00 -2.36458426e-01 -2.36458426e-01
 -2.36458426e-01  8.60990738e+01  6.76487550e+02  3.93458563e+03
  2.96231531e+04  1.54739539e+05  6.64891276e+05  2.71962712e+06
  1.10459653e+07  4.65100865e+07]
E1 = -706.5526517290153  E_coul = 198.9129110730613
Extra cycle  E= -507.639740655954  delta_E= -4.55e-13  |g|= 6.52e-09  |ddm|= 1.66e-08
    CPU time for scf_cycle      0.10 sec, wall time      0.11 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 56.37570192540594
E1 = -706.5526517290153  E_coul = 198.9129110730613
init E= -507.639740655954
    CPU time for initialize scf      0.12 sec, wall time      0.12 sec
  HOMO = -0.236458425483249  LUMO = 86.0990737753415
  mo_energy =
[-1.20271294e+02 -1.22542660e+01 -6.65497680e+00 -6.65497680e+00
 -6.65497680e+00 -1.16354963e+00 -2.36458425e-01 -2.36458425e-01
 -2.36458425e-01  8.60990738e+01  6.76487550e+02  3.93458563e+03
  2.96231531e+04  1.54739539e+05  6.64891276e+05  2.71962712e+06
  1.10459653e+07  4.65100865e+07]
E1 = -706.5526517295821  E_coul = 198.91291107362824
cycle= 1 E= -507.639740655954  delta_E= 2.27e-13  |g|= 2.08e-10  |ddm|= 2.57e-10
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -706.5526517295821  E_coul = 198.91291107362824
  HOMO = -0.236458425480517  LUMO = 86.0990737753998
  mo_energy =
[-1.20271294e+02 -1.22542660e+01 -6.65497680e+00 -6.65497680e+00
 -6.65497680e+00 -1.16354963e+00 -2.36458425e-01 -2.36458425e-01
 -2.36458425e-01  8.60990738e+01  6.76487550e+02  3.93458563e+03
  2.96231531e+04  1.54739539e+05  6.64891276e+05  2.71962712e+06
  1.10459653e+07  4.65100865e+07]
E1 = -706.5526517295916  E_coul = 198.91291107363773
Extra cycle  E= -507.639740655954  delta_E= -1.14e-13  |g|= 3.39e-10  |ddm|= 4.57e-12
    CPU time for scf_cycle      0.19 sec, wall time      0.19 sec
exp = [1.87954849e+07 4.69887121e+06 1.17471780e+06 2.93679448e+05
 7.34198756e+04 1.83520077e+04 2.23703537e+03 4.55796847e+02
 1.21380504e+02 3.75240376e+01 4.74104542e+00 3.91196757e-01
 8.59864108e+00 4.90850567e-01]
grad_E = [-1.14784311e-13  1.77868379e-11  6.77541214e-12  1.04066916e-08
 -3.47902657e-08  6.33622489e-06 -4.82864648e-06 -1.99984731e-05
 -1.02986502e-05 -2.53622428e-06  3.12960140e-07 -5.65802495e-07
 -1.00030348e-07 -9.58564442e-07]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="BFGS",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((14, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.6988712134173084e+06,1.1747178033543271e+06,2.9367945083858178e+05,7.3419865393677101e+04,1.8353927627435987e+04,2.2341424145819028e+03,4.5688904996449571e+02,1.2173317272260677e+02,3.7593061247508530e+01,4.7412722556720146e+00,3.9120358491841306e-01,8.5986297237246045e+00,4.9084868336327880e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "12s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:16:59 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  18795484.8537        1
[INPUT] 0    0    [1    /1   ]  4698871.21341        1
[INPUT] 0    0    [1    /1   ]  1174717.80335        1
[INPUT] 0    0    [1    /1   ]  293679.447704        1
[INPUT] 0    0    [1    /1   ]  73419.8755734        1
[INPUT] 0    0    [1    /1   ]  18352.0170636        1
[INPUT] 0    0    [1    /1   ]  2237.02111521        1
[INPUT] 0    0    [1    /1   ]  455.802204506        1
[INPUT] 0    0    [1    /1   ]  121.384206885        1
[INPUT] 0    0    [1    /1   ]  37.5250051963        1
[INPUT] 0    0    [1    /1   ]  4.74104692816        1
[INPUT] 0    0    [1    /1   ]  0.391196882986       1
[INPUT] 1    0    [1    /1   ]  8.59864074739        1
[INPUT] 1    0    [1    /1   ]  0.490850540359       1

nuclear repulsion = 0
number of shells = 14
number of NR pGTOs = 18
number of NR cGTOs = 18
basis = {'Ar': [[0, [18795484.853669267, 1.0]], [0, [4698871.213411948, 1.0]], [0, [1174717.8033517646, 1.0]], [0, [293679.4477041886, 1.0]], [0, [73419.87557341956, 1.0]], [0, [18352.0170636284, 1.0]], [0, [2237.021115205601, 1.0]], [0, [455.80220450649995, 1.0]], [0, [121.38420688454781, 1.0]], [0, [37.5250051962819, 1.0]], [0, [4.74104692815675, 1.0]], [0, [0.39119688298610594, 1.0]], [1, [8.598640747392942, 1.0]], [1, [0.4908505403586053, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [18795484.85366927]
bas 1, expnt(s) = [4698871.21341195]
bas 2, expnt(s) = [1174717.80335176]
bas 3, expnt(s) = [293679.44770419]
bas 4, expnt(s) = [73419.87557342]
bas 5, expnt(s) = [18352.01706363]
bas 6, expnt(s) = [2237.02111521]
bas 7, expnt(s) = [455.80220451]
bas 8, expnt(s) = [121.38420688]
bas 9, expnt(s) = [37.5250052]
bas 10, expnt(s) = [4.74104693]
bas 11, expnt(s) = [0.39119688]
bas 12, expnt(s) = [8.59864075]
bas 13, expnt(s) = [0.49085054]
CPU time:       200.52
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  0  1  1  0 42 43  0]
 [ 0  0  1  1  0 44 45  0]
 [ 0  0  1  1  0 46 47  0]
 [ 0  1  1  1  0 48 49  0]
 [ 0  1  1  1  0 50 51  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.87954849e+07 7.21199097e+05 4.69887121e+06 2.54982386e+05
 1.17471780e+06 9.01498871e+04 2.93679448e+05 3.18727980e+04
 7.34198756e+04 1.12687374e+04 1.83520171e+04 3.98361976e+03
 2.23702112e+03 8.21802744e+02 4.55802205e+02 2.49228291e+02
 1.21384207e+02 9.23924882e+01 3.75250052e+01 3.83050113e+01
 4.74104693e+00 8.11747042e+00 3.91196883e-01 1.24971667e+00
 8.59864075e+00 4.29557838e+01 4.90850540e-01 1.19859092e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319981500190647
cond(S) = 56.37600869698974
E1 = -688.8358130771605  E_coul = 184.91516343083876
init E= -503.920649646322
    CPU time for initialize scf      0.03 sec, wall time      0.03 sec
  HOMO = -0.680896318413184  LUMO = 84.7735712998099
  mo_energy =
[-1.21650551e+02 -1.32811425e+01 -7.62162904e+00 -7.62162904e+00
 -7.62162904e+00 -1.65069380e+00 -6.80896318e-01 -6.80896318e-01
 -6.80896318e-01  8.47735713e+01  6.75145632e+02  3.93336772e+03
  2.96220796e+04  1.54738550e+05  6.64890323e+05  2.71962618e+06
  1.10459643e+07  4.65100856e+07]
E1 = -706.5846941663234  E_coul = 198.94538369869926
cycle= 1 E= -507.639310467624  delta_E= -3.72  |g|= 0.318  |ddm|= 0.301
    CPU time for cycle= 1      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.420566
diis-c [-0.17687604  1.        ]
  HOMO = -0.236279904332884  LUMO = 86.1062460780695
  mo_energy =
[-1.20262503e+02 -1.22530552e+01 -6.65309796e+00 -6.65309796e+00
 -6.65309796e+00 -1.16348388e+00 -2.36279904e-01 -2.36279904e-01
 -2.36279904e-01  8.61062461e+01  6.76516295e+02  3.93461918e+03
  2.96231681e+04  1.54739567e+05  6.64891311e+05  2.71962715e+06
  1.10459653e+07  4.65100865e+07]
E1 = -706.5531099639019  E_coul = 198.91336940143165
cycle= 2 E= -507.63974056247  delta_E= -0.00043  |g|= 0.00476  |ddm|= 0.0143
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00505265
diis-c [-2.54862443e-05 -4.93311233e-04  1.00049331e+00]
  HOMO = -0.236456136716121  LUMO = 86.1027179136196
  mo_energy =
[-1.20271178e+02 -1.22542506e+01 -6.65494915e+00 -6.65494915e+00
 -6.65494915e+00 -1.16354902e+00 -2.36456137e-01 -2.36456137e-01
 -2.36456137e-01  8.61027179e+01  6.76505677e+02  3.93460323e+03
  2.96231488e+04  1.54739547e+05  6.64891290e+05  2.71962713e+06
  1.10459653e+07  4.65100865e+07]
E1 = -706.5526666973426  E_coul = 198.9129260238579
cycle= 3 E= -507.639740673485  delta_E= -1.11e-07  |g|= 9.52e-05  |ddm|= 0.000203
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.000127325
diis-c [-3.99086769e-10  3.34337073e-05 -2.55179060e-02  1.02548447e+00]
  HOMO = -0.236458368179826  LUMO = 86.1026729527795
  mo_energy =
[-1.20271292e+02 -1.22542665e+01 -6.65497634e+00 -6.65497634e+00
 -6.65497634e+00 -1.16354968e+00 -2.36458368e-01 -2.36458368e-01
 -2.36458368e-01  8.61026730e+01  6.76505559e+02  3.93460308e+03
  2.96231487e+04  1.54739547e+05  6.64891290e+05  2.71962713e+06
  1.10459653e+07  4.65100865e+07]
E1 = -706.5526593878974  E_coul = 198.9129187143721
cycle= 4 E= -507.639740673525  delta_E= -4.06e-11  |g|= 3.76e-07  |ddm|= 3.48e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.5526593878974  E_coul = 198.9129187143721
  HOMO = -0.236458351706523  LUMO = 86.1026732929055
  mo_energy =
[-1.20271291e+02 -1.22542664e+01 -6.65497617e+00 -6.65497617e+00
 -6.65497617e+00 -1.16354968e+00 -2.36458352e-01 -2.36458352e-01
 -2.36458352e-01  8.61026733e+01  6.76505560e+02  3.93460309e+03
  2.96231487e+04  1.54739547e+05  6.64891290e+05  2.71962713e+06
  1.10459653e+07  4.65100865e+07]
E1 = -706.5526594252956  E_coul = 198.9129187517704
Extra cycle  E= -507.639740673525  delta_E= 1.14e-13  |g|= 6.51e-09  |ddm|= 1.66e-08
    CPU time for scf_cycle      0.11 sec, wall time      0.11 sec
exp = [1.87954849e+07 4.69887121e+06 1.17471780e+06 2.93679448e+05
 7.34198756e+04 1.83520171e+04 2.23702112e+03 4.55802205e+02
 1.21384207e+02 3.75250052e+01 4.74104693e+00 3.91196883e-01
 8.59864075e+00 4.90850540e-01]
E = -507.6397406735252
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="BFGS",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((14, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.6988712134173084e+06,1.1747178033543271e+06,2.9367945083858178e+05,7.3419865393677101e+04,1.8353927627435987e+04,2.2341424145819028e+03,4.5688904996449571e+02,1.2173317272260677e+02,3.7593061247508530e+01,4.7412722556720146e+00,3.9120358491841306e-01,8.5986297237246045e+00,4.9084868336327880e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "12s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:17:00 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  18795484.8537        1
[INPUT] 0    0    [1    /1   ]  4698871.21341        1
[INPUT] 0    0    [1    /1   ]  1174717.80335        1
[INPUT] 0    0    [1    /1   ]  293679.447704        1
[INPUT] 0    0    [1    /1   ]  73419.8755734        1
[INPUT] 0    0    [1    /1   ]  18352.0170636        1
[INPUT] 0    0    [1    /1   ]  2237.02111521        1
[INPUT] 0    0    [1    /1   ]  455.802204506        1
[INPUT] 0    0    [1    /1   ]  121.384206885        1
[INPUT] 0    0    [1    /1   ]  37.5250051963        1
[INPUT] 0    0    [1    /1   ]  4.74104692816        1
[INPUT] 0    0    [1    /1   ]  0.391196882986       1
[INPUT] 1    0    [1    /1   ]  8.59864074739        1
[INPUT] 1    0    [1    /1   ]  0.490850540359       1

nuclear repulsion = 0
number of shells = 14
number of NR pGTOs = 18
number of NR cGTOs = 18
basis = {'Ar': [[0, [18795484.853669267, 1.0]], [0, [4698871.213411948, 1.0]], [0, [1174717.8033517646, 1.0]], [0, [293679.4477041886, 1.0]], [0, [73419.87557341956, 1.0]], [0, [18352.0170636284, 1.0]], [0, [2237.021115205601, 1.0]], [0, [455.80220450649995, 1.0]], [0, [121.38420688454781, 1.0]], [0, [37.5250051962819, 1.0]], [0, [4.74104692815675, 1.0]], [0, [0.39119688298610594, 1.0]], [1, [8.598640747392942, 1.0]], [1, [0.4908505403586053, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [18795484.85366927]
bas 1, expnt(s) = [4698871.21341195]
bas 2, expnt(s) = [1174717.80335176]
bas 3, expnt(s) = [293679.44770419]
bas 4, expnt(s) = [73419.87557342]
bas 5, expnt(s) = [18352.01706363]
bas 6, expnt(s) = [2237.02111521]
bas 7, expnt(s) = [455.80220451]
bas 8, expnt(s) = [121.38420688]
bas 9, expnt(s) = [37.5250052]
bas 10, expnt(s) = [4.74104693]
bas 11, expnt(s) = [0.39119688]
bas 12, expnt(s) = [8.59864075]
bas 13, expnt(s) = [0.49085054]
CPU time:       201.30
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  0  1  1  0 42 43  0]
 [ 0  0  1  1  0 44 45  0]
 [ 0  0  1  1  0 46 47  0]
 [ 0  1  1  1  0 48 49  0]
 [ 0  1  1  1  0 50 51  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.87954849e+07 7.21199097e+05 4.69887121e+06 2.54982386e+05
 1.17471780e+06 9.01498871e+04 2.93679448e+05 3.18727980e+04
 7.34198756e+04 1.12687374e+04 1.83520171e+04 3.98361976e+03
 2.23702112e+03 8.21802744e+02 4.55802205e+02 2.49228291e+02
 1.21384207e+02 9.23924882e+01 3.75250052e+01 3.83050113e+01
 4.74104693e+00 8.11747042e+00 3.91196883e-01 1.24971667e+00
 8.59864075e+00 4.29557838e+01 4.90850540e-01 1.19859092e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319981500190647
cond(S) = 56.37600869698974
E1 = -688.8358130771605  E_coul = 184.91516343083876
init E= -503.920649646322
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.680896318413184  LUMO = 84.7735712998099
  mo_energy =
[-1.21650551e+02 -1.32811425e+01 -7.62162904e+00 -7.62162904e+00
 -7.62162904e+00 -1.65069380e+00 -6.80896318e-01 -6.80896318e-01
 -6.80896318e-01  8.47735713e+01  6.75145632e+02  3.93336772e+03
  2.96220796e+04  1.54738550e+05  6.64890323e+05  2.71962618e+06
  1.10459643e+07  4.65100856e+07]
E1 = -706.5846941663234  E_coul = 198.94538369869926
cycle= 1 E= -507.639310467624  delta_E= -3.72  |g|= 0.318  |ddm|= 0.301
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.420566
diis-c [-0.17687604  1.        ]
  HOMO = -0.236279904332884  LUMO = 86.1062460780695
  mo_energy =
[-1.20262503e+02 -1.22530552e+01 -6.65309796e+00 -6.65309796e+00
 -6.65309796e+00 -1.16348388e+00 -2.36279904e-01 -2.36279904e-01
 -2.36279904e-01  8.61062461e+01  6.76516295e+02  3.93461918e+03
  2.96231681e+04  1.54739567e+05  6.64891311e+05  2.71962715e+06
  1.10459653e+07  4.65100865e+07]
E1 = -706.5531099639019  E_coul = 198.91336940143165
cycle= 2 E= -507.63974056247  delta_E= -0.00043  |g|= 0.00476  |ddm|= 0.0143
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00505265
diis-c [-2.54862443e-05 -4.93311233e-04  1.00049331e+00]
  HOMO = -0.236456136716121  LUMO = 86.1027179136196
  mo_energy =
[-1.20271178e+02 -1.22542506e+01 -6.65494915e+00 -6.65494915e+00
 -6.65494915e+00 -1.16354902e+00 -2.36456137e-01 -2.36456137e-01
 -2.36456137e-01  8.61027179e+01  6.76505677e+02  3.93460323e+03
  2.96231488e+04  1.54739547e+05  6.64891290e+05  2.71962713e+06
  1.10459653e+07  4.65100865e+07]
E1 = -706.5526666973426  E_coul = 198.9129260238579
cycle= 3 E= -507.639740673485  delta_E= -1.11e-07  |g|= 9.52e-05  |ddm|= 0.000203
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.000127325
diis-c [-3.99086769e-10  3.34337073e-05 -2.55179060e-02  1.02548447e+00]
  HOMO = -0.236458368179826  LUMO = 86.1026729527795
  mo_energy =
[-1.20271292e+02 -1.22542665e+01 -6.65497634e+00 -6.65497634e+00
 -6.65497634e+00 -1.16354968e+00 -2.36458368e-01 -2.36458368e-01
 -2.36458368e-01  8.61026730e+01  6.76505559e+02  3.93460308e+03
  2.96231487e+04  1.54739547e+05  6.64891290e+05  2.71962713e+06
  1.10459653e+07  4.65100865e+07]
E1 = -706.5526593878974  E_coul = 198.9129187143721
cycle= 4 E= -507.639740673525  delta_E= -4.06e-11  |g|= 3.76e-07  |ddm|= 3.48e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.5526593878974  E_coul = 198.9129187143721
  HOMO = -0.236458351706523  LUMO = 86.1026732929055
  mo_energy =
[-1.20271291e+02 -1.22542664e+01 -6.65497617e+00 -6.65497617e+00
 -6.65497617e+00 -1.16354968e+00 -2.36458352e-01 -2.36458352e-01
 -2.36458352e-01  8.61026733e+01  6.76505560e+02  3.93460309e+03
  2.96231487e+04  1.54739547e+05  6.64891290e+05  2.71962713e+06
  1.10459653e+07  4.65100865e+07]
E1 = -706.5526594252956  E_coul = 198.9129187517704
Extra cycle  E= -507.639740673525  delta_E= 1.14e-13  |g|= 6.51e-09  |ddm|= 1.66e-08
    CPU time for scf_cycle      0.10 sec, wall time      0.11 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 56.37600869698974
E1 = -706.5526594252956  E_coul = 198.9129187517704
init E= -507.639740673525
    CPU time for initialize scf      0.13 sec, wall time      0.13 sec
  HOMO = -0.236458351513507  LUMO = 86.1026732970718
  mo_energy =
[-1.20271291e+02 -1.22542664e+01 -6.65497617e+00 -6.65497617e+00
 -6.65497617e+00 -1.16354968e+00 -2.36458352e-01 -2.36458352e-01
 -2.36458352e-01  8.61026733e+01  6.76505560e+02  3.93460309e+03
  2.96231487e+04  1.54739547e+05  6.64891290e+05  2.71962713e+06
  1.10459653e+07  4.65100865e+07]
E1 = -706.552659425863  E_coul = 198.91291875233753
cycle= 1 E= -507.639740673525  delta_E= -2.84e-13  |g|= 2.13e-10  |ddm|= 2.57e-10
    CPU time for cycle= 1      0.02 sec, wall time      0.02 sec
E1 = -706.552659425863  E_coul = 198.91291875233753
  HOMO = -0.236458351510779  LUMO = 86.1026732971307
  mo_energy =
[-1.20271291e+02 -1.22542664e+01 -6.65497617e+00 -6.65497617e+00
 -6.65497617e+00 -1.16354968e+00 -2.36458352e-01 -2.36458352e-01
 -2.36458352e-01  8.61026733e+01  6.76505560e+02  3.93460309e+03
  2.96231487e+04  1.54739547e+05  6.64891290e+05  2.71962713e+06
  1.10459653e+07  4.65100865e+07]
E1 = -706.5526594258725  E_coul = 198.91291875234737
Extra cycle  E= -507.639740673525  delta_E= 2.84e-13  |g|= 1.2e-10  |ddm|= 4.59e-12
    CPU time for scf_cycle      0.20 sec, wall time      0.20 sec
exp = [1.87954849e+07 4.69887121e+06 1.17471780e+06 2.93679448e+05
 7.34198756e+04 1.83520171e+04 2.23702112e+03 4.55802205e+02
 1.21384207e+02 3.75250052e+01 4.74104693e+00 3.91196883e-01
 8.59864075e+00 4.90850540e-01]
grad_E = [-1.14772656e-13  1.77875885e-11  6.78158715e-12  1.04071189e-08
 -3.47882830e-08  6.33649899e-06 -4.83772749e-06 -2.01568287e-05
 -9.25377997e-06 -2.23001128e-06  4.36654537e-07 -5.42512282e-07
 -6.05917947e-08 -8.13937845e-07]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="BFGS",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((14, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.6988712134173084e+06,1.1747178033543271e+06,2.9367945083858178e+05,7.3419865393677101e+04,1.8353927627435987e+04,2.2341424145819028e+03,4.5688904996449571e+02,1.2173317272260677e+02,3.7593061247508530e+01,4.7412722556720146e+00,3.9120358491841306e-01,8.5986297237246045e+00,4.9084868336327880e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "12s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:17:04 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  18795484.8537        1
[INPUT] 0    0    [1    /1   ]  4698871.21341        1
[INPUT] 0    0    [1    /1   ]  1174717.80335        1
[INPUT] 0    0    [1    /1   ]  293679.447726        1
[INPUT] 0    0    [1    /1   ]  73419.8755031        1
[INPUT] 0    0    [1    /1   ]  18352.03028          1
[INPUT] 0    0    [1    /1   ]  2237.00098952        1
[INPUT] 0    0    [1    /1   ]  455.810270563        1
[INPUT] 0    0    [1    /1   ]  121.389699251        1
[INPUT] 0    0    [1    /1   ]  37.5264375048        1
[INPUT] 0    0    [1    /1   ]  4.74104918196        1
[INPUT] 0    0    [1    /1   ]  0.39119706866        1
[INPUT] 1    0    [1    /1   ]  8.5986402529         1
[INPUT] 1    0    [1    /1   ]  0.49085050048        1

nuclear repulsion = 0
number of shells = 14
number of NR pGTOs = 18
number of NR cGTOs = 18
basis = {'Ar': [[0, [18795484.853669267, 1.0]], [0, [4698871.213411985, 1.0]], [0, [1174717.8033517825, 1.0]], [0, [293679.4477258703, 1.0]], [0, [73419.87550305191, 1.0]], [0, [18352.030279982657, 1.0]], [0, [2237.000989522947, 1.0]], [0, [455.81027056271995, 1.0]], [0, [121.38969925147398, 1.0]], [0, [37.526437504839485, 1.0]], [0, [4.741049181957759, 1.0]], [0, [0.39119706865960147, 1.0]], [1, [8.598640252900022, 1.0]], [1, [0.49085050048014117, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [18795484.85366927]
bas 1, expnt(s) = [4698871.21341198]
bas 2, expnt(s) = [1174717.80335178]
bas 3, expnt(s) = [293679.44772587]
bas 4, expnt(s) = [73419.87550305]
bas 5, expnt(s) = [18352.03027998]
bas 6, expnt(s) = [2237.00098952]
bas 7, expnt(s) = [455.81027056]
bas 8, expnt(s) = [121.38969925]
bas 9, expnt(s) = [37.5264375]
bas 10, expnt(s) = [4.74104918]
bas 11, expnt(s) = [0.39119707]
bas 12, expnt(s) = [8.59864025]
bas 13, expnt(s) = [0.4908505]
CPU time:       204.86
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  0  1  1  0 42 43  0]
 [ 0  0  1  1  0 44 45  0]
 [ 0  0  1  1  0 46 47  0]
 [ 0  1  1  1  0 48 49  0]
 [ 0  1  1  1  0 50 51  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.87954849e+07 7.21199097e+05 4.69887121e+06 2.54982386e+05
 1.17471780e+06 9.01498871e+04 2.93679448e+05 3.18727980e+04
 7.34198755e+04 1.12687374e+04 1.83520303e+04 3.98362191e+03
 2.23700099e+03 8.21797198e+02 4.55810271e+02 2.49231599e+02
 1.21389699e+02 9.23956236e+01 3.75264375e+01 3.83061079e+01
 4.74104918e+00 8.11747332e+00 3.91197069e-01 1.24971712e+00
 8.59864025e+00 4.29557807e+01 4.90850500e-01 1.19859080e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.31998140940305
cond(S) = 56.37646094409376
E1 = -688.835798437012  E_coul = 184.9151681815687
init E= -503.920630255443
    CPU time for initialize scf      0.04 sec, wall time      0.04 sec
  HOMO = -0.680896306616204  LUMO = 84.7788975338446
  mo_energy =
[-1.21650549e+02 -1.32811436e+01 -7.62162846e+00 -7.62162846e+00
 -7.62162846e+00 -1.65069410e+00 -6.80896307e-01 -6.80896307e-01
 -6.80896307e-01  8.47788975e+01  6.75172432e+02  3.93339506e+03
  2.96220759e+04  1.54738564e+05  6.64890345e+05  2.71962620e+06
  1.10459644e+07  4.65100856e+07]
E1 = -706.5847026030426  E_coul = 198.94539206199366
cycle= 1 E= -507.639310541049  delta_E= -3.72  |g|= 0.318  |ddm|= 0.301
    CPU time for cycle= 1      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.420568
diis-c [-0.17687713  1.        ]
  HOMO = -0.236279814613912  LUMO = 86.1115791225217
  mo_energy =
[-1.20262500e+02 -1.22530559e+01 -6.65309722e+00 -6.65309722e+00
 -6.65309722e+00 -1.16348397e+00 -2.36279815e-01 -2.36279815e-01
 -2.36279815e-01  8.61115791e+01  6.76543097e+02  3.93464652e+03
  2.96231644e+04  1.54739581e+05  6.64891333e+05  2.71962718e+06
  1.10459653e+07  4.65100866e+07]
E1 = -706.5531212889193  E_coul = 198.913380694688
cycle= 2 E= -507.639740594231  delta_E= -0.00043  |g|= 0.00476  |ddm|= 0.0143
    CPU time for cycle= 2      0.02 sec, wall time      0.03 sec
diis-norm(errvec)=0.00505241
diis-c [-2.54837711e-05 -4.93565708e-04  1.00049357e+00]
  HOMO = -0.236456027737355  LUMO = 86.1080511555783
  mo_energy =
[-1.20271175e+02 -1.22542511e+01 -6.65494822e+00 -6.65494822e+00
 -6.65494822e+00 -1.16354910e+00 -2.36456028e-01 -2.36456028e-01
 -2.36456028e-01  8.61080512e+01  6.76532480e+02  3.93463057e+03
  2.96231451e+04  1.54739561e+05  6.64891313e+05  2.71962715e+06
  1.10459653e+07  4.65100865e+07]
E1 = -706.5526780797652  E_coul = 198.91293737453668
cycle= 3 E= -507.639740705229  delta_E= -1.11e-07  |g|= 9.52e-05  |ddm|= 0.000203
    CPU time for cycle= 3      0.03 sec, wall time      0.03 sec
diis-norm(errvec)=0.000127314
diis-c [-3.99016082e-10  3.34341957e-05 -2.55168849e-02  1.02548345e+00]
  HOMO = -0.236458258830858  LUMO = 86.1080062004719
  mo_energy =
[-1.20271289e+02 -1.22542670e+01 -6.65497540e+00 -6.65497540e+00
 -6.65497540e+00 -1.16354976e+00 -2.36458259e-01 -2.36458259e-01
 -2.36458259e-01  8.61080062e+01  6.76532362e+02  3.93463043e+03
  2.96231449e+04  1.54739561e+05  6.64891312e+05  2.71962715e+06
  1.10459653e+07  4.65100865e+07]
E1 = -706.5526707716666  E_coul = 198.91293006639748
cycle= 4 E= -507.639740705269  delta_E= -4.06e-11  |g|= 3.76e-07  |ddm|= 3.48e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.03 sec
E1 = -706.5526707716666  E_coul = 198.91293006639748
  HOMO = -0.236458242360833  LUMO = 86.1080065405568
  mo_energy =
[-1.20271288e+02 -1.22542669e+01 -6.65497524e+00 -6.65497524e+00
 -6.65497524e+00 -1.16354975e+00 -2.36458242e-01 -2.36458242e-01
 -2.36458242e-01  8.61080065e+01  6.76532363e+02  3.93463043e+03
  2.96231449e+04  1.54739561e+05  6.64891312e+05  2.71962715e+06
  1.10459653e+07  4.65100865e+07]
E1 = -706.552670809057  E_coul = 198.91293010378794
Extra cycle  E= -507.639740705269  delta_E= 1.14e-13  |g|= 6.5e-09  |ddm|= 1.66e-08
    CPU time for scf_cycle      0.15 sec, wall time      0.17 sec
exp = [1.87954849e+07 4.69887121e+06 1.17471780e+06 2.93679448e+05
 7.34198755e+04 1.83520303e+04 2.23700099e+03 4.55810271e+02
 1.21389699e+02 3.75264375e+01 4.74104918e+00 3.91197069e-01
 8.59864025e+00 4.90850500e-01]
E = -507.639740705269
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="BFGS",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((14, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.6988712134173084e+06,1.1747178033543271e+06,2.9367945083858178e+05,7.3419865393677101e+04,1.8353927627435987e+04,2.2341424145819028e+03,4.5688904996449571e+02,1.2173317272260677e+02,3.7593061247508530e+01,4.7412722556720146e+00,3.9120358491841306e-01,8.5986297237246045e+00,4.9084868336327880e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "12s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:17:05 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  18795484.8537        1
[INPUT] 0    0    [1    /1   ]  4698871.21341        1
[INPUT] 0    0    [1    /1   ]  1174717.80335        1
[INPUT] 0    0    [1    /1   ]  293679.447726        1
[INPUT] 0    0    [1    /1   ]  73419.8755031        1
[INPUT] 0    0    [1    /1   ]  18352.03028          1
[INPUT] 0    0    [1    /1   ]  2237.00098952        1
[INPUT] 0    0    [1    /1   ]  455.810270563        1
[INPUT] 0    0    [1    /1   ]  121.389699251        1
[INPUT] 0    0    [1    /1   ]  37.5264375048        1
[INPUT] 0    0    [1    /1   ]  4.74104918196        1
[INPUT] 0    0    [1    /1   ]  0.39119706866        1
[INPUT] 1    0    [1    /1   ]  8.5986402529         1
[INPUT] 1    0    [1    /1   ]  0.49085050048        1

nuclear repulsion = 0
number of shells = 14
number of NR pGTOs = 18
number of NR cGTOs = 18
basis = {'Ar': [[0, [18795484.853669267, 1.0]], [0, [4698871.213411985, 1.0]], [0, [1174717.8033517825, 1.0]], [0, [293679.4477258703, 1.0]], [0, [73419.87550305191, 1.0]], [0, [18352.030279982657, 1.0]], [0, [2237.000989522947, 1.0]], [0, [455.81027056271995, 1.0]], [0, [121.38969925147398, 1.0]], [0, [37.526437504839485, 1.0]], [0, [4.741049181957759, 1.0]], [0, [0.39119706865960147, 1.0]], [1, [8.598640252900022, 1.0]], [1, [0.49085050048014117, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [18795484.85366927]
bas 1, expnt(s) = [4698871.21341198]
bas 2, expnt(s) = [1174717.80335178]
bas 3, expnt(s) = [293679.44772587]
bas 4, expnt(s) = [73419.87550305]
bas 5, expnt(s) = [18352.03027998]
bas 6, expnt(s) = [2237.00098952]
bas 7, expnt(s) = [455.81027056]
bas 8, expnt(s) = [121.38969925]
bas 9, expnt(s) = [37.5264375]
bas 10, expnt(s) = [4.74104918]
bas 11, expnt(s) = [0.39119707]
bas 12, expnt(s) = [8.59864025]
bas 13, expnt(s) = [0.4908505]
CPU time:       205.77
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  0  1  1  0 42 43  0]
 [ 0  0  1  1  0 44 45  0]
 [ 0  0  1  1  0 46 47  0]
 [ 0  1  1  1  0 48 49  0]
 [ 0  1  1  1  0 50 51  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.87954849e+07 7.21199097e+05 4.69887121e+06 2.54982386e+05
 1.17471780e+06 9.01498871e+04 2.93679448e+05 3.18727980e+04
 7.34198755e+04 1.12687374e+04 1.83520303e+04 3.98362191e+03
 2.23700099e+03 8.21797198e+02 4.55810271e+02 2.49231599e+02
 1.21389699e+02 9.23956236e+01 3.75264375e+01 3.83061079e+01
 4.74104918e+00 8.11747332e+00 3.91197069e-01 1.24971712e+00
 8.59864025e+00 4.29557807e+01 4.90850500e-01 1.19859080e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.31998140940305
cond(S) = 56.37646094409376
E1 = -688.835798437012  E_coul = 184.9151681815687
init E= -503.920630255443
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.680896306616204  LUMO = 84.7788975338446
  mo_energy =
[-1.21650549e+02 -1.32811436e+01 -7.62162846e+00 -7.62162846e+00
 -7.62162846e+00 -1.65069410e+00 -6.80896307e-01 -6.80896307e-01
 -6.80896307e-01  8.47788975e+01  6.75172432e+02  3.93339506e+03
  2.96220759e+04  1.54738564e+05  6.64890345e+05  2.71962620e+06
  1.10459644e+07  4.65100856e+07]
E1 = -706.5847026030426  E_coul = 198.94539206199366
cycle= 1 E= -507.639310541049  delta_E= -3.72  |g|= 0.318  |ddm|= 0.301
    CPU time for cycle= 1      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.420568
diis-c [-0.17687713  1.        ]
  HOMO = -0.236279814613912  LUMO = 86.1115791225217
  mo_energy =
[-1.20262500e+02 -1.22530559e+01 -6.65309722e+00 -6.65309722e+00
 -6.65309722e+00 -1.16348397e+00 -2.36279815e-01 -2.36279815e-01
 -2.36279815e-01  8.61115791e+01  6.76543097e+02  3.93464652e+03
  2.96231644e+04  1.54739581e+05  6.64891333e+05  2.71962718e+06
  1.10459653e+07  4.65100866e+07]
E1 = -706.5531212889193  E_coul = 198.913380694688
cycle= 2 E= -507.639740594231  delta_E= -0.00043  |g|= 0.00476  |ddm|= 0.0143
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00505241
diis-c [-2.54837711e-05 -4.93565708e-04  1.00049357e+00]
  HOMO = -0.236456027737355  LUMO = 86.1080511555783
  mo_energy =
[-1.20271175e+02 -1.22542511e+01 -6.65494822e+00 -6.65494822e+00
 -6.65494822e+00 -1.16354910e+00 -2.36456028e-01 -2.36456028e-01
 -2.36456028e-01  8.61080512e+01  6.76532480e+02  3.93463057e+03
  2.96231451e+04  1.54739561e+05  6.64891313e+05  2.71962715e+06
  1.10459653e+07  4.65100865e+07]
E1 = -706.5526780797652  E_coul = 198.91293737453668
cycle= 3 E= -507.639740705229  delta_E= -1.11e-07  |g|= 9.52e-05  |ddm|= 0.000203
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.000127314
diis-c [-3.99016082e-10  3.34341957e-05 -2.55168849e-02  1.02548345e+00]
  HOMO = -0.236458258830858  LUMO = 86.1080062004719
  mo_energy =
[-1.20271289e+02 -1.22542670e+01 -6.65497540e+00 -6.65497540e+00
 -6.65497540e+00 -1.16354976e+00 -2.36458259e-01 -2.36458259e-01
 -2.36458259e-01  8.61080062e+01  6.76532362e+02  3.93463043e+03
  2.96231449e+04  1.54739561e+05  6.64891312e+05  2.71962715e+06
  1.10459653e+07  4.65100865e+07]
E1 = -706.5526707716666  E_coul = 198.91293006639748
cycle= 4 E= -507.639740705269  delta_E= -4.06e-11  |g|= 3.76e-07  |ddm|= 3.48e-06
    CPU time for cycle= 4      0.03 sec, wall time      0.05 sec
E1 = -706.5526707716666  E_coul = 198.91293006639748
  HOMO = -0.236458242360833  LUMO = 86.1080065405568
  mo_energy =
[-1.20271288e+02 -1.22542669e+01 -6.65497524e+00 -6.65497524e+00
 -6.65497524e+00 -1.16354975e+00 -2.36458242e-01 -2.36458242e-01
 -2.36458242e-01  8.61080065e+01  6.76532363e+02  3.93463043e+03
  2.96231449e+04  1.54739561e+05  6.64891312e+05  2.71962715e+06
  1.10459653e+07  4.65100865e+07]
E1 = -706.552670809057  E_coul = 198.91293010378794
Extra cycle  E= -507.639740705269  delta_E= 1.14e-13  |g|= 6.5e-09  |ddm|= 1.66e-08
    CPU time for scf_cycle      0.13 sec, wall time      0.15 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 56.37646094409376
E1 = -706.552670809057  E_coul = 198.91293010378794
init E= -507.639740705269
    CPU time for initialize scf      0.15 sec, wall time      0.23 sec
  HOMO = -0.236458242167866  LUMO = 86.108006544722
  mo_energy =
[-1.20271288e+02 -1.22542669e+01 -6.65497524e+00 -6.65497524e+00
 -6.65497524e+00 -1.16354975e+00 -2.36458242e-01 -2.36458242e-01
 -2.36458242e-01  8.61080065e+01  6.76532363e+02  3.93463043e+03
  2.96231449e+04  1.54739561e+05  6.64891312e+05  2.71962715e+06
  1.10459653e+07  4.65100865e+07]
E1 = -706.5526708096237  E_coul = 198.91293010435473
cycle= 1 E= -507.639740705269  delta_E=    0  |g|= 1.5e-10  |ddm|= 2.57e-10
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -706.5526708096237  E_coul = 198.91293010435473
  HOMO = -0.236458242165143  LUMO = 86.1080065447814
  mo_energy =
[-1.20271288e+02 -1.22542669e+01 -6.65497524e+00 -6.65497524e+00
 -6.65497524e+00 -1.16354975e+00 -2.36458242e-01 -2.36458242e-01
 -2.36458242e-01  8.61080065e+01  6.76532363e+02  3.93463043e+03
  2.96231449e+04  1.54739561e+05  6.64891312e+05  2.71962715e+06
  1.10459653e+07  4.65100865e+07]
E1 = -706.5526708096331  E_coul = 198.91293010436425
Extra cycle  E= -507.639740705269  delta_E= 1.14e-13  |g|= 1.04e-10  |ddm|= 4.56e-12
    CPU time for scf_cycle      0.23 sec, wall time      0.32 sec
exp = [1.87954849e+07 4.69887121e+06 1.17471780e+06 2.93679448e+05
 7.34198755e+04 1.83520303e+04 2.23700099e+03 4.55810271e+02
 1.21389699e+02 3.75264375e+01 4.74104918e+00 3.91197069e-01
 8.59864025e+00 4.90850500e-01]
grad_E = [-1.14755918e-13  1.77886666e-11  6.79045576e-12  1.04077326e-08
 -3.47854387e-08  6.33689340e-06 -4.85098098e-06 -2.03899681e-05
 -7.71323161e-06 -1.77823542e-06  6.19347485e-07 -5.08707657e-07
 -2.50964405e-09 -6.01469822e-07]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="BFGS",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((14, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.6988712134173084e+06,1.1747178033543271e+06,2.9367945083858178e+05,7.3419865393677101e+04,1.8353927627435987e+04,2.2341424145819028e+03,4.5688904996449571e+02,1.2173317272260677e+02,3.7593061247508530e+01,4.7412722556720146e+00,3.9120358491841306e-01,8.5986297237246045e+00,4.9084868336327880e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "12s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:17:09 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  18795484.8537        1
[INPUT] 0    0    [1    /1   ]  4698871.21341        1
[INPUT] 0    0    [1    /1   ]  1174717.80335        1
[INPUT] 0    0    [1    /1   ]  293679.447756        1
[INPUT] 0    0    [1    /1   ]  73419.8754056        1
[INPUT] 0    0    [1    /1   ]  18352.0485871        1
[INPUT] 0    0    [1    /1   ]  2236.97289671        1
[INPUT] 0    0    [1    /1   ]  455.822508683        1
[INPUT] 0    0    [1    /1   ]  121.39787965         1
[INPUT] 0    0    [1    /1   ]  37.5285655475        1
[INPUT] 0    0    [1    /1   ]  4.74105256106        1
[INPUT] 0    0    [1    /1   ]  0.391197344176       1
[INPUT] 1    0    [1    /1   ]  8.59863951888        1
[INPUT] 1    0    [1    /1   ]  0.490850441138       1

nuclear repulsion = 0
number of shells = 14
number of NR pGTOs = 18
number of NR cGTOs = 18
basis = {'Ar': [[0, [18795484.853669267, 1.0]], [0, [4698871.213412036, 1.0]], [0, [1174717.8033518072, 1.0]], [0, [293679.447755903, 1.0]], [0, [73419.8754056264, 1.0]], [0, [18352.04858713196, 1.0]], [0, [2236.972896707774, 1.0]], [0, [455.82250868319676, 1.0]], [0, [121.39787964965713, 1.0]], [0, [37.52856554752418, 1.0]], [0, [4.741052561055169, 1.0]], [0, [0.3911973441756098, 1.0]], [1, [8.59863951888366, 1.0]], [1, [0.490850441137542, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [18795484.85366927]
bas 1, expnt(s) = [4698871.21341204]
bas 2, expnt(s) = [1174717.80335181]
bas 3, expnt(s) = [293679.4477559]
bas 4, expnt(s) = [73419.87540563]
bas 5, expnt(s) = [18352.04858713]
bas 6, expnt(s) = [2236.97289671]
bas 7, expnt(s) = [455.82250868]
bas 8, expnt(s) = [121.39787965]
bas 9, expnt(s) = [37.52856555]
bas 10, expnt(s) = [4.74105256]
bas 11, expnt(s) = [0.39119734]
bas 12, expnt(s) = [8.59863952]
bas 13, expnt(s) = [0.49085044]
CPU time:       209.36
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  0  1  1  0 42 43  0]
 [ 0  0  1  1  0 44 45  0]
 [ 0  0  1  1  0 46 47  0]
 [ 0  1  1  1  0 48 49  0]
 [ 0  1  1  1  0 50 51  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.87954849e+07 7.21199097e+05 4.69887121e+06 2.54982386e+05
 1.17471780e+06 9.01498871e+04 2.93679448e+05 3.18727980e+04
 7.34198754e+04 1.12687374e+04 1.83520486e+04 3.98362489e+03
 2.23697290e+03 8.21789458e+02 4.55822509e+02 2.49236618e+02
 1.21397880e+02 9.24002934e+01 3.75285655e+01 3.83077371e+01
 4.74105256e+00 8.11747765e+00 3.91197344e-01 1.24971778e+00
 8.59863952e+00 4.29557761e+01 4.90850441e-01 1.19859062e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.31998127410032
cond(S) = 56.37712944770031
E1 = -688.8357771552116  E_coul = 184.915175227011
init E= -503.920601928201
    CPU time for initialize scf      0.03 sec, wall time      0.03 sec
  HOMO = -0.680896289637564  LUMO = 84.7868206016789
  mo_energy =
[-1.21650546e+02 -1.32811451e+01 -7.62162759e+00 -7.62162759e+00
 -7.62162759e+00 -1.65069454e+00 -6.80896290e-01 -6.80896290e-01
 -6.80896290e-01  8.47868206e+01  6.75212518e+02  3.93343847e+03
  2.96220756e+04  1.54738587e+05  6.64890380e+05  2.71962624e+06
  1.10459644e+07  4.65100856e+07]
E1 = -706.5847151172319  E_coul = 198.94540445827346
cycle= 1 E= -507.639310658958  delta_E= -3.72  |g|= 0.318  |ddm|= 0.301
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.42057
diis-c [-0.17687871  1.        ]
  HOMO = -0.236279681586605  LUMO = 86.1195123173381
  mo_energy =
[-1.20262496e+02 -1.22530570e+01 -6.65309613e+00 -6.65309613e+00
 -6.65309613e+00 -1.16348409e+00 -2.36279682e-01 -2.36279682e-01
 -2.36279682e-01  8.61195123e+01  6.76583185e+02  3.93468995e+03
  2.96231641e+04  1.54739605e+05  6.64891367e+05  2.71962721e+06
  1.10459654e+07  4.65100866e+07]
E1 = -706.5531380984902  E_coul = 198.91339744830856
cycle= 2 E= -507.639740650182  delta_E= -0.00043  |g|= 0.00476  |ddm|= 0.0143
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00505205
diis-c [-2.54800935e-05 -4.93943579e-04  1.00049394e+00]
  HOMO = -0.236455866065364  LUMO = 86.1159846440035
  mo_energy =
[-1.20271170e+02 -1.22542520e+01 -6.65494684e+00 -6.65494684e+00
 -6.65494684e+00 -1.16354921e+00 -2.36455866e-01 -2.36455866e-01
 -2.36455866e-01  8.61159846e+01  6.76572569e+02  3.93467400e+03
  2.96231448e+04  1.54739584e+05  6.64891347e+05  2.71962719e+06
  1.10459653e+07  4.65100866e+07]
E1 = -706.5526949747133  E_coul = 198.91295421356116
cycle= 3 E= -507.639740761152  delta_E= -1.11e-07  |g|= 9.52e-05  |ddm|= 0.000203
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.000127297
diis-c [-3.98913146e-10  3.34344839e-05 -2.55153572e-02  1.02548192e+00]
  HOMO = -0.236458096608469  LUMO = 86.1159396974223
  mo_energy =
[-1.20271284e+02 -1.22542679e+01 -6.65497402e+00 -6.65497402e+00
 -6.65497402e+00 -1.16354987e+00 -2.36458097e-01 -2.36458097e-01
 -2.36458097e-01  8.61159397e+01  6.76572451e+02  3.93467386e+03
  2.96231447e+04  1.54739584e+05  6.64891347e+05  2.71962719e+06
  1.10459653e+07  4.65100866e+07]
E1 = -706.5526876686159  E_coul = 198.91294690742328
cycle= 4 E= -507.639740761193  delta_E= -4.06e-11  |g|= 3.76e-07  |ddm|= 3.48e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.5526876686159  E_coul = 198.91294690742328
  HOMO = -0.236458080143274  LUMO = 86.1159400374477
  mo_energy =
[-1.20271283e+02 -1.22542678e+01 -6.65497386e+00 -6.65497386e+00
 -6.65497386e+00 -1.16354987e+00 -2.36458080e-01 -2.36458080e-01
 -2.36458080e-01  8.61159400e+01  6.76572452e+02  3.93467386e+03
  2.96231447e+04  1.54739584e+05  6.64891347e+05  2.71962719e+06
  1.10459653e+07  4.65100866e+07]
E1 = -706.5526877059955  E_coul = 198.91294694480246
Extra cycle  E= -507.639740761193  delta_E= -3.41e-13  |g|= 6.5e-09  |ddm|= 1.66e-08
    CPU time for scf_cycle      0.11 sec, wall time      0.11 sec
exp = [1.87954849e+07 4.69887121e+06 1.17471780e+06 2.93679448e+05
 7.34198754e+04 1.83520486e+04 2.23697290e+03 4.55822509e+02
 1.21397880e+02 3.75285655e+01 4.74105256e+00 3.91197344e-01
 8.59863952e+00 4.90850441e-01]
E = -507.639740761193
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="BFGS",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((14, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.6988712134173084e+06,1.1747178033543271e+06,2.9367945083858178e+05,7.3419865393677101e+04,1.8353927627435987e+04,2.2341424145819028e+03,4.5688904996449571e+02,1.2173317272260677e+02,3.7593061247508530e+01,4.7412722556720146e+00,3.9120358491841306e-01,8.5986297237246045e+00,4.9084868336327880e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "12s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:17:10 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  18795484.8537        1
[INPUT] 0    0    [1    /1   ]  4698871.21341        1
[INPUT] 0    0    [1    /1   ]  1174717.80335        1
[INPUT] 0    0    [1    /1   ]  293679.447756        1
[INPUT] 0    0    [1    /1   ]  73419.8754056        1
[INPUT] 0    0    [1    /1   ]  18352.0485871        1
[INPUT] 0    0    [1    /1   ]  2236.97289671        1
[INPUT] 0    0    [1    /1   ]  455.822508683        1
[INPUT] 0    0    [1    /1   ]  121.39787965         1
[INPUT] 0    0    [1    /1   ]  37.5285655475        1
[INPUT] 0    0    [1    /1   ]  4.74105256106        1
[INPUT] 0    0    [1    /1   ]  0.391197344176       1
[INPUT] 1    0    [1    /1   ]  8.59863951888        1
[INPUT] 1    0    [1    /1   ]  0.490850441138       1

nuclear repulsion = 0
number of shells = 14
number of NR pGTOs = 18
number of NR cGTOs = 18
basis = {'Ar': [[0, [18795484.853669267, 1.0]], [0, [4698871.213412036, 1.0]], [0, [1174717.8033518072, 1.0]], [0, [293679.447755903, 1.0]], [0, [73419.8754056264, 1.0]], [0, [18352.04858713196, 1.0]], [0, [2236.972896707774, 1.0]], [0, [455.82250868319676, 1.0]], [0, [121.39787964965713, 1.0]], [0, [37.52856554752418, 1.0]], [0, [4.741052561055169, 1.0]], [0, [0.3911973441756098, 1.0]], [1, [8.59863951888366, 1.0]], [1, [0.490850441137542, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [18795484.85366927]
bas 1, expnt(s) = [4698871.21341204]
bas 2, expnt(s) = [1174717.80335181]
bas 3, expnt(s) = [293679.4477559]
bas 4, expnt(s) = [73419.87540563]
bas 5, expnt(s) = [18352.04858713]
bas 6, expnt(s) = [2236.97289671]
bas 7, expnt(s) = [455.82250868]
bas 8, expnt(s) = [121.39787965]
bas 9, expnt(s) = [37.52856555]
bas 10, expnt(s) = [4.74105256]
bas 11, expnt(s) = [0.39119734]
bas 12, expnt(s) = [8.59863952]
bas 13, expnt(s) = [0.49085044]
CPU time:       210.15
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  0  1  1  0 42 43  0]
 [ 0  0  1  1  0 44 45  0]
 [ 0  0  1  1  0 46 47  0]
 [ 0  1  1  1  0 48 49  0]
 [ 0  1  1  1  0 50 51  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.87954849e+07 7.21199097e+05 4.69887121e+06 2.54982386e+05
 1.17471780e+06 9.01498871e+04 2.93679448e+05 3.18727980e+04
 7.34198754e+04 1.12687374e+04 1.83520486e+04 3.98362489e+03
 2.23697290e+03 8.21789458e+02 4.55822509e+02 2.49236618e+02
 1.21397880e+02 9.24002934e+01 3.75285655e+01 3.83077371e+01
 4.74105256e+00 8.11747765e+00 3.91197344e-01 1.24971778e+00
 8.59863952e+00 4.29557761e+01 4.90850441e-01 1.19859062e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.31998127410032
cond(S) = 56.37712944770031
E1 = -688.8357771552116  E_coul = 184.915175227011
init E= -503.920601928201
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.680896289637564  LUMO = 84.7868206016789
  mo_energy =
[-1.21650546e+02 -1.32811451e+01 -7.62162759e+00 -7.62162759e+00
 -7.62162759e+00 -1.65069454e+00 -6.80896290e-01 -6.80896290e-01
 -6.80896290e-01  8.47868206e+01  6.75212518e+02  3.93343847e+03
  2.96220756e+04  1.54738587e+05  6.64890380e+05  2.71962624e+06
  1.10459644e+07  4.65100856e+07]
E1 = -706.5847151172319  E_coul = 198.94540445827346
cycle= 1 E= -507.639310658958  delta_E= -3.72  |g|= 0.318  |ddm|= 0.301
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.42057
diis-c [-0.17687871  1.        ]
  HOMO = -0.236279681586605  LUMO = 86.1195123173381
  mo_energy =
[-1.20262496e+02 -1.22530570e+01 -6.65309613e+00 -6.65309613e+00
 -6.65309613e+00 -1.16348409e+00 -2.36279682e-01 -2.36279682e-01
 -2.36279682e-01  8.61195123e+01  6.76583185e+02  3.93468995e+03
  2.96231641e+04  1.54739605e+05  6.64891367e+05  2.71962721e+06
  1.10459654e+07  4.65100866e+07]
E1 = -706.5531380984902  E_coul = 198.91339744830856
cycle= 2 E= -507.639740650182  delta_E= -0.00043  |g|= 0.00476  |ddm|= 0.0143
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00505205
diis-c [-2.54800935e-05 -4.93943579e-04  1.00049394e+00]
  HOMO = -0.236455866065364  LUMO = 86.1159846440035
  mo_energy =
[-1.20271170e+02 -1.22542520e+01 -6.65494684e+00 -6.65494684e+00
 -6.65494684e+00 -1.16354921e+00 -2.36455866e-01 -2.36455866e-01
 -2.36455866e-01  8.61159846e+01  6.76572569e+02  3.93467400e+03
  2.96231448e+04  1.54739584e+05  6.64891347e+05  2.71962719e+06
  1.10459653e+07  4.65100866e+07]
E1 = -706.5526949747133  E_coul = 198.91295421356116
cycle= 3 E= -507.639740761152  delta_E= -1.11e-07  |g|= 9.52e-05  |ddm|= 0.000203
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.000127297
diis-c [-3.98913146e-10  3.34344839e-05 -2.55153572e-02  1.02548192e+00]
  HOMO = -0.236458096608469  LUMO = 86.1159396974223
  mo_energy =
[-1.20271284e+02 -1.22542679e+01 -6.65497402e+00 -6.65497402e+00
 -6.65497402e+00 -1.16354987e+00 -2.36458097e-01 -2.36458097e-01
 -2.36458097e-01  8.61159397e+01  6.76572451e+02  3.93467386e+03
  2.96231447e+04  1.54739584e+05  6.64891347e+05  2.71962719e+06
  1.10459653e+07  4.65100866e+07]
E1 = -706.5526876686159  E_coul = 198.91294690742328
cycle= 4 E= -507.639740761193  delta_E= -4.06e-11  |g|= 3.76e-07  |ddm|= 3.48e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.5526876686159  E_coul = 198.91294690742328
  HOMO = -0.236458080143274  LUMO = 86.1159400374477
  mo_energy =
[-1.20271283e+02 -1.22542678e+01 -6.65497386e+00 -6.65497386e+00
 -6.65497386e+00 -1.16354987e+00 -2.36458080e-01 -2.36458080e-01
 -2.36458080e-01  8.61159400e+01  6.76572452e+02  3.93467386e+03
  2.96231447e+04  1.54739584e+05  6.64891347e+05  2.71962719e+06
  1.10459653e+07  4.65100866e+07]
E1 = -706.5526877059955  E_coul = 198.91294694480246
Extra cycle  E= -507.639740761193  delta_E= -3.41e-13  |g|= 6.5e-09  |ddm|= 1.66e-08
    CPU time for scf_cycle      0.10 sec, wall time      0.10 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 56.37712944770031
E1 = -706.5526877059955  E_coul = 198.91294694480246
init E= -507.639740761193
    CPU time for initialize scf      0.12 sec, wall time      0.12 sec
  HOMO = -0.236458079950374  LUMO = 86.1159400416146
  mo_energy =
[-1.20271283e+02 -1.22542678e+01 -6.65497385e+00 -6.65497385e+00
 -6.65497385e+00 -1.16354987e+00 -2.36458080e-01 -2.36458080e-01
 -2.36458080e-01  8.61159400e+01  6.76572452e+02  3.93467386e+03
  2.96231447e+04  1.54739584e+05  6.64891347e+05  2.71962719e+06
  1.10459653e+07  4.65100866e+07]
E1 = -706.552687706562  E_coul = 198.91294694536893
cycle= 1 E= -507.639740761193  delta_E=    0  |g|= 1.62e-10  |ddm|= 2.57e-10
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -706.552687706562  E_coul = 198.91294694536893
  HOMO = -0.236458079947651  LUMO = 86.1159400416755
  mo_energy =
[-1.20271283e+02 -1.22542678e+01 -6.65497385e+00 -6.65497385e+00
 -6.65497385e+00 -1.16354987e+00 -2.36458080e-01 -2.36458080e-01
 -2.36458080e-01  8.61159400e+01  6.76572452e+02  3.93467386e+03
  2.96231447e+04  1.54739584e+05  6.64891347e+05  2.71962719e+06
  1.10459653e+07  4.65100866e+07]
E1 = -706.5526877065709  E_coul = 198.91294694537845
Extra cycle  E= -507.639740761192  delta_E= 6.25e-13  |g|= 6.67e-11  |ddm|= 4.55e-12
    CPU time for scf_cycle      0.19 sec, wall time      0.19 sec
exp = [1.87954849e+07 4.69887121e+06 1.17471780e+06 2.93679448e+05
 7.34198754e+04 1.83520486e+04 2.23697290e+03 4.55822509e+02
 1.21397880e+02 3.75285655e+01 4.74105256e+00 3.91197344e-01
 8.59863952e+00 4.90850441e-01]
grad_E = [-1.14732010e-13  1.77902071e-11  6.80312456e-12  1.04086096e-08
 -3.47813820e-08  6.33745828e-06 -4.87031955e-06 -2.07339888e-05
 -5.43579472e-06 -1.10980165e-06  8.90025811e-07 -4.59563722e-07
  8.32929032e-08 -2.88456420e-07]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="BFGS",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((14, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.6988712134173084e+06,1.1747178033543271e+06,2.9367945083858178e+05,7.3419865393677101e+04,1.8353927627435987e+04,2.2341424145819028e+03,4.5688904996449571e+02,1.2173317272260677e+02,3.7593061247508530e+01,4.7412722556720146e+00,3.9120358491841306e-01,8.5986297237246045e+00,4.9084868336327880e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "12s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:17:13 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  18795484.8537        1
[INPUT] 0    0    [1    /1   ]  4698871.21341        1
[INPUT] 0    0    [1    /1   ]  1174717.80335        1
[INPUT] 0    0    [1    /1   ]  293679.447795        1
[INPUT] 0    0    [1    /1   ]  73419.8752778        1
[INPUT] 0    0    [1    /1   ]  18352.0726178        1
[INPUT] 0    0    [1    /1   ]  2236.935576          1
[INPUT] 0    0    [1    /1   ]  455.840777766        1
[INPUT] 0    0    [1    /1   ]  121.409802657        1
[INPUT] 0    0    [1    /1   ]  37.5316570104        1
[INPUT] 0    0    [1    /1   ]  4.74105752837        1
[INPUT] 0    0    [1    /1   ]  0.39119774377        1
[INPUT] 1    0    [1    /1   ]  8.59863845382        1
[INPUT] 1    0    [1    /1   ]  0.490850354749       1

nuclear repulsion = 0
number of shells = 14
number of NR pGTOs = 18
number of NR cGTOs = 18
basis = {'Ar': [[0, [18795484.853669267, 1.0]], [0, [4698871.213412103, 1.0]], [0, [1174717.8033518398, 1.0]], [0, [293679.447795324, 1.0]], [0, [73419.87527783905, 1.0]], [0, [18352.072617833954, 1.0]], [0, [2236.935576004199, 1.0]], [0, [455.84077776644097, 1.0]], [0, [121.4098026570732, 1.0]], [0, [37.53165701039436, 1.0]], [0, [4.741057528370785, 1.0]], [0, [0.3911977437703666, 1.0]], [1, [8.598638453815807, 1.0]], [1, [0.49085035474942906, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [18795484.85366927]
bas 1, expnt(s) = [4698871.2134121]
bas 2, expnt(s) = [1174717.80335184]
bas 3, expnt(s) = [293679.44779532]
bas 4, expnt(s) = [73419.87527784]
bas 5, expnt(s) = [18352.07261783]
bas 6, expnt(s) = [2236.935576]
bas 7, expnt(s) = [455.84077777]
bas 8, expnt(s) = [121.40980266]
bas 9, expnt(s) = [37.53165701]
bas 10, expnt(s) = [4.74105753]
bas 11, expnt(s) = [0.39119774]
bas 12, expnt(s) = [8.59863845]
bas 13, expnt(s) = [0.49085035]
CPU time:       213.66
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  0  1  1  0 42 43  0]
 [ 0  0  1  1  0 44 45  0]
 [ 0  0  1  1  0 46 47  0]
 [ 0  1  1  1  0 48 49  0]
 [ 0  1  1  1  0 50 51  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.87954849e+07 7.21199097e+05 4.69887121e+06 2.54982386e+05
 1.17471780e+06 9.01498871e+04 2.93679448e+05 3.18727980e+04
 7.34198753e+04 1.12687373e+04 1.83520726e+04 3.98362880e+03
 2.23693558e+03 8.21779175e+02 4.55840778e+02 2.49244110e+02
 1.21409803e+02 9.24070996e+01 3.75316570e+01 3.83101038e+01
 4.74105753e+00 8.11748403e+00 3.91197744e-01 1.24971873e+00
 8.59863845e+00 4.29557695e+01 4.90850355e-01 1.19859036e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319981076738564
cond(S) = 56.37809402668489
E1 = -688.8357471440216  E_coul = 184.91518543679555
init E= -503.920561707226
    CPU time for initialize scf      0.03 sec, wall time      0.03 sec
  HOMO = -0.680896266027286  LUMO = 84.798349421555
  mo_energy =
[-1.21650542e+02 -1.32811474e+01 -7.62162634e+00 -7.62162634e+00
 -7.62162634e+00 -1.65069519e+00 -6.80896266e-01 -6.80896266e-01
 -6.80896266e-01  8.47983494e+01  6.75271269e+02  3.93350696e+03
  2.96220854e+04  1.54738627e+05  6.64890433e+05  2.71962629e+06
  1.10459644e+07  4.65100857e+07]
E1 = -706.5847332542638  E_coul = 198.94542240926026
cycle= 1 E= -507.639310845004  delta_E= -3.72  |g|= 0.318  |ddm|= 0.301
    CPU time for cycle= 1      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.420572
diis-c [-0.17688094  1.        ]
  HOMO = -0.236279488856598  LUMO = 86.1310558650715
  mo_energy =
[-1.20262491e+02 -1.22530585e+01 -6.65309455e+00 -6.65309455e+00
 -6.65309455e+00 -1.16348427e+00 -2.36279489e-01 -2.36279489e-01
 -2.36279489e-01  8.61310559e+01  6.76641940e+02  3.93475845e+03
  2.96231740e+04  1.54739644e+05  6.64891420e+05  2.71962726e+06
  1.10459654e+07  4.65100866e+07]
E1 = -706.5531624833801  E_coul = 198.9134217372782
cycle= 2 E= -507.639740746102  delta_E= -0.00043  |g|= 0.00475  |ddm|= 0.0143
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00505153
diis-c [-2.54747439e-05 -4.94493298e-04  1.00049449e+00]
  HOMO = -0.236455631666334  LUMO = 86.1275286185952
  mo_energy =
[-1.20271163e+02 -1.22542532e+01 -6.65494484e+00 -6.65494484e+00
 -6.65494484e+00 -1.16354937e+00 -2.36455632e-01 -2.36455632e-01
 -2.36455632e-01  8.61275286e+01  6.76631325e+02  3.93474251e+03
  2.96231547e+04  1.54739624e+05  6.64891400e+05  2.71962724e+06
  1.10459654e+07  4.65100866e+07]
E1 = -706.5527194838015  E_coul = 198.91297862676677
cycle= 3 E= -507.639740857035  delta_E= -1.11e-07  |g|= 9.52e-05  |ddm|= 0.000203
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.000127273
diis-c [-3.98763658e-10  3.34349232e-05 -2.55131353e-02  1.02547970e+00]
  HOMO = -0.236457861408843  LUMO = 86.12748368442
  mo_energy =
[-1.20271277e+02 -1.22542691e+01 -6.65497201e+00 -6.65497201e+00
 -6.65497201e+00 -1.16355003e+00 -2.36457861e-01 -2.36457861e-01
 -2.36457861e-01  8.61274837e+01  6.76631208e+02  3.93474236e+03
  2.96231545e+04  1.54739624e+05  6.64891400e+05  2.71962724e+06
  1.10459654e+07  4.65100866e+07]
E1 = -706.5527121806149  E_coul = 198.91297132353972
cycle= 4 E= -507.639740857075  delta_E= -4.04e-11  |g|= 3.76e-07  |ddm|= 3.47e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.5527121806149  E_coul = 198.91297132353972
  HOMO = -0.236457844950672  LUMO = 86.1274840243552
  mo_energy =
[-1.20271277e+02 -1.22542690e+01 -6.65497184e+00 -6.65497184e+00
 -6.65497184e+00 -1.16355003e+00 -2.36457845e-01 -2.36457845e-01
 -2.36457845e-01  8.61274840e+01  6.76631209e+02  3.93474236e+03
  2.96231545e+04  1.54739624e+05  6.64891400e+05  2.71962724e+06
  1.10459654e+07  4.65100866e+07]
E1 = -706.5527122179777  E_coul = 198.9129713609026
Extra cycle  E= -507.639740857075  delta_E=    0  |g|= 6.5e-09  |ddm|= 1.66e-08
    CPU time for scf_cycle      0.11 sec, wall time      0.11 sec
exp = [1.87954849e+07 4.69887121e+06 1.17471780e+06 2.93679448e+05
 7.34198753e+04 1.83520726e+04 2.23693558e+03 4.55840778e+02
 1.21409803e+02 3.75316570e+01 4.74105753e+00 3.91197744e-01
 8.59863845e+00 4.90850355e-01]
E = -507.63974085707514
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="BFGS",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((14, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.6988712134173084e+06,1.1747178033543271e+06,2.9367945083858178e+05,7.3419865393677101e+04,1.8353927627435987e+04,2.2341424145819028e+03,4.5688904996449571e+02,1.2173317272260677e+02,3.7593061247508530e+01,4.7412722556720146e+00,3.9120358491841306e-01,8.5986297237246045e+00,4.9084868336327880e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "12s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:17:14 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  18795484.8537        1
[INPUT] 0    0    [1    /1   ]  4698871.21341        1
[INPUT] 0    0    [1    /1   ]  1174717.80335        1
[INPUT] 0    0    [1    /1   ]  293679.447795        1
[INPUT] 0    0    [1    /1   ]  73419.8752778        1
[INPUT] 0    0    [1    /1   ]  18352.0726178        1
[INPUT] 0    0    [1    /1   ]  2236.935576          1
[INPUT] 0    0    [1    /1   ]  455.840777766        1
[INPUT] 0    0    [1    /1   ]  121.409802657        1
[INPUT] 0    0    [1    /1   ]  37.5316570104        1
[INPUT] 0    0    [1    /1   ]  4.74105752837        1
[INPUT] 0    0    [1    /1   ]  0.39119774377        1
[INPUT] 1    0    [1    /1   ]  8.59863845382        1
[INPUT] 1    0    [1    /1   ]  0.490850354749       1

nuclear repulsion = 0
number of shells = 14
number of NR pGTOs = 18
number of NR cGTOs = 18
basis = {'Ar': [[0, [18795484.853669267, 1.0]], [0, [4698871.213412103, 1.0]], [0, [1174717.8033518398, 1.0]], [0, [293679.447795324, 1.0]], [0, [73419.87527783905, 1.0]], [0, [18352.072617833954, 1.0]], [0, [2236.935576004199, 1.0]], [0, [455.84077776644097, 1.0]], [0, [121.4098026570732, 1.0]], [0, [37.53165701039436, 1.0]], [0, [4.741057528370785, 1.0]], [0, [0.3911977437703666, 1.0]], [1, [8.598638453815807, 1.0]], [1, [0.49085035474942906, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [18795484.85366927]
bas 1, expnt(s) = [4698871.2134121]
bas 2, expnt(s) = [1174717.80335184]
bas 3, expnt(s) = [293679.44779532]
bas 4, expnt(s) = [73419.87527784]
bas 5, expnt(s) = [18352.07261783]
bas 6, expnt(s) = [2236.935576]
bas 7, expnt(s) = [455.84077777]
bas 8, expnt(s) = [121.40980266]
bas 9, expnt(s) = [37.53165701]
bas 10, expnt(s) = [4.74105753]
bas 11, expnt(s) = [0.39119774]
bas 12, expnt(s) = [8.59863845]
bas 13, expnt(s) = [0.49085035]
CPU time:       214.47
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  0  1  1  0 42 43  0]
 [ 0  0  1  1  0 44 45  0]
 [ 0  0  1  1  0 46 47  0]
 [ 0  1  1  1  0 48 49  0]
 [ 0  1  1  1  0 50 51  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.87954849e+07 7.21199097e+05 4.69887121e+06 2.54982386e+05
 1.17471780e+06 9.01498871e+04 2.93679448e+05 3.18727980e+04
 7.34198753e+04 1.12687373e+04 1.83520726e+04 3.98362880e+03
 2.23693558e+03 8.21779175e+02 4.55840778e+02 2.49244110e+02
 1.21409803e+02 9.24070996e+01 3.75316570e+01 3.83101038e+01
 4.74105753e+00 8.11748403e+00 3.91197744e-01 1.24971873e+00
 8.59863845e+00 4.29557695e+01 4.90850355e-01 1.19859036e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319981076738564
cond(S) = 56.37809402668489
E1 = -688.8357471440216  E_coul = 184.91518543679555
init E= -503.920561707226
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.680896266027286  LUMO = 84.798349421555
  mo_energy =
[-1.21650542e+02 -1.32811474e+01 -7.62162634e+00 -7.62162634e+00
 -7.62162634e+00 -1.65069519e+00 -6.80896266e-01 -6.80896266e-01
 -6.80896266e-01  8.47983494e+01  6.75271269e+02  3.93350696e+03
  2.96220854e+04  1.54738627e+05  6.64890433e+05  2.71962629e+06
  1.10459644e+07  4.65100857e+07]
E1 = -706.5847332542638  E_coul = 198.94542240926026
cycle= 1 E= -507.639310845004  delta_E= -3.72  |g|= 0.318  |ddm|= 0.301
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.420572
diis-c [-0.17688094  1.        ]
  HOMO = -0.236279488856598  LUMO = 86.1310558650715
  mo_energy =
[-1.20262491e+02 -1.22530585e+01 -6.65309455e+00 -6.65309455e+00
 -6.65309455e+00 -1.16348427e+00 -2.36279489e-01 -2.36279489e-01
 -2.36279489e-01  8.61310559e+01  6.76641940e+02  3.93475845e+03
  2.96231740e+04  1.54739644e+05  6.64891420e+05  2.71962726e+06
  1.10459654e+07  4.65100866e+07]
E1 = -706.5531624833801  E_coul = 198.9134217372782
cycle= 2 E= -507.639740746102  delta_E= -0.00043  |g|= 0.00475  |ddm|= 0.0143
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00505153
diis-c [-2.54747439e-05 -4.94493298e-04  1.00049449e+00]
  HOMO = -0.236455631666334  LUMO = 86.1275286185952
  mo_energy =
[-1.20271163e+02 -1.22542532e+01 -6.65494484e+00 -6.65494484e+00
 -6.65494484e+00 -1.16354937e+00 -2.36455632e-01 -2.36455632e-01
 -2.36455632e-01  8.61275286e+01  6.76631325e+02  3.93474251e+03
  2.96231547e+04  1.54739624e+05  6.64891400e+05  2.71962724e+06
  1.10459654e+07  4.65100866e+07]
E1 = -706.5527194838015  E_coul = 198.91297862676677
cycle= 3 E= -507.639740857035  delta_E= -1.11e-07  |g|= 9.52e-05  |ddm|= 0.000203
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.000127273
diis-c [-3.98763658e-10  3.34349232e-05 -2.55131353e-02  1.02547970e+00]
  HOMO = -0.236457861408843  LUMO = 86.12748368442
  mo_energy =
[-1.20271277e+02 -1.22542691e+01 -6.65497201e+00 -6.65497201e+00
 -6.65497201e+00 -1.16355003e+00 -2.36457861e-01 -2.36457861e-01
 -2.36457861e-01  8.61274837e+01  6.76631208e+02  3.93474236e+03
  2.96231545e+04  1.54739624e+05  6.64891400e+05  2.71962724e+06
  1.10459654e+07  4.65100866e+07]
E1 = -706.5527121806149  E_coul = 198.91297132353972
cycle= 4 E= -507.639740857075  delta_E= -4.04e-11  |g|= 3.76e-07  |ddm|= 3.47e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.5527121806149  E_coul = 198.91297132353972
  HOMO = -0.236457844950672  LUMO = 86.1274840243552
  mo_energy =
[-1.20271277e+02 -1.22542690e+01 -6.65497184e+00 -6.65497184e+00
 -6.65497184e+00 -1.16355003e+00 -2.36457845e-01 -2.36457845e-01
 -2.36457845e-01  8.61274840e+01  6.76631209e+02  3.93474236e+03
  2.96231545e+04  1.54739624e+05  6.64891400e+05  2.71962724e+06
  1.10459654e+07  4.65100866e+07]
E1 = -706.5527122179777  E_coul = 198.9129713609026
Extra cycle  E= -507.639740857075  delta_E=    0  |g|= 6.5e-09  |ddm|= 1.66e-08
    CPU time for scf_cycle      0.10 sec, wall time      0.11 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 56.37809402668489
E1 = -706.5527122179777  E_coul = 198.9129713609026
init E= -507.639740857075
    CPU time for initialize scf      0.12 sec, wall time      0.12 sec
  HOMO = -0.236457844757868  LUMO = 86.1274840285176
  mo_energy =
[-1.20271277e+02 -1.22542690e+01 -6.65497184e+00 -6.65497184e+00
 -6.65497184e+00 -1.16355003e+00 -2.36457845e-01 -2.36457845e-01
 -2.36457845e-01  8.61274840e+01  6.76631209e+02  3.93474236e+03
  2.96231545e+04  1.54739624e+05  6.64891400e+05  2.71962724e+06
  1.10459654e+07  4.65100866e+07]
E1 = -706.5527122185437  E_coul = 198.91297136146886
cycle= 1 E= -507.639740857075  delta_E= 3.41e-13  |g|= 2.03e-10  |ddm|= 2.57e-10
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -706.5527122185437  E_coul = 198.91297136146886
  HOMO = -0.236457844755149  LUMO = 86.1274840285749
  mo_energy =
[-1.20271277e+02 -1.22542690e+01 -6.65497184e+00 -6.65497184e+00
 -6.65497184e+00 -1.16355003e+00 -2.36457845e-01 -2.36457845e-01
 -2.36457845e-01  8.61274840e+01  6.76631209e+02  3.93474236e+03
  2.96231545e+04  1.54739624e+05  6.64891400e+05  2.71962724e+06
  1.10459654e+07  4.65100866e+07]
E1 = -706.552712218554  E_coul = 198.91297136147895
Extra cycle  E= -507.639740857075  delta_E= -2.27e-13  |g|= 1.7e-10  |ddm|= 4.63e-12
    CPU time for scf_cycle      0.19 sec, wall time      0.20 sec
exp = [1.87954849e+07 4.69887121e+06 1.17471780e+06 2.93679448e+05
 7.34198753e+04 1.83520726e+04 2.23693558e+03 4.55840778e+02
 1.21409803e+02 3.75316570e+01 4.74105753e+00 3.91197744e-01
 8.59863845e+00 4.90850355e-01]
grad_E = [-1.14699131e-13  1.77923261e-11  6.82054878e-12  1.04098161e-08
 -3.47758153e-08  6.33823811e-06 -4.89773069e-06 -2.12292073e-05
 -2.14924810e-06 -1.44437508e-07  1.28149877e-06 -3.90050729e-07
  2.06936647e-07  1.61180196e-07]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="BFGS",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((14, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.6988712134173084e+06,1.1747178033543271e+06,2.9367945083858178e+05,7.3419865393677101e+04,1.8353927627435987e+04,2.2341424145819028e+03,4.5688904996449571e+02,1.2173317272260677e+02,3.7593061247508530e+01,4.7412722556720146e+00,3.9120358491841306e-01,8.5986297237246045e+00,4.9084868336327880e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "12s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:17:17 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  18795484.8537        1
[INPUT] 0    0    [1    /1   ]  4698871.21341        1
[INPUT] 0    0    [1    /1   ]  1174717.80335        1
[INPUT] 0    0    [1    /1   ]  293679.447841        1
[INPUT] 0    0    [1    /1   ]  73419.8751286        1
[INPUT] 0    0    [1    /1   ]  18352.1007154        1
[INPUT] 0    0    [1    /1   ]  2236.89098234        1
[INPUT] 0    0    [1    /1   ]  455.866880391        1
[INPUT] 0    0    [1    /1   ]  121.426292261        1
[INPUT] 0    0    [1    /1   ]  37.5359127218        1
[INPUT] 0    0    [1    /1   ]  4.74106447904        1
[INPUT] 0    0    [1    /1   ]  0.391198292625       1
[INPUT] 1    0    [1    /1   ]  8.59863699026        1
[INPUT] 1    0    [1    /1   ]  0.490850235512       1

nuclear repulsion = 0
number of shells = 14
number of NR pGTOs = 18
number of NR cGTOs = 18
basis = {'Ar': [[0, [18795484.853669267, 1.0]], [0, [4698871.213412182, 1.0]], [0, [1174717.8033518784, 1.0]], [0, [293679.4478414142, 1.0]], [0, [73419.87512863452, 1.0]], [0, [18352.10071543287, 1.0]], [0, [2236.890982336151, 1.0]], [0, [455.866880390988, 1.0]], [0, [121.42629226087341, 1.0]], [0, [37.53591272180696, 1.0]], [0, [4.741064479043121, 1.0]], [0, [0.39119829262515515, 1.0]], [1, [8.598636990260655, 1.0]], [1, [0.4908502355121998, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [18795484.85366927]
bas 1, expnt(s) = [4698871.21341218]
bas 2, expnt(s) = [1174717.80335188]
bas 3, expnt(s) = [293679.44784141]
bas 4, expnt(s) = [73419.87512863]
bas 5, expnt(s) = [18352.10071543]
bas 6, expnt(s) = [2236.89098234]
bas 7, expnt(s) = [455.86688039]
bas 8, expnt(s) = [121.42629226]
bas 9, expnt(s) = [37.53591272]
bas 10, expnt(s) = [4.74106448]
bas 11, expnt(s) = [0.39119829]
bas 12, expnt(s) = [8.59863699]
bas 13, expnt(s) = [0.49085024]
CPU time:       217.98
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  0  1  1  0 42 43  0]
 [ 0  0  1  1  0 44 45  0]
 [ 0  0  1  1  0 46 47  0]
 [ 0  1  1  1  0 48 49  0]
 [ 0  1  1  1  0 50 51  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.87954849e+07 7.21199097e+05 4.69887121e+06 2.54982386e+05
 1.17471780e+06 9.01498871e+04 2.93679448e+05 3.18727980e+04
 7.34198751e+04 1.12687373e+04 1.83521007e+04 3.98363337e+03
 2.23689098e+03 8.21766889e+02 4.55866880e+02 2.49254814e+02
 1.21426292e+02 9.24165123e+01 3.75359127e+01 3.83133617e+01
 4.74106448e+00 8.11749296e+00 3.91198293e-01 1.24972005e+00
 8.59863699e+00 4.29557604e+01 4.90850236e-01 1.19858999e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319980803453305
cond(S) = 56.379409049504495
E1 = -688.8357076002717  E_coul = 184.9151994433991
init E= -503.920508156873
    CPU time for initialize scf      0.03 sec, wall time      0.03 sec
  HOMO = -0.680896235523244  LUMO = 84.8142566451293
  mo_energy =
[-1.21650537e+02 -1.32811504e+01 -7.62162461e+00 -7.62162461e+00
 -7.62162461e+00 -1.65069608e+00 -6.80896236e-01 -6.80896236e-01
 -6.80896236e-01  8.48142566e+01  6.75353152e+02  3.93361177e+03
  2.96221188e+04  1.54738692e+05  6.64890512e+05  2.71962636e+06
  1.10459645e+07  4.65100857e+07]
E1 = -706.5847581378326  E_coul = 198.94544700661197
cycle= 1 E= -507.639311131221  delta_E= -3.72  |g|= 0.318  |ddm|= 0.301
    CPU time for cycle= 1      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.420576
diis-c [-0.17688388  1.        ]
  HOMO = -0.236279224496046  LUMO = 86.1469833939548
  mo_energy =
[-1.20262484e+02 -1.22530606e+01 -6.65309237e+00 -6.65309237e+00
 -6.65309237e+00 -1.16348451e+00 -2.36279224e-01 -2.36279224e-01
 -2.36279224e-01  8.61469834e+01  6.76723828e+02  3.93486327e+03
  2.96232074e+04  1.54739710e+05  6.64891500e+05  2.71962734e+06
  1.10459655e+07  4.65100867e+07]
E1 = -706.5531959830331  E_coul = 198.91345507500012
cycle= 2 E= -507.639740908033  delta_E= -0.00043  |g|= 0.00475  |ddm|= 0.0143
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00505081
diis-c [-2.54673673e-05 -4.95247963e-04  1.00049525e+00]
  HOMO = -0.236455309834101  LUMO = 86.1434567357263
  mo_energy =
[-1.20271154e+02 -1.22542549e+01 -6.65494209e+00 -6.65494209e+00
 -6.65494209e+00 -1.16354959e+00 -2.36455310e-01 -2.36455310e-01
 -2.36455310e-01  8.61434567e+01  6.76713216e+02  3.93484733e+03
  2.96231881e+04  1.54739689e+05  6.64891479e+05  2.71962732e+06
  1.10459655e+07  4.65100867e+07]
E1 = -706.5527531547527  E_coul = 198.91301213583992
cycle= 3 E= -507.639741018913  delta_E= -1.11e-07  |g|= 9.52e-05  |ddm|= 0.000203
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.000127239
diis-c [-3.98558243e-10  3.34354113e-05 -2.55100711e-02  1.02547664e+00]
  HOMO = -0.236457538473164  LUMO = 86.1434118186463
  mo_energy =
[-1.20271268e+02 -1.22542708e+01 -6.65496924e+00 -6.65496924e+00
 -6.65496924e+00 -1.16355025e+00 -2.36457538e-01 -2.36457538e-01
 -2.36457538e-01  8.61434118e+01  6.76713098e+02  3.93484719e+03
  2.96231879e+04  1.54739689e+05  6.64891479e+05  2.71962732e+06
  1.10459655e+07  4.65100867e+07]
E1 = -706.5527458555789  E_coul = 198.9130048366256
cycle= 4 E= -507.639741018953  delta_E= -4.05e-11  |g|= 3.76e-07  |ddm|= 3.47e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.5527458555789  E_coul = 198.9130048366256
  HOMO = -0.236457522024678  LUMO = 86.1434121584592
  mo_energy =
[-1.20271267e+02 -1.22542707e+01 -6.65496908e+00 -6.65496908e+00
 -6.65496908e+00 -1.16355025e+00 -2.36457522e-01 -2.36457522e-01
 -2.36457522e-01  8.61434122e+01  6.76713100e+02  3.93484719e+03
  2.96231879e+04  1.54739689e+05  6.64891479e+05  2.71962732e+06
  1.10459655e+07  4.65100867e+07]
E1 = -706.5527458929191  E_coul = 198.91300487396632
Extra cycle  E= -507.639741018953  delta_E= 5.12e-13  |g|= 6.5e-09  |ddm|= 1.66e-08
    CPU time for scf_cycle      0.11 sec, wall time      0.11 sec
exp = [1.87954849e+07 4.69887121e+06 1.17471780e+06 2.93679448e+05
 7.34198751e+04 1.83521007e+04 2.23689098e+03 4.55866880e+02
 1.21426292e+02 3.75359127e+01 4.74106448e+00 3.91198293e-01
 8.59863699e+00 4.90850236e-01]
E = -507.6397410189528
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="BFGS",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((14, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.6988712134173084e+06,1.1747178033543271e+06,2.9367945083858178e+05,7.3419865393677101e+04,1.8353927627435987e+04,2.2341424145819028e+03,4.5688904996449571e+02,1.2173317272260677e+02,3.7593061247508530e+01,4.7412722556720146e+00,3.9120358491841306e-01,8.5986297237246045e+00,4.9084868336327880e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "12s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:17:18 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  18795484.8537        1
[INPUT] 0    0    [1    /1   ]  4698871.21341        1
[INPUT] 0    0    [1    /1   ]  1174717.80335        1
[INPUT] 0    0    [1    /1   ]  293679.447841        1
[INPUT] 0    0    [1    /1   ]  73419.8751286        1
[INPUT] 0    0    [1    /1   ]  18352.1007154        1
[INPUT] 0    0    [1    /1   ]  2236.89098234        1
[INPUT] 0    0    [1    /1   ]  455.866880391        1
[INPUT] 0    0    [1    /1   ]  121.426292261        1
[INPUT] 0    0    [1    /1   ]  37.5359127218        1
[INPUT] 0    0    [1    /1   ]  4.74106447904        1
[INPUT] 0    0    [1    /1   ]  0.391198292625       1
[INPUT] 1    0    [1    /1   ]  8.59863699026        1
[INPUT] 1    0    [1    /1   ]  0.490850235512       1

nuclear repulsion = 0
number of shells = 14
number of NR pGTOs = 18
number of NR cGTOs = 18
basis = {'Ar': [[0, [18795484.853669267, 1.0]], [0, [4698871.213412182, 1.0]], [0, [1174717.8033518784, 1.0]], [0, [293679.4478414142, 1.0]], [0, [73419.87512863452, 1.0]], [0, [18352.10071543287, 1.0]], [0, [2236.890982336151, 1.0]], [0, [455.866880390988, 1.0]], [0, [121.42629226087341, 1.0]], [0, [37.53591272180696, 1.0]], [0, [4.741064479043121, 1.0]], [0, [0.39119829262515515, 1.0]], [1, [8.598636990260655, 1.0]], [1, [0.4908502355121998, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [18795484.85366927]
bas 1, expnt(s) = [4698871.21341218]
bas 2, expnt(s) = [1174717.80335188]
bas 3, expnt(s) = [293679.44784141]
bas 4, expnt(s) = [73419.87512863]
bas 5, expnt(s) = [18352.10071543]
bas 6, expnt(s) = [2236.89098234]
bas 7, expnt(s) = [455.86688039]
bas 8, expnt(s) = [121.42629226]
bas 9, expnt(s) = [37.53591272]
bas 10, expnt(s) = [4.74106448]
bas 11, expnt(s) = [0.39119829]
bas 12, expnt(s) = [8.59863699]
bas 13, expnt(s) = [0.49085024]
CPU time:       218.79
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  0  1  1  0 42 43  0]
 [ 0  0  1  1  0 44 45  0]
 [ 0  0  1  1  0 46 47  0]
 [ 0  1  1  1  0 48 49  0]
 [ 0  1  1  1  0 50 51  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.87954849e+07 7.21199097e+05 4.69887121e+06 2.54982386e+05
 1.17471780e+06 9.01498871e+04 2.93679448e+05 3.18727980e+04
 7.34198751e+04 1.12687373e+04 1.83521007e+04 3.98363337e+03
 2.23689098e+03 8.21766889e+02 4.55866880e+02 2.49254814e+02
 1.21426292e+02 9.24165123e+01 3.75359127e+01 3.83133617e+01
 4.74106448e+00 8.11749296e+00 3.91198293e-01 1.24972005e+00
 8.59863699e+00 4.29557604e+01 4.90850236e-01 1.19858999e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319980803453305
cond(S) = 56.379409049504495
E1 = -688.8357076002717  E_coul = 184.9151994433991
init E= -503.920508156873
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.680896235523244  LUMO = 84.8142566451293
  mo_energy =
[-1.21650537e+02 -1.32811504e+01 -7.62162461e+00 -7.62162461e+00
 -7.62162461e+00 -1.65069608e+00 -6.80896236e-01 -6.80896236e-01
 -6.80896236e-01  8.48142566e+01  6.75353152e+02  3.93361177e+03
  2.96221188e+04  1.54738692e+05  6.64890512e+05  2.71962636e+06
  1.10459645e+07  4.65100857e+07]
E1 = -706.5847581378326  E_coul = 198.94544700661197
cycle= 1 E= -507.639311131221  delta_E= -3.72  |g|= 0.318  |ddm|= 0.301
    CPU time for cycle= 1      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.420576
diis-c [-0.17688388  1.        ]
  HOMO = -0.236279224496046  LUMO = 86.1469833939548
  mo_energy =
[-1.20262484e+02 -1.22530606e+01 -6.65309237e+00 -6.65309237e+00
 -6.65309237e+00 -1.16348451e+00 -2.36279224e-01 -2.36279224e-01
 -2.36279224e-01  8.61469834e+01  6.76723828e+02  3.93486327e+03
  2.96232074e+04  1.54739710e+05  6.64891500e+05  2.71962734e+06
  1.10459655e+07  4.65100867e+07]
E1 = -706.5531959830331  E_coul = 198.91345507500012
cycle= 2 E= -507.639740908033  delta_E= -0.00043  |g|= 0.00475  |ddm|= 0.0143
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00505081
diis-c [-2.54673673e-05 -4.95247963e-04  1.00049525e+00]
  HOMO = -0.236455309834101  LUMO = 86.1434567357263
  mo_energy =
[-1.20271154e+02 -1.22542549e+01 -6.65494209e+00 -6.65494209e+00
 -6.65494209e+00 -1.16354959e+00 -2.36455310e-01 -2.36455310e-01
 -2.36455310e-01  8.61434567e+01  6.76713216e+02  3.93484733e+03
  2.96231881e+04  1.54739689e+05  6.64891479e+05  2.71962732e+06
  1.10459655e+07  4.65100867e+07]
E1 = -706.5527531547527  E_coul = 198.91301213583992
cycle= 3 E= -507.639741018913  delta_E= -1.11e-07  |g|= 9.52e-05  |ddm|= 0.000203
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.000127239
diis-c [-3.98558243e-10  3.34354113e-05 -2.55100711e-02  1.02547664e+00]
  HOMO = -0.236457538473164  LUMO = 86.1434118186463
  mo_energy =
[-1.20271268e+02 -1.22542708e+01 -6.65496924e+00 -6.65496924e+00
 -6.65496924e+00 -1.16355025e+00 -2.36457538e-01 -2.36457538e-01
 -2.36457538e-01  8.61434118e+01  6.76713098e+02  3.93484719e+03
  2.96231879e+04  1.54739689e+05  6.64891479e+05  2.71962732e+06
  1.10459655e+07  4.65100867e+07]
E1 = -706.5527458555789  E_coul = 198.9130048366256
cycle= 4 E= -507.639741018953  delta_E= -4.05e-11  |g|= 3.76e-07  |ddm|= 3.47e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.5527458555789  E_coul = 198.9130048366256
  HOMO = -0.236457522024678  LUMO = 86.1434121584592
  mo_energy =
[-1.20271267e+02 -1.22542707e+01 -6.65496908e+00 -6.65496908e+00
 -6.65496908e+00 -1.16355025e+00 -2.36457522e-01 -2.36457522e-01
 -2.36457522e-01  8.61434122e+01  6.76713100e+02  3.93484719e+03
  2.96231879e+04  1.54739689e+05  6.64891479e+05  2.71962732e+06
  1.10459655e+07  4.65100867e+07]
E1 = -706.5527458929191  E_coul = 198.91300487396632
Extra cycle  E= -507.639741018953  delta_E= 5.12e-13  |g|= 6.5e-09  |ddm|= 1.66e-08
    CPU time for scf_cycle      0.11 sec, wall time      0.11 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 56.379409049504495
E1 = -706.5527458929191  E_coul = 198.91300487396632
init E= -507.639741018953
    CPU time for initialize scf      0.12 sec, wall time      0.12 sec
  HOMO = -0.236457521832003  LUMO = 86.1434121626215
  mo_energy =
[-1.20271267e+02 -1.22542707e+01 -6.65496908e+00 -6.65496908e+00
 -6.65496908e+00 -1.16355025e+00 -2.36457522e-01 -2.36457522e-01
 -2.36457522e-01  8.61434122e+01  6.76713100e+02  3.93484719e+03
  2.96231879e+04  1.54739689e+05  6.64891479e+05  2.71962732e+06
  1.10459655e+07  4.65100867e+07]
E1 = -706.5527458934853  E_coul = 198.9130048745321
cycle= 1 E= -507.639741018953  delta_E= -3.41e-13  |g|= 2.04e-10  |ddm|= 2.57e-10
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -706.5527458934853  E_coul = 198.9130048745321
  HOMO = -0.23645752182928  LUMO = 86.1434121626808
  mo_energy =
[-1.20271267e+02 -1.22542707e+01 -6.65496908e+00 -6.65496908e+00
 -6.65496908e+00 -1.16355025e+00 -2.36457522e-01 -2.36457522e-01
 -2.36457522e-01  8.61434122e+01  6.76713100e+02  3.93484719e+03
  2.96231879e+04  1.54739689e+05  6.64891479e+05  2.71962732e+06
  1.10459655e+07  4.65100867e+07]
E1 = -706.5527458934951  E_coul = 198.9130048745419
Extra cycle  E= -507.639741018953  delta_E=    0  |g|= 2.69e-10  |ddm|= 4.59e-12
    CPU time for scf_cycle      0.19 sec, wall time      0.19 sec
exp = [1.87954849e+07 4.69887121e+06 1.17471780e+06 2.93679448e+05
 7.34198751e+04 1.83521007e+04 2.23689098e+03 4.55866880e+02
 1.21426292e+02 3.75359127e+01 4.74106448e+00 3.91198293e-01
 8.59863699e+00 4.90850236e-01]
grad_E = [-1.14657474e-13  1.77950126e-11  6.84262912e-12  1.04113459e-08
 -3.47687872e-08  6.33923235e-06 -4.93413500e-06 -2.19021737e-05
  2.33298520e-06  1.17216688e-06  1.81565665e-06 -2.96735990e-07
  3.75091865e-07  7.71255543e-07]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="BFGS",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((14, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.6988712134173084e+06,1.1747178033543271e+06,2.9367945083858178e+05,7.3419865393677101e+04,1.8353927627435987e+04,2.2341424145819028e+03,4.5688904996449571e+02,1.2173317272260677e+02,3.7593061247508530e+01,4.7412722556720146e+00,3.9120358491841306e-01,8.5986297237246045e+00,4.9084868336327880e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "12s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:17:22 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  18795484.8537        1
[INPUT] 0    0    [1    /1   ]  4698871.21341        1
[INPUT] 0    0    [1    /1   ]  1174717.80335        1
[INPUT] 0    0    [1    /1   ]  293679.447885        1
[INPUT] 0    0    [1    /1   ]  73419.8749872        1
[INPUT] 0    0    [1    /1   ]  18352.1274422        1
[INPUT] 0    0    [1    /1   ]  2236.84646017        1
[INPUT] 0    0    [1    /1   ]  455.902136472        1
[INPUT] 0    0    [1    /1   ]  121.447581881        1
[INPUT] 0    0    [1    /1   ]  37.5413704059        1
[INPUT] 0    0    [1    /1   ]  4.74107360248        1
[INPUT] 0    0    [1    /1   ]  0.391198994316       1
[INPUT] 1    0    [1    /1   ]  8.59863511933        1
[INPUT] 1    0    [1    /1   ]  0.490850082166       1

nuclear repulsion = 0
number of shells = 14
number of NR pGTOs = 18
number of NR cGTOs = 18
basis = {'Ar': [[0, [18795484.853669267, 1.0]], [0, [4698871.213412257, 1.0]], [0, [1174717.803351916, 1.0]], [0, [293679.4478852504, 1.0]], [0, [73419.87498716975, 1.0]], [0, [18352.127442161785, 1.0]], [0, [2236.846460167793, 1.0]], [0, [455.9021364721661, 1.0]], [0, [121.44758188090044, 1.0]], [0, [37.541370405886596, 1.0]], [0, [4.741073602475657, 1.0]], [0, [0.3911989943156842, 1.0]], [1, [8.598635119333645, 1.0]], [1, [0.4908500821659405, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [18795484.85366927]
bas 1, expnt(s) = [4698871.21341226]
bas 2, expnt(s) = [1174717.80335192]
bas 3, expnt(s) = [293679.44788525]
bas 4, expnt(s) = [73419.87498717]
bas 5, expnt(s) = [18352.12744216]
bas 6, expnt(s) = [2236.84646017]
bas 7, expnt(s) = [455.90213647]
bas 8, expnt(s) = [121.44758188]
bas 9, expnt(s) = [37.54137041]
bas 10, expnt(s) = [4.7410736]
bas 11, expnt(s) = [0.39119899]
bas 12, expnt(s) = [8.59863512]
bas 13, expnt(s) = [0.49085008]
CPU time:       222.32
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  0  1  1  0 42 43  0]
 [ 0  0  1  1  0 44 45  0]
 [ 0  0  1  1  0 46 47  0]
 [ 0  1  1  1  0 48 49  0]
 [ 0  1  1  1  0 50 51  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.87954849e+07 7.21199097e+05 4.69887121e+06 2.54982386e+05
 1.17471780e+06 9.01498871e+04 2.93679448e+05 3.18727980e+04
 7.34198750e+04 1.12687373e+04 1.83521274e+04 3.98363773e+03
 2.23684646e+03 8.21754621e+02 4.55902136e+02 2.49269272e+02
 1.21447582e+02 9.24286646e+01 3.75413704e+01 3.83175397e+01
 4.74107360e+00 8.11750467e+00 3.91198994e-01 1.24972173e+00
 8.59863512e+00 4.29557487e+01 4.90850082e-01 1.19858952e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319980449821102
cond(S) = 56.38107129951038
E1 = -688.8356602310619  E_coul = 184.9152173249486
init E= -503.920442906113
    CPU time for initialize scf      0.03 sec, wall time      0.03 sec
  HOMO = -0.680896199907381  LUMO = 84.8347250200832
  mo_energy =
[-1.21650530e+02 -1.32811543e+01 -7.62162240e+00 -7.62162240e+00
 -7.62162240e+00 -1.65069721e+00 -6.80896200e-01 -6.80896200e-01
 -6.80896200e-01  8.48347250e+01  6.75460044e+02  3.93376582e+03
  2.96221987e+04  1.54738796e+05  6.64890625e+05  2.71962647e+06
  1.10459646e+07  4.65100858e+07]
E1 = -706.58478990782  E_coul = 198.94547834071523
cycle= 1 E= -507.639311567105  delta_E= -3.72  |g|= 0.318  |ddm|= 0.301
    CPU time for cycle= 1      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.42058
diis-c [-0.1768874  1.       ]
  HOMO = -0.236278886906031  LUMO = 86.167477866418
  mo_energy =
[-1.20262475e+02 -1.22530631e+01 -6.65308958e+00 -6.65308958e+00
 -6.65308958e+00 -1.16348481e+00 -2.36278887e-01 -2.36278887e-01
 -2.36278887e-01  8.61674779e+01  6.76830727e+02  3.93501735e+03
  2.96232873e+04  1.54739814e+05  6.64891612e+05  2.71962744e+06
  1.10459656e+07  4.65100868e+07]
E1 = -706.5532388314881  E_coul = 198.91349764737825
cycle= 2 E= -507.63974118411  delta_E= -0.00043  |g|= 0.00475  |ddm|= 0.0143
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00504989
diis-c [-2.54578838e-05 -4.96214490e-04  1.00049621e+00]
  HOMO = -0.236454898332091  LUMO = 86.1639519637609
  mo_energy =
[-1.20271143e+02 -1.22542570e+01 -6.65493856e+00 -6.65493856e+00
 -6.65493856e+00 -1.16354987e+00 -2.36454898e-01 -2.36454898e-01
 -2.36454898e-01  8.61639520e+01  6.76820118e+02  3.93500142e+03
  2.96232680e+04  1.54739793e+05  6.64891592e+05  2.71962742e+06
  1.10459655e+07  4.65100868e+07]
E1 = -706.5527962235092  E_coul = 198.9130549285868
cycle= 3 E= -507.639741294922  delta_E= -1.11e-07  |g|= 9.51e-05  |ddm|= 0.000203
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.000127196
diis-c [-3.98284899e-10  3.34373404e-05 -2.55061519e-02  1.02547271e+00]
  HOMO = -0.236457125552801  LUMO = 86.1639070686509
  mo_energy =
[-1.20271256e+02 -1.22542729e+01 -6.65496570e+00 -6.65496570e+00
 -6.65496570e+00 -1.16355053e+00 -2.36457126e-01 -2.36457126e-01
 -2.36457126e-01  8.61639071e+01  6.76820000e+02  3.93500127e+03
  2.96232678e+04  1.54739793e+05  6.64891592e+05  2.71962742e+06
  1.10459655e+07  4.65100868e+07]
E1 = -706.5527889294937  E_coul = 198.91304763453104
cycle= 4 E= -507.639741294963  delta_E= -4.02e-11  |g|= 3.76e-07  |ddm|= 3.47e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.5527889294937  E_coul = 198.91304763453104
  HOMO = -0.236457109116962  LUMO = 86.1639074083031
  mo_energy =
[-1.20271256e+02 -1.22542728e+01 -6.65496554e+00 -6.65496554e+00
 -6.65496554e+00 -1.16355053e+00 -2.36457109e-01 -2.36457109e-01
 -2.36457109e-01  8.61639074e+01  6.76820001e+02  3.93500127e+03
  2.96232678e+04  1.54739793e+05  6.64891592e+05  2.71962742e+06
  1.10459655e+07  4.65100868e+07]
E1 = -706.5527889668055  E_coul = 198.91304767184275
Extra cycle  E= -507.639741294963  delta_E= -1.14e-13  |g|= 6.5e-09  |ddm|= 1.66e-08
    CPU time for scf_cycle      0.11 sec, wall time      0.11 sec
exp = [1.87954849e+07 4.69887121e+06 1.17471780e+06 2.93679448e+05
 7.34198750e+04 1.83521274e+04 2.23684646e+03 4.55902136e+02
 1.21447582e+02 3.75413704e+01 4.74107360e+00 3.91198994e-01
 8.59863512e+00 4.90850082e-01]
E = -507.63974129496273
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="BFGS",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((14, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.6988712134173084e+06,1.1747178033543271e+06,2.9367945083858178e+05,7.3419865393677101e+04,1.8353927627435987e+04,2.2341424145819028e+03,4.5688904996449571e+02,1.2173317272260677e+02,3.7593061247508530e+01,4.7412722556720146e+00,3.9120358491841306e-01,8.5986297237246045e+00,4.9084868336327880e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "12s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:17:22 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  18795484.8537        1
[INPUT] 0    0    [1    /1   ]  4698871.21341        1
[INPUT] 0    0    [1    /1   ]  1174717.80335        1
[INPUT] 0    0    [1    /1   ]  293679.447885        1
[INPUT] 0    0    [1    /1   ]  73419.8749872        1
[INPUT] 0    0    [1    /1   ]  18352.1274422        1
[INPUT] 0    0    [1    /1   ]  2236.84646017        1
[INPUT] 0    0    [1    /1   ]  455.902136472        1
[INPUT] 0    0    [1    /1   ]  121.447581881        1
[INPUT] 0    0    [1    /1   ]  37.5413704059        1
[INPUT] 0    0    [1    /1   ]  4.74107360248        1
[INPUT] 0    0    [1    /1   ]  0.391198994316       1
[INPUT] 1    0    [1    /1   ]  8.59863511933        1
[INPUT] 1    0    [1    /1   ]  0.490850082166       1

nuclear repulsion = 0
number of shells = 14
number of NR pGTOs = 18
number of NR cGTOs = 18
basis = {'Ar': [[0, [18795484.853669267, 1.0]], [0, [4698871.213412257, 1.0]], [0, [1174717.803351916, 1.0]], [0, [293679.4478852504, 1.0]], [0, [73419.87498716975, 1.0]], [0, [18352.127442161785, 1.0]], [0, [2236.846460167793, 1.0]], [0, [455.9021364721661, 1.0]], [0, [121.44758188090044, 1.0]], [0, [37.541370405886596, 1.0]], [0, [4.741073602475657, 1.0]], [0, [0.3911989943156842, 1.0]], [1, [8.598635119333645, 1.0]], [1, [0.4908500821659405, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [18795484.85366927]
bas 1, expnt(s) = [4698871.21341226]
bas 2, expnt(s) = [1174717.80335192]
bas 3, expnt(s) = [293679.44788525]
bas 4, expnt(s) = [73419.87498717]
bas 5, expnt(s) = [18352.12744216]
bas 6, expnt(s) = [2236.84646017]
bas 7, expnt(s) = [455.90213647]
bas 8, expnt(s) = [121.44758188]
bas 9, expnt(s) = [37.54137041]
bas 10, expnt(s) = [4.7410736]
bas 11, expnt(s) = [0.39119899]
bas 12, expnt(s) = [8.59863512]
bas 13, expnt(s) = [0.49085008]
CPU time:       223.13
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  0  1  1  0 42 43  0]
 [ 0  0  1  1  0 44 45  0]
 [ 0  0  1  1  0 46 47  0]
 [ 0  1  1  1  0 48 49  0]
 [ 0  1  1  1  0 50 51  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.87954849e+07 7.21199097e+05 4.69887121e+06 2.54982386e+05
 1.17471780e+06 9.01498871e+04 2.93679448e+05 3.18727980e+04
 7.34198750e+04 1.12687373e+04 1.83521274e+04 3.98363773e+03
 2.23684646e+03 8.21754621e+02 4.55902136e+02 2.49269272e+02
 1.21447582e+02 9.24286646e+01 3.75413704e+01 3.83175397e+01
 4.74107360e+00 8.11750467e+00 3.91198994e-01 1.24972173e+00
 8.59863512e+00 4.29557487e+01 4.90850082e-01 1.19858952e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319980449821102
cond(S) = 56.38107129951038
E1 = -688.8356602310619  E_coul = 184.9152173249486
init E= -503.920442906113
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.680896199907381  LUMO = 84.8347250200832
  mo_energy =
[-1.21650530e+02 -1.32811543e+01 -7.62162240e+00 -7.62162240e+00
 -7.62162240e+00 -1.65069721e+00 -6.80896200e-01 -6.80896200e-01
 -6.80896200e-01  8.48347250e+01  6.75460044e+02  3.93376582e+03
  2.96221987e+04  1.54738796e+05  6.64890625e+05  2.71962647e+06
  1.10459646e+07  4.65100858e+07]
E1 = -706.58478990782  E_coul = 198.94547834071523
cycle= 1 E= -507.639311567105  delta_E= -3.72  |g|= 0.318  |ddm|= 0.301
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.42058
diis-c [-0.1768874  1.       ]
  HOMO = -0.236278886906031  LUMO = 86.167477866418
  mo_energy =
[-1.20262475e+02 -1.22530631e+01 -6.65308958e+00 -6.65308958e+00
 -6.65308958e+00 -1.16348481e+00 -2.36278887e-01 -2.36278887e-01
 -2.36278887e-01  8.61674779e+01  6.76830727e+02  3.93501735e+03
  2.96232873e+04  1.54739814e+05  6.64891612e+05  2.71962744e+06
  1.10459656e+07  4.65100868e+07]
E1 = -706.5532388314881  E_coul = 198.91349764737825
cycle= 2 E= -507.63974118411  delta_E= -0.00043  |g|= 0.00475  |ddm|= 0.0143
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00504989
diis-c [-2.54578838e-05 -4.96214490e-04  1.00049621e+00]
  HOMO = -0.236454898332091  LUMO = 86.1639519637609
  mo_energy =
[-1.20271143e+02 -1.22542570e+01 -6.65493856e+00 -6.65493856e+00
 -6.65493856e+00 -1.16354987e+00 -2.36454898e-01 -2.36454898e-01
 -2.36454898e-01  8.61639520e+01  6.76820118e+02  3.93500142e+03
  2.96232680e+04  1.54739793e+05  6.64891592e+05  2.71962742e+06
  1.10459655e+07  4.65100868e+07]
E1 = -706.5527962235092  E_coul = 198.9130549285868
cycle= 3 E= -507.639741294922  delta_E= -1.11e-07  |g|= 9.51e-05  |ddm|= 0.000203
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.000127196
diis-c [-3.98284899e-10  3.34373404e-05 -2.55061519e-02  1.02547271e+00]
  HOMO = -0.236457125552801  LUMO = 86.1639070686509
  mo_energy =
[-1.20271256e+02 -1.22542729e+01 -6.65496570e+00 -6.65496570e+00
 -6.65496570e+00 -1.16355053e+00 -2.36457126e-01 -2.36457126e-01
 -2.36457126e-01  8.61639071e+01  6.76820000e+02  3.93500127e+03
  2.96232678e+04  1.54739793e+05  6.64891592e+05  2.71962742e+06
  1.10459655e+07  4.65100868e+07]
E1 = -706.5527889294937  E_coul = 198.91304763453104
cycle= 4 E= -507.639741294963  delta_E= -4.02e-11  |g|= 3.76e-07  |ddm|= 3.47e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.5527889294937  E_coul = 198.91304763453104
  HOMO = -0.236457109116962  LUMO = 86.1639074083031
  mo_energy =
[-1.20271256e+02 -1.22542728e+01 -6.65496554e+00 -6.65496554e+00
 -6.65496554e+00 -1.16355053e+00 -2.36457109e-01 -2.36457109e-01
 -2.36457109e-01  8.61639074e+01  6.76820001e+02  3.93500127e+03
  2.96232678e+04  1.54739793e+05  6.64891592e+05  2.71962742e+06
  1.10459655e+07  4.65100868e+07]
E1 = -706.5527889668055  E_coul = 198.91304767184275
Extra cycle  E= -507.639741294963  delta_E= -1.14e-13  |g|= 6.5e-09  |ddm|= 1.66e-08
    CPU time for scf_cycle      0.10 sec, wall time      0.11 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 56.38107129951038
E1 = -706.5527889668055  E_coul = 198.91304767184275
init E= -507.639741294963
    CPU time for initialize scf      0.12 sec, wall time      0.12 sec
  HOMO = -0.236457108924448  LUMO = 86.163907412464
  mo_energy =
[-1.20271256e+02 -1.22542728e+01 -6.65496554e+00 -6.65496554e+00
 -6.65496554e+00 -1.16355053e+00 -2.36457109e-01 -2.36457109e-01
 -2.36457109e-01  8.61639074e+01  6.76820001e+02  3.93500127e+03
  2.96232678e+04  1.54739793e+05  6.64891592e+05  2.71962742e+06
  1.10459655e+07  4.65100868e+07]
E1 = -706.5527889673704  E_coul = 198.91304767240774
cycle= 1 E= -507.639741294963  delta_E= 1.14e-13  |g|= 1.83e-10  |ddm|= 2.56e-10
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -706.5527889673704  E_coul = 198.91304767240774
  HOMO = -0.236457108921728  LUMO = 86.1639074125223
  mo_energy =
[-1.20271256e+02 -1.22542728e+01 -6.65496554e+00 -6.65496554e+00
 -6.65496554e+00 -1.16355053e+00 -2.36457109e-01 -2.36457109e-01
 -2.36457109e-01  8.61639074e+01  6.76820001e+02  3.93500127e+03
  2.96232678e+04  1.54739793e+05  6.64891592e+05  2.71962742e+06
  1.10459655e+07  4.65100868e+07]
E1 = -706.5527889673799  E_coul = 198.91304767241755
Extra cycle  E= -507.639741294962  delta_E= 2.27e-13  |g|= 1.81e-10  |ddm|= 4.58e-12
    CPU time for scf_cycle      0.19 sec, wall time      0.19 sec
exp = [1.87954849e+07 4.69887121e+06 1.17471780e+06 2.93679448e+05
 7.34198750e+04 1.83521274e+04 2.23684646e+03 4.55902136e+02
 1.21447582e+02 3.75413704e+01 4.74107360e+00 3.91198994e-01
 8.59863512e+00 4.90850082e-01]
grad_E = [-1.14610788e-13  1.77980266e-11  6.86738317e-12  1.04130628e-08
 -3.47609620e-08  6.34035928e-06 -4.97833337e-06 -2.27490607e-05
  8.00400095e-06  2.83531514e-06  2.48912846e-06 -1.77834451e-07
  5.87156840e-07  1.54173739e-06]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="BFGS",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((14, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.6988712134173084e+06,1.1747178033543271e+06,2.9367945083858178e+05,7.3419865393677101e+04,1.8353927627435987e+04,2.2341424145819028e+03,4.5688904996449571e+02,1.2173317272260677e+02,3.7593061247508530e+01,4.7412722556720146e+00,3.9120358491841306e-01,8.5986297237246045e+00,4.9084868336327880e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "12s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:17:26 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  18795484.8537        1
[INPUT] 0    0    [1    /1   ]  4698871.21341        1
[INPUT] 0    0    [1    /1   ]  1174717.80335        1
[INPUT] 0    0    [1    /1   ]  293679.447913        1
[INPUT] 0    0    [1    /1   ]  73419.8748994        1
[INPUT] 0    0    [1    /1   ]  18352.14423          1
[INPUT] 0    0    [1    /1   ]  2236.81357112        1
[INPUT] 0    0    [1    /1   ]  455.948679182        1
[INPUT] 0    0    [1    /1   ]  121.474067125        1
[INPUT] 0    0    [1    /1   ]  37.5480967239        1
[INPUT] 0    0    [1    /1   ]  4.74108521093        1
[INPUT] 0    0    [1    /1   ]  0.391199855484       1
[INPUT] 1    0    [1    /1   ]  8.5986328262         1
[INPUT] 1    0    [1    /1   ]  0.490849892724       1

nuclear repulsion = 0
number of shells = 14
number of NR pGTOs = 18
number of NR cGTOs = 18
basis = {'Ar': [[0, [18795484.853669267, 1.0]], [0, [4698871.213412304, 1.0]], [0, [1174717.8033519413, 1.0]], [0, [293679.4479127728, 1.0]], [0, [73419.87489938847, 1.0]], [0, [18352.144229952104, 1.0]], [0, [2236.8135711182326, 1.0]], [0, [455.94867918162873, 1.0]], [0, [121.47406712526683, 1.0]], [0, [37.5480967238765, 1.0]], [0, [4.741085210931136, 1.0]], [0, [0.3911998554839813, 1.0]], [1, [8.598632826197653, 1.0]], [1, [0.49084989272441687, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [18795484.85366927]
bas 1, expnt(s) = [4698871.2134123]
bas 2, expnt(s) = [1174717.80335194]
bas 3, expnt(s) = [293679.44791277]
bas 4, expnt(s) = [73419.87489939]
bas 5, expnt(s) = [18352.14422995]
bas 6, expnt(s) = [2236.81357112]
bas 7, expnt(s) = [455.94867918]
bas 8, expnt(s) = [121.47406713]
bas 9, expnt(s) = [37.54809672]
bas 10, expnt(s) = [4.74108521]
bas 11, expnt(s) = [0.39119986]
bas 12, expnt(s) = [8.59863283]
bas 13, expnt(s) = [0.49084989]
CPU time:       226.71
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  0  1  1  0 42 43  0]
 [ 0  0  1  1  0 44 45  0]
 [ 0  0  1  1  0 46 47  0]
 [ 0  1  1  1  0 48 49  0]
 [ 0  1  1  1  0 50 51  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.87954849e+07 7.21199097e+05 4.69887121e+06 2.54982386e+05
 1.17471780e+06 9.01498871e+04 2.93679448e+05 3.18727980e+04
 7.34198749e+04 1.12687373e+04 1.83521442e+04 3.98364046e+03
 2.23681357e+03 8.21745560e+02 4.55948679e+02 2.49288357e+02
 1.21474067e+02 9.24437818e+01 3.75480967e+01 3.83226886e+01
 4.74108521e+00 8.11751958e+00 3.91199855e-01 1.24972379e+00
 8.59863283e+00 4.29557344e+01 4.90849893e-01 1.19858895e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319980008134277
cond(S) = 56.383077476674416
E1 = -688.8356077105948  E_coul = 184.9152392440498
init E= -503.920368466545
    CPU time for initialize scf      0.03 sec, wall time      0.03 sec
  HOMO = -0.680896161662631  LUMO = 84.860069328823
  mo_energy =
[-1.21650522e+02 -1.32811589e+01 -7.62161969e+00 -7.62161969e+00
 -7.62161969e+00 -1.65069861e+00 -6.80896162e-01 -6.80896162e-01
 -6.80896162e-01  8.48600693e+01  6.75595047e+02  3.93398980e+03
  2.96223615e+04  1.54738959e+05  6.64890783e+05  2.71962661e+06
  1.10459647e+07  4.65100859e+07]
E1 = -706.5848288626427  E_coul = 198.94551661497243
cycle= 1 E= -507.63931224767  delta_E= -3.72  |g|= 0.318  |ddm|= 0.301
    CPU time for cycle= 1      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.420584
diis-c [-0.1768913  1.       ]
  HOMO = -0.236278472605125  LUMO = 86.192854438716
  mo_energy =
[-1.20262464e+02 -1.22530662e+01 -6.65308615e+00 -6.65308615e+00
 -6.65308615e+00 -1.16348518e+00 -2.36278473e-01 -2.36278473e-01
 -2.36278473e-01  8.61928544e+01  6.76965738e+02  3.93524135e+03
  2.96234501e+04  1.54739977e+05  6.64891770e+05  2.71962759e+06
  1.10459657e+07  4.65100869e+07]
E1 = -706.5532914906314  E_coul = 198.9135498236433
cycle= 2 E= -507.639741666988  delta_E= -0.000429  |g|= 0.00475  |ddm|= 0.0143
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00504875
diis-c [-2.54461538e-05 -4.97404304e-04  1.00049740e+00]
  HOMO = -0.236454392572784  LUMO = 86.1893294693188
  mo_energy =
[-1.20271128e+02 -1.22542594e+01 -6.65493423e+00 -6.65493423e+00
 -6.65493423e+00 -1.16355021e+00 -2.36454393e-01 -2.36454393e-01
 -2.36454393e-01  8.61893295e+01  6.76955132e+02  3.93522542e+03
  2.96234308e+04  1.54739957e+05  6.64891750e+05  2.71962757e+06
  1.10459657e+07  4.65100869e+07]
E1 = -706.5528491552564  E_coul = 198.9131073775395
cycle= 3 E= -507.639741777717  delta_E= -1.11e-07  |g|= 9.51e-05  |ddm|= 0.000203
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.000127143
diis-c [-3.97951203e-10  3.34390263e-05 -2.55012937e-02  1.02546785e+00]
  HOMO = -0.236456618039948  LUMO = 86.1892846013762
  mo_energy =
[-1.20271242e+02 -1.22542753e+01 -6.65496134e+00 -6.65496134e+00
 -6.65496134e+00 -1.16355087e+00 -2.36456618e-01 -2.36456618e-01
 -2.36456618e-01  8.61892846e+01  6.76955014e+02  3.93522528e+03
  2.96234306e+04  1.54739957e+05  6.64891750e+05  2.71962757e+06
  1.10459657e+07  4.65100869e+07]
E1 = -706.5528418676193  E_coul = 198.91310008986216
cycle= 4 E= -507.639741777757  delta_E= -4.04e-11  |g|= 3.75e-07  |ddm|= 3.47e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.5528418676193  E_coul = 198.91310008986216
  HOMO = -0.236456601619635  LUMO = 86.1892849408334
  mo_energy =
[-1.20271241e+02 -1.22542752e+01 -6.65496118e+00 -6.65496118e+00
 -6.65496118e+00 -1.16355086e+00 -2.36456602e-01 -2.36456602e-01
 -2.36456602e-01  8.61892849e+01  6.76955015e+02  3.93522528e+03
  2.96234306e+04  1.54739957e+05  6.64891750e+05  2.71962757e+06
  1.10459657e+07  4.65100869e+07]
E1 = -706.5528419048943  E_coul = 198.91310012713703
Extra cycle  E= -507.639741777757  delta_E= -1.14e-13  |g|= 6.49e-09  |ddm|= 1.66e-08
    CPU time for scf_cycle      0.11 sec, wall time      0.11 sec
exp = [1.87954849e+07 4.69887121e+06 1.17471780e+06 2.93679448e+05
 7.34198749e+04 1.83521442e+04 2.23681357e+03 4.55948679e+02
 1.21474067e+02 3.75480967e+01 4.74108521e+00 3.91199855e-01
 8.59863283e+00 4.90849893e-01]
E = -507.6397417777573
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="BFGS",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((14, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.6988712134173084e+06,1.1747178033543271e+06,2.9367945083858178e+05,7.3419865393677101e+04,1.8353927627435987e+04,2.2341424145819028e+03,4.5688904996449571e+02,1.2173317272260677e+02,3.7593061247508530e+01,4.7412722556720146e+00,3.9120358491841306e-01,8.5986297237246045e+00,4.9084868336327880e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "12s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:17:27 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  18795484.8537        1
[INPUT] 0    0    [1    /1   ]  4698871.21341        1
[INPUT] 0    0    [1    /1   ]  1174717.80335        1
[INPUT] 0    0    [1    /1   ]  293679.447913        1
[INPUT] 0    0    [1    /1   ]  73419.8748994        1
[INPUT] 0    0    [1    /1   ]  18352.14423          1
[INPUT] 0    0    [1    /1   ]  2236.81357112        1
[INPUT] 0    0    [1    /1   ]  455.948679182        1
[INPUT] 0    0    [1    /1   ]  121.474067125        1
[INPUT] 0    0    [1    /1   ]  37.5480967239        1
[INPUT] 0    0    [1    /1   ]  4.74108521093        1
[INPUT] 0    0    [1    /1   ]  0.391199855484       1
[INPUT] 1    0    [1    /1   ]  8.5986328262         1
[INPUT] 1    0    [1    /1   ]  0.490849892724       1

nuclear repulsion = 0
number of shells = 14
number of NR pGTOs = 18
number of NR cGTOs = 18
basis = {'Ar': [[0, [18795484.853669267, 1.0]], [0, [4698871.213412304, 1.0]], [0, [1174717.8033519413, 1.0]], [0, [293679.4479127728, 1.0]], [0, [73419.87489938847, 1.0]], [0, [18352.144229952104, 1.0]], [0, [2236.8135711182326, 1.0]], [0, [455.94867918162873, 1.0]], [0, [121.47406712526683, 1.0]], [0, [37.5480967238765, 1.0]], [0, [4.741085210931136, 1.0]], [0, [0.3911998554839813, 1.0]], [1, [8.598632826197653, 1.0]], [1, [0.49084989272441687, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [18795484.85366927]
bas 1, expnt(s) = [4698871.2134123]
bas 2, expnt(s) = [1174717.80335194]
bas 3, expnt(s) = [293679.44791277]
bas 4, expnt(s) = [73419.87489939]
bas 5, expnt(s) = [18352.14422995]
bas 6, expnt(s) = [2236.81357112]
bas 7, expnt(s) = [455.94867918]
bas 8, expnt(s) = [121.47406713]
bas 9, expnt(s) = [37.54809672]
bas 10, expnt(s) = [4.74108521]
bas 11, expnt(s) = [0.39119986]
bas 12, expnt(s) = [8.59863283]
bas 13, expnt(s) = [0.49084989]
CPU time:       227.55
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  0  1  1  0 42 43  0]
 [ 0  0  1  1  0 44 45  0]
 [ 0  0  1  1  0 46 47  0]
 [ 0  1  1  1  0 48 49  0]
 [ 0  1  1  1  0 50 51  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.87954849e+07 7.21199097e+05 4.69887121e+06 2.54982386e+05
 1.17471780e+06 9.01498871e+04 2.93679448e+05 3.18727980e+04
 7.34198749e+04 1.12687373e+04 1.83521442e+04 3.98364046e+03
 2.23681357e+03 8.21745560e+02 4.55948679e+02 2.49288357e+02
 1.21474067e+02 9.24437818e+01 3.75480967e+01 3.83226886e+01
 4.74108521e+00 8.11751958e+00 3.91199855e-01 1.24972379e+00
 8.59863283e+00 4.29557344e+01 4.90849893e-01 1.19858895e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319980008134277
cond(S) = 56.383077476674416
E1 = -688.8356077105948  E_coul = 184.9152392440498
init E= -503.920368466545
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.680896161662631  LUMO = 84.860069328823
  mo_energy =
[-1.21650522e+02 -1.32811589e+01 -7.62161969e+00 -7.62161969e+00
 -7.62161969e+00 -1.65069861e+00 -6.80896162e-01 -6.80896162e-01
 -6.80896162e-01  8.48600693e+01  6.75595047e+02  3.93398980e+03
  2.96223615e+04  1.54738959e+05  6.64890783e+05  2.71962661e+06
  1.10459647e+07  4.65100859e+07]
E1 = -706.5848288626427  E_coul = 198.94551661497243
cycle= 1 E= -507.63931224767  delta_E= -3.72  |g|= 0.318  |ddm|= 0.301
    CPU time for cycle= 1      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.420584
diis-c [-0.1768913  1.       ]
  HOMO = -0.236278472605125  LUMO = 86.192854438716
  mo_energy =
[-1.20262464e+02 -1.22530662e+01 -6.65308615e+00 -6.65308615e+00
 -6.65308615e+00 -1.16348518e+00 -2.36278473e-01 -2.36278473e-01
 -2.36278473e-01  8.61928544e+01  6.76965738e+02  3.93524135e+03
  2.96234501e+04  1.54739977e+05  6.64891770e+05  2.71962759e+06
  1.10459657e+07  4.65100869e+07]
E1 = -706.5532914906314  E_coul = 198.9135498236433
cycle= 2 E= -507.639741666988  delta_E= -0.000429  |g|= 0.00475  |ddm|= 0.0143
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00504875
diis-c [-2.54461538e-05 -4.97404304e-04  1.00049740e+00]
  HOMO = -0.236454392572784  LUMO = 86.1893294693188
  mo_energy =
[-1.20271128e+02 -1.22542594e+01 -6.65493423e+00 -6.65493423e+00
 -6.65493423e+00 -1.16355021e+00 -2.36454393e-01 -2.36454393e-01
 -2.36454393e-01  8.61893295e+01  6.76955132e+02  3.93522542e+03
  2.96234308e+04  1.54739957e+05  6.64891750e+05  2.71962757e+06
  1.10459657e+07  4.65100869e+07]
E1 = -706.5528491552564  E_coul = 198.9131073775395
cycle= 3 E= -507.639741777717  delta_E= -1.11e-07  |g|= 9.51e-05  |ddm|= 0.000203
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.000127143
diis-c [-3.97951203e-10  3.34390263e-05 -2.55012937e-02  1.02546785e+00]
  HOMO = -0.236456618039948  LUMO = 86.1892846013762
  mo_energy =
[-1.20271242e+02 -1.22542753e+01 -6.65496134e+00 -6.65496134e+00
 -6.65496134e+00 -1.16355087e+00 -2.36456618e-01 -2.36456618e-01
 -2.36456618e-01  8.61892846e+01  6.76955014e+02  3.93522528e+03
  2.96234306e+04  1.54739957e+05  6.64891750e+05  2.71962757e+06
  1.10459657e+07  4.65100869e+07]
E1 = -706.5528418676193  E_coul = 198.91310008986216
cycle= 4 E= -507.639741777757  delta_E= -4.04e-11  |g|= 3.75e-07  |ddm|= 3.47e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.5528418676193  E_coul = 198.91310008986216
  HOMO = -0.236456601619635  LUMO = 86.1892849408334
  mo_energy =
[-1.20271241e+02 -1.22542752e+01 -6.65496118e+00 -6.65496118e+00
 -6.65496118e+00 -1.16355086e+00 -2.36456602e-01 -2.36456602e-01
 -2.36456602e-01  8.61892849e+01  6.76955015e+02  3.93522528e+03
  2.96234306e+04  1.54739957e+05  6.64891750e+05  2.71962757e+06
  1.10459657e+07  4.65100869e+07]
E1 = -706.5528419048943  E_coul = 198.91310012713703
Extra cycle  E= -507.639741777757  delta_E= -1.14e-13  |g|= 6.49e-09  |ddm|= 1.66e-08
    CPU time for scf_cycle      0.10 sec, wall time      0.11 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 56.383077476674416
E1 = -706.5528419048943  E_coul = 198.91310012713703
init E= -507.639741777757
    CPU time for initialize scf      0.12 sec, wall time      0.13 sec
  HOMO = -0.236456601427349  LUMO = 86.1892849449863
  mo_energy =
[-1.20271241e+02 -1.22542752e+01 -6.65496118e+00 -6.65496118e+00
 -6.65496118e+00 -1.16355086e+00 -2.36456601e-01 -2.36456601e-01
 -2.36456601e-01  8.61892849e+01  6.76955015e+02  3.93522528e+03
  2.96234306e+04  1.54739957e+05  6.64891750e+05  2.71962757e+06
  1.10459657e+07  4.65100869e+07]
E1 = -706.552841905459  E_coul = 198.9131001277021
cycle= 1 E= -507.639741777757  delta_E= 4.55e-13  |g|= 2.46e-10  |ddm|= 2.56e-10
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -706.552841905459  E_coul = 198.9131001277021
  HOMO = -0.236456601424636  LUMO = 86.1892849450473
  mo_energy =
[-1.20271241e+02 -1.22542752e+01 -6.65496118e+00 -6.65496118e+00
 -6.65496118e+00 -1.16355086e+00 -2.36456601e-01 -2.36456601e-01
 -2.36456601e-01  8.61892849e+01  6.76955015e+02  3.93522528e+03
  2.96234306e+04  1.54739957e+05  6.64891750e+05  2.71962757e+06
  1.10459657e+07  4.65100869e+07]
E1 = -706.5528419054689  E_coul = 198.9131001277118
Extra cycle  E= -507.639741777757  delta_E= -2.27e-13  |g|= 1.8e-10  |ddm|= 4.51e-12
    CPU time for scf_cycle      0.20 sec, wall time      0.21 sec
exp = [1.87954849e+07 4.69887121e+06 1.17471780e+06 2.93679448e+05
 7.34198749e+04 1.83521442e+04 2.23681357e+03 4.55948679e+02
 1.21474067e+02 3.75480967e+01 4.74108521e+00 3.91199855e-01
 8.59863283e+00 4.90849893e-01]
grad_E = [-1.14564951e-13  1.78009930e-11  6.89170450e-12  1.04147536e-08
 -3.47533815e-08  6.34149110e-06 -5.02848973e-06 -2.37649248e-05
  1.48602868e-05  4.84038194e-06  3.29777382e-06 -2.79187304e-08
  8.43574007e-07  2.47991204e-06]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="BFGS",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((14, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.6988712134173084e+06,1.1747178033543271e+06,2.9367945083858178e+05,7.3419865393677101e+04,1.8353927627435987e+04,2.2341424145819028e+03,4.5688904996449571e+02,1.2173317272260677e+02,3.7593061247508530e+01,4.7412722556720146e+00,3.9120358491841306e-01,8.5986297237246045e+00,4.9084868336327880e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "12s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:17:31 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  18795484.8537        1
[INPUT] 0    0    [1    /1   ]  4698871.21341        1
[INPUT] 0    0    [1    /1   ]  1174717.80335        1
[INPUT] 0    0    [1    /1   ]  293679.447904        1
[INPUT] 0    0    [1    /1   ]  73419.8749315        1
[INPUT] 0    0    [1    /1   ]  18352.1387539        1
[INPUT] 0    0    [1    /1   ]  2236.80844597        1
[INPUT] 0    0    [1    /1   ]  456.012055865        1
[INPUT] 0    0    [1    /1   ]  121.507647977        1
[INPUT] 0    0    [1    /1   ]  37.5565226276        1
[INPUT] 0    0    [1    /1   ]  4.74110035277        1
[INPUT] 0    0    [1    /1   ]  0.391200928321       1
[INPUT] 1    0    [1    /1   ]  8.59862997597        1
[INPUT] 1    0    [1    /1   ]  0.490849654845       1

nuclear repulsion = 0
number of shells = 14
number of NR pGTOs = 18
number of NR cGTOs = 18
basis = {'Ar': [[0, [18795484.853669267, 1.0]], [0, [4698871.213412289, 1.0]], [0, [1174717.8033519387, 1.0]], [0, [293679.4479037558, 1.0]], [0, [73419.87493148849, 1.0]], [0, [18352.13875394131, 1.0]], [0, [2236.808445970502, 1.0]], [0, [456.01205586460077, 1.0]], [0, [121.50764797703988, 1.0]], [0, [37.5565226276137, 1.0]], [0, [4.741100352768011, 1.0]], [0, [0.39120092832098063, 1.0]], [1, [8.59862997596741, 1.0]], [1, [0.49084965484536613, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [18795484.85366927]
bas 1, expnt(s) = [4698871.21341229]
bas 2, expnt(s) = [1174717.80335194]
bas 3, expnt(s) = [293679.44790376]
bas 4, expnt(s) = [73419.87493149]
bas 5, expnt(s) = [18352.13875394]
bas 6, expnt(s) = [2236.80844597]
bas 7, expnt(s) = [456.01205586]
bas 8, expnt(s) = [121.50764798]
bas 9, expnt(s) = [37.55652263]
bas 10, expnt(s) = [4.74110035]
bas 11, expnt(s) = [0.39120093]
bas 12, expnt(s) = [8.59862998]
bas 13, expnt(s) = [0.49084965]
CPU time:       231.24
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  0  1  1  0 42 43  0]
 [ 0  0  1  1  0 44 45  0]
 [ 0  0  1  1  0 46 47  0]
 [ 0  1  1  1  0 48 49  0]
 [ 0  1  1  1  0 50 51  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.87954849e+07 7.21199097e+05 4.69887121e+06 2.54982386e+05
 1.17471780e+06 9.01498871e+04 2.93679448e+05 3.18727980e+04
 7.34198749e+04 1.12687373e+04 1.83521388e+04 3.98363957e+03
 2.23680845e+03 8.21744147e+02 4.56012056e+02 2.49314345e+02
 1.21507648e+02 9.24629478e+01 3.75565226e+01 3.83291382e+01
 4.74110035e+00 8.11753903e+00 3.91200928e-01 1.24972636e+00
 8.59862998e+00 4.29557166e+01 4.90849655e-01 1.19858822e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319979445015434
cond(S) = 56.38552023750441
E1 = -688.8355515705731  E_coul = 184.9152665243047
init E= -503.920285046268
    CPU time for initialize scf      0.03 sec, wall time      0.03 sec
  HOMO = -0.680896122775359  LUMO = 84.8920105674228
  mo_energy =
[-1.21650512e+02 -1.32811645e+01 -7.62161630e+00 -7.62161630e+00
 -7.62161630e+00 -1.65070037e+00 -6.80896123e-01 -6.80896123e-01
 -6.80896123e-01  8.48920106e+01  6.75769516e+02  3.93432633e+03
  2.96226709e+04  1.54739222e+05  6.64891013e+05  2.71962682e+06
  1.10459649e+07  4.65100861e+07]
E1 = -706.5848773887865  E_coul = 198.94556402903302
cycle= 1 E= -507.639313359753  delta_E= -3.72  |g|= 0.318  |ddm|= 0.301
    CPU time for cycle= 1      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.420589
diis-c [-0.17689549  1.        ]
  HOMO = -0.236277956009705  LUMO = 86.2248362584865
  mo_energy =
[-1.20262451e+02 -1.22530698e+01 -6.65308188e+00 -6.65308188e+00
 -6.65308188e+00 -1.16348563e+00 -2.36277956e-01 -2.36277956e-01
 -2.36277956e-01  8.62248363e+01  6.77140215e+02  3.93557791e+03
  2.96237596e+04  1.54740239e+05  6.64892000e+05  2.71962779e+06
  1.10459659e+07  4.65100871e+07]
E1 = -706.5533572672325  E_coul = 198.91361473700584
cycle= 2 E= -507.639742530227  delta_E= -0.000429  |g|= 0.00475  |ddm|= 0.0143
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00504731
diis-c [-2.54313912e-05 -4.98890834e-04  1.00049889e+00]
  HOMO = -0.236453760807951  LUMO = 86.2213124615677
  mo_energy =
[-1.20271111e+02 -1.22542623e+01 -6.65492880e+00 -6.65492880e+00
 -6.65492880e+00 -1.16355062e+00 -2.36453761e-01 -2.36453761e-01
 -2.36453761e-01  8.62213125e+01  6.77129613e+02  3.93556199e+03
  2.96237403e+04  1.54740219e+05  6.64891980e+05  2.71962777e+06
  1.10459659e+07  4.65100870e+07]
E1 = -706.552915275142  E_coul = 198.91317263429224
cycle= 3 E= -507.63974264085  delta_E= -1.11e-07  |g|= 9.5e-05  |ddm|= 0.000202
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.000127075
diis-c [-3.97537213e-10  3.34402276e-05 -2.54951719e-02  1.02546173e+00]
  HOMO = -0.236455984069682  LUMO = 86.2212676277917
  mo_energy =
[-1.20271225e+02 -1.22542782e+01 -6.65495589e+00 -6.65495589e+00
 -6.65495589e+00 -1.16355127e+00 -2.36455984e-01 -2.36455984e-01
 -2.36455984e-01  8.62212676e+01  6.77129495e+02  3.93556184e+03
  2.96237402e+04  1.54740219e+05  6.64891980e+05  2.71962777e+06
  1.10459659e+07  4.65100870e+07]
E1 = -706.5529079955289  E_coul = 198.91316535463875
cycle= 4 E= -507.63974264089  delta_E= -4.04e-11  |g|= 3.75e-07  |ddm|= 3.46e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.5529079955289  E_coul = 198.91316535463875
  HOMO = -0.236455967668806  LUMO = 86.2212679670035
  mo_energy =
[-1.20271224e+02 -1.22542781e+01 -6.65495573e+00 -6.65495573e+00
 -6.65495573e+00 -1.16355127e+00 -2.36455968e-01 -2.36455968e-01
 -2.36455968e-01  8.62212680e+01  6.77129497e+02  3.93556185e+03
  2.96237402e+04  1.54740219e+05  6.64891980e+05  2.71962777e+06
  1.10459659e+07  4.65100870e+07]
E1 = -706.5529080327589  E_coul = 198.91316539186877
Extra cycle  E= -507.63974264089  delta_E= 1.14e-13  |g|= 6.48e-09  |ddm|= 1.65e-08
    CPU time for scf_cycle      0.11 sec, wall time      0.11 sec
exp = [1.87954849e+07 4.69887121e+06 1.17471780e+06 2.93679448e+05
 7.34198749e+04 1.83521388e+04 2.23680845e+03 4.56012056e+02
 1.21507648e+02 3.75565226e+01 4.74110035e+00 3.91200928e-01
 8.59862998e+00 4.90849655e-01]
E = -507.63974264089006
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="BFGS",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((14, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.6988712134173084e+06,1.1747178033543271e+06,2.9367945083858178e+05,7.3419865393677101e+04,1.8353927627435987e+04,2.2341424145819028e+03,4.5688904996449571e+02,1.2173317272260677e+02,3.7593061247508530e+01,4.7412722556720146e+00,3.9120358491841306e-01,8.5986297237246045e+00,4.9084868336327880e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "12s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:17:31 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  18795484.8537        1
[INPUT] 0    0    [1    /1   ]  4698871.21341        1
[INPUT] 0    0    [1    /1   ]  1174717.80335        1
[INPUT] 0    0    [1    /1   ]  293679.447904        1
[INPUT] 0    0    [1    /1   ]  73419.8749315        1
[INPUT] 0    0    [1    /1   ]  18352.1387539        1
[INPUT] 0    0    [1    /1   ]  2236.80844597        1
[INPUT] 0    0    [1    /1   ]  456.012055865        1
[INPUT] 0    0    [1    /1   ]  121.507647977        1
[INPUT] 0    0    [1    /1   ]  37.5565226276        1
[INPUT] 0    0    [1    /1   ]  4.74110035277        1
[INPUT] 0    0    [1    /1   ]  0.391200928321       1
[INPUT] 1    0    [1    /1   ]  8.59862997597        1
[INPUT] 1    0    [1    /1   ]  0.490849654845       1

nuclear repulsion = 0
number of shells = 14
number of NR pGTOs = 18
number of NR cGTOs = 18
basis = {'Ar': [[0, [18795484.853669267, 1.0]], [0, [4698871.213412289, 1.0]], [0, [1174717.8033519387, 1.0]], [0, [293679.4479037558, 1.0]], [0, [73419.87493148849, 1.0]], [0, [18352.13875394131, 1.0]], [0, [2236.808445970502, 1.0]], [0, [456.01205586460077, 1.0]], [0, [121.50764797703988, 1.0]], [0, [37.5565226276137, 1.0]], [0, [4.741100352768011, 1.0]], [0, [0.39120092832098063, 1.0]], [1, [8.59862997596741, 1.0]], [1, [0.49084965484536613, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [18795484.85366927]
bas 1, expnt(s) = [4698871.21341229]
bas 2, expnt(s) = [1174717.80335194]
bas 3, expnt(s) = [293679.44790376]
bas 4, expnt(s) = [73419.87493149]
bas 5, expnt(s) = [18352.13875394]
bas 6, expnt(s) = [2236.80844597]
bas 7, expnt(s) = [456.01205586]
bas 8, expnt(s) = [121.50764798]
bas 9, expnt(s) = [37.55652263]
bas 10, expnt(s) = [4.74110035]
bas 11, expnt(s) = [0.39120093]
bas 12, expnt(s) = [8.59862998]
bas 13, expnt(s) = [0.49084965]
CPU time:       232.08
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  0  1  1  0 42 43  0]
 [ 0  0  1  1  0 44 45  0]
 [ 0  0  1  1  0 46 47  0]
 [ 0  1  1  1  0 48 49  0]
 [ 0  1  1  1  0 50 51  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.87954849e+07 7.21199097e+05 4.69887121e+06 2.54982386e+05
 1.17471780e+06 9.01498871e+04 2.93679448e+05 3.18727980e+04
 7.34198749e+04 1.12687373e+04 1.83521388e+04 3.98363957e+03
 2.23680845e+03 8.21744147e+02 4.56012056e+02 2.49314345e+02
 1.21507648e+02 9.24629478e+01 3.75565226e+01 3.83291382e+01
 4.74110035e+00 8.11753903e+00 3.91200928e-01 1.24972636e+00
 8.59862998e+00 4.29557166e+01 4.90849655e-01 1.19858822e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319979445015434
cond(S) = 56.38552023750441
E1 = -688.8355515705731  E_coul = 184.9152665243047
init E= -503.920285046268
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.680896122775359  LUMO = 84.8920105674228
  mo_energy =
[-1.21650512e+02 -1.32811645e+01 -7.62161630e+00 -7.62161630e+00
 -7.62161630e+00 -1.65070037e+00 -6.80896123e-01 -6.80896123e-01
 -6.80896123e-01  8.48920106e+01  6.75769516e+02  3.93432633e+03
  2.96226709e+04  1.54739222e+05  6.64891013e+05  2.71962682e+06
  1.10459649e+07  4.65100861e+07]
E1 = -706.5848773887865  E_coul = 198.94556402903302
cycle= 1 E= -507.639313359753  delta_E= -3.72  |g|= 0.318  |ddm|= 0.301
    CPU time for cycle= 1      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.420589
diis-c [-0.17689549  1.        ]
  HOMO = -0.236277956009705  LUMO = 86.2248362584865
  mo_energy =
[-1.20262451e+02 -1.22530698e+01 -6.65308188e+00 -6.65308188e+00
 -6.65308188e+00 -1.16348563e+00 -2.36277956e-01 -2.36277956e-01
 -2.36277956e-01  8.62248363e+01  6.77140215e+02  3.93557791e+03
  2.96237596e+04  1.54740239e+05  6.64892000e+05  2.71962779e+06
  1.10459659e+07  4.65100871e+07]
E1 = -706.5533572672325  E_coul = 198.91361473700584
cycle= 2 E= -507.639742530227  delta_E= -0.000429  |g|= 0.00475  |ddm|= 0.0143
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00504731
diis-c [-2.54313912e-05 -4.98890834e-04  1.00049889e+00]
  HOMO = -0.236453760807951  LUMO = 86.2213124615677
  mo_energy =
[-1.20271111e+02 -1.22542623e+01 -6.65492880e+00 -6.65492880e+00
 -6.65492880e+00 -1.16355062e+00 -2.36453761e-01 -2.36453761e-01
 -2.36453761e-01  8.62213125e+01  6.77129613e+02  3.93556199e+03
  2.96237403e+04  1.54740219e+05  6.64891980e+05  2.71962777e+06
  1.10459659e+07  4.65100870e+07]
E1 = -706.552915275142  E_coul = 198.91317263429224
cycle= 3 E= -507.63974264085  delta_E= -1.11e-07  |g|= 9.5e-05  |ddm|= 0.000202
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.000127075
diis-c [-3.97537213e-10  3.34402276e-05 -2.54951719e-02  1.02546173e+00]
  HOMO = -0.236455984069682  LUMO = 86.2212676277917
  mo_energy =
[-1.20271225e+02 -1.22542782e+01 -6.65495589e+00 -6.65495589e+00
 -6.65495589e+00 -1.16355127e+00 -2.36455984e-01 -2.36455984e-01
 -2.36455984e-01  8.62212676e+01  6.77129495e+02  3.93556184e+03
  2.96237402e+04  1.54740219e+05  6.64891980e+05  2.71962777e+06
  1.10459659e+07  4.65100870e+07]
E1 = -706.5529079955289  E_coul = 198.91316535463875
cycle= 4 E= -507.63974264089  delta_E= -4.04e-11  |g|= 3.75e-07  |ddm|= 3.46e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.5529079955289  E_coul = 198.91316535463875
  HOMO = -0.236455967668806  LUMO = 86.2212679670035
  mo_energy =
[-1.20271224e+02 -1.22542781e+01 -6.65495573e+00 -6.65495573e+00
 -6.65495573e+00 -1.16355127e+00 -2.36455968e-01 -2.36455968e-01
 -2.36455968e-01  8.62212680e+01  6.77129497e+02  3.93556185e+03
  2.96237402e+04  1.54740219e+05  6.64891980e+05  2.71962777e+06
  1.10459659e+07  4.65100870e+07]
E1 = -706.5529080327589  E_coul = 198.91316539186877
Extra cycle  E= -507.63974264089  delta_E= 1.14e-13  |g|= 6.48e-09  |ddm|= 1.65e-08
    CPU time for scf_cycle      0.10 sec, wall time      0.11 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 56.38552023750441
E1 = -706.5529080327589  E_coul = 198.91316539186877
init E= -507.63974264089
    CPU time for initialize scf      0.13 sec, wall time      0.13 sec
  HOMO = -0.236455967476789  LUMO = 86.2212679711539
  mo_energy =
[-1.20271224e+02 -1.22542780e+01 -6.65495573e+00 -6.65495573e+00
 -6.65495573e+00 -1.16355127e+00 -2.36455967e-01 -2.36455967e-01
 -2.36455967e-01  8.62212680e+01  6.77129497e+02  3.93556185e+03
  2.96237402e+04  1.54740219e+05  6.64891980e+05  2.71962777e+06
  1.10459659e+07  4.65100870e+07]
E1 = -706.5529080333226  E_coul = 198.91316539243255
cycle= 1 E= -507.63974264089  delta_E=    0  |g|= 3.21e-10  |ddm|= 2.56e-10
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -706.5529080333226  E_coul = 198.91316539243255
  HOMO = -0.23645596747408  LUMO = 86.2212679712142
  mo_energy =
[-1.20271224e+02 -1.22542780e+01 -6.65495573e+00 -6.65495573e+00
 -6.65495573e+00 -1.16355127e+00 -2.36455967e-01 -2.36455967e-01
 -2.36455967e-01  8.62212680e+01  6.77129497e+02  3.93556185e+03
  2.96237402e+04  1.54740219e+05  6.64891980e+05  2.71962777e+06
  1.10459659e+07  4.65100870e+07]
E1 = -706.5529080333326  E_coul = 198.9131653924424
Extra cycle  E= -507.63974264089  delta_E= -1.71e-13  |g|= 1.77e-10  |ddm|= 4.55e-12
    CPU time for scf_cycle      0.20 sec, wall time      0.20 sec
exp = [1.87954849e+07 4.69887121e+06 1.17471780e+06 2.93679448e+05
 7.34198749e+04 1.83521388e+04 2.23680845e+03 4.56012056e+02
 1.21507648e+02 3.75565226e+01 4.74110035e+00 3.91200928e-01
 8.59862998e+00 4.90849655e-01]
grad_E = [-1.14526740e-13  1.78034810e-11  6.91201431e-12  1.04161740e-08
 -3.47472749e-08  6.34248711e-06 -5.08424616e-06 -2.49916376e-05
  2.32301487e-05  7.28233300e-06  4.27936254e-06  1.65511238e-07
  1.15829033e-06  3.64192334e-06]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="BFGS",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((14, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.6988712134173084e+06,1.1747178033543271e+06,2.9367945083858178e+05,7.3419865393677101e+04,1.8353927627435987e+04,2.2341424145819028e+03,4.5688904996449571e+02,1.2173317272260677e+02,3.7593061247508530e+01,4.7412722556720146e+00,3.9120358491841306e-01,8.5986297237246045e+00,4.9084868336327880e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "12s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:17:35 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  18795484.8537        1
[INPUT] 0    0    [1    /1   ]  4698871.21341        1
[INPUT] 0    0    [1    /1   ]  1174717.80335        1
[INPUT] 0    0    [1    /1   ]  293679.447822        1
[INPUT] 0    0    [1    /1   ]  73419.8752033        1
[INPUT] 0    0    [1    /1   ]  18352.088722         1
[INPUT] 0    0    [1    /1   ]  2236.86003729        1
[INPUT] 0    0    [1    /1   ]  456.103407373        1
[INPUT] 0    0    [1    /1   ]  121.55235499         1
[INPUT] 0    0    [1    /1   ]  37.5675769802        1
[INPUT] 0    0    [1    /1   ]  4.74112119069        1
[INPUT] 0    0    [1    /1   ]  0.391202326006       1
[INPUT] 1    0    [1    /1   ]  8.59862627086        1
[INPUT] 1    0    [1    /1   ]  0.490849341548       1

nuclear repulsion = 0
number of shells = 14
number of NR pGTOs = 18
number of NR cGTOs = 18
basis = {'Ar': [[0, [18795484.853669267, 1.0]], [0, [4698871.213412148, 1.0]], [0, [1174717.8033518803, 1.0]], [0, [293679.4478216162, 1.0]], [0, [73419.87520325162, 1.0]], [0, [18352.088721970875, 1.0]], [0, [2236.8600372876303, 1.0]], [0, [456.10340737306177, 1.0]], [0, [121.55235499039593, 1.0]], [0, [37.567576980243004, 1.0]], [0, [4.741121190693196, 1.0]], [0, [0.39120232600577787, 1.0]], [1, [8.598626270857956, 1.0]], [1, [0.4908493415476853, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [18795484.85366927]
bas 1, expnt(s) = [4698871.21341215]
bas 2, expnt(s) = [1174717.80335188]
bas 3, expnt(s) = [293679.44782162]
bas 4, expnt(s) = [73419.87520325]
bas 5, expnt(s) = [18352.08872197]
bas 6, expnt(s) = [2236.86003729]
bas 7, expnt(s) = [456.10340737]
bas 8, expnt(s) = [121.55235499]
bas 9, expnt(s) = [37.56757698]
bas 10, expnt(s) = [4.74112119]
bas 11, expnt(s) = [0.39120233]
bas 12, expnt(s) = [8.59862627]
bas 13, expnt(s) = [0.49084934]
CPU time:       235.70
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  0  1  1  0 42 43  0]
 [ 0  0  1  1  0 44 45  0]
 [ 0  0  1  1  0 46 47  0]
 [ 0  1  1  1  0 48 49  0]
 [ 0  1  1  1  0 50 51  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.87954849e+07 7.21199097e+05 4.69887121e+06 2.54982386e+05
 1.17471780e+06 9.01498871e+04 2.93679448e+05 3.18727980e+04
 7.34198752e+04 1.12687373e+04 1.83520887e+04 3.98363142e+03
 2.23686004e+03 8.21758362e+02 4.56103407e+02 2.49351802e+02
 1.21552355e+02 9.24884619e+01 3.75675770e+01 3.83375992e+01
 4.74112119e+00 8.11756578e+00 3.91202326e-01 1.24972971e+00
 8.59862627e+00 4.29556934e+01 4.90849342e-01 1.19858726e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.31997869069012
cond(S) = 56.38861055608628
E1 = -688.8354934930671  E_coul = 184.9153020191891
init E= -503.920191473878
    CPU time for initialize scf      0.03 sec, wall time      0.03 sec
  HOMO = -0.680896086713554  LUMO = 84.9342277985643
  mo_energy =
[-1.21650500e+02 -1.32811715e+01 -7.62161188e+00 -7.62161188e+00
 -7.62161188e+00 -1.65070266e+00 -6.80896087e-01 -6.80896087e-01
 -6.80896087e-01  8.49342278e+01  6.76007063e+02  3.93485831e+03
  2.96232476e+04  1.54739658e+05  6.64891366e+05  2.71962713e+06
  1.10459652e+07  4.65100863e+07]
E1 = -706.5849406444829  E_coul = 198.94562539560488
cycle= 1 E= -507.639315248878  delta_E= -3.72  |g|= 0.318  |ddm|= 0.301
    CPU time for cycle= 1      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.420595
diis-c [-0.17689983  1.        ]
  HOMO = -0.236277282642542  LUMO = 86.2671069996078
  mo_energy =
[-1.20262435e+02 -1.22530742e+01 -6.65307629e+00 -6.65307629e+00
 -6.65307629e+00 -1.16348620e+00 -2.36277283e-01 -2.36277283e-01
 -2.36277283e-01  8.62671070e+01  6.77377772e+02  3.93610993e+03
  2.96243364e+04  1.54740676e+05  6.64892354e+05  2.71962810e+06
  1.10459662e+07  4.65100873e+07]
E1 = -706.553443288465  E_coul = 198.91369919752375
cycle= 2 E= -507.639744090941  delta_E= -0.000429  |g|= 0.00475  |ddm|= 0.0143
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00504542
diis-c [-2.54119131e-05 -5.00834916e-04  1.00050083e+00]
  HOMO = -0.23645293538086  LUMO = 86.2635847464311
  mo_energy =
[-1.20271090e+02 -1.22542658e+01 -6.65492170e+00 -6.65492170e+00
 -6.65492170e+00 -1.16355113e+00 -2.36452935e-01 -2.36452935e-01
 -2.36452935e-01  8.62635847e+01  6.77367176e+02  3.93609402e+03
  2.96243171e+04  1.54740656e+05  6.64892333e+05  2.71962808e+06
  1.10459661e+07  4.65100873e+07]
E1 = -706.5530017496276  E_coul = 198.9132575482023
cycle= 3 E= -507.639744201425  delta_E= -1.1e-07  |g|= 9.5e-05  |ddm|= 0.000202
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.000126987
diis-c [-3.96982016e-10  3.34430521e-05 -2.54871180e-02  1.02545367e+00]
  HOMO = -0.236455155734748  LUMO = 86.2635399576974
  mo_energy =
[-1.20271203e+02 -1.22542816e+01 -6.65494875e+00 -6.65494875e+00
 -6.65494875e+00 -1.16355179e+00 -2.36455156e-01 -2.36455156e-01
 -2.36455156e-01  8.62635400e+01  6.77367059e+02  3.93609387e+03
  2.96243169e+04  1.54740656e+05  6.64892333e+05  2.71962808e+06
  1.10459661e+07  4.65100873e+07]
E1 = -706.5529944805968  E_coul = 198.91325027913118
cycle= 4 E= -507.639744201466  delta_E= -4.04e-11  |g|= 3.75e-07  |ddm|= 3.46e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.5529944805968  E_coul = 198.91325027913118
  HOMO = -0.236455139359711  LUMO = 86.2635402965825
  mo_energy =
[-1.20271202e+02 -1.22542815e+01 -6.65494859e+00 -6.65494859e+00
 -6.65494859e+00 -1.16355178e+00 -2.36455139e-01 -2.36455139e-01
 -2.36455139e-01  8.62635403e+01  6.77367060e+02  3.93609387e+03
  2.96243169e+04  1.54740656e+05  6.64892333e+05  2.71962808e+06
  1.10459661e+07  4.65100873e+07]
E1 = -706.5529945177674  E_coul = 198.9132503163017
Extra cycle  E= -507.639744201466  delta_E=    0  |g|= 6.48e-09  |ddm|= 1.65e-08
    CPU time for scf_cycle      0.11 sec, wall time      0.11 sec
exp = [1.87954849e+07 4.69887121e+06 1.17471780e+06 2.93679448e+05
 7.34198752e+04 1.83520887e+04 2.23686004e+03 4.56103407e+02
 1.21552355e+02 3.75675770e+01 4.74112119e+00 3.91202326e-01
 8.59862627e+00 4.90849342e-01]
E = -507.63974420146565
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="BFGS",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((14, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.6988712134173084e+06,1.1747178033543271e+06,2.9367945083858178e+05,7.3419865393677101e+04,1.8353927627435987e+04,2.2341424145819028e+03,4.5688904996449571e+02,1.2173317272260677e+02,3.7593061247508530e+01,4.7412722556720146e+00,3.9120358491841306e-01,8.5986297237246045e+00,4.9084868336327880e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "12s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:17:36 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  18795484.8537        1
[INPUT] 0    0    [1    /1   ]  4698871.21341        1
[INPUT] 0    0    [1    /1   ]  1174717.80335        1
[INPUT] 0    0    [1    /1   ]  293679.447822        1
[INPUT] 0    0    [1    /1   ]  73419.8752033        1
[INPUT] 0    0    [1    /1   ]  18352.088722         1
[INPUT] 0    0    [1    /1   ]  2236.86003729        1
[INPUT] 0    0    [1    /1   ]  456.103407373        1
[INPUT] 0    0    [1    /1   ]  121.55235499         1
[INPUT] 0    0    [1    /1   ]  37.5675769802        1
[INPUT] 0    0    [1    /1   ]  4.74112119069        1
[INPUT] 0    0    [1    /1   ]  0.391202326006       1
[INPUT] 1    0    [1    /1   ]  8.59862627086        1
[INPUT] 1    0    [1    /1   ]  0.490849341548       1

nuclear repulsion = 0
number of shells = 14
number of NR pGTOs = 18
number of NR cGTOs = 18
basis = {'Ar': [[0, [18795484.853669267, 1.0]], [0, [4698871.213412148, 1.0]], [0, [1174717.8033518803, 1.0]], [0, [293679.4478216162, 1.0]], [0, [73419.87520325162, 1.0]], [0, [18352.088721970875, 1.0]], [0, [2236.8600372876303, 1.0]], [0, [456.10340737306177, 1.0]], [0, [121.55235499039593, 1.0]], [0, [37.567576980243004, 1.0]], [0, [4.741121190693196, 1.0]], [0, [0.39120232600577787, 1.0]], [1, [8.598626270857956, 1.0]], [1, [0.4908493415476853, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [18795484.85366927]
bas 1, expnt(s) = [4698871.21341215]
bas 2, expnt(s) = [1174717.80335188]
bas 3, expnt(s) = [293679.44782162]
bas 4, expnt(s) = [73419.87520325]
bas 5, expnt(s) = [18352.08872197]
bas 6, expnt(s) = [2236.86003729]
bas 7, expnt(s) = [456.10340737]
bas 8, expnt(s) = [121.55235499]
bas 9, expnt(s) = [37.56757698]
bas 10, expnt(s) = [4.74112119]
bas 11, expnt(s) = [0.39120233]
bas 12, expnt(s) = [8.59862627]
bas 13, expnt(s) = [0.49084934]
CPU time:       236.54
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  0  1  1  0 42 43  0]
 [ 0  0  1  1  0 44 45  0]
 [ 0  0  1  1  0 46 47  0]
 [ 0  1  1  1  0 48 49  0]
 [ 0  1  1  1  0 50 51  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.87954849e+07 7.21199097e+05 4.69887121e+06 2.54982386e+05
 1.17471780e+06 9.01498871e+04 2.93679448e+05 3.18727980e+04
 7.34198752e+04 1.12687373e+04 1.83520887e+04 3.98363142e+03
 2.23686004e+03 8.21758362e+02 4.56103407e+02 2.49351802e+02
 1.21552355e+02 9.24884619e+01 3.75675770e+01 3.83375992e+01
 4.74112119e+00 8.11756578e+00 3.91202326e-01 1.24972971e+00
 8.59862627e+00 4.29556934e+01 4.90849342e-01 1.19858726e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.31997869069012
cond(S) = 56.38861055608628
E1 = -688.8354934930671  E_coul = 184.9153020191891
init E= -503.920191473878
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.680896086713554  LUMO = 84.9342277985643
  mo_energy =
[-1.21650500e+02 -1.32811715e+01 -7.62161188e+00 -7.62161188e+00
 -7.62161188e+00 -1.65070266e+00 -6.80896087e-01 -6.80896087e-01
 -6.80896087e-01  8.49342278e+01  6.76007063e+02  3.93485831e+03
  2.96232476e+04  1.54739658e+05  6.64891366e+05  2.71962713e+06
  1.10459652e+07  4.65100863e+07]
E1 = -706.5849406444829  E_coul = 198.94562539560488
cycle= 1 E= -507.639315248878  delta_E= -3.72  |g|= 0.318  |ddm|= 0.301
    CPU time for cycle= 1      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.420595
diis-c [-0.17689983  1.        ]
  HOMO = -0.236277282642542  LUMO = 86.2671069996078
  mo_energy =
[-1.20262435e+02 -1.22530742e+01 -6.65307629e+00 -6.65307629e+00
 -6.65307629e+00 -1.16348620e+00 -2.36277283e-01 -2.36277283e-01
 -2.36277283e-01  8.62671070e+01  6.77377772e+02  3.93610993e+03
  2.96243364e+04  1.54740676e+05  6.64892354e+05  2.71962810e+06
  1.10459662e+07  4.65100873e+07]
E1 = -706.553443288465  E_coul = 198.91369919752375
cycle= 2 E= -507.639744090941  delta_E= -0.000429  |g|= 0.00475  |ddm|= 0.0143
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00504542
diis-c [-2.54119131e-05 -5.00834916e-04  1.00050083e+00]
  HOMO = -0.23645293538086  LUMO = 86.2635847464311
  mo_energy =
[-1.20271090e+02 -1.22542658e+01 -6.65492170e+00 -6.65492170e+00
 -6.65492170e+00 -1.16355113e+00 -2.36452935e-01 -2.36452935e-01
 -2.36452935e-01  8.62635847e+01  6.77367176e+02  3.93609402e+03
  2.96243171e+04  1.54740656e+05  6.64892333e+05  2.71962808e+06
  1.10459661e+07  4.65100873e+07]
E1 = -706.5530017496276  E_coul = 198.9132575482023
cycle= 3 E= -507.639744201425  delta_E= -1.1e-07  |g|= 9.5e-05  |ddm|= 0.000202
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.000126987
diis-c [-3.96982016e-10  3.34430521e-05 -2.54871180e-02  1.02545367e+00]
  HOMO = -0.236455155734748  LUMO = 86.2635399576974
  mo_energy =
[-1.20271203e+02 -1.22542816e+01 -6.65494875e+00 -6.65494875e+00
 -6.65494875e+00 -1.16355179e+00 -2.36455156e-01 -2.36455156e-01
 -2.36455156e-01  8.62635400e+01  6.77367059e+02  3.93609387e+03
  2.96243169e+04  1.54740656e+05  6.64892333e+05  2.71962808e+06
  1.10459661e+07  4.65100873e+07]
E1 = -706.5529944805968  E_coul = 198.91325027913118
cycle= 4 E= -507.639744201466  delta_E= -4.04e-11  |g|= 3.75e-07  |ddm|= 3.46e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.5529944805968  E_coul = 198.91325027913118
  HOMO = -0.236455139359711  LUMO = 86.2635402965825
  mo_energy =
[-1.20271202e+02 -1.22542815e+01 -6.65494859e+00 -6.65494859e+00
 -6.65494859e+00 -1.16355178e+00 -2.36455139e-01 -2.36455139e-01
 -2.36455139e-01  8.62635403e+01  6.77367060e+02  3.93609387e+03
  2.96243169e+04  1.54740656e+05  6.64892333e+05  2.71962808e+06
  1.10459661e+07  4.65100873e+07]
E1 = -706.5529945177674  E_coul = 198.9132503163017
Extra cycle  E= -507.639744201466  delta_E=    0  |g|= 6.48e-09  |ddm|= 1.65e-08
    CPU time for scf_cycle      0.10 sec, wall time      0.11 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 56.38861055608628
E1 = -706.5529945177674  E_coul = 198.9132503163017
init E= -507.639744201466
    CPU time for initialize scf      0.12 sec, wall time      0.12 sec
  HOMO = -0.236455139168039  LUMO = 86.2635403007257
  mo_energy =
[-1.20271202e+02 -1.22542815e+01 -6.65494859e+00 -6.65494859e+00
 -6.65494859e+00 -1.16355178e+00 -2.36455139e-01 -2.36455139e-01
 -2.36455139e-01  8.62635403e+01  6.77367060e+02  3.93609387e+03
  2.96243169e+04  1.54740656e+05  6.64892333e+05  2.71962808e+06
  1.10459661e+07  4.65100873e+07]
E1 = -706.5529945183305  E_coul = 198.91325031686475
cycle= 1 E= -507.639744201466  delta_E= -1.14e-13  |g|= 1.82e-10  |ddm|= 2.55e-10
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -706.5529945183305  E_coul = 198.91325031686475
  HOMO = -0.236455139165333  LUMO = 86.2635403007847
  mo_energy =
[-1.20271202e+02 -1.22542815e+01 -6.65494859e+00 -6.65494859e+00
 -6.65494859e+00 -1.16355178e+00 -2.36455139e-01 -2.36455139e-01
 -2.36455139e-01  8.62635403e+01  6.77367060e+02  3.93609387e+03
  2.96243169e+04  1.54740656e+05  6.64892333e+05  2.71962808e+06
  1.10459661e+07  4.65100873e+07]
E1 = -706.5529945183399  E_coul = 198.91325031687424
Extra cycle  E= -507.639744201466  delta_E= 1.14e-13  |g|= 2.61e-10  |ddm|= 4.52e-12
    CPU time for scf_cycle      0.19 sec, wall time      0.19 sec
exp = [1.87954849e+07 4.69887121e+06 1.17471780e+06 2.93679448e+05
 7.34198752e+04 1.83520887e+04 2.23686004e+03 4.56103407e+02
 1.21552355e+02 3.75675770e+01 4.74112119e+00 3.91202326e-01
 8.59862627e+00 4.90849342e-01]
grad_E = [-1.14507670e-13  1.78047603e-11  6.92223649e-12  1.04169096e-08
 -3.47447455e-08  6.34311209e-06 -5.14597067e-06 -2.65266142e-05
  3.38548646e-05  1.03813929e-05  5.52655990e-06  4.18928778e-07
  1.56121183e-06  5.13670398e-06]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="BFGS",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((14, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.6988712134173084e+06,1.1747178033543271e+06,2.9367945083858178e+05,7.3419865393677101e+04,1.8353927627435987e+04,2.2341424145819028e+03,4.5688904996449571e+02,1.2173317272260677e+02,3.7593061247508530e+01,4.7412722556720146e+00,3.9120358491841306e-01,8.5986297237246045e+00,4.9084868336327880e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "12s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:17:40 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  18795484.8537        1
[INPUT] 0    0    [1    /1   ]  4698871.21341        1
[INPUT] 0    0    [1    /1   ]  1174717.80335        1
[INPUT] 0    0    [1    /1   ]  293679.447593        1
[INPUT] 0    0    [1    /1   ]  73419.8759532        1
[INPUT] 0    0    [1    /1   ]  18351.9497313        1
[INPUT] 0    0    [1    /1   ]  2237.02649418        1
[INPUT] 0    0    [1    /1   ]  456.242547372        1
[INPUT] 0    0    [1    /1   ]  121.614937679        1
[INPUT] 0    0    [1    /1   ]  37.5827876798        1
[INPUT] 0    0    [1    /1   ]  4.74115145262        1
[INPUT] 0    0    [1    /1   ]  0.391204232709       1
[INPUT] 1    0    [1    /1   ]  8.5986212223         1
[INPUT] 1    0    [1    /1   ]  0.490848907609       1

nuclear repulsion = 0
number of shells = 14
number of NR pGTOs = 18
number of NR cGTOs = 18
basis = {'Ar': [[0, [18795484.85366927, 1.0]], [0, [4698871.213411758, 1.0]], [0, [1174717.8033517094, 1.0]], [0, [293679.4475934868, 1.0]], [0, [73419.875953161, 1.0]], [0, [18351.949731278084, 1.0]], [0, [2237.026494176545, 1.0]], [0, [456.2425473715484, 1.0]], [0, [121.61493767886485, 1.0]], [0, [37.58278767981268, 1.0]], [0, [4.741151452622479, 1.0]], [0, [0.39120423270932214, 1.0]], [1, [8.598621222297393, 1.0]], [1, [0.49084890760897576, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [18795484.85366927]
bas 1, expnt(s) = [4698871.21341176]
bas 2, expnt(s) = [1174717.80335171]
bas 3, expnt(s) = [293679.44759349]
bas 4, expnt(s) = [73419.87595316]
bas 5, expnt(s) = [18351.94973128]
bas 6, expnt(s) = [2237.02649418]
bas 7, expnt(s) = [456.24254737]
bas 8, expnt(s) = [121.61493768]
bas 9, expnt(s) = [37.58278768]
bas 10, expnt(s) = [4.74115145]
bas 11, expnt(s) = [0.39120423]
bas 12, expnt(s) = [8.59862122]
bas 13, expnt(s) = [0.49084891]
CPU time:       240.13
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  0  1  1  0 42 43  0]
 [ 0  0  1  1  0 44 45  0]
 [ 0  0  1  1  0 46 47  0]
 [ 0  1  1  1  0 48 49  0]
 [ 0  1  1  1  0 50 51  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.87954849e+07 7.21199097e+05 4.69887121e+06 2.54982386e+05
 1.17471780e+06 9.01498871e+04 2.93679448e+05 3.18727980e+04
 7.34198760e+04 1.12687374e+04 1.83519497e+04 3.98360879e+03
 2.23702649e+03 8.21804226e+02 4.56242547e+02 2.49408851e+02
 1.21614938e+02 9.25241737e+01 3.75827877e+01 3.83492405e+01
 4.74115145e+00 8.11760464e+00 3.91204233e-01 1.24973428e+00
 8.59862122e+00 4.29556619e+01 4.90848908e-01 1.19858594e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319977628340084
cond(S) = 56.39267445215945
E1 = -688.8354389622241  E_coul = 184.91535033387768
init E= -503.920088628346
    CPU time for initialize scf      0.03 sec, wall time      0.03 sec
  HOMO = -0.680896062669783  LUMO = 84.992831595542
  mo_energy =
[-1.21650483e+02 -1.32811807e+01 -7.62160583e+00 -7.62160583e+00
 -7.62160583e+00 -1.65070582e+00 -6.80896063e-01 -6.80896063e-01
 -6.80896063e-01  8.49928316e+01  6.76348106e+02  3.93573845e+03
  2.96243206e+04  1.54740412e+05  6.64891937e+05  2.71962762e+06
  1.10459656e+07  4.65100867e+07]
E1 = -706.5850270064577  E_coul = 198.94570847651673
cycle= 1 E= -507.639318529941  delta_E= -3.72  |g|= 0.317  |ddm|= 0.301
    CPU time for cycle= 1      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.4206
diis-c [-0.17690394  1.        ]
  HOMO = -0.236276364957607  LUMO = 86.3257848689717
  mo_energy =
[-1.20262414e+02 -1.22530799e+01 -6.65306864e+00 -6.65306864e+00
 -6.65306864e+00 -1.16348696e+00 -2.36276365e-01 -2.36276365e-01
 -2.36276365e-01  8.63257849e+01  6.77718829e+02  3.93699012e+03
  2.96254094e+04  1.54741430e+05  6.64892924e+05  2.71962859e+06
  1.10459666e+07  4.65100877e+07]
E1 = -706.5535611910526  E_coul = 198.91381427405503
cycle= 2 E= -507.639746916998  delta_E= -0.000428  |g|= 0.00475  |ddm|= 0.0143
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00504279
diis-c [-2.53849313e-05 -5.03501570e-04  1.00050350e+00]
  HOMO = -0.236451806917904  LUMO = 86.3222647489349
  mo_energy =
[-1.20271061e+02 -1.22542701e+01 -6.65491194e+00 -6.65491194e+00
 -6.65491194e+00 -1.16355181e+00 -2.36451807e-01 -2.36451807e-01
 -2.36451807e-01  8.63222647e+01  6.77708241e+02  3.93697422e+03
  2.96253902e+04  1.54741410e+05  6.64892904e+05  2.71962857e+06
  1.10459666e+07  4.65100877e+07]
E1 = -706.5531202804964  E_coul = 198.91337325320745
cycle= 3 E= -507.639747027289  delta_E= -1.1e-07  |g|= 9.49e-05  |ddm|= 0.000202
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.000126864
diis-c [-3.96215824e-10  3.34463032e-05 -2.54759569e-02  1.02544251e+00]
  HOMO = -0.236454023247887  LUMO = 86.3222200225334
  mo_energy =
[-1.20271175e+02 -1.22542859e+01 -6.65493895e+00 -6.65493895e+00
 -6.65493895e+00 -1.16355247e+00 -2.36454023e-01 -2.36454023e-01
 -2.36454023e-01  8.63222200e+01  6.77708123e+02  3.93697407e+03
  2.96253900e+04  1.54741409e+05  6.64892904e+05  2.71962857e+06
  1.10459666e+07  4.65100877e+07]
E1 = -706.5531130261138  E_coul = 198.91336599878463
cycle= 4 E= -507.639747027329  delta_E= -4.02e-11  |g|= 3.74e-07  |ddm|= 3.45e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.5531130261138  E_coul = 198.91336599878463
  HOMO = -0.236454006908584  LUMO = 86.3222203609679
  mo_energy =
[-1.20271174e+02 -1.22542858e+01 -6.65493879e+00 -6.65493879e+00
 -6.65493879e+00 -1.16355246e+00 -2.36454007e-01 -2.36454007e-01
 -2.36454007e-01  8.63222204e+01  6.77708124e+02  3.93697408e+03
  2.96253900e+04  1.54741409e+05  6.64892904e+05  2.71962857e+06
  1.10459666e+07  4.65100877e+07]
E1 = -706.5531130632008  E_coul = 198.91336603587158
Extra cycle  E= -507.639747027329  delta_E= -5.68e-14  |g|= 6.46e-09  |ddm|= 1.65e-08
    CPU time for scf_cycle      0.10 sec, wall time      0.11 sec
exp = [1.87954849e+07 4.69887121e+06 1.17471780e+06 2.93679448e+05
 7.34198760e+04 1.83519497e+04 2.23702649e+03 4.56242547e+02
 1.21614938e+02 3.75827877e+01 4.74115145e+00 3.91204233e-01
 8.59862122e+00 4.90848908e-01]
E = -507.63974702732924
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="BFGS",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((14, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.6988712134173084e+06,1.1747178033543271e+06,2.9367945083858178e+05,7.3419865393677101e+04,1.8353927627435987e+04,2.2341424145819028e+03,4.5688904996449571e+02,1.2173317272260677e+02,3.7593061247508530e+01,4.7412722556720146e+00,3.9120358491841306e-01,8.5986297237246045e+00,4.9084868336327880e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "12s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:17:40 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  18795484.8537        1
[INPUT] 0    0    [1    /1   ]  4698871.21341        1
[INPUT] 0    0    [1    /1   ]  1174717.80335        1
[INPUT] 0    0    [1    /1   ]  293679.447593        1
[INPUT] 0    0    [1    /1   ]  73419.8759532        1
[INPUT] 0    0    [1    /1   ]  18351.9497313        1
[INPUT] 0    0    [1    /1   ]  2237.02649418        1
[INPUT] 0    0    [1    /1   ]  456.242547372        1
[INPUT] 0    0    [1    /1   ]  121.614937679        1
[INPUT] 0    0    [1    /1   ]  37.5827876798        1
[INPUT] 0    0    [1    /1   ]  4.74115145262        1
[INPUT] 0    0    [1    /1   ]  0.391204232709       1
[INPUT] 1    0    [1    /1   ]  8.5986212223         1
[INPUT] 1    0    [1    /1   ]  0.490848907609       1

nuclear repulsion = 0
number of shells = 14
number of NR pGTOs = 18
number of NR cGTOs = 18
basis = {'Ar': [[0, [18795484.85366927, 1.0]], [0, [4698871.213411758, 1.0]], [0, [1174717.8033517094, 1.0]], [0, [293679.4475934868, 1.0]], [0, [73419.875953161, 1.0]], [0, [18351.949731278084, 1.0]], [0, [2237.026494176545, 1.0]], [0, [456.2425473715484, 1.0]], [0, [121.61493767886485, 1.0]], [0, [37.58278767981268, 1.0]], [0, [4.741151452622479, 1.0]], [0, [0.39120423270932214, 1.0]], [1, [8.598621222297393, 1.0]], [1, [0.49084890760897576, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [18795484.85366927]
bas 1, expnt(s) = [4698871.21341176]
bas 2, expnt(s) = [1174717.80335171]
bas 3, expnt(s) = [293679.44759349]
bas 4, expnt(s) = [73419.87595316]
bas 5, expnt(s) = [18351.94973128]
bas 6, expnt(s) = [2237.02649418]
bas 7, expnt(s) = [456.24254737]
bas 8, expnt(s) = [121.61493768]
bas 9, expnt(s) = [37.58278768]
bas 10, expnt(s) = [4.74115145]
bas 11, expnt(s) = [0.39120423]
bas 12, expnt(s) = [8.59862122]
bas 13, expnt(s) = [0.49084891]
CPU time:       241.00
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  0  1  1  0 42 43  0]
 [ 0  0  1  1  0 44 45  0]
 [ 0  0  1  1  0 46 47  0]
 [ 0  1  1  1  0 48 49  0]
 [ 0  1  1  1  0 50 51  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.87954849e+07 7.21199097e+05 4.69887121e+06 2.54982386e+05
 1.17471780e+06 9.01498871e+04 2.93679448e+05 3.18727980e+04
 7.34198760e+04 1.12687374e+04 1.83519497e+04 3.98360879e+03
 2.23702649e+03 8.21804226e+02 4.56242547e+02 2.49408851e+02
 1.21614938e+02 9.25241737e+01 3.75827877e+01 3.83492405e+01
 4.74115145e+00 8.11760464e+00 3.91204233e-01 1.24973428e+00
 8.59862122e+00 4.29556619e+01 4.90848908e-01 1.19858594e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319977628340084
cond(S) = 56.39267445215945
E1 = -688.8354389622241  E_coul = 184.91535033387768
init E= -503.920088628346
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.680896062669783  LUMO = 84.992831595542
  mo_energy =
[-1.21650483e+02 -1.32811807e+01 -7.62160583e+00 -7.62160583e+00
 -7.62160583e+00 -1.65070582e+00 -6.80896063e-01 -6.80896063e-01
 -6.80896063e-01  8.49928316e+01  6.76348106e+02  3.93573845e+03
  2.96243206e+04  1.54740412e+05  6.64891937e+05  2.71962762e+06
  1.10459656e+07  4.65100867e+07]
E1 = -706.5850270064577  E_coul = 198.94570847651673
cycle= 1 E= -507.639318529941  delta_E= -3.72  |g|= 0.317  |ddm|= 0.301
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.4206
diis-c [-0.17690394  1.        ]
  HOMO = -0.236276364957607  LUMO = 86.3257848689717
  mo_energy =
[-1.20262414e+02 -1.22530799e+01 -6.65306864e+00 -6.65306864e+00
 -6.65306864e+00 -1.16348696e+00 -2.36276365e-01 -2.36276365e-01
 -2.36276365e-01  8.63257849e+01  6.77718829e+02  3.93699012e+03
  2.96254094e+04  1.54741430e+05  6.64892924e+05  2.71962859e+06
  1.10459666e+07  4.65100877e+07]
E1 = -706.5535611910526  E_coul = 198.91381427405503
cycle= 2 E= -507.639746916998  delta_E= -0.000428  |g|= 0.00475  |ddm|= 0.0143
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.00504279
diis-c [-2.53849313e-05 -5.03501570e-04  1.00050350e+00]
  HOMO = -0.236451806917904  LUMO = 86.3222647489349
  mo_energy =
[-1.20271061e+02 -1.22542701e+01 -6.65491194e+00 -6.65491194e+00
 -6.65491194e+00 -1.16355181e+00 -2.36451807e-01 -2.36451807e-01
 -2.36451807e-01  8.63222647e+01  6.77708241e+02  3.93697422e+03
  2.96253902e+04  1.54741410e+05  6.64892904e+05  2.71962857e+06
  1.10459666e+07  4.65100877e+07]
E1 = -706.5531202804964  E_coul = 198.91337325320745
cycle= 3 E= -507.639747027289  delta_E= -1.1e-07  |g|= 9.49e-05  |ddm|= 0.000202
    CPU time for cycle= 3      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.000126864
diis-c [-3.96215824e-10  3.34463032e-05 -2.54759569e-02  1.02544251e+00]
  HOMO = -0.236454023247887  LUMO = 86.3222200225334
  mo_energy =
[-1.20271175e+02 -1.22542859e+01 -6.65493895e+00 -6.65493895e+00
 -6.65493895e+00 -1.16355247e+00 -2.36454023e-01 -2.36454023e-01
 -2.36454023e-01  8.63222200e+01  6.77708123e+02  3.93697407e+03
  2.96253900e+04  1.54741409e+05  6.64892904e+05  2.71962857e+06
  1.10459666e+07  4.65100877e+07]
E1 = -706.5531130261138  E_coul = 198.91336599878463
cycle= 4 E= -507.639747027329  delta_E= -4.02e-11  |g|= 3.74e-07  |ddm|= 3.45e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.5531130261138  E_coul = 198.91336599878463
  HOMO = -0.236454006908584  LUMO = 86.3222203609679
  mo_energy =
[-1.20271174e+02 -1.22542858e+01 -6.65493879e+00 -6.65493879e+00
 -6.65493879e+00 -1.16355246e+00 -2.36454007e-01 -2.36454007e-01
 -2.36454007e-01  8.63222204e+01  6.77708124e+02  3.93697408e+03
  2.96253900e+04  1.54741409e+05  6.64892904e+05  2.71962857e+06
  1.10459666e+07  4.65100877e+07]
E1 = -706.5531130632008  E_coul = 198.91336603587158
Extra cycle  E= -507.639747027329  delta_E= -5.68e-14  |g|= 6.46e-09  |ddm|= 1.65e-08
    CPU time for scf_cycle      0.10 sec, wall time      0.10 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 56.39267445215945
E1 = -706.5531130632008  E_coul = 198.91336603587158
init E= -507.639747027329
    CPU time for initialize scf      0.12 sec, wall time      0.12 sec
  HOMO = -0.236454006717408  LUMO = 86.3222203651049
  mo_energy =
[-1.20271174e+02 -1.22542857e+01 -6.65493879e+00 -6.65493879e+00
 -6.65493879e+00 -1.16355246e+00 -2.36454007e-01 -2.36454007e-01
 -2.36454007e-01  8.63222204e+01  6.77708124e+02  3.93697408e+03
  2.96253900e+04  1.54741409e+05  6.64892904e+05  2.71962857e+06
  1.10459666e+07  4.65100877e+07]
E1 = -706.5531130637622  E_coul = 198.9133660364331
cycle= 1 E= -507.639747027329  delta_E= 1.14e-13  |g|= 2.42e-10  |ddm|= 2.55e-10
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -706.5531130637622  E_coul = 198.9133660364331
  HOMO = -0.236454006714709  LUMO = 86.322220365165
  mo_energy =
[-1.20271174e+02 -1.22542857e+01 -6.65493879e+00 -6.65493879e+00
 -6.65493879e+00 -1.16355246e+00 -2.36454007e-01 -2.36454007e-01
 -2.36454007e-01  8.63222204e+01  6.77708124e+02  3.93697408e+03
  2.96253900e+04  1.54741409e+05  6.64892904e+05  2.71962857e+06
  1.10459666e+07  4.65100877e+07]
E1 = -706.5531130637713  E_coul = 198.91336603644228
Extra cycle  E= -507.639747027329  delta_E= 1.14e-13  |g|= 1.2e-10  |ddm|= 4.49e-12
    CPU time for scf_cycle      0.19 sec, wall time      0.19 sec
exp = [1.87954849e+07 4.69887121e+06 1.17471780e+06 2.93679448e+05
 7.34198760e+04 1.83519497e+04 2.23702649e+03 4.56242547e+02
 1.21614938e+02 3.75827877e+01 4.74115145e+00 3.91204233e-01
 8.59862122e+00 4.90848908e-01]
grad_E = [-1.14532276e-13  1.78032717e-11  6.90941645e-12  1.04160758e-08
 -3.47502410e-08  6.34285620e-06 -5.21219578e-06 -2.85164807e-05
  4.78879892e-05  1.44868870e-05  7.19424431e-06  7.46276314e-07
  2.09846444e-06  7.11985166e-06]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="BFGS",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((14, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.6988712134173084e+06,1.1747178033543271e+06,2.9367945083858178e+05,7.3419865393677101e+04,1.8353927627435987e+04,2.2341424145819028e+03,4.5688904996449571e+02,1.2173317272260677e+02,3.7593061247508530e+01,4.7412722556720146e+00,3.9120358491841306e-01,8.5986297237246045e+00,4.9084868336327880e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "12s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:17:44 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  18795484.8537        1
[INPUT] 0    0    [1    /1   ]  4698871.21341        1
[INPUT] 0    0    [1    /1   ]  1174717.80335        1
[INPUT] 0    0    [1    /1   ]  293679.447075        1
[INPUT] 0    0    [1    /1   ]  73419.8776548        1
[INPUT] 0    0    [1    /1   ]  18351.6335711        1
[INPUT] 0    0    [1    /1   ]  2237.42436386        1
[INPUT] 0    0    [1    /1   ]  456.463744494        1
[INPUT] 0    0    [1    /1   ]  121.706064351        1
[INPUT] 0    0    [1    /1   ]  37.6044991164        1
[INPUT] 0    0    [1    /1   ]  4.74119729443        1
[INPUT] 0    0    [1    /1   ]  0.391206926297       1
[INPUT] 1    0    [1    /1   ]  8.59861408717        1
[INPUT] 1    0    [1    /1   ]  0.490848281964       1

nuclear repulsion = 0
number of shells = 14
number of NR pGTOs = 18
number of NR cGTOs = 18
basis = {'Ar': [[0, [18795484.853669275, 1.0]], [0, [4698871.213410871, 1.0]], [0, [1174717.8033513138, 1.0]], [0, [293679.447074612, 1.0]], [0, [73419.87765476361, 1.0]], [0, [18351.63357112817, 1.0]], [0, [2237.4243638569906, 1.0]], [0, [456.4637444940725, 1.0]], [0, [121.70606435089068, 1.0]], [0, [37.6044991164229, 1.0]], [0, [4.741197294425785, 1.0]], [0, [0.3912069262965817, 1.0]], [1, [8.598614087166318, 1.0]], [1, [0.4908482819639687, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [18795484.85366927]
bas 1, expnt(s) = [4698871.21341087]
bas 2, expnt(s) = [1174717.80335131]
bas 3, expnt(s) = [293679.44707461]
bas 4, expnt(s) = [73419.87765476]
bas 5, expnt(s) = [18351.63357113]
bas 6, expnt(s) = [2237.42436386]
bas 7, expnt(s) = [456.46374449]
bas 8, expnt(s) = [121.70606435]
bas 9, expnt(s) = [37.60449912]
bas 10, expnt(s) = [4.74119729]
bas 11, expnt(s) = [0.39120693]
bas 12, expnt(s) = [8.59861409]
bas 13, expnt(s) = [0.49084828]
CPU time:       244.63
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  0  1  1  0 42 43  0]
 [ 0  0  1  1  0 44 45  0]
 [ 0  0  1  1  0 46 47  0]
 [ 0  1  1  1  0 48 49  0]
 [ 0  1  1  1  0 50 51  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.87954849e+07 7.21199097e+05 4.69887121e+06 2.54982386e+05
 1.17471780e+06 9.01498871e+04 2.93679447e+05 3.18727979e+04
 7.34198777e+04 1.12687376e+04 1.83516336e+04 3.98355732e+03
 2.23742436e+03 8.21913846e+02 4.56463744e+02 2.49499535e+02
 1.21706064e+02 9.25761655e+01 3.76044991e+01 3.83658549e+01
 4.74119729e+00 8.11766351e+00 3.91206926e-01 1.24974073e+00
 8.59861409e+00 4.29556173e+01 4.90848282e-01 1.19858403e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319976072775745
cond(S) = 56.398157461405034
E1 = -688.8354034773378  E_coul = 184.9154183388918
init E= -503.919985138446
    CPU time for initialize scf      0.03 sec, wall time      0.03 sec
  HOMO = -0.680896073021525  LUMO = 85.0773518464492
  mo_energy =
[-1.21650462e+02 -1.32811931e+01 -7.62159727e+00 -7.62159727e+00
 -7.62159727e+00 -1.65071033e+00 -6.80896073e-01 -6.80896073e-01
 -6.80896073e-01  8.50773518e+01  6.76858765e+02  3.93724356e+03
  2.96263215e+04  1.54741743e+05  6.64892893e+05  2.71962842e+06
  1.10459663e+07  4.65100874e+07]
E1 = -706.5851490893875  E_coul = 198.94582482155215
cycle= 1 E= -507.639324267835  delta_E= -3.72  |g|= 0.317  |ddm|= 0.301
    CPU time for cycle= 1      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.420603
diis-c [-0.17690668  1.        ]
  HOMO = -0.236275072668167  LUMO = 86.4104115927119
  mo_energy =
[-1.20262387e+02 -1.22530872e+01 -6.65305777e+00 -6.65305777e+00
 -6.65305777e+00 -1.16348800e+00 -2.36275073e-01 -2.36275073e-01
 -2.36275073e-01  8.64104116e+01  6.78229504e+02  3.93849528e+03
  2.96274104e+04  1.54742761e+05  6.64893880e+05  2.71962939e+06
  1.10459673e+07  4.65100883e+07]
E1 = -706.553728646211  E_coul = 198.91397664587384
cycle= 2 E= -507.639752000337  delta_E= -0.000428  |g|= 0.00474  |ddm|= 0.0143
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00503901
diis-c [-2.53461217e-05 -5.07294135e-04  1.00050729e+00]
  HOMO = -0.236450211260416  LUMO = 86.4068945323318
  mo_energy =
[-1.20271023e+02 -1.22542754e+01 -6.65489805e+00 -6.65489805e+00
 -6.65489805e+00 -1.16355273e+00 -2.36450211e-01 -2.36450211e-01
 -2.36450211e-01  8.64068945e+01  6.78218926e+02  3.93847940e+03
  2.96273912e+04  1.54742741e+05  6.64893860e+05  2.71962937e+06
  1.10459673e+07  4.65100883e+07]
E1 = -706.5532886399019  E_coul = 198.91353652955004
cycle= 3 E= -507.639752110352  delta_E= -1.1e-07  |g|= 9.47e-05  |ddm|= 0.000202
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.000126687
diis-c [-3.95108269e-10  3.34515323e-05 -2.54599188e-02  1.02542647e+00]
  HOMO = -0.236452421810577  LUMO = 86.40684989549
  mo_energy =
[-1.20271136e+02 -1.22542911e+01 -6.65492499e+00 -6.65492499e+00
 -6.65492499e+00 -1.16355339e+00 -2.36452422e-01 -2.36452422e-01
 -2.36452422e-01  8.64068499e+01  6.78218809e+02  3.93847925e+03
  2.96273910e+04  1.54742741e+05  6.64893860e+05  2.71962937e+06
  1.10459673e+07  4.65100883e+07]
E1 = -706.5532814065643  E_coul = 198.91352929617224
cycle= 4 E= -507.639752110392  delta_E= -4.02e-11  |g|= 3.73e-07  |ddm|= 3.44e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.5532814065643  E_coul = 198.91352929617224
  HOMO = -0.236452405522791  LUMO = 86.4068502332698
  mo_energy =
[-1.20271135e+02 -1.22542910e+01 -6.65492483e+00 -6.65492483e+00
 -6.65492483e+00 -1.16355338e+00 -2.36452406e-01 -2.36452406e-01
 -2.36452406e-01  8.64068502e+01  6.78218810e+02  3.93847926e+03
  2.96273910e+04  1.54742741e+05  6.64893860e+05  2.71962937e+06
  1.10459673e+07  4.65100883e+07]
E1 = -706.5532814435322  E_coul = 198.91352933314027
Extra cycle  E= -507.639752110392  delta_E= 1.71e-13  |g|= 6.45e-09  |ddm|= 1.64e-08
    CPU time for scf_cycle      0.10 sec, wall time      0.11 sec
exp = [1.87954849e+07 4.69887121e+06 1.17471780e+06 2.93679447e+05
 7.34198777e+04 1.83516336e+04 2.23742436e+03 4.56463744e+02
 1.21706064e+02 3.76044991e+01 4.74119729e+00 3.91206926e-01
 8.59861409e+00 4.90848282e-01]
E = -507.63975211039195
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="BFGS",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((14, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.6988712134173084e+06,1.1747178033543271e+06,2.9367945083858178e+05,7.3419865393677101e+04,1.8353927627435987e+04,2.2341424145819028e+03,4.5688904996449571e+02,1.2173317272260677e+02,3.7593061247508530e+01,4.7412722556720146e+00,3.9120358491841306e-01,8.5986297237246045e+00,4.9084868336327880e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "12s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:17:45 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  18795484.8537        1
[INPUT] 0    0    [1    /1   ]  4698871.21341        1
[INPUT] 0    0    [1    /1   ]  1174717.80335        1
[INPUT] 0    0    [1    /1   ]  293679.447075        1
[INPUT] 0    0    [1    /1   ]  73419.8776548        1
[INPUT] 0    0    [1    /1   ]  18351.6335711        1
[INPUT] 0    0    [1    /1   ]  2237.42436386        1
[INPUT] 0    0    [1    /1   ]  456.463744494        1
[INPUT] 0    0    [1    /1   ]  121.706064351        1
[INPUT] 0    0    [1    /1   ]  37.6044991164        1
[INPUT] 0    0    [1    /1   ]  4.74119729443        1
[INPUT] 0    0    [1    /1   ]  0.391206926297       1
[INPUT] 1    0    [1    /1   ]  8.59861408717        1
[INPUT] 1    0    [1    /1   ]  0.490848281964       1

nuclear repulsion = 0
number of shells = 14
number of NR pGTOs = 18
number of NR cGTOs = 18
basis = {'Ar': [[0, [18795484.853669275, 1.0]], [0, [4698871.213410871, 1.0]], [0, [1174717.8033513138, 1.0]], [0, [293679.447074612, 1.0]], [0, [73419.87765476361, 1.0]], [0, [18351.63357112817, 1.0]], [0, [2237.4243638569906, 1.0]], [0, [456.4637444940725, 1.0]], [0, [121.70606435089068, 1.0]], [0, [37.6044991164229, 1.0]], [0, [4.741197294425785, 1.0]], [0, [0.3912069262965817, 1.0]], [1, [8.598614087166318, 1.0]], [1, [0.4908482819639687, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [18795484.85366927]
bas 1, expnt(s) = [4698871.21341087]
bas 2, expnt(s) = [1174717.80335131]
bas 3, expnt(s) = [293679.44707461]
bas 4, expnt(s) = [73419.87765476]
bas 5, expnt(s) = [18351.63357113]
bas 6, expnt(s) = [2237.42436386]
bas 7, expnt(s) = [456.46374449]
bas 8, expnt(s) = [121.70606435]
bas 9, expnt(s) = [37.60449912]
bas 10, expnt(s) = [4.74119729]
bas 11, expnt(s) = [0.39120693]
bas 12, expnt(s) = [8.59861409]
bas 13, expnt(s) = [0.49084828]
CPU time:       245.49
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  0  1  1  0 42 43  0]
 [ 0  0  1  1  0 44 45  0]
 [ 0  0  1  1  0 46 47  0]
 [ 0  1  1  1  0 48 49  0]
 [ 0  1  1  1  0 50 51  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.87954849e+07 7.21199097e+05 4.69887121e+06 2.54982386e+05
 1.17471780e+06 9.01498871e+04 2.93679447e+05 3.18727979e+04
 7.34198777e+04 1.12687376e+04 1.83516336e+04 3.98355732e+03
 2.23742436e+03 8.21913846e+02 4.56463744e+02 2.49499535e+02
 1.21706064e+02 9.25761655e+01 3.76044991e+01 3.83658549e+01
 4.74119729e+00 8.11766351e+00 3.91206926e-01 1.24974073e+00
 8.59861409e+00 4.29556173e+01 4.90848282e-01 1.19858403e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319976072775745
cond(S) = 56.398157461405034
E1 = -688.8354034773378  E_coul = 184.9154183388918
init E= -503.919985138446
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.680896073021525  LUMO = 85.0773518464492
  mo_energy =
[-1.21650462e+02 -1.32811931e+01 -7.62159727e+00 -7.62159727e+00
 -7.62159727e+00 -1.65071033e+00 -6.80896073e-01 -6.80896073e-01
 -6.80896073e-01  8.50773518e+01  6.76858765e+02  3.93724356e+03
  2.96263215e+04  1.54741743e+05  6.64892893e+05  2.71962842e+06
  1.10459663e+07  4.65100874e+07]
E1 = -706.5851490893875  E_coul = 198.94582482155215
cycle= 1 E= -507.639324267835  delta_E= -3.72  |g|= 0.317  |ddm|= 0.301
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.420603
diis-c [-0.17690668  1.        ]
  HOMO = -0.236275072668167  LUMO = 86.4104115927119
  mo_energy =
[-1.20262387e+02 -1.22530872e+01 -6.65305777e+00 -6.65305777e+00
 -6.65305777e+00 -1.16348800e+00 -2.36275073e-01 -2.36275073e-01
 -2.36275073e-01  8.64104116e+01  6.78229504e+02  3.93849528e+03
  2.96274104e+04  1.54742761e+05  6.64893880e+05  2.71962939e+06
  1.10459673e+07  4.65100883e+07]
E1 = -706.553728646211  E_coul = 198.91397664587384
cycle= 2 E= -507.639752000337  delta_E= -0.000428  |g|= 0.00474  |ddm|= 0.0143
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00503901
diis-c [-2.53461217e-05 -5.07294135e-04  1.00050729e+00]
  HOMO = -0.236450211260416  LUMO = 86.4068945323318
  mo_energy =
[-1.20271023e+02 -1.22542754e+01 -6.65489805e+00 -6.65489805e+00
 -6.65489805e+00 -1.16355273e+00 -2.36450211e-01 -2.36450211e-01
 -2.36450211e-01  8.64068945e+01  6.78218926e+02  3.93847940e+03
  2.96273912e+04  1.54742741e+05  6.64893860e+05  2.71962937e+06
  1.10459673e+07  4.65100883e+07]
E1 = -706.5532886399019  E_coul = 198.91353652955004
cycle= 3 E= -507.639752110352  delta_E= -1.1e-07  |g|= 9.47e-05  |ddm|= 0.000202
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.000126687
diis-c [-3.95108269e-10  3.34515323e-05 -2.54599188e-02  1.02542647e+00]
  HOMO = -0.236452421810577  LUMO = 86.40684989549
  mo_energy =
[-1.20271136e+02 -1.22542911e+01 -6.65492499e+00 -6.65492499e+00
 -6.65492499e+00 -1.16355339e+00 -2.36452422e-01 -2.36452422e-01
 -2.36452422e-01  8.64068499e+01  6.78218809e+02  3.93847925e+03
  2.96273910e+04  1.54742741e+05  6.64893860e+05  2.71962937e+06
  1.10459673e+07  4.65100883e+07]
E1 = -706.5532814065643  E_coul = 198.91352929617224
cycle= 4 E= -507.639752110392  delta_E= -4.02e-11  |g|= 3.73e-07  |ddm|= 3.44e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.5532814065643  E_coul = 198.91352929617224
  HOMO = -0.236452405522791  LUMO = 86.4068502332698
  mo_energy =
[-1.20271135e+02 -1.22542910e+01 -6.65492483e+00 -6.65492483e+00
 -6.65492483e+00 -1.16355338e+00 -2.36452406e-01 -2.36452406e-01
 -2.36452406e-01  8.64068502e+01  6.78218810e+02  3.93847926e+03
  2.96273910e+04  1.54742741e+05  6.64893860e+05  2.71962937e+06
  1.10459673e+07  4.65100883e+07]
E1 = -706.5532814435322  E_coul = 198.91352933314027
Extra cycle  E= -507.639752110392  delta_E= 1.71e-13  |g|= 6.45e-09  |ddm|= 1.64e-08
    CPU time for scf_cycle      0.10 sec, wall time      0.11 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 56.398157461405034
E1 = -706.5532814435322  E_coul = 198.91352933314027
init E= -507.639752110392
    CPU time for initialize scf      0.12 sec, wall time      0.12 sec
  HOMO = -0.236452405332316  LUMO = 86.4068502373987
  mo_energy =
[-1.20271135e+02 -1.22542910e+01 -6.65492483e+00 -6.65492483e+00
 -6.65492483e+00 -1.16355338e+00 -2.36452405e-01 -2.36452405e-01
 -2.36452405e-01  8.64068502e+01  6.78218810e+02  3.93847926e+03
  2.96273910e+04  1.54742741e+05  6.64893860e+05  2.71962937e+06
  1.10459673e+07  4.65100883e+07]
E1 = -706.5532814440912  E_coul = 198.91352933369944
cycle= 1 E= -507.639752110392  delta_E= 1.71e-13  |g|= 1.42e-10  |ddm|= 2.54e-10
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -706.5532814440912  E_coul = 198.91352933369944
  HOMO = -0.236452405329628  LUMO = 86.4068502374587
  mo_energy =
[-1.20271135e+02 -1.22542910e+01 -6.65492483e+00 -6.65492483e+00
 -6.65492483e+00 -1.16355338e+00 -2.36452405e-01 -2.36452405e-01
 -2.36452405e-01  8.64068502e+01  6.78218810e+02  3.93847926e+03
  2.96273910e+04  1.54742741e+05  6.64893860e+05  2.71962937e+06
  1.10459673e+07  4.65100883e+07]
E1 = -706.5532814441003  E_coul = 198.91352933370865
Extra cycle  E= -507.639752110392  delta_E= 1.14e-13  |g|= 1.96e-10  |ddm|= 4.49e-12
    CPU time for scf_cycle      0.20 sec, wall time      0.20 sec
exp = [1.87954849e+07 4.69887121e+06 1.17471780e+06 2.93679447e+05
 7.34198777e+04 1.83516336e+04 2.23742436e+03 4.56463744e+02
 1.21706064e+02 3.76044991e+01 4.74119729e+00 3.91206926e-01
 8.59861409e+00 4.90848282e-01]
grad_E = [-1.14652687e-13  1.77956958e-11  6.84602044e-12  1.04117884e-08
 -3.47731372e-08  6.34061862e-06 -5.27529133e-06 -3.11512757e-05
  6.69313305e-05  2.00979383e-05  9.52326846e-06  1.14399603e-06
  2.83483268e-06  9.78502038e-06]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="BFGS",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((14, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.6988712134173084e+06,1.1747178033543271e+06,2.9367945083858178e+05,7.3419865393677101e+04,1.8353927627435987e+04,2.2341424145819028e+03,4.5688904996449571e+02,1.2173317272260677e+02,3.7593061247508530e+01,4.7412722556720146e+00,3.9120358491841306e-01,8.5986297237246045e+00,4.9084868336327880e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "12s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:17:48 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  18795484.8537        1
[INPUT] 0    0    [1    /1   ]  4698871.21341        1
[INPUT] 0    0    [1    /1   ]  1174717.80335        1
[INPUT] 0    0    [1    /1   ]  293679.445983        1
[INPUT] 0    0    [1    /1   ]  73419.8812289        1
[INPUT] 0    0    [1    /1   ]  18350.968646         1
[INPUT] 0    0    [1    /1   ]  2238.28200487        1
[INPUT] 0    0    [1    /1   ]  456.82553471         1
[INPUT] 0    0    [1    /1   ]  121.842111515        1
[INPUT] 0    0    [1    /1   ]  37.6361668078        1
[INPUT] 0    0    [1    /1   ]  4.7412686672         1
[INPUT] 0    0    [1    /1   ]  0.391210807152       1
[INPUT] 1    0    [1    /1   ]  8.59860378227        1
[INPUT] 1    0    [1    /1   ]  0.490847356415       1

nuclear repulsion = 0
number of shells = 14
number of NR pGTOs = 18
number of NR cGTOs = 18
basis = {'Ar': [[0, [18795484.853669286, 1.0]], [0, [4698871.213409006, 1.0]], [0, [1174717.8033504742, 1.0]], [0, [293679.44598340394, 1.0]], [0, [73419.88122888755, 1.0]], [0, [18350.96864595248, 1.0]], [0, [2238.2820048659632, 1.0]], [0, [456.82553471014234, 1.0]], [0, [121.84211151475718, 1.0]], [0, [37.636166807780334, 1.0]], [0, [4.741268667199536, 1.0]], [0, [0.3912108071521459, 1.0]], [1, [8.598603782273996, 1.0]], [1, [0.4908473564154598, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [18795484.85366929]
bas 1, expnt(s) = [4698871.21340901]
bas 2, expnt(s) = [1174717.80335047]
bas 3, expnt(s) = [293679.4459834]
bas 4, expnt(s) = [73419.88122889]
bas 5, expnt(s) = [18350.96864595]
bas 6, expnt(s) = [2238.28200487]
bas 7, expnt(s) = [456.82553471]
bas 8, expnt(s) = [121.84211151]
bas 9, expnt(s) = [37.63616681]
bas 10, expnt(s) = [4.74126867]
bas 11, expnt(s) = [0.39121081]
bas 12, expnt(s) = [8.59860378]
bas 13, expnt(s) = [0.49084736]
CPU time:       249.09
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  0  1  1  0 42 43  0]
 [ 0  0  1  1  0 44 45  0]
 [ 0  0  1  1  0 46 47  0]
 [ 0  1  1  1  0 48 49  0]
 [ 0  1  1  1  0 50 51  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.87954849e+07 7.21199097e+05 4.69887121e+06 2.54982386e+05
 1.17471780e+06 9.01498871e+04 2.93679446e+05 3.18727979e+04
 7.34198812e+04 1.12687380e+04 1.83509686e+04 3.98344907e+03
 2.23828200e+03 8.22150124e+02 4.56825535e+02 2.49647834e+02
 1.21842112e+02 9.26537682e+01 3.76361668e+01 3.83900840e+01
 4.74126867e+00 8.11775516e+00 3.91210807e-01 1.24975003e+00
 8.59860378e+00 4.29555530e+01 4.90847356e-01 1.19858120e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.31997373878562
cond(S) = 56.40560263368642
E1 = -688.8354244207628  E_coul = 184.91551576151576
init E= -503.919908659247
    CPU time for initialize scf      0.03 sec, wall time      0.03 sec
  HOMO = -0.680896167548363  LUMO = 85.2021597910779
  mo_energy =
[-1.21650432e+02 -1.32812098e+01 -7.62158489e+00 -7.62158489e+00
 -7.62158489e+00 -1.65071692e+00 -6.80896168e-01 -6.80896168e-01
 -6.80896168e-01  8.52021598e+01  6.77645026e+02  3.93986965e+03
  2.96300522e+04  1.54744129e+05  6.64894533e+05  2.71962978e+06
  1.10459675e+07  4.65100884e+07]
E1 = -706.5853249992426  E_coul = 198.94599075206165
cycle= 1 E= -507.639334247181  delta_E= -3.72  |g|= 0.317  |ddm|= 0.301
    CPU time for cycle= 1      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.420601
diis-c [-0.17690528  1.        ]
  HOMO = -0.23627322170216  LUMO = 86.5353761132141
  mo_energy =
[-1.20262350e+02 -1.22530966e+01 -6.65304202e+00 -6.65304202e+00
 -6.65304202e+00 -1.16348944e+00 -2.36273222e-01 -2.36273222e-01
 -2.36273222e-01  8.65353761e+01  6.79015784e+02  3.94112144e+03
  2.96311412e+04  1.54745147e+05  6.64895521e+05  2.71963075e+06
  1.10459685e+07  4.65100894e+07]
E1 = -706.553971320318  E_coul = 198.91421030380735
cycle= 2 E= -507.639761016511  delta_E= -0.000427  |g|= 0.00474  |ddm|= 0.0142
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00503344
diis-c [-2.52890209e-05 -5.12797214e-04  1.00051280e+00]
  HOMO = -0.236447913669802  LUMO = 86.5318635407344
  mo_energy =
[-1.20270970e+02 -1.22542818e+01 -6.65487784e+00 -6.65487784e+00
 -6.65487784e+00 -1.16355401e+00 -2.36447914e-01 -2.36447914e-01
 -2.36447914e-01  8.65318635e+01  6.79005221e+02  3.94110558e+03
  2.96311220e+04  1.54745127e+05  6.64895500e+05  2.71963073e+06
  1.10459685e+07  4.65100894e+07]
E1 = -706.5535326451535  E_coul = 198.9137715190346
cycle= 3 E= -507.639761126119  delta_E= -1.1e-07  |g|= 9.45e-05  |ddm|= 0.000201
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.000126428
diis-c [-3.93476749e-10  3.34592566e-05 -2.54363384e-02  1.02540288e+00]
  HOMO = -0.236450115733217  LUMO = 86.5318190354614
  mo_energy =
[-1.20271083e+02 -1.22542976e+01 -6.65490469e+00 -6.65490469e+00
 -6.65490469e+00 -1.16355466e+00 -2.36450116e-01 -2.36450116e-01
 -2.36450116e-01  8.65318190e+01  6.79005105e+02  3.94110544e+03
  2.96311219e+04  1.54745126e+05  6.64895500e+05  2.71963073e+06
  1.10459685e+07  4.65100894e+07]
E1 = -706.5535254427275  E_coul = 198.91376431656883
cycle= 4 E= -507.639761126159  delta_E= -3.98e-11  |g|= 3.72e-07  |ddm|= 3.43e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.5535254427275  E_coul = 198.91376431656883
  HOMO = -0.236450099521254  LUMO = 86.5318193722855
  mo_energy =
[-1.20271082e+02 -1.22542974e+01 -6.65490453e+00 -6.65490453e+00
 -6.65490453e+00 -1.16355465e+00 -2.36450100e-01 -2.36450100e-01
 -2.36450100e-01  8.65318194e+01  6.79005106e+02  3.94110544e+03
  2.96311219e+04  1.54745126e+05  6.64895500e+05  2.71963073e+06
  1.10459685e+07  4.65100894e+07]
E1 = -706.5535254795186  E_coul = 198.91376435336014
Extra cycle  E= -507.639761126158  delta_E= 1.71e-13  |g|= 6.42e-09  |ddm|= 1.63e-08
    CPU time for scf_cycle      0.10 sec, wall time      0.11 sec
exp = [1.87954849e+07 4.69887121e+06 1.17471780e+06 2.93679446e+05
 7.34198812e+04 1.83509686e+04 2.23828200e+03 4.56825535e+02
 1.21842112e+02 3.76361668e+01 4.74126867e+00 3.91210807e-01
 8.59860378e+00 4.90847356e-01]
E = -507.6397611261585
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="BFGS",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((14, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.6988712134173084e+06,1.1747178033543271e+06,2.9367945083858178e+05,7.3419865393677101e+04,1.8353927627435987e+04,2.2341424145819028e+03,4.5688904996449571e+02,1.2173317272260677e+02,3.7593061247508530e+01,4.7412722556720146e+00,3.9120358491841306e-01,8.5986297237246045e+00,4.9084868336327880e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "12s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:17:49 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  18795484.8537        1
[INPUT] 0    0    [1    /1   ]  4698871.21341        1
[INPUT] 0    0    [1    /1   ]  1174717.80335        1
[INPUT] 0    0    [1    /1   ]  293679.445983        1
[INPUT] 0    0    [1    /1   ]  73419.8812289        1
[INPUT] 0    0    [1    /1   ]  18350.968646         1
[INPUT] 0    0    [1    /1   ]  2238.28200487        1
[INPUT] 0    0    [1    /1   ]  456.82553471         1
[INPUT] 0    0    [1    /1   ]  121.842111515        1
[INPUT] 0    0    [1    /1   ]  37.6361668078        1
[INPUT] 0    0    [1    /1   ]  4.7412686672         1
[INPUT] 0    0    [1    /1   ]  0.391210807152       1
[INPUT] 1    0    [1    /1   ]  8.59860378227        1
[INPUT] 1    0    [1    /1   ]  0.490847356415       1

nuclear repulsion = 0
number of shells = 14
number of NR pGTOs = 18
number of NR cGTOs = 18
basis = {'Ar': [[0, [18795484.853669286, 1.0]], [0, [4698871.213409006, 1.0]], [0, [1174717.8033504742, 1.0]], [0, [293679.44598340394, 1.0]], [0, [73419.88122888755, 1.0]], [0, [18350.96864595248, 1.0]], [0, [2238.2820048659632, 1.0]], [0, [456.82553471014234, 1.0]], [0, [121.84211151475718, 1.0]], [0, [37.636166807780334, 1.0]], [0, [4.741268667199536, 1.0]], [0, [0.3912108071521459, 1.0]], [1, [8.598603782273996, 1.0]], [1, [0.4908473564154598, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [18795484.85366929]
bas 1, expnt(s) = [4698871.21340901]
bas 2, expnt(s) = [1174717.80335047]
bas 3, expnt(s) = [293679.4459834]
bas 4, expnt(s) = [73419.88122889]
bas 5, expnt(s) = [18350.96864595]
bas 6, expnt(s) = [2238.28200487]
bas 7, expnt(s) = [456.82553471]
bas 8, expnt(s) = [121.84211151]
bas 9, expnt(s) = [37.63616681]
bas 10, expnt(s) = [4.74126867]
bas 11, expnt(s) = [0.39121081]
bas 12, expnt(s) = [8.59860378]
bas 13, expnt(s) = [0.49084736]
CPU time:       249.95
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  0  1  1  0 42 43  0]
 [ 0  0  1  1  0 44 45  0]
 [ 0  0  1  1  0 46 47  0]
 [ 0  1  1  1  0 48 49  0]
 [ 0  1  1  1  0 50 51  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.87954849e+07 7.21199097e+05 4.69887121e+06 2.54982386e+05
 1.17471780e+06 9.01498871e+04 2.93679446e+05 3.18727979e+04
 7.34198812e+04 1.12687380e+04 1.83509686e+04 3.98344907e+03
 2.23828200e+03 8.22150124e+02 4.56825535e+02 2.49647834e+02
 1.21842112e+02 9.26537682e+01 3.76361668e+01 3.83900840e+01
 4.74126867e+00 8.11775516e+00 3.91210807e-01 1.24975003e+00
 8.59860378e+00 4.29555530e+01 4.90847356e-01 1.19858120e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.31997373878562
cond(S) = 56.40560263368642
E1 = -688.8354244207628  E_coul = 184.91551576151576
init E= -503.919908659247
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.680896167548363  LUMO = 85.2021597910779
  mo_energy =
[-1.21650432e+02 -1.32812098e+01 -7.62158489e+00 -7.62158489e+00
 -7.62158489e+00 -1.65071692e+00 -6.80896168e-01 -6.80896168e-01
 -6.80896168e-01  8.52021598e+01  6.77645026e+02  3.93986965e+03
  2.96300522e+04  1.54744129e+05  6.64894533e+05  2.71962978e+06
  1.10459675e+07  4.65100884e+07]
E1 = -706.5853249992426  E_coul = 198.94599075206165
cycle= 1 E= -507.639334247181  delta_E= -3.72  |g|= 0.317  |ddm|= 0.301
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.420601
diis-c [-0.17690528  1.        ]
  HOMO = -0.23627322170216  LUMO = 86.5353761132141
  mo_energy =
[-1.20262350e+02 -1.22530966e+01 -6.65304202e+00 -6.65304202e+00
 -6.65304202e+00 -1.16348944e+00 -2.36273222e-01 -2.36273222e-01
 -2.36273222e-01  8.65353761e+01  6.79015784e+02  3.94112144e+03
  2.96311412e+04  1.54745147e+05  6.64895521e+05  2.71963075e+06
  1.10459685e+07  4.65100894e+07]
E1 = -706.553971320318  E_coul = 198.91421030380735
cycle= 2 E= -507.639761016511  delta_E= -0.000427  |g|= 0.00474  |ddm|= 0.0142
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00503344
diis-c [-2.52890209e-05 -5.12797214e-04  1.00051280e+00]
  HOMO = -0.236447913669802  LUMO = 86.5318635407344
  mo_energy =
[-1.20270970e+02 -1.22542818e+01 -6.65487784e+00 -6.65487784e+00
 -6.65487784e+00 -1.16355401e+00 -2.36447914e-01 -2.36447914e-01
 -2.36447914e-01  8.65318635e+01  6.79005221e+02  3.94110558e+03
  2.96311220e+04  1.54745127e+05  6.64895500e+05  2.71963073e+06
  1.10459685e+07  4.65100894e+07]
E1 = -706.5535326451535  E_coul = 198.9137715190346
cycle= 3 E= -507.639761126119  delta_E= -1.1e-07  |g|= 9.45e-05  |ddm|= 0.000201
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.000126428
diis-c [-3.93476749e-10  3.34592566e-05 -2.54363384e-02  1.02540288e+00]
  HOMO = -0.236450115733217  LUMO = 86.5318190354614
  mo_energy =
[-1.20271083e+02 -1.22542976e+01 -6.65490469e+00 -6.65490469e+00
 -6.65490469e+00 -1.16355466e+00 -2.36450116e-01 -2.36450116e-01
 -2.36450116e-01  8.65318190e+01  6.79005105e+02  3.94110544e+03
  2.96311219e+04  1.54745126e+05  6.64895500e+05  2.71963073e+06
  1.10459685e+07  4.65100894e+07]
E1 = -706.5535254427275  E_coul = 198.91376431656883
cycle= 4 E= -507.639761126159  delta_E= -3.98e-11  |g|= 3.72e-07  |ddm|= 3.43e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.5535254427275  E_coul = 198.91376431656883
  HOMO = -0.236450099521254  LUMO = 86.5318193722855
  mo_energy =
[-1.20271082e+02 -1.22542974e+01 -6.65490453e+00 -6.65490453e+00
 -6.65490453e+00 -1.16355465e+00 -2.36450100e-01 -2.36450100e-01
 -2.36450100e-01  8.65318194e+01  6.79005106e+02  3.94110544e+03
  2.96311219e+04  1.54745126e+05  6.64895500e+05  2.71963073e+06
  1.10459685e+07  4.65100894e+07]
E1 = -706.5535254795186  E_coul = 198.91376435336014
Extra cycle  E= -507.639761126158  delta_E= 1.71e-13  |g|= 6.42e-09  |ddm|= 1.63e-08
    CPU time for scf_cycle      0.10 sec, wall time      0.10 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 56.40560263368642
E1 = -706.5535254795186  E_coul = 198.91376435336014
init E= -507.639761126158
    CPU time for initialize scf      0.12 sec, wall time      0.12 sec
  HOMO = -0.236450099331817  LUMO = 86.5318193763952
  mo_energy =
[-1.20271082e+02 -1.22542974e+01 -6.65490453e+00 -6.65490453e+00
 -6.65490453e+00 -1.16355465e+00 -2.36450099e-01 -2.36450099e-01
 -2.36450099e-01  8.65318194e+01  6.79005106e+02  3.94110544e+03
  2.96311219e+04  1.54745126e+05  6.64895500e+05  2.71963073e+06
  1.10459685e+07  4.65100894e+07]
E1 = -706.5535254800747  E_coul = 198.91376435391638
cycle= 1 E= -507.639761126158  delta_E= 1.71e-13  |g|= 1.43e-10  |ddm|= 2.52e-10
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -706.5535254800747  E_coul = 198.91376435391638
  HOMO = -0.236450099329146  LUMO = 86.531819376453
  mo_energy =
[-1.20271082e+02 -1.22542974e+01 -6.65490453e+00 -6.65490453e+00
 -6.65490453e+00 -1.16355465e+00 -2.36450099e-01 -2.36450099e-01
 -2.36450099e-01  8.65318194e+01  6.79005106e+02  3.94110544e+03
  2.96311219e+04  1.54745126e+05  6.64895500e+05  2.71963073e+06
  1.10459685e+07  4.65100894e+07]
E1 = -706.5535254800843  E_coul = 198.91376435392593
Extra cycle  E= -507.639761126158  delta_E= -1.14e-13  |g|= 1.22e-10  |ddm|= 4.49e-12
    CPU time for scf_cycle      0.19 sec, wall time      0.19 sec
exp = [1.87954849e+07 4.69887121e+06 1.17471780e+06 2.93679446e+05
 7.34198812e+04 1.83509686e+04 2.23828200e+03 4.56825535e+02
 1.21842112e+02 3.76361668e+01 4.74126867e+00 3.91210807e-01
 8.59860378e+00 4.90847356e-01]
grad_E = [-1.14975440e-13  1.77752294e-11  6.67575413e-12  1.04001842e-08
 -3.48324701e-08  6.33411986e-06 -5.31290632e-06 -3.46398279e-05
  9.30042886e-05  2.78703581e-05  1.28781354e-05  1.55694508e-06
  3.85384153e-06  1.33266144e-05]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="BFGS",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((14, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.6988712134173084e+06,1.1747178033543271e+06,2.9367945083858178e+05,7.3419865393677101e+04,1.8353927627435987e+04,2.2341424145819028e+03,4.5688904996449571e+02,1.2173317272260677e+02,3.7593061247508530e+01,4.7412722556720146e+00,3.9120358491841306e-01,8.5986297237246045e+00,4.9084868336327880e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "12s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:17:53 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  18795484.8537        1
[INPUT] 0    0    [1    /1   ]  4698871.21341        1
[INPUT] 0    0    [1    /1   ]  1174717.80335        1
[INPUT] 0    0    [1    /1   ]  293679.443788        1
[INPUT] 0    0    [1    /1   ]  73419.8884137        1
[INPUT] 0    0    [1    /1   ]  18349.6309389        1
[INPUT] 0    0    [1    /1   ]  2240.03325855        1
[INPUT] 0    0    [1    /1   ]  457.425365229        1
[INPUT] 0    0    [1    /1   ]  122.046944425        1
[INPUT] 0    0    [1    /1   ]  37.6825306068        1
[INPUT] 0    0    [1    /1   ]  4.74138102529        1
[INPUT] 0    0    [1    /1   ]  0.391216406614       1
[INPUT] 1    0    [1    /1   ]  8.59858884699        1
[INPUT] 1    0    [1    /1   ]  0.490845975623       1

nuclear repulsion = 0
number of shells = 14
number of NR pGTOs = 18
number of NR cGTOs = 18
basis = {'Ar': [[0, [18795484.853669308, 1.0]], [0, [4698871.213405252, 1.0]], [0, [1174717.8033487757, 1.0]], [0, [293679.4437881584, 1.0]], [0, [73419.8884137173, 1.0]], [0, [18349.63093885503, 1.0]], [0, [2240.033258552012, 1.0]], [0, [457.42536522921836, 1.0]], [0, [122.0469444254661, 1.0]], [0, [37.68253060678051, 1.0]], [0, [4.741381025289536, 1.0]], [0, [0.3912164066137993, 1.0]], [1, [8.598588846985239, 1.0]], [1, [0.4908459756232913, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [18795484.85366931]
bas 1, expnt(s) = [4698871.21340525]
bas 2, expnt(s) = [1174717.80334878]
bas 3, expnt(s) = [293679.44378816]
bas 4, expnt(s) = [73419.88841372]
bas 5, expnt(s) = [18349.63093886]
bas 6, expnt(s) = [2240.03325855]
bas 7, expnt(s) = [457.42536523]
bas 8, expnt(s) = [122.04694443]
bas 9, expnt(s) = [37.68253061]
bas 10, expnt(s) = [4.74138103]
bas 11, expnt(s) = [0.39121641]
bas 12, expnt(s) = [8.59858885]
bas 13, expnt(s) = [0.49084598]
CPU time:       253.54
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  0  1  1  0 42 43  0]
 [ 0  0  1  1  0 44 45  0]
 [ 0  0  1  1  0 46 47  0]
 [ 0  1  1  1  0 48 49  0]
 [ 0  1  1  1  0 50 51  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.87954849e+07 7.21199097e+05 4.69887121e+06 2.54982386e+05
 1.17471780e+06 9.01498871e+04 2.93679444e+05 3.18727977e+04
 7.34198884e+04 1.12687388e+04 1.83496309e+04 3.98323129e+03
 2.24003326e+03 8.22632520e+02 4.57425365e+02 2.49893642e+02
 1.22046944e+02 9.27705662e+01 3.76825306e+01 3.84255480e+01
 4.74138103e+00 8.11789944e+00 3.91216407e-01 1.24976345e+00
 8.59858885e+00 4.29554597e+01 4.90845976e-01 1.19857699e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319970209052432
cond(S) = 56.41551357252974
E1 = -688.8355836297806  E_coul = 184.91565510859627
init E= -503.919928521184
    CPU time for initialize scf      0.03 sec, wall time      0.03 sec
  HOMO = -0.68089644899064  LUMO = 85.3876720997333
  mo_energy =
[-1.21650394e+02 -1.32812320e+01 -7.62156698e+00 -7.62156698e+00
 -7.62156698e+00 -1.65072659e+00 -6.80896449e-01 -6.80896449e-01
 -6.80896449e-01  8.53876721e+01  6.78870563e+02  3.94448497e+03
  2.96369667e+04  1.54748414e+05  6.64897374e+05  2.71963210e+06
  1.10459696e+07  4.65100903e+07]
E1 = -706.5855785038005  E_coul = 198.94622717209356
cycle= 1 E= -507.639351331707  delta_E= -3.72  |g|= 0.317  |ddm|= 0.301
    CPU time for cycle= 1      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.420587
diis-c [-0.17689366  1.        ]
  HOMO = -0.236270575311745  LUMO = 86.7211199042329
  mo_energy =
[-1.20262303e+02 -1.22531081e+01 -6.65301912e+00 -6.65301912e+00
 -6.65301912e+00 -1.16349143e+00 -2.36270575e-01 -2.36270575e-01
 -2.36270575e-01  8.67211199e+01  6.80241341e+02  3.94573683e+03
  2.96380559e+04  1.54749432e+05  6.64898362e+05  2.71963308e+06
  1.10459705e+07  4.65100912e+07]
E1 = -706.5543235708606  E_coul = 198.91454689435312
cycle= 2 E= -507.639776676507  delta_E= -0.000425  |g|= 0.00473  |ddm|= 0.0142
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00502519
diis-c [-2.52045703e-05 -5.20805743e-04  1.00052081e+00]
  HOMO = -0.236444606402577  LUMO = 86.7176139459915
  mo_energy =
[-1.20270900e+02 -1.22542890e+01 -6.65484835e+00 -6.65484835e+00
 -6.65484835e+00 -1.16355575e+00 -2.36444606e-01 -2.36444606e-01
 -2.36444606e-01  8.67176139e+01  6.80230801e+02  3.94572101e+03
  2.96380367e+04  1.54749412e+05  6.64898342e+05  2.71963306e+06
  1.10459705e+07  4.65100912e+07]
E1 = -706.5538868650898  E_coul = 198.91411007957493
cycle= 3 E= -507.639776785515  delta_E= -1.09e-07  |g|= 9.42e-05  |ddm|= 0.0002
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.000126044
diis-c [-3.91070081e-10  3.34696725e-05 -2.54014649e-02  1.02536800e+00]
  HOMO = -0.236446795950175  LUMO = 86.7175696349484
  mo_energy =
[-1.20271012e+02 -1.22543047e+01 -6.65487505e+00 -6.65487505e+00
 -6.65487505e+00 -1.16355640e+00 -2.36446796e-01 -2.36446796e-01
 -2.36446796e-01  8.67175696e+01  6.80230685e+02  3.94572087e+03
  2.96380366e+04  1.54749412e+05  6.64898342e+05  2.71963306e+06
  1.10459705e+07  4.65100912e+07]
E1 = -706.5538797082636  E_coul = 198.9141029227094
cycle= 4 E= -507.639776785554  delta_E= -3.93e-11  |g|= 3.7e-07  |ddm|= 3.41e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.5538797082636  E_coul = 198.9141029227094
  HOMO = -0.236446779850167  LUMO = 86.7175699703568
  mo_energy =
[-1.20271011e+02 -1.22543046e+01 -6.65487489e+00 -6.65487489e+00
 -6.65487489e+00 -1.16355640e+00 -2.36446780e-01 -2.36446780e-01
 -2.36446780e-01  8.67175700e+01  6.80230686e+02  3.94572087e+03
  2.96380366e+04  1.54749412e+05  6.64898342e+05  2.71963306e+06
  1.10459705e+07  4.65100912e+07]
E1 = -706.5538797447952  E_coul = 198.91410295924067
Extra cycle  E= -507.639776785554  delta_E= -2.84e-13  |g|= 6.38e-09  |ddm|= 1.62e-08
    CPU time for scf_cycle      0.11 sec, wall time      0.11 sec
exp = [1.87954849e+07 4.69887121e+06 1.17471780e+06 2.93679444e+05
 7.34198884e+04 1.83496309e+04 2.24003326e+03 4.57425365e+02
 1.22046944e+02 3.76825306e+01 4.74138103e+00 3.91216407e-01
 8.59858885e+00 4.90845976e-01]
E = -507.6397767855545
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="BFGS",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((14, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.6988712134173084e+06,1.1747178033543271e+06,2.9367945083858178e+05,7.3419865393677101e+04,1.8353927627435987e+04,2.2341424145819028e+03,4.5688904996449571e+02,1.2173317272260677e+02,3.7593061247508530e+01,4.7412722556720146e+00,3.9120358491841306e-01,8.5986297237246045e+00,4.9084868336327880e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "12s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:17:54 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  18795484.8537        1
[INPUT] 0    0    [1    /1   ]  4698871.21341        1
[INPUT] 0    0    [1    /1   ]  1174717.80335        1
[INPUT] 0    0    [1    /1   ]  293679.443788        1
[INPUT] 0    0    [1    /1   ]  73419.8884137        1
[INPUT] 0    0    [1    /1   ]  18349.6309389        1
[INPUT] 0    0    [1    /1   ]  2240.03325855        1
[INPUT] 0    0    [1    /1   ]  457.425365229        1
[INPUT] 0    0    [1    /1   ]  122.046944425        1
[INPUT] 0    0    [1    /1   ]  37.6825306068        1
[INPUT] 0    0    [1    /1   ]  4.74138102529        1
[INPUT] 0    0    [1    /1   ]  0.391216406614       1
[INPUT] 1    0    [1    /1   ]  8.59858884699        1
[INPUT] 1    0    [1    /1   ]  0.490845975623       1

nuclear repulsion = 0
number of shells = 14
number of NR pGTOs = 18
number of NR cGTOs = 18
basis = {'Ar': [[0, [18795484.853669308, 1.0]], [0, [4698871.213405252, 1.0]], [0, [1174717.8033487757, 1.0]], [0, [293679.4437881584, 1.0]], [0, [73419.8884137173, 1.0]], [0, [18349.63093885503, 1.0]], [0, [2240.033258552012, 1.0]], [0, [457.42536522921836, 1.0]], [0, [122.0469444254661, 1.0]], [0, [37.68253060678051, 1.0]], [0, [4.741381025289536, 1.0]], [0, [0.3912164066137993, 1.0]], [1, [8.598588846985239, 1.0]], [1, [0.4908459756232913, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [18795484.85366931]
bas 1, expnt(s) = [4698871.21340525]
bas 2, expnt(s) = [1174717.80334878]
bas 3, expnt(s) = [293679.44378816]
bas 4, expnt(s) = [73419.88841372]
bas 5, expnt(s) = [18349.63093886]
bas 6, expnt(s) = [2240.03325855]
bas 7, expnt(s) = [457.42536523]
bas 8, expnt(s) = [122.04694443]
bas 9, expnt(s) = [37.68253061]
bas 10, expnt(s) = [4.74138103]
bas 11, expnt(s) = [0.39121641]
bas 12, expnt(s) = [8.59858885]
bas 13, expnt(s) = [0.49084598]
CPU time:       254.42
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  0  1  1  0 42 43  0]
 [ 0  0  1  1  0 44 45  0]
 [ 0  0  1  1  0 46 47  0]
 [ 0  1  1  1  0 48 49  0]
 [ 0  1  1  1  0 50 51  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.87954849e+07 7.21199097e+05 4.69887121e+06 2.54982386e+05
 1.17471780e+06 9.01498871e+04 2.93679444e+05 3.18727977e+04
 7.34198884e+04 1.12687388e+04 1.83496309e+04 3.98323129e+03
 2.24003326e+03 8.22632520e+02 4.57425365e+02 2.49893642e+02
 1.22046944e+02 9.27705662e+01 3.76825306e+01 3.84255480e+01
 4.74138103e+00 8.11789944e+00 3.91216407e-01 1.24976345e+00
 8.59858885e+00 4.29554597e+01 4.90845976e-01 1.19857699e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319970209052432
cond(S) = 56.41551357252974
E1 = -688.8355836297806  E_coul = 184.91565510859627
init E= -503.919928521184
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.68089644899064  LUMO = 85.3876720997333
  mo_energy =
[-1.21650394e+02 -1.32812320e+01 -7.62156698e+00 -7.62156698e+00
 -7.62156698e+00 -1.65072659e+00 -6.80896449e-01 -6.80896449e-01
 -6.80896449e-01  8.53876721e+01  6.78870563e+02  3.94448497e+03
  2.96369667e+04  1.54748414e+05  6.64897374e+05  2.71963210e+06
  1.10459696e+07  4.65100903e+07]
E1 = -706.5855785038005  E_coul = 198.94622717209356
cycle= 1 E= -507.639351331707  delta_E= -3.72  |g|= 0.317  |ddm|= 0.301
    CPU time for cycle= 1      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.420587
diis-c [-0.17689366  1.        ]
  HOMO = -0.236270575311745  LUMO = 86.7211199042329
  mo_energy =
[-1.20262303e+02 -1.22531081e+01 -6.65301912e+00 -6.65301912e+00
 -6.65301912e+00 -1.16349143e+00 -2.36270575e-01 -2.36270575e-01
 -2.36270575e-01  8.67211199e+01  6.80241341e+02  3.94573683e+03
  2.96380559e+04  1.54749432e+05  6.64898362e+05  2.71963308e+06
  1.10459705e+07  4.65100912e+07]
E1 = -706.5543235708606  E_coul = 198.91454689435312
cycle= 2 E= -507.639776676507  delta_E= -0.000425  |g|= 0.00473  |ddm|= 0.0142
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00502519
diis-c [-2.52045703e-05 -5.20805743e-04  1.00052081e+00]
  HOMO = -0.236444606402577  LUMO = 86.7176139459915
  mo_energy =
[-1.20270900e+02 -1.22542890e+01 -6.65484835e+00 -6.65484835e+00
 -6.65484835e+00 -1.16355575e+00 -2.36444606e-01 -2.36444606e-01
 -2.36444606e-01  8.67176139e+01  6.80230801e+02  3.94572101e+03
  2.96380367e+04  1.54749412e+05  6.64898342e+05  2.71963306e+06
  1.10459705e+07  4.65100912e+07]
E1 = -706.5538868650898  E_coul = 198.91411007957493
cycle= 3 E= -507.639776785515  delta_E= -1.09e-07  |g|= 9.42e-05  |ddm|= 0.0002
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.000126044
diis-c [-3.91070081e-10  3.34696725e-05 -2.54014649e-02  1.02536800e+00]
  HOMO = -0.236446795950175  LUMO = 86.7175696349484
  mo_energy =
[-1.20271012e+02 -1.22543047e+01 -6.65487505e+00 -6.65487505e+00
 -6.65487505e+00 -1.16355640e+00 -2.36446796e-01 -2.36446796e-01
 -2.36446796e-01  8.67175696e+01  6.80230685e+02  3.94572087e+03
  2.96380366e+04  1.54749412e+05  6.64898342e+05  2.71963306e+06
  1.10459705e+07  4.65100912e+07]
E1 = -706.5538797082636  E_coul = 198.9141029227094
cycle= 4 E= -507.639776785554  delta_E= -3.93e-11  |g|= 3.7e-07  |ddm|= 3.41e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.5538797082636  E_coul = 198.9141029227094
  HOMO = -0.236446779850167  LUMO = 86.7175699703568
  mo_energy =
[-1.20271011e+02 -1.22543046e+01 -6.65487489e+00 -6.65487489e+00
 -6.65487489e+00 -1.16355640e+00 -2.36446780e-01 -2.36446780e-01
 -2.36446780e-01  8.67175700e+01  6.80230686e+02  3.94572087e+03
  2.96380366e+04  1.54749412e+05  6.64898342e+05  2.71963306e+06
  1.10459705e+07  4.65100912e+07]
E1 = -706.5538797447952  E_coul = 198.91410295924067
Extra cycle  E= -507.639776785554  delta_E= -2.84e-13  |g|= 6.38e-09  |ddm|= 1.62e-08
    CPU time for scf_cycle      0.11 sec, wall time      0.12 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 56.41551357252974
E1 = -706.5538797447952  E_coul = 198.91410295924067
init E= -507.639776785554
    CPU time for initialize scf      0.13 sec, wall time      0.13 sec
  HOMO = -0.236446779662249  LUMO = 86.7175699744453
  mo_energy =
[-1.20271011e+02 -1.22543046e+01 -6.65487488e+00 -6.65487488e+00
 -6.65487488e+00 -1.16355640e+00 -2.36446780e-01 -2.36446780e-01
 -2.36446780e-01  8.67175700e+01  6.80230686e+02  3.94572087e+03
  2.96380366e+04  1.54749412e+05  6.64898342e+05  2.71963306e+06
  1.10459705e+07  4.65100912e+07]
E1 = -706.553879745346  E_coul = 198.91410295979173
cycle= 1 E= -507.639776785554  delta_E= 2.84e-13  |g|= 2.43e-10  |ddm|= 2.5e-10
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -706.553879745346  E_coul = 198.91410295979173
  HOMO = -0.23644677965961  LUMO = 86.7175699745062
  mo_energy =
[-1.20271011e+02 -1.22543046e+01 -6.65487488e+00 -6.65487488e+00
 -6.65487488e+00 -1.16355640e+00 -2.36446780e-01 -2.36446780e-01
 -2.36446780e-01  8.67175700e+01  6.80230686e+02  3.94572087e+03
  2.96380366e+04  1.54749412e+05  6.64898342e+05  2.71963306e+06
  1.10459705e+07  4.65100912e+07]
E1 = -706.5538797453555  E_coul = 198.9141029598011
Extra cycle  E= -507.639776785554  delta_E= -2.27e-13  |g|= 3.05e-10  |ddm|= 4.37e-12
    CPU time for scf_cycle      0.20 sec, wall time      0.20 sec
exp = [1.87954849e+07 4.69887121e+06 1.17471780e+06 2.93679444e+05
 7.34198884e+04 1.83496309e+04 2.24003326e+03 4.57425365e+02
 1.22046944e+02 3.76825306e+01 4.74138103e+00 3.91216407e-01
 8.59858885e+00 4.90845976e-01]
grad_E = [-1.15708858e-13  1.77285046e-11  6.28849315e-12  1.03736691e-08
 -3.49651944e-08  6.31884383e-06 -5.27094103e-06 -3.91206294e-05
  1.28174941e-04  3.85064207e-05  1.77633259e-05  1.82586457e-06
  5.24263717e-06  1.78315071e-05]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="BFGS",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((14, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.6988712134173084e+06,1.1747178033543271e+06,2.9367945083858178e+05,7.3419865393677101e+04,1.8353927627435987e+04,2.2341424145819028e+03,4.5688904996449571e+02,1.2173317272260677e+02,3.7593061247508530e+01,4.7412722556720146e+00,3.9120358491841306e-01,8.5986297237246045e+00,4.9084868336327880e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "12s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:17:57 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  18795484.8537        1
[INPUT] 0    0    [1    /1   ]  4698871.2134         1
[INPUT] 0    0    [1    /1   ]  1174717.80335        1
[INPUT] 0    0    [1    /1   ]  293679.439532        1
[INPUT] 0    0    [1    /1   ]  73419.9023374        1
[INPUT] 0    0    [1    /1   ]  18347.0371507        1
[INPUT] 0    0    [1    /1   ]  2243.46357681        1
[INPUT] 0    0    [1    /1   ]  458.416644907        1
[INPUT] 0    0    [1    /1   ]  122.351622255        1
[INPUT] 0    0    [1    /1   ]  37.7491101051        1
[INPUT] 0    0    [1    /1   ]  4.74155640062        1
[INPUT] 0    0    [1    /1   ]  0.391224306885       1
[INPUT] 1    0    [1    /1   ]  8.59856765789        1
[INPUT] 1    0    [1    /1   ]  0.490843946255       1

nuclear repulsion = 0
number of shells = 14
number of NR pGTOs = 18
number of NR cGTOs = 18
basis = {'Ar': [[0, [18795484.853669353, 1.0]], [0, [4698871.213397976, 1.0]], [0, [1174717.8033454698, 1.0]], [0, [293679.4395317062, 1.0]], [0, [73419.90233738133, 1.0]], [0, [18347.037150730786, 1.0]], [0, [2243.4635768107314, 1.0]], [0, [458.4166449069329, 1.0]], [0, [122.35162225541268, 1.0]], [0, [37.7491101050622, 1.0]], [0, [4.741556400624293, 1.0]], [0, [0.39122430688502424, 1.0]], [1, [8.598567657892188, 1.0]], [1, [0.49084394625525435, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [18795484.85366935]
bas 1, expnt(s) = [4698871.21339798]
bas 2, expnt(s) = [1174717.80334547]
bas 3, expnt(s) = [293679.43953171]
bas 4, expnt(s) = [73419.90233738]
bas 5, expnt(s) = [18347.03715073]
bas 6, expnt(s) = [2243.46357681]
bas 7, expnt(s) = [458.41664491]
bas 8, expnt(s) = [122.35162226]
bas 9, expnt(s) = [37.74911011]
bas 10, expnt(s) = [4.7415564]
bas 11, expnt(s) = [0.39122431]
bas 12, expnt(s) = [8.59856766]
bas 13, expnt(s) = [0.49084395]
CPU time:       258.04
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  0  1  1  0 42 43  0]
 [ 0  0  1  1  0 44 45  0]
 [ 0  0  1  1  0 46 47  0]
 [ 0  1  1  1  0 48 49  0]
 [ 0  1  1  1  0 50 51  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.87954849e+07 7.21199097e+05 4.69887121e+06 2.54982386e+05
 1.17471780e+06 9.01498871e+04 2.93679440e+05 3.18727973e+04
 7.34199023e+04 1.12687405e+04 1.83470372e+04 3.98280900e+03
 2.24346358e+03 8.23577155e+02 4.58416645e+02 2.50299688e+02
 1.22351622e+02 9.29442063e+01 3.77491101e+01 3.84764560e+01
 4.74155640e+00 8.11812464e+00 3.91224307e-01 1.24978238e+00
 8.59856766e+00 4.29553274e+01 4.90843946e-01 1.19857080e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319964934743993
cond(S) = 56.42792779087875
E1 = -688.8360460741378  E_coul = 184.91584913520566
init E= -503.920196938932
    CPU time for initialize scf      0.03 sec, wall time      0.03 sec
  HOMO = -0.680897110432833  LUMO = 85.6593100068469
  mo_energy =
[-1.21650345e+02 -1.32812597e+01 -7.62154168e+00 -7.62154168e+00
 -7.62154168e+00 -1.65074050e+00 -6.80897110e-01 -6.80897110e-01
 -6.80897110e-01  8.56593100e+01  6.80768642e+02  3.95253729e+03
  2.96495802e+04  1.54756035e+05  6.64902269e+05  2.71963606e+06
  1.10459730e+07  4.65100933e+07]
E1 = -706.5859346527787  E_coul = 198.94655477271704
cycle= 1 E= -507.639379880062  delta_E= -3.72  |g|= 0.317  |ddm|= 0.301
    CPU time for cycle= 1      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.420547
diis-c [-0.17685954  1.        ]
  HOMO = -0.236266887529532  LUMO = 86.993094230127
  mo_energy =
[-1.20262246e+02 -1.22531206e+01 -6.65298652e+00 -6.65298652e+00
 -6.65298652e+00 -1.16349407e+00 -2.36266888e-01 -2.36266888e-01
 -2.36266888e-01  8.69930942e+01  6.82139434e+02  3.95378922e+03
  2.96506697e+04  1.54757054e+05  6.64903258e+05  2.71963703e+06
  1.10459740e+07  4.65100943e+07]
E1 = -706.5548232851352  E_coul = 198.915020131243
cycle= 2 E= -507.639803153892  delta_E= -0.000423  |g|= 0.00471  |ddm|= 0.0141
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00501316
diis-c [-2.50817861e-05 -5.32215116e-04  1.00053222e+00]
  HOMO = -0.236439957356538  LUMO = 86.9895978479
  mo_energy =
[-1.20270808e+02 -1.22542953e+01 -6.65480616e+00 -6.65480616e+00
 -6.65480616e+00 -1.16355804e+00 -2.36439957e-01 -2.36439957e-01
 -2.36439957e-01  8.69895978e+01  6.82128927e+02  3.95377345e+03
  2.96506506e+04  1.54757034e+05  6.64903238e+05  2.71963701e+06
  1.10459740e+07  4.65100943e+07]
E1 = -706.5543894431122  E_coul = 198.91458618108393
cycle= 3 E= -507.639803262028  delta_E= -1.08e-07  |g|= 9.38e-05  |ddm|= 0.000199
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.000125487
diis-c [-3.87558882e-10  3.34862366e-05 -2.53507747e-02  1.02531729e+00]
  HOMO = -0.236442128780374  LUMO = 86.9895538185849
  mo_energy =
[-1.20270920e+02 -1.22543108e+01 -6.65483265e+00 -6.65483265e+00
 -6.65483265e+00 -1.16355868e+00 -2.36442129e-01 -2.36442129e-01
 -2.36442129e-01  8.69895538e+01  6.82128811e+02  3.95377330e+03
  2.96506504e+04  1.54757034e+05  6.64903238e+05  2.71963701e+06
  1.10459740e+07  4.65100943e+07]
E1 = -706.5543823523382  E_coul = 198.91457909027088
cycle= 4 E= -507.639803262067  delta_E= -3.9e-11  |g|= 3.68e-07  |ddm|= 3.38e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.5543823523382  E_coul = 198.91457909027088
  HOMO = -0.236442112843153  LUMO = 86.9895541519341
  mo_energy =
[-1.20270919e+02 -1.22543107e+01 -6.65483249e+00 -6.65483249e+00
 -6.65483249e+00 -1.16355868e+00 -2.36442113e-01 -2.36442113e-01
 -2.36442113e-01  8.69895542e+01  6.82128812e+02  3.95377331e+03
  2.96506504e+04  1.54757034e+05  6.64903238e+05  2.71963701e+06
  1.10459740e+07  4.65100943e+07]
E1 = -706.5543823884905  E_coul = 198.9145791264229
Extra cycle  E= -507.639803262068  delta_E= -2.84e-13  |g|= 6.33e-09  |ddm|= 1.6e-08
    CPU time for scf_cycle      0.10 sec, wall time      0.11 sec
exp = [1.87954849e+07 4.69887121e+06 1.17471780e+06 2.93679440e+05
 7.34199023e+04 1.83470372e+04 2.24346358e+03 4.58416645e+02
 1.22351622e+02 3.77491101e+01 4.74155640e+00 3.91224307e-01
 8.59856766e+00 4.90843946e-01]
E = -507.6398032620676
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="BFGS",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((14, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.6988712134173084e+06,1.1747178033543271e+06,2.9367945083858178e+05,7.3419865393677101e+04,1.8353927627435987e+04,2.2341424145819028e+03,4.5688904996449571e+02,1.2173317272260677e+02,3.7593061247508530e+01,4.7412722556720146e+00,3.9120358491841306e-01,8.5986297237246045e+00,4.9084868336327880e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "12s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:17:58 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  18795484.8537        1
[INPUT] 0    0    [1    /1   ]  4698871.2134         1
[INPUT] 0    0    [1    /1   ]  1174717.80335        1
[INPUT] 0    0    [1    /1   ]  293679.439532        1
[INPUT] 0    0    [1    /1   ]  73419.9023374        1
[INPUT] 0    0    [1    /1   ]  18347.0371507        1
[INPUT] 0    0    [1    /1   ]  2243.46357681        1
[INPUT] 0    0    [1    /1   ]  458.416644907        1
[INPUT] 0    0    [1    /1   ]  122.351622255        1
[INPUT] 0    0    [1    /1   ]  37.7491101051        1
[INPUT] 0    0    [1    /1   ]  4.74155640062        1
[INPUT] 0    0    [1    /1   ]  0.391224306885       1
[INPUT] 1    0    [1    /1   ]  8.59856765789        1
[INPUT] 1    0    [1    /1   ]  0.490843946255       1

nuclear repulsion = 0
number of shells = 14
number of NR pGTOs = 18
number of NR cGTOs = 18
basis = {'Ar': [[0, [18795484.853669353, 1.0]], [0, [4698871.213397976, 1.0]], [0, [1174717.8033454698, 1.0]], [0, [293679.4395317062, 1.0]], [0, [73419.90233738133, 1.0]], [0, [18347.037150730786, 1.0]], [0, [2243.4635768107314, 1.0]], [0, [458.4166449069329, 1.0]], [0, [122.35162225541268, 1.0]], [0, [37.7491101050622, 1.0]], [0, [4.741556400624293, 1.0]], [0, [0.39122430688502424, 1.0]], [1, [8.598567657892188, 1.0]], [1, [0.49084394625525435, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [18795484.85366935]
bas 1, expnt(s) = [4698871.21339798]
bas 2, expnt(s) = [1174717.80334547]
bas 3, expnt(s) = [293679.43953171]
bas 4, expnt(s) = [73419.90233738]
bas 5, expnt(s) = [18347.03715073]
bas 6, expnt(s) = [2243.46357681]
bas 7, expnt(s) = [458.41664491]
bas 8, expnt(s) = [122.35162226]
bas 9, expnt(s) = [37.74911011]
bas 10, expnt(s) = [4.7415564]
bas 11, expnt(s) = [0.39122431]
bas 12, expnt(s) = [8.59856766]
bas 13, expnt(s) = [0.49084395]
CPU time:       258.92
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  0  1  1  0 42 43  0]
 [ 0  0  1  1  0 44 45  0]
 [ 0  0  1  1  0 46 47  0]
 [ 0  1  1  1  0 48 49  0]
 [ 0  1  1  1  0 50 51  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.87954849e+07 7.21199097e+05 4.69887121e+06 2.54982386e+05
 1.17471780e+06 9.01498871e+04 2.93679440e+05 3.18727973e+04
 7.34199023e+04 1.12687405e+04 1.83470372e+04 3.98280900e+03
 2.24346358e+03 8.23577155e+02 4.58416645e+02 2.50299688e+02
 1.22351622e+02 9.29442063e+01 3.77491101e+01 3.84764560e+01
 4.74155640e+00 8.11812464e+00 3.91224307e-01 1.24978238e+00
 8.59856766e+00 4.29553274e+01 4.90843946e-01 1.19857080e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319964934743993
cond(S) = 56.42792779087875
E1 = -688.8360460741378  E_coul = 184.91584913520566
init E= -503.920196938932
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.680897110432833  LUMO = 85.6593100068469
  mo_energy =
[-1.21650345e+02 -1.32812597e+01 -7.62154168e+00 -7.62154168e+00
 -7.62154168e+00 -1.65074050e+00 -6.80897110e-01 -6.80897110e-01
 -6.80897110e-01  8.56593100e+01  6.80768642e+02  3.95253729e+03
  2.96495802e+04  1.54756035e+05  6.64902269e+05  2.71963606e+06
  1.10459730e+07  4.65100933e+07]
E1 = -706.5859346527787  E_coul = 198.94655477271704
cycle= 1 E= -507.639379880062  delta_E= -3.72  |g|= 0.317  |ddm|= 0.301
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.420547
diis-c [-0.17685954  1.        ]
  HOMO = -0.236266887529532  LUMO = 86.993094230127
  mo_energy =
[-1.20262246e+02 -1.22531206e+01 -6.65298652e+00 -6.65298652e+00
 -6.65298652e+00 -1.16349407e+00 -2.36266888e-01 -2.36266888e-01
 -2.36266888e-01  8.69930942e+01  6.82139434e+02  3.95378922e+03
  2.96506697e+04  1.54757054e+05  6.64903258e+05  2.71963703e+06
  1.10459740e+07  4.65100943e+07]
E1 = -706.5548232851352  E_coul = 198.915020131243
cycle= 2 E= -507.639803153892  delta_E= -0.000423  |g|= 0.00471  |ddm|= 0.0141
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00501316
diis-c [-2.50817861e-05 -5.32215116e-04  1.00053222e+00]
  HOMO = -0.236439957356538  LUMO = 86.9895978479
  mo_energy =
[-1.20270808e+02 -1.22542953e+01 -6.65480616e+00 -6.65480616e+00
 -6.65480616e+00 -1.16355804e+00 -2.36439957e-01 -2.36439957e-01
 -2.36439957e-01  8.69895978e+01  6.82128927e+02  3.95377345e+03
  2.96506506e+04  1.54757034e+05  6.64903238e+05  2.71963701e+06
  1.10459740e+07  4.65100943e+07]
E1 = -706.5543894431122  E_coul = 198.91458618108393
cycle= 3 E= -507.639803262028  delta_E= -1.08e-07  |g|= 9.38e-05  |ddm|= 0.000199
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.000125487
diis-c [-3.87558882e-10  3.34862366e-05 -2.53507747e-02  1.02531729e+00]
  HOMO = -0.236442128780374  LUMO = 86.9895538185849
  mo_energy =
[-1.20270920e+02 -1.22543108e+01 -6.65483265e+00 -6.65483265e+00
 -6.65483265e+00 -1.16355868e+00 -2.36442129e-01 -2.36442129e-01
 -2.36442129e-01  8.69895538e+01  6.82128811e+02  3.95377330e+03
  2.96506504e+04  1.54757034e+05  6.64903238e+05  2.71963701e+06
  1.10459740e+07  4.65100943e+07]
E1 = -706.5543823523382  E_coul = 198.91457909027088
cycle= 4 E= -507.639803262067  delta_E= -3.9e-11  |g|= 3.68e-07  |ddm|= 3.38e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.5543823523382  E_coul = 198.91457909027088
  HOMO = -0.236442112843153  LUMO = 86.9895541519341
  mo_energy =
[-1.20270919e+02 -1.22543107e+01 -6.65483249e+00 -6.65483249e+00
 -6.65483249e+00 -1.16355868e+00 -2.36442113e-01 -2.36442113e-01
 -2.36442113e-01  8.69895542e+01  6.82128812e+02  3.95377331e+03
  2.96506504e+04  1.54757034e+05  6.64903238e+05  2.71963701e+06
  1.10459740e+07  4.65100943e+07]
E1 = -706.5543823884905  E_coul = 198.9145791264229
Extra cycle  E= -507.639803262068  delta_E= -2.84e-13  |g|= 6.33e-09  |ddm|= 1.6e-08
    CPU time for scf_cycle      0.10 sec, wall time      0.11 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 56.42792779087875
E1 = -706.5543823884905  E_coul = 198.9145791264229
init E= -507.639803262068
    CPU time for initialize scf      0.12 sec, wall time      0.12 sec
  HOMO = -0.236442112657473  LUMO = 86.9895541559876
  mo_energy =
[-1.20270919e+02 -1.22543107e+01 -6.65483249e+00 -6.65483249e+00
 -6.65483249e+00 -1.16355868e+00 -2.36442113e-01 -2.36442113e-01
 -2.36442113e-01  8.69895542e+01  6.82128812e+02  3.95377331e+03
  2.96506504e+04  1.54757034e+05  6.64903238e+05  2.71963701e+06
  1.10459740e+07  4.65100943e+07]
E1 = -706.5543823890347  E_coul = 198.91457912696734
cycle= 1 E= -507.639803262067  delta_E= 2.27e-13  |g|= 1.87e-10  |ddm|= 2.47e-10
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -706.5543823890347  E_coul = 198.91457912696734
  HOMO = -0.236442112654862  LUMO = 86.9895541560462
  mo_energy =
[-1.20270919e+02 -1.22543107e+01 -6.65483249e+00 -6.65483249e+00
 -6.65483249e+00 -1.16355868e+00 -2.36442113e-01 -2.36442113e-01
 -2.36442113e-01  8.69895542e+01  6.82128812e+02  3.95377331e+03
  2.96506504e+04  1.54757034e+05  6.64903238e+05  2.71963701e+06
  1.10459740e+07  4.65100943e+07]
E1 = -706.5543823890433  E_coul = 198.91457912697635
Extra cycle  E= -507.639803262067  delta_E= 3.98e-13  |g|= 1.37e-10  |ddm|= 4.36e-12
    CPU time for scf_cycle      0.19 sec, wall time      0.19 sec
exp = [1.87954849e+07 4.69887121e+06 1.17471780e+06 2.93679440e+05
 7.34199023e+04 1.83470372e+04 2.24346358e+03 4.58416645e+02
 1.22351622e+02 3.77491101e+01 4.74155640e+00 3.91224307e-01
 8.59856766e+00 4.90843946e-01]
grad_E = [-1.17235852e-13  1.76307105e-11  5.48169306e-12  1.03181400e-08
 -3.52385168e-08  6.28634338e-06 -5.03305835e-06 -4.44235979e-05
  1.73306433e-04  5.22463461e-05  2.46537896e-05  1.70611411e-06
  7.03042199e-06  2.30871823e-05]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="BFGS",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((14, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.6988712134173084e+06,1.1747178033543271e+06,2.9367945083858178e+05,7.3419865393677101e+04,1.8353927627435987e+04,2.2341424145819028e+03,4.5688904996449571e+02,1.2173317272260677e+02,3.7593061247508530e+01,4.7412722556720146e+00,3.9120358491841306e-01,8.5986297237246045e+00,4.9084868336327880e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "12s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:18:02 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  18795484.8537        1
[INPUT] 0    0    [1    /1   ]  4698871.21338        1
[INPUT] 0    0    [1    /1   ]  1174717.80334        1
[INPUT] 0    0    [1    /1   ]  293679.431624        1
[INPUT] 0    0    [1    /1   ]  73419.9281958        1
[INPUT] 0    0    [1    /1   ]  18342.2180778        1
[INPUT] 0    0    [1    /1   ]  2249.88585395        1
[INPUT] 0    0    [1    /1   ]  460.015673588        1
[INPUT] 0    0    [1    /1   ]  122.78684399         1
[INPUT] 0    0    [1    /1   ]  37.8397974811        1
[INPUT] 0    0    [1    /1   ]  4.74182094455        1
[INPUT] 0    0    [1    /1   ]  0.391234832264       1
[INPUT] 1    0    [1    /1   ]  8.59853939328        1
[INPUT] 1    0    [1    /1   ]  0.490841115135       1

nuclear repulsion = 0
number of shells = 14
number of NR pGTOs = 18
number of NR cGTOs = 18
basis = {'Ar': [[0, [18795484.85366944, 1.0]], [0, [4698871.213384456, 1.0]], [0, [1174717.8033393095, 1.0]], [0, [293679.4316236442, 1.0]], [0, [73419.92819584071, 1.0]], [0, [18342.218077845453, 1.0]], [0, [2249.885853954494, 1.0]], [0, [460.01567358841515, 1.0]], [0, [122.78684398961846, 1.0]], [0, [37.83979748105535, 1.0]], [0, [4.741820944548223, 1.0]], [0, [0.3912348322639739, 1.0]], [1, [8.598539393277786, 1.0]], [1, [0.49084111513489553, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [18795484.85366944]
bas 1, expnt(s) = [4698871.21338446]
bas 2, expnt(s) = [1174717.80333931]
bas 3, expnt(s) = [293679.43162364]
bas 4, expnt(s) = [73419.92819584]
bas 5, expnt(s) = [18342.21807785]
bas 6, expnt(s) = [2249.88585395]
bas 7, expnt(s) = [460.01567359]
bas 8, expnt(s) = [122.78684399]
bas 9, expnt(s) = [37.83979748]
bas 10, expnt(s) = [4.74182094]
bas 11, expnt(s) = [0.39123483]
bas 12, expnt(s) = [8.59853939]
bas 13, expnt(s) = [0.49084112]
CPU time:       262.55
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  0  1  1  0 42 43  0]
 [ 0  0  1  1  0 44 45  0]
 [ 0  0  1  1  0 46 47  0]
 [ 0  1  1  1  0 48 49  0]
 [ 0  1  1  1  0 50 51  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.87954849e+07 7.21199097e+05 4.69887121e+06 2.54982386e+05
 1.17471780e+06 9.01498871e+04 2.93679432e+05 3.18727967e+04
 7.34199282e+04 1.12687434e+04 1.83422181e+04 3.98202437e+03
 2.24988585e+03 8.25344740e+02 4.60015674e+02 2.50954216e+02
 1.22786844e+02 9.31920578e+01 3.78397975e+01 3.85457612e+01
 4.74182094e+00 8.11846434e+00 3.91234832e-01 1.24980760e+00
 8.59853939e+00 4.29551509e+01 4.90841115e-01 1.19856215e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.31995734548365
cond(S) = 56.441448741057435
E1 = -688.8371124016263  E_coul = 184.91610257167977
init E= -503.921009829947
    CPU time for initialize scf      0.03 sec, wall time      0.03 sec
  HOMO = -0.680898461644891  LUMO = 86.0394090688393
  mo_energy =
[-1.21650293e+02 -1.32812895e+01 -7.62150797e+00 -7.62150797e+00
 -7.62150797e+00 -1.65075945e+00 -6.80898462e-01 -6.80898462e-01
 -6.80898462e-01  8.60394091e+01  6.83619286e+02  3.96623006e+03
  2.96718929e+04  1.54769227e+05  6.64910503e+05  2.71964263e+06
  1.10459788e+07  4.65100984e+07]
E1 = -706.5864033652321  E_coul = 198.94697723052033
cycle= 1 E= -507.639426134712  delta_E= -3.72  |g|= 0.317  |ddm|= 0.301
    CPU time for cycle= 1      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.420453
diis-c [-0.17678046  1.        ]
  HOMO = -0.236262036521548  LUMO = 87.3736587542687
  mo_energy =
[-1.20262190e+02 -1.22531297e+01 -6.65294277e+00 -6.65294277e+00
 -6.65294277e+00 -1.16349719e+00 -2.36262037e-01 -2.36262037e-01
 -2.36262037e-01  8.73736588e+01  6.84990070e+02  3.96748198e+03
  2.96729828e+04  1.54770246e+05  6.64911492e+05  2.71964361e+06
  1.10459797e+07  4.65100994e+07]
E1 = -706.5554908589035  E_coul = 198.91564431858012
cycle= 2 E= -507.639846540323  delta_E= -0.00042  |g|= 0.0047  |ddm|= 0.014
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00499646
diis-c [-2.49117128e-05 -5.47576922e-04  1.00054758e+00]
  HOMO = -0.236433774089522  LUMO = 87.3701755597147
  mo_energy =
[-1.20270705e+02 -1.22542957e+01 -6.65474911e+00 -6.65474911e+00
 -6.65474911e+00 -1.16356067e+00 -2.36433774e-01 -2.36433774e-01
 -2.36433774e-01  8.73701756e+01  6.84979605e+02  3.96746628e+03
  2.96729638e+04  1.54770226e+05  6.64911472e+05  2.71964359e+06
  1.10459797e+07  4.65100994e+07]
E1 = -706.5550609843102  E_coul = 198.9152143370535
cycle= 3 E= -507.639846647257  delta_E= -1.07e-07  |g|= 9.31e-05  |ddm|= 0.000197
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.000124716
diis-c [-3.82702214e-10  3.35080090e-05 -2.52805165e-02  1.02524701e+00]
  HOMO = -0.236435920548943  LUMO = 87.370131919392
  mo_energy =
[-1.20270815e+02 -1.22543111e+01 -6.65477531e+00 -6.65477531e+00
 -6.65477531e+00 -1.16356130e+00 -2.36435921e-01 -2.36435921e-01
 -2.36435921e-01  8.73701319e+01  6.84979490e+02  3.96746614e+03
  2.96729636e+04  1.54770226e+05  6.64911472e+05  2.71964359e+06
  1.10459797e+07  4.65100994e+07]
E1 = -706.5550539845543  E_coul = 198.91520733725946
cycle= 4 E= -507.639846647295  delta_E= -3.81e-11  |g|= 3.64e-07  |ddm|= 3.34e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.5550539845543  E_coul = 198.91520733725946
  HOMO = -0.236435904836696  LUMO = 87.370132249887
  mo_energy =
[-1.20270814e+02 -1.22543110e+01 -6.65477516e+00 -6.65477516e+00
 -6.65477516e+00 -1.16356130e+00 -2.36435905e-01 -2.36435905e-01
 -2.36435905e-01  8.73701322e+01  6.84979492e+02  3.96746614e+03
  2.96729636e+04  1.54770226e+05  6.64911472e+05  2.71964359e+06
  1.10459797e+07  4.65100994e+07]
E1 = -706.5550540201825  E_coul = 198.91520737288732
Extra cycle  E= -507.639846647295  delta_E= -3.41e-13  |g|= 6.25e-09  |ddm|= 1.58e-08
    CPU time for scf_cycle      0.10 sec, wall time      0.11 sec
exp = [1.87954849e+07 4.69887121e+06 1.17471780e+06 2.93679432e+05
 7.34199282e+04 1.83422181e+04 2.24988585e+03 4.60015674e+02
 1.22786844e+02 3.78397975e+01 4.74182094e+00 3.91234832e-01
 8.59853939e+00 4.90841115e-01]
E = -507.6398466472952
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="BFGS",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((14, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.6988712134173084e+06,1.1747178033543271e+06,2.9367945083858178e+05,7.3419865393677101e+04,1.8353927627435987e+04,2.2341424145819028e+03,4.5688904996449571e+02,1.2173317272260677e+02,3.7593061247508530e+01,4.7412722556720146e+00,3.9120358491841306e-01,8.5986297237246045e+00,4.9084868336327880e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "12s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:18:03 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  18795484.8537        1
[INPUT] 0    0    [1    /1   ]  4698871.21338        1
[INPUT] 0    0    [1    /1   ]  1174717.80334        1
[INPUT] 0    0    [1    /1   ]  293679.431624        1
[INPUT] 0    0    [1    /1   ]  73419.9281958        1
[INPUT] 0    0    [1    /1   ]  18342.2180778        1
[INPUT] 0    0    [1    /1   ]  2249.88585395        1
[INPUT] 0    0    [1    /1   ]  460.015673588        1
[INPUT] 0    0    [1    /1   ]  122.78684399         1
[INPUT] 0    0    [1    /1   ]  37.8397974811        1
[INPUT] 0    0    [1    /1   ]  4.74182094455        1
[INPUT] 0    0    [1    /1   ]  0.391234832264       1
[INPUT] 1    0    [1    /1   ]  8.59853939328        1
[INPUT] 1    0    [1    /1   ]  0.490841115135       1

nuclear repulsion = 0
number of shells = 14
number of NR pGTOs = 18
number of NR cGTOs = 18
basis = {'Ar': [[0, [18795484.85366944, 1.0]], [0, [4698871.213384456, 1.0]], [0, [1174717.8033393095, 1.0]], [0, [293679.4316236442, 1.0]], [0, [73419.92819584071, 1.0]], [0, [18342.218077845453, 1.0]], [0, [2249.885853954494, 1.0]], [0, [460.01567358841515, 1.0]], [0, [122.78684398961846, 1.0]], [0, [37.83979748105535, 1.0]], [0, [4.741820944548223, 1.0]], [0, [0.3912348322639739, 1.0]], [1, [8.598539393277786, 1.0]], [1, [0.49084111513489553, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [18795484.85366944]
bas 1, expnt(s) = [4698871.21338446]
bas 2, expnt(s) = [1174717.80333931]
bas 3, expnt(s) = [293679.43162364]
bas 4, expnt(s) = [73419.92819584]
bas 5, expnt(s) = [18342.21807785]
bas 6, expnt(s) = [2249.88585395]
bas 7, expnt(s) = [460.01567359]
bas 8, expnt(s) = [122.78684399]
bas 9, expnt(s) = [37.83979748]
bas 10, expnt(s) = [4.74182094]
bas 11, expnt(s) = [0.39123483]
bas 12, expnt(s) = [8.59853939]
bas 13, expnt(s) = [0.49084112]
CPU time:       263.43
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  0  1  1  0 42 43  0]
 [ 0  0  1  1  0 44 45  0]
 [ 0  0  1  1  0 46 47  0]
 [ 0  1  1  1  0 48 49  0]
 [ 0  1  1  1  0 50 51  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.87954849e+07 7.21199097e+05 4.69887121e+06 2.54982386e+05
 1.17471780e+06 9.01498871e+04 2.93679432e+05 3.18727967e+04
 7.34199282e+04 1.12687434e+04 1.83422181e+04 3.98202437e+03
 2.24988585e+03 8.25344740e+02 4.60015674e+02 2.50954216e+02
 1.22786844e+02 9.31920578e+01 3.78397975e+01 3.85457612e+01
 4.74182094e+00 8.11846434e+00 3.91234832e-01 1.24980760e+00
 8.59853939e+00 4.29551509e+01 4.90841115e-01 1.19856215e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.31995734548365
cond(S) = 56.441448741057435
E1 = -688.8371124016263  E_coul = 184.91610257167977
init E= -503.921009829947
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.680898461644891  LUMO = 86.0394090688393
  mo_energy =
[-1.21650293e+02 -1.32812895e+01 -7.62150797e+00 -7.62150797e+00
 -7.62150797e+00 -1.65075945e+00 -6.80898462e-01 -6.80898462e-01
 -6.80898462e-01  8.60394091e+01  6.83619286e+02  3.96623006e+03
  2.96718929e+04  1.54769227e+05  6.64910503e+05  2.71964263e+06
  1.10459788e+07  4.65100984e+07]
E1 = -706.5864033652321  E_coul = 198.94697723052033
cycle= 1 E= -507.639426134712  delta_E= -3.72  |g|= 0.317  |ddm|= 0.301
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.420453
diis-c [-0.17678046  1.        ]
  HOMO = -0.236262036521548  LUMO = 87.3736587542687
  mo_energy =
[-1.20262190e+02 -1.22531297e+01 -6.65294277e+00 -6.65294277e+00
 -6.65294277e+00 -1.16349719e+00 -2.36262037e-01 -2.36262037e-01
 -2.36262037e-01  8.73736588e+01  6.84990070e+02  3.96748198e+03
  2.96729828e+04  1.54770246e+05  6.64911492e+05  2.71964361e+06
  1.10459797e+07  4.65100994e+07]
E1 = -706.5554908589035  E_coul = 198.91564431858012
cycle= 2 E= -507.639846540323  delta_E= -0.00042  |g|= 0.0047  |ddm|= 0.014
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00499646
diis-c [-2.49117128e-05 -5.47576922e-04  1.00054758e+00]
  HOMO = -0.236433774089522  LUMO = 87.3701755597147
  mo_energy =
[-1.20270705e+02 -1.22542957e+01 -6.65474911e+00 -6.65474911e+00
 -6.65474911e+00 -1.16356067e+00 -2.36433774e-01 -2.36433774e-01
 -2.36433774e-01  8.73701756e+01  6.84979605e+02  3.96746628e+03
  2.96729638e+04  1.54770226e+05  6.64911472e+05  2.71964359e+06
  1.10459797e+07  4.65100994e+07]
E1 = -706.5550609843102  E_coul = 198.9152143370535
cycle= 3 E= -507.639846647257  delta_E= -1.07e-07  |g|= 9.31e-05  |ddm|= 0.000197
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.000124716
diis-c [-3.82702214e-10  3.35080090e-05 -2.52805165e-02  1.02524701e+00]
  HOMO = -0.236435920548943  LUMO = 87.370131919392
  mo_energy =
[-1.20270815e+02 -1.22543111e+01 -6.65477531e+00 -6.65477531e+00
 -6.65477531e+00 -1.16356130e+00 -2.36435921e-01 -2.36435921e-01
 -2.36435921e-01  8.73701319e+01  6.84979490e+02  3.96746614e+03
  2.96729636e+04  1.54770226e+05  6.64911472e+05  2.71964359e+06
  1.10459797e+07  4.65100994e+07]
E1 = -706.5550539845543  E_coul = 198.91520733725946
cycle= 4 E= -507.639846647295  delta_E= -3.81e-11  |g|= 3.64e-07  |ddm|= 3.34e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.5550539845543  E_coul = 198.91520733725946
  HOMO = -0.236435904836696  LUMO = 87.370132249887
  mo_energy =
[-1.20270814e+02 -1.22543110e+01 -6.65477516e+00 -6.65477516e+00
 -6.65477516e+00 -1.16356130e+00 -2.36435905e-01 -2.36435905e-01
 -2.36435905e-01  8.73701322e+01  6.84979492e+02  3.96746614e+03
  2.96729636e+04  1.54770226e+05  6.64911472e+05  2.71964359e+06
  1.10459797e+07  4.65100994e+07]
E1 = -706.5550540201825  E_coul = 198.91520737288732
Extra cycle  E= -507.639846647295  delta_E= -3.41e-13  |g|= 6.25e-09  |ddm|= 1.58e-08
    CPU time for scf_cycle      0.10 sec, wall time      0.11 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 56.441448741057435
E1 = -706.5550540201825  E_coul = 198.91520737288732
init E= -507.639846647295
    CPU time for initialize scf      0.12 sec, wall time      0.12 sec
  HOMO = -0.236435904654074  LUMO = 87.3701322538948
  mo_energy =
[-1.20270814e+02 -1.22543110e+01 -6.65477515e+00 -6.65477515e+00
 -6.65477515e+00 -1.16356129e+00 -2.36435905e-01 -2.36435905e-01
 -2.36435905e-01  8.73701323e+01  6.84979492e+02  3.96746614e+03
  2.96729636e+04  1.54770226e+05  6.64911472e+05  2.71964359e+06
  1.10459797e+07  4.65100994e+07]
E1 = -706.5550540207174  E_coul = 198.91520737342253
cycle= 1 E= -507.639846647295  delta_E= 2.84e-13  |g|= 2.19e-10  |ddm|= 2.43e-10
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -706.5550540207174  E_coul = 198.91520737342253
  HOMO = -0.23643590465151  LUMO = 87.3701322539482
  mo_energy =
[-1.20270814e+02 -1.22543110e+01 -6.65477515e+00 -6.65477515e+00
 -6.65477515e+00 -1.16356129e+00 -2.36435905e-01 -2.36435905e-01
 -2.36435905e-01  8.73701323e+01  6.84979492e+02  3.96746614e+03
  2.96729636e+04  1.54770226e+05  6.64911472e+05  2.71964359e+06
  1.10459797e+07  4.65100994e+07]
E1 = -706.5550540207267  E_coul = 198.91520737343183
Extra cycle  E= -507.639846647295  delta_E=    0  |g|= 2.86e-10  |ddm|= 4.38e-12
    CPU time for scf_cycle      0.19 sec, wall time      0.19 sec
exp = [1.87954849e+07 4.69887121e+06 1.17471780e+06 2.93679432e+05
 7.34199282e+04 1.83422181e+04 2.24988585e+03 4.60015674e+02
 1.22786844e+02 3.78397975e+01 4.74182094e+00 3.91234832e-01
 8.59853939e+00 4.90841115e-01]
grad_E = [-1.20192945e-13  1.74397461e-11  3.91825970e-12  1.02096392e-08
 -3.57619816e-08  6.22215660e-06 -4.37711234e-06 -4.95606064e-05
  2.25035870e-04  6.73228256e-05  3.30716162e-05  1.39114185e-06
  9.02190280e-06  2.85590310e-05]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="BFGS",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((14, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.6988712134173084e+06,1.1747178033543271e+06,2.9367945083858178e+05,7.3419865393677101e+04,1.8353927627435987e+04,2.2341424145819028e+03,4.5688904996449571e+02,1.2173317272260677e+02,3.7593061247508530e+01,4.7412722556720146e+00,3.9120358491841306e-01,8.5986297237246045e+00,4.9084868336327880e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "12s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:18:06 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  18795484.8537        1
[INPUT] 0    0    [1    /1   ]  4698871.21336        1
[INPUT] 0    0    [1    /1   ]  1174717.80333        1
[INPUT] 0    0    [1    /1   ]  293679.417739        1
[INPUT] 0    0    [1    /1   ]  73419.9735807        1
[INPUT] 0    0    [1    /1   ]  18333.7570697        1
[INPUT] 0    0    [1    /1   ]  2261.23357638        1
[INPUT] 0    0    [1    /1   ]  462.466909613        1
[INPUT] 0    0    [1    /1   ]  123.358722585        1
[INPUT] 0    0    [1    /1   ]  37.9505947652        1
[INPUT] 0    0    [1    /1   ]  4.74219334976        1
[INPUT] 0    0    [1    /1   ]  0.391247299634       1
[INPUT] 1    0    [1    /1   ]  8.59850671501        1
[INPUT] 1    0    [1    /1   ]  0.49083762278        1

nuclear repulsion = 0
number of shells = 14
number of NR pGTOs = 18
number of NR cGTOs = 18
basis = {'Ar': [[0, [18795484.853669588, 1.0]], [0, [4698871.213360719, 1.0]], [0, [1174717.8033284675, 1.0]], [0, [293679.41773937305, 1.0]], [0, [73419.97358068103, 1.0]], [0, [18333.757069719482, 1.0]], [0, [2261.233576383381, 1.0]], [0, [462.4669096127278, 1.0]], [0, [123.35872258517031, 1.0]], [0, [37.95059476524713, 1.0]], [0, [4.742193349764611, 1.0]], [0, [0.3912472996338543, 1.0]], [1, [8.598506715010577, 1.0]], [1, [0.4908376227799112, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [18795484.85366959]
bas 1, expnt(s) = [4698871.21336072]
bas 2, expnt(s) = [1174717.80332847]
bas 3, expnt(s) = [293679.41773937]
bas 4, expnt(s) = [73419.97358068]
bas 5, expnt(s) = [18333.75706972]
bas 6, expnt(s) = [2261.23357638]
bas 7, expnt(s) = [462.46690961]
bas 8, expnt(s) = [123.35872259]
bas 9, expnt(s) = [37.95059477]
bas 10, expnt(s) = [4.74219335]
bas 11, expnt(s) = [0.3912473]
bas 12, expnt(s) = [8.59850672]
bas 13, expnt(s) = [0.49083762]
CPU time:       267.04
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  0  1  1  0 42 43  0]
 [ 0  0  1  1  0 44 45  0]
 [ 0  0  1  1  0 46 47  0]
 [ 0  1  1  1  0 48 49  0]
 [ 0  1  1  1  0 50 51  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.87954849e+07 7.21199097e+05 4.69887121e+06 2.54982386e+05
 1.17471780e+06 9.01498871e+04 2.93679418e+05 3.18727956e+04
 7.34199736e+04 1.12687487e+04 1.83337571e+04 3.98064665e+03
 2.26123358e+03 8.28464862e+02 4.62466910e+02 2.51956474e+02
 1.23358723e+02 9.35173996e+01 3.79505948e+01 3.86303786e+01
 4.74219335e+00 8.11894253e+00 3.91247300e-01 1.24983747e+00
 8.59850672e+00 4.29549468e+01 4.90837623e-01 1.19855149e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.31994718487129
cond(S) = 56.451607448132044
E1 = -688.839257473238  E_coul = 184.91639434823378
init E= -503.922863125004
    CPU time for initialize scf      0.03 sec, wall time      0.03 sec
  HOMO = -0.68090086067796  LUMO = 86.523749567018
  mo_energy =
[-1.21650257e+02 -1.32813082e+01 -7.62146816e+00 -7.62146816e+00
 -7.62146816e+00 -1.65078231e+00 -6.80900861e-01 -6.80900861e-01
 -6.80900861e-01  8.65237496e+01  6.87632747e+02  3.98840892e+03
  2.97094176e+04  1.54790979e+05  6.64923708e+05  2.71965305e+06
  1.10459878e+07  4.65101065e+07]
E1 = -706.586938841363  E_coul = 198.94744071861862
cycle= 1 E= -507.639498122744  delta_E= -3.72  |g|= 0.316  |ddm|= 0.301
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.420262
diis-c [-0.17662052  1.        ]
  HOMO = -0.236256276041872  LUMO = 87.8585813662284
  mo_energy =
[-1.20262169e+02 -1.22531240e+01 -6.65289100e+00 -6.65289100e+00
 -6.65289100e+00 -1.16349973e+00 -2.36256276e-01 -2.36256276e-01
 -2.36256276e-01  8.78585814e+01  6.89003459e+02  3.98966067e+03
  2.97105078e+04  1.54791998e+05  6.64924697e+05  2.71965403e+06
  1.10459888e+07  4.65101074e+07]
E1 = -706.5562761743413  E_coul = 198.91636124844098
cycle= 2 E= -507.6399149259  delta_E= -0.000417  |g|= 0.00468  |ddm|= 0.0139
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.0049754
diis-c [-2.46981203e-05 -5.65992959e-04  1.00056599e+00]
  HOMO = -0.236426337681794  LUMO = 87.855114570318
  mo_energy =
[-1.20270623e+02 -1.22542791e+01 -6.65468061e+00 -6.65468061e+00
 -6.65468061e+00 -1.16356260e+00 -2.36426338e-01 -2.36426338e-01
 -2.36426338e-01  8.78551146e+01  6.88993045e+02  3.98964504e+03
  2.97104889e+04  1.54791979e+05  6.64924677e+05  2.71965401e+06
  1.10459888e+07  4.65101074e+07]
E1 = -706.5558512885585  E_coul = 198.91593625722902
cycle= 3 E= -507.63991503133  delta_E= -1.05e-07  |g|= 9.24e-05  |ddm|= 0.000195
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.000123749
diis-c [-3.76581759e-10  3.35354022e-05 -2.51922130e-02  1.02515868e+00]
  HOMO = -0.236428453011822  LUMO = 87.8550714163212
  mo_energy =
[-1.20270732e+02 -1.22542942e+01 -6.65470645e+00 -6.65470645e+00
 -6.65470645e+00 -1.16356322e+00 -2.36428453e-01 -2.36428453e-01
 -2.36428453e-01  8.78550714e+01  6.88992932e+02  3.98964490e+03
  2.97104888e+04  1.54791979e+05  6.64924677e+05  2.71965401e+06
  1.10459888e+07  4.65101074e+07]
E1 = -706.5558444023919  E_coul = 198.91592937102564
cycle= 4 E= -507.639915031366  delta_E= -3.68e-11  |g|= 3.6e-07  |ddm|= 3.29e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.5558444023919  E_coul = 198.91592937102564
  HOMO = -0.236428437582001  LUMO = 87.8550717432359
  mo_energy =
[-1.20270731e+02 -1.22542941e+01 -6.65470630e+00 -6.65470630e+00
 -6.65470630e+00 -1.16356322e+00 -2.36428438e-01 -2.36428438e-01
 -2.36428438e-01  8.78550717e+01  6.88992933e+02  3.98964490e+03
  2.97104888e+04  1.54791979e+05  6.64924677e+05  2.71965401e+06
  1.10459888e+07  4.65101074e+07]
E1 = -706.5558444373594  E_coul = 198.91592940599276
Extra cycle  E= -507.639915031367  delta_E= -3.41e-13  |g|= 6.16e-09  |ddm|= 1.55e-08
    CPU time for scf_cycle      0.10 sec, wall time      0.11 sec
exp = [1.87954849e+07 4.69887121e+06 1.17471780e+06 2.93679418e+05
 7.34199736e+04 1.83337571e+04 2.26123358e+03 4.62466910e+02
 1.23358723e+02 3.79505948e+01 4.74219335e+00 3.91247300e-01
 8.59850672e+00 4.90837623e-01]
E = -507.6399150313666
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="BFGS",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((14, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.6988712134173084e+06,1.1747178033543271e+06,2.9367945083858178e+05,7.3419865393677101e+04,1.8353927627435987e+04,2.2341424145819028e+03,4.5688904996449571e+02,1.2173317272260677e+02,3.7593061247508530e+01,4.7412722556720146e+00,3.9120358491841306e-01,8.5986297237246045e+00,4.9084868336327880e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "12s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:18:07 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  18795484.8537        1
[INPUT] 0    0    [1    /1   ]  4698871.21336        1
[INPUT] 0    0    [1    /1   ]  1174717.80333        1
[INPUT] 0    0    [1    /1   ]  293679.417739        1
[INPUT] 0    0    [1    /1   ]  73419.9735807        1
[INPUT] 0    0    [1    /1   ]  18333.7570697        1
[INPUT] 0    0    [1    /1   ]  2261.23357638        1
[INPUT] 0    0    [1    /1   ]  462.466909613        1
[INPUT] 0    0    [1    /1   ]  123.358722585        1
[INPUT] 0    0    [1    /1   ]  37.9505947652        1
[INPUT] 0    0    [1    /1   ]  4.74219334976        1
[INPUT] 0    0    [1    /1   ]  0.391247299634       1
[INPUT] 1    0    [1    /1   ]  8.59850671501        1
[INPUT] 1    0    [1    /1   ]  0.49083762278        1

nuclear repulsion = 0
number of shells = 14
number of NR pGTOs = 18
number of NR cGTOs = 18
basis = {'Ar': [[0, [18795484.853669588, 1.0]], [0, [4698871.213360719, 1.0]], [0, [1174717.8033284675, 1.0]], [0, [293679.41773937305, 1.0]], [0, [73419.97358068103, 1.0]], [0, [18333.757069719482, 1.0]], [0, [2261.233576383381, 1.0]], [0, [462.4669096127278, 1.0]], [0, [123.35872258517031, 1.0]], [0, [37.95059476524713, 1.0]], [0, [4.742193349764611, 1.0]], [0, [0.3912472996338543, 1.0]], [1, [8.598506715010577, 1.0]], [1, [0.4908376227799112, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [18795484.85366959]
bas 1, expnt(s) = [4698871.21336072]
bas 2, expnt(s) = [1174717.80332847]
bas 3, expnt(s) = [293679.41773937]
bas 4, expnt(s) = [73419.97358068]
bas 5, expnt(s) = [18333.75706972]
bas 6, expnt(s) = [2261.23357638]
bas 7, expnt(s) = [462.46690961]
bas 8, expnt(s) = [123.35872259]
bas 9, expnt(s) = [37.95059477]
bas 10, expnt(s) = [4.74219335]
bas 11, expnt(s) = [0.3912473]
bas 12, expnt(s) = [8.59850672]
bas 13, expnt(s) = [0.49083762]
CPU time:       267.93
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  0  1  1  0 42 43  0]
 [ 0  0  1  1  0 44 45  0]
 [ 0  0  1  1  0 46 47  0]
 [ 0  1  1  1  0 48 49  0]
 [ 0  1  1  1  0 50 51  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.87954849e+07 7.21199097e+05 4.69887121e+06 2.54982386e+05
 1.17471780e+06 9.01498871e+04 2.93679418e+05 3.18727956e+04
 7.34199736e+04 1.12687487e+04 1.83337571e+04 3.98064665e+03
 2.26123358e+03 8.28464862e+02 4.62466910e+02 2.51956474e+02
 1.23358723e+02 9.35173996e+01 3.79505948e+01 3.86303786e+01
 4.74219335e+00 8.11894253e+00 3.91247300e-01 1.24983747e+00
 8.59850672e+00 4.29549468e+01 4.90837623e-01 1.19855149e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.31994718487129
cond(S) = 56.451607448132044
E1 = -688.839257473238  E_coul = 184.91639434823378
init E= -503.922863125004
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.68090086067796  LUMO = 86.523749567018
  mo_energy =
[-1.21650257e+02 -1.32813082e+01 -7.62146816e+00 -7.62146816e+00
 -7.62146816e+00 -1.65078231e+00 -6.80900861e-01 -6.80900861e-01
 -6.80900861e-01  8.65237496e+01  6.87632747e+02  3.98840892e+03
  2.97094176e+04  1.54790979e+05  6.64923708e+05  2.71965305e+06
  1.10459878e+07  4.65101065e+07]
E1 = -706.586938841363  E_coul = 198.94744071861862
cycle= 1 E= -507.639498122744  delta_E= -3.72  |g|= 0.316  |ddm|= 0.301
    CPU time for cycle= 1      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.420262
diis-c [-0.17662052  1.        ]
  HOMO = -0.236256276041872  LUMO = 87.8585813662284
  mo_energy =
[-1.20262169e+02 -1.22531240e+01 -6.65289100e+00 -6.65289100e+00
 -6.65289100e+00 -1.16349973e+00 -2.36256276e-01 -2.36256276e-01
 -2.36256276e-01  8.78585814e+01  6.89003459e+02  3.98966067e+03
  2.97105078e+04  1.54791998e+05  6.64924697e+05  2.71965403e+06
  1.10459888e+07  4.65101074e+07]
E1 = -706.5562761743413  E_coul = 198.91636124844098
cycle= 2 E= -507.6399149259  delta_E= -0.000417  |g|= 0.00468  |ddm|= 0.0139
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.0049754
diis-c [-2.46981203e-05 -5.65992959e-04  1.00056599e+00]
  HOMO = -0.236426337681794  LUMO = 87.855114570318
  mo_energy =
[-1.20270623e+02 -1.22542791e+01 -6.65468061e+00 -6.65468061e+00
 -6.65468061e+00 -1.16356260e+00 -2.36426338e-01 -2.36426338e-01
 -2.36426338e-01  8.78551146e+01  6.88993045e+02  3.98964504e+03
  2.97104889e+04  1.54791979e+05  6.64924677e+05  2.71965401e+06
  1.10459888e+07  4.65101074e+07]
E1 = -706.5558512885585  E_coul = 198.91593625722902
cycle= 3 E= -507.63991503133  delta_E= -1.05e-07  |g|= 9.24e-05  |ddm|= 0.000195
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.000123749
diis-c [-3.76581759e-10  3.35354022e-05 -2.51922130e-02  1.02515868e+00]
  HOMO = -0.236428453011822  LUMO = 87.8550714163212
  mo_energy =
[-1.20270732e+02 -1.22542942e+01 -6.65470645e+00 -6.65470645e+00
 -6.65470645e+00 -1.16356322e+00 -2.36428453e-01 -2.36428453e-01
 -2.36428453e-01  8.78550714e+01  6.88992932e+02  3.98964490e+03
  2.97104888e+04  1.54791979e+05  6.64924677e+05  2.71965401e+06
  1.10459888e+07  4.65101074e+07]
E1 = -706.5558444023919  E_coul = 198.91592937102564
cycle= 4 E= -507.639915031366  delta_E= -3.68e-11  |g|= 3.6e-07  |ddm|= 3.29e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.5558444023919  E_coul = 198.91592937102564
  HOMO = -0.236428437582001  LUMO = 87.8550717432359
  mo_energy =
[-1.20270731e+02 -1.22542941e+01 -6.65470630e+00 -6.65470630e+00
 -6.65470630e+00 -1.16356322e+00 -2.36428438e-01 -2.36428438e-01
 -2.36428438e-01  8.78550717e+01  6.88992933e+02  3.98964490e+03
  2.97104888e+04  1.54791979e+05  6.64924677e+05  2.71965401e+06
  1.10459888e+07  4.65101074e+07]
E1 = -706.5558444373594  E_coul = 198.91592940599276
Extra cycle  E= -507.639915031367  delta_E= -3.41e-13  |g|= 6.16e-09  |ddm|= 1.55e-08
    CPU time for scf_cycle      0.10 sec, wall time      0.11 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 56.451607448132044
E1 = -706.5558444373594  E_coul = 198.91592940599276
init E= -507.639915031367
    CPU time for initialize scf      0.12 sec, wall time      0.12 sec
  HOMO = -0.236428437403231  LUMO = 87.85507174718
  mo_energy =
[-1.20270731e+02 -1.22542941e+01 -6.65470630e+00 -6.65470630e+00
 -6.65470630e+00 -1.16356322e+00 -2.36428437e-01 -2.36428437e-01
 -2.36428437e-01  8.78550717e+01  6.88992933e+02  3.98964490e+03
  2.97104888e+04  1.54791979e+05  6.64924677e+05  2.71965401e+06
  1.10459888e+07  4.65101074e+07]
E1 = -706.5558444378829  E_coul = 198.91592940651657
cycle= 1 E= -507.639915031366  delta_E= 2.84e-13  |g|= 1.45e-10  |ddm|= 2.38e-10
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -706.5558444378829  E_coul = 198.91592940651657
  HOMO = -0.236428437400727  LUMO = 87.8550717472356
  mo_energy =
[-1.20270731e+02 -1.22542941e+01 -6.65470630e+00 -6.65470630e+00
 -6.65470630e+00 -1.16356322e+00 -2.36428437e-01 -2.36428437e-01
 -2.36428437e-01  8.78550717e+01  6.88992933e+02  3.98964490e+03
  2.97104888e+04  1.54791979e+05  6.64924677e+05  2.71965401e+06
  1.10459888e+07  4.65101074e+07]
E1 = -706.555844437892  E_coul = 198.91592940652546
Extra cycle  E= -507.639915031367  delta_E= -1.71e-13  |g|= 4.52e-11  |ddm|= 4.21e-12
    CPU time for scf_cycle      0.19 sec, wall time      0.19 sec
exp = [1.87954849e+07 4.69887121e+06 1.17471780e+06 2.93679418e+05
 7.34199736e+04 1.83337571e+04 2.26123358e+03 4.62466910e+02
 1.23358723e+02 3.79505948e+01 4.74219335e+00 3.91247300e-01
 8.59850672e+00 4.90837623e-01]
grad_E = [-1.25475668e-13  1.70935777e-11  1.12269807e-12  1.00127873e-08
 -3.66831054e-08  6.10469793e-06 -2.93855930e-06 -5.18266347e-05
  2.69925946e-04  7.64444523e-05  3.85269751e-05  3.73677095e-06
  1.04837092e-05  3.46643188e-05]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="BFGS",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((14, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.6988712134173084e+06,1.1747178033543271e+06,2.9367945083858178e+05,7.3419865393677101e+04,1.8353927627435987e+04,2.2341424145819028e+03,4.5688904996449571e+02,1.2173317272260677e+02,3.7593061247508530e+01,4.7412722556720146e+00,3.9120358491841306e-01,8.5986297237246045e+00,4.9084868336327880e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "12s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:18:11 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  18795484.8537        1
[INPUT] 0    0    [1    /1   ]  4698871.21332        1
[INPUT] 0    0    [1    /1   ]  1174717.80331        1
[INPUT] 0    0    [1    /1   ]  293679.395432        1
[INPUT] 0    0    [1    /1   ]  73420.0464749        1
[INPUT] 0    0    [1    /1   ]  18320.1630188        1
[INPUT] 0    0    [1    /1   ]  2279.5767957         1
[INPUT] 0    0    [1    /1   ]  465.854400921        1
[INPUT] 0    0    [1    /1   ]  123.980950903        1
[INPUT] 0    0    [1    /1   ]  38.0544997262        1
[INPUT] 0    0    [1    /1   ]  4.7426485675         1
[INPUT] 0    0    [1    /1   ]  0.391258248755       1
[INPUT] 1    0    [1    /1   ]  8.59848246256        1
[INPUT] 1    0    [1    /1   ]  0.490834583421       1

nuclear repulsion = 0
number of shells = 14
number of NR pGTOs = 18
number of NR cGTOs = 18
basis = {'Ar': [[0, [18795484.853669826, 1.0]], [0, [4698871.213322583, 1.0]], [0, [1174717.8033110073, 1.0]], [0, [293679.39543220284, 1.0]], [0, [73420.04647485187, 1.0]], [0, [18320.16301878688, 1.0]], [0, [2279.5767957036364, 1.0]], [0, [465.85440092062413, 1.0]], [0, [123.98095090292516, 1.0]], [0, [38.05449972618424, 1.0]], [0, [4.742648567501841, 1.0]], [0, [0.3912582487549305, 1.0]], [1, [8.598482462559394, 1.0]], [1, [0.4908345834210694, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [18795484.85366983]
bas 1, expnt(s) = [4698871.21332258]
bas 2, expnt(s) = [1174717.80331101]
bas 3, expnt(s) = [293679.3954322]
bas 4, expnt(s) = [73420.04647485]
bas 5, expnt(s) = [18320.16301879]
bas 6, expnt(s) = [2279.5767957]
bas 7, expnt(s) = [465.85440092]
bas 8, expnt(s) = [123.9809509]
bas 9, expnt(s) = [38.05449973]
bas 10, expnt(s) = [4.74264857]
bas 11, expnt(s) = [0.39125825]
bas 12, expnt(s) = [8.59848246]
bas 13, expnt(s) = [0.49083458]
CPU time:       271.53
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  0  1  1  0 42 43  0]
 [ 0  0  1  1  0 44 45  0]
 [ 0  0  1  1  0 46 47  0]
 [ 0  1  1  1  0 48 49  0]
 [ 0  1  1  1  0 50 51  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.87954849e+07 7.21199097e+05 4.69887121e+06 2.54982386e+05
 1.17471780e+06 9.01498871e+04 2.93679395e+05 3.18727937e+04
 7.34200465e+04 1.12687570e+04 1.83201630e+04 3.97843278e+03
 2.27957680e+03 8.33500174e+02 4.65854401e+02 2.53339364e+02
 1.23980951e+02 9.38709572e+01 3.80544997e+01 3.87096761e+01
 4.74264857e+00 8.11952704e+00 3.91258249e-01 1.24986370e+00
 8.59848246e+00 4.29547954e+01 4.90834583e-01 1.19854222e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319935429048034
cond(S) = 56.44855310703642
E1 = -688.8430430539097  E_coul = 184.91664107683647
init E= -503.926401977073
    CPU time for initialize scf      0.03 sec, wall time      0.03 sec
  HOMO = -0.680904347774494  LUMO = 87.019855091135
  mo_energy =
[-1.21650289e+02 -1.32812814e+01 -7.62143329e+00 -7.62143329e+00
 -7.62143329e+00 -1.65080220e+00 -6.80904348e-01 -6.80904348e-01
 -6.80904348e-01  8.70198551e+01  6.92552974e+02  4.02116811e+03
  2.97671496e+04  1.54823771e+05  6.64943017e+05  2.71966809e+06
  1.10460009e+07  4.65101180e+07]
E1 = -706.5873473956914  E_coul = 198.9477464555254
cycle= 1 E= -507.639600940166  delta_E= -3.71  |g|= 0.316  |ddm|= 0.301
    CPU time for cycle= 1      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.419923
diis-c [-0.1763352  1.       ]
  HOMO = -0.236250708381509  LUMO = 88.3552609131469
  mo_energy =
[-1.20262262e+02 -1.22530772e+01 -6.65284707e+00 -6.65284707e+00
 -6.65284707e+00 -1.16349845e+00 -2.36250708e-01 -2.36250708e-01
 -2.36250708e-01  8.83552609e+01  6.93923474e+02  4.02241927e+03
  2.97682400e+04  1.54824791e+05  6.64944007e+05  2.71966907e+06
  1.10460018e+07  4.65101190e+07]
E1 = -706.5569356472092  E_coul = 198.91692151972464
cycle= 2 E= -507.640014127485  delta_E= -0.000413  |g|= 0.00465  |ddm|= 0.0138
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00495417
diis-c [-2.44840150e-05 -5.82526059e-04  1.00058253e+00]
  HOMO = -0.236419079079115  LUMO = 88.3518101487718
  mo_energy =
[-1.20270657e+02 -1.22542214e+01 -6.65461980e+00 -6.65461980e+00
 -6.65461980e+00 -1.16356069e+00 -2.36419079e-01 -2.36419079e-01
 -2.36419079e-01  8.83518101e+01  6.93913104e+02  4.02240371e+03
  2.97682212e+04  1.54824771e+05  6.64943987e+05  2.71966905e+06
  1.10460018e+07  4.65101190e+07]
E1 = -706.5565157956693  E_coul = 198.91650156426215
cycle= 3 E= -507.640014231407  delta_E= -1.04e-07  |g|= 9.16e-05  |ddm|= 0.000192
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.000122782
diis-c [-3.70366913e-10  3.35601761e-05 -2.51038493e-02  1.02507029e+00]
  HOMO = -0.236421163459991  LUMO = 88.3517674784207
  mo_energy =
[-1.20270764e+02 -1.22542362e+01 -6.65464528e+00 -6.65464528e+00
 -6.65464528e+00 -1.16356131e+00 -2.36421163e-01 -2.36421163e-01
 -2.36421163e-01  8.83517675e+01  6.93912993e+02  4.02240357e+03
  2.97682211e+04  1.54824771e+05  6.64943987e+05  2.71966905e+06
  1.10460018e+07  4.65101190e+07]
E1 = -706.5565090227386  E_coul = 198.91649479129518
cycle= 4 E= -507.640014231443  delta_E= -3.63e-11  |g|= 3.55e-07  |ddm|= 3.24e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.5565090227386  E_coul = 198.91649479129518
  HOMO = -0.236421148315237  LUMO = 88.3517678017348
  mo_energy =
[-1.20270763e+02 -1.22542361e+01 -6.65464513e+00 -6.65464513e+00
 -6.65464513e+00 -1.16356130e+00 -2.36421148e-01 -2.36421148e-01
 -2.36421148e-01  8.83517678e+01  6.93912994e+02  4.02240358e+03
  2.97682211e+04  1.54824771e+05  6.64943987e+05  2.71966905e+06
  1.10460018e+07  4.65101190e+07]
E1 = -706.556509057037  E_coul = 198.91649482559347
Extra cycle  E= -507.640014231444  delta_E= -1.14e-13  |g|= 6.06e-09  |ddm|= 1.52e-08
    CPU time for scf_cycle      0.10 sec, wall time      0.11 sec
exp = [1.87954849e+07 4.69887121e+06 1.17471780e+06 2.93679395e+05
 7.34200465e+04 1.83201630e+04 2.27957680e+03 4.65854401e+02
 1.23980951e+02 3.80544997e+01 4.74264857e+00 3.91258249e-01
 8.59848246e+00 4.90834583e-01]
E = -507.64001423144356
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="BFGS",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((14, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.6988712134173084e+06,1.1747178033543271e+06,2.9367945083858178e+05,7.3419865393677101e+04,1.8353927627435987e+04,2.2341424145819028e+03,4.5688904996449571e+02,1.2173317272260677e+02,3.7593061247508530e+01,4.7412722556720146e+00,3.9120358491841306e-01,8.5986297237246045e+00,4.9084868336327880e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "12s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:18:12 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  18795484.8537        1
[INPUT] 0    0    [1    /1   ]  4698871.21332        1
[INPUT] 0    0    [1    /1   ]  1174717.80331        1
[INPUT] 0    0    [1    /1   ]  293679.395432        1
[INPUT] 0    0    [1    /1   ]  73420.0464749        1
[INPUT] 0    0    [1    /1   ]  18320.1630188        1
[INPUT] 0    0    [1    /1   ]  2279.5767957         1
[INPUT] 0    0    [1    /1   ]  465.854400921        1
[INPUT] 0    0    [1    /1   ]  123.980950903        1
[INPUT] 0    0    [1    /1   ]  38.0544997262        1
[INPUT] 0    0    [1    /1   ]  4.7426485675         1
[INPUT] 0    0    [1    /1   ]  0.391258248755       1
[INPUT] 1    0    [1    /1   ]  8.59848246256        1
[INPUT] 1    0    [1    /1   ]  0.490834583421       1

nuclear repulsion = 0
number of shells = 14
number of NR pGTOs = 18
number of NR cGTOs = 18
basis = {'Ar': [[0, [18795484.853669826, 1.0]], [0, [4698871.213322583, 1.0]], [0, [1174717.8033110073, 1.0]], [0, [293679.39543220284, 1.0]], [0, [73420.04647485187, 1.0]], [0, [18320.16301878688, 1.0]], [0, [2279.5767957036364, 1.0]], [0, [465.85440092062413, 1.0]], [0, [123.98095090292516, 1.0]], [0, [38.05449972618424, 1.0]], [0, [4.742648567501841, 1.0]], [0, [0.3912582487549305, 1.0]], [1, [8.598482462559394, 1.0]], [1, [0.4908345834210694, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [18795484.85366983]
bas 1, expnt(s) = [4698871.21332258]
bas 2, expnt(s) = [1174717.80331101]
bas 3, expnt(s) = [293679.3954322]
bas 4, expnt(s) = [73420.04647485]
bas 5, expnt(s) = [18320.16301879]
bas 6, expnt(s) = [2279.5767957]
bas 7, expnt(s) = [465.85440092]
bas 8, expnt(s) = [123.9809509]
bas 9, expnt(s) = [38.05449973]
bas 10, expnt(s) = [4.74264857]
bas 11, expnt(s) = [0.39125825]
bas 12, expnt(s) = [8.59848246]
bas 13, expnt(s) = [0.49083458]
CPU time:       272.44
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  0  1  1  0 42 43  0]
 [ 0  0  1  1  0 44 45  0]
 [ 0  0  1  1  0 46 47  0]
 [ 0  1  1  1  0 48 49  0]
 [ 0  1  1  1  0 50 51  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.87954849e+07 7.21199097e+05 4.69887121e+06 2.54982386e+05
 1.17471780e+06 9.01498871e+04 2.93679395e+05 3.18727937e+04
 7.34200465e+04 1.12687570e+04 1.83201630e+04 3.97843278e+03
 2.27957680e+03 8.33500174e+02 4.65854401e+02 2.53339364e+02
 1.23980951e+02 9.38709572e+01 3.80544997e+01 3.87096761e+01
 4.74264857e+00 8.11952704e+00 3.91258249e-01 1.24986370e+00
 8.59848246e+00 4.29547954e+01 4.90834583e-01 1.19854222e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319935429048034
cond(S) = 56.44855310703642
E1 = -688.8430430539097  E_coul = 184.91664107683647
init E= -503.926401977073
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.680904347774494  LUMO = 87.019855091135
  mo_energy =
[-1.21650289e+02 -1.32812814e+01 -7.62143329e+00 -7.62143329e+00
 -7.62143329e+00 -1.65080220e+00 -6.80904348e-01 -6.80904348e-01
 -6.80904348e-01  8.70198551e+01  6.92552974e+02  4.02116811e+03
  2.97671496e+04  1.54823771e+05  6.64943017e+05  2.71966809e+06
  1.10460009e+07  4.65101180e+07]
E1 = -706.5873473956914  E_coul = 198.9477464555254
cycle= 1 E= -507.639600940166  delta_E= -3.71  |g|= 0.316  |ddm|= 0.301
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.419923
diis-c [-0.1763352  1.       ]
  HOMO = -0.236250708381509  LUMO = 88.3552609131469
  mo_energy =
[-1.20262262e+02 -1.22530772e+01 -6.65284707e+00 -6.65284707e+00
 -6.65284707e+00 -1.16349845e+00 -2.36250708e-01 -2.36250708e-01
 -2.36250708e-01  8.83552609e+01  6.93923474e+02  4.02241927e+03
  2.97682400e+04  1.54824791e+05  6.64944007e+05  2.71966907e+06
  1.10460018e+07  4.65101190e+07]
E1 = -706.5569356472092  E_coul = 198.91692151972464
cycle= 2 E= -507.640014127485  delta_E= -0.000413  |g|= 0.00465  |ddm|= 0.0138
    CPU time for cycle= 2      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.00495417
diis-c [-2.44840150e-05 -5.82526059e-04  1.00058253e+00]
  HOMO = -0.236419079079115  LUMO = 88.3518101487718
  mo_energy =
[-1.20270657e+02 -1.22542214e+01 -6.65461980e+00 -6.65461980e+00
 -6.65461980e+00 -1.16356069e+00 -2.36419079e-01 -2.36419079e-01
 -2.36419079e-01  8.83518101e+01  6.93913104e+02  4.02240371e+03
  2.97682212e+04  1.54824771e+05  6.64943987e+05  2.71966905e+06
  1.10460018e+07  4.65101190e+07]
E1 = -706.5565157956693  E_coul = 198.91650156426215
cycle= 3 E= -507.640014231407  delta_E= -1.04e-07  |g|= 9.16e-05  |ddm|= 0.000192
    CPU time for cycle= 3      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.000122782
diis-c [-3.70366913e-10  3.35601761e-05 -2.51038493e-02  1.02507029e+00]
  HOMO = -0.236421163459991  LUMO = 88.3517674784207
  mo_energy =
[-1.20270764e+02 -1.22542362e+01 -6.65464528e+00 -6.65464528e+00
 -6.65464528e+00 -1.16356131e+00 -2.36421163e-01 -2.36421163e-01
 -2.36421163e-01  8.83517675e+01  6.93912993e+02  4.02240357e+03
  2.97682211e+04  1.54824771e+05  6.64943987e+05  2.71966905e+06
  1.10460018e+07  4.65101190e+07]
E1 = -706.5565090227386  E_coul = 198.91649479129518
cycle= 4 E= -507.640014231443  delta_E= -3.63e-11  |g|= 3.55e-07  |ddm|= 3.24e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.5565090227386  E_coul = 198.91649479129518
  HOMO = -0.236421148315237  LUMO = 88.3517678017348
  mo_energy =
[-1.20270763e+02 -1.22542361e+01 -6.65464513e+00 -6.65464513e+00
 -6.65464513e+00 -1.16356130e+00 -2.36421148e-01 -2.36421148e-01
 -2.36421148e-01  8.83517678e+01  6.93912994e+02  4.02240358e+03
  2.97682211e+04  1.54824771e+05  6.64943987e+05  2.71966905e+06
  1.10460018e+07  4.65101190e+07]
E1 = -706.556509057037  E_coul = 198.91649482559347
Extra cycle  E= -507.640014231444  delta_E= -1.14e-13  |g|= 6.06e-09  |ddm|= 1.52e-08
    CPU time for scf_cycle      0.10 sec, wall time      0.10 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 56.44855310703642
E1 = -706.556509057037  E_coul = 198.91649482559347
init E= -507.640014231444
    CPU time for initialize scf      0.12 sec, wall time      0.12 sec
  HOMO = -0.236421148140351  LUMO = 88.351767805617
  mo_energy =
[-1.20270763e+02 -1.22542361e+01 -6.65464513e+00 -6.65464513e+00
 -6.65464513e+00 -1.16356130e+00 -2.36421148e-01 -2.36421148e-01
 -2.36421148e-01  8.83517678e+01  6.93912994e+02  4.02240358e+03
  2.97682211e+04  1.54824771e+05  6.64943987e+05  2.71966905e+06
  1.10460018e+07  4.65101190e+07]
E1 = -706.5565090575491  E_coul = 198.91649482610552
cycle= 1 E= -507.640014231444  delta_E=    0  |g|= 1.43e-10  |ddm|= 2.32e-10
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -706.5565090575491  E_coul = 198.91649482610552
  HOMO = -0.236421148137906  LUMO = 88.3517678056737
  mo_energy =
[-1.20270763e+02 -1.22542361e+01 -6.65464513e+00 -6.65464513e+00
 -6.65464513e+00 -1.16356130e+00 -2.36421148e-01 -2.36421148e-01
 -2.36421148e-01  8.83517678e+01  6.93912994e+02  4.02240358e+03
  2.97682211e+04  1.54824771e+05  6.64943987e+05  2.71966905e+06
  1.10460018e+07  4.65101190e+07]
E1 = -706.5565090575572  E_coul = 198.91649482611388
Extra cycle  E= -507.640014231443  delta_E= 2.84e-13  |g|= 1.06e-10  |ddm|= 4.02e-12
    CPU time for scf_cycle      0.19 sec, wall time      0.19 sec
exp = [1.87954849e+07 4.69887121e+06 1.17471780e+06 2.93679395e+05
 7.34200465e+04 1.83201630e+04 2.27957680e+03 4.65854401e+02
 1.23980951e+02 3.80544997e+01 4.74264857e+00 3.91258249e-01
 8.59848246e+00 4.90834583e-01]
grad_E = [-1.33908826e-13  1.65268044e-11 -3.34653025e-12  9.69006434e-09
 -3.81185576e-08  5.91051683e-06 -2.59315680e-07 -4.52656048e-05
  2.72833567e-04  6.14587346e-05  2.52601854e-05  1.95666188e-05
  9.84523310e-06  4.75924987e-05]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="BFGS",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((14, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.6988712134173084e+06,1.1747178033543271e+06,2.9367945083858178e+05,7.3419865393677101e+04,1.8353927627435987e+04,2.2341424145819028e+03,4.5688904996449571e+02,1.2173317272260677e+02,3.7593061247508530e+01,4.7412722556720146e+00,3.9120358491841306e-01,8.5986297237246045e+00,4.9084868336327880e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "12s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:18:16 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  18795484.8537        1
[INPUT] 0    0    [1    /1   ]  4698871.21329        1
[INPUT] 0    0    [1    /1   ]  1174717.8033         1
[INPUT] 0    0    [1    /1   ]  293679.375607        1
[INPUT] 0    0    [1    /1   ]  73420.1112319        1
[INPUT] 0    0    [1    /1   ]  18308.0810159        1
[INPUT] 0    0    [1    /1   ]  2296.01317835        1
[INPUT] 0    0    [1    /1   ]  468.2029964          1
[INPUT] 0    0    [1    /1   ]  124.181847683        1
[INPUT] 0    0    [1    /1   ]  38.0605559092        1
[INPUT] 0    0    [1    /1   ]  4.74289186065        1
[INPUT] 0    0    [1    /1   ]  0.391257277436       1
[INPUT] 1    0    [1    /1   ]  8.59849740226        1
[INPUT] 1    0    [1    /1   ]  0.49083528326        1

nuclear repulsion = 0
number of shells = 14
number of NR pGTOs = 18
number of NR cGTOs = 18
basis = {'Ar': [[0, [18795484.85367004, 1.0]], [0, [4698871.213288688, 1.0]], [0, [1174717.8032954405, 1.0]], [0, [293679.3756065613, 1.0]], [0, [73420.11123193221, 1.0]], [0, [18308.081015889984, 1.0]], [0, [2296.013178349823, 1.0]], [0, [468.20299640008074, 1.0]], [0, [124.1818476828665, 1.0]], [0, [38.060555909217896, 1.0]], [0, [4.742891860654538, 1.0]], [0, [0.3912572774362973, 1.0]], [1, [8.598497402262858, 1.0]], [1, [0.49083528326040976, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [18795484.85367004]
bas 1, expnt(s) = [4698871.21328869]
bas 2, expnt(s) = [1174717.80329544]
bas 3, expnt(s) = [293679.37560656]
bas 4, expnt(s) = [73420.11123193]
bas 5, expnt(s) = [18308.08101589]
bas 6, expnt(s) = [2296.01317835]
bas 7, expnt(s) = [468.2029964]
bas 8, expnt(s) = [124.18184768]
bas 9, expnt(s) = [38.06055591]
bas 10, expnt(s) = [4.74289186]
bas 11, expnt(s) = [0.39125728]
bas 12, expnt(s) = [8.5984974]
bas 13, expnt(s) = [0.49083528]
CPU time:       276.12
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  0  1  1  0 42 43  0]
 [ 0  0  1  1  0 44 45  0]
 [ 0  0  1  1  0 46 47  0]
 [ 0  1  1  1  0 48 49  0]
 [ 0  1  1  1  0 50 51  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.87954849e+07 7.21199097e+05 4.69887121e+06 2.54982386e+05
 1.17471780e+06 9.01498871e+04 2.93679376e+05 3.18727921e+04
 7.34201112e+04 1.12687645e+04 1.83080810e+04 3.97646481e+03
 2.29601318e+03 8.38003450e+02 4.68202996e+02 2.54296666e+02
 1.24181848e+02 9.39850144e+01 3.80605559e+01 3.87142963e+01
 4.74289186e+00 8.11983943e+00 3.91257277e-01 1.24986137e+00
 8.59849740e+00 4.29548887e+01 4.90835283e-01 1.19854435e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.31992985579253
cond(S) = 56.424233223958076
E1 = -688.8468161934661  E_coul = 184.91662327986396
init E= -503.930192913602
    CPU time for initialize scf      0.03 sec, wall time      0.03 sec
  HOMO = -0.680906602462193  LUMO = 87.1272512104303
  mo_energy =
[-1.21650428e+02 -1.32811866e+01 -7.62143482e+00 -7.62143482e+00
 -7.62143482e+00 -1.65079960e+00 -6.80906602e-01 -6.80906602e-01
 -6.80906602e-01  8.71272512e+01  6.95106340e+02  4.04685383e+03
  2.98153982e+04  1.54850322e+05  6.64957882e+05  2.71967940e+06
  1.10460106e+07  4.65101267e+07]
E1 = -706.5872089259508  E_coul = 198.94751769418988
cycle= 1 E= -507.639691231761  delta_E= -3.71  |g|= 0.315  |ddm|= 0.301
    CPU time for cycle= 1      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.419581
diis-c [-0.17604832  1.        ]
  HOMO = -0.23624929520135  LUMO = 88.4627500383993
  mo_energy =
[-1.20262505e+02 -1.22529879e+01 -6.65285298e+00 -6.65285298e+00
 -6.65285298e+00 -1.16349019e+00 -2.36249295e-01 -2.36249295e-01
 -2.36249295e-01  8.84627500e+01  6.96476534e+02  4.04810410e+03
  2.98164884e+04  1.54851342e+05  6.64958872e+05  2.71968037e+06
  1.10460116e+07  4.65101276e+07]
E1 = -706.5568478250382  E_coul = 198.91674413288695
cycle= 2 E= -507.640103692151  delta_E= -0.000412  |g|= 0.00465  |ddm|= 0.0138
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00494988
diis-c [-2.44417030e-05 -5.82163187e-04  1.00058216e+00]
  HOMO = -0.236417304937849  LUMO = 88.4593015996998
  mo_energy =
[-1.20270888e+02 -1.22541297e+01 -6.65462215e+00 -6.65462215e+00
 -6.65462215e+00 -1.16355230e+00 -2.36417305e-01 -2.36417305e-01
 -2.36417305e-01  8.84593016e+01  6.96466162e+02  4.04808855e+03
  2.98164696e+04  1.54851322e+05  6.64958852e+05  2.71968035e+06
  1.10460115e+07  4.65101276e+07]
E1 = -706.5564290589933  E_coul = 198.91632526322607
cycle= 3 E= -507.640103795767  delta_E= -1.04e-07  |g|= 9.15e-05  |ddm|= 0.000192
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.000122598
diis-c [-3.68881303e-10  3.35635079e-05 -2.50876750e-02  1.02505411e+00]
  HOMO = -0.236419383324411  LUMO = 88.4592590187659
  mo_energy =
[-1.20270996e+02 -1.22541446e+01 -6.65464756e+00 -6.65464756e+00
 -6.65464756e+00 -1.16355291e+00 -2.36419383e-01 -2.36419383e-01
 -2.36419383e-01  8.84592590e+01  6.96466051e+02  4.04808841e+03
  2.98164694e+04  1.54851322e+05  6.64958852e+05  2.71968035e+06
  1.10460115e+07  4.65101276e+07]
E1 = -706.5564223087387  E_coul = 198.91631851293482
cycle= 4 E= -507.640103795804  delta_E= -3.66e-11  |g|= 3.54e-07  |ddm|= 3.22e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.5564223087387  E_coul = 198.91631851293482
  HOMO = -0.236419368244375  LUMO = 88.4592593413355
  mo_energy =
[-1.20270995e+02 -1.22541445e+01 -6.65464741e+00 -6.65464741e+00
 -6.65464741e+00 -1.16355291e+00 -2.36419368e-01 -2.36419368e-01
 -2.36419368e-01  8.84592593e+01  6.96466052e+02  4.04808841e+03
  2.98164694e+04  1.54851322e+05  6.64958852e+05  2.71968035e+06
  1.10460115e+07  4.65101276e+07]
E1 = -706.55642234288  E_coul = 198.91631854707643
Extra cycle  E= -507.640103795803  delta_E= 3.41e-13  |g|= 6.05e-09  |ddm|= 1.51e-08
    CPU time for scf_cycle      0.10 sec, wall time      0.11 sec
exp = [1.87954849e+07 4.69887121e+06 1.17471780e+06 2.93679376e+05
 7.34201112e+04 1.83080810e+04 2.29601318e+03 4.68202996e+02
 1.24181848e+02 3.80605559e+01 4.74289186e+00 3.91257277e-01
 8.59849740e+00 4.90835283e-01]
E = -507.6401037958035
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="BFGS",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((14, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.6988712134173084e+06,1.1747178033543271e+06,2.9367945083858178e+05,7.3419865393677101e+04,1.8353927627435987e+04,2.2341424145819028e+03,4.5688904996449571e+02,1.2173317272260677e+02,3.7593061247508530e+01,4.7412722556720146e+00,3.9120358491841306e-01,8.5986297237246045e+00,4.9084868336327880e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "12s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:18:16 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  18795484.8537        1
[INPUT] 0    0    [1    /1   ]  4698871.21329        1
[INPUT] 0    0    [1    /1   ]  1174717.8033         1
[INPUT] 0    0    [1    /1   ]  293679.375607        1
[INPUT] 0    0    [1    /1   ]  73420.1112319        1
[INPUT] 0    0    [1    /1   ]  18308.0810159        1
[INPUT] 0    0    [1    /1   ]  2296.01317835        1
[INPUT] 0    0    [1    /1   ]  468.2029964          1
[INPUT] 0    0    [1    /1   ]  124.181847683        1
[INPUT] 0    0    [1    /1   ]  38.0605559092        1
[INPUT] 0    0    [1    /1   ]  4.74289186065        1
[INPUT] 0    0    [1    /1   ]  0.391257277436       1
[INPUT] 1    0    [1    /1   ]  8.59849740226        1
[INPUT] 1    0    [1    /1   ]  0.49083528326        1

nuclear repulsion = 0
number of shells = 14
number of NR pGTOs = 18
number of NR cGTOs = 18
basis = {'Ar': [[0, [18795484.85367004, 1.0]], [0, [4698871.213288688, 1.0]], [0, [1174717.8032954405, 1.0]], [0, [293679.3756065613, 1.0]], [0, [73420.11123193221, 1.0]], [0, [18308.081015889984, 1.0]], [0, [2296.013178349823, 1.0]], [0, [468.20299640008074, 1.0]], [0, [124.1818476828665, 1.0]], [0, [38.060555909217896, 1.0]], [0, [4.742891860654538, 1.0]], [0, [0.3912572774362973, 1.0]], [1, [8.598497402262858, 1.0]], [1, [0.49083528326040976, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [18795484.85367004]
bas 1, expnt(s) = [4698871.21328869]
bas 2, expnt(s) = [1174717.80329544]
bas 3, expnt(s) = [293679.37560656]
bas 4, expnt(s) = [73420.11123193]
bas 5, expnt(s) = [18308.08101589]
bas 6, expnt(s) = [2296.01317835]
bas 7, expnt(s) = [468.2029964]
bas 8, expnt(s) = [124.18184768]
bas 9, expnt(s) = [38.06055591]
bas 10, expnt(s) = [4.74289186]
bas 11, expnt(s) = [0.39125728]
bas 12, expnt(s) = [8.5984974]
bas 13, expnt(s) = [0.49083528]
CPU time:       277.04
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  0  1  1  0 42 43  0]
 [ 0  0  1  1  0 44 45  0]
 [ 0  0  1  1  0 46 47  0]
 [ 0  1  1  1  0 48 49  0]
 [ 0  1  1  1  0 50 51  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.87954849e+07 7.21199097e+05 4.69887121e+06 2.54982386e+05
 1.17471780e+06 9.01498871e+04 2.93679376e+05 3.18727921e+04
 7.34201112e+04 1.12687645e+04 1.83080810e+04 3.97646481e+03
 2.29601318e+03 8.38003450e+02 4.68202996e+02 2.54296666e+02
 1.24181848e+02 9.39850144e+01 3.80605559e+01 3.87142963e+01
 4.74289186e+00 8.11983943e+00 3.91257277e-01 1.24986137e+00
 8.59849740e+00 4.29548887e+01 4.90835283e-01 1.19854435e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.31992985579253
cond(S) = 56.424233223958076
E1 = -688.8468161934661  E_coul = 184.91662327986396
init E= -503.930192913602
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.680906602462193  LUMO = 87.1272512104303
  mo_energy =
[-1.21650428e+02 -1.32811866e+01 -7.62143482e+00 -7.62143482e+00
 -7.62143482e+00 -1.65079960e+00 -6.80906602e-01 -6.80906602e-01
 -6.80906602e-01  8.71272512e+01  6.95106340e+02  4.04685383e+03
  2.98153982e+04  1.54850322e+05  6.64957882e+05  2.71967940e+06
  1.10460106e+07  4.65101267e+07]
E1 = -706.5872089259508  E_coul = 198.94751769418988
cycle= 1 E= -507.639691231761  delta_E= -3.71  |g|= 0.315  |ddm|= 0.301
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.419581
diis-c [-0.17604832  1.        ]
  HOMO = -0.23624929520135  LUMO = 88.4627500383993
  mo_energy =
[-1.20262505e+02 -1.22529879e+01 -6.65285298e+00 -6.65285298e+00
 -6.65285298e+00 -1.16349019e+00 -2.36249295e-01 -2.36249295e-01
 -2.36249295e-01  8.84627500e+01  6.96476534e+02  4.04810410e+03
  2.98164884e+04  1.54851342e+05  6.64958872e+05  2.71968037e+06
  1.10460116e+07  4.65101276e+07]
E1 = -706.5568478250382  E_coul = 198.91674413288695
cycle= 2 E= -507.640103692151  delta_E= -0.000412  |g|= 0.00465  |ddm|= 0.0138
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00494988
diis-c [-2.44417030e-05 -5.82163187e-04  1.00058216e+00]
  HOMO = -0.236417304937849  LUMO = 88.4593015996998
  mo_energy =
[-1.20270888e+02 -1.22541297e+01 -6.65462215e+00 -6.65462215e+00
 -6.65462215e+00 -1.16355230e+00 -2.36417305e-01 -2.36417305e-01
 -2.36417305e-01  8.84593016e+01  6.96466162e+02  4.04808855e+03
  2.98164696e+04  1.54851322e+05  6.64958852e+05  2.71968035e+06
  1.10460115e+07  4.65101276e+07]
E1 = -706.5564290589933  E_coul = 198.91632526322607
cycle= 3 E= -507.640103795767  delta_E= -1.04e-07  |g|= 9.15e-05  |ddm|= 0.000192
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.000122598
diis-c [-3.68881303e-10  3.35635079e-05 -2.50876750e-02  1.02505411e+00]
  HOMO = -0.236419383324411  LUMO = 88.4592590187659
  mo_energy =
[-1.20270996e+02 -1.22541446e+01 -6.65464756e+00 -6.65464756e+00
 -6.65464756e+00 -1.16355291e+00 -2.36419383e-01 -2.36419383e-01
 -2.36419383e-01  8.84592590e+01  6.96466051e+02  4.04808841e+03
  2.98164694e+04  1.54851322e+05  6.64958852e+05  2.71968035e+06
  1.10460115e+07  4.65101276e+07]
E1 = -706.5564223087387  E_coul = 198.91631851293482
cycle= 4 E= -507.640103795804  delta_E= -3.66e-11  |g|= 3.54e-07  |ddm|= 3.22e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.5564223087387  E_coul = 198.91631851293482
  HOMO = -0.236419368244375  LUMO = 88.4592593413355
  mo_energy =
[-1.20270995e+02 -1.22541445e+01 -6.65464741e+00 -6.65464741e+00
 -6.65464741e+00 -1.16355291e+00 -2.36419368e-01 -2.36419368e-01
 -2.36419368e-01  8.84592593e+01  6.96466052e+02  4.04808841e+03
  2.98164694e+04  1.54851322e+05  6.64958852e+05  2.71968035e+06
  1.10460115e+07  4.65101276e+07]
E1 = -706.55642234288  E_coul = 198.91631854707643
Extra cycle  E= -507.640103795803  delta_E= 3.41e-13  |g|= 6.05e-09  |ddm|= 1.51e-08
    CPU time for scf_cycle      0.10 sec, wall time      0.11 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 56.424233223958076
E1 = -706.55642234288  E_coul = 198.91631854707643
init E= -507.640103795803
    CPU time for initialize scf      0.12 sec, wall time      0.12 sec
  HOMO = -0.236419368070381  LUMO = 88.4592593452026
  mo_energy =
[-1.20270995e+02 -1.22541445e+01 -6.65464741e+00 -6.65464741e+00
 -6.65464741e+00 -1.16355291e+00 -2.36419368e-01 -2.36419368e-01
 -2.36419368e-01  8.84592593e+01  6.96466052e+02  4.04808841e+03
  2.98164694e+04  1.54851322e+05  6.64958852e+05  2.71968035e+06
  1.10460115e+07  4.65101276e+07]
E1 = -706.5564223433889  E_coul = 198.91631854758546
cycle= 1 E= -507.640103795803  delta_E=    0  |g|= 1.53e-10  |ddm|= 2.31e-10
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -706.5564223433889  E_coul = 198.91631854758546
  HOMO = -0.236419368067956  LUMO = 88.4592593452572
  mo_energy =
[-1.20270995e+02 -1.22541445e+01 -6.65464741e+00 -6.65464741e+00
 -6.65464741e+00 -1.16355291e+00 -2.36419368e-01 -2.36419368e-01
 -2.36419368e-01  8.84592593e+01  6.96466052e+02  4.04808841e+03
  2.98164694e+04  1.54851322e+05  6.64958852e+05  2.71968035e+06
  1.10460115e+07  4.65101276e+07]
E1 = -706.556422343398  E_coul = 198.9163185475942
Extra cycle  E= -507.640103795804  delta_E= -3.41e-13  |g|= 1.09e-10  |ddm|= 4.06e-12
    CPU time for scf_cycle      0.19 sec, wall time      0.20 sec
exp = [1.87954849e+07 4.69887121e+06 1.17471780e+06 2.93679376e+05
 7.34201112e+04 1.83080810e+04 2.29601318e+03 4.68202996e+02
 1.24181848e+02 3.80605559e+01 4.74289186e+00 3.91257277e-01
 8.59849740e+00 4.90835283e-01]
grad_E = [-1.41360036e-13  1.60096649e-11 -7.30291558e-12  9.39512675e-09
 -3.93462604e-08  5.73122683e-06  2.53429229e-06 -2.69598673e-05
  1.89773093e-04  2.08171475e-05 -1.70788343e-05  5.08538482e-05
  7.65875370e-06  7.39677808e-05]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="BFGS",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((14, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.6988712134173084e+06,1.1747178033543271e+06,2.9367945083858178e+05,7.3419865393677101e+04,1.8353927627435987e+04,2.2341424145819028e+03,4.5688904996449571e+02,1.2173317272260677e+02,3.7593061247508530e+01,4.7412722556720146e+00,3.9120358491841306e-01,8.5986297237246045e+00,4.9084868336327880e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "12s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:18:20 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  18795484.8537        1
[INPUT] 0    0    [1    /1   ]  4698871.21327        1
[INPUT] 0    0    [1    /1   ]  1174717.80329        1
[INPUT] 0    0    [1    /1   ]  293679.367256        1
[INPUT] 0    0    [1    /1   ]  73420.1384772        1
[INPUT] 0    0    [1    /1   ]  18302.9920212        1
[INPUT] 0    0    [1    /1   ]  2303.07698155        1
[INPUT] 0    0    [1    /1   ]  468.492660572        1
[INPUT] 0    0    [1    /1   ]  123.901752125        1
[INPUT] 0    0    [1    /1   ]  37.9756770622        1
[INPUT] 0    0    [1    /1   ]  4.74286011363        1
[INPUT] 0    0    [1    /1   ]  0.391244908164       1
[INPUT] 1    0    [1    /1   ]  8.59853789024        1
[INPUT] 1    0    [1    /1   ]  0.490838437969       1

nuclear repulsion = 0
number of shells = 14
number of NR pGTOs = 18
number of NR cGTOs = 18
basis = {'Ar': [[0, [18795484.853670128, 1.0]], [0, [4698871.213274412, 1.0]], [0, [1174717.8032888323, 1.0]], [0, [293679.3672562609, 1.0]], [0, [73420.13847716691, 1.0]], [0, [18302.99202117212, 1.0]], [0, [2303.0769815456015, 1.0]], [0, [468.4926605716073, 1.0]], [0, [123.901752125203, 1.0]], [0, [37.97567706224234, 1.0]], [0, [4.742860113631541, 1.0]], [0, [0.3912449081635167, 1.0]], [1, [8.598537890235923, 1.0]], [1, [0.4908384379686141, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [18795484.85367013]
bas 1, expnt(s) = [4698871.21327441]
bas 2, expnt(s) = [1174717.80328883]
bas 3, expnt(s) = [293679.36725626]
bas 4, expnt(s) = [73420.13847717]
bas 5, expnt(s) = [18302.99202117]
bas 6, expnt(s) = [2303.07698155]
bas 7, expnt(s) = [468.49266057]
bas 8, expnt(s) = [123.90175213]
bas 9, expnt(s) = [37.97567706]
bas 10, expnt(s) = [4.74286011]
bas 11, expnt(s) = [0.39124491]
bas 12, expnt(s) = [8.59853789]
bas 13, expnt(s) = [0.49083844]
CPU time:       280.69
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  0  1  1  0 42 43  0]
 [ 0  0  1  1  0 44 45  0]
 [ 0  0  1  1  0 46 47  0]
 [ 0  1  1  1  0 48 49  0]
 [ 0  1  1  1  0 50 51  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.87954849e+07 7.21199097e+05 4.69887121e+06 2.54982386e+05
 1.17471780e+06 9.01498871e+04 2.93679367e+05 3.18727915e+04
 7.34201385e+04 1.12687676e+04 1.83029920e+04 3.97563579e+03
 2.30307698e+03 8.39936328e+02 4.68492661e+02 2.54414651e+02
 1.23901752e+02 9.38259802e+01 3.79756771e+01 3.86495257e+01
 4.74286011e+00 8.11979867e+00 3.91244908e-01 1.24983174e+00
 8.59853789e+00 4.29551415e+01 4.90838438e-01 1.19855398e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319932882912774
cond(S) = 56.39114956466813
E1 = -688.8489215562247  E_coul = 184.91636826680286
init E= -503.932553289422
    CPU time for initialize scf      0.03 sec, wall time      0.03 sec
  HOMO = -0.680907736920643  LUMO = 86.8305229805587
  mo_energy =
[-1.21650593e+02 -1.32810854e+01 -7.62146765e+00 -7.62146765e+00
 -7.62146765e+00 -1.65078021e+00 -6.80907737e-01 -6.80907737e-01
 -6.80907737e-01  8.68305230e+01  6.94287586e+02  4.05409041e+03
  2.98325247e+04  1.54858745e+05  6.64961684e+05  2.71968196e+06
  1.10460127e+07  4.65101285e+07]
E1 = -706.5867162774567  E_coul = 198.94698196417522
cycle= 1 E= -507.639734313282  delta_E= -3.71  |g|= 0.316  |ddm|= 0.301
    CPU time for cycle= 1      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.419394
diis-c [-0.17589155  1.        ]
  HOMO = -0.23625331604652  LUMO = 88.1656491944426
  mo_energy =
[-1.20262742e+02 -1.22529090e+01 -6.65289598e+00 -6.65289598e+00
 -6.65289598e+00 -1.16348165e+00 -2.36253316e-01 -2.36253316e-01
 -2.36253316e-01  8.81656492e+01  6.95657565e+02  4.05533999e+03
  2.98336143e+04  1.54859763e+05  6.64962673e+05  2.71968293e+06
  1.10460137e+07  4.65101295e+07]
E1 = -706.5562021980604  E_coul = 198.91605322075065
cycle= 2 E= -507.64014897731  delta_E= -0.000415  |g|= 0.00466  |ddm|= 0.0138
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00496271
diis-c [-2.45720680e-05 -5.66864302e-04  1.00056686e+00]
  HOMO = -0.236422329683233  LUMO = 88.1621897580062
  mo_energy =
[-1.20271163e+02 -1.22540574e+01 -6.65467521e+00 -6.65467521e+00
 -6.65467521e+00 -1.16354413e+00 -2.36422330e-01 -2.36422330e-01
 -2.36422330e-01  8.81621898e+01  6.95647148e+02  4.05532437e+03
  2.98335954e+04  1.54859744e+05  6.64962653e+05  2.71968291e+06
  1.10460137e+07  4.65101295e+07]
E1 = -706.5557804596822  E_coul = 198.9156313778416
cycle= 3 E= -507.640149081841  delta_E= -1.05e-07  |g|= 9.2e-05  |ddm|= 0.000193
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.000123204
diis-c [-3.72314389e-10  3.35521327e-05 -2.51447833e-02  1.02511123e+00]
  HOMO = -0.23642442728296  LUMO = 88.1621468707117
  mo_energy =
[-1.20271271e+02 -1.22540724e+01 -6.65470084e+00 -6.65470084e+00
 -6.65470084e+00 -1.16354475e+00 -2.36424427e-01 -2.36424427e-01
 -2.36424427e-01  8.81621469e+01  6.95647036e+02  4.05532423e+03
  2.98335953e+04  1.54859744e+05  6.64962653e+05  2.71968291e+06
  1.10460137e+07  4.65101295e+07]
E1 = -706.5557736401895  E_coul = 198.91562455831223
cycle= 4 E= -507.640149081877  delta_E= -3.67e-11  |g|= 3.56e-07  |ddm|= 3.25e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.5557736401895  E_coul = 198.91562455831223
  HOMO = -0.236424412040033  LUMO = 88.1621471954405
  mo_energy =
[-1.20271270e+02 -1.22540723e+01 -6.65470069e+00 -6.65470069e+00
 -6.65470069e+00 -1.16354475e+00 -2.36424412e-01 -2.36424412e-01
 -2.36424412e-01  8.81621472e+01  6.95647037e+02  4.05532423e+03
  2.98335953e+04  1.54859744e+05  6.64962653e+05  2.71968291e+06
  1.10460137e+07  4.65101295e+07]
E1 = -706.555773674706  E_coul = 198.91562459282855
Extra cycle  E= -507.640149081877  delta_E= -1.71e-13  |g|= 6.09e-09  |ddm|= 1.53e-08
    CPU time for scf_cycle      0.10 sec, wall time      0.11 sec
exp = [1.87954849e+07 4.69887121e+06 1.17471780e+06 2.93679367e+05
 7.34201385e+04 1.83029920e+04 2.30307698e+03 4.68492661e+02
 1.23901752e+02 3.79756771e+01 4.74286011e+00 3.91244908e-01
 8.59853789e+00 4.90838438e-01]
E = -507.64014908187744
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="BFGS",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((14, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.6988712134173084e+06,1.1747178033543271e+06,2.9367945083858178e+05,7.3419865393677101e+04,1.8353927627435987e+04,2.2341424145819028e+03,4.5688904996449571e+02,1.2173317272260677e+02,3.7593061247508530e+01,4.7412722556720146e+00,3.9120358491841306e-01,8.5986297237246045e+00,4.9084868336327880e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "12s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:18:21 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  18795484.8537        1
[INPUT] 0    0    [1    /1   ]  4698871.21327        1
[INPUT] 0    0    [1    /1   ]  1174717.80329        1
[INPUT] 0    0    [1    /1   ]  293679.367256        1
[INPUT] 0    0    [1    /1   ]  73420.1384772        1
[INPUT] 0    0    [1    /1   ]  18302.9920212        1
[INPUT] 0    0    [1    /1   ]  2303.07698155        1
[INPUT] 0    0    [1    /1   ]  468.492660572        1
[INPUT] 0    0    [1    /1   ]  123.901752125        1
[INPUT] 0    0    [1    /1   ]  37.9756770622        1
[INPUT] 0    0    [1    /1   ]  4.74286011363        1
[INPUT] 0    0    [1    /1   ]  0.391244908164       1
[INPUT] 1    0    [1    /1   ]  8.59853789024        1
[INPUT] 1    0    [1    /1   ]  0.490838437969       1

nuclear repulsion = 0
number of shells = 14
number of NR pGTOs = 18
number of NR cGTOs = 18
basis = {'Ar': [[0, [18795484.853670128, 1.0]], [0, [4698871.213274412, 1.0]], [0, [1174717.8032888323, 1.0]], [0, [293679.3672562609, 1.0]], [0, [73420.13847716691, 1.0]], [0, [18302.99202117212, 1.0]], [0, [2303.0769815456015, 1.0]], [0, [468.4926605716073, 1.0]], [0, [123.901752125203, 1.0]], [0, [37.97567706224234, 1.0]], [0, [4.742860113631541, 1.0]], [0, [0.3912449081635167, 1.0]], [1, [8.598537890235923, 1.0]], [1, [0.4908384379686141, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [18795484.85367013]
bas 1, expnt(s) = [4698871.21327441]
bas 2, expnt(s) = [1174717.80328883]
bas 3, expnt(s) = [293679.36725626]
bas 4, expnt(s) = [73420.13847717]
bas 5, expnt(s) = [18302.99202117]
bas 6, expnt(s) = [2303.07698155]
bas 7, expnt(s) = [468.49266057]
bas 8, expnt(s) = [123.90175213]
bas 9, expnt(s) = [37.97567706]
bas 10, expnt(s) = [4.74286011]
bas 11, expnt(s) = [0.39124491]
bas 12, expnt(s) = [8.59853789]
bas 13, expnt(s) = [0.49083844]
CPU time:       281.60
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  0  1  1  0 42 43  0]
 [ 0  0  1  1  0 44 45  0]
 [ 0  0  1  1  0 46 47  0]
 [ 0  1  1  1  0 48 49  0]
 [ 0  1  1  1  0 50 51  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.87954849e+07 7.21199097e+05 4.69887121e+06 2.54982386e+05
 1.17471780e+06 9.01498871e+04 2.93679367e+05 3.18727915e+04
 7.34201385e+04 1.12687676e+04 1.83029920e+04 3.97563579e+03
 2.30307698e+03 8.39936328e+02 4.68492661e+02 2.54414651e+02
 1.23901752e+02 9.38259802e+01 3.79756771e+01 3.86495257e+01
 4.74286011e+00 8.11979867e+00 3.91244908e-01 1.24983174e+00
 8.59853789e+00 4.29551415e+01 4.90838438e-01 1.19855398e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319932882912774
cond(S) = 56.39114956466813
E1 = -688.8489215562247  E_coul = 184.91636826680286
init E= -503.932553289422
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.680907736920643  LUMO = 86.8305229805587
  mo_energy =
[-1.21650593e+02 -1.32810854e+01 -7.62146765e+00 -7.62146765e+00
 -7.62146765e+00 -1.65078021e+00 -6.80907737e-01 -6.80907737e-01
 -6.80907737e-01  8.68305230e+01  6.94287586e+02  4.05409041e+03
  2.98325247e+04  1.54858745e+05  6.64961684e+05  2.71968196e+06
  1.10460127e+07  4.65101285e+07]
E1 = -706.5867162774567  E_coul = 198.94698196417522
cycle= 1 E= -507.639734313282  delta_E= -3.71  |g|= 0.316  |ddm|= 0.301
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.419394
diis-c [-0.17589155  1.        ]
  HOMO = -0.23625331604652  LUMO = 88.1656491944426
  mo_energy =
[-1.20262742e+02 -1.22529090e+01 -6.65289598e+00 -6.65289598e+00
 -6.65289598e+00 -1.16348165e+00 -2.36253316e-01 -2.36253316e-01
 -2.36253316e-01  8.81656492e+01  6.95657565e+02  4.05533999e+03
  2.98336143e+04  1.54859763e+05  6.64962673e+05  2.71968293e+06
  1.10460137e+07  4.65101295e+07]
E1 = -706.5562021980604  E_coul = 198.91605322075065
cycle= 2 E= -507.64014897731  delta_E= -0.000415  |g|= 0.00466  |ddm|= 0.0138
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00496271
diis-c [-2.45720680e-05 -5.66864302e-04  1.00056686e+00]
  HOMO = -0.236422329683233  LUMO = 88.1621897580062
  mo_energy =
[-1.20271163e+02 -1.22540574e+01 -6.65467521e+00 -6.65467521e+00
 -6.65467521e+00 -1.16354413e+00 -2.36422330e-01 -2.36422330e-01
 -2.36422330e-01  8.81621898e+01  6.95647148e+02  4.05532437e+03
  2.98335954e+04  1.54859744e+05  6.64962653e+05  2.71968291e+06
  1.10460137e+07  4.65101295e+07]
E1 = -706.5557804596822  E_coul = 198.9156313778416
cycle= 3 E= -507.640149081841  delta_E= -1.05e-07  |g|= 9.2e-05  |ddm|= 0.000193
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.000123204
diis-c [-3.72314389e-10  3.35521327e-05 -2.51447833e-02  1.02511123e+00]
  HOMO = -0.23642442728296  LUMO = 88.1621468707117
  mo_energy =
[-1.20271271e+02 -1.22540724e+01 -6.65470084e+00 -6.65470084e+00
 -6.65470084e+00 -1.16354475e+00 -2.36424427e-01 -2.36424427e-01
 -2.36424427e-01  8.81621469e+01  6.95647036e+02  4.05532423e+03
  2.98335953e+04  1.54859744e+05  6.64962653e+05  2.71968291e+06
  1.10460137e+07  4.65101295e+07]
E1 = -706.5557736401895  E_coul = 198.91562455831223
cycle= 4 E= -507.640149081877  delta_E= -3.67e-11  |g|= 3.56e-07  |ddm|= 3.25e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.5557736401895  E_coul = 198.91562455831223
  HOMO = -0.236424412040033  LUMO = 88.1621471954405
  mo_energy =
[-1.20271270e+02 -1.22540723e+01 -6.65470069e+00 -6.65470069e+00
 -6.65470069e+00 -1.16354475e+00 -2.36424412e-01 -2.36424412e-01
 -2.36424412e-01  8.81621472e+01  6.95647037e+02  4.05532423e+03
  2.98335953e+04  1.54859744e+05  6.64962653e+05  2.71968291e+06
  1.10460137e+07  4.65101295e+07]
E1 = -706.555773674706  E_coul = 198.91562459282855
Extra cycle  E= -507.640149081877  delta_E= -1.71e-13  |g|= 6.09e-09  |ddm|= 1.53e-08
    CPU time for scf_cycle      0.10 sec, wall time      0.10 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 56.39114956466813
E1 = -706.555773674706  E_coul = 198.91562459282855
init E= -507.640149081877
    CPU time for initialize scf      0.12 sec, wall time      0.12 sec
  HOMO = -0.236424411863842  LUMO = 88.1621471993455
  mo_energy =
[-1.20271270e+02 -1.22540723e+01 -6.65470069e+00 -6.65470069e+00
 -6.65470069e+00 -1.16354475e+00 -2.36424412e-01 -2.36424412e-01
 -2.36424412e-01  8.81621472e+01  6.95647037e+02  4.05532423e+03
  2.98335953e+04  1.54859744e+05  6.64962653e+05  2.71968291e+06
  1.10460137e+07  4.65101295e+07]
E1 = -706.5557736752215  E_coul = 198.91562459334423
cycle= 1 E= -507.640149081877  delta_E= 1.14e-13  |g|= 2.68e-10  |ddm|= 2.34e-10
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -706.5557736752215  E_coul = 198.91562459334423
  HOMO = -0.236424411861376  LUMO = 88.1621471993984
  mo_energy =
[-1.20271270e+02 -1.22540723e+01 -6.65470069e+00 -6.65470069e+00
 -6.65470069e+00 -1.16354475e+00 -2.36424412e-01 -2.36424412e-01
 -2.36424412e-01  8.81621472e+01  6.95647037e+02  4.05532423e+03
  2.98335953e+04  1.54859744e+05  6.64962653e+05  2.71968291e+06
  1.10460137e+07  4.65101295e+07]
E1 = -706.555773675231  E_coul = 198.9156245933533
Extra cycle  E= -507.640149081878  delta_E= -3.41e-13  |g|= 1.56e-10  |ddm|= 4.15e-12
    CPU time for scf_cycle      0.19 sec, wall time      0.19 sec
exp = [1.87954849e+07 4.69887121e+06 1.17471780e+06 2.93679367e+05
 7.34201385e+04 1.83029920e+04 2.30307698e+03 4.68492661e+02
 1.23901752e+02 3.79756771e+01 4.74286011e+00 3.91244908e-01
 8.59853789e+00 4.90838438e-01]
grad_E = [-1.44760890e-13  1.57675748e-11 -9.11203767e-12  9.25684672e-09
 -3.98875428e-08  5.64555824e-06  4.23845524e-06 -5.62952675e-06
  5.73082428e-05 -7.32409641e-08 -3.41120532e-05  5.29323107e-05
  7.80488103e-06  8.36832277e-05]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="BFGS",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((14, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.6988712134173084e+06,1.1747178033543271e+06,2.9367945083858178e+05,7.3419865393677101e+04,1.8353927627435987e+04,2.2341424145819028e+03,4.5688904996449571e+02,1.2173317272260677e+02,3.7593061247508530e+01,4.7412722556720146e+00,3.9120358491841306e-01,8.5986297237246045e+00,4.9084868336327880e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "12s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:18:25 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  18795484.8537        1
[INPUT] 0    0    [1    /1   ]  4698871.21328        1
[INPUT] 0    0    [1    /1   ]  1174717.80329        1
[INPUT] 0    0    [1    /1   ]  293679.369773        1
[INPUT] 0    0    [1    /1   ]  73420.1302368        1
[INPUT] 0    0    [1    /1   ]  18304.5256841        1
[INPUT] 0    0    [1    /1   ]  2301.08310776        1
[INPUT] 0    0    [1    /1   ]  467.734255591        1
[INPUT] 0    0    [1    /1   ]  123.637853791        1
[INPUT] 0    0    [1    /1   ]  37.9175442825        1
[INPUT] 0    0    [1    /1   ]  4.7427632077         1
[INPUT] 0    0    [1    /1   ]  0.391235876501       1
[INPUT] 1    0    [1    /1   ]  8.59854679601        1
[INPUT] 1    0    [1    /1   ]  0.490838447108       1

nuclear repulsion = 0
number of shells = 14
number of NR pGTOs = 18
number of NR cGTOs = 18
basis = {'Ar': [[0, [18795484.8536701, 1.0]], [0, [4698871.213278715, 1.0]], [0, [1174717.8032907746, 1.0]], [0, [293679.3697731145, 1.0]], [0, [73420.1302368395, 1.0]], [0, [18304.525684051292, 1.0]], [0, [2301.0831077551647, 1.0]], [0, [467.7342555906542, 1.0]], [0, [123.63785379057445, 1.0]], [0, [37.9175442824752, 1.0]], [0, [4.742763207696955, 1.0]], [0, [0.39123587650136427, 1.0]], [1, [8.598546796006003, 1.0]], [1, [0.4908384471084431, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [18795484.8536701]
bas 1, expnt(s) = [4698871.21327871]
bas 2, expnt(s) = [1174717.80329077]
bas 3, expnt(s) = [293679.36977311]
bas 4, expnt(s) = [73420.13023684]
bas 5, expnt(s) = [18304.52568405]
bas 6, expnt(s) = [2301.08310776]
bas 7, expnt(s) = [467.73425559]
bas 8, expnt(s) = [123.63785379]
bas 9, expnt(s) = [37.91754428]
bas 10, expnt(s) = [4.74276321]
bas 11, expnt(s) = [0.39123588]
bas 12, expnt(s) = [8.5985468]
bas 13, expnt(s) = [0.49083845]
CPU time:       285.25
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  0  1  1  0 42 43  0]
 [ 0  0  1  1  0 44 45  0]
 [ 0  0  1  1  0 46 47  0]
 [ 0  1  1  1  0 48 49  0]
 [ 0  1  1  1  0 50 51  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.87954849e+07 7.21199097e+05 4.69887121e+06 2.54982386e+05
 1.17471780e+06 9.01498871e+04 2.93679370e+05 3.18727917e+04
 7.34201302e+04 1.12687667e+04 1.83045257e+04 3.97588564e+03
 2.30108311e+03 8.39390892e+02 4.67734256e+02 2.54105700e+02
 1.23637854e+02 9.36760603e+01 3.79175443e+01 3.86051440e+01
 4.74276321e+00 8.11967424e+00 3.91235877e-01 1.24981010e+00
 8.59854680e+00 4.29551971e+01 4.90838447e-01 1.19855401e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319939236292814
cond(S) = 56.378287989068
E1 = -688.8487832881793  E_coul = 184.9161040237513
init E= -503.932679264428
    CPU time for initialize scf      0.03 sec, wall time      0.03 sec
  HOMO = -0.680910139200951  LUMO = 86.5933841582012
  mo_energy =
[-1.21650664e+02 -1.32810674e+01 -7.62149488e+00 -7.62149488e+00
 -7.62149488e+00 -1.65077114e+00 -6.80910139e-01 -6.80910139e-01
 -6.80910139e-01  8.65933842e+01  6.92721837e+02  4.04848007e+03
  2.98243086e+04  1.54853547e+05  6.64958163e+05  2.71967905e+06
  1.10460102e+07  4.65101262e+07]
E1 = -706.5863479437525  E_coul = 198.94660914095473
cycle= 1 E= -507.639738802798  delta_E= -3.71  |g|= 0.316  |ddm|= 0.301
    CPU time for cycle= 1      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.419407
diis-c [-0.17590204  1.        ]
  HOMO = -0.236260834471666  LUMO = 87.9282281784722
  mo_energy =
[-1.20262814e+02 -1.22529043e+01 -6.65292874e+00 -6.65292874e+00
 -6.65292874e+00 -1.16348333e+00 -2.36260834e-01 -2.36260834e-01
 -2.36260834e-01  8.79282282e+01  6.94091805e+02  4.04972955e+03
  2.98253980e+04  1.54854566e+05  6.64959152e+05  2.71968003e+06
  1.10460111e+07  4.65101272e+07]
E1 = -706.5557129682898  E_coul = 198.915557765506
cycle= 2 E= -507.640155202784  delta_E= -0.000416  |g|= 0.00467  |ddm|= 0.0139
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00497279
diis-c [-2.46741607e-05 -5.56886103e-04  1.00055689e+00]
  HOMO = -0.236430653366804  LUMO = 87.9247606165842
  mo_energy =
[-1.20271263e+02 -1.22540580e+01 -6.65471602e+00 -6.65471602e+00
 -6.65471602e+00 -1.16354611e+00 -2.36430653e-01 -2.36430653e-01
 -2.36430653e-01  8.79247606e+01  6.94081361e+02  4.04971388e+03
  2.98253791e+04  1.54854546e+05  6.64959132e+05  2.71968001e+06
  1.10460111e+07  4.65101272e+07]
E1 = -706.5552888343606  E_coul = 198.91513352632018
cycle= 3 E= -507.64015530804  delta_E= -1.05e-07  |g|= 9.24e-05  |ddm|= 0.000194
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.000123675
diis-c [-3.75184613e-10  3.35434067e-05 -2.51888752e-02  1.02515533e+00]
  HOMO = -0.236432766071962  LUMO = 87.9247174915124
  mo_energy =
[-1.20271372e+02 -1.22540731e+01 -6.65474183e+00 -6.65474183e+00
 -6.65474183e+00 -1.16354673e+00 -2.36432766e-01 -2.36432766e-01
 -2.36432766e-01  8.79247175e+01  6.94081248e+02  4.04971374e+03
  2.98253789e+04  1.54854546e+05  6.64959132e+05  2.71968001e+06
  1.10460111e+07  4.65101272e+07]
E1 = -706.555281959921  E_coul = 198.91512665184305
cycle= 4 E= -507.640155308078  delta_E= -3.76e-11  |g|= 3.58e-07  |ddm|= 3.28e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.555281959921  E_coul = 198.91512665184305
  HOMO = -0.236432750695126  LUMO = 87.9247178179571
  mo_energy =
[-1.20271371e+02 -1.22540730e+01 -6.65474168e+00 -6.65474168e+00
 -6.65474168e+00 -1.16354673e+00 -2.36432751e-01 -2.36432751e-01
 -2.36432751e-01  8.79247178e+01  6.94081249e+02  4.04971374e+03
  2.98253789e+04  1.54854546e+05  6.64959132e+05  2.71968001e+06
  1.10460111e+07  4.65101272e+07]
E1 = -706.5552819947488  E_coul = 198.91512668667147
Extra cycle  E= -507.640155308077  delta_E= 5.68e-13  |g|= 6.14e-09  |ddm|= 1.54e-08
    CPU time for scf_cycle      0.10 sec, wall time      0.11 sec
exp = [1.87954849e+07 4.69887121e+06 1.17471780e+06 2.93679370e+05
 7.34201302e+04 1.83045257e+04 2.30108311e+03 4.67734256e+02
 1.23637854e+02 3.79175443e+01 4.74276321e+00 3.91235877e-01
 8.59854680e+00 4.90838447e-01]
E = -507.6401553080774
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="BFGS",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((14, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.6988712134173084e+06,1.1747178033543271e+06,2.9367945083858178e+05,7.3419865393677101e+04,1.8353927627435987e+04,2.2341424145819028e+03,4.5688904996449571e+02,1.2173317272260677e+02,3.7593061247508530e+01,4.7412722556720146e+00,3.9120358491841306e-01,8.5986297237246045e+00,4.9084868336327880e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "12s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:18:26 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  18795484.8537        1
[INPUT] 0    0    [1    /1   ]  4698871.21328        1
[INPUT] 0    0    [1    /1   ]  1174717.80329        1
[INPUT] 0    0    [1    /1   ]  293679.369773        1
[INPUT] 0    0    [1    /1   ]  73420.1302368        1
[INPUT] 0    0    [1    /1   ]  18304.5256841        1
[INPUT] 0    0    [1    /1   ]  2301.08310776        1
[INPUT] 0    0    [1    /1   ]  467.734255591        1
[INPUT] 0    0    [1    /1   ]  123.637853791        1
[INPUT] 0    0    [1    /1   ]  37.9175442825        1
[INPUT] 0    0    [1    /1   ]  4.7427632077         1
[INPUT] 0    0    [1    /1   ]  0.391235876501       1
[INPUT] 1    0    [1    /1   ]  8.59854679601        1
[INPUT] 1    0    [1    /1   ]  0.490838447108       1

nuclear repulsion = 0
number of shells = 14
number of NR pGTOs = 18
number of NR cGTOs = 18
basis = {'Ar': [[0, [18795484.8536701, 1.0]], [0, [4698871.213278715, 1.0]], [0, [1174717.8032907746, 1.0]], [0, [293679.3697731145, 1.0]], [0, [73420.1302368395, 1.0]], [0, [18304.525684051292, 1.0]], [0, [2301.0831077551647, 1.0]], [0, [467.7342555906542, 1.0]], [0, [123.63785379057445, 1.0]], [0, [37.9175442824752, 1.0]], [0, [4.742763207696955, 1.0]], [0, [0.39123587650136427, 1.0]], [1, [8.598546796006003, 1.0]], [1, [0.4908384471084431, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [18795484.8536701]
bas 1, expnt(s) = [4698871.21327871]
bas 2, expnt(s) = [1174717.80329077]
bas 3, expnt(s) = [293679.36977311]
bas 4, expnt(s) = [73420.13023684]
bas 5, expnt(s) = [18304.52568405]
bas 6, expnt(s) = [2301.08310776]
bas 7, expnt(s) = [467.73425559]
bas 8, expnt(s) = [123.63785379]
bas 9, expnt(s) = [37.91754428]
bas 10, expnt(s) = [4.74276321]
bas 11, expnt(s) = [0.39123588]
bas 12, expnt(s) = [8.5985468]
bas 13, expnt(s) = [0.49083845]
CPU time:       286.18
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  0  1  1  0 42 43  0]
 [ 0  0  1  1  0 44 45  0]
 [ 0  0  1  1  0 46 47  0]
 [ 0  1  1  1  0 48 49  0]
 [ 0  1  1  1  0 50 51  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.87954849e+07 7.21199097e+05 4.69887121e+06 2.54982386e+05
 1.17471780e+06 9.01498871e+04 2.93679370e+05 3.18727917e+04
 7.34201302e+04 1.12687667e+04 1.83045257e+04 3.97588564e+03
 2.30108311e+03 8.39390892e+02 4.67734256e+02 2.54105700e+02
 1.23637854e+02 9.36760603e+01 3.79175443e+01 3.86051440e+01
 4.74276321e+00 8.11967424e+00 3.91235877e-01 1.24981010e+00
 8.59854680e+00 4.29551971e+01 4.90838447e-01 1.19855401e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319939236292814
cond(S) = 56.378287989068
E1 = -688.8487832881793  E_coul = 184.9161040237513
init E= -503.932679264428
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.680910139200951  LUMO = 86.5933841582012
  mo_energy =
[-1.21650664e+02 -1.32810674e+01 -7.62149488e+00 -7.62149488e+00
 -7.62149488e+00 -1.65077114e+00 -6.80910139e-01 -6.80910139e-01
 -6.80910139e-01  8.65933842e+01  6.92721837e+02  4.04848007e+03
  2.98243086e+04  1.54853547e+05  6.64958163e+05  2.71967905e+06
  1.10460102e+07  4.65101262e+07]
E1 = -706.5863479437525  E_coul = 198.94660914095473
cycle= 1 E= -507.639738802798  delta_E= -3.71  |g|= 0.316  |ddm|= 0.301
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.419407
diis-c [-0.17590204  1.        ]
  HOMO = -0.236260834471666  LUMO = 87.9282281784722
  mo_energy =
[-1.20262814e+02 -1.22529043e+01 -6.65292874e+00 -6.65292874e+00
 -6.65292874e+00 -1.16348333e+00 -2.36260834e-01 -2.36260834e-01
 -2.36260834e-01  8.79282282e+01  6.94091805e+02  4.04972955e+03
  2.98253980e+04  1.54854566e+05  6.64959152e+05  2.71968003e+06
  1.10460111e+07  4.65101272e+07]
E1 = -706.5557129682898  E_coul = 198.915557765506
cycle= 2 E= -507.640155202784  delta_E= -0.000416  |g|= 0.00467  |ddm|= 0.0139
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00497279
diis-c [-2.46741607e-05 -5.56886103e-04  1.00055689e+00]
  HOMO = -0.236430653366804  LUMO = 87.9247606165842
  mo_energy =
[-1.20271263e+02 -1.22540580e+01 -6.65471602e+00 -6.65471602e+00
 -6.65471602e+00 -1.16354611e+00 -2.36430653e-01 -2.36430653e-01
 -2.36430653e-01  8.79247606e+01  6.94081361e+02  4.04971388e+03
  2.98253791e+04  1.54854546e+05  6.64959132e+05  2.71968001e+06
  1.10460111e+07  4.65101272e+07]
E1 = -706.5552888343606  E_coul = 198.91513352632018
cycle= 3 E= -507.64015530804  delta_E= -1.05e-07  |g|= 9.24e-05  |ddm|= 0.000194
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.000123675
diis-c [-3.75184613e-10  3.35434067e-05 -2.51888752e-02  1.02515533e+00]
  HOMO = -0.236432766071962  LUMO = 87.9247174915124
  mo_energy =
[-1.20271372e+02 -1.22540731e+01 -6.65474183e+00 -6.65474183e+00
 -6.65474183e+00 -1.16354673e+00 -2.36432766e-01 -2.36432766e-01
 -2.36432766e-01  8.79247175e+01  6.94081248e+02  4.04971374e+03
  2.98253789e+04  1.54854546e+05  6.64959132e+05  2.71968001e+06
  1.10460111e+07  4.65101272e+07]
E1 = -706.555281959921  E_coul = 198.91512665184305
cycle= 4 E= -507.640155308078  delta_E= -3.76e-11  |g|= 3.58e-07  |ddm|= 3.28e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.555281959921  E_coul = 198.91512665184305
  HOMO = -0.236432750695126  LUMO = 87.9247178179571
  mo_energy =
[-1.20271371e+02 -1.22540730e+01 -6.65474168e+00 -6.65474168e+00
 -6.65474168e+00 -1.16354673e+00 -2.36432751e-01 -2.36432751e-01
 -2.36432751e-01  8.79247178e+01  6.94081249e+02  4.04971374e+03
  2.98253789e+04  1.54854546e+05  6.64959132e+05  2.71968001e+06
  1.10460111e+07  4.65101272e+07]
E1 = -706.5552819947488  E_coul = 198.91512668667147
Extra cycle  E= -507.640155308077  delta_E= 5.68e-13  |g|= 6.14e-09  |ddm|= 1.54e-08
    CPU time for scf_cycle      0.10 sec, wall time      0.11 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 56.378287989068
E1 = -706.5552819947488  E_coul = 198.91512668667147
init E= -507.640155308077
    CPU time for initialize scf      0.12 sec, wall time      0.12 sec
  HOMO = -0.236432750517119  LUMO = 87.9247178218924
  mo_energy =
[-1.20271371e+02 -1.22540730e+01 -6.65474168e+00 -6.65474168e+00
 -6.65474168e+00 -1.16354673e+00 -2.36432751e-01 -2.36432751e-01
 -2.36432751e-01  8.79247178e+01  6.94081249e+02  4.04971374e+03
  2.98253789e+04  1.54854546e+05  6.64959132e+05  2.71968001e+06
  1.10460111e+07  4.65101272e+07]
E1 = -706.5552819952701  E_coul = 198.91512668719238
cycle= 1 E= -507.640155308078  delta_E= -3.41e-13  |g|= 1.5e-10  |ddm|= 2.36e-10
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -706.5552819952701  E_coul = 198.91512668719238
  HOMO = -0.236432750514631  LUMO = 87.9247178219475
  mo_energy =
[-1.20271371e+02 -1.22540730e+01 -6.65474168e+00 -6.65474168e+00
 -6.65474168e+00 -1.16354673e+00 -2.36432751e-01 -2.36432751e-01
 -2.36432751e-01  8.79247178e+01  6.94081249e+02  4.04971374e+03
  2.98253789e+04  1.54854546e+05  6.64959132e+05  2.71968001e+06
  1.10460111e+07  4.65101272e+07]
E1 = -706.5552819952793  E_coul = 198.91512668720134
Extra cycle  E= -507.640155308078  delta_E= -2.27e-13  |g|= 9.94e-11  |ddm|= 4.18e-12
    CPU time for scf_cycle      0.19 sec, wall time      0.19 sec
exp = [1.87954849e+07 4.69887121e+06 1.17471780e+06 2.93679370e+05
 7.34201302e+04 1.83045257e+04 2.30108311e+03 4.67734256e+02
 1.23637854e+02 3.79175443e+01 4.74276321e+00 3.91235877e-01
 8.59854680e+00 4.90838447e-01]
grad_E = [-1.44126381e-13  1.58126003e-11 -8.77531172e-12  9.28250949e-09
 -3.97809488e-08  5.66017593e-06  4.29640062e-06  7.12488889e-07
  4.79000499e-06  2.06325668e-06 -9.21530199e-06  1.22009377e-05
  2.16542425e-06  2.42524825e-05]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="BFGS",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((14, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.6988712134173084e+06,1.1747178033543271e+06,2.9367945083858178e+05,7.3419865393677101e+04,1.8353927627435987e+04,2.2341424145819028e+03,4.5688904996449571e+02,1.2173317272260677e+02,3.7593061247508530e+01,4.7412722556720146e+00,3.9120358491841306e-01,8.5986297237246045e+00,4.9084868336327880e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "12s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:18:29 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  18795484.8537        1
[INPUT] 0    0    [1    /1   ]  4698871.21328        1
[INPUT] 0    0    [1    /1   ]  1174717.80329        1
[INPUT] 0    0    [1    /1   ]  293679.371798        1
[INPUT] 0    0    [1    /1   ]  73420.1236167        1
[INPUT] 0    0    [1    /1   ]  18305.75994          1
[INPUT] 0    0    [1    /1   ]  2299.42599458        1
[INPUT] 0    0    [1    /1   ]  467.385292901        1
[INPUT] 0    0    [1    /1   ]  123.559155395        1
[INPUT] 0    0    [1    /1   ]  37.9024283672        1
[INPUT] 0    0    [1    /1   ]  4.74272581549        1
[INPUT] 0    0    [1    /1   ]  0.391233476839       1
[INPUT] 1    0    [1    /1   ]  8.59854580877        1
[INPUT] 1    0    [1    /1   ]  0.490837993239       1

nuclear repulsion = 0
number of shells = 14
number of NR pGTOs = 18
number of NR cGTOs = 18
basis = {'Ar': [[0, [18795484.85367008, 1.0]], [0, [4698871.213282177, 1.0]], [0, [1174717.803292357, 1.0]], [0, [293679.3717984887, 1.0]], [0, [73420.1236166838, 1.0]], [0, [18305.759939990487, 1.0]], [0, [2299.4259945826225, 1.0]], [0, [467.38529290063275, 1.0]], [0, [123.55915539494558, 1.0]], [0, [37.90242836720153, 1.0]], [0, [4.742725815491102, 1.0]], [0, [0.39123347683883936, 1.0]], [1, [8.598545808766069, 1.0]], [1, [0.49083799323934163, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [18795484.85367008]
bas 1, expnt(s) = [4698871.21328218]
bas 2, expnt(s) = [1174717.80329236]
bas 3, expnt(s) = [293679.37179849]
bas 4, expnt(s) = [73420.12361668]
bas 5, expnt(s) = [18305.75993999]
bas 6, expnt(s) = [2299.42599458]
bas 7, expnt(s) = [467.3852929]
bas 8, expnt(s) = [123.55915539]
bas 9, expnt(s) = [37.90242837]
bas 10, expnt(s) = [4.74272582]
bas 11, expnt(s) = [0.39123348]
bas 12, expnt(s) = [8.59854581]
bas 13, expnt(s) = [0.49083799]
CPU time:       289.87
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  0  1  1  0 42 43  0]
 [ 0  0  1  1  0 44 45  0]
 [ 0  0  1  1  0 46 47  0]
 [ 0  1  1  1  0 48 49  0]
 [ 0  1  1  1  0 50 51  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.87954849e+07 7.21199097e+05 4.69887121e+06 2.54982386e+05
 1.17471780e+06 9.01498871e+04 2.93679372e+05 3.18727918e+04
 7.34201236e+04 1.12687659e+04 1.83057599e+04 3.97608670e+03
 2.29942599e+03 8.38937489e+02 4.67385293e+02 2.53963501e+02
 1.23559155e+02 9.36313365e+01 3.79024284e+01 3.85936009e+01
 4.74272582e+00 8.11962623e+00 3.91233477e-01 1.24980435e+00
 8.59854581e+00 4.29551910e+01 4.90837993e-01 1.19855262e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.31994172246538
cond(S) = 56.37650252005978
E1 = -688.8484838384791  E_coul = 184.91601348347396
init E= -503.932470355005
    CPU time for initialize scf      0.03 sec, wall time      0.03 sec
  HOMO = -0.680911160240147  LUMO = 86.5269221161888
  mo_energy =
[-1.21650680e+02 -1.32810695e+01 -7.62150333e+00 -7.62150333e+00
 -7.62150333e+00 -1.65076937e+00 -6.80911160e-01 -6.80911160e-01
 -6.80911160e-01  8.65269221e+01  6.92159006e+02  4.04529045e+03
  2.98188781e+04  1.54850393e+05  6.64956249e+05  2.71967754e+06
  1.10460088e+07  4.65101251e+07]
E1 = -706.5862277449886  E_coul = 198.94648899631542
cycle= 1 E= -507.639738748673  delta_E= -3.71  |g|= 0.316  |ddm|= 0.301
    CPU time for cycle= 1      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.419432
diis-c [-0.17592296  1.        ]
  HOMO = -0.236263872797959  LUMO = 87.8616868542619
  mo_energy =
[-1.20262826e+02 -1.22529103e+01 -6.65293922e+00 -6.65293922e+00
 -6.65293922e+00 -1.16348501e+00 -2.36263873e-01 -2.36263873e-01
 -2.36263873e-01  8.78616869e+01  6.93528988e+02  4.04653996e+03
  2.98199674e+04  1.54851412e+05  6.64957238e+05  2.71967852e+06
  1.10460098e+07  4.65101260e+07]
E1 = -706.5555589080427  E_coul = 198.91540327398224
cycle= 2 E= -507.64015563406  delta_E= -0.000417  |g|= 0.00468  |ddm|= 0.0139
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00497563
diis-c [-2.47029215e-05 -5.54342808e-04  1.00055434e+00]
  HOMO = -0.236433918288916  LUMO = 87.8582170758864
  mo_energy =
[-1.20271284e+02 -1.22540654e+01 -6.65472877e+00 -6.65472877e+00
 -6.65472877e+00 -1.16354788e+00 -2.36433918e-01 -2.36433918e-01
 -2.36433918e-01  8.78582171e+01  6.93518537e+02  4.04652428e+03
  2.98199484e+04  1.54851392e+05  6.64957218e+05  2.71967850e+06
  1.10460098e+07  4.65101260e+07]
E1 = -706.5551340983876  E_coul = 198.91497835886747
cycle= 3 E= -507.64015573952  delta_E= -1.05e-07  |g|= 9.25e-05  |ddm|= 0.000194
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.000123806
diis-c [-3.76012336e-10  3.35398637e-05 -2.52010030e-02  1.02516746e+00]
  HOMO = -0.236436035206137  LUMO = 87.8581738846749
  mo_energy =
[-1.20271393e+02 -1.22540805e+01 -6.65475463e+00 -6.65475463e+00
 -6.65475463e+00 -1.16354850e+00 -2.36436035e-01 -2.36436035e-01
 -2.36436035e-01  8.78581739e+01  6.93518424e+02  4.04652414e+03
  2.98199483e+04  1.54851392e+05  6.64957218e+05  2.71967850e+06
  1.10460098e+07  4.65101260e+07]
E1 = -706.5551272085626  E_coul = 198.9149714690049
cycle= 4 E= -507.640155739558  delta_E= -3.75e-11  |g|= 3.59e-07  |ddm|= 3.29e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.5551272085626  E_coul = 198.9149714690049
  HOMO = -0.236436019791135  LUMO = 87.8581742116112
  mo_energy =
[-1.20271392e+02 -1.22540804e+01 -6.65475447e+00 -6.65475447e+00
 -6.65475447e+00 -1.16354850e+00 -2.36436020e-01 -2.36436020e-01
 -2.36436020e-01  8.78581742e+01  6.93518425e+02  4.04652415e+03
  2.98199483e+04  1.54851392e+05  6.64957218e+05  2.71967850e+06
  1.10460098e+07  4.65101260e+07]
E1 = -706.5551272434795  E_coul = 198.91497150392206
Extra cycle  E= -507.640155739557  delta_E= 1.71e-13  |g|= 6.15e-09  |ddm|= 1.54e-08
    CPU time for scf_cycle      0.10 sec, wall time      0.11 sec
exp = [1.87954849e+07 4.69887121e+06 1.17471780e+06 2.93679372e+05
 7.34201236e+04 1.83057599e+04 2.29942599e+03 4.67385293e+02
 1.23559155e+02 3.79024284e+01 4.74272582e+00 3.91233477e-01
 8.59854581e+00 4.90837993e-01]
E = -507.6401557395575
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="BFGS",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((14, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.6988712134173084e+06,1.1747178033543271e+06,2.9367945083858178e+05,7.3419865393677101e+04,1.8353927627435987e+04,2.2341424145819028e+03,4.5688904996449571e+02,1.2173317272260677e+02,3.7593061247508530e+01,4.7412722556720146e+00,3.9120358491841306e-01,8.5986297237246045e+00,4.9084868336327880e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "12s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:18:30 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  18795484.8537        1
[INPUT] 0    0    [1    /1   ]  4698871.21328        1
[INPUT] 0    0    [1    /1   ]  1174717.80329        1
[INPUT] 0    0    [1    /1   ]  293679.371798        1
[INPUT] 0    0    [1    /1   ]  73420.1236167        1
[INPUT] 0    0    [1    /1   ]  18305.75994          1
[INPUT] 0    0    [1    /1   ]  2299.42599458        1
[INPUT] 0    0    [1    /1   ]  467.385292901        1
[INPUT] 0    0    [1    /1   ]  123.559155395        1
[INPUT] 0    0    [1    /1   ]  37.9024283672        1
[INPUT] 0    0    [1    /1   ]  4.74272581549        1
[INPUT] 0    0    [1    /1   ]  0.391233476839       1
[INPUT] 1    0    [1    /1   ]  8.59854580877        1
[INPUT] 1    0    [1    /1   ]  0.490837993239       1

nuclear repulsion = 0
number of shells = 14
number of NR pGTOs = 18
number of NR cGTOs = 18
basis = {'Ar': [[0, [18795484.85367008, 1.0]], [0, [4698871.213282177, 1.0]], [0, [1174717.803292357, 1.0]], [0, [293679.3717984887, 1.0]], [0, [73420.1236166838, 1.0]], [0, [18305.759939990487, 1.0]], [0, [2299.4259945826225, 1.0]], [0, [467.38529290063275, 1.0]], [0, [123.55915539494558, 1.0]], [0, [37.90242836720153, 1.0]], [0, [4.742725815491102, 1.0]], [0, [0.39123347683883936, 1.0]], [1, [8.598545808766069, 1.0]], [1, [0.49083799323934163, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [18795484.85367008]
bas 1, expnt(s) = [4698871.21328218]
bas 2, expnt(s) = [1174717.80329236]
bas 3, expnt(s) = [293679.37179849]
bas 4, expnt(s) = [73420.12361668]
bas 5, expnt(s) = [18305.75993999]
bas 6, expnt(s) = [2299.42599458]
bas 7, expnt(s) = [467.3852929]
bas 8, expnt(s) = [123.55915539]
bas 9, expnt(s) = [37.90242837]
bas 10, expnt(s) = [4.74272582]
bas 11, expnt(s) = [0.39123348]
bas 12, expnt(s) = [8.59854581]
bas 13, expnt(s) = [0.49083799]
CPU time:       290.81
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  0  1  1  0 42 43  0]
 [ 0  0  1  1  0 44 45  0]
 [ 0  0  1  1  0 46 47  0]
 [ 0  1  1  1  0 48 49  0]
 [ 0  1  1  1  0 50 51  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.87954849e+07 7.21199097e+05 4.69887121e+06 2.54982386e+05
 1.17471780e+06 9.01498871e+04 2.93679372e+05 3.18727918e+04
 7.34201236e+04 1.12687659e+04 1.83057599e+04 3.97608670e+03
 2.29942599e+03 8.38937489e+02 4.67385293e+02 2.53963501e+02
 1.23559155e+02 9.36313365e+01 3.79024284e+01 3.85936009e+01
 4.74272582e+00 8.11962623e+00 3.91233477e-01 1.24980435e+00
 8.59854581e+00 4.29551910e+01 4.90837993e-01 1.19855262e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.31994172246538
cond(S) = 56.37650252005978
E1 = -688.8484838384791  E_coul = 184.91601348347396
init E= -503.932470355005
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.680911160240147  LUMO = 86.5269221161888
  mo_energy =
[-1.21650680e+02 -1.32810695e+01 -7.62150333e+00 -7.62150333e+00
 -7.62150333e+00 -1.65076937e+00 -6.80911160e-01 -6.80911160e-01
 -6.80911160e-01  8.65269221e+01  6.92159006e+02  4.04529045e+03
  2.98188781e+04  1.54850393e+05  6.64956249e+05  2.71967754e+06
  1.10460088e+07  4.65101251e+07]
E1 = -706.5862277449886  E_coul = 198.94648899631542
cycle= 1 E= -507.639738748673  delta_E= -3.71  |g|= 0.316  |ddm|= 0.301
    CPU time for cycle= 1      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.419432
diis-c [-0.17592296  1.        ]
  HOMO = -0.236263872797959  LUMO = 87.8616868542619
  mo_energy =
[-1.20262826e+02 -1.22529103e+01 -6.65293922e+00 -6.65293922e+00
 -6.65293922e+00 -1.16348501e+00 -2.36263873e-01 -2.36263873e-01
 -2.36263873e-01  8.78616869e+01  6.93528988e+02  4.04653996e+03
  2.98199674e+04  1.54851412e+05  6.64957238e+05  2.71967852e+06
  1.10460098e+07  4.65101260e+07]
E1 = -706.5555589080427  E_coul = 198.91540327398224
cycle= 2 E= -507.64015563406  delta_E= -0.000417  |g|= 0.00468  |ddm|= 0.0139
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00497563
diis-c [-2.47029215e-05 -5.54342808e-04  1.00055434e+00]
  HOMO = -0.236433918288916  LUMO = 87.8582170758864
  mo_energy =
[-1.20271284e+02 -1.22540654e+01 -6.65472877e+00 -6.65472877e+00
 -6.65472877e+00 -1.16354788e+00 -2.36433918e-01 -2.36433918e-01
 -2.36433918e-01  8.78582171e+01  6.93518537e+02  4.04652428e+03
  2.98199484e+04  1.54851392e+05  6.64957218e+05  2.71967850e+06
  1.10460098e+07  4.65101260e+07]
E1 = -706.5551340983876  E_coul = 198.91497835886747
cycle= 3 E= -507.64015573952  delta_E= -1.05e-07  |g|= 9.25e-05  |ddm|= 0.000194
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.000123806
diis-c [-3.76012336e-10  3.35398637e-05 -2.52010030e-02  1.02516746e+00]
  HOMO = -0.236436035206137  LUMO = 87.8581738846749
  mo_energy =
[-1.20271393e+02 -1.22540805e+01 -6.65475463e+00 -6.65475463e+00
 -6.65475463e+00 -1.16354850e+00 -2.36436035e-01 -2.36436035e-01
 -2.36436035e-01  8.78581739e+01  6.93518424e+02  4.04652414e+03
  2.98199483e+04  1.54851392e+05  6.64957218e+05  2.71967850e+06
  1.10460098e+07  4.65101260e+07]
E1 = -706.5551272085626  E_coul = 198.9149714690049
cycle= 4 E= -507.640155739558  delta_E= -3.75e-11  |g|= 3.59e-07  |ddm|= 3.29e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.5551272085626  E_coul = 198.9149714690049
  HOMO = -0.236436019791135  LUMO = 87.8581742116112
  mo_energy =
[-1.20271392e+02 -1.22540804e+01 -6.65475447e+00 -6.65475447e+00
 -6.65475447e+00 -1.16354850e+00 -2.36436020e-01 -2.36436020e-01
 -2.36436020e-01  8.78581742e+01  6.93518425e+02  4.04652415e+03
  2.98199483e+04  1.54851392e+05  6.64957218e+05  2.71967850e+06
  1.10460098e+07  4.65101260e+07]
E1 = -706.5551272434795  E_coul = 198.91497150392206
Extra cycle  E= -507.640155739557  delta_E= 1.71e-13  |g|= 6.15e-09  |ddm|= 1.54e-08
    CPU time for scf_cycle      0.11 sec, wall time      0.11 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 56.37650252005978
E1 = -706.5551272434795  E_coul = 198.91497150392206
init E= -507.640155739557
    CPU time for initialize scf      0.12 sec, wall time      0.12 sec
  HOMO = -0.236436019612614  LUMO = 87.8581742155511
  mo_energy =
[-1.20271392e+02 -1.22540804e+01 -6.65475447e+00 -6.65475447e+00
 -6.65475447e+00 -1.16354850e+00 -2.36436020e-01 -2.36436020e-01
 -2.36436020e-01  8.78581742e+01  6.93518425e+02  4.04652415e+03
  2.98199483e+04  1.54851392e+05  6.64957218e+05  2.71967850e+06
  1.10460098e+07  4.65101260e+07]
E1 = -706.5551272440023  E_coul = 198.91497150444474
cycle= 1 E= -507.640155739558  delta_E= -5.68e-14  |g|= 2.19e-10  |ddm|= 2.37e-10
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -706.5551272440023  E_coul = 198.91497150444474
  HOMO = -0.236436019610115  LUMO = 87.8581742156048
  mo_energy =
[-1.20271392e+02 -1.22540804e+01 -6.65475447e+00 -6.65475447e+00
 -6.65475447e+00 -1.16354850e+00 -2.36436020e-01 -2.36436020e-01
 -2.36436020e-01  8.78581742e+01  6.93518425e+02  4.04652415e+03
  2.98199483e+04  1.54851392e+05  6.64957218e+05  2.71967850e+06
  1.10460098e+07  4.65101260e+07]
E1 = -706.5551272440114  E_coul = 198.91497150445375
Extra cycle  E= -507.640155739558  delta_E= -5.68e-14  |g|= 2.84e-10  |ddm|= 4.25e-12
    CPU time for scf_cycle      0.20 sec, wall time      0.21 sec
exp = [1.87954849e+07 4.69887121e+06 1.17471780e+06 2.93679372e+05
 7.34201236e+04 1.83057599e+04 2.29942599e+03 4.67385293e+02
 1.23559155e+02 3.79024284e+01 4.74272582e+00 3.91233477e-01
 8.59854581e+00 4.90837993e-01]
grad_E = [-1.43461613e-13  1.58598915e-11 -8.42202789e-12  9.30950018e-09
 -3.96729461e-08  5.67637709e-06  4.11386323e-06  9.22606782e-07
 -8.71390445e-07  5.90810899e-07  4.11163899e-07 -3.23919060e-06
 -1.02204415e-06 -5.93674162e-06]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="BFGS",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((14, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.6988712134173084e+06,1.1747178033543271e+06,2.9367945083858178e+05,7.3419865393677101e+04,1.8353927627435987e+04,2.2341424145819028e+03,4.5688904996449571e+02,1.2173317272260677e+02,3.7593061247508530e+01,4.7412722556720146e+00,3.9120358491841306e-01,8.5986297237246045e+00,4.9084868336327880e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "12s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:18:34 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  18795484.8537        1
[INPUT] 0    0    [1    /1   ]  4698871.21328        1
[INPUT] 0    0    [1    /1   ]  1174717.80329        1
[INPUT] 0    0    [1    /1   ]  293679.372109        1
[INPUT] 0    0    [1    /1   ]  73420.1226029        1
[INPUT] 0    0    [1    /1   ]  18305.949062         1
[INPUT] 0    0    [1    /1   ]  2299.16927432        1
[INPUT] 0    0    [1    /1   ]  467.345818933        1
[INPUT] 0    0    [1    /1   ]  123.553792389        1
[INPUT] 0    0    [1    /1   ]  37.9016605448        1
[INPUT] 0    0    [1    /1   ]  4.74272085019        1
[INPUT] 0    0    [1    /1   ]  0.391233520155       1
[INPUT] 1    0    [1    /1   ]  8.59854707102        1
[INPUT] 1    0    [1    /1   ]  0.490838150988       1

nuclear repulsion = 0
number of shells = 14
number of NR pGTOs = 18
number of NR cGTOs = 18
basis = {'Ar': [[0, [18795484.853670076, 1.0]], [0, [4698871.213282708, 1.0]], [0, [1174717.8032926004, 1.0]], [0, [293679.37210882484, 1.0]], [0, [73420.12260291181, 1.0]], [0, [18305.94906196666, 1.0]], [0, [2299.1692743236267, 1.0]], [0, [467.3458189333625, 1.0]], [0, [123.55379238854718, 1.0]], [0, [37.901660544785486, 1.0]], [0, [4.742720850190836, 1.0]], [0, [0.3912335201546669, 1.0]], [1, [8.598547071021882, 1.0]], [1, [0.4908381509875058, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [18795484.85367008]
bas 1, expnt(s) = [4698871.21328271]
bas 2, expnt(s) = [1174717.8032926]
bas 3, expnt(s) = [293679.37210882]
bas 4, expnt(s) = [73420.12260291]
bas 5, expnt(s) = [18305.94906197]
bas 6, expnt(s) = [2299.16927432]
bas 7, expnt(s) = [467.34581893]
bas 8, expnt(s) = [123.55379239]
bas 9, expnt(s) = [37.90166054]
bas 10, expnt(s) = [4.74272085]
bas 11, expnt(s) = [0.39123352]
bas 12, expnt(s) = [8.59854707]
bas 13, expnt(s) = [0.49083815]
CPU time:       294.50
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  0  1  1  0 42 43  0]
 [ 0  0  1  1  0 44 45  0]
 [ 0  0  1  1  0 46 47  0]
 [ 0  1  1  1  0 48 49  0]
 [ 0  1  1  1  0 50 51  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.87954849e+07 7.21199097e+05 4.69887121e+06 2.54982386e+05
 1.17471780e+06 9.01498871e+04 2.93679372e+05 3.18727918e+04
 7.34201226e+04 1.12687658e+04 1.83059491e+04 3.97611751e+03
 2.29916927e+03 8.38867240e+02 4.67345819e+02 2.53947414e+02
 1.23553792e+02 9.36282885e+01 3.79016605e+01 3.85930145e+01
 4.74272085e+00 8.11961985e+00 3.91233520e-01 1.24980445e+00
 8.59854707e+00 4.29551989e+01 4.90838151e-01 1.19855311e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.31994164629122
cond(S) = 56.376643813501445
E1 = -688.8484433982125  E_coul = 184.91602284360698
init E= -503.932420554605
    CPU time for initialize scf      0.03 sec, wall time      0.03 sec
  HOMO = -0.68091091543313  LUMO = 86.5228767733761
  mo_energy =
[-1.21650678e+02 -1.32810691e+01 -7.62150285e+00 -7.62150285e+00
 -7.62150285e+00 -1.65076906e+00 -6.80910915e-01 -6.80910915e-01
 -6.80910915e-01  8.65228768e+01  6.92108285e+02  4.04487053e+03
  2.98181074e+04  1.54849964e+05  6.64956003e+05  2.71967735e+06
  1.10460087e+07  4.65101249e+07]
E1 = -706.5862394088024  E_coul = 198.9465006824143
cycle= 1 E= -507.639738726388  delta_E= -3.71  |g|= 0.316  |ddm|= 0.301
    CPU time for cycle= 1      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.419436
diis-c [-0.17592659  1.        ]
  HOMO = -0.236263552197392  LUMO = 87.8576368939261
  mo_energy =
[-1.20262823e+02 -1.22529098e+01 -6.65293867e+00 -6.65293867e+00
 -6.65293867e+00 -1.16348473e+00 -2.36263552e-01 -2.36263552e-01
 -2.36263552e-01  8.78576369e+01  6.93478270e+02  4.04612005e+03
  2.98191967e+04  1.54850982e+05  6.64956992e+05  2.71967833e+06
  1.10460096e+07  4.65101259e+07]
E1 = -706.5555684940161  E_coul = 198.91541285226427
cycle= 2 E= -507.640155641752  delta_E= -0.000417  |g|= 0.00468  |ddm|= 0.0139
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00497582
diis-c [-2.47047764e-05 -5.54224181e-04  1.00055422e+00]
  HOMO = -0.236433611810016  LUMO = 87.8541669848828
  mo_energy =
[-1.20271282e+02 -1.22540650e+01 -6.65472835e+00 -6.65472835e+00
 -6.65472835e+00 -1.16354760e+00 -2.36433612e-01 -2.36433612e-01
 -2.36433612e-01  8.78541670e+01  6.93467818e+02  4.04610437e+03
  2.98191778e+04  1.54850962e+05  6.64956972e+05  2.71967831e+06
  1.10460096e+07  4.65101259e+07]
E1 = -706.5551436425606  E_coul = 198.91498789533694
cycle= 3 E= -507.640155747224  delta_E= -1.05e-07  |g|= 9.25e-05  |ddm|= 0.000194
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.000123814
diis-c [-3.76066277e-10  3.35394626e-05 -2.52017040e-02  1.02516816e+00]
  HOMO = -0.236435728981993  LUMO = 87.8541237896973
  mo_energy =
[-1.20271391e+02 -1.22540802e+01 -6.65475421e+00 -6.65475421e+00
 -6.65475421e+00 -1.16354822e+00 -2.36435729e-01 -2.36435729e-01
 -2.36435729e-01  8.78541238e+01  6.93467705e+02  4.04610423e+03
  2.98191776e+04  1.54850962e+05  6.64956972e+05  2.71967831e+06
  1.10460096e+07  4.65101259e+07]
E1 = -706.5551367518052  E_coul = 198.91498100454413
cycle= 4 E= -507.640155747261  delta_E= -3.75e-11  |g|= 3.59e-07  |ddm|= 3.29e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.5551367518052  E_coul = 198.91498100454413
  HOMO = -0.236435713564589  LUMO = 87.8541241166637
  mo_energy =
[-1.20271390e+02 -1.22540800e+01 -6.65475406e+00 -6.65475406e+00
 -6.65475406e+00 -1.16354822e+00 -2.36435714e-01 -2.36435714e-01
 -2.36435714e-01  8.78541241e+01  6.93467706e+02  4.04610423e+03
  2.98191776e+04  1.54850962e+05  6.64956972e+05  2.71967831e+06
  1.10460096e+07  4.65101259e+07]
E1 = -706.5551367867279  E_coul = 198.91498103946688
Extra cycle  E= -507.640155747261  delta_E= 5.68e-14  |g|= 6.15e-09  |ddm|= 1.54e-08
    CPU time for scf_cycle      0.11 sec, wall time      0.11 sec
exp = [1.87954849e+07 4.69887121e+06 1.17471780e+06 2.93679372e+05
 7.34201226e+04 1.83059491e+04 2.29916927e+03 4.67345819e+02
 1.23553792e+02 3.79016605e+01 4.74272085e+00 3.91233520e-01
 8.59854707e+00 4.90838151e-01]
E = -507.640155747261
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="BFGS",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((14, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.6988712134173084e+06,1.1747178033543271e+06,2.9367945083858178e+05,7.3419865393677101e+04,1.8353927627435987e+04,2.2341424145819028e+03,4.5688904996449571e+02,1.2173317272260677e+02,3.7593061247508530e+01,4.7412722556720146e+00,3.9120358491841306e-01,8.5986297237246045e+00,4.9084868336327880e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "12s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:18:35 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  18795484.8537        1
[INPUT] 0    0    [1    /1   ]  4698871.21328        1
[INPUT] 0    0    [1    /1   ]  1174717.80329        1
[INPUT] 0    0    [1    /1   ]  293679.372109        1
[INPUT] 0    0    [1    /1   ]  73420.1226029        1
[INPUT] 0    0    [1    /1   ]  18305.949062         1
[INPUT] 0    0    [1    /1   ]  2299.16927432        1
[INPUT] 0    0    [1    /1   ]  467.345818933        1
[INPUT] 0    0    [1    /1   ]  123.553792389        1
[INPUT] 0    0    [1    /1   ]  37.9016605448        1
[INPUT] 0    0    [1    /1   ]  4.74272085019        1
[INPUT] 0    0    [1    /1   ]  0.391233520155       1
[INPUT] 1    0    [1    /1   ]  8.59854707102        1
[INPUT] 1    0    [1    /1   ]  0.490838150988       1

nuclear repulsion = 0
number of shells = 14
number of NR pGTOs = 18
number of NR cGTOs = 18
basis = {'Ar': [[0, [18795484.853670076, 1.0]], [0, [4698871.213282708, 1.0]], [0, [1174717.8032926004, 1.0]], [0, [293679.37210882484, 1.0]], [0, [73420.12260291181, 1.0]], [0, [18305.94906196666, 1.0]], [0, [2299.1692743236267, 1.0]], [0, [467.3458189333625, 1.0]], [0, [123.55379238854718, 1.0]], [0, [37.901660544785486, 1.0]], [0, [4.742720850190836, 1.0]], [0, [0.3912335201546669, 1.0]], [1, [8.598547071021882, 1.0]], [1, [0.4908381509875058, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [18795484.85367008]
bas 1, expnt(s) = [4698871.21328271]
bas 2, expnt(s) = [1174717.8032926]
bas 3, expnt(s) = [293679.37210882]
bas 4, expnt(s) = [73420.12260291]
bas 5, expnt(s) = [18305.94906197]
bas 6, expnt(s) = [2299.16927432]
bas 7, expnt(s) = [467.34581893]
bas 8, expnt(s) = [123.55379239]
bas 9, expnt(s) = [37.90166054]
bas 10, expnt(s) = [4.74272085]
bas 11, expnt(s) = [0.39123352]
bas 12, expnt(s) = [8.59854707]
bas 13, expnt(s) = [0.49083815]
CPU time:       295.45
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  0  1  1  0 42 43  0]
 [ 0  0  1  1  0 44 45  0]
 [ 0  0  1  1  0 46 47  0]
 [ 0  1  1  1  0 48 49  0]
 [ 0  1  1  1  0 50 51  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.87954849e+07 7.21199097e+05 4.69887121e+06 2.54982386e+05
 1.17471780e+06 9.01498871e+04 2.93679372e+05 3.18727918e+04
 7.34201226e+04 1.12687658e+04 1.83059491e+04 3.97611751e+03
 2.29916927e+03 8.38867240e+02 4.67345819e+02 2.53947414e+02
 1.23553792e+02 9.36282885e+01 3.79016605e+01 3.85930145e+01
 4.74272085e+00 8.11961985e+00 3.91233520e-01 1.24980445e+00
 8.59854707e+00 4.29551989e+01 4.90838151e-01 1.19855311e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.31994164629122
cond(S) = 56.376643813501445
E1 = -688.8484433982125  E_coul = 184.91602284360698
init E= -503.932420554605
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.68091091543313  LUMO = 86.5228767733761
  mo_energy =
[-1.21650678e+02 -1.32810691e+01 -7.62150285e+00 -7.62150285e+00
 -7.62150285e+00 -1.65076906e+00 -6.80910915e-01 -6.80910915e-01
 -6.80910915e-01  8.65228768e+01  6.92108285e+02  4.04487053e+03
  2.98181074e+04  1.54849964e+05  6.64956003e+05  2.71967735e+06
  1.10460087e+07  4.65101249e+07]
E1 = -706.5862394088024  E_coul = 198.9465006824143
cycle= 1 E= -507.639738726388  delta_E= -3.71  |g|= 0.316  |ddm|= 0.301
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.419436
diis-c [-0.17592659  1.        ]
  HOMO = -0.236263552197392  LUMO = 87.8576368939261
  mo_energy =
[-1.20262823e+02 -1.22529098e+01 -6.65293867e+00 -6.65293867e+00
 -6.65293867e+00 -1.16348473e+00 -2.36263552e-01 -2.36263552e-01
 -2.36263552e-01  8.78576369e+01  6.93478270e+02  4.04612005e+03
  2.98191967e+04  1.54850982e+05  6.64956992e+05  2.71967833e+06
  1.10460096e+07  4.65101259e+07]
E1 = -706.5555684940161  E_coul = 198.91541285226427
cycle= 2 E= -507.640155641752  delta_E= -0.000417  |g|= 0.00468  |ddm|= 0.0139
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00497582
diis-c [-2.47047764e-05 -5.54224181e-04  1.00055422e+00]
  HOMO = -0.236433611810016  LUMO = 87.8541669848828
  mo_energy =
[-1.20271282e+02 -1.22540650e+01 -6.65472835e+00 -6.65472835e+00
 -6.65472835e+00 -1.16354760e+00 -2.36433612e-01 -2.36433612e-01
 -2.36433612e-01  8.78541670e+01  6.93467818e+02  4.04610437e+03
  2.98191778e+04  1.54850962e+05  6.64956972e+05  2.71967831e+06
  1.10460096e+07  4.65101259e+07]
E1 = -706.5551436425606  E_coul = 198.91498789533694
cycle= 3 E= -507.640155747224  delta_E= -1.05e-07  |g|= 9.25e-05  |ddm|= 0.000194
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.000123814
diis-c [-3.76066277e-10  3.35394626e-05 -2.52017040e-02  1.02516816e+00]
  HOMO = -0.236435728981993  LUMO = 87.8541237896973
  mo_energy =
[-1.20271391e+02 -1.22540802e+01 -6.65475421e+00 -6.65475421e+00
 -6.65475421e+00 -1.16354822e+00 -2.36435729e-01 -2.36435729e-01
 -2.36435729e-01  8.78541238e+01  6.93467705e+02  4.04610423e+03
  2.98191776e+04  1.54850962e+05  6.64956972e+05  2.71967831e+06
  1.10460096e+07  4.65101259e+07]
E1 = -706.5551367518052  E_coul = 198.91498100454413
cycle= 4 E= -507.640155747261  delta_E= -3.75e-11  |g|= 3.59e-07  |ddm|= 3.29e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.5551367518052  E_coul = 198.91498100454413
  HOMO = -0.236435713564589  LUMO = 87.8541241166637
  mo_energy =
[-1.20271390e+02 -1.22540800e+01 -6.65475406e+00 -6.65475406e+00
 -6.65475406e+00 -1.16354822e+00 -2.36435714e-01 -2.36435714e-01
 -2.36435714e-01  8.78541241e+01  6.93467706e+02  4.04610423e+03
  2.98191776e+04  1.54850962e+05  6.64956972e+05  2.71967831e+06
  1.10460096e+07  4.65101259e+07]
E1 = -706.5551367867279  E_coul = 198.91498103946688
Extra cycle  E= -507.640155747261  delta_E= 5.68e-14  |g|= 6.15e-09  |ddm|= 1.54e-08
    CPU time for scf_cycle      0.10 sec, wall time      0.11 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 56.376643813501445
E1 = -706.5551367867279  E_coul = 198.91498103946688
init E= -507.640155747261
    CPU time for initialize scf      0.12 sec, wall time      0.12 sec
  HOMO = -0.236435713386032  LUMO = 87.8541241206042
  mo_energy =
[-1.20271390e+02 -1.22540800e+01 -6.65475406e+00 -6.65475406e+00
 -6.65475406e+00 -1.16354822e+00 -2.36435713e-01 -2.36435713e-01
 -2.36435713e-01  8.78541241e+01  6.93467706e+02  4.04610423e+03
  2.98191776e+04  1.54850962e+05  6.64956972e+05  2.71967831e+06
  1.10460096e+07  4.65101259e+07]
E1 = -706.555136787251  E_coul = 198.9149810399899
cycle= 1 E= -507.640155747261  delta_E=    0  |g|= 1.99e-10  |ddm|= 2.37e-10
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -706.555136787251  E_coul = 198.9149810399899
  HOMO = -0.236435713383531  LUMO = 87.8541241206596
  mo_energy =
[-1.20271390e+02 -1.22540800e+01 -6.65475406e+00 -6.65475406e+00
 -6.65475406e+00 -1.16354822e+00 -2.36435713e-01 -2.36435713e-01
 -2.36435713e-01  8.78541241e+01  6.93467706e+02  4.04610423e+03
  2.98191776e+04  1.54850962e+05  6.64956972e+05  2.71967831e+06
  1.10460096e+07  4.65101259e+07]
E1 = -706.5551367872596  E_coul = 198.91498103999862
Extra cycle  E= -507.640155747261  delta_E= 5.68e-14  |g|= 1.08e-10  |ddm|= 4.17e-12
    CPU time for scf_cycle      0.19 sec, wall time      0.20 sec
exp = [1.87954849e+07 4.69887121e+06 1.17471780e+06 2.93679372e+05
 7.34201226e+04 1.83059491e+04 2.29916927e+03 4.67345819e+02
 1.23553792e+02 3.79016605e+01 4.74272085e+00 3.91233520e-01
 8.59854707e+00 4.90838151e-01]
grad_E = [-1.43350195e-13  1.58678132e-11 -8.36280295e-12  9.31402293e-09
 -3.96550028e-08  5.67913152e-06  4.07022767e-06  7.51873197e-07
  2.71972519e-08  1.98626429e-08  2.02621010e-07 -9.01879091e-07
 -2.63707790e-07 -1.86881414e-06]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="BFGS",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((14, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.6988712134173084e+06,1.1747178033543271e+06,2.9367945083858178e+05,7.3419865393677101e+04,1.8353927627435987e+04,2.2341424145819028e+03,4.5688904996449571e+02,1.2173317272260677e+02,3.7593061247508530e+01,4.7412722556720146e+00,3.9120358491841306e-01,8.5986297237246045e+00,4.9084868336327880e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "12s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:18:39 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  18795484.8537        1
[INPUT] 0    0    [1    /1   ]  4698871.21328        1
[INPUT] 0    0    [1    /1   ]  1174717.80329        1
[INPUT] 0    0    [1    /1   ]  293679.37212         1
[INPUT] 0    0    [1    /1   ]  73420.1225673        1
[INPUT] 0    0    [1    /1   ]  18305.9557152        1
[INPUT] 0    0    [1    /1   ]  2299.16003263        1
[INPUT] 0    0    [1    /1   ]  467.345432613        1
[INPUT] 0    0    [1    /1   ]  123.554028987        1
[INPUT] 0    0    [1    /1   ]  37.9017312664        1
[INPUT] 0    0    [1    /1   ]  4.74272060394        1
[INPUT] 0    0    [1    /1   ]  0.391233570864       1
[INPUT] 1    0    [1    /1   ]  8.59854742508        1
[INPUT] 1    0    [1    /1   ]  0.490838204898       1

nuclear repulsion = 0
number of shells = 14
number of NR pGTOs = 18
number of NR cGTOs = 18
basis = {'Ar': [[0, [18795484.853670076, 1.0]], [0, [4698871.213282727, 1.0]], [0, [1174717.803292609, 1.0]], [0, [293679.3721197418, 1.0]], [0, [73420.12256730036, 1.0]], [0, [18305.955715183427, 1.0]], [0, [2299.1600326284697, 1.0]], [0, [467.3454326133401, 1.0]], [0, [123.55402898723179, 1.0]], [0, [37.90173126643869, 1.0]], [0, [4.742720603941083, 1.0]], [0, [0.39123357086446664, 1.0]], [1, [8.59854742508456, 1.0]], [1, [0.49083820489810526, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [18795484.85367008]
bas 1, expnt(s) = [4698871.21328273]
bas 2, expnt(s) = [1174717.80329261]
bas 3, expnt(s) = [293679.37211974]
bas 4, expnt(s) = [73420.1225673]
bas 5, expnt(s) = [18305.95571518]
bas 6, expnt(s) = [2299.16003263]
bas 7, expnt(s) = [467.34543261]
bas 8, expnt(s) = [123.55402899]
bas 9, expnt(s) = [37.90173127]
bas 10, expnt(s) = [4.7427206]
bas 11, expnt(s) = [0.39123357]
bas 12, expnt(s) = [8.59854743]
bas 13, expnt(s) = [0.4908382]
CPU time:       299.12
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  0  1  1  0 42 43  0]
 [ 0  0  1  1  0 44 45  0]
 [ 0  0  1  1  0 46 47  0]
 [ 0  1  1  1  0 48 49  0]
 [ 0  1  1  1  0 50 51  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.87954849e+07 7.21199097e+05 4.69887121e+06 2.54982386e+05
 1.17471780e+06 9.01498871e+04 2.93679372e+05 3.18727918e+04
 7.34201226e+04 1.12687658e+04 1.83059557e+04 3.97611860e+03
 2.29916003e+03 8.38864711e+02 4.67345433e+02 2.53947257e+02
 1.23554029e+02 9.36284229e+01 3.79017313e+01 3.85930685e+01
 4.74272060e+00 8.11961954e+00 3.91233571e-01 1.24980457e+00
 8.59854743e+00 4.29552011e+01 4.90838205e-01 1.19855327e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319941569332876
cond(S) = 56.37667413654788
E1 = -688.8484441399581  E_coul = 184.91602696970983
init E= -503.932417170248
    CPU time for initialize scf      0.03 sec, wall time      0.03 sec
  HOMO = -0.680910832263228  LUMO = 86.5231222945223
  mo_energy =
[-1.21650678e+02 -1.32810689e+01 -7.62150256e+00 -7.62150256e+00
 -7.62150256e+00 -1.65076901e+00 -6.80910832e-01 -6.80910832e-01
 -6.80910832e-01  8.65231223e+01  6.92108847e+02  4.04486043e+03
  2.98180844e+04  1.54849952e+05  6.64955998e+05  2.71967735e+06
  1.10460087e+07  4.65101249e+07]
E1 = -706.5862448380022  E_coul = 198.94650610984053
cycle= 1 E= -507.639738728162  delta_E= -3.71  |g|= 0.316  |ddm|= 0.301
    CPU time for cycle= 1      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.419436
diis-c [-0.17592674  1.        ]
  HOMO = -0.2362634022567  LUMO = 87.8578827926105
  mo_energy =
[-1.20262823e+02 -1.22529095e+01 -6.65293831e+00 -6.65293831e+00
 -6.65293831e+00 -1.16348461e+00 -2.36263402e-01 -2.36263402e-01
 -2.36263402e-01  8.78578828e+01  6.93478832e+02  4.04610996e+03
  2.98191737e+04  1.54850971e+05  6.64956987e+05  2.71967833e+06
  1.10460096e+07  4.65101259e+07]
E1 = -706.5555740447387  E_coul = 198.91541840290375
cycle= 2 E= -507.640155641835  delta_E= -0.000417  |g|= 0.00468  |ddm|= 0.0139
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00497581
diis-c [-2.47046866e-05 -5.54237873e-04  1.00055424e+00]
  HOMO = -0.236433461097777  LUMO = 87.8544128919915
  mo_energy =
[-1.20271281e+02 -1.22540647e+01 -6.65472799e+00 -6.65472799e+00
 -6.65472799e+00 -1.16354748e+00 -2.36433461e-01 -2.36433461e-01
 -2.36433461e-01  8.78544129e+01  6.93468380e+02  4.04609428e+03
  2.98191548e+04  1.54850951e+05  6.64956967e+05  2.71967831e+06
  1.10460096e+07  4.65101259e+07]
E1 = -706.5551491956824  E_coul = 198.91499344837666
cycle= 3 E= -507.640155747306  delta_E= -1.05e-07  |g|= 9.25e-05  |ddm|= 0.000194
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.000123814
diis-c [-3.76063411e-10  3.35394238e-05 -2.52016513e-02  1.02516811e+00]
  HOMO = -0.236435578254388  LUMO = 87.854369697059
  mo_energy =
[-1.20271390e+02 -1.22540798e+01 -6.65475385e+00 -6.65475385e+00
 -6.65475385e+00 -1.16354810e+00 -2.36435578e-01 -2.36435578e-01
 -2.36435578e-01  8.78543697e+01  6.93468267e+02  4.04609414e+03
  2.98191547e+04  1.54850951e+05  6.64956967e+05  2.71967831e+06
  1.10460096e+07  4.65101259e+07]
E1 = -706.5551423049839  E_coul = 198.9149865576409
cycle= 4 E= -507.640155747343  delta_E= -3.73e-11  |g|= 3.59e-07  |ddm|= 3.29e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.5551423049839  E_coul = 198.9149865576409
  HOMO = -0.236435562837111  LUMO = 87.8543700240247
  mo_energy =
[-1.20271389e+02 -1.22540797e+01 -6.65475369e+00 -6.65475369e+00
 -6.65475369e+00 -1.16354810e+00 -2.36435563e-01 -2.36435563e-01
 -2.36435563e-01  8.78543700e+01  6.93468268e+02  4.04609414e+03
  2.98191547e+04  1.54850951e+05  6.64956967e+05  2.71967831e+06
  1.10460096e+07  4.65101259e+07]
E1 = -706.5551423399063  E_coul = 198.91498659256334
Extra cycle  E= -507.640155747343  delta_E=    0  |g|= 6.15e-09  |ddm|= 1.54e-08
    CPU time for scf_cycle      0.10 sec, wall time      0.11 sec
exp = [1.87954849e+07 4.69887121e+06 1.17471780e+06 2.93679372e+05
 7.34201226e+04 1.83059557e+04 2.29916003e+03 4.67345433e+02
 1.23554029e+02 3.79017313e+01 4.74272060e+00 3.91233571e-01
 8.59854743e+00 4.90838205e-01]
E = -507.640155747343
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="BFGS",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((14, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.6988712134173084e+06,1.1747178033543271e+06,2.9367945083858178e+05,7.3419865393677101e+04,1.8353927627435987e+04,2.2341424145819028e+03,4.5688904996449571e+02,1.2173317272260677e+02,3.7593061247508530e+01,4.7412722556720146e+00,3.9120358491841306e-01,8.5986297237246045e+00,4.9084868336327880e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "12s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:18:39 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  18795484.8537        1
[INPUT] 0    0    [1    /1   ]  4698871.21328        1
[INPUT] 0    0    [1    /1   ]  1174717.80329        1
[INPUT] 0    0    [1    /1   ]  293679.37212         1
[INPUT] 0    0    [1    /1   ]  73420.1225673        1
[INPUT] 0    0    [1    /1   ]  18305.9557152        1
[INPUT] 0    0    [1    /1   ]  2299.16003263        1
[INPUT] 0    0    [1    /1   ]  467.345432613        1
[INPUT] 0    0    [1    /1   ]  123.554028987        1
[INPUT] 0    0    [1    /1   ]  37.9017312664        1
[INPUT] 0    0    [1    /1   ]  4.74272060394        1
[INPUT] 0    0    [1    /1   ]  0.391233570864       1
[INPUT] 1    0    [1    /1   ]  8.59854742508        1
[INPUT] 1    0    [1    /1   ]  0.490838204898       1

nuclear repulsion = 0
number of shells = 14
number of NR pGTOs = 18
number of NR cGTOs = 18
basis = {'Ar': [[0, [18795484.853670076, 1.0]], [0, [4698871.213282727, 1.0]], [0, [1174717.803292609, 1.0]], [0, [293679.3721197418, 1.0]], [0, [73420.12256730036, 1.0]], [0, [18305.955715183427, 1.0]], [0, [2299.1600326284697, 1.0]], [0, [467.3454326133401, 1.0]], [0, [123.55402898723179, 1.0]], [0, [37.90173126643869, 1.0]], [0, [4.742720603941083, 1.0]], [0, [0.39123357086446664, 1.0]], [1, [8.59854742508456, 1.0]], [1, [0.49083820489810526, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [18795484.85367008]
bas 1, expnt(s) = [4698871.21328273]
bas 2, expnt(s) = [1174717.80329261]
bas 3, expnt(s) = [293679.37211974]
bas 4, expnt(s) = [73420.1225673]
bas 5, expnt(s) = [18305.95571518]
bas 6, expnt(s) = [2299.16003263]
bas 7, expnt(s) = [467.34543261]
bas 8, expnt(s) = [123.55402899]
bas 9, expnt(s) = [37.90173127]
bas 10, expnt(s) = [4.7427206]
bas 11, expnt(s) = [0.39123357]
bas 12, expnt(s) = [8.59854743]
bas 13, expnt(s) = [0.4908382]
CPU time:       300.08
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  0  1  1  0 42 43  0]
 [ 0  0  1  1  0 44 45  0]
 [ 0  0  1  1  0 46 47  0]
 [ 0  1  1  1  0 48 49  0]
 [ 0  1  1  1  0 50 51  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.87954849e+07 7.21199097e+05 4.69887121e+06 2.54982386e+05
 1.17471780e+06 9.01498871e+04 2.93679372e+05 3.18727918e+04
 7.34201226e+04 1.12687658e+04 1.83059557e+04 3.97611860e+03
 2.29916003e+03 8.38864711e+02 4.67345433e+02 2.53947257e+02
 1.23554029e+02 9.36284229e+01 3.79017313e+01 3.85930685e+01
 4.74272060e+00 8.11961954e+00 3.91233571e-01 1.24980457e+00
 8.59854743e+00 4.29552011e+01 4.90838205e-01 1.19855327e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319941569332876
cond(S) = 56.37667413654788
E1 = -688.8484441399581  E_coul = 184.91602696970983
init E= -503.932417170248
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.680910832263228  LUMO = 86.5231222945223
  mo_energy =
[-1.21650678e+02 -1.32810689e+01 -7.62150256e+00 -7.62150256e+00
 -7.62150256e+00 -1.65076901e+00 -6.80910832e-01 -6.80910832e-01
 -6.80910832e-01  8.65231223e+01  6.92108847e+02  4.04486043e+03
  2.98180844e+04  1.54849952e+05  6.64955998e+05  2.71967735e+06
  1.10460087e+07  4.65101249e+07]
E1 = -706.5862448380022  E_coul = 198.94650610984053
cycle= 1 E= -507.639738728162  delta_E= -3.71  |g|= 0.316  |ddm|= 0.301
    CPU time for cycle= 1      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.419436
diis-c [-0.17592674  1.        ]
  HOMO = -0.2362634022567  LUMO = 87.8578827926105
  mo_energy =
[-1.20262823e+02 -1.22529095e+01 -6.65293831e+00 -6.65293831e+00
 -6.65293831e+00 -1.16348461e+00 -2.36263402e-01 -2.36263402e-01
 -2.36263402e-01  8.78578828e+01  6.93478832e+02  4.04610996e+03
  2.98191737e+04  1.54850971e+05  6.64956987e+05  2.71967833e+06
  1.10460096e+07  4.65101259e+07]
E1 = -706.5555740447387  E_coul = 198.91541840290375
cycle= 2 E= -507.640155641835  delta_E= -0.000417  |g|= 0.00468  |ddm|= 0.0139
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00497581
diis-c [-2.47046866e-05 -5.54237873e-04  1.00055424e+00]
  HOMO = -0.236433461097777  LUMO = 87.8544128919915
  mo_energy =
[-1.20271281e+02 -1.22540647e+01 -6.65472799e+00 -6.65472799e+00
 -6.65472799e+00 -1.16354748e+00 -2.36433461e-01 -2.36433461e-01
 -2.36433461e-01  8.78544129e+01  6.93468380e+02  4.04609428e+03
  2.98191548e+04  1.54850951e+05  6.64956967e+05  2.71967831e+06
  1.10460096e+07  4.65101259e+07]
E1 = -706.5551491956824  E_coul = 198.91499344837666
cycle= 3 E= -507.640155747306  delta_E= -1.05e-07  |g|= 9.25e-05  |ddm|= 0.000194
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.000123814
diis-c [-3.76063411e-10  3.35394238e-05 -2.52016513e-02  1.02516811e+00]
  HOMO = -0.236435578254388  LUMO = 87.854369697059
  mo_energy =
[-1.20271390e+02 -1.22540798e+01 -6.65475385e+00 -6.65475385e+00
 -6.65475385e+00 -1.16354810e+00 -2.36435578e-01 -2.36435578e-01
 -2.36435578e-01  8.78543697e+01  6.93468267e+02  4.04609414e+03
  2.98191547e+04  1.54850951e+05  6.64956967e+05  2.71967831e+06
  1.10460096e+07  4.65101259e+07]
E1 = -706.5551423049839  E_coul = 198.9149865576409
cycle= 4 E= -507.640155747343  delta_E= -3.73e-11  |g|= 3.59e-07  |ddm|= 3.29e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.5551423049839  E_coul = 198.9149865576409
  HOMO = -0.236435562837111  LUMO = 87.8543700240247
  mo_energy =
[-1.20271389e+02 -1.22540797e+01 -6.65475369e+00 -6.65475369e+00
 -6.65475369e+00 -1.16354810e+00 -2.36435563e-01 -2.36435563e-01
 -2.36435563e-01  8.78543700e+01  6.93468268e+02  4.04609414e+03
  2.98191547e+04  1.54850951e+05  6.64956967e+05  2.71967831e+06
  1.10460096e+07  4.65101259e+07]
E1 = -706.5551423399063  E_coul = 198.91498659256334
Extra cycle  E= -507.640155747343  delta_E=    0  |g|= 6.15e-09  |ddm|= 1.54e-08
    CPU time for scf_cycle      0.10 sec, wall time      0.11 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 56.37667413654788
E1 = -706.5551423399063  E_coul = 198.91498659256334
init E= -507.640155747343
    CPU time for initialize scf      0.12 sec, wall time      0.12 sec
  HOMO = -0.236435562658556  LUMO = 87.8543700279638
  mo_energy =
[-1.20271389e+02 -1.22540797e+01 -6.65475369e+00 -6.65475369e+00
 -6.65475369e+00 -1.16354810e+00 -2.36435563e-01 -2.36435563e-01
 -2.36435563e-01  8.78543700e+01  6.93468268e+02  4.04609414e+03
  2.98191547e+04  1.54850951e+05  6.64956967e+05  2.71967831e+06
  1.10460096e+07  4.65101259e+07]
E1 = -706.555142340429  E_coul = 198.91498659308633
cycle= 1 E= -507.640155747343  delta_E= 2.84e-13  |g|= 2.53e-10  |ddm|= 2.37e-10
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -706.555142340429  E_coul = 198.91498659308633
  HOMO = -0.236435562656063  LUMO = 87.8543700280185
  mo_energy =
[-1.20271389e+02 -1.22540797e+01 -6.65475369e+00 -6.65475369e+00
 -6.65475369e+00 -1.16354810e+00 -2.36435563e-01 -2.36435563e-01
 -2.36435563e-01  8.78543700e+01  6.93468268e+02  4.04609414e+03
  2.98191547e+04  1.54850951e+05  6.64956967e+05  2.71967831e+06
  1.10460096e+07  4.65101259e+07]
E1 = -706.5551423404384  E_coul = 198.9149865930954
Extra cycle  E= -507.640155747343  delta_E= -2.84e-13  |g|= 7.02e-11  |ddm|= 4.19e-12
    CPU time for scf_cycle      0.19 sec, wall time      0.19 sec
exp = [1.87954849e+07 4.69887121e+06 1.17471780e+06 2.93679372e+05
 7.34201226e+04 1.83059557e+04 2.29916003e+03 4.67345433e+02
 1.23554029e+02 3.79017313e+01 4.74272060e+00 3.91233571e-01
 8.59854743e+00 4.90838205e-01]
grad_E = [-1.43345456e-13  1.58681506e-11 -8.36028314e-12  9.31421572e-09
 -3.96542551e-08  5.67925232e-06  4.06711633e-06  7.40275387e-07
  1.43627364e-07  1.46427934e-08  8.65941807e-09 -3.20906821e-08
 -7.12901738e-09 -7.34842160e-08]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="BFGS",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((14, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.6988712134173084e+06,1.1747178033543271e+06,2.9367945083858178e+05,7.3419865393677101e+04,1.8353927627435987e+04,2.2341424145819028e+03,4.5688904996449571e+02,1.2173317272260677e+02,3.7593061247508530e+01,4.7412722556720146e+00,3.9120358491841306e-01,8.5986297237246045e+00,4.9084868336327880e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "12s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:18:43 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  18795484.8537        1
[INPUT] 0    0    [1    /1   ]  4698871.21328        1
[INPUT] 0    0    [1    /1   ]  1174717.80329        1
[INPUT] 0    0    [1    /1   ]  293679.372128        1
[INPUT] 0    0    [1    /1   ]  73420.1225403        1
[INPUT] 0    0    [1    /1   ]  18305.9607704        1
[INPUT] 0    0    [1    /1   ]  2299.15295875        1
[INPUT] 0    0    [1    /1   ]  467.345289255        1
[INPUT] 0    0    [1    /1   ]  123.554261157        1
[INPUT] 0    0    [1    /1   ]  37.9017969406        1
[INPUT] 0    0    [1    /1   ]  4.74272040532        1
[INPUT] 0    0    [1    /1   ]  0.391233616312       1
[INPUT] 1    0    [1    /1   ]  8.59854773441        1
[INPUT] 1    0    [1    /1   ]  0.490838252741       1

nuclear repulsion = 0
number of shells = 14
number of NR pGTOs = 18
number of NR cGTOs = 18
basis = {'Ar': [[0, [18795484.853670076, 1.0]], [0, [4698871.213282741, 1.0]], [0, [1174717.8032926156, 1.0]], [0, [293679.3721280366, 1.0]], [0, [73420.12254026603, 1.0]], [0, [18305.96077038036, 1.0]], [0, [2299.15295874641, 1.0]], [0, [467.3452892546316, 1.0]], [0, [123.55426115747345, 1.0]], [0, [37.90179694056565, 1.0]], [0, [4.742720405324702, 1.0]], [0, [0.39123361631237663, 1.0]], [1, [8.598547734413106, 1.0]], [1, [0.49083825274119075, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [18795484.85367008]
bas 1, expnt(s) = [4698871.21328274]
bas 2, expnt(s) = [1174717.80329262]
bas 3, expnt(s) = [293679.37212804]
bas 4, expnt(s) = [73420.12254027]
bas 5, expnt(s) = [18305.96077038]
bas 6, expnt(s) = [2299.15295875]
bas 7, expnt(s) = [467.34528925]
bas 8, expnt(s) = [123.55426116]
bas 9, expnt(s) = [37.90179694]
bas 10, expnt(s) = [4.74272041]
bas 11, expnt(s) = [0.39123362]
bas 12, expnt(s) = [8.59854773]
bas 13, expnt(s) = [0.49083825]
CPU time:       303.78
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  0  1  1  0 42 43  0]
 [ 0  0  1  1  0 44 45  0]
 [ 0  0  1  1  0 46 47  0]
 [ 0  1  1  1  0 48 49  0]
 [ 0  1  1  1  0 50 51  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.87954849e+07 7.21199097e+05 4.69887121e+06 2.54982386e+05
 1.17471780e+06 9.01498871e+04 2.93679372e+05 3.18727918e+04
 7.34201225e+04 1.12687658e+04 1.83059608e+04 3.97611942e+03
 2.29915296e+03 8.38862776e+02 4.67345289e+02 2.53947199e+02
 1.23554261e+02 9.36285549e+01 3.79017969e+01 3.85931186e+01
 4.74272041e+00 8.11961928e+00 3.91233616e-01 1.24980468e+00
 8.59854773e+00 4.29552030e+01 4.90838253e-01 1.19855342e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319941500447307
cond(S) = 56.376700098431755
E1 = -688.8484448674984  E_coul = 184.91603062289576
init E= -503.932414244603
    CPU time for initialize scf      0.03 sec, wall time      0.03 sec
  HOMO = -0.680910758391424  LUMO = 86.523356282589
  mo_energy =
[-1.21650677e+02 -1.32810686e+01 -7.62150231e+00 -7.62150231e+00
 -7.62150231e+00 -1.65076896e+00 -6.80910758e-01 -6.80910758e-01
 -6.80910758e-01  8.65233563e+01  6.92109585e+02  4.04485339e+03
  2.98180675e+04  1.54849944e+05  6.64955994e+05  2.71967735e+06
  1.10460087e+07  4.65101249e+07]
E1 = -706.5862496674572  E_coul = 198.94651093756434
cycle= 1 E= -507.639738729893  delta_E= -3.71  |g|= 0.316  |ddm|= 0.301
    CPU time for cycle= 1      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.419436
diis-c [-0.17592684  1.        ]
  HOMO = -0.236263268614803  LUMO = 87.8581171385011
  mo_energy =
[-1.20262822e+02 -1.22529092e+01 -6.65293799e+00 -6.65293799e+00
 -6.65293799e+00 -1.16348450e+00 -2.36263269e-01 -2.36263269e-01
 -2.36263269e-01  8.78581171e+01  6.93479570e+02  4.04610292e+03
  2.98191568e+04  1.54850962e+05  6.64956983e+05  2.71967832e+06
  1.10460096e+07  4.65101259e+07]
E1 = -706.555578990472  E_coul = 198.9154233485269
cycle= 2 E= -507.640155641945  delta_E= -0.000417  |g|= 0.00468  |ddm|= 0.0139
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.0049758
diis-c [-2.47045992e-05 -5.54250782e-04  1.00055425e+00]
  HOMO = -0.23643332671478  LUMO = 87.8546472459104
  mo_energy =
[-1.20271280e+02 -1.22540644e+01 -6.65472766e+00 -6.65472766e+00
 -6.65472766e+00 -1.16354737e+00 -2.36433327e-01 -2.36433327e-01
 -2.36433327e-01  8.78546472e+01  6.93469118e+02  4.04608724e+03
  2.98191379e+04  1.54850943e+05  6.64956963e+05  2.71967830e+06
  1.10460096e+07  4.65101259e+07]
E1 = -706.5551541437125  E_coul = 198.9149983962972
cycle= 3 E= -507.640155747415  delta_E= -1.05e-07  |g|= 9.25e-05  |ddm|= 0.000194
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.000123813
diis-c [-3.76063789e-10  3.35390442e-05 -2.52016001e-02  1.02516806e+00]
  HOMO = -0.236435443856756  LUMO = 87.8546040512128
  mo_energy =
[-1.20271389e+02 -1.22540795e+01 -6.65475352e+00 -6.65475352e+00
 -6.65475352e+00 -1.16354800e+00 -2.36435444e-01 -2.36435444e-01
 -2.36435444e-01  8.78546041e+01  6.93469005e+02  4.04608710e+03
  2.98191378e+04  1.54850942e+05  6.64956963e+05  2.71967830e+06
  1.10460096e+07  4.65101259e+07]
E1 = -706.555147253069  E_coul = 198.91499150561623
cycle= 4 E= -507.640155747453  delta_E= -3.75e-11  |g|= 3.59e-07  |ddm|= 3.29e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.555147253069  E_coul = 198.91499150561623
  HOMO = -0.236435428439552  LUMO = 87.8546043781742
  mo_energy =
[-1.20271388e+02 -1.22540794e+01 -6.65475337e+00 -6.65475337e+00
 -6.65475337e+00 -1.16354799e+00 -2.36435428e-01 -2.36435428e-01
 -2.36435428e-01  8.78546044e+01  6.93469006e+02  4.04608710e+03
  2.98191378e+04  1.54850942e+05  6.64956963e+05  2.71967830e+06
  1.10460096e+07  4.65101259e+07]
E1 = -706.5551472879914  E_coul = 198.91499154053875
Extra cycle  E= -507.640155747453  delta_E= 5.68e-14  |g|= 6.15e-09  |ddm|= 1.54e-08
    CPU time for scf_cycle      0.11 sec, wall time      0.12 sec
exp = [1.87954849e+07 4.69887121e+06 1.17471780e+06 2.93679372e+05
 7.34201225e+04 1.83059608e+04 2.29915296e+03 4.67345289e+02
 1.23554261e+02 3.79017969e+01 4.74272041e+00 3.91233616e-01
 8.59854773e+00 4.90838253e-01]
E = -507.6401557474527
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="BFGS",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((14, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.6988712134173084e+06,1.1747178033543271e+06,2.9367945083858178e+05,7.3419865393677101e+04,1.8353927627435987e+04,2.2341424145819028e+03,4.5688904996449571e+02,1.2173317272260677e+02,3.7593061247508530e+01,4.7412722556720146e+00,3.9120358491841306e-01,8.5986297237246045e+00,4.9084868336327880e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "12s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:18:44 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  18795484.8537        1
[INPUT] 0    0    [1    /1   ]  4698871.21328        1
[INPUT] 0    0    [1    /1   ]  1174717.80329        1
[INPUT] 0    0    [1    /1   ]  293679.372128        1
[INPUT] 0    0    [1    /1   ]  73420.1225403        1
[INPUT] 0    0    [1    /1   ]  18305.9607704        1
[INPUT] 0    0    [1    /1   ]  2299.15295875        1
[INPUT] 0    0    [1    /1   ]  467.345289255        1
[INPUT] 0    0    [1    /1   ]  123.554261157        1
[INPUT] 0    0    [1    /1   ]  37.9017969406        1
[INPUT] 0    0    [1    /1   ]  4.74272040532        1
[INPUT] 0    0    [1    /1   ]  0.391233616312       1
[INPUT] 1    0    [1    /1   ]  8.59854773441        1
[INPUT] 1    0    [1    /1   ]  0.490838252741       1

nuclear repulsion = 0
number of shells = 14
number of NR pGTOs = 18
number of NR cGTOs = 18
basis = {'Ar': [[0, [18795484.853670076, 1.0]], [0, [4698871.213282741, 1.0]], [0, [1174717.8032926156, 1.0]], [0, [293679.3721280366, 1.0]], [0, [73420.12254026603, 1.0]], [0, [18305.96077038036, 1.0]], [0, [2299.15295874641, 1.0]], [0, [467.3452892546316, 1.0]], [0, [123.55426115747345, 1.0]], [0, [37.90179694056565, 1.0]], [0, [4.742720405324702, 1.0]], [0, [0.39123361631237663, 1.0]], [1, [8.598547734413106, 1.0]], [1, [0.49083825274119075, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [18795484.85367008]
bas 1, expnt(s) = [4698871.21328274]
bas 2, expnt(s) = [1174717.80329262]
bas 3, expnt(s) = [293679.37212804]
bas 4, expnt(s) = [73420.12254027]
bas 5, expnt(s) = [18305.96077038]
bas 6, expnt(s) = [2299.15295875]
bas 7, expnt(s) = [467.34528925]
bas 8, expnt(s) = [123.55426116]
bas 9, expnt(s) = [37.90179694]
bas 10, expnt(s) = [4.74272041]
bas 11, expnt(s) = [0.39123362]
bas 12, expnt(s) = [8.59854773]
bas 13, expnt(s) = [0.49083825]
CPU time:       304.74
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  0  1  1  0 42 43  0]
 [ 0  0  1  1  0 44 45  0]
 [ 0  0  1  1  0 46 47  0]
 [ 0  1  1  1  0 48 49  0]
 [ 0  1  1  1  0 50 51  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.87954849e+07 7.21199097e+05 4.69887121e+06 2.54982386e+05
 1.17471780e+06 9.01498871e+04 2.93679372e+05 3.18727918e+04
 7.34201225e+04 1.12687658e+04 1.83059608e+04 3.97611942e+03
 2.29915296e+03 8.38862776e+02 4.67345289e+02 2.53947199e+02
 1.23554261e+02 9.36285549e+01 3.79017969e+01 3.85931186e+01
 4.74272041e+00 8.11961928e+00 3.91233616e-01 1.24980468e+00
 8.59854773e+00 4.29552030e+01 4.90838253e-01 1.19855342e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319941500447307
cond(S) = 56.376700098431755
E1 = -688.8484448674984  E_coul = 184.91603062289576
init E= -503.932414244603
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.680910758391424  LUMO = 86.523356282589
  mo_energy =
[-1.21650677e+02 -1.32810686e+01 -7.62150231e+00 -7.62150231e+00
 -7.62150231e+00 -1.65076896e+00 -6.80910758e-01 -6.80910758e-01
 -6.80910758e-01  8.65233563e+01  6.92109585e+02  4.04485339e+03
  2.98180675e+04  1.54849944e+05  6.64955994e+05  2.71967735e+06
  1.10460087e+07  4.65101249e+07]
E1 = -706.5862496674572  E_coul = 198.94651093756434
cycle= 1 E= -507.639738729893  delta_E= -3.71  |g|= 0.316  |ddm|= 0.301
    CPU time for cycle= 1      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.419436
diis-c [-0.17592684  1.        ]
  HOMO = -0.236263268614803  LUMO = 87.8581171385011
  mo_energy =
[-1.20262822e+02 -1.22529092e+01 -6.65293799e+00 -6.65293799e+00
 -6.65293799e+00 -1.16348450e+00 -2.36263269e-01 -2.36263269e-01
 -2.36263269e-01  8.78581171e+01  6.93479570e+02  4.04610292e+03
  2.98191568e+04  1.54850962e+05  6.64956983e+05  2.71967832e+06
  1.10460096e+07  4.65101259e+07]
E1 = -706.555578990472  E_coul = 198.9154233485269
cycle= 2 E= -507.640155641945  delta_E= -0.000417  |g|= 0.00468  |ddm|= 0.0139
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.0049758
diis-c [-2.47045992e-05 -5.54250782e-04  1.00055425e+00]
  HOMO = -0.23643332671478  LUMO = 87.8546472459104
  mo_energy =
[-1.20271280e+02 -1.22540644e+01 -6.65472766e+00 -6.65472766e+00
 -6.65472766e+00 -1.16354737e+00 -2.36433327e-01 -2.36433327e-01
 -2.36433327e-01  8.78546472e+01  6.93469118e+02  4.04608724e+03
  2.98191379e+04  1.54850943e+05  6.64956963e+05  2.71967830e+06
  1.10460096e+07  4.65101259e+07]
E1 = -706.5551541437125  E_coul = 198.9149983962972
cycle= 3 E= -507.640155747415  delta_E= -1.05e-07  |g|= 9.25e-05  |ddm|= 0.000194
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.000123813
diis-c [-3.76063789e-10  3.35390442e-05 -2.52016001e-02  1.02516806e+00]
  HOMO = -0.236435443856756  LUMO = 87.8546040512128
  mo_energy =
[-1.20271389e+02 -1.22540795e+01 -6.65475352e+00 -6.65475352e+00
 -6.65475352e+00 -1.16354800e+00 -2.36435444e-01 -2.36435444e-01
 -2.36435444e-01  8.78546041e+01  6.93469005e+02  4.04608710e+03
  2.98191378e+04  1.54850942e+05  6.64956963e+05  2.71967830e+06
  1.10460096e+07  4.65101259e+07]
E1 = -706.555147253069  E_coul = 198.91499150561623
cycle= 4 E= -507.640155747453  delta_E= -3.75e-11  |g|= 3.59e-07  |ddm|= 3.29e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.555147253069  E_coul = 198.91499150561623
  HOMO = -0.236435428439552  LUMO = 87.8546043781742
  mo_energy =
[-1.20271388e+02 -1.22540794e+01 -6.65475337e+00 -6.65475337e+00
 -6.65475337e+00 -1.16354799e+00 -2.36435428e-01 -2.36435428e-01
 -2.36435428e-01  8.78546044e+01  6.93469006e+02  4.04608710e+03
  2.98191378e+04  1.54850942e+05  6.64956963e+05  2.71967830e+06
  1.10460096e+07  4.65101259e+07]
E1 = -706.5551472879914  E_coul = 198.91499154053875
Extra cycle  E= -507.640155747453  delta_E= 5.68e-14  |g|= 6.15e-09  |ddm|= 1.54e-08
    CPU time for scf_cycle      0.11 sec, wall time      0.11 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 56.376700098431755
E1 = -706.5551472879914  E_coul = 198.91499154053875
init E= -507.640155747453
    CPU time for initialize scf      0.14 sec, wall time      0.14 sec
  HOMO = -0.236435428261003  LUMO = 87.8546043821178
  mo_energy =
[-1.20271388e+02 -1.22540794e+01 -6.65475336e+00 -6.65475336e+00
 -6.65475336e+00 -1.16354799e+00 -2.36435428e-01 -2.36435428e-01
 -2.36435428e-01  8.78546044e+01  6.93469006e+02  4.04608710e+03
  2.98191378e+04  1.54850942e+05  6.64956963e+05  2.71967830e+06
  1.10460096e+07  4.65101259e+07]
E1 = -706.5551472885136  E_coul = 198.9149915410612
cycle= 1 E= -507.640155747452  delta_E= 3.41e-13  |g|= 1.87e-10  |ddm|= 2.37e-10
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -706.5551472885136  E_coul = 198.9149915410612
  HOMO = -0.236435428258501  LUMO = 87.8546043821735
  mo_energy =
[-1.20271388e+02 -1.22540794e+01 -6.65475336e+00 -6.65475336e+00
 -6.65475336e+00 -1.16354799e+00 -2.36435428e-01 -2.36435428e-01
 -2.36435428e-01  8.78546044e+01  6.93469006e+02  4.04608710e+03
  2.98191378e+04  1.54850942e+05  6.64956963e+05  2.71967830e+06
  1.10460096e+07  4.65101259e+07]
E1 = -706.5551472885228  E_coul = 198.91499154107012
Extra cycle  E= -507.640155747453  delta_E= -3.41e-13  |g|= 8.93e-11  |ddm|= 4.16e-12
    CPU time for scf_cycle      0.21 sec, wall time      0.21 sec
exp = [1.87954849e+07 4.69887121e+06 1.17471780e+06 2.93679372e+05
 7.34201225e+04 1.83059608e+04 2.29915296e+03 4.67345289e+02
 1.23554261e+02 3.79017969e+01 4.74272041e+00 3.91233616e-01
 8.59854773e+00 4.90838253e-01]
grad_E = [-1.43341689e-13  1.58684189e-11 -8.35827999e-12  9.31436904e-09
 -3.96536633e-08  5.67934896e-06  4.06440648e-06  7.32597913e-07
  2.35691180e-07  2.21696047e-08 -1.62189204e-07  7.40564957e-07
  2.17889429e-07  1.52891141e-06]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="BFGS",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((14, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.6988712134173084e+06,1.1747178033543271e+06,2.9367945083858178e+05,7.3419865393677101e+04,1.8353927627435987e+04,2.2341424145819028e+03,4.5688904996449571e+02,1.2173317272260677e+02,3.7593061247508530e+01,4.7412722556720146e+00,3.9120358491841306e-01,8.5986297237246045e+00,4.9084868336327880e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "12s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:18:48 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  18795484.8537        1
[INPUT] 0    0    [1    /1   ]  4698871.21328        1
[INPUT] 0    0    [1    /1   ]  1174717.80329        1
[INPUT] 0    0    [1    /1   ]  293679.372136        1
[INPUT] 0    0    [1    /1   ]  73420.1225132        1
[INPUT] 0    0    [1    /1   ]  18305.9658337        1
[INPUT] 0    0    [1    /1   ]  2299.14583822        1
[INPUT] 0    0    [1    /1   ]  467.345158345        1
[INPUT] 0    0    [1    /1   ]  123.554497252        1
[INPUT] 0    0    [1    /1   ]  37.9018635931        1
[INPUT] 0    0    [1    /1   ]  4.74272020874        1
[INPUT] 0    0    [1    /1   ]  0.391233661507       1
[INPUT] 1    0    [1    /1   ]  8.5985480382         1
[INPUT] 1    0    [1    /1   ]  0.490838299979       1

nuclear repulsion = 0
number of shells = 14
number of NR pGTOs = 18
number of NR cGTOs = 18
basis = {'Ar': [[0, [18795484.853670076, 1.0]], [0, [4698871.213282755, 1.0]], [0, [1174717.8032926223, 1.0]], [0, [293679.3721363447, 1.0]], [0, [73420.12251321373, 1.0]], [0, [18305.965833729253, 1.0]], [0, [2299.145838221375, 1.0]], [0, [467.34515834520954, 1.0]], [0, [123.55449725221337, 1.0]], [0, [37.90186359313328, 1.0]], [0, [4.742720208741606, 1.0]], [0, [0.39123366150720346, 1.0]], [1, [8.59854803820381, 1.0]], [1, [0.4908382999786739, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [18795484.85367008]
bas 1, expnt(s) = [4698871.21328275]
bas 2, expnt(s) = [1174717.80329262]
bas 3, expnt(s) = [293679.37213634]
bas 4, expnt(s) = [73420.12251321]
bas 5, expnt(s) = [18305.96583373]
bas 6, expnt(s) = [2299.14583822]
bas 7, expnt(s) = [467.34515835]
bas 8, expnt(s) = [123.55449725]
bas 9, expnt(s) = [37.90186359]
bas 10, expnt(s) = [4.74272021]
bas 11, expnt(s) = [0.39123366]
bas 12, expnt(s) = [8.59854804]
bas 13, expnt(s) = [0.4908383]
CPU time:       308.45
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  0  1  1  0 42 43  0]
 [ 0  0  1  1  0 44 45  0]
 [ 0  0  1  1  0 46 47  0]
 [ 0  1  1  1  0 48 49  0]
 [ 0  1  1  1  0 50 51  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.87954849e+07 7.21199097e+05 4.69887121e+06 2.54982386e+05
 1.17471780e+06 9.01498871e+04 2.93679372e+05 3.18727918e+04
 7.34201225e+04 1.12687658e+04 1.83059658e+04 3.97612025e+03
 2.29914584e+03 8.38860827e+02 4.67345158e+02 2.53947145e+02
 1.23554497e+02 9.36286891e+01 3.79018636e+01 3.85931696e+01
 4.74272021e+00 8.11961903e+00 3.91233662e-01 1.24980479e+00
 8.59854804e+00 4.29552049e+01 4.90838300e-01 1.19855356e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319941432291095
cond(S) = 56.37672629791321
E1 = -688.8484454794202  E_coul = 184.91603423212538
init E= -503.932411247295
    CPU time for initialize scf      0.03 sec, wall time      0.03 sec
  HOMO = -0.680910685328301  LUMO = 86.5235939586377
  mo_energy =
[-1.21650677e+02 -1.32810684e+01 -7.62150206e+00 -7.62150206e+00
 -7.62150206e+00 -1.65076892e+00 -6.80910685e-01 -6.80910685e-01
 -6.80910685e-01  8.65235940e+01  6.92110347e+02  4.04484636e+03
  2.98180505e+04  1.54849935e+05  6.64955990e+05  2.71967734e+06
  1.10460087e+07  4.65101249e+07]
E1 = -706.58625444581  E_coul = 198.94651571406723
cycle= 1 E= -507.639738731743  delta_E= -3.71  |g|= 0.316  |ddm|= 0.301
    CPU time for cycle= 1      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.419436
diis-c [-0.17592695  1.        ]
  HOMO = -0.236263136412891  LUMO = 87.8583551769213
  mo_energy =
[-1.20262821e+02 -1.22529089e+01 -6.65293767e+00 -6.65293767e+00
 -6.65293767e+00 -1.16348440e+00 -2.36263136e-01 -2.36263136e-01
 -2.36263136e-01  8.78583552e+01  6.93480332e+02  4.04609588e+03
  2.98191398e+04  1.54850954e+05  6.64956979e+05  2.71967832e+06
  1.10460096e+07  4.65101259e+07]
E1 = -706.5555838871142  E_coul = 198.91542824496898
cycle= 2 E= -507.640155642145  delta_E= -0.000417  |g|= 0.00468  |ddm|= 0.0139
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00497579
diis-c [-2.47045105e-05 -5.54263470e-04  1.00055426e+00]
  HOMO = -0.236433193758244  LUMO = 87.8548852925041
  mo_energy =
[-1.20271279e+02 -1.22540641e+01 -6.65472733e+00 -6.65472733e+00
 -6.65472733e+00 -1.16354727e+00 -2.36433194e-01 -2.36433194e-01
 -2.36433194e-01  8.78548853e+01  6.93469880e+02  4.04608020e+03
  2.98191209e+04  1.54850934e+05  6.64956959e+05  2.71967830e+06
  1.10460096e+07  4.65101259e+07]
E1 = -706.555159042691  E_coul = 198.91500329507602
cycle= 3 E= -507.640155747615  delta_E= -1.05e-07  |g|= 9.25e-05  |ddm|= 0.000194
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.000123813
diis-c [-3.76059486e-10  3.35392101e-05 -2.52015527e-02  1.02516801e+00]
  HOMO = -0.23643531088531  LUMO = 87.8548420980477
  mo_energy =
[-1.20271388e+02 -1.22540792e+01 -6.65475319e+00 -6.65475319e+00
 -6.65475319e+00 -1.16354789e+00 -2.36435311e-01 -2.36435311e-01
 -2.36435311e-01  8.78548421e+01  6.93469767e+02  4.04608006e+03
  2.98191208e+04  1.54850934e+05  6.64956959e+05  2.71967830e+06
  1.10460096e+07  4.65101259e+07]
E1 = -706.5551521521026  E_coul = 198.91499640445056
cycle= 4 E= -507.640155747652  delta_E= -3.7e-11  |g|= 3.59e-07  |ddm|= 3.29e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.5551521521026  E_coul = 198.91499640445056
  HOMO = -0.236435295468265  LUMO = 87.8548424250101
  mo_energy =
[-1.20271388e+02 -1.22540791e+01 -6.65475304e+00 -6.65475304e+00
 -6.65475304e+00 -1.16354789e+00 -2.36435295e-01 -2.36435295e-01
 -2.36435295e-01  8.78548424e+01  6.93469768e+02  4.04608006e+03
  2.98191208e+04  1.54850934e+05  6.64956959e+05  2.71967830e+06
  1.10460096e+07  4.65101259e+07]
E1 = -706.5551521870245  E_coul = 198.91499643937226
Extra cycle  E= -507.640155747652  delta_E= -2.84e-13  |g|= 6.15e-09  |ddm|= 1.54e-08
    CPU time for scf_cycle      0.10 sec, wall time      0.11 sec
exp = [1.87954849e+07 4.69887121e+06 1.17471780e+06 2.93679372e+05
 7.34201225e+04 1.83059658e+04 2.29914584e+03 4.67345158e+02
 1.23554497e+02 3.79018636e+01 4.74272021e+00 3.91233662e-01
 8.59854804e+00 4.90838300e-01]
E = -507.6401557476523
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="BFGS",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((14, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.6988712134173084e+06,1.1747178033543271e+06,2.9367945083858178e+05,7.3419865393677101e+04,1.8353927627435987e+04,2.2341424145819028e+03,4.5688904996449571e+02,1.2173317272260677e+02,3.7593061247508530e+01,4.7412722556720146e+00,3.9120358491841306e-01,8.5986297237246045e+00,4.9084868336327880e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "12s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:18:49 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  18795484.8537        1
[INPUT] 0    0    [1    /1   ]  4698871.21328        1
[INPUT] 0    0    [1    /1   ]  1174717.80329        1
[INPUT] 0    0    [1    /1   ]  293679.372136        1
[INPUT] 0    0    [1    /1   ]  73420.1225132        1
[INPUT] 0    0    [1    /1   ]  18305.9658337        1
[INPUT] 0    0    [1    /1   ]  2299.14583822        1
[INPUT] 0    0    [1    /1   ]  467.345158345        1
[INPUT] 0    0    [1    /1   ]  123.554497252        1
[INPUT] 0    0    [1    /1   ]  37.9018635931        1
[INPUT] 0    0    [1    /1   ]  4.74272020874        1
[INPUT] 0    0    [1    /1   ]  0.391233661507       1
[INPUT] 1    0    [1    /1   ]  8.5985480382         1
[INPUT] 1    0    [1    /1   ]  0.490838299979       1

nuclear repulsion = 0
number of shells = 14
number of NR pGTOs = 18
number of NR cGTOs = 18
basis = {'Ar': [[0, [18795484.853670076, 1.0]], [0, [4698871.213282755, 1.0]], [0, [1174717.8032926223, 1.0]], [0, [293679.3721363447, 1.0]], [0, [73420.12251321373, 1.0]], [0, [18305.965833729253, 1.0]], [0, [2299.145838221375, 1.0]], [0, [467.34515834520954, 1.0]], [0, [123.55449725221337, 1.0]], [0, [37.90186359313328, 1.0]], [0, [4.742720208741606, 1.0]], [0, [0.39123366150720346, 1.0]], [1, [8.59854803820381, 1.0]], [1, [0.4908382999786739, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [18795484.85367008]
bas 1, expnt(s) = [4698871.21328275]
bas 2, expnt(s) = [1174717.80329262]
bas 3, expnt(s) = [293679.37213634]
bas 4, expnt(s) = [73420.12251321]
bas 5, expnt(s) = [18305.96583373]
bas 6, expnt(s) = [2299.14583822]
bas 7, expnt(s) = [467.34515835]
bas 8, expnt(s) = [123.55449725]
bas 9, expnt(s) = [37.90186359]
bas 10, expnt(s) = [4.74272021]
bas 11, expnt(s) = [0.39123366]
bas 12, expnt(s) = [8.59854804]
bas 13, expnt(s) = [0.4908383]
CPU time:       309.42
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  0  1  1  0 42 43  0]
 [ 0  0  1  1  0 44 45  0]
 [ 0  0  1  1  0 46 47  0]
 [ 0  1  1  1  0 48 49  0]
 [ 0  1  1  1  0 50 51  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.87954849e+07 7.21199097e+05 4.69887121e+06 2.54982386e+05
 1.17471780e+06 9.01498871e+04 2.93679372e+05 3.18727918e+04
 7.34201225e+04 1.12687658e+04 1.83059658e+04 3.97612025e+03
 2.29914584e+03 8.38860827e+02 4.67345158e+02 2.53947145e+02
 1.23554497e+02 9.36286891e+01 3.79018636e+01 3.85931696e+01
 4.74272021e+00 8.11961903e+00 3.91233662e-01 1.24980479e+00
 8.59854804e+00 4.29552049e+01 4.90838300e-01 1.19855356e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319941432291095
cond(S) = 56.37672629791321
E1 = -688.8484454794202  E_coul = 184.91603423212538
init E= -503.932411247295
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.680910685328301  LUMO = 86.5235939586377
  mo_energy =
[-1.21650677e+02 -1.32810684e+01 -7.62150206e+00 -7.62150206e+00
 -7.62150206e+00 -1.65076892e+00 -6.80910685e-01 -6.80910685e-01
 -6.80910685e-01  8.65235940e+01  6.92110347e+02  4.04484636e+03
  2.98180505e+04  1.54849935e+05  6.64955990e+05  2.71967734e+06
  1.10460087e+07  4.65101249e+07]
E1 = -706.58625444581  E_coul = 198.94651571406723
cycle= 1 E= -507.639738731743  delta_E= -3.71  |g|= 0.316  |ddm|= 0.301
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.419436
diis-c [-0.17592695  1.        ]
  HOMO = -0.236263136412891  LUMO = 87.8583551769213
  mo_energy =
[-1.20262821e+02 -1.22529089e+01 -6.65293767e+00 -6.65293767e+00
 -6.65293767e+00 -1.16348440e+00 -2.36263136e-01 -2.36263136e-01
 -2.36263136e-01  8.78583552e+01  6.93480332e+02  4.04609588e+03
  2.98191398e+04  1.54850954e+05  6.64956979e+05  2.71967832e+06
  1.10460096e+07  4.65101259e+07]
E1 = -706.5555838871142  E_coul = 198.91542824496898
cycle= 2 E= -507.640155642145  delta_E= -0.000417  |g|= 0.00468  |ddm|= 0.0139
    CPU time for cycle= 2      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.00497579
diis-c [-2.47045105e-05 -5.54263470e-04  1.00055426e+00]
  HOMO = -0.236433193758244  LUMO = 87.8548852925041
  mo_energy =
[-1.20271279e+02 -1.22540641e+01 -6.65472733e+00 -6.65472733e+00
 -6.65472733e+00 -1.16354727e+00 -2.36433194e-01 -2.36433194e-01
 -2.36433194e-01  8.78548853e+01  6.93469880e+02  4.04608020e+03
  2.98191209e+04  1.54850934e+05  6.64956959e+05  2.71967830e+06
  1.10460096e+07  4.65101259e+07]
E1 = -706.555159042691  E_coul = 198.91500329507602
cycle= 3 E= -507.640155747615  delta_E= -1.05e-07  |g|= 9.25e-05  |ddm|= 0.000194
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.000123813
diis-c [-3.76059486e-10  3.35392101e-05 -2.52015527e-02  1.02516801e+00]
  HOMO = -0.23643531088531  LUMO = 87.8548420980477
  mo_energy =
[-1.20271388e+02 -1.22540792e+01 -6.65475319e+00 -6.65475319e+00
 -6.65475319e+00 -1.16354789e+00 -2.36435311e-01 -2.36435311e-01
 -2.36435311e-01  8.78548421e+01  6.93469767e+02  4.04608006e+03
  2.98191208e+04  1.54850934e+05  6.64956959e+05  2.71967830e+06
  1.10460096e+07  4.65101259e+07]
E1 = -706.5551521521026  E_coul = 198.91499640445056
cycle= 4 E= -507.640155747652  delta_E= -3.7e-11  |g|= 3.59e-07  |ddm|= 3.29e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.5551521521026  E_coul = 198.91499640445056
  HOMO = -0.236435295468265  LUMO = 87.8548424250101
  mo_energy =
[-1.20271388e+02 -1.22540791e+01 -6.65475304e+00 -6.65475304e+00
 -6.65475304e+00 -1.16354789e+00 -2.36435295e-01 -2.36435295e-01
 -2.36435295e-01  8.78548424e+01  6.93469768e+02  4.04608006e+03
  2.98191208e+04  1.54850934e+05  6.64956959e+05  2.71967830e+06
  1.10460096e+07  4.65101259e+07]
E1 = -706.5551521870245  E_coul = 198.91499643937226
Extra cycle  E= -507.640155747652  delta_E= -2.84e-13  |g|= 6.15e-09  |ddm|= 1.54e-08
    CPU time for scf_cycle      0.10 sec, wall time      0.10 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 56.37672629791321
E1 = -706.5551521870245  E_coul = 198.91499643937226
init E= -507.640155747652
    CPU time for initialize scf      0.12 sec, wall time      0.12 sec
  HOMO = -0.236435295289716  LUMO = 87.8548424289535
  mo_energy =
[-1.20271388e+02 -1.22540791e+01 -6.65475304e+00 -6.65475304e+00
 -6.65475304e+00 -1.16354789e+00 -2.36435295e-01 -2.36435295e-01
 -2.36435295e-01  8.78548424e+01  6.93469768e+02  4.04608006e+03
  2.98191208e+04  1.54850934e+05  6.64956959e+05  2.71967830e+06
  1.10460096e+07  4.65101259e+07]
E1 = -706.555152187547  E_coul = 198.91499643989496
cycle= 1 E= -507.640155747652  delta_E= 1.71e-13  |g|= 1.8e-10  |ddm|= 2.37e-10
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -706.555152187547  E_coul = 198.91499643989496
  HOMO = -0.236435295287216  LUMO = 87.8548424290083
  mo_energy =
[-1.20271388e+02 -1.22540791e+01 -6.65475304e+00 -6.65475304e+00
 -6.65475304e+00 -1.16354789e+00 -2.36435295e-01 -2.36435295e-01
 -2.36435295e-01  8.78548424e+01  6.93469768e+02  4.04608006e+03
  2.98191208e+04  1.54850934e+05  6.64956959e+05  2.71967830e+06
  1.10460096e+07  4.65101259e+07]
E1 = -706.555152187556  E_coul = 198.91499643990397
Extra cycle  E= -507.640155747652  delta_E= 5.68e-14  |g|= 1.37e-10  |ddm|= 4.2e-12
    CPU time for scf_cycle      0.19 sec, wall time      0.19 sec
exp = [1.87954849e+07 4.69887121e+06 1.17471780e+06 2.93679372e+05
 7.34201225e+04 1.83059658e+04 2.29914584e+03 4.67345158e+02
 1.23554497e+02 3.79018636e+01 4.74272021e+00 3.91233662e-01
 8.59854804e+00 4.90838300e-01]
grad_E = [-1.43337880e-13  1.58686902e-11 -8.35625460e-12  9.31452406e-09
 -3.96530654e-08  5.67944679e-06  4.06163209e-06  7.25333489e-07
  3.26852785e-07  3.28352632e-08 -3.32192167e-07  1.50415757e-06
  4.39426877e-07  3.11406882e-06]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="BFGS",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((14, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.6988712134173084e+06,1.1747178033543271e+06,2.9367945083858178e+05,7.3419865393677101e+04,1.8353927627435987e+04,2.2341424145819028e+03,4.5688904996449571e+02,1.2173317272260677e+02,3.7593061247508530e+01,4.7412722556720146e+00,3.9120358491841306e-01,8.5986297237246045e+00,4.9084868336327880e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "12s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:18:53 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  18795484.8537        1
[INPUT] 0    0    [1    /1   ]  4698871.21328        1
[INPUT] 0    0    [1    /1   ]  1174717.80329        1
[INPUT] 0    0    [1    /1   ]  293679.372146        1
[INPUT] 0    0    [1    /1   ]  73420.1224816        1
[INPUT] 0    0    [1    /1   ]  18305.9717551        1
[INPUT] 0    0    [1    /1   ]  2299.13746278        1
[INPUT] 0    0    [1    /1   ]  467.345006375        1
[INPUT] 0    0    [1    /1   ]  123.554775061        1
[INPUT] 0    0    [1    /1   ]  37.9019420302        1
[INPUT] 0    0    [1    /1   ]  4.74271997928        1
[INPUT] 0    0    [1    /1   ]  0.391233714256       1
[INPUT] 1    0    [1    /1   ]  8.59854839122        1
[INPUT] 1    0    [1    /1   ]  0.49083835496        1

nuclear repulsion = 0
number of shells = 14
number of NR pGTOs = 18
number of NR cGTOs = 18
basis = {'Ar': [[0, [18795484.853670076, 1.0]], [0, [4698871.213282771, 1.0]], [0, [1174717.8032926302, 1.0]], [0, [293679.37214606075, 1.0]], [0, [73420.12248161432, 1.0]], [0, [18305.971755053317, 1.0]], [0, [2299.1374627790046, 1.0]], [0, [467.3450063749816, 1.0]], [0, [123.55477506149184, 1.0]], [0, [37.90194203015982, 1.0]], [0, [4.742719979281619, 1.0]], [0, [0.39123371425645265, 1.0]], [1, [8.598548391216013, 1.0]], [1, [0.4908383549601236, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [18795484.85367008]
bas 1, expnt(s) = [4698871.21328277]
bas 2, expnt(s) = [1174717.80329263]
bas 3, expnt(s) = [293679.37214606]
bas 4, expnt(s) = [73420.12248161]
bas 5, expnt(s) = [18305.97175505]
bas 6, expnt(s) = [2299.13746278]
bas 7, expnt(s) = [467.34500637]
bas 8, expnt(s) = [123.55477506]
bas 9, expnt(s) = [37.90194203]
bas 10, expnt(s) = [4.74271998]
bas 11, expnt(s) = [0.39123371]
bas 12, expnt(s) = [8.59854839]
bas 13, expnt(s) = [0.49083835]
CPU time:       313.14
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  0  1  1  0 42 43  0]
 [ 0  0  1  1  0 44 45  0]
 [ 0  0  1  1  0 46 47  0]
 [ 0  1  1  1  0 48 49  0]
 [ 0  1  1  1  0 50 51  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.87954849e+07 7.21199097e+05 4.69887121e+06 2.54982386e+05
 1.17471780e+06 9.01498871e+04 2.93679372e+05 3.18727918e+04
 7.34201225e+04 1.12687658e+04 1.83059718e+04 3.97612121e+03
 2.29913746e+03 8.38858535e+02 4.67345006e+02 2.53947083e+02
 1.23554775e+02 9.36288469e+01 3.79019420e+01 3.85932295e+01
 4.74271998e+00 8.11961874e+00 3.91233714e-01 1.24980492e+00
 8.59854839e+00 4.29552071e+01 4.90838355e-01 1.19855373e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.31994135290224
cond(S) = 56.376757078827495
E1 = -688.8484461453569  E_coul = 184.91603843485328
init E= -503.932407710504
    CPU time for initialize scf      0.03 sec, wall time      0.03 sec
  HOMO = -0.680910600230591  LUMO = 86.5238736406902
  mo_energy =
[-1.21650676e+02 -1.32810682e+01 -7.62150177e+00 -7.62150177e+00
 -7.62150177e+00 -1.65076886e+00 -6.80910600e-01 -6.80910600e-01
 -6.80910600e-01  8.65238736e+01  6.92111245e+02  4.04483809e+03
  2.98180305e+04  1.54849925e+05  6.64955986e+05  2.71967734e+06
  1.10460087e+07  4.65101249e+07]
E1 = -706.5862600123545  E_coul = 198.94652127829482
cycle= 1 E= -507.63973873406  delta_E= -3.71  |g|= 0.316  |ddm|= 0.301
    CPU time for cycle= 1      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.419437
diis-c [-0.17592707  1.        ]
  HOMO = -0.236262982430851  LUMO = 87.858635284739
  mo_energy =
[-1.20262820e+02 -1.22529086e+01 -6.65293730e+00 -6.65293730e+00
 -6.65293730e+00 -1.16348428e+00 -2.36262982e-01 -2.36262982e-01
 -2.36262982e-01  8.78586353e+01  6.93481230e+02  4.04608761e+03
  2.98191198e+04  1.54850944e+05  6.64956975e+05  2.71967832e+06
  1.10460096e+07  4.65101259e+07]
E1 = -706.5555895929265  E_coul = 198.91543395040716
cycle= 2 E= -507.640155642519  delta_E= -0.000417  |g|= 0.00468  |ddm|= 0.0139
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00497578
diis-c [-2.47044057e-05 -5.54279253e-04  1.00055428e+00]
  HOMO = -0.236433038887591  LUMO = 87.8551654099514
  mo_energy =
[-1.20271279e+02 -1.22540638e+01 -6.65472695e+00 -6.65472695e+00
 -6.65472695e+00 -1.16354715e+00 -2.36433039e-01 -2.36433039e-01
 -2.36433039e-01  8.78551654e+01  6.93470779e+02  4.04607193e+03
  2.98191009e+04  1.54850924e+05  6.64956955e+05  2.71967830e+06
  1.10460096e+07  4.65101259e+07]
E1 = -706.5551647512515  E_coul = 198.91500900326395
cycle= 3 E= -507.640155747988  delta_E= -1.05e-07  |g|= 9.25e-05  |ddm|= 0.000194
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.000123812
diis-c [-3.76057031e-10  3.35392099e-05 -2.52015000e-02  1.02516796e+00]
  HOMO = -0.236435155997016  LUMO = 87.855122215784
  mo_energy =
[-1.20271388e+02 -1.22540789e+01 -6.65475281e+00 -6.65475281e+00
 -6.65475281e+00 -1.16354777e+00 -2.36435156e-01 -2.36435156e-01
 -2.36435156e-01  8.78551222e+01  6.93470666e+02  4.04607179e+03
  2.98191007e+04  1.54850924e+05  6.64956955e+05  2.71967830e+06
  1.10460096e+07  4.65101259e+07]
E1 = -706.5551578607291  E_coul = 198.91500211270397
cycle= 4 E= -507.640155748025  delta_E= -3.76e-11  |g|= 3.59e-07  |ddm|= 3.29e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.5551578607291  E_coul = 198.91500211270397
  HOMO = -0.236435140580109  LUMO = 87.8551225427441
  mo_energy =
[-1.20271387e+02 -1.22540788e+01 -6.65475266e+00 -6.65475266e+00
 -6.65475266e+00 -1.16354777e+00 -2.36435141e-01 -2.36435141e-01
 -2.36435141e-01  8.78551225e+01  6.93470667e+02  4.04607180e+03
  2.98191007e+04  1.54850924e+05  6.64956955e+05  2.71967830e+06
  1.10460096e+07  4.65101259e+07]
E1 = -706.5551578956508  E_coul = 198.91500214762561
Extra cycle  E= -507.640155748025  delta_E= -1.14e-13  |g|= 6.15e-09  |ddm|= 1.54e-08
    CPU time for scf_cycle      0.10 sec, wall time      0.11 sec
exp = [1.87954849e+07 4.69887121e+06 1.17471780e+06 2.93679372e+05
 7.34201225e+04 1.83059718e+04 2.29913746e+03 4.67345006e+02
 1.23554775e+02 3.79019420e+01 4.74271998e+00 3.91233714e-01
 8.59854839e+00 4.90838355e-01]
E = -507.6401557480252
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="BFGS",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((14, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.6988712134173084e+06,1.1747178033543271e+06,2.9367945083858178e+05,7.3419865393677101e+04,1.8353927627435987e+04,2.2341424145819028e+03,4.5688904996449571e+02,1.2173317272260677e+02,3.7593061247508530e+01,4.7412722556720146e+00,3.9120358491841306e-01,8.5986297237246045e+00,4.9084868336327880e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "12s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:18:54 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  18795484.8537        1
[INPUT] 0    0    [1    /1   ]  4698871.21328        1
[INPUT] 0    0    [1    /1   ]  1174717.80329        1
[INPUT] 0    0    [1    /1   ]  293679.372146        1
[INPUT] 0    0    [1    /1   ]  73420.1224816        1
[INPUT] 0    0    [1    /1   ]  18305.9717551        1
[INPUT] 0    0    [1    /1   ]  2299.13746278        1
[INPUT] 0    0    [1    /1   ]  467.345006375        1
[INPUT] 0    0    [1    /1   ]  123.554775061        1
[INPUT] 0    0    [1    /1   ]  37.9019420302        1
[INPUT] 0    0    [1    /1   ]  4.74271997928        1
[INPUT] 0    0    [1    /1   ]  0.391233714256       1
[INPUT] 1    0    [1    /1   ]  8.59854839122        1
[INPUT] 1    0    [1    /1   ]  0.49083835496        1

nuclear repulsion = 0
number of shells = 14
number of NR pGTOs = 18
number of NR cGTOs = 18
basis = {'Ar': [[0, [18795484.853670076, 1.0]], [0, [4698871.213282771, 1.0]], [0, [1174717.8032926302, 1.0]], [0, [293679.37214606075, 1.0]], [0, [73420.12248161432, 1.0]], [0, [18305.971755053317, 1.0]], [0, [2299.1374627790046, 1.0]], [0, [467.3450063749816, 1.0]], [0, [123.55477506149184, 1.0]], [0, [37.90194203015982, 1.0]], [0, [4.742719979281619, 1.0]], [0, [0.39123371425645265, 1.0]], [1, [8.598548391216013, 1.0]], [1, [0.4908383549601236, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [18795484.85367008]
bas 1, expnt(s) = [4698871.21328277]
bas 2, expnt(s) = [1174717.80329263]
bas 3, expnt(s) = [293679.37214606]
bas 4, expnt(s) = [73420.12248161]
bas 5, expnt(s) = [18305.97175505]
bas 6, expnt(s) = [2299.13746278]
bas 7, expnt(s) = [467.34500637]
bas 8, expnt(s) = [123.55477506]
bas 9, expnt(s) = [37.90194203]
bas 10, expnt(s) = [4.74271998]
bas 11, expnt(s) = [0.39123371]
bas 12, expnt(s) = [8.59854839]
bas 13, expnt(s) = [0.49083835]
CPU time:       314.11
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  0  1  1  0 42 43  0]
 [ 0  0  1  1  0 44 45  0]
 [ 0  0  1  1  0 46 47  0]
 [ 0  1  1  1  0 48 49  0]
 [ 0  1  1  1  0 50 51  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.87954849e+07 7.21199097e+05 4.69887121e+06 2.54982386e+05
 1.17471780e+06 9.01498871e+04 2.93679372e+05 3.18727918e+04
 7.34201225e+04 1.12687658e+04 1.83059718e+04 3.97612121e+03
 2.29913746e+03 8.38858535e+02 4.67345006e+02 2.53947083e+02
 1.23554775e+02 9.36288469e+01 3.79019420e+01 3.85932295e+01
 4.74271998e+00 8.11961874e+00 3.91233714e-01 1.24980492e+00
 8.59854839e+00 4.29552071e+01 4.90838355e-01 1.19855373e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.31994135290224
cond(S) = 56.376757078827495
E1 = -688.8484461453569  E_coul = 184.91603843485328
init E= -503.932407710504
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.680910600230591  LUMO = 86.5238736406902
  mo_energy =
[-1.21650676e+02 -1.32810682e+01 -7.62150177e+00 -7.62150177e+00
 -7.62150177e+00 -1.65076886e+00 -6.80910600e-01 -6.80910600e-01
 -6.80910600e-01  8.65238736e+01  6.92111245e+02  4.04483809e+03
  2.98180305e+04  1.54849925e+05  6.64955986e+05  2.71967734e+06
  1.10460087e+07  4.65101249e+07]
E1 = -706.5862600123545  E_coul = 198.94652127829482
cycle= 1 E= -507.63973873406  delta_E= -3.71  |g|= 0.316  |ddm|= 0.301
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.419437
diis-c [-0.17592707  1.        ]
  HOMO = -0.236262982430851  LUMO = 87.858635284739
  mo_energy =
[-1.20262820e+02 -1.22529086e+01 -6.65293730e+00 -6.65293730e+00
 -6.65293730e+00 -1.16348428e+00 -2.36262982e-01 -2.36262982e-01
 -2.36262982e-01  8.78586353e+01  6.93481230e+02  4.04608761e+03
  2.98191198e+04  1.54850944e+05  6.64956975e+05  2.71967832e+06
  1.10460096e+07  4.65101259e+07]
E1 = -706.5555895929265  E_coul = 198.91543395040716
cycle= 2 E= -507.640155642519  delta_E= -0.000417  |g|= 0.00468  |ddm|= 0.0139
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00497578
diis-c [-2.47044057e-05 -5.54279253e-04  1.00055428e+00]
  HOMO = -0.236433038887591  LUMO = 87.8551654099514
  mo_energy =
[-1.20271279e+02 -1.22540638e+01 -6.65472695e+00 -6.65472695e+00
 -6.65472695e+00 -1.16354715e+00 -2.36433039e-01 -2.36433039e-01
 -2.36433039e-01  8.78551654e+01  6.93470779e+02  4.04607193e+03
  2.98191009e+04  1.54850924e+05  6.64956955e+05  2.71967830e+06
  1.10460096e+07  4.65101259e+07]
E1 = -706.5551647512515  E_coul = 198.91500900326395
cycle= 3 E= -507.640155747988  delta_E= -1.05e-07  |g|= 9.25e-05  |ddm|= 0.000194
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.000123812
diis-c [-3.76057031e-10  3.35392099e-05 -2.52015000e-02  1.02516796e+00]
  HOMO = -0.236435155997016  LUMO = 87.855122215784
  mo_energy =
[-1.20271388e+02 -1.22540789e+01 -6.65475281e+00 -6.65475281e+00
 -6.65475281e+00 -1.16354777e+00 -2.36435156e-01 -2.36435156e-01
 -2.36435156e-01  8.78551222e+01  6.93470666e+02  4.04607179e+03
  2.98191007e+04  1.54850924e+05  6.64956955e+05  2.71967830e+06
  1.10460096e+07  4.65101259e+07]
E1 = -706.5551578607291  E_coul = 198.91500211270397
cycle= 4 E= -507.640155748025  delta_E= -3.76e-11  |g|= 3.59e-07  |ddm|= 3.29e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.5551578607291  E_coul = 198.91500211270397
  HOMO = -0.236435140580109  LUMO = 87.8551225427441
  mo_energy =
[-1.20271387e+02 -1.22540788e+01 -6.65475266e+00 -6.65475266e+00
 -6.65475266e+00 -1.16354777e+00 -2.36435141e-01 -2.36435141e-01
 -2.36435141e-01  8.78551225e+01  6.93470667e+02  4.04607180e+03
  2.98191007e+04  1.54850924e+05  6.64956955e+05  2.71967830e+06
  1.10460096e+07  4.65101259e+07]
E1 = -706.5551578956508  E_coul = 198.91500214762561
Extra cycle  E= -507.640155748025  delta_E= -1.14e-13  |g|= 6.15e-09  |ddm|= 1.54e-08
    CPU time for scf_cycle      0.10 sec, wall time      0.10 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 56.376757078827495
E1 = -706.5551578956508  E_coul = 198.91500214762561
init E= -507.640155748025
    CPU time for initialize scf      0.12 sec, wall time      0.12 sec
  HOMO = -0.236435140401559  LUMO = 87.855122546683
  mo_energy =
[-1.20271387e+02 -1.22540788e+01 -6.65475266e+00 -6.65475266e+00
 -6.65475266e+00 -1.16354777e+00 -2.36435140e-01 -2.36435140e-01
 -2.36435140e-01  8.78551225e+01  6.93470667e+02  4.04607180e+03
  2.98191007e+04  1.54850924e+05  6.64956955e+05  2.71967830e+06
  1.10460096e+07  4.65101259e+07]
E1 = -706.5551578961739  E_coul = 198.91500214814863
cycle= 1 E= -507.640155748025  delta_E= -5.68e-14  |g|= 2.22e-10  |ddm|= 2.37e-10
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -706.5551578961739  E_coul = 198.91500214814863
  HOMO = -0.23643514039906  LUMO = 87.8551225467366
  mo_energy =
[-1.20271387e+02 -1.22540788e+01 -6.65475266e+00 -6.65475266e+00
 -6.65475266e+00 -1.16354777e+00 -2.36435140e-01 -2.36435140e-01
 -2.36435140e-01  8.78551225e+01  6.93470667e+02  4.04607180e+03
  2.98191007e+04  1.54850924e+05  6.64956955e+05  2.71967830e+06
  1.10460096e+07  4.65101259e+07]
E1 = -706.555157896183  E_coul = 198.91500214815755
Extra cycle  E= -507.640155748025  delta_E= -1.71e-13  |g|= 1.18e-10  |ddm|= 4.18e-12
    CPU time for scf_cycle      0.19 sec, wall time      0.19 sec
exp = [1.87954849e+07 4.69887121e+06 1.17471780e+06 2.93679372e+05
 7.34201225e+04 1.83059718e+04 2.29913746e+03 4.67345006e+02
 1.23554775e+02 3.79019420e+01 4.74271998e+00 3.91233714e-01
 8.59854839e+00 4.90838355e-01]
grad_E = [-1.43333399e-13  1.58690094e-11 -8.35387144e-12  9.31470647e-09
 -3.96523622e-08  5.67956194e-06  4.05835982e-06  7.16905732e-07
  4.33590423e-07  4.62613516e-08 -5.30810489e-07  2.39323586e-06
  6.97099388e-07  4.96027030e-06]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="BFGS",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((14, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.6988712134173084e+06,1.1747178033543271e+06,2.9367945083858178e+05,7.3419865393677101e+04,1.8353927627435987e+04,2.2341424145819028e+03,4.5688904996449571e+02,1.2173317272260677e+02,3.7593061247508530e+01,4.7412722556720146e+00,3.9120358491841306e-01,8.5986297237246045e+00,4.9084868336327880e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "12s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:18:57 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  18795484.8537        1
[INPUT] 0    0    [1    /1   ]  4698871.21328        1
[INPUT] 0    0    [1    /1   ]  1174717.80329        1
[INPUT] 0    0    [1    /1   ]  293679.372159        1
[INPUT] 0    0    [1    /1   ]  73420.1224402        1
[INPUT] 0    0    [1    /1   ]  18305.9795195        1
[INPUT] 0    0    [1    /1   ]  2299.12640545        1
[INPUT] 0    0    [1    /1   ]  467.344805991        1
[INPUT] 0    0    [1    /1   ]  123.555141729        1
[INPUT] 0    0    [1    /1   ]  37.9020455671        1
[INPUT] 0    0    [1    /1   ]  4.74271967703        1
[INPUT] 0    0    [1    /1   ]  0.391233783726       1
[INPUT] 1    0    [1    /1   ]  8.59854885556        1
[INPUT] 1    0    [1    /1   ]  0.490838427314       1

nuclear repulsion = 0
number of shells = 14
number of NR pGTOs = 18
number of NR cGTOs = 18
basis = {'Ar': [[0, [18795484.853670076, 1.0]], [0, [4698871.213282793, 1.0]], [0, [1174717.8032926407, 1.0]], [0, [293679.37215880095, 1.0]], [0, [73420.12244023668, 1.0]], [0, [18305.979519453933, 1.0]], [0, [2299.126405445475, 1.0]], [0, [467.34480599078404, 1.0]], [0, [123.55514172931034, 1.0]], [0, [37.90204556706817, 1.0]], [0, [4.742719677025017, 1.0]], [0, [0.3912337837258122, 1.0]], [1, [8.59854885556446, 1.0]], [1, [0.4908384273135177, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [18795484.85367008]
bas 1, expnt(s) = [4698871.21328279]
bas 2, expnt(s) = [1174717.80329264]
bas 3, expnt(s) = [293679.3721588]
bas 4, expnt(s) = [73420.12244024]
bas 5, expnt(s) = [18305.97951945]
bas 6, expnt(s) = [2299.12640545]
bas 7, expnt(s) = [467.34480599]
bas 8, expnt(s) = [123.55514173]
bas 9, expnt(s) = [37.90204557]
bas 10, expnt(s) = [4.74271968]
bas 11, expnt(s) = [0.39123378]
bas 12, expnt(s) = [8.59854886]
bas 13, expnt(s) = [0.49083843]
CPU time:       317.93
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  0  1  1  0 42 43  0]
 [ 0  0  1  1  0 44 45  0]
 [ 0  0  1  1  0 46 47  0]
 [ 0  1  1  1  0 48 49  0]
 [ 0  1  1  1  0 50 51  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.87954849e+07 7.21199097e+05 4.69887121e+06 2.54982386e+05
 1.17471780e+06 9.01498871e+04 2.93679372e+05 3.18727918e+04
 7.34201224e+04 1.12687658e+04 1.83059795e+04 3.97612248e+03
 2.29912641e+03 8.38855509e+02 4.67344806e+02 2.53947002e+02
 1.23555142e+02 9.36290553e+01 3.79020456e+01 3.85933085e+01
 4.74271968e+00 8.11961835e+00 3.91233784e-01 1.24980508e+00
 8.59854886e+00 4.29552100e+01 4.90838427e-01 1.19855395e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.31994124840863
cond(S) = 56.37679765631412
E1 = -688.8484470058086  E_coul = 184.9160439662009
init E= -503.932403039608
    CPU time for initialize scf      0.03 sec, wall time      0.03 sec
  HOMO = -0.680910488224345  LUMO = 86.5242428012947
  mo_energy =
[-1.21650675e+02 -1.32810679e+01 -7.62150139e+00 -7.62150139e+00
 -7.62150139e+00 -1.65076880e+00 -6.80910488e-01 -6.80910488e-01
 -6.80910488e-01  8.65242428e+01  6.92112431e+02  4.04482717e+03
  2.98180040e+04  1.54849912e+05  6.64955980e+05  2.71967734e+06
  1.10460087e+07  4.65101249e+07]
E1 = -706.5862673396705  E_coul = 198.94652860234396
cycle= 1 E= -507.639738737327  delta_E= -3.71  |g|= 0.316  |ddm|= 0.301
    CPU time for cycle= 1      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.419437
diis-c [-0.17592723  1.        ]
  HOMO = -0.23626277975777  LUMO = 87.8590050070826
  mo_energy =
[-1.20262819e+02 -1.22529081e+01 -6.65293682e+00 -6.65293682e+00
 -6.65293682e+00 -1.16348412e+00 -2.36262780e-01 -2.36262780e-01
 -2.36262780e-01  8.78590050e+01  6.93482417e+02  4.04607670e+03
  2.98190933e+04  1.54850931e+05  6.64956968e+05  2.71967831e+06
  1.10460096e+07  4.65101259e+07]
E1 = -706.5555971040895  E_coul = 198.91544146086807
cycle= 2 E= -507.640155643221  delta_E= -0.000417  |g|= 0.00468  |ddm|= 0.0139
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00497577
diis-c [-2.47042676e-05 -5.54299247e-04  1.00055430e+00]
  HOMO = -0.236432835041229  LUMO = 87.8555351450096
  mo_energy =
[-1.20271278e+02 -1.22540633e+01 -6.65472646e+00 -6.65472646e+00
 -6.65472646e+00 -1.16354699e+00 -2.36432835e-01 -2.36432835e-01
 -2.36432835e-01  8.78555351e+01  6.93471965e+02  4.04606102e+03
  2.98190744e+04  1.54850911e+05  6.64956948e+05  2.71967829e+06
  1.10460096e+07  4.65101259e+07]
E1 = -706.5551722660448  E_coul = 198.91501651735544
cycle= 3 E= -507.640155748689  delta_E= -1.05e-07  |g|= 9.25e-05  |ddm|= 0.000194
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.000123812
diis-c [-3.76054770e-10  3.35389751e-05 -2.52014238e-02  1.02516788e+00]
  HOMO = -0.236434952127509  LUMO = 87.8554919512182
  mo_energy =
[-1.20271387e+02 -1.22540784e+01 -6.65475232e+00 -6.65475232e+00
 -6.65475232e+00 -1.16354762e+00 -2.36434952e-01 -2.36434952e-01
 -2.36434952e-01  8.78554920e+01  6.93471852e+02  4.04606088e+03
  2.98190742e+04  1.54850911e+05  6.64956948e+05  2.71967829e+06
  1.10460096e+07  4.65101259e+07]
E1 = -706.555165375608  E_coul = 198.91500962688139
cycle= 4 E= -507.640155748727  delta_E= -3.72e-11  |g|= 3.59e-07  |ddm|= 3.29e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.555165375608  E_coul = 198.91500962688139
  HOMO = -0.236434936710773  LUMO = 87.8554922781756
  mo_energy =
[-1.20271386e+02 -1.22540783e+01 -6.65475216e+00 -6.65475216e+00
 -6.65475216e+00 -1.16354761e+00 -2.36434937e-01 -2.36434937e-01
 -2.36434937e-01  8.78554923e+01  6.93471853e+02  4.04606088e+03
  2.98190742e+04  1.54850911e+05  6.64956948e+05  2.71967829e+06
  1.10460096e+07  4.65101259e+07]
E1 = -706.555165410529  E_coul = 198.91500966180246
Extra cycle  E= -507.640155748726  delta_E= 1.14e-13  |g|= 6.15e-09  |ddm|= 1.54e-08
    CPU time for scf_cycle      0.11 sec, wall time      0.12 sec
exp = [1.87954849e+07 4.69887121e+06 1.17471780e+06 2.93679372e+05
 7.34201224e+04 1.83059795e+04 2.29912641e+03 4.67344806e+02
 1.23555142e+02 3.79020456e+01 4.74271968e+00 3.91233784e-01
 8.59854886e+00 4.90838427e-01]
E = -507.6401557487265
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="BFGS",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((14, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.6988712134173084e+06,1.1747178033543271e+06,2.9367945083858178e+05,7.3419865393677101e+04,1.8353927627435987e+04,2.2341424145819028e+03,4.5688904996449571e+02,1.2173317272260677e+02,3.7593061247508530e+01,4.7412722556720146e+00,3.9120358491841306e-01,8.5986297237246045e+00,4.9084868336327880e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "12s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:18:59 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  18795484.8537        1
[INPUT] 0    0    [1    /1   ]  4698871.21328        1
[INPUT] 0    0    [1    /1   ]  1174717.80329        1
[INPUT] 0    0    [1    /1   ]  293679.372159        1
[INPUT] 0    0    [1    /1   ]  73420.1224402        1
[INPUT] 0    0    [1    /1   ]  18305.9795195        1
[INPUT] 0    0    [1    /1   ]  2299.12640545        1
[INPUT] 0    0    [1    /1   ]  467.344805991        1
[INPUT] 0    0    [1    /1   ]  123.555141729        1
[INPUT] 0    0    [1    /1   ]  37.9020455671        1
[INPUT] 0    0    [1    /1   ]  4.74271967703        1
[INPUT] 0    0    [1    /1   ]  0.391233783726       1
[INPUT] 1    0    [1    /1   ]  8.59854885556        1
[INPUT] 1    0    [1    /1   ]  0.490838427314       1

nuclear repulsion = 0
number of shells = 14
number of NR pGTOs = 18
number of NR cGTOs = 18
basis = {'Ar': [[0, [18795484.853670076, 1.0]], [0, [4698871.213282793, 1.0]], [0, [1174717.8032926407, 1.0]], [0, [293679.37215880095, 1.0]], [0, [73420.12244023668, 1.0]], [0, [18305.979519453933, 1.0]], [0, [2299.126405445475, 1.0]], [0, [467.34480599078404, 1.0]], [0, [123.55514172931034, 1.0]], [0, [37.90204556706817, 1.0]], [0, [4.742719677025017, 1.0]], [0, [0.3912337837258122, 1.0]], [1, [8.59854885556446, 1.0]], [1, [0.4908384273135177, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [18795484.85367008]
bas 1, expnt(s) = [4698871.21328279]
bas 2, expnt(s) = [1174717.80329264]
bas 3, expnt(s) = [293679.3721588]
bas 4, expnt(s) = [73420.12244024]
bas 5, expnt(s) = [18305.97951945]
bas 6, expnt(s) = [2299.12640545]
bas 7, expnt(s) = [467.34480599]
bas 8, expnt(s) = [123.55514173]
bas 9, expnt(s) = [37.90204557]
bas 10, expnt(s) = [4.74271968]
bas 11, expnt(s) = [0.39123378]
bas 12, expnt(s) = [8.59854886]
bas 13, expnt(s) = [0.49083843]
CPU time:       319.07
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  0  1  1  0 42 43  0]
 [ 0  0  1  1  0 44 45  0]
 [ 0  0  1  1  0 46 47  0]
 [ 0  1  1  1  0 48 49  0]
 [ 0  1  1  1  0 50 51  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.87954849e+07 7.21199097e+05 4.69887121e+06 2.54982386e+05
 1.17471780e+06 9.01498871e+04 2.93679372e+05 3.18727918e+04
 7.34201224e+04 1.12687658e+04 1.83059795e+04 3.97612248e+03
 2.29912641e+03 8.38855509e+02 4.67344806e+02 2.53947002e+02
 1.23555142e+02 9.36290553e+01 3.79020456e+01 3.85933085e+01
 4.74271968e+00 8.11961835e+00 3.91233784e-01 1.24980508e+00
 8.59854886e+00 4.29552100e+01 4.90838427e-01 1.19855395e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.31994124840863
cond(S) = 56.37679765631412
E1 = -688.8484470058086  E_coul = 184.9160439662009
init E= -503.932403039608
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.680910488224345  LUMO = 86.5242428012947
  mo_energy =
[-1.21650675e+02 -1.32810679e+01 -7.62150139e+00 -7.62150139e+00
 -7.62150139e+00 -1.65076880e+00 -6.80910488e-01 -6.80910488e-01
 -6.80910488e-01  8.65242428e+01  6.92112431e+02  4.04482717e+03
  2.98180040e+04  1.54849912e+05  6.64955980e+05  2.71967734e+06
  1.10460087e+07  4.65101249e+07]
E1 = -706.5862673396705  E_coul = 198.94652860234396
cycle= 1 E= -507.639738737327  delta_E= -3.71  |g|= 0.316  |ddm|= 0.301
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.419437
diis-c [-0.17592723  1.        ]
  HOMO = -0.23626277975777  LUMO = 87.8590050070826
  mo_energy =
[-1.20262819e+02 -1.22529081e+01 -6.65293682e+00 -6.65293682e+00
 -6.65293682e+00 -1.16348412e+00 -2.36262780e-01 -2.36262780e-01
 -2.36262780e-01  8.78590050e+01  6.93482417e+02  4.04607670e+03
  2.98190933e+04  1.54850931e+05  6.64956968e+05  2.71967831e+06
  1.10460096e+07  4.65101259e+07]
E1 = -706.5555971040895  E_coul = 198.91544146086807
cycle= 2 E= -507.640155643221  delta_E= -0.000417  |g|= 0.00468  |ddm|= 0.0139
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00497577
diis-c [-2.47042676e-05 -5.54299247e-04  1.00055430e+00]
  HOMO = -0.236432835041229  LUMO = 87.8555351450096
  mo_energy =
[-1.20271278e+02 -1.22540633e+01 -6.65472646e+00 -6.65472646e+00
 -6.65472646e+00 -1.16354699e+00 -2.36432835e-01 -2.36432835e-01
 -2.36432835e-01  8.78555351e+01  6.93471965e+02  4.04606102e+03
  2.98190744e+04  1.54850911e+05  6.64956948e+05  2.71967829e+06
  1.10460096e+07  4.65101259e+07]
E1 = -706.5551722660448  E_coul = 198.91501651735544
cycle= 3 E= -507.640155748689  delta_E= -1.05e-07  |g|= 9.25e-05  |ddm|= 0.000194
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.000123812
diis-c [-3.76054770e-10  3.35389751e-05 -2.52014238e-02  1.02516788e+00]
  HOMO = -0.236434952127509  LUMO = 87.8554919512182
  mo_energy =
[-1.20271387e+02 -1.22540784e+01 -6.65475232e+00 -6.65475232e+00
 -6.65475232e+00 -1.16354762e+00 -2.36434952e-01 -2.36434952e-01
 -2.36434952e-01  8.78554920e+01  6.93471852e+02  4.04606088e+03
  2.98190742e+04  1.54850911e+05  6.64956948e+05  2.71967829e+06
  1.10460096e+07  4.65101259e+07]
E1 = -706.555165375608  E_coul = 198.91500962688139
cycle= 4 E= -507.640155748727  delta_E= -3.72e-11  |g|= 3.59e-07  |ddm|= 3.29e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.555165375608  E_coul = 198.91500962688139
  HOMO = -0.236434936710773  LUMO = 87.8554922781756
  mo_energy =
[-1.20271386e+02 -1.22540783e+01 -6.65475216e+00 -6.65475216e+00
 -6.65475216e+00 -1.16354761e+00 -2.36434937e-01 -2.36434937e-01
 -2.36434937e-01  8.78554923e+01  6.93471853e+02  4.04606088e+03
  2.98190742e+04  1.54850911e+05  6.64956948e+05  2.71967829e+06
  1.10460096e+07  4.65101259e+07]
E1 = -706.555165410529  E_coul = 198.91500966180246
Extra cycle  E= -507.640155748726  delta_E= 1.14e-13  |g|= 6.15e-09  |ddm|= 1.54e-08
    CPU time for scf_cycle      0.10 sec, wall time      0.10 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 56.37679765631412
E1 = -706.555165410529  E_coul = 198.91500966180246
init E= -507.640155748726
    CPU time for initialize scf      0.12 sec, wall time      0.12 sec
  HOMO = -0.236434936532228  LUMO = 87.8554922821171
  mo_energy =
[-1.20271386e+02 -1.22540783e+01 -6.65475216e+00 -6.65475216e+00
 -6.65475216e+00 -1.16354761e+00 -2.36434937e-01 -2.36434937e-01
 -2.36434937e-01  8.78554923e+01  6.93471853e+02  4.04606088e+03
  2.98190742e+04  1.54850911e+05  6.64956948e+05  2.71967829e+06
  1.10460096e+07  4.65101259e+07]
E1 = -706.5551654110521  E_coul = 198.91500966232536
cycle= 1 E= -507.640155748727  delta_E= -2.84e-13  |g|= 1.8e-10  |ddm|= 2.37e-10
    CPU time for cycle= 1      0.01 sec, wall time      0.02 sec
E1 = -706.5551654110521  E_coul = 198.91500966232536
  HOMO = -0.236434936529726  LUMO = 87.8554922821745
  mo_energy =
[-1.20271386e+02 -1.22540783e+01 -6.65475216e+00 -6.65475216e+00
 -6.65475216e+00 -1.16354761e+00 -2.36434937e-01 -2.36434937e-01
 -2.36434937e-01  8.78554923e+01  6.93471853e+02  4.04606088e+03
  2.98190742e+04  1.54850911e+05  6.64956948e+05  2.71967829e+06
  1.10460096e+07  4.65101259e+07]
E1 = -706.5551654110609  E_coul = 198.9150096623341
Extra cycle  E= -507.640155748727  delta_E=    0  |g|= 1.01e-10  |ddm|= 4.14e-12
    CPU time for scf_cycle      0.19 sec, wall time      0.20 sec
exp = [1.87954849e+07 4.69887121e+06 1.17471780e+06 2.93679372e+05
 7.34201224e+04 1.83059795e+04 2.29912641e+03 4.67344806e+02
 1.23555142e+02 3.79020456e+01 4.74271968e+00 3.91233784e-01
 8.59854886e+00 4.90838427e-01]
grad_E = [-1.43327484e-13  1.58694306e-11 -8.35072643e-12  9.31494720e-09
 -3.96514345e-08  5.67971398e-06  4.05403834e-06  7.05812682e-07
  5.74336067e-07  6.42589320e-08 -7.92472818e-07  3.56333648e-06
  1.03612668e-06  7.39021249e-06]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="BFGS",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((14, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.6988712134173084e+06,1.1747178033543271e+06,2.9367945083858178e+05,7.3419865393677101e+04,1.8353927627435987e+04,2.2341424145819028e+03,4.5688904996449571e+02,1.2173317272260677e+02,3.7593061247508530e+01,4.7412722556720146e+00,3.9120358491841306e-01,8.5986297237246045e+00,4.9084868336327880e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "12s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:19:03 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  18795484.8537        1
[INPUT] 0    0    [1    /1   ]  4698871.21328        1
[INPUT] 0    0    [1    /1   ]  1174717.80329        1
[INPUT] 0    0    [1    /1   ]  293679.372177        1
[INPUT] 0    0    [1    /1   ]  73420.122382         1
[INPUT] 0    0    [1    /1   ]  18305.9904567        1
[INPUT] 0    0    [1    /1   ]  2299.11070533        1
[INPUT] 0    0    [1    /1   ]  467.344521187        1
[INPUT] 0    0    [1    /1   ]  123.55566215         1
[INPUT] 0    0    [1    /1   ]  37.902192531         1
[INPUT] 0    0    [1    /1   ]  4.74271924814        1
[INPUT] 0    0    [1    /1   ]  0.391233882282       1
[INPUT] 1    0    [1    /1   ]  8.59854951414        1
[INPUT] 1    0    [1    /1   ]  0.490838529942       1

nuclear repulsion = 0
number of shells = 14
number of NR pGTOs = 18
number of NR cGTOs = 18
basis = {'Ar': [[0, [18795484.853670076, 1.0]], [0, [4698871.213282824, 1.0]], [0, [1174717.8032926556, 1.0]], [0, [293679.37217674736, 1.0]], [0, [73420.12238204587, 1.0]], [0, [18305.990456687825, 1.0]], [0, [2299.1107053302057, 1.0]], [0, [467.34452118733316, 1.0]], [0, [123.55566215045144, 1.0]], [0, [37.90219253095971, 1.0]], [0, [4.742719248138517, 1.0]], [0, [0.39123388228180817, 1.0]], [1, [8.598549514141801, 1.0]], [1, [0.4908385299419881, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [18795484.85367008]
bas 1, expnt(s) = [4698871.21328282]
bas 2, expnt(s) = [1174717.80329266]
bas 3, expnt(s) = [293679.37217675]
bas 4, expnt(s) = [73420.12238205]
bas 5, expnt(s) = [18305.99045669]
bas 6, expnt(s) = [2299.11070533]
bas 7, expnt(s) = [467.34452119]
bas 8, expnt(s) = [123.55566215]
bas 9, expnt(s) = [37.90219253]
bas 10, expnt(s) = [4.74271925]
bas 11, expnt(s) = [0.39123388]
bas 12, expnt(s) = [8.59854951]
bas 13, expnt(s) = [0.49083853]
CPU time:       323.44
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  0  1  1  0 42 43  0]
 [ 0  0  1  1  0 44 45  0]
 [ 0  0  1  1  0 46 47  0]
 [ 0  1  1  1  0 48 49  0]
 [ 0  1  1  1  0 50 51  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.87954849e+07 7.21199097e+05 4.69887121e+06 2.54982386e+05
 1.17471780e+06 9.01498871e+04 2.93679372e+05 3.18727919e+04
 7.34201224e+04 1.12687658e+04 1.83059905e+04 3.97612426e+03
 2.29911071e+03 8.38851213e+02 4.67344521e+02 2.53946886e+02
 1.23555662e+02 9.36293511e+01 3.79021925e+01 3.85934208e+01
 4.74271925e+00 8.11961780e+00 3.91233882e-01 1.24980532e+00
 8.59854951e+00 4.29552141e+01 4.90838530e-01 1.19855426e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.31994110018512
cond(S) = 56.376855172765154
E1 = -688.8484482217639  E_coul = 184.91605181228215
init E= -503.932396409482
    CPU time for initialize scf      0.03 sec, wall time      0.04 sec
  HOMO = -0.680910329343344  LUMO = 86.5247667806811
  mo_energy =
[-1.21650674e+02 -1.32810674e+01 -7.62150085e+00 -7.62150085e+00
 -7.62150085e+00 -1.65076870e+00 -6.80910329e-01 -6.80910329e-01
 -6.80910329e-01  8.65247668e+01  6.92114114e+02  4.04481167e+03
  2.98179663e+04  1.54849893e+05  6.64955971e+05  2.71967733e+06
  1.10460087e+07  4.65101249e+07]
E1 = -706.5862777339215  E_coul = 198.94653899164257
cycle= 1 E= -507.639738742279  delta_E= -3.71  |g|= 0.316  |ddm|= 0.301
    CPU time for cycle= 1      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.419437
diis-c [-0.17592747  1.        ]
  HOMO = -0.236262492266486  LUMO = 87.8595297837179
  mo_energy =
[-1.20262818e+02 -1.22529075e+01 -6.65293613e+00 -6.65293613e+00
 -6.65293613e+00 -1.16348390e+00 -2.36262492e-01 -2.36262492e-01
 -2.36262492e-01  8.78595298e+01  6.93484100e+02  4.04606119e+03
  2.98190556e+04  1.54850912e+05  6.64956959e+05  2.71967831e+06
  1.10460096e+07  4.65101259e+07]
E1 = -706.5556077592959  E_coul = 198.91545211476262
cycle= 2 E= -507.640155644533  delta_E= -0.000417  |g|= 0.00468  |ddm|= 0.0139
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00497575
diis-c [-2.47040716e-05 -5.54327546e-04  1.00055433e+00]
  HOMO = -0.236432545884518  LUMO = 87.8560599396909
  mo_energy =
[-1.20271276e+02 -1.22540627e+01 -6.65472575e+00 -6.65472575e+00
 -6.65472575e+00 -1.16354676e+00 -2.36432546e-01 -2.36432546e-01
 -2.36432546e-01  8.78560599e+01  6.93473649e+02  4.04604551e+03
  2.98190367e+04  1.54850892e+05  6.64956939e+05  2.71967829e+06
  1.10460096e+07  4.65101259e+07]
E1 = -706.5551829264017  E_coul = 198.9150271764028
cycle= 3 E= -507.640155749999  delta_E= -1.05e-07  |g|= 9.25e-05  |ddm|= 0.000194
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.000123811
diis-c [-3.76047741e-10  3.35391140e-05 -2.52013219e-02  1.02516778e+00]
  HOMO = -0.236434662937921  LUMO = 87.8560167464339
  mo_energy =
[-1.20271385e+02 -1.22540778e+01 -6.65475161e+00 -6.65475161e+00
 -6.65475161e+00 -1.16354739e+00 -2.36434663e-01 -2.36434663e-01
 -2.36434663e-01  8.78560167e+01  6.93473536e+02  4.04604537e+03
  2.98190365e+04  1.54850892e+05  6.64956939e+05  2.71967829e+06
  1.10460096e+07  4.65101259e+07]
E1 = -706.5551760360873  E_coul = 198.91502028605086
cycle= 4 E= -507.640155750036  delta_E= -3.75e-11  |g|= 3.59e-07  |ddm|= 3.29e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.03 sec
E1 = -706.5551760360873  E_coul = 198.91502028605086
  HOMO = -0.236434647521477  LUMO = 87.8560170733876
  mo_energy =
[-1.20271384e+02 -1.22540777e+01 -6.65475146e+00 -6.65475146e+00
 -6.65475146e+00 -1.16354739e+00 -2.36434648e-01 -2.36434648e-01
 -2.36434648e-01  8.78560171e+01  6.93473537e+02  4.04604538e+03
  2.98190365e+04  1.54850892e+05  6.64956939e+05  2.71967829e+06
  1.10460096e+07  4.65101259e+07]
E1 = -706.5551760710081  E_coul = 198.91502032097142
Extra cycle  E= -507.640155750037  delta_E= -2.27e-13  |g|= 6.15e-09  |ddm|= 1.54e-08
    CPU time for scf_cycle      0.14 sec, wall time      0.15 sec
exp = [1.87954849e+07 4.69887121e+06 1.17471780e+06 2.93679372e+05
 7.34201224e+04 1.83059905e+04 2.29911071e+03 4.67344521e+02
 1.23555662e+02 3.79021925e+01 4.74271925e+00 3.91233882e-01
 8.59854951e+00 4.90838530e-01]
E = -507.6401557500367
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="BFGS",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((14, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.6988712134173084e+06,1.1747178033543271e+06,2.9367945083858178e+05,7.3419865393677101e+04,1.8353927627435987e+04,2.2341424145819028e+03,4.5688904996449571e+02,1.2173317272260677e+02,3.7593061247508530e+01,4.7412722556720146e+00,3.9120358491841306e-01,8.5986297237246045e+00,4.9084868336327880e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "12s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:19:05 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  18795484.8537        1
[INPUT] 0    0    [1    /1   ]  4698871.21328        1
[INPUT] 0    0    [1    /1   ]  1174717.80329        1
[INPUT] 0    0    [1    /1   ]  293679.372177        1
[INPUT] 0    0    [1    /1   ]  73420.122382         1
[INPUT] 0    0    [1    /1   ]  18305.9904567        1
[INPUT] 0    0    [1    /1   ]  2299.11070533        1
[INPUT] 0    0    [1    /1   ]  467.344521187        1
[INPUT] 0    0    [1    /1   ]  123.55566215         1
[INPUT] 0    0    [1    /1   ]  37.902192531         1
[INPUT] 0    0    [1    /1   ]  4.74271924814        1
[INPUT] 0    0    [1    /1   ]  0.391233882282       1
[INPUT] 1    0    [1    /1   ]  8.59854951414        1
[INPUT] 1    0    [1    /1   ]  0.490838529942       1

nuclear repulsion = 0
number of shells = 14
number of NR pGTOs = 18
number of NR cGTOs = 18
basis = {'Ar': [[0, [18795484.853670076, 1.0]], [0, [4698871.213282824, 1.0]], [0, [1174717.8032926556, 1.0]], [0, [293679.37217674736, 1.0]], [0, [73420.12238204587, 1.0]], [0, [18305.990456687825, 1.0]], [0, [2299.1107053302057, 1.0]], [0, [467.34452118733316, 1.0]], [0, [123.55566215045144, 1.0]], [0, [37.90219253095971, 1.0]], [0, [4.742719248138517, 1.0]], [0, [0.39123388228180817, 1.0]], [1, [8.598549514141801, 1.0]], [1, [0.4908385299419881, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [18795484.85367008]
bas 1, expnt(s) = [4698871.21328282]
bas 2, expnt(s) = [1174717.80329266]
bas 3, expnt(s) = [293679.37217675]
bas 4, expnt(s) = [73420.12238205]
bas 5, expnt(s) = [18305.99045669]
bas 6, expnt(s) = [2299.11070533]
bas 7, expnt(s) = [467.34452119]
bas 8, expnt(s) = [123.55566215]
bas 9, expnt(s) = [37.90219253]
bas 10, expnt(s) = [4.74271925]
bas 11, expnt(s) = [0.39123388]
bas 12, expnt(s) = [8.59854951]
bas 13, expnt(s) = [0.49083853]
CPU time:       324.59
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  0  1  1  0 42 43  0]
 [ 0  0  1  1  0 44 45  0]
 [ 0  0  1  1  0 46 47  0]
 [ 0  1  1  1  0 48 49  0]
 [ 0  1  1  1  0 50 51  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.87954849e+07 7.21199097e+05 4.69887121e+06 2.54982386e+05
 1.17471780e+06 9.01498871e+04 2.93679372e+05 3.18727919e+04
 7.34201224e+04 1.12687658e+04 1.83059905e+04 3.97612426e+03
 2.29911071e+03 8.38851213e+02 4.67344521e+02 2.53946886e+02
 1.23555662e+02 9.36293511e+01 3.79021925e+01 3.85934208e+01
 4.74271925e+00 8.11961780e+00 3.91233882e-01 1.24980532e+00
 8.59854951e+00 4.29552141e+01 4.90838530e-01 1.19855426e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.31994110018512
cond(S) = 56.376855172765154
E1 = -688.8484482217639  E_coul = 184.91605181228215
init E= -503.932396409482
    CPU time for initialize scf      0.03 sec, wall time      0.03 sec
  HOMO = -0.680910329343344  LUMO = 86.5247667806811
  mo_energy =
[-1.21650674e+02 -1.32810674e+01 -7.62150085e+00 -7.62150085e+00
 -7.62150085e+00 -1.65076870e+00 -6.80910329e-01 -6.80910329e-01
 -6.80910329e-01  8.65247668e+01  6.92114114e+02  4.04481167e+03
  2.98179663e+04  1.54849893e+05  6.64955971e+05  2.71967733e+06
  1.10460087e+07  4.65101249e+07]
E1 = -706.5862777339215  E_coul = 198.94653899164257
cycle= 1 E= -507.639738742279  delta_E= -3.71  |g|= 0.316  |ddm|= 0.301
    CPU time for cycle= 1      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.419437
diis-c [-0.17592747  1.        ]
  HOMO = -0.236262492266486  LUMO = 87.8595297837179
  mo_energy =
[-1.20262818e+02 -1.22529075e+01 -6.65293613e+00 -6.65293613e+00
 -6.65293613e+00 -1.16348390e+00 -2.36262492e-01 -2.36262492e-01
 -2.36262492e-01  8.78595298e+01  6.93484100e+02  4.04606119e+03
  2.98190556e+04  1.54850912e+05  6.64956959e+05  2.71967831e+06
  1.10460096e+07  4.65101259e+07]
E1 = -706.5556077592959  E_coul = 198.91545211476262
cycle= 2 E= -507.640155644533  delta_E= -0.000417  |g|= 0.00468  |ddm|= 0.0139
    CPU time for cycle= 2      0.02 sec, wall time      0.03 sec
diis-norm(errvec)=0.00497575
diis-c [-2.47040716e-05 -5.54327546e-04  1.00055433e+00]
  HOMO = -0.236432545884518  LUMO = 87.8560599396909
  mo_energy =
[-1.20271276e+02 -1.22540627e+01 -6.65472575e+00 -6.65472575e+00
 -6.65472575e+00 -1.16354676e+00 -2.36432546e-01 -2.36432546e-01
 -2.36432546e-01  8.78560599e+01  6.93473649e+02  4.04604551e+03
  2.98190367e+04  1.54850892e+05  6.64956939e+05  2.71967829e+06
  1.10460096e+07  4.65101259e+07]
E1 = -706.5551829264017  E_coul = 198.9150271764028
cycle= 3 E= -507.640155749999  delta_E= -1.05e-07  |g|= 9.25e-05  |ddm|= 0.000194
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.000123811
diis-c [-3.76047741e-10  3.35391140e-05 -2.52013219e-02  1.02516778e+00]
  HOMO = -0.236434662937921  LUMO = 87.8560167464339
  mo_energy =
[-1.20271385e+02 -1.22540778e+01 -6.65475161e+00 -6.65475161e+00
 -6.65475161e+00 -1.16354739e+00 -2.36434663e-01 -2.36434663e-01
 -2.36434663e-01  8.78560167e+01  6.93473536e+02  4.04604537e+03
  2.98190365e+04  1.54850892e+05  6.64956939e+05  2.71967829e+06
  1.10460096e+07  4.65101259e+07]
E1 = -706.5551760360873  E_coul = 198.91502028605086
cycle= 4 E= -507.640155750036  delta_E= -3.75e-11  |g|= 3.59e-07  |ddm|= 3.29e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.5551760360873  E_coul = 198.91502028605086
  HOMO = -0.236434647521477  LUMO = 87.8560170733876
  mo_energy =
[-1.20271384e+02 -1.22540777e+01 -6.65475146e+00 -6.65475146e+00
 -6.65475146e+00 -1.16354739e+00 -2.36434648e-01 -2.36434648e-01
 -2.36434648e-01  8.78560171e+01  6.93473537e+02  4.04604538e+03
  2.98190365e+04  1.54850892e+05  6.64956939e+05  2.71967829e+06
  1.10460096e+07  4.65101259e+07]
E1 = -706.5551760710081  E_coul = 198.91502032097142
Extra cycle  E= -507.640155750037  delta_E= -2.27e-13  |g|= 6.15e-09  |ddm|= 1.54e-08
    CPU time for scf_cycle      0.12 sec, wall time      0.14 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 56.376855172765154
E1 = -706.5551760710081  E_coul = 198.91502032097142
init E= -507.640155750037
    CPU time for initialize scf      0.12 sec, wall time      0.12 sec
  HOMO = -0.236434647342934  LUMO = 87.8560170773279
  mo_energy =
[-1.20271384e+02 -1.22540777e+01 -6.65475145e+00 -6.65475145e+00
 -6.65475145e+00 -1.16354739e+00 -2.36434647e-01 -2.36434647e-01
 -2.36434647e-01  8.78560171e+01  6.93473537e+02  4.04604538e+03
  2.98190365e+04  1.54850892e+05  6.64956939e+05  2.71967829e+06
  1.10460096e+07  4.65101259e+07]
E1 = -706.555176071531  E_coul = 198.91502032149438
cycle= 1 E= -507.640155750037  delta_E=    0  |g|= 2.2e-10  |ddm|= 2.37e-10
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -706.555176071531  E_coul = 198.91502032149438
  HOMO = -0.236434647340433  LUMO = 87.85601707738
  mo_energy =
[-1.20271384e+02 -1.22540777e+01 -6.65475145e+00 -6.65475145e+00
 -6.65475145e+00 -1.16354739e+00 -2.36434647e-01 -2.36434647e-01
 -2.36434647e-01  8.78560171e+01  6.93473537e+02  4.04604538e+03
  2.98190365e+04  1.54850892e+05  6.64956939e+05  2.71967829e+06
  1.10460096e+07  4.65101259e+07]
E1 = -706.5551760715405  E_coul = 198.91502032150376
Extra cycle  E= -507.640155750037  delta_E=    0  |g|= 9.39e-11  |ddm|= 4.26e-12
    CPU time for scf_cycle      0.19 sec, wall time      0.19 sec
exp = [1.87954849e+07 4.69887121e+06 1.17471780e+06 2.93679372e+05
 7.34201224e+04 1.83059905e+04 2.29911071e+03 4.67344521e+02
 1.23555662e+02 3.79021925e+01 4.74271925e+00 3.91233882e-01
 8.59854951e+00 4.90838530e-01]
grad_E = [-1.43319092e-13  1.58700282e-11 -8.34626357e-12  9.31528879e-09
 -3.96501185e-08  5.67992983e-06  4.04790330e-06  6.90075440e-07
  7.74079662e-07  8.99006274e-08 -1.16372471e-06  5.22307853e-06
  1.51699464e-06  1.08370608e-05]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="BFGS",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((14, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.6988712134173084e+06,1.1747178033543271e+06,2.9367945083858178e+05,7.3419865393677101e+04,1.8353927627435987e+04,2.2341424145819028e+03,4.5688904996449571e+02,1.2173317272260677e+02,3.7593061247508530e+01,4.7412722556720146e+00,3.9120358491841306e-01,8.5986297237246045e+00,4.9084868336327880e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "12s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:19:09 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  18795484.8537        1
[INPUT] 0    0    [1    /1   ]  4698871.21328        1
[INPUT] 0    0    [1    /1   ]  1174717.80329        1
[INPUT] 0    0    [1    /1   ]  293679.372203        1
[INPUT] 0    0    [1    /1   ]  73420.1222969        1
[INPUT] 0    0    [1    /1   ]  18306.0064947        1
[INPUT] 0    0    [1    /1   ]  2299.08746522        1
[INPUT] 0    0    [1    /1   ]  467.344098951        1
[INPUT] 0    0    [1    /1   ]  123.556432154        1
[INPUT] 0    0    [1    /1   ]  37.9024099902        1
[INPUT] 0    0    [1    /1   ]  4.74271861346        1
[INPUT] 0    0    [1    /1   ]  0.391234028104       1
[INPUT] 1    0    [1    /1   ]  8.59855048849        1
[INPUT] 1    0    [1    /1   ]  0.490838681783       1

nuclear repulsion = 0
number of shells = 14
number of NR pGTOs = 18
number of NR cGTOs = 18
basis = {'Ar': [[0, [18795484.853670076, 1.0]], [0, [4698871.213282868, 1.0]], [0, [1174717.8032926777, 1.0]], [0, [293679.37220306345, 1.0]], [0, [73420.12229688397, 1.0]], [0, [18306.006494680703, 1.0]], [0, [2299.087465222109, 1.0]], [0, [467.3440989509246, 1.0]], [0, [123.5564321539781, 1.0]], [0, [37.90240999015617, 1.0]], [0, [4.742718613456212, 1.0]], [0, [0.39123402810364755, 1.0]], [1, [8.59855048849468, 1.0]], [1, [0.4908386817831572, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [18795484.85367008]
bas 1, expnt(s) = [4698871.21328287]
bas 2, expnt(s) = [1174717.80329268]
bas 3, expnt(s) = [293679.37220306]
bas 4, expnt(s) = [73420.12229688]
bas 5, expnt(s) = [18306.00649468]
bas 6, expnt(s) = [2299.08746522]
bas 7, expnt(s) = [467.34409895]
bas 8, expnt(s) = [123.55643215]
bas 9, expnt(s) = [37.90240999]
bas 10, expnt(s) = [4.74271861]
bas 11, expnt(s) = [0.39123403]
bas 12, expnt(s) = [8.59855049]
bas 13, expnt(s) = [0.49083868]
CPU time:       329.08
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  0  1  1  0 42 43  0]
 [ 0  0  1  1  0 44 45  0]
 [ 0  0  1  1  0 46 47  0]
 [ 0  1  1  1  0 48 49  0]
 [ 0  1  1  1  0 50 51  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.87954849e+07 7.21199097e+05 4.69887121e+06 2.54982386e+05
 1.17471780e+06 9.01498871e+04 2.93679372e+05 3.18727919e+04
 7.34201223e+04 1.12687658e+04 1.83060065e+04 3.97612687e+03
 2.29908747e+03 8.38844854e+02 4.67344099e+02 2.53946714e+02
 1.23556432e+02 9.36297887e+01 3.79024100e+01 3.85935868e+01
 4.74271861e+00 8.11961698e+00 3.91234028e-01 1.24980567e+00
 8.59855049e+00 4.29552202e+01 4.90838682e-01 1.19855473e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319940880884438
cond(S) = 56.3769401416134
E1 = -688.8484500207486  E_coul = 184.91606342076673
init E= -503.932386599982
    CPU time for initialize scf      0.03 sec, wall time      0.03 sec
  HOMO = -0.680910094272203  LUMO = 86.5255420745034
  mo_energy =
[-1.21650672e+02 -1.32810667e+01 -7.62150005e+00 -7.62150005e+00
 -7.62150005e+00 -1.65076856e+00 -6.80910094e-01 -6.80910094e-01
 -6.80910094e-01  8.65255421e+01  6.92116603e+02  4.04478871e+03
  2.98179103e+04  1.54849864e+05  6.64955957e+05  2.71967732e+06
  1.10460086e+07  4.65101249e+07]
E1 = -706.5862931131766  E_coul = 198.9465543630939
cycle= 1 E= -507.639738750083  delta_E= -3.71  |g|= 0.316  |ddm|= 0.301
    CPU time for cycle= 1      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.419437
diis-c [-0.17592781  1.        ]
  HOMO = -0.236262066912649  LUMO = 87.8603062571733
  mo_energy =
[-1.20262816e+02 -1.22529066e+01 -6.65293511e+00 -6.65293511e+00
 -6.65293511e+00 -1.16348357e+00 -2.36262067e-01 -2.36262067e-01
 -2.36262067e-01  8.78603063e+01  6.93486590e+02  4.04603824e+03
  2.98189996e+04  1.54850883e+05  6.64956945e+05  2.71967830e+06
  1.10460096e+07  4.65101259e+07]
E1 = -706.5556235246632  E_coul = 198.91546787771296
cycle= 2 E= -507.64015564695  delta_E= -0.000417  |g|= 0.00468  |ddm|= 0.0139
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00497572
diis-c [-2.47037814e-05 -5.54369966e-04  1.00055437e+00]
  HOMO = -0.236432118066619  LUMO = 87.8568364398468
  mo_energy =
[-1.20271274e+02 -1.22540618e+01 -6.65472470e+00 -6.65472470e+00
 -6.65472470e+00 -1.16354643e+00 -2.36432118e-01 -2.36432118e-01
 -2.36432118e-01  8.78568364e+01  6.93476139e+02  4.04602256e+03
  2.98189807e+04  1.54850863e+05  6.64956925e+05  2.71967828e+06
  1.10460096e+07  4.65101258e+07]
E1 = -706.5551986993917  E_coul = 198.9150429469777
cycle= 3 E= -507.640155752414  delta_E= -1.05e-07  |g|= 9.25e-05  |ddm|= 0.000194
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.000123809
diis-c [-3.76038052e-10  3.35393155e-05 -2.52011717e-02  1.02516763e+00]
  HOMO = -0.236434235071252  LUMO = 87.8567932473839
  mo_energy =
[-1.20271383e+02 -1.22540769e+01 -6.65475056e+00 -6.65475056e+00
 -6.65475056e+00 -1.16354706e+00 -2.36434235e-01 -2.36434235e-01
 -2.36434235e-01  8.78567932e+01  6.93476026e+02  4.04602242e+03
  2.98189806e+04  1.54850863e+05  6.64956925e+05  2.71967828e+06
  1.10460096e+07  4.65101258e+07]
E1 = -706.5551918092574  E_coul = 198.91503605680634
cycle= 4 E= -507.640155752451  delta_E= -3.71e-11  |g|= 3.59e-07  |ddm|= 3.29e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.5551918092574  E_coul = 198.91503605680634
  HOMO = -0.236434219655265  LUMO = 87.8567935743289
  mo_energy =
[-1.20271382e+02 -1.22540768e+01 -6.65475041e+00 -6.65475041e+00
 -6.65475041e+00 -1.16354705e+00 -2.36434220e-01 -2.36434220e-01
 -2.36434220e-01  8.78567936e+01  6.93476027e+02  4.04602242e+03
  2.98189806e+04  1.54850863e+05  6.64956925e+05  2.71967828e+06
  1.10460096e+07  4.65101258e+07]
E1 = -706.5551918441781  E_coul = 198.91503609172645
Extra cycle  E= -507.640155752452  delta_E= -6.25e-13  |g|= 6.15e-09  |ddm|= 1.54e-08
    CPU time for scf_cycle      0.11 sec, wall time      0.12 sec
exp = [1.87954849e+07 4.69887121e+06 1.17471780e+06 2.93679372e+05
 7.34201223e+04 1.83060065e+04 2.29908747e+03 4.67344099e+02
 1.23556432e+02 3.79024100e+01 4.74271861e+00 3.91234028e-01
 8.59855049e+00 4.90838682e-01]
E = -507.6401557524517
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="BFGS",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((14, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.6988712134173084e+06,1.1747178033543271e+06,2.9367945083858178e+05,7.3419865393677101e+04,1.8353927627435987e+04,2.2341424145819028e+03,4.5688904996449571e+02,1.2173317272260677e+02,3.7593061247508530e+01,4.7412722556720146e+00,3.9120358491841306e-01,8.5986297237246045e+00,4.9084868336327880e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "12s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:19:11 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  18795484.8537        1
[INPUT] 0    0    [1    /1   ]  4698871.21328        1
[INPUT] 0    0    [1    /1   ]  1174717.80329        1
[INPUT] 0    0    [1    /1   ]  293679.372203        1
[INPUT] 0    0    [1    /1   ]  73420.1222969        1
[INPUT] 0    0    [1    /1   ]  18306.0064947        1
[INPUT] 0    0    [1    /1   ]  2299.08746522        1
[INPUT] 0    0    [1    /1   ]  467.344098951        1
[INPUT] 0    0    [1    /1   ]  123.556432154        1
[INPUT] 0    0    [1    /1   ]  37.9024099902        1
[INPUT] 0    0    [1    /1   ]  4.74271861346        1
[INPUT] 0    0    [1    /1   ]  0.391234028104       1
[INPUT] 1    0    [1    /1   ]  8.59855048849        1
[INPUT] 1    0    [1    /1   ]  0.490838681783       1

nuclear repulsion = 0
number of shells = 14
number of NR pGTOs = 18
number of NR cGTOs = 18
basis = {'Ar': [[0, [18795484.853670076, 1.0]], [0, [4698871.213282868, 1.0]], [0, [1174717.8032926777, 1.0]], [0, [293679.37220306345, 1.0]], [0, [73420.12229688397, 1.0]], [0, [18306.006494680703, 1.0]], [0, [2299.087465222109, 1.0]], [0, [467.3440989509246, 1.0]], [0, [123.5564321539781, 1.0]], [0, [37.90240999015617, 1.0]], [0, [4.742718613456212, 1.0]], [0, [0.39123402810364755, 1.0]], [1, [8.59855048849468, 1.0]], [1, [0.4908386817831572, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [18795484.85367008]
bas 1, expnt(s) = [4698871.21328287]
bas 2, expnt(s) = [1174717.80329268]
bas 3, expnt(s) = [293679.37220306]
bas 4, expnt(s) = [73420.12229688]
bas 5, expnt(s) = [18306.00649468]
bas 6, expnt(s) = [2299.08746522]
bas 7, expnt(s) = [467.34409895]
bas 8, expnt(s) = [123.55643215]
bas 9, expnt(s) = [37.90240999]
bas 10, expnt(s) = [4.74271861]
bas 11, expnt(s) = [0.39123403]
bas 12, expnt(s) = [8.59855049]
bas 13, expnt(s) = [0.49083868]
CPU time:       330.32
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  0  1  1  0 42 43  0]
 [ 0  0  1  1  0 44 45  0]
 [ 0  0  1  1  0 46 47  0]
 [ 0  1  1  1  0 48 49  0]
 [ 0  1  1  1  0 50 51  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.87954849e+07 7.21199097e+05 4.69887121e+06 2.54982386e+05
 1.17471780e+06 9.01498871e+04 2.93679372e+05 3.18727919e+04
 7.34201223e+04 1.12687658e+04 1.83060065e+04 3.97612687e+03
 2.29908747e+03 8.38844854e+02 4.67344099e+02 2.53946714e+02
 1.23556432e+02 9.36297887e+01 3.79024100e+01 3.85935868e+01
 4.74271861e+00 8.11961698e+00 3.91234028e-01 1.24980567e+00
 8.59855049e+00 4.29552202e+01 4.90838682e-01 1.19855473e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319940880884438
cond(S) = 56.3769401416134
E1 = -688.8484500207486  E_coul = 184.91606342076673
init E= -503.932386599982
    CPU time for initialize scf      0.02 sec, wall time      0.03 sec
  HOMO = -0.680910094272203  LUMO = 86.5255420745034
  mo_energy =
[-1.21650672e+02 -1.32810667e+01 -7.62150005e+00 -7.62150005e+00
 -7.62150005e+00 -1.65076856e+00 -6.80910094e-01 -6.80910094e-01
 -6.80910094e-01  8.65255421e+01  6.92116603e+02  4.04478871e+03
  2.98179103e+04  1.54849864e+05  6.64955957e+05  2.71967732e+06
  1.10460086e+07  4.65101249e+07]
E1 = -706.5862931131766  E_coul = 198.9465543630939
cycle= 1 E= -507.639738750083  delta_E= -3.71  |g|= 0.316  |ddm|= 0.301
    CPU time for cycle= 1      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.419437
diis-c [-0.17592781  1.        ]
  HOMO = -0.236262066912649  LUMO = 87.8603062571733
  mo_energy =
[-1.20262816e+02 -1.22529066e+01 -6.65293511e+00 -6.65293511e+00
 -6.65293511e+00 -1.16348357e+00 -2.36262067e-01 -2.36262067e-01
 -2.36262067e-01  8.78603063e+01  6.93486590e+02  4.04603824e+03
  2.98189996e+04  1.54850883e+05  6.64956945e+05  2.71967830e+06
  1.10460096e+07  4.65101259e+07]
E1 = -706.5556235246632  E_coul = 198.91546787771296
cycle= 2 E= -507.64015564695  delta_E= -0.000417  |g|= 0.00468  |ddm|= 0.0139
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00497572
diis-c [-2.47037814e-05 -5.54369966e-04  1.00055437e+00]
  HOMO = -0.236432118066619  LUMO = 87.8568364398468
  mo_energy =
[-1.20271274e+02 -1.22540618e+01 -6.65472470e+00 -6.65472470e+00
 -6.65472470e+00 -1.16354643e+00 -2.36432118e-01 -2.36432118e-01
 -2.36432118e-01  8.78568364e+01  6.93476139e+02  4.04602256e+03
  2.98189807e+04  1.54850863e+05  6.64956925e+05  2.71967828e+06
  1.10460096e+07  4.65101258e+07]
E1 = -706.5551986993917  E_coul = 198.9150429469777
cycle= 3 E= -507.640155752414  delta_E= -1.05e-07  |g|= 9.25e-05  |ddm|= 0.000194
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.000123809
diis-c [-3.76038052e-10  3.35393155e-05 -2.52011717e-02  1.02516763e+00]
  HOMO = -0.236434235071252  LUMO = 87.8567932473839
  mo_energy =
[-1.20271383e+02 -1.22540769e+01 -6.65475056e+00 -6.65475056e+00
 -6.65475056e+00 -1.16354706e+00 -2.36434235e-01 -2.36434235e-01
 -2.36434235e-01  8.78567932e+01  6.93476026e+02  4.04602242e+03
  2.98189806e+04  1.54850863e+05  6.64956925e+05  2.71967828e+06
  1.10460096e+07  4.65101258e+07]
E1 = -706.5551918092574  E_coul = 198.91503605680634
cycle= 4 E= -507.640155752451  delta_E= -3.71e-11  |g|= 3.59e-07  |ddm|= 3.29e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.5551918092574  E_coul = 198.91503605680634
  HOMO = -0.236434219655265  LUMO = 87.8567935743289
  mo_energy =
[-1.20271382e+02 -1.22540768e+01 -6.65475041e+00 -6.65475041e+00
 -6.65475041e+00 -1.16354705e+00 -2.36434220e-01 -2.36434220e-01
 -2.36434220e-01  8.78567936e+01  6.93476027e+02  4.04602242e+03
  2.98189806e+04  1.54850863e+05  6.64956925e+05  2.71967828e+06
  1.10460096e+07  4.65101258e+07]
E1 = -706.5551918441781  E_coul = 198.91503609172645
Extra cycle  E= -507.640155752452  delta_E= -6.25e-13  |g|= 6.15e-09  |ddm|= 1.54e-08
    CPU time for scf_cycle      0.10 sec, wall time      0.11 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 56.3769401416134
E1 = -706.5551918441781  E_coul = 198.91503609172645
init E= -507.640155752452
    CPU time for initialize scf      0.13 sec, wall time      0.14 sec
  HOMO = -0.236434219476721  LUMO = 87.856793578272
  mo_energy =
[-1.20271382e+02 -1.22540768e+01 -6.65475041e+00 -6.65475041e+00
 -6.65475041e+00 -1.16354705e+00 -2.36434219e-01 -2.36434219e-01
 -2.36434219e-01  8.78567936e+01  6.93476027e+02  4.04602242e+03
  2.98189806e+04  1.54850863e+05  6.64956925e+05  2.71967828e+06
  1.10460096e+07  4.65101258e+07]
E1 = -706.5551918447005  E_coul = 198.91503609224907
cycle= 1 E= -507.640155752451  delta_E= 2.27e-13  |g|= 2.16e-10  |ddm|= 2.37e-10
    CPU time for cycle= 1      0.02 sec, wall time      0.02 sec
E1 = -706.5551918447005  E_coul = 198.91503609224907
  HOMO = -0.236434219474224  LUMO = 87.8567935783302
  mo_energy =
[-1.20271382e+02 -1.22540768e+01 -6.65475041e+00 -6.65475041e+00
 -6.65475041e+00 -1.16354705e+00 -2.36434219e-01 -2.36434219e-01
 -2.36434219e-01  8.78567936e+01  6.93476027e+02  4.04602242e+03
  2.98189806e+04  1.54850863e+05  6.64956925e+05  2.71967828e+06
  1.10460096e+07  4.65101258e+07]
E1 = -706.5551918447093  E_coul = 198.91503609225754
Extra cycle  E= -507.640155752452  delta_E= -2.84e-13  |g|= 2.21e-10  |ddm|= 4.11e-12
    CPU time for scf_cycle      0.22 sec, wall time      0.26 sec
exp = [1.87954849e+07 4.69887121e+06 1.17471780e+06 2.93679372e+05
 7.34201223e+04 1.83060065e+04 2.29908747e+03 4.67344099e+02
 1.23556432e+02 3.79024100e+01 4.74271861e+00 3.91234028e-01
 8.59855049e+00 4.90838682e-01]
grad_E = [-1.43306677e-13  1.58709123e-11 -8.33966218e-12  9.31579405e-09
 -3.96481729e-08  5.68024928e-06  4.03882444e-06  6.66791402e-07
  1.06963876e-06  1.27885285e-07 -1.71303028e-06  7.67870908e-06
  2.22844220e-06  1.59367886e-05]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="BFGS",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((14, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.6988712134173084e+06,1.1747178033543271e+06,2.9367945083858178e+05,7.3419865393677101e+04,1.8353927627435987e+04,2.2341424145819028e+03,4.5688904996449571e+02,1.2173317272260677e+02,3.7593061247508530e+01,4.7412722556720146e+00,3.9120358491841306e-01,8.5986297237246045e+00,4.9084868336327880e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "12s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:19:15 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  18795484.8537        1
[INPUT] 0    0    [1    /1   ]  4698871.21328        1
[INPUT] 0    0    [1    /1   ]  1174717.80329        1
[INPUT] 0    0    [1    /1   ]  293679.372242        1
[INPUT] 0    0    [1    /1   ]  73420.12217          1
[INPUT] 0    0    [1    /1   ]  18306.0304468        1
[INPUT] 0    0    [1    /1   ]  2299.05235411        1
[INPUT] 0    0    [1    /1   ]  467.343459863        1
[INPUT] 0    0    [1    /1   ]  123.557594874        1
[INPUT] 0    0    [1    /1   ]  37.9027383799        1
[INPUT] 0    0    [1    /1   ]  4.74271765478        1
[INPUT] 0    0    [1    /1   ]  0.391234248323       1
[INPUT] 1    0    [1    /1   ]  8.59855195993        1
[INPUT] 1    0    [1    /1   ]  0.490838911091       1

nuclear repulsion = 0
number of shells = 14
number of NR pGTOs = 18
number of NR cGTOs = 18
basis = {'Ar': [[0, [18795484.853670076, 1.0]], [0, [4698871.213282935, 1.0]], [0, [1174717.803292711, 1.0]], [0, [293679.37224236573, 1.0]], [0, [73420.12217000683, 1.0]], [0, [18306.030446816505, 1.0]], [0, [2299.0523541148245, 1.0]], [0, [467.3434598626108, 1.0]], [0, [123.55759487375951, 1.0]], [0, [37.90273837989715, 1.0]], [0, [4.742717654783908, 1.0]], [0, [0.3912342483228703, 1.0]], [1, [8.59855195992895, 1.0]], [1, [0.4908389110909492, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [18795484.85367008]
bas 1, expnt(s) = [4698871.21328294]
bas 2, expnt(s) = [1174717.80329271]
bas 3, expnt(s) = [293679.37224237]
bas 4, expnt(s) = [73420.12217001]
bas 5, expnt(s) = [18306.03044682]
bas 6, expnt(s) = [2299.05235411]
bas 7, expnt(s) = [467.34345986]
bas 8, expnt(s) = [123.55759487]
bas 9, expnt(s) = [37.90273838]
bas 10, expnt(s) = [4.74271765]
bas 11, expnt(s) = [0.39123425]
bas 12, expnt(s) = [8.59855196]
bas 13, expnt(s) = [0.49083891]
CPU time:       334.15
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  0  1  1  0 42 43  0]
 [ 0  0  1  1  0 44 45  0]
 [ 0  0  1  1  0 46 47  0]
 [ 0  1  1  1  0 48 49  0]
 [ 0  1  1  1  0 50 51  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.87954849e+07 7.21199097e+05 4.69887121e+06 2.54982386e+05
 1.17471780e+06 9.01498871e+04 2.93679372e+05 3.18727919e+04
 7.34201222e+04 1.12687658e+04 1.83060304e+04 3.97613077e+03
 2.29905235e+03 8.38835246e+02 4.67343460e+02 2.53946453e+02
 1.23557595e+02 9.36304496e+01 3.79027384e+01 3.85938376e+01
 4.74271765e+00 8.11961575e+00 3.91234248e-01 1.24980620e+00
 8.59855196e+00 4.29552294e+01 4.90838911e-01 1.19855543e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.31994054970246
cond(S) = 56.37706820726493
E1 = -688.8484527400545  E_coul = 184.91608095160672
init E= -503.932371788448
    CPU time for initialize scf      0.03 sec, wall time      0.03 sec
  HOMO = -0.68090973927018  LUMO = 86.5267128210566
  mo_energy =
[-1.21650669e+02 -1.32810657e+01 -7.62149884e+00 -7.62149884e+00
 -7.62149884e+00 -1.65076834e+00 -6.80909739e-01 -6.80909739e-01
 -6.80909739e-01  8.65267128e+01  6.92120361e+02  4.04475403e+03
  2.98178255e+04  1.54849820e+05  6.64955934e+05  2.71967731e+06
  1.10460086e+07  4.65101249e+07]
E1 = -706.5863163395231  E_coul = 198.94657757695325
cycle= 1 E= -507.63973876257  delta_E= -3.71  |g|= 0.316  |ddm|= 0.301
    CPU time for cycle= 1      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.419438
diis-c [-0.17592833  1.        ]
  HOMO = -0.236261424550197  LUMO = 87.8614787851043
  mo_energy =
[-1.20262813e+02 -1.22529052e+01 -6.65293357e+00 -6.65293357e+00
 -6.65293357e+00 -1.16348307e+00 -2.36261425e-01 -2.36261425e-01
 -2.36261425e-01  8.78614788e+01  6.93490348e+02  4.04600356e+03
  2.98189148e+04  1.54850839e+05  6.64956923e+05  2.71967828e+06
  1.10460096e+07  4.65101259e+07]
E1 = -706.5556473340519  E_coul = 198.91549168274847
cycle= 2 E= -507.640155651303  delta_E= -0.000417  |g|= 0.00468  |ddm|= 0.0139
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00497568
diis-c [-2.47033436e-05 -5.54433571e-04  1.00055443e+00]
  HOMO = -0.236431471983306  LUMO = 87.8580090080977
  mo_energy =
[-1.20271271e+02 -1.22540603e+01 -6.65472312e+00 -6.65472312e+00
 -6.65472312e+00 -1.16354593e+00 -2.36431472e-01 -2.36431472e-01
 -2.36431472e-01  8.78580090e+01  6.93479897e+02  4.04598788e+03
  2.98188959e+04  1.54850819e+05  6.64956903e+05  2.71967826e+06
  1.10460096e+07  4.65101258e+07]
E1 = -706.5552225202897  E_coul = 198.91506676352608
cycle= 3 E= -507.640155756764  delta_E= -1.05e-07  |g|= 9.25e-05  |ddm|= 0.000194
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.000123807
diis-c [-3.76022321e-10  3.35396184e-05 -2.52009408e-02  1.02516740e+00]
  HOMO = -0.236433588914393  LUMO = 87.8579658168304
  mo_energy =
[-1.20271380e+02 -1.22540755e+01 -6.65474898e+00 -6.65474898e+00
 -6.65474898e+00 -1.16354656e+00 -2.36433589e-01 -2.36433589e-01
 -2.36433589e-01  8.78579658e+01  6.93479785e+02  4.04598774e+03
  2.98188957e+04  1.54850819e+05  6.64956903e+05  2.71967826e+06
  1.10460096e+07  4.65101258e+07]
E1 = -706.5552156304295  E_coul = 198.91505987362845
cycle= 4 E= -507.640155756801  delta_E= -3.74e-11  |g|= 3.59e-07  |ddm|= 3.29e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.5552156304295  E_coul = 198.91505987362845
  HOMO = -0.236433573499074  LUMO = 87.8579661437682
  mo_energy =
[-1.20271379e+02 -1.22540753e+01 -6.65474883e+00 -6.65474883e+00
 -6.65474883e+00 -1.16354655e+00 -2.36433573e-01 -2.36433573e-01
 -2.36433573e-01  8.78579661e+01  6.93479786e+02  4.04598774e+03
  2.98188957e+04  1.54850819e+05  6.64956903e+05  2.71967826e+06
  1.10460096e+07  4.65101258e+07]
E1 = -706.5552156653478  E_coul = 198.91505990854657
Extra cycle  E= -507.640155756801  delta_E= -1.14e-13  |g|= 6.15e-09  |ddm|= 1.54e-08
    CPU time for scf_cycle      0.10 sec, wall time      0.11 sec
exp = [1.87954849e+07 4.69887121e+06 1.17471780e+06 2.93679372e+05
 7.34201222e+04 1.83060304e+04 2.29905235e+03 4.67343460e+02
 1.23557595e+02 3.79027384e+01 4.74271765e+00 3.91234248e-01
 8.59855196e+00 4.90838911e-01]
E = -507.64015575680116
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="BFGS",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((14, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.6988712134173084e+06,1.1747178033543271e+06,2.9367945083858178e+05,7.3419865393677101e+04,1.8353927627435987e+04,2.2341424145819028e+03,4.5688904996449571e+02,1.2173317272260677e+02,3.7593061247508530e+01,4.7412722556720146e+00,3.9120358491841306e-01,8.5986297237246045e+00,4.9084868336327880e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "12s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:19:16 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  18795484.8537        1
[INPUT] 0    0    [1    /1   ]  4698871.21328        1
[INPUT] 0    0    [1    /1   ]  1174717.80329        1
[INPUT] 0    0    [1    /1   ]  293679.372242        1
[INPUT] 0    0    [1    /1   ]  73420.12217          1
[INPUT] 0    0    [1    /1   ]  18306.0304468        1
[INPUT] 0    0    [1    /1   ]  2299.05235411        1
[INPUT] 0    0    [1    /1   ]  467.343459863        1
[INPUT] 0    0    [1    /1   ]  123.557594874        1
[INPUT] 0    0    [1    /1   ]  37.9027383799        1
[INPUT] 0    0    [1    /1   ]  4.74271765478        1
[INPUT] 0    0    [1    /1   ]  0.391234248323       1
[INPUT] 1    0    [1    /1   ]  8.59855195993        1
[INPUT] 1    0    [1    /1   ]  0.490838911091       1

nuclear repulsion = 0
number of shells = 14
number of NR pGTOs = 18
number of NR cGTOs = 18
basis = {'Ar': [[0, [18795484.853670076, 1.0]], [0, [4698871.213282935, 1.0]], [0, [1174717.803292711, 1.0]], [0, [293679.37224236573, 1.0]], [0, [73420.12217000683, 1.0]], [0, [18306.030446816505, 1.0]], [0, [2299.0523541148245, 1.0]], [0, [467.3434598626108, 1.0]], [0, [123.55759487375951, 1.0]], [0, [37.90273837989715, 1.0]], [0, [4.742717654783908, 1.0]], [0, [0.3912342483228703, 1.0]], [1, [8.59855195992895, 1.0]], [1, [0.4908389110909492, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [18795484.85367008]
bas 1, expnt(s) = [4698871.21328294]
bas 2, expnt(s) = [1174717.80329271]
bas 3, expnt(s) = [293679.37224237]
bas 4, expnt(s) = [73420.12217001]
bas 5, expnt(s) = [18306.03044682]
bas 6, expnt(s) = [2299.05235411]
bas 7, expnt(s) = [467.34345986]
bas 8, expnt(s) = [123.55759487]
bas 9, expnt(s) = [37.90273838]
bas 10, expnt(s) = [4.74271765]
bas 11, expnt(s) = [0.39123425]
bas 12, expnt(s) = [8.59855196]
bas 13, expnt(s) = [0.49083891]
CPU time:       335.21
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  0  1  1  0 42 43  0]
 [ 0  0  1  1  0 44 45  0]
 [ 0  0  1  1  0 46 47  0]
 [ 0  1  1  1  0 48 49  0]
 [ 0  1  1  1  0 50 51  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.87954849e+07 7.21199097e+05 4.69887121e+06 2.54982386e+05
 1.17471780e+06 9.01498871e+04 2.93679372e+05 3.18727919e+04
 7.34201222e+04 1.12687658e+04 1.83060304e+04 3.97613077e+03
 2.29905235e+03 8.38835246e+02 4.67343460e+02 2.53946453e+02
 1.23557595e+02 9.36304496e+01 3.79027384e+01 3.85938376e+01
 4.74271765e+00 8.11961575e+00 3.91234248e-01 1.24980620e+00
 8.59855196e+00 4.29552294e+01 4.90838911e-01 1.19855543e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.31994054970246
cond(S) = 56.37706820726493
E1 = -688.8484527400545  E_coul = 184.91608095160672
init E= -503.932371788448
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.68090973927018  LUMO = 86.5267128210566
  mo_energy =
[-1.21650669e+02 -1.32810657e+01 -7.62149884e+00 -7.62149884e+00
 -7.62149884e+00 -1.65076834e+00 -6.80909739e-01 -6.80909739e-01
 -6.80909739e-01  8.65267128e+01  6.92120361e+02  4.04475403e+03
  2.98178255e+04  1.54849820e+05  6.64955934e+05  2.71967731e+06
  1.10460086e+07  4.65101249e+07]
E1 = -706.5863163395231  E_coul = 198.94657757695325
cycle= 1 E= -507.63973876257  delta_E= -3.71  |g|= 0.316  |ddm|= 0.301
    CPU time for cycle= 1      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.419438
diis-c [-0.17592833  1.        ]
  HOMO = -0.236261424550197  LUMO = 87.8614787851043
  mo_energy =
[-1.20262813e+02 -1.22529052e+01 -6.65293357e+00 -6.65293357e+00
 -6.65293357e+00 -1.16348307e+00 -2.36261425e-01 -2.36261425e-01
 -2.36261425e-01  8.78614788e+01  6.93490348e+02  4.04600356e+03
  2.98189148e+04  1.54850839e+05  6.64956923e+05  2.71967828e+06
  1.10460096e+07  4.65101259e+07]
E1 = -706.5556473340519  E_coul = 198.91549168274847
cycle= 2 E= -507.640155651303  delta_E= -0.000417  |g|= 0.00468  |ddm|= 0.0139
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00497568
diis-c [-2.47033436e-05 -5.54433571e-04  1.00055443e+00]
  HOMO = -0.236431471983306  LUMO = 87.8580090080977
  mo_energy =
[-1.20271271e+02 -1.22540603e+01 -6.65472312e+00 -6.65472312e+00
 -6.65472312e+00 -1.16354593e+00 -2.36431472e-01 -2.36431472e-01
 -2.36431472e-01  8.78580090e+01  6.93479897e+02  4.04598788e+03
  2.98188959e+04  1.54850819e+05  6.64956903e+05  2.71967826e+06
  1.10460096e+07  4.65101258e+07]
E1 = -706.5552225202897  E_coul = 198.91506676352608
cycle= 3 E= -507.640155756764  delta_E= -1.05e-07  |g|= 9.25e-05  |ddm|= 0.000194
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.000123807
diis-c [-3.76022321e-10  3.35396184e-05 -2.52009408e-02  1.02516740e+00]
  HOMO = -0.236433588914393  LUMO = 87.8579658168304
  mo_energy =
[-1.20271380e+02 -1.22540755e+01 -6.65474898e+00 -6.65474898e+00
 -6.65474898e+00 -1.16354656e+00 -2.36433589e-01 -2.36433589e-01
 -2.36433589e-01  8.78579658e+01  6.93479785e+02  4.04598774e+03
  2.98188957e+04  1.54850819e+05  6.64956903e+05  2.71967826e+06
  1.10460096e+07  4.65101258e+07]
E1 = -706.5552156304295  E_coul = 198.91505987362845
cycle= 4 E= -507.640155756801  delta_E= -3.74e-11  |g|= 3.59e-07  |ddm|= 3.29e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.5552156304295  E_coul = 198.91505987362845
  HOMO = -0.236433573499074  LUMO = 87.8579661437682
  mo_energy =
[-1.20271379e+02 -1.22540753e+01 -6.65474883e+00 -6.65474883e+00
 -6.65474883e+00 -1.16354655e+00 -2.36433573e-01 -2.36433573e-01
 -2.36433573e-01  8.78579661e+01  6.93479786e+02  4.04598774e+03
  2.98188957e+04  1.54850819e+05  6.64956903e+05  2.71967826e+06
  1.10460096e+07  4.65101258e+07]
E1 = -706.5552156653478  E_coul = 198.91505990854657
Extra cycle  E= -507.640155756801  delta_E= -1.14e-13  |g|= 6.15e-09  |ddm|= 1.54e-08
    CPU time for scf_cycle      0.10 sec, wall time      0.11 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 56.37706820726493
E1 = -706.5552156653478  E_coul = 198.91505990854657
init E= -507.640155756801
    CPU time for initialize scf      0.12 sec, wall time      0.12 sec
  HOMO = -0.236433573320541  LUMO = 87.8579661477073
  mo_energy =
[-1.20271379e+02 -1.22540753e+01 -6.65474883e+00 -6.65474883e+00
 -6.65474883e+00 -1.16354655e+00 -2.36433573e-01 -2.36433573e-01
 -2.36433573e-01  8.78579661e+01  6.93479786e+02  4.04598774e+03
  2.98188957e+04  1.54850819e+05  6.64956903e+05  2.71967826e+06
  1.10460096e+07  4.65101258e+07]
E1 = -706.5552156658711  E_coul = 198.91505990906967
cycle= 1 E= -507.640155756801  delta_E= -2.27e-13  |g|= 3.38e-10  |ddm|= 2.37e-10
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -706.5552156658711  E_coul = 198.91505990906967
  HOMO = -0.23643357331804  LUMO = 87.8579661477639
  mo_energy =
[-1.20271379e+02 -1.22540753e+01 -6.65474883e+00 -6.65474883e+00
 -6.65474883e+00 -1.16354655e+00 -2.36433573e-01 -2.36433573e-01
 -2.36433573e-01  8.78579661e+01  6.93479786e+02  4.04598774e+03
  2.98188957e+04  1.54850819e+05  6.64956903e+05  2.71967826e+06
  1.10460096e+07  4.65101258e+07]
E1 = -706.5552156658794  E_coul = 198.91505990907828
Extra cycle  E= -507.640155756801  delta_E= 3.41e-13  |g|= 3.01e-10  |ddm|= 4.14e-12
    CPU time for scf_cycle      0.19 sec, wall time      0.19 sec
exp = [1.87954849e+07 4.69887121e+06 1.17471780e+06 2.93679372e+05
 7.34201222e+04 1.83060304e+04 2.29905235e+03 4.67343460e+02
 1.23557595e+02 3.79027384e+01 4.74271765e+00 3.91234248e-01
 8.59855196e+00 4.90838911e-01]
grad_E = [-1.43287937e-13  1.58722467e-11 -8.32969733e-12  9.31655672e-09
 -3.96452376e-08  5.68073181e-06  4.02511286e-06  6.31629812e-07
  1.51598923e-06  1.85283693e-07 -2.54258000e-06  1.13871437e-05
  3.30285472e-06  2.36383060e-05]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="BFGS",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((14, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.6988712134173084e+06,1.1747178033543271e+06,2.9367945083858178e+05,7.3419865393677101e+04,1.8353927627435987e+04,2.2341424145819028e+03,4.5688904996449571e+02,1.2173317272260677e+02,3.7593061247508530e+01,4.7412722556720146e+00,3.9120358491841306e-01,8.5986297237246045e+00,4.9084868336327880e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "12s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:19:20 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  18795484.8537        1
[INPUT] 0    0    [1    /1   ]  4698871.21328        1
[INPUT] 0    0    [1    /1   ]  1174717.80329        1
[INPUT] 0    0    [1    /1   ]  293679.372301        1
[INPUT] 0    0    [1    /1   ]  73420.1219825        1
[INPUT] 0    0    [1    /1   ]  18306.0659613        1
[INPUT] 0    0    [1    /1   ]  2298.99951105        1
[INPUT] 0    0    [1    /1   ]  467.342495953        1
[INPUT] 0    0    [1    /1   ]  123.559343748        1
[INPUT] 0    0    [1    /1   ]  37.9032323537        1
[INPUT] 0    0    [1    /1   ]  4.7427162123         1
[INPUT] 0    0    [1    /1   ]  0.391234579609       1
[INPUT] 1    0    [1    /1   ]  8.59855417344        1
[INPUT] 1    0    [1    /1   ]  0.490839256047       1

nuclear repulsion = 0
number of shells = 14
number of NR pGTOs = 18
number of NR cGTOs = 18
basis = {'Ar': [[0, [18795484.853670076, 1.0]], [0, [4698871.213283035, 1.0]], [0, [1174717.8032927616, 1.0]], [0, [293679.37230064056, 1.0]], [0, [73420.12198248265, 1.0]], [0, [18306.06596134263, 1.0]], [0, [2298.9995110468562, 1.0]], [0, [467.34249595336274, 1.0]], [0, [123.55934374815178, 1.0]], [0, [37.90323235369808, 1.0]], [0, [4.742716212301032, 1.0]], [0, [0.3912345796086989, 1.0]], [1, [8.598554173443969, 1.0]], [1, [0.4908392560473419, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [18795484.85367008]
bas 1, expnt(s) = [4698871.21328303]
bas 2, expnt(s) = [1174717.80329276]
bas 3, expnt(s) = [293679.37230064]
bas 4, expnt(s) = [73420.12198248]
bas 5, expnt(s) = [18306.06596134]
bas 6, expnt(s) = [2298.99951105]
bas 7, expnt(s) = [467.34249595]
bas 8, expnt(s) = [123.55934375]
bas 9, expnt(s) = [37.90323235]
bas 10, expnt(s) = [4.74271621]
bas 11, expnt(s) = [0.39123458]
bas 12, expnt(s) = [8.59855417]
bas 13, expnt(s) = [0.49083926]
CPU time:       338.99
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  0  1  1  0 42 43  0]
 [ 0  0  1  1  0 44 45  0]
 [ 0  0  1  1  0 46 47  0]
 [ 0  1  1  1  0 48 49  0]
 [ 0  1  1  1  0 50 51  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.87954849e+07 7.21199097e+05 4.69887121e+06 2.54982386e+05
 1.17471780e+06 9.01498871e+04 2.93679372e+05 3.18727919e+04
 7.34201220e+04 1.12687657e+04 1.83060660e+04 3.97613656e+03
 2.29899951e+03 8.38820785e+02 4.67342496e+02 2.53946060e+02
 1.23559344e+02 9.36314435e+01 3.79032324e+01 3.85942148e+01
 4.74271621e+00 8.11961390e+00 3.91234580e-01 1.24980699e+00
 8.59855417e+00 4.29552432e+01 4.90839256e-01 1.19855648e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319940051495966
cond(S) = 56.377260375941084
E1 = -688.8484568361691  E_coul = 184.91610732373798
init E= -503.932349512431
    CPU time for initialize scf      0.03 sec, wall time      0.03 sec
  HOMO = -0.68090920522494  LUMO = 86.5284738284087
  mo_energy =
[-1.21650665e+02 -1.32810642e+01 -7.62149702e+00 -7.62149702e+00
 -7.62149702e+00 -1.65076802e+00 -6.80909205e-01 -6.80909205e-01
 -6.80909205e-01  8.65284738e+01  6.92126011e+02  4.04470181e+03
  2.98176972e+04  1.54849752e+05  6.64955899e+05  2.71967728e+06
  1.10460086e+07  4.65101249e+07]
E1 = -706.586351281129  E_coul = 198.9466124987313
cycle= 1 E= -507.639738782398  delta_E= -3.71  |g|= 0.316  |ddm|= 0.301
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.419439
diis-c [-0.17592911  1.        ]
  HOMO = -0.236260458219363  LUMO = 87.8632424720317
  mo_energy =
[-1.20262808e+02 -1.22529031e+01 -6.65293125e+00 -6.65293125e+00
 -6.65293125e+00 -1.16348231e+00 -2.36260458e-01 -2.36260458e-01
 -2.36260458e-01  8.78632425e+01  6.93495999e+02  4.04595135e+03
  2.98187865e+04  1.54850771e+05  6.64956888e+05  2.71967826e+06
  1.10460096e+07  4.65101258e+07]
E1 = -706.5556831526246  E_coul = 198.9155274937278
cycle= 2 E= -507.640155658897  delta_E= -0.000417  |g|= 0.00468  |ddm|= 0.0139
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00497561
diis-c [-2.47026847e-05 -5.54529560e-04  1.00055453e+00]
  HOMO = -0.236430500055973  LUMO = 87.8597727556789
  mo_energy =
[-1.20271266e+02 -1.22540582e+01 -6.65472075e+00 -6.65472075e+00
 -6.65472075e+00 -1.16354517e+00 -2.36430500e-01 -2.36430500e-01
 -2.36430500e-01  8.78597728e+01  6.93485549e+02  4.04593567e+03
  2.98187676e+04  1.54850751e+05  6.64956868e+05  2.71967824e+06
  1.10460096e+07  4.65101258e+07]
E1 = -706.5552583561738  E_coul = 198.91510259182218
cycle= 3 E= -507.640155764352  delta_E= -1.05e-07  |g|= 9.25e-05  |ddm|= 0.000194
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.000123804
diis-c [-3.76008829e-10  3.35387460e-05 -2.52005788e-02  1.02516704e+00]
  HOMO = -0.236432616876568  LUMO = 87.8597295662089
  mo_energy =
[-1.20271375e+02 -1.22540733e+01 -6.65474661e+00 -6.65474661e+00
 -6.65474661e+00 -1.16354580e+00 -2.36432617e-01 -2.36432617e-01
 -2.36432617e-01  8.78597296e+01  6.93485436e+02  4.04593553e+03
  2.98187675e+04  1.54850751e+05  6.64956868e+05  2.71967823e+06
  1.10460096e+07  4.65101258e+07]
E1 = -706.5552514667239  E_coul = 198.9150957023348
cycle= 4 E= -507.640155764389  delta_E= -3.75e-11  |g|= 3.59e-07  |ddm|= 3.28e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.5552514667239  E_coul = 198.9150957023348
  HOMO = -0.236432601462067  LUMO = 87.8597298931369
  mo_energy =
[-1.20271374e+02 -1.22540732e+01 -6.65474645e+00 -6.65474645e+00
 -6.65474645e+00 -1.16354579e+00 -2.36432601e-01 -2.36432601e-01
 -2.36432601e-01  8.78597299e+01  6.93485437e+02  4.04593553e+03
  2.98187675e+04  1.54850751e+05  6.64956868e+05  2.71967823e+06
  1.10460096e+07  4.65101258e+07]
E1 = -706.5552515016395  E_coul = 198.9150957372505
Extra cycle  E= -507.640155764389  delta_E= 5.68e-14  |g|= 6.15e-09  |ddm|= 1.54e-08
    CPU time for scf_cycle      0.10 sec, wall time      0.11 sec
exp = [1.87954849e+07 4.69887121e+06 1.17471780e+06 2.93679372e+05
 7.34201220e+04 1.83060660e+04 2.29899951e+03 4.67342496e+02
 1.23559344e+02 3.79032324e+01 4.74271621e+00 3.91234580e-01
 8.59855417e+00 4.90839256e-01]
E = -507.640155764389
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="BFGS",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((14, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.6988712134173084e+06,1.1747178033543271e+06,2.9367945083858178e+05,7.3419865393677101e+04,1.8353927627435987e+04,2.2341424145819028e+03,4.5688904996449571e+02,1.2173317272260677e+02,3.7593061247508530e+01,4.7412722556720146e+00,3.9120358491841306e-01,8.5986297237246045e+00,4.9084868336327880e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "12s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:19:21 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  18795484.8537        1
[INPUT] 0    0    [1    /1   ]  4698871.21328        1
[INPUT] 0    0    [1    /1   ]  1174717.80329        1
[INPUT] 0    0    [1    /1   ]  293679.372301        1
[INPUT] 0    0    [1    /1   ]  73420.1219825        1
[INPUT] 0    0    [1    /1   ]  18306.0659613        1
[INPUT] 0    0    [1    /1   ]  2298.99951105        1
[INPUT] 0    0    [1    /1   ]  467.342495953        1
[INPUT] 0    0    [1    /1   ]  123.559343748        1
[INPUT] 0    0    [1    /1   ]  37.9032323537        1
[INPUT] 0    0    [1    /1   ]  4.7427162123         1
[INPUT] 0    0    [1    /1   ]  0.391234579609       1
[INPUT] 1    0    [1    /1   ]  8.59855417344        1
[INPUT] 1    0    [1    /1   ]  0.490839256047       1

nuclear repulsion = 0
number of shells = 14
number of NR pGTOs = 18
number of NR cGTOs = 18
basis = {'Ar': [[0, [18795484.853670076, 1.0]], [0, [4698871.213283035, 1.0]], [0, [1174717.8032927616, 1.0]], [0, [293679.37230064056, 1.0]], [0, [73420.12198248265, 1.0]], [0, [18306.06596134263, 1.0]], [0, [2298.9995110468562, 1.0]], [0, [467.34249595336274, 1.0]], [0, [123.55934374815178, 1.0]], [0, [37.90323235369808, 1.0]], [0, [4.742716212301032, 1.0]], [0, [0.3912345796086989, 1.0]], [1, [8.598554173443969, 1.0]], [1, [0.4908392560473419, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [18795484.85367008]
bas 1, expnt(s) = [4698871.21328303]
bas 2, expnt(s) = [1174717.80329276]
bas 3, expnt(s) = [293679.37230064]
bas 4, expnt(s) = [73420.12198248]
bas 5, expnt(s) = [18306.06596134]
bas 6, expnt(s) = [2298.99951105]
bas 7, expnt(s) = [467.34249595]
bas 8, expnt(s) = [123.55934375]
bas 9, expnt(s) = [37.90323235]
bas 10, expnt(s) = [4.74271621]
bas 11, expnt(s) = [0.39123458]
bas 12, expnt(s) = [8.59855417]
bas 13, expnt(s) = [0.49083926]
CPU time:       340.03
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  0  1  1  0 42 43  0]
 [ 0  0  1  1  0 44 45  0]
 [ 0  0  1  1  0 46 47  0]
 [ 0  1  1  1  0 48 49  0]
 [ 0  1  1  1  0 50 51  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.87954849e+07 7.21199097e+05 4.69887121e+06 2.54982386e+05
 1.17471780e+06 9.01498871e+04 2.93679372e+05 3.18727919e+04
 7.34201220e+04 1.12687657e+04 1.83060660e+04 3.97613656e+03
 2.29899951e+03 8.38820785e+02 4.67342496e+02 2.53946060e+02
 1.23559344e+02 9.36314435e+01 3.79032324e+01 3.85942148e+01
 4.74271621e+00 8.11961390e+00 3.91234580e-01 1.24980699e+00
 8.59855417e+00 4.29552432e+01 4.90839256e-01 1.19855648e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319940051495966
cond(S) = 56.377260375941084
E1 = -688.8484568361691  E_coul = 184.91610732373798
init E= -503.932349512431
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.68090920522494  LUMO = 86.5284738284087
  mo_energy =
[-1.21650665e+02 -1.32810642e+01 -7.62149702e+00 -7.62149702e+00
 -7.62149702e+00 -1.65076802e+00 -6.80909205e-01 -6.80909205e-01
 -6.80909205e-01  8.65284738e+01  6.92126011e+02  4.04470181e+03
  2.98176972e+04  1.54849752e+05  6.64955899e+05  2.71967728e+06
  1.10460086e+07  4.65101249e+07]
E1 = -706.586351281129  E_coul = 198.9466124987313
cycle= 1 E= -507.639738782398  delta_E= -3.71  |g|= 0.316  |ddm|= 0.301
    CPU time for cycle= 1      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.419439
diis-c [-0.17592911  1.        ]
  HOMO = -0.236260458219363  LUMO = 87.8632424720317
  mo_energy =
[-1.20262808e+02 -1.22529031e+01 -6.65293125e+00 -6.65293125e+00
 -6.65293125e+00 -1.16348231e+00 -2.36260458e-01 -2.36260458e-01
 -2.36260458e-01  8.78632425e+01  6.93495999e+02  4.04595135e+03
  2.98187865e+04  1.54850771e+05  6.64956888e+05  2.71967826e+06
  1.10460096e+07  4.65101258e+07]
E1 = -706.5556831526246  E_coul = 198.9155274937278
cycle= 2 E= -507.640155658897  delta_E= -0.000417  |g|= 0.00468  |ddm|= 0.0139
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00497561
diis-c [-2.47026847e-05 -5.54529560e-04  1.00055453e+00]
  HOMO = -0.236430500055973  LUMO = 87.8597727556789
  mo_energy =
[-1.20271266e+02 -1.22540582e+01 -6.65472075e+00 -6.65472075e+00
 -6.65472075e+00 -1.16354517e+00 -2.36430500e-01 -2.36430500e-01
 -2.36430500e-01  8.78597728e+01  6.93485549e+02  4.04593567e+03
  2.98187676e+04  1.54850751e+05  6.64956868e+05  2.71967824e+06
  1.10460096e+07  4.65101258e+07]
E1 = -706.5552583561738  E_coul = 198.91510259182218
cycle= 3 E= -507.640155764352  delta_E= -1.05e-07  |g|= 9.25e-05  |ddm|= 0.000194
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.000123804
diis-c [-3.76008829e-10  3.35387460e-05 -2.52005788e-02  1.02516704e+00]
  HOMO = -0.236432616876568  LUMO = 87.8597295662089
  mo_energy =
[-1.20271375e+02 -1.22540733e+01 -6.65474661e+00 -6.65474661e+00
 -6.65474661e+00 -1.16354580e+00 -2.36432617e-01 -2.36432617e-01
 -2.36432617e-01  8.78597296e+01  6.93485436e+02  4.04593553e+03
  2.98187675e+04  1.54850751e+05  6.64956868e+05  2.71967823e+06
  1.10460096e+07  4.65101258e+07]
E1 = -706.5552514667239  E_coul = 198.9150957023348
cycle= 4 E= -507.640155764389  delta_E= -3.75e-11  |g|= 3.59e-07  |ddm|= 3.28e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.5552514667239  E_coul = 198.9150957023348
  HOMO = -0.236432601462067  LUMO = 87.8597298931369
  mo_energy =
[-1.20271374e+02 -1.22540732e+01 -6.65474645e+00 -6.65474645e+00
 -6.65474645e+00 -1.16354579e+00 -2.36432601e-01 -2.36432601e-01
 -2.36432601e-01  8.78597299e+01  6.93485437e+02  4.04593553e+03
  2.98187675e+04  1.54850751e+05  6.64956868e+05  2.71967823e+06
  1.10460096e+07  4.65101258e+07]
E1 = -706.5552515016395  E_coul = 198.9150957372505
Extra cycle  E= -507.640155764389  delta_E= 5.68e-14  |g|= 6.15e-09  |ddm|= 1.54e-08
    CPU time for scf_cycle      0.10 sec, wall time      0.11 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 56.377260375941084
E1 = -706.5552515016395  E_coul = 198.9150957372505
init E= -507.640155764389
    CPU time for initialize scf      0.12 sec, wall time      0.12 sec
  HOMO = -0.236432601283558  LUMO = 87.8597298970767
  mo_energy =
[-1.20271374e+02 -1.22540732e+01 -6.65474645e+00 -6.65474645e+00
 -6.65474645e+00 -1.16354579e+00 -2.36432601e-01 -2.36432601e-01
 -2.36432601e-01  8.78597299e+01  6.93485437e+02  4.04593553e+03
  2.98187675e+04  1.54850751e+05  6.64956868e+05  2.71967823e+06
  1.10460096e+07  4.65101258e+07]
E1 = -706.5552515021619  E_coul = 198.9150957377733
cycle= 1 E= -507.640155764389  delta_E= 3.98e-13  |g|= 1.6e-10  |ddm|= 2.37e-10
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -706.5552515021619  E_coul = 198.9150957377733
  HOMO = -0.236432601281062  LUMO = 87.8597298971332
  mo_energy =
[-1.20271374e+02 -1.22540732e+01 -6.65474645e+00 -6.65474645e+00
 -6.65474645e+00 -1.16354579e+00 -2.36432601e-01 -2.36432601e-01
 -2.36432601e-01  8.78597299e+01  6.93485437e+02  4.04593553e+03
  2.98187675e+04  1.54850751e+05  6.64956868e+05  2.71967823e+06
  1.10460096e+07  4.65101258e+07]
E1 = -706.5552515021711  E_coul = 198.91509573778222
Extra cycle  E= -507.640155764389  delta_E= -2.84e-13  |g|= 9.31e-11  |ddm|= 4.16e-12
    CPU time for scf_cycle      0.20 sec, wall time      0.21 sec
exp = [1.87954849e+07 4.69887121e+06 1.17471780e+06 2.93679372e+05
 7.34201220e+04 1.83060660e+04 2.29899951e+03 4.67342496e+02
 1.23559344e+02 3.79032324e+01 4.74271621e+00 3.91234580e-01
 8.59855417e+00 4.90839256e-01]
grad_E = [-1.43259763e-13  1.58742527e-11 -8.31471598e-12  9.31770325e-09
 -3.96408274e-08  5.68145783e-06  4.00448533e-06  5.78738481e-07
  2.18743614e-06  2.71675063e-07 -3.79048246e-06  1.69658563e-05
  4.91913358e-06  3.52239734e-05]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="BFGS",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((14, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.6988712134173084e+06,1.1747178033543271e+06,2.9367945083858178e+05,7.3419865393677101e+04,1.8353927627435987e+04,2.2341424145819028e+03,4.5688904996449571e+02,1.2173317272260677e+02,3.7593061247508530e+01,4.7412722556720146e+00,3.9120358491841306e-01,8.5986297237246045e+00,4.9084868336327880e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "12s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:19:24 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  18795484.8537        1
[INPUT] 0    0    [1    /1   ]  4698871.21328        1
[INPUT] 0    0    [1    /1   ]  1174717.80329        1
[INPUT] 0    0    [1    /1   ]  293679.372383        1
[INPUT] 0    0    [1    /1   ]  73420.1217172        1
[INPUT] 0    0    [1    /1   ]  18306.1164295        1
[INPUT] 0    0    [1    /1   ]  2298.92283427        1
[INPUT] 0    0    [1    /1   ]  467.341093567        1
[INPUT] 0    0    [1    /1   ]  123.561879529        1
[INPUT] 0    0    [1    /1   ]  37.903948647         1
[INPUT] 0    0    [1    /1   ]  4.74271411987        1
[INPUT] 0    0    [1    /1   ]  0.391235060037       1
[INPUT] 1    0    [1    /1   ]  8.5985573834         1
[INPUT] 1    0    [1    /1   ]  0.490839756295       1

nuclear repulsion = 0
number of shells = 14
number of NR pGTOs = 18
number of NR cGTOs = 18
basis = {'Ar': [[0, [18795484.853670076, 1.0]], [0, [4698871.2132831765, 1.0]], [0, [1174717.8032928354, 1.0]], [0, [293679.37238345307, 1.0]], [0, [73420.1217172143, 1.0]], [0, [18306.116429539506, 1.0]], [0, [2298.922834270279, 1.0]], [0, [467.34109356729414, 1.0]], [0, [123.56187952862084, 1.0]], [0, [37.90394864702056, 1.0]], [0, [4.742714119867864, 1.0]], [0, [0.39123506003748226, 1.0]], [1, [8.59855738339776, 1.0]], [1, [0.4908397562954576, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [18795484.85367008]
bas 1, expnt(s) = [4698871.21328318]
bas 2, expnt(s) = [1174717.80329284]
bas 3, expnt(s) = [293679.37238345]
bas 4, expnt(s) = [73420.12171721]
bas 5, expnt(s) = [18306.11642954]
bas 6, expnt(s) = [2298.92283427]
bas 7, expnt(s) = [467.34109357]
bas 8, expnt(s) = [123.56187953]
bas 9, expnt(s) = [37.90394865]
bas 10, expnt(s) = [4.74271412]
bas 11, expnt(s) = [0.39123506]
bas 12, expnt(s) = [8.59855738]
bas 13, expnt(s) = [0.49083976]
CPU time:       343.83
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  0  1  1  0 42 43  0]
 [ 0  0  1  1  0 44 45  0]
 [ 0  0  1  1  0 46 47  0]
 [ 0  1  1  1  0 48 49  0]
 [ 0  1  1  1  0 50 51  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.87954849e+07 7.21199097e+05 4.69887121e+06 2.54982386e+05
 1.17471780e+06 9.01498871e+04 2.93679372e+05 3.18727919e+04
 7.34201217e+04 1.12687657e+04 1.83061164e+04 3.97614478e+03
 2.29892283e+03 8.38799803e+02 4.67341094e+02 2.53945489e+02
 1.23561880e+02 9.36328847e+01 3.79039486e+01 3.85947619e+01
 4.74271412e+00 8.11961121e+00 3.91235060e-01 1.24980814e+00
 8.59855738e+00 4.29552633e+01 4.90839756e-01 1.19855801e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319939329011437
cond(S) = 56.37753809368699
E1 = -688.8484627873114  E_coul = 184.9161455677065
init E= -503.932317219605
    CPU time for initialize scf      0.02 sec, wall time      0.03 sec
  HOMO = -0.680908430760113  LUMO = 86.5310272951491
  mo_energy =
[-1.21650659e+02 -1.32810620e+01 -7.62149438e+00 -7.62149438e+00
 -7.62149438e+00 -1.65076755e+00 -6.80908431e-01 -6.80908431e-01
 -6.80908431e-01  8.65310273e+01  6.92134198e+02  4.04462602e+03
  2.98175100e+04  1.54849650e+05  6.64955844e+05  2.71967724e+06
  1.10460086e+07  4.65101248e+07]
E1 = -706.586401955032  E_coul = 198.9466631420779
cycle= 1 E= -507.639738812954  delta_E= -3.71  |g|= 0.316  |ddm|= 0.301
    CPU time for cycle= 1      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.41944
diis-c [-0.17593024  1.        ]
  HOMO = -0.236259056864961  LUMO = 87.8657998242752
  mo_energy =
[-1.20262801e+02 -1.22529001e+01 -6.65292789e+00 -6.65292789e+00
 -6.65292789e+00 -1.16348122e+00 -2.36259057e-01 -2.36259057e-01
 -2.36259057e-01  8.78657998e+01  6.93504189e+02  4.04587556e+03
  2.98185993e+04  1.54850669e+05  6.64956833e+05  2.71967821e+06
  1.10460095e+07  4.65101258e+07]
E1 = -706.555735098064  E_coul = 198.91557942634986
cycle= 2 E= -507.640155671714  delta_E= -0.000417  |g|= 0.00468  |ddm|= 0.0139
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00497552
diis-c [-2.47017298e-05 -5.54668591e-04  1.00055467e+00]
  HOMO = -0.236429090587203  LUMO = 87.8623301958671
  mo_energy =
[-1.20271258e+02 -1.22540551e+01 -6.65471730e+00 -6.65471730e+00
 -6.65471730e+00 -1.16354408e+00 -2.36429091e-01 -2.36429091e-01
 -2.36429091e-01  8.78623302e+01  6.93493739e+02  4.04585989e+03
  2.98185804e+04  1.54850649e+05  6.64956813e+05  2.71967819e+06
  1.10460095e+07  4.65101258e+07]
E1 = -706.555310326712  E_coul = 198.91515454955112
cycle= 3 E= -507.640155777161  delta_E= -1.05e-07  |g|= 9.25e-05  |ddm|= 0.000194
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.000123799
diis-c [-3.75977492e-10  3.35391733e-05 -2.52000773e-02  1.02516654e+00]
  HOMO = -0.236431207247389  LUMO = 87.8622870089995
  mo_energy =
[-1.20271367e+02 -1.22540702e+01 -6.65474316e+00 -6.65474316e+00
 -6.65474316e+00 -1.16354471e+00 -2.36431207e-01 -2.36431207e-01
 -2.36431207e-01  8.78622870e+01  6.93493626e+02  4.04585975e+03
  2.98185802e+04  1.54850649e+05  6.64956813e+05  2.71967819e+06
  1.10460095e+07  4.65101258e+07]
E1 = -706.555303437859  E_coul = 198.91514766066035
cycle= 4 E= -507.640155777199  delta_E= -3.79e-11  |g|= 3.59e-07  |ddm|= 3.28e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.555303437859  E_coul = 198.91514766066035
  HOMO = -0.236431191834324  LUMO = 87.8622873359108
  mo_energy =
[-1.20271367e+02 -1.22540701e+01 -6.65474301e+00 -6.65474301e+00
 -6.65474301e+00 -1.16354470e+00 -2.36431192e-01 -2.36431192e-01
 -2.36431192e-01  8.78622873e+01  6.93493627e+02  4.04585975e+03
  2.98185802e+04  1.54850649e+05  6.64956813e+05  2.71967819e+06
  1.10460095e+07  4.65101258e+07]
E1 = -706.5553034727715  E_coul = 198.91514769557264
Extra cycle  E= -507.640155777199  delta_E= -1.71e-13  |g|= 6.15e-09  |ddm|= 1.54e-08
    CPU time for scf_cycle      0.10 sec, wall time      0.11 sec
exp = [1.87954849e+07 4.69887121e+06 1.17471780e+06 2.93679372e+05
 7.34201217e+04 1.83061164e+04 2.29892283e+03 4.67341094e+02
 1.23561880e+02 3.79039486e+01 4.74271412e+00 3.91235060e-01
 8.59855738e+00 4.90839756e-01]
E = -507.64015577719886
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="BFGS",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((14, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.6988712134173084e+06,1.1747178033543271e+06,2.9367945083858178e+05,7.3419865393677101e+04,1.8353927627435987e+04,2.2341424145819028e+03,4.5688904996449571e+02,1.2173317272260677e+02,3.7593061247508530e+01,4.7412722556720146e+00,3.9120358491841306e-01,8.5986297237246045e+00,4.9084868336327880e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "12s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:19:26 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  18795484.8537        1
[INPUT] 0    0    [1    /1   ]  4698871.21328        1
[INPUT] 0    0    [1    /1   ]  1174717.80329        1
[INPUT] 0    0    [1    /1   ]  293679.372383        1
[INPUT] 0    0    [1    /1   ]  73420.1217172        1
[INPUT] 0    0    [1    /1   ]  18306.1164295        1
[INPUT] 0    0    [1    /1   ]  2298.92283427        1
[INPUT] 0    0    [1    /1   ]  467.341093567        1
[INPUT] 0    0    [1    /1   ]  123.561879529        1
[INPUT] 0    0    [1    /1   ]  37.903948647         1
[INPUT] 0    0    [1    /1   ]  4.74271411987        1
[INPUT] 0    0    [1    /1   ]  0.391235060037       1
[INPUT] 1    0    [1    /1   ]  8.5985573834         1
[INPUT] 1    0    [1    /1   ]  0.490839756295       1

nuclear repulsion = 0
number of shells = 14
number of NR pGTOs = 18
number of NR cGTOs = 18
basis = {'Ar': [[0, [18795484.853670076, 1.0]], [0, [4698871.2132831765, 1.0]], [0, [1174717.8032928354, 1.0]], [0, [293679.37238345307, 1.0]], [0, [73420.1217172143, 1.0]], [0, [18306.116429539506, 1.0]], [0, [2298.922834270279, 1.0]], [0, [467.34109356729414, 1.0]], [0, [123.56187952862084, 1.0]], [0, [37.90394864702056, 1.0]], [0, [4.742714119867864, 1.0]], [0, [0.39123506003748226, 1.0]], [1, [8.59855738339776, 1.0]], [1, [0.4908397562954576, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [18795484.85367008]
bas 1, expnt(s) = [4698871.21328318]
bas 2, expnt(s) = [1174717.80329284]
bas 3, expnt(s) = [293679.37238345]
bas 4, expnt(s) = [73420.12171721]
bas 5, expnt(s) = [18306.11642954]
bas 6, expnt(s) = [2298.92283427]
bas 7, expnt(s) = [467.34109357]
bas 8, expnt(s) = [123.56187953]
bas 9, expnt(s) = [37.90394865]
bas 10, expnt(s) = [4.74271412]
bas 11, expnt(s) = [0.39123506]
bas 12, expnt(s) = [8.59855738]
bas 13, expnt(s) = [0.49083976]
CPU time:       344.87
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  0  1  1  0 42 43  0]
 [ 0  0  1  1  0 44 45  0]
 [ 0  0  1  1  0 46 47  0]
 [ 0  1  1  1  0 48 49  0]
 [ 0  1  1  1  0 50 51  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.87954849e+07 7.21199097e+05 4.69887121e+06 2.54982386e+05
 1.17471780e+06 9.01498871e+04 2.93679372e+05 3.18727919e+04
 7.34201217e+04 1.12687657e+04 1.83061164e+04 3.97614478e+03
 2.29892283e+03 8.38799803e+02 4.67341094e+02 2.53945489e+02
 1.23561880e+02 9.36328847e+01 3.79039486e+01 3.85947619e+01
 4.74271412e+00 8.11961121e+00 3.91235060e-01 1.24980814e+00
 8.59855738e+00 4.29552633e+01 4.90839756e-01 1.19855801e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319939329011437
cond(S) = 56.37753809368699
E1 = -688.8484627873114  E_coul = 184.9161455677065
init E= -503.932317219605
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.680908430760113  LUMO = 86.5310272951491
  mo_energy =
[-1.21650659e+02 -1.32810620e+01 -7.62149438e+00 -7.62149438e+00
 -7.62149438e+00 -1.65076755e+00 -6.80908431e-01 -6.80908431e-01
 -6.80908431e-01  8.65310273e+01  6.92134198e+02  4.04462602e+03
  2.98175100e+04  1.54849650e+05  6.64955844e+05  2.71967724e+06
  1.10460086e+07  4.65101248e+07]
E1 = -706.586401955032  E_coul = 198.9466631420779
cycle= 1 E= -507.639738812954  delta_E= -3.71  |g|= 0.316  |ddm|= 0.301
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.41944
diis-c [-0.17593024  1.        ]
  HOMO = -0.236259056864961  LUMO = 87.8657998242752
  mo_energy =
[-1.20262801e+02 -1.22529001e+01 -6.65292789e+00 -6.65292789e+00
 -6.65292789e+00 -1.16348122e+00 -2.36259057e-01 -2.36259057e-01
 -2.36259057e-01  8.78657998e+01  6.93504189e+02  4.04587556e+03
  2.98185993e+04  1.54850669e+05  6.64956833e+05  2.71967821e+06
  1.10460095e+07  4.65101258e+07]
E1 = -706.555735098064  E_coul = 198.91557942634986
cycle= 2 E= -507.640155671714  delta_E= -0.000417  |g|= 0.00468  |ddm|= 0.0139
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00497552
diis-c [-2.47017298e-05 -5.54668591e-04  1.00055467e+00]
  HOMO = -0.236429090587203  LUMO = 87.8623301958671
  mo_energy =
[-1.20271258e+02 -1.22540551e+01 -6.65471730e+00 -6.65471730e+00
 -6.65471730e+00 -1.16354408e+00 -2.36429091e-01 -2.36429091e-01
 -2.36429091e-01  8.78623302e+01  6.93493739e+02  4.04585989e+03
  2.98185804e+04  1.54850649e+05  6.64956813e+05  2.71967819e+06
  1.10460095e+07  4.65101258e+07]
E1 = -706.555310326712  E_coul = 198.91515454955112
cycle= 3 E= -507.640155777161  delta_E= -1.05e-07  |g|= 9.25e-05  |ddm|= 0.000194
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.000123799
diis-c [-3.75977492e-10  3.35391733e-05 -2.52000773e-02  1.02516654e+00]
  HOMO = -0.236431207247389  LUMO = 87.8622870089995
  mo_energy =
[-1.20271367e+02 -1.22540702e+01 -6.65474316e+00 -6.65474316e+00
 -6.65474316e+00 -1.16354471e+00 -2.36431207e-01 -2.36431207e-01
 -2.36431207e-01  8.78622870e+01  6.93493626e+02  4.04585975e+03
  2.98185802e+04  1.54850649e+05  6.64956813e+05  2.71967819e+06
  1.10460095e+07  4.65101258e+07]
E1 = -706.555303437859  E_coul = 198.91514766066035
cycle= 4 E= -507.640155777199  delta_E= -3.79e-11  |g|= 3.59e-07  |ddm|= 3.28e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.555303437859  E_coul = 198.91514766066035
  HOMO = -0.236431191834324  LUMO = 87.8622873359108
  mo_energy =
[-1.20271367e+02 -1.22540701e+01 -6.65474301e+00 -6.65474301e+00
 -6.65474301e+00 -1.16354470e+00 -2.36431192e-01 -2.36431192e-01
 -2.36431192e-01  8.78622873e+01  6.93493627e+02  4.04585975e+03
  2.98185802e+04  1.54850649e+05  6.64956813e+05  2.71967819e+06
  1.10460095e+07  4.65101258e+07]
E1 = -706.5553034727715  E_coul = 198.91514769557264
Extra cycle  E= -507.640155777199  delta_E= -1.71e-13  |g|= 6.15e-09  |ddm|= 1.54e-08
    CPU time for scf_cycle      0.10 sec, wall time      0.11 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 56.37753809368699
E1 = -706.5553034727715  E_coul = 198.91514769557264
init E= -507.640155777199
    CPU time for initialize scf      0.12 sec, wall time      0.12 sec
  HOMO = -0.236431191655826  LUMO = 87.8622873398535
  mo_energy =
[-1.20271367e+02 -1.22540701e+01 -6.65474300e+00 -6.65474300e+00
 -6.65474300e+00 -1.16354470e+00 -2.36431192e-01 -2.36431192e-01
 -2.36431192e-01  8.78622873e+01  6.93493627e+02  4.04585975e+03
  2.98185802e+04  1.54850649e+05  6.64956813e+05  2.71967819e+06
  1.10460095e+07  4.65101258e+07]
E1 = -706.5553034732936  E_coul = 198.91514769609503
cycle= 1 E= -507.640155777199  delta_E= 2.27e-13  |g|= 2.06e-10  |ddm|= 2.37e-10
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -706.5553034732936  E_coul = 198.91514769609503
  HOMO = -0.236431191653327  LUMO = 87.8622873399071
  mo_energy =
[-1.20271367e+02 -1.22540701e+01 -6.65474300e+00 -6.65474300e+00
 -6.65474300e+00 -1.16354470e+00 -2.36431192e-01 -2.36431192e-01
 -2.36431192e-01  8.78622873e+01  6.93493627e+02  4.04585975e+03
  2.98185802e+04  1.54850649e+05  6.64956813e+05  2.71967819e+06
  1.10460095e+07  4.65101258e+07]
E1 = -706.555303473303  E_coul = 198.91514769610447
Extra cycle  E= -507.640155777199  delta_E= 1.14e-13  |g|= 8.51e-11  |ddm|= 4.25e-12
    CPU time for scf_cycle      0.19 sec, wall time      0.20 sec
exp = [1.87954849e+07 4.69887121e+06 1.17471780e+06 2.93679372e+05
 7.34201217e+04 1.83061164e+04 2.29892283e+03 4.67341094e+02
 1.23561880e+02 3.79039486e+01 4.74271412e+00 3.91235060e-01
 8.59855738e+00 4.90839756e-01]
grad_E = [-1.43218939e-13  1.58771589e-11 -8.29300901e-12  9.31936434e-09
 -3.96344432e-08  5.68251096e-06  3.97457111e-06  5.02040279e-07
  3.16113935e-06  3.97003374e-07 -5.60014100e-06  2.50559513e-05
  7.26302382e-06  5.20252260e-05]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="BFGS",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((14, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.6988712134173084e+06,1.1747178033543271e+06,2.9367945083858178e+05,7.3419865393677101e+04,1.8353927627435987e+04,2.2341424145819028e+03,4.5688904996449571e+02,1.2173317272260677e+02,3.7593061247508530e+01,4.7412722556720146e+00,3.9120358491841306e-01,8.5986297237246045e+00,4.9084868336327880e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "12s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:19:29 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  18795484.8537        1
[INPUT] 0    0    [1    /1   ]  4698871.21328        1
[INPUT] 0    0    [1    /1   ]  1174717.80329        1
[INPUT] 0    0    [1    /1   ]  293679.372491        1
[INPUT] 0    0    [1    /1   ]  73420.1213752        1
[INPUT] 0    0    [1    /1   ]  18306.1819711        1
[INPUT] 0    0    [1    /1   ]  2298.82003117        1
[INPUT] 0    0    [1    /1   ]  467.339206272        1
[INPUT] 0    0    [1    /1   ]  123.565275765        1
[INPUT] 0    0    [1    /1   ]  37.9049080957        1
[INPUT] 0    0    [1    /1   ]  4.74271131573        1
[INPUT] 0    0    [1    /1   ]  0.391235703635       1
[INPUT] 1    0    [1    /1   ]  8.5985616834         1
[INPUT] 1    0    [1    /1   ]  0.490840426431       1

nuclear repulsion = 0
number of shells = 14
number of NR pGTOs = 18
number of NR cGTOs = 18
basis = {'Ar': [[0, [18795484.853670076, 1.0]], [0, [4698871.21328336, 1.0]], [0, [1174717.8032929355, 1.0]], [0, [293679.37249100034, 1.0]], [0, [73420.12137519116, 1.0]], [0, [18306.18197107969, 1.0]], [0, [2298.8200311652313, 1.0]], [0, [467.3392062717491, 1.0]], [0, [123.56527576482162, 1.0]], [0, [37.9049080957006, 1.0]], [0, [4.742711315729822, 1.0]], [0, [0.39123570363498067, 1.0]], [1, [8.598561683399115, 1.0]], [1, [0.4908404264307092, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [18795484.85367008]
bas 1, expnt(s) = [4698871.21328336]
bas 2, expnt(s) = [1174717.80329294]
bas 3, expnt(s) = [293679.372491]
bas 4, expnt(s) = [73420.12137519]
bas 5, expnt(s) = [18306.18197108]
bas 6, expnt(s) = [2298.82003117]
bas 7, expnt(s) = [467.33920627]
bas 8, expnt(s) = [123.56527576]
bas 9, expnt(s) = [37.9049081]
bas 10, expnt(s) = [4.74271132]
bas 11, expnt(s) = [0.3912357]
bas 12, expnt(s) = [8.59856168]
bas 13, expnt(s) = [0.49084043]
CPU time:       348.67
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  0  1  1  0 42 43  0]
 [ 0  0  1  1  0 44 45  0]
 [ 0  0  1  1  0 46 47  0]
 [ 0  1  1  1  0 48 49  0]
 [ 0  1  1  1  0 50 51  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.87954849e+07 7.21199097e+05 4.69887121e+06 2.54982386e+05
 1.17471780e+06 9.01498871e+04 2.93679372e+05 3.18727919e+04
 7.34201214e+04 1.12687657e+04 1.83061820e+04 3.97615545e+03
 2.29882003e+03 8.38771671e+02 4.67339206e+02 2.53944720e+02
 1.23565276e+02 9.36348149e+01 3.79049081e+01 3.85954946e+01
 4.74271132e+00 8.11960761e+00 3.91235704e-01 1.24980968e+00
 8.59856168e+00 4.29552901e+01 4.90840426e-01 1.19856005e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319938361173755
cond(S) = 56.37790819543535
E1 = -688.8484707848403  E_coul = 184.9161967989237
init E= -503.932273985917
    CPU time for initialize scf      0.03 sec, wall time      0.03 sec
  HOMO = -0.680907393273966  LUMO = 86.5344473814414
  mo_energy =
[-1.21650651e+02 -1.32810591e+01 -7.62149085e+00 -7.62149085e+00
 -7.62149085e+00 -1.65076692e+00 -6.80907393e-01 -6.80907393e-01
 -6.80907393e-01  8.65344474e+01  6.92145156e+02  4.04452436e+03
  2.98172567e+04  1.54849507e+05  6.64955764e+05  2.71967718e+06
  1.10460085e+07  4.65101248e+07]
E1 = -706.586469842979  E_coul = 198.94673098490168
cycle= 1 E= -507.639738858077  delta_E= -3.71  |g|= 0.316  |ddm|= 0.301
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.419442
diis-c [-0.17593175  1.        ]
  HOMO = -0.236257179598355  LUMO = 87.8692251149166
  mo_energy =
[-1.20262792e+02 -1.22528960e+01 -6.65292338e+00 -6.65292338e+00
 -6.65292338e+00 -1.16347976e+00 -2.36257180e-01 -2.36257180e-01
 -2.36257180e-01  8.78692251e+01  6.93515150e+02  4.04577391e+03
  2.98183461e+04  1.54850526e+05  6.64956752e+05  2.71967815e+06
  1.10460095e+07  4.65101258e+07]
E1 = -706.5558046889628  E_coul = 198.9156489958835
cycle= 2 E= -507.640155693079  delta_E= -0.000417  |g|= 0.00468  |ddm|= 0.0139
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00497539
diis-c [-2.47004508e-05 -5.54854510e-04  1.00055485e+00]
  HOMO = -0.236427202453342  LUMO = 87.8657556043001
  mo_energy =
[-1.20271249e+02 -1.22540510e+01 -6.65471269e+00 -6.65471269e+00
 -6.65471269e+00 -1.16354261e+00 -2.36427202e-01 -2.36427202e-01
 -2.36427202e-01  8.78657556e+01  6.93504700e+02  4.04575823e+03
  2.98183271e+04  1.54850506e+05  6.64956733e+05  2.71967813e+06
  1.10460095e+07  4.65101257e+07]
E1 = -706.5553799512264  E_coul = 198.91522415271
cycle= 3 E= -507.640155798516  delta_E= -1.05e-07  |g|= 9.25e-05  |ddm|= 0.000194
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.000123792
diis-c [-3.75944851e-10  3.35385667e-05 -2.51993951e-02  1.02516586e+00]
  HOMO = -0.236429318898927  LUMO = 87.8657124209202
  mo_energy =
[-1.20271358e+02 -1.22540661e+01 -6.65473854e+00 -6.65473854e+00
 -6.65473854e+00 -1.16354324e+00 -2.36429319e-01 -2.36429319e-01
 -2.36429319e-01  8.78657124e+01  6.93504587e+02  4.04575810e+03
  2.98183270e+04  1.54850506e+05  6.64956732e+05  2.71967813e+06
  1.10460095e+07  4.65101257e+07]
E1 = -706.55537306317  E_coul = 198.91521726461636
cycle= 4 E= -507.640155798554  delta_E= -3.73e-11  |g|= 3.59e-07  |ddm|= 3.28e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.55537306317  E_coul = 198.91521726461636
  HOMO = -0.236429303487608  LUMO = 87.8657127478066
  mo_energy =
[-1.20271357e+02 -1.22540660e+01 -6.65473839e+00 -6.65473839e+00
 -6.65473839e+00 -1.16354323e+00 -2.36429303e-01 -2.36429303e-01
 -2.36429303e-01  8.78657127e+01  6.93504588e+02  4.04575810e+03
  2.98183270e+04  1.54850506e+05  6.64956732e+05  2.71967813e+06
  1.10460095e+07  4.65101257e+07]
E1 = -706.5553730980788  E_coul = 198.91521729952498
Extra cycle  E= -507.640155798554  delta_E= -1.14e-13  |g|= 6.15e-09  |ddm|= 1.54e-08
    CPU time for scf_cycle      0.11 sec, wall time      0.11 sec
exp = [1.87954849e+07 4.69887121e+06 1.17471780e+06 2.93679372e+05
 7.34201214e+04 1.83061820e+04 2.29882003e+03 4.67339206e+02
 1.23565276e+02 3.79049081e+01 4.74271132e+00 3.91235704e-01
 8.59856168e+00 4.90840426e-01]
E = -507.6401557985538
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="BFGS",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((14, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.6988712134173084e+06,1.1747178033543271e+06,2.9367945083858178e+05,7.3419865393677101e+04,1.8353927627435987e+04,2.2341424145819028e+03,4.5688904996449571e+02,1.2173317272260677e+02,3.7593061247508530e+01,4.7412722556720146e+00,3.9120358491841306e-01,8.5986297237246045e+00,4.9084868336327880e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "12s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:19:30 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  18795484.8537        1
[INPUT] 0    0    [1    /1   ]  4698871.21328        1
[INPUT] 0    0    [1    /1   ]  1174717.80329        1
[INPUT] 0    0    [1    /1   ]  293679.372491        1
[INPUT] 0    0    [1    /1   ]  73420.1213752        1
[INPUT] 0    0    [1    /1   ]  18306.1819711        1
[INPUT] 0    0    [1    /1   ]  2298.82003117        1
[INPUT] 0    0    [1    /1   ]  467.339206272        1
[INPUT] 0    0    [1    /1   ]  123.565275765        1
[INPUT] 0    0    [1    /1   ]  37.9049080957        1
[INPUT] 0    0    [1    /1   ]  4.74271131573        1
[INPUT] 0    0    [1    /1   ]  0.391235703635       1
[INPUT] 1    0    [1    /1   ]  8.5985616834         1
[INPUT] 1    0    [1    /1   ]  0.490840426431       1

nuclear repulsion = 0
number of shells = 14
number of NR pGTOs = 18
number of NR cGTOs = 18
basis = {'Ar': [[0, [18795484.853670076, 1.0]], [0, [4698871.21328336, 1.0]], [0, [1174717.8032929355, 1.0]], [0, [293679.37249100034, 1.0]], [0, [73420.12137519116, 1.0]], [0, [18306.18197107969, 1.0]], [0, [2298.8200311652313, 1.0]], [0, [467.3392062717491, 1.0]], [0, [123.56527576482162, 1.0]], [0, [37.9049080957006, 1.0]], [0, [4.742711315729822, 1.0]], [0, [0.39123570363498067, 1.0]], [1, [8.598561683399115, 1.0]], [1, [0.4908404264307092, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [18795484.85367008]
bas 1, expnt(s) = [4698871.21328336]
bas 2, expnt(s) = [1174717.80329294]
bas 3, expnt(s) = [293679.372491]
bas 4, expnt(s) = [73420.12137519]
bas 5, expnt(s) = [18306.18197108]
bas 6, expnt(s) = [2298.82003117]
bas 7, expnt(s) = [467.33920627]
bas 8, expnt(s) = [123.56527576]
bas 9, expnt(s) = [37.9049081]
bas 10, expnt(s) = [4.74271132]
bas 11, expnt(s) = [0.3912357]
bas 12, expnt(s) = [8.59856168]
bas 13, expnt(s) = [0.49084043]
CPU time:       349.73
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  0  1  1  0 42 43  0]
 [ 0  0  1  1  0 44 45  0]
 [ 0  0  1  1  0 46 47  0]
 [ 0  1  1  1  0 48 49  0]
 [ 0  1  1  1  0 50 51  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.87954849e+07 7.21199097e+05 4.69887121e+06 2.54982386e+05
 1.17471780e+06 9.01498871e+04 2.93679372e+05 3.18727919e+04
 7.34201214e+04 1.12687657e+04 1.83061820e+04 3.97615545e+03
 2.29882003e+03 8.38771671e+02 4.67339206e+02 2.53944720e+02
 1.23565276e+02 9.36348149e+01 3.79049081e+01 3.85954946e+01
 4.74271132e+00 8.11960761e+00 3.91235704e-01 1.24980968e+00
 8.59856168e+00 4.29552901e+01 4.90840426e-01 1.19856005e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319938361173755
cond(S) = 56.37790819543535
E1 = -688.8484707848403  E_coul = 184.9161967989237
init E= -503.932273985917
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.680907393273966  LUMO = 86.5344473814414
  mo_energy =
[-1.21650651e+02 -1.32810591e+01 -7.62149085e+00 -7.62149085e+00
 -7.62149085e+00 -1.65076692e+00 -6.80907393e-01 -6.80907393e-01
 -6.80907393e-01  8.65344474e+01  6.92145156e+02  4.04452436e+03
  2.98172567e+04  1.54849507e+05  6.64955764e+05  2.71967718e+06
  1.10460085e+07  4.65101248e+07]
E1 = -706.586469842979  E_coul = 198.94673098490168
cycle= 1 E= -507.639738858077  delta_E= -3.71  |g|= 0.316  |ddm|= 0.301
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.419442
diis-c [-0.17593175  1.        ]
  HOMO = -0.236257179598355  LUMO = 87.8692251149166
  mo_energy =
[-1.20262792e+02 -1.22528960e+01 -6.65292338e+00 -6.65292338e+00
 -6.65292338e+00 -1.16347976e+00 -2.36257180e-01 -2.36257180e-01
 -2.36257180e-01  8.78692251e+01  6.93515150e+02  4.04577391e+03
  2.98183461e+04  1.54850526e+05  6.64956752e+05  2.71967815e+06
  1.10460095e+07  4.65101258e+07]
E1 = -706.5558046889628  E_coul = 198.9156489958835
cycle= 2 E= -507.640155693079  delta_E= -0.000417  |g|= 0.00468  |ddm|= 0.0139
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00497539
diis-c [-2.47004508e-05 -5.54854510e-04  1.00055485e+00]
  HOMO = -0.236427202453342  LUMO = 87.8657556043001
  mo_energy =
[-1.20271249e+02 -1.22540510e+01 -6.65471269e+00 -6.65471269e+00
 -6.65471269e+00 -1.16354261e+00 -2.36427202e-01 -2.36427202e-01
 -2.36427202e-01  8.78657556e+01  6.93504700e+02  4.04575823e+03
  2.98183271e+04  1.54850506e+05  6.64956733e+05  2.71967813e+06
  1.10460095e+07  4.65101257e+07]
E1 = -706.5553799512264  E_coul = 198.91522415271
cycle= 3 E= -507.640155798516  delta_E= -1.05e-07  |g|= 9.25e-05  |ddm|= 0.000194
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.000123792
diis-c [-3.75944851e-10  3.35385667e-05 -2.51993951e-02  1.02516586e+00]
  HOMO = -0.236429318898927  LUMO = 87.8657124209202
  mo_energy =
[-1.20271358e+02 -1.22540661e+01 -6.65473854e+00 -6.65473854e+00
 -6.65473854e+00 -1.16354324e+00 -2.36429319e-01 -2.36429319e-01
 -2.36429319e-01  8.78657124e+01  6.93504587e+02  4.04575810e+03
  2.98183270e+04  1.54850506e+05  6.64956732e+05  2.71967813e+06
  1.10460095e+07  4.65101257e+07]
E1 = -706.55537306317  E_coul = 198.91521726461636
cycle= 4 E= -507.640155798554  delta_E= -3.73e-11  |g|= 3.59e-07  |ddm|= 3.28e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.55537306317  E_coul = 198.91521726461636
  HOMO = -0.236429303487608  LUMO = 87.8657127478066
  mo_energy =
[-1.20271357e+02 -1.22540660e+01 -6.65473839e+00 -6.65473839e+00
 -6.65473839e+00 -1.16354323e+00 -2.36429303e-01 -2.36429303e-01
 -2.36429303e-01  8.78657127e+01  6.93504588e+02  4.04575810e+03
  2.98183270e+04  1.54850506e+05  6.64956732e+05  2.71967813e+06
  1.10460095e+07  4.65101257e+07]
E1 = -706.5553730980788  E_coul = 198.91521729952498
Extra cycle  E= -507.640155798554  delta_E= -1.14e-13  |g|= 6.15e-09  |ddm|= 1.54e-08
    CPU time for scf_cycle      0.10 sec, wall time      0.11 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 56.37790819543535
E1 = -706.5553730980788  E_coul = 198.91521729952498
init E= -507.640155798554
    CPU time for initialize scf      0.13 sec, wall time      0.13 sec
  HOMO = -0.236429303309129  LUMO = 87.865712751747
  mo_energy =
[-1.20271357e+02 -1.22540660e+01 -6.65473839e+00 -6.65473839e+00
 -6.65473839e+00 -1.16354323e+00 -2.36429303e-01 -2.36429303e-01
 -2.36429303e-01  8.78657128e+01  6.93504588e+02  4.04575810e+03
  2.98183270e+04  1.54850506e+05  6.64956732e+05  2.71967813e+06
  1.10460095e+07  4.65101257e+07]
E1 = -706.5553730986018  E_coul = 198.91521730004763
cycle= 1 E= -507.640155798554  delta_E= -3.41e-13  |g|= 1.89e-10  |ddm|= 2.37e-10
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -706.5553730986018  E_coul = 198.91521730004763
  HOMO = -0.23642930330663  LUMO = 87.8657127518026
  mo_energy =
[-1.20271357e+02 -1.22540660e+01 -6.65473839e+00 -6.65473839e+00
 -6.65473839e+00 -1.16354323e+00 -2.36429303e-01 -2.36429303e-01
 -2.36429303e-01  8.78657128e+01  6.93504588e+02  4.04575810e+03
  2.98183270e+04  1.54850506e+05  6.64956732e+05  2.71967813e+06
  1.10460095e+07  4.65101257e+07]
E1 = -706.5553730986105  E_coul = 198.91521730005655
Extra cycle  E= -507.640155798554  delta_E= 1.71e-13  |g|= 2.63e-10  |ddm|= 4.18e-12
    CPU time for scf_cycle      0.20 sec, wall time      0.21 sec
exp = [1.87954849e+07 4.69887121e+06 1.17471780e+06 2.93679372e+05
 7.34201214e+04 1.83061820e+04 2.29882003e+03 4.67339206e+02
 1.23565276e+02 3.79049081e+01 4.74271132e+00 3.91235704e-01
 8.59856168e+00 4.90840426e-01]
grad_E = [-1.43164323e-13  1.58810461e-11 -8.26396914e-12  9.32158628e-09
 -3.96259140e-08  5.68392219e-06  3.93449835e-06  3.99288546e-07
  4.46556605e-06  5.64843591e-07 -8.02441544e-06  3.58934948e-05
  1.04028912e-05  7.45322327e-05]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="BFGS",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((14, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.6988712134173084e+06,1.1747178033543271e+06,2.9367945083858178e+05,7.3419865393677101e+04,1.8353927627435987e+04,2.2341424145819028e+03,4.5688904996449571e+02,1.2173317272260677e+02,3.7593061247508530e+01,4.7412722556720146e+00,3.9120358491841306e-01,8.5986297237246045e+00,4.9084868336327880e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "12s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:19:42 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  18795484.8537        1
[INPUT] 0    0    [1    /1   ]  4698871.21328        1
[INPUT] 0    0    [1    /1   ]  1174717.80329        1
[INPUT] 0    0    [1    /1   ]  293679.372616        1
[INPUT] 0    0    [1    /1   ]  73420.1209836        1
[INPUT] 0    0    [1    /1   ]  18306.2579294        1
[INPUT] 0    0    [1    /1   ]  2298.69466194        1
[INPUT] 0    0    [1    /1   ]  467.33689073         1
[INPUT] 0    0    [1    /1   ]  123.569410473        1
[INPUT] 0    0    [1    /1   ]  37.9060763727        1
[INPUT] 0    0    [1    /1   ]  4.74270789836        1
[INPUT] 0    0    [1    /1   ]  0.391236487501       1
[INPUT] 1    0    [1    /1   ]  8.59856692038        1
[INPUT] 1    0    [1    /1   ]  0.490841242607       1

nuclear repulsion = 0
number of shells = 14
number of NR pGTOs = 18
number of NR cGTOs = 18
basis = {'Ar': [[0, [18795484.853670076, 1.0]], [0, [4698871.213283573, 1.0]], [0, [1174717.8032930598, 1.0]], [0, [293679.37261564273, 1.0]], [0, [73420.1209835835, 1.0]], [0, [18306.25792942833, 1.0]], [0, [2298.6946619419964, 1.0]], [0, [467.33689073032275, 1.0]], [0, [123.56941047348045, 1.0]], [0, [37.90607637271626, 1.0]], [0, [4.742707898362573, 1.0]], [0, [0.39123648750085865, 1.0]], [1, [8.598566920380746, 1.0]], [1, [0.49084124260650785, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [18795484.85367008]
bas 1, expnt(s) = [4698871.21328357]
bas 2, expnt(s) = [1174717.80329306]
bas 3, expnt(s) = [293679.37261564]
bas 4, expnt(s) = [73420.12098358]
bas 5, expnt(s) = [18306.25792943]
bas 6, expnt(s) = [2298.69466194]
bas 7, expnt(s) = [467.33689073]
bas 8, expnt(s) = [123.56941047]
bas 9, expnt(s) = [37.90607637]
bas 10, expnt(s) = [4.7427079]
bas 11, expnt(s) = [0.39123649]
bas 12, expnt(s) = [8.59856692]
bas 13, expnt(s) = [0.49084124]
CPU time:       355.15
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  0  1  1  0 42 43  0]
 [ 0  0  1  1  0 44 45  0]
 [ 0  0  1  1  0 46 47  0]
 [ 0  1  1  1  0 48 49  0]
 [ 0  1  1  1  0 50 51  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.87954849e+07 7.21199097e+05 4.69887121e+06 2.54982386e+05
 1.17471780e+06 9.01498871e+04 2.93679373e+05 3.18727919e+04
 7.34201210e+04 1.12687656e+04 1.83062579e+04 3.97616783e+03
 2.29869466e+03 8.38737363e+02 4.67336891e+02 2.53943776e+02
 1.23569410e+02 9.36371648e+01 3.79060764e+01 3.85963867e+01
 4.74270790e+00 8.11960322e+00 3.91236488e-01 1.24981156e+00
 8.59856692e+00 4.29553228e+01 4.90841243e-01 1.19856254e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.31993718244381
cond(S) = 56.3783552662093
E1 = -688.8484805811916  E_coul = 184.9162591933913
init E= -503.9322213878
    CPU time for initialize scf      0.04 sec, wall time      0.06 sec
  HOMO = -0.680906129677411  LUMO = 86.538611467497
  mo_energy =
[-1.21650641e+02 -1.32810555e+01 -7.62148655e+00 -7.62148655e+00
 -7.62148655e+00 -1.65076615e+00 -6.80906130e-01 -6.80906130e-01
 -6.80906130e-01  8.65386115e+01  6.92158482e+02  4.04440030e+03
  2.98169437e+04  1.54849321e+05  6.64955651e+05  2.71967709e+06
  1.10460084e+07  4.65101247e+07]
E1 = -706.5865525361548  E_coul = 198.94681361271
cycle= 1 E= -507.639738923445  delta_E= -3.71  |g|= 0.316  |ddm|= 0.301
    CPU time for cycle= 1      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.419444
diis-c [-0.17593359  1.        ]
  HOMO = -0.236254893231609  LUMO = 87.8733955377889
  mo_energy =
[-1.20262781e+02 -1.22528911e+01 -6.65291790e+00 -6.65291790e+00
 -6.65291790e+00 -1.16347798e+00 -2.36254893e-01 -2.36254893e-01
 -2.36254893e-01  8.78733955e+01  6.93528478e+02  4.04564986e+03
  2.98180331e+04  1.54850340e+05  6.64956640e+05  2.71967806e+06
  1.10460094e+07  4.65101257e+07]
E1 = -706.5558894553385  E_coul = 198.91573372581402
cycle= 2 E= -507.640155729525  delta_E= -0.000417  |g|= 0.00468  |ddm|= 0.0139
    CPU time for cycle= 2      0.03 sec, wall time      0.04 sec
diis-norm(errvec)=0.00497524
diis-c [-2.46988940e-05 -5.55081118e-04  1.00055508e+00]
  HOMO = -0.236424902857154  LUMO = 87.8699261705789
  mo_energy =
[-1.20271237e+02 -1.22540460e+01 -6.65470707e+00 -6.65470707e+00
 -6.65470707e+00 -1.16354082e+00 -2.36424903e-01 -2.36424903e-01
 -2.36424903e-01  8.78699262e+01  6.93518028e+02  4.04563418e+03
  2.98180141e+04  1.54850320e+05  6.64956620e+05  2.71967804e+06
  1.10460094e+07  4.65101257e+07]
E1 = -706.5554647585237  E_coul = 198.9153089235743
cycle= 3 E= -507.640155834949  delta_E= -1.05e-07  |g|= 9.25e-05  |ddm|= 0.000194
    CPU time for cycle= 3      0.03 sec, wall time      0.09 sec
diis-norm(errvec)=0.000123784
diis-c [-3.75896856e-10  3.35388522e-05 -2.51985734e-02  1.02516503e+00]
  HOMO = -0.23642701904131  LUMO = 87.8698829914498
  mo_energy =
[-1.20271346e+02 -1.22540611e+01 -6.65473292e+00 -6.65473292e+00
 -6.65473292e+00 -1.16354145e+00 -2.36427019e-01 -2.36427019e-01
 -2.36427019e-01  8.78698830e+01  6.93517916e+02  4.04563404e+03
  2.98180140e+04  1.54850320e+05  6.64956620e+05  2.71967804e+06
  1.10460094e+07  4.65101257e+07]
E1 = -706.5554578714393  E_coul = 198.91530203645266
cycle= 4 E= -507.640155834987  delta_E= -3.72e-11  |g|= 3.59e-07  |ddm|= 3.28e-06
    CPU time for cycle= 4      0.03 sec, wall time      0.22 sec
E1 = -706.5554578714393  E_coul = 198.91530203645266
  HOMO = -0.236427003632248  LUMO = 87.8698833183074
  mo_energy =
[-1.20271345e+02 -1.22540610e+01 -6.65473276e+00 -6.65473276e+00
 -6.65473276e+00 -1.16354144e+00 -2.36427004e-01 -2.36427004e-01
 -2.36427004e-01  8.78698833e+01  6.93517917e+02  4.04563405e+03
  2.98180140e+04  1.54850320e+05  6.64956620e+05  2.71967804e+06
  1.10460094e+07  4.65101257e+07]
E1 = -706.5554579063423  E_coul = 198.91530207135557
Extra cycle  E= -507.640155834987  delta_E= -1.14e-13  |g|= 6.15e-09  |ddm|= 1.54e-08
    CPU time for scf_cycle      0.19 sec, wall time      0.60 sec
exp = [1.87954849e+07 4.69887121e+06 1.17471780e+06 2.93679373e+05
 7.34201210e+04 1.83062579e+04 2.29869466e+03 4.67336891e+02
 1.23569410e+02 3.79060764e+01 4.74270790e+00 3.91236488e-01
 8.59856692e+00 4.90841243e-01]
E = -507.6401558349868
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="BFGS",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((14, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.6988712134173084e+06,1.1747178033543271e+06,2.9367945083858178e+05,7.3419865393677101e+04,1.8353927627435987e+04,2.2341424145819028e+03,4.5688904996449571e+02,1.2173317272260677e+02,3.7593061247508530e+01,4.7412722556720146e+00,3.9120358491841306e-01,8.5986297237246045e+00,4.9084868336327880e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "12s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:19:47 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  18795484.8537        1
[INPUT] 0    0    [1    /1   ]  4698871.21328        1
[INPUT] 0    0    [1    /1   ]  1174717.80329        1
[INPUT] 0    0    [1    /1   ]  293679.372616        1
[INPUT] 0    0    [1    /1   ]  73420.1209836        1
[INPUT] 0    0    [1    /1   ]  18306.2579294        1
[INPUT] 0    0    [1    /1   ]  2298.69466194        1
[INPUT] 0    0    [1    /1   ]  467.33689073         1
[INPUT] 0    0    [1    /1   ]  123.569410473        1
[INPUT] 0    0    [1    /1   ]  37.9060763727        1
[INPUT] 0    0    [1    /1   ]  4.74270789836        1
[INPUT] 0    0    [1    /1   ]  0.391236487501       1
[INPUT] 1    0    [1    /1   ]  8.59856692038        1
[INPUT] 1    0    [1    /1   ]  0.490841242607       1

nuclear repulsion = 0
number of shells = 14
number of NR pGTOs = 18
number of NR cGTOs = 18
basis = {'Ar': [[0, [18795484.853670076, 1.0]], [0, [4698871.213283573, 1.0]], [0, [1174717.8032930598, 1.0]], [0, [293679.37261564273, 1.0]], [0, [73420.1209835835, 1.0]], [0, [18306.25792942833, 1.0]], [0, [2298.6946619419964, 1.0]], [0, [467.33689073032275, 1.0]], [0, [123.56941047348045, 1.0]], [0, [37.90607637271626, 1.0]], [0, [4.742707898362573, 1.0]], [0, [0.39123648750085865, 1.0]], [1, [8.598566920380746, 1.0]], [1, [0.49084124260650785, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [18795484.85367008]
bas 1, expnt(s) = [4698871.21328357]
bas 2, expnt(s) = [1174717.80329306]
bas 3, expnt(s) = [293679.37261564]
bas 4, expnt(s) = [73420.12098358]
bas 5, expnt(s) = [18306.25792943]
bas 6, expnt(s) = [2298.69466194]
bas 7, expnt(s) = [467.33689073]
bas 8, expnt(s) = [123.56941047]
bas 9, expnt(s) = [37.90607637]
bas 10, expnt(s) = [4.7427079]
bas 11, expnt(s) = [0.39123649]
bas 12, expnt(s) = [8.59856692]
bas 13, expnt(s) = [0.49084124]
CPU time:       356.81
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  0  1  1  0 42 43  0]
 [ 0  0  1  1  0 44 45  0]
 [ 0  0  1  1  0 46 47  0]
 [ 0  1  1  1  0 48 49  0]
 [ 0  1  1  1  0 50 51  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.87954849e+07 7.21199097e+05 4.69887121e+06 2.54982386e+05
 1.17471780e+06 9.01498871e+04 2.93679373e+05 3.18727919e+04
 7.34201210e+04 1.12687656e+04 1.83062579e+04 3.97616783e+03
 2.29869466e+03 8.38737363e+02 4.67336891e+02 2.53943776e+02
 1.23569410e+02 9.36371648e+01 3.79060764e+01 3.85963867e+01
 4.74270790e+00 8.11960322e+00 3.91236488e-01 1.24981156e+00
 8.59856692e+00 4.29553228e+01 4.90841243e-01 1.19856254e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.31993718244381
cond(S) = 56.3783552662093
E1 = -688.8484805811916  E_coul = 184.9162591933913
init E= -503.9322213878
    CPU time for initialize scf      0.03 sec, wall time      0.03 sec
  HOMO = -0.680906129677411  LUMO = 86.538611467497
  mo_energy =
[-1.21650641e+02 -1.32810555e+01 -7.62148655e+00 -7.62148655e+00
 -7.62148655e+00 -1.65076615e+00 -6.80906130e-01 -6.80906130e-01
 -6.80906130e-01  8.65386115e+01  6.92158482e+02  4.04440030e+03
  2.98169437e+04  1.54849321e+05  6.64955651e+05  2.71967709e+06
  1.10460084e+07  4.65101247e+07]
E1 = -706.5865525361548  E_coul = 198.94681361271
cycle= 1 E= -507.639738923445  delta_E= -3.71  |g|= 0.316  |ddm|= 0.301
    CPU time for cycle= 1      0.02 sec, wall time      0.03 sec
diis-norm(errvec)=0.419444
diis-c [-0.17593359  1.        ]
  HOMO = -0.236254893231609  LUMO = 87.8733955377889
  mo_energy =
[-1.20262781e+02 -1.22528911e+01 -6.65291790e+00 -6.65291790e+00
 -6.65291790e+00 -1.16347798e+00 -2.36254893e-01 -2.36254893e-01
 -2.36254893e-01  8.78733955e+01  6.93528478e+02  4.04564986e+03
  2.98180331e+04  1.54850340e+05  6.64956640e+05  2.71967806e+06
  1.10460094e+07  4.65101257e+07]
E1 = -706.5558894553385  E_coul = 198.91573372581402
cycle= 2 E= -507.640155729525  delta_E= -0.000417  |g|= 0.00468  |ddm|= 0.0139
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00497524
diis-c [-2.46988940e-05 -5.55081118e-04  1.00055508e+00]
  HOMO = -0.236424902857154  LUMO = 87.8699261705789
  mo_energy =
[-1.20271237e+02 -1.22540460e+01 -6.65470707e+00 -6.65470707e+00
 -6.65470707e+00 -1.16354082e+00 -2.36424903e-01 -2.36424903e-01
 -2.36424903e-01  8.78699262e+01  6.93518028e+02  4.04563418e+03
  2.98180141e+04  1.54850320e+05  6.64956620e+05  2.71967804e+06
  1.10460094e+07  4.65101257e+07]
E1 = -706.5554647585237  E_coul = 198.9153089235743
cycle= 3 E= -507.640155834949  delta_E= -1.05e-07  |g|= 9.25e-05  |ddm|= 0.000194
    CPU time for cycle= 3      0.03 sec, wall time      0.03 sec
diis-norm(errvec)=0.000123784
diis-c [-3.75896856e-10  3.35388522e-05 -2.51985734e-02  1.02516503e+00]
  HOMO = -0.23642701904131  LUMO = 87.8698829914498
  mo_energy =
[-1.20271346e+02 -1.22540611e+01 -6.65473292e+00 -6.65473292e+00
 -6.65473292e+00 -1.16354145e+00 -2.36427019e-01 -2.36427019e-01
 -2.36427019e-01  8.78698830e+01  6.93517916e+02  4.04563404e+03
  2.98180140e+04  1.54850320e+05  6.64956620e+05  2.71967804e+06
  1.10460094e+07  4.65101257e+07]
E1 = -706.5554578714393  E_coul = 198.91530203645266
cycle= 4 E= -507.640155834987  delta_E= -3.72e-11  |g|= 3.59e-07  |ddm|= 3.28e-06
    CPU time for cycle= 4      0.03 sec, wall time      0.04 sec
E1 = -706.5554578714393  E_coul = 198.91530203645266
  HOMO = -0.236427003632248  LUMO = 87.8698833183074
  mo_energy =
[-1.20271345e+02 -1.22540610e+01 -6.65473276e+00 -6.65473276e+00
 -6.65473276e+00 -1.16354144e+00 -2.36427004e-01 -2.36427004e-01
 -2.36427004e-01  8.78698833e+01  6.93517917e+02  4.04563405e+03
  2.98180140e+04  1.54850320e+05  6.64956620e+05  2.71967804e+06
  1.10460094e+07  4.65101257e+07]
E1 = -706.5554579063423  E_coul = 198.91530207135557
Extra cycle  E= -507.640155834987  delta_E= -1.14e-13  |g|= 6.15e-09  |ddm|= 1.54e-08
    CPU time for scf_cycle      0.15 sec, wall time      0.17 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 56.3783552662093
E1 = -706.5554579063423  E_coul = 198.91530207135557
init E= -507.640155834987
    CPU time for initialize scf      0.24 sec, wall time      0.69 sec
  HOMO = -0.236427003453808  LUMO = 87.8698833222499
  mo_energy =
[-1.20271345e+02 -1.22540610e+01 -6.65473276e+00 -6.65473276e+00
 -6.65473276e+00 -1.16354144e+00 -2.36427003e-01 -2.36427003e-01
 -2.36427003e-01  8.78698833e+01  6.93517917e+02  4.04563405e+03
  2.98180140e+04  1.54850320e+05  6.64956620e+05  2.71967804e+06
  1.10460094e+07  4.65101257e+07]
E1 = -706.555457906864  E_coul = 198.91530207187765
cycle= 1 E= -507.640155834986  delta_E= 3.98e-13  |g|= 2.01e-10  |ddm|= 2.37e-10
    CPU time for cycle= 1      0.02 sec, wall time      0.04 sec
E1 = -706.555457906864  E_coul = 198.91530207187765
  HOMO = -0.236427003451315  LUMO = 87.8698833223051
  mo_energy =
[-1.20271345e+02 -1.22540610e+01 -6.65473276e+00 -6.65473276e+00
 -6.65473276e+00 -1.16354144e+00 -2.36427003e-01 -2.36427003e-01
 -2.36427003e-01  8.78698833e+01  6.93517917e+02  4.04563405e+03
  2.98180140e+04  1.54850320e+05  6.64956620e+05  2.71967804e+06
  1.10460094e+07  4.65101257e+07]
E1 = -706.5554579068729  E_coul = 198.91530207188674
Extra cycle  E= -507.640155834986  delta_E= 2.27e-13  |g|= 2.65e-10  |ddm|= 4.19e-12
    CPU time for scf_cycle      0.38 sec, wall time      0.87 sec
exp = [1.87954849e+07 4.69887121e+06 1.17471780e+06 2.93679373e+05
 7.34201210e+04 1.83062579e+04 2.29869466e+03 4.67336891e+02
 1.23569410e+02 3.79060764e+01 4.74270790e+00 3.91236488e-01
 8.59856692e+00 4.90841243e-01]
grad_E = [-1.43097945e-13  1.58857692e-11 -8.22867692e-12  9.32428622e-09
 -3.96155710e-08  5.68564178e-06  3.88569672e-06  2.74115019e-07
  6.05443573e-06  7.68964680e-07 -1.09771925e-05  4.90928797e-05
  1.42269507e-05  1.01943942e-04]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="BFGS",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((14, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.6988712134173084e+06,1.1747178033543271e+06,2.9367945083858178e+05,7.3419865393677101e+04,1.8353927627435987e+04,2.2341424145819028e+03,4.5688904996449571e+02,1.2173317272260677e+02,3.7593061247508530e+01,4.7412722556720146e+00,3.9120358491841306e-01,8.5986297237246045e+00,4.9084868336327880e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "12s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:19:57 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  18795484.8537        1
[INPUT] 0    0    [1    /1   ]  4698871.21328        1
[INPUT] 0    0    [1    /1   ]  1174717.80329        1
[INPUT] 0    0    [1    /1   ]  293679.372751        1
[INPUT] 0    0    [1    /1   ]  73420.1205655        1
[INPUT] 0    0    [1    /1   ]  18306.3406865        1
[INPUT] 0    0    [1    /1   ]  2298.5469053         1
[INPUT] 0    0    [1    /1   ]  467.334135           1
[INPUT] 0    0    [1    /1   ]  123.574270114        1
[INPUT] 0    0    [1    /1   ]  37.9074499306        1
[INPUT] 0    0    [1    /1   ]  4.74270387467        1
[INPUT] 0    0    [1    /1   ]  0.391237409525       1
[INPUT] 1    0    [1    /1   ]  8.59857308037        1
[INPUT] 1    0    [1    /1   ]  0.49084220265        1

nuclear repulsion = 0
number of shells = 14
number of NR pGTOs = 18
number of NR cGTOs = 18
basis = {'Ar': [[0, [18795484.853670076, 1.0]], [0, [4698871.213283805, 1.0]], [0, [1174717.8032932098, 1.0]], [0, [293679.37275144516, 1.0]], [0, [73420.12056548694, 1.0]], [0, [18306.34068646302, 1.0]], [0, [2298.546905304032, 1.0]], [0, [467.3341350002856, 1.0]], [0, [123.57427011399773, 1.0]], [0, [37.90744993062945, 1.0]], [0, [4.742703874674618, 1.0]], [0, [0.39123740952510694, 1.0]], [1, [8.598573080365313, 1.0]], [1, [0.4908422026502093, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [18795484.85367008]
bas 1, expnt(s) = [4698871.21328381]
bas 2, expnt(s) = [1174717.80329321]
bas 3, expnt(s) = [293679.37275145]
bas 4, expnt(s) = [73420.12056549]
bas 5, expnt(s) = [18306.34068646]
bas 6, expnt(s) = [2298.5469053]
bas 7, expnt(s) = [467.334135]
bas 8, expnt(s) = [123.57427011]
bas 9, expnt(s) = [37.90744993]
bas 10, expnt(s) = [4.74270387]
bas 11, expnt(s) = [0.39123741]
bas 12, expnt(s) = [8.59857308]
bas 13, expnt(s) = [0.4908422]
CPU time:       362.90
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  0  1  1  0 42 43  0]
 [ 0  0  1  1  0 44 45  0]
 [ 0  0  1  1  0 46 47  0]
 [ 0  1  1  1  0 48 49  0]
 [ 0  1  1  1  0 50 51  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.87954849e+07 7.21199097e+05 4.69887121e+06 2.54982386e+05
 1.17471780e+06 9.01498871e+04 2.93679373e+05 3.18727919e+04
 7.34201206e+04 1.12687656e+04 1.83063407e+04 3.97618131e+03
 2.29854691e+03 8.38696928e+02 4.67334135e+02 2.53942653e+02
 1.23574270e+02 9.36399266e+01 3.79074499e+01 3.85974356e+01
 4.74270387e+00 8.11959806e+00 3.91237410e-01 1.24981377e+00
 8.59857308e+00 4.29553613e+01 4.90842203e-01 1.19856547e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319935796012775
cond(S) = 56.378874730900954
E1 = -688.8484922082199  E_coul = 184.9163325831792
init E= -503.932159625041
    CPU time for initialize scf      0.03 sec, wall time      0.03 sec
  HOMO = -0.680904643326592  LUMO = 86.54350638671
  mo_energy =
[-1.21650630e+02 -1.32810512e+01 -7.62148149e+00 -7.62148149e+00
 -7.62148149e+00 -1.65076525e+00 -6.80904643e-01 -6.80904643e-01
 -6.80904643e-01  8.65435064e+01  6.92174114e+02  4.04425392e+03
  2.98165677e+04  1.54849082e+05  6.64955496e+05  2.71967696e+06
  1.10460083e+07  4.65101246e+07]
E1 = -706.5866498263304  E_coul = 198.94691080456042
cycle= 1 E= -507.63973902177  delta_E= -3.71  |g|= 0.316  |ddm|= 0.301
    CPU time for cycle= 1      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.419447
diis-c [-0.17593577  1.        ]
  HOMO = -0.236252203886051  LUMO = 87.8782979069119
  mo_energy =
[-1.20262767e+02 -1.22528853e+01 -6.65291145e+00 -6.65291145e+00
 -6.65291145e+00 -1.16347588e+00 -2.36252204e-01 -2.36252204e-01
 -2.36252204e-01  8.78782979e+01  6.93544113e+02  4.04550349e+03
  2.98176571e+04  1.54850101e+05  6.64956485e+05  2.71967794e+06
  1.10460093e+07  4.65101256e+07]
E1 = -706.5559891822677  E_coul = 198.91583338841127
cycle= 2 E= -507.640155793856  delta_E= -0.000417  |g|= 0.00468  |ddm|= 0.0139
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00497506
diis-c [-2.46970648e-05 -5.55347690e-04  1.00055535e+00]
  HOMO = -0.236422197963203  LUMO = 87.874828708277
  mo_energy =
[-1.20271223e+02 -1.22540400e+01 -6.65470045e+00 -6.65470045e+00
 -6.65470045e+00 -1.16353872e+00 -2.36422198e-01 -2.36422198e-01
 -2.36422198e-01  8.78748287e+01  6.93533665e+02  4.04548782e+03
  2.98176381e+04  1.54850081e+05  6.64956465e+05  2.71967792e+06
  1.10460093e+07  4.65101256e+07]
E1 = -706.5555645335488  E_coul = 198.91540863428213
cycle= 3 E= -507.640155899267  delta_E= -1.05e-07  |g|= 9.25e-05  |ddm|= 0.000194
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.000123775
diis-c [-3.75841252e-10  3.35388987e-05 -2.51975972e-02  1.02516406e+00]
  HOMO = -0.236424313840101  LUMO = 87.874785534144
  mo_energy =
[-1.20271332e+02 -1.22540551e+01 -6.65472630e+00 -6.65472630e+00
 -6.65472630e+00 -1.16353935e+00 -2.36424314e-01 -2.36424314e-01
 -2.36424314e-01  8.78747855e+01  6.93533552e+02  4.04548768e+03
  2.98176380e+04  1.54850081e+05  6.64956465e+05  2.71967792e+06
  1.10460093e+07  4.65101256e+07]
E1 = -706.5555576476052  E_coul = 198.91540174830135
cycle= 4 E= -507.640155899304  delta_E= -3.71e-11  |g|= 3.59e-07  |ddm|= 3.28e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.5555576476052  E_coul = 198.91540174830135
  HOMO = -0.236424298433689  LUMO = 87.8747858609685
  mo_energy =
[-1.20271331e+02 -1.22540550e+01 -6.65472615e+00 -6.65472615e+00
 -6.65472615e+00 -1.16353934e+00 -2.36424298e-01 -2.36424298e-01
 -2.36424298e-01  8.78747859e+01  6.93533553e+02  4.04548768e+03
  2.98176380e+04  1.54850081e+05  6.64956465e+05  2.71967792e+06
  1.10460093e+07  4.65101256e+07]
E1 = -706.5555576825018  E_coul = 198.91540178319792
Extra cycle  E= -507.640155899304  delta_E= -5.68e-14  |g|= 6.15e-09  |ddm|= 1.54e-08
    CPU time for scf_cycle      0.12 sec, wall time      0.13 sec
exp = [1.87954849e+07 4.69887121e+06 1.17471780e+06 2.93679373e+05
 7.34201206e+04 1.83063407e+04 2.29854691e+03 4.67334135e+02
 1.23574270e+02 3.79074499e+01 4.74270387e+00 3.91237410e-01
 8.59857308e+00 4.90842203e-01]
E = -507.64015589930386
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="BFGS",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((14, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.6988712134173084e+06,1.1747178033543271e+06,2.9367945083858178e+05,7.3419865393677101e+04,1.8353927627435987e+04,2.2341424145819028e+03,4.5688904996449571e+02,1.2173317272260677e+02,3.7593061247508530e+01,4.7412722556720146e+00,3.9120358491841306e-01,8.5986297237246045e+00,4.9084868336327880e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "12s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:19:58 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  18795484.8537        1
[INPUT] 0    0    [1    /1   ]  4698871.21328        1
[INPUT] 0    0    [1    /1   ]  1174717.80329        1
[INPUT] 0    0    [1    /1   ]  293679.372751        1
[INPUT] 0    0    [1    /1   ]  73420.1205655        1
[INPUT] 0    0    [1    /1   ]  18306.3406865        1
[INPUT] 0    0    [1    /1   ]  2298.5469053         1
[INPUT] 0    0    [1    /1   ]  467.334135           1
[INPUT] 0    0    [1    /1   ]  123.574270114        1
[INPUT] 0    0    [1    /1   ]  37.9074499306        1
[INPUT] 0    0    [1    /1   ]  4.74270387467        1
[INPUT] 0    0    [1    /1   ]  0.391237409525       1
[INPUT] 1    0    [1    /1   ]  8.59857308037        1
[INPUT] 1    0    [1    /1   ]  0.49084220265        1

nuclear repulsion = 0
number of shells = 14
number of NR pGTOs = 18
number of NR cGTOs = 18
basis = {'Ar': [[0, [18795484.853670076, 1.0]], [0, [4698871.213283805, 1.0]], [0, [1174717.8032932098, 1.0]], [0, [293679.37275144516, 1.0]], [0, [73420.12056548694, 1.0]], [0, [18306.34068646302, 1.0]], [0, [2298.546905304032, 1.0]], [0, [467.3341350002856, 1.0]], [0, [123.57427011399773, 1.0]], [0, [37.90744993062945, 1.0]], [0, [4.742703874674618, 1.0]], [0, [0.39123740952510694, 1.0]], [1, [8.598573080365313, 1.0]], [1, [0.4908422026502093, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [18795484.85367008]
bas 1, expnt(s) = [4698871.21328381]
bas 2, expnt(s) = [1174717.80329321]
bas 3, expnt(s) = [293679.37275145]
bas 4, expnt(s) = [73420.12056549]
bas 5, expnt(s) = [18306.34068646]
bas 6, expnt(s) = [2298.5469053]
bas 7, expnt(s) = [467.334135]
bas 8, expnt(s) = [123.57427011]
bas 9, expnt(s) = [37.90744993]
bas 10, expnt(s) = [4.74270387]
bas 11, expnt(s) = [0.39123741]
bas 12, expnt(s) = [8.59857308]
bas 13, expnt(s) = [0.4908422]
CPU time:       364.08
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  0  1  1  0 42 43  0]
 [ 0  0  1  1  0 44 45  0]
 [ 0  0  1  1  0 46 47  0]
 [ 0  1  1  1  0 48 49  0]
 [ 0  1  1  1  0 50 51  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.87954849e+07 7.21199097e+05 4.69887121e+06 2.54982386e+05
 1.17471780e+06 9.01498871e+04 2.93679373e+05 3.18727919e+04
 7.34201206e+04 1.12687656e+04 1.83063407e+04 3.97618131e+03
 2.29854691e+03 8.38696928e+02 4.67334135e+02 2.53942653e+02
 1.23574270e+02 9.36399266e+01 3.79074499e+01 3.85974356e+01
 4.74270387e+00 8.11959806e+00 3.91237410e-01 1.24981377e+00
 8.59857308e+00 4.29553613e+01 4.90842203e-01 1.19856547e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319935796012775
cond(S) = 56.378874730900954
E1 = -688.8484922082199  E_coul = 184.9163325831792
init E= -503.932159625041
    CPU time for initialize scf      0.03 sec, wall time      0.03 sec
  HOMO = -0.680904643326592  LUMO = 86.54350638671
  mo_energy =
[-1.21650630e+02 -1.32810512e+01 -7.62148149e+00 -7.62148149e+00
 -7.62148149e+00 -1.65076525e+00 -6.80904643e-01 -6.80904643e-01
 -6.80904643e-01  8.65435064e+01  6.92174114e+02  4.04425392e+03
  2.98165677e+04  1.54849082e+05  6.64955496e+05  2.71967696e+06
  1.10460083e+07  4.65101246e+07]
E1 = -706.5866498263304  E_coul = 198.94691080456042
cycle= 1 E= -507.63973902177  delta_E= -3.71  |g|= 0.316  |ddm|= 0.301
    CPU time for cycle= 1      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.419447
diis-c [-0.17593577  1.        ]
  HOMO = -0.236252203886051  LUMO = 87.8782979069119
  mo_energy =
[-1.20262767e+02 -1.22528853e+01 -6.65291145e+00 -6.65291145e+00
 -6.65291145e+00 -1.16347588e+00 -2.36252204e-01 -2.36252204e-01
 -2.36252204e-01  8.78782979e+01  6.93544113e+02  4.04550349e+03
  2.98176571e+04  1.54850101e+05  6.64956485e+05  2.71967794e+06
  1.10460093e+07  4.65101256e+07]
E1 = -706.5559891822677  E_coul = 198.91583338841127
cycle= 2 E= -507.640155793856  delta_E= -0.000417  |g|= 0.00468  |ddm|= 0.0139
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00497506
diis-c [-2.46970648e-05 -5.55347690e-04  1.00055535e+00]
  HOMO = -0.236422197963203  LUMO = 87.874828708277
  mo_energy =
[-1.20271223e+02 -1.22540400e+01 -6.65470045e+00 -6.65470045e+00
 -6.65470045e+00 -1.16353872e+00 -2.36422198e-01 -2.36422198e-01
 -2.36422198e-01  8.78748287e+01  6.93533665e+02  4.04548782e+03
  2.98176381e+04  1.54850081e+05  6.64956465e+05  2.71967792e+06
  1.10460093e+07  4.65101256e+07]
E1 = -706.5555645335488  E_coul = 198.91540863428213
cycle= 3 E= -507.640155899267  delta_E= -1.05e-07  |g|= 9.25e-05  |ddm|= 0.000194
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.000123775
diis-c [-3.75841252e-10  3.35388987e-05 -2.51975972e-02  1.02516406e+00]
  HOMO = -0.236424313840101  LUMO = 87.874785534144
  mo_energy =
[-1.20271332e+02 -1.22540551e+01 -6.65472630e+00 -6.65472630e+00
 -6.65472630e+00 -1.16353935e+00 -2.36424314e-01 -2.36424314e-01
 -2.36424314e-01  8.78747855e+01  6.93533552e+02  4.04548768e+03
  2.98176380e+04  1.54850081e+05  6.64956465e+05  2.71967792e+06
  1.10460093e+07  4.65101256e+07]
E1 = -706.5555576476052  E_coul = 198.91540174830135
cycle= 4 E= -507.640155899304  delta_E= -3.71e-11  |g|= 3.59e-07  |ddm|= 3.28e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.5555576476052  E_coul = 198.91540174830135
  HOMO = -0.236424298433689  LUMO = 87.8747858609685
  mo_energy =
[-1.20271331e+02 -1.22540550e+01 -6.65472615e+00 -6.65472615e+00
 -6.65472615e+00 -1.16353934e+00 -2.36424298e-01 -2.36424298e-01
 -2.36424298e-01  8.78747859e+01  6.93533553e+02  4.04548768e+03
  2.98176380e+04  1.54850081e+05  6.64956465e+05  2.71967792e+06
  1.10460093e+07  4.65101256e+07]
E1 = -706.5555576825018  E_coul = 198.91540178319792
Extra cycle  E= -507.640155899304  delta_E= -5.68e-14  |g|= 6.15e-09  |ddm|= 1.54e-08
    CPU time for scf_cycle      0.13 sec, wall time      0.13 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 56.378874730900954
E1 = -706.5555576825018  E_coul = 198.91540178319792
init E= -507.640155899304
    CPU time for initialize scf      0.14 sec, wall time      0.14 sec
  HOMO = -0.236424298255281  LUMO = 87.8747858649064
  mo_energy =
[-1.20271331e+02 -1.22540550e+01 -6.65472615e+00 -6.65472615e+00
 -6.65472615e+00 -1.16353934e+00 -2.36424298e-01 -2.36424298e-01
 -2.36424298e-01  8.78747859e+01  6.93533553e+02  4.04548768e+03
  2.98176380e+04  1.54850081e+05  6.64956465e+05  2.71967792e+06
  1.10460093e+07  4.65101256e+07]
E1 = -706.5555576830244  E_coul = 198.91540178372057
cycle= 1 E= -507.640155899304  delta_E=    0  |g|= 1.64e-10  |ddm|= 2.37e-10
    CPU time for cycle= 1      0.01 sec, wall time      0.02 sec
E1 = -706.5555576830244  E_coul = 198.91540178372057
  HOMO = -0.236424298252782  LUMO = 87.8747858649652
  mo_energy =
[-1.20271331e+02 -1.22540550e+01 -6.65472615e+00 -6.65472615e+00
 -6.65472615e+00 -1.16353934e+00 -2.36424298e-01 -2.36424298e-01
 -2.36424298e-01  8.78747859e+01  6.93533553e+02  4.04548768e+03
  2.98176380e+04  1.54850081e+05  6.64956465e+05  2.71967792e+06
  1.10460093e+07  4.65101256e+07]
E1 = -706.5555576830328  E_coul = 198.91540178372887
Extra cycle  E= -507.640155899304  delta_E= -1.14e-13  |g|= 1.15e-10  |ddm|= 4.08e-12
    CPU time for scf_cycle      0.22 sec, wall time      0.23 sec
exp = [1.87954849e+07 4.69887121e+06 1.17471780e+06 2.93679373e+05
 7.34201206e+04 1.83063407e+04 2.29854691e+03 4.67334135e+02
 1.23574270e+02 3.79074499e+01 4.74270387e+00 3.91237410e-01
 8.59857308e+00 4.90842203e-01]
grad_E = [-1.43020110e-13  1.58913057e-11 -8.18729624e-12  9.32745152e-09
 -3.96034834e-08  5.68766588e-06  3.82830140e-06  1.26834878e-07
  7.92358317e-06  1.00857979e-06 -1.44506928e-05  6.46188840e-05
  1.87249568e-05  1.34187005e-04]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="BFGS",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((14, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.6988712134173084e+06,1.1747178033543271e+06,2.9367945083858178e+05,7.3419865393677101e+04,1.8353927627435987e+04,2.2341424145819028e+03,4.5688904996449571e+02,1.2173317272260677e+02,3.7593061247508530e+01,4.7412722556720146e+00,3.9120358491841306e-01,8.5986297237246045e+00,4.9084868336327880e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "12s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:20:02 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  18795484.8537        1
[INPUT] 0    0    [1    /1   ]  4698871.21328        1
[INPUT] 0    0    [1    /1   ]  1174717.80329        1
[INPUT] 0    0    [1    /1   ]  293679.372899        1
[INPUT] 0    0    [1    /1   ]  73420.1201255        1
[INPUT] 0    0    [1    /1   ]  18306.4307526        1
[INPUT] 0    0    [1    /1   ]  2298.3664779         1
[INPUT] 0    0    [1    /1   ]  467.330722662        1
[INPUT] 0    0    [1    /1   ]  123.580180512        1
[INPUT] 0    0    [1    /1   ]  37.9091213458        1
[INPUT] 0    0    [1    /1   ]  4.74269896782        1
[INPUT] 0    0    [1    /1   ]  0.3912385323         1
[INPUT] 1    0    [1    /1   ]  8.59858058179        1
[INPUT] 1    0    [1    /1   ]  0.490843371784       1

nuclear repulsion = 0
number of shells = 14
number of NR pGTOs = 18
number of NR cGTOs = 18
basis = {'Ar': [[0, [18795484.853670076, 1.0]], [0, [4698871.2132840585, 1.0]], [0, [1174717.8032933986, 1.0]], [0, [293679.3728992485, 1.0]], [0, [73420.12012550981, 1.0]], [0, [18306.43075256617, 1.0]], [0, [2298.3664778972316, 1.0]], [0, [467.3307226615142, 1.0]], [0, [123.58018051240373, 1.0]], [0, [37.90912134583068, 1.0]], [0, [4.742698967816262, 1.0]], [0, [0.3912385322997196, 1.0]], [1, [8.598580581788417, 1.0]], [1, [0.49084337178415827, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [18795484.85367008]
bas 1, expnt(s) = [4698871.21328406]
bas 2, expnt(s) = [1174717.8032934]
bas 3, expnt(s) = [293679.37289925]
bas 4, expnt(s) = [73420.12012551]
bas 5, expnt(s) = [18306.43075257]
bas 6, expnt(s) = [2298.3664779]
bas 7, expnt(s) = [467.33072266]
bas 8, expnt(s) = [123.58018051]
bas 9, expnt(s) = [37.90912135]
bas 10, expnt(s) = [4.74269897]
bas 11, expnt(s) = [0.39123853]
bas 12, expnt(s) = [8.59858058]
bas 13, expnt(s) = [0.49084337]
CPU time:       368.01
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  0  1  1  0 42 43  0]
 [ 0  0  1  1  0 44 45  0]
 [ 0  0  1  1  0 46 47  0]
 [ 0  1  1  1  0 48 49  0]
 [ 0  1  1  1  0 50 51  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.87954849e+07 7.21199097e+05 4.69887121e+06 2.54982386e+05
 1.17471780e+06 9.01498871e+04 2.93679373e+05 3.18727919e+04
 7.34201201e+04 1.12687655e+04 1.83064308e+04 3.97619598e+03
 2.29836648e+03 8.38647551e+02 4.67330723e+02 2.53941262e+02
 1.23580181e+02 9.36432856e+01 3.79091213e+01 3.85987120e+01
 4.74269897e+00 8.11959176e+00 3.91238532e-01 1.24981646e+00
 8.59858058e+00 4.29554081e+01 4.90843372e-01 1.19856904e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319934107781812
cond(S) = 56.37949679509203
E1 = -688.8485065382773  E_coul = 184.91642195122898
init E= -503.932084587048
    CPU time for initialize scf      0.03 sec, wall time      0.03 sec
  HOMO = -0.68090283323274  LUMO = 86.5494611548513
  mo_energy =
[-1.21650616e+02 -1.32810461e+01 -7.62147532e+00 -7.62147532e+00
 -7.62147532e+00 -1.65076415e+00 -6.80902833e-01 -6.80902833e-01
 -6.80902833e-01  8.65494612e+01  6.92193074e+02  4.04407488e+03
  2.98160970e+04  1.54848759e+05  6.64955268e+05  2.71967677e+06
  1.10460082e+07  4.65101245e+07]
E1 = -706.586768341699  E_coul = 198.9470291624016
cycle= 1 E= -507.639739179297  delta_E= -3.71  |g|= 0.316  |ddm|= 0.301
    CPU time for cycle= 1      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.41945
diis-c [-0.17593841  1.        ]
  HOMO = -0.236248928913906  LUMO = 87.8842617401179
  mo_energy =
[-1.20262751e+02 -1.22528782e+01 -6.65290360e+00 -6.65290360e+00
 -6.65290360e+00 -1.16347333e+00 -2.36248929e-01 -2.36248929e-01
 -2.36248929e-01  8.78842617e+01  6.93563078e+02  4.04532447e+03
  2.98171864e+04  1.54849777e+05  6.64956257e+05  2.71967775e+06
  1.10460091e+07  4.65101254e+07]
E1 = -706.5561106615343  E_coul = 198.91595475149657
cycle= 2 E= -507.640155910038  delta_E= -0.000417  |g|= 0.00468  |ddm|= 0.0139
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00497485
diis-c [-2.46948410e-05 -5.55671609e-04  1.00055567e+00]
  HOMO = -0.236418904080633  LUMO = 87.880792746561
  mo_energy =
[-1.20271206e+02 -1.22540328e+01 -6.65469240e+00 -6.65469240e+00
 -6.65469240e+00 -1.16353616e+00 -2.36418904e-01 -2.36418904e-01
 -2.36418904e-01  8.78807927e+01  6.93552631e+02  4.04530880e+03
  2.98171674e+04  1.54849758e+05  6.64956237e+05  2.71967773e+06
  1.10460091e+07  4.65101254e+07]
E1 = -706.5556860713127  E_coul = 198.9155300558823
cycle= 3 E= -507.64015601543  delta_E= -1.05e-07  |g|= 9.24e-05  |ddm|= 0.000194
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.000123763
diis-c [-3.75777602e-10  3.35386694e-05 -2.51964160e-02  1.02516288e+00]
  HOMO = -0.236421019583958  LUMO = 87.8807495785002
  mo_energy =
[-1.20271315e+02 -1.22540479e+01 -6.65471825e+00 -6.65471825e+00
 -6.65471825e+00 -1.16353679e+00 -2.36421020e-01 -2.36421020e-01
 -2.36421020e-01  8.78807496e+01  6.93552518e+02  4.04530866e+03
  2.98171673e+04  1.54849757e+05  6.64956236e+05  2.71967773e+06
  1.10460091e+07  4.65101254e+07]
E1 = -706.5556791867576  E_coul = 198.9155231712897
cycle= 4 E= -507.640156015468  delta_E= -3.75e-11  |g|= 3.59e-07  |ddm|= 3.28e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.5556791867576  E_coul = 198.9155231712897
  HOMO = -0.236421004180697  LUMO = 87.880749905286
  mo_energy =
[-1.20271315e+02 -1.22540478e+01 -6.65471809e+00 -6.65471809e+00
 -6.65471809e+00 -1.16353678e+00 -2.36421004e-01 -2.36421004e-01
 -2.36421004e-01  8.78807499e+01  6.93552519e+02  4.04530866e+03
  2.98171673e+04  1.54849757e+05  6.64956236e+05  2.71967773e+06
  1.10460091e+07  4.65101254e+07]
E1 = -706.5556792216469  E_coul = 198.91552320617885
Extra cycle  E= -507.640156015468  delta_E= -1.14e-13  |g|= 6.14e-09  |ddm|= 1.54e-08
    CPU time for scf_cycle      0.11 sec, wall time      0.11 sec
exp = [1.87954849e+07 4.69887121e+06 1.17471780e+06 2.93679373e+05
 7.34201201e+04 1.83064308e+04 2.29836648e+03 4.67330723e+02
 1.23580181e+02 3.79091213e+01 4.74269897e+00 3.91238532e-01
 8.59858058e+00 4.90843372e-01]
E = -507.64015601546805
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="BFGS",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((14, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.6988712134173084e+06,1.1747178033543271e+06,2.9367945083858178e+05,7.3419865393677101e+04,1.8353927627435987e+04,2.2341424145819028e+03,4.5688904996449571e+02,1.2173317272260677e+02,3.7593061247508530e+01,4.7412722556720146e+00,3.9120358491841306e-01,8.5986297237246045e+00,4.9084868336327880e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "12s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:20:03 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  18795484.8537        1
[INPUT] 0    0    [1    /1   ]  4698871.21328        1
[INPUT] 0    0    [1    /1   ]  1174717.80329        1
[INPUT] 0    0    [1    /1   ]  293679.372899        1
[INPUT] 0    0    [1    /1   ]  73420.1201255        1
[INPUT] 0    0    [1    /1   ]  18306.4307526        1
[INPUT] 0    0    [1    /1   ]  2298.3664779         1
[INPUT] 0    0    [1    /1   ]  467.330722662        1
[INPUT] 0    0    [1    /1   ]  123.580180512        1
[INPUT] 0    0    [1    /1   ]  37.9091213458        1
[INPUT] 0    0    [1    /1   ]  4.74269896782        1
[INPUT] 0    0    [1    /1   ]  0.3912385323         1
[INPUT] 1    0    [1    /1   ]  8.59858058179        1
[INPUT] 1    0    [1    /1   ]  0.490843371784       1

nuclear repulsion = 0
number of shells = 14
number of NR pGTOs = 18
number of NR cGTOs = 18
basis = {'Ar': [[0, [18795484.853670076, 1.0]], [0, [4698871.2132840585, 1.0]], [0, [1174717.8032933986, 1.0]], [0, [293679.3728992485, 1.0]], [0, [73420.12012550981, 1.0]], [0, [18306.43075256617, 1.0]], [0, [2298.3664778972316, 1.0]], [0, [467.3307226615142, 1.0]], [0, [123.58018051240373, 1.0]], [0, [37.90912134583068, 1.0]], [0, [4.742698967816262, 1.0]], [0, [0.3912385322997196, 1.0]], [1, [8.598580581788417, 1.0]], [1, [0.49084337178415827, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [18795484.85367008]
bas 1, expnt(s) = [4698871.21328406]
bas 2, expnt(s) = [1174717.8032934]
bas 3, expnt(s) = [293679.37289925]
bas 4, expnt(s) = [73420.12012551]
bas 5, expnt(s) = [18306.43075257]
bas 6, expnt(s) = [2298.3664779]
bas 7, expnt(s) = [467.33072266]
bas 8, expnt(s) = [123.58018051]
bas 9, expnt(s) = [37.90912135]
bas 10, expnt(s) = [4.74269897]
bas 11, expnt(s) = [0.39123853]
bas 12, expnt(s) = [8.59858058]
bas 13, expnt(s) = [0.49084337]
CPU time:       369.10
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  0  1  1  0 42 43  0]
 [ 0  0  1  1  0 44 45  0]
 [ 0  0  1  1  0 46 47  0]
 [ 0  1  1  1  0 48 49  0]
 [ 0  1  1  1  0 50 51  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.87954849e+07 7.21199097e+05 4.69887121e+06 2.54982386e+05
 1.17471780e+06 9.01498871e+04 2.93679373e+05 3.18727919e+04
 7.34201201e+04 1.12687655e+04 1.83064308e+04 3.97619598e+03
 2.29836648e+03 8.38647551e+02 4.67330723e+02 2.53941262e+02
 1.23580181e+02 9.36432856e+01 3.79091213e+01 3.85987120e+01
 4.74269897e+00 8.11959176e+00 3.91238532e-01 1.24981646e+00
 8.59858058e+00 4.29554081e+01 4.90843372e-01 1.19856904e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319934107781812
cond(S) = 56.37949679509203
E1 = -688.8485065382773  E_coul = 184.91642195122898
init E= -503.932084587048
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.68090283323274  LUMO = 86.5494611548513
  mo_energy =
[-1.21650616e+02 -1.32810461e+01 -7.62147532e+00 -7.62147532e+00
 -7.62147532e+00 -1.65076415e+00 -6.80902833e-01 -6.80902833e-01
 -6.80902833e-01  8.65494612e+01  6.92193074e+02  4.04407488e+03
  2.98160970e+04  1.54848759e+05  6.64955268e+05  2.71967677e+06
  1.10460082e+07  4.65101245e+07]
E1 = -706.586768341699  E_coul = 198.9470291624016
cycle= 1 E= -507.639739179297  delta_E= -3.71  |g|= 0.316  |ddm|= 0.301
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.41945
diis-c [-0.17593841  1.        ]
  HOMO = -0.236248928913906  LUMO = 87.8842617401179
  mo_energy =
[-1.20262751e+02 -1.22528782e+01 -6.65290360e+00 -6.65290360e+00
 -6.65290360e+00 -1.16347333e+00 -2.36248929e-01 -2.36248929e-01
 -2.36248929e-01  8.78842617e+01  6.93563078e+02  4.04532447e+03
  2.98171864e+04  1.54849777e+05  6.64956257e+05  2.71967775e+06
  1.10460091e+07  4.65101254e+07]
E1 = -706.5561106615343  E_coul = 198.91595475149657
cycle= 2 E= -507.640155910038  delta_E= -0.000417  |g|= 0.00468  |ddm|= 0.0139
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00497485
diis-c [-2.46948410e-05 -5.55671609e-04  1.00055567e+00]
  HOMO = -0.236418904080633  LUMO = 87.880792746561
  mo_energy =
[-1.20271206e+02 -1.22540328e+01 -6.65469240e+00 -6.65469240e+00
 -6.65469240e+00 -1.16353616e+00 -2.36418904e-01 -2.36418904e-01
 -2.36418904e-01  8.78807927e+01  6.93552631e+02  4.04530880e+03
  2.98171674e+04  1.54849758e+05  6.64956237e+05  2.71967773e+06
  1.10460091e+07  4.65101254e+07]
E1 = -706.5556860713127  E_coul = 198.9155300558823
cycle= 3 E= -507.64015601543  delta_E= -1.05e-07  |g|= 9.24e-05  |ddm|= 0.000194
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.000123763
diis-c [-3.75777602e-10  3.35386694e-05 -2.51964160e-02  1.02516288e+00]
  HOMO = -0.236421019583958  LUMO = 87.8807495785002
  mo_energy =
[-1.20271315e+02 -1.22540479e+01 -6.65471825e+00 -6.65471825e+00
 -6.65471825e+00 -1.16353679e+00 -2.36421020e-01 -2.36421020e-01
 -2.36421020e-01  8.78807496e+01  6.93552518e+02  4.04530866e+03
  2.98171673e+04  1.54849757e+05  6.64956236e+05  2.71967773e+06
  1.10460091e+07  4.65101254e+07]
E1 = -706.5556791867576  E_coul = 198.9155231712897
cycle= 4 E= -507.640156015468  delta_E= -3.75e-11  |g|= 3.59e-07  |ddm|= 3.28e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.5556791867576  E_coul = 198.9155231712897
  HOMO = -0.236421004180697  LUMO = 87.880749905286
  mo_energy =
[-1.20271315e+02 -1.22540478e+01 -6.65471809e+00 -6.65471809e+00
 -6.65471809e+00 -1.16353678e+00 -2.36421004e-01 -2.36421004e-01
 -2.36421004e-01  8.78807499e+01  6.93552519e+02  4.04530866e+03
  2.98171673e+04  1.54849757e+05  6.64956236e+05  2.71967773e+06
  1.10460091e+07  4.65101254e+07]
E1 = -706.5556792216469  E_coul = 198.91552320617885
Extra cycle  E= -507.640156015468  delta_E= -1.14e-13  |g|= 6.14e-09  |ddm|= 1.54e-08
    CPU time for scf_cycle      0.10 sec, wall time      0.11 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 56.37949679509203
E1 = -706.5556792216469  E_coul = 198.91552320617885
init E= -507.640156015468
    CPU time for initialize scf      0.12 sec, wall time      0.12 sec
  HOMO = -0.23642100400233  LUMO = 87.880749909224
  mo_energy =
[-1.20271315e+02 -1.22540478e+01 -6.65471809e+00 -6.65471809e+00
 -6.65471809e+00 -1.16353678e+00 -2.36421004e-01 -2.36421004e-01
 -2.36421004e-01  8.78807499e+01  6.93552519e+02  4.04530866e+03
  2.98171673e+04  1.54849757e+05  6.64956236e+05  2.71967773e+06
  1.10460091e+07  4.65101254e+07]
E1 = -706.5556792221691  E_coul = 198.91552320670098
cycle= 1 E= -507.640156015468  delta_E= -1.14e-13  |g|= 2.09e-10  |ddm|= 2.37e-10
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -706.5556792221691  E_coul = 198.91552320670098
  HOMO = -0.236421003999829  LUMO = 87.8807499092764
  mo_energy =
[-1.20271315e+02 -1.22540478e+01 -6.65471809e+00 -6.65471809e+00
 -6.65471809e+00 -1.16353678e+00 -2.36421004e-01 -2.36421004e-01
 -2.36421004e-01  8.78807499e+01  6.93552519e+02  4.04530866e+03
  2.98171673e+04  1.54849757e+05  6.64956236e+05  2.71967773e+06
  1.10460091e+07  4.65101254e+07]
E1 = -706.5556792221781  E_coul = 198.91552320671028
Extra cycle  E= -507.640156015468  delta_E= 3.41e-13  |g|= 9.47e-11  |ddm|= 4.27e-12
    CPU time for scf_cycle      0.20 sec, wall time      0.20 sec
exp = [1.87954849e+07 4.69887121e+06 1.17471780e+06 2.93679373e+05
 7.34201201e+04 1.83064308e+04 2.29836648e+03 4.67330723e+02
 1.23580181e+02 3.79091213e+01 4.74269897e+00 3.91238532e-01
 8.59858058e+00 4.90843372e-01]
grad_E = [-1.42925720e-13  1.58980174e-11 -8.13711786e-12  9.33128925e-09
 -3.95888914e-08  5.69013331e-06  3.75841706e-06 -5.25526006e-08
  1.01999090e-05  1.29992796e-06 -1.86808017e-05  8.35259958e-05
  2.42024196e-05  1.73451292e-04]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="BFGS",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((14, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.6988712134173084e+06,1.1747178033543271e+06,2.9367945083858178e+05,7.3419865393677101e+04,1.8353927627435987e+04,2.2341424145819028e+03,4.5688904996449571e+02,1.2173317272260677e+02,3.7593061247508530e+01,4.7412722556720146e+00,3.9120358491841306e-01,8.5986297237246045e+00,4.9084868336327880e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "12s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:20:07 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  18795484.8537        1
[INPUT] 0    0    [1    /1   ]  4698871.21328        1
[INPUT] 0    0    [1    /1   ]  1174717.80329        1
[INPUT] 0    0    [1    /1   ]  293679.373061        1
[INPUT] 0    0    [1    /1   ]  73420.1196718        1
[INPUT] 0    0    [1    /1   ]  18306.5292611        1
[INPUT] 0    0    [1    /1   ]  2298.13327561        1
[INPUT] 0    0    [1    /1   ]  467.326232181        1
[INPUT] 0    0    [1    /1   ]  123.587779409        1
[INPUT] 0    0    [1    /1   ]  37.911271779         1
[INPUT] 0    0    [1    /1   ]  4.74269263658        1
[INPUT] 0    0    [1    /1   ]  0.391239978242       1
[INPUT] 1    0    [1    /1   ]  8.59859024285        1
[INPUT] 1    0    [1    /1   ]  0.490844877549       1

nuclear repulsion = 0
number of shells = 14
number of NR pGTOs = 18
number of NR cGTOs = 18
basis = {'Ar': [[0, [18795484.853670076, 1.0]], [0, [4698871.213284335, 1.0]], [0, [1174717.803293652, 1.0]], [0, [293679.3730609189, 1.0]], [0, [73420.11967179083, 1.0]], [0, [18306.52926112216, 1.0]], [0, [2298.1332756140464, 1.0]], [0, [467.32623218086417, 1.0]], [0, [123.58777940913951, 1.0]], [0, [37.91127177902663, 1.0]], [0, [4.742692636583728, 1.0]], [0, [0.3912399782418347, 1.0]], [1, [8.598590242845635, 1.0]], [1, [0.49084487754879863, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [18795484.85367008]
bas 1, expnt(s) = [4698871.21328434]
bas 2, expnt(s) = [1174717.80329365]
bas 3, expnt(s) = [293679.37306092]
bas 4, expnt(s) = [73420.11967179]
bas 5, expnt(s) = [18306.52926112]
bas 6, expnt(s) = [2298.13327561]
bas 7, expnt(s) = [467.32623218]
bas 8, expnt(s) = [123.58777941]
bas 9, expnt(s) = [37.91127178]
bas 10, expnt(s) = [4.74269264]
bas 11, expnt(s) = [0.39123998]
bas 12, expnt(s) = [8.59859024]
bas 13, expnt(s) = [0.49084488]
CPU time:       372.95
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  0  1  1  0 42 43  0]
 [ 0  0  1  1  0 44 45  0]
 [ 0  0  1  1  0 46 47  0]
 [ 0  1  1  1  0 48 49  0]
 [ 0  1  1  1  0 50 51  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.87954849e+07 7.21199097e+05 4.69887121e+06 2.54982386e+05
 1.17471780e+06 9.01498871e+04 2.93679373e+05 3.18727919e+04
 7.34201197e+04 1.12687655e+04 1.83065293e+04 3.97621203e+03
 2.29813328e+03 8.38583731e+02 4.67326232e+02 2.53939432e+02
 1.23587779e+02 9.36476042e+01 3.79112718e+01 3.86003542e+01
 4.74269264e+00 8.11958363e+00 3.91239978e-01 1.24981992e+00
 8.59859024e+00 4.29554684e+01 4.90844878e-01 1.19857364e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319931933724533
cond(S) = 56.38028075124715
E1 = -688.8485252655065  E_coul = 184.91653704200095
init E= -503.931988223506
    CPU time for initialize scf      0.03 sec, wall time      0.03 sec
  HOMO = -0.680900501911032  LUMO = 86.5571196888494
  mo_energy =
[-1.21650598e+02 -1.32810395e+01 -7.62146739e+00 -7.62146739e+00
 -7.62146739e+00 -1.65076274e+00 -6.80900502e-01 -6.80900502e-01
 -6.80900502e-01  8.65571197e+01  6.92217365e+02  4.04384299e+03
  2.98154697e+04  1.54848288e+05  6.64954911e+05  2.71967647e+06
  1.10460079e+07  4.65101242e+07]
E1 = -706.586921041827  E_coul = 198.94718159751093
cycle= 1 E= -507.639739444316  delta_E= -3.71  |g|= 0.316  |ddm|= 0.301
    CPU time for cycle= 1      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.419454
diis-c [-0.17594182  1.        ]
  HOMO = -0.236244711131198  LUMO = 87.8919319367553
  mo_energy =
[-1.20262731e+02 -1.22528691e+01 -6.65289348e+00 -6.65289348e+00
 -6.65289348e+00 -1.16347004e+00 -2.36244711e-01 -2.36244711e-01
 -2.36244711e-01  8.78919319e+01  6.93587374e+02  4.04509260e+03
  2.98165591e+04  1.54849307e+05  6.64955900e+05  2.71967744e+06
  1.10460089e+07  4.65101252e+07]
E1 = -706.5562671728493  E_coul = 198.91611105095566
cycle= 2 E= -507.640156121894  delta_E= -0.000417  |g|= 0.00468  |ddm|= 0.0139
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00497457
diis-c [-2.46919829e-05 -5.56088443e-04  1.00055609e+00]
  HOMO = -0.236414661984448  LUMO = 87.8884632069633
  mo_energy =
[-1.20271185e+02 -1.22540236e+01 -6.65468204e+00 -6.65468204e+00
 -6.65468204e+00 -1.16353287e+00 -2.36414662e-01 -2.36414662e-01
 -2.36414662e-01  8.78884632e+01  6.93576928e+02  4.04507693e+03
  2.98165402e+04  1.54849287e+05  6.64955880e+05  2.71967742e+06
  1.10460088e+07  4.65101252e+07]
E1 = -706.5558426578425  E_coul = 198.91568643057806
cycle= 3 E= -507.640156227264  delta_E= -1.05e-07  |g|= 9.24e-05  |ddm|= 0.000194
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.000123749
diis-c [-3.75691963e-10  3.35388408e-05 -2.51949006e-02  1.02516136e+00]
  HOMO = -0.236416777007348  LUMO = 87.8884200467171
  mo_energy =
[-1.20271294e+02 -1.22540387e+01 -6.65470787e+00 -6.65470787e+00
 -6.65470787e+00 -1.16353349e+00 -2.36416777e-01 -2.36416777e-01
 -2.36416777e-01  8.78884200e+01  6.93576815e+02  4.04507679e+03
  2.98165400e+04  1.54849287e+05  6.64955880e+05  2.71967742e+06
  1.10460088e+07  4.65101252e+07]
E1 = -706.5558357750717  E_coul = 198.91567954776983
cycle= 4 E= -507.640156227302  delta_E= -3.74e-11  |g|= 3.59e-07  |ddm|= 3.28e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.5558357750717  E_coul = 198.91567954776983
  HOMO = -0.236416761608215  LUMO = 87.8884203734439
  mo_energy =
[-1.20271293e+02 -1.22540386e+01 -6.65470772e+00 -6.65470772e+00
 -6.65470772e+00 -1.16353349e+00 -2.36416762e-01 -2.36416762e-01
 -2.36416762e-01  8.78884204e+01  6.93576816e+02  4.04507679e+03
  2.98165401e+04  1.54849287e+05  6.64955880e+05  2.71967742e+06
  1.10460088e+07  4.65101252e+07]
E1 = -706.5558358099511  E_coul = 198.91567958264966
Extra cycle  E= -507.640156227301  delta_E= 4.55e-13  |g|= 6.14e-09  |ddm|= 1.54e-08
    CPU time for scf_cycle      0.11 sec, wall time      0.12 sec
exp = [1.87954849e+07 4.69887121e+06 1.17471780e+06 2.93679373e+05
 7.34201197e+04 1.83065293e+04 2.29813328e+03 4.67326232e+02
 1.23587779e+02 3.79112718e+01 4.74269264e+00 3.91239978e-01
 8.59859024e+00 4.90844878e-01]
E = -507.6401562273014
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="BFGS",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((14, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.6988712134173084e+06,1.1747178033543271e+06,2.9367945083858178e+05,7.3419865393677101e+04,1.8353927627435987e+04,2.2341424145819028e+03,4.5688904996449571e+02,1.2173317272260677e+02,3.7593061247508530e+01,4.7412722556720146e+00,3.9120358491841306e-01,8.5986297237246045e+00,4.9084868336327880e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "12s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:20:08 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  18795484.8537        1
[INPUT] 0    0    [1    /1   ]  4698871.21328        1
[INPUT] 0    0    [1    /1   ]  1174717.80329        1
[INPUT] 0    0    [1    /1   ]  293679.373061        1
[INPUT] 0    0    [1    /1   ]  73420.1196718        1
[INPUT] 0    0    [1    /1   ]  18306.5292611        1
[INPUT] 0    0    [1    /1   ]  2298.13327561        1
[INPUT] 0    0    [1    /1   ]  467.326232181        1
[INPUT] 0    0    [1    /1   ]  123.587779409        1
[INPUT] 0    0    [1    /1   ]  37.911271779         1
[INPUT] 0    0    [1    /1   ]  4.74269263658        1
[INPUT] 0    0    [1    /1   ]  0.391239978242       1
[INPUT] 1    0    [1    /1   ]  8.59859024285        1
[INPUT] 1    0    [1    /1   ]  0.490844877549       1

nuclear repulsion = 0
number of shells = 14
number of NR pGTOs = 18
number of NR cGTOs = 18
basis = {'Ar': [[0, [18795484.853670076, 1.0]], [0, [4698871.213284335, 1.0]], [0, [1174717.803293652, 1.0]], [0, [293679.3730609189, 1.0]], [0, [73420.11967179083, 1.0]], [0, [18306.52926112216, 1.0]], [0, [2298.1332756140464, 1.0]], [0, [467.32623218086417, 1.0]], [0, [123.58777940913951, 1.0]], [0, [37.91127177902663, 1.0]], [0, [4.742692636583728, 1.0]], [0, [0.3912399782418347, 1.0]], [1, [8.598590242845635, 1.0]], [1, [0.49084487754879863, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [18795484.85367008]
bas 1, expnt(s) = [4698871.21328434]
bas 2, expnt(s) = [1174717.80329365]
bas 3, expnt(s) = [293679.37306092]
bas 4, expnt(s) = [73420.11967179]
bas 5, expnt(s) = [18306.52926112]
bas 6, expnt(s) = [2298.13327561]
bas 7, expnt(s) = [467.32623218]
bas 8, expnt(s) = [123.58777941]
bas 9, expnt(s) = [37.91127178]
bas 10, expnt(s) = [4.74269264]
bas 11, expnt(s) = [0.39123998]
bas 12, expnt(s) = [8.59859024]
bas 13, expnt(s) = [0.49084488]
CPU time:       374.05
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  0  1  1  0 42 43  0]
 [ 0  0  1  1  0 44 45  0]
 [ 0  0  1  1  0 46 47  0]
 [ 0  1  1  1  0 48 49  0]
 [ 0  1  1  1  0 50 51  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.87954849e+07 7.21199097e+05 4.69887121e+06 2.54982386e+05
 1.17471780e+06 9.01498871e+04 2.93679373e+05 3.18727919e+04
 7.34201197e+04 1.12687655e+04 1.83065293e+04 3.97621203e+03
 2.29813328e+03 8.38583731e+02 4.67326232e+02 2.53939432e+02
 1.23587779e+02 9.36476042e+01 3.79112718e+01 3.86003542e+01
 4.74269264e+00 8.11958363e+00 3.91239978e-01 1.24981992e+00
 8.59859024e+00 4.29554684e+01 4.90844878e-01 1.19857364e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319931933724533
cond(S) = 56.38028075124715
E1 = -688.8485252655065  E_coul = 184.91653704200095
init E= -503.931988223506
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.680900501911032  LUMO = 86.5571196888494
  mo_energy =
[-1.21650598e+02 -1.32810395e+01 -7.62146739e+00 -7.62146739e+00
 -7.62146739e+00 -1.65076274e+00 -6.80900502e-01 -6.80900502e-01
 -6.80900502e-01  8.65571197e+01  6.92217365e+02  4.04384299e+03
  2.98154697e+04  1.54848288e+05  6.64954911e+05  2.71967647e+06
  1.10460079e+07  4.65101242e+07]
E1 = -706.586921041827  E_coul = 198.94718159751093
cycle= 1 E= -507.639739444316  delta_E= -3.71  |g|= 0.316  |ddm|= 0.301
    CPU time for cycle= 1      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.419454
diis-c [-0.17594182  1.        ]
  HOMO = -0.236244711131198  LUMO = 87.8919319367553
  mo_energy =
[-1.20262731e+02 -1.22528691e+01 -6.65289348e+00 -6.65289348e+00
 -6.65289348e+00 -1.16347004e+00 -2.36244711e-01 -2.36244711e-01
 -2.36244711e-01  8.78919319e+01  6.93587374e+02  4.04509260e+03
  2.98165591e+04  1.54849307e+05  6.64955900e+05  2.71967744e+06
  1.10460089e+07  4.65101252e+07]
E1 = -706.5562671728493  E_coul = 198.91611105095566
cycle= 2 E= -507.640156121894  delta_E= -0.000417  |g|= 0.00468  |ddm|= 0.0139
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00497457
diis-c [-2.46919829e-05 -5.56088443e-04  1.00055609e+00]
  HOMO = -0.236414661984448  LUMO = 87.8884632069633
  mo_energy =
[-1.20271185e+02 -1.22540236e+01 -6.65468204e+00 -6.65468204e+00
 -6.65468204e+00 -1.16353287e+00 -2.36414662e-01 -2.36414662e-01
 -2.36414662e-01  8.78884632e+01  6.93576928e+02  4.04507693e+03
  2.98165402e+04  1.54849287e+05  6.64955880e+05  2.71967742e+06
  1.10460088e+07  4.65101252e+07]
E1 = -706.5558426578425  E_coul = 198.91568643057806
cycle= 3 E= -507.640156227264  delta_E= -1.05e-07  |g|= 9.24e-05  |ddm|= 0.000194
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.000123749
diis-c [-3.75691963e-10  3.35388408e-05 -2.51949006e-02  1.02516136e+00]
  HOMO = -0.236416777007348  LUMO = 87.8884200467171
  mo_energy =
[-1.20271294e+02 -1.22540387e+01 -6.65470787e+00 -6.65470787e+00
 -6.65470787e+00 -1.16353349e+00 -2.36416777e-01 -2.36416777e-01
 -2.36416777e-01  8.78884200e+01  6.93576815e+02  4.04507679e+03
  2.98165400e+04  1.54849287e+05  6.64955880e+05  2.71967742e+06
  1.10460088e+07  4.65101252e+07]
E1 = -706.5558357750717  E_coul = 198.91567954776983
cycle= 4 E= -507.640156227302  delta_E= -3.74e-11  |g|= 3.59e-07  |ddm|= 3.28e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.5558357750717  E_coul = 198.91567954776983
  HOMO = -0.236416761608215  LUMO = 87.8884203734439
  mo_energy =
[-1.20271293e+02 -1.22540386e+01 -6.65470772e+00 -6.65470772e+00
 -6.65470772e+00 -1.16353349e+00 -2.36416762e-01 -2.36416762e-01
 -2.36416762e-01  8.78884204e+01  6.93576816e+02  4.04507679e+03
  2.98165401e+04  1.54849287e+05  6.64955880e+05  2.71967742e+06
  1.10460088e+07  4.65101252e+07]
E1 = -706.5558358099511  E_coul = 198.91567958264966
Extra cycle  E= -507.640156227301  delta_E= 4.55e-13  |g|= 6.14e-09  |ddm|= 1.54e-08
    CPU time for scf_cycle      0.11 sec, wall time      0.11 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 56.38028075124715
E1 = -706.5558358099511  E_coul = 198.91567958264966
init E= -507.640156227301
    CPU time for initialize scf      0.13 sec, wall time      0.13 sec
  HOMO = -0.236416761429906  LUMO = 87.8884203773775
  mo_energy =
[-1.20271293e+02 -1.22540386e+01 -6.65470772e+00 -6.65470772e+00
 -6.65470772e+00 -1.16353349e+00 -2.36416761e-01 -2.36416761e-01
 -2.36416761e-01  8.78884204e+01  6.93576816e+02  4.04507679e+03
  2.98165401e+04  1.54849287e+05  6.64955880e+05  2.71967742e+06
  1.10460088e+07  4.65101252e+07]
E1 = -706.5558358104738  E_coul = 198.91567958317225
cycle= 1 E= -507.640156227302  delta_E= -1.14e-13  |g|= 2.13e-10  |ddm|= 2.37e-10
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -706.5558358104738  E_coul = 198.91567958317225
  HOMO = -0.236416761427408  LUMO = 87.8884203774362
  mo_energy =
[-1.20271293e+02 -1.22540386e+01 -6.65470772e+00 -6.65470772e+00
 -6.65470772e+00 -1.16353349e+00 -2.36416761e-01 -2.36416761e-01
 -2.36416761e-01  8.78884204e+01  6.93576816e+02  4.04507679e+03
  2.98165401e+04  1.54849287e+05  6.64955880e+05  2.71967742e+06
  1.10460088e+07  4.65101252e+07]
E1 = -706.5558358104824  E_coul = 198.91567958318092
Extra cycle  E= -507.640156227302  delta_E=    0  |g|= 2.69e-10  |ddm|= 4.08e-12
    CPU time for scf_cycle      0.20 sec, wall time      0.20 sec
exp = [1.87954849e+07 4.69887121e+06 1.17471780e+06 2.93679373e+05
 7.34201197e+04 1.83065293e+04 2.29813328e+03 4.67326232e+02
 1.23587779e+02 3.79112718e+01 4.74269264e+00 3.91239978e-01
 8.59859024e+00 4.90844878e-01]
grad_E = [-1.42804790e-13  1.59066121e-11 -8.07283765e-12  9.33620474e-09
 -3.95703063e-08  5.69331552e-06  3.66842182e-06 -2.83588139e-07
  1.31315231e-05  1.67498384e-06 -2.41287199e-05  1.07876238e-04
  3.12567827e-05  2.24019195e-04]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="BFGS",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((14, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.6988712134173084e+06,1.1747178033543271e+06,2.9367945083858178e+05,7.3419865393677101e+04,1.8353927627435987e+04,2.2341424145819028e+03,4.5688904996449571e+02,1.2173317272260677e+02,3.7593061247508530e+01,4.7412722556720146e+00,3.9120358491841306e-01,8.5986297237246045e+00,4.9084868336327880e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "12s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:20:12 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  18795484.8537        1
[INPUT] 0    0    [1    /1   ]  4698871.21328        1
[INPUT] 0    0    [1    /1   ]  1174717.80329        1
[INPUT] 0    0    [1    /1   ]  293679.373231        1
[INPUT] 0    0    [1    /1   ]  73420.119248         1
[INPUT] 0    0    [1    /1   ]  18306.6330657        1
[INPUT] 0    0    [1    /1   ]  2297.81668004        1
[INPUT] 0    0    [1    /1   ]  467.320001867        1
[INPUT] 0    0    [1    /1   ]  123.598028121        1
[INPUT] 0    0    [1    /1   ]  37.9141746716        1
[INPUT] 0    0    [1    /1   ]  4.74268405978        1
[INPUT] 0    0    [1    /1   ]  0.391241932422       1
[INPUT] 1    0    [1    /1   ]  8.59860330037        1
[INPUT] 1    0    [1    /1   ]  0.490846912762       1

nuclear repulsion = 0
number of shells = 14
number of NR pGTOs = 18
number of NR cGTOs = 18
basis = {'Ar': [[0, [18795484.853670076, 1.0]], [0, [4698871.213284628, 1.0]], [0, [1174717.8032940112, 1.0]], [0, [293679.3732313057, 1.0]], [0, [73420.11924801272, 1.0]], [0, [18306.633065695176, 1.0]], [0, [2297.8166800411223, 1.0]], [0, [467.32000186674424, 1.0]], [0, [123.59802812134758, 1.0]], [0, [37.91417467160395, 1.0]], [0, [4.742684059781133, 1.0]], [0, [0.3912419324215324, 1.0]], [1, [8.5986033003664, 1.0]], [1, [0.4908469127622269, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [18795484.85367008]
bas 1, expnt(s) = [4698871.21328463]
bas 2, expnt(s) = [1174717.80329401]
bas 3, expnt(s) = [293679.37323131]
bas 4, expnt(s) = [73420.11924801]
bas 5, expnt(s) = [18306.6330657]
bas 6, expnt(s) = [2297.81668004]
bas 7, expnt(s) = [467.32000187]
bas 8, expnt(s) = [123.59802812]
bas 9, expnt(s) = [37.91417467]
bas 10, expnt(s) = [4.74268406]
bas 11, expnt(s) = [0.39124193]
bas 12, expnt(s) = [8.5986033]
bas 13, expnt(s) = [0.49084691]
CPU time:       377.89
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  0  1  1  0 42 43  0]
 [ 0  0  1  1  0 44 45  0]
 [ 0  0  1  1  0 46 47  0]
 [ 0  1  1  1  0 48 49  0]
 [ 0  1  1  1  0 50 51  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.87954849e+07 7.21199097e+05 4.69887121e+06 2.54982386e+05
 1.17471780e+06 9.01498871e+04 2.93679373e+05 3.18727919e+04
 7.34201192e+04 1.12687654e+04 1.83066331e+04 3.97622894e+03
 2.29781668e+03 8.38497086e+02 4.67320002e+02 2.53936893e+02
 1.23598028e+02 9.36534285e+01 3.79141747e+01 3.86025709e+01
 4.74268406e+00 8.11957261e+00 3.91241932e-01 1.24982461e+00
 8.59860330e+00 4.29555500e+01 4.90846913e-01 1.19857985e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319928995671404
cond(S) = 56.38131162608373
E1 = -688.8485510118179  E_coul = 184.9166925853976
init E= -503.93185842642
    CPU time for initialize scf      0.03 sec, wall time      0.03 sec
  HOMO = -0.680897350782823  LUMO = 86.56745323185
  mo_energy =
[-1.21650574e+02 -1.32810305e+01 -7.62145666e+00 -7.62145666e+00
 -7.62145666e+00 -1.65076083e+00 -6.80897351e-01 -6.80897351e-01
 -6.80897351e-01  8.65674532e+01  6.92249978e+02  4.04352737e+03
  2.98145867e+04  1.54847562e+05  6.64954323e+05  2.71967595e+06
  1.10460074e+07  4.65101238e+07]
E1 = -706.5871275332305  E_coul = 198.9473876309575
cycle= 1 E= -507.639739902273  delta_E= -3.71  |g|= 0.316  |ddm|= 0.301
    CPU time for cycle= 1      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.41946
diis-c [-0.17594643  1.        ]
  HOMO = -0.236239010552406  LUMO = 87.9022812227011
  mo_energy =
[-1.20262703e+02 -1.22528568e+01 -6.65287981e+00 -6.65287981e+00
 -6.65287981e+00 -1.16346560e+00 -2.36239011e-01 -2.36239011e-01
 -2.36239011e-01  8.79022812e+01  6.93619996e+02  4.04477701e+03
  2.98156761e+04  1.54848580e+05  6.64955312e+05  2.71967693e+06
  1.10460084e+07  4.65101248e+07]
E1 = -706.556478805354  E_coul = 198.91632229721134
cycle= 2 E= -507.640156508143  delta_E= -0.000417  |g|= 0.00468  |ddm|= 0.0139
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00497419
diis-c [-2.46881303e-05 -5.56650533e-04  1.00055665e+00]
  HOMO = -0.236408928612763  LUMO = 87.8988128488114
  mo_energy =
[-1.20271155e+02 -1.22540110e+01 -6.65466803e+00 -6.65466803e+00
 -6.65466803e+00 -1.16352841e+00 -2.36408929e-01 -2.36408929e-01
 -2.36408929e-01  8.78988128e+01  6.93609550e+02  4.04476134e+03
  2.98156572e+04  1.54848561e+05  6.64955292e+05  2.71967691e+06
  1.10460084e+07  4.65101248e+07]
E1 = -706.5560543917959  E_coul = 198.9158977783138
cycle= 3 E= -507.640156613482  delta_E= -1.05e-07  |g|= 9.24e-05  |ddm|= 0.000194
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.000123729
diis-c [-3.75582170e-10  3.35382800e-05 -2.51928442e-02  1.02515931e+00]
  HOMO = -0.236411042987893  LUMO = 87.8987696990969
  mo_energy =
[-1.20271264e+02 -1.22540261e+01 -6.65469385e+00 -6.65469385e+00
 -6.65469385e+00 -1.16352904e+00 -2.36411043e-01 -2.36411043e-01
 -2.36411043e-01  8.78987697e+01  6.93609438e+02  4.04476120e+03
  2.98156570e+04  1.54848560e+05  6.64955291e+05  2.71967691e+06
  1.10460084e+07  4.65101248e+07]
E1 = -706.5560475114318  E_coul = 198.9158908979127
cycle= 4 E= -507.640156613519  delta_E= -3.69e-11  |g|= 3.59e-07  |ddm|= 3.28e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.5560475114318  E_coul = 198.9158908979127
  HOMO = -0.236411027594211  LUMO = 87.8987700257532
  mo_energy =
[-1.20271264e+02 -1.22540260e+01 -6.65469370e+00 -6.65469370e+00
 -6.65469370e+00 -1.16352903e+00 -2.36411028e-01 -2.36411028e-01
 -2.36411028e-01  8.78987700e+01  6.93609439e+02  4.04476120e+03
  2.98156570e+04  1.54848560e+05  6.64955291e+05  2.71967691e+06
  1.10460084e+07  4.65101248e+07]
E1 = -706.5560475462988  E_coul = 198.91589093277952
Extra cycle  E= -507.640156613519  delta_E= -2.84e-13  |g|= 6.14e-09  |ddm|= 1.54e-08
    CPU time for scf_cycle      0.11 sec, wall time      0.11 sec
exp = [1.87954849e+07 4.69887121e+06 1.17471780e+06 2.93679373e+05
 7.34201192e+04 1.83066331e+04 2.29781668e+03 4.67320002e+02
 1.23598028e+02 3.79141747e+01 4.74268406e+00 3.91241932e-01
 8.59860330e+00 4.90846913e-01]
E = -507.6401566135193
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="BFGS",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((14, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.6988712134173084e+06,1.1747178033543271e+06,2.9367945083858178e+05,7.3419865393677101e+04,1.8353927627435987e+04,2.2341424145819028e+03,4.5688904996449571e+02,1.2173317272260677e+02,3.7593061247508530e+01,4.7412722556720146e+00,3.9120358491841306e-01,8.5986297237246045e+00,4.9084868336327880e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "12s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:20:13 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  18795484.8537        1
[INPUT] 0    0    [1    /1   ]  4698871.21328        1
[INPUT] 0    0    [1    /1   ]  1174717.80329        1
[INPUT] 0    0    [1    /1   ]  293679.373231        1
[INPUT] 0    0    [1    /1   ]  73420.119248         1
[INPUT] 0    0    [1    /1   ]  18306.6330657        1
[INPUT] 0    0    [1    /1   ]  2297.81668004        1
[INPUT] 0    0    [1    /1   ]  467.320001867        1
[INPUT] 0    0    [1    /1   ]  123.598028121        1
[INPUT] 0    0    [1    /1   ]  37.9141746716        1
[INPUT] 0    0    [1    /1   ]  4.74268405978        1
[INPUT] 0    0    [1    /1   ]  0.391241932422       1
[INPUT] 1    0    [1    /1   ]  8.59860330037        1
[INPUT] 1    0    [1    /1   ]  0.490846912762       1

nuclear repulsion = 0
number of shells = 14
number of NR pGTOs = 18
number of NR cGTOs = 18
basis = {'Ar': [[0, [18795484.853670076, 1.0]], [0, [4698871.213284628, 1.0]], [0, [1174717.8032940112, 1.0]], [0, [293679.3732313057, 1.0]], [0, [73420.11924801272, 1.0]], [0, [18306.633065695176, 1.0]], [0, [2297.8166800411223, 1.0]], [0, [467.32000186674424, 1.0]], [0, [123.59802812134758, 1.0]], [0, [37.91417467160395, 1.0]], [0, [4.742684059781133, 1.0]], [0, [0.3912419324215324, 1.0]], [1, [8.5986033003664, 1.0]], [1, [0.4908469127622269, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [18795484.85367008]
bas 1, expnt(s) = [4698871.21328463]
bas 2, expnt(s) = [1174717.80329401]
bas 3, expnt(s) = [293679.37323131]
bas 4, expnt(s) = [73420.11924801]
bas 5, expnt(s) = [18306.6330657]
bas 6, expnt(s) = [2297.81668004]
bas 7, expnt(s) = [467.32000187]
bas 8, expnt(s) = [123.59802812]
bas 9, expnt(s) = [37.91417467]
bas 10, expnt(s) = [4.74268406]
bas 11, expnt(s) = [0.39124193]
bas 12, expnt(s) = [8.5986033]
bas 13, expnt(s) = [0.49084691]
CPU time:       379.01
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  0  1  1  0 42 43  0]
 [ 0  0  1  1  0 44 45  0]
 [ 0  0  1  1  0 46 47  0]
 [ 0  1  1  1  0 48 49  0]
 [ 0  1  1  1  0 50 51  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.87954849e+07 7.21199097e+05 4.69887121e+06 2.54982386e+05
 1.17471780e+06 9.01498871e+04 2.93679373e+05 3.18727919e+04
 7.34201192e+04 1.12687654e+04 1.83066331e+04 3.97622894e+03
 2.29781668e+03 8.38497086e+02 4.67320002e+02 2.53936893e+02
 1.23598028e+02 9.36534285e+01 3.79141747e+01 3.86025709e+01
 4.74268406e+00 8.11957261e+00 3.91241932e-01 1.24982461e+00
 8.59860330e+00 4.29555500e+01 4.90846913e-01 1.19857985e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319928995671404
cond(S) = 56.38131162608373
E1 = -688.8485510118179  E_coul = 184.9166925853976
init E= -503.93185842642
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.680897350782823  LUMO = 86.56745323185
  mo_energy =
[-1.21650574e+02 -1.32810305e+01 -7.62145666e+00 -7.62145666e+00
 -7.62145666e+00 -1.65076083e+00 -6.80897351e-01 -6.80897351e-01
 -6.80897351e-01  8.65674532e+01  6.92249978e+02  4.04352737e+03
  2.98145867e+04  1.54847562e+05  6.64954323e+05  2.71967595e+06
  1.10460074e+07  4.65101238e+07]
E1 = -706.5871275332305  E_coul = 198.9473876309575
cycle= 1 E= -507.639739902273  delta_E= -3.71  |g|= 0.316  |ddm|= 0.301
    CPU time for cycle= 1      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.41946
diis-c [-0.17594643  1.        ]
  HOMO = -0.236239010552406  LUMO = 87.9022812227011
  mo_energy =
[-1.20262703e+02 -1.22528568e+01 -6.65287981e+00 -6.65287981e+00
 -6.65287981e+00 -1.16346560e+00 -2.36239011e-01 -2.36239011e-01
 -2.36239011e-01  8.79022812e+01  6.93619996e+02  4.04477701e+03
  2.98156761e+04  1.54848580e+05  6.64955312e+05  2.71967693e+06
  1.10460084e+07  4.65101248e+07]
E1 = -706.556478805354  E_coul = 198.91632229721134
cycle= 2 E= -507.640156508143  delta_E= -0.000417  |g|= 0.00468  |ddm|= 0.0139
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00497419
diis-c [-2.46881303e-05 -5.56650533e-04  1.00055665e+00]
  HOMO = -0.236408928612763  LUMO = 87.8988128488114
  mo_energy =
[-1.20271155e+02 -1.22540110e+01 -6.65466803e+00 -6.65466803e+00
 -6.65466803e+00 -1.16352841e+00 -2.36408929e-01 -2.36408929e-01
 -2.36408929e-01  8.78988128e+01  6.93609550e+02  4.04476134e+03
  2.98156572e+04  1.54848561e+05  6.64955292e+05  2.71967691e+06
  1.10460084e+07  4.65101248e+07]
E1 = -706.5560543917959  E_coul = 198.9158977783138
cycle= 3 E= -507.640156613482  delta_E= -1.05e-07  |g|= 9.24e-05  |ddm|= 0.000194
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.000123729
diis-c [-3.75582170e-10  3.35382800e-05 -2.51928442e-02  1.02515931e+00]
  HOMO = -0.236411042987893  LUMO = 87.8987696990969
  mo_energy =
[-1.20271264e+02 -1.22540261e+01 -6.65469385e+00 -6.65469385e+00
 -6.65469385e+00 -1.16352904e+00 -2.36411043e-01 -2.36411043e-01
 -2.36411043e-01  8.78987697e+01  6.93609438e+02  4.04476120e+03
  2.98156570e+04  1.54848560e+05  6.64955291e+05  2.71967691e+06
  1.10460084e+07  4.65101248e+07]
E1 = -706.5560475114318  E_coul = 198.9158908979127
cycle= 4 E= -507.640156613519  delta_E= -3.69e-11  |g|= 3.59e-07  |ddm|= 3.28e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.5560475114318  E_coul = 198.9158908979127
  HOMO = -0.236411027594211  LUMO = 87.8987700257532
  mo_energy =
[-1.20271264e+02 -1.22540260e+01 -6.65469370e+00 -6.65469370e+00
 -6.65469370e+00 -1.16352903e+00 -2.36411028e-01 -2.36411028e-01
 -2.36411028e-01  8.78987700e+01  6.93609439e+02  4.04476120e+03
  2.98156570e+04  1.54848560e+05  6.64955291e+05  2.71967691e+06
  1.10460084e+07  4.65101248e+07]
E1 = -706.5560475462988  E_coul = 198.91589093277952
Extra cycle  E= -507.640156613519  delta_E= -2.84e-13  |g|= 6.14e-09  |ddm|= 1.54e-08
    CPU time for scf_cycle      0.10 sec, wall time      0.11 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 56.38131162608373
E1 = -706.5560475462988  E_coul = 198.91589093277952
init E= -507.640156613519
    CPU time for initialize scf      0.12 sec, wall time      0.12 sec
  HOMO = -0.236411027415977  LUMO = 87.8987700296883
  mo_energy =
[-1.20271264e+02 -1.22540260e+01 -6.65469370e+00 -6.65469370e+00
 -6.65469370e+00 -1.16352903e+00 -2.36411027e-01 -2.36411027e-01
 -2.36411027e-01  8.78987700e+01  6.93609439e+02  4.04476120e+03
  2.98156570e+04  1.54848560e+05  6.64955291e+05  2.71967691e+06
  1.10460084e+07  4.65101248e+07]
E1 = -706.556047546821  E_coul = 198.9158909333018
cycle= 1 E= -507.640156613519  delta_E= 1.14e-13  |g|= 1.93e-10  |ddm|= 2.37e-10
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -706.556047546821  E_coul = 198.9158909333018
  HOMO = -0.236411027413481  LUMO = 87.8987700297457
  mo_energy =
[-1.20271264e+02 -1.22540260e+01 -6.65469370e+00 -6.65469370e+00
 -6.65469370e+00 -1.16352903e+00 -2.36411027e-01 -2.36411027e-01
 -2.36411027e-01  8.78987700e+01  6.93609439e+02  4.04476120e+03
  2.98156570e+04  1.54848560e+05  6.64955291e+05  2.71967691e+06
  1.10460084e+07  4.65101248e+07]
E1 = -706.55604754683  E_coul = 198.9158909333105
Extra cycle  E= -507.640156613519  delta_E= -2.84e-13  |g|= 1.9e-10  |ddm|= 4.13e-12
    CPU time for scf_cycle      0.19 sec, wall time      0.20 sec
exp = [1.87954849e+07 4.69887121e+06 1.17471780e+06 2.93679373e+05
 7.34201192e+04 1.83066331e+04 2.29781668e+03 4.67320002e+02
 1.23598028e+02 3.79141747e+01 4.74268406e+00 3.91241932e-01
 8.59860330e+00 4.90846913e-01]
grad_E = [-1.42642396e-13  1.59181466e-11 -7.98652840e-12  9.34280329e-09
 -3.95455331e-08  5.69762424e-06  3.54679024e-06 -5.95789697e-07
  1.70933998e-05  2.18233214e-06 -3.14915406e-05  1.40786779e-04
  4.07912507e-05  2.92364620e-04]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="BFGS",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((14, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.6988712134173084e+06,1.1747178033543271e+06,2.9367945083858178e+05,7.3419865393677101e+04,1.8353927627435987e+04,2.2341424145819028e+03,4.5688904996449571e+02,1.2173317272260677e+02,3.7593061247508530e+01,4.7412722556720146e+00,3.9120358491841306e-01,8.5986297237246045e+00,4.9084868336327880e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "12s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:20:17 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  18795484.8537        1
[INPUT] 0    0    [1    /1   ]  4698871.21328        1
[INPUT] 0    0    [1    /1   ]  1174717.80329        1
[INPUT] 0    0    [1    /1   ]  293679.373386        1
[INPUT] 0    0    [1    /1   ]  73420.118985         1
[INPUT] 0    0    [1    /1   ]  18306.7271093        1
[INPUT] 0    0    [1    /1   ]  2297.37218754        1
[INPUT] 0    0    [1    /1   ]  467.311028756        1
[INPUT] 0    0    [1    /1   ]  123.612303112        1
[INPUT] 0    0    [1    /1   ]  37.9182222989        1
[INPUT] 0    0    [1    /1   ]  4.74267205028        1
[INPUT] 0    0    [1    /1   ]  0.391244660953       1
[INPUT] 1    0    [1    /1   ]  8.59862153251        1
[INPUT] 1    0    [1    /1   ]  0.490849754679       1

nuclear repulsion = 0
number of shells = 14
number of NR pGTOs = 18
number of NR cGTOs = 18
basis = {'Ar': [[0, [18795484.853670076, 1.0]], [0, [4698871.213284893, 1.0]], [0, [1174717.8032945422, 1.0]], [0, [293679.3733857258, 1.0]], [0, [73420.11898498489, 1.0]], [0, [18306.72710932886, 1.0]], [0, [2297.372187535547, 1.0]], [0, [467.31102875567353, 1.0]], [0, [123.6123031124215, 1.0]], [0, [37.91822229894306, 1.0]], [0, [4.742672050280585, 1.0]], [0, [0.39124466095323296, 1.0]], [1, [8.598621532508753, 1.0]], [1, [0.4908497546791715, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [18795484.85367008]
bas 1, expnt(s) = [4698871.21328489]
bas 2, expnt(s) = [1174717.80329454]
bas 3, expnt(s) = [293679.37338573]
bas 4, expnt(s) = [73420.11898498]
bas 5, expnt(s) = [18306.72710933]
bas 6, expnt(s) = [2297.37218754]
bas 7, expnt(s) = [467.31102876]
bas 8, expnt(s) = [123.61230311]
bas 9, expnt(s) = [37.9182223]
bas 10, expnt(s) = [4.74267205]
bas 11, expnt(s) = [0.39124466]
bas 12, expnt(s) = [8.59862153]
bas 13, expnt(s) = [0.49084975]
CPU time:       383.22
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  0  1  1  0 42 43  0]
 [ 0  0  1  1  0 44 45  0]
 [ 0  0  1  1  0 46 47  0]
 [ 0  1  1  1  0 48 49  0]
 [ 0  1  1  1  0 50 51  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.87954849e+07 7.21199097e+05 4.69887121e+06 2.54982386e+05
 1.17471780e+06 9.01498871e+04 2.93679373e+05 3.18727919e+04
 7.34201190e+04 1.12687654e+04 1.83067271e+04 3.97624426e+03
 2.29737219e+03 8.38375433e+02 4.67311029e+02 2.53933236e+02
 1.23612303e+02 9.36615408e+01 3.79182223e+01 3.86056617e+01
 4.74267205e+00 8.11955719e+00 3.91244661e-01 1.24983114e+00
 8.59862153e+00 4.29556638e+01 4.90849755e-01 1.19858852e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319924893726913
cond(S) = 56.38270175649885
E1 = -688.8485876767124  E_coul = 184.91690975754912
init E= -503.931677919163
    CPU time for initialize scf      0.03 sec, wall time      0.03 sec
  HOMO = -0.680892950483506  LUMO = 86.5818537220994
  mo_energy =
[-1.21650540e+02 -1.32810180e+01 -7.62144168e+00 -7.62144168e+00
 -7.62144168e+00 -1.65075816e+00 -6.80892950e-01 -6.80892950e-01
 -6.80892950e-01  8.65818537e+01  6.92295155e+02  4.04308287e+03
  2.98132925e+04  1.54846391e+05  6.64953318e+05  2.71967506e+06
  1.10460066e+07  4.65101231e+07]
E1 = -706.5874160370314  E_coul = 198.94767533594953
cycle= 1 E= -507.639740701082  delta_E= -3.71  |g|= 0.316  |ddm|= 0.301
    CPU time for cycle= 1      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.419467
diis-c [-0.17595288  1.        ]
  HOMO = -0.236231050746781  LUMO = 87.9167036629637
  mo_energy =
[-1.20262664e+02 -1.22528396e+01 -6.65286072e+00 -6.65286072e+00
 -6.65286072e+00 -1.16345940e+00 -2.36231051e-01 -2.36231051e-01
 -2.36231051e-01  8.79167037e+01  6.93665183e+02  4.04433254e+03
  2.98143819e+04  1.54847410e+05  6.64954307e+05  2.71967604e+06
  1.10460076e+07  4.65101241e+07]
E1 = -706.5567744712499  E_coul = 198.91661726418928
cycle= 2 E= -507.640157207061  delta_E= -0.000417  |g|= 0.00467  |ddm|= 0.0139
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00497367
diis-c [-2.46827679e-05 -5.57433500e-04  1.00055743e+00]
  HOMO = -0.236400923131532  LUMO = 87.9132357850653
  mo_energy =
[-1.20271115e+02 -1.22539936e+01 -6.65464846e+00 -6.65464846e+00
 -6.65464846e+00 -1.16352219e+00 -2.36400923e-01 -2.36400923e-01
 -2.36400923e-01  8.79132358e+01  6.93654739e+02  4.04431688e+03
  2.98143630e+04  1.54847390e+05  6.64954287e+05  2.71967602e+06
  1.10460076e+07  4.65101241e+07]
E1 = -706.5563501990031  E_coul = 198.9161928866457
cycle= 3 E= -507.640157312357  delta_E= -1.05e-07  |g|= 9.24e-05  |ddm|= 0.000194
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.000123702
diis-c [-3.75424771e-10  3.35380732e-05 -2.51899866e-02  1.02515645e+00]
  HOMO = -0.236403036604429  LUMO = 87.9131926500301
  mo_energy =
[-1.20271224e+02 -1.22540086e+01 -6.65467428e+00 -6.65467428e+00
 -6.65467428e+00 -1.16352282e+00 -2.36403037e-01 -2.36403037e-01
 -2.36403037e-01  8.79131927e+01  6.93654627e+02  4.04431674e+03
  2.98143628e+04  1.54847390e+05  6.64954287e+05  2.71967602e+06
  1.10460076e+07  4.65101241e+07]
E1 = -706.5563433219926  E_coul = 198.9161860095973
cycle= 4 E= -507.640157312395  delta_E= -3.79e-11  |g|= 3.59e-07  |ddm|= 3.28e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.5563433219926  E_coul = 198.9161860095973
  HOMO = -0.236403021218415  LUMO = 87.9131929765815
  mo_energy =
[-1.20271223e+02 -1.22540085e+01 -6.65467413e+00 -6.65467413e+00
 -6.65467413e+00 -1.16352281e+00 -2.36403021e-01 -2.36403021e-01
 -2.36403021e-01  8.79131930e+01  6.93654628e+02  4.04431674e+03
  2.98143628e+04  1.54847390e+05  6.64954287e+05  2.71967602e+06
  1.10460076e+07  4.65101241e+07]
E1 = -706.5563433568419  E_coul = 198.91618604444662
Extra cycle  E= -507.640157312395  delta_E= -5.68e-14  |g|= 6.15e-09  |ddm|= 1.54e-08
    CPU time for scf_cycle      0.11 sec, wall time      0.11 sec
exp = [1.87954849e+07 4.69887121e+06 1.17471780e+06 2.93679373e+05
 7.34201190e+04 1.83067271e+04 2.29737219e+03 4.67311029e+02
 1.23612303e+02 3.79182223e+01 4.74267205e+00 3.91244661e-01
 8.59862153e+00 4.90849755e-01]
E = -507.64015731239533
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="BFGS",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((14, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.6988712134173084e+06,1.1747178033543271e+06,2.9367945083858178e+05,7.3419865393677101e+04,1.8353927627435987e+04,2.2341424145819028e+03,4.5688904996449571e+02,1.2173317272260677e+02,3.7593061247508530e+01,4.7412722556720146e+00,3.9120358491841306e-01,8.5986297237246045e+00,4.9084868336327880e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "12s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:20:18 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  18795484.8537        1
[INPUT] 0    0    [1    /1   ]  4698871.21328        1
[INPUT] 0    0    [1    /1   ]  1174717.80329        1
[INPUT] 0    0    [1    /1   ]  293679.373386        1
[INPUT] 0    0    [1    /1   ]  73420.118985         1
[INPUT] 0    0    [1    /1   ]  18306.7271093        1
[INPUT] 0    0    [1    /1   ]  2297.37218754        1
[INPUT] 0    0    [1    /1   ]  467.311028756        1
[INPUT] 0    0    [1    /1   ]  123.612303112        1
[INPUT] 0    0    [1    /1   ]  37.9182222989        1
[INPUT] 0    0    [1    /1   ]  4.74267205028        1
[INPUT] 0    0    [1    /1   ]  0.391244660953       1
[INPUT] 1    0    [1    /1   ]  8.59862153251        1
[INPUT] 1    0    [1    /1   ]  0.490849754679       1

nuclear repulsion = 0
number of shells = 14
number of NR pGTOs = 18
number of NR cGTOs = 18
basis = {'Ar': [[0, [18795484.853670076, 1.0]], [0, [4698871.213284893, 1.0]], [0, [1174717.8032945422, 1.0]], [0, [293679.3733857258, 1.0]], [0, [73420.11898498489, 1.0]], [0, [18306.72710932886, 1.0]], [0, [2297.372187535547, 1.0]], [0, [467.31102875567353, 1.0]], [0, [123.6123031124215, 1.0]], [0, [37.91822229894306, 1.0]], [0, [4.742672050280585, 1.0]], [0, [0.39124466095323296, 1.0]], [1, [8.598621532508753, 1.0]], [1, [0.4908497546791715, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [18795484.85367008]
bas 1, expnt(s) = [4698871.21328489]
bas 2, expnt(s) = [1174717.80329454]
bas 3, expnt(s) = [293679.37338573]
bas 4, expnt(s) = [73420.11898498]
bas 5, expnt(s) = [18306.72710933]
bas 6, expnt(s) = [2297.37218754]
bas 7, expnt(s) = [467.31102876]
bas 8, expnt(s) = [123.61230311]
bas 9, expnt(s) = [37.9182223]
bas 10, expnt(s) = [4.74267205]
bas 11, expnt(s) = [0.39124466]
bas 12, expnt(s) = [8.59862153]
bas 13, expnt(s) = [0.49084975]
CPU time:       384.36
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  0  1  1  0 42 43  0]
 [ 0  0  1  1  0 44 45  0]
 [ 0  0  1  1  0 46 47  0]
 [ 0  1  1  1  0 48 49  0]
 [ 0  1  1  1  0 50 51  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.87954849e+07 7.21199097e+05 4.69887121e+06 2.54982386e+05
 1.17471780e+06 9.01498871e+04 2.93679373e+05 3.18727919e+04
 7.34201190e+04 1.12687654e+04 1.83067271e+04 3.97624426e+03
 2.29737219e+03 8.38375433e+02 4.67311029e+02 2.53933236e+02
 1.23612303e+02 9.36615408e+01 3.79182223e+01 3.86056617e+01
 4.74267205e+00 8.11955719e+00 3.91244661e-01 1.24983114e+00
 8.59862153e+00 4.29556638e+01 4.90849755e-01 1.19858852e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319924893726913
cond(S) = 56.38270175649885
E1 = -688.8485876767124  E_coul = 184.91690975754912
init E= -503.931677919163
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.680892950483506  LUMO = 86.5818537220994
  mo_energy =
[-1.21650540e+02 -1.32810180e+01 -7.62144168e+00 -7.62144168e+00
 -7.62144168e+00 -1.65075816e+00 -6.80892950e-01 -6.80892950e-01
 -6.80892950e-01  8.65818537e+01  6.92295155e+02  4.04308287e+03
  2.98132925e+04  1.54846391e+05  6.64953318e+05  2.71967506e+06
  1.10460066e+07  4.65101231e+07]
E1 = -706.5874160370314  E_coul = 198.94767533594953
cycle= 1 E= -507.639740701082  delta_E= -3.71  |g|= 0.316  |ddm|= 0.301
    CPU time for cycle= 1      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.419467
diis-c [-0.17595288  1.        ]
  HOMO = -0.236231050746781  LUMO = 87.9167036629637
  mo_energy =
[-1.20262664e+02 -1.22528396e+01 -6.65286072e+00 -6.65286072e+00
 -6.65286072e+00 -1.16345940e+00 -2.36231051e-01 -2.36231051e-01
 -2.36231051e-01  8.79167037e+01  6.93665183e+02  4.04433254e+03
  2.98143819e+04  1.54847410e+05  6.64954307e+05  2.71967604e+06
  1.10460076e+07  4.65101241e+07]
E1 = -706.5567744712499  E_coul = 198.91661726418928
cycle= 2 E= -507.640157207061  delta_E= -0.000417  |g|= 0.00467  |ddm|= 0.0139
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00497367
diis-c [-2.46827679e-05 -5.57433500e-04  1.00055743e+00]
  HOMO = -0.236400923131532  LUMO = 87.9132357850653
  mo_energy =
[-1.20271115e+02 -1.22539936e+01 -6.65464846e+00 -6.65464846e+00
 -6.65464846e+00 -1.16352219e+00 -2.36400923e-01 -2.36400923e-01
 -2.36400923e-01  8.79132358e+01  6.93654739e+02  4.04431688e+03
  2.98143630e+04  1.54847390e+05  6.64954287e+05  2.71967602e+06
  1.10460076e+07  4.65101241e+07]
E1 = -706.5563501990031  E_coul = 198.9161928866457
cycle= 3 E= -507.640157312357  delta_E= -1.05e-07  |g|= 9.24e-05  |ddm|= 0.000194
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.000123702
diis-c [-3.75424771e-10  3.35380732e-05 -2.51899866e-02  1.02515645e+00]
  HOMO = -0.236403036604429  LUMO = 87.9131926500301
  mo_energy =
[-1.20271224e+02 -1.22540086e+01 -6.65467428e+00 -6.65467428e+00
 -6.65467428e+00 -1.16352282e+00 -2.36403037e-01 -2.36403037e-01
 -2.36403037e-01  8.79131927e+01  6.93654627e+02  4.04431674e+03
  2.98143628e+04  1.54847390e+05  6.64954287e+05  2.71967602e+06
  1.10460076e+07  4.65101241e+07]
E1 = -706.5563433219926  E_coul = 198.9161860095973
cycle= 4 E= -507.640157312395  delta_E= -3.79e-11  |g|= 3.59e-07  |ddm|= 3.28e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.5563433219926  E_coul = 198.9161860095973
  HOMO = -0.236403021218415  LUMO = 87.9131929765815
  mo_energy =
[-1.20271223e+02 -1.22540085e+01 -6.65467413e+00 -6.65467413e+00
 -6.65467413e+00 -1.16352281e+00 -2.36403021e-01 -2.36403021e-01
 -2.36403021e-01  8.79131930e+01  6.93654628e+02  4.04431674e+03
  2.98143628e+04  1.54847390e+05  6.64954287e+05  2.71967602e+06
  1.10460076e+07  4.65101241e+07]
E1 = -706.5563433568419  E_coul = 198.91618604444662
Extra cycle  E= -507.640157312395  delta_E= -5.68e-14  |g|= 6.15e-09  |ddm|= 1.54e-08
    CPU time for scf_cycle      0.10 sec, wall time      0.11 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 56.38270175649885
E1 = -706.5563433568419  E_coul = 198.91618604444662
init E= -507.640157312395
    CPU time for initialize scf      0.12 sec, wall time      0.13 sec
  HOMO = -0.236403021040281  LUMO = 87.9131929805173
  mo_energy =
[-1.20271223e+02 -1.22540085e+01 -6.65467413e+00 -6.65467413e+00
 -6.65467413e+00 -1.16352281e+00 -2.36403021e-01 -2.36403021e-01
 -2.36403021e-01  8.79131930e+01  6.93654628e+02  4.04431674e+03
  2.98143628e+04  1.54847390e+05  6.64954287e+05  2.71967602e+06
  1.10460076e+07  4.65101241e+07]
E1 = -706.5563433573623  E_coul = 198.91618604496762
cycle= 1 E= -507.640157312395  delta_E= 6.82e-13  |g|= 2.03e-10  |ddm|= 2.36e-10
    CPU time for cycle= 1      0.01 sec, wall time      0.02 sec
E1 = -706.5563433573623  E_coul = 198.91618604496762
  HOMO = -0.236403021037797  LUMO = 87.9131929805737
  mo_energy =
[-1.20271223e+02 -1.22540085e+01 -6.65467413e+00 -6.65467413e+00
 -6.65467413e+00 -1.16352281e+00 -2.36403021e-01 -2.36403021e-01
 -2.36403021e-01  8.79131930e+01  6.93654628e+02  4.04431674e+03
  2.98143628e+04  1.54847390e+05  6.64954287e+05  2.71967602e+06
  1.10460076e+07  4.65101241e+07]
E1 = -706.5563433573718  E_coul = 198.91618604497685
Extra cycle  E= -507.640157312395  delta_E= -3.41e-13  |g|= 1.85e-10  |ddm|= 4.18e-12
    CPU time for scf_cycle      0.20 sec, wall time      0.20 sec
exp = [1.87954849e+07 4.69887121e+06 1.17471780e+06 2.93679373e+05
 7.34201190e+04 1.83067271e+04 2.29737219e+03 4.67311029e+02
 1.23612303e+02 3.79182223e+01 4.74267205e+00 3.91244661e-01
 8.59862153e+00 4.90849755e-01]
grad_E = [-1.42417442e-13  1.59341111e-11 -7.86699129e-12  9.35193900e-09
 -3.95115368e-08  5.70365429e-06  3.37694487e-06 -1.03154672e-06
  2.26244199e-05  2.89235704e-06 -4.17712636e-05  1.86739306e-04
  5.41045162e-05  3.87795859e-04]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="BFGS",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((14, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.6988712134173084e+06,1.1747178033543271e+06,2.9367945083858178e+05,7.3419865393677101e+04,1.8353927627435987e+04,2.2341424145819028e+03,4.5688904996449571e+02,1.2173317272260677e+02,3.7593061247508530e+01,4.7412722556720146e+00,3.9120358491841306e-01,8.5986297237246045e+00,4.9084868336327880e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "12s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:20:22 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  18795484.8537        1
[INPUT] 0    0    [1    /1   ]  4698871.21329        1
[INPUT] 0    0    [1    /1   ]  1174717.8033         1
[INPUT] 0    0    [1    /1   ]  293679.373455        1
[INPUT] 0    0    [1    /1   ]  73420.1192014        1
[INPUT] 0    0    [1    /1   ]  18306.7691965        1
[INPUT] 0    0    [1    /1   ]  2296.73757235        1
[INPUT] 0    0    [1    /1   ]  467.29783191         1
[INPUT] 0    0    [1    /1   ]  123.632489308        1
[INPUT] 0    0    [1    /1   ]  37.9239532191        1
[INPUT] 0    0    [1    /1   ]  4.74265496115        1
[INPUT] 0    0    [1    /1   ]  0.391248530305       1
[INPUT] 1    0    [1    /1   ]  8.59864738706        1
[INPUT] 1    0    [1    /1   ]  0.490853785064       1

nuclear repulsion = 0
number of shells = 14
number of NR pGTOs = 18
number of NR cGTOs = 18
basis = {'Ar': [[0, [18795484.853670076, 1.0]], [0, [4698871.213285014, 1.0]], [0, [1174717.8032953483, 1.0]], [0, [293679.3734549852, 1.0]], [0, [73420.11920136666, 1.0]], [0, [18306.76919648941, 1.0]], [0, [2296.7375723534337, 1.0]], [0, [467.29783190952577, 1.0]], [0, [123.63248930814865, 1.0]], [0, [37.92395321905295, 1.0]], [0, [4.742654961145566, 1.0]], [0, [0.3912485303046581, 1.0]], [1, [8.598647387061622, 1.0]], [1, [0.49085378506356414, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [18795484.85367008]
bas 1, expnt(s) = [4698871.21328501]
bas 2, expnt(s) = [1174717.80329535]
bas 3, expnt(s) = [293679.37345499]
bas 4, expnt(s) = [73420.11920137]
bas 5, expnt(s) = [18306.76919649]
bas 6, expnt(s) = [2296.73757235]
bas 7, expnt(s) = [467.29783191]
bas 8, expnt(s) = [123.63248931]
bas 9, expnt(s) = [37.92395322]
bas 10, expnt(s) = [4.74265496]
bas 11, expnt(s) = [0.39124853]
bas 12, expnt(s) = [8.59864739]
bas 13, expnt(s) = [0.49085379]
CPU time:       388.30
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  0  1  1  0 42 43  0]
 [ 0  0  1  1  0 44 45  0]
 [ 0  0  1  1  0 46 47  0]
 [ 0  1  1  1  0 48 49  0]
 [ 0  1  1  1  0 50 51  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.87954849e+07 7.21199097e+05 4.69887121e+06 2.54982386e+05
 1.17471780e+06 9.01498871e+04 2.93679373e+05 3.18727920e+04
 7.34201192e+04 1.12687654e+04 1.83067692e+04 3.97625111e+03
 2.29673757e+03 8.38201735e+02 4.67297832e+02 2.53927858e+02
 1.23632489e+02 9.36730119e+01 3.79239532e+01 3.86100377e+01
 4.74265496e+00 8.11953525e+00 3.91248530e-01 1.24984041e+00
 8.59864739e+00 4.29558253e+01 4.90853785e-01 1.19860083e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319919077392466
cond(S) = 56.38458584010191
E1 = -688.8486408881348  E_coul = 184.91721770918127
init E= -503.931423178954
    CPU time for initialize scf      0.03 sec, wall time      0.03 sec
  HOMO = -0.680886709724999  LUMO = 86.6022295800055
  mo_energy =
[-1.21650492e+02 -1.32810004e+01 -7.62142045e+00 -7.62142045e+00
 -7.62142045e+00 -1.65075437e+00 -6.80886710e-01 -6.80886710e-01
 -6.80886710e-01  8.66022296e+01  6.92358605e+02  4.04244589e+03
  2.98113477e+04  1.54844450e+05  6.64951564e+05  2.71967348e+06
  1.10460052e+07  4.65101218e+07]
E1 = -706.587825466977  E_coul = 198.94808337635374
cycle= 1 E= -507.639742090623  delta_E= -3.71  |g|= 0.316  |ddm|= 0.301
    CPU time for cycle= 1      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.419478
diis-c [-0.17596205  1.        ]
  HOMO = -0.236219762616441  LUMO = 87.9371105969787
  mo_energy =
[-1.20262608e+02 -1.22528153e+01 -6.65283365e+00 -6.65283365e+00
 -6.65283365e+00 -1.16345060e+00 -2.36219763e-01 -2.36219763e-01
 -2.36219763e-01  8.79371106e+01  6.93728649e+02  4.04369561e+03
  2.98124372e+04  1.54845469e+05  6.64952553e+05  2.71967446e+06
  1.10460062e+07  4.65101228e+07]
E1 = -706.5571940305384  E_coul = 198.91703557519912
cycle= 2 E= -507.640158455339  delta_E= -0.000416  |g|= 0.00467  |ddm|= 0.0139
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00497293
diis-c [-2.46751915e-05 -5.58540927e-04  1.00055854e+00]
  HOMO = -0.236389570416966  LUMO = 87.933643420901
  mo_energy =
[-1.20271057e+02 -1.22539688e+01 -6.65462072e+00 -6.65462072e+00
 -6.65462072e+00 -1.16351338e+00 -2.36389570e-01 -2.36389570e-01
 -2.36389570e-01  8.79336434e+01  6.93718208e+02  4.04367995e+03
  2.98124183e+04  1.54845449e+05  6.64952533e+05  2.71967444e+06
  1.10460062e+07  4.65101228e+07]
E1 = -706.5567699581126  E_coul = 198.91661139753668
cycle= 3 E= -507.640158560576  delta_E= -1.05e-07  |g|= 9.24e-05  |ddm|= 0.000194
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.000123663
diis-c [-3.75203236e-10  3.35376515e-05 -2.51859424e-02  1.02515240e+00]
  HOMO = -0.23639168261429  LUMO = 87.9336003066193
  mo_energy =
[-1.20271166e+02 -1.22539839e+01 -6.65464653e+00 -6.65464653e+00
 -6.65464653e+00 -1.16351400e+00 -2.36391683e-01 -2.36391683e-01
 -2.36391683e-01  8.79336003e+01  6.93718096e+02  4.04367981e+03
  2.98124181e+04  1.54845449e+05  6.64952533e+05  2.71967444e+06
  1.10460062e+07  4.65101228e+07]
E1 = -706.5567630858416  E_coul = 198.9166045252284
cycle= 4 E= -507.640158560613  delta_E= -3.73e-11  |g|= 3.58e-07  |ddm|= 3.28e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.5567630858416  E_coul = 198.9166045252284
  HOMO = -0.236391667239112  LUMO = 87.9336006330289
  mo_energy =
[-1.20271165e+02 -1.22539838e+01 -6.65464637e+00 -6.65464637e+00
 -6.65464637e+00 -1.16351399e+00 -2.36391667e-01 -2.36391667e-01
 -2.36391667e-01  8.79336006e+01  6.93718097e+02  4.04367981e+03
  2.98124181e+04  1.54845449e+05  6.64952533e+05  2.71967444e+06
  1.10460062e+07  4.65101228e+07]
E1 = -706.5567631206657  E_coul = 198.91660456005212
Extra cycle  E= -507.640158560614  delta_E= -3.98e-13  |g|= 6.14e-09  |ddm|= 1.54e-08
    CPU time for scf_cycle      0.11 sec, wall time      0.11 sec
exp = [1.87954849e+07 4.69887121e+06 1.17471780e+06 2.93679373e+05
 7.34201192e+04 1.83067692e+04 2.29673757e+03 4.67297832e+02
 1.23632489e+02 3.79239532e+01 4.74265496e+00 3.91248530e-01
 8.59864739e+00 4.90853785e-01]
E = -507.64015856061354
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="BFGS",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((14, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.6988712134173084e+06,1.1747178033543271e+06,2.9367945083858178e+05,7.3419865393677101e+04,1.8353927627435987e+04,2.2341424145819028e+03,4.5688904996449571e+02,1.2173317272260677e+02,3.7593061247508530e+01,4.7412722556720146e+00,3.9120358491841306e-01,8.5986297237246045e+00,4.9084868336327880e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "12s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:20:24 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  18795484.8537        1
[INPUT] 0    0    [1    /1   ]  4698871.21329        1
[INPUT] 0    0    [1    /1   ]  1174717.8033         1
[INPUT] 0    0    [1    /1   ]  293679.373455        1
[INPUT] 0    0    [1    /1   ]  73420.1192014        1
[INPUT] 0    0    [1    /1   ]  18306.7691965        1
[INPUT] 0    0    [1    /1   ]  2296.73757235        1
[INPUT] 0    0    [1    /1   ]  467.29783191         1
[INPUT] 0    0    [1    /1   ]  123.632489308        1
[INPUT] 0    0    [1    /1   ]  37.9239532191        1
[INPUT] 0    0    [1    /1   ]  4.74265496115        1
[INPUT] 0    0    [1    /1   ]  0.391248530305       1
[INPUT] 1    0    [1    /1   ]  8.59864738706        1
[INPUT] 1    0    [1    /1   ]  0.490853785064       1

nuclear repulsion = 0
number of shells = 14
number of NR pGTOs = 18
number of NR cGTOs = 18
basis = {'Ar': [[0, [18795484.853670076, 1.0]], [0, [4698871.213285014, 1.0]], [0, [1174717.8032953483, 1.0]], [0, [293679.3734549852, 1.0]], [0, [73420.11920136666, 1.0]], [0, [18306.76919648941, 1.0]], [0, [2296.7375723534337, 1.0]], [0, [467.29783190952577, 1.0]], [0, [123.63248930814865, 1.0]], [0, [37.92395321905295, 1.0]], [0, [4.742654961145566, 1.0]], [0, [0.3912485303046581, 1.0]], [1, [8.598647387061622, 1.0]], [1, [0.49085378506356414, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [18795484.85367008]
bas 1, expnt(s) = [4698871.21328501]
bas 2, expnt(s) = [1174717.80329535]
bas 3, expnt(s) = [293679.37345499]
bas 4, expnt(s) = [73420.11920137]
bas 5, expnt(s) = [18306.76919649]
bas 6, expnt(s) = [2296.73757235]
bas 7, expnt(s) = [467.29783191]
bas 8, expnt(s) = [123.63248931]
bas 9, expnt(s) = [37.92395322]
bas 10, expnt(s) = [4.74265496]
bas 11, expnt(s) = [0.39124853]
bas 12, expnt(s) = [8.59864739]
bas 13, expnt(s) = [0.49085379]
CPU time:       389.41
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  0  1  1  0 42 43  0]
 [ 0  0  1  1  0 44 45  0]
 [ 0  0  1  1  0 46 47  0]
 [ 0  1  1  1  0 48 49  0]
 [ 0  1  1  1  0 50 51  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.87954849e+07 7.21199097e+05 4.69887121e+06 2.54982386e+05
 1.17471780e+06 9.01498871e+04 2.93679373e+05 3.18727920e+04
 7.34201192e+04 1.12687654e+04 1.83067692e+04 3.97625111e+03
 2.29673757e+03 8.38201735e+02 4.67297832e+02 2.53927858e+02
 1.23632489e+02 9.36730119e+01 3.79239532e+01 3.86100377e+01
 4.74265496e+00 8.11953525e+00 3.91248530e-01 1.24984041e+00
 8.59864739e+00 4.29558253e+01 4.90853785e-01 1.19860083e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319919077392466
cond(S) = 56.38458584010191
E1 = -688.8486408881348  E_coul = 184.91721770918127
init E= -503.931423178954
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.680886709724999  LUMO = 86.6022295800055
  mo_energy =
[-1.21650492e+02 -1.32810004e+01 -7.62142045e+00 -7.62142045e+00
 -7.62142045e+00 -1.65075437e+00 -6.80886710e-01 -6.80886710e-01
 -6.80886710e-01  8.66022296e+01  6.92358605e+02  4.04244589e+03
  2.98113477e+04  1.54844450e+05  6.64951564e+05  2.71967348e+06
  1.10460052e+07  4.65101218e+07]
E1 = -706.587825466977  E_coul = 198.94808337635374
cycle= 1 E= -507.639742090623  delta_E= -3.71  |g|= 0.316  |ddm|= 0.301
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.419478
diis-c [-0.17596205  1.        ]
  HOMO = -0.236219762616441  LUMO = 87.9371105969787
  mo_energy =
[-1.20262608e+02 -1.22528153e+01 -6.65283365e+00 -6.65283365e+00
 -6.65283365e+00 -1.16345060e+00 -2.36219763e-01 -2.36219763e-01
 -2.36219763e-01  8.79371106e+01  6.93728649e+02  4.04369561e+03
  2.98124372e+04  1.54845469e+05  6.64952553e+05  2.71967446e+06
  1.10460062e+07  4.65101228e+07]
E1 = -706.5571940305384  E_coul = 198.91703557519912
cycle= 2 E= -507.640158455339  delta_E= -0.000416  |g|= 0.00467  |ddm|= 0.0139
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00497293
diis-c [-2.46751915e-05 -5.58540927e-04  1.00055854e+00]
  HOMO = -0.236389570416966  LUMO = 87.933643420901
  mo_energy =
[-1.20271057e+02 -1.22539688e+01 -6.65462072e+00 -6.65462072e+00
 -6.65462072e+00 -1.16351338e+00 -2.36389570e-01 -2.36389570e-01
 -2.36389570e-01  8.79336434e+01  6.93718208e+02  4.04367995e+03
  2.98124183e+04  1.54845449e+05  6.64952533e+05  2.71967444e+06
  1.10460062e+07  4.65101228e+07]
E1 = -706.5567699581126  E_coul = 198.91661139753668
cycle= 3 E= -507.640158560576  delta_E= -1.05e-07  |g|= 9.24e-05  |ddm|= 0.000194
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.000123663
diis-c [-3.75203236e-10  3.35376515e-05 -2.51859424e-02  1.02515240e+00]
  HOMO = -0.23639168261429  LUMO = 87.9336003066193
  mo_energy =
[-1.20271166e+02 -1.22539839e+01 -6.65464653e+00 -6.65464653e+00
 -6.65464653e+00 -1.16351400e+00 -2.36391683e-01 -2.36391683e-01
 -2.36391683e-01  8.79336003e+01  6.93718096e+02  4.04367981e+03
  2.98124181e+04  1.54845449e+05  6.64952533e+05  2.71967444e+06
  1.10460062e+07  4.65101228e+07]
E1 = -706.5567630858416  E_coul = 198.9166045252284
cycle= 4 E= -507.640158560613  delta_E= -3.73e-11  |g|= 3.58e-07  |ddm|= 3.28e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.5567630858416  E_coul = 198.9166045252284
  HOMO = -0.236391667239112  LUMO = 87.9336006330289
  mo_energy =
[-1.20271165e+02 -1.22539838e+01 -6.65464637e+00 -6.65464637e+00
 -6.65464637e+00 -1.16351399e+00 -2.36391667e-01 -2.36391667e-01
 -2.36391667e-01  8.79336006e+01  6.93718097e+02  4.04367981e+03
  2.98124181e+04  1.54845449e+05  6.64952533e+05  2.71967444e+06
  1.10460062e+07  4.65101228e+07]
E1 = -706.5567631206657  E_coul = 198.91660456005212
Extra cycle  E= -507.640158560614  delta_E= -3.98e-13  |g|= 6.14e-09  |ddm|= 1.54e-08
    CPU time for scf_cycle      0.10 sec, wall time      0.10 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 56.38458584010191
E1 = -706.5567631206657  E_coul = 198.91660456005212
init E= -507.640158560614
    CPU time for initialize scf      0.12 sec, wall time      0.12 sec
  HOMO = -0.236391667061129  LUMO = 87.9336006369623
  mo_energy =
[-1.20271165e+02 -1.22539838e+01 -6.65464637e+00 -6.65464637e+00
 -6.65464637e+00 -1.16351399e+00 -2.36391667e-01 -2.36391667e-01
 -2.36391667e-01  8.79336006e+01  6.93718097e+02  4.04367981e+03
  2.98124181e+04  1.54845449e+05  6.64952533e+05  2.71967444e+06
  1.10460062e+07  4.65101228e+07]
E1 = -706.5567631211863  E_coul = 198.916604560573
cycle= 1 E= -507.640158560613  delta_E= 1.71e-13  |g|= 1.88e-10  |ddm|= 2.36e-10
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -706.5567631211863  E_coul = 198.916604560573
  HOMO = -0.236391667058637  LUMO = 87.9336006370197
  mo_energy =
[-1.20271165e+02 -1.22539838e+01 -6.65464637e+00 -6.65464637e+00
 -6.65464637e+00 -1.16351399e+00 -2.36391667e-01 -2.36391667e-01
 -2.36391667e-01  8.79336006e+01  6.93718097e+02  4.04367981e+03
  2.98124181e+04  1.54845449e+05  6.64952533e+05  2.71967444e+06
  1.10460062e+07  4.65101228e+07]
E1 = -706.5567631211949  E_coul = 198.9166045605817
Extra cycle  E= -507.640158560613  delta_E= 2.27e-13  |g|= 1.92e-10  |ddm|= 4.16e-12
    CPU time for scf_cycle      0.19 sec, wall time      0.19 sec
exp = [1.87954849e+07 4.69887121e+06 1.17471780e+06 2.93679373e+05
 7.34201192e+04 1.83067692e+04 2.29673757e+03 4.67297832e+02
 1.23632489e+02 3.79239532e+01 4.74265496e+00 3.91248530e-01
 8.59864739e+00 4.90853785e-01]
grad_E = [-1.42101641e-13  1.59564965e-11 -7.69921671e-12  9.36475442e-09
 -3.94643854e-08  5.71223028e-06  3.13605029e-06 -1.64913407e-06
  3.04661164e-05  3.90287251e-06 -5.63470246e-05  2.51904040e-04
  7.29847440e-05  5.23128946e-04]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="BFGS",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((14, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.6988712134173084e+06,1.1747178033543271e+06,2.9367945083858178e+05,7.3419865393677101e+04,1.8353927627435987e+04,2.2341424145819028e+03,4.5688904996449571e+02,1.2173317272260677e+02,3.7593061247508530e+01,4.7412722556720146e+00,3.9120358491841306e-01,8.5986297237246045e+00,4.9084868336327880e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "12s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:20:27 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  18795484.8537        1
[INPUT] 0    0    [1    /1   ]  4698871.21328        1
[INPUT] 0    0    [1    /1   ]  1174717.8033         1
[INPUT] 0    0    [1    /1   ]  293679.373277        1
[INPUT] 0    0    [1    /1   ]  73420.120594         1
[INPUT] 0    0    [1    /1   ]  18306.6604446        1
[INPUT] 0    0    [1    /1   ]  2295.83216958        1
[INPUT] 0    0    [1    /1   ]  467.278335052        1
[INPUT] 0    0    [1    /1   ]  123.66095125         1
[INPUT] 0    0    [1    /1   ]  37.9320456956        1
[INPUT] 0    0    [1    /1   ]  4.7426306841         1
[INPUT] 0    0    [1    /1   ]  0.391254004158       1
[INPUT] 1    0    [1    /1   ]  8.59868395874        1
[INPUT] 1    0    [1    /1   ]  0.490859486794       1

nuclear repulsion = 0
number of shells = 14
number of NR pGTOs = 18
number of NR cGTOs = 18
basis = {'Ar': [[0, [18795484.853670083, 1.0]], [0, [4698871.213284714, 1.0]], [0, [1174717.8032965856, 1.0]], [0, [293679.3732769096, 1.0]], [0, [73420.12059395055, 1.0]], [0, [18306.660444582358, 1.0]], [0, [2295.832169581338, 1.0]], [0, [467.2783350516421, 1.0]], [0, [123.66095124985205, 1.0]], [0, [37.9320456955926, 1.0]], [0, [4.742630684100735, 1.0]], [0, [0.3912540041582211, 1.0]], [1, [8.598683958739567, 1.0]], [1, [0.4908594867936381, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [18795484.85367008]
bas 1, expnt(s) = [4698871.21328471]
bas 2, expnt(s) = [1174717.80329659]
bas 3, expnt(s) = [293679.37327691]
bas 4, expnt(s) = [73420.12059395]
bas 5, expnt(s) = [18306.66044458]
bas 6, expnt(s) = [2295.83216958]
bas 7, expnt(s) = [467.27833505]
bas 8, expnt(s) = [123.66095125]
bas 9, expnt(s) = [37.9320457]
bas 10, expnt(s) = [4.74263068]
bas 11, expnt(s) = [0.391254]
bas 12, expnt(s) = [8.59868396]
bas 13, expnt(s) = [0.49085949]
CPU time:       393.36
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  0  1  1  0 42 43  0]
 [ 0  0  1  1  0 44 45  0]
 [ 0  0  1  1  0 46 47  0]
 [ 0  1  1  1  0 48 49  0]
 [ 0  1  1  1  0 50 51  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.87954849e+07 7.21199097e+05 4.69887121e+06 2.54982386e+05
 1.17471780e+06 9.01498871e+04 2.93679373e+05 3.18727919e+04
 7.34201206e+04 1.12687656e+04 1.83066604e+04 3.97623340e+03
 2.29583217e+03 8.37953901e+02 4.67278335e+02 2.53919912e+02
 1.23660951e+02 9.36891851e+01 3.79320457e+01 3.86162167e+01
 4.74263068e+00 8.11950408e+00 3.91254004e-01 1.24985353e+00
 8.59868396e+00 4.29560537e+01 4.90859487e-01 1.19861823e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.3199108505978
cond(S) = 56.387092175269494
E1 = -688.848718331338  E_coul = 184.9176532967887
init E= -503.931065034549
    CPU time for initialize scf      0.03 sec, wall time      0.03 sec
  HOMO = -0.680877880440016  LUMO = 86.6309792320844
  mo_energy =
[-1.21650424e+02 -1.32809754e+01 -7.62139042e+00 -7.62139042e+00
 -7.62139042e+00 -1.65074902e+00 -6.80877880e-01 -6.80877880e-01
 -6.80877880e-01  8.66309792e+01  6.92447306e+02  4.04153298e+03
  2.98083959e+04  1.54841189e+05  6.64948478e+05  2.71967068e+06
  1.10460027e+07  4.65101196e+07]
E1 = -706.5884051575184  E_coul = 198.9486606735748
cycle= 1 E= -507.639744483944  delta_E= -3.71  |g|= 0.316  |ddm|= 0.301
    CPU time for cycle= 1      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.419494
diis-c [-0.17597505  1.        ]
  HOMO = -0.236203793874778  LUMO = 87.9659041252784
  mo_energy =
[-1.20262530e+02 -1.22527809e+01 -6.65279536e+00 -6.65279536e+00
 -6.65279536e+00 -1.16343817e+00 -2.36203794e-01 -2.36203794e-01
 -2.36203794e-01  8.79659041e+01  6.93817371e+02  4.04278278e+03
  2.98094854e+04  1.54842208e+05  6.64949467e+05  2.71967165e+06
  1.10460037e+07  4.65101205e+07]
E1 = -706.557788004208  E_coul = 198.91762735471679
cycle= 2 E= -507.640160649491  delta_E= -0.000416  |g|= 0.00467  |ddm|= 0.0139
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00497189
diis-c [-2.46645217e-05 -5.60102990e-04  1.00056010e+00]
  HOMO = -0.23637351063291  LUMO = 87.9624379394449
  mo_energy =
[-1.20270976e+02 -1.22539338e+01 -6.65458149e+00 -6.65458149e+00
 -6.65458149e+00 -1.16350090e+00 -2.36373511e-01 -2.36373511e-01
 -2.36373511e-01  8.79624379e+01  6.93806935e+02  4.04276712e+03
  2.98094665e+04  1.54842188e+05  6.64949447e+05  2.71967163e+06
  1.10460036e+07  4.65101205e+07]
E1 = -706.5573642134751  E_coul = 198.91720345883235
cycle= 3 E= -507.640160754643  delta_E= -1.05e-07  |g|= 9.23e-05  |ddm|= 0.000194
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.000123608
diis-c [-3.74889382e-10  3.35374365e-05 -2.51802477e-02  1.02514671e+00]
  HOMO = -0.236375621032345  LUMO = 87.9623948544217
  mo_energy =
[-1.20271084e+02 -1.22539489e+01 -6.65460727e+00 -6.65460727e+00
 -6.65460727e+00 -1.16350153e+00 -2.36375621e-01 -2.36375621e-01
 -2.36375621e-01  8.79623949e+01  6.93806822e+02  4.04276698e+03
  2.98094663e+04  1.54842188e+05  6.64949447e+05  2.71967163e+06
  1.10460036e+07  4.65101205e+07]
E1 = -706.557357347886  E_coul = 198.91719659320555
cycle= 4 E= -507.64016075468  delta_E= -3.76e-11  |g|= 3.58e-07  |ddm|= 3.27e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.557357347886  E_coul = 198.91719659320555
  HOMO = -0.236375605672475  LUMO = 87.9623951806321
  mo_energy =
[-1.20271084e+02 -1.22539488e+01 -6.65460711e+00 -6.65460711e+00
 -6.65460711e+00 -1.16350152e+00 -2.36375606e-01 -2.36375606e-01
 -2.36375606e-01  8.79623952e+01  6.93806823e+02  4.04276698e+03
  2.98094663e+04  1.54842188e+05  6.64949447e+05  2.71967163e+06
  1.10460036e+07  4.65101205e+07]
E1 = -706.5573573826726  E_coul = 198.91719662799292
Extra cycle  E= -507.64016075468  delta_E= 6.82e-13  |g|= 6.13e-09  |ddm|= 1.54e-08
    CPU time for scf_cycle      0.11 sec, wall time      0.11 sec
exp = [1.87954849e+07 4.69887121e+06 1.17471780e+06 2.93679373e+05
 7.34201206e+04 1.83066604e+04 2.29583217e+03 4.67278335e+02
 1.23660951e+02 3.79320457e+01 4.74263068e+00 3.91254004e-01
 8.59868396e+00 4.90859487e-01]
E = -507.64016075467975
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="BFGS",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((14, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.6988712134173084e+06,1.1747178033543271e+06,2.9367945083858178e+05,7.3419865393677101e+04,1.8353927627435987e+04,2.2341424145819028e+03,4.5688904996449571e+02,1.2173317272260677e+02,3.7593061247508530e+01,4.7412722556720146e+00,3.9120358491841306e-01,8.5986297237246045e+00,4.9084868336327880e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "12s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:20:29 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  18795484.8537        1
[INPUT] 0    0    [1    /1   ]  4698871.21328        1
[INPUT] 0    0    [1    /1   ]  1174717.8033         1
[INPUT] 0    0    [1    /1   ]  293679.373277        1
[INPUT] 0    0    [1    /1   ]  73420.120594         1
[INPUT] 0    0    [1    /1   ]  18306.6604446        1
[INPUT] 0    0    [1    /1   ]  2295.83216958        1
[INPUT] 0    0    [1    /1   ]  467.278335052        1
[INPUT] 0    0    [1    /1   ]  123.66095125         1
[INPUT] 0    0    [1    /1   ]  37.9320456956        1
[INPUT] 0    0    [1    /1   ]  4.7426306841         1
[INPUT] 0    0    [1    /1   ]  0.391254004158       1
[INPUT] 1    0    [1    /1   ]  8.59868395874        1
[INPUT] 1    0    [1    /1   ]  0.490859486794       1

nuclear repulsion = 0
number of shells = 14
number of NR pGTOs = 18
number of NR cGTOs = 18
basis = {'Ar': [[0, [18795484.853670083, 1.0]], [0, [4698871.213284714, 1.0]], [0, [1174717.8032965856, 1.0]], [0, [293679.3732769096, 1.0]], [0, [73420.12059395055, 1.0]], [0, [18306.660444582358, 1.0]], [0, [2295.832169581338, 1.0]], [0, [467.2783350516421, 1.0]], [0, [123.66095124985205, 1.0]], [0, [37.9320456955926, 1.0]], [0, [4.742630684100735, 1.0]], [0, [0.3912540041582211, 1.0]], [1, [8.598683958739567, 1.0]], [1, [0.4908594867936381, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [18795484.85367008]
bas 1, expnt(s) = [4698871.21328471]
bas 2, expnt(s) = [1174717.80329659]
bas 3, expnt(s) = [293679.37327691]
bas 4, expnt(s) = [73420.12059395]
bas 5, expnt(s) = [18306.66044458]
bas 6, expnt(s) = [2295.83216958]
bas 7, expnt(s) = [467.27833505]
bas 8, expnt(s) = [123.66095125]
bas 9, expnt(s) = [37.9320457]
bas 10, expnt(s) = [4.74263068]
bas 11, expnt(s) = [0.391254]
bas 12, expnt(s) = [8.59868396]
bas 13, expnt(s) = [0.49085949]
CPU time:       394.49
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  0  1  1  0 42 43  0]
 [ 0  0  1  1  0 44 45  0]
 [ 0  0  1  1  0 46 47  0]
 [ 0  1  1  1  0 48 49  0]
 [ 0  1  1  1  0 50 51  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.87954849e+07 7.21199097e+05 4.69887121e+06 2.54982386e+05
 1.17471780e+06 9.01498871e+04 2.93679373e+05 3.18727919e+04
 7.34201206e+04 1.12687656e+04 1.83066604e+04 3.97623340e+03
 2.29583217e+03 8.37953901e+02 4.67278335e+02 2.53919912e+02
 1.23660951e+02 9.36891851e+01 3.79320457e+01 3.86162167e+01
 4.74263068e+00 8.11950408e+00 3.91254004e-01 1.24985353e+00
 8.59868396e+00 4.29560537e+01 4.90859487e-01 1.19861823e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.3199108505978
cond(S) = 56.387092175269494
E1 = -688.848718331338  E_coul = 184.9176532967887
init E= -503.931065034549
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.680877880440016  LUMO = 86.6309792320844
  mo_energy =
[-1.21650424e+02 -1.32809754e+01 -7.62139042e+00 -7.62139042e+00
 -7.62139042e+00 -1.65074902e+00 -6.80877880e-01 -6.80877880e-01
 -6.80877880e-01  8.66309792e+01  6.92447306e+02  4.04153298e+03
  2.98083959e+04  1.54841189e+05  6.64948478e+05  2.71967068e+06
  1.10460027e+07  4.65101196e+07]
E1 = -706.5884051575184  E_coul = 198.9486606735748
cycle= 1 E= -507.639744483944  delta_E= -3.71  |g|= 0.316  |ddm|= 0.301
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.419494
diis-c [-0.17597505  1.        ]
  HOMO = -0.236203793874778  LUMO = 87.9659041252784
  mo_energy =
[-1.20262530e+02 -1.22527809e+01 -6.65279536e+00 -6.65279536e+00
 -6.65279536e+00 -1.16343817e+00 -2.36203794e-01 -2.36203794e-01
 -2.36203794e-01  8.79659041e+01  6.93817371e+02  4.04278278e+03
  2.98094854e+04  1.54842208e+05  6.64949467e+05  2.71967165e+06
  1.10460037e+07  4.65101205e+07]
E1 = -706.557788004208  E_coul = 198.91762735471679
cycle= 2 E= -507.640160649491  delta_E= -0.000416  |g|= 0.00467  |ddm|= 0.0139
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00497189
diis-c [-2.46645217e-05 -5.60102990e-04  1.00056010e+00]
  HOMO = -0.23637351063291  LUMO = 87.9624379394449
  mo_energy =
[-1.20270976e+02 -1.22539338e+01 -6.65458149e+00 -6.65458149e+00
 -6.65458149e+00 -1.16350090e+00 -2.36373511e-01 -2.36373511e-01
 -2.36373511e-01  8.79624379e+01  6.93806935e+02  4.04276712e+03
  2.98094665e+04  1.54842188e+05  6.64949447e+05  2.71967163e+06
  1.10460036e+07  4.65101205e+07]
E1 = -706.5573642134751  E_coul = 198.91720345883235
cycle= 3 E= -507.640160754643  delta_E= -1.05e-07  |g|= 9.23e-05  |ddm|= 0.000194
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.000123608
diis-c [-3.74889382e-10  3.35374365e-05 -2.51802477e-02  1.02514671e+00]
  HOMO = -0.236375621032345  LUMO = 87.9623948544217
  mo_energy =
[-1.20271084e+02 -1.22539489e+01 -6.65460727e+00 -6.65460727e+00
 -6.65460727e+00 -1.16350153e+00 -2.36375621e-01 -2.36375621e-01
 -2.36375621e-01  8.79623949e+01  6.93806822e+02  4.04276698e+03
  2.98094663e+04  1.54842188e+05  6.64949447e+05  2.71967163e+06
  1.10460036e+07  4.65101205e+07]
E1 = -706.557357347886  E_coul = 198.91719659320555
cycle= 4 E= -507.64016075468  delta_E= -3.76e-11  |g|= 3.58e-07  |ddm|= 3.27e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.557357347886  E_coul = 198.91719659320555
  HOMO = -0.236375605672475  LUMO = 87.9623951806321
  mo_energy =
[-1.20271084e+02 -1.22539488e+01 -6.65460711e+00 -6.65460711e+00
 -6.65460711e+00 -1.16350152e+00 -2.36375606e-01 -2.36375606e-01
 -2.36375606e-01  8.79623952e+01  6.93806823e+02  4.04276698e+03
  2.98094663e+04  1.54842188e+05  6.64949447e+05  2.71967163e+06
  1.10460036e+07  4.65101205e+07]
E1 = -706.5573573826726  E_coul = 198.91719662799292
Extra cycle  E= -507.64016075468  delta_E= 6.82e-13  |g|= 6.13e-09  |ddm|= 1.54e-08
    CPU time for scf_cycle      0.10 sec, wall time      0.11 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 56.387092175269494
E1 = -706.5573573826726  E_coul = 198.91719662799292
init E= -507.64016075468
    CPU time for initialize scf      0.12 sec, wall time      0.12 sec
  HOMO = -0.236375605494703  LUMO = 87.9623951845639
  mo_energy =
[-1.20271084e+02 -1.22539488e+01 -6.65460711e+00 -6.65460711e+00
 -6.65460711e+00 -1.16350152e+00 -2.36375605e-01 -2.36375605e-01
 -2.36375605e-01  8.79623952e+01  6.93806823e+02  4.04276698e+03
  2.98094663e+04  1.54842188e+05  6.64949447e+05  2.71967163e+06
  1.10460036e+07  4.65101205e+07]
E1 = -706.5573573831932  E_coul = 198.91719662851312
cycle= 1 E= -507.64016075468  delta_E= -3.41e-13  |g|= 1.7e-10  |ddm|= 2.36e-10
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -706.5573573831932  E_coul = 198.91719662851312
  HOMO = -0.236375605492212  LUMO = 87.9623951846164
  mo_energy =
[-1.20271084e+02 -1.22539488e+01 -6.65460711e+00 -6.65460711e+00
 -6.65460711e+00 -1.16350152e+00 -2.36375605e-01 -2.36375605e-01
 -2.36375605e-01  8.79623952e+01  6.93806823e+02  4.04276698e+03
  2.98094663e+04  1.54842188e+05  6.64949447e+05  2.71967163e+06
  1.10460036e+07  4.65101205e+07]
E1 = -706.5573573832025  E_coul = 198.91719662852236
Extra cycle  E= -507.64016075468  delta_E= -1.14e-13  |g|= 2.15e-10  |ddm|= 4.24e-12
    CPU time for scf_cycle      0.19 sec, wall time      0.19 sec
exp = [1.87954849e+07 4.69887121e+06 1.17471780e+06 2.93679373e+05
 7.34201206e+04 1.83066604e+04 2.29583217e+03 4.67278335e+02
 1.23660951e+02 3.79320457e+01 4.74263068e+00 3.91254004e-01
 8.59868396e+00 4.90859487e-01]
grad_E = [-1.41660848e-13  1.59876908e-11 -7.46510984e-12  9.38262266e-09
 -3.93996389e-08  5.72440667e-06  2.79521448e-06 -2.52217686e-06
  4.15561088e-05  5.33840441e-06 -7.69628636e-05  3.44084387e-04
  9.96934628e-05  7.14572697e-04]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="BFGS",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((14, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.6988712134173084e+06,1.1747178033543271e+06,2.9367945083858178e+05,7.3419865393677101e+04,1.8353927627435987e+04,2.2341424145819028e+03,4.5688904996449571e+02,1.2173317272260677e+02,3.7593061247508530e+01,4.7412722556720146e+00,3.9120358491841306e-01,8.5986297237246045e+00,4.9084868336327880e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "12s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:20:33 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  18795484.8537        1
[INPUT] 0    0    [1    /1   ]  4698871.21328        1
[INPUT] 0    0    [1    /1   ]  1174717.8033         1
[INPUT] 0    0    [1    /1   ]  293679.372513        1
[INPUT] 0    0    [1    /1   ]  73420.1245576        1
[INPUT] 0    0    [1    /1   ]  18306.1945741        1
[INPUT] 0    0    [1    /1   ]  2294.56430294        1
[INPUT] 0    0    [1    /1   ]  467.249850972        1
[INPUT] 0    0    [1    /1   ]  123.700211333        1
[INPUT] 0    0    [1    /1   ]  37.9432289546        1
[INPUT] 0    0    [1    /1   ]  4.74259687915        1
[INPUT] 0    0    [1    /1   ]  0.391261585675       1
[INPUT] 1    0    [1    /1   ]  8.5987346006         1
[INPUT] 1    0    [1    /1   ]  0.490867383515       1

nuclear repulsion = 0
number of shells = 14
number of NR pGTOs = 18
number of NR cGTOs = 18
basis = {'Ar': [[0, [18795484.853670098, 1.0]], [0, [4698871.213283417, 1.0]], [0, [1174717.8032984806, 1.0]], [0, [293679.37251315935, 1.0]], [0, [73420.12455757856, 1.0]], [0, [18306.194574114645, 1.0]], [0, [2294.5643029386415, 1.0]], [0, [467.2498509722094, 1.0]], [0, [123.70021133326142, 1.0]], [0, [37.94322895461247, 1.0]], [0, [4.7425968791544255, 1.0]], [0, [0.3912615856749997, 1.0]], [1, [8.598734600601487, 1.0]], [1, [0.49086738351453296, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [18795484.8536701]
bas 1, expnt(s) = [4698871.21328342]
bas 2, expnt(s) = [1174717.80329848]
bas 3, expnt(s) = [293679.37251316]
bas 4, expnt(s) = [73420.12455758]
bas 5, expnt(s) = [18306.19457411]
bas 6, expnt(s) = [2294.56430294]
bas 7, expnt(s) = [467.24985097]
bas 8, expnt(s) = [123.70021133]
bas 9, expnt(s) = [37.94322895]
bas 10, expnt(s) = [4.74259688]
bas 11, expnt(s) = [0.39126159]
bas 12, expnt(s) = [8.5987346]
bas 13, expnt(s) = [0.49086738]
CPU time:       398.41
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  0  1  1  0 42 43  0]
 [ 0  0  1  1  0 44 45  0]
 [ 0  0  1  1  0 46 47  0]
 [ 0  1  1  1  0 48 49  0]
 [ 0  1  1  1  0 50 51  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.87954849e+07 7.21199097e+05 4.69887121e+06 2.54982386e+05
 1.17471780e+06 9.01498871e+04 2.93679373e+05 3.18727919e+04
 7.34201246e+04 1.12687660e+04 1.83061946e+04 3.97615751e+03
 2.29456430e+03 8.37606809e+02 4.67249851e+02 2.53908303e+02
 1.23700211e+02 9.37114926e+01 3.79432290e+01 3.86247551e+01
 4.74259688e+00 8.11946067e+00 3.91261586e-01 1.24987169e+00
 8.59873460e+00 4.29563699e+01 4.90867384e-01 1.19864233e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319899459049616
cond(S) = 56.39026828911724
E1 = -688.8488296810515  E_coul = 184.91825645530096
init E= -503.930573225751
    CPU time for initialize scf      0.03 sec, wall time      0.03 sec
  HOMO = -0.680865651035049  LUMO = 86.6706705079325
  mo_energy =
[-1.21650331e+02 -1.32809409e+01 -7.62134884e+00 -7.62134884e+00
 -7.62134884e+00 -1.65074160e+00 -6.80865651e-01 -6.80865651e-01
 -6.80865651e-01  8.66706705e+01  6.92568286e+02  4.04024726e+03
  2.98039332e+04  1.54835707e+05  6.64943072e+05  2.71966571e+06
  1.10459982e+07  4.65101155e+07]
E1 = -706.589208867434  E_coul = 198.94946030480614
cycle= 1 E= -507.639748562628  delta_E= -3.71  |g|= 0.316  |ddm|= 0.301
    CPU time for cycle= 1      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.419515
diis-c [-0.17599311  1.        ]
  HOMO = -0.23618167807922  LUMO = 88.0056560217614
  mo_energy =
[-1.20262423e+02 -1.22527334e+01 -6.65274232e+00 -6.65274232e+00
 -6.65274232e+00 -1.16342095e+00 -2.36181678e-01 -2.36181678e-01
 -2.36181678e-01  8.80056560e+01  6.93938381e+02  4.04149716e+03
  2.98050228e+04  1.54836726e+05  6.64944061e+05  2.71966669e+06
  1.10459992e+07  4.65101165e+07]
E1 = -706.5586114158464  E_coul = 198.91844696235987
cycle= 2 E= -507.640164453486  delta_E= -0.000416  |g|= 0.00467  |ddm|= 0.0139
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00497045
diis-c [-2.46498295e-05 -5.62257138e-04  1.00056226e+00]
  HOMO = -0.236351269302355  LUMO = 88.0021912029578
  mo_energy =
[-1.20270863e+02 -1.22538854e+01 -6.65452715e+00 -6.65452715e+00
 -6.65452715e+00 -1.16348364e+00 -2.36351269e-01 -2.36351269e-01
 -2.36351269e-01  8.80021912e+01  6.93927950e+02  4.04148151e+03
  2.98050039e+04  1.54836707e+05  6.64944041e+05  2.71966667e+06
  1.10459992e+07  4.65101165e+07]
E1 = -706.5581880135483  E_coul = 198.91802345502745
cycle= 3 E= -507.640164558521  delta_E= -1.05e-07  |g|= 9.22e-05  |ddm|= 0.000194
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.000123533
diis-c [-3.74463482e-10  3.35362394e-05 -2.51723772e-02  1.02513884e+00]
  HOMO = -0.236353377223673  LUMO = 88.0021481582892
  mo_energy =
[-1.20270972e+02 -1.22539005e+01 -6.65455290e+00 -6.65455290e+00
 -6.65455290e+00 -1.16348426e+00 -2.36353377e-01 -2.36353377e-01
 -2.36353377e-01  8.80021482e+01  6.93927838e+02  4.04148137e+03
  2.98050038e+04  1.54836706e+05  6.64944041e+05  2.71966667e+06
  1.10459992e+07  4.65101165e+07]
E1 = -706.5581811571682  E_coul = 198.91801659860985
cycle= 4 E= -507.640164558558  delta_E= -3.75e-11  |g|= 3.58e-07  |ddm|= 3.27e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.5581811571682  E_coul = 198.91801659860985
  HOMO = -0.23635336188477  LUMO = 88.0021484842212
  mo_energy =
[-1.20270971e+02 -1.22539004e+01 -6.65455275e+00 -6.65455275e+00
 -6.65455275e+00 -1.16348426e+00 -2.36353362e-01 -2.36353362e-01
 -2.36353362e-01  8.80021485e+01  6.93927839e+02  4.04148137e+03
  2.98050038e+04  1.54836706e+05  6.64944041e+05  2.71966667e+06
  1.10459992e+07  4.65101165e+07]
E1 = -706.5581811919062  E_coul = 198.91801663334832
Extra cycle  E= -507.640164558558  delta_E= 4.55e-13  |g|= 6.13e-09  |ddm|= 1.54e-08
    CPU time for scf_cycle      0.11 sec, wall time      0.12 sec
exp = [1.87954849e+07 4.69887121e+06 1.17471780e+06 2.93679373e+05
 7.34201246e+04 1.83061946e+04 2.29456430e+03 4.67249851e+02
 1.23700211e+02 3.79432290e+01 4.74259688e+00 3.91261586e-01
 8.59873460e+00 4.90867384e-01]
E = -507.6401645585579
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="BFGS",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((14, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.6988712134173084e+06,1.1747178033543271e+06,2.9367945083858178e+05,7.3419865393677101e+04,1.8353927627435987e+04,2.2341424145819028e+03,4.5688904996449571e+02,1.2173317272260677e+02,3.7593061247508530e+01,4.7412722556720146e+00,3.9120358491841306e-01,8.5986297237246045e+00,4.9084868336327880e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "12s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:20:34 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  18795484.8537        1
[INPUT] 0    0    [1    /1   ]  4698871.21328        1
[INPUT] 0    0    [1    /1   ]  1174717.8033         1
[INPUT] 0    0    [1    /1   ]  293679.372513        1
[INPUT] 0    0    [1    /1   ]  73420.1245576        1
[INPUT] 0    0    [1    /1   ]  18306.1945741        1
[INPUT] 0    0    [1    /1   ]  2294.56430294        1
[INPUT] 0    0    [1    /1   ]  467.249850972        1
[INPUT] 0    0    [1    /1   ]  123.700211333        1
[INPUT] 0    0    [1    /1   ]  37.9432289546        1
[INPUT] 0    0    [1    /1   ]  4.74259687915        1
[INPUT] 0    0    [1    /1   ]  0.391261585675       1
[INPUT] 1    0    [1    /1   ]  8.5987346006         1
[INPUT] 1    0    [1    /1   ]  0.490867383515       1

nuclear repulsion = 0
number of shells = 14
number of NR pGTOs = 18
number of NR cGTOs = 18
basis = {'Ar': [[0, [18795484.853670098, 1.0]], [0, [4698871.213283417, 1.0]], [0, [1174717.8032984806, 1.0]], [0, [293679.37251315935, 1.0]], [0, [73420.12455757856, 1.0]], [0, [18306.194574114645, 1.0]], [0, [2294.5643029386415, 1.0]], [0, [467.2498509722094, 1.0]], [0, [123.70021133326142, 1.0]], [0, [37.94322895461247, 1.0]], [0, [4.7425968791544255, 1.0]], [0, [0.3912615856749997, 1.0]], [1, [8.598734600601487, 1.0]], [1, [0.49086738351453296, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [18795484.8536701]
bas 1, expnt(s) = [4698871.21328342]
bas 2, expnt(s) = [1174717.80329848]
bas 3, expnt(s) = [293679.37251316]
bas 4, expnt(s) = [73420.12455758]
bas 5, expnt(s) = [18306.19457411]
bas 6, expnt(s) = [2294.56430294]
bas 7, expnt(s) = [467.24985097]
bas 8, expnt(s) = [123.70021133]
bas 9, expnt(s) = [37.94322895]
bas 10, expnt(s) = [4.74259688]
bas 11, expnt(s) = [0.39126159]
bas 12, expnt(s) = [8.5987346]
bas 13, expnt(s) = [0.49086738]
CPU time:       399.56
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  0  1  1  0 42 43  0]
 [ 0  0  1  1  0 44 45  0]
 [ 0  0  1  1  0 46 47  0]
 [ 0  1  1  1  0 48 49  0]
 [ 0  1  1  1  0 50 51  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.87954849e+07 7.21199097e+05 4.69887121e+06 2.54982386e+05
 1.17471780e+06 9.01498871e+04 2.93679373e+05 3.18727919e+04
 7.34201246e+04 1.12687660e+04 1.83061946e+04 3.97615751e+03
 2.29456430e+03 8.37606809e+02 4.67249851e+02 2.53908303e+02
 1.23700211e+02 9.37114926e+01 3.79432290e+01 3.86247551e+01
 4.74259688e+00 8.11946067e+00 3.91261586e-01 1.24987169e+00
 8.59873460e+00 4.29563699e+01 4.90867384e-01 1.19864233e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319899459049616
cond(S) = 56.39026828911724
E1 = -688.8488296810515  E_coul = 184.91825645530096
init E= -503.930573225751
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.680865651035049  LUMO = 86.6706705079325
  mo_energy =
[-1.21650331e+02 -1.32809409e+01 -7.62134884e+00 -7.62134884e+00
 -7.62134884e+00 -1.65074160e+00 -6.80865651e-01 -6.80865651e-01
 -6.80865651e-01  8.66706705e+01  6.92568286e+02  4.04024726e+03
  2.98039332e+04  1.54835707e+05  6.64943072e+05  2.71966571e+06
  1.10459982e+07  4.65101155e+07]
E1 = -706.589208867434  E_coul = 198.94946030480614
cycle= 1 E= -507.639748562628  delta_E= -3.71  |g|= 0.316  |ddm|= 0.301
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.419515
diis-c [-0.17599311  1.        ]
  HOMO = -0.23618167807922  LUMO = 88.0056560217614
  mo_energy =
[-1.20262423e+02 -1.22527334e+01 -6.65274232e+00 -6.65274232e+00
 -6.65274232e+00 -1.16342095e+00 -2.36181678e-01 -2.36181678e-01
 -2.36181678e-01  8.80056560e+01  6.93938381e+02  4.04149716e+03
  2.98050228e+04  1.54836726e+05  6.64944061e+05  2.71966669e+06
  1.10459992e+07  4.65101165e+07]
E1 = -706.5586114158464  E_coul = 198.91844696235987
cycle= 2 E= -507.640164453486  delta_E= -0.000416  |g|= 0.00467  |ddm|= 0.0139
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00497045
diis-c [-2.46498295e-05 -5.62257138e-04  1.00056226e+00]
  HOMO = -0.236351269302355  LUMO = 88.0021912029578
  mo_energy =
[-1.20270863e+02 -1.22538854e+01 -6.65452715e+00 -6.65452715e+00
 -6.65452715e+00 -1.16348364e+00 -2.36351269e-01 -2.36351269e-01
 -2.36351269e-01  8.80021912e+01  6.93927950e+02  4.04148151e+03
  2.98050039e+04  1.54836707e+05  6.64944041e+05  2.71966667e+06
  1.10459992e+07  4.65101165e+07]
E1 = -706.5581880135483  E_coul = 198.91802345502745
cycle= 3 E= -507.640164558521  delta_E= -1.05e-07  |g|= 9.22e-05  |ddm|= 0.000194
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.000123533
diis-c [-3.74463482e-10  3.35362394e-05 -2.51723772e-02  1.02513884e+00]
  HOMO = -0.236353377223673  LUMO = 88.0021481582892
  mo_energy =
[-1.20270972e+02 -1.22539005e+01 -6.65455290e+00 -6.65455290e+00
 -6.65455290e+00 -1.16348426e+00 -2.36353377e-01 -2.36353377e-01
 -2.36353377e-01  8.80021482e+01  6.93927838e+02  4.04148137e+03
  2.98050038e+04  1.54836706e+05  6.64944041e+05  2.71966667e+06
  1.10459992e+07  4.65101165e+07]
E1 = -706.5581811571682  E_coul = 198.91801659860985
cycle= 4 E= -507.640164558558  delta_E= -3.75e-11  |g|= 3.58e-07  |ddm|= 3.27e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.5581811571682  E_coul = 198.91801659860985
  HOMO = -0.23635336188477  LUMO = 88.0021484842212
  mo_energy =
[-1.20270971e+02 -1.22539004e+01 -6.65455275e+00 -6.65455275e+00
 -6.65455275e+00 -1.16348426e+00 -2.36353362e-01 -2.36353362e-01
 -2.36353362e-01  8.80021485e+01  6.93927839e+02  4.04148137e+03
  2.98050038e+04  1.54836706e+05  6.64944041e+05  2.71966667e+06
  1.10459992e+07  4.65101165e+07]
E1 = -706.5581811919062  E_coul = 198.91801663334832
Extra cycle  E= -507.640164558558  delta_E= 4.55e-13  |g|= 6.13e-09  |ddm|= 1.54e-08
    CPU time for scf_cycle      0.10 sec, wall time      0.11 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 56.39026828911724
E1 = -706.5581811919062  E_coul = 198.91801663334832
init E= -507.640164558558
    CPU time for initialize scf      0.12 sec, wall time      0.12 sec
  HOMO = -0.236353361707281  LUMO = 88.0021484881466
  mo_energy =
[-1.20270971e+02 -1.22539004e+01 -6.65455275e+00 -6.65455275e+00
 -6.65455275e+00 -1.16348426e+00 -2.36353362e-01 -2.36353362e-01
 -2.36353362e-01  8.80021485e+01  6.93927839e+02  4.04148137e+03
  2.98050038e+04  1.54836706e+05  6.64944041e+05  2.71966667e+06
  1.10459992e+07  4.65101165e+07]
E1 = -706.5581811924261  E_coul = 198.91801663386798
cycle= 1 E= -507.640164558558  delta_E= -2.27e-13  |g|= 1.56e-10  |ddm|= 2.36e-10
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -706.5581811924261  E_coul = 198.91801663386798
  HOMO = -0.236353361704791  LUMO = 88.0021484882017
  mo_energy =
[-1.20270971e+02 -1.22539004e+01 -6.65455275e+00 -6.65455275e+00
 -6.65455275e+00 -1.16348426e+00 -2.36353362e-01 -2.36353362e-01
 -2.36353362e-01  8.80021485e+01  6.93927839e+02  4.04148137e+03
  2.98050038e+04  1.54836706e+05  6.64944041e+05  2.71966667e+06
  1.10459992e+07  4.65101165e+07]
E1 = -706.5581811924352  E_coul = 198.91801663387702
Extra cycle  E= -507.640164558558  delta_E= -5.68e-14  |g|= 1.26e-10  |ddm|= 4.18e-12
    CPU time for scf_cycle      0.20 sec, wall time      0.20 sec
exp = [1.87954849e+07 4.69887121e+06 1.17471780e+06 2.93679373e+05
 7.34201246e+04 1.83061946e+04 2.29456430e+03 4.67249851e+02
 1.23700211e+02 3.79432290e+01 4.74259688e+00 3.91261586e-01
 8.59873460e+00 4.90867384e-01]
grad_E = [-1.41061732e-13  1.60299947e-11 -7.14705261e-12  9.40687335e-09
 -3.93136742e-08  5.74135114e-06  2.32312920e-06 -3.73066036e-06
  5.69123517e-05  7.33236682e-06 -1.05511435e-04  4.71741698e-04
  1.36682130e-04  9.79700528e-04]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="BFGS",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((14, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.6988712134173084e+06,1.1747178033543271e+06,2.9367945083858178e+05,7.3419865393677101e+04,1.8353927627435987e+04,2.2341424145819028e+03,4.5688904996449571e+02,1.2173317272260677e+02,3.7593061247508530e+01,4.7412722556720146e+00,3.9120358491841306e-01,8.5986297237246045e+00,4.9084868336327880e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "12s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:20:38 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  18795484.8537        1
[INPUT] 0    0    [1    /1   ]  4698871.21328        1
[INPUT] 0    0    [1    /1   ]  1174717.8033         1
[INPUT] 0    0    [1    /1   ]  293679.370528        1
[INPUT] 0    0    [1    /1   ]  73420.1336472        1
[INPUT] 0    0    [1    /1   ]  18304.9842438        1
[INPUT] 0    0    [1    /1   ]  2292.84553215        1
[INPUT] 0    0    [1    /1   ]  467.20911053         1
[INPUT] 0    0    [1    /1   ]  123.752362877        1
[INPUT] 0    0    [1    /1   ]  37.9581210369        1
[INPUT] 0    0    [1    /1   ]  4.7425514005         1
[INPUT] 0    0    [1    /1   ]  0.39127171208        1
[INPUT] 1    0    [1    /1   ]  8.5988022184         1
[INPUT] 1    0    [1    /1   ]  0.490877929861       1

nuclear repulsion = 0
number of shells = 14
number of NR pGTOs = 18
number of NR cGTOs = 18
basis = {'Ar': [[0, [18795484.85367013, 1.0]], [0, [4698871.213280039, 1.0]], [0, [1174717.8033013488, 1.0]], [0, [293679.3705283883, 1.0]], [0, [73420.13364722759, 1.0]], [0, [18304.984243826908, 1.0]], [0, [2292.845532146992, 1.0]], [0, [467.20911053000634, 1.0]], [0, [123.75236287735498, 1.0]], [0, [37.95812103689773, 1.0]], [0, [4.742551400495654, 1.0]], [0, [0.3912717120798912, 1.0]], [1, [8.59880221839942, 1.0]], [1, [0.4908779298609114, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [18795484.85367013]
bas 1, expnt(s) = [4698871.21328004]
bas 2, expnt(s) = [1174717.80330135]
bas 3, expnt(s) = [293679.37052839]
bas 4, expnt(s) = [73420.13364723]
bas 5, expnt(s) = [18304.98424383]
bas 6, expnt(s) = [2292.84553215]
bas 7, expnt(s) = [467.20911053]
bas 8, expnt(s) = [123.75236288]
bas 9, expnt(s) = [37.95812104]
bas 10, expnt(s) = [4.7425514]
bas 11, expnt(s) = [0.39127171]
bas 12, expnt(s) = [8.59880222]
bas 13, expnt(s) = [0.49087793]
CPU time:       403.52
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  0  1  1  0 42 43  0]
 [ 0  0  1  1  0 44 45  0]
 [ 0  0  1  1  0 46 47  0]
 [ 0  1  1  1  0 48 49  0]
 [ 0  1  1  1  0 50 51  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.87954849e+07 7.21199097e+05 4.69887121e+06 2.54982386e+05
 1.17471780e+06 9.01498871e+04 2.93679371e+05 3.18727917e+04
 7.34201336e+04 1.12687671e+04 1.83049842e+04 3.97596034e+03
 2.29284553e+03 8.37136200e+02 4.67209111e+02 2.53891699e+02
 1.23752363e+02 9.37411224e+01 3.79581210e+01 3.86361242e+01
 4.74255140e+00 8.11940228e+00 3.91271712e-01 1.24989595e+00
 8.59880222e+00 4.29567921e+01 4.90877930e-01 1.19867453e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.31988424937243
cond(S) = 56.393961790709994
E1 = -688.8489864468017  E_coul = 184.91906178067916
init E= -503.929924666123
    CPU time for initialize scf      0.03 sec, wall time      0.03 sec
  HOMO = -0.680849316141595  LUMO = 86.7234553722962
  mo_energy =
[-1.21650207e+02 -1.32808950e+01 -7.62129332e+00 -7.62129332e+00
 -7.62129332e+00 -1.65073171e+00 -6.80849316e-01 -6.80849316e-01
 -6.80849316e-01  8.67234554e+01  6.92726478e+02  4.03849104e+03
  2.97972763e+04  1.54826588e+05  6.64933740e+05  2.71965707e+06
  1.10459904e+07  4.65101085e+07]
E1 = -706.5902838638301  E_coul = 198.95052837330135
cycle= 1 E= -507.639755490529  delta_E= -3.71  |g|= 0.316  |ddm|= 0.301
    CPU time for cycle= 1      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.419544
diis-c [-0.17601734  1.        ]
  HOMO = -0.236152142484483  LUMO = 88.0585215813368
  mo_energy =
[-1.20262279e+02 -1.22526701e+01 -6.65267150e+00 -6.65267150e+00
 -6.65267150e+00 -1.16339796e+00 -2.36152142e-01 -2.36152142e-01
 -2.36152142e-01  8.80585216e+01  6.94096614e+02  4.03974108e+03
  2.97983660e+04  1.54827607e+05  6.64934729e+05  2.71965805e+06
  1.10459914e+07  4.65101095e+07]
E1 = -706.5597125818632  E_coul = 198.91954156527518
cycle= 2 E= -507.640171016588  delta_E= -0.000416  |g|= 0.00467  |ddm|= 0.0138
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00496855
diis-c [-2.46303611e-05 -5.65117500e-04  1.00056512e+00]
  HOMO = -0.236321567042314  LUMO = 88.0550585803344
  mo_energy =
[-1.20270713e+02 -1.22538210e+01 -6.65445460e+00 -6.65445460e+00
 -6.65445460e+00 -1.16346059e+00 -2.36321567e-01 -2.36321567e-01
 -2.36321567e-01  8.80550586e+01  6.94086191e+02  4.03972544e+03
  2.97983471e+04  1.54827587e+05  6.64934709e+05  2.71965803e+06
  1.10459913e+07  4.65101095e+07]
E1 = -706.5592896952984  E_coul = 198.91911857383081
cycle= 3 E= -507.640171121468  delta_E= -1.05e-07  |g|= 9.22e-05  |ddm|= 0.000194
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.000123433
diis-c [-3.73891578e-10  3.35357160e-05 -2.51619362e-02  1.02512840e+00]
  HOMO = -0.236323671674863  LUMO = 88.055015589247
  mo_energy =
[-1.20270822e+02 -1.22538360e+01 -6.65448031e+00 -6.65448031e+00
 -6.65448031e+00 -1.16346121e+00 -2.36323672e-01 -2.36323672e-01
 -2.36323672e-01  8.80550156e+01  6.94086079e+02  4.03972530e+03
  2.97983469e+04  1.54827587e+05  6.64934709e+05  2.71965803e+06
  1.10459913e+07  4.65101095e+07]
E1 = -706.5592828511407  E_coul = 198.91911172963648
cycle= 4 E= -507.640171121504  delta_E= -3.66e-11  |g|= 3.57e-07  |ddm|= 3.27e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.5592828511407  E_coul = 198.91911172963648
  HOMO = -0.236323656363935  LUMO = 88.0550159148127
  mo_energy =
[-1.20270821e+02 -1.22538359e+01 -6.65448016e+00 -6.65448016e+00
 -6.65448016e+00 -1.16346121e+00 -2.36323656e-01 -2.36323656e-01
 -2.36323656e-01  8.80550159e+01  6.94086080e+02  4.03972530e+03
  2.97983469e+04  1.54827587e+05  6.64934709e+05  2.71965803e+06
  1.10459913e+07  4.65101095e+07]
E1 = -706.5592828858131  E_coul = 198.91911176430906
Extra cycle  E= -507.640171121504  delta_E= 1.14e-13  |g|= 6.11e-09  |ddm|= 1.53e-08
    CPU time for scf_cycle      0.11 sec, wall time      0.12 sec
exp = [1.87954849e+07 4.69887121e+06 1.17471780e+06 2.93679371e+05
 7.34201336e+04 1.83049842e+04 2.29284553e+03 4.67209111e+02
 1.23752363e+02 3.79581210e+01 4.74255140e+00 3.91271712e-01
 8.59880222e+00 4.90877930e-01]
E = -507.64017112150407
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="BFGS",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((14, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.6988712134173084e+06,1.1747178033543271e+06,2.9367945083858178e+05,7.3419865393677101e+04,1.8353927627435987e+04,2.2341424145819028e+03,4.5688904996449571e+02,1.2173317272260677e+02,3.7593061247508530e+01,4.7412722556720146e+00,3.9120358491841306e-01,8.5986297237246045e+00,4.9084868336327880e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "12s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:20:39 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  18795484.8537        1
[INPUT] 0    0    [1    /1   ]  4698871.21328        1
[INPUT] 0    0    [1    /1   ]  1174717.8033         1
[INPUT] 0    0    [1    /1   ]  293679.370528        1
[INPUT] 0    0    [1    /1   ]  73420.1336472        1
[INPUT] 0    0    [1    /1   ]  18304.9842438        1
[INPUT] 0    0    [1    /1   ]  2292.84553215        1
[INPUT] 0    0    [1    /1   ]  467.20911053         1
[INPUT] 0    0    [1    /1   ]  123.752362877        1
[INPUT] 0    0    [1    /1   ]  37.9581210369        1
[INPUT] 0    0    [1    /1   ]  4.7425514005         1
[INPUT] 0    0    [1    /1   ]  0.39127171208        1
[INPUT] 1    0    [1    /1   ]  8.5988022184         1
[INPUT] 1    0    [1    /1   ]  0.490877929861       1

nuclear repulsion = 0
number of shells = 14
number of NR pGTOs = 18
number of NR cGTOs = 18
basis = {'Ar': [[0, [18795484.85367013, 1.0]], [0, [4698871.213280039, 1.0]], [0, [1174717.8033013488, 1.0]], [0, [293679.3705283883, 1.0]], [0, [73420.13364722759, 1.0]], [0, [18304.984243826908, 1.0]], [0, [2292.845532146992, 1.0]], [0, [467.20911053000634, 1.0]], [0, [123.75236287735498, 1.0]], [0, [37.95812103689773, 1.0]], [0, [4.742551400495654, 1.0]], [0, [0.3912717120798912, 1.0]], [1, [8.59880221839942, 1.0]], [1, [0.4908779298609114, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [18795484.85367013]
bas 1, expnt(s) = [4698871.21328004]
bas 2, expnt(s) = [1174717.80330135]
bas 3, expnt(s) = [293679.37052839]
bas 4, expnt(s) = [73420.13364723]
bas 5, expnt(s) = [18304.98424383]
bas 6, expnt(s) = [2292.84553215]
bas 7, expnt(s) = [467.20911053]
bas 8, expnt(s) = [123.75236288]
bas 9, expnt(s) = [37.95812104]
bas 10, expnt(s) = [4.7425514]
bas 11, expnt(s) = [0.39127171]
bas 12, expnt(s) = [8.59880222]
bas 13, expnt(s) = [0.49087793]
CPU time:       404.71
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  0  1  1  0 42 43  0]
 [ 0  0  1  1  0 44 45  0]
 [ 0  0  1  1  0 46 47  0]
 [ 0  1  1  1  0 48 49  0]
 [ 0  1  1  1  0 50 51  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.87954849e+07 7.21199097e+05 4.69887121e+06 2.54982386e+05
 1.17471780e+06 9.01498871e+04 2.93679371e+05 3.18727917e+04
 7.34201336e+04 1.12687671e+04 1.83049842e+04 3.97596034e+03
 2.29284553e+03 8.37136200e+02 4.67209111e+02 2.53891699e+02
 1.23752363e+02 9.37411224e+01 3.79581210e+01 3.86361242e+01
 4.74255140e+00 8.11940228e+00 3.91271712e-01 1.24989595e+00
 8.59880222e+00 4.29567921e+01 4.90877930e-01 1.19867453e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.31988424937243
cond(S) = 56.393961790709994
E1 = -688.8489864468017  E_coul = 184.91906178067916
init E= -503.929924666123
    CPU time for initialize scf      0.03 sec, wall time      0.03 sec
  HOMO = -0.680849316141595  LUMO = 86.7234553722962
  mo_energy =
[-1.21650207e+02 -1.32808950e+01 -7.62129332e+00 -7.62129332e+00
 -7.62129332e+00 -1.65073171e+00 -6.80849316e-01 -6.80849316e-01
 -6.80849316e-01  8.67234554e+01  6.92726478e+02  4.03849104e+03
  2.97972763e+04  1.54826588e+05  6.64933740e+05  2.71965707e+06
  1.10459904e+07  4.65101085e+07]
E1 = -706.5902838638301  E_coul = 198.95052837330135
cycle= 1 E= -507.639755490529  delta_E= -3.71  |g|= 0.316  |ddm|= 0.301
    CPU time for cycle= 1      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.419544
diis-c [-0.17601734  1.        ]
  HOMO = -0.236152142484483  LUMO = 88.0585215813368
  mo_energy =
[-1.20262279e+02 -1.22526701e+01 -6.65267150e+00 -6.65267150e+00
 -6.65267150e+00 -1.16339796e+00 -2.36152142e-01 -2.36152142e-01
 -2.36152142e-01  8.80585216e+01  6.94096614e+02  4.03974108e+03
  2.97983660e+04  1.54827607e+05  6.64934729e+05  2.71965805e+06
  1.10459914e+07  4.65101095e+07]
E1 = -706.5597125818632  E_coul = 198.91954156527518
cycle= 2 E= -507.640171016588  delta_E= -0.000416  |g|= 0.00467  |ddm|= 0.0138
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00496855
diis-c [-2.46303611e-05 -5.65117500e-04  1.00056512e+00]
  HOMO = -0.236321567042314  LUMO = 88.0550585803344
  mo_energy =
[-1.20270713e+02 -1.22538210e+01 -6.65445460e+00 -6.65445460e+00
 -6.65445460e+00 -1.16346059e+00 -2.36321567e-01 -2.36321567e-01
 -2.36321567e-01  8.80550586e+01  6.94086191e+02  4.03972544e+03
  2.97983471e+04  1.54827587e+05  6.64934709e+05  2.71965803e+06
  1.10459913e+07  4.65101095e+07]
E1 = -706.5592896952984  E_coul = 198.91911857383081
cycle= 3 E= -507.640171121468  delta_E= -1.05e-07  |g|= 9.22e-05  |ddm|= 0.000194
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.000123433
diis-c [-3.73891578e-10  3.35357160e-05 -2.51619362e-02  1.02512840e+00]
  HOMO = -0.236323671674863  LUMO = 88.055015589247
  mo_energy =
[-1.20270822e+02 -1.22538360e+01 -6.65448031e+00 -6.65448031e+00
 -6.65448031e+00 -1.16346121e+00 -2.36323672e-01 -2.36323672e-01
 -2.36323672e-01  8.80550156e+01  6.94086079e+02  4.03972530e+03
  2.97983469e+04  1.54827587e+05  6.64934709e+05  2.71965803e+06
  1.10459913e+07  4.65101095e+07]
E1 = -706.5592828511407  E_coul = 198.91911172963648
cycle= 4 E= -507.640171121504  delta_E= -3.66e-11  |g|= 3.57e-07  |ddm|= 3.27e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.5592828511407  E_coul = 198.91911172963648
  HOMO = -0.236323656363935  LUMO = 88.0550159148127
  mo_energy =
[-1.20270821e+02 -1.22538359e+01 -6.65448016e+00 -6.65448016e+00
 -6.65448016e+00 -1.16346121e+00 -2.36323656e-01 -2.36323656e-01
 -2.36323656e-01  8.80550159e+01  6.94086080e+02  4.03972530e+03
  2.97983469e+04  1.54827587e+05  6.64934709e+05  2.71965803e+06
  1.10459913e+07  4.65101095e+07]
E1 = -706.5592828858131  E_coul = 198.91911176430906
Extra cycle  E= -507.640171121504  delta_E= 1.14e-13  |g|= 6.11e-09  |ddm|= 1.53e-08
    CPU time for scf_cycle      0.12 sec, wall time      0.13 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 56.393961790709994
E1 = -706.5592828858131  E_coul = 198.91911176430906
init E= -507.640171121504
    CPU time for initialize scf      0.13 sec, wall time      0.13 sec
  HOMO = -0.23632365618682  LUMO = 88.0550159187325
  mo_energy =
[-1.20270821e+02 -1.22538359e+01 -6.65448016e+00 -6.65448016e+00
 -6.65448016e+00 -1.16346121e+00 -2.36323656e-01 -2.36323656e-01
 -2.36323656e-01  8.80550159e+01  6.94086080e+02  4.03972530e+03
  2.97983469e+04  1.54827587e+05  6.64934709e+05  2.71965803e+06
  1.10459913e+07  4.65101095e+07]
E1 = -706.5592828863316  E_coul = 198.91911176482736
cycle= 1 E= -507.640171121504  delta_E= -2.27e-13  |g|= 2.45e-10  |ddm|= 2.35e-10
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -706.5592828863316  E_coul = 198.91911176482736
  HOMO = -0.236323656184347  LUMO = 88.0550159187865
  mo_energy =
[-1.20270821e+02 -1.22538359e+01 -6.65448016e+00 -6.65448016e+00
 -6.65448016e+00 -1.16346121e+00 -2.36323656e-01 -2.36323656e-01
 -2.36323656e-01  8.80550159e+01  6.94086080e+02  4.03972530e+03
  2.97983469e+04  1.54827587e+05  6.64934709e+05  2.71965803e+06
  1.10459913e+07  4.65101095e+07]
E1 = -706.5592828863402  E_coul = 198.9191117648363
Extra cycle  E= -507.640171121504  delta_E= 4.55e-13  |g|= 5.99e-11  |ddm|= 4.19e-12
    CPU time for scf_cycle      0.20 sec, wall time      0.20 sec
exp = [1.87954849e+07 4.69887121e+06 1.17471780e+06 2.93679371e+05
 7.34201336e+04 1.83049842e+04 2.29284553e+03 4.67209111e+02
 1.23752363e+02 3.79581210e+01 4.74255140e+00 3.91271712e-01
 8.59880222e+00 4.90877930e-01]
grad_E = [-1.40283437e-13  1.60847900e-11 -6.73412249e-12  9.43832125e-09
 -3.92059343e-08  5.76412745e-06  1.69275018e-06 -5.34486116e-06
  7.74237580e-05  9.99114732e-06 -1.43642119e-04  6.42221801e-04
  1.86076101e-04  1.33375941e-03]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="BFGS",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((14, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.6988712134173084e+06,1.1747178033543271e+06,2.9367945083858178e+05,7.3419865393677101e+04,1.8353927627435987e+04,2.2341424145819028e+03,4.5688904996449571e+02,1.2173317272260677e+02,3.7593061247508530e+01,4.7412722556720146e+00,3.9120358491841306e-01,8.5986297237246045e+00,4.9084868336327880e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "12s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:20:43 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  18795484.8537        1
[INPUT] 0    0    [1    /1   ]  4698871.21327        1
[INPUT] 0    0    [1    /1   ]  1174717.80331        1
[INPUT] 0    0    [1    /1   ]  293679.366221        1
[INPUT] 0    0    [1    /1   ]  73420.152241         1
[INPUT] 0    0    [1    /1   ]  18302.3581565        1
[INPUT] 0    0    [1    /1   ]  2290.58762645        1
[INPUT] 0    0    [1    /1   ]  467.151739378        1
[INPUT] 0    0    [1    /1   ]  123.818936502        1
[INPUT] 0    0    [1    /1   ]  37.9772000386        1
[INPUT] 0    0    [1    /1   ]  4.74249227622        1
[INPUT] 0    0    [1    /1   ]  0.391284743806       1
[INPUT] 1    0    [1    /1   ]  8.59888920364        1
[INPUT] 1    0    [1    /1   ]  0.490891501115       1

nuclear repulsion = 0
number of shells = 14
number of NR pGTOs = 18
number of NR cGTOs = 18
basis = {'Ar': [[0, [18795484.8536702, 1.0]], [0, [4698871.213272703, 1.0]], [0, [1174717.8033056527, 1.0]], [0, [293679.3662214616, 1.0]], [0, [73420.15224103435, 1.0]], [0, [18302.358156476945, 1.0]], [0, [2290.587626454244, 1.0]], [0, [467.1517393782392, 1.0]], [0, [123.8189365020979, 1.0]], [0, [37.97720003863614, 1.0]], [0, [4.742492276215752, 1.0]], [0, [0.39128474380564954, 1.0]], [1, [8.598889203644193, 1.0]], [1, [0.49089150111533064, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [18795484.8536702]
bas 1, expnt(s) = [4698871.2132727]
bas 2, expnt(s) = [1174717.80330565]
bas 3, expnt(s) = [293679.36622146]
bas 4, expnt(s) = [73420.15224103]
bas 5, expnt(s) = [18302.35815648]
bas 6, expnt(s) = [2290.58762645]
bas 7, expnt(s) = [467.15173938]
bas 8, expnt(s) = [123.8189365]
bas 9, expnt(s) = [37.97720004]
bas 10, expnt(s) = [4.74249228]
bas 11, expnt(s) = [0.39128474]
bas 12, expnt(s) = [8.5988892]
bas 13, expnt(s) = [0.4908915]
CPU time:       408.76
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  0  1  1  0 42 43  0]
 [ 0  0  1  1  0 44 45  0]
 [ 0  0  1  1  0 46 47  0]
 [ 0  1  1  1  0 48 49  0]
 [ 0  1  1  1  0 50 51  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.87954849e+07 7.21199097e+05 4.69887121e+06 2.54982386e+05
 1.17471780e+06 9.01498871e+04 2.93679366e+05 3.18727914e+04
 7.34201522e+04 1.12687692e+04 1.83023582e+04 3.97553253e+03
 2.29058763e+03 8.36517839e+02 4.67151739e+02 2.53868316e+02
 1.23818937e+02 9.37789415e+01 3.79772000e+01 3.86506882e+01
 4.74249228e+00 8.11932636e+00 3.91284744e-01 1.24992718e+00
 8.59888920e+00 4.29573353e+01 4.90891501e-01 1.19871595e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319864685852334
cond(S) = 56.397718181387035
E1 = -688.8492038815748  E_coul = 184.92009768290512
init E= -503.92910619867
    CPU time for initialize scf      0.03 sec, wall time      0.03 sec
  HOMO = -0.680828292433562  LUMO = 86.7909500990602
  mo_energy =
[-1.21650049e+02 -1.32808362e+01 -7.62122193e+00 -7.62122193e+00
 -7.62122193e+00 -1.65071897e+00 -6.80828292e-01 -6.80828292e-01
 -6.80828292e-01  8.67909501e+01  6.92923786e+02  4.03616004e+03
  2.97874441e+04  1.54811586e+05  6.64917896e+05  2.71964230e+06
  1.10459770e+07  4.65100965e+07]
E1 = -706.591670272113  E_coul = 198.95190291509633
cycle= 1 E= -507.639767357017  delta_E= -3.71  |g|= 0.316  |ddm|= 0.301
    CPU time for cycle= 1      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.419582
diis-c [-0.17604867  1.        ]
  HOMO = -0.236114138294044  LUMO = 88.1261196346623
  mo_energy =
[-1.20262096e+02 -1.22525889e+01 -6.65258039e+00 -6.65258039e+00
 -6.65258039e+00 -1.16336841e+00 -2.36114138e-01 -2.36114138e-01
 -2.36114138e-01  8.81261196e+01  6.94293975e+02  4.03741026e+03
  2.97885339e+04  1.54812605e+05  6.64918885e+05  2.71964328e+06
  1.10459780e+07  4.65100975e+07]
E1 = -706.5611323993348  E_coul = 198.9209499818492
cycle= 2 E= -507.640182417486  delta_E= -0.000415  |g|= 0.00467  |ddm|= 0.0138
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00496613
diis-c [-2.46055944e-05 -5.68768213e-04  1.00056877e+00]
  HOMO = -0.236283350225502  LUMO = 88.1226589577605
  mo_energy =
[-1.20270522e+02 -1.22537383e+01 -6.65436128e+00 -6.65436128e+00
 -6.65436128e+00 -1.16343095e+00 -2.36283350e-01 -2.36283350e-01
 -2.36283350e-01  8.81226590e+01  6.94283561e+02  4.03739464e+03
  2.97885150e+04  1.54812585e+05  6.64918865e+05  2.71964326e+06
  1.10459779e+07  4.65100974e+07]
E1 = -706.5607101708017  E_coul = 198.9205276486352
cycle= 3 E= -507.640182522167  delta_E= -1.05e-07  |g|= 9.2e-05  |ddm|= 0.000193
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.000123305
diis-c [-3.73163220e-10  3.35349428e-05 -2.51485952e-02  1.02511506e+00]
  HOMO = -0.236285450664526  LUMO = 88.1226160350507
  mo_energy =
[-1.20270630e+02 -1.22537533e+01 -6.65438695e+00 -6.65438695e+00
 -6.65438695e+00 -1.16343157e+00 -2.36285451e-01 -2.36285451e-01
 -2.36285451e-01  8.81226160e+01  6.94283449e+02  4.03739450e+03
  2.97885149e+04  1.54812585e+05  6.64918865e+05  2.71964326e+06
  1.10459779e+07  4.65100974e+07]
E1 = -706.560703342231  E_coul = 198.92052082002775
cycle= 4 E= -507.640182522203  delta_E= -3.68e-11  |g|= 3.57e-07  |ddm|= 3.26e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.560703342231  E_coul = 198.92052082002775
  HOMO = -0.236285435389251  LUMO = 88.1226163601463
  mo_energy =
[-1.20270629e+02 -1.22537532e+01 -6.65438679e+00 -6.65438679e+00
 -6.65438679e+00 -1.16343156e+00 -2.36285435e-01 -2.36285435e-01
 -2.36285435e-01  8.81226164e+01  6.94283450e+02  4.03739450e+03
  2.97885149e+04  1.54812585e+05  6.64918865e+05  2.71964326e+06
  1.10459779e+07  4.65100974e+07]
E1 = -706.5607033768205  E_coul = 198.92052085461702
Extra cycle  E= -507.640182522203  delta_E= -1.14e-13  |g|= 6.11e-09  |ddm|= 1.53e-08
    CPU time for scf_cycle      0.11 sec, wall time      0.12 sec
exp = [1.87954849e+07 4.69887121e+06 1.17471780e+06 2.93679366e+05
 7.34201522e+04 1.83023582e+04 2.29058763e+03 4.67151739e+02
 1.23818937e+02 3.79772000e+01 4.74249228e+00 3.91284744e-01
 8.59888920e+00 4.90891501e-01]
E = -507.6401825222034
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="BFGS",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((14, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.6988712134173084e+06,1.1747178033543271e+06,2.9367945083858178e+05,7.3419865393677101e+04,1.8353927627435987e+04,2.2341424145819028e+03,4.5688904996449571e+02,1.2173317272260677e+02,3.7593061247508530e+01,4.7412722556720146e+00,3.9120358491841306e-01,8.5986297237246045e+00,4.9084868336327880e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "12s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:20:44 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  18795484.8537        1
[INPUT] 0    0    [1    /1   ]  4698871.21327        1
[INPUT] 0    0    [1    /1   ]  1174717.80331        1
[INPUT] 0    0    [1    /1   ]  293679.366221        1
[INPUT] 0    0    [1    /1   ]  73420.152241         1
[INPUT] 0    0    [1    /1   ]  18302.3581565        1
[INPUT] 0    0    [1    /1   ]  2290.58762645        1
[INPUT] 0    0    [1    /1   ]  467.151739378        1
[INPUT] 0    0    [1    /1   ]  123.818936502        1
[INPUT] 0    0    [1    /1   ]  37.9772000386        1
[INPUT] 0    0    [1    /1   ]  4.74249227622        1
[INPUT] 0    0    [1    /1   ]  0.391284743806       1
[INPUT] 1    0    [1    /1   ]  8.59888920364        1
[INPUT] 1    0    [1    /1   ]  0.490891501115       1

nuclear repulsion = 0
number of shells = 14
number of NR pGTOs = 18
number of NR cGTOs = 18
basis = {'Ar': [[0, [18795484.8536702, 1.0]], [0, [4698871.213272703, 1.0]], [0, [1174717.8033056527, 1.0]], [0, [293679.3662214616, 1.0]], [0, [73420.15224103435, 1.0]], [0, [18302.358156476945, 1.0]], [0, [2290.587626454244, 1.0]], [0, [467.1517393782392, 1.0]], [0, [123.8189365020979, 1.0]], [0, [37.97720003863614, 1.0]], [0, [4.742492276215752, 1.0]], [0, [0.39128474380564954, 1.0]], [1, [8.598889203644193, 1.0]], [1, [0.49089150111533064, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [18795484.8536702]
bas 1, expnt(s) = [4698871.2132727]
bas 2, expnt(s) = [1174717.80330565]
bas 3, expnt(s) = [293679.36622146]
bas 4, expnt(s) = [73420.15224103]
bas 5, expnt(s) = [18302.35815648]
bas 6, expnt(s) = [2290.58762645]
bas 7, expnt(s) = [467.15173938]
bas 8, expnt(s) = [123.8189365]
bas 9, expnt(s) = [37.97720004]
bas 10, expnt(s) = [4.74249228]
bas 11, expnt(s) = [0.39128474]
bas 12, expnt(s) = [8.5988892]
bas 13, expnt(s) = [0.4908915]
CPU time:       409.94
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  0  1  1  0 42 43  0]
 [ 0  0  1  1  0 44 45  0]
 [ 0  0  1  1  0 46 47  0]
 [ 0  1  1  1  0 48 49  0]
 [ 0  1  1  1  0 50 51  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.87954849e+07 7.21199097e+05 4.69887121e+06 2.54982386e+05
 1.17471780e+06 9.01498871e+04 2.93679366e+05 3.18727914e+04
 7.34201522e+04 1.12687692e+04 1.83023582e+04 3.97553253e+03
 2.29058763e+03 8.36517839e+02 4.67151739e+02 2.53868316e+02
 1.23818937e+02 9.37789415e+01 3.79772000e+01 3.86506882e+01
 4.74249228e+00 8.11932636e+00 3.91284744e-01 1.24992718e+00
 8.59888920e+00 4.29573353e+01 4.90891501e-01 1.19871595e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319864685852334
cond(S) = 56.397718181387035
E1 = -688.8492038815748  E_coul = 184.92009768290512
init E= -503.92910619867
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.680828292433562  LUMO = 86.7909500990602
  mo_energy =
[-1.21650049e+02 -1.32808362e+01 -7.62122193e+00 -7.62122193e+00
 -7.62122193e+00 -1.65071897e+00 -6.80828292e-01 -6.80828292e-01
 -6.80828292e-01  8.67909501e+01  6.92923786e+02  4.03616004e+03
  2.97874441e+04  1.54811586e+05  6.64917896e+05  2.71964230e+06
  1.10459770e+07  4.65100965e+07]
E1 = -706.591670272113  E_coul = 198.95190291509633
cycle= 1 E= -507.639767357017  delta_E= -3.71  |g|= 0.316  |ddm|= 0.301
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.419582
diis-c [-0.17604867  1.        ]
  HOMO = -0.236114138294044  LUMO = 88.1261196346623
  mo_energy =
[-1.20262096e+02 -1.22525889e+01 -6.65258039e+00 -6.65258039e+00
 -6.65258039e+00 -1.16336841e+00 -2.36114138e-01 -2.36114138e-01
 -2.36114138e-01  8.81261196e+01  6.94293975e+02  4.03741026e+03
  2.97885339e+04  1.54812605e+05  6.64918885e+05  2.71964328e+06
  1.10459780e+07  4.65100975e+07]
E1 = -706.5611323993348  E_coul = 198.9209499818492
cycle= 2 E= -507.640182417486  delta_E= -0.000415  |g|= 0.00467  |ddm|= 0.0138
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00496613
diis-c [-2.46055944e-05 -5.68768213e-04  1.00056877e+00]
  HOMO = -0.236283350225502  LUMO = 88.1226589577605
  mo_energy =
[-1.20270522e+02 -1.22537383e+01 -6.65436128e+00 -6.65436128e+00
 -6.65436128e+00 -1.16343095e+00 -2.36283350e-01 -2.36283350e-01
 -2.36283350e-01  8.81226590e+01  6.94283561e+02  4.03739464e+03
  2.97885150e+04  1.54812585e+05  6.64918865e+05  2.71964326e+06
  1.10459779e+07  4.65100974e+07]
E1 = -706.5607101708017  E_coul = 198.9205276486352
cycle= 3 E= -507.640182522167  delta_E= -1.05e-07  |g|= 9.2e-05  |ddm|= 0.000193
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.000123305
diis-c [-3.73163220e-10  3.35349428e-05 -2.51485952e-02  1.02511506e+00]
  HOMO = -0.236285450664526  LUMO = 88.1226160350507
  mo_energy =
[-1.20270630e+02 -1.22537533e+01 -6.65438695e+00 -6.65438695e+00
 -6.65438695e+00 -1.16343157e+00 -2.36285451e-01 -2.36285451e-01
 -2.36285451e-01  8.81226160e+01  6.94283449e+02  4.03739450e+03
  2.97885149e+04  1.54812585e+05  6.64918865e+05  2.71964326e+06
  1.10459779e+07  4.65100974e+07]
E1 = -706.560703342231  E_coul = 198.92052082002775
cycle= 4 E= -507.640182522203  delta_E= -3.68e-11  |g|= 3.57e-07  |ddm|= 3.26e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.560703342231  E_coul = 198.92052082002775
  HOMO = -0.236285435389251  LUMO = 88.1226163601463
  mo_energy =
[-1.20270629e+02 -1.22537532e+01 -6.65438679e+00 -6.65438679e+00
 -6.65438679e+00 -1.16343156e+00 -2.36285435e-01 -2.36285435e-01
 -2.36285435e-01  8.81226164e+01  6.94283450e+02  4.03739450e+03
  2.97885149e+04  1.54812585e+05  6.64918865e+05  2.71964326e+06
  1.10459779e+07  4.65100974e+07]
E1 = -706.5607033768205  E_coul = 198.92052085461702
Extra cycle  E= -507.640182522203  delta_E= -1.14e-13  |g|= 6.11e-09  |ddm|= 1.53e-08
    CPU time for scf_cycle      0.10 sec, wall time      0.11 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 56.397718181387035
E1 = -706.5607033768205  E_coul = 198.92052085461702
init E= -507.640182522203
    CPU time for initialize scf      0.13 sec, wall time      0.14 sec
  HOMO = -0.236285435212615  LUMO = 88.1226163640589
  mo_energy =
[-1.20270629e+02 -1.22537532e+01 -6.65438679e+00 -6.65438679e+00
 -6.65438679e+00 -1.16343156e+00 -2.36285435e-01 -2.36285435e-01
 -2.36285435e-01  8.81226164e+01  6.94283450e+02  4.03739450e+03
  2.97885149e+04  1.54812585e+05  6.64918865e+05  2.71964326e+06
  1.10459779e+07  4.65100974e+07]
E1 = -706.5607033773368  E_coul = 198.92052085513362
cycle= 1 E= -507.640182522203  delta_E= 2.27e-13  |g|= 1.73e-10  |ddm|= 2.34e-10
    CPU time for cycle= 1      0.01 sec, wall time      0.02 sec
E1 = -706.5607033773368  E_coul = 198.92052085513362
  HOMO = -0.23628543521015  LUMO = 88.1226163641138
  mo_energy =
[-1.20270629e+02 -1.22537532e+01 -6.65438679e+00 -6.65438679e+00
 -6.65438679e+00 -1.16343156e+00 -2.36285435e-01 -2.36285435e-01
 -2.36285435e-01  8.81226164e+01  6.94283450e+02  4.03739450e+03
  2.97885149e+04  1.54812585e+05  6.64918865e+05  2.71964326e+06
  1.10459779e+07  4.65100974e+07]
E1 = -706.5607033773457  E_coul = 198.9205208551423
Extra cycle  E= -507.640182522203  delta_E= -2.27e-13  |g|= 1.1e-10  |ddm|= 4.12e-12
    CPU time for scf_cycle      0.21 sec, wall time      0.21 sec
exp = [1.87954849e+07 4.69887121e+06 1.17471780e+06 2.93679366e+05
 7.34201522e+04 1.83023582e+04 2.29058763e+03 4.67151739e+02
 1.23818937e+02 3.79772000e+01 4.74249228e+00 3.91284744e-01
 8.59888920e+00 4.90891501e-01]
grad_E = [-1.39322953e-13  1.61521667e-11 -6.22497704e-12  9.47705998e-09
 -3.90804957e-08  5.79370023e-06  8.82084577e-07 -7.42431594e-06
  1.03832143e-04  1.33828383e-05 -1.92727136e-04  8.61585406e-04
  2.49623836e-04  1.78931005e-03]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="BFGS",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((14, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.6988712134173084e+06,1.1747178033543271e+06,2.9367945083858178e+05,7.3419865393677101e+04,1.8353927627435987e+04,2.2341424145819028e+03,4.5688904996449571e+02,1.2173317272260677e+02,3.7593061247508530e+01,4.7412722556720146e+00,3.9120358491841306e-01,8.5986297237246045e+00,4.9084868336327880e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "12s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:20:48 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  18795484.8537        1
[INPUT] 0    0    [1    /1   ]  4698871.21326        1
[INPUT] 0    0    [1    /1   ]  1174717.80331        1
[INPUT] 0    0    [1    /1   ]  293679.357707        1
[INPUT] 0    0    [1    /1   ]  73420.1878258        1
[INPUT] 0    0    [1    /1   ]  18297.1667667        1
[INPUT] 0    0    [1    /1   ]  2287.65307143        1
[INPUT] 0    0    [1    /1   ]  467.070310064        1
[INPUT] 0    0    [1    /1   ]  123.90201396         1
[INPUT] 0    0    [1    /1   ]  38.0011394438        1
[INPUT] 0    0    [1    /1   ]  4.74241649926        1
[INPUT] 0    0    [1    /1   ]  0.391301207601       1
[INPUT] 1    0    [1    /1   ]  8.5989990683         1
[INPUT] 1    0    [1    /1   ]  0.490908648327       1

nuclear repulsion = 0
number of shells = 14
number of NR pGTOs = 18
number of NR cGTOs = 18
basis = {'Ar': [[0, [18795484.853670325, 1.0]], [0, [4698871.213258193, 1.0]], [0, [1174717.8033121661, 1.0]], [0, [293679.35770676524, 1.0]], [0, [73420.18782583975, 1.0]], [0, [18297.16676673558, 1.0]], [0, [2287.6530714268893, 1.0]], [0, [467.070310064392, 1.0]], [0, [123.90201395989524, 1.0]], [0, [38.00113944375899, 1.0]], [0, [4.742416499256957, 1.0]], [0, [0.3913012076006877, 1.0]], [1, [8.598999068295823, 1.0]], [1, [0.4909086483268504, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [18795484.85367033]
bas 1, expnt(s) = [4698871.21325819]
bas 2, expnt(s) = [1174717.80331217]
bas 3, expnt(s) = [293679.35770677]
bas 4, expnt(s) = [73420.18782584]
bas 5, expnt(s) = [18297.16676674]
bas 6, expnt(s) = [2287.65307143]
bas 7, expnt(s) = [467.07031006]
bas 8, expnt(s) = [123.90201396]
bas 9, expnt(s) = [38.00113944]
bas 10, expnt(s) = [4.7424165]
bas 11, expnt(s) = [0.39130121]
bas 12, expnt(s) = [8.59899907]
bas 13, expnt(s) = [0.49090865]
CPU time:       414.05
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  0  1  1  0 42 43  0]
 [ 0  0  1  1  0 44 45  0]
 [ 0  0  1  1  0 46 47  0]
 [ 0  1  1  1  0 48 49  0]
 [ 0  1  1  1  0 50 51  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.87954849e+07 7.21199097e+05 4.69887121e+06 2.54982386e+05
 1.17471780e+06 9.01498871e+04 2.93679358e+05 3.18727907e+04
 7.34201878e+04 1.12687733e+04 1.82971668e+04 3.97468677e+03
 2.28765307e+03 8.35713940e+02 4.67070310e+02 2.53835126e+02
 1.23902014e+02 9.38261289e+01 3.80011394e+01 3.86689597e+01
 4.74241650e+00 8.11922906e+00 3.91301208e-01 1.24996662e+00
 8.59899907e+00 4.29580214e+01 4.90908648e-01 1.19876829e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.31983998559504
cond(S) = 56.40071909439462
E1 = -688.8495077415565  E_coul = 184.9214057730248
init E= -503.928101968532
    CPU time for initialize scf      0.02 sec, wall time      0.03 sec
  HOMO = -0.680801723205448  LUMO = 86.875391206034
  mo_energy =
[-1.21649852e+02 -1.32807624e+01 -7.62113180e+00 -7.62113180e+00
 -7.62113180e+00 -1.65070289e+00 -6.80801723e-01 -6.80801723e-01
 -6.80801723e-01  8.68753912e+01  6.93161555e+02  4.03308824e+03
  2.97727979e+04  1.54786898e+05  6.64891150e+05  2.71961724e+06
  1.10459542e+07  4.65100761e+07]
E1 = -706.593427713107  E_coul = 198.95363970749793
cycle= 1 E= -507.639788005609  delta_E= -3.71  |g|= 0.316  |ddm|= 0.301
    CPU time for cycle= 1      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.419629
diis-c [-0.17608852  1.        ]
  HOMO = -0.236066128199026  LUMO = 88.2106903008989
  mo_energy =
[-1.20261866e+02 -1.22524867e+01 -6.65246533e+00 -6.65246533e+00
 -6.65246533e+00 -1.16333109e+00 -2.36066128e-01 -2.36066128e-01
 -2.36066128e-01  8.82106903e+01  6.94531812e+02  4.03433869e+03
  2.97738880e+04  1.54787918e+05  6.64892139e+05  2.71961822e+06
  1.10459552e+07  4.65100770e+07]
E1 = -706.562931551939  E_coul = 198.92272906692057
cycle= 2 E= -507.640202485018  delta_E= -0.000414  |g|= 0.00466  |ddm|= 0.0138
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00496313
diis-c [-2.45748339e-05 -5.73323509e-04  1.00057332e+00]
  HOMO = -0.23623507492359  LUMO = 88.2072325315539
  mo_energy =
[-1.20270282e+02 -1.22536343e+01 -6.65424346e+00 -6.65424346e+00
 -6.65424346e+00 -1.16339353e+00 -2.36235075e-01 -2.36235075e-01
 -2.36235075e-01  8.82072325e+01  6.94521411e+02  4.03432309e+03
  2.97738691e+04  1.54787898e+05  6.64892119e+05  2.71961820e+06
  1.10459552e+07  4.65100770e+07]
E1 = -706.5625101443475  E_coul = 198.922307554896
cycle= 3 E= -507.640202589451  delta_E= -1.04e-07  |g|= 9.19e-05  |ddm|= 0.000193
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.000123146
diis-c [-3.72263675e-10  3.35332546e-05 -2.51319234e-02  1.02509839e+00]
  HOMO = -0.23623717013563  LUMO = 88.2071896941632
  mo_energy =
[-1.20270390e+02 -1.22536492e+01 -6.65426906e+00 -6.65426906e+00
 -6.65426906e+00 -1.16339415e+00 -2.36237170e-01 -2.36237170e-01
 -2.36237170e-01  8.82071897e+01  6.94521299e+02  4.03432295e+03
  2.97738690e+04  1.54787898e+05  6.64892119e+05  2.71961820e+06
  1.10459552e+07  4.65100770e+07]
E1 = -706.5625033352103  E_coul = 198.92230074572157
cycle= 4 E= -507.640202589489  delta_E= -3.72e-11  |g|= 3.56e-07  |ddm|= 3.25e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.5625033352103  E_coul = 198.92230074572157
  HOMO = -0.236237154904676  LUMO = 88.2071900186732
  mo_energy =
[-1.20270389e+02 -1.22536491e+01 -6.65426891e+00 -6.65426891e+00
 -6.65426891e+00 -1.16339415e+00 -2.36237155e-01 -2.36237155e-01
 -2.36237155e-01  8.82071900e+01  6.94521300e+02  4.03432295e+03
  2.97738690e+04  1.54787898e+05  6.64892119e+05  2.71961820e+06
  1.10459552e+07  4.65100770e+07]
E1 = -706.562503369695  E_coul = 198.92230078020665
Extra cycle  E= -507.640202589488  delta_E= 3.41e-13  |g|= 6.09e-09  |ddm|= 1.53e-08
    CPU time for scf_cycle      0.11 sec, wall time      0.11 sec
exp = [1.87954849e+07 4.69887121e+06 1.17471780e+06 2.93679358e+05
 7.34201878e+04 1.82971668e+04 2.28765307e+03 4.67070310e+02
 1.23902014e+02 3.80011394e+01 4.74241650e+00 3.91301208e-01
 8.59899907e+00 4.90908648e-01]
E = -507.64020258948835
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="BFGS",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((14, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.6988712134173084e+06,1.1747178033543271e+06,2.9367945083858178e+05,7.3419865393677101e+04,1.8353927627435987e+04,2.2341424145819028e+03,4.5688904996449571e+02,1.2173317272260677e+02,3.7593061247508530e+01,4.7412722556720146e+00,3.9120358491841306e-01,8.5986297237246045e+00,4.9084868336327880e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "12s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:20:49 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  18795484.8537        1
[INPUT] 0    0    [1    /1   ]  4698871.21326        1
[INPUT] 0    0    [1    /1   ]  1174717.80331        1
[INPUT] 0    0    [1    /1   ]  293679.357707        1
[INPUT] 0    0    [1    /1   ]  73420.1878258        1
[INPUT] 0    0    [1    /1   ]  18297.1667667        1
[INPUT] 0    0    [1    /1   ]  2287.65307143        1
[INPUT] 0    0    [1    /1   ]  467.070310064        1
[INPUT] 0    0    [1    /1   ]  123.90201396         1
[INPUT] 0    0    [1    /1   ]  38.0011394438        1
[INPUT] 0    0    [1    /1   ]  4.74241649926        1
[INPUT] 0    0    [1    /1   ]  0.391301207601       1
[INPUT] 1    0    [1    /1   ]  8.5989990683         1
[INPUT] 1    0    [1    /1   ]  0.490908648327       1

nuclear repulsion = 0
number of shells = 14
number of NR pGTOs = 18
number of NR cGTOs = 18
basis = {'Ar': [[0, [18795484.853670325, 1.0]], [0, [4698871.213258193, 1.0]], [0, [1174717.8033121661, 1.0]], [0, [293679.35770676524, 1.0]], [0, [73420.18782583975, 1.0]], [0, [18297.16676673558, 1.0]], [0, [2287.6530714268893, 1.0]], [0, [467.070310064392, 1.0]], [0, [123.90201395989524, 1.0]], [0, [38.00113944375899, 1.0]], [0, [4.742416499256957, 1.0]], [0, [0.3913012076006877, 1.0]], [1, [8.598999068295823, 1.0]], [1, [0.4909086483268504, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [18795484.85367033]
bas 1, expnt(s) = [4698871.21325819]
bas 2, expnt(s) = [1174717.80331217]
bas 3, expnt(s) = [293679.35770677]
bas 4, expnt(s) = [73420.18782584]
bas 5, expnt(s) = [18297.16676674]
bas 6, expnt(s) = [2287.65307143]
bas 7, expnt(s) = [467.07031006]
bas 8, expnt(s) = [123.90201396]
bas 9, expnt(s) = [38.00113944]
bas 10, expnt(s) = [4.7424165]
bas 11, expnt(s) = [0.39130121]
bas 12, expnt(s) = [8.59899907]
bas 13, expnt(s) = [0.49090865]
CPU time:       415.23
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  0  1  1  0 42 43  0]
 [ 0  0  1  1  0 44 45  0]
 [ 0  0  1  1  0 46 47  0]
 [ 0  1  1  1  0 48 49  0]
 [ 0  1  1  1  0 50 51  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.87954849e+07 7.21199097e+05 4.69887121e+06 2.54982386e+05
 1.17471780e+06 9.01498871e+04 2.93679358e+05 3.18727907e+04
 7.34201878e+04 1.12687733e+04 1.82971668e+04 3.97468677e+03
 2.28765307e+03 8.35713940e+02 4.67070310e+02 2.53835126e+02
 1.23902014e+02 9.38261289e+01 3.80011394e+01 3.86689597e+01
 4.74241650e+00 8.11922906e+00 3.91301208e-01 1.24996662e+00
 8.59899907e+00 4.29580214e+01 4.90908648e-01 1.19876829e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.31983998559504
cond(S) = 56.40071909439462
E1 = -688.8495077415565  E_coul = 184.9214057730248
init E= -503.928101968532
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.680801723205448  LUMO = 86.875391206034
  mo_energy =
[-1.21649852e+02 -1.32807624e+01 -7.62113180e+00 -7.62113180e+00
 -7.62113180e+00 -1.65070289e+00 -6.80801723e-01 -6.80801723e-01
 -6.80801723e-01  8.68753912e+01  6.93161555e+02  4.03308824e+03
  2.97727979e+04  1.54786898e+05  6.64891150e+05  2.71961724e+06
  1.10459542e+07  4.65100761e+07]
E1 = -706.593427713107  E_coul = 198.95363970749793
cycle= 1 E= -507.639788005609  delta_E= -3.71  |g|= 0.316  |ddm|= 0.301
    CPU time for cycle= 1      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.419629
diis-c [-0.17608852  1.        ]
  HOMO = -0.236066128199026  LUMO = 88.2106903008989
  mo_energy =
[-1.20261866e+02 -1.22524867e+01 -6.65246533e+00 -6.65246533e+00
 -6.65246533e+00 -1.16333109e+00 -2.36066128e-01 -2.36066128e-01
 -2.36066128e-01  8.82106903e+01  6.94531812e+02  4.03433869e+03
  2.97738880e+04  1.54787918e+05  6.64892139e+05  2.71961822e+06
  1.10459552e+07  4.65100770e+07]
E1 = -706.562931551939  E_coul = 198.92272906692057
cycle= 2 E= -507.640202485018  delta_E= -0.000414  |g|= 0.00466  |ddm|= 0.0138
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00496313
diis-c [-2.45748339e-05 -5.73323509e-04  1.00057332e+00]
  HOMO = -0.23623507492359  LUMO = 88.2072325315539
  mo_energy =
[-1.20270282e+02 -1.22536343e+01 -6.65424346e+00 -6.65424346e+00
 -6.65424346e+00 -1.16339353e+00 -2.36235075e-01 -2.36235075e-01
 -2.36235075e-01  8.82072325e+01  6.94521411e+02  4.03432309e+03
  2.97738691e+04  1.54787898e+05  6.64892119e+05  2.71961820e+06
  1.10459552e+07  4.65100770e+07]
E1 = -706.5625101443475  E_coul = 198.922307554896
cycle= 3 E= -507.640202589451  delta_E= -1.04e-07  |g|= 9.19e-05  |ddm|= 0.000193
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.000123146
diis-c [-3.72263675e-10  3.35332546e-05 -2.51319234e-02  1.02509839e+00]
  HOMO = -0.23623717013563  LUMO = 88.2071896941632
  mo_energy =
[-1.20270390e+02 -1.22536492e+01 -6.65426906e+00 -6.65426906e+00
 -6.65426906e+00 -1.16339415e+00 -2.36237170e-01 -2.36237170e-01
 -2.36237170e-01  8.82071897e+01  6.94521299e+02  4.03432295e+03
  2.97738690e+04  1.54787898e+05  6.64892119e+05  2.71961820e+06
  1.10459552e+07  4.65100770e+07]
E1 = -706.5625033352103  E_coul = 198.92230074572157
cycle= 4 E= -507.640202589489  delta_E= -3.72e-11  |g|= 3.56e-07  |ddm|= 3.25e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.5625033352103  E_coul = 198.92230074572157
  HOMO = -0.236237154904676  LUMO = 88.2071900186732
  mo_energy =
[-1.20270389e+02 -1.22536491e+01 -6.65426891e+00 -6.65426891e+00
 -6.65426891e+00 -1.16339415e+00 -2.36237155e-01 -2.36237155e-01
 -2.36237155e-01  8.82071900e+01  6.94521300e+02  4.03432295e+03
  2.97738690e+04  1.54787898e+05  6.64892119e+05  2.71961820e+06
  1.10459552e+07  4.65100770e+07]
E1 = -706.562503369695  E_coul = 198.92230078020665
Extra cycle  E= -507.640202589488  delta_E= 3.41e-13  |g|= 6.09e-09  |ddm|= 1.53e-08
    CPU time for scf_cycle      0.10 sec, wall time      0.11 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 56.40071909439462
E1 = -706.562503369695  E_coul = 198.92230078020665
init E= -507.640202589488
    CPU time for initialize scf      0.12 sec, wall time      0.12 sec
  HOMO = -0.236237154728638  LUMO = 88.2071900225769
  mo_energy =
[-1.20270389e+02 -1.22536491e+01 -6.65426891e+00 -6.65426891e+00
 -6.65426891e+00 -1.16339415e+00 -2.36237155e-01 -2.36237155e-01
 -2.36237155e-01  8.82071900e+01  6.94521300e+02  4.03432295e+03
  2.97738690e+04  1.54787898e+05  6.64892119e+05  2.71961820e+06
  1.10459552e+07  4.65100770e+07]
E1 = -706.56250337021  E_coul = 198.92230078072132
cycle= 1 E= -507.640202589489  delta_E= -3.41e-13  |g|= 1.28e-10  |ddm|= 2.34e-10
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -706.56250337021  E_coul = 198.92230078072132
  HOMO = -0.236237154726183  LUMO = 88.207190022629
  mo_energy =
[-1.20270389e+02 -1.22536491e+01 -6.65426891e+00 -6.65426891e+00
 -6.65426891e+00 -1.16339415e+00 -2.36237155e-01 -2.36237155e-01
 -2.36237155e-01  8.82071900e+01  6.94521300e+02  4.03432295e+03
  2.97738690e+04  1.54787898e+05  6.64892119e+05  2.71961820e+06
  1.10459552e+07  4.65100770e+07]
E1 = -706.5625033702189  E_coul = 198.92230078073027
Extra cycle  E= -507.640202589489  delta_E= 5.68e-14  |g|= 3.09e-10  |ddm|= 4.17e-12
    CPU time for scf_cycle      0.20 sec, wall time      0.20 sec
exp = [1.87954849e+07 4.69887121e+06 1.17471780e+06 2.93679358e+05
 7.34201878e+04 1.82971668e+04 2.28765307e+03 4.67070310e+02
 1.23902014e+02 3.80011394e+01 4.74241650e+00 3.91301208e-01
 8.59899907e+00 4.90908648e-01]
grad_E = [-1.38183511e-13  1.62317545e-11 -5.62174519e-12  9.52295149e-09
 -3.89457875e-08  5.83153869e-06 -1.41032549e-07 -1.00557221e-05
  1.37220305e-04  1.76069077e-05 -2.54777473e-04  1.13871943e-03
  3.29890234e-04  2.36477039e-03]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="BFGS",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((14, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.6988712134173084e+06,1.1747178033543271e+06,2.9367945083858178e+05,7.3419865393677101e+04,1.8353927627435987e+04,2.2341424145819028e+03,4.5688904996449571e+02,1.2173317272260677e+02,3.7593061247508530e+01,4.7412722556720146e+00,3.9120358491841306e-01,8.5986297237246045e+00,4.9084868336327880e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "12s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:20:53 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  18795484.8537        1
[INPUT] 0    0    [1    /1   ]  4698871.21323        1
[INPUT] 0    0    [1    /1   ]  1174717.80332        1
[INPUT] 0    0    [1    /1   ]  293679.341619        1
[INPUT] 0    0    [1    /1   ]  73420.2537779        1
[INPUT] 0    0    [1    /1   ]  18287.3584565        1
[INPUT] 0    0    [1    /1   ]  2283.77775834        1
[INPUT] 0    0    [1    /1   ]  466.950948336        1
[INPUT] 0    0    [1    /1   ]  124.00578992         1
[INPUT] 0    0    [1    /1   ]  38.0312864099        1
[INPUT] 0    0    [1    /1   ]  4.74231821823        1
[INPUT] 0    0    [1    /1   ]  0.391322147477       1
[INPUT] 1    0    [1    /1   ]  8.59913879032        1
[INPUT] 1    0    [1    /1   ]  0.49093046532        1

nuclear repulsion = 0
number of shells = 14
number of NR pGTOs = 18
number of NR cGTOs = 18
basis = {'Ar': [[0, [18795484.85367056, 1.0]], [0, [4698871.21323077, 1.0]], [0, [1174717.8033222952, 1.0]], [0, [293679.34161901014, 1.0]], [0, [73420.2537779204, 1.0]], [0, [18287.35845647828, 1.0]], [0, [2283.777758337911, 1.0]], [0, [466.9509483355681, 1.0]], [0, [124.00578992039596, 1.0]], [0, [38.03128640987233, 1.0]], [0, [4.742318218226128, 1.0]], [0, [0.3913221474771872, 1.0]], [1, [8.59913879031815, 1.0]], [1, [0.49093046532002144, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [18795484.85367056]
bas 1, expnt(s) = [4698871.21323077]
bas 2, expnt(s) = [1174717.8033223]
bas 3, expnt(s) = [293679.34161901]
bas 4, expnt(s) = [73420.25377792]
bas 5, expnt(s) = [18287.35845648]
bas 6, expnt(s) = [2283.77775834]
bas 7, expnt(s) = [466.95094834]
bas 8, expnt(s) = [124.00578992]
bas 9, expnt(s) = [38.03128641]
bas 10, expnt(s) = [4.74231822]
bas 11, expnt(s) = [0.39132215]
bas 12, expnt(s) = [8.59913879]
bas 13, expnt(s) = [0.49093047]
CPU time:       419.16
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  0  1  1  0 42 43  0]
 [ 0  0  1  1  0 44 45  0]
 [ 0  0  1  1  0 46 47  0]
 [ 0  1  1  1  0 48 49  0]
 [ 0  1  1  1  0 50 51  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.87954849e+07 7.21199097e+05 4.69887121e+06 2.54982386e+05
 1.17471780e+06 9.01498871e+04 2.93679342e+05 3.18727894e+04
 7.34202538e+04 1.12687809e+04 1.82873585e+04 3.97308867e+03
 2.28377776e+03 8.34651933e+02 4.66950948e+02 2.53786473e+02
 1.24005790e+02 9.38850618e+01 3.80312864e+01 3.86919650e+01
 4.74231822e+00 8.11910286e+00 3.91322147e-01 1.25001679e+00
 8.59913879e+00 4.29588939e+01 4.90930465e-01 1.19883489e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319808593742316
cond(S) = 56.401578438221115
E1 = -688.8499458142609  E_coul = 184.92306872355644
init E= -503.926877090704
    CPU time for initialize scf      0.03 sec, wall time      0.03 sec
  HOMO = -0.680767908818967  LUMO = 86.9812686325566
  mo_energy =
[-1.21649606e+02 -1.32806692e+01 -7.62101728e+00 -7.62101728e+00
 -7.62101728e+00 -1.65068243e+00 -6.80767909e-01 -6.80767909e-01
 -6.80767909e-01  8.69812686e+01  6.93443465e+02  4.02895946e+03
  2.97503529e+04  1.54745677e+05  6.64845610e+05  2.71957441e+06
  1.10459153e+07  4.65100411e+07]
E1 = -706.595673972421  E_coul = 198.95584949154346
cycle= 1 E= -507.639824480878  delta_E= -3.71  |g|= 0.316  |ddm|= 0.301
    CPU time for cycle= 1      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.41969
diis-c [-0.17613965  1.        ]
  HOMO = -0.236005060612756  LUMO = 88.3167307503893
  mo_energy =
[-1.20261578e+02 -1.22523574e+01 -6.65231903e+00 -6.65231903e+00
 -6.65231903e+00 -1.16328368e+00 -2.36005061e-01 -2.36005061e-01
 -2.36005061e-01  8.83167308e+01  6.94813811e+02  4.03021020e+03
  2.97514432e+04  1.54746696e+05  6.64846600e+05  2.71957538e+06
  1.10459163e+07  4.65100421e+07]
E1 = -706.5652299756413  E_coul = 198.92499174159767
cycle= 2 E= -507.640238234044  delta_E= -0.000414  |g|= 0.00466  |ddm|= 0.0138
    CPU time for cycle= 2      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.0049594
diis-c [-2.45366490e-05 -5.79020201e-04  1.00057902e+00]
  HOMO = -0.236173676127919  LUMO = 88.3132766273918
  mo_energy =
[-1.20269981e+02 -1.22535028e+01 -6.65409372e+00 -6.65409372e+00
 -6.65409372e+00 -1.16334599e+00 -2.36173676e-01 -2.36173676e-01
 -2.36173676e-01  8.83132766e+01  6.94803425e+02  4.03019463e+03
  2.97514244e+04  1.54746677e+05  6.64846580e+05  2.71957536e+06
  1.10459163e+07  4.65100421e+07]
E1 = -706.5648095936955  E_coul = 198.92457125552798
cycle= 3 E= -507.640238338167  delta_E= -1.04e-07  |g|= 9.17e-05  |ddm|= 0.000193
    CPU time for cycle= 3      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.000122949
diis-c [-3.71142980e-10  3.35314719e-05 -2.51110647e-02  1.02507753e+00]
  HOMO = -0.236175764816493  LUMO = 88.3132338966331
  mo_energy =
[-1.20270089e+02 -1.22535177e+01 -6.65411924e+00 -6.65411924e+00
 -6.65411924e+00 -1.16334661e+00 -2.36175765e-01 -2.36175765e-01
 -2.36175765e-01  8.83132339e+01  6.94803313e+02  4.03019449e+03
  2.97514242e+04  1.54746676e+05  6.64846580e+05  2.71957536e+06
  1.10459163e+07  4.65100421e+07]
E1 = -706.5648028088181  E_coul = 198.92456447061414
cycle= 4 E= -507.640238338204  delta_E= -3.64e-11  |g|= 3.55e-07  |ddm|= 3.24e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.5648028088181  E_coul = 198.92456447061414
  HOMO = -0.236175749640845  LUMO = 88.3132342204094
  mo_energy =
[-1.20270088e+02 -1.22535176e+01 -6.65411909e+00 -6.65411909e+00
 -6.65411909e+00 -1.16334660e+00 -2.36175750e-01 -2.36175750e-01
 -2.36175750e-01  8.83132342e+01  6.94803315e+02  4.03019449e+03
  2.97514242e+04  1.54746676e+05  6.64846580e+05  2.71957536e+06
  1.10459163e+07  4.65100421e+07]
E1 = -706.5648028431738  E_coul = 198.9245645049694
Extra cycle  E= -507.640238338204  delta_E= -4.55e-13  |g|= 6.07e-09  |ddm|= 1.52e-08
    CPU time for scf_cycle      0.10 sec, wall time      0.11 sec
exp = [1.87954849e+07 4.69887121e+06 1.17471780e+06 2.93679342e+05
 7.34202538e+04 1.82873585e+04 2.28377776e+03 4.66950948e+02
 1.24005790e+02 3.80312864e+01 4.74231822e+00 3.91322147e-01
 8.59913879e+00 4.90930465e-01]
E = -507.64023833820437
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="BFGS",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((14, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.6988712134173084e+06,1.1747178033543271e+06,2.9367945083858178e+05,7.3419865393677101e+04,1.8353927627435987e+04,2.2341424145819028e+03,4.5688904996449571e+02,1.2173317272260677e+02,3.7593061247508530e+01,4.7412722556720146e+00,3.9120358491841306e-01,8.5986297237246045e+00,4.9084868336327880e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "12s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:20:55 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  18795484.8537        1
[INPUT] 0    0    [1    /1   ]  4698871.21323        1
[INPUT] 0    0    [1    /1   ]  1174717.80332        1
[INPUT] 0    0    [1    /1   ]  293679.341619        1
[INPUT] 0    0    [1    /1   ]  73420.2537779        1
[INPUT] 0    0    [1    /1   ]  18287.3584565        1
[INPUT] 0    0    [1    /1   ]  2283.77775834        1
[INPUT] 0    0    [1    /1   ]  466.950948336        1
[INPUT] 0    0    [1    /1   ]  124.00578992         1
[INPUT] 0    0    [1    /1   ]  38.0312864099        1
[INPUT] 0    0    [1    /1   ]  4.74231821823        1
[INPUT] 0    0    [1    /1   ]  0.391322147477       1
[INPUT] 1    0    [1    /1   ]  8.59913879032        1
[INPUT] 1    0    [1    /1   ]  0.49093046532        1

nuclear repulsion = 0
number of shells = 14
number of NR pGTOs = 18
number of NR cGTOs = 18
basis = {'Ar': [[0, [18795484.85367056, 1.0]], [0, [4698871.21323077, 1.0]], [0, [1174717.8033222952, 1.0]], [0, [293679.34161901014, 1.0]], [0, [73420.2537779204, 1.0]], [0, [18287.35845647828, 1.0]], [0, [2283.777758337911, 1.0]], [0, [466.9509483355681, 1.0]], [0, [124.00578992039596, 1.0]], [0, [38.03128640987233, 1.0]], [0, [4.742318218226128, 1.0]], [0, [0.3913221474771872, 1.0]], [1, [8.59913879031815, 1.0]], [1, [0.49093046532002144, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [18795484.85367056]
bas 1, expnt(s) = [4698871.21323077]
bas 2, expnt(s) = [1174717.8033223]
bas 3, expnt(s) = [293679.34161901]
bas 4, expnt(s) = [73420.25377792]
bas 5, expnt(s) = [18287.35845648]
bas 6, expnt(s) = [2283.77775834]
bas 7, expnt(s) = [466.95094834]
bas 8, expnt(s) = [124.00578992]
bas 9, expnt(s) = [38.03128641]
bas 10, expnt(s) = [4.74231822]
bas 11, expnt(s) = [0.39132215]
bas 12, expnt(s) = [8.59913879]
bas 13, expnt(s) = [0.49093047]
CPU time:       420.35
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  0  1  1  0 42 43  0]
 [ 0  0  1  1  0 44 45  0]
 [ 0  0  1  1  0 46 47  0]
 [ 0  1  1  1  0 48 49  0]
 [ 0  1  1  1  0 50 51  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.87954849e+07 7.21199097e+05 4.69887121e+06 2.54982386e+05
 1.17471780e+06 9.01498871e+04 2.93679342e+05 3.18727894e+04
 7.34202538e+04 1.12687809e+04 1.82873585e+04 3.97308867e+03
 2.28377776e+03 8.34651933e+02 4.66950948e+02 2.53786473e+02
 1.24005790e+02 9.38850618e+01 3.80312864e+01 3.86919650e+01
 4.74231822e+00 8.11910286e+00 3.91322147e-01 1.25001679e+00
 8.59913879e+00 4.29588939e+01 4.90930465e-01 1.19883489e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319808593742316
cond(S) = 56.401578438221115
E1 = -688.8499458142609  E_coul = 184.92306872355644
init E= -503.926877090704
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.680767908818967  LUMO = 86.9812686325566
  mo_energy =
[-1.21649606e+02 -1.32806692e+01 -7.62101728e+00 -7.62101728e+00
 -7.62101728e+00 -1.65068243e+00 -6.80767909e-01 -6.80767909e-01
 -6.80767909e-01  8.69812686e+01  6.93443465e+02  4.02895946e+03
  2.97503529e+04  1.54745677e+05  6.64845610e+05  2.71957441e+06
  1.10459153e+07  4.65100411e+07]
E1 = -706.595673972421  E_coul = 198.95584949154346
cycle= 1 E= -507.639824480878  delta_E= -3.71  |g|= 0.316  |ddm|= 0.301
    CPU time for cycle= 1      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.41969
diis-c [-0.17613965  1.        ]
  HOMO = -0.236005060612756  LUMO = 88.3167307503893
  mo_energy =
[-1.20261578e+02 -1.22523574e+01 -6.65231903e+00 -6.65231903e+00
 -6.65231903e+00 -1.16328368e+00 -2.36005061e-01 -2.36005061e-01
 -2.36005061e-01  8.83167308e+01  6.94813811e+02  4.03021020e+03
  2.97514432e+04  1.54746696e+05  6.64846600e+05  2.71957538e+06
  1.10459163e+07  4.65100421e+07]
E1 = -706.5652299756413  E_coul = 198.92499174159767
cycle= 2 E= -507.640238234044  delta_E= -0.000414  |g|= 0.00466  |ddm|= 0.0138
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.0049594
diis-c [-2.45366490e-05 -5.79020201e-04  1.00057902e+00]
  HOMO = -0.236173676127919  LUMO = 88.3132766273918
  mo_energy =
[-1.20269981e+02 -1.22535028e+01 -6.65409372e+00 -6.65409372e+00
 -6.65409372e+00 -1.16334599e+00 -2.36173676e-01 -2.36173676e-01
 -2.36173676e-01  8.83132766e+01  6.94803425e+02  4.03019463e+03
  2.97514244e+04  1.54746677e+05  6.64846580e+05  2.71957536e+06
  1.10459163e+07  4.65100421e+07]
E1 = -706.5648095936955  E_coul = 198.92457125552798
cycle= 3 E= -507.640238338167  delta_E= -1.04e-07  |g|= 9.17e-05  |ddm|= 0.000193
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.000122949
diis-c [-3.71142980e-10  3.35314719e-05 -2.51110647e-02  1.02507753e+00]
  HOMO = -0.236175764816493  LUMO = 88.3132338966331
  mo_energy =
[-1.20270089e+02 -1.22535177e+01 -6.65411924e+00 -6.65411924e+00
 -6.65411924e+00 -1.16334661e+00 -2.36175765e-01 -2.36175765e-01
 -2.36175765e-01  8.83132339e+01  6.94803313e+02  4.03019449e+03
  2.97514242e+04  1.54746676e+05  6.64846580e+05  2.71957536e+06
  1.10459163e+07  4.65100421e+07]
E1 = -706.5648028088181  E_coul = 198.92456447061414
cycle= 4 E= -507.640238338204  delta_E= -3.64e-11  |g|= 3.55e-07  |ddm|= 3.24e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.5648028088181  E_coul = 198.92456447061414
  HOMO = -0.236175749640845  LUMO = 88.3132342204094
  mo_energy =
[-1.20270088e+02 -1.22535176e+01 -6.65411909e+00 -6.65411909e+00
 -6.65411909e+00 -1.16334660e+00 -2.36175750e-01 -2.36175750e-01
 -2.36175750e-01  8.83132342e+01  6.94803315e+02  4.03019449e+03
  2.97514242e+04  1.54746676e+05  6.64846580e+05  2.71957536e+06
  1.10459163e+07  4.65100421e+07]
E1 = -706.5648028431738  E_coul = 198.9245645049694
Extra cycle  E= -507.640238338204  delta_E= -4.55e-13  |g|= 6.07e-09  |ddm|= 1.52e-08
    CPU time for scf_cycle      0.10 sec, wall time      0.11 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 56.401578438221115
E1 = -706.5648028431738  E_coul = 198.9245645049694
init E= -507.640238338204
    CPU time for initialize scf      0.12 sec, wall time      0.12 sec
  HOMO = -0.236175749465559  LUMO = 88.3132342243011
  mo_energy =
[-1.20270088e+02 -1.22535176e+01 -6.65411909e+00 -6.65411909e+00
 -6.65411909e+00 -1.16334660e+00 -2.36175749e-01 -2.36175749e-01
 -2.36175749e-01  8.83132342e+01  6.94803315e+02  4.03019449e+03
  2.97514242e+04  1.54746676e+05  6.64846580e+05  2.71957536e+06
  1.10459163e+07  4.65100421e+07]
E1 = -706.5648028436866  E_coul = 198.92456450548212
cycle= 1 E= -507.640238338204  delta_E= -1.14e-13  |g|= 1.35e-10  |ddm|= 2.33e-10
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -706.5648028436866  E_coul = 198.92456450548212
  HOMO = -0.236175749463109  LUMO = 88.3132342243539
  mo_energy =
[-1.20270088e+02 -1.22535176e+01 -6.65411909e+00 -6.65411909e+00
 -6.65411909e+00 -1.16334660e+00 -2.36175749e-01 -2.36175749e-01
 -2.36175749e-01  8.83132342e+01  6.94803315e+02  4.03019449e+03
  2.97514242e+04  1.54746676e+05  6.64846580e+05  2.71957536e+06
  1.10459163e+07  4.65100421e+07]
E1 = -706.5648028436945  E_coul = 198.9245645054905
Extra cycle  E= -507.640238338204  delta_E= 5.12e-13  |g|= 8.57e-11  |ddm|= 4.11e-12
    CPU time for scf_cycle      0.19 sec, wall time      0.19 sec
exp = [1.87954849e+07 4.69887121e+06 1.17471780e+06 2.93679342e+05
 7.34202538e+04 1.82873585e+04 2.28377776e+03 4.66950948e+02
 1.24005790e+02 3.80312864e+01 4.74231822e+00 3.91322147e-01
 8.59913879e+00 4.90930465e-01]
grad_E = [-1.36863827e-13  1.63234825e-11 -4.92444691e-12  9.57609036e-09
 -3.88160994e-08  5.88053312e-06 -1.44106586e-06 -1.34064311e-05
  1.79711297e-04  2.29048681e-05 -3.33758609e-04  1.49124898e-03
  4.31973097e-04  3.09670704e-03]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="BFGS",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((14, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.6988712134173084e+06,1.1747178033543271e+06,2.9367945083858178e+05,7.3419865393677101e+04,1.8353927627435987e+04,2.2341424145819028e+03,4.5688904996449571e+02,1.2173317272260677e+02,3.7593061247508530e+01,4.7412722556720146e+00,3.9120358491841306e-01,8.5986297237246045e+00,4.9084868336327880e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "12s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:20:59 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  18795484.8537        1
[INPUT] 0    0    [1    /1   ]  4698871.21318        1
[INPUT] 0    0    [1    /1   ]  1174717.80334        1
[INPUT] 0    0    [1    /1   ]  293679.311756        1
[INPUT] 0    0    [1    /1   ]  73420.3747359        1
[INPUT] 0    0    [1    /1   ]  18269.1520582        1
[INPUT] 0    0    [1    /1   ]  2278.49322939        1
[INPUT] 0    0    [1    /1   ]  466.768504066        1
[INPUT] 0    0    [1    /1   ]  124.137434044        1
[INPUT] 0    0    [1    /1   ]  38.0699662968        1
[INPUT] 0    0    [1    /1   ]  4.74218717087        1
[INPUT] 0    0    [1    /1   ]  0.391349376104       1
[INPUT] 1    0    [1    /1   ]  8.59932047628        1
[INPUT] 1    0    [1    /1   ]  0.490958850957       1

nuclear repulsion = 0
number of shells = 14
number of NR pGTOs = 18
number of NR cGTOs = 18
basis = {'Ar': [[0, [18795484.85367099, 1.0]], [0, [4698871.213179857, 1.0]], [0, [1174717.803338607, 1.0]], [0, [293679.3117559044, 1.0]], [0, [73420.37473594859, 1.0]], [0, [18269.152058175157, 1.0]], [0, [2278.493229389941, 1.0]], [0, [466.76850406602614, 1.0]], [0, [124.13743404380942, 1.0]], [0, [38.06996629677165, 1.0]], [0, [4.74218717087049, 1.0]], [0, [0.39134937610381604, 1.0]], [1, [8.599320476280868, 1.0]], [1, [0.4909588509565348, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [18795484.85367099]
bas 1, expnt(s) = [4698871.21317986]
bas 2, expnt(s) = [1174717.80333861]
bas 3, expnt(s) = [293679.3117559]
bas 4, expnt(s) = [73420.37473595]
bas 5, expnt(s) = [18269.15205818]
bas 6, expnt(s) = [2278.49322939]
bas 7, expnt(s) = [466.76850407]
bas 8, expnt(s) = [124.13743404]
bas 9, expnt(s) = [38.0699663]
bas 10, expnt(s) = [4.74218717]
bas 11, expnt(s) = [0.39134938]
bas 12, expnt(s) = [8.59932048]
bas 13, expnt(s) = [0.49095885]
CPU time:       424.30
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  0  1  1  0 42 43  0]
 [ 0  0  1  1  0 44 45  0]
 [ 0  0  1  1  0 46 47  0]
 [ 0  1  1  1  0 48 49  0]
 [ 0  1  1  1  0 50 51  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.87954849e+07 7.21199097e+05 4.69887121e+06 2.54982386e+05
 1.17471780e+06 9.01498871e+04 2.93679312e+05 3.18727869e+04
 7.34203747e+04 1.12687948e+04 1.82691521e+04 3.97012168e+03
 2.27849323e+03 8.33203012e+02 4.66768504e+02 2.53712101e+02
 1.24137434e+02 9.39598030e+01 3.80699663e+01 3.87214751e+01
 4.74218717e+00 8.11893459e+00 3.91349376e-01 1.25008202e+00
 8.59932048e+00 4.29600285e+01 4.90958851e-01 1.19892153e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319767812206262
cond(S) = 56.397775106788764
E1 = -688.8506047186742  E_coul = 184.92523000216954
init E= -503.925374716505
    CPU time for initialize scf      0.03 sec, wall time      0.03 sec
  HOMO = -0.68072389787206  LUMO = 87.1162902625706
  mo_energy =
[-1.21649294e+02 -1.32805494e+01 -7.62086851e+00 -7.62086851e+00
 -7.62086851e+00 -1.65065581e+00 -6.80723898e-01 -6.80723898e-01
 -6.80723898e-01  8.71162903e+01  6.93774565e+02  4.02320972e+03
  2.97146626e+04  1.54675353e+05  6.64766789e+05  2.71950006e+06
  1.10458477e+07  4.65099804e+07]
E1 = -706.5986142264684  E_coul = 198.9587246881003
cycle= 1 E= -507.639889538368  delta_E= -3.71  |g|= 0.316  |ddm|= 0.301
    CPU time for cycle= 1      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.41977
diis-c [-0.17620688  1.        ]
  HOMO = -0.235925637467943  LUMO = 88.4519613513962
  mo_energy =
[-1.20261210e+02 -1.22521906e+01 -6.65212884e+00 -6.65212884e+00
 -6.65212884e+00 -1.16322210e+00 -2.35925637e-01 -2.35925637e-01
 -2.35925637e-01  8.84519614e+01  6.95145031e+02  4.02446087e+03
  2.97157533e+04  1.54676373e+05  6.64767779e+05  2.71950103e+06
  1.10458487e+07  4.65099814e+07]
E1 = -706.5682365341736  E_coul = 198.92793416499603
cycle= 2 E= -507.640302369178  delta_E= -0.000413  |g|= 0.00465  |ddm|= 0.0138
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.0049547
diis-c [-2.44886096e-05 -5.86262489e-04  1.00058626e+00]
  HOMO = -0.236093832788773  LUMO = 88.4485118808515
  mo_energy =
[-1.20269597e+02 -1.22533330e+01 -6.65389916e+00 -6.65389916e+00
 -6.65389916e+00 -1.16328425e+00 -2.36093833e-01 -2.36093833e-01
 -2.36093833e-01  8.84485119e+01  6.95134664e+02  4.02444532e+03
  2.97157345e+04  1.54676353e+05  6.64767759e+05  2.71950101e+06
  1.10458487e+07  4.65099813e+07]
E1 = -706.5678174541647  E_coul = 198.92751498125511
cycle= 3 E= -507.64030247291  delta_E= -1.04e-07  |g|= 9.15e-05  |ddm|= 0.000192
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.000122698
diis-c [-3.69721562e-10  3.35304160e-05 -2.50845473e-02  1.02505102e+00]
  HOMO = -0.236095913207657  LUMO = 88.448469285516
  mo_energy =
[-1.20269704e+02 -1.22533479e+01 -6.65392459e+00 -6.65392459e+00
 -6.65392459e+00 -1.16328487e+00 -2.36095913e-01 -2.36095913e-01
 -2.36095913e-01  8.84484693e+01  6.95134553e+02  4.02444519e+03
  2.97157343e+04  1.54676353e+05  6.64767759e+05  2.71950101e+06
  1.10458487e+07  4.65099813e+07]
E1 = -706.5678107000563  E_coul = 198.92750822711008
cycle= 4 E= -507.640302472946  delta_E= -3.66e-11  |g|= 3.54e-07  |ddm|= 3.23e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.5678107000563  E_coul = 198.92750822711008
  HOMO = -0.236095898102235  LUMO = 88.4484696083591
  mo_energy =
[-1.20269703e+02 -1.22533478e+01 -6.65392444e+00 -6.65392444e+00
 -6.65392444e+00 -1.16328486e+00 -2.36095898e-01 -2.36095898e-01
 -2.36095898e-01  8.84484696e+01  6.95134554e+02  4.02444519e+03
  2.97157343e+04  1.54676353e+05  6.64767759e+05  2.71950101e+06
  1.10458487e+07  4.65099813e+07]
E1 = -706.5678107342461  E_coul = 198.92750826130037
Extra cycle  E= -507.640302472946  delta_E= 4.55e-13  |g|= 6.05e-09  |ddm|= 1.51e-08
    CPU time for scf_cycle      0.10 sec, wall time      0.11 sec
exp = [1.87954849e+07 4.69887121e+06 1.17471780e+06 2.93679312e+05
 7.34203747e+04 1.82691521e+04 2.27849323e+03 4.66768504e+02
 1.24137434e+02 3.80699663e+01 4.74218717e+00 3.91349376e-01
 8.59932048e+00 4.90958851e-01]
E = -507.64030247294573
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="BFGS",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((14, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.6988712134173084e+06,1.1747178033543271e+06,2.9367945083858178e+05,7.3419865393677101e+04,1.8353927627435987e+04,2.2341424145819028e+03,4.5688904996449571e+02,1.2173317272260677e+02,3.7593061247508530e+01,4.7412722556720146e+00,3.9120358491841306e-01,8.5986297237246045e+00,4.9084868336327880e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "12s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:21:00 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  18795484.8537        1
[INPUT] 0    0    [1    /1   ]  4698871.21318        1
[INPUT] 0    0    [1    /1   ]  1174717.80334        1
[INPUT] 0    0    [1    /1   ]  293679.311756        1
[INPUT] 0    0    [1    /1   ]  73420.3747359        1
[INPUT] 0    0    [1    /1   ]  18269.1520582        1
[INPUT] 0    0    [1    /1   ]  2278.49322939        1
[INPUT] 0    0    [1    /1   ]  466.768504066        1
[INPUT] 0    0    [1    /1   ]  124.137434044        1
[INPUT] 0    0    [1    /1   ]  38.0699662968        1
[INPUT] 0    0    [1    /1   ]  4.74218717087        1
[INPUT] 0    0    [1    /1   ]  0.391349376104       1
[INPUT] 1    0    [1    /1   ]  8.59932047628        1
[INPUT] 1    0    [1    /1   ]  0.490958850957       1

nuclear repulsion = 0
number of shells = 14
number of NR pGTOs = 18
number of NR cGTOs = 18
basis = {'Ar': [[0, [18795484.85367099, 1.0]], [0, [4698871.213179857, 1.0]], [0, [1174717.803338607, 1.0]], [0, [293679.3117559044, 1.0]], [0, [73420.37473594859, 1.0]], [0, [18269.152058175157, 1.0]], [0, [2278.493229389941, 1.0]], [0, [466.76850406602614, 1.0]], [0, [124.13743404380942, 1.0]], [0, [38.06996629677165, 1.0]], [0, [4.74218717087049, 1.0]], [0, [0.39134937610381604, 1.0]], [1, [8.599320476280868, 1.0]], [1, [0.4909588509565348, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [18795484.85367099]
bas 1, expnt(s) = [4698871.21317986]
bas 2, expnt(s) = [1174717.80333861]
bas 3, expnt(s) = [293679.3117559]
bas 4, expnt(s) = [73420.37473595]
bas 5, expnt(s) = [18269.15205818]
bas 6, expnt(s) = [2278.49322939]
bas 7, expnt(s) = [466.76850407]
bas 8, expnt(s) = [124.13743404]
bas 9, expnt(s) = [38.0699663]
bas 10, expnt(s) = [4.74218717]
bas 11, expnt(s) = [0.39134938]
bas 12, expnt(s) = [8.59932048]
bas 13, expnt(s) = [0.49095885]
CPU time:       425.49
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  0  1  1  0 42 43  0]
 [ 0  0  1  1  0 44 45  0]
 [ 0  0  1  1  0 46 47  0]
 [ 0  1  1  1  0 48 49  0]
 [ 0  1  1  1  0 50 51  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.87954849e+07 7.21199097e+05 4.69887121e+06 2.54982386e+05
 1.17471780e+06 9.01498871e+04 2.93679312e+05 3.18727869e+04
 7.34203747e+04 1.12687948e+04 1.82691521e+04 3.97012168e+03
 2.27849323e+03 8.33203012e+02 4.66768504e+02 2.53712101e+02
 1.24137434e+02 9.39598030e+01 3.80699663e+01 3.87214751e+01
 4.74218717e+00 8.11893459e+00 3.91349376e-01 1.25008202e+00
 8.59932048e+00 4.29600285e+01 4.90958851e-01 1.19892153e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319767812206262
cond(S) = 56.397775106788764
E1 = -688.8506047186742  E_coul = 184.92523000216954
init E= -503.925374716505
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.68072389787206  LUMO = 87.1162902625706
  mo_energy =
[-1.21649294e+02 -1.32805494e+01 -7.62086851e+00 -7.62086851e+00
 -7.62086851e+00 -1.65065581e+00 -6.80723898e-01 -6.80723898e-01
 -6.80723898e-01  8.71162903e+01  6.93774565e+02  4.02320972e+03
  2.97146626e+04  1.54675353e+05  6.64766789e+05  2.71950006e+06
  1.10458477e+07  4.65099804e+07]
E1 = -706.5986142264684  E_coul = 198.9587246881003
cycle= 1 E= -507.639889538368  delta_E= -3.71  |g|= 0.316  |ddm|= 0.301
    CPU time for cycle= 1      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.41977
diis-c [-0.17620688  1.        ]
  HOMO = -0.235925637467943  LUMO = 88.4519613513962
  mo_energy =
[-1.20261210e+02 -1.22521906e+01 -6.65212884e+00 -6.65212884e+00
 -6.65212884e+00 -1.16322210e+00 -2.35925637e-01 -2.35925637e-01
 -2.35925637e-01  8.84519614e+01  6.95145031e+02  4.02446087e+03
  2.97157533e+04  1.54676373e+05  6.64767779e+05  2.71950103e+06
  1.10458487e+07  4.65099814e+07]
E1 = -706.5682365341736  E_coul = 198.92793416499603
cycle= 2 E= -507.640302369178  delta_E= -0.000413  |g|= 0.00465  |ddm|= 0.0138
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.0049547
diis-c [-2.44886096e-05 -5.86262489e-04  1.00058626e+00]
  HOMO = -0.236093832788773  LUMO = 88.4485118808515
  mo_energy =
[-1.20269597e+02 -1.22533330e+01 -6.65389916e+00 -6.65389916e+00
 -6.65389916e+00 -1.16328425e+00 -2.36093833e-01 -2.36093833e-01
 -2.36093833e-01  8.84485119e+01  6.95134664e+02  4.02444532e+03
  2.97157345e+04  1.54676353e+05  6.64767759e+05  2.71950101e+06
  1.10458487e+07  4.65099813e+07]
E1 = -706.5678174541647  E_coul = 198.92751498125511
cycle= 3 E= -507.64030247291  delta_E= -1.04e-07  |g|= 9.15e-05  |ddm|= 0.000192
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.000122698
diis-c [-3.69721562e-10  3.35304160e-05 -2.50845473e-02  1.02505102e+00]
  HOMO = -0.236095913207657  LUMO = 88.448469285516
  mo_energy =
[-1.20269704e+02 -1.22533479e+01 -6.65392459e+00 -6.65392459e+00
 -6.65392459e+00 -1.16328487e+00 -2.36095913e-01 -2.36095913e-01
 -2.36095913e-01  8.84484693e+01  6.95134553e+02  4.02444519e+03
  2.97157343e+04  1.54676353e+05  6.64767759e+05  2.71950101e+06
  1.10458487e+07  4.65099813e+07]
E1 = -706.5678107000563  E_coul = 198.92750822711008
cycle= 4 E= -507.640302472946  delta_E= -3.66e-11  |g|= 3.54e-07  |ddm|= 3.23e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.5678107000563  E_coul = 198.92750822711008
  HOMO = -0.236095898102235  LUMO = 88.4484696083591
  mo_energy =
[-1.20269703e+02 -1.22533478e+01 -6.65392444e+00 -6.65392444e+00
 -6.65392444e+00 -1.16328486e+00 -2.36095898e-01 -2.36095898e-01
 -2.36095898e-01  8.84484696e+01  6.95134554e+02  4.02444519e+03
  2.97157343e+04  1.54676353e+05  6.64767759e+05  2.71950101e+06
  1.10458487e+07  4.65099813e+07]
E1 = -706.5678107342461  E_coul = 198.92750826130037
Extra cycle  E= -507.640302472946  delta_E= 4.55e-13  |g|= 6.05e-09  |ddm|= 1.51e-08
    CPU time for scf_cycle      0.10 sec, wall time      0.11 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 56.397775106788764
E1 = -706.5678107342461  E_coul = 198.92750826130037
init E= -507.640302472946
    CPU time for initialize scf      0.12 sec, wall time      0.12 sec
  HOMO = -0.236095897927893  LUMO = 88.4484696122345
  mo_energy =
[-1.20269703e+02 -1.22533478e+01 -6.65392444e+00 -6.65392444e+00
 -6.65392444e+00 -1.16328486e+00 -2.36095898e-01 -2.36095898e-01
 -2.36095898e-01  8.84484696e+01  6.95134554e+02  4.02444519e+03
  2.97157343e+04  1.54676353e+05  6.64767759e+05  2.71950101e+06
  1.10458487e+07  4.65099813e+07]
E1 = -706.5678107347563  E_coul = 198.92750826180998
cycle= 1 E= -507.640302472946  delta_E= -6.25e-13  |g|= 1.5e-10  |ddm|= 2.31e-10
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -706.5678107347563  E_coul = 198.92750826180998
  HOMO = -0.236095897925462  LUMO = 88.4484696122891
  mo_energy =
[-1.20269703e+02 -1.22533478e+01 -6.65392444e+00 -6.65392444e+00
 -6.65392444e+00 -1.16328486e+00 -2.36095898e-01 -2.36095898e-01
 -2.36095898e-01  8.84484696e+01  6.95134554e+02  4.02444519e+03
  2.97157343e+04  1.54676353e+05  6.64767759e+05  2.71950101e+06
  1.10458487e+07  4.65099813e+07]
E1 = -706.5678107347651  E_coul = 198.92750826181876
Extra cycle  E= -507.640302472946  delta_E=    0  |g|= 1.74e-10  |ddm|= 4.07e-12
    CPU time for scf_cycle      0.19 sec, wall time      0.19 sec
exp = [1.87954849e+07 4.69887121e+06 1.17471780e+06 2.93679312e+05
 7.34203747e+04 1.82691521e+04 2.27849323e+03 4.66768504e+02
 1.24137434e+02 3.80699663e+01 4.74218717e+00 3.91349376e-01
 8.59932048e+00 4.90958851e-01]
grad_E = [-1.35374047e-13  1.64264803e-11 -4.13971229e-12  9.63623232e-09
 -3.87201453e-08  5.94581977e-06 -3.13077328e-06 -1.77607456e-05
  2.34961003e-04  2.97484582e-05 -4.36531581e-04  1.94974990e-03
  5.64725271e-04  4.04859437e-03]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="BFGS",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((14, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.6988712134173084e+06,1.1747178033543271e+06,2.9367945083858178e+05,7.3419865393677101e+04,1.8353927627435987e+04,2.2341424145819028e+03,4.5688904996449571e+02,1.2173317272260677e+02,3.7593061247508530e+01,4.7412722556720146e+00,3.9120358491841306e-01,8.5986297237246045e+00,4.9084868336327880e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "12s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:21:04 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  18795484.8537        1
[INPUT] 0    0    [1    /1   ]  4698871.21309        1
[INPUT] 0    0    [1    /1   ]  1174717.80337        1
[INPUT] 0    0    [1    /1   ]  293679.256597        1
[INPUT] 0    0    [1    /1   ]  73420.5963874        1
[INPUT] 0    0    [1    /1   ]  18235.5244551        1
[INPUT] 0    0    [1    /1   ]  2271.02866004        1
[INPUT] 0    0    [1    /1   ]  466.478927768        1
[INPUT] 0    0    [1    /1   ]  124.307417746        1
[INPUT] 0    0    [1    /1   ]  38.1206768331        1
[INPUT] 0    0    [1    /1   ]  4.74200700796        1
[INPUT] 0    0    [1    /1   ]  0.391385680183       1
[INPUT] 1    0    [1    /1   ]  8.59956268801        1
[INPUT] 1    0    [1    /1   ]  0.490996721711       1

nuclear repulsion = 0
number of shells = 14
number of NR pGTOs = 18
number of NR cGTOs = 18
basis = {'Ar': [[0, [18795484.853671774, 1.0]], [0, [4698871.213085806, 1.0]], [0, [1174717.8033657402, 1.0]], [0, [293679.25659731496, 1.0]], [0, [73420.59638744239, 1.0]], [0, [18235.524455086867, 1.0]], [0, [2271.0286600435884, 1.0]], [0, [466.4789277678592, 1.0]], [0, [124.30741774557515, 1.0]], [0, [38.12067683306954, 1.0]], [0, [4.742007007959743, 1.0]], [0, [0.39138568018307934, 1.0]], [1, [8.599562688006683, 1.0]], [1, [0.49099672171093534, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [18795484.85367177]
bas 1, expnt(s) = [4698871.21308581]
bas 2, expnt(s) = [1174717.80336574]
bas 3, expnt(s) = [293679.25659731]
bas 4, expnt(s) = [73420.59638744]
bas 5, expnt(s) = [18235.52445509]
bas 6, expnt(s) = [2271.02866004]
bas 7, expnt(s) = [466.47892777]
bas 8, expnt(s) = [124.30741775]
bas 9, expnt(s) = [38.12067683]
bas 10, expnt(s) = [4.74200701]
bas 11, expnt(s) = [0.39138568]
bas 12, expnt(s) = [8.59956269]
bas 13, expnt(s) = [0.49099672]
CPU time:       429.46
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  0  1  1  0 42 43  0]
 [ 0  0  1  1  0 44 45  0]
 [ 0  0  1  1  0 46 47  0]
 [ 0  1  1  1  0 48 49  0]
 [ 0  1  1  1  0 50 51  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.87954849e+07 7.21199097e+05 4.69887121e+06 2.54982386e+05
 1.17471780e+06 9.01498871e+04 2.93679257e+05 3.18727824e+04
 7.34205964e+04 1.12688203e+04 1.82355245e+04 3.96463963e+03
 2.27102866e+03 8.31154930e+02 4.66478928e+02 2.53594043e+02
 1.24307418e+02 9.40562821e+01 3.81206768e+01 3.87601524e+01
 4.74200701e+00 8.11870325e+00 3.91385680e-01 1.25016899e+00
 8.59956269e+00 4.29615410e+01 4.90996722e-01 1.19903713e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.31971350352988
cond(S) = 56.38460943261892
E1 = -688.8516383380589  E_coul = 184.92810961662727
init E= -503.923528721432
    CPU time for initialize scf      0.03 sec, wall time      0.03 sec
  HOMO = -0.68066515298101  LUMO = 87.2918658038405
  mo_energy =
[-1.21648891e+02 -1.32803918e+01 -7.62067044e+00 -7.62067044e+00
 -7.62067044e+00 -1.65062033e+00 -6.80665153e-01 -6.80665153e-01
 -6.80665153e-01  8.72918658e+01  6.94155880e+02  4.01489477e+03
  2.96559171e+04  1.54552894e+05  6.64628080e+05  2.71936896e+06
  1.10457285e+07  4.65098733e+07]
E1 = -706.6025672728888  E_coul = 198.96256128724556
cycle= 1 E= -507.640005985643  delta_E= -3.72  |g|= 0.315  |ddm|= 0.301
    CPU time for cycle= 1      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.419878
diis-c [-0.17629773  1.        ]
  HOMO = -0.235819721125209  LUMO = 88.6278105468903
  mo_energy =
[-1.20260730e+02 -1.22519703e+01 -6.65187536e+00 -6.65187536e+00
 -6.65187536e+00 -1.16314012e+00 -2.35819721e-01 -2.35819721e-01
 -2.35819721e-01  8.86278105e+01  6.95526511e+02  4.01614648e+03
  2.96570083e+04  1.54553914e+05  6.64629070e+05  2.71936993e+06
  1.10457295e+07  4.65098742e+07]
E1 = -706.572275439096  E_coul = 198.93185781572976
cycle= 2 E= -507.640417623366  delta_E= -0.000412  |g|= 0.00464  |ddm|= 0.0137
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00494871
diis-c [-2.44272619e-05 -5.95646202e-04  1.00059565e+00]
  HOMO = -0.23598737369823  LUMO = 88.6243671318774
  mo_energy =
[-1.20269096e+02 -1.22531090e+01 -6.65364002e+00 -6.65364002e+00
 -6.65364002e+00 -1.16320207e+00 -2.35987374e-01 -2.35987374e-01
 -2.35987374e-01  8.86243671e+01  6.95516170e+02  4.01613098e+03
  2.96569895e+04  1.54553895e+05  6.64629050e+05  2.71936992e+06
  1.10457294e+07  4.65098742e+07]
E1 = -706.5718580420001  E_coul = 198.9314403154087
cycle= 3 E= -507.640417726591  delta_E= -1.03e-07  |g|= 9.12e-05  |ddm|= 0.000191
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.000122377
diis-c [-3.67897646e-10  3.35294420e-05 -2.50501760e-02  1.02501665e+00]
  HOMO = -0.235989443445751  LUMO = 88.6243247117239
  mo_energy =
[-1.20269203e+02 -1.22531238e+01 -6.65366532e+00 -6.65366532e+00
 -6.65366532e+00 -1.16320268e+00 -2.35989443e-01 -2.35989443e-01
 -2.35989443e-01  8.86243247e+01  6.95516059e+02  4.01613084e+03
  2.96569894e+04  1.54553895e+05  6.64629050e+05  2.71936991e+06
  1.10457294e+07  4.65098742e+07]
E1 = -706.5718513276197  E_coul = 198.9314336009919
cycle= 4 E= -507.640417726628  delta_E= -3.64e-11  |g|= 3.53e-07  |ddm|= 3.21e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.5718513276197  E_coul = 198.9314336009919
  HOMO = -0.235989428430878  LUMO = 88.6243250333579
  mo_energy =
[-1.20269202e+02 -1.22531237e+01 -6.65366517e+00 -6.65366517e+00
 -6.65366517e+00 -1.16320267e+00 -2.35989428e-01 -2.35989428e-01
 -2.35989428e-01  8.86243250e+01  6.95516060e+02  4.01613084e+03
  2.96569894e+04  1.54553895e+05  6.64629050e+05  2.71936991e+06
  1.10457294e+07  4.65098742e+07]
E1 = -706.571851361597  E_coul = 198.93143363496927
Extra cycle  E= -507.640417726628  delta_E=    0  |g|= 6.01e-09  |ddm|= 1.5e-08
    CPU time for scf_cycle      0.10 sec, wall time      0.11 sec
exp = [1.87954849e+07 4.69887121e+06 1.17471780e+06 2.93679257e+05
 7.34205964e+04 1.82355245e+04 2.27102866e+03 4.66478928e+02
 1.24307418e+02 3.81206768e+01 4.74200701e+00 3.91385680e-01
 8.59956269e+00 4.90996722e-01]
E = -507.6404177266278
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="BFGS",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((14, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.6988712134173084e+06,1.1747178033543271e+06,2.9367945083858178e+05,7.3419865393677101e+04,1.8353927627435987e+04,2.2341424145819028e+03,4.5688904996449571e+02,1.2173317272260677e+02,3.7593061247508530e+01,4.7412722556720146e+00,3.9120358491841306e-01,8.5986297237246045e+00,4.9084868336327880e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "12s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:21:05 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  18795484.8537        1
[INPUT] 0    0    [1    /1   ]  4698871.21309        1
[INPUT] 0    0    [1    /1   ]  1174717.80337        1
[INPUT] 0    0    [1    /1   ]  293679.256597        1
[INPUT] 0    0    [1    /1   ]  73420.5963874        1
[INPUT] 0    0    [1    /1   ]  18235.5244551        1
[INPUT] 0    0    [1    /1   ]  2271.02866004        1
[INPUT] 0    0    [1    /1   ]  466.478927768        1
[INPUT] 0    0    [1    /1   ]  124.307417746        1
[INPUT] 0    0    [1    /1   ]  38.1206768331        1
[INPUT] 0    0    [1    /1   ]  4.74200700796        1
[INPUT] 0    0    [1    /1   ]  0.391385680183       1
[INPUT] 1    0    [1    /1   ]  8.59956268801        1
[INPUT] 1    0    [1    /1   ]  0.490996721711       1

nuclear repulsion = 0
number of shells = 14
number of NR pGTOs = 18
number of NR cGTOs = 18
basis = {'Ar': [[0, [18795484.853671774, 1.0]], [0, [4698871.213085806, 1.0]], [0, [1174717.8033657402, 1.0]], [0, [293679.25659731496, 1.0]], [0, [73420.59638744239, 1.0]], [0, [18235.524455086867, 1.0]], [0, [2271.0286600435884, 1.0]], [0, [466.4789277678592, 1.0]], [0, [124.30741774557515, 1.0]], [0, [38.12067683306954, 1.0]], [0, [4.742007007959743, 1.0]], [0, [0.39138568018307934, 1.0]], [1, [8.599562688006683, 1.0]], [1, [0.49099672171093534, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [18795484.85367177]
bas 1, expnt(s) = [4698871.21308581]
bas 2, expnt(s) = [1174717.80336574]
bas 3, expnt(s) = [293679.25659731]
bas 4, expnt(s) = [73420.59638744]
bas 5, expnt(s) = [18235.52445509]
bas 6, expnt(s) = [2271.02866004]
bas 7, expnt(s) = [466.47892777]
bas 8, expnt(s) = [124.30741775]
bas 9, expnt(s) = [38.12067683]
bas 10, expnt(s) = [4.74200701]
bas 11, expnt(s) = [0.39138568]
bas 12, expnt(s) = [8.59956269]
bas 13, expnt(s) = [0.49099672]
CPU time:       430.65
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  0  1  1  0 42 43  0]
 [ 0  0  1  1  0 44 45  0]
 [ 0  0  1  1  0 46 47  0]
 [ 0  1  1  1  0 48 49  0]
 [ 0  1  1  1  0 50 51  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.87954849e+07 7.21199097e+05 4.69887121e+06 2.54982386e+05
 1.17471780e+06 9.01498871e+04 2.93679257e+05 3.18727824e+04
 7.34205964e+04 1.12688203e+04 1.82355245e+04 3.96463963e+03
 2.27102866e+03 8.31154930e+02 4.66478928e+02 2.53594043e+02
 1.24307418e+02 9.40562821e+01 3.81206768e+01 3.87601524e+01
 4.74200701e+00 8.11870325e+00 3.91385680e-01 1.25016899e+00
 8.59956269e+00 4.29615410e+01 4.90996722e-01 1.19903713e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.31971350352988
cond(S) = 56.38460943261892
E1 = -688.8516383380589  E_coul = 184.92810961662727
init E= -503.923528721432
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.68066515298101  LUMO = 87.2918658038405
  mo_energy =
[-1.21648891e+02 -1.32803918e+01 -7.62067044e+00 -7.62067044e+00
 -7.62067044e+00 -1.65062033e+00 -6.80665153e-01 -6.80665153e-01
 -6.80665153e-01  8.72918658e+01  6.94155880e+02  4.01489477e+03
  2.96559171e+04  1.54552894e+05  6.64628080e+05  2.71936896e+06
  1.10457285e+07  4.65098733e+07]
E1 = -706.6025672728888  E_coul = 198.96256128724556
cycle= 1 E= -507.640005985643  delta_E= -3.72  |g|= 0.315  |ddm|= 0.301
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.419878
diis-c [-0.17629773  1.        ]
  HOMO = -0.235819721125209  LUMO = 88.6278105468903
  mo_energy =
[-1.20260730e+02 -1.22519703e+01 -6.65187536e+00 -6.65187536e+00
 -6.65187536e+00 -1.16314012e+00 -2.35819721e-01 -2.35819721e-01
 -2.35819721e-01  8.86278105e+01  6.95526511e+02  4.01614648e+03
  2.96570083e+04  1.54553914e+05  6.64629070e+05  2.71936993e+06
  1.10457295e+07  4.65098742e+07]
E1 = -706.572275439096  E_coul = 198.93185781572976
cycle= 2 E= -507.640417623366  delta_E= -0.000412  |g|= 0.00464  |ddm|= 0.0137
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00494871
diis-c [-2.44272619e-05 -5.95646202e-04  1.00059565e+00]
  HOMO = -0.23598737369823  LUMO = 88.6243671318774
  mo_energy =
[-1.20269096e+02 -1.22531090e+01 -6.65364002e+00 -6.65364002e+00
 -6.65364002e+00 -1.16320207e+00 -2.35987374e-01 -2.35987374e-01
 -2.35987374e-01  8.86243671e+01  6.95516170e+02  4.01613098e+03
  2.96569895e+04  1.54553895e+05  6.64629050e+05  2.71936992e+06
  1.10457294e+07  4.65098742e+07]
E1 = -706.5718580420001  E_coul = 198.9314403154087
cycle= 3 E= -507.640417726591  delta_E= -1.03e-07  |g|= 9.12e-05  |ddm|= 0.000191
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.000122377
diis-c [-3.67897646e-10  3.35294420e-05 -2.50501760e-02  1.02501665e+00]
  HOMO = -0.235989443445751  LUMO = 88.6243247117239
  mo_energy =
[-1.20269203e+02 -1.22531238e+01 -6.65366532e+00 -6.65366532e+00
 -6.65366532e+00 -1.16320268e+00 -2.35989443e-01 -2.35989443e-01
 -2.35989443e-01  8.86243247e+01  6.95516059e+02  4.01613084e+03
  2.96569894e+04  1.54553895e+05  6.64629050e+05  2.71936991e+06
  1.10457294e+07  4.65098742e+07]
E1 = -706.5718513276197  E_coul = 198.9314336009919
cycle= 4 E= -507.640417726628  delta_E= -3.64e-11  |g|= 3.53e-07  |ddm|= 3.21e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.5718513276197  E_coul = 198.9314336009919
  HOMO = -0.235989428430878  LUMO = 88.6243250333579
  mo_energy =
[-1.20269202e+02 -1.22531237e+01 -6.65366517e+00 -6.65366517e+00
 -6.65366517e+00 -1.16320267e+00 -2.35989428e-01 -2.35989428e-01
 -2.35989428e-01  8.86243250e+01  6.95516060e+02  4.01613084e+03
  2.96569894e+04  1.54553895e+05  6.64629050e+05  2.71936991e+06
  1.10457294e+07  4.65098742e+07]
E1 = -706.571851361597  E_coul = 198.93143363496927
Extra cycle  E= -507.640417726628  delta_E=    0  |g|= 6.01e-09  |ddm|= 1.5e-08
    CPU time for scf_cycle      0.10 sec, wall time      0.11 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 56.38460943261892
E1 = -706.571851361597  E_coul = 198.93143363496927
init E= -507.640417726628
    CPU time for initialize scf      0.12 sec, wall time      0.12 sec
  HOMO = -0.235989428257763  LUMO = 88.6243250372112
  mo_energy =
[-1.20269202e+02 -1.22531237e+01 -6.65366517e+00 -6.65366517e+00
 -6.65366517e+00 -1.16320267e+00 -2.35989428e-01 -2.35989428e-01
 -2.35989428e-01  8.86243250e+01  6.95516060e+02  4.01613084e+03
  2.96569894e+04  1.54553895e+05  6.64629050e+05  2.71936991e+06
  1.10457294e+07  4.65098742e+07]
E1 = -706.5718513621025  E_coul = 198.93143363547523
cycle= 1 E= -507.640417726627  delta_E= 5.12e-13  |g|= 2.22e-10  |ddm|= 2.3e-10
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -706.5718513621025  E_coul = 198.93143363547523
  HOMO = -0.235989428255353  LUMO = 88.624325037267
  mo_energy =
[-1.20269202e+02 -1.22531237e+01 -6.65366517e+00 -6.65366517e+00
 -6.65366517e+00 -1.16320267e+00 -2.35989428e-01 -2.35989428e-01
 -2.35989428e-01  8.86243250e+01  6.95516060e+02  4.01613084e+03
  2.96569894e+04  1.54553895e+05  6.64629050e+05  2.71936991e+06
  1.10457294e+07  4.65098742e+07]
E1 = -706.5718513621109  E_coul = 198.93143363548367
Extra cycle  E= -507.640417726627  delta_E= 5.68e-14  |g|= 7.56e-11  |ddm|= 3.98e-12
    CPU time for scf_cycle      0.19 sec, wall time      0.20 sec
exp = [1.87954849e+07 4.69887121e+06 1.17471780e+06 2.93679257e+05
 7.34205964e+04 1.82355245e+04 2.27102866e+03 4.66478928e+02
 1.24307418e+02 3.81206768e+01 4.74200701e+00 3.91385680e-01
 8.59956269e+00 4.90996722e-01]
grad_E = [-1.33789812e-13  1.65354155e-11 -3.30991332e-12  9.70080581e-09
 -3.87208279e-08  6.03574884e-06 -5.38452760e-06 -2.35446097e-05
  3.08536514e-04  3.89340004e-05 -5.73614652e-04  2.56114349e-03
  7.41740394e-04  5.31788114e-03]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="BFGS",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((14, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.6988712134173084e+06,1.1747178033543271e+06,2.9367945083858178e+05,7.3419865393677101e+04,1.8353927627435987e+04,2.2341424145819028e+03,4.5688904996449571e+02,1.2173317272260677e+02,3.7593061247508530e+01,4.7412722556720146e+00,3.9120358491841306e-01,8.5986297237246045e+00,4.9084868336327880e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "12s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:21:09 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  18795484.8537        1
[INPUT] 0    0    [1    /1   ]  4698871.21291        1
[INPUT] 0    0    [1    /1   ]  1174717.80341        1
[INPUT] 0    0    [1    /1   ]  293679.154833        1
[INPUT] 0    0    [1    /1   ]  73421.0030917        1
[INPUT] 0    0    [1    /1   ]  18173.4843722        1
[INPUT] 0    0    [1    /1   ]  2260.15730302        1
[INPUT] 0    0    [1    /1   ]  466.006614139        1
[INPUT] 0    0    [1    /1   ]  124.529697126        1
[INPUT] 0    0    [1    /1   ]  38.1883060375        1
[INPUT] 0    0    [1    /1   ]  4.74175291151        1
[INPUT] 0    0    [1    /1   ]  0.391435078842       1
[INPUT] 1    0    [1    /1   ]  8.59989204743        1
[INPUT] 1    0    [1    /1   ]  0.491048272932       1

nuclear repulsion = 0
number of shells = 14
number of NR pGTOs = 18
number of NR cGTOs = 18
basis = {'Ar': [[0, [18795484.853673212, 1.0]], [0, [4698871.212912276, 1.0]], [0, [1174717.8034120153, 1.0]], [0, [293679.1548333709, 1.0]], [0, [73421.00309174256, 1.0]], [0, [18173.484372223513, 1.0]], [0, [2260.1573030199793, 1.0]], [0, [466.00661413868403, 1.0]], [0, [124.52969712555807, 1.0]], [0, [38.18830603754199, 1.0]], [0, [4.741752911511488, 1.0]], [0, [0.3914350788415268, 1.0]], [1, [8.59989204743308, 1.0]], [1, [0.49104827293195047, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [18795484.85367321]
bas 1, expnt(s) = [4698871.21291228]
bas 2, expnt(s) = [1174717.80341202]
bas 3, expnt(s) = [293679.15483337]
bas 4, expnt(s) = [73421.00309174]
bas 5, expnt(s) = [18173.48437222]
bas 6, expnt(s) = [2260.15730302]
bas 7, expnt(s) = [466.00661414]
bas 8, expnt(s) = [124.52969713]
bas 9, expnt(s) = [38.18830604]
bas 10, expnt(s) = [4.74175291]
bas 11, expnt(s) = [0.39143508]
bas 12, expnt(s) = [8.59989205]
bas 13, expnt(s) = [0.49104827]
CPU time:       434.59
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  0  1  1  0 42 43  0]
 [ 0  0  1  1  0 44 45  0]
 [ 0  0  1  1  0 46 47  0]
 [ 0  1  1  1  0 48 49  0]
 [ 0  1  1  1  0 50 51  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.87954849e+07 7.21199097e+05 4.69887121e+06 2.54982386e+05
 1.17471780e+06 9.01498871e+04 2.93679155e+05 3.18727742e+04
 7.34210031e+04 1.12688672e+04 1.81734844e+04 3.95451908e+03
 2.26015730e+03 8.28169103e+02 4.66006614e+02 2.53401444e+02
 1.24529697e+02 9.41823935e+01 3.81883060e+01 3.88117138e+01
 4.74175291e+00 8.11837698e+00 3.91435079e-01 1.25028733e+00
 8.59989205e+00 4.29635978e+01 4.91048273e-01 1.19919450e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.31963972679276
cond(S) = 56.35362740770869
E1 = -688.8533206632189  E_coul = 184.93202333514776
init E= -503.921297328071
    CPU time for initialize scf      0.03 sec, wall time      0.03 sec
  HOMO = -0.680585136695874  LUMO = 87.5235280666831
  mo_energy =
[-1.21648364e+02 -1.32801813e+01 -7.62040144e+00 -7.62040144e+00
 -7.62040144e+00 -1.65057209e+00 -6.80585137e-01 -6.80585137e-01
 -6.80585137e-01  8.75235281e+01  6.94573987e+02  4.00247816e+03
  2.95565743e+04  1.54336300e+05  6.64380880e+05  2.71913500e+06
  1.10455156e+07  4.65096820e+07]
E1 = -706.6080003308587  E_coul = 198.9677862136697
cycle= 1 E= -507.640214117189  delta_E= -3.72  |g|= 0.315  |ddm|= 0.301
    CPU time for cycle= 1      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.420028
diis-c [-0.17642328  1.        ]
  HOMO = -0.235675601342831  LUMO = 88.859837206393
  mo_energy =
[-1.20260094e+02 -1.22516744e+01 -6.65153062e+00 -6.65153062e+00
 -6.65153062e+00 -1.16302885e+00 -2.35675601e-01 -2.35675601e-01
 -2.35675601e-01  8.88598372e+01  6.95944852e+02  4.00373066e+03
  2.95576662e+04  1.54337320e+05  6.64381871e+05  2.71913597e+06
  1.10455166e+07  4.65096830e+07]
E1 = -706.5778211757438  E_coul = 198.93719698445008
cycle= 2 E= -507.640624191294  delta_E= -0.00041  |g|= 0.00464  |ddm|= 0.0137
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00494099
diis-c [-2.43482490e-05 -6.07968104e-04  1.00060797e+00]
  HOMO = -0.235842543955961  LUMO = 88.8564017932909
  mo_energy =
[-1.20268433e+02 -1.22528082e+01 -6.65328787e+00 -6.65328787e+00
 -6.65328787e+00 -1.16309052e+00 -2.35842544e-01 -2.35842544e-01
 -2.35842544e-01  8.88564018e+01  6.95934546e+02  4.00371522e+03
  2.95576475e+04  1.54337301e+05  6.64381851e+05  2.71913595e+06
  1.10455166e+07  4.65096830e+07]
E1 = -706.5774059820519  E_coul = 198.93678168819633
cycle= 3 E= -507.640624293856  delta_E= -1.03e-07  |g|= 9.09e-05  |ddm|= 0.000191
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.000121959
diis-c [-3.65533658e-10  3.35291807e-05 -2.50050381e-02  1.02497151e+00]
  HOMO = -0.235844599762771  LUMO = 88.8563596027248
  mo_energy =
[-1.20268539e+02 -1.22528229e+01 -6.65331300e+00 -6.65331300e+00
 -6.65331300e+00 -1.16309113e+00 -2.35844600e-01 -2.35844600e-01
 -2.35844600e-01  8.88563596e+01  6.95934436e+02  4.00371508e+03
  2.95576474e+04  1.54337301e+05  6.64381851e+05  2.71913595e+06
  1.10455166e+07  4.65096830e+07]
E1 = -706.5773993196068  E_coul = 198.93677502571572
cycle= 4 E= -507.640624293891  delta_E= -3.55e-11  |g|= 3.51e-07  |ddm|= 3.19e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.5773993196068  E_coul = 198.93677502571572
  HOMO = -0.235844584866104  LUMO = 88.8563599227623
  mo_energy =
[-1.20268538e+02 -1.22528228e+01 -6.65331285e+00 -6.65331285e+00
 -6.65331285e+00 -1.16309113e+00 -2.35844585e-01 -2.35844585e-01
 -2.35844585e-01  8.88563599e+01  6.95934437e+02  4.00371508e+03
  2.95576474e+04  1.54337301e+05  6.64381851e+05  2.71913595e+06
  1.10455166e+07  4.65096830e+07]
E1 = -706.5773993533077  E_coul = 198.9367750594165
Extra cycle  E= -507.640624293891  delta_E= -1.14e-13  |g|= 5.97e-09  |ddm|= 1.49e-08
    CPU time for scf_cycle      0.11 sec, wall time      0.11 sec
exp = [1.87954849e+07 4.69887121e+06 1.17471780e+06 2.93679155e+05
 7.34210031e+04 1.81734844e+04 2.26015730e+03 4.66006614e+02
 1.24529697e+02 3.81883060e+01 4.74175291e+00 3.91435079e-01
 8.59989205e+00 4.91048273e-01]
E = -507.64062429389116
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="BFGS",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((14, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.6988712134173084e+06,1.1747178033543271e+06,2.9367945083858178e+05,7.3419865393677101e+04,1.8353927627435987e+04,2.2341424145819028e+03,4.5688904996449571e+02,1.2173317272260677e+02,3.7593061247508530e+01,4.7412722556720146e+00,3.9120358491841306e-01,8.5986297237246045e+00,4.9084868336327880e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "12s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:21:10 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  18795484.8537        1
[INPUT] 0    0    [1    /1   ]  4698871.21291        1
[INPUT] 0    0    [1    /1   ]  1174717.80341        1
[INPUT] 0    0    [1    /1   ]  293679.154833        1
[INPUT] 0    0    [1    /1   ]  73421.0030917        1
[INPUT] 0    0    [1    /1   ]  18173.4843722        1
[INPUT] 0    0    [1    /1   ]  2260.15730302        1
[INPUT] 0    0    [1    /1   ]  466.006614139        1
[INPUT] 0    0    [1    /1   ]  124.529697126        1
[INPUT] 0    0    [1    /1   ]  38.1883060375        1
[INPUT] 0    0    [1    /1   ]  4.74175291151        1
[INPUT] 0    0    [1    /1   ]  0.391435078842       1
[INPUT] 1    0    [1    /1   ]  8.59989204743        1
[INPUT] 1    0    [1    /1   ]  0.491048272932       1

nuclear repulsion = 0
number of shells = 14
number of NR pGTOs = 18
number of NR cGTOs = 18
basis = {'Ar': [[0, [18795484.853673212, 1.0]], [0, [4698871.212912276, 1.0]], [0, [1174717.8034120153, 1.0]], [0, [293679.1548333709, 1.0]], [0, [73421.00309174256, 1.0]], [0, [18173.484372223513, 1.0]], [0, [2260.1573030199793, 1.0]], [0, [466.00661413868403, 1.0]], [0, [124.52969712555807, 1.0]], [0, [38.18830603754199, 1.0]], [0, [4.741752911511488, 1.0]], [0, [0.3914350788415268, 1.0]], [1, [8.59989204743308, 1.0]], [1, [0.49104827293195047, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [18795484.85367321]
bas 1, expnt(s) = [4698871.21291228]
bas 2, expnt(s) = [1174717.80341202]
bas 3, expnt(s) = [293679.15483337]
bas 4, expnt(s) = [73421.00309174]
bas 5, expnt(s) = [18173.48437222]
bas 6, expnt(s) = [2260.15730302]
bas 7, expnt(s) = [466.00661414]
bas 8, expnt(s) = [124.52969713]
bas 9, expnt(s) = [38.18830604]
bas 10, expnt(s) = [4.74175291]
bas 11, expnt(s) = [0.39143508]
bas 12, expnt(s) = [8.59989205]
bas 13, expnt(s) = [0.49104827]
CPU time:       435.80
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  0  1  1  0 42 43  0]
 [ 0  0  1  1  0 44 45  0]
 [ 0  0  1  1  0 46 47  0]
 [ 0  1  1  1  0 48 49  0]
 [ 0  1  1  1  0 50 51  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.87954849e+07 7.21199097e+05 4.69887121e+06 2.54982386e+05
 1.17471780e+06 9.01498871e+04 2.93679155e+05 3.18727742e+04
 7.34210031e+04 1.12688672e+04 1.81734844e+04 3.95451908e+03
 2.26015730e+03 8.28169103e+02 4.66006614e+02 2.53401444e+02
 1.24529697e+02 9.41823935e+01 3.81883060e+01 3.88117138e+01
 4.74175291e+00 8.11837698e+00 3.91435079e-01 1.25028733e+00
 8.59989205e+00 4.29635978e+01 4.91048273e-01 1.19919450e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.31963972679276
cond(S) = 56.35362740770869
E1 = -688.8533206632189  E_coul = 184.93202333514776
init E= -503.921297328071
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.680585136695874  LUMO = 87.5235280666831
  mo_energy =
[-1.21648364e+02 -1.32801813e+01 -7.62040144e+00 -7.62040144e+00
 -7.62040144e+00 -1.65057209e+00 -6.80585137e-01 -6.80585137e-01
 -6.80585137e-01  8.75235281e+01  6.94573987e+02  4.00247816e+03
  2.95565743e+04  1.54336300e+05  6.64380880e+05  2.71913500e+06
  1.10455156e+07  4.65096820e+07]
E1 = -706.6080003308587  E_coul = 198.9677862136697
cycle= 1 E= -507.640214117189  delta_E= -3.72  |g|= 0.315  |ddm|= 0.301
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.420028
diis-c [-0.17642328  1.        ]
  HOMO = -0.235675601342831  LUMO = 88.859837206393
  mo_energy =
[-1.20260094e+02 -1.22516744e+01 -6.65153062e+00 -6.65153062e+00
 -6.65153062e+00 -1.16302885e+00 -2.35675601e-01 -2.35675601e-01
 -2.35675601e-01  8.88598372e+01  6.95944852e+02  4.00373066e+03
  2.95576662e+04  1.54337320e+05  6.64381871e+05  2.71913597e+06
  1.10455166e+07  4.65096830e+07]
E1 = -706.5778211757438  E_coul = 198.93719698445008
cycle= 2 E= -507.640624191294  delta_E= -0.00041  |g|= 0.00464  |ddm|= 0.0137
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00494099
diis-c [-2.43482490e-05 -6.07968104e-04  1.00060797e+00]
  HOMO = -0.235842543955961  LUMO = 88.8564017932909
  mo_energy =
[-1.20268433e+02 -1.22528082e+01 -6.65328787e+00 -6.65328787e+00
 -6.65328787e+00 -1.16309052e+00 -2.35842544e-01 -2.35842544e-01
 -2.35842544e-01  8.88564018e+01  6.95934546e+02  4.00371522e+03
  2.95576475e+04  1.54337301e+05  6.64381851e+05  2.71913595e+06
  1.10455166e+07  4.65096830e+07]
E1 = -706.5774059820519  E_coul = 198.93678168819633
cycle= 3 E= -507.640624293856  delta_E= -1.03e-07  |g|= 9.09e-05  |ddm|= 0.000191
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.000121959
diis-c [-3.65533658e-10  3.35291807e-05 -2.50050381e-02  1.02497151e+00]
  HOMO = -0.235844599762771  LUMO = 88.8563596027248
  mo_energy =
[-1.20268539e+02 -1.22528229e+01 -6.65331300e+00 -6.65331300e+00
 -6.65331300e+00 -1.16309113e+00 -2.35844600e-01 -2.35844600e-01
 -2.35844600e-01  8.88563596e+01  6.95934436e+02  4.00371508e+03
  2.95576474e+04  1.54337301e+05  6.64381851e+05  2.71913595e+06
  1.10455166e+07  4.65096830e+07]
E1 = -706.5773993196068  E_coul = 198.93677502571572
cycle= 4 E= -507.640624293891  delta_E= -3.55e-11  |g|= 3.51e-07  |ddm|= 3.19e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.5773993196068  E_coul = 198.93677502571572
  HOMO = -0.235844584866104  LUMO = 88.8563599227623
  mo_energy =
[-1.20268538e+02 -1.22528228e+01 -6.65331285e+00 -6.65331285e+00
 -6.65331285e+00 -1.16309113e+00 -2.35844585e-01 -2.35844585e-01
 -2.35844585e-01  8.88563599e+01  6.95934437e+02  4.00371508e+03
  2.95576474e+04  1.54337301e+05  6.64381851e+05  2.71913595e+06
  1.10455166e+07  4.65096830e+07]
E1 = -706.5773993533077  E_coul = 198.9367750594165
Extra cycle  E= -507.640624293891  delta_E= -1.14e-13  |g|= 5.97e-09  |ddm|= 1.49e-08
    CPU time for scf_cycle      0.10 sec, wall time      0.11 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 56.35362740770869
E1 = -706.5773993533077  E_coul = 198.9367750594165
init E= -507.640624293891
    CPU time for initialize scf      0.12 sec, wall time      0.12 sec
  HOMO = -0.235844584694575  LUMO = 88.8563599265932
  mo_energy =
[-1.20268538e+02 -1.22528228e+01 -6.65331285e+00 -6.65331285e+00
 -6.65331285e+00 -1.16309113e+00 -2.35844585e-01 -2.35844585e-01
 -2.35844585e-01  8.88563599e+01  6.95934437e+02  4.00371508e+03
  2.95576474e+04  1.54337301e+05  6.64381851e+05  2.71913595e+06
  1.10455166e+07  4.65096830e+07]
E1 = -706.5773993538082  E_coul = 198.93677505991735
cycle= 1 E= -507.640624293891  delta_E= 2.84e-13  |g|= 1.44e-10  |ddm|= 2.28e-10
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -706.5773993538082  E_coul = 198.93677505991735
  HOMO = -0.235844584692188  LUMO = 88.8563599266472
  mo_energy =
[-1.20268538e+02 -1.22528228e+01 -6.65331285e+00 -6.65331285e+00
 -6.65331285e+00 -1.16309113e+00 -2.35844585e-01 -2.35844585e-01
 -2.35844585e-01  8.88563599e+01  6.95934437e+02  4.00371508e+03
  2.95576474e+04  1.54337301e+05  6.64381851e+05  2.71913595e+06
  1.10455166e+07  4.65096830e+07]
E1 = -706.5773993538168  E_coul = 198.93677505992565
Extra cycle  E= -507.640624293891  delta_E= -2.27e-13  |g|= 1.12e-10  |ddm|= 3.97e-12
    CPU time for scf_cycle      0.19 sec, wall time      0.19 sec
exp = [1.87954849e+07 4.69887121e+06 1.17471780e+06 2.93679155e+05
 7.34210031e+04 1.81734844e+04 2.26015730e+03 4.66006614e+02
 1.24529697e+02 3.81883060e+01 4.74175291e+00 3.91435079e-01
 8.59989205e+00 4.91048273e-01]
grad_E = [-1.32368261e-13  1.66327655e-11 -2.57546259e-12  9.76068795e-09
 -3.89543906e-08  6.16345191e-06 -8.45526741e-06 -3.13481046e-05
  4.08346008e-04  5.17430755e-05 -7.60119051e-04  3.39285772e-03
  9.82564877e-04  7.04467486e-03]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="BFGS",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((14, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.6988712134173084e+06,1.1747178033543271e+06,2.9367945083858178e+05,7.3419865393677101e+04,1.8353927627435987e+04,2.2341424145819028e+03,4.5688904996449571e+02,1.2173317272260677e+02,3.7593061247508530e+01,4.7412722556720146e+00,3.9120358491841306e-01,8.5986297237246045e+00,4.9084868336327880e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "12s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:21:14 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  18795484.8537        1
[INPUT] 0    0    [1    /1   ]  4698871.21259        1
[INPUT] 0    0    [1    /1   ]  1174717.80349        1
[INPUT] 0    0    [1    /1   ]  293678.967433        1
[INPUT] 0    0    [1    /1   ]  73421.749113         1
[INPUT] 0    0    [1    /1   ]  18059.2368382        1
[INPUT] 0    0    [1    /1   ]  2243.95685383        1
[INPUT] 0    0    [1    /1   ]  465.223902476        1
[INPUT] 0    0    [1    /1   ]  124.821709898        1
[INPUT] 0    0    [1    /1   ]  38.2793884068        1
[INPUT] 0    0    [1    /1   ]  4.74138831223        1
[INPUT] 0    0    [1    /1   ]  0.391503141617       1
[INPUT] 1    0    [1    /1   ]  8.60034504856        1
[INPUT] 1    0    [1    /1   ]  0.491119282843       1

nuclear repulsion = 0
number of shells = 14
number of NR pGTOs = 18
number of NR cGTOs = 18
basis = {'Ar': [[0, [18795484.85367585, 1.0]], [0, [4698871.212592699, 1.0]], [0, [1174717.8034922478, 1.0]], [0, [293678.96743254765, 1.0]], [0, [73421.74911304409, 1.0]], [0, [18059.236838179615, 1.0]], [0, [2243.956853827913, 1.0]], [0, [465.2239024758275, 1.0]], [0, [124.82170989761104, 1.0]], [0, [38.279388406838976, 1.0]], [0, [4.741388312229083, 1.0]], [0, [0.39150314161704564, 1.0]], [1, [8.600345048564648, 1.0]], [1, [0.4911192828431597, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [18795484.85367585]
bas 1, expnt(s) = [4698871.2125927]
bas 2, expnt(s) = [1174717.80349225]
bas 3, expnt(s) = [293678.96743255]
bas 4, expnt(s) = [73421.74911304]
bas 5, expnt(s) = [18059.23683818]
bas 6, expnt(s) = [2243.95685383]
bas 7, expnt(s) = [465.22390248]
bas 8, expnt(s) = [124.8217099]
bas 9, expnt(s) = [38.27938841]
bas 10, expnt(s) = [4.74138831]
bas 11, expnt(s) = [0.39150314]
bas 12, expnt(s) = [8.60034505]
bas 13, expnt(s) = [0.49111928]
CPU time:       439.74
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  0  1  1  0 42 43  0]
 [ 0  0  1  1  0 44 45  0]
 [ 0  0  1  1  0 46 47  0]
 [ 0  1  1  1  0 48 49  0]
 [ 0  1  1  1  0 50 51  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.87954849e+07 7.21199097e+05 4.69887121e+06 2.54982386e+05
 1.17471780e+06 9.01498871e+04 2.93678967e+05 3.18727589e+04
 7.34217491e+04 1.12689530e+04 1.80592368e+04 3.93585934e+03
 2.24395685e+03 8.23712963e+02 4.65223902e+02 2.53082164e+02
 1.24821710e+02 9.43479830e+01 3.82793884e+01 3.88811200e+01
 4.74138831e+00 8.11790880e+00 3.91503142e-01 1.25045038e+00
 8.60034505e+00 4.29664267e+01 4.91119283e-01 1.19941127e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.31953830785126
cond(S) = 56.290905576336044
E1 = -688.8561473618538  E_coul = 184.93740497173678
init E= -503.918742390117
    CPU time for initialize scf      0.03 sec, wall time      0.03 sec
  HOMO = -0.680474822386767  LUMO = 87.8312543273375
  mo_energy =
[-1.21647674e+02 -1.32798987e+01 -7.62003184e+00 -7.62003184e+00
 -7.62003184e+00 -1.65050582e+00 -6.80474822e-01 -6.80474822e-01
 -6.80474822e-01  8.78312543e+01  6.94982697e+02  3.98349605e+03
  2.93854450e+04  1.53949537e+05  6.63937196e+05  2.71871470e+06
  1.10451332e+07  4.65093384e+07]
E1 = -706.6155748237032  E_coul = 198.97499034588756
cycle= 1 E= -507.640584477816  delta_E= -3.72  |g|= 0.315  |ddm|= 0.301
    CPU time for cycle= 1      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.420237
diis-c [-0.17659893  1.        ]
  HOMO = -0.235477128777209  LUMO = 89.1680531576236
  mo_energy =
[-1.20259249e+02 -1.22512737e+01 -6.65105604e+00 -6.65105604e+00
 -6.65105604e+00 -1.16287612e+00 -2.35477129e-01 -2.35477129e-01
 -2.35477129e-01  8.91680532e+01  6.96353904e+02  3.98474972e+03
  2.93865379e+04  1.53950558e+05  6.63938188e+05  2.71871568e+06
  1.10451341e+07  4.65093393e+07]
E1 = -706.5855443145562  E_coul = 198.9445518217818
cycle= 2 E= -507.640992492774  delta_E= -0.000408  |g|= 0.00462  |ddm|= 0.0136
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00493106
diis-c [-2.42466503e-05 -6.24231240e-04  1.00062423e+00]
  HOMO = -0.235643138746412  LUMO = 89.1646283979461
  mo_energy =
[-1.20267551e+02 -1.22524010e+01 -6.65280353e+00 -6.65280353e+00
 -6.65280353e+00 -1.16293743e+00 -2.35643139e-01 -2.35643139e-01
 -2.35643139e-01  8.91646284e+01  6.96343645e+02  3.98473435e+03
  2.93865193e+04  1.53950539e+05  6.63938168e+05  2.71871566e+06
  1.10451341e+07  4.65093393e+07]
E1 = -706.5851320184221  E_coul = 198.9441394239582
cycle= 3 E= -507.640992594464  delta_E= -1.02e-07  |g|= 9.04e-05  |ddm|= 0.000189
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.000121415
diis-c [-3.62455389e-10  3.35322166e-05 -2.49454766e-02  1.02491194e+00]
  HOMO = -0.235645176273172  LUMO = 89.1645865096876
  mo_energy =
[-1.20267657e+02 -1.22524156e+01 -6.65282844e+00 -6.65282844e+00
 -6.65282844e+00 -1.16293803e+00 -2.35645176e-01 -2.35645176e-01
 -2.35645176e-01  8.91645865e+01  6.96343536e+02  3.98473422e+03
  2.93865192e+04  1.53950539e+05  6.63938168e+05  2.71871566e+06
  1.10451341e+07  4.65093393e+07]
E1 = -706.585125424135  E_coul = 198.9441328296356
cycle= 4 E= -507.640992594499  delta_E= -3.55e-11  |g|= 3.49e-07  |ddm|= 3.16e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.585125424135  E_coul = 198.9441328296356
  HOMO = -0.23564516153156  LUMO = 89.1645868276171
  mo_energy =
[-1.20267656e+02 -1.22524155e+01 -6.65282829e+00 -6.65282829e+00
 -6.65282829e+00 -1.16293802e+00 -2.35645162e-01 -2.35645162e-01
 -2.35645162e-01  8.91645868e+01  6.96343537e+02  3.98473422e+03
  2.93865192e+04  1.53950539e+05  6.63938168e+05  2.71871566e+06
  1.10451341e+07  4.65093393e+07]
E1 = -706.585125457472  E_coul = 198.94413286297282
Extra cycle  E= -507.640992594499  delta_E= 1.71e-13  |g|= 5.92e-09  |ddm|= 1.48e-08
    CPU time for scf_cycle      0.11 sec, wall time      0.11 sec
exp = [1.87954849e+07 4.69887121e+06 1.17471780e+06 2.93678967e+05
 7.34217491e+04 1.80592368e+04 2.24395685e+03 4.65223902e+02
 1.24821710e+02 3.82793884e+01 4.74138831e+00 3.91503142e-01
 8.60034505e+00 4.91119283e-01]
E = -507.6409925944992
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="BFGS",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((14, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.6988712134173084e+06,1.1747178033543271e+06,2.9367945083858178e+05,7.3419865393677101e+04,1.8353927627435987e+04,2.2341424145819028e+03,4.5688904996449571e+02,1.2173317272260677e+02,3.7593061247508530e+01,4.7412722556720146e+00,3.9120358491841306e-01,8.5986297237246045e+00,4.9084868336327880e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "12s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:21:15 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  18795484.8537        1
[INPUT] 0    0    [1    /1   ]  4698871.21259        1
[INPUT] 0    0    [1    /1   ]  1174717.80349        1
[INPUT] 0    0    [1    /1   ]  293678.967433        1
[INPUT] 0    0    [1    /1   ]  73421.749113         1
[INPUT] 0    0    [1    /1   ]  18059.2368382        1
[INPUT] 0    0    [1    /1   ]  2243.95685383        1
[INPUT] 0    0    [1    /1   ]  465.223902476        1
[INPUT] 0    0    [1    /1   ]  124.821709898        1
[INPUT] 0    0    [1    /1   ]  38.2793884068        1
[INPUT] 0    0    [1    /1   ]  4.74138831223        1
[INPUT] 0    0    [1    /1   ]  0.391503141617       1
[INPUT] 1    0    [1    /1   ]  8.60034504856        1
[INPUT] 1    0    [1    /1   ]  0.491119282843       1

nuclear repulsion = 0
number of shells = 14
number of NR pGTOs = 18
number of NR cGTOs = 18
basis = {'Ar': [[0, [18795484.85367585, 1.0]], [0, [4698871.212592699, 1.0]], [0, [1174717.8034922478, 1.0]], [0, [293678.96743254765, 1.0]], [0, [73421.74911304409, 1.0]], [0, [18059.236838179615, 1.0]], [0, [2243.956853827913, 1.0]], [0, [465.2239024758275, 1.0]], [0, [124.82170989761104, 1.0]], [0, [38.279388406838976, 1.0]], [0, [4.741388312229083, 1.0]], [0, [0.39150314161704564, 1.0]], [1, [8.600345048564648, 1.0]], [1, [0.4911192828431597, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [18795484.85367585]
bas 1, expnt(s) = [4698871.2125927]
bas 2, expnt(s) = [1174717.80349225]
bas 3, expnt(s) = [293678.96743255]
bas 4, expnt(s) = [73421.74911304]
bas 5, expnt(s) = [18059.23683818]
bas 6, expnt(s) = [2243.95685383]
bas 7, expnt(s) = [465.22390248]
bas 8, expnt(s) = [124.8217099]
bas 9, expnt(s) = [38.27938841]
bas 10, expnt(s) = [4.74138831]
bas 11, expnt(s) = [0.39150314]
bas 12, expnt(s) = [8.60034505]
bas 13, expnt(s) = [0.49111928]
CPU time:       440.96
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  0  1  1  0 42 43  0]
 [ 0  0  1  1  0 44 45  0]
 [ 0  0  1  1  0 46 47  0]
 [ 0  1  1  1  0 48 49  0]
 [ 0  1  1  1  0 50 51  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.87954849e+07 7.21199097e+05 4.69887121e+06 2.54982386e+05
 1.17471780e+06 9.01498871e+04 2.93678967e+05 3.18727589e+04
 7.34217491e+04 1.12689530e+04 1.80592368e+04 3.93585934e+03
 2.24395685e+03 8.23712963e+02 4.65223902e+02 2.53082164e+02
 1.24821710e+02 9.43479830e+01 3.82793884e+01 3.88811200e+01
 4.74138831e+00 8.11790880e+00 3.91503142e-01 1.25045038e+00
 8.60034505e+00 4.29664267e+01 4.91119283e-01 1.19941127e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.31953830785126
cond(S) = 56.290905576336044
E1 = -688.8561473618538  E_coul = 184.93740497173678
init E= -503.918742390117
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.680474822386767  LUMO = 87.8312543273375
  mo_energy =
[-1.21647674e+02 -1.32798987e+01 -7.62003184e+00 -7.62003184e+00
 -7.62003184e+00 -1.65050582e+00 -6.80474822e-01 -6.80474822e-01
 -6.80474822e-01  8.78312543e+01  6.94982697e+02  3.98349605e+03
  2.93854450e+04  1.53949537e+05  6.63937196e+05  2.71871470e+06
  1.10451332e+07  4.65093384e+07]
E1 = -706.6155748237032  E_coul = 198.97499034588756
cycle= 1 E= -507.640584477816  delta_E= -3.72  |g|= 0.315  |ddm|= 0.301
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.420237
diis-c [-0.17659893  1.        ]
  HOMO = -0.235477128777209  LUMO = 89.1680531576236
  mo_energy =
[-1.20259249e+02 -1.22512737e+01 -6.65105604e+00 -6.65105604e+00
 -6.65105604e+00 -1.16287612e+00 -2.35477129e-01 -2.35477129e-01
 -2.35477129e-01  8.91680532e+01  6.96353904e+02  3.98474972e+03
  2.93865379e+04  1.53950558e+05  6.63938188e+05  2.71871568e+06
  1.10451341e+07  4.65093393e+07]
E1 = -706.5855443145562  E_coul = 198.9445518217818
cycle= 2 E= -507.640992492774  delta_E= -0.000408  |g|= 0.00462  |ddm|= 0.0136
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00493106
diis-c [-2.42466503e-05 -6.24231240e-04  1.00062423e+00]
  HOMO = -0.235643138746412  LUMO = 89.1646283979461
  mo_energy =
[-1.20267551e+02 -1.22524010e+01 -6.65280353e+00 -6.65280353e+00
 -6.65280353e+00 -1.16293743e+00 -2.35643139e-01 -2.35643139e-01
 -2.35643139e-01  8.91646284e+01  6.96343645e+02  3.98473435e+03
  2.93865193e+04  1.53950539e+05  6.63938168e+05  2.71871566e+06
  1.10451341e+07  4.65093393e+07]
E1 = -706.5851320184221  E_coul = 198.9441394239582
cycle= 3 E= -507.640992594464  delta_E= -1.02e-07  |g|= 9.04e-05  |ddm|= 0.000189
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.000121415
diis-c [-3.62455389e-10  3.35322166e-05 -2.49454766e-02  1.02491194e+00]
  HOMO = -0.235645176273172  LUMO = 89.1645865096876
  mo_energy =
[-1.20267657e+02 -1.22524156e+01 -6.65282844e+00 -6.65282844e+00
 -6.65282844e+00 -1.16293803e+00 -2.35645176e-01 -2.35645176e-01
 -2.35645176e-01  8.91645865e+01  6.96343536e+02  3.98473422e+03
  2.93865192e+04  1.53950539e+05  6.63938168e+05  2.71871566e+06
  1.10451341e+07  4.65093393e+07]
E1 = -706.585125424135  E_coul = 198.9441328296356
cycle= 4 E= -507.640992594499  delta_E= -3.55e-11  |g|= 3.49e-07  |ddm|= 3.16e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.585125424135  E_coul = 198.9441328296356
  HOMO = -0.23564516153156  LUMO = 89.1645868276171
  mo_energy =
[-1.20267656e+02 -1.22524155e+01 -6.65282829e+00 -6.65282829e+00
 -6.65282829e+00 -1.16293802e+00 -2.35645162e-01 -2.35645162e-01
 -2.35645162e-01  8.91645868e+01  6.96343537e+02  3.98473422e+03
  2.93865192e+04  1.53950539e+05  6.63938168e+05  2.71871566e+06
  1.10451341e+07  4.65093393e+07]
E1 = -706.585125457472  E_coul = 198.94413286297282
Extra cycle  E= -507.640992594499  delta_E= 1.71e-13  |g|= 5.92e-09  |ddm|= 1.48e-08
    CPU time for scf_cycle      0.11 sec, wall time      0.11 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 56.290905576336044
E1 = -706.585125457472  E_coul = 198.94413286297282
init E= -507.640992594499
    CPU time for initialize scf      0.12 sec, wall time      0.12 sec
  HOMO = -0.235645161362114  LUMO = 89.1645868314135
  mo_energy =
[-1.20267656e+02 -1.22524155e+01 -6.65282829e+00 -6.65282829e+00
 -6.65282829e+00 -1.16293802e+00 -2.35645161e-01 -2.35645161e-01
 -2.35645161e-01  8.91645868e+01  6.96343537e+02  3.98473422e+03
  2.93865192e+04  1.53950539e+05  6.63938168e+05  2.71871566e+06
  1.10451341e+07  4.65093393e+07]
E1 = -706.5851254579671  E_coul = 198.9441328634676
cycle= 1 E= -507.6409925945  delta_E= -3.41e-13  |g|= 2.06e-10  |ddm|= 2.25e-10
    CPU time for cycle= 1      0.01 sec, wall time      0.02 sec
E1 = -706.5851254579671  E_coul = 198.9441328634676
  HOMO = -0.235645161359756  LUMO = 89.1645868314694
  mo_energy =
[-1.20267656e+02 -1.22524155e+01 -6.65282829e+00 -6.65282829e+00
 -6.65282829e+00 -1.16293802e+00 -2.35645161e-01 -2.35645161e-01
 -2.35645161e-01  8.91645868e+01  6.96343537e+02  3.98473422e+03
  2.93865192e+04  1.53950539e+05  6.63938168e+05  2.71871566e+06
  1.10451341e+07  4.65093393e+07]
E1 = -706.5851254579748  E_coul = 198.9441328634755
Extra cycle  E= -507.640992594499  delta_E= 2.84e-13  |g|= 1.77e-10  |ddm|= 3.87e-12
    CPU time for scf_cycle      0.20 sec, wall time      0.20 sec
exp = [1.87954849e+07 4.69887121e+06 1.17471780e+06 2.93678967e+05
 7.34217491e+04 1.80592368e+04 2.24395685e+03 4.65223902e+02
 1.24821710e+02 3.82793884e+01 4.74138831e+00 3.91503142e-01
 8.60034505e+00 4.91119283e-01]
grad_E = [-1.31784870e-13  1.66730530e-11 -2.30177483e-12  9.79152872e-09
 -3.97053836e-08  6.34948387e-06 -1.26947917e-05 -4.19357621e-05
  5.45065755e-04  7.02290581e-05 -1.01684540e-03  4.53766266e-03
  1.31411462e-03  9.42188893e-03]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="BFGS",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((14, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.6988712134173084e+06,1.1747178033543271e+06,2.9367945083858178e+05,7.3419865393677101e+04,1.8353927627435987e+04,2.2341424145819028e+03,4.5688904996449571e+02,1.2173317272260677e+02,3.7593061247508530e+01,4.7412722556720146e+00,3.9120358491841306e-01,8.5986297237246045e+00,4.9084868336327880e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "12s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:21:19 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  18795484.8537        1
[INPUT] 0    0    [1    /1   ]  4698871.21201        1
[INPUT] 0    0    [1    /1   ]  1174717.80363        1
[INPUT] 0    0    [1    /1   ]  293678.623913        1
[INPUT] 0    0    [1    /1   ]  73423.1126446        1
[INPUT] 0    0    [1    /1   ]  17849.8139246        1
[INPUT] 0    0    [1    /1   ]  2219.43796271        1
[INPUT] 0    0    [1    /1   ]  463.918337519        1
[INPUT] 0    0    [1    /1   ]  125.204150359        1
[INPUT] 0    0    [1    /1   ]  38.4024233915        1
[INPUT] 0    0    [1    /1   ]  4.74086058655        1
[INPUT] 0    0    [1    /1   ]  0.391597357033       1
[INPUT] 1    0    [1    /1   ]  8.60096978755        1
[INPUT] 1    0    [1    /1   ]  0.491217423327       1

nuclear repulsion = 0
number of shells = 14
number of NR pGTOs = 18
number of NR cGTOs = 18
basis = {'Ar': [[0, [18795484.853680663, 1.0]], [0, [4698871.212006866, 1.0]], [0, [1174717.8036325614, 1.0]], [0, [293678.62391323666, 1.0]], [0, [73423.11264457078, 1.0]], [0, [17849.8139245899, 1.0]], [0, [2219.4379627108415, 1.0]], [0, [463.91833751927015, 1.0]], [0, [125.20415035857648, 1.0]], [0, [38.40242339147161, 1.0]], [0, [4.740860586554598, 1.0]], [0, [0.3915973570329363, 1.0]], [1, [8.60096978754591, 1.0]], [1, [0.49121742332736024, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [18795484.85368066]
bas 1, expnt(s) = [4698871.21200687]
bas 2, expnt(s) = [1174717.80363256]
bas 3, expnt(s) = [293678.62391324]
bas 4, expnt(s) = [73423.11264457]
bas 5, expnt(s) = [17849.81392459]
bas 6, expnt(s) = [2219.43796271]
bas 7, expnt(s) = [463.91833752]
bas 8, expnt(s) = [125.20415036]
bas 9, expnt(s) = [38.40242339]
bas 10, expnt(s) = [4.74086059]
bas 11, expnt(s) = [0.39159736]
bas 12, expnt(s) = [8.60096979]
bas 13, expnt(s) = [0.49121742]
CPU time:       444.95
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  0  1  1  0 42 43  0]
 [ 0  0  1  1  0 44 45  0]
 [ 0  0  1  1  0 46 47  0]
 [ 0  1  1  1  0 48 49  0]
 [ 0  1  1  1  0 50 51  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.87954849e+07 7.21199097e+05 4.69887121e+06 2.54982386e+05
 1.17471780e+06 9.01498871e+04 2.93678624e+05 3.18727309e+04
 7.34231126e+04 1.12691100e+04 1.78498139e+04 3.90157800e+03
 2.21943796e+03 8.16953395e+02 4.63918338e+02 2.52549306e+02
 1.25204150e+02 9.45647042e+01 3.84024234e+01 3.89748092e+01
 4.74086059e+00 8.11723113e+00 3.91597357e-01 1.25067606e+00
 8.60096979e+00 4.29703281e+01 4.91217423e-01 1.19971088e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.31939838048939
cond(S) = 56.1778416710747
E1 = -688.8610384450845  E_coul = 184.9448292658995
init E= -503.916209179185
    CPU time for initialize scf      0.03 sec, wall time      0.03 sec
  HOMO = -0.680322177412247  LUMO = 88.23961372595
  mo_energy =
[-1.21646784e+02 -1.32795211e+01 -7.61952232e+00 -7.61952232e+00
 -7.61952232e+00 -1.65041472e+00 -6.80322177e-01 -6.80322177e-01
 -6.80322177e-01  8.82396137e+01  6.95272204e+02  3.95403331e+03
  2.90874334e+04  1.53256324e+05  6.63139740e+05  2.71795903e+06
  1.10444455e+07  4.65087204e+07]
E1 = -706.6262058450064  E_coul = 198.98496529466374
cycle= 1 E= -507.641240550343  delta_E= -3.73  |g|= 0.315  |ddm|= 0.301
    CPU time for cycle= 1      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.420529
diis-c [-0.17684456  1.        ]
  HOMO = -0.235202793060492  LUMO = 89.5770718718265
  mo_energy =
[-1.20258131e+02 -1.22507320e+01 -6.65040010e+00 -6.65040010e+00
 -6.65040010e+00 -1.16266595e+00 -2.35202793e-01 -2.35202793e-01
 -2.35202793e-01  8.95770719e+01  6.96643918e+02  3.95528869e+03
  2.90885281e+04  1.53257346e+05  6.63140732e+05  2.71796001e+06
  1.10444464e+07  4.65087214e+07]
E1 = -706.5963708604496  E_coul = 198.9547249978492
cycle= 2 E= -507.6416458626  delta_E= -0.000405  |g|= 0.00461  |ddm|= 0.0136
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00491847
diis-c [-2.41177036e-05 -6.45621178e-04  1.00064562e+00]
  HOMO = -0.235367582840401  LUMO = 89.5736612988369
  mo_energy =
[-1.20266386e+02 -1.22518508e+01 -6.65213479e+00 -6.65213479e+00
 -6.65213479e+00 -1.16272679e+00 -2.35367583e-01 -2.35367583e-01
 -2.35367583e-01  8.95736613e+01  6.96633723e+02  3.95527343e+03
  2.90885096e+04  1.53257327e+05  6.63140713e+05  2.71795999e+06
  1.10444464e+07  4.65087214e+07]
E1 = -706.5959623595169  E_coul = 198.95431639636874
cycle= 3 E= -507.641645963148  delta_E= -1.01e-07  |g|= 8.97e-05  |ddm|= 0.000188
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.000120712
diis-c [-3.58484755e-10  3.35418675e-05 -2.48671654e-02  1.02483362e+00]
  HOMO = -0.235369596513515  LUMO = 89.5736198071915
  mo_energy =
[-1.20266490e+02 -1.22518652e+01 -6.65215941e+00 -6.65215941e+00
 -6.65215941e+00 -1.16272738e+00 -2.35369597e-01 -2.35369597e-01
 -2.35369597e-01  8.95736198e+01  6.96633615e+02  3.95527330e+03
  2.90885094e+04  1.53257327e+05  6.63140712e+05  2.71795999e+06
  1.10444464e+07  4.65087214e+07]
E1 = -706.5959558542448  E_coul = 198.95430989106202
cycle= 4 E= -507.641645963183  delta_E= -3.47e-11  |g|= 3.45e-07  |ddm|= 3.12e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.5959558542448  E_coul = 198.95430989106202
  HOMO = -0.235369581974246  LUMO = 89.5736201223355
  mo_energy =
[-1.20266489e+02 -1.22518651e+01 -6.65215927e+00 -6.65215927e+00
 -6.65215927e+00 -1.16272738e+00 -2.35369582e-01 -2.35369582e-01
 -2.35369582e-01  8.95736201e+01  6.96633616e+02  3.95527330e+03
  2.90885094e+04  1.53257327e+05  6.63140712e+05  2.71795999e+06
  1.10444464e+07  4.65087214e+07]
E1 = -706.5959558871068  E_coul = 198.95430992392497
Extra cycle  E= -507.641645963182  delta_E= 9.09e-13  |g|= 5.85e-09  |ddm|= 1.46e-08
    CPU time for scf_cycle      0.11 sec, wall time      0.11 sec
exp = [1.87954849e+07 4.69887121e+06 1.17471780e+06 2.93678624e+05
 7.34231126e+04 1.78498139e+04 2.21943796e+03 4.63918338e+02
 1.25204150e+02 3.84024234e+01 4.74086059e+00 3.91597357e-01
 8.60096979e+00 4.91217423e-01]
E = -507.6416459631819
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="BFGS",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((14, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.6988712134173084e+06,1.1747178033543271e+06,2.9367945083858178e+05,7.3419865393677101e+04,1.8353927627435987e+04,2.2341424145819028e+03,4.5688904996449571e+02,1.2173317272260677e+02,3.7593061247508530e+01,4.7412722556720146e+00,3.9120358491841306e-01,8.5986297237246045e+00,4.9084868336327880e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "12s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:21:20 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  18795484.8537        1
[INPUT] 0    0    [1    /1   ]  4698871.21201        1
[INPUT] 0    0    [1    /1   ]  1174717.80363        1
[INPUT] 0    0    [1    /1   ]  293678.623913        1
[INPUT] 0    0    [1    /1   ]  73423.1126446        1
[INPUT] 0    0    [1    /1   ]  17849.8139246        1
[INPUT] 0    0    [1    /1   ]  2219.43796271        1
[INPUT] 0    0    [1    /1   ]  463.918337519        1
[INPUT] 0    0    [1    /1   ]  125.204150359        1
[INPUT] 0    0    [1    /1   ]  38.4024233915        1
[INPUT] 0    0    [1    /1   ]  4.74086058655        1
[INPUT] 0    0    [1    /1   ]  0.391597357033       1
[INPUT] 1    0    [1    /1   ]  8.60096978755        1
[INPUT] 1    0    [1    /1   ]  0.491217423327       1

nuclear repulsion = 0
number of shells = 14
number of NR pGTOs = 18
number of NR cGTOs = 18
basis = {'Ar': [[0, [18795484.853680663, 1.0]], [0, [4698871.212006866, 1.0]], [0, [1174717.8036325614, 1.0]], [0, [293678.62391323666, 1.0]], [0, [73423.11264457078, 1.0]], [0, [17849.8139245899, 1.0]], [0, [2219.4379627108415, 1.0]], [0, [463.91833751927015, 1.0]], [0, [125.20415035857648, 1.0]], [0, [38.40242339147161, 1.0]], [0, [4.740860586554598, 1.0]], [0, [0.3915973570329363, 1.0]], [1, [8.60096978754591, 1.0]], [1, [0.49121742332736024, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [18795484.85368066]
bas 1, expnt(s) = [4698871.21200687]
bas 2, expnt(s) = [1174717.80363256]
bas 3, expnt(s) = [293678.62391324]
bas 4, expnt(s) = [73423.11264457]
bas 5, expnt(s) = [17849.81392459]
bas 6, expnt(s) = [2219.43796271]
bas 7, expnt(s) = [463.91833752]
bas 8, expnt(s) = [125.20415036]
bas 9, expnt(s) = [38.40242339]
bas 10, expnt(s) = [4.74086059]
bas 11, expnt(s) = [0.39159736]
bas 12, expnt(s) = [8.60096979]
bas 13, expnt(s) = [0.49121742]
CPU time:       446.17
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  0  1  1  0 42 43  0]
 [ 0  0  1  1  0 44 45  0]
 [ 0  0  1  1  0 46 47  0]
 [ 0  1  1  1  0 48 49  0]
 [ 0  1  1  1  0 50 51  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.87954849e+07 7.21199097e+05 4.69887121e+06 2.54982386e+05
 1.17471780e+06 9.01498871e+04 2.93678624e+05 3.18727309e+04
 7.34231126e+04 1.12691100e+04 1.78498139e+04 3.90157800e+03
 2.21943796e+03 8.16953395e+02 4.63918338e+02 2.52549306e+02
 1.25204150e+02 9.45647042e+01 3.84024234e+01 3.89748092e+01
 4.74086059e+00 8.11723113e+00 3.91597357e-01 1.25067606e+00
 8.60096979e+00 4.29703281e+01 4.91217423e-01 1.19971088e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.31939838048939
cond(S) = 56.1778416710747
E1 = -688.8610384450845  E_coul = 184.9448292658995
init E= -503.916209179185
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.680322177412247  LUMO = 88.23961372595
  mo_energy =
[-1.21646784e+02 -1.32795211e+01 -7.61952232e+00 -7.61952232e+00
 -7.61952232e+00 -1.65041472e+00 -6.80322177e-01 -6.80322177e-01
 -6.80322177e-01  8.82396137e+01  6.95272204e+02  3.95403331e+03
  2.90874334e+04  1.53256324e+05  6.63139740e+05  2.71795903e+06
  1.10444455e+07  4.65087204e+07]
E1 = -706.6262058450064  E_coul = 198.98496529466374
cycle= 1 E= -507.641240550343  delta_E= -3.73  |g|= 0.315  |ddm|= 0.301
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.420529
diis-c [-0.17684456  1.        ]
  HOMO = -0.235202793060492  LUMO = 89.5770718718265
  mo_energy =
[-1.20258131e+02 -1.22507320e+01 -6.65040010e+00 -6.65040010e+00
 -6.65040010e+00 -1.16266595e+00 -2.35202793e-01 -2.35202793e-01
 -2.35202793e-01  8.95770719e+01  6.96643918e+02  3.95528869e+03
  2.90885281e+04  1.53257346e+05  6.63140732e+05  2.71796001e+06
  1.10444464e+07  4.65087214e+07]
E1 = -706.5963708604496  E_coul = 198.9547249978492
cycle= 2 E= -507.6416458626  delta_E= -0.000405  |g|= 0.00461  |ddm|= 0.0136
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00491847
diis-c [-2.41177036e-05 -6.45621178e-04  1.00064562e+00]
  HOMO = -0.235367582840401  LUMO = 89.5736612988369
  mo_energy =
[-1.20266386e+02 -1.22518508e+01 -6.65213479e+00 -6.65213479e+00
 -6.65213479e+00 -1.16272679e+00 -2.35367583e-01 -2.35367583e-01
 -2.35367583e-01  8.95736613e+01  6.96633723e+02  3.95527343e+03
  2.90885096e+04  1.53257327e+05  6.63140713e+05  2.71795999e+06
  1.10444464e+07  4.65087214e+07]
E1 = -706.5959623595169  E_coul = 198.95431639636874
cycle= 3 E= -507.641645963148  delta_E= -1.01e-07  |g|= 8.97e-05  |ddm|= 0.000188
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.000120712
diis-c [-3.58484755e-10  3.35418675e-05 -2.48671654e-02  1.02483362e+00]
  HOMO = -0.235369596513515  LUMO = 89.5736198071915
  mo_energy =
[-1.20266490e+02 -1.22518652e+01 -6.65215941e+00 -6.65215941e+00
 -6.65215941e+00 -1.16272738e+00 -2.35369597e-01 -2.35369597e-01
 -2.35369597e-01  8.95736198e+01  6.96633615e+02  3.95527330e+03
  2.90885094e+04  1.53257327e+05  6.63140712e+05  2.71795999e+06
  1.10444464e+07  4.65087214e+07]
E1 = -706.5959558542448  E_coul = 198.95430989106202
cycle= 4 E= -507.641645963183  delta_E= -3.47e-11  |g|= 3.45e-07  |ddm|= 3.12e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.5959558542448  E_coul = 198.95430989106202
  HOMO = -0.235369581974246  LUMO = 89.5736201223355
  mo_energy =
[-1.20266489e+02 -1.22518651e+01 -6.65215927e+00 -6.65215927e+00
 -6.65215927e+00 -1.16272738e+00 -2.35369582e-01 -2.35369582e-01
 -2.35369582e-01  8.95736201e+01  6.96633616e+02  3.95527330e+03
  2.90885094e+04  1.53257327e+05  6.63140712e+05  2.71795999e+06
  1.10444464e+07  4.65087214e+07]
E1 = -706.5959558871068  E_coul = 198.95430992392497
Extra cycle  E= -507.641645963182  delta_E= 9.09e-13  |g|= 5.85e-09  |ddm|= 1.46e-08
    CPU time for scf_cycle      0.10 sec, wall time      0.11 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 56.1778416710747
E1 = -706.5959558871068  E_coul = 198.95430992392497
init E= -507.641645963182
    CPU time for initialize scf      0.12 sec, wall time      0.12 sec
  HOMO = -0.23536958180751  LUMO = 89.5736201260861
  mo_energy =
[-1.20266489e+02 -1.22518651e+01 -6.65215927e+00 -6.65215927e+00
 -6.65215927e+00 -1.16272738e+00 -2.35369582e-01 -2.35369582e-01
 -2.35369582e-01  8.95736201e+01  6.96633616e+02  3.95527330e+03
  2.90885094e+04  1.53257327e+05  6.63140712e+05  2.71795999e+06
  1.10444464e+07  4.65087214e+07]
E1 = -706.5959558875937  E_coul = 198.95430992441152
cycle= 1 E= -507.641645963182  delta_E= -3.41e-13  |g|= 1.51e-10  |ddm|= 2.21e-10
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -706.5959558875937  E_coul = 198.95430992441152
  HOMO = -0.235369581805193  LUMO = 89.5736201261415
  mo_energy =
[-1.20266489e+02 -1.22518651e+01 -6.65215927e+00 -6.65215927e+00
 -6.65215927e+00 -1.16272738e+00 -2.35369582e-01 -2.35369582e-01
 -2.35369582e-01  8.95736201e+01  6.96633616e+02  3.95527330e+03
  2.90885094e+04  1.53257327e+05  6.63140712e+05  2.71795999e+06
  1.10444464e+07  4.65087214e+07]
E1 = -706.5959558876016  E_coul = 198.95430992441928
Extra cycle  E= -507.641645963182  delta_E= -1.14e-13  |g|= 1.54e-10  |ddm|= 3.77e-12
    CPU time for scf_cycle      0.20 sec, wall time      0.20 sec
exp = [1.87954849e+07 4.69887121e+06 1.17471780e+06 2.93678624e+05
 7.34231126e+04 1.78498139e+04 2.21943796e+03 4.63918338e+02
 1.25204150e+02 3.84024234e+01 4.74086059e+00 3.91597357e-01
 8.60096979e+00 4.91217423e-01]
grad_E = [-1.33586786e-13  1.65514407e-11 -3.32248237e-12  9.73630459e-09
 -4.15407569e-08  6.62642579e-06 -1.85730253e-05 -5.62212556e-05
  7.32383842e-04  9.77739400e-05 -1.37141060e-03  6.11859470e-03
  1.77215210e-03  1.27057611e-02]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="BFGS",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((14, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.6988712134173084e+06,1.1747178033543271e+06,2.9367945083858178e+05,7.3419865393677101e+04,1.8353927627435987e+04,2.2341424145819028e+03,4.5688904996449571e+02,1.2173317272260677e+02,3.7593061247508530e+01,4.7412722556720146e+00,3.9120358491841306e-01,8.5986297237246045e+00,4.9084868336327880e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "12s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:21:24 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  18795484.8537        1
[INPUT] 0    0    [1    /1   ]  4698871.21094        1
[INPUT] 0    0    [1    /1   ]  1174717.80388        1
[INPUT] 0    0    [1    /1   ]  293677.998874        1
[INPUT] 0    0    [1    /1   ]  73425.5881721        1
[INPUT] 0    0    [1    /1   ]  17468.7666021        1
[INPUT] 0    0    [1    /1   ]  2181.90465618        1
[INPUT] 0    0    [1    /1   ]  461.736609675        1
[INPUT] 0    0    [1    /1   ]  125.701405281        1
[INPUT] 0    0    [1    /1   ]  38.5686032859        1
[INPUT] 0    0    [1    /1   ]  4.74009434422        1
[INPUT] 0    0    [1    /1   ]  0.391727756757       1
[INPUT] 1    0    [1    /1   ]  8.60182856374        1
[INPUT] 1    0    [1    /1   ]  0.491352743366       1

nuclear repulsion = 0
number of shells = 14
number of NR pGTOs = 18
number of NR cGTOs = 18
basis = {'Ar': [[0, [18795484.853689395, 1.0]], [0, [4698871.2109409, 1.0]], [0, [1174717.8038786203, 1.0]], [0, [293677.9988735302, 1.0]], [0, [73425.58817208961, 1.0]], [0, [17468.766602082153, 1.0]], [0, [2181.9046561791542, 1.0]], [0, [461.73660967513086, 1.0]], [0, [125.70140528082406, 1.0]], [0, [38.56860328587481, 1.0]], [0, [4.740094344218008, 1.0]], [0, [0.39172775675734195, 1.0]], [1, [8.601828563739971, 1.0]], [1, [0.49135274336632495, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [18795484.85368939]
bas 1, expnt(s) = [4698871.2109409]
bas 2, expnt(s) = [1174717.80387862]
bas 3, expnt(s) = [293677.99887353]
bas 4, expnt(s) = [73425.58817209]
bas 5, expnt(s) = [17468.76660208]
bas 6, expnt(s) = [2181.90465618]
bas 7, expnt(s) = [461.73660968]
bas 8, expnt(s) = [125.70140528]
bas 9, expnt(s) = [38.56860329]
bas 10, expnt(s) = [4.74009434]
bas 11, expnt(s) = [0.39172776]
bas 12, expnt(s) = [8.60182856]
bas 13, expnt(s) = [0.49135274]
CPU time:       450.14
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  0  1  1  0 42 43  0]
 [ 0  0  1  1  0 44 45  0]
 [ 0  0  1  1  0 46 47  0]
 [ 0  1  1  1  0 48 49  0]
 [ 0  1  1  1  0 50 51  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.87954849e+07 7.21199097e+05 4.69887121e+06 2.54982386e+05
 1.17471780e+06 9.01498872e+04 2.93677999e+05 3.18726801e+04
 7.34255882e+04 1.12693950e+04 1.74687666e+04 3.83894337e+03
 2.18190466e+03 8.06569603e+02 4.61736610e+02 2.51658009e+02
 1.25701405e+02 9.48462411e+01 3.85686033e+01 3.91012335e+01
 4.74009434e+00 8.11624715e+00 3.91727757e-01 1.25098840e+00
 8.60182856e+00 4.29756913e+01 4.91352743e-01 1.20012401e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319205633781394
cond(S) = 56.00623004576744
E1 = -688.8697619410241  E_coul = 184.95504858984486
init E= -503.914713351179
    CPU time for initialize scf      0.03 sec, wall time      0.03 sec
  HOMO = -0.680111344856344  LUMO = 88.7785516114194
  mo_energy =
[-1.21645666e+02 -1.32790245e+01 -7.61882136e+00 -7.61882136e+00
 -7.61882136e+00 -1.65029028e+00 -6.80111345e-01 -6.80111345e-01
 -6.80111345e-01  8.87785516e+01  6.95217692e+02  3.90782988e+03
  2.85654489e+04  1.52014313e+05  6.61711030e+05  2.71660565e+06
  1.10432139e+07  4.65076139e+07]
E1 = -706.6411672840134  E_coul = 198.99876494810476
cycle= 1 E= -507.642402335909  delta_E= -3.73  |g|= 0.315  |ddm|= 0.302
    CPU time for cycle= 1      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.42093
diis-c [-0.17718216  1.        ]
  HOMO = -0.234824236143892  LUMO = 90.1168959483126
  mo_energy =
[-1.20256676e+02 -1.22500068e+01 -6.64949445e+00 -6.64949445e+00
 -6.64949445e+00 -1.16237777e+00 -2.34824236e-01 -2.34824236e-01
 -2.34824236e-01  9.01168959e+01  6.96590165e+02  3.90908784e+03
  2.85665462e+04  1.52015337e+05  6.61712024e+05  2.71660663e+06
  1.10432149e+07  4.65076148e+07]
E1 = -706.6115875021351  E_coul = 198.96878337219528
cycle= 2 E= -507.64280412994  delta_E= -0.000402  |g|= 0.00458  |ddm|= 0.0135
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00490287
diis-c [-2.39579031e-05 -6.73526767e-04  1.00067353e+00]
  HOMO = -0.234987444251073  LUMO = 90.1135042039174
  mo_energy =
[-1.20264868e+02 -1.22511145e+01 -6.65121248e+00 -6.65121248e+00
 -6.65121248e+00 -1.16243800e+00 -2.34987444e-01 -2.34987444e-01
 -2.34987444e-01  9.01135042e+01  6.96580057e+02  3.90907272e+03
  2.85665278e+04  1.52015318e+05  6.61712005e+05  2.71660661e+06
  1.10432149e+07  4.65076148e+07]
E1 = -706.6111839263093  E_coul = 198.96837969730254
cycle= 3 E= -507.642804229007  delta_E= -9.91e-08  |g|= 8.89e-05  |ddm|= 0.000186
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.000119819
diis-c [-3.53403747e-10  3.35716141e-05 -2.47652401e-02  1.02473167e+00]
  HOMO = -0.234989427114457  LUMO = 90.1134632281393
  mo_energy =
[-1.20264971e+02 -1.22511287e+01 -6.65123674e+00 -6.65123674e+00
 -6.65123674e+00 -1.16243858e+00 -2.34989427e-01 -2.34989427e-01
 -2.34989427e-01  9.01134632e+01  6.96579951e+02  3.90907259e+03
  2.85665276e+04  1.52015318e+05  6.61712005e+05  2.71660661e+06
  1.10432149e+07  4.65076148e+07]
E1 = -706.6111775361006  E_coul = 198.96837330705986
cycle= 4 E= -507.642804229041  delta_E= -3.4e-11  |g|= 3.41e-07  |ddm|= 3.08e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.6111775361006  E_coul = 198.96837330705986
  HOMO = -0.234989412837377  LUMO = 90.1134635396092
  mo_energy =
[-1.20264970e+02 -1.22511286e+01 -6.65123660e+00 -6.65123660e+00
 -6.65123660e+00 -1.16243858e+00 -2.34989413e-01 -2.34989413e-01
 -2.34989413e-01  9.01134635e+01  6.96579952e+02  3.90907260e+03
  2.85665276e+04  1.52015318e+05  6.61712005e+05  2.71660661e+06
  1.10432149e+07  4.65076148e+07]
E1 = -706.6111775683509  E_coul = 198.96837333930995
Extra cycle  E= -507.642804229041  delta_E= -1.71e-13  |g|= 5.76e-09  |ddm|= 1.43e-08
    CPU time for scf_cycle      0.11 sec, wall time      0.11 sec
exp = [1.87954849e+07 4.69887121e+06 1.17471780e+06 2.93677999e+05
 7.34255882e+04 1.74687666e+04 2.18190466e+03 4.61736610e+02
 1.25701405e+02 3.85686033e+01 4.74009434e+00 3.91727757e-01
 8.60182856e+00 4.91352743e-01]
E = -507.6428042290409
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="BFGS",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((14, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.6988712134173084e+06,1.1747178033543271e+06,2.9367945083858178e+05,7.3419865393677101e+04,1.8353927627435987e+04,2.2341424145819028e+03,4.5688904996449571e+02,1.2173317272260677e+02,3.7593061247508530e+01,4.7412722556720146e+00,3.9120358491841306e-01,8.5986297237246045e+00,4.9084868336327880e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "12s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:21:26 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  18795484.8537        1
[INPUT] 0    0    [1    /1   ]  4698871.21094        1
[INPUT] 0    0    [1    /1   ]  1174717.80388        1
[INPUT] 0    0    [1    /1   ]  293677.998874        1
[INPUT] 0    0    [1    /1   ]  73425.5881721        1
[INPUT] 0    0    [1    /1   ]  17468.7666021        1
[INPUT] 0    0    [1    /1   ]  2181.90465618        1
[INPUT] 0    0    [1    /1   ]  461.736609675        1
[INPUT] 0    0    [1    /1   ]  125.701405281        1
[INPUT] 0    0    [1    /1   ]  38.5686032859        1
[INPUT] 0    0    [1    /1   ]  4.74009434422        1
[INPUT] 0    0    [1    /1   ]  0.391727756757       1
[INPUT] 1    0    [1    /1   ]  8.60182856374        1
[INPUT] 1    0    [1    /1   ]  0.491352743366       1

nuclear repulsion = 0
number of shells = 14
number of NR pGTOs = 18
number of NR cGTOs = 18
basis = {'Ar': [[0, [18795484.853689395, 1.0]], [0, [4698871.2109409, 1.0]], [0, [1174717.8038786203, 1.0]], [0, [293677.9988735302, 1.0]], [0, [73425.58817208961, 1.0]], [0, [17468.766602082153, 1.0]], [0, [2181.9046561791542, 1.0]], [0, [461.73660967513086, 1.0]], [0, [125.70140528082406, 1.0]], [0, [38.56860328587481, 1.0]], [0, [4.740094344218008, 1.0]], [0, [0.39172775675734195, 1.0]], [1, [8.601828563739971, 1.0]], [1, [0.49135274336632495, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [18795484.85368939]
bas 1, expnt(s) = [4698871.2109409]
bas 2, expnt(s) = [1174717.80387862]
bas 3, expnt(s) = [293677.99887353]
bas 4, expnt(s) = [73425.58817209]
bas 5, expnt(s) = [17468.76660208]
bas 6, expnt(s) = [2181.90465618]
bas 7, expnt(s) = [461.73660968]
bas 8, expnt(s) = [125.70140528]
bas 9, expnt(s) = [38.56860329]
bas 10, expnt(s) = [4.74009434]
bas 11, expnt(s) = [0.39172776]
bas 12, expnt(s) = [8.60182856]
bas 13, expnt(s) = [0.49135274]
CPU time:       451.37
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  0  1  1  0 42 43  0]
 [ 0  0  1  1  0 44 45  0]
 [ 0  0  1  1  0 46 47  0]
 [ 0  1  1  1  0 48 49  0]
 [ 0  1  1  1  0 50 51  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.87954849e+07 7.21199097e+05 4.69887121e+06 2.54982386e+05
 1.17471780e+06 9.01498872e+04 2.93677999e+05 3.18726801e+04
 7.34255882e+04 1.12693950e+04 1.74687666e+04 3.83894337e+03
 2.18190466e+03 8.06569603e+02 4.61736610e+02 2.51658009e+02
 1.25701405e+02 9.48462411e+01 3.85686033e+01 3.91012335e+01
 4.74009434e+00 8.11624715e+00 3.91727757e-01 1.25098840e+00
 8.60182856e+00 4.29756913e+01 4.91352743e-01 1.20012401e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319205633781394
cond(S) = 56.00623004576744
E1 = -688.8697619410241  E_coul = 184.95504858984486
init E= -503.914713351179
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.680111344856344  LUMO = 88.7785516114194
  mo_energy =
[-1.21645666e+02 -1.32790245e+01 -7.61882136e+00 -7.61882136e+00
 -7.61882136e+00 -1.65029028e+00 -6.80111345e-01 -6.80111345e-01
 -6.80111345e-01  8.87785516e+01  6.95217692e+02  3.90782988e+03
  2.85654489e+04  1.52014313e+05  6.61711030e+05  2.71660565e+06
  1.10432139e+07  4.65076139e+07]
E1 = -706.6411672840134  E_coul = 198.99876494810476
cycle= 1 E= -507.642402335909  delta_E= -3.73  |g|= 0.315  |ddm|= 0.302
    CPU time for cycle= 1      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.42093
diis-c [-0.17718216  1.        ]
  HOMO = -0.234824236143892  LUMO = 90.1168959483126
  mo_energy =
[-1.20256676e+02 -1.22500068e+01 -6.64949445e+00 -6.64949445e+00
 -6.64949445e+00 -1.16237777e+00 -2.34824236e-01 -2.34824236e-01
 -2.34824236e-01  9.01168959e+01  6.96590165e+02  3.90908784e+03
  2.85665462e+04  1.52015337e+05  6.61712024e+05  2.71660663e+06
  1.10432149e+07  4.65076148e+07]
E1 = -706.6115875021351  E_coul = 198.96878337219528
cycle= 2 E= -507.64280412994  delta_E= -0.000402  |g|= 0.00458  |ddm|= 0.0135
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00490287
diis-c [-2.39579031e-05 -6.73526767e-04  1.00067353e+00]
  HOMO = -0.234987444251073  LUMO = 90.1135042039174
  mo_energy =
[-1.20264868e+02 -1.22511145e+01 -6.65121248e+00 -6.65121248e+00
 -6.65121248e+00 -1.16243800e+00 -2.34987444e-01 -2.34987444e-01
 -2.34987444e-01  9.01135042e+01  6.96580057e+02  3.90907272e+03
  2.85665278e+04  1.52015318e+05  6.61712005e+05  2.71660661e+06
  1.10432149e+07  4.65076148e+07]
E1 = -706.6111839263093  E_coul = 198.96837969730254
cycle= 3 E= -507.642804229007  delta_E= -9.91e-08  |g|= 8.89e-05  |ddm|= 0.000186
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.000119819
diis-c [-3.53403747e-10  3.35716141e-05 -2.47652401e-02  1.02473167e+00]
  HOMO = -0.234989427114457  LUMO = 90.1134632281393
  mo_energy =
[-1.20264971e+02 -1.22511287e+01 -6.65123674e+00 -6.65123674e+00
 -6.65123674e+00 -1.16243858e+00 -2.34989427e-01 -2.34989427e-01
 -2.34989427e-01  9.01134632e+01  6.96579951e+02  3.90907259e+03
  2.85665276e+04  1.52015318e+05  6.61712005e+05  2.71660661e+06
  1.10432149e+07  4.65076148e+07]
E1 = -706.6111775361006  E_coul = 198.96837330705986
cycle= 4 E= -507.642804229041  delta_E= -3.4e-11  |g|= 3.41e-07  |ddm|= 3.08e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.6111775361006  E_coul = 198.96837330705986
  HOMO = -0.234989412837377  LUMO = 90.1134635396092
  mo_energy =
[-1.20264970e+02 -1.22511286e+01 -6.65123660e+00 -6.65123660e+00
 -6.65123660e+00 -1.16243858e+00 -2.34989413e-01 -2.34989413e-01
 -2.34989413e-01  9.01134635e+01  6.96579952e+02  3.90907260e+03
  2.85665276e+04  1.52015318e+05  6.61712005e+05  2.71660661e+06
  1.10432149e+07  4.65076148e+07]
E1 = -706.6111775683509  E_coul = 198.96837333930995
Extra cycle  E= -507.642804229041  delta_E= -1.71e-13  |g|= 5.76e-09  |ddm|= 1.43e-08
    CPU time for scf_cycle      0.11 sec, wall time      0.11 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 56.00623004576744
E1 = -706.6111775683509  E_coul = 198.96837333930995
init E= -507.642804229041
    CPU time for initialize scf      0.12 sec, wall time      0.12 sec
  HOMO = -0.234989412674119  LUMO = 90.1134635433017
  mo_energy =
[-1.20264970e+02 -1.22511286e+01 -6.65123659e+00 -6.65123659e+00
 -6.65123659e+00 -1.16243858e+00 -2.34989413e-01 -2.34989413e-01
 -2.34989413e-01  9.01134635e+01  6.96579952e+02  3.90907260e+03
  2.85665276e+04  1.52015318e+05  6.61712005e+05  2.71660661e+06
  1.10432149e+07  4.65076148e+07]
E1 = -706.6111775688267  E_coul = 198.9683733397859
cycle= 1 E= -507.642804229041  delta_E= 5.68e-14  |g|= 2.07e-10  |ddm|= 2.17e-10
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -706.6111775688267  E_coul = 198.9683733397859
  HOMO = -0.234989412671857  LUMO = 90.1134635433561
  mo_energy =
[-1.20264970e+02 -1.22511286e+01 -6.65123659e+00 -6.65123659e+00
 -6.65123659e+00 -1.16243858e+00 -2.34989413e-01 -2.34989413e-01
 -2.34989413e-01  9.01134635e+01  6.96579952e+02  3.90907260e+03
  2.85665276e+04  1.52015318e+05  6.61712005e+05  2.71660661e+06
  1.10432149e+07  4.65076148e+07]
E1 = -706.6111775688343  E_coul = 198.96837333979357
Extra cycle  E= -507.642804229041  delta_E= 1.71e-13  |g|= 1.5e-10  |ddm|= 3.73e-12
    CPU time for scf_cycle      0.19 sec, wall time      0.19 sec
exp = [1.87954849e+07 4.69887121e+06 1.17471780e+06 2.93677999e+05
 7.34255882e+04 1.74687666e+04 2.18190466e+03 4.61736610e+02
 1.25701405e+02 3.85686033e+01 4.74009434e+00 3.91727757e-01
 8.60182856e+00 4.91352743e-01]
grad_E = [-1.40938454e-13  1.60433983e-11 -7.34293840e-12  9.47125901e-09
 -4.55102800e-08  7.04780811e-06 -2.66958124e-05 -7.51761542e-05
  9.86966761e-04  1.40527279e-04 -1.85987909e-03  8.29650402e-03
  2.40368578e-03  1.72325225e-02]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="BFGS",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((14, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.6988712134173084e+06,1.1747178033543271e+06,2.9367945083858178e+05,7.3419865393677101e+04,1.8353927627435987e+04,2.2341424145819028e+03,4.5688904996449571e+02,1.2173317272260677e+02,3.7593061247508530e+01,4.7412722556720146e+00,3.9120358491841306e-01,8.5986297237246045e+00,4.9084868336327880e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "12s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:21:30 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  18795484.8537        1
[INPUT] 0    0    [1    /1   ]  4698871.20902        1
[INPUT] 0    0    [1    /1   ]  1174717.80431        1
[INPUT] 0    0    [1    /1   ]  293676.870127        1
[INPUT] 0    0    [1    /1   ]  73430.0514109        1
[INPUT] 0    0    [1    /1   ]  16780.6429139        1
[INPUT] 0    0    [1    /1   ]  2123.57306287        1
[INPUT] 0    0    [1    /1   ]  458.067395897        1
[INPUT] 0    0    [1    /1   ]  126.345703104        1
[INPUT] 0    0    [1    /1   ]  38.7942191394        1
[INPUT] 0    0    [1    /1   ]  4.73897557533        1
[INPUT] 0    0    [1    /1   ]  0.391908742706       1
[INPUT] 1    0    [1    /1   ]  8.60300684846        1
[INPUT] 1    0    [1    /1   ]  0.491539225952       1

nuclear repulsion = 0
number of shells = 14
number of NR pGTOs = 18
number of NR cGTOs = 18
basis = {'Ar': [[0, [18795484.85370513, 1.0]], [0, [4698871.20901585, 1.0]], [0, [1174717.804310632, 1.0]], [0, [293676.87012685003, 1.0]], [0, [73430.0514108941, 1.0]], [0, [16780.64291391185, 1.0]], [0, [2123.5730628738015, 1.0]], [0, [458.0673958974293, 1.0]], [0, [126.34570310399582, 1.0]], [0, [38.7942191394049, 1.0]], [0, [4.738975575327979, 1.0]], [0, [0.39190874270631715, 1.0]], [1, [8.603006848462746, 1.0]], [1, [0.49153922595217475, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [18795484.85370513]
bas 1, expnt(s) = [4698871.20901585]
bas 2, expnt(s) = [1174717.80431063]
bas 3, expnt(s) = [293676.87012685]
bas 4, expnt(s) = [73430.05141089]
bas 5, expnt(s) = [16780.64291391]
bas 6, expnt(s) = [2123.57306287]
bas 7, expnt(s) = [458.0673959]
bas 8, expnt(s) = [126.3457031]
bas 9, expnt(s) = [38.79421914]
bas 10, expnt(s) = [4.73897558]
bas 11, expnt(s) = [0.39190874]
bas 12, expnt(s) = [8.60300685]
bas 13, expnt(s) = [0.49153923]
CPU time:       455.39
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  0  1  1  0 42 43  0]
 [ 0  0  1  1  0 44 45  0]
 [ 0  0  1  1  0 46 47  0]
 [ 0  1  1  1  0 48 49  0]
 [ 0  1  1  1  0 50 51  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.87954849e+07 7.21199097e+05 4.69887121e+06 2.54982386e+05
 1.17471780e+06 9.01498872e+04 2.93676870e+05 3.18725882e+04
 7.34300514e+04 1.12699087e+04 1.67806429e+04 3.72495878e+03
 2.12357306e+03 7.90342670e+02 4.58067396e+02 2.50156654e+02
 1.26345703e+02 9.52106175e+01 3.87942191e+01 3.92726571e+01
 4.73897558e+00 8.11481040e+00 3.91908743e-01 1.25142186e+00
 8.60300685e+00 4.29830499e+01 4.91539226e-01 1.20069339e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.31893993531334
cond(S) = 55.8584795895181
E1 = -688.8858672513002  E_coul = 184.96911267443073
init E= -503.916754576869
    CPU time for initialize scf      0.03 sec, wall time      0.03 sec
  HOMO = -0.6798200889722  LUMO = 89.4878361898608
  mo_energy =
[-1.21644324e+02 -1.32783860e+01 -7.61785682e+00 -7.61785682e+00
 -7.61785682e+00 -1.65012162e+00 -6.79820089e-01 -6.79820089e-01
 -6.79820089e-01  8.94878362e+01  6.94381177e+02  3.83439491e+03
  2.76457209e+04  1.49789653e+05  6.59162748e+05  2.71419502e+06
  1.10410209e+07  4.65056436e+07]
E1 = -706.6623747179523  E_coul = 199.0178949044341
cycle= 1 E= -507.644479813518  delta_E= -3.73  |g|= 0.314  |ddm|= 0.302
    CPU time for cycle= 1      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.421457
diis-c [-0.17762642  1.        ]
  HOMO = -0.234301583933928  LUMO = 90.8273755253803
  mo_energy =
[-1.20254827e+02 -1.22490480e+01 -6.64824171e+00 -6.64824171e+00
 -6.64824171e+00 -1.16198362e+00 -2.34301584e-01 -2.34301584e-01
 -2.34301584e-01  9.08273755e+01  6.95754812e+02  3.83565681e+03
  2.76468226e+04  1.49790680e+05  6.59163744e+05  2.71419600e+06
  1.10410219e+07  4.65056446e+07]
E1 = -706.6331262882977  E_coul = 198.98824923340993
cycle= 2 E= -507.644877054888  delta_E= -0.000397  |g|= 0.00456  |ddm|= 0.0134
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00488423
diis-c [-2.37663600e-05 -7.09825308e-04  1.00070983e+00]
  HOMO = -0.234462756931856  LUMO = 90.8240088037478
  mo_energy =
[-1.20262937e+02 -1.22501415e+01 -6.64993823e+00 -6.64993823e+00
 -6.64993823e+00 -1.16204306e+00 -2.34462757e-01 -2.34462757e-01
 -2.34462757e-01  9.08240088e+01  6.95744824e+02  3.83564190e+03
  2.76468044e+04  1.49790661e+05  6.59163725e+05  2.71419599e+06
  1.10410219e+07  4.65056446e+07]
E1 = -706.6327290562326  E_coul = 198.98785190418357
cycle= 3 E= -507.644877152049  delta_E= -9.72e-08  |g|= 8.78e-05  |ddm|= 0.000184
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.000118706
diis-c [-3.46991609e-10  3.36448119e-05 -2.46336757e-02  1.02460003e+00]
  HOMO = -0.234464700330381  LUMO = 90.8239684950051
  mo_energy =
[-1.20263038e+02 -1.22501554e+01 -6.64996201e+00 -6.64996201e+00
 -6.64996201e+00 -1.16204363e+00 -2.34464700e-01 -2.34464700e-01
 -2.34464700e-01  9.08239685e+01  6.95744720e+02  3.83564177e+03
  2.76468042e+04  1.49790661e+05  6.59163724e+05  2.71419599e+06
  1.10410219e+07  4.65056446e+07]
E1 = -706.6327228134735  E_coul = 198.98784566139142
cycle= 4 E= -507.644877152082  delta_E= -3.3e-11  |g|= 3.36e-07  |ddm|= 3.02e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.6327228134735  E_coul = 198.98784566139142
  HOMO = -0.234464686390687  LUMO = 90.8239688016256
  mo_energy =
[-1.20263037e+02 -1.22501553e+01 -6.64996187e+00 -6.64996187e+00
 -6.64996187e+00 -1.16204363e+00 -2.34464686e-01 -2.34464686e-01
 -2.34464686e-01  9.08239688e+01  6.95744721e+02  3.83564177e+03
  2.76468042e+04  1.49790661e+05  6.59163724e+05  2.71419599e+06
  1.10410219e+07  4.65056446e+07]
E1 = -706.6327228449371  E_coul = 198.98784569285522
Extra cycle  E= -507.644877152082  delta_E= 1.71e-13  |g|= 5.65e-09  |ddm|= 1.4e-08
    CPU time for scf_cycle      0.11 sec, wall time      0.11 sec
exp = [1.87954849e+07 4.69887121e+06 1.17471780e+06 2.93676870e+05
 7.34300514e+04 1.67806429e+04 2.12357306e+03 4.58067396e+02
 1.26345703e+02 3.87942191e+01 4.73897558e+00 3.91908743e-01
 8.60300685e+00 4.91539226e-01]
E = -507.6448771520819
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="BFGS",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((14, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.6988712134173084e+06,1.1747178033543271e+06,2.9367945083858178e+05,7.3419865393677101e+04,1.8353927627435987e+04,2.2341424145819028e+03,4.5688904996449571e+02,1.2173317272260677e+02,3.7593061247508530e+01,4.7412722556720146e+00,3.9120358491841306e-01,8.5986297237246045e+00,4.9084868336327880e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "12s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:21:31 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  18795484.8537        1
[INPUT] 0    0    [1    /1   ]  4698871.20902        1
[INPUT] 0    0    [1    /1   ]  1174717.80431        1
[INPUT] 0    0    [1    /1   ]  293676.870127        1
[INPUT] 0    0    [1    /1   ]  73430.0514109        1
[INPUT] 0    0    [1    /1   ]  16780.6429139        1
[INPUT] 0    0    [1    /1   ]  2123.57306287        1
[INPUT] 0    0    [1    /1   ]  458.067395897        1
[INPUT] 0    0    [1    /1   ]  126.345703104        1
[INPUT] 0    0    [1    /1   ]  38.7942191394        1
[INPUT] 0    0    [1    /1   ]  4.73897557533        1
[INPUT] 0    0    [1    /1   ]  0.391908742706       1
[INPUT] 1    0    [1    /1   ]  8.60300684846        1
[INPUT] 1    0    [1    /1   ]  0.491539225952       1

nuclear repulsion = 0
number of shells = 14
number of NR pGTOs = 18
number of NR cGTOs = 18
basis = {'Ar': [[0, [18795484.85370513, 1.0]], [0, [4698871.20901585, 1.0]], [0, [1174717.804310632, 1.0]], [0, [293676.87012685003, 1.0]], [0, [73430.0514108941, 1.0]], [0, [16780.64291391185, 1.0]], [0, [2123.5730628738015, 1.0]], [0, [458.0673958974293, 1.0]], [0, [126.34570310399582, 1.0]], [0, [38.7942191394049, 1.0]], [0, [4.738975575327979, 1.0]], [0, [0.39190874270631715, 1.0]], [1, [8.603006848462746, 1.0]], [1, [0.49153922595217475, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [18795484.85370513]
bas 1, expnt(s) = [4698871.20901585]
bas 2, expnt(s) = [1174717.80431063]
bas 3, expnt(s) = [293676.87012685]
bas 4, expnt(s) = [73430.05141089]
bas 5, expnt(s) = [16780.64291391]
bas 6, expnt(s) = [2123.57306287]
bas 7, expnt(s) = [458.0673959]
bas 8, expnt(s) = [126.3457031]
bas 9, expnt(s) = [38.79421914]
bas 10, expnt(s) = [4.73897558]
bas 11, expnt(s) = [0.39190874]
bas 12, expnt(s) = [8.60300685]
bas 13, expnt(s) = [0.49153923]
CPU time:       456.64
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  0  1  1  0 42 43  0]
 [ 0  0  1  1  0 44 45  0]
 [ 0  0  1  1  0 46 47  0]
 [ 0  1  1  1  0 48 49  0]
 [ 0  1  1  1  0 50 51  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.87954849e+07 7.21199097e+05 4.69887121e+06 2.54982386e+05
 1.17471780e+06 9.01498872e+04 2.93676870e+05 3.18725882e+04
 7.34300514e+04 1.12699087e+04 1.67806429e+04 3.72495878e+03
 2.12357306e+03 7.90342670e+02 4.58067396e+02 2.50156654e+02
 1.26345703e+02 9.52106175e+01 3.87942191e+01 3.92726571e+01
 4.73897558e+00 8.11481040e+00 3.91908743e-01 1.25142186e+00
 8.60300685e+00 4.29830499e+01 4.91539226e-01 1.20069339e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.31893993531334
cond(S) = 55.8584795895181
E1 = -688.8858672513002  E_coul = 184.96911267443073
init E= -503.916754576869
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.6798200889722  LUMO = 89.4878361898608
  mo_energy =
[-1.21644324e+02 -1.32783860e+01 -7.61785682e+00 -7.61785682e+00
 -7.61785682e+00 -1.65012162e+00 -6.79820089e-01 -6.79820089e-01
 -6.79820089e-01  8.94878362e+01  6.94381177e+02  3.83439491e+03
  2.76457209e+04  1.49789653e+05  6.59162748e+05  2.71419502e+06
  1.10410209e+07  4.65056436e+07]
E1 = -706.6623747179523  E_coul = 199.0178949044341
cycle= 1 E= -507.644479813518  delta_E= -3.73  |g|= 0.314  |ddm|= 0.302
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.421457
diis-c [-0.17762642  1.        ]
  HOMO = -0.234301583933928  LUMO = 90.8273755253803
  mo_energy =
[-1.20254827e+02 -1.22490480e+01 -6.64824171e+00 -6.64824171e+00
 -6.64824171e+00 -1.16198362e+00 -2.34301584e-01 -2.34301584e-01
 -2.34301584e-01  9.08273755e+01  6.95754812e+02  3.83565681e+03
  2.76468226e+04  1.49790680e+05  6.59163744e+05  2.71419600e+06
  1.10410219e+07  4.65056446e+07]
E1 = -706.6331262882977  E_coul = 198.98824923340993
cycle= 2 E= -507.644877054888  delta_E= -0.000397  |g|= 0.00456  |ddm|= 0.0134
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00488423
diis-c [-2.37663600e-05 -7.09825308e-04  1.00070983e+00]
  HOMO = -0.234462756931856  LUMO = 90.8240088037478
  mo_energy =
[-1.20262937e+02 -1.22501415e+01 -6.64993823e+00 -6.64993823e+00
 -6.64993823e+00 -1.16204306e+00 -2.34462757e-01 -2.34462757e-01
 -2.34462757e-01  9.08240088e+01  6.95744824e+02  3.83564190e+03
  2.76468044e+04  1.49790661e+05  6.59163725e+05  2.71419599e+06
  1.10410219e+07  4.65056446e+07]
E1 = -706.6327290562326  E_coul = 198.98785190418357
cycle= 3 E= -507.644877152049  delta_E= -9.72e-08  |g|= 8.78e-05  |ddm|= 0.000184
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.000118706
diis-c [-3.46991609e-10  3.36448119e-05 -2.46336757e-02  1.02460003e+00]
  HOMO = -0.234464700330381  LUMO = 90.8239684950051
  mo_energy =
[-1.20263038e+02 -1.22501554e+01 -6.64996201e+00 -6.64996201e+00
 -6.64996201e+00 -1.16204363e+00 -2.34464700e-01 -2.34464700e-01
 -2.34464700e-01  9.08239685e+01  6.95744720e+02  3.83564177e+03
  2.76468042e+04  1.49790661e+05  6.59163724e+05  2.71419599e+06
  1.10410219e+07  4.65056446e+07]
E1 = -706.6327228134735  E_coul = 198.98784566139142
cycle= 4 E= -507.644877152082  delta_E= -3.3e-11  |g|= 3.36e-07  |ddm|= 3.02e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.6327228134735  E_coul = 198.98784566139142
  HOMO = -0.234464686390687  LUMO = 90.8239688016256
  mo_energy =
[-1.20263037e+02 -1.22501553e+01 -6.64996187e+00 -6.64996187e+00
 -6.64996187e+00 -1.16204363e+00 -2.34464686e-01 -2.34464686e-01
 -2.34464686e-01  9.08239688e+01  6.95744721e+02  3.83564177e+03
  2.76468042e+04  1.49790661e+05  6.59163724e+05  2.71419599e+06
  1.10410219e+07  4.65056446e+07]
E1 = -706.6327228449371  E_coul = 198.98784569285522
Extra cycle  E= -507.644877152082  delta_E= 1.71e-13  |g|= 5.65e-09  |ddm|= 1.4e-08
    CPU time for scf_cycle      0.10 sec, wall time      0.11 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 55.8584795895181
E1 = -706.6327228449371  E_coul = 198.98784569285522
init E= -507.644877152082
    CPU time for initialize scf      0.12 sec, wall time      0.13 sec
  HOMO = -0.234464686231888  LUMO = 90.8239688052481
  mo_energy =
[-1.20263037e+02 -1.22501553e+01 -6.64996187e+00 -6.64996187e+00
 -6.64996187e+00 -1.16204363e+00 -2.34464686e-01 -2.34464686e-01
 -2.34464686e-01  9.08239688e+01  6.95744721e+02  3.83564177e+03
  2.76468042e+04  1.49790661e+05  6.59163724e+05  2.71419599e+06
  1.10410219e+07  4.65056446e+07]
E1 = -706.6327228453994  E_coul = 198.98784569331698
cycle= 1 E= -507.644877152082  delta_E= -4.55e-13  |g|= 3.71e-10  |ddm|= 2.11e-10
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -706.6327228453994  E_coul = 198.98784569331698
  HOMO = -0.234464686229691  LUMO = 90.8239688052994
  mo_energy =
[-1.20263037e+02 -1.22501553e+01 -6.64996187e+00 -6.64996187e+00
 -6.64996187e+00 -1.16204363e+00 -2.34464686e-01 -2.34464686e-01
 -2.34464686e-01  9.08239688e+01  6.95744721e+02  3.83564177e+03
  2.76468042e+04  1.49790661e+05  6.59163724e+05  2.71419599e+06
  1.10410219e+07  4.65056446e+07]
E1 = -706.632722845406  E_coul = 198.98784569332418
Extra cycle  E= -507.644877152082  delta_E= 5.68e-13  |g|= 1.09e-10  |ddm|= 3.61e-12
    CPU time for scf_cycle      0.19 sec, wall time      0.20 sec
exp = [1.87954849e+07 4.69887121e+06 1.17471780e+06 2.93676870e+05
 7.34300514e+04 1.67806429e+04 2.12357306e+03 4.58067396e+02
 1.26345703e+02 3.87942191e+01 4.73897558e+00 3.91908743e-01
 8.60300685e+00 4.91539226e-01]
grad_E = [-1.59350687e-13  1.46911239e-11 -1.73589051e-11  8.73967504e-09
 -5.32689058e-08  7.70768980e-06 -3.78361961e-05 -9.95799088e-05
  1.32814106e-03  2.12376695e-04 -2.53145604e-03  1.12939175e-02
  3.27480824e-03  2.34717570e-02]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="BFGS",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((14, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.6988712134173084e+06,1.1747178033543271e+06,2.9367945083858178e+05,7.3419865393677101e+04,1.8353927627435987e+04,2.2341424145819028e+03,4.5688904996449571e+02,1.2173317272260677e+02,3.7593061247508530e+01,4.7412722556720146e+00,3.9120358491841306e-01,8.5986297237246045e+00,4.9084868336327880e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "12s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:21:35 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  18795484.8537        1
[INPUT] 0    0    [1    /1   ]  4698871.20554        1
[INPUT] 0    0    [1    /1   ]  1174717.80507        1
[INPUT] 0    0    [1    /1   ]  293674.834331        1
[INPUT] 0    0    [1    /1   ]  73438.0923591        1
[INPUT] 0    0    [1    /1   ]  15539.55269          1
[INPUT] 0    0    [1    /1   ]  2029.94976108        1
[INPUT] 0    0    [1    /1   ]  451.733603032        1
[INPUT] 0    0    [1    /1   ]  127.189641612        1
[INPUT] 0    0    [1    /1   ]  39.107574529         1
[INPUT] 0    0    [1    /1   ]  4.73730518107        1
[INPUT] 0    0    [1    /1   ]  0.392164608896       1
[INPUT] 1    0    [1    /1   ]  8.6046430907         1
[INPUT] 1    0    [1    /1   ]  0.491799816071       1

nuclear repulsion = 0
number of shells = 14
number of NR pGTOs = 18
number of NR cGTOs = 18
basis = {'Ar': [[0, [18795484.853733473, 1.0]], [0, [4698871.205543796, 1.0]], [0, [1174717.8050746843, 1.0]], [0, [293674.8343311171, 1.0]], [0, [73438.09235908503, 1.0]], [0, [15539.552690001661, 1.0]], [0, [2029.9497610808824, 1.0]], [0, [451.73360303205914, 1.0]], [0, [127.18964161182205, 1.0]], [0, [39.10757452895437, 1.0]], [0, [4.737305181070474, 1.0]], [0, [0.3921646088960298, 1.0]], [1, [8.60464309069756, 1.0]], [1, [0.49179981607124934, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [18795484.85373347]
bas 1, expnt(s) = [4698871.2055438]
bas 2, expnt(s) = [1174717.80507468]
bas 3, expnt(s) = [293674.83433112]
bas 4, expnt(s) = [73438.09235909]
bas 5, expnt(s) = [15539.55269]
bas 6, expnt(s) = [2029.94976108]
bas 7, expnt(s) = [451.73360303]
bas 8, expnt(s) = [127.18964161]
bas 9, expnt(s) = [39.10757453]
bas 10, expnt(s) = [4.73730518]
bas 11, expnt(s) = [0.39216461]
bas 12, expnt(s) = [8.60464309]
bas 13, expnt(s) = [0.49179982]
CPU time:       460.63
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  0  1  1  0 42 43  0]
 [ 0  0  1  1  0 44 45  0]
 [ 0  0  1  1  0 46 47  0]
 [ 0  1  1  1  0 48 49  0]
 [ 0  1  1  1  0 50 51  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.87954849e+07 7.21199097e+05 4.69887121e+06 2.54982386e+05
 1.17471781e+06 9.01498872e+04 2.93674834e+05 3.18724225e+04
 7.34380924e+04 1.12708343e+04 1.55395527e+04 3.51636468e+03
 2.02994976e+03 7.64062687e+02 4.51733603e+02 2.47557918e+02
 1.27189642e+02 9.56871968e+01 3.91075745e+01 3.95103326e+01
 4.73730518e+00 8.11266507e+00 3.92164609e-01 1.25203458e+00
 8.60464309e+00 4.29932691e+01 4.91799816e-01 1.20148913e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.31856783353424
cond(S) = 56.27286033157137
E1 = -688.9168689662265  E_coul = 184.98875338935127
init E= -503.928115576875
    CPU time for initialize scf      0.03 sec, wall time      0.03 sec
  HOMO = -0.67941167547876  LUMO = 90.4295805911457
  mo_energy =
[-1.21642822e+02 -1.32775876e+01 -7.61650904e+00 -7.61650904e+00
 -7.61650904e+00 -1.64989274e+00 -6.79411675e-01 -6.79411675e-01
 -6.79411675e-01  9.04295806e+01  6.91852781e+02  3.71410419e+03
  2.60005814e+04  1.45773947e+05  6.54614028e+05  2.70990525e+06
  1.10371212e+07  4.65021406e+07]
E1 = -706.6932175226865  E_coul = 199.04491231362195
cycle= 1 E= -507.648305209065  delta_E= -3.72  |g|= 0.314  |ddm|= 0.303
    CPU time for cycle= 1      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.422076
diis-c [-0.17814854  1.        ]
  HOMO = -0.233568623313629  LUMO = 91.7707663344244
  mo_energy =
[-1.20252525e+02 -1.22477896e+01 -6.64647683e+00 -6.64647683e+00
 -6.64647683e+00 -1.16143885e+00 -2.33568623e-01 -2.33568623e-01
 -2.33568623e-01  9.17707663e+01  6.93228272e+02  3.71537236e+03
  2.60016905e+04  1.45774978e+05  6.54615028e+05  2.70990624e+06
  1.10371222e+07  4.65021416e+07]
E1 = -706.6644021587665  E_coul = 199.0157056305762
cycle= 2 E= -507.64869652819  delta_E= -0.000391  |g|= 0.00452  |ddm|= 0.0133
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00486321
diis-c [-2.35485845e-05 -7.58008296e-04  1.00075801e+00]
  HOMO = -0.233727170554936  LUMO = 91.7674334644875
  mo_energy =
[-1.20260527e+02 -1.22488646e+01 -6.64814544e+00 -6.64814544e+00
 -6.64814544e+00 -1.16149727e+00 -2.33727171e-01 -2.33727171e-01
 -2.33727171e-01  9.17674335e+01  6.93218455e+02  3.71535774e+03
  2.60016726e+04  1.45774959e+05  6.54615008e+05  2.70990622e+06
  1.10371222e+07  4.65021416e+07]
E1 = -706.6640131210208  E_coul = 199.0153164981262
cycle= 3 E= -507.648696622895  delta_E= -9.47e-08  |g|= 8.63e-05  |ddm|= 0.000181
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.000117348
diis-c [-3.38879548e-10  3.38315147e-05 -2.44638393e-02  1.02443001e+00]
  HOMO = -0.233729063240196  LUMO = 91.767394024918
  mo_energy =
[-1.20260625e+02 -1.22488780e+01 -6.64816861e+00 -6.64816861e+00
 -6.64816861e+00 -1.16149782e+00 -2.33729063e-01 -2.33729063e-01
 -2.33729063e-01  9.17673940e+01  6.93218354e+02  3.71535762e+03
  2.60016725e+04  1.45774959e+05  6.54615008e+05  2.70990622e+06
  1.10371222e+07  4.65021416e+07]
E1 = -706.6640070676181  E_coul = 199.01531044469232
cycle= 4 E= -507.648696622926  delta_E= -3.11e-11  |g|= 3.29e-07  |ddm|= 2.94e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.6640070676181  E_coul = 199.01531044469232
  HOMO = -0.233729049738491  LUMO = 91.7673943249958
  mo_energy =
[-1.20260625e+02 -1.22488780e+01 -6.64816847e+00 -6.64816847e+00
 -6.64816847e+00 -1.16149782e+00 -2.33729050e-01 -2.33729050e-01
 -2.33729050e-01  9.17673943e+01  6.93218355e+02  3.71535762e+03
  2.60016725e+04  1.45774959e+05  6.54615008e+05  2.70990622e+06
  1.10371222e+07  4.65021416e+07]
E1 = -706.6640070980662  E_coul = 199.01531047514032
Extra cycle  E= -507.648696622926  delta_E= -1.71e-13  |g|= 5.5e-09  |ddm|= 1.36e-08
    CPU time for scf_cycle      0.11 sec, wall time      0.12 sec
exp = [1.87954849e+07 4.69887121e+06 1.17471781e+06 2.93674834e+05
 7.34380924e+04 1.55395527e+04 2.02994976e+03 4.51733603e+02
 1.27189642e+02 3.91075745e+01 4.73730518e+00 3.92164609e-01
 8.60464309e+00 4.91799816e-01]
E = -507.6486966229259
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="BFGS",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((14, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.6988712134173084e+06,1.1747178033543271e+06,2.9367945083858178e+05,7.3419865393677101e+04,1.8353927627435987e+04,2.2341424145819028e+03,4.5688904996449571e+02,1.2173317272260677e+02,3.7593061247508530e+01,4.7412722556720146e+00,3.9120358491841306e-01,8.5986297237246045e+00,4.9084868336327880e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "12s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:21:36 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  18795484.8537        1
[INPUT] 0    0    [1    /1   ]  4698871.20554        1
[INPUT] 0    0    [1    /1   ]  1174717.80507        1
[INPUT] 0    0    [1    /1   ]  293674.834331        1
[INPUT] 0    0    [1    /1   ]  73438.0923591        1
[INPUT] 0    0    [1    /1   ]  15539.55269          1
[INPUT] 0    0    [1    /1   ]  2029.94976108        1
[INPUT] 0    0    [1    /1   ]  451.733603032        1
[INPUT] 0    0    [1    /1   ]  127.189641612        1
[INPUT] 0    0    [1    /1   ]  39.107574529         1
[INPUT] 0    0    [1    /1   ]  4.73730518107        1
[INPUT] 0    0    [1    /1   ]  0.392164608896       1
[INPUT] 1    0    [1    /1   ]  8.6046430907         1
[INPUT] 1    0    [1    /1   ]  0.491799816071       1

nuclear repulsion = 0
number of shells = 14
number of NR pGTOs = 18
number of NR cGTOs = 18
basis = {'Ar': [[0, [18795484.853733473, 1.0]], [0, [4698871.205543796, 1.0]], [0, [1174717.8050746843, 1.0]], [0, [293674.8343311171, 1.0]], [0, [73438.09235908503, 1.0]], [0, [15539.552690001661, 1.0]], [0, [2029.9497610808824, 1.0]], [0, [451.73360303205914, 1.0]], [0, [127.18964161182205, 1.0]], [0, [39.10757452895437, 1.0]], [0, [4.737305181070474, 1.0]], [0, [0.3921646088960298, 1.0]], [1, [8.60464309069756, 1.0]], [1, [0.49179981607124934, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [18795484.85373347]
bas 1, expnt(s) = [4698871.2055438]
bas 2, expnt(s) = [1174717.80507468]
bas 3, expnt(s) = [293674.83433112]
bas 4, expnt(s) = [73438.09235909]
bas 5, expnt(s) = [15539.55269]
bas 6, expnt(s) = [2029.94976108]
bas 7, expnt(s) = [451.73360303]
bas 8, expnt(s) = [127.18964161]
bas 9, expnt(s) = [39.10757453]
bas 10, expnt(s) = [4.73730518]
bas 11, expnt(s) = [0.39216461]
bas 12, expnt(s) = [8.60464309]
bas 13, expnt(s) = [0.49179982]
CPU time:       461.89
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  0  1  1  0 42 43  0]
 [ 0  0  1  1  0 44 45  0]
 [ 0  0  1  1  0 46 47  0]
 [ 0  1  1  1  0 48 49  0]
 [ 0  1  1  1  0 50 51  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.87954849e+07 7.21199097e+05 4.69887121e+06 2.54982386e+05
 1.17471781e+06 9.01498872e+04 2.93674834e+05 3.18724225e+04
 7.34380924e+04 1.12708343e+04 1.55395527e+04 3.51636468e+03
 2.02994976e+03 7.64062687e+02 4.51733603e+02 2.47557918e+02
 1.27189642e+02 9.56871968e+01 3.91075745e+01 3.95103326e+01
 4.73730518e+00 8.11266507e+00 3.92164609e-01 1.25203458e+00
 8.60464309e+00 4.29932691e+01 4.91799816e-01 1.20148913e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.31856783353424
cond(S) = 56.27286033157137
E1 = -688.9168689662265  E_coul = 184.98875338935127
init E= -503.928115576875
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.67941167547876  LUMO = 90.4295805911457
  mo_energy =
[-1.21642822e+02 -1.32775876e+01 -7.61650904e+00 -7.61650904e+00
 -7.61650904e+00 -1.64989274e+00 -6.79411675e-01 -6.79411675e-01
 -6.79411675e-01  9.04295806e+01  6.91852781e+02  3.71410419e+03
  2.60005814e+04  1.45773947e+05  6.54614028e+05  2.70990525e+06
  1.10371212e+07  4.65021406e+07]
E1 = -706.6932175226865  E_coul = 199.04491231362195
cycle= 1 E= -507.648305209065  delta_E= -3.72  |g|= 0.314  |ddm|= 0.303
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.422076
diis-c [-0.17814854  1.        ]
  HOMO = -0.233568623313629  LUMO = 91.7707663344244
  mo_energy =
[-1.20252525e+02 -1.22477896e+01 -6.64647683e+00 -6.64647683e+00
 -6.64647683e+00 -1.16143885e+00 -2.33568623e-01 -2.33568623e-01
 -2.33568623e-01  9.17707663e+01  6.93228272e+02  3.71537236e+03
  2.60016905e+04  1.45774978e+05  6.54615028e+05  2.70990624e+06
  1.10371222e+07  4.65021416e+07]
E1 = -706.6644021587665  E_coul = 199.0157056305762
cycle= 2 E= -507.64869652819  delta_E= -0.000391  |g|= 0.00452  |ddm|= 0.0133
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00486321
diis-c [-2.35485845e-05 -7.58008296e-04  1.00075801e+00]
  HOMO = -0.233727170554936  LUMO = 91.7674334644875
  mo_energy =
[-1.20260527e+02 -1.22488646e+01 -6.64814544e+00 -6.64814544e+00
 -6.64814544e+00 -1.16149727e+00 -2.33727171e-01 -2.33727171e-01
 -2.33727171e-01  9.17674335e+01  6.93218455e+02  3.71535774e+03
  2.60016726e+04  1.45774959e+05  6.54615008e+05  2.70990622e+06
  1.10371222e+07  4.65021416e+07]
E1 = -706.6640131210208  E_coul = 199.0153164981262
cycle= 3 E= -507.648696622895  delta_E= -9.47e-08  |g|= 8.63e-05  |ddm|= 0.000181
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.000117348
diis-c [-3.38879548e-10  3.38315147e-05 -2.44638393e-02  1.02443001e+00]
  HOMO = -0.233729063240196  LUMO = 91.767394024918
  mo_energy =
[-1.20260625e+02 -1.22488780e+01 -6.64816861e+00 -6.64816861e+00
 -6.64816861e+00 -1.16149782e+00 -2.33729063e-01 -2.33729063e-01
 -2.33729063e-01  9.17673940e+01  6.93218354e+02  3.71535762e+03
  2.60016725e+04  1.45774959e+05  6.54615008e+05  2.70990622e+06
  1.10371222e+07  4.65021416e+07]
E1 = -706.6640070676181  E_coul = 199.01531044469232
cycle= 4 E= -507.648696622926  delta_E= -3.11e-11  |g|= 3.29e-07  |ddm|= 2.94e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.6640070676181  E_coul = 199.01531044469232
  HOMO = -0.233729049738491  LUMO = 91.7673943249958
  mo_energy =
[-1.20260625e+02 -1.22488780e+01 -6.64816847e+00 -6.64816847e+00
 -6.64816847e+00 -1.16149782e+00 -2.33729050e-01 -2.33729050e-01
 -2.33729050e-01  9.17673943e+01  6.93218355e+02  3.71535762e+03
  2.60016725e+04  1.45774959e+05  6.54615008e+05  2.70990622e+06
  1.10371222e+07  4.65021416e+07]
E1 = -706.6640070980662  E_coul = 199.01531047514032
Extra cycle  E= -507.648696622926  delta_E= -1.71e-13  |g|= 5.5e-09  |ddm|= 1.36e-08
    CPU time for scf_cycle      0.10 sec, wall time      0.11 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 56.27286033157137
E1 = -706.6640070980662  E_coul = 199.01531047514032
init E= -507.648696622926
    CPU time for initialize scf      0.13 sec, wall time      0.14 sec
  HOMO = -0.233729049585406  LUMO = 91.7673943285172
  mo_energy =
[-1.20260625e+02 -1.22488780e+01 -6.64816847e+00 -6.64816847e+00
 -6.64816847e+00 -1.16149782e+00 -2.33729050e-01 -2.33729050e-01
 -2.33729050e-01  9.17673943e+01  6.93218355e+02  3.71535762e+03
  2.60016725e+04  1.45774959e+05  6.54615008e+05  2.70990622e+06
  1.10371222e+07  4.65021416e+07]
E1 = -706.6640070985102  E_coul = 199.01531047558458
cycle= 1 E= -507.648696622926  delta_E= 2.84e-13  |g|= 1.62e-10  |ddm|= 2.04e-10
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -706.6640070985102  E_coul = 199.01531047558458
  HOMO = -0.233729049583307  LUMO = 91.7673943285669
  mo_energy =
[-1.20260625e+02 -1.22488780e+01 -6.64816847e+00 -6.64816847e+00
 -6.64816847e+00 -1.16149782e+00 -2.33729050e-01 -2.33729050e-01
 -2.33729050e-01  9.17673943e+01  6.93218355e+02  3.71535762e+03
  2.60016725e+04  1.45774959e+05  6.54615008e+05  2.70990622e+06
  1.10371222e+07  4.65021416e+07]
E1 = -706.6640070985177  E_coul = 199.0153104755918
Extra cycle  E= -507.648696622926  delta_E= -2.27e-13  |g|= 7.23e-11  |ddm|= 3.47e-12
    CPU time for scf_cycle      0.21 sec, wall time      0.21 sec
exp = [1.87954849e+07 4.69887121e+06 1.17471781e+06 2.93674834e+05
 7.34380924e+04 1.55395527e+04 2.02994976e+03 4.51733603e+02
 1.27189642e+02 3.91075745e+01 4.73730518e+00 3.92164609e-01
 8.60464309e+00 4.91799816e-01]
grad_E = [-1.94256550e-13  1.15936585e-11 -3.65266990e-11  7.01956102e-09
 -6.59425910e-08  8.78150887e-06 -5.29160563e-05 -1.29094113e-04
  1.77473519e-03  3.54222616e-04 -3.46214896e-03  1.54701297e-02
  4.49629159e-03  3.21974086e-02]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="BFGS",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((14, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.6988712134173084e+06,1.1747178033543271e+06,2.9367945083858178e+05,7.3419865393677101e+04,1.8353927627435987e+04,2.2341424145819028e+03,4.5688904996449571e+02,1.2173317272260677e+02,3.7593061247508530e+01,4.7412722556720146e+00,3.9120358491841306e-01,8.5986297237246045e+00,4.9084868336327880e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "12s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:21:40 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  18795484.8538        1
[INPUT] 0    0    [1    /1   ]  4698871.1992         1
[INPUT] 0    0    [1    /1   ]  1174717.80646        1
[INPUT] 0    0    [1    /1   ]  293671.113901        1
[INPUT] 0    0    [1    /1   ]  73452.7791986        1
[INPUT] 0    0    [1    /1   ]  13271.4539863        1
[INPUT] 0    0    [1    /1   ]  1869.37714558        1
[INPUT] 0    0    [1    /1   ]  440.037467681        1
[INPUT] 0    0    [1    /1   ]  128.314925021        1
[INPUT] 0    0    [1    /1   ]  39.5628469614        1
[INPUT] 0    0    [1    /1   ]  4.73465905948        1
[INPUT] 0    0    [1    /1   ]  0.392543442754       1
[INPUT] 1    0    [1    /1   ]  8.60700620165        1
[INPUT] 1    0    [1    /1   ]  0.49217952472        1

nuclear repulsion = 0
number of shells = 14
number of NR pGTOs = 18
number of NR cGTOs = 18
basis = {'Ar': [[0, [18795484.853785228, 1.0]], [0, [4698871.199198544, 1.0]], [0, [1174717.8064573265, 1.0]], [0, [293671.1139005653, 1.0]], [0, [73452.77919859155, 1.0]], [0, [13271.45398631992, 1.0]], [0, [1869.377145576661, 1.0]], [0, [440.0374676805234, 1.0]], [0, [128.31492502086053, 1.0]], [0, [39.56284696138233, 1.0]], [0, [4.7346590594791635, 1.0]], [0, [0.39254344275400976, 1.0]], [1, [8.60700620164528, 1.0]], [1, [0.49217952471970233, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [18795484.85378523]
bas 1, expnt(s) = [4698871.19919854]
bas 2, expnt(s) = [1174717.80645733]
bas 3, expnt(s) = [293671.11390057]
bas 4, expnt(s) = [73452.77919859]
bas 5, expnt(s) = [13271.45398632]
bas 6, expnt(s) = [1869.37714558]
bas 7, expnt(s) = [440.03746768]
bas 8, expnt(s) = [128.31492502]
bas 9, expnt(s) = [39.56284696]
bas 10, expnt(s) = [4.73465906]
bas 11, expnt(s) = [0.39254344]
bas 12, expnt(s) = [8.6070062]
bas 13, expnt(s) = [0.49217952]
CPU time:       466.07
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  0  1  1  0 42 43  0]
 [ 0  0  1  1  0 44 45  0]
 [ 0  0  1  1  0 46 47  0]
 [ 0  1  1  1  0 48 49  0]
 [ 0  1  1  1  0 50 51  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.87954849e+07 7.21199097e+05 4.69887120e+06 2.54982385e+05
 1.17471781e+06 9.01498873e+04 2.93671114e+05 3.18721197e+04
 7.34527792e+04 1.12725248e+04 1.32714540e+04 3.12394877e+03
 1.86937715e+03 7.18269989e+02 4.40037468e+02 2.42734925e+02
 1.28314925e+02 9.63214264e+01 3.95628470e+01 3.98548039e+01
 4.73465906e+00 8.10926621e+00 3.92543443e-01 1.25294157e+00
 8.60700620e+00 4.30080288e+01 4.92179525e-01 1.20264880e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.318023494761533
cond(S) = 59.40090665319087
E1 = -688.9789768531257  E_coul = 185.01737773084992
init E= -503.961599122276
    CPU time for initialize scf      0.03 sec, wall time      0.03 sec
  HOMO = -0.678813693438222  LUMO = 91.6926004967712
  mo_energy =
[-1.21641406e+02 -1.32766398e+01 -7.61454182e+00 -7.61454182e+00
 -7.61454182e+00 -1.64957592e+00 -6.78813693e-01 -6.78813693e-01
 -6.78813693e-01  9.16926005e+01  6.85291127e+02  3.50377544e+03
  2.29514288e+04  1.38336253e+05  6.46388346e+05  2.70219483e+06
  1.10301217e+07  4.64958555e+07]
E1 = -706.7408758631897  E_coul = 199.0850355267624
cycle= 1 E= -507.655840336427  delta_E= -3.69  |g|= 0.313  |ddm|= 0.304
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.422491
diis-c [-0.17849839  1.        ]
  HOMO = -0.232494320659699  LUMO = 93.0361617245841
  mo_energy =
[-1.20249715e+02 -1.22461395e+01 -6.64386477e+00 -6.64386477e+00
 -6.64386477e+00 -1.16065926e+00 -2.32494321e-01 -2.32494321e-01
 -2.32494321e-01  9.30361617e+01  6.86669871e+02  3.50505444e+03
  2.29525520e+04  1.38337290e+05  6.46389351e+05  2.70219582e+06
  1.10301227e+07  4.64958565e+07]
E1 = -706.7126319252526  E_coul = 199.05640801540332
cycle= 2 E= -507.656223909849  delta_E= -0.000384  |g|= 0.00447  |ddm|= 0.0131
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00484427
diis-c [-2.33454139e-05 -8.25893441e-04  1.00082589e+00]
  HOMO = -0.232649481934762  LUMO = 93.0328762413976
  mo_energy =
[-1.20257573e+02 -1.22471904e+01 -6.64549706e+00 -6.64549706e+00
 -6.64549706e+00 -1.16071635e+00 -2.32649482e-01 -2.32649482e-01
 -2.32649482e-01  9.30328762e+01  6.86660309e+02  3.50504027e+03
  2.29525345e+04  1.38337272e+05  6.46389332e+05  2.70219580e+06
  1.10301227e+07  4.64958565e+07]
E1 = -706.7122534892102  E_coul = 199.05602948782467
cycle= 3 E= -507.656224001386  delta_E= -9.15e-08  |g|= 8.44e-05  |ddm|= 0.000177
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.000115796
diis-c [-3.28713227e-10  3.43329638e-05 -2.42455065e-02  1.02421117e+00]
  HOMO = -0.232651309071629  LUMO = 93.0328379537075
  mo_energy =
[-1.20257669e+02 -1.22472034e+01 -6.64551943e+00 -6.64551943e+00
 -6.64551943e+00 -1.16071689e+00 -2.32651309e-01 -2.32651309e-01
 -2.32651309e-01  9.30328380e+01  6.86660211e+02  3.50504015e+03
  2.29525344e+04  1.38337271e+05  6.46389332e+05  2.70219580e+06
  1.10301227e+07  4.64958565e+07]
E1 = -706.7122476798803  E_coul = 199.0560236784653
cycle= 4 E= -507.656224001415  delta_E= -2.95e-11  |g|= 3.2e-07  |ddm|= 2.85e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.7122476798803  E_coul = 199.0560236784653
  HOMO = -0.232651296146383  LUMO = 93.0328382445983
  mo_energy =
[-1.20257668e+02 -1.22472033e+01 -6.64551930e+00 -6.64551930e+00
 -6.64551930e+00 -1.16071688e+00 -2.32651296e-01 -2.32651296e-01
 -2.32651296e-01  9.30328382e+01  6.86660212e+02  3.50504016e+03
  2.29525344e+04  1.38337271e+05  6.46389332e+05  2.70219580e+06
  1.10301227e+07  4.64958565e+07]
E1 = -706.7122477090054  E_coul = 199.0560237075903
Extra cycle  E= -507.656224001415  delta_E= -1.14e-13  |g|= 5.3e-09  |ddm|= 1.31e-08
    CPU time for scf_cycle      0.11 sec, wall time      0.11 sec
exp = [1.87954849e+07 4.69887120e+06 1.17471781e+06 2.93671114e+05
 7.34527792e+04 1.32714540e+04 1.86937715e+03 4.40037468e+02
 1.28314925e+02 3.95628470e+01 4.73465906e+00 3.92543443e-01
 8.60700620e+00 4.92179525e-01]
E = -507.6562240014151
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="BFGS",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((14, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.6988712134173084e+06,1.1747178033543271e+06,2.9367945083858178e+05,7.3419865393677101e+04,1.8353927627435987e+04,2.2341424145819028e+03,4.5688904996449571e+02,1.2173317272260677e+02,3.7593061247508530e+01,4.7412722556720146e+00,3.9120358491841306e-01,8.5986297237246045e+00,4.9084868336327880e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "12s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:21:42 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  18795484.8538        1
[INPUT] 0    0    [1    /1   ]  4698871.1992         1
[INPUT] 0    0    [1    /1   ]  1174717.80646        1
[INPUT] 0    0    [1    /1   ]  293671.113901        1
[INPUT] 0    0    [1    /1   ]  73452.7791986        1
[INPUT] 0    0    [1    /1   ]  13271.4539863        1
[INPUT] 0    0    [1    /1   ]  1869.37714558        1
[INPUT] 0    0    [1    /1   ]  440.037467681        1
[INPUT] 0    0    [1    /1   ]  128.314925021        1
[INPUT] 0    0    [1    /1   ]  39.5628469614        1
[INPUT] 0    0    [1    /1   ]  4.73465905948        1
[INPUT] 0    0    [1    /1   ]  0.392543442754       1
[INPUT] 1    0    [1    /1   ]  8.60700620165        1
[INPUT] 1    0    [1    /1   ]  0.49217952472        1

nuclear repulsion = 0
number of shells = 14
number of NR pGTOs = 18
number of NR cGTOs = 18
basis = {'Ar': [[0, [18795484.853785228, 1.0]], [0, [4698871.199198544, 1.0]], [0, [1174717.8064573265, 1.0]], [0, [293671.1139005653, 1.0]], [0, [73452.77919859155, 1.0]], [0, [13271.45398631992, 1.0]], [0, [1869.377145576661, 1.0]], [0, [440.0374676805234, 1.0]], [0, [128.31492502086053, 1.0]], [0, [39.56284696138233, 1.0]], [0, [4.7346590594791635, 1.0]], [0, [0.39254344275400976, 1.0]], [1, [8.60700620164528, 1.0]], [1, [0.49217952471970233, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [18795484.85378523]
bas 1, expnt(s) = [4698871.19919854]
bas 2, expnt(s) = [1174717.80645733]
bas 3, expnt(s) = [293671.11390057]
bas 4, expnt(s) = [73452.77919859]
bas 5, expnt(s) = [13271.45398632]
bas 6, expnt(s) = [1869.37714558]
bas 7, expnt(s) = [440.03746768]
bas 8, expnt(s) = [128.31492502]
bas 9, expnt(s) = [39.56284696]
bas 10, expnt(s) = [4.73465906]
bas 11, expnt(s) = [0.39254344]
bas 12, expnt(s) = [8.6070062]
bas 13, expnt(s) = [0.49217952]
CPU time:       467.36
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  0  1  1  0 42 43  0]
 [ 0  0  1  1  0 44 45  0]
 [ 0  0  1  1  0 46 47  0]
 [ 0  1  1  1  0 48 49  0]
 [ 0  1  1  1  0 50 51  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.87954849e+07 7.21199097e+05 4.69887120e+06 2.54982385e+05
 1.17471781e+06 9.01498873e+04 2.93671114e+05 3.18721197e+04
 7.34527792e+04 1.12725248e+04 1.32714540e+04 3.12394877e+03
 1.86937715e+03 7.18269989e+02 4.40037468e+02 2.42734925e+02
 1.28314925e+02 9.63214264e+01 3.95628470e+01 3.98548039e+01
 4.73465906e+00 8.10926621e+00 3.92543443e-01 1.25294157e+00
 8.60700620e+00 4.30080288e+01 4.92179525e-01 1.20264880e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.318023494761533
cond(S) = 59.40090665319087
E1 = -688.9789768531257  E_coul = 185.01737773084992
init E= -503.961599122276
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.678813693438222  LUMO = 91.6926004967712
  mo_energy =
[-1.21641406e+02 -1.32766398e+01 -7.61454182e+00 -7.61454182e+00
 -7.61454182e+00 -1.64957592e+00 -6.78813693e-01 -6.78813693e-01
 -6.78813693e-01  9.16926005e+01  6.85291127e+02  3.50377544e+03
  2.29514288e+04  1.38336253e+05  6.46388346e+05  2.70219483e+06
  1.10301217e+07  4.64958555e+07]
E1 = -706.7408758631897  E_coul = 199.0850355267624
cycle= 1 E= -507.655840336427  delta_E= -3.69  |g|= 0.313  |ddm|= 0.304
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.422491
diis-c [-0.17849839  1.        ]
  HOMO = -0.232494320659699  LUMO = 93.0361617245841
  mo_energy =
[-1.20249715e+02 -1.22461395e+01 -6.64386477e+00 -6.64386477e+00
 -6.64386477e+00 -1.16065926e+00 -2.32494321e-01 -2.32494321e-01
 -2.32494321e-01  9.30361617e+01  6.86669871e+02  3.50505444e+03
  2.29525520e+04  1.38337290e+05  6.46389351e+05  2.70219582e+06
  1.10301227e+07  4.64958565e+07]
E1 = -706.7126319252526  E_coul = 199.05640801540332
cycle= 2 E= -507.656223909849  delta_E= -0.000384  |g|= 0.00447  |ddm|= 0.0131
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00484427
diis-c [-2.33454139e-05 -8.25893441e-04  1.00082589e+00]
  HOMO = -0.232649481934762  LUMO = 93.0328762413976
  mo_energy =
[-1.20257573e+02 -1.22471904e+01 -6.64549706e+00 -6.64549706e+00
 -6.64549706e+00 -1.16071635e+00 -2.32649482e-01 -2.32649482e-01
 -2.32649482e-01  9.30328762e+01  6.86660309e+02  3.50504027e+03
  2.29525345e+04  1.38337272e+05  6.46389332e+05  2.70219580e+06
  1.10301227e+07  4.64958565e+07]
E1 = -706.7122534892102  E_coul = 199.05602948782467
cycle= 3 E= -507.656224001386  delta_E= -9.15e-08  |g|= 8.44e-05  |ddm|= 0.000177
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.000115796
diis-c [-3.28713227e-10  3.43329638e-05 -2.42455065e-02  1.02421117e+00]
  HOMO = -0.232651309071629  LUMO = 93.0328379537075
  mo_energy =
[-1.20257669e+02 -1.22472034e+01 -6.64551943e+00 -6.64551943e+00
 -6.64551943e+00 -1.16071689e+00 -2.32651309e-01 -2.32651309e-01
 -2.32651309e-01  9.30328380e+01  6.86660211e+02  3.50504015e+03
  2.29525344e+04  1.38337271e+05  6.46389332e+05  2.70219580e+06
  1.10301227e+07  4.64958565e+07]
E1 = -706.7122476798803  E_coul = 199.0560236784653
cycle= 4 E= -507.656224001415  delta_E= -2.95e-11  |g|= 3.2e-07  |ddm|= 2.85e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.7122476798803  E_coul = 199.0560236784653
  HOMO = -0.232651296146383  LUMO = 93.0328382445983
  mo_energy =
[-1.20257668e+02 -1.22472033e+01 -6.64551930e+00 -6.64551930e+00
 -6.64551930e+00 -1.16071688e+00 -2.32651296e-01 -2.32651296e-01
 -2.32651296e-01  9.30328382e+01  6.86660212e+02  3.50504016e+03
  2.29525344e+04  1.38337271e+05  6.46389332e+05  2.70219580e+06
  1.10301227e+07  4.64958565e+07]
E1 = -706.7122477090054  E_coul = 199.0560237075903
Extra cycle  E= -507.656224001415  delta_E= -1.14e-13  |g|= 5.3e-09  |ddm|= 1.31e-08
    CPU time for scf_cycle      0.10 sec, wall time      0.11 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 59.40090665319087
E1 = -706.7122477090054  E_coul = 199.0560237075903
init E= -507.656224001415
    CPU time for initialize scf      0.12 sec, wall time      0.12 sec
  HOMO = -0.232651296000661  LUMO = 93.0328382479932
  mo_energy =
[-1.20257668e+02 -1.22472033e+01 -6.64551930e+00 -6.64551930e+00
 -6.64551930e+00 -1.16071688e+00 -2.32651296e-01 -2.32651296e-01
 -2.32651296e-01  9.30328382e+01  6.86660212e+02  3.50504016e+03
  2.29525344e+04  1.38337271e+05  6.46389332e+05  2.70219580e+06
  1.10301227e+07  4.64958565e+07]
E1 = -706.712247709427  E_coul = 199.05602370801216
cycle= 1 E= -507.656224001415  delta_E= 3.41e-13  |g|= 1.21e-10  |ddm|= 1.95e-10
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -706.712247709427  E_coul = 199.05602370801216
  HOMO = -0.232651295998675  LUMO = 93.0328382480398
  mo_energy =
[-1.20257668e+02 -1.22472033e+01 -6.64551930e+00 -6.64551930e+00
 -6.64551930e+00 -1.16071688e+00 -2.32651296e-01 -2.32651296e-01
 -2.32651296e-01  9.30328382e+01  6.86660212e+02  3.50504016e+03
  2.29525344e+04  1.38337271e+05  6.46389332e+05  2.70219580e+06
  1.10301227e+07  4.64958565e+07]
E1 = -706.7122477094338  E_coul = 199.05602370801893
Extra cycle  E= -507.656224001415  delta_E= -5.68e-14  |g|= 9.31e-11  |ddm|= 3.29e-12
    CPU time for scf_cycle      0.19 sec, wall time      0.19 sec
exp = [1.87954849e+07 4.69887120e+06 1.17471781e+06 2.93671114e+05
 7.34527792e+04 1.32714540e+04 1.86937715e+03 4.40037468e+02
 1.28314925e+02 3.95628470e+01 4.73465906e+00 3.92543443e-01
 8.60700620e+00 4.92179525e-01]
grad_E = [-2.16423976e-13  5.22933805e-12 -5.07826056e-11  3.33533463e-09
 -7.15551980e-08  1.04942954e-05 -7.13571777e-05 -1.59268727e-04
  2.31923229e-03  7.10061604e-04 -4.78304092e-03  2.15054254e-02
  6.29250075e-03  4.49301742e-02]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="BFGS",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((14, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.6988712134173084e+06,1.1747178033543271e+06,2.9367945083858178e+05,7.3419865393677101e+04,1.8353927627435987e+04,2.2341424145819028e+03,4.5688904996449571e+02,1.2173317272260677e+02,3.7593061247508530e+01,4.7412722556720146e+00,3.9120358491841306e-01,8.5986297237246045e+00,4.9084868336327880e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "12s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:21:46 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  18795484.854         1
[INPUT] 0    0    [1    /1   ]  4698871.17382        1
[INPUT] 0    0    [1    /1   ]  1174717.81199        1
[INPUT] 0    0    [1    /1   ]  293656.232178        1
[INPUT] 0    0    [1    /1   ]  73511.5265566        1
[INPUT] 0    0    [1    /1   ]  4199.05917159        1
[INPUT] 0    0    [1    /1   ]  1227.08668356        1
[INPUT] 0    0    [1    /1   ]  393.252926274        1
[INPUT] 0    0    [1    /1   ]  132.816058657        1
[INPUT] 0    0    [1    /1   ]  41.3839366911        1
[INPUT] 0    0    [1    /1   ]  4.72407457311        1
[INPUT] 0    0    [1    /1   ]  0.394058778186       1
[INPUT] 1    0    [1    /1   ]  8.61645864544        1
[INPUT] 1    0    [1    /1   ]  0.493698359314       1

nuclear repulsion = 0
number of shells = 14
number of NR pGTOs = 18
number of NR cGTOs = 18
basis = {'Ar': [[0, [18795484.853992246, 1.0]], [0, [4698871.173817538, 1.0]], [0, [1174717.8119878953, 1.0]], [0, [293656.2321783581, 1.0]], [0, [73511.52655661767, 1.0]], [0, [4199.05917159296, 1.0]], [0, [1227.0866835597753, 1.0]], [0, [393.25292627438023, 1.0]], [0, [132.81605865701448, 1.0]], [0, [41.383936691094135, 1.0]], [0, [4.72407457311392, 1.0]], [0, [0.3940587781859297, 1.0]], [1, [8.61645864543616, 1.0]], [1, [0.4936983593135142, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [18795484.85399225]
bas 1, expnt(s) = [4698871.17381754]
bas 2, expnt(s) = [1174717.8119879]
bas 3, expnt(s) = [293656.23217836]
bas 4, expnt(s) = [73511.52655662]
bas 5, expnt(s) = [4199.05917159]
bas 6, expnt(s) = [1227.08668356]
bas 7, expnt(s) = [393.25292627]
bas 8, expnt(s) = [132.81605866]
bas 9, expnt(s) = [41.38393669]
bas 10, expnt(s) = [4.72407457]
bas 11, expnt(s) = [0.39405878]
bas 12, expnt(s) = [8.61645865]
bas 13, expnt(s) = [0.49369836]
CPU time:       471.36
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  0  1  1  0 42 43  0]
 [ 0  0  1  1  0 44 45  0]
 [ 0  0  1  1  0 46 47  0]
 [ 0  1  1  1  0 48 49  0]
 [ 0  1  1  1  0 50 51  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.87954849e+07 7.21199097e+05 4.69887117e+06 2.54982384e+05
 1.17471781e+06 9.01498876e+04 2.93656232e+05 3.18709083e+04
 7.35115266e+04 1.12792859e+04 4.19905917e+03 1.31788957e+03
 1.22708668e+03 5.23807191e+02 3.93252926e+02 2.23109980e+02
 1.32816059e+02 9.88446039e+01 4.13839367e+01 4.12229317e+01
 4.72407457e+00 8.09566601e+00 3.94058778e-01 1.25656737e+00
 8.61645865e+00 4.30670776e+01 4.93698359e-01 1.20728971e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.31578186861725
cond(S) = 123.01904112356013
E1 = -687.9632558671964  E_coul = 185.13295237503817
init E= -502.830303492158
    CPU time for initialize scf      0.03 sec, wall time      0.03 sec
  HOMO = -0.676434405749361  LUMO = 96.019614878368
  mo_energy =
[-1.21582008e+02 -1.32692875e+01 -7.60654068e+00 -7.60654068e+00
 -7.60654068e+00 -1.64804174e+00 -6.76434406e-01 -6.76434406e-01
 -6.76434406e-01  9.60196149e+01  6.46484717e+02  2.63104635e+03
  1.00146645e+04  1.07702463e+05  6.15395698e+05  2.67371629e+06
  1.10043965e+07  4.64727891e+07]
E1 = -706.8170484523237  E_coul = 199.24585946532483
cycle= 1 E= -507.571188986999  delta_E= -4.74  |g|= 0.312  |ddm|= 0.312
    CPU time for cycle= 1      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.429315
diis-c [-0.18431179  1.        ]
  HOMO = -0.228165874058425  LUMO = 97.371080481067
  mo_energy =
[-1.20185778e+02 -1.22358707e+01 -6.63316234e+00 -6.63316234e+00
 -6.63316234e+00 -1.15720844e+00 -2.28165874e-01 -2.28165874e-01
 -2.28165874e-01  9.73710805e+01  6.47875751e+02  2.63237065e+03
  1.00158734e+04  1.07703517e+05  6.15396710e+05  2.67371729e+06
  1.10043975e+07  4.64727901e+07]
E1 = -706.7906672002638  E_coul = 199.21911980551877
cycle= 2 E= -507.571547394745  delta_E= -0.000358  |g|= 0.0043  |ddm|= 0.013
    CPU time for cycle= 2      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.00489145
diis-c [-2.37645930e-05 -9.37542098e-04  1.00093754e+00]
  HOMO = -0.228310410108071  LUMO = 97.3679628625651
  mo_energy =
[-1.20193154e+02 -1.22368447e+01 -6.63467838e+00 -6.63467838e+00
 -6.63467838e+00 -1.15726139e+00 -2.28310410e-01 -2.28310410e-01
 -2.28310410e-01  9.73679629e+01  6.47867205e+02  2.63235848e+03
  1.00158582e+04  1.07703499e+05  6.15396693e+05  2.67371727e+06
  1.10043974e+07  4.64727901e+07]
E1 = -706.790322629222  E_coul = 199.21877515310737
cycle= 3 E= -507.571547476115  delta_E= -8.14e-08  |g|= 7.85e-05  |ddm|= 0.000169
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.000114662
diis-c [-3.17433681e-10  3.67943042e-05 -2.37897502e-02  1.02375296e+00]
  HOMO = -0.228312050038003  LUMO = 97.3679279639754
  mo_energy =
[-1.20193240e+02 -1.22368563e+01 -6.63469841e+00 -6.63469841e+00
 -6.63469841e+00 -1.15726186e+00 -2.28312050e-01 -2.28312050e-01
 -2.28312050e-01  9.73679280e+01  6.47867119e+02  2.63235838e+03
  1.00158581e+04  1.07703499e+05  6.15396693e+05  2.67371727e+06
  1.10043974e+07  4.64727901e+07]
E1 = -706.7903175379355  E_coul = 199.21877006179602
cycle= 4 E= -507.571547476139  delta_E= -2.48e-11  |g|= 2.98e-07  |ddm|= 2.61e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.7903175379355  E_coul = 199.21877006179602
  HOMO = -0.228312038726295  LUMO = 97.3679282271196
  mo_energy =
[-1.20193240e+02 -1.22368562e+01 -6.63469830e+00 -6.63469830e+00
 -6.63469830e+00 -1.15726186e+00 -2.28312039e-01 -2.28312039e-01
 -2.28312039e-01  9.73679282e+01  6.47867120e+02  2.63235838e+03
  1.00158581e+04  1.07703499e+05  6.15396693e+05  2.67371727e+06
  1.10043974e+07  4.64727901e+07]
E1 = -706.7903175635364  E_coul = 199.218770087397
Extra cycle  E= -507.571547476139  delta_E= 5.68e-14  |g|= 4.84e-09  |ddm|= 1.21e-08
    CPU time for scf_cycle      0.10 sec, wall time      0.11 sec
exp = [1.87954849e+07 4.69887117e+06 1.17471781e+06 2.93656232e+05
 7.35115266e+04 4.19905917e+03 1.22708668e+03 3.93252926e+02
 1.32816059e+02 4.13839367e+01 4.72407457e+00 3.94058778e-01
 8.61645865e+00 4.93698359e-01]
E = -507.5715474761394
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="BFGS",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((14, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.6988712134173084e+06,1.1747178033543271e+06,2.9367945083858178e+05,7.3419865393677101e+04,1.8353927627435987e+04,2.2341424145819028e+03,4.5688904996449571e+02,1.2173317272260677e+02,3.7593061247508530e+01,4.7412722556720146e+00,3.9120358491841306e-01,8.5986297237246045e+00,4.9084868336327880e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "12s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:21:47 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  18795484.854         1
[INPUT] 0    0    [1    /1   ]  4698871.17382        1
[INPUT] 0    0    [1    /1   ]  1174717.81199        1
[INPUT] 0    0    [1    /1   ]  293656.232178        1
[INPUT] 0    0    [1    /1   ]  73511.5265566        1
[INPUT] 0    0    [1    /1   ]  4199.05917159        1
[INPUT] 0    0    [1    /1   ]  1227.08668356        1
[INPUT] 0    0    [1    /1   ]  393.252926274        1
[INPUT] 0    0    [1    /1   ]  132.816058657        1
[INPUT] 0    0    [1    /1   ]  41.3839366911        1
[INPUT] 0    0    [1    /1   ]  4.72407457311        1
[INPUT] 0    0    [1    /1   ]  0.394058778186       1
[INPUT] 1    0    [1    /1   ]  8.61645864544        1
[INPUT] 1    0    [1    /1   ]  0.493698359314       1

nuclear repulsion = 0
number of shells = 14
number of NR pGTOs = 18
number of NR cGTOs = 18
basis = {'Ar': [[0, [18795484.853992246, 1.0]], [0, [4698871.173817538, 1.0]], [0, [1174717.8119878953, 1.0]], [0, [293656.2321783581, 1.0]], [0, [73511.52655661767, 1.0]], [0, [4199.05917159296, 1.0]], [0, [1227.0866835597753, 1.0]], [0, [393.25292627438023, 1.0]], [0, [132.81605865701448, 1.0]], [0, [41.383936691094135, 1.0]], [0, [4.72407457311392, 1.0]], [0, [0.3940587781859297, 1.0]], [1, [8.61645864543616, 1.0]], [1, [0.4936983593135142, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [18795484.85399225]
bas 1, expnt(s) = [4698871.17381754]
bas 2, expnt(s) = [1174717.8119879]
bas 3, expnt(s) = [293656.23217836]
bas 4, expnt(s) = [73511.52655662]
bas 5, expnt(s) = [4199.05917159]
bas 6, expnt(s) = [1227.08668356]
bas 7, expnt(s) = [393.25292627]
bas 8, expnt(s) = [132.81605866]
bas 9, expnt(s) = [41.38393669]
bas 10, expnt(s) = [4.72407457]
bas 11, expnt(s) = [0.39405878]
bas 12, expnt(s) = [8.61645865]
bas 13, expnt(s) = [0.49369836]
CPU time:       472.63
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  0  1  1  0 42 43  0]
 [ 0  0  1  1  0 44 45  0]
 [ 0  0  1  1  0 46 47  0]
 [ 0  1  1  1  0 48 49  0]
 [ 0  1  1  1  0 50 51  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.87954849e+07 7.21199097e+05 4.69887117e+06 2.54982384e+05
 1.17471781e+06 9.01498876e+04 2.93656232e+05 3.18709083e+04
 7.35115266e+04 1.12792859e+04 4.19905917e+03 1.31788957e+03
 1.22708668e+03 5.23807191e+02 3.93252926e+02 2.23109980e+02
 1.32816059e+02 9.88446039e+01 4.13839367e+01 4.12229317e+01
 4.72407457e+00 8.09566601e+00 3.94058778e-01 1.25656737e+00
 8.61645865e+00 4.30670776e+01 4.93698359e-01 1.20728971e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.31578186861725
cond(S) = 123.01904112356013
E1 = -687.9632558671964  E_coul = 185.13295237503817
init E= -502.830303492158
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.676434405749361  LUMO = 96.019614878368
  mo_energy =
[-1.21582008e+02 -1.32692875e+01 -7.60654068e+00 -7.60654068e+00
 -7.60654068e+00 -1.64804174e+00 -6.76434406e-01 -6.76434406e-01
 -6.76434406e-01  9.60196149e+01  6.46484717e+02  2.63104635e+03
  1.00146645e+04  1.07702463e+05  6.15395698e+05  2.67371629e+06
  1.10043965e+07  4.64727891e+07]
E1 = -706.8170484523237  E_coul = 199.24585946532483
cycle= 1 E= -507.571188986999  delta_E= -4.74  |g|= 0.312  |ddm|= 0.312
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.429315
diis-c [-0.18431179  1.        ]
  HOMO = -0.228165874058425  LUMO = 97.371080481067
  mo_energy =
[-1.20185778e+02 -1.22358707e+01 -6.63316234e+00 -6.63316234e+00
 -6.63316234e+00 -1.15720844e+00 -2.28165874e-01 -2.28165874e-01
 -2.28165874e-01  9.73710805e+01  6.47875751e+02  2.63237065e+03
  1.00158734e+04  1.07703517e+05  6.15396710e+05  2.67371729e+06
  1.10043975e+07  4.64727901e+07]
E1 = -706.7906672002638  E_coul = 199.21911980551877
cycle= 2 E= -507.571547394745  delta_E= -0.000358  |g|= 0.0043  |ddm|= 0.013
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00489145
diis-c [-2.37645930e-05 -9.37542098e-04  1.00093754e+00]
  HOMO = -0.228310410108071  LUMO = 97.3679628625651
  mo_energy =
[-1.20193154e+02 -1.22368447e+01 -6.63467838e+00 -6.63467838e+00
 -6.63467838e+00 -1.15726139e+00 -2.28310410e-01 -2.28310410e-01
 -2.28310410e-01  9.73679629e+01  6.47867205e+02  2.63235848e+03
  1.00158582e+04  1.07703499e+05  6.15396693e+05  2.67371727e+06
  1.10043974e+07  4.64727901e+07]
E1 = -706.790322629222  E_coul = 199.21877515310737
cycle= 3 E= -507.571547476115  delta_E= -8.14e-08  |g|= 7.85e-05  |ddm|= 0.000169
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.000114662
diis-c [-3.17433681e-10  3.67943042e-05 -2.37897502e-02  1.02375296e+00]
  HOMO = -0.228312050038003  LUMO = 97.3679279639754
  mo_energy =
[-1.20193240e+02 -1.22368563e+01 -6.63469841e+00 -6.63469841e+00
 -6.63469841e+00 -1.15726186e+00 -2.28312050e-01 -2.28312050e-01
 -2.28312050e-01  9.73679280e+01  6.47867119e+02  2.63235838e+03
  1.00158581e+04  1.07703499e+05  6.15396693e+05  2.67371727e+06
  1.10043974e+07  4.64727901e+07]
E1 = -706.7903175379355  E_coul = 199.21877006179602
cycle= 4 E= -507.571547476139  delta_E= -2.48e-11  |g|= 2.98e-07  |ddm|= 2.61e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.7903175379355  E_coul = 199.21877006179602
  HOMO = -0.228312038726295  LUMO = 97.3679282271196
  mo_energy =
[-1.20193240e+02 -1.22368562e+01 -6.63469830e+00 -6.63469830e+00
 -6.63469830e+00 -1.15726186e+00 -2.28312039e-01 -2.28312039e-01
 -2.28312039e-01  9.73679282e+01  6.47867120e+02  2.63235838e+03
  1.00158581e+04  1.07703499e+05  6.15396693e+05  2.67371727e+06
  1.10043974e+07  4.64727901e+07]
E1 = -706.7903175635364  E_coul = 199.218770087397
Extra cycle  E= -507.571547476139  delta_E= 5.68e-14  |g|= 4.84e-09  |ddm|= 1.21e-08
    CPU time for scf_cycle      0.10 sec, wall time      0.11 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 123.01904112356013
E1 = -706.7903175635364  E_coul = 199.218770087397
init E= -507.571547476139
    CPU time for initialize scf      0.12 sec, wall time      0.12 sec
  HOMO = -0.228312038600138  LUMO = 97.3679282301538
  mo_energy =
[-1.20193240e+02 -1.22368562e+01 -6.63469830e+00 -6.63469830e+00
 -6.63469830e+00 -1.15726186e+00 -2.28312039e-01 -2.28312039e-01
 -2.28312039e-01  9.73679282e+01  6.47867120e+02  2.63235838e+03
  1.00158581e+04  1.07703499e+05  6.15396693e+05  2.67371727e+06
  1.10043974e+07  4.64727901e+07]
E1 = -706.7903175639001  E_coul = 199.21877008776073
cycle= 1 E= -507.571547476139  delta_E= 5.68e-14  |g|= 1.8e-10  |ddm|= 1.76e-10
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -706.7903175639001  E_coul = 199.21877008776073
  HOMO = -0.22831203859843  LUMO = 97.3679282301937
  mo_energy =
[-1.20193240e+02 -1.22368562e+01 -6.63469830e+00 -6.63469830e+00
 -6.63469830e+00 -1.15726186e+00 -2.28312039e-01 -2.28312039e-01
 -2.28312039e-01  9.73679282e+01  6.47867120e+02  2.63235838e+03
  1.00158581e+04  1.07703499e+05  6.15396693e+05  2.67371727e+06
  1.10043974e+07  4.64727901e+07]
E1 = -706.7903175639058  E_coul = 199.21877008776627
Extra cycle  E= -507.571547476139  delta_E= -1.14e-13  |g|= 1.12e-10  |ddm|= 2.93e-12
    CPU time for scf_cycle      0.19 sec, wall time      0.19 sec
exp = [1.87954849e+07 4.69887117e+06 1.17471781e+06 2.93656232e+05
 7.35115266e+04 4.19905917e+03 1.22708668e+03 3.93252926e+02
 1.32816059e+02 4.13839367e+01 4.72407457e+00 3.94058778e-01
 8.61645865e+00 4.93698359e-01]
grad_E = [ 4.54526276e-12  5.56180893e-11  2.37552843e-09  2.45620321e-08
  1.52616963e-06 -8.95370903e-05  1.98978224e-04 -8.04630255e-04
  4.11886455e-03  2.45681426e-03 -7.46834301e-03  4.62882169e-02
  1.35769085e-02  9.57815845e-02]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="BFGS",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((14, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.6988712134173084e+06,1.1747178033543271e+06,2.9367945083858178e+05,7.3419865393677101e+04,1.8353927627435987e+04,2.2341424145819028e+03,4.5688904996449571e+02,1.2173317272260677e+02,3.7593061247508530e+01,4.7412722556720146e+00,3.9120358491841306e-01,8.5986297237246045e+00,4.9084868336327880e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "12s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:21:51 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  18795484.8539        1
[INPUT] 0    0    [1    /1   ]  4698871.19044        1
[INPUT] 0    0    [1    /1   ]  1174717.80837        1
[INPUT] 0    0    [1    /1   ]  293665.978134        1
[INPUT] 0    0    [1    /1   ]  73473.0532451        1
[INPUT] 0    0    [1    /1   ]  10140.5190648        1
[INPUT] 0    0    [1    /1   ]  1647.71906319        1
[INPUT] 0    0    [1    /1   ]  423.891857016        1
[INPUT] 0    0    [1    /1   ]  129.868291775        1
[INPUT] 0    0    [1    /1   ]  40.1913153588        1
[INPUT] 0    0    [1    /1   ]  4.73100629318        1
[INPUT] 0    0    [1    /1   ]  0.393066393609       1
[INPUT] 1    0    [1    /1   ]  8.61026829362        1
[INPUT] 1    0    [1    /1   ]  0.492703683155       1

nuclear repulsion = 0
number of shells = 14
number of NR pGTOs = 18
number of NR cGTOs = 18
basis = {'Ar': [[0, [18795484.85385667, 1.0]], [0, [4698871.190439415, 1.0]], [0, [1174717.808365957, 1.0]], [0, [293665.97813380224, 1.0]], [0, [73473.05324514121, 1.0]], [0, [10140.519064805852, 1.0]], [0, [1647.7190631903297, 1.0]], [0, [423.89185701576935, 1.0]], [0, [129.86829177524382, 1.0]], [0, [40.19131535880148, 1.0]], [0, [4.731006293184928, 1.0]], [0, [0.3930663936086071, 1.0]], [1, [8.61026829362462, 1.0]], [1, [0.4927036831549205, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [18795484.85385667]
bas 1, expnt(s) = [4698871.19043942]
bas 2, expnt(s) = [1174717.80836596]
bas 3, expnt(s) = [293665.9781338]
bas 4, expnt(s) = [73473.05324514]
bas 5, expnt(s) = [10140.51906481]
bas 6, expnt(s) = [1647.71906319]
bas 7, expnt(s) = [423.89185702]
bas 8, expnt(s) = [129.86829178]
bas 9, expnt(s) = [40.19131536]
bas 10, expnt(s) = [4.73100629]
bas 11, expnt(s) = [0.39306639]
bas 12, expnt(s) = [8.61026829]
bas 13, expnt(s) = [0.49270368]
CPU time:       476.64
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  0  1  1  0 42 43  0]
 [ 0  0  1  1  0 44 45  0]
 [ 0  0  1  1  0 46 47  0]
 [ 0  1  1  1  0 48 49  0]
 [ 0  1  1  1  0 50 51  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.87954849e+07 7.21199097e+05 4.69887119e+06 2.54982385e+05
 1.17471781e+06 9.01498874e+04 2.93665978e+05 3.18717016e+04
 7.34730532e+04 1.12748582e+04 1.01405191e+04 2.55305496e+03
 1.64771906e+03 6.53397395e+02 4.23891857e+02 2.36024089e+02
 1.29868292e+02 9.71946523e+01 4.01913154e+01 4.03286969e+01
 4.73100629e+00 8.10457356e+00 3.93066394e-01 1.25419325e+00
 8.61026829e+00 4.30284050e+01 4.92703683e-01 1.20425000e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.317261689832197
cond(S) = 68.26742060461329
E1 = -689.0598163571607  E_coul = 185.0570378474153
init E= -504.002778509745
    CPU time for initialize scf      0.03 sec, wall time      0.03 sec
  HOMO = -0.677990304210542  LUMO = 93.3342807158438
  mo_energy =
[-1.21639080e+02 -1.32755961e+01 -7.61180525e+00 -7.61180525e+00
 -7.61180525e+00 -1.64916950e+00 -6.77990304e-01 -6.77990304e-01
 -6.77990304e-01  9.33342807e+01  6.75159570e+02  3.21320302e+03
  1.85981774e+04  1.27825395e+05  6.35225365e+05  2.69183075e+06
  1.10207345e+07  4.64874318e+07]
E1 = -706.8085606666559  E_coul = 199.1424830683847
cycle= 1 E= -507.666077598271  delta_E= -3.66  |g|= 0.312  |ddm|= 0.305
    CPU time for cycle= 1      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.421798
diis-c [-0.17791395  1.        ]
  HOMO = -0.230998834644101  LUMO = 94.6812981765066
  mo_energy =
[-1.20244954e+02 -1.22440406e+01 -6.64012966e+00 -6.64012966e+00
 -6.64012966e+00 -1.15960151e+00 -2.30998835e-01 -2.30998835e-01
 -2.30998835e-01  9.46812982e+01  6.76543636e+02  3.21449835e+03
  1.85993250e+04  1.27826442e+05  6.35226379e+05  2.69183175e+06
  1.10207355e+07  4.64874328e+07]
E1 = -706.7810520930043  E_coul = 199.11460079549963
cycle= 2 E= -507.666451297505  delta_E= -0.000374  |g|= 0.00441  |ddm|= 0.013
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00483162
diis-c [-2.31924974e-05 -9.25497123e-04  1.00092550e+00]
  HOMO = -0.231149755485396  LUMO = 94.6780777946441
  mo_energy =
[-1.20252623e+02 -1.22450611e+01 -6.64171598e+00 -6.64171598e+00
 -6.64171598e+00 -1.15965694e+00 -2.31149755e-01 -2.31149755e-01
 -2.31149755e-01  9.46780778e+01  6.76534428e+02  3.21448483e+03
  1.85993081e+04  1.27826424e+05  6.35226361e+05  2.69183173e+06
  1.10207355e+07  4.64874328e+07]
E1 = -706.7806869618177  E_coul = 199.11423557667248
cycle= 3 E= -507.666451385145  delta_E= -8.76e-08  |g|= 8.2e-05  |ddm|= 0.000173
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.000114131
diis-c [-3.16167617e-10  3.54556267e-05 -2.39774285e-02  1.02394197e+00]
  HOMO = -0.231151499928461  LUMO = 94.6780410246163
  mo_energy =
[-1.20252714e+02 -1.22450735e+01 -6.64173733e+00 -6.64173733e+00
 -6.64173733e+00 -1.15965745e+00 -2.31151500e-01 -2.31151500e-01
 -2.31151500e-01  9.46780410e+01  6.76534335e+02  3.21448472e+03
  1.85993080e+04  1.27826424e+05  6.35226361e+05  2.69183173e+06
  1.10207355e+07  4.64874328e+07]
E1 = -706.7806814572618  E_coul = 199.11423007208867
cycle= 4 E= -507.666451385173  delta_E= -2.8e-11  |g|= 3.08e-07  |ddm|= 2.73e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.7806814572618  E_coul = 199.11423007208867
  HOMO = -0.23115148774237  LUMO = 94.6780413027989
  mo_energy =
[-1.20252714e+02 -1.22450734e+01 -6.64173721e+00 -6.64173721e+00
 -6.64173721e+00 -1.15965744e+00 -2.31151488e-01 -2.31151488e-01
 -2.31151488e-01  9.46780413e+01  6.76534336e+02  3.21448472e+03
  1.85993080e+04  1.27826424e+05  6.35226361e+05  2.69183173e+06
  1.10207355e+07  4.64874328e+07]
E1 = -706.7806814847102  E_coul = 199.11423009953708
Extra cycle  E= -507.666451385173  delta_E= 5.68e-14  |g|= 5.06e-09  |ddm|= 1.25e-08
    CPU time for scf_cycle      0.10 sec, wall time      0.11 sec
exp = [1.87954849e+07 4.69887119e+06 1.17471781e+06 2.93665978e+05
 7.34730532e+04 1.01405191e+04 1.64771906e+03 4.23891857e+02
 1.29868292e+02 4.01913154e+01 4.73100629e+00 3.93066394e-01
 8.61026829e+00 4.92703683e-01]
E = -507.6664513851731
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="BFGS",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((14, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.6988712134173084e+06,1.1747178033543271e+06,2.9367945083858178e+05,7.3419865393677101e+04,1.8353927627435987e+04,2.2341424145819028e+03,4.5688904996449571e+02,1.2173317272260677e+02,3.7593061247508530e+01,4.7412722556720146e+00,3.9120358491841306e-01,8.5986297237246045e+00,4.9084868336327880e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "12s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:21:52 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  18795484.8539        1
[INPUT] 0    0    [1    /1   ]  4698871.19044        1
[INPUT] 0    0    [1    /1   ]  1174717.80837        1
[INPUT] 0    0    [1    /1   ]  293665.978134        1
[INPUT] 0    0    [1    /1   ]  73473.0532451        1
[INPUT] 0    0    [1    /1   ]  10140.5190648        1
[INPUT] 0    0    [1    /1   ]  1647.71906319        1
[INPUT] 0    0    [1    /1   ]  423.891857016        1
[INPUT] 0    0    [1    /1   ]  129.868291775        1
[INPUT] 0    0    [1    /1   ]  40.1913153588        1
[INPUT] 0    0    [1    /1   ]  4.73100629318        1
[INPUT] 0    0    [1    /1   ]  0.393066393609       1
[INPUT] 1    0    [1    /1   ]  8.61026829362        1
[INPUT] 1    0    [1    /1   ]  0.492703683155       1

nuclear repulsion = 0
number of shells = 14
number of NR pGTOs = 18
number of NR cGTOs = 18
basis = {'Ar': [[0, [18795484.85385667, 1.0]], [0, [4698871.190439415, 1.0]], [0, [1174717.808365957, 1.0]], [0, [293665.97813380224, 1.0]], [0, [73473.05324514121, 1.0]], [0, [10140.519064805852, 1.0]], [0, [1647.7190631903297, 1.0]], [0, [423.89185701576935, 1.0]], [0, [129.86829177524382, 1.0]], [0, [40.19131535880148, 1.0]], [0, [4.731006293184928, 1.0]], [0, [0.3930663936086071, 1.0]], [1, [8.61026829362462, 1.0]], [1, [0.4927036831549205, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [18795484.85385667]
bas 1, expnt(s) = [4698871.19043942]
bas 2, expnt(s) = [1174717.80836596]
bas 3, expnt(s) = [293665.9781338]
bas 4, expnt(s) = [73473.05324514]
bas 5, expnt(s) = [10140.51906481]
bas 6, expnt(s) = [1647.71906319]
bas 7, expnt(s) = [423.89185702]
bas 8, expnt(s) = [129.86829178]
bas 9, expnt(s) = [40.19131536]
bas 10, expnt(s) = [4.73100629]
bas 11, expnt(s) = [0.39306639]
bas 12, expnt(s) = [8.61026829]
bas 13, expnt(s) = [0.49270368]
CPU time:       477.92
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  0  1  1  0 42 43  0]
 [ 0  0  1  1  0 44 45  0]
 [ 0  0  1  1  0 46 47  0]
 [ 0  1  1  1  0 48 49  0]
 [ 0  1  1  1  0 50 51  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.87954849e+07 7.21199097e+05 4.69887119e+06 2.54982385e+05
 1.17471781e+06 9.01498874e+04 2.93665978e+05 3.18717016e+04
 7.34730532e+04 1.12748582e+04 1.01405191e+04 2.55305496e+03
 1.64771906e+03 6.53397395e+02 4.23891857e+02 2.36024089e+02
 1.29868292e+02 9.71946523e+01 4.01913154e+01 4.03286969e+01
 4.73100629e+00 8.10457356e+00 3.93066394e-01 1.25419325e+00
 8.61026829e+00 4.30284050e+01 4.92703683e-01 1.20425000e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.317261689832197
cond(S) = 68.26742060461329
E1 = -689.0598163571607  E_coul = 185.0570378474153
init E= -504.002778509745
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.677990304210542  LUMO = 93.3342807158438
  mo_energy =
[-1.21639080e+02 -1.32755961e+01 -7.61180525e+00 -7.61180525e+00
 -7.61180525e+00 -1.64916950e+00 -6.77990304e-01 -6.77990304e-01
 -6.77990304e-01  9.33342807e+01  6.75159570e+02  3.21320302e+03
  1.85981774e+04  1.27825395e+05  6.35225365e+05  2.69183075e+06
  1.10207345e+07  4.64874318e+07]
E1 = -706.8085606666559  E_coul = 199.1424830683847
cycle= 1 E= -507.666077598271  delta_E= -3.66  |g|= 0.312  |ddm|= 0.305
    CPU time for cycle= 1      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.421798
diis-c [-0.17791395  1.        ]
  HOMO = -0.230998834644101  LUMO = 94.6812981765066
  mo_energy =
[-1.20244954e+02 -1.22440406e+01 -6.64012966e+00 -6.64012966e+00
 -6.64012966e+00 -1.15960151e+00 -2.30998835e-01 -2.30998835e-01
 -2.30998835e-01  9.46812982e+01  6.76543636e+02  3.21449835e+03
  1.85993250e+04  1.27826442e+05  6.35226379e+05  2.69183175e+06
  1.10207355e+07  4.64874328e+07]
E1 = -706.7810520930043  E_coul = 199.11460079549963
cycle= 2 E= -507.666451297505  delta_E= -0.000374  |g|= 0.00441  |ddm|= 0.013
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00483162
diis-c [-2.31924974e-05 -9.25497123e-04  1.00092550e+00]
  HOMO = -0.231149755485396  LUMO = 94.6780777946441
  mo_energy =
[-1.20252623e+02 -1.22450611e+01 -6.64171598e+00 -6.64171598e+00
 -6.64171598e+00 -1.15965694e+00 -2.31149755e-01 -2.31149755e-01
 -2.31149755e-01  9.46780778e+01  6.76534428e+02  3.21448483e+03
  1.85993081e+04  1.27826424e+05  6.35226361e+05  2.69183173e+06
  1.10207355e+07  4.64874328e+07]
E1 = -706.7806869618177  E_coul = 199.11423557667248
cycle= 3 E= -507.666451385145  delta_E= -8.76e-08  |g|= 8.2e-05  |ddm|= 0.000173
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.000114131
diis-c [-3.16167617e-10  3.54556267e-05 -2.39774285e-02  1.02394197e+00]
  HOMO = -0.231151499928461  LUMO = 94.6780410246163
  mo_energy =
[-1.20252714e+02 -1.22450735e+01 -6.64173733e+00 -6.64173733e+00
 -6.64173733e+00 -1.15965745e+00 -2.31151500e-01 -2.31151500e-01
 -2.31151500e-01  9.46780410e+01  6.76534335e+02  3.21448472e+03
  1.85993080e+04  1.27826424e+05  6.35226361e+05  2.69183173e+06
  1.10207355e+07  4.64874328e+07]
E1 = -706.7806814572618  E_coul = 199.11423007208867
cycle= 4 E= -507.666451385173  delta_E= -2.8e-11  |g|= 3.08e-07  |ddm|= 2.73e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.7806814572618  E_coul = 199.11423007208867
  HOMO = -0.23115148774237  LUMO = 94.6780413027989
  mo_energy =
[-1.20252714e+02 -1.22450734e+01 -6.64173721e+00 -6.64173721e+00
 -6.64173721e+00 -1.15965744e+00 -2.31151488e-01 -2.31151488e-01
 -2.31151488e-01  9.46780413e+01  6.76534336e+02  3.21448472e+03
  1.85993080e+04  1.27826424e+05  6.35226361e+05  2.69183173e+06
  1.10207355e+07  4.64874328e+07]
E1 = -706.7806814847102  E_coul = 199.11423009953708
Extra cycle  E= -507.666451385173  delta_E= 5.68e-14  |g|= 5.06e-09  |ddm|= 1.25e-08
    CPU time for scf_cycle      0.10 sec, wall time      0.11 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 68.26742060461329
E1 = -706.7806814847102  E_coul = 199.11423009953708
init E= -507.666451385173
    CPU time for initialize scf      0.12 sec, wall time      0.12 sec
  HOMO = -0.231151487605837  LUMO = 94.6780413060252
  mo_energy =
[-1.20252714e+02 -1.22450734e+01 -6.64173721e+00 -6.64173721e+00
 -6.64173721e+00 -1.15965744e+00 -2.31151488e-01 -2.31151488e-01
 -2.31151488e-01  9.46780413e+01  6.76534336e+02  3.21448472e+03
  1.85993080e+04  1.27826424e+05  6.35226361e+05  2.69183173e+06
  1.10207355e+07  4.64874328e+07]
E1 = -706.7806814851039  E_coul = 199.114230099931
cycle= 1 E= -507.666451385173  delta_E= 2.27e-13  |g|= 2.03e-10  |ddm|= 1.84e-10
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -706.7806814851039  E_coul = 199.114230099931
  HOMO = -0.231151487603984  LUMO = 94.6780413060654
  mo_energy =
[-1.20252714e+02 -1.22450734e+01 -6.64173721e+00 -6.64173721e+00
 -6.64173721e+00 -1.15965744e+00 -2.31151488e-01 -2.31151488e-01
 -2.31151488e-01  9.46780413e+01  6.76534336e+02  3.21448472e+03
  1.85993080e+04  1.27826424e+05  6.35226361e+05  2.69183173e+06
  1.10207355e+07  4.64874328e+07]
E1 = -706.78068148511  E_coul = 199.11423009993732
Extra cycle  E= -507.666451385173  delta_E= 2.27e-13  |g|= 9.01e-11  |ddm|= 3.11e-12
    CPU time for scf_cycle      0.19 sec, wall time      0.19 sec
exp = [1.87954849e+07 4.69887119e+06 1.17471781e+06 2.93665978e+05
 7.34730532e+04 1.01405191e+04 1.64771906e+03 4.23891857e+02
 1.29868292e+02 4.01913154e+01 4.73100629e+00 3.93066394e-01
 8.61026829e+00 4.92703683e-01]
grad_E = [ 3.68787091e-14 -1.16342275e-12  7.40223445e-11 -9.59206457e-10
  2.03199643e-08  1.07596046e-05 -7.37398285e-05 -1.74445133e-04
  2.67412932e-03  1.82519982e-03 -6.36907045e-03  2.95502254e-02
  8.86243264e-03  6.25250743e-02]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="BFGS",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((14, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([4.6988712134173084e+06,1.1747178033543271e+06,2.9367945083858178e+05,7.3419865393677101e+04,1.8353927627435987e+04,2.2341424145819028e+03,4.5688904996449571e+02,1.2173317272260677e+02,3.7593061247508530e+01,4.7412722556720146e+00,3.9120358491841306e-01,8.5986297237246045e+00,4.9084868336327880e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "12s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:21:56 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  18795484.8541        1
[INPUT] 0    0    [1    /1   ]  4698871.16034        1
[INPUT] 0    0    [1    /1   ]  1174717.81504        1
[INPUT] 0    0    [1    /1   ]  293648.328339        1
[INPUT] 0    0    [1    /1   ]  73542.7944205        1
[INPUT] 0    0    [1    /1   ]  -619.409128463       1
[INPUT] 0    0    [1    /1   ]  801.829067785        1
[INPUT] 0    0    [1    /1   ]  349.452983305        1
[INPUT] 0    0    [1    /1   ]  130.662212812        1
[INPUT] 0    0    [1    /1   ]  41.3669076737        1
[INPUT] 0    0    [1    /1   ]  4.71831030094        1
[INPUT] 0    0    [1    /1   ]  0.394399962705       1
[INPUT] 1    0    [1    /1   ]  8.61844420781        1
[INPUT] 1    0    [1    /1   ]  0.494043471537       1

nuclear repulsion = 0
number of shells = 14
number of NR pGTOs = 18
number of NR cGTOs = 18
basis = {'Ar': [[0, [18795484.854102515, 1.0]], [0, [4698871.160337819, 1.0]], [0, [1174717.815038179, 1.0]], [0, [293648.32833879825, 1.0]], [0, [73542.79442049077, 1.0]], [0, [-619.4091284634633, 1.0]], [0, [801.8290677847602, 1.0]], [0, [349.45298330498895, 1.0]], [0, [130.66221281184153, 1.0]], [0, [41.36690767371439, 1.0]], [0, [4.718310300937552, 1.0]], [0, [0.39439996270468, 1.0]], [1, [8.618444207805435, 1.0]], [1, [0.4940434715365436, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [18795484.85410251]
bas 1, expnt(s) = [4698871.16033782]
bas 2, expnt(s) = [1174717.81503818]
bas 3, expnt(s) = [293648.3283388]
bas 4, expnt(s) = [73542.79442049]
bas 5, expnt(s) = [-619.40912846]
bas 6, expnt(s) = [801.82906778]
bas 7, expnt(s) = [349.4529833]
bas 8, expnt(s) = [130.66221281]
bas 9, expnt(s) = [41.36690767]
bas 10, expnt(s) = [4.7183103]
bas 11, expnt(s) = [0.39439996]
bas 12, expnt(s) = [8.61844421]
bas 13, expnt(s) = [0.49404347]
CPU time:       481.97
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  0  1  1  0 42 43  0]
 [ 0  0  1  1  0 44 45  0]
 [ 0  0  1  1  0 46 47  0]
 [ 0  1  1  1  0 48 49  0]
 [ 0  1  1  1  0 50 51  0]]
arg.env = [ 0.00000000e+00  0.00000000e+00  0.00000000e+00  0.00000000e+00
  0.00000000e+00  0.00000000e+00  0.00000000e+00  0.00000000e+00
  0.00000000e+00  0.00000000e+00  0.00000000e+00  0.00000000e+00
  0.00000000e+00  0.00000000e+00  0.00000000e+00  0.00000000e+00
  0.00000000e+00  0.00000000e+00  0.00000000e+00  0.00000000e+00
  0.00000000e+00  0.00000000e+00  0.00000000e+00  0.00000000e+00
  1.87954849e+07  7.21199097e+05  4.69887116e+06  2.54982384e+05
  1.17471782e+06  9.01498878e+04  2.93648328e+05  3.18702649e+04
  7.35427944e+04  1.12828839e+04 -6.19409128e+02             nan
  8.01829068e+02  3.80694297e+02  3.49452983e+02  2.04200400e+02
  1.30662213e+02  9.76399461e+01  4.13669077e+01  4.12102090e+01
  4.71831030e+00  8.08825618e+00  3.94399963e-01  1.25738326e+00
  8.61844421e+00  4.30794833e+01  4.94043472e-01  1.20834472e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
