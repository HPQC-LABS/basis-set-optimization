created virtual environment CPython3.10.2.final.0-64 in 10020ms
  creator CPython3Posix(dest=/localscratch/nike.35677784.0/ENV, clear=True, no_vcs_ignore=False, global=False)
  seeder FromAppData(download=False, pip=bundle, setuptools=bundle, wheel=bundle, via=copy, app_data_dir=/home/nike/.local/share/virtualenv)
    added seed packages: pip==23.0.1, setuptools==67.3.3, wheel==0.38.4+computecanada
  activators BashActivator,CShellActivator,FishActivator,NushellActivator,PowerShellActivator,PythonActivator
Looking in links: /cvmfs/soft.computecanada.ca/custom/python/wheelhouse/gentoo/avx512, /cvmfs/soft.computecanada.ca/custom/python/wheelhouse/gentoo/avx2, /cvmfs/soft.computecanada.ca/custom/python/wheelhouse/gentoo/generic, /cvmfs/soft.computecanada.ca/custom/python/wheelhouse/generic
Requirement already satisfied: pip in /localscratch/nike.35677784.0/ENV/lib/python3.10/site-packages (23.0.1)
Looking in links: /cvmfs/soft.computecanada.ca/custom/python/wheelhouse/gentoo/avx512, /cvmfs/soft.computecanada.ca/custom/python/wheelhouse/gentoo/avx2, /cvmfs/soft.computecanada.ca/custom/python/wheelhouse/gentoo/generic, /cvmfs/soft.computecanada.ca/custom/python/wheelhouse/generic
Processing /home/nike/pyscf_ad/dist/pyscf-2.1.1+ad-cp310-cp310-linux_x86_64.whl
Processing /home/nike/properties_ad/dist/pyscf_properties-0.1.0+ad-py3-none-any.whl
Processing /cvmfs/soft.computecanada.ca/custom/python/wheelhouse/generic/absl_py-1.4.0+computecanada-py3-none-any.whl
Processing /cvmfs/soft.computecanada.ca/custom/python/wheelhouse/gentoo/generic/contourpy-1.0.7+computecanada-cp310-cp310-linux_x86_64.whl
Processing /cvmfs/soft.computecanada.ca/custom/python/wheelhouse/generic/cycler-0.11.0+computecanada-py3-none-any.whl
Processing /cvmfs/soft.computecanada.ca/custom/python/wheelhouse/generic/fonttools-4.39.0+computecanada-cp310-cp310-linux_x86_64.whl
Processing /cvmfs/soft.computecanada.ca/custom/python/wheelhouse/gentoo/avx2/h5py-3.8.0+computecanada-cp310-cp310-linux_x86_64.whl
Processing /cvmfs/soft.computecanada.ca/custom/python/wheelhouse/generic/jax-0.4.2+computecanada-py3-none-any.whl
Processing /cvmfs/soft.computecanada.ca/custom/python/wheelhouse/gentoo/generic/jaxlib-0.4.2+cuda11.cudnn82.computecanada-cp310-cp310-linux_x86_64.whl
Processing /cvmfs/soft.computecanada.ca/custom/python/wheelhouse/generic/jaxopt-0.6+computecanada-py3-none-any.whl
Processing /cvmfs/soft.computecanada.ca/custom/python/wheelhouse/gentoo/avx2/kiwisolver-1.4.4+computecanada-cp310-cp310-linux_x86_64.whl
Processing /cvmfs/soft.computecanada.ca/custom/python/wheelhouse/gentoo/avx2/matplotlib-3.7.0+computecanada-cp310-cp310-linux_x86_64.whl
Processing /cvmfs/soft.computecanada.ca/custom/python/wheelhouse/gentoo/generic/numpy-1.24.2+computecanada-cp310-cp310-linux_x86_64.whl
Processing /cvmfs/soft.computecanada.ca/custom/python/wheelhouse/generic/opt_einsum-3.3.0+computecanada-py3-none-any.whl
Processing /cvmfs/soft.computecanada.ca/custom/python/wheelhouse/generic/packaging-23.0+computecanada-py3-none-any.whl
Processing /cvmfs/soft.computecanada.ca/custom/python/wheelhouse/gentoo/avx2/Pillow-9.4.0+computecanada-cp310-cp310-linux_x86_64.whl
Processing /cvmfs/soft.computecanada.ca/custom/python/wheelhouse/generic/pyparsing-3.0.9+computecanada-py3-none-any.whl
Processing /cvmfs/soft.computecanada.ca/custom/python/wheelhouse/generic/pyscfad-0.1.2+computecanada-py3-none-any.whl
Processing /cvmfs/soft.computecanada.ca/custom/python/wheelhouse/generic/python_dateutil-2.8.2+computecanada-py2.py3-none-any.whl
Processing /cvmfs/soft.computecanada.ca/custom/python/wheelhouse/gentoo/generic/scipy-1.10.1+computecanada-cp310-cp310-linux_x86_64.whl
Processing /cvmfs/soft.computecanada.ca/custom/python/wheelhouse/generic/six-1.16.0+computecanada-py2.py3-none-any.whl
Processing /cvmfs/soft.computecanada.ca/custom/python/wheelhouse/generic/typing_extensions-4.5.0+computecanada-py3-none-any.whl
Installing collected packages: typing_extensions, six, pyparsing, Pillow, packaging, numpy, kiwisolver, fonttools, cycler, absl_py, scipy, python-dateutil, opt-einsum, h5py, contourpy, pyscf, matplotlib, jaxlib, pyscf-properties, jax, jaxopt, pyscfad
Successfully installed Pillow-9.4.0+computecanada absl_py-1.4.0+computecanada contourpy-1.0.7+computecanada cycler-0.11.0+computecanada fonttools-4.39.0+computecanada h5py-3.8.0+computecanada jax-0.4.2+computecanada jaxlib-0.4.2+cuda11.cudnn82.computecanada jaxopt-0.6+computecanada kiwisolver-1.4.4+computecanada matplotlib-3.7.0+computecanada numpy-1.24.2+computecanada opt-einsum-3.3.0+computecanada packaging-23.0+computecanada pyparsing-3.0.9+computecanada pyscf-2.1.1+ad pyscf-properties-0.1.0+ad pyscfad-0.1.2+computecanada python-dateutil-2.8.2+computecanada scipy-1.10.1+computecanada six-1.16.0+computecanada typing_extensions-4.5.0+computecanada
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
number_of_s_exps = 4
number_of_p_exps = 3

exps = np.zeros((number_of_s_exps+number_of_p_exps,2))
#exps[:, 0] = decaying_nums(5)

# S
exps[0,0] = 20.0
exps[1,0] = 9.5045827955887916e+01
exps[2,0] = 4.4881042475048387e+00 
exps[3,0] = 3.9799528004692630e-01
             
# P          
exps[3,0] = 3.0108199280832128e+01
exps[4,0] = 6.1393781325590453e+00
exps[5,0] = 4.8929328703550412e-01

basis =  str(number_of_s_exps)+"s"+str(number_of_p_exps)+"p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc21115.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 24
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 18 14:57:29 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35677784.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 32000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 32000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 32000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  20                   1
[INPUT] 0    0    [1    /1   ]  95.0458279559        1
[INPUT] 0    0    [1    /1   ]  4.4881042475         1
[INPUT] 0    0    [1    /1   ]  30.1081992808        1
[INPUT] 1    0    [1    /1   ]  6.13937813256        1
[INPUT] 1    0    [1    /1   ]  0.489293287036       1
[INPUT] 1    0    [1    /1   ]  1e-09                1

nuclear repulsion = 0
number of shells = 7
number of NR pGTOs = 13
number of NR cGTOs = 13
basis = {'Ar': [[0, [20.0, 1.0]], [0, [95.04582795588792, 1.0]], [0, [4.488104247504839, 1.0]], [0, [30.108199280832128, 1.0]], [1, [6.139378132559045, 1.0]], [1, [0.4892932870355041, 1.0]], [1, [1e-09, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [20.]
bas 1, expnt(s) = [95.04582796]
bas 2, expnt(s) = [4.48810425]
bas 3, expnt(s) = [30.10819928]
bas 4, expnt(s) = [6.13937813]
bas 5, expnt(s) = [0.48929329]
bas 6, expnt(s) = [1.e-09]
CPU time:         1.38
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  1  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]
 [ 0  1  1  1  0 36 37  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 2.00000000e+01 2.38939264e+01 9.50458280e+01 7.69068136e+01
 4.48810425e+00 7.79044429e+00 3.01081993e+01 3.24734634e+01
 6.13937813e+00 2.81929078e+01 4.89293287e-01 1.19383956e+00
 1.00000000e-09 1.64053082e-11]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 15.19486152526664
cond(S) = 457.0247014414745
E1 = -591.1131050611998  E_coul = 145.2838293496181
init E= -445.829275711582
    CPU time for initialize scf      1.82 sec, wall time      0.66 sec

WARN: HOMO -0.000605549305285013 == LUMO -0.000605549305284767

  mo_energy =
[-1.09513217e+02 -1.46463560e+01 -9.88900621e+00 -9.88900621e+00
 -9.88900621e+00 -1.79818766e+00 -1.79818766e+00 -1.79818766e+00
 -6.05549305e-04 -6.05549305e-04 -6.05549305e-04  2.36413515e+01
  1.33577636e+02]
E1 = -621.9975310949801  E_coul = 158.51204074349195
cycle= 1 E= -463.485490351488  delta_E= -17.7  |g|= 0.737  |ddm|= 11.5
    CPU time for cycle= 1      0.29 sec, wall time      0.29 sec
diis-norm(errvec)=0.568234
diis-c [-0.32289006  1.        ]

WARN: HOMO -0.000605549305285247 == LUMO -0.000605549305284968

  mo_energy =
[-1.08408790e+02 -1.34958316e+01 -8.89809934e+00 -8.89809934e+00
 -8.89809934e+00 -1.29646793e+00 -1.29646793e+00 -1.29646793e+00
 -6.05549305e-04 -6.05549305e-04 -6.05549305e-04  2.50892160e+01
  1.34916128e+02]
E1 = -621.8564113885931  E_coul = 158.36638705351652
cycle= 2 E= -463.490024335077  delta_E= -0.00453  |g|= 0.0186  |ddm|= 2.83
    CPU time for cycle= 2      0.09 sec, wall time      0.09 sec
diis-norm(errvec)=0.0116105
diis-c [-4.68616096e-05 -1.67815724e-02  1.01678157e+00]

WARN: HOMO -0.000605549305285225 == LUMO -0.000605549305285211

  mo_energy =
[-1.08449002e+02 -1.35016338e+01 -8.90705661e+00 -8.90705661e+00
 -8.90705661e+00 -1.29687745e+00 -1.29687745e+00 -1.29687745e+00
 -6.05549305e-04 -6.05549305e-04 -6.05549305e-04  2.50807086e+01
  1.34888629e+02]
E1 = -621.8519938415417  E_coul = 158.36196548601862
cycle= 3 E= -463.490028355523  delta_E= -4.02e-06  |g|= 0.00031  |ddm|= 0.69
    CPU time for cycle= 3      0.01 sec, wall time      0.07 sec
diis-norm(errvec)=0.000252026
diis-c [-4.39009895e-11  6.48977830e-04 -3.88529679e-02  1.03820399e+00]

WARN: HOMO -0.000605549305288747 == LUMO -0.000605549305284828

  mo_energy =
[-1.08449505e+02 -1.35017186e+01 -8.90719619e+00 -8.90719619e+00
 -8.90719619e+00 -1.29688359e+00 -1.29688359e+00 -1.29688359e+00
 -6.05549305e-04 -6.05549305e-04 -6.05549305e-04  2.50805805e+01
  1.34888270e+02]
E1 = -621.8519238391855  E_coul = 158.36189548251204
cycle= 4 E= -463.490028356673  delta_E= -1.15e-09  |g|= 9.07e-07  |ddm|= 2.83
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=2.688e-07
diis-c [-8.82202937e-16 -1.03311036e-05  6.28325347e-04 -1.58600349e-02
  1.01524204e+00]

WARN: HOMO -0.000605549305284863 == LUMO -0.000605549305284845

  mo_energy =
[-1.08449504e+02 -1.35017185e+01 -8.90719585e+00 -8.90719585e+00
 -8.90719585e+00 -1.29688358e+00 -1.29688358e+00 -1.29688358e+00
 -6.05549305e-04 -6.05549305e-04 -6.05549305e-04  2.50805809e+01
  1.34888270e+02]
E1 = -621.8519240074859  E_coul = 158.36189565081278
cycle= 5 E= -463.490028356673  delta_E= 3.41e-13  |g|= 8.79e-10  |ddm|= 2.83
    CPU time for cycle= 5      0.01 sec, wall time      0.01 sec
E1 = -621.8519240074859  E_coul = 158.36189565081278

WARN: HOMO -0.000605549305287372 == LUMO -0.000605549305284839

  mo_energy =
[-1.08449504e+02 -1.35017185e+01 -8.90719584e+00 -8.90719584e+00
 -8.90719584e+00 -1.29688358e+00 -1.29688358e+00 -1.29688358e+00
 -6.05549305e-04 -6.05549305e-04 -6.05549305e-04  2.50805809e+01
  1.34888270e+02]
E1 = -621.8519240075397  E_coul = 158.3618956508664
Extra cycle  E= -463.490028356673  delta_E= -2.27e-13  |g|= 1.34e-11  |ddm|= 2.83
    CPU time for scf_cycle      2.24 sec, wall time      1.14 sec
exp = [2.00000000e+01 9.50458280e+01 4.48810425e+00 3.01081993e+01
 6.13937813e+00 4.89293287e-01 1.00000000e-09]
E = -463.4900283566733
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
number_of_s_exps = 4
number_of_p_exps = 3

exps = np.zeros((number_of_s_exps+number_of_p_exps,2))
#exps[:, 0] = decaying_nums(5)

# S
exps[0,0] = 20.0
exps[1,0] = 9.5045827955887916e+01
exps[2,0] = 4.4881042475048387e+00 
exps[3,0] = 3.9799528004692630e-01
             
# P          
exps[3,0] = 3.0108199280832128e+01
exps[4,0] = 6.1393781325590453e+00
exps[5,0] = 4.8929328703550412e-01

basis =  str(number_of_s_exps)+"s"+str(number_of_p_exps)+"p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc21115.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 24
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 18 14:57:30 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35677784.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 32000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 32000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 32000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  20                   1
[INPUT] 0    0    [1    /1   ]  95.0458279559        1
[INPUT] 0    0    [1    /1   ]  4.4881042475         1
[INPUT] 0    0    [1    /1   ]  30.1081992808        1
[INPUT] 1    0    [1    /1   ]  6.13937813256        1
[INPUT] 1    0    [1    /1   ]  0.489293287036       1
[INPUT] 1    0    [1    /1   ]  1e-09                1

nuclear repulsion = 0
number of shells = 7
number of NR pGTOs = 13
number of NR cGTOs = 13
basis = {'Ar': [[0, [20.0, 1.0]], [0, [95.04582795588792, 1.0]], [0, [4.488104247504839, 1.0]], [0, [30.108199280832128, 1.0]], [1, [6.139378132559045, 1.0]], [1, [0.4892932870355041, 1.0]], [1, [1e-09, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [20.]
bas 1, expnt(s) = [95.04582796]
bas 2, expnt(s) = [4.48810425]
bas 3, expnt(s) = [30.10819928]
bas 4, expnt(s) = [6.13937813]
bas 5, expnt(s) = [0.48929329]
bas 6, expnt(s) = [1.e-09]
CPU time:         3.91
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  1  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]
 [ 0  1  1  1  0 36 37  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 2.00000000e+01 2.38939264e+01 9.50458280e+01 7.69068136e+01
 4.48810425e+00 7.79044429e+00 3.01081993e+01 3.24734634e+01
 6.13937813e+00 2.81929078e+01 4.89293287e-01 1.19383956e+00
 1.00000000e-09 1.64053082e-11]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 15.19486152526664
cond(S) = 457.0247014414745
E1 = -591.1131050611998  E_coul = 145.2838293496181
init E= -445.829275711582
    CPU time for initialize scf      0.24 sec, wall time      0.03 sec

WARN: HOMO -0.000605549305285013 == LUMO -0.000605549305284767

  mo_energy =
[-1.09513217e+02 -1.46463560e+01 -9.88900621e+00 -9.88900621e+00
 -9.88900621e+00 -1.79818766e+00 -1.79818766e+00 -1.79818766e+00
 -6.05549305e-04 -6.05549305e-04 -6.05549305e-04  2.36413515e+01
  1.33577636e+02]
E1 = -621.9975310949801  E_coul = 158.51204074349195
cycle= 1 E= -463.485490351488  delta_E= -17.7  |g|= 0.737  |ddm|= 11.5
    CPU time for cycle= 1      0.21 sec, wall time      0.01 sec
diis-norm(errvec)=0.568234
diis-c [-0.32289006  1.        ]

WARN: HOMO -0.000605549305285247 == LUMO -0.000605549305284968

  mo_energy =
[-1.08408790e+02 -1.34958316e+01 -8.89809934e+00 -8.89809934e+00
 -8.89809934e+00 -1.29646793e+00 -1.29646793e+00 -1.29646793e+00
 -6.05549305e-04 -6.05549305e-04 -6.05549305e-04  2.50892160e+01
  1.34916128e+02]
E1 = -621.8564113885931  E_coul = 158.36638705351652
cycle= 2 E= -463.490024335077  delta_E= -0.00453  |g|= 0.0186  |ddm|= 2.83
    CPU time for cycle= 2      0.14 sec, wall time      0.01 sec
diis-norm(errvec)=0.0116105
diis-c [-4.68616096e-05 -1.67815724e-02  1.01678157e+00]

WARN: HOMO -0.000605549305285225 == LUMO -0.000605549305285211

  mo_energy =
[-1.08449002e+02 -1.35016338e+01 -8.90705661e+00 -8.90705661e+00
 -8.90705661e+00 -1.29687745e+00 -1.29687745e+00 -1.29687745e+00
 -6.05549305e-04 -6.05549305e-04 -6.05549305e-04  2.50807086e+01
  1.34888629e+02]
E1 = -621.8519938415417  E_coul = 158.36196548601862
cycle= 3 E= -463.490028355523  delta_E= -4.02e-06  |g|= 0.00031  |ddm|= 0.69
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.000252026
diis-c [-4.39009895e-11  6.48977830e-04 -3.88529679e-02  1.03820399e+00]

WARN: HOMO -0.000605549305288747 == LUMO -0.000605549305284828

  mo_energy =
[-1.08449505e+02 -1.35017186e+01 -8.90719619e+00 -8.90719619e+00
 -8.90719619e+00 -1.29688359e+00 -1.29688359e+00 -1.29688359e+00
 -6.05549305e-04 -6.05549305e-04 -6.05549305e-04  2.50805805e+01
  1.34888270e+02]
E1 = -621.8519238391855  E_coul = 158.36189548251204
cycle= 4 E= -463.490028356673  delta_E= -1.15e-09  |g|= 9.07e-07  |ddm|= 2.83
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=2.688e-07
diis-c [-8.82202937e-16 -1.03311036e-05  6.28325347e-04 -1.58600349e-02
  1.01524204e+00]

WARN: HOMO -0.000605549305284863 == LUMO -0.000605549305284845

  mo_energy =
[-1.08449504e+02 -1.35017185e+01 -8.90719585e+00 -8.90719585e+00
 -8.90719585e+00 -1.29688358e+00 -1.29688358e+00 -1.29688358e+00
 -6.05549305e-04 -6.05549305e-04 -6.05549305e-04  2.50805809e+01
  1.34888270e+02]
E1 = -621.8519240074859  E_coul = 158.36189565081278
cycle= 5 E= -463.490028356673  delta_E= 3.41e-13  |g|= 8.79e-10  |ddm|= 2.83
    CPU time for cycle= 5      0.01 sec, wall time      0.01 sec
E1 = -621.8519240074859  E_coul = 158.36189565081278

WARN: HOMO -0.000605549305287372 == LUMO -0.000605549305284839

  mo_energy =
[-1.08449504e+02 -1.35017185e+01 -8.90719584e+00 -8.90719584e+00
 -8.90719584e+00 -1.29688358e+00 -1.29688358e+00 -1.29688358e+00
 -6.05549305e-04 -6.05549305e-04 -6.05549305e-04  2.50805809e+01
  1.34888270e+02]
E1 = -621.8519240075397  E_coul = 158.3618956508664
Extra cycle  E= -463.490028356673  delta_E= -2.27e-13  |g|= 1.34e-11  |ddm|= 2.83
    CPU time for scf_cycle      0.64 sec, wall time      0.09 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 457.0247014414745
E1 = -621.8519240075397  E_coul = 158.3618956508664
init E= -463.490028356673
    CPU time for initialize scf      4.42 sec, wall time      0.29 sec

WARN: HOMO -0.000605549305286629 == LUMO -0.000605549305284838

  mo_energy =
[-1.08449504e+02 -1.35017185e+01 -8.90719584e+00 -8.90719584e+00
 -8.90719584e+00 -1.29688358e+00 -1.29688358e+00 -1.29688358e+00
 -6.05549305e-04 -6.05549305e-04 -6.05549305e-04  2.50805809e+01
  1.34888270e+02]
E1 = -621.8519240075411  E_coul = 158.36189565086795
cycle= 1 E= -463.490028356673  delta_E= 1.14e-13  |g|= 3.38e-13  |ddm|= 1.33e-12
    CPU time for cycle= 1      0.21 sec, wall time      0.01 sec
E1 = -621.8519240075411  E_coul = 158.36189565086795

WARN: HOMO -0.00060554930528503 == LUMO -0.000605549305285003

  mo_energy =
[-1.08449504e+02 -1.35017185e+01 -8.90719584e+00 -8.90719584e+00
 -8.90719584e+00 -1.29688358e+00 -1.29688358e+00 -1.29688358e+00
 -6.05549305e-04 -6.05549305e-04 -6.05549305e-04  2.50805809e+01
  1.34888270e+02]
E1 = -621.8519240075415  E_coul = 158.36189565086804
Extra cycle  E= -463.490028356673  delta_E= -2.27e-13  |g|= 3.62e-13  |ddm|= 5.66e-14
    CPU time for scf_cycle      5.53 sec, wall time      1.19 sec
exp = [2.00000000e+01 9.50458280e+01 4.48810425e+00 3.01081993e+01
 6.13937813e+00 4.89293287e-01 1.00000000e-09]
grad_E = [-8.58387958e-02 -3.69253757e-01  2.35028886e-01 -2.87062386e-02
 -2.80147952e+00 -5.93647394e-01 -2.75861989e+06]
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
number_of_s_exps = 4
number_of_p_exps = 3

exps = np.zeros((number_of_s_exps+number_of_p_exps,2))
#exps[:, 0] = decaying_nums(5)

# S
exps[0,0] = 20.0
exps[1,0] = 9.5045827955887916e+01
exps[2,0] = 4.4881042475048387e+00 
exps[3,0] = 3.9799528004692630e-01
             
# P          
exps[3,0] = 3.0108199280832128e+01
exps[4,0] = 6.1393781325590453e+00
exps[5,0] = 4.8929328703550412e-01

basis =  str(number_of_s_exps)+"s"+str(number_of_p_exps)+"p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc21115.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 24
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 18 14:57:36 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35677784.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 32000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 32000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 32000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  20.0858387958        1
[INPUT] 0    0    [1    /1   ]  95.4150817125        1
[INPUT] 0    0    [1    /1   ]  4.25307536169        1
[INPUT] 0    0    [1    /1   ]  30.1369055195        1
[INPUT] 1    0    [1    /1   ]  8.94085764881        1
[INPUT] 1    0    [1    /1   ]  1.08294068135        1
[INPUT] 1    0    [1    /1   ]  2758619.89074        1

nuclear repulsion = 0
number of shells = 7
number of NR pGTOs = 13
number of NR cGTOs = 13
basis = {'Ar': [[0, [20.08583879578737, 1.0]], [0, [95.41508171249073, 1.0]], [0, [4.253075361692839, 1.0]], [0, [30.136905519465913, 1.0]], [1, [8.94085764881396, 1.0]], [1, [1.082940681353445, 1.0]], [1, [2758619.8907420402, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [20.0858388]
bas 1, expnt(s) = [95.41508171]
bas 2, expnt(s) = [4.25307536]
bas 3, expnt(s) = [30.13690552]
bas 4, expnt(s) = [8.94085765]
bas 5, expnt(s) = [1.08294068]
bas 6, expnt(s) = [2758619.89074204]
CPU time:        14.86
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  1  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]
 [ 0  1  1  1  0 36 37  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 2.00858388e+01 2.39707986e+01 9.54150817e+01 7.71307926e+01
 4.25307536e+00 7.48242432e+00 3.01369055e+01 3.24966817e+01
 8.94085765e+00 4.51033052e+01 1.08294068e+00 3.22285101e+00
 2.75861989e+06 3.27981405e+08]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 13.78999023133486
cond(S) = 442.20769118506524
E1 = -609.6722081151681  E_coul = 161.28513131219876
init E= -448.387076802969
    CPU time for initialize scf      0.21 sec, wall time      0.03 sec
  HOMO = 24.59770157458  LUMO = 135.735387460296
  mo_energy =
[-1.06286009e+02 -1.32385231e+01 -9.61817590e+00 -9.61817590e+00
 -9.61817590e+00 -1.29372560e+00 -1.29372559e+00 -1.29372559e+00
  2.45977016e+01  1.35735387e+02  6.86480207e+06  6.86480207e+06
  6.86480207e+06]
E1 = -668.1872485435166  E_coul = 261.8536663462429
cycle= 1 E= -406.333582197274  delta_E= 42.1  |g|= 1.24  |ddm|= 58.1
    CPU time for cycle= 1      0.22 sec, wall time      0.01 sec
diis-norm(errvec)=0.257045
diis-c [-0.06607191  1.        ]
  HOMO = 30.1603261500104  LUMO = 144.67267364553
  mo_energy =
[-9.63338153e+01 -6.36478661e+00 -2.95362135e+00 -2.95362135e+00
 -2.95362135e+00  3.05197583e+00  3.05197583e+00  3.05197583e+00
  3.01603262e+01  1.44672674e+02  6.86481319e+06  6.86481319e+06
  6.86481319e+06]
E1 = -668.0767805460853  E_coul = 261.73657736547943
cycle= 2 E= -406.340203180606  delta_E= -0.00662  |g|= 0.0216  |ddm|= 1.27
    CPU time for cycle= 2      0.14 sec, wall time      0.01 sec
diis-norm(errvec)=0.00351125
diis-c [-3.16028168e-06 -1.19206653e-02  1.01192067e+00]
  HOMO = 30.1550404449701  LUMO = 144.662111619078
  mo_energy =
[-9.63639474e+01 -6.36926487e+00 -2.95744196e+00 -2.95744196e+00
 -2.95744196e+00  3.04932840e+00  3.04932840e+00  3.04932840e+00
  3.01550404e+01  1.44662112e+02  6.86481312e+06  6.86481312e+06
  6.86481312e+06]
E1 = -668.0746587762678  E_coul = 261.7344535461212
cycle= 3 E= -406.340205230147  delta_E= -2.05e-06  |g|= 0.000162  |ddm|= 0.0229
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=3.81661e-05
diis-c [-2.19337101e-12  2.82589955e-04 -2.19124840e-02  1.02162989e+00]
  HOMO = 30.155013630176  LUMO = 144.662041206652
  mo_energy =
[-9.63641500e+01 -6.36929087e+00 -2.95746399e+00 -2.95746399e+00
 -2.95746399e+00  3.04931233e+00  3.04931233e+00  3.04931233e+00
  3.01550136e+01  1.44662041e+02  6.86481312e+06  6.86481312e+06
  6.86481312e+06]
E1 = -668.0746441469079  E_coul = 261.734438916649
cycle= 4 E= -406.340205230259  delta_E= -1.12e-10  |g|= 3.12e-07  |ddm|= 0.000153
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
E1 = -668.0746441469079  E_coul = 261.734438916649
  HOMO = 30.1550135274483  LUMO = 144.662041080544
  mo_energy =
[-9.63641505e+01 -6.36929094e+00 -2.95746405e+00 -2.95746405e+00
 -2.95746405e+00  3.04931229e+00  3.04931229e+00  3.04931229e+00
  3.01550135e+01  1.44662041e+02  6.86481312e+06  6.86481312e+06
  6.86481312e+06]
E1 = -668.0746441179074  E_coul = 261.7344388876484
Extra cycle  E= -406.340205230259  delta_E= -1.14e-13  |g|= 7.2e-09  |ddm|= 3.3e-07
    CPU time for scf_cycle      0.60 sec, wall time      0.08 sec
exp = [2.00858388e+01 9.54150817e+01 4.25307536e+00 3.01369055e+01
 8.94085765e+00 1.08294068e+00 2.75861989e+06]
E = -406.34020523025896
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
number_of_s_exps = 4
number_of_p_exps = 3

exps = np.zeros((number_of_s_exps+number_of_p_exps,2))
#exps[:, 0] = decaying_nums(5)

# S
exps[0,0] = 20.0
exps[1,0] = 9.5045827955887916e+01
exps[2,0] = 4.4881042475048387e+00 
exps[3,0] = 3.9799528004692630e-01
             
# P          
exps[3,0] = 3.0108199280832128e+01
exps[4,0] = 6.1393781325590453e+00
exps[5,0] = 4.8929328703550412e-01

basis =  str(number_of_s_exps)+"s"+str(number_of_p_exps)+"p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc21115.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 24
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 18 14:57:36 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35677784.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 32000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 32000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 32000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  20.0429193979        1
[INPUT] 0    0    [1    /1   ]  95.2304548342        1
[INPUT] 0    0    [1    /1   ]  4.3705898046         1
[INPUT] 0    0    [1    /1   ]  30.1225524001        1
[INPUT] 1    0    [1    /1   ]  7.54011789068        1
[INPUT] 1    0    [1    /1   ]  0.786116984192       1
[INPUT] 1    0    [1    /1   ]  1379309.94536        1

nuclear repulsion = 0
number of shells = 7
number of NR pGTOs = 13
number of NR cGTOs = 13
basis = {'Ar': [[0, [20.042919397893364, 1.0]], [0, [95.23045483418794, 1.0]], [0, [4.370589804599722, 1.0]], [0, [30.122552400148912, 1.0]], [1, [7.540117890675983, 1.0]], [1, [0.7861169841922455, 1.0]], [1, [1379309.9453606622, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [20.0429194]
bas 1, expnt(s) = [95.23045483]
bas 2, expnt(s) = [4.3705898]
bas 3, expnt(s) = [30.1225524]
bas 4, expnt(s) = [7.54011789]
bas 5, expnt(s) = [0.78611698]
bas 6, expnt(s) = [1379309.94536066]
CPU time:        15.49
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  1  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]
 [ 0  1  1  1  0 36 37  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 2.00429194e+01 2.39323728e+01 9.52304548e+01 7.70188302e+01
 4.37058980e+00 7.63695199e+00 3.01225524e+01 3.24850733e+01
 7.54011789e+00 3.64507999e+01 7.86116984e-01 2.15945106e+00
 1.37930995e+06 1.37899194e+08]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 14.636610452950327
cond(S) = 449.5197691530158
E1 = -607.611097136754  E_coul = 158.7318511267093
init E= -448.879246010045
    CPU time for initialize scf      0.18 sec, wall time      0.02 sec
  HOMO = 24.6600771575592  LUMO = 135.222390137084
  mo_energy =
[-1.07311941e+02 -1.34585166e+01 -9.39452805e+00 -9.39452805e+00
 -9.39452805e+00 -1.56340308e+00 -1.56340308e+00 -1.56340308e+00
  2.46600772e+01  1.35222390e+02  3.42584154e+06  3.42584154e+06
  3.42584154e+06]
E1 = -652.0190534073896  E_coul = 242.26104586829695
cycle= 1 E= -409.758007539093  delta_E= 39.1  |g|= 1.12  |ddm|= 58.9
    CPU time for cycle= 1      0.21 sec, wall time      0.01 sec
diis-norm(errvec)=0.244013
diis-c [-0.05954211  1.        ]
  HOMO = 29.1397603693589  LUMO = 142.988894503797
  mo_energy =
[-9.85737170e+01 -7.61783452e+00 -3.70892553e+00 -3.70892553e+00
 -3.70892553e+00  1.47581841e+00  1.47581841e+00  1.47581841e+00
  2.91397604e+01  1.42988895e+02  3.42585144e+06  3.42585144e+06
  3.42585144e+06]
E1 = -651.9252136957472  E_coul = 242.16185213025207
cycle= 2 E= -409.763361565495  delta_E= -0.00535  |g|= 0.0194  |ddm|= 1.16
    CPU time for cycle= 2      0.15 sec, wall time      0.01 sec
diis-norm(errvec)=0.0033184
diis-c [-2.37888691e-06 -1.21881210e-02  1.01218812e+00]
  HOMO = 29.135045806072  LUMO = 142.979381902324
  mo_energy =
[-9.86009612e+01 -7.62196777e+00 -3.71240487e+00 -3.71240487e+00
 -3.71240487e+00  1.47457905e+00  1.47457905e+00  1.47457905e+00
  2.91350458e+01  1.42979382e+02  3.42585137e+06  3.42585137e+06
  3.42585137e+06]
E1 = -651.9234153806207  E_coul = 242.16005216624308
cycle= 3 E= -409.763363214378  delta_E= -1.65e-06  |g|= 0.000139  |ddm|= 0.0208
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=3.28932e-05
diis-c [-1.53031258e-12  2.84511320e-04 -2.17611862e-02  1.02147667e+00]
  HOMO = 29.1350229248887  LUMO = 142.979321316384
  mo_energy =
[-9.86011367e+01 -7.62199077e+00 -3.71242392e+00 -3.71242392e+00
 -3.71242392e+00  1.47457186e+00  1.47457186e+00  1.47457186e+00
  2.91350229e+01  1.42979321e+02  3.42585137e+06  3.42585137e+06
  3.42585137e+06]
E1 = -651.9234035030793  E_coul = 242.1600402886188
cycle= 4 E= -409.76336321446  delta_E= -8.29e-11  |g|= 2.69e-07  |ddm|= 0.000133
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
E1 = -651.9234035030793  E_coul = 242.1600402886188
  HOMO = 29.135022837849  LUMO = 142.979321206764
  mo_energy =
[-9.86011371e+01 -7.62199083e+00 -3.71242398e+00 -3.71242398e+00
 -3.71242398e+00  1.47457184e+00  1.47457184e+00  1.47457184e+00
  2.91350228e+01  1.42979321e+02  3.42585137e+06  3.42585137e+06
  3.42585137e+06]
E1 = -651.9234034793728  E_coul = 242.160040264914
Extra cycle  E= -409.763363214459  delta_E= 1.59e-12  |g|= 5.24e-09  |ddm|= 2.9e-07
    CPU time for scf_cycle      0.58 sec, wall time      0.07 sec
exp = [2.00429194e+01 9.52304548e+01 4.37058980e+00 3.01225524e+01
 7.54011789e+00 7.86116984e-01 1.37930995e+06]
E = -409.7633632144589
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
number_of_s_exps = 4
number_of_p_exps = 3

exps = np.zeros((number_of_s_exps+number_of_p_exps,2))
#exps[:, 0] = decaying_nums(5)

# S
exps[0,0] = 20.0
exps[1,0] = 9.5045827955887916e+01
exps[2,0] = 4.4881042475048387e+00 
exps[3,0] = 3.9799528004692630e-01
             
# P          
exps[3,0] = 3.0108199280832128e+01
exps[4,0] = 6.1393781325590453e+00
exps[5,0] = 4.8929328703550412e-01

basis =  str(number_of_s_exps)+"s"+str(number_of_p_exps)+"p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc21115.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 24
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 18 14:57:36 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35677784.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 32000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 32000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 32000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  20.0214596989        1
[INPUT] 0    0    [1    /1   ]  95.138141395         1
[INPUT] 0    0    [1    /1   ]  4.42934702605        1
[INPUT] 0    0    [1    /1   ]  30.1153758405        1
[INPUT] 1    0    [1    /1   ]  6.83974801161        1
[INPUT] 1    0    [1    /1   ]  0.637705135612       1
[INPUT] 1    0    [1    /1   ]  689654.972671        1

nuclear repulsion = 0
number of shells = 7
number of NR pGTOs = 13
number of NR cGTOs = 13
basis = {'Ar': [[0, [20.02145969894638, 1.0]], [0, [95.13814139503663, 1.0]], [0, [4.42934702605311, 1.0]], [0, [30.11537584049042, 1.0]], [1, [6.839748011607625, 1.0]], [1, [0.6377051356117792, 1.0]], [1, [689654.9726705938, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [20.0214597]
bas 1, expnt(s) = [95.1381414]
bas 2, expnt(s) = [4.42934703]
bas 3, expnt(s) = [30.11537584]
bas 4, expnt(s) = [6.83974801]
bas 5, expnt(s) = [0.63770514]
bas 6, expnt(s) = [689654.97267059]
CPU time:        16.10
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  1  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]
 [ 0  1  1  1  0 36 37  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 2.00214597e+01 2.39131522e+01 9.51381414e+01 7.69628287e+01
 4.42934703e+00 7.71382540e+00 3.01153758e+01 3.24792685e+01
 6.83974801e+00 3.22689266e+01 6.37705136e-01 1.66249093e+00
 6.89654973e+05 5.79794689e+07]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 15.005347189289752
cond(S) = 453.24772001685966
E1 = -602.139645617501  E_coul = 154.05619272679857
init E= -448.083452890702
    CPU time for initialize scf      0.18 sec, wall time      0.02 sec
  HOMO = 24.3452732444209  LUMO = 134.59857513604
  mo_energy =
[-1.08210331e+02 -1.38749676e+01 -9.50671410e+00 -9.50671410e+00
 -9.50671410e+00 -1.67005202e+00 -1.67005202e+00 -1.67005202e+00
  2.43452732e+01  1.34598575e+02  1.70829019e+06  1.70829019e+06
  1.70829019e+06]
E1 = -641.6704883452632  E_coul = 231.04588703665482
cycle= 1 E= -410.624601308608  delta_E= 37.5  |g|=  1.1  |ddm|= 59.3
    CPU time for cycle= 1      0.21 sec, wall time      0.01 sec
diis-norm(errvec)=0.24109
diis-c [-0.05812443  1.        ]
  HOMO = 28.4814266067257  LUMO = 142.016225321613
  mo_energy =
[-9.98220172e+01 -8.36248948e+00 -4.17657843e+00 -4.17657843e+00
 -4.17657843e+00  8.13632227e-01  8.13632227e-01  8.13632228e-01
  2.84814266e+01  1.42016225e+02  1.70829974e+06  1.70829974e+06
  1.70829974e+06]
E1 = -641.5808293288196  E_coul = 230.9510166957536
cycle= 2 E= -410.629812633066  delta_E= -0.00521  |g|= 0.0191  |ddm|= 1.15
    CPU time for cycle= 2      0.15 sec, wall time      0.01 sec
diis-norm(errvec)=0.00326484
diis-c [-2.23457379e-06 -1.21860746e-02  1.01218607e+00]
  HOMO = 28.4767819645722  LUMO = 142.006851925857
  mo_energy =
[-9.98489268e+01 -8.36662441e+00 -4.17994938e+00 -4.17994938e+00
 -4.17994938e+00  8.12880014e-01  8.12880014e-01  8.12880014e-01
  2.84767820e+01  1.42006852e+02  1.70829968e+06  1.70829968e+06
  1.70829968e+06]
E1 = -641.5791098418377  E_coul = 230.9492956068007
cycle= 3 E= -410.629814235037  delta_E= -1.6e-06  |g|= 0.000137  |ddm|= 0.0206
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=3.20022e-05
diis-c [-1.39128456e-12  2.85522669e-04 -2.18319740e-02  1.02154645e+00]
  HOMO = 28.4767593675095  LUMO = 142.00679226671
  mo_energy =
[-9.98491001e+01 -8.36664745e+00 -4.17996769e+00 -4.17996769e+00
 -4.17996769e+00  8.12875659e-01  8.12875659e-01  8.12875659e-01
  2.84767594e+01  1.42006792e+02  1.70829968e+06  1.70829968e+06
  1.70829968e+06]
E1 = -641.5790985003241  E_coul = 230.94928426520855
cycle= 4 E= -410.629814235116  delta_E= -7.84e-11  |g|= 2.58e-07  |ddm|= 0.000132
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
E1 = -641.5790985003241  E_coul = 230.94928426520855
  HOMO = 28.4767592835313  LUMO = 142.006792161464
  mo_energy =
[-9.98491005e+01 -8.36664751e+00 -4.17996774e+00 -4.17996774e+00
 -4.17996774e+00  8.12875648e-01  8.12875649e-01  8.12875649e-01
  2.84767593e+01  1.42006792e+02  1.70829968e+06  1.70829968e+06
  1.70829968e+06]
E1 = -641.5790984782507  E_coul = 230.94928424313238
Extra cycle  E= -410.629814235118  delta_E= -2.73e-12  |g|= 5e-09  |ddm|= 2.81e-07
    CPU time for scf_cycle      0.58 sec, wall time      0.07 sec
exp = [2.00214597e+01 9.51381414e+01 4.42934703e+00 3.01153758e+01
 6.83974801e+00 6.37705136e-01 6.89654973e+05]
E = -410.62981423511826
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
number_of_s_exps = 4
number_of_p_exps = 3

exps = np.zeros((number_of_s_exps+number_of_p_exps,2))
#exps[:, 0] = decaying_nums(5)

# S
exps[0,0] = 20.0
exps[1,0] = 9.5045827955887916e+01
exps[2,0] = 4.4881042475048387e+00 
exps[3,0] = 3.9799528004692630e-01
             
# P          
exps[3,0] = 3.0108199280832128e+01
exps[4,0] = 6.1393781325590453e+00
exps[5,0] = 4.8929328703550412e-01

basis =  str(number_of_s_exps)+"s"+str(number_of_p_exps)+"p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc21115.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 24
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 18 14:57:36 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35677784.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 32000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 32000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 32000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  20.0107298495        1
[INPUT] 0    0    [1    /1   ]  95.0919846755        1
[INPUT] 0    0    [1    /1   ]  4.45872563678        1
[INPUT] 0    0    [1    /1   ]  30.1117875607        1
[INPUT] 1    0    [1    /1   ]  6.48956307207        1
[INPUT] 1    0    [1    /1   ]  0.563499211322       1
[INPUT] 1    0    [1    /1   ]  344827.486326        1

nuclear repulsion = 0
number of shells = 7
number of NR pGTOs = 13
number of NR cGTOs = 13
basis = {'Ar': [[0, [20.01072984947289, 1.0]], [0, [95.09198467546099, 1.0]], [0, [4.458725636779791, 1.0]], [0, [30.111787560661174, 1.0]], [1, [6.489563072073605, 1.0]], [1, [0.5634992113215799, 1.0]], [1, [344827.4863257164, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [20.01072985]
bas 1, expnt(s) = [95.09198468]
bas 2, expnt(s) = [4.45872564]
bas 3, expnt(s) = [30.11178756]
bas 4, expnt(s) = [6.48956307]
bas 5, expnt(s) = [0.56349921]
bas 6, expnt(s) = [344827.48632572]
CPU time:        16.71
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  1  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]
 [ 0  1  1  1  0 36 37  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 2.00107298e+01 2.39035399e+01 9.50919847e+01 7.69348228e+01
 4.45872564e+00 7.75216640e+00 3.01117876e+01 3.24763660e+01
 6.48956307e+00 3.02171649e+01 5.63499211e-01 1.42429855e+00
 3.44827486e+05 2.43773638e+07]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 15.134910542733971
cond(S) = 455.1300294071711
E1 = -597.4960444953435  E_coul = 150.30436950516528
init E= -447.191674990178
    CPU time for initialize scf      0.18 sec, wall time      0.02 sec
  HOMO = 24.0522243656003  LUMO = 134.147662959449
  mo_energy =
[-1.08801646e+02 -1.42062477e+01 -9.65591051e+00 -9.65591051e+00
 -9.65591051e+00 -1.72869779e+00 -1.72869779e+00 -1.72869779e+00
  2.40522244e+01  1.34147663e+02  8.50878593e+05  8.50878593e+05
  8.50878593e+05]
E1 = -635.7468244866802  E_coul = 224.96192015495595
cycle= 1 E= -410.784904331724  delta_E= 36.4  |g|= 1.11  |ddm|= 59.4
    CPU time for cycle= 1      0.21 sec, wall time      0.01 sec
diis-norm(errvec)=0.240282
diis-c [-0.05773549  1.        ]
  HOMO = 28.1041227319063  LUMO = 141.48678444831
  mo_energy =
[-1.00487971e+02 -8.77308909e+00 -4.44030375e+00 -4.44030375e+00
 -4.44030375e+00  5.21259896e-01  5.21259896e-01  5.21259897e-01
  2.81041227e+01  1.41486784e+02  8.50888078e+05  8.50888078e+05
  8.50888078e+05]
E1 = -635.6584001909351  E_coul = 224.8682542023926
cycle= 2 E= -410.790145988543  delta_E= -0.00524  |g|= 0.0191  |ddm|= 1.15
    CPU time for cycle= 2      0.15 sec, wall time      0.01 sec
diis-norm(errvec)=0.00324441
diis-c [-2.20797022e-06 -1.21491863e-02  1.01214919e+00]
  HOMO = 28.0994648544431  LUMO = 141.477394673922
  mo_energy =
[-1.00514962e+02 -8.77726648e+00 -4.44361944e+00 -4.44361944e+00
 -4.44361944e+00  5.20701851e-01  5.20701851e-01  5.20701851e-01
  2.80994649e+01  1.41477395e+02  8.50888014e+05  8.50888014e+05
  8.50888014e+05]
E1 = -635.656702926306  E_coul = 224.8665553276059
cycle= 3 E= -410.7901475987  delta_E= -1.61e-06  |g|= 0.000138  |ddm|= 0.0207
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=3.19324e-05
diis-c [-1.38271840e-12  2.86036629e-04 -2.19054359e-02  1.02161940e+00]
  HOMO = 28.0994420132904  LUMO = 141.477334570529
  mo_energy =
[-1.00515137e+02 -8.77728992e+00 -4.44363745e+00 -4.44363745e+00
 -4.44363745e+00  5.20698608e-01  5.20698608e-01  5.20698608e-01
  2.80994420e+01  1.41477335e+02  8.50888014e+05  8.50888014e+05
  8.50888014e+05]
E1 = -635.6566916774966  E_coul = 224.86654407871427
cycle= 4 E= -410.790147598782  delta_E= -8.23e-11  |g|= 2.55e-07  |ddm|= 0.000133
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
E1 = -635.6566916774966  E_coul = 224.86654407871427
  HOMO = 28.0994419298369  LUMO = 141.477334466628
  mo_energy =
[-1.00515137e+02 -8.77728998e+00 -4.44363750e+00 -4.44363750e+00
 -4.44363750e+00  5.20698600e-01  5.20698600e-01  5.20698600e-01
  2.80994419e+01  1.41477334e+02  8.50888014e+05  8.50888014e+05
  8.50888014e+05]
E1 = -635.6566916560344  E_coul = 224.8665440572545
Extra cycle  E= -410.79014759878  delta_E= 2.5e-12  |g|= 4.9e-09  |ddm|= 2.78e-07
    CPU time for scf_cycle      0.57 sec, wall time      0.07 sec
exp = [2.00107298e+01 9.50919847e+01 4.45872564e+00 3.01117876e+01
 6.48956307e+00 5.63499211e-01 3.44827486e+05]
E = -410.79014759877987
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
number_of_s_exps = 4
number_of_p_exps = 3

exps = np.zeros((number_of_s_exps+number_of_p_exps,2))
#exps[:, 0] = decaying_nums(5)

# S
exps[0,0] = 20.0
exps[1,0] = 9.5045827955887916e+01
exps[2,0] = 4.4881042475048387e+00 
exps[3,0] = 3.9799528004692630e-01
             
# P          
exps[3,0] = 3.0108199280832128e+01
exps[4,0] = 6.1393781325590453e+00
exps[5,0] = 4.8929328703550412e-01

basis =  str(number_of_s_exps)+"s"+str(number_of_p_exps)+"p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc21115.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 24
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 18 14:57:36 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35677784.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 32000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 32000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 32000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  20.0053649247        1
[INPUT] 0    0    [1    /1   ]  95.0689063157        1
[INPUT] 0    0    [1    /1   ]  4.47341494214        1
[INPUT] 0    0    [1    /1   ]  30.1099934207        1
[INPUT] 1    0    [1    /1   ]  6.31447060231        1
[INPUT] 1    0    [1    /1   ]  0.526396249176       1
[INPUT] 1    0    [1    /1   ]  172413.743153        1

nuclear repulsion = 0
number of shells = 7
number of NR pGTOs = 13
number of NR cGTOs = 13
basis = {'Ar': [[0, [20.00536492473615, 1.0]], [0, [95.06890631567317, 1.0]], [0, [4.473414942143129, 1.0]], [0, [30.10999342074655, 1.0]], [1, [6.314470602306625, 1.0]], [1, [0.5263962491764864, 1.0]], [1, [172413.74315330686, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [20.00536492]
bas 1, expnt(s) = [95.06890632]
bas 2, expnt(s) = [4.47341494]
bas 3, expnt(s) = [30.10999342]
bas 4, expnt(s) = [6.3144706]
bas 5, expnt(s) = [0.52639625]
bas 6, expnt(s) = [172413.74315331]
CPU time:        17.32
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  1  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]
 [ 0  1  1  1  0 36 37  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 2.00053649e+01 2.38987333e+01 9.50689063e+01 7.69208186e+01
 4.47341494e+00 7.77131320e+00 3.01099934e+01 3.24749148e+01
 6.31447060e+00 2.92015278e+01 5.26396249e-01 1.30805310e+00
 1.72413743e+05 1.02494189e+07]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 15.175770822878224
cond(S) = 456.07581343957855
E1 = -594.5360075066153  E_coul = 147.97080497850246
init E= -446.565202528113
    CPU time for initialize scf      0.18 sec, wall time      0.02 sec
  HOMO = 23.8630352756735  LUMO = 133.879009234519
  mo_energy =
[-1.09140983e+02 -1.44111887e+01 -9.76072680e+00 -9.76072680e+00
 -9.76072680e+00 -1.76169609e+00 -1.76169609e+00 -1.76169609e+00
  2.38630353e+01  1.33879009e+02  4.23137396e+05  4.23137396e+05
  4.23137396e+05]
E1 = -632.5625350865292  E_coul = 221.77730003904162
cycle= 1 E= -410.785235047488  delta_E= 35.8  |g|= 1.11  |ddm|= 59.5
    CPU time for cycle= 1      0.21 sec, wall time      0.01 sec
diis-norm(errvec)=0.240024
diis-c [-0.05761159  1.        ]
  HOMO = 27.9014710372863  LUMO = 141.209338425475
  mo_energy =
[-1.00833242e+02 -8.98967842e+00 -4.58079825e+00 -4.58079825e+00
 -4.58079825e+00  3.85760711e-01  3.85760711e-01  3.85760711e-01
  2.79014710e+01  1.41209338e+02  4.23146876e+05  4.23146876e+05
  4.23146876e+05]
E1 = -632.4745549254629  E_coul = 221.68404120124373
cycle= 2 E= -410.790513724219  delta_E= -0.00528  |g|= 0.0192  |ddm|= 1.16
    CPU time for cycle= 2      0.15 sec, wall time      0.01 sec
diis-norm(errvec)=0.00323536
diis-c [-2.20379996e-06 -1.21220069e-02  1.01212201e+00]
  HOMO = 27.8967962557519  LUMO = 141.19992232644
  mo_energy =
[-1.00860327e+02 -8.99388623e+00 -4.58408316e+00 -4.58408316e+00
 -4.58408316e+00  3.85287771e-01  3.85287772e-01  3.85287772e-01
  2.78967963e+01  1.41199922e+02  4.23146812e+05  4.23146812e+05
  4.23146812e+05]
E1 = -632.4728652863104  E_coul = 221.68234994111916
cycle= 3 E= -410.790515345191  delta_E= -1.62e-06  |g|= 0.000138  |ddm|= 0.0208
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=3.19749e-05
diis-c [-1.54537207e-12  2.86242232e-04 -2.19477448e-02  1.02166150e+00]
  HOMO = 27.8967732049734  LUMO = 141.19986179808
  mo_energy =
[-1.00860503e+02 -8.99390996e+00 -4.58410103e+00 -4.58410103e+00
 -4.58410103e+00  3.85285015e-01  3.85285015e-01  3.85285015e-01
  2.78967732e+01  1.41199862e+02  4.23146812e+05  4.23146812e+05
  4.23146812e+05]
E1 = -632.4728540465804  E_coul = 221.6823387013071
cycle= 4 E= -410.790515345273  delta_E= -8.21e-11  |g|= 2.54e-07  |ddm|= 0.000134
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
E1 = -632.4728540465804  E_coul = 221.6823387013071
  HOMO = 27.8967731215447  LUMO = 141.199861694587
  mo_energy =
[-1.00860503e+02 -8.99391002e+00 -4.58410108e+00 -4.58410108e+00
 -4.58410108e+00  3.85285008e-01  3.85285008e-01  3.85285008e-01
  2.78967731e+01  1.41199862e+02  4.23146812e+05  4.23146812e+05
  4.23146812e+05]
E1 = -632.4728540253634  E_coul = 221.6823386800906
Extra cycle  E= -410.790515345273  delta_E= 5.12e-13  |g|= 4.88e-09  |ddm|= 2.78e-07
    CPU time for scf_cycle      0.57 sec, wall time      0.07 sec
exp = [2.00053649e+01 9.50689063e+01 4.47341494e+00 3.01099934e+01
 6.31447060e+00 5.26396249e-01 1.72413743e+05]
E = -410.7905153452728
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
number_of_s_exps = 4
number_of_p_exps = 3

exps = np.zeros((number_of_s_exps+number_of_p_exps,2))
#exps[:, 0] = decaying_nums(5)

# S
exps[0,0] = 20.0
exps[1,0] = 9.5045827955887916e+01
exps[2,0] = 4.4881042475048387e+00 
exps[3,0] = 3.9799528004692630e-01
             
# P          
exps[3,0] = 3.0108199280832128e+01
exps[4,0] = 6.1393781325590453e+00
exps[5,0] = 4.8929328703550412e-01

basis =  str(number_of_s_exps)+"s"+str(number_of_p_exps)+"p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc21115.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 24
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 18 14:57:37 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35677784.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 32000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 32000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 32000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  20.0026824624        1
[INPUT] 0    0    [1    /1   ]  95.0573671358        1
[INPUT] 0    0    [1    /1   ]  4.48075959482        1
[INPUT] 0    0    [1    /1   ]  30.1090963508        1
[INPUT] 1    0    [1    /1   ]  6.22692436742        1
[INPUT] 1    0    [1    /1   ]  0.507844768104       1
[INPUT] 1    0    [1    /1   ]  86206.8715671        1

nuclear repulsion = 0
number of shells = 7
number of NR pGTOs = 13
number of NR cGTOs = 13
basis = {'Ar': [[0, [20.002682462367776, 1.0]], [0, [95.05736713577926, 1.0]], [0, [4.480759594824797, 1.0]], [0, [30.10909635078924, 1.0]], [1, [6.226924367423135, 1.0]], [1, [0.5078447681039397, 1.0]], [1, [86206.87156710215, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [20.00268246]
bas 1, expnt(s) = [95.05736714]
bas 2, expnt(s) = [4.48075959]
bas 3, expnt(s) = [30.10909635]
bas 4, expnt(s) = [6.22692437]
bas 5, expnt(s) = [0.50784477]
bas 6, expnt(s) = [86206.8715671]
CPU time:        17.93
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  1  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]
 [ 0  1  1  1  0 36 37  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 2.00026825e+01 2.38963299e+01 9.50573671e+01 7.69138162e+01
 4.48075959e+00 7.78088070e+00 3.01090964e+01 3.24741891e+01
 6.22692437e+00 2.86963315e+01 5.07844768e-01 1.25068552e+00
 8.62068716e+04 4.30934980e+06]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 15.188364965739144
cond(S) = 456.5498686068318
E1 = -592.8483112738312  E_coul = 146.67395130755352
init E= -446.174359966278
    CPU time for initialize scf      0.18 sec, wall time      0.02 sec
  HOMO = 23.7564627872526  LUMO = 133.732614577537
  mo_energy =
[-1.09322792e+02 -1.45247864e+01 -9.82176163e+00 -9.82176163e+00
 -9.82176163e+00 -1.77945441e+00 -1.77945441e+00 -1.77945441e+00
  2.37564628e+01  1.33732615e+02  2.09948880e+05  2.09948880e+05
  2.09948880e+05]
E1 = -630.9091023932586  E_coul = 220.14549453021803
cycle= 1 E= -410.763607863041  delta_E= 35.4  |g|= 1.11  |ddm|= 59.6
    CPU time for cycle= 1      0.22 sec, wall time      0.01 sec
diis-norm(errvec)=0.239945
diis-c [-0.05757379  1.        ]
  HOMO = 27.7963381366022  LUMO = 141.067123160659
  mo_energy =
[-1.01009248e+02 -9.10107852e+00 -4.65337913e+00 -4.65337913e+00
 -4.65337913e+00  3.20821127e-01  3.20821127e-01  3.20821127e-01
  2.77963381e+01  1.41067123e+02  2.09958365e+05  2.09958365e+05
  2.09958365e+05]
E1 = -630.8213074241366  E_coul = 220.0523974876896
cycle= 2 E= -410.768909936447  delta_E= -0.0053  |g|= 0.0192  |ddm|= 1.16
    CPU time for cycle= 2      0.15 sec, wall time      0.01 sec
diis-norm(errvec)=0.00323107
diis-c [-2.20543460e-06 -1.21042207e-02  1.01210422e+00]
  HOMO = 27.7916526470518  LUMO = 141.05768997908
  mo_energy =
[-1.01036391e+02 -9.10530360e+00 -4.65664747e+00 -4.65664747e+00
 -4.65664747e+00  3.20387790e-01  3.20387790e-01  3.20387790e-01
  2.77916526e+01  1.41057690e+02  2.09958302e+05  2.09958302e+05
  2.09958302e+05]
E1 = -630.819620859317  E_coul = 220.0507092950067
cycle= 3 E= -410.76891156431  delta_E= -1.63e-06  |g|= 0.000139  |ddm|= 0.0209
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=3.20146e-05
diis-c [-2.51961357e-12  2.86058539e-04 -2.19532720e-02  1.02166721e+00]
  HOMO = 27.7916294617739  LUMO = 141.057629173171
  mo_energy =
[-1.01036568e+02 -9.10532750e+00 -4.65666527e+00 -4.65666527e+00
 -4.65666527e+00  3.20385259e-01  3.20385259e-01  3.20385259e-01
  2.77916295e+01  1.41057629e+02  2.09958301e+05  2.09958301e+05
  2.09958301e+05]
E1 = -630.8196096124886  E_coul = 220.05069804809776
cycle= 4 E= -410.768911564391  delta_E= -8.07e-11  |g|= 2.55e-07  |ddm|= 0.000135
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
E1 = -630.8196096124886  E_coul = 220.05069804809776
  HOMO = 27.7916293780909  LUMO = 141.05762906913
  mo_energy =
[-1.01036568e+02 -9.10532756e+00 -4.65666532e+00 -4.65666532e+00
 -4.65666532e+00  3.20385253e-01  3.20385253e-01  3.20385253e-01
  2.77916294e+01  1.41057629e+02  2.09958301e+05  2.09958301e+05
  2.09958301e+05]
E1 = -630.8196095912547  E_coul = 220.0506980268634
Extra cycle  E= -410.768911564391  delta_E= -3.41e-13  |g|= 4.9e-09  |ddm|= 2.79e-07
    CPU time for scf_cycle      0.57 sec, wall time      0.07 sec
exp = [2.00026825e+01 9.50573671e+01 4.48075959e+00 3.01090964e+01
 6.22692437e+00 5.07844768e-01 8.62068716e+04]
E = -410.76891156439126
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
number_of_s_exps = 4
number_of_p_exps = 3

exps = np.zeros((number_of_s_exps+number_of_p_exps,2))
#exps[:, 0] = decaying_nums(5)

# S
exps[0,0] = 20.0
exps[1,0] = 9.5045827955887916e+01
exps[2,0] = 4.4881042475048387e+00 
exps[3,0] = 3.9799528004692630e-01
             
# P          
exps[3,0] = 3.0108199280832128e+01
exps[4,0] = 6.1393781325590453e+00
exps[5,0] = 4.8929328703550412e-01

basis =  str(number_of_s_exps)+"s"+str(number_of_p_exps)+"p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc21115.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 24
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 18 14:57:37 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35677784.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 32000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 32000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 32000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  20.0013412312        1
[INPUT] 0    0    [1    /1   ]  95.0515975458        1
[INPUT] 0    0    [1    /1   ]  4.48443192117        1
[INPUT] 0    0    [1    /1   ]  30.1086478158        1
[INPUT] 1    0    [1    /1   ]  6.18315124998        1
[INPUT] 1    0    [1    /1   ]  0.498569027568       1
[INPUT] 1    0    [1    /1   ]  43103.435774         1

nuclear repulsion = 0
number of shells = 7
number of NR pGTOs = 13
number of NR cGTOs = 13
basis = {'Ar': [[0, [20.00134123118359, 1.0]], [0, [95.05159754583231, 1.0]], [0, [4.4844319211656325, 1.0]], [0, [30.108647815810585, 1.0]], [1, [6.183151249981386, 1.0]], [1, [0.4985690275676656, 1.0]], [1, [43103.435773995865, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [20.00134123]
bas 1, expnt(s) = [95.05159755]
bas 2, expnt(s) = [4.48443192]
bas 3, expnt(s) = [30.10864782]
bas 4, expnt(s) = [6.18315125]
bas 5, expnt(s) = [0.49856903]
bas 6, expnt(s) = [43103.435774]
CPU time:        18.54
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  1  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]
 [ 0  1  1  1  0 36 37  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 2.00013412e+01 2.38951281e+01 9.50515975e+01 7.69103149e+01
 4.48443192e+00 7.78566299e+00 3.01086478e+01 3.24738263e+01
 6.18315125e+00 2.84443969e+01 4.98569028e-01 1.22219643e+00
 4.31034358e+04 1.81185840e+06]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 15.192421580791892
cond(S) = 456.7871877107286
E1 = -591.8836141382933  E_coul = 145.99093496907318
init E= -445.89267916922
    CPU time for initialize scf      0.18 sec, wall time      0.02 sec
  HOMO = 23.7000078769643  LUMO = 133.656236686689
  mo_energy =
[-1.09416884e+02 -1.45845428e+01 -9.85458241e+00 -9.85458241e+00
 -9.85458241e+00 -1.78869191e+00 -1.78869191e+00 -1.78869191e+00
  2.37000079e+01  1.33656237e+02  1.03836910e+05  1.03836910e+05
  1.03836910e+05]
E1 = -630.0662471557392  E_coul = 219.3191606852864
cycle= 1 E= -410.747086470453  delta_E= 35.1  |g|= 1.11  |ddm|= 59.6
    CPU time for cycle= 1      0.21 sec, wall time      0.01 sec
diis-norm(errvec)=0.240003
diis-c [-0.05760145  1.        ]
  HOMO = 27.7427761999386  LUMO = 140.995097822818
  mo_energy =
[-1.01098137e+02 -9.15759618e+00 -4.69027848e+00 -4.69027848e+00
 -4.69027848e+00  2.89072432e-01  2.89072432e-01  2.89072432e-01
  2.77427762e+01  1.40995098e+02  1.03846398e+05  1.03846398e+05
  1.03846398e+05]
E1 = -629.9785371488713  E_coul = 219.22613584700093
cycle= 2 E= -410.75240130187  delta_E= -0.00531  |g|= 0.0192  |ddm|= 1.17
    CPU time for cycle= 2      0.15 sec, wall time      0.01 sec
diis-norm(errvec)=0.00322898
diis-c [-2.21724425e-06 -1.20824222e-02  1.01208242e+00]
  HOMO = 27.7380849199354  LUMO = 140.985655406966
  mo_energy =
[-1.01125311e+02 -9.16183029e+00 -4.69353813e+00 -4.69353813e+00
 -4.69353813e+00  2.88658172e-01  2.88658172e-01  2.88658172e-01
  2.77380849e+01  1.40985655e+02  1.03846335e+05  1.03846335e+05
  1.03846335e+05]
E1 = -629.976851989031  E_coul = 219.22444905553786
cycle= 3 E= -410.752402933493  delta_E= -1.63e-06  |g|= 0.000139  |ddm|= 0.0209
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=3.20497e-05
diis-c [-7.90162351e-12  2.84397724e-04 -2.18597771e-02  1.02157538e+00]
  HOMO = 27.7380616065626  LUMO = 140.98559434032
  mo_energy =
[-1.01125489e+02 -9.16185433e+00 -4.69355594e+00 -4.69355594e+00
 -4.69355594e+00  2.88655744e-01  2.88655744e-01  2.88655744e-01
  2.77380616e+01  1.40985594e+02  1.03846334e+05  1.03846334e+05
  1.03846334e+05]
E1 = -629.9768407169396  E_coul = 219.22443778336327
cycle= 4 E= -410.752402933576  delta_E= -8.32e-11  |g|= 2.65e-07  |ddm|= 0.000136
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
E1 = -629.9768407169396  E_coul = 219.22443778336327
  HOMO = 27.7380615215406  LUMO = 140.985594232106
  mo_energy =
[-1.01125489e+02 -9.16185439e+00 -4.69355599e+00 -4.69355599e+00
 -4.69355599e+00  2.88655738e-01  2.88655738e-01  2.88655738e-01
  2.77380615e+01  1.40985594e+02  1.03846334e+05  1.03846334e+05
  1.03846334e+05]
E1 = -629.9768406949624  E_coul = 219.2244377613869
Extra cycle  E= -410.752402933576  delta_E= 7.39e-13  |g|= 5.1e-09  |ddm|= 2.89e-07
    CPU time for scf_cycle      0.58 sec, wall time      0.07 sec
exp = [2.00013412e+01 9.50515975e+01 4.48443192e+00 3.01086478e+01
 6.18315125e+00 4.98569028e-01 4.31034358e+04]
E = -410.7524029335756
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
number_of_s_exps = 4
number_of_p_exps = 3

exps = np.zeros((number_of_s_exps+number_of_p_exps,2))
#exps[:, 0] = decaying_nums(5)

# S
exps[0,0] = 20.0
exps[1,0] = 9.5045827955887916e+01
exps[2,0] = 4.4881042475048387e+00 
exps[3,0] = 3.9799528004692630e-01
             
# P          
exps[3,0] = 3.0108199280832128e+01
exps[4,0] = 6.1393781325590453e+00
exps[5,0] = 4.8929328703550412e-01

basis =  str(number_of_s_exps)+"s"+str(number_of_p_exps)+"p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc21115.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 24
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 18 14:57:37 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35677784.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 32000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 32000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 32000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  20.0006706156        1
[INPUT] 0    0    [1    /1   ]  95.0487127509        1
[INPUT] 0    0    [1    /1   ]  4.48626808434        1
[INPUT] 0    0    [1    /1   ]  30.1084235483        1
[INPUT] 1    0    [1    /1   ]  6.16126469126        1
[INPUT] 1    0    [1    /1   ]  0.4939311573         1
[INPUT] 1    0    [1    /1   ]  21551.7178774        1

nuclear repulsion = 0
number of shells = 7
number of NR pGTOs = 13
number of NR cGTOs = 13
basis = {'Ar': [[0, [20.0006706155915, 1.0]], [0, [95.04871275085884, 1.0]], [0, [4.48626808433605, 1.0]], [0, [30.10842354832126, 1.0]], [1, [6.1612646912605085, 1.0]], [1, [0.49393115729952786, 1.0]], [1, [21551.717877439736, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [20.00067062]
bas 1, expnt(s) = [95.04871275]
bas 2, expnt(s) = [4.48626808]
bas 3, expnt(s) = [30.10842355]
bas 4, expnt(s) = [6.16126469]
bas 5, expnt(s) = [0.49393116]
bas 6, expnt(s) = [21551.71787744]
CPU time:        19.15
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  1  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]
 [ 0  1  1  1  0 36 37  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 2.00006706e+01 2.38945272e+01 9.50487128e+01 7.69085643e+01
 4.48626808e+00 7.78805376e+00 3.01084235e+01 3.24736449e+01
 6.16126469e+00 2.83185965e+01 4.93931157e-01 1.20800135e+00
 2.15517179e+04 7.61792617e+05]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 15.193855943821646
cond(S) = 456.9059202346275
E1 = -591.1996650480222  E_coul = 145.64081243603263
init E= -445.55885261199
    CPU time for initialize scf      0.18 sec, wall time      0.02 sec
  HOMO = 23.6709937144857  LUMO = 133.617285430449
  mo_energy =
[-1.09464665e+02 -1.46151623e+01 -9.87157585e+00 -9.87157585e+00
 -9.87157585e+00 -1.79340185e+00 -1.79340185e+00 -1.79340185e+00
  2.36709937e+01  1.33617285e+02  5.11219121e+04  5.11219121e+04
  5.11219121e+04]
E1 = -629.6406844478914  E_coul = 218.90330667869503
cycle= 1 E= -410.737377769196  delta_E= 34.8  |g|= 1.11  |ddm|= 59.6
    CPU time for cycle= 1      0.21 sec, wall time      0.01 sec
diis-norm(errvec)=0.240518
diis-c [-0.05784876  1.        ]
  HOMO = 27.7157403853242  LUMO = 140.958849322052
  mo_energy =
[-1.01142810e+02 -9.18606513e+00 -4.70888586e+00 -4.70888586e+00
 -4.70888586e+00  2.73380488e-01  2.73380488e-01  2.73380488e-01
  2.77157404e+01  1.40958849e+02  5.11313968e+04  5.11313968e+04
  5.11313968e+04]
E1 = -629.5530190214556  E_coul = 218.81032022970746
cycle= 2 E= -410.742698791748  delta_E= -0.00532  |g|= 0.0193  |ddm|= 1.17
    CPU time for cycle= 2      0.15 sec, wall time      0.01 sec
diis-norm(errvec)=0.00322792
diis-c [-2.28102845e-06 -1.20036881e-02  1.01200369e+00]
  HOMO = 27.7110465654208  LUMO = 140.949403234378
  mo_energy =
[-1.01169997e+02 -9.19030341e+00 -4.71214074e+00 -4.71214074e+00
 -4.71214074e+00  2.72975627e-01  2.72975627e-01  2.72975627e-01
  2.77110466e+01  1.40949403e+02  5.11313339e+04  5.11313339e+04
  5.11313339e+04]
E1 = -629.5513347230213  E_coul = 218.80863429784995
cycle= 3 E= -410.742700425171  delta_E= -1.63e-06  |g|= 0.000141  |ddm|= 0.021
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=3.21327e-05
diis-c [-3.61609814e-11  2.75356405e-04 -2.13091037e-02  1.02103375e+00]
  HOMO = 27.7110228803121  LUMO = 140.949341427181
  mo_energy =
[-1.01170176e+02 -9.19032780e+00 -4.71215876e+00 -4.71215876e+00
 -4.71215876e+00  2.72973225e-01  2.72973225e-01  2.72973225e-01
  2.77110229e+01  1.40949341e+02  5.11313335e+04  5.11313335e+04
  5.11313335e+04]
E1 = -629.5513233295916  E_coul = 218.80862290433473
cycle= 4 E= -410.742700425257  delta_E= -8.55e-11  |g|= 3.17e-07  |ddm|= 0.000137
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
E1 = -629.5513233295916  E_coul = 218.80862290433473
  HOMO = 27.7110227883  LUMO = 140.949341296447
  mo_energy =
[-1.01170177e+02 -9.19032788e+00 -4.71215882e+00 -4.71215882e+00
 -4.71215882e+00  2.72973218e-01  2.72973218e-01  2.72973218e-01
  2.77110228e+01  1.40949341e+02  5.11313335e+04  5.11313335e+04
  5.11313335e+04]
E1 = -629.5513233034037  E_coul = 218.8086228781488
Extra cycle  E= -410.742700425255  delta_E= 1.99e-12  |g|= 6.24e-09  |ddm|= 3.39e-07
    CPU time for scf_cycle      0.57 sec, wall time      0.07 sec
exp = [2.00006706e+01 9.50487128e+01 4.48626808e+00 3.01084235e+01
 6.16126469e+00 4.93931157e-01 2.15517179e+04]
E = -410.7427004252549
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
number_of_s_exps = 4
number_of_p_exps = 3

exps = np.zeros((number_of_s_exps+number_of_p_exps,2))
#exps[:, 0] = decaying_nums(5)

# S
exps[0,0] = 20.0
exps[1,0] = 9.5045827955887916e+01
exps[2,0] = 4.4881042475048387e+00 
exps[3,0] = 3.9799528004692630e-01
             
# P          
exps[3,0] = 3.0108199280832128e+01
exps[4,0] = 6.1393781325590453e+00
exps[5,0] = 4.8929328703550412e-01

basis =  str(number_of_s_exps)+"s"+str(number_of_p_exps)+"p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc21115.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 24
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 18 14:57:37 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35677784.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 32000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 32000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 32000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  20.0003353078        1
[INPUT] 0    0    [1    /1   ]  95.0472703534        1
[INPUT] 0    0    [1    /1   ]  4.48718616592        1
[INPUT] 0    0    [1    /1   ]  30.1083114146        1
[INPUT] 1    0    [1    /1   ]  6.1503214119         1
[INPUT] 1    0    [1    /1   ]  0.491612222165       1
[INPUT] 1    0    [1    /1   ]  10775.8589292        1

nuclear repulsion = 0
number of shells = 7
number of NR pGTOs = 13
number of NR cGTOs = 13
basis = {'Ar': [[0, [20.000335307795453, 1.0]], [0, [95.0472703533721, 1.0]], [0, [4.487186165921258, 1.0]], [0, [30.108311414576594, 1.0]], [1, [6.150321411900068, 1.0]], [1, [0.4916122221654586, 1.0]], [1, [10775.858929159911, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [20.00033531]
bas 1, expnt(s) = [95.04727035]
bas 2, expnt(s) = [4.48718617]
bas 3, expnt(s) = [30.10831141]
bas 4, expnt(s) = [6.15032141]
bas 5, expnt(s) = [0.49161222]
bas 6, expnt(s) = [10775.85892916]
CPU time:        19.76
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  1  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]
 [ 0  1  1  1  0 36 37  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 2.00003353e+01 2.38942268e+01 9.50472704e+01 7.69076889e+01
 4.48718617e+00 7.78924906e+00 3.01083114e+01 3.24735542e+01
 6.15032141e+00 2.82557382e+01 4.91612222e-01 1.20091628e+00
 1.07758589e+04 3.20294340e+05]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 15.19444681177976
cond(S) = 456.96530475108557
E1 = -590.3876539140113  E_coul = 145.46517711201008
init E= -444.922476802001
    CPU time for initialize scf      0.18 sec, wall time      0.02 sec
  HOMO = 23.6564381691434  LUMO = 133.597905593561
  mo_energy =
[-1.09488308e+02 -1.46305465e+01 -9.88015676e+00 -9.88015676e+00
 -9.88015676e+00 -1.79575968e+00 -1.79575968e+00 -1.79575968e+00
  2.36564382e+01  1.33597906e+02  2.50054440e+04  2.50054440e+04
  2.50054440e+04]
E1 = -629.4269130898264  E_coul = 218.6946784664604
cycle= 1 E= -410.732234623366  delta_E= 34.2  |g|= 1.11  |ddm|= 59.6
    CPU time for cycle= 1      0.21 sec, wall time      0.01 sec
diis-norm(errvec)=0.243338
diis-c [-0.05921336  1.        ]
  HOMO = 27.7021575397258  LUMO = 140.94066346794
  mo_energy =
[-1.01165212e+02 -9.20035344e+00 -4.71824087e+00 -4.71824087e+00
 -4.71824087e+00  2.65578693e-01  2.65578693e-01  2.65578693e-01
  2.77021575e+01  1.40940663e+02  2.50149159e+04  2.50149159e+04
  2.50149159e+04]
E1 = -629.339290693864  E_coul = 218.60173428748098
cycle= 2 E= -410.737556406383  delta_E= -0.00532  |g|= 0.0193  |ddm|= 1.17
    CPU time for cycle= 2      0.15 sec, wall time      0.01 sec
diis-norm(errvec)=0.00322743
diis-c [-2.61248345e-06 -1.16136137e-02  1.01161361e+00]
  HOMO = 27.6974649117618  LUMO = 140.931221507676
  mo_energy =
[-1.01192387e+02 -9.20459149e+00 -4.72149160e+00 -4.72149160e+00
 -4.72149160e+00  2.65178710e-01  2.65178710e-01  2.65178710e-01
  2.76974649e+01  1.40931222e+02  2.50148537e+04  2.50148537e+04
  2.50148537e+04]
E1 = -629.3376078486352  E_coul = 218.60004980875559
cycle= 3 E= -410.73755803988  delta_E= -1.63e-06  |g|= 0.000147  |ddm|= 0.021
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=3.25368e-05
diis-c [-1.59000120e-10  2.35737201e-04 -1.89380297e-02  1.01870229e+00]
  HOMO = 27.6974394474184  LUMO = 140.931156165435
  mo_energy =
[-1.01192577e+02 -9.20461749e+00 -4.72151082e+00 -4.72151082e+00
 -4.72151082e+00  2.65176185e-01  2.65176185e-01  2.65176185e-01
  2.76974394e+01  1.40931156e+02  2.50148533e+04  2.50148533e+04
  2.50148533e+04]
E1 = -629.3375958306393  E_coul = 218.60003779066972
cycle= 4 E= -410.73755803997  delta_E= -8.99e-11  |g|= 5.68e-07  |ddm|= 0.000145
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
E1 = -629.3375958306393  E_coul = 218.60003779066972
  HOMO = 27.6974393247707  LUMO = 140.931155935832
  mo_energy =
[-1.01192578e+02 -9.20461759e+00 -4.72151090e+00 -4.72151090e+00
 -4.72151090e+00  2.65176175e-01  2.65176175e-01  2.65176175e-01
  2.76974393e+01  1.40931156e+02  2.50148533e+04  2.50148533e+04
  2.50148533e+04]
E1 = -629.3375957858909  E_coul = 218.60003774591925
Extra cycle  E= -410.737558039972  delta_E= -2.05e-12  |g|= 1.14e-08  |ddm|= 5.58e-07
    CPU time for scf_cycle      0.58 sec, wall time      0.07 sec
exp = [2.00003353e+01 9.50472704e+01 4.48718617e+00 3.01083114e+01
 6.15032141e+00 4.91612222e-01 1.07758589e+04]
E = -410.73755803997165
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
number_of_s_exps = 4
number_of_p_exps = 3

exps = np.zeros((number_of_s_exps+number_of_p_exps,2))
#exps[:, 0] = decaying_nums(5)

# S
exps[0,0] = 20.0
exps[1,0] = 9.5045827955887916e+01
exps[2,0] = 4.4881042475048387e+00 
exps[3,0] = 3.9799528004692630e-01
             
# P          
exps[3,0] = 3.0108199280832128e+01
exps[4,0] = 6.1393781325590453e+00
exps[5,0] = 4.8929328703550412e-01

basis =  str(number_of_s_exps)+"s"+str(number_of_p_exps)+"p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc21115.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 24
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 18 14:57:37 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35677784.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 32000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 32000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 32000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  20.0001676539        1
[INPUT] 0    0    [1    /1   ]  95.0465491546        1
[INPUT] 0    0    [1    /1   ]  4.48764520671        1
[INPUT] 0    0    [1    /1   ]  30.1082553477        1
[INPUT] 1    0    [1    /1   ]  6.14484977222        1
[INPUT] 1    0    [1    /1   ]  0.490452754598       1
[INPUT] 1    0    [1    /1   ]  5387.92945502        1

nuclear repulsion = 0
number of shells = 7
number of NR pGTOs = 13
number of NR cGTOs = 13
basis = {'Ar': [[0, [20.000167653897428, 1.0]], [0, [95.04654915462872, 1.0]], [0, [4.4876452067138635, 1.0]], [0, [30.10825534770426, 1.0]], [1, [6.144849772219847, 1.0]], [1, [0.4904527545984238, 1.0]], [1, [5387.929455019068, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [20.00016765]
bas 1, expnt(s) = [95.04654915]
bas 2, expnt(s) = [4.48764521]
bas 3, expnt(s) = [30.10825535]
bas 4, expnt(s) = [6.14484977]
bas 5, expnt(s) = [0.49045275]
bas 6, expnt(s) = [5387.92945502]
CPU time:        20.37
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  1  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]
 [ 0  1  1  1  0 36 37  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 2.00001677e+01 2.38940766e+01 9.50465492e+01 7.69072512e+01
 4.48764521e+00 7.78984668e+00 3.01082553e+01 3.24735088e+01
 6.14484977e+00 2.82243195e+01 4.90452755e-01 1.19737687e+00
 5.38792946e+03 1.34667181e+05]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 15.194844705549016
cond(S) = 456.99500157434824
E1 = -588.9264263190303  E_coul = 145.38517906863024
init E= -443.5412472504
    CPU time for initialize scf      0.18 sec, wall time      0.02 sec
  HOMO = 23.64989646844  LUMO = 133.589658552987
  mo_energy =
[-1.09497931e+02 -1.46376930e+01 -9.88415811e+00 -9.88415811e+00
 -9.88415811e+00 -1.79683822e+00 -1.79683822e+00 -1.79683822e+00
  2.36498965e+01  1.33589659e+02  1.21174891e+04  1.21174891e+04
  1.21174891e+04]
E1 = -629.3201176875772  E_coul = 218.5901028383674
cycle= 1 E= -410.73001484921  delta_E= 32.8  |g|= 1.11  |ddm|= 59.6
    CPU time for cycle= 1      0.21 sec, wall time      0.01 sec
diis-norm(errvec)=0.257411
diis-c [-0.06626019  1.        ]
  HOMO = 27.6953486491011  LUMO = 140.931548349509
  mo_energy =
[-1.01176460e+02 -9.20751315e+00 -4.72299350e+00 -4.72299350e+00
 -4.72299350e+00  2.61679450e-01  2.61679450e-01  2.61679450e-01
  2.76953486e+01  1.40931548e+02  1.21269292e+04  1.21269292e+04
  1.21269292e+04]
E1 = -629.2326202551247  E_coul = 218.49729486971026
cycle= 2 E= -410.735325385415  delta_E= -0.00531  |g|= 0.0192  |ddm|= 1.17
    CPU time for cycle= 2      0.15 sec, wall time      0.01 sec
diis-norm(errvec)=0.0032282
diis-c [-4.08167614e-06 -9.87840538e-03  1.00987841e+00]
  HOMO = 27.6906679611139  LUMO = 140.92213610735
  mo_energy =
[-1.01203549e+02 -9.21174034e+00 -4.72623415e+00 -4.72623415e+00
 -4.72623415e+00  2.61282911e-01  2.61282911e-01  2.61282911e-01
  2.76906680e+01  1.40922136e+02  1.21268686e+04  1.21268686e+04
  1.21268686e+04]
E1 = -629.2309428955401  E_coul = 218.49561588075306
cycle= 3 E= -410.735327014787  delta_E= -1.63e-06  |g|= 0.000177  |ddm|= 0.0209
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=3.48556e-05
diis-c [-4.50649105e-10  1.40298738e-04 -1.40082538e-02  1.01386796e+00]
  HOMO = 27.6906345612244  LUMO = 140.92205494226
  mo_energy =
[-1.01203784e+02 -9.21177348e+00 -4.72625885e+00 -4.72625885e+00
 -4.72625885e+00  2.61279732e-01  2.61279732e-01  2.61279732e-01
  2.76906346e+01  1.40922055e+02  1.21268681e+04  1.21268681e+04
  1.21268681e+04]
E1 = -629.2309280586028  E_coul = 218.49560104367856
cycle= 4 E= -410.735327014924  delta_E= -1.37e-10  |g|= 1.2e-06  |ddm|= 0.00018
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
E1 = -629.2309280586028  E_coul = 218.49560104367856
  HOMO = 27.6906343643725  LUMO = 140.922054473619
  mo_energy =
[-1.01203786e+02 -9.21177368e+00 -4.72625899e+00 -4.72625899e+00
 -4.72625899e+00  2.61279713e-01  2.61279713e-01  2.61279713e-01
  2.76906344e+01  1.40922054e+02  1.21268681e+04  1.21268681e+04
  1.21268681e+04]
E1 = -629.2309279689804  E_coul = 218.4956009540556
Extra cycle  E= -410.735327014925  delta_E= -5.68e-13  |g|= 2.42e-08  |ddm|= 1.09e-06
    CPU time for scf_cycle      0.57 sec, wall time      0.07 sec
exp = [2.00001677e+01 9.50465492e+01 4.48764521e+00 3.01082553e+01
 6.14484977e+00 4.90452755e-01 5.38792946e+03]
E = -410.7353270149248
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
number_of_s_exps = 4
number_of_p_exps = 3

exps = np.zeros((number_of_s_exps+number_of_p_exps,2))
#exps[:, 0] = decaying_nums(5)

# S
exps[0,0] = 20.0
exps[1,0] = 9.5045827955887916e+01
exps[2,0] = 4.4881042475048387e+00 
exps[3,0] = 3.9799528004692630e-01
             
# P          
exps[3,0] = 3.0108199280832128e+01
exps[4,0] = 6.1393781325590453e+00
exps[5,0] = 4.8929328703550412e-01

basis =  str(number_of_s_exps)+"s"+str(number_of_p_exps)+"p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc21115.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 24
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 18 14:57:37 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35677784.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 32000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 32000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 32000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  20.0000838269        1
[INPUT] 0    0    [1    /1   ]  95.0461885553        1
[INPUT] 0    0    [1    /1   ]  4.48787472711        1
[INPUT] 0    0    [1    /1   ]  30.1082273143        1
[INPUT] 1    0    [1    /1   ]  6.14211395238        1
[INPUT] 1    0    [1    /1   ]  0.489873020815       1
[INPUT] 1    0    [1    /1   ]  2693.96471795        1

nuclear repulsion = 0
number of shells = 7
number of NR pGTOs = 13
number of NR cGTOs = 13
basis = {'Ar': [[0, [20.000083826948416, 1.0]], [0, [95.04618855525705, 1.0]], [0, [4.4878747271101656, 1.0]], [0, [30.108227314268095, 1.0]], [1, [6.142113952379735, 1.0]], [1, [0.4898730208149063, 1.0]], [1, [2693.9647179482413, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [20.00008383]
bas 1, expnt(s) = [95.04618856]
bas 2, expnt(s) = [4.48787473]
bas 3, expnt(s) = [30.10822731]
bas 4, expnt(s) = [6.14211395]
bas 5, expnt(s) = [0.48987302]
bas 6, expnt(s) = [2693.96471795]
CPU time:        20.97
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  1  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]
 [ 0  1  1  1  0 36 37  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 2.00000838e+01 2.38940015e+01 9.50461886e+01 7.69070324e+01
 4.48787473e+00 7.79014549e+00 3.01082273e+01 3.24734861e+01
 6.14211395e+00 2.82086128e+01 4.89873021e-01 1.19560795e+00
 2.69396472e+03 5.66205746e+04]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 15.195686520669105
cond(S) = 457.0098511274466
E1 = -586.096338167645  E_coul = 145.38360591865555
init E= -440.712732248989
    CPU time for initialize scf      0.18 sec, wall time      0.02 sec
  HOMO = 23.6502523457531  LUMO = 133.592315408576
  mo_energy =
[-1.09492472e+02 -1.46385236e+01 -9.88470924e+00 -9.88470924e+00
 -9.88470924e+00 -1.79689257e+00 -1.79689257e+00 -1.79689257e+00
  2.36502523e+01  1.33592315e+02  5.79364778e+03  5.79364778e+03
  5.79364778e+03]
E1 = -629.2687406303398  E_coul = 218.53746869792886
cycle= 1 E= -410.731271932411  delta_E=   30  |g|= 1.11  |ddm|= 59.6
    CPU time for cycle= 1      0.21 sec, wall time      0.01 sec
diis-norm(errvec)=0.31735
diis-c [-0.10071108  1.        ]
  HOMO = 27.6919449359464  LUMO = 140.926976615542
  mo_energy =
[-1.01182210e+02 -9.21109852e+00 -4.72572031e+00 -4.72572031e+00
 -4.72572031e+00  2.59679919e-01  2.59679919e-01  2.59679919e-01
  2.76919449e+01  1.40926977e+02  5.80301259e+03  5.80301259e+03
  5.80301259e+03]
E1 = -629.1817668265335  E_coul = 218.44524084319843
cycle= 2 E= -410.736525983335  delta_E= -0.00525  |g|= 0.0191  |ddm|= 1.16
    CPU time for cycle= 2      0.15 sec, wall time      0.01 sec
diis-norm(errvec)=0.00323552
diis-c [-7.94946721e-06 -5.02665263e-03  1.00502665e+00]
  HOMO = 27.6873071569772  LUMO = 140.917674558461
  mo_energy =
[-1.01208975e+02 -9.21528465e+00 -4.72892961e+00 -4.72892961e+00
 -4.72892961e+00  2.59288501e-01  2.59288501e-01  2.59288501e-01
  2.76873072e+01  1.40917675e+02  5.80295546e+03  5.80295546e+03
  5.80295546e+03]
E1 = -629.180108721392  E_coul = 218.44358112943058
cycle= 3 E= -410.736527591961  delta_E= -1.61e-06  |g|= 0.000262  |ddm|= 0.0207
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=4.51598e-05
diis-c [-6.75125083e-10  6.13979906e-05 -1.33229517e-02  1.01326155e+00]
  HOMO = 27.687251635287  LUMO = 140.917549336893
  mo_energy =
[-1.01209337e+02 -9.21533771e+00 -4.72896958e+00 -4.72896958e+00
 -4.72896958e+00  2.59283472e-01  2.59283472e-01  2.59283472e-01
  2.76872516e+01  1.40917549e+02  5.80295470e+03  5.80295470e+03
  5.80295470e+03]
E1 = -629.1800860163643  E_coul = 218.44355842409908
cycle= 4 E= -410.736527592265  delta_E= -3.04e-10  |g|= 1.73e-06  |ddm|= 0.000279
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
E1 = -629.1800860163643  E_coul = 218.44355842409908
  HOMO = 27.6872513764714  LUMO = 140.917548669991
  mo_energy =
[-1.01209339e+02 -9.21533798e+00 -4.72896977e+00 -4.72896977e+00
 -4.72896977e+00  2.59283446e-01  2.59283446e-01  2.59283446e-01
  2.76872514e+01  1.40917549e+02  5.80295470e+03  5.80295470e+03
  5.80295470e+03]
E1 = -629.1800858895684  E_coul = 218.44355829730188
Extra cycle  E= -410.736527592267  delta_E= -1.36e-12  |g|= 3.48e-08  |ddm|= 1.53e-06
    CPU time for scf_cycle      0.57 sec, wall time      0.07 sec
exp = [2.00000838e+01 9.50461886e+01 4.48787473e+00 3.01082273e+01
 6.14211395e+00 4.89873021e-01 2.69396472e+03]
E = -410.73652759226655
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
number_of_s_exps = 4
number_of_p_exps = 3

exps = np.zeros((number_of_s_exps+number_of_p_exps,2))
#exps[:, 0] = decaying_nums(5)

# S
exps[0,0] = 20.0
exps[1,0] = 9.5045827955887916e+01
exps[2,0] = 4.4881042475048387e+00 
exps[3,0] = 3.9799528004692630e-01
             
# P          
exps[3,0] = 3.0108199280832128e+01
exps[4,0] = 6.1393781325590453e+00
exps[5,0] = 4.8929328703550412e-01

basis =  str(number_of_s_exps)+"s"+str(number_of_p_exps)+"p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc21115.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 24
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 18 14:57:37 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35677784.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 32000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 32000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 32000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  20.0000838269        1
[INPUT] 0    0    [1    /1   ]  95.0461885553        1
[INPUT] 0    0    [1    /1   ]  4.48787472711        1
[INPUT] 0    0    [1    /1   ]  30.1082273143        1
[INPUT] 1    0    [1    /1   ]  6.14211395238        1
[INPUT] 1    0    [1    /1   ]  0.489873020815       1
[INPUT] 1    0    [1    /1   ]  2693.96471795        1

nuclear repulsion = 0
number of shells = 7
number of NR pGTOs = 13
number of NR cGTOs = 13
basis = {'Ar': [[0, [20.000083826948416, 1.0]], [0, [95.04618855525705, 1.0]], [0, [4.4878747271101656, 1.0]], [0, [30.108227314268095, 1.0]], [1, [6.142113952379735, 1.0]], [1, [0.4898730208149063, 1.0]], [1, [2693.9647179482413, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [20.00008383]
bas 1, expnt(s) = [95.04618856]
bas 2, expnt(s) = [4.48787473]
bas 3, expnt(s) = [30.10822731]
bas 4, expnt(s) = [6.14211395]
bas 5, expnt(s) = [0.48987302]
bas 6, expnt(s) = [2693.96471795]
CPU time:        21.58
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  1  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]
 [ 0  1  1  1  0 36 37  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 2.00000838e+01 2.38940015e+01 9.50461886e+01 7.69070324e+01
 4.48787473e+00 7.79014549e+00 3.01082273e+01 3.24734861e+01
 6.14211395e+00 2.82086128e+01 4.89873021e-01 1.19560795e+00
 2.69396472e+03 5.66205746e+04]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 15.195686520669105
cond(S) = 457.0098511274466
E1 = -586.096338167645  E_coul = 145.38360591865555
init E= -440.712732248989
    CPU time for initialize scf      0.18 sec, wall time      0.02 sec
  HOMO = 23.6502523457531  LUMO = 133.592315408576
  mo_energy =
[-1.09492472e+02 -1.46385236e+01 -9.88470924e+00 -9.88470924e+00
 -9.88470924e+00 -1.79689257e+00 -1.79689257e+00 -1.79689257e+00
  2.36502523e+01  1.33592315e+02  5.79364778e+03  5.79364778e+03
  5.79364778e+03]
E1 = -629.2687406303398  E_coul = 218.53746869792886
cycle= 1 E= -410.731271932411  delta_E=   30  |g|= 1.11  |ddm|= 59.6
    CPU time for cycle= 1      0.21 sec, wall time      0.01 sec
diis-norm(errvec)=0.31735
diis-c [-0.10071108  1.        ]
  HOMO = 27.6919449359464  LUMO = 140.926976615542
  mo_energy =
[-1.01182210e+02 -9.21109852e+00 -4.72572031e+00 -4.72572031e+00
 -4.72572031e+00  2.59679919e-01  2.59679919e-01  2.59679919e-01
  2.76919449e+01  1.40926977e+02  5.80301259e+03  5.80301259e+03
  5.80301259e+03]
E1 = -629.1817668265335  E_coul = 218.44524084319843
cycle= 2 E= -410.736525983335  delta_E= -0.00525  |g|= 0.0191  |ddm|= 1.16
    CPU time for cycle= 2      0.15 sec, wall time      0.01 sec
diis-norm(errvec)=0.00323552
diis-c [-7.94946721e-06 -5.02665263e-03  1.00502665e+00]
  HOMO = 27.6873071569772  LUMO = 140.917674558461
  mo_energy =
[-1.01208975e+02 -9.21528465e+00 -4.72892961e+00 -4.72892961e+00
 -4.72892961e+00  2.59288501e-01  2.59288501e-01  2.59288501e-01
  2.76873072e+01  1.40917675e+02  5.80295546e+03  5.80295546e+03
  5.80295546e+03]
E1 = -629.180108721392  E_coul = 218.44358112943058
cycle= 3 E= -410.736527591961  delta_E= -1.61e-06  |g|= 0.000262  |ddm|= 0.0207
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=4.51598e-05
diis-c [-6.75125083e-10  6.13979906e-05 -1.33229517e-02  1.01326155e+00]
  HOMO = 27.687251635287  LUMO = 140.917549336893
  mo_energy =
[-1.01209337e+02 -9.21533771e+00 -4.72896958e+00 -4.72896958e+00
 -4.72896958e+00  2.59283472e-01  2.59283472e-01  2.59283472e-01
  2.76872516e+01  1.40917549e+02  5.80295470e+03  5.80295470e+03
  5.80295470e+03]
E1 = -629.1800860163643  E_coul = 218.44355842409908
cycle= 4 E= -410.736527592265  delta_E= -3.04e-10  |g|= 1.73e-06  |ddm|= 0.000279
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
E1 = -629.1800860163643  E_coul = 218.44355842409908
  HOMO = 27.6872513764714  LUMO = 140.917548669991
  mo_energy =
[-1.01209339e+02 -9.21533798e+00 -4.72896977e+00 -4.72896977e+00
 -4.72896977e+00  2.59283446e-01  2.59283446e-01  2.59283446e-01
  2.76872514e+01  1.40917549e+02  5.80295470e+03  5.80295470e+03
  5.80295470e+03]
E1 = -629.1800858895684  E_coul = 218.44355829730188
Extra cycle  E= -410.736527592267  delta_E= -1.36e-12  |g|= 3.48e-08  |ddm|= 1.53e-06
    CPU time for scf_cycle      0.57 sec, wall time      0.07 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 457.0098511274466
E1 = -629.1800858895684  E_coul = 218.44355829730188
init E= -410.736527592267
    CPU time for initialize scf      1.18 sec, wall time      0.05 sec
  HOMO = 27.6872513713223  LUMO = 140.91754865668
  mo_energy =
[-1.01209339e+02 -9.21533798e+00 -4.72896978e+00 -4.72896978e+00
 -4.72896978e+00  2.59283445e-01  2.59283445e-01  2.59283445e-01
  2.76872514e+01  1.40917549e+02  5.80295470e+03  5.80295470e+03
  5.80295470e+03]
E1 = -629.1800858870257  E_coul = 218.44355829475995
cycle= 1 E= -410.736527592266  delta_E= 7.96e-13  |g|= 7.02e-10  |ddm|= 3.09e-08
    CPU time for cycle= 1      0.21 sec, wall time      0.01 sec
E1 = -629.1800858870257  E_coul = 218.44355829475995
  HOMO = 27.6872513712173  LUMO = 140.917548656415
  mo_energy =
[-1.01209339e+02 -9.21533798e+00 -4.72896978e+00 -4.72896978e+00
 -4.72896978e+00  2.59283445e-01  2.59283445e-01  2.59283445e-01
  2.76872514e+01  1.40917549e+02  5.80295470e+03  5.80295470e+03
  5.80295470e+03]
E1 = -629.1800858869757  E_coul = 218.44355829470962
Extra cycle  E= -410.736527592266  delta_E= -2.84e-13  |g|= 1.12e-11  |ddm|= 6.25e-10
    CPU time for scf_cycle      1.46 sec, wall time      0.11 sec
exp = [2.00000838e+01 9.50461886e+01 4.48787473e+00 3.01082273e+01
 6.14211395e+00 4.89873021e-01 2.69396472e+03]
grad_E = [ 1.90717594e+00 -4.82865141e-01  8.00072913e+00  9.07288663e-01
 -1.36168376e+00  7.17908959e+00  2.84740791e-06]
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
number_of_s_exps = 4
number_of_p_exps = 3

exps = np.zeros((number_of_s_exps+number_of_p_exps,2))
#exps[:, 0] = decaying_nums(5)

# S
exps[0,0] = 20.0
exps[1,0] = 9.5045827955887916e+01
exps[2,0] = 4.4881042475048387e+00 
exps[3,0] = 3.9799528004692630e-01
             
# P          
exps[3,0] = 3.0108199280832128e+01
exps[4,0] = 6.1393781325590453e+00
exps[5,0] = 4.8929328703550412e-01

basis =  str(number_of_s_exps)+"s"+str(number_of_p_exps)+"p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc21115.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 24
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 18 14:57:40 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35677784.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 32000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 32000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 32000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  18.092907891         1
[INPUT] 0    0    [1    /1   ]  95.5290536963        1
[INPUT] 0    0    [1    /1   ]  1.00000008274e-09      1
[INPUT] 0    0    [1    /1   ]  29.2009386515        1
[INPUT] 1    0    [1    /1   ]  7.50379770891        1
[INPUT] 1    0    [1    /1   ]  1.00000002723e-09      1
[INPUT] 1    0    [1    /1   ]  2693.96473296        1

nuclear repulsion = 0
number of shells = 7
number of NR pGTOs = 13
number of NR cGTOs = 13
basis = {'Ar': [[0, [18.092907891035072, 1.0]], [0, [95.52905369634698, 1.0]], [0, [1.000000082740371e-09, 1.0]], [0, [29.200938651517014, 1.0]], [1, [7.503797708913394, 1.0]], [1, [1.0000000272292198e-09, 1.0]], [1, [2693.9647329559243, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [18.09290789]
bas 1, expnt(s) = [95.5290537]
bas 2, expnt(s) = [1.00000008e-09]
bas 3, expnt(s) = [29.20093865]
bas 4, expnt(s) = [7.50379771]
bas 5, expnt(s) = [1.00000003e-09]
bas 6, expnt(s) = [2693.96473296]
CPU time:        26.14
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  1  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]
 [ 0  1  1  1  0 36 37  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.80929079e+01 2.21639062e+01 9.55290537e+01 7.71998810e+01
 1.00000008e-09 4.49277895e-07 2.92009387e+01 3.17367633e+01
 7.50379771e+00 3.62314562e+01 1.00000003e-09 1.64053087e-11
 2.69396473e+03 5.66205749e+04]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 8.977366766795058
cond(S) = 153.0168891525704
E1 = -498.44999473148766  E_coul = 100.39731765843594
init E= -398.052677073052
    CPU time for initialize scf      0.19 sec, wall time      0.02 sec
  HOMO = -0.000455304504954182  LUMO = 104.424336356006
  mo_energy =
[-1.12809832e+02 -1.43887822e+01 -1.43887822e+01 -1.43887822e+01
 -5.39351981e+00 -6.05549314e-04 -6.05549314e-04 -6.05549314e-04
 -4.55304505e-04  1.04424336e+02  5.78998535e+03  5.78998535e+03
  5.78998535e+03]
E1 = -547.9124800245918  E_coul = 125.89393589373782
cycle= 1 E= -422.018544130854  delta_E=  -24  |g|= 0.488  |ddm|= 8.68
    CPU time for cycle= 1      0.22 sec, wall time      0.01 sec
diis-norm(errvec)=0.370884
diis-c [-0.13755505  1.        ]
  HOMO = -0.000368017235260408  LUMO = 107.994180514457
  mo_energy =
[-1.08736015e+02 -1.20359217e+01 -1.20359217e+01 -1.20359217e+01
 -3.21659517e+00 -6.05549314e-04 -6.05549313e-04 -6.05549313e-04
 -3.68017235e-04  1.07994181e+02  5.79485812e+03  5.79485812e+03
  5.79485812e+03]
E1 = -547.9138197570331  E_coul = 125.89475386276672
cycle= 2 E= -422.019065894266  delta_E= -0.000522  |g|= 0.00842  |ddm|= 0.0462
    CPU time for cycle= 2      0.14 sec, wall time      0.01 sec
diis-norm(errvec)=0.00536763
diis-c [-9.83496542e-06 -1.18854663e-02  1.01188547e+00]
  HOMO = -0.000368017235266838  LUMO = 107.993691732789
  mo_energy =
[-1.08737054e+02 -1.20355672e+01 -1.20355672e+01 -1.20355672e+01
 -3.21621083e+00 -6.05549314e-04 -6.05549313e-04 -6.05549312e-04
 -3.68017235e-04  1.07993692e+02  5.79484560e+03  5.79484560e+03
  5.79484560e+03]
E1 = -547.9138893968537  E_coul = 125.8948233256805
cycle= 3 E= -422.019066071173  delta_E= -1.77e-07  |g|= 5.88e-05  |ddm|= 0.00111
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=3.34839e-05
diis-c [-5.48909826e-12  5.71335570e-06 -6.58192931e-03  1.00657622e+00]
  HOMO = -0.000368017235267037  LUMO = 107.993694469254
  mo_energy =
[-1.08737044e+02 -1.20355624e+01 -1.20355624e+01 -1.20355624e+01
 -3.21620546e+00 -6.05549315e-04 -6.05549314e-04 -6.05549312e-04
 -3.68017235e-04  1.07993694e+02  5.79484556e+03  5.79484556e+03
  5.79484556e+03]
E1 = -547.9138910353865  E_coul = 125.89482496420321
cycle= 4 E= -422.019066071183  delta_E= -1.01e-11  |g|= 3.41e-07  |ddm|= 1.34e-05
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
E1 = -547.9138910353865  E_coul = 125.89482496420321
  HOMO = -0.000368017235267376  LUMO = 107.993694595085
  mo_energy =
[-1.08737043e+02 -1.20355624e+01 -1.20355624e+01 -1.20355624e+01
 -3.21620539e+00 -6.05549314e-04 -6.05549314e-04 -6.05549314e-04
 -3.68017235e-04  1.07993695e+02  5.79484556e+03  5.79484556e+03
  5.79484556e+03]
E1 = -547.9138910614888  E_coul = 125.89482499030488
Extra cycle  E= -422.019066071184  delta_E= -6.25e-13  |g|= 7.62e-09  |ddm|= 1.44e-07
    CPU time for scf_cycle      0.58 sec, wall time      0.08 sec
exp = [1.80929079e+01 9.55290537e+01 1.00000008e-09 2.92009387e+01
 7.50379771e+00 1.00000003e-09 2.69396473e+03]
E = -422.01906607118394
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
number_of_s_exps = 4
number_of_p_exps = 3

exps = np.zeros((number_of_s_exps+number_of_p_exps,2))
#exps[:, 0] = decaying_nums(5)

# S
exps[0,0] = 20.0
exps[1,0] = 9.5045827955887916e+01
exps[2,0] = 4.4881042475048387e+00 
exps[3,0] = 3.9799528004692630e-01
             
# P          
exps[3,0] = 3.0108199280832128e+01
exps[4,0] = 6.1393781325590453e+00
exps[5,0] = 4.8929328703550412e-01

basis =  str(number_of_s_exps)+"s"+str(number_of_p_exps)+"p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc21115.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 24
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 18 14:57:40 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35677784.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 32000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 32000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 32000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  18.092907891         1
[INPUT] 0    0    [1    /1   ]  95.5290536963        1
[INPUT] 0    0    [1    /1   ]  1.00000008274e-09      1
[INPUT] 0    0    [1    /1   ]  29.2009386515        1
[INPUT] 1    0    [1    /1   ]  7.50379770891        1
[INPUT] 1    0    [1    /1   ]  1.00000002723e-09      1
[INPUT] 1    0    [1    /1   ]  2693.96473296        1

nuclear repulsion = 0
number of shells = 7
number of NR pGTOs = 13
number of NR cGTOs = 13
basis = {'Ar': [[0, [18.092907891035072, 1.0]], [0, [95.52905369634698, 1.0]], [0, [1.000000082740371e-09, 1.0]], [0, [29.200938651517014, 1.0]], [1, [7.503797708913394, 1.0]], [1, [1.0000000272292198e-09, 1.0]], [1, [2693.9647329559243, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [18.09290789]
bas 1, expnt(s) = [95.5290537]
bas 2, expnt(s) = [1.00000008e-09]
bas 3, expnt(s) = [29.20093865]
bas 4, expnt(s) = [7.50379771]
bas 5, expnt(s) = [1.00000003e-09]
bas 6, expnt(s) = [2693.96473296]
CPU time:        26.76
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  1  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]
 [ 0  1  1  1  0 36 37  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.80929079e+01 2.21639062e+01 9.55290537e+01 7.71998810e+01
 1.00000008e-09 4.49277895e-07 2.92009387e+01 3.17367633e+01
 7.50379771e+00 3.62314562e+01 1.00000003e-09 1.64053087e-11
 2.69396473e+03 5.66205749e+04]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 8.977366766795058
cond(S) = 153.0168891525704
E1 = -498.44999473148766  E_coul = 100.39731765843594
init E= -398.052677073052
    CPU time for initialize scf      0.18 sec, wall time      0.02 sec
  HOMO = -0.000455304504954182  LUMO = 104.424336356006
  mo_energy =
[-1.12809832e+02 -1.43887822e+01 -1.43887822e+01 -1.43887822e+01
 -5.39351981e+00 -6.05549314e-04 -6.05549314e-04 -6.05549314e-04
 -4.55304505e-04  1.04424336e+02  5.78998535e+03  5.78998535e+03
  5.78998535e+03]
E1 = -547.9124800245918  E_coul = 125.89393589373782
cycle= 1 E= -422.018544130854  delta_E=  -24  |g|= 0.488  |ddm|= 8.68
    CPU time for cycle= 1      0.21 sec, wall time      0.01 sec
diis-norm(errvec)=0.370884
diis-c [-0.13755505  1.        ]
  HOMO = -0.000368017235260408  LUMO = 107.994180514457
  mo_energy =
[-1.08736015e+02 -1.20359217e+01 -1.20359217e+01 -1.20359217e+01
 -3.21659517e+00 -6.05549314e-04 -6.05549313e-04 -6.05549313e-04
 -3.68017235e-04  1.07994181e+02  5.79485812e+03  5.79485812e+03
  5.79485812e+03]
E1 = -547.9138197570331  E_coul = 125.89475386276672
cycle= 2 E= -422.019065894266  delta_E= -0.000522  |g|= 0.00842  |ddm|= 0.0462
    CPU time for cycle= 2      0.15 sec, wall time      0.01 sec
diis-norm(errvec)=0.00536763
diis-c [-9.83496542e-06 -1.18854663e-02  1.01188547e+00]
  HOMO = -0.000368017235266838  LUMO = 107.993691732789
  mo_energy =
[-1.08737054e+02 -1.20355672e+01 -1.20355672e+01 -1.20355672e+01
 -3.21621083e+00 -6.05549314e-04 -6.05549313e-04 -6.05549312e-04
 -3.68017235e-04  1.07993692e+02  5.79484560e+03  5.79484560e+03
  5.79484560e+03]
E1 = -547.9138893968537  E_coul = 125.8948233256805
cycle= 3 E= -422.019066071173  delta_E= -1.77e-07  |g|= 5.88e-05  |ddm|= 0.00111
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=3.34839e-05
diis-c [-5.48909826e-12  5.71335570e-06 -6.58192931e-03  1.00657622e+00]
  HOMO = -0.000368017235267037  LUMO = 107.993694469254
  mo_energy =
[-1.08737044e+02 -1.20355624e+01 -1.20355624e+01 -1.20355624e+01
 -3.21620546e+00 -6.05549315e-04 -6.05549314e-04 -6.05549312e-04
 -3.68017235e-04  1.07993694e+02  5.79484556e+03  5.79484556e+03
  5.79484556e+03]
E1 = -547.9138910353865  E_coul = 125.89482496420321
cycle= 4 E= -422.019066071183  delta_E= -1.01e-11  |g|= 3.41e-07  |ddm|= 1.34e-05
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
E1 = -547.9138910353865  E_coul = 125.89482496420321
  HOMO = -0.000368017235267376  LUMO = 107.993694595085
  mo_energy =
[-1.08737043e+02 -1.20355624e+01 -1.20355624e+01 -1.20355624e+01
 -3.21620539e+00 -6.05549314e-04 -6.05549314e-04 -6.05549314e-04
 -3.68017235e-04  1.07993695e+02  5.79484556e+03  5.79484556e+03
  5.79484556e+03]
E1 = -547.9138910614888  E_coul = 125.89482499030488
Extra cycle  E= -422.019066071184  delta_E= -6.25e-13  |g|= 7.62e-09  |ddm|= 1.44e-07
    CPU time for scf_cycle      0.57 sec, wall time      0.07 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 153.0168891525704
E1 = -547.9138910614888  E_coul = 125.89482499030488
init E= -422.019066071184
    CPU time for initialize scf      1.12 sec, wall time      0.05 sec
  HOMO = -0.000368017235267291  LUMO = 107.993694597827
  mo_energy =
[-1.08737043e+02 -1.20355624e+01 -1.20355624e+01 -1.20355624e+01
 -3.21620539e+00 -6.05549314e-04 -6.05549313e-04 -6.05549313e-04
 -3.68017235e-04  1.07993695e+02  5.79484556e+03  5.79484556e+03
  5.79484556e+03]
E1 = -547.9138910620645  E_coul = 125.89482499088146
cycle= 1 E= -422.019066071183  delta_E= 9.09e-13  |g|= 1.71e-10  |ddm|= 3.21e-09
    CPU time for cycle= 1      0.20 sec, wall time      0.01 sec
E1 = -547.9138910620645  E_coul = 125.89482499088146
  HOMO = -0.000368017235267289  LUMO = 107.993694597888
  mo_energy =
[-1.08737043e+02 -1.20355624e+01 -1.20355624e+01 -1.20355624e+01
 -3.21620539e+00 -6.05549314e-04 -6.05549314e-04 -6.05549312e-04
 -3.68017235e-04  1.07993695e+02  5.79484556e+03  5.79484556e+03
  5.79484556e+03]
E1 = -547.9138910620779  E_coul = 125.89482499089449
Extra cycle  E= -422.019066071183  delta_E= -3.98e-13  |g|= 3.61e-12  |ddm|= 7.19e-11
    CPU time for scf_cycle      1.42 sec, wall time      0.11 sec
exp = [1.80929079e+01 9.55290537e+01 1.00000008e-09 2.92009387e+01
 7.50379771e+00 1.00000003e-09 2.69396473e+03]
grad_E = [ 1.97027337e+00 -4.78584047e-01 -3.85856946e+05  8.34254979e-01
 -3.90918279e-01 -6.55838139e+06  4.46050510e-06]
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
number_of_s_exps = 4
number_of_p_exps = 3

exps = np.zeros((number_of_s_exps+number_of_p_exps,2))
#exps[:, 0] = decaying_nums(5)

# S
exps[0,0] = 20.0
exps[1,0] = 9.5045827955887916e+01
exps[2,0] = 4.4881042475048387e+00 
exps[3,0] = 3.9799528004692630e-01
             
# P          
exps[3,0] = 3.0108199280832128e+01
exps[4,0] = 6.1393781325590453e+00
exps[5,0] = 4.8929328703550412e-01

basis =  str(number_of_s_exps)+"s"+str(number_of_p_exps)+"p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc21115.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 24
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 18 14:57:43 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35677784.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 32000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 32000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 32000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  15.6075705774        1
[INPUT] 0    0    [1    /1   ]  96.1582996314        1
[INPUT] 0    0    [1    /1   ]  1.24092166272e-09      1
[INPUT] 0    0    [1    /1   ]  28.0186050853        1
[INPUT] 1    0    [1    /1   ]  9.27827535332        1
[INPUT] 1    0    [1    /1   ]  0.753918121746       1
[INPUT] 1    0    [1    /1   ]  2693.96473213        1

nuclear repulsion = 0
number of shells = 7
number of NR pGTOs = 13
number of NR cGTOs = 13
basis = {'Ar': [[0, [15.607570577367586, 1.0]], [0, [96.15829963135063, 1.0]], [0, [1.2409216627245156e-09, 1.0]], [0, [28.018605085346334, 1.0]], [1, [9.27827535331526, 1.0]], [1, [0.7539181217460837, 1.0]], [1, [2693.9647321264697, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [15.60757058]
bas 1, expnt(s) = [96.15829963]
bas 2, expnt(s) = [1.24092166e-09]
bas 3, expnt(s) = [28.01860509]
bas 4, expnt(s) = [9.27827535]
bas 5, expnt(s) = [0.75391812]
bas 6, expnt(s) = [2693.96473213]
CPU time:        31.30
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  1  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]
 [ 0  1  1  1  0 36 37  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.56075706e+01 1.98388505e+01 9.61582996e+01 7.75809522e+01
 1.24092166e-09 5.28230287e-07 2.80186051e+01 3.07680453e+01
 9.27827535e+00 4.72409327e+01 7.53918122e-01 2.04946082e+00
 2.69396473e+03 5.66205749e+04]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 14.148345212481058
cond(S) = 95.46825599094075
E1 = -584.1601610863678  E_coul = 157.3079139024351
init E= -426.852247183933
    CPU time for initialize scf      0.19 sec, wall time      0.02 sec
  HOMO = -0.00021651393863288  LUMO = 100.20156838001
  mo_energy =
[-1.06526877e+02 -9.70289473e+00 -9.70289473e+00 -9.70289473e+00
 -2.98267402e+00 -2.10965512e+00 -2.10965512e+00 -2.10965512e+00
 -2.16513939e-04  1.00201568e+02  5.79651547e+03  5.79651547e+03
  5.79651547e+03]
E1 = -642.473685574023  E_coul = 197.29446907265657
cycle= 1 E= -445.179216501366  delta_E= -18.3  |g|= 0.513  |ddm|= 5.33
    CPU time for cycle= 1      0.21 sec, wall time      0.01 sec
diis-norm(errvec)=0.406496
diis-c [-0.16523881  1.        ]
  HOMO = -7.26764216606734e-05  LUMO = 104.337181295317
  mo_energy =
[-1.01911099e+02 -6.72393532e+00 -6.72393532e+00 -6.72393532e+00
 -5.90585029e-01 -5.90585029e-01 -5.90585029e-01 -8.79334263e-02
 -7.26764217e-05  1.04337181e+02  5.80177244e+03  5.80177244e+03
  5.80177244e+03]
E1 = -642.4645861437658  E_coul = 197.2847748236413
cycle= 2 E= -445.179811320124  delta_E= -0.000595  |g|= 0.0087  |ddm|= 0.0162
    CPU time for cycle= 2      0.14 sec, wall time      0.01 sec
diis-norm(errvec)=0.00610019
diis-c [-1.22561812e-05 -1.24428366e-02  1.01244284e+00]
  HOMO = -7.2676421710892e-05  LUMO = 104.335557077527
  mo_energy =
[-1.01915378e+02 -6.72406844e+00 -6.72406844e+00 -6.72406844e+00
 -5.90624637e-01 -5.90624637e-01 -5.90624637e-01 -8.80489685e-02
 -7.26764217e-05  1.04335557e+02  5.80175208e+03  5.80175208e+03
  5.80175208e+03]
E1 = -642.4644384938507  E_coul = 197.2846269867044
cycle= 3 E= -445.179811507146  delta_E= -1.87e-07  |g|= 4.95e-05  |ddm|= 0.000278
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=3.45813e-05
diis-c [-1.72704623e-12  8.38219894e-06 -6.15095198e-03  1.00614257e+00]
  HOMO = -7.26764217106351e-05  LUMO = 104.335550463655
  mo_energy =
[-1.01915394e+02 -6.72406789e+00 -6.72406789e+00 -6.72406789e+00
 -5.90624598e-01 -5.90624598e-01 -5.90624598e-01 -8.80483256e-02
 -7.26764217e-05  1.04335550e+02  5.80175198e+03  5.80175198e+03
  5.80175198e+03]
E1 = -642.4644382722739  E_coul = 197.2846267651216
cycle= 4 E= -445.179811507152  delta_E= -6.03e-12  |g|= 1.53e-07  |ddm|= 2.49e-06
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
E1 = -642.4644382722739  E_coul = 197.2846267651216
  HOMO = -7.2676421718761e-05  LUMO = 104.335550522678
  mo_energy =
[-1.01915394e+02 -6.72406786e+00 -6.72406786e+00 -6.72406786e+00
 -5.90624592e-01 -5.90624592e-01 -5.90624592e-01 -8.80482967e-02
 -7.26764217e-05  1.04335551e+02  5.80175198e+03  5.80175198e+03
  5.80175198e+03]
E1 = -642.4644382857626  E_coul = 197.2846267786106
Extra cycle  E= -445.179811507152  delta_E= 2.27e-13  |g|= 3.48e-09  |ddm|= 4.33e-08
    CPU time for scf_cycle      0.58 sec, wall time      0.08 sec
exp = [1.56075706e+01 9.61582996e+01 1.24092166e-09 2.80186051e+01
 9.27827535e+00 7.53918122e-01 2.69396473e+03]
E = -445.17981150715207
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
number_of_s_exps = 4
number_of_p_exps = 3

exps = np.zeros((number_of_s_exps+number_of_p_exps,2))
#exps[:, 0] = decaying_nums(5)

# S
exps[0,0] = 20.0
exps[1,0] = 9.5045827955887916e+01
exps[2,0] = 4.4881042475048387e+00 
exps[3,0] = 3.9799528004692630e-01
             
# P          
exps[3,0] = 3.0108199280832128e+01
exps[4,0] = 6.1393781325590453e+00
exps[5,0] = 4.8929328703550412e-01

basis =  str(number_of_s_exps)+"s"+str(number_of_p_exps)+"p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc21115.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 24
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 18 14:57:43 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35677784.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 32000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 32000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 32000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  16.8502334133        1
[INPUT] 0    0    [1    /1   ]  95.8436781376        1
[INPUT] 0    0    [1    /1   ]  1.12046143699e-09      1
[INPUT] 0    0    [1    /1   ]  28.6097690993        1
[INPUT] 1    0    [1    /1   ]  8.3910406871         1
[INPUT] 1    0    [1    /1   ]  0.376960827115       1
[INPUT] 1    0    [1    /1   ]  2693.96473254        1

nuclear repulsion = 0
number of shells = 7
number of NR pGTOs = 13
number of NR cGTOs = 13
basis = {'Ar': [[0, [16.850233413323863, 1.0]], [0, [95.84367813759785, 1.0]], [0, [1.1204614369918651e-09, 1.0]], [0, [28.609769099303005, 1.0]], [1, [8.391040687096245, 1.0]], [1, [0.37696082711525136, 1.0]], [1, [2693.964732541195, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [16.85023341]
bas 1, expnt(s) = [95.84367814]
bas 2, expnt(s) = [1.12046144e-09]
bas 3, expnt(s) = [28.6097691]
bas 4, expnt(s) = [8.39104069]
bas 5, expnt(s) = [0.37696083]
bas 6, expnt(s) = [2693.96473254]
CPU time:        31.92
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  1  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]
 [ 0  1  1  1  0 36 37  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.68502334e+01 2.10121003e+01 9.58436781e+01 7.73904957e+01
 1.12046144e-09 4.89285910e-07 2.86097691e+01 3.12536532e+01
 8.39104069e+00 4.16633490e+01 3.76960827e-01 8.61697176e-01
 2.69396473e+03 5.66205749e+04]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 14.77339580107548
cond(S) = 120.67866340464086
E1 = -567.7850779068838  E_coul = 145.62467753778094
init E= -422.160400369103
    CPU time for initialize scf      0.22 sec, wall time      0.03 sec
  HOMO = -0.00017234947825285  LUMO = 103.928839531511
  mo_energy =
[-1.08094885e+02 -1.04603603e+01 -1.04603603e+01 -1.04603603e+01
 -2.64805906e+00 -2.21626148e+00 -2.21626148e+00 -2.21626148e+00
 -1.72349478e-04  1.03928840e+02  5.79481419e+03  5.79481419e+03
  5.79481419e+03]
E1 = -617.9482828377551  E_coul = 175.95451012083728
cycle= 1 E= -441.993772716918  delta_E= -19.8  |g|= 0.498  |ddm|= 6.47
    CPU time for cycle= 1      0.24 sec, wall time      0.01 sec
diis-norm(errvec)=0.387247
diis-c [-0.14996056  1.        ]
  HOMO = -6.90590438330922e-05  LUMO = 107.439306781244
  mo_energy =
[-1.04107465e+02 -8.04023942e+00 -8.04023942e+00 -8.04023942e+00
 -1.45310379e+00 -1.45310379e+00 -1.45310379e+00 -4.32336530e-01
 -6.90590438e-05  1.07439307e+02  5.79951677e+03  5.79951677e+03
  5.79951677e+03]
E1 = -617.947651990506  E_coul = 175.95333068425262
cycle= 2 E= -441.994321306253  delta_E= -0.000549  |g|= 0.0086  |ddm|= 0.0307
    CPU time for cycle= 2      0.10 sec, wall time      0.01 sec
diis-norm(errvec)=0.00573438
diis-c [-1.08818524e-05 -1.22614985e-02  1.01226150e+00]
  HOMO = -6.90590438296104e-05  LUMO = 107.438564188385
  mo_energy =
[-1.04109224e+02 -8.03995702e+00 -8.03995702e+00 -8.03995702e+00
 -1.45309442e+00 -1.45309442e+00 -1.45309442e+00 -4.32055382e-01
 -6.90590438e-05  1.07438564e+02  5.79950221e+03  5.79950221e+03
  5.79950221e+03]
E1 = -617.9476855270628  E_coul = 175.95336403612632
cycle= 3 E= -441.994321490936  delta_E= -1.85e-07  |g|= 5.66e-05  |ddm|= 0.000758
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=3.45677e-05
diis-c [-6.14178776e-12  6.20405869e-06 -6.39108196e-03  1.00638488e+00]
  HOMO = -6.90590438287509e-05  LUMO = 107.438565279555
  mo_energy =
[-1.04109218e+02 -8.03995256e+00 -8.03995256e+00 -8.03995256e+00
 -1.45309426e+00 -1.45309426e+00 -1.45309426e+00 -4.32050910e-01
 -6.90590438e-05  1.07438565e+02  5.79950216e+03  5.79950216e+03
  5.79950216e+03]
E1 = -617.9476869450273  E_coul = 175.9533654540813
cycle= 4 E= -441.994321490946  delta_E= -9.44e-12  |g|= 3.22e-07  |ddm|= 9.43e-06
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
E1 = -617.9476869450273  E_coul = 175.9533654540813
  HOMO = -6.9059043827654e-05  LUMO = 107.438565401298
  mo_energy =
[-1.04109218e+02 -8.03995250e+00 -8.03995250e+00 -8.03995250e+00
 -1.45309425e+00 -1.45309425e+00 -1.45309425e+00 -4.32050849e-01
 -6.90590438e-05  1.07438565e+02  5.79950216e+03  5.79950216e+03
  5.79950216e+03]
E1 = -617.9476869715432  E_coul = 175.9533654805974
Extra cycle  E= -441.994321490946  delta_E= 1.14e-13  |g|= 7.27e-09  |ddm|= 1.11e-07
    CPU time for scf_cycle      0.59 sec, wall time      0.08 sec
exp = [1.68502334e+01 9.58436781e+01 1.12046144e-09 2.86097691e+01
 8.39104069e+00 3.76960827e-01 2.69396473e+03]
E = -441.9943214909458
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
number_of_s_exps = 4
number_of_p_exps = 3

exps = np.zeros((number_of_s_exps+number_of_p_exps,2))
#exps[:, 0] = decaying_nums(5)

# S
exps[0,0] = 20.0
exps[1,0] = 9.5045827955887916e+01
exps[2,0] = 4.4881042475048387e+00 
exps[3,0] = 3.9799528004692630e-01
             
# P          
exps[3,0] = 3.0108199280832128e+01
exps[4,0] = 6.1393781325590453e+00
exps[5,0] = 4.8929328703550412e-01

basis =  str(number_of_s_exps)+"s"+str(number_of_p_exps)+"p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc21115.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 24
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 18 14:57:43 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35677784.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 32000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 32000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 32000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  17.4715656319        1
[INPUT] 0    0    [1    /1   ]  95.686367188         1
[INPUT] 0    0    [1    /1   ]  1.06023124652e-09      1
[INPUT] 0    0    [1    /1   ]  28.9053514871        1
[INPUT] 1    0    [1    /1   ]  7.94742278239        1
[INPUT] 1    0    [1    /1   ]  0.188481936948       1
[INPUT] 1    0    [1    /1   ]  2693.96473275        1

nuclear repulsion = 0
number of shells = 7
number of NR pGTOs = 13
number of NR cGTOs = 13
basis = {'Ar': [[0, [17.47156563187866, 1.0]], [0, [95.6863671880288, 1.0]], [0, [1.0602312465198995e-09, 1.0]], [0, [28.905351487134535, 1.0]], [1, [7.947422782392136, 1.0]], [1, [0.18848193694778942, 1.0]], [1, [2693.964732748558, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [17.47156563]
bas 1, expnt(s) = [95.68636719]
bas 2, expnt(s) = [1.06023125e-09]
bas 3, expnt(s) = [28.90535149]
bas 4, expnt(s) = [7.94742278]
bas 5, expnt(s) = [0.18848194]
bas 6, expnt(s) = [2693.96473275]
CPU time:        32.56
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  1  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]
 [ 0  1  1  1  0 36 37  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.74715656e+01 2.15905593e+01 9.56863672e+01 7.72952087e+01
 1.06023125e-09 4.69424199e-07 2.89053515e+01 3.14955151e+01
 7.94742278e+00 3.89284659e+01 1.88481937e-01 3.62302694e-01
 2.69396473e+03 5.66205749e+04]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 13.362124571942978
cond(S) = 135.8279406497069
E1 = -537.1183549638174  E_coul = 123.93953429266628
init E= -413.178820671151
    CPU time for initialize scf      0.18 sec, wall time      0.02 sec
  HOMO = -0.000240983091612661  LUMO = 104.374322464362
  mo_energy =
[-1.10266709e+02 -1.22367411e+01 -1.22367411e+01 -1.22367411e+01
 -3.83746781e+00 -2.33586475e+00 -2.33586475e+00 -2.33586475e+00
 -2.40983092e-04  1.04374322e+02  5.79258217e+03  5.79258217e+03
  5.79258217e+03]
E1 = -598.2173979403835  E_coul = 160.81687500841224
cycle= 1 E= -437.400522931971  delta_E= -24.2  |g|= 0.494  |ddm|= 7.24
    CPU time for cycle= 1      0.21 sec, wall time      0.01 sec
diis-norm(errvec)=0.379186
diis-c [-0.14378175  1.        ]
  HOMO = -6.71773283496961e-05  LUMO = 108.564448171359
  mo_energy =
[-1.05587859e+02 -9.17883085e+00 -9.17883085e+00 -9.17883085e+00
 -1.39308315e+00 -1.39308315e+00 -1.39308315e+00 -9.88419966e-01
 -6.71773283e-05  1.08564448e+02  5.79801779e+03  5.79801779e+03
  5.79801779e+03]
E1 = -598.2182219720388  E_coul = 160.81716113181395
cycle= 2 E= -437.401060840225  delta_E= -0.000538  |g|= 0.00854  |ddm|= 0.0395
    CPU time for cycle= 2      0.15 sec, wall time      0.01 sec
diis-norm(errvec)=0.00555423
diis-c [-1.03532038e-05 -1.20842005e-02  1.01208420e+00]
  HOMO = -6.71773283368855e-05  LUMO = 108.563878754434
  mo_energy =
[-1.05589125e+02 -9.17848285e+00 -9.17848285e+00 -9.17848285e+00
 -1.39308105e+00 -1.39308105e+00 -1.39308105e+00 -9.88064591e-01
 -6.71773283e-05  1.08563879e+02  5.79800452e+03  5.79800452e+03
  5.79800452e+03]
E1 = -598.2182838640477  E_coul = 160.81722284086737
cycle= 3 E= -437.40106102318  delta_E= -1.83e-07  |g|= 5.84e-05  |ddm|= 0.000963
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=3.41356e-05
diis-c [-6.18108160e-12  5.85561717e-06 -6.49286869e-03  1.00648701e+00]
  HOMO = -6.71773283353977e-05  LUMO = 108.563881112644
  mo_energy =
[-1.05589115e+02 -9.17847792e+00 -9.17847792e+00 -9.17847792e+00
 -1.39308101e+00 -1.39308101e+00 -1.39308101e+00 -9.88059444e-01
 -6.71773283e-05  1.08563881e+02  5.79800447e+03  5.79800447e+03
  5.79800447e+03]
E1 = -598.2182854922278  E_coul = 160.8172244690377
cycle= 4 E= -437.40106102319  delta_E= -9.72e-12  |g|= 3.42e-07  |ddm|= 1.17e-05
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
E1 = -598.2182854922278  E_coul = 160.8172244690377
  HOMO = -6.71773283418776e-05  LUMO = 108.563881240294
  mo_energy =
[-1.05589115e+02 -9.17847786e+00 -9.17847786e+00 -9.17847786e+00
 -1.39308101e+00 -1.39308101e+00 -1.39308101e+00 -9.88059380e-01
 -6.71773283e-05  1.08563881e+02  5.79800447e+03  5.79800447e+03
  5.79800447e+03]
E1 = -598.2182855193629  E_coul = 160.81722449617294
Extra cycle  E= -437.40106102319  delta_E= 1.14e-13  |g|= 7.68e-09  |ddm|= 1.3e-07
    CPU time for scf_cycle      0.57 sec, wall time      0.07 sec
exp = [1.74715656e+01 9.56863672e+01 1.06023125e-09 2.89053515e+01
 7.94742278e+00 1.88481937e-01 2.69396473e+03]
E = -437.40106102319
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
number_of_s_exps = 4
number_of_p_exps = 3

exps = np.zeros((number_of_s_exps+number_of_p_exps,2))
#exps[:, 0] = decaying_nums(5)

# S
exps[0,0] = 20.0
exps[1,0] = 9.5045827955887916e+01
exps[2,0] = 4.4881042475048387e+00 
exps[3,0] = 3.9799528004692630e-01
             
# P          
exps[3,0] = 3.0108199280832128e+01
exps[4,0] = 6.1393781325590453e+00
exps[5,0] = 4.8929328703550412e-01

basis =  str(number_of_s_exps)+"s"+str(number_of_p_exps)+"p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc21115.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 24
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 18 14:57:43 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35677784.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 32000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 32000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 32000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  17.7822328955        1
[INPUT] 0    0    [1    /1   ]  95.607711421         1
[INPUT] 0    0    [1    /1   ]  1.03011603938e-09      1
[INPUT] 0    0    [1    /1   ]  29.0531432302        1
[INPUT] 1    0    [1    /1   ]  7.72561300583        1
[INPUT] 1    0    [1    /1   ]  0.0942421416844      1
[INPUT] 1    0    [1    /1   ]  2693.96473285        1

nuclear repulsion = 0
number of shells = 7
number of NR pGTOs = 13
number of NR cGTOs = 13
basis = {'Ar': [[0, [17.78223289554492, 1.0]], [0, [95.60771142097228, 1.0]], [0, [1.0301160393807214e-09, 1.0]], [0, [29.053143230220297, 1.0]], [1, [7.72561300583115, 1.0]], [1, [0.09424214168435788, 1.0]], [1, [2693.9647328522396, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [17.7822329]
bas 1, expnt(s) = [95.60771142]
bas 2, expnt(s) = [1.03011604e-09]
bas 3, expnt(s) = [29.05314323]
bas 4, expnt(s) = [7.72561301]
bas 5, expnt(s) = [0.09424214]
bas 6, expnt(s) = [2693.96473285]
CPU time:        33.17
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  1  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]
 [ 0  1  1  1  0 36 37  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.77822329e+01 2.18778553e+01 9.56077114e+01 7.72475504e+01
 1.03011604e-09 4.59387989e-07 2.90531432e+01 3.16162144e+01
 7.72561301e+00 3.75751376e+01 9.42421417e-02 1.52331889e-01
 2.69396473e+03 5.66205749e+04]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 11.250959895189702
cond(S) = 144.1489248683072
E1 = -513.6781611647341  E_coul = 108.9568478851958
init E= -404.721313279538
    CPU time for initialize scf      0.18 sec, wall time      0.02 sec
  HOMO = -0.000345663243359944  LUMO = 104.14366922002
  mo_energy =
[-1.11797340e+02 -1.35721801e+01 -1.35721801e+01 -1.35721801e+01
 -4.87382653e+00 -2.22380727e+00 -2.22380727e+00 -2.22380727e+00
 -3.45663243e-04  1.04143669e+02  5.79102372e+03  5.79102372e+03
  5.79102372e+03]
E1 = -583.571744462987  E_coul = 150.24822528409516
cycle= 1 E= -433.323519178892  delta_E= -28.6  |g|= 0.491  |ddm|= 7.86
    CPU time for cycle= 1      0.21 sec, wall time      0.01 sec
diis-norm(errvec)=0.375068
diis-c [-0.14067609  1.        ]
  HOMO = -6.6216416420515e-05  LUMO = 108.862706865664
  mo_energy =
[-1.06581874e+02 -1.00239392e+01 -1.00239392e+01 -1.00239392e+01
 -1.52189228e+00 -1.12075247e+00 -1.12075247e+00 -1.12075247e+00
 -6.62164164e-05  1.08862707e+02  5.79701719e+03  5.79701719e+03
  5.79701719e+03]
E1 = -583.5728515376387  E_coul = 150.24880242626077
cycle= 2 E= -433.324049111378  delta_E= -0.00053  |g|= 0.00849  |ddm|= 0.0428
    CPU time for cycle= 2      0.15 sec, wall time      0.01 sec
diis-norm(errvec)=0.00546099
diis-c [-1.00942155e-05 -1.19845741e-02  1.01198457e+00]
  HOMO = -6.62164164185981e-05  LUMO = 108.862179952695
  mo_energy =
[-1.06583020e+02 -1.00235855e+01 -1.00235855e+01 -1.00235855e+01
 -1.52152138e+00 -1.12075210e+00 -1.12075210e+00 -1.12075210e+00
 -6.62164164e-05  1.08862180e+02  5.79700431e+03  5.79700431e+03
  5.79700431e+03]
E1 = -583.5729178263147  E_coul = 150.2488685349276
cycle= 3 E= -433.324049291387  delta_E= -1.8e-07  |g|= 5.86e-05  |ddm|= 0.00104
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=3.38207e-05
diis-c [-5.83800941e-12  5.77976338e-06 -6.53829185e-03  1.00653251e+00]
  HOMO = -6.62164164200327e-05  LUMO = 108.862182517062
  mo_energy =
[-1.06583010e+02 -1.00235806e+01 -1.00235806e+01 -1.00235806e+01
 -1.52151612e+00 -1.12075210e+00 -1.12075210e+00 -1.12075210e+00
 -6.62164164e-05  1.08862183e+02  5.79700426e+03  5.79700426e+03
  5.79700426e+03]
E1 = -583.572919463944  E_coul = 150.24887017254758
cycle= 4 E= -433.324049291396  delta_E= -9.38e-12  |g|= 3.42e-07  |ddm|= 1.25e-05
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
E1 = -583.572919463944  E_coul = 150.24887017254758
  HOMO = -6.6216416425628e-05  LUMO = 108.862182643932
  mo_energy =
[-1.06583009e+02 -1.00235806e+01 -1.00235806e+01 -1.00235806e+01
 -1.52151605e+00 -1.12075210e+00 -1.12075210e+00 -1.12075210e+00
 -6.62164164e-05  1.08862183e+02  5.79700427e+03  5.79700427e+03
  5.79700427e+03]
E1 = -583.5729194905867  E_coul = 150.24887019919052
Extra cycle  E= -433.324049291396  delta_E= 1.71e-13  |g|= 7.66e-09  |ddm|= 1.37e-07
    CPU time for scf_cycle      0.57 sec, wall time      0.07 sec
exp = [1.77822329e+01 9.56077114e+01 1.03011604e-09 2.90531432e+01
 7.72561301e+00 9.42421417e-02 2.69396473e+03]
E = -433.32404929139625
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
number_of_s_exps = 4
number_of_p_exps = 3

exps = np.zeros((number_of_s_exps+number_of_p_exps,2))
#exps[:, 0] = decaying_nums(5)

# S
exps[0,0] = 20.0
exps[1,0] = 9.5045827955887916e+01
exps[2,0] = 4.4881042475048387e+00 
exps[3,0] = 3.9799528004692630e-01
             
# P          
exps[3,0] = 3.0108199280832128e+01
exps[4,0] = 6.1393781325590453e+00
exps[5,0] = 4.8929328703550412e-01

basis =  str(number_of_s_exps)+"s"+str(number_of_p_exps)+"p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc21115.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 24
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 18 14:57:43 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35677784.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 32000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 32000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 32000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  17.937567552         1
[INPUT] 0    0    [1    /1   ]  95.568383278         1
[INPUT] 0    0    [1    /1   ]  1.01505833648e-09      1
[INPUT] 0    0    [1    /1   ]  29.1270395892        1
[INPUT] 1    0    [1    /1   ]  7.61470738597        1
[INPUT] 1    0    [1    /1   ]  0.0471219332297      1
[INPUT] 1    0    [1    /1   ]  2693.9647329         1

nuclear repulsion = 0
number of shells = 7
number of NR pGTOs = 13
number of NR cGTOs = 13
basis = {'Ar': [[0, [17.937567552024905, 1.0]], [0, [95.56838327802053, 1.0]], [0, [1.0150583364847596e-09, 1.0]], [0, [29.127039589211854, 1.0]], [1, [7.61470738597473, 1.0]], [1, [0.047121933229708306, 1.0]], [1, [2693.9647329040813, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [17.93756755]
bas 1, expnt(s) = [95.56838328]
bas 2, expnt(s) = [1.01505834e-09]
bas 3, expnt(s) = [29.12703959]
bas 4, expnt(s) = [7.61470739]
bas 5, expnt(s) = [0.04712193]
bas 6, expnt(s) = [2693.9647329]
CPU time:        33.79
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  1  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]
 [ 0  1  1  1  0 36 37  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.79375676e+01 2.20210329e+01 9.55683833e+01 7.72237173e+01
 1.01505834e-09 4.54342409e-07 2.91270396e+01 3.16765069e+01
 7.61470739e+00 3.69020860e+01 4.71219332e-02 6.40491347e-02
 2.69396473e+03 5.66205749e+04]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 9.823015068793673
cond(S) = 148.51200310839764
E1 = -503.12135180635386  E_coul = 102.89655499149856
init E= -400.224796814855
    CPU time for initialize scf      0.18 sec, wall time      0.02 sec
  HOMO = -0.000415725979977372  LUMO = 104.110654681133
  mo_energy =
[-1.12477866e+02 -1.41548989e+01 -1.41548989e+01 -1.41548989e+01
 -5.30751278e+00 -1.83843118e+00 -1.83843118e+00 -1.83843118e+00
 -4.15725980e-04  1.04110655e+02  5.79032998e+03  5.79032998e+03
  5.79032998e+03]
E1 = -573.0861094413291  E_coul = 142.91563135030378
cycle= 1 E= -430.170478091025  delta_E= -29.9  |g|= 0.49  |ddm|= 8.31
    CPU time for cycle= 1      0.21 sec, wall time      0.01 sec
diis-norm(errvec)=0.372976
diis-c [-0.13911108  1.        ]
  HOMO = -6.57306927534841e-05  LUMO = 108.836583711798
  mo_energy =
[-1.07251601e+02 -1.06223866e+01 -1.06223866e+01 -1.06223866e+01
 -1.96179686e+00 -8.49019259e-01 -8.49019259e-01 -8.49019259e-01
 -6.57306928e-05  1.08836584e+02  5.79634481e+03  5.79634481e+03
  5.79634481e+03]
E1 = -573.0873187053747  E_coul = 142.91631494770195
cycle= 2 E= -430.171003757673  delta_E= -0.000526  |g|= 0.00845  |ddm|= 0.0444
    CPU time for cycle= 2      0.15 sec, wall time      0.01 sec
diis-norm(errvec)=0.0054141
diis-c [-9.96430791e-06 -1.19345697e-02  1.01193457e+00]
  HOMO = -6.57306927502243e-05  LUMO = 108.836074259628
  mo_energy =
[-1.07252698e+02 -1.06220330e+01 -1.06220330e+01 -1.06220330e+01
 -1.96142007e+00 -8.49019196e-01 -8.49019196e-01 -8.49019196e-01
 -6.57306928e-05  1.08836074e+02  5.79633210e+03  5.79633210e+03
  5.79633210e+03]
E1 = -573.0873863485944  E_coul = 142.9163824125762
cycle= 3 E= -430.171003936018  delta_E= -1.78e-07  |g|= 5.87e-05  |ddm|= 0.00107
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=3.36501e-05
diis-c [-5.64681390e-12  5.75003971e-06 -6.55998421e-03  1.00655423e+00]
  HOMO = -6.57306927433971e-05  LUMO = 108.836076892276
  mo_energy =
[-1.07252688e+02 -1.06220282e+01 -1.06220282e+01 -1.06220282e+01
 -1.96141476e+00 -8.49019196e-01 -8.49019196e-01 -8.49019196e-01
 -6.57306927e-05  1.08836077e+02  5.79633206e+03  5.79633206e+03
  5.79633206e+03]
E1 = -573.087387983069  E_coul = 142.91638404704042
cycle= 4 E= -430.171003936029  delta_E= -1.05e-11  |g|= 3.41e-07  |ddm|= 1.29e-05
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
E1 = -573.087387983069  E_coul = 142.91638404704042
  HOMO = -6.57306927502357e-05  LUMO = 108.836077018468
  mo_energy =
[-1.07252688e+02 -1.06220281e+01 -1.06220281e+01 -1.06220281e+01
 -1.96141470e+00 -8.49019196e-01 -8.49019196e-01 -8.49019196e-01
 -6.57306928e-05  1.08836077e+02  5.79633206e+03  5.79633206e+03
  5.79633206e+03]
E1 = -573.0873880094077  E_coul = 142.91638407337936
Extra cycle  E= -430.171003936028  delta_E= 2.27e-13  |g|= 7.63e-09  |ddm|= 1.4e-07
    CPU time for scf_cycle      0.57 sec, wall time      0.07 sec
exp = [1.79375676e+01 9.55683833e+01 1.01505834e-09 2.91270396e+01
 7.61470739e+00 4.71219332e-02 2.69396473e+03]
E = -430.17100393602834
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
number_of_s_exps = 4
number_of_p_exps = 3

exps = np.zeros((number_of_s_exps+number_of_p_exps,2))
#exps[:, 0] = decaying_nums(5)

# S
exps[0,0] = 20.0
exps[1,0] = 9.5045827955887916e+01
exps[2,0] = 4.4881042475048387e+00 
exps[3,0] = 3.9799528004692630e-01
             
# P          
exps[3,0] = 3.0108199280832128e+01
exps[4,0] = 6.1393781325590453e+00
exps[5,0] = 4.8929328703550412e-01

basis =  str(number_of_s_exps)+"s"+str(number_of_p_exps)+"p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc21115.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 24
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 18 14:57:43 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35677784.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 32000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 32000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 32000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  18.0152356727        1
[INPUT] 0    0    [1    /1   ]  95.5487190059        1
[INPUT] 0    0    [1    /1   ]  1.00752940822e-09      1
[INPUT] 0    0    [1    /1   ]  29.1639881457        1
[INPUT] 1    0    [1    /1   ]  7.55925401027        1
[INPUT] 1    0    [1    /1   ]  0.0235615886205      1
[INPUT] 1    0    [1    /1   ]  2693.96473293        1

nuclear repulsion = 0
number of shells = 7
number of NR pGTOs = 13
number of NR cGTOs = 13
basis = {'Ar': [[0, [18.015235672698658, 1.0]], [0, [95.54871900591367, 1.0]], [0, [1.0075294082204878e-09, 1.0]], [0, [29.163988145687057, 1.0]], [1, [7.559254010265776, 1.0]], [1, [0.02356158862045683, 1.0]], [1, [2693.964732930002, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [18.01523567]
bas 1, expnt(s) = [95.54871901]
bas 2, expnt(s) = [1.00752941e-09]
bas 3, expnt(s) = [29.16398815]
bas 4, expnt(s) = [7.55925401]
bas 5, expnt(s) = [0.02356159]
bas 6, expnt(s) = [2693.96473293]
CPU time:        34.40
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  1  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]
 [ 0  1  1  1  0 36 37  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.80152357e+01 2.20925062e+01 9.55487190e+01 7.72117998e+01
 1.00752941e-09 4.51812584e-07 2.91639881e+01 3.17066391e+01
 7.55925401e+00 3.65664725e+01 2.35615886e-02 2.69302326e-02
 2.69396473e+03 5.66205749e+04]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 9.21929695037337
cond(S) = 150.7463596354893
E1 = -499.7888077820569  E_coul = 101.10519029289723
init E= -398.68361748916
    CPU time for initialize scf      0.18 sec, wall time      0.02 sec
  HOMO = -0.000444761040214861  LUMO = 104.209916199927
  mo_energy =
[-1.12701670e+02 -1.43296990e+01 -1.43296990e+01 -1.43296990e+01
 -5.40818983e+00 -1.38859628e+00 -1.38859628e+00 -1.38859628e+00
 -4.44761040e-04  1.04209916e+02  5.79009977e+03  5.79009977e+03
  5.79009977e+03]
E1 = -565.6717995901706  E_coul = 137.82343310459484
cycle= 1 E= -427.848366485576  delta_E= -29.2  |g|= 0.489  |ddm|= 8.53
    CPU time for cycle= 1      0.21 sec, wall time      0.01 sec
diis-norm(errvec)=0.371929
diis-c [-0.13833111  1.        ]
  HOMO = -6.54864845123654e-05  LUMO = 108.702896545319
  mo_energy =
[-1.07706482e+02 -1.10418973e+01 -1.10418973e+01 -1.10418973e+01
 -2.30185527e+00 -6.26209784e-01 -6.26209784e-01 -6.26209784e-01
 -6.54864845e-05  1.08702897e+02  5.79588875e+03  5.79588875e+03
  5.79588875e+03]
E1 = -565.6730671639065  E_coul = 137.82417704543457
cycle= 2 E= -427.848890118472  delta_E= -0.000524  |g|= 0.00844  |ddm|= 0.0453
    CPU time for cycle= 2      0.15 sec, wall time      0.01 sec
diis-norm(errvec)=0.00539078
diis-c [-9.89954598e-06 -1.19098300e-02  1.01190983e+00]
  HOMO = -6.54864845129875e-05  LUMO = 108.70239666447
  mo_energy =
[-1.07707552e+02 -1.10415435e+01 -1.10415435e+01 -1.10415435e+01
 -2.30147510e+00 -6.26209773e-01 -6.26209773e-01 -6.26209773e-01
 -6.54864845e-05  1.08702397e+02  5.79587613e+03  5.79587613e+03
  5.79587613e+03]
E1 = -565.6731356505011  E_coul = 137.8242453544538
cycle= 3 E= -427.848890296047  delta_E= -1.78e-07  |g|= 5.87e-05  |ddm|= 0.00109
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=3.35658e-05
diis-c [-5.56104705e-12  5.73333395e-06 -6.57088330e-03  1.00656515e+00]
  HOMO = -6.54864845128678e-05  LUMO = 108.702399340833
  mo_energy =
[-1.07707541e+02 -1.10415387e+01 -1.10415387e+01 -1.10415387e+01
 -2.30146976e+00 -6.26209773e-01 -6.26209773e-01 -6.26209773e-01
 -6.54864845e-05  1.08702399e+02  5.79587608e+03  5.79587608e+03
  5.79587608e+03]
E1 = -565.6731372853249  E_coul = 137.82424698926724
cycle= 4 E= -427.848890296058  delta_E= -1.03e-11  |g|= 3.41e-07  |ddm|= 1.31e-05
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
E1 = -565.6731372853249  E_coul = 137.82424698926724
  HOMO = -6.54864845126589e-05  LUMO = 108.702399466771
  mo_energy =
[-1.07707541e+02 -1.10415387e+01 -1.10415387e+01 -1.10415387e+01
 -2.30146970e+00 -6.26209773e-01 -6.26209773e-01 -6.26209773e-01
 -6.54864845e-05  1.08702399e+02  5.79587609e+03  5.79587609e+03
  5.79587609e+03]
E1 = -565.6731373115298  E_coul = 137.82424701547228
Extra cycle  E= -427.848890296058  delta_E= 1.14e-13  |g|= 7.62e-09  |ddm|= 1.42e-07
    CPU time for scf_cycle      0.57 sec, wall time      0.07 sec
exp = [1.80152357e+01 9.55487190e+01 1.00752941e-09 2.91639881e+01
 7.55925401e+00 2.35615886e-02 2.69396473e+03]
E = -427.8488902960575
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
number_of_s_exps = 4
number_of_p_exps = 3

exps = np.zeros((number_of_s_exps+number_of_p_exps,2))
#exps[:, 0] = decaying_nums(5)

# S
exps[0,0] = 20.0
exps[1,0] = 9.5045827955887916e+01
exps[2,0] = 4.4881042475048387e+00 
exps[3,0] = 3.9799528004692630e-01
             
# P          
exps[3,0] = 3.0108199280832128e+01
exps[4,0] = 6.1393781325590453e+00
exps[5,0] = 4.8929328703550412e-01

basis =  str(number_of_s_exps)+"s"+str(number_of_p_exps)+"p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc21115.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 24
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 18 14:57:43 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35677784.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 32000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 32000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 32000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  18.0540703166        1
[INPUT] 0    0    [1    /1   ]  95.5388867221        1
[INPUT] 0    0    [1    /1   ]  1.00376488752e-09      1
[INPUT] 0    0    [1    /1   ]  29.1824627016        1
[INPUT] 1    0    [1    /1   ]  7.53152690573        1
[INPUT] 1    0    [1    /1   ]  0.0117812392824      1
[INPUT] 1    0    [1    /1   ]  2693.96473294        1

nuclear repulsion = 0
number of shells = 7
number of NR pGTOs = 13
number of NR cGTOs = 13
basis = {'Ar': [[0, [18.05407031663709, 1.0]], [0, [95.53888672210205, 1.0]], [0, [1.0037648875156655e-09, 1.0]], [0, [29.182462701557682, 1.0]], [1, [7.531526905732282, 1.0]], [1, [0.011781239282401932, 1.0]], [1, [2693.9647329429627, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [18.05407032]
bas 1, expnt(s) = [95.53888672]
bas 2, expnt(s) = [1.00376489e-09]
bas 3, expnt(s) = [29.1824627]
bas 4, expnt(s) = [7.53152691]
bas 5, expnt(s) = [0.01178124]
bas 6, expnt(s) = [2693.96473294]
CPU time:        35.01
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  1  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]
 [ 0  1  1  1  0 36 37  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.80540703e+01 2.21282144e+01 9.55388867e+01 7.72058407e+01
 1.00376489e-09 4.50545881e-07 2.91824627e+01 3.17217018e+01
 7.53152691e+00 3.63988936e+01 1.17812393e-02 1.13233026e-02
 2.69396473e+03 5.66205749e+04]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 9.035407929748963
cond(S) = 151.87703372901117
E1 = -498.8939744409365  E_coul = 100.63384878986744
init E= -398.260125651069
    CPU time for initialize scf      0.18 sec, wall time      0.02 sec
  HOMO = -0.000453226344293983  LUMO = 104.30424117566
  mo_energy =
[-1.12768693e+02 -1.43722008e+01 -1.43722008e+01 -1.43722008e+01
 -5.41376029e+00 -1.00794206e+00 -1.00794206e+00 -1.00794206e+00
 -4.53226344e-04  1.04304241e+02  5.79002960e+03  5.79002960e+03
  5.79002960e+03]
E1 = -560.4449178014487  E_coul = 134.27463699107955
cycle= 1 E= -426.170280810369  delta_E= -27.9  |g|= 0.489  |ddm|= 8.62
    CPU time for cycle= 1      0.22 sec, wall time      0.01 sec
diis-norm(errvec)=0.371406
diis-c [-0.13794263  1.        ]
  HOMO = -6.53640508371445e-05  LUMO = 108.551591751162
  mo_energy =
[-1.08018237e+02 -1.13359371e+01 -1.13359371e+01 -1.13359371e+01
 -2.55621394e+00 -4.55250237e-01 -4.55250237e-01 -4.55250237e-01
 -6.53640508e-05  1.08551592e+02  5.79557644e+03  5.79557644e+03
  5.79557644e+03]
E1 = -560.4462195132348  E_coul = 134.27541602781514
cycle= 2 E= -426.17080348542  delta_E= -0.000523  |g|= 0.00843  |ddm|= 0.0457
    CPU time for cycle= 2      0.15 sec, wall time      0.01 sec
diis-norm(errvec)=0.00537918
diis-c [-9.86724353e-06 -1.18975907e-02  1.01189759e+00]
  HOMO = -6.53640508302227e-05  LUMO = 108.551097205735
  mo_energy =
[-1.08019292e+02 -1.13355830e+01 -1.13355830e+01 -1.13355830e+01
 -2.55583179e+00 -4.55250235e-01 -4.55250235e-01 -4.55250235e-01
 -6.53640508e-05  1.08551097e+02  5.79556386e+03  5.79556386e+03
  5.79556386e+03]
E1 = -560.4462885331188  E_coul = 134.27548487047142
cycle= 3 E= -426.170803662647  delta_E= -1.77e-07  |g|= 5.87e-05  |ddm|= 0.0011
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=3.35245e-05
diis-c [-5.52321864e-12  5.72379825e-06 -6.57639147e-03  1.00657067e+00]
  HOMO = -6.53640508220491e-05  LUMO = 108.551099909851
  mo_energy =
[-1.08019282e+02 -1.13355782e+01 -1.13355782e+01 -1.13355782e+01
 -2.55582644e+00 -4.55250235e-01 -4.55250235e-01 -4.55250235e-01
 -6.53640508e-05  1.08551100e+02  5.79556382e+03  5.79556382e+03
  5.79556382e+03]
E1 = -560.4462901693287  E_coul = 134.27548650667154
cycle= 4 E= -426.170803662657  delta_E= -9.72e-12  |g|= 3.41e-07  |ddm|= 1.33e-05
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
E1 = -560.4462901693287  E_coul = 134.27548650667154
  HOMO = -6.53640508351695e-05  LUMO = 108.551100035717
  mo_energy =
[-1.08019282e+02 -1.13355782e+01 -1.13355782e+01 -1.13355782e+01
 -2.55582638e+00 -4.55250235e-01 -4.55250235e-01 -4.55250235e-01
 -6.53640508e-05  1.08551100e+02  5.79556382e+03  5.79556382e+03
  5.79556382e+03]
E1 = -560.446290195478  E_coul = 134.27548653282085
Extra cycle  E= -426.170803662657  delta_E=    0  |g|= 7.62e-09  |ddm|= 1.43e-07
    CPU time for scf_cycle      0.57 sec, wall time      0.07 sec
exp = [1.80540703e+01 9.55388867e+01 1.00376489e-09 2.91824627e+01
 7.53152691e+00 1.17812393e-02 2.69396473e+03]
E = -426.17080366265714
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
number_of_s_exps = 4
number_of_p_exps = 3

exps = np.zeros((number_of_s_exps+number_of_p_exps,2))
#exps[:, 0] = decaying_nums(5)

# S
exps[0,0] = 20.0
exps[1,0] = 9.5045827955887916e+01
exps[2,0] = 4.4881042475048387e+00 
exps[3,0] = 3.9799528004692630e-01
             
# P          
exps[3,0] = 3.0108199280832128e+01
exps[4,0] = 6.1393781325590453e+00
exps[5,0] = 4.8929328703550412e-01

basis =  str(number_of_s_exps)+"s"+str(number_of_p_exps)+"p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc21115.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 24
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 18 14:57:44 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35677784.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 32000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 32000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 32000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  18.0734880603        1
[INPUT] 0    0    [1    /1   ]  95.5339704734        1
[INPUT] 0    0    [1    /1   ]  1.00188258628e-09      1
[INPUT] 0    0    [1    /1   ]  29.1917001801        1
[INPUT] 1    0    [1    /1   ]  7.51766305235        1
[INPUT] 1    0    [1    /1   ]  0.00589093667928      1
[INPUT] 1    0    [1    /1   ]  2693.96473295        1

nuclear repulsion = 0
number of shells = 7
number of NR pGTOs = 13
number of NR cGTOs = 13
basis = {'Ar': [[0, [18.07348806034889, 1.0]], [0, [95.53397047341805, 1.0]], [0, [1.0018825862807195e-09, 1.0]], [0, [29.191700180125885, 1.0]], [1, [7.517663052350357, 1.0]], [1, [0.00589093667928134, 1.0]], [1, [2693.9647329494433, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [18.07348806]
bas 1, expnt(s) = [95.53397047]
bas 2, expnt(s) = [1.00188259e-09]
bas 3, expnt(s) = [29.19170018]
bas 4, expnt(s) = [7.51766305]
bas 5, expnt(s) = [0.00589094]
bas 6, expnt(s) = [2693.96473295]
CPU time:        35.62
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  1  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]
 [ 0  1  1  1  0 36 37  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.80734881e+01 2.21460618e+01 9.55339705e+01 7.72028610e+01
 1.00188259e-09 4.49912071e-07 2.91917002e+01 3.17292325e+01
 7.51766305e+00 3.63151601e+01 5.89093668e-03 4.76118258e-03
 2.69396473e+03 5.66205749e+04]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 8.990200315898967
cond(S) = 152.44578862086053
E1 = -498.6324631008458  E_coul = 100.4952924919037
init E= -398.137170608942
    CPU time for initialize scf      0.18 sec, wall time      0.02 sec
  HOMO = -0.000455084634101001  LUMO = 104.36204267895
  mo_energy =
[-1.12791519e+02 -1.43827574e+01 -1.43827574e+01 -1.43827574e+01
 -5.40589034e+00 -7.21271801e-01 -7.21271801e-01 -7.21271801e-01
 -4.55084634e-04  1.04362043e+02  5.79000522e+03  5.79000522e+03
  5.79000522e+03]
E1 = -556.7602969035945  E_coul = 131.79246150588526
cycle= 1 E= -424.967835397709  delta_E= -26.8  |g|= 0.488  |ddm|= 8.65
    CPU time for cycle= 1      0.21 sec, wall time      0.01 sec
diis-norm(errvec)=0.371145
diis-c [-0.13774877  1.        ]
  HOMO = -6.5302775467734e-05  LUMO = 108.41641387729
  mo_energy =
[-1.08233606e+02 -1.15424228e+01 -1.15424228e+01 -1.15424228e+01
 -2.74288572e+00 -3.28039300e-01 -3.28039300e-01 -3.28039300e-01
 -6.53027755e-05  1.08416414e+02  5.79536080e+03  5.79536080e+03
  5.79536080e+03]
E1 = -556.7616172110552  E_coul = 131.79325959920354
cycle= 2 E= -424.968357611852  delta_E= -0.000522  |g|= 0.00843  |ddm|= 0.046
    CPU time for cycle= 2      0.15 sec, wall time      0.01 sec
diis-norm(errvec)=0.0053734
diis-c [-9.85110490e-06 -1.18915143e-02  1.01189151e+00]
  HOMO = -6.53027754597922e-05  LUMO = 108.41592216756
  mo_energy =
[-1.08234653e+02 -1.15420685e+01 -1.15420685e+01 -1.15420685e+01
 -2.74250249e+00 -3.28039299e-01 -3.28039299e-01 -3.28039299e-01
 -6.53027755e-05  1.08415922e+02  5.79534825e+03  5.79534825e+03
  5.79534825e+03]
E1 = -556.761686531646  E_coul = 131.79332874273015
cycle= 3 E= -424.968357788916  delta_E= -1.77e-07  |g|= 5.88e-05  |ddm|= 0.00111
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=3.35042e-05
diis-c [-5.50576405e-12  5.71869183e-06 -6.57916027e-03  1.00657344e+00]
  HOMO = -6.53027754626331e-05  LUMO = 108.415924887351
  mo_energy =
[-1.08234643e+02 -1.15420637e+01 -1.15420637e+01 -1.15420637e+01
 -2.74249714e+00 -3.28039299e-01 -3.28039299e-01 -3.28039299e-01
 -6.53027755e-05  1.08415925e+02  5.79534821e+03  5.79534821e+03
  5.79534821e+03]
E1 = -556.7616881689177  E_coul = 131.79333037999143
cycle= 4 E= -424.968357788926  delta_E= -1.05e-11  |g|= 3.41e-07  |ddm|= 1.33e-05
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
E1 = -556.7616881689177  E_coul = 131.79333037999143
  HOMO = -6.53027754624648e-05  LUMO = 108.415925013196
  mo_energy =
[-1.08234642e+02 -1.15420637e+01 -1.15420637e+01 -1.15420637e+01
 -2.74249707e+00 -3.28039299e-01 -3.28039299e-01 -3.28039299e-01
 -6.53027755e-05  1.08415925e+02  5.79534821e+03  5.79534821e+03
  5.79534821e+03]
E1 = -556.7616881950427  E_coul = 131.7933304061159
Extra cycle  E= -424.968357788927  delta_E= -5.12e-13  |g|= 7.62e-09  |ddm|= 1.43e-07
    CPU time for scf_cycle      0.57 sec, wall time      0.07 sec
exp = [1.80734881e+01 9.55339705e+01 1.00188259e-09 2.91917002e+01
 7.51766305e+00 5.89093668e-03 2.69396473e+03]
E = -424.96835778892677
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
number_of_s_exps = 4
number_of_p_exps = 3

exps = np.zeros((number_of_s_exps+number_of_p_exps,2))
#exps[:, 0] = decaying_nums(5)

# S
exps[0,0] = 20.0
exps[1,0] = 9.5045827955887916e+01
exps[2,0] = 4.4881042475048387e+00 
exps[3,0] = 3.9799528004692630e-01
             
# P          
exps[3,0] = 3.0108199280832128e+01
exps[4,0] = 6.1393781325590453e+00
exps[5,0] = 4.8929328703550412e-01

basis =  str(number_of_s_exps)+"s"+str(number_of_p_exps)+"p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc21115.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 24
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 18 14:57:44 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35677784.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 32000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 32000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 32000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  18.0831972344        1
[INPUT] 0    0    [1    /1   ]  95.5315122726        1
[INPUT] 0    0    [1    /1   ]  1.00094140637e-09      1
[INPUT] 0    0    [1    /1   ]  29.1963190632        1
[INPUT] 1    0    [1    /1   ]  7.51073090989        1
[INPUT] 1    0    [1    /1   ]  0.00294569370555      1
[INPUT] 1    0    [1    /1   ]  2693.96473295        1

nuclear repulsion = 0
number of shells = 7
number of NR pGTOs = 13
number of NR cGTOs = 13
basis = {'Ar': [[0, [18.083197234407727, 1.0]], [0, [95.53151227256332, 1.0]], [0, [1.0009414063685472e-09, 1.0]], [0, [29.19631906317505, 1.0]], [1, [7.510730909892966, 1.0]], [1, [0.0029456937055485524, 1.0]], [1, [2693.9647329526833, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [18.08319723]
bas 1, expnt(s) = [95.53151227]
bas 2, expnt(s) = [1.00094141e-09]
bas 3, expnt(s) = [29.19631906]
bas 4, expnt(s) = [7.51073091]
bas 5, expnt(s) = [0.00294569]
bas 6, expnt(s) = [2693.96473295]
CPU time:        36.23
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  1  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]
 [ 0  1  1  1  0 36 37  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.80831972e+01 2.21549839e+01 9.55315123e+01 7.72013712e+01
 1.00094141e-09 4.49595044e-07 2.91963191e+01 3.17329977e+01
 7.51073091e+00 3.62733065e+01 2.94569371e-03 2.00202214e-03
 2.69396473e+03 5.66205749e+04]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 8.980279344723005
cond(S) = 152.7310308608764
E1 = -498.53530810411144  E_coul = 100.4432759187784
init E= -398.092032185333
    CPU time for initialize scf      0.18 sec, wall time      0.02 sec
  HOMO = -0.000455371702758798  LUMO = 104.392852880249
  mo_energy =
[-1.12801013e+02 -1.43861106e+01 -1.43861106e+01 -1.43861106e+01
 -5.40004184e+00 -5.13472673e-01 -5.13472673e-01 -5.13472673e-01
 -4.55371703e-04  1.04392853e+02  5.78999495e+03  5.78999495e+03
  5.78999495e+03]
E1 = -554.1612589293742  E_coul = 130.05116050327484
cycle= 1 E= -424.110098426099  delta_E=  -26  |g|= 0.488  |ddm|= 8.67
    CPU time for cycle= 1      0.21 sec, wall time      0.01 sec
diis-norm(errvec)=0.371015
diis-c [-0.13765191  1.        ]
  HOMO = -6.52721730554602e-05  LUMO = 108.306779660379
  mo_energy =
[-1.08383328e+02 -1.16876939e+01 -1.16876939e+01 -1.16876939e+01
 -2.87825898e+00 -2.34997078e-01 -2.34997078e-01 -2.34997078e-01
 -6.52721731e-05  1.08306780e+02  5.79521094e+03  5.79521094e+03
  5.79521094e+03]
E1 = -554.1625888758648  E_coul = 130.0519684619391
cycle= 2 E= -424.110620413926  delta_E= -0.000522  |g|= 0.00843  |ddm|= 0.0461
    CPU time for cycle= 2      0.15 sec, wall time      0.01 sec
diis-norm(errvec)=0.00537051
diis-c [-9.84303624e-06 -1.18884873e-02  1.01188849e+00]
  HOMO = -6.52721730508655e-05  LUMO = 108.306289406308
  mo_energy =
[-1.08384371e+02 -1.16873395e+01 -1.16873395e+01 -1.16873395e+01
 -2.87787520e+00 -2.34997078e-01 -2.34997078e-01 -2.34997078e-01
 -6.52721731e-05  1.08306289e+02  5.79519841e+03  5.79519841e+03
  5.79519841e+03]
E1 = -554.1626583544253  E_coul = 130.05203776351505
cycle= 3 E= -424.11062059091  delta_E= -1.77e-07  |g|= 5.88e-05  |ddm|= 0.00111
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=3.3494e-05
diis-c [-5.49735508e-12  5.71604991e-06 -6.58054545e-03  1.00657483e+00]
  HOMO = -6.52721730552444e-05  LUMO = 108.306292134344
  mo_energy =
[-1.08384361e+02 -1.16873347e+01 -1.16873347e+01 -1.16873347e+01
 -2.87786983e+00 -2.34997078e-01 -2.34997078e-01 -2.34997078e-01
 -6.52721731e-05  1.08306292e+02  5.79519837e+03  5.79519837e+03
  5.79519837e+03]
E1 = -554.1626599923103  E_coul = 130.05203940138887
cycle= 4 E= -424.110620590921  delta_E= -1.12e-11  |g|= 3.41e-07  |ddm|= 1.33e-05
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
E1 = -554.1626599923103  E_coul = 130.05203940138887
  HOMO = -6.52721730505801e-05  LUMO = 108.306292260181
  mo_energy =
[-1.08384360e+02 -1.16873347e+01 -1.16873347e+01 -1.16873347e+01
 -2.87786977e+00 -2.34997078e-01 -2.34997078e-01 -2.34997078e-01
 -6.52721731e-05  1.08306292e+02  5.79519837e+03  5.79519837e+03
  5.79519837e+03]
E1 = -554.1626600184221  E_coul = 130.0520394275019
Extra cycle  E= -424.11062059092  delta_E= 1.19e-12  |g|= 7.63e-09  |ddm|= 1.44e-07
    CPU time for scf_cycle      0.57 sec, wall time      0.07 sec
exp = [1.80831972e+01 9.55315123e+01 1.00094141e-09 2.91963191e+01
 7.51073091e+00 2.94569371e-03 2.69396473e+03]
E = -424.11062059092023
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
number_of_s_exps = 4
number_of_p_exps = 3

exps = np.zeros((number_of_s_exps+number_of_p_exps,2))
#exps[:, 0] = decaying_nums(5)

# S
exps[0,0] = 20.0
exps[1,0] = 9.5045827955887916e+01
exps[2,0] = 4.4881042475048387e+00 
exps[3,0] = 3.9799528004692630e-01
             
# P          
exps[3,0] = 3.0108199280832128e+01
exps[4,0] = 6.1393781325590453e+00
exps[5,0] = 4.8929328703550412e-01

basis =  str(number_of_s_exps)+"s"+str(number_of_p_exps)+"p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc21115.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 24
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 18 14:57:44 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35677784.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 32000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 32000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 32000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  18.088052037         1
[INPUT] 0    0    [1    /1   ]  95.5302831176        1
[INPUT] 0    0    [1    /1   ]  1.00047079552e-09      1
[INPUT] 0    0    [1    /1   ]  29.1986286073        1
[INPUT] 1    0    [1    /1   ]  7.50726468475        1
[INPUT] 1    0    [1    /1   ]  0.00147300682643      1
[INPUT] 1    0    [1    /1   ]  2693.96473295        1

nuclear repulsion = 0
number of shells = 7
number of NR pGTOs = 13
number of NR cGTOs = 13
basis = {'Ar': [[0, [18.088052037006726, 1.0]], [0, [95.53028311755733, 1.0]], [0, [1.000470795515755e-09, 1.0]], [0, [29.198628607251162, 1.0]], [1, [7.507264684752205, 1.0]], [1, [0.0014730068264270917, 1.0]], [1, [2693.9647329543036, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [18.08805204]
bas 1, expnt(s) = [95.53028312]
bas 2, expnt(s) = [1.0004708e-09]
bas 3, expnt(s) = [29.19862861]
bas 4, expnt(s) = [7.50726468]
bas 5, expnt(s) = [0.00147301]
bas 6, expnt(s) = [2693.96473295]
CPU time:        36.85
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  1  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]
 [ 0  1  1  1  0 36 37  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.80880520e+01 2.21594447e+01 9.55302831e+01 7.72006262e+01
 1.00047080e-09 4.49436496e-07 2.91986286e+01 3.17348803e+01
 7.50726468e+00 3.62523824e+01 1.47300683e-03 8.41860905e-04
 2.69396473e+03 5.66205749e+04]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 8.978134119110372
cond(S) = 152.87387288245583
E1 = -498.4918469027094  E_coul = 100.419884498431
init E= -398.071962404278
    CPU time for initialize scf      0.18 sec, wall time      0.02 sec
  HOMO = -0.000455372919085177  LUMO = 104.408547669742
  mo_energy =
[-1.12805468e+02 -1.43874934e+01 -1.43874934e+01 -1.43874934e+01
 -5.39682700e+00 -3.64687294e-01 -3.64687294e-01 -3.64687294e-01
 -4.55372919e-04  1.04408548e+02  5.78999011e+03  5.78999011e+03
  5.78999011e+03]
E1 = -552.326798184173  E_coul = 128.82686005333338
cycle= 1 E= -423.49993813084  delta_E= -25.4  |g|= 0.488  |ddm|= 8.67
    CPU time for cycle= 1      0.21 sec, wall time      0.01 sec
diis-norm(errvec)=0.370949
diis-c [-0.13760348  1.        ]
  HOMO = -6.52569813665046e-05  LUMO = 108.22224253268
  mo_energy =
[-1.08487908e+02 -1.17900452e+01 -1.17900452e+01 -1.17900452e+01
 -2.97566399e+00 -1.67674169e-01 -1.67674169e-01 -1.67674169e-01
 -6.52569814e-05  1.08222243e+02  5.79510630e+03  5.79510630e+03
  5.79510630e+03]
E1 = -552.3281330126382  E_coul = 128.82767300633205
cycle= 2 E= -423.500460006306  delta_E= -0.000522  |g|= 0.00843  |ddm|= 0.0461
    CPU time for cycle= 2      0.15 sec, wall time      0.01 sec
diis-norm(errvec)=0.00536907
diis-c [-9.83900147e-06 -1.18869763e-02  1.01188698e+00]
  HOMO = -6.52569813677068e-05  LUMO = 108.221753013486
  mo_energy =
[-1.08488949e+02 -1.17896908e+01 -1.17896908e+01 -1.17896908e+01
 -2.97527992e+00 -1.67674169e-01 -1.67674169e-01 -1.67674169e-01
 -6.52569814e-05  1.08221753e+02  5.79509377e+03  5.79509377e+03
  5.79509377e+03]
E1 = -552.3282025715822  E_coul = 128.82774238833002
cycle= 3 E= -423.500460183252  delta_E= -1.77e-07  |g|= 5.88e-05  |ddm|= 0.00111
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=3.3489e-05
diis-c [-5.49320708e-12  5.71470778e-06 -6.58123764e-03  1.00657552e+00]
  HOMO = -6.52569813676309e-05  LUMO = 108.221755745722
  mo_energy =
[-1.08488938e+02 -1.17896860e+01 -1.17896860e+01 -1.17896860e+01
 -2.97527455e+00 -1.67674169e-01 -1.67674169e-01 -1.67674169e-01
 -6.52569814e-05  1.08221756e+02  5.79509373e+03  5.79509373e+03
  5.79509373e+03]
E1 = -552.3282042097886  E_coul = 128.82774402652598
cycle= 4 E= -423.500460183263  delta_E= -1.05e-11  |g|= 3.41e-07  |ddm|= 1.34e-05
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
E1 = -552.3282042097886  E_coul = 128.82774402652598
  HOMO = -6.52569813665109e-05  LUMO = 108.221755871556
  mo_energy =
[-1.08488938e+02 -1.17896860e+01 -1.17896860e+01 -1.17896860e+01
 -2.97527449e+00 -1.67674169e-01 -1.67674169e-01 -1.67674169e-01
 -6.52569814e-05  1.08221756e+02  5.79509373e+03  5.79509373e+03
  5.79509373e+03]
E1 = -552.3282042358961  E_coul = 128.82774405263345
Extra cycle  E= -423.500460183263  delta_E= -5.68e-14  |g|= 7.62e-09  |ddm|= 1.44e-07
    CPU time for scf_cycle      0.58 sec, wall time      0.07 sec
exp = [1.80880520e+01 9.55302831e+01 1.00047080e-09 2.91986286e+01
 7.50726468e+00 1.47300683e-03 2.69396473e+03]
E = -423.5004601832627
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
number_of_s_exps = 4
number_of_p_exps = 3

exps = np.zeros((number_of_s_exps+number_of_p_exps,2))
#exps[:, 0] = decaying_nums(5)

# S
exps[0,0] = 20.0
exps[1,0] = 9.5045827955887916e+01
exps[2,0] = 4.4881042475048387e+00 
exps[3,0] = 3.9799528004692630e-01
             
# P          
exps[3,0] = 3.0108199280832128e+01
exps[4,0] = 6.1393781325590453e+00
exps[5,0] = 4.8929328703550412e-01

basis =  str(number_of_s_exps)+"s"+str(number_of_p_exps)+"p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc21115.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 24
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 18 14:57:44 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35677784.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 32000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 32000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 32000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  18.0904795917        1
[INPUT] 0    0    [1    /1   ]  95.5296685012        1
[INPUT] 0    0    [1    /1   ]  1.00023547522e-09      1
[INPUT] 0    0    [1    /1   ]  29.1997834522        1
[INPUT] 1    0    [1    /1   ]  7.50553146269        1
[INPUT] 1    0    [1    /1   ]  0.000736616869381      1
[INPUT] 1    0    [1    /1   ]  2693.96473296        1

nuclear repulsion = 0
number of shells = 7
number of NR pGTOs = 13
number of NR cGTOs = 13
basis = {'Ar': [[0, [18.090479591653967, 1.0]], [0, [95.52966850122925, 1.0]], [0, [1.0002354752242615e-09, 1.0]], [0, [29.199783452240357, 1.0]], [1, [7.505531462694818, 1.0]], [1, [0.000736616869380705, 1.0]], [1, [2693.964732955114, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [18.09047959]
bas 1, expnt(s) = [95.5296685]
bas 2, expnt(s) = [1.00023548e-09]
bas 3, expnt(s) = [29.19978345]
bas 4, expnt(s) = [7.50553146]
bas 5, expnt(s) = [0.00073662]
bas 6, expnt(s) = [2693.96473296]
CPU time:        37.46
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  1  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]
 [ 0  1  1  1  0 36 37  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.80904796e+01 2.21616751e+01 9.55296685e+01 7.72002537e+01
 1.00023548e-09 4.49357210e-07 2.91997835e+01 3.17358217e+01
 7.50553146e+00 3.62419206e+01 7.36616869e-04 3.54027068e-04
 2.69396473e+03 5.66205749e+04]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 8.97762183472669
cond(S) = 152.94535212428562
E1 = -498.4708200214274  E_coul = 100.40854913339267
init E= -398.062270888035
    CPU time for initialize scf      0.18 sec, wall time      0.02 sec
  HOMO = -0.000455345216337929  LUMO = 104.416435083932
  mo_energy =
[-1.12807656e+02 -1.43881440e+01 -1.43881440e+01 -1.43881440e+01
 -5.39517954e+00 -2.58666888e-01 -2.58666888e-01 -2.58666888e-01
 -4.55345216e-04  1.04416435e+02  5.78998772e+03  5.78998772e+03
  5.78998772e+03]
E1 = -551.0313368781466  E_coul = 127.96465294981789
cycle= 1 E= -423.066683928329  delta_E=  -25  |g|= 0.488  |ddm|= 8.68
    CPU time for cycle= 1      0.21 sec, wall time      0.01 sec
diis-norm(errvec)=0.370917
diis-c [-0.13757927  1.        ]
  HOMO = -6.52496148478971e-05  LUMO = 108.158961179039
  mo_energy =
[-1.08561211e+02 -1.18622329e+01 -1.18622329e+01 -1.18622329e+01
 -3.04537913e+00 -1.19305999e-01 -1.19305999e-01 -1.19305999e-01
 -6.52496148e-05  1.08158961e+02  5.79503296e+03  5.79503296e+03
  5.79503296e+03]
E1 = -551.0326741572152  E_coul = 127.96546840946287
cycle= 2 E= -423.067205747752  delta_E= -0.000522  |g|= 0.00843  |ddm|= 0.0462
    CPU time for cycle= 2      0.15 sec, wall time      0.01 sec
diis-norm(errvec)=0.00536835
diis-c [-9.83698382e-06 -1.18862213e-02  1.01188622e+00]
  HOMO = -6.52496148461158e-05  LUMO = 108.158472028411
  mo_energy =
[-1.08562250e+02 -1.18618785e+01 -1.18618785e+01 -1.18618785e+01
 -3.04499492e+00 -1.19305999e-01 -1.19305999e-01 -1.19305999e-01
 -6.52496148e-05  1.08158472e+02  5.79502044e+03  5.79502044e+03
  5.79502044e+03]
E1 = -551.0327437565683  E_coul = 127.96553783188858
cycle= 3 E= -423.06720592468  delta_E= -1.77e-07  |g|= 5.88e-05  |ddm|= 0.00111
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=3.34864e-05
diis-c [-5.49116531e-12  5.71403336e-06 -6.58158349e-03  1.00657587e+00]
  HOMO = -6.52496148382436e-05  LUMO = 108.15847476276
  mo_energy =
[-1.08562240e+02 -1.18618737e+01 -1.18618737e+01 -1.18618737e+01
 -3.04498955e+00 -1.19305999e-01 -1.19305999e-01 -1.19305999e-01
 -6.52496148e-05  1.08158475e+02  5.79502039e+03  5.79502039e+03
  5.79502039e+03]
E1 = -551.0327453949368  E_coul = 127.96553947024766
cycle= 4 E= -423.067205924689  delta_E= -9.44e-12  |g|= 3.41e-07  |ddm|= 1.34e-05
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
E1 = -551.0327453949368  E_coul = 127.96553947024766
  HOMO = -6.52496148411546e-05  LUMO = 108.158474888593
  mo_energy =
[-1.08562240e+02 -1.18618736e+01 -1.18618736e+01 -1.18618736e+01
 -3.04498949e+00 -1.19305999e-01 -1.19305999e-01 -1.19305999e-01
 -6.52496148e-05  1.08158475e+02  5.79502039e+03  5.79502039e+03
  5.79502039e+03]
E1 = -551.0327454210417  E_coul = 127.9655394963527
Extra cycle  E= -423.067205924689  delta_E= 1.14e-13  |g|= 7.62e-09  |ddm|= 1.44e-07
    CPU time for scf_cycle      0.58 sec, wall time      0.07 sec
exp = [1.80904796e+01 9.55296685e+01 1.00023548e-09 2.91997835e+01
 7.50553146e+00 7.36616869e-04 2.69396473e+03]
E = -423.067205924689
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
number_of_s_exps = 4
number_of_p_exps = 3

exps = np.zeros((number_of_s_exps+number_of_p_exps,2))
#exps[:, 0] = decaying_nums(5)

# S
exps[0,0] = 20.0
exps[1,0] = 9.5045827955887916e+01
exps[2,0] = 4.4881042475048387e+00 
exps[3,0] = 3.9799528004692630e-01
             
# P          
exps[3,0] = 3.0108199280832128e+01
exps[4,0] = 6.1393781325590453e+00
exps[5,0] = 4.8929328703550412e-01

basis =  str(number_of_s_exps)+"s"+str(number_of_p_exps)+"p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc21115.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 24
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 18 14:57:44 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35677784.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 32000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 32000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 32000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  18.0904795917        1
[INPUT] 0    0    [1    /1   ]  95.5296685012        1
[INPUT] 0    0    [1    /1   ]  1.00023547522e-09      1
[INPUT] 0    0    [1    /1   ]  29.1997834522        1
[INPUT] 1    0    [1    /1   ]  7.50553146269        1
[INPUT] 1    0    [1    /1   ]  0.000736616869381      1
[INPUT] 1    0    [1    /1   ]  2693.96473296        1

nuclear repulsion = 0
number of shells = 7
number of NR pGTOs = 13
number of NR cGTOs = 13
basis = {'Ar': [[0, [18.090479591653967, 1.0]], [0, [95.52966850122925, 1.0]], [0, [1.0002354752242615e-09, 1.0]], [0, [29.199783452240357, 1.0]], [1, [7.505531462694818, 1.0]], [1, [0.000736616869380705, 1.0]], [1, [2693.964732955114, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [18.09047959]
bas 1, expnt(s) = [95.5296685]
bas 2, expnt(s) = [1.00023548e-09]
bas 3, expnt(s) = [29.19978345]
bas 4, expnt(s) = [7.50553146]
bas 5, expnt(s) = [0.00073662]
bas 6, expnt(s) = [2693.96473296]
CPU time:        38.07
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  1  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]
 [ 0  1  1  1  0 36 37  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.80904796e+01 2.21616751e+01 9.55296685e+01 7.72002537e+01
 1.00023548e-09 4.49357210e-07 2.91997835e+01 3.17358217e+01
 7.50553146e+00 3.62419206e+01 7.36616869e-04 3.54027068e-04
 2.69396473e+03 5.66205749e+04]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 8.97762183472669
cond(S) = 152.94535212428562
E1 = -498.4708200214274  E_coul = 100.40854913339267
init E= -398.062270888035
    CPU time for initialize scf      0.18 sec, wall time      0.02 sec
  HOMO = -0.000455345216337929  LUMO = 104.416435083932
  mo_energy =
[-1.12807656e+02 -1.43881440e+01 -1.43881440e+01 -1.43881440e+01
 -5.39517954e+00 -2.58666888e-01 -2.58666888e-01 -2.58666888e-01
 -4.55345216e-04  1.04416435e+02  5.78998772e+03  5.78998772e+03
  5.78998772e+03]
E1 = -551.0313368781466  E_coul = 127.96465294981789
cycle= 1 E= -423.066683928329  delta_E=  -25  |g|= 0.488  |ddm|= 8.68
    CPU time for cycle= 1      0.21 sec, wall time      0.01 sec
diis-norm(errvec)=0.370917
diis-c [-0.13757927  1.        ]
  HOMO = -6.52496148478971e-05  LUMO = 108.158961179039
  mo_energy =
[-1.08561211e+02 -1.18622329e+01 -1.18622329e+01 -1.18622329e+01
 -3.04537913e+00 -1.19305999e-01 -1.19305999e-01 -1.19305999e-01
 -6.52496148e-05  1.08158961e+02  5.79503296e+03  5.79503296e+03
  5.79503296e+03]
E1 = -551.0326741572152  E_coul = 127.96546840946287
cycle= 2 E= -423.067205747752  delta_E= -0.000522  |g|= 0.00843  |ddm|= 0.0462
    CPU time for cycle= 2      0.15 sec, wall time      0.01 sec
diis-norm(errvec)=0.00536835
diis-c [-9.83698382e-06 -1.18862213e-02  1.01188622e+00]
  HOMO = -6.52496148461158e-05  LUMO = 108.158472028411
  mo_energy =
[-1.08562250e+02 -1.18618785e+01 -1.18618785e+01 -1.18618785e+01
 -3.04499492e+00 -1.19305999e-01 -1.19305999e-01 -1.19305999e-01
 -6.52496148e-05  1.08158472e+02  5.79502044e+03  5.79502044e+03
  5.79502044e+03]
E1 = -551.0327437565683  E_coul = 127.96553783188858
cycle= 3 E= -423.06720592468  delta_E= -1.77e-07  |g|= 5.88e-05  |ddm|= 0.00111
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=3.34864e-05
diis-c [-5.49116531e-12  5.71403336e-06 -6.58158349e-03  1.00657587e+00]
  HOMO = -6.52496148382436e-05  LUMO = 108.15847476276
  mo_energy =
[-1.08562240e+02 -1.18618737e+01 -1.18618737e+01 -1.18618737e+01
 -3.04498955e+00 -1.19305999e-01 -1.19305999e-01 -1.19305999e-01
 -6.52496148e-05  1.08158475e+02  5.79502039e+03  5.79502039e+03
  5.79502039e+03]
E1 = -551.0327453949368  E_coul = 127.96553947024766
cycle= 4 E= -423.067205924689  delta_E= -9.44e-12  |g|= 3.41e-07  |ddm|= 1.34e-05
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
E1 = -551.0327453949368  E_coul = 127.96553947024766
  HOMO = -6.52496148411546e-05  LUMO = 108.158474888593
  mo_energy =
[-1.08562240e+02 -1.18618736e+01 -1.18618736e+01 -1.18618736e+01
 -3.04498949e+00 -1.19305999e-01 -1.19305999e-01 -1.19305999e-01
 -6.52496148e-05  1.08158475e+02  5.79502039e+03  5.79502039e+03
  5.79502039e+03]
E1 = -551.0327454210417  E_coul = 127.9655394963527
Extra cycle  E= -423.067205924689  delta_E= 1.14e-13  |g|= 7.62e-09  |ddm|= 1.44e-07
    CPU time for scf_cycle      0.58 sec, wall time      0.07 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 152.94535212428562
E1 = -551.0327454210417  E_coul = 127.9655394963527
init E= -423.067205924689
    CPU time for initialize scf      1.13 sec, wall time      0.05 sec
  HOMO = -6.52496148410687e-05  LUMO = 108.158474891337
  mo_energy =
[-1.08562240e+02 -1.18618736e+01 -1.18618736e+01 -1.18618736e+01
 -3.04498949e+00 -1.19305999e-01 -1.19305999e-01 -1.19305999e-01
 -6.52496148e-05  1.08158475e+02  5.79502039e+03  5.79502039e+03
  5.79502039e+03]
E1 = -551.0327454216181  E_coul = 127.96553949692922
cycle= 1 E= -423.067205924689  delta_E= 1.71e-13  |g|= 1.71e-10  |ddm|= 3.21e-09
    CPU time for cycle= 1      0.20 sec, wall time      0.01 sec
E1 = -551.0327454216181  E_coul = 127.96553949692922
  HOMO = -6.52496148451042e-05  LUMO = 108.158474891397
  mo_energy =
[-1.08562240e+02 -1.18618736e+01 -1.18618736e+01 -1.18618736e+01
 -3.04498949e+00 -1.19305999e-01 -1.19305999e-01 -1.19305999e-01
 -6.52496148e-05  1.08158475e+02  5.79502039e+03  5.79502039e+03
  5.79502039e+03]
E1 = -551.0327454216302  E_coul = 127.96553949694206
Extra cycle  E= -423.067205924688  delta_E= 6.25e-13  |g|= 4.69e-12  |ddm|= 7.17e-11
    CPU time for scf_cycle      1.43 sec, wall time      0.11 sec
exp = [1.80904796e+01 9.55296685e+01 1.00023548e-09 2.91997835e+01
 7.50553146e+00 7.36616869e-04 2.69396473e+03]
grad_E = [ 1.97046238e+00 -4.78584353e-01 -8.30731285e+04  8.34108239e-01
 -3.88982438e-01 -7.02270908e+02  4.46290114e-06]
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
number_of_s_exps = 4
number_of_p_exps = 3

exps = np.zeros((number_of_s_exps+number_of_p_exps,2))
#exps[:, 0] = decaying_nums(5)

# S
exps[0,0] = 20.0
exps[1,0] = 9.5045827955887916e+01
exps[2,0] = 4.4881042475048387e+00 
exps[3,0] = 3.9799528004692630e-01
             
# P          
exps[3,0] = 3.0108199280832128e+01
exps[4,0] = 6.1393781325590453e+00
exps[5,0] = 4.8929328703550412e-01

basis =  str(number_of_s_exps)+"s"+str(number_of_p_exps)+"p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc21115.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 24
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 18 14:57:47 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35677784.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 32000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 32000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 32000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  1.00000008274e-09      1
[INPUT] 0    0    [1    /1   ]  108.454970148        1
[INPUT] 0    0    [1    /1   ]  1e-09                1
[INPUT] 0    0    [1    /1   ]  4.97871900451        1
[INPUT] 1    0    [1    /1   ]  42.9938279816        1
[INPUT] 1    0    [1    /1   ]  5.9848344935         1
[INPUT] 1    0    [1    /1   ]  2693.96510806        1

nuclear repulsion = 0
number of shells = 7
number of NR pGTOs = 13
number of NR cGTOs = 13
basis = {'Ar': [[0, [1.000000082740371e-09, 1.0]], [0, [108.45497014843313, 1.0]], [0, [1e-09, 1.0]], [0, [4.97871900451085, 1.0]], [1, [42.99382798164647, 1.0]], [1, [5.984834493501991, 1.0]], [1, [2693.9651080641015, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [1.00000008e-09]
bas 1, expnt(s) = [108.45497015]
bas 2, expnt(s) = [1.e-09]
bas 3, expnt(s) = [4.978719]
bas 4, expnt(s) = [42.99382798]
bas 5, expnt(s) = [5.98483449]
bas 6, expnt(s) = [2693.96510806]
CPU time:        42.94
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  1  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]
 [ 0  1  1  1  0 36 37  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.00000008e-09 4.49277895e-07 1.08454970e+02 8.49086857e+01
 1.00000000e-09 4.49277867e-07 4.97871900e+00 8.42079774e+00
 4.29938280e+01 3.21175224e+02 5.98483449e+00 2.73086086e+01
 2.69396511e+03 5.66205848e+04]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 9.925472570637412
cond(S) = 2172634129348019.0

WARN: Singularity detected in overlap matrix (condition number = 2.17e+15). SCF may be inaccurate and hard to converge.

E1 = -563.0046376168473  E_coul = 127.58436386208774
init E= -435.42027375476
    CPU time for initialize scf      7.29 sec, wall time      0.33 sec

WARN: HOMO 31.8691757388664 == LUMO 31.8691757388672

  mo_energy =
[-1.02361337e+02 -1.52121772e+01 -1.46220130e+01 -1.46220130e+01
 -1.46220130e+01 -4.08035057e-04  5.52799896e-02  3.18691757e+01
  3.18691757e+01  3.18691757e+01  5.80586346e+03  5.80586346e+03
  5.80586346e+03]
E1 = -580.5209793935416  E_coul = 16836272082.105999
cycle= 1 E= 16836271501.585  delta_E= 1.68e+10  |g|= 7.79  |ddm|= 1.8e+15
    CPU time for cycle= 1      0.25 sec, wall time      0.01 sec
diis-norm(errvec)=10.3393
diis-c [-106.90087756    1.        ]
  HOMO = 47.9738705073257  LUMO = 5830.0772000652
  mo_energy =
[-8.17548873e+01 -4.18602081e+00 -4.11900208e+00 -4.11900208e+00
 -3.58435881e+00 -1.12475280e-04  4.44978086e+01  4.44978086e+01
  4.79738705e+01  5.83007720e+03  5.83016993e+03  5.83016993e+03
  1.68362718e+10]
E1 = -583.4070122038547  E_coul = 384.6957238198385
cycle= 2 E= -198.711288384016  delta_E= -1.68e+10  |g|= 0.34  |ddm|= 1.8e+15
    CPU time for cycle= 2      0.07 sec, wall time      0.01 sec
diis-norm(errvec)=0.424449
diis-c [-1.80156509e-01 -6.03514573e-05  1.00006035e+00]

WARN: HOMO 52.8517798698192 == LUMO 52.8517798698202

  mo_energy =
[-1.01609354e+06 -7.10408944e+01 -6.52384697e-05  1.00424585e+00
  1.00424585e+00  1.00425175e+00  2.46854421e+00  5.28515710e+01
  5.28517799e+01  5.28517799e+01  5.84247256e+03  5.84247256e+03
  5.84247259e+03]
E1 = -577.3524916184339  E_coul = 21131239374.38896
cycle= 3 E= 21131238797.0365  delta_E= 2.11e+10  |g|= 2.27  |ddm|= 1.8e+15
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=3.00641
diis-c [-1.71383097e-01 -5.11043876e-05  9.69555113e-01  3.04959911e-02]
  HOMO = 52.6953383890471  LUMO = 5842.07397577437
  mo_energy =
[-7.13831184e+01 -6.67137254e-05  8.44240062e-01  8.45655711e-01
  8.45660693e-01  2.27645498e+00  5.25832734e+01  5.25834498e+01
  5.26953384e+01  5.84207398e+03  5.84207700e+03  5.84207703e+03
  6.43557672e+08]
E1 = -583.4068829342816  E_coul = 384.69558454744794
cycle= 4 E= -198.711298386834  delta_E= -2.11e+10  |g|= 0.0114  |ddm|= 1.8e+15
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.0141563
diis-c [-1.02552547e-04 -1.02780828e-05 -2.34250726e-02  4.03185701e-04
  1.02303216e+00]
  HOMO = 52.8492831392422  LUMO = 5842.46654655678
  mo_energy =
[-7.10459844e+01 -6.52603335e-05  1.00187634e+00  1.00189550e+00
  1.00189645e+00  2.46569245e+00  5.28477673e+01  5.28478033e+01
  5.28492831e+01  5.84246655e+03  5.84246659e+03  5.84246659e+03
  8.34676886e+06]
E1 = -583.4068781423612  E_coul = 384.69557974438817
cycle= 5 E= -198.711298397973  delta_E= -1.11e-08  |g|= 0.000167  |ddm|= 0.000858
    CPU time for cycle= 5      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.000189399
diis-c [-2.58125635e-13 -3.37245847e-10  5.48947284e-05 -5.31239181e-09
 -1.46952251e-02  1.01464034e+00]

WARN: HOMO 52.8512641318295 == LUMO 52.8512641330099

  mo_energy =
[-1.17935583e+02 -7.10415718e+01 -6.52413088e-05  1.00393879e+00
  1.00393879e+00  1.00393879e+00  2.46816924e+00  5.28512641e+01
  5.28512641e+01  5.28512641e+01  5.84247169e+03  5.84247169e+03
  5.84247169e+03]
E1 = -577.3524719221392  E_coul = 18554258996.78861
cycle= 6 E= 18554258419.4361  delta_E= 1.86e+10  |g|= 2.27  |ddm|= 1.8e+15
    CPU time for cycle= 6      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=3.00618
diis-c [-2.58112873e-13 -3.37392856e-10  5.48942072e-05 -5.31485989e-09
 -1.46952435e-02  1.01464036e+00 -1.58685967e-09]

WARN: HOMO 52.8512641411691 == LUMO 52.8512641458136

  mo_energy =
[-1.47433215e+02 -7.10415718e+01 -6.52413109e-05  1.00393880e+00
  1.00393880e+00  1.00393880e+00  2.46816925e+00  5.28512641e+01
  5.28512641e+01  5.28512641e+01  5.84247169e+03  5.84247169e+03
  5.84247169e+03]
E1 = -577.3524180861073  E_coul = 17695265537.588303
cycle= 7 E= 17695264960.2359  delta_E= -8.59e+08  |g|= 2.27  |ddm|= 4.48
    CPU time for cycle= 7      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=3.00618
diis-c [-2.55422472e-13 -2.38278831e-07  5.41666412e-05 -5.08677117e-09
 -1.46886355e-02  1.01463554e+00 -3.00680486e-09 -8.25979870e-07]

WARN: HOMO 52.8512734071943 == LUMO 52.8512734148275

  mo_energy =
[-1.87909391e+04 -7.10415600e+01 -6.52412657e-05  1.00394430e+00
  1.00394430e+00  1.00394437e+00  2.46817591e+00  5.28512696e+01
  5.28512734e+01  5.28512734e+01  5.84247170e+03  5.84247170e+03
  5.84247170e+03]
E1 = -577.3525584803385  E_coul = 21990232833.588562
cycle= 8 E= 21990232256.236  delta_E= 4.29e+09  |g|= 2.27  |ddm|= 4.78
    CPU time for cycle= 8      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=3.00619
diis-c [-2.55405480e-13 -2.38280028e-07  5.41666377e-05 -5.08677069e-09
 -1.46886354e-02  1.01463554e+00 -2.75785048e-07 -8.25984025e-07
  2.72777274e-07]

WARN: HOMO 52.8512734072529 == LUMO 52.8512734148863

  mo_energy =
[-1.78537952e+04 -7.10415600e+01 -6.52412648e-05  1.00394430e+00
  1.00394430e+00  1.00394437e+00  2.46817591e+00  5.28512696e+01
  5.28512734e+01  5.28512734e+01  5.84247170e+03  5.84247170e+03
  5.84247170e+03]
E1 = -577.3524619986285  E_coul = 18554258996.787975
cycle= 9 E= 18554258419.4355  delta_E= -3.44e+09  |g|= 2.27  |ddm|= 0.574
    CPU time for cycle= 9      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=3.00618
diis-c [-2.58094360e-13  2.60984281e-08  5.48948332e-05 -5.31842651e-09
 -1.46952510e-02  1.01464036e+00  3.41413694e-06  8.05603204e-10
 -3.44180538e-06]

WARN: HOMO 52.8512641311317 == LUMO 52.8512641398706

  mo_energy =
[-1.19532136e+04 -7.10415718e+01 -6.52413310e-05  1.00393879e+00
  1.00393879e+00  1.00393879e+00  2.46816925e+00  5.28512641e+01
  5.28512641e+01  5.28512641e+01  5.84247169e+03  5.84247169e+03
  5.84247169e+03]
E1 = -577.3525598732955  E_coul = 21990232833.588295
cycle= 10 E= 21990232256.2357  delta_E= 3.44e+09  |g|= 2.27  |ddm|= 3.91
    CPU time for cycle= 10      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=3.00619
diis-c [-2.64733482e-10  1.29709025e-04 -1.17922813e-05  9.36790685e-08
 -1.35204197e-02  1.01352103e+00  1.69337589e-02  1.11874174e-05
 -1.70635661e-02]

WARN: HOMO 52.8512687983802 == LUMO 52.8512696366623

  mo_energy =
[-5.86911588e+07 -7.10415652e+01 -6.52958771e-05  1.00394177e+00
  1.00394178e+00  1.00394180e+00  2.46817298e+00  5.28512670e+01
  5.28512688e+01  5.28512696e+01  5.84247169e+03  5.84247169e+03
  5.84247169e+03]
E1 = -577.3525675201153  E_coul = 21131239374.388237
cycle= 11 E= 21131238797.0357  delta_E= -8.59e+08  |g|= 2.27  |ddm|= 3.87
    CPU time for cycle= 11      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=3.00619
diis-c [-2.64733805e-10  1.29778907e-04 -1.17985174e-05  9.35106570e-08
 -1.35204227e-02  1.01352103e+00  1.69427243e-02  1.11936501e-05
 -1.70726013e-02]

WARN: HOMO 52.8512687995185 == LUMO 52.8512696370949

  mo_energy =
[-5.87222331e+07 -7.10415651e+01 -6.52959060e-05  1.00394177e+00
  1.00394178e+00  1.00394180e+00  2.46817297e+00  5.28512670e+01
  5.28512688e+01  5.28512696e+01  5.84247169e+03  5.84247169e+03
  5.84247169e+03]
E1 = -577.3524710383056  E_coul = 18554258996.788013
cycle= 12 E= 18554258419.4355  delta_E= -2.58e+09  |g|= 2.27  |ddm|= 0.573
    CPU time for cycle= 12      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=3.00618
diis-c [-3.47101138e-08  1.10796142e-03 -1.00672679e-04  3.30816127e-04
 -3.22193419e-04  9.99980802e-01  1.44612106e-01  1.05446555e-04
 -1.45714266e-01]

WARN: HOMO 52.8511140354593 == LUMO 52.8511255370186

  mo_energy =
[-4.99898178e+08 -7.10417885e+01 -6.57076645e-05  1.00383722e+00
  1.00383737e+00  1.00383741e+00  2.46804769e+00  5.28511111e+01
  5.28511140e+01  5.28511255e+01  5.84247143e+03  5.84247144e+03
  5.84247144e+03]
E1 = -577.3524928514165  E_coul = 18554258996.787704
cycle= 13 E= 18554258419.4352  delta_E= -0.000332  |g|= 2.27  |ddm|= 0.0185
    CPU time for cycle= 13      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=3.00611
diis-c [-1.34813082e-01 -1.56454487e+03  1.03187277e+02 -5.04011337e+05
  4.95892956e+05  8.12024938e+03 -1.47527719e+05 -1.03311898e+02
  1.49091520e+05]
  HOMO = 38.6269590581869  LUMO = 44.0516303271321
  mo_energy =
[-7.86090914e+14 -8.62526109e+01 -8.14801144e+00 -8.08255590e+00
 -8.06716248e+00 -6.01203754e+00 -5.99962411e-01  3.67145046e+01
  3.86269591e+01  4.40516303e+01  5.82899200e+03  5.82913892e+03
  5.82919091e+03]
E1 = -577.1283323712915  E_coul = 18554258996.59332
cycle= 14 E= 18554258419.465  delta_E= 0.0298  |g|= 2.84  |ddm|= 1.39
    CPU time for cycle= 14      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=3.76697
diis-c [-5.41489866e-01 -9.37279073e+01  1.04150280e-01 -1.08713990e+05
  1.06964900e+05  1.75211081e+03 -2.07270864e+00 -9.62671465e-02
  9.37721714e+01]
  HOMO = 42.7646403678516  LUMO = 45.8097113711938
  mo_energy =
[-2.79812625e+14 -8.33295201e+01 -5.38074880e+00 -5.35882275e+00
 -5.35878279e+00 -4.42707173e+00 -2.43351683e-01  4.27332423e+01
  4.27646404e+01  4.58097114e+01  5.82909541e+03  5.82917828e+03
  5.82917912e+03]
E1 = -578.0121034766231  E_coul = 18554258997.400192
cycle= 15 E= 18554258419.3881  delta_E= -0.0769  |g|= 0.479  |ddm|= 0.774
    CPU time for cycle= 15      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.631861
diis-c [-3.73544671e-03 -1.33163324e+00 -7.72560575e-04 -1.54546131e+03
  1.52015023e+03  2.48178683e+01  1.78701589e-01  1.31633079e+00
  1.33058279e+00]
  HOMO = 44.1745495184087  LUMO = 47.7799447970765
  mo_energy =
[-3.95950001e+12 -8.22075679e+01 -4.26813480e+00 -4.24550233e+00
 -4.24549844e+00 -3.74987912e+00 -3.56506033e-03  4.41720957e+01
  4.41745495e+01  4.77799448e+01  5.82953813e+03  5.82963625e+03
  5.82963631e+03]
E1 = -578.1733342234616  E_coul = 21131239375.159103
cycle= 16 E= 21131238796.9858  delta_E= 2.58e+09  |g|= 0.00988  |ddm|= 1.25
    CPU time for cycle= 16      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.0130733
diis-c [-2.00970849e-08  1.01529063e-06 -3.28075888e-06 -5.01705569e-03
  4.87344989e-03  6.30806913e-06 -2.56243278e-03 -4.95718649e-03
  1.00765918e+00]
  HOMO = 47.7986291605024  LUMO = 5829.54457517778
  mo_energy =
[-8.21919463e+01 -4.25192684e+00 -4.22954089e+00 -4.22954086e+00
 -3.74118683e+00 -1.09789132e-04  4.41984275e+01  4.41984430e+01
  4.77986292e+01  5.82954458e+03  5.82964255e+03  5.82964255e+03
  2.11380365e+10]
E1 = -583.4070198379261  E_coul = 384.69573263397973
cycle= 17 E= -198.711287203946  delta_E= -2.11e+10  |g|= 0.36  |ddm|= 1.8e+15
    CPU time for cycle= 17      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.448645
diis-c [-1.91164539e-08 -2.68682550e-04 -3.93224586e-06 -4.61676280e-03
  4.60659736e-03  3.23282433e-05 -2.43809931e-03 -6.52094402e-03
  1.00920950e+00]
  HOMO = 47.797284587501  LUMO = 5829.54110291464
  mo_energy =
[-8.21949490e+01 -4.25334546e+00 -4.23096530e+00 -4.23096528e+00
 -3.74284405e+00 -1.09799598e-04  4.41961193e+01  4.41961335e+01
  4.77972846e+01  5.82954110e+03  5.82963910e+03  5.82963910e+03
  2.11480462e+10]
E1 = -583.4070198730194  E_coul = 384.6957326750986
cycle= 18 E= -198.711287197921  delta_E= 6.03e-09  |g|= 0.36  |ddm|= 3.86e-05
    CPU time for cycle= 18      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.448766
diis-c [-1.84366005e-09  4.93240632e+02 -4.93109668e+02  3.18442254e-04
 -3.86152076e-05  3.32257288e-05 -9.76850026e-04 -1.41979412e-02
  8.83897462e-01]
  HOMO = 48.4574232205082  LUMO = 5831.23757127148
  mo_energy =
[-8.07266440e+01 -3.56068022e+00 -3.53638828e+00 -3.53638828e+00
 -2.93298154e+00 -1.03937516e-04  4.53239009e+01  4.53239009e+01
  4.84574232e+01  5.83123757e+03  5.83132271e+03  5.83132271e+03
  1.84029207e+10]
E1 = -583.4070025263751  E_coul = 384.69571258063195
cycle= 19 E= -198.711289945743  delta_E= -2.75e-06  |g|= 0.313  |ddm|= 9.05e-05
    CPU time for cycle= 19      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.389854
diis-c [-8.87762780e-11  3.70103118e+02 -3.71638070e+02  1.88003983e+00
  4.05677570e-04  6.69009819e-05 -8.75075637e-04 -1.10012346e-02
  6.66315348e-01]
  HOMO = 49.536439288254  LUMO = 5834.0055756634
  mo_energy =
[-7.83340144e+01 -2.43239665e+00 -2.40835727e+00 -2.40835727e+00
 -1.60847201e+00 -9.44045260e-05  4.71692617e+01  4.71692617e+01
  4.95364393e+01  5.83400558e+03  5.83406974e+03  5.83406974e+03
  1.38684811e+10]
E1 = -583.4069734076127  E_coul = 384.69567980825315
cycle= 20 E= -198.71129359936  delta_E= -3.65e-06  |g|= 0.236  |ddm|= 4.52e-05
    CPU time for cycle= 20      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.293754
Linear dependence found in DIIS error vectors.
diis-c [-6.64796139e-12  9.67106226e+00  6.34647602e+00 -2.92813926e+01
  1.43947706e+01 -1.14699279e-04  3.62185235e-04  1.13632396e-03
 -1.32300093e-01]

WARN: HOMO 53.9934818792078 == LUMO 53.9934818856632

  mo_energy =
[-2.76998933e+09 -6.95887505e+01 -5.94106521e-05  1.67966382e+00
  1.67966382e+00  1.68821308e+00  3.28801814e+00  5.35165413e+01
  5.39934819e+01  5.39934819e+01  5.84415123e+03  5.84415123e+03
  5.84416406e+03]
E1 = -577.1814183087866  E_coul = 16836272078.238708
cycle= 21 E= 16836271501.0573  delta_E= 1.68e+10  |g|= 2.71  |ddm|= 1.8e+15
    CPU time for cycle= 21      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=3.59478
Linear dependence found in DIIS error vectors.
diis-c [-7.18403397e-11  8.48477716e+00  6.36737636e+00 -2.73364333e+01
  1.35933534e+01 -1.19747698e-08  2.67397041e-04  6.90102628e-04
 -1.10031080e-01]

WARN: HOMO 53.8027685053495 == LUMO 53.8027685493711

  mo_energy =
[-2.30732756e+09 -6.98310254e+01 -6.03837161e-05  1.56706303e+00
  1.56706303e+00  1.57410699e+00  3.15111024e+00  5.34054819e+01
  5.38027685e+01  5.38027685e+01  5.84387101e+03  5.84387101e+03
  5.84388169e+03]
E1 = -577.209958224817  E_coul = 15977278619.063334
cycle= 22 E= 15977278041.8534  delta_E= -8.59e+08  |g|= 2.64  |ddm|= 3.93
    CPU time for cycle= 22      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=3.49728
diis-c [-1.82068832e-11  1.05420690e+02 -9.41202638e+01 -2.08652998e+01
  1.04705408e+01  3.07871180e-08 -4.55158332e-09 -2.03216972e-03
  9.63649805e-02]
  HOMO = 52.3724404369018  LUMO = 5841.25223604363
  mo_energy =
[-7.20894703e+01 -6.94412681e-05  5.10331883e-01  5.15770054e-01
  5.15770055e-01  1.87847654e+00  5.20294992e+01  5.20294993e+01
  5.23724404e+01  5.84125224e+03  5.84126148e+03  5.84126148e+03
  1.99860649e+09]
E1 = -583.4068923921332  E_coul = 384.695594093629
cycle= 23 E= -198.711298298504  delta_E= -1.6e+10  |g|= 0.0339  |ddm|= 1.8e+15
    CPU time for cycle= 23      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.0422961
diis-c [-3.34801278e-17 -2.76017537e-02  2.59595048e-02  3.74528659e-01
 -6.83223803e-01  2.64194356e-11  2.06885643e-11  1.31033742e+00
 -2.29383866e-08]

WARN: HOMO 52.8512642830547 == LUMO 52.8512642830758

  mo_energy =
[-4.83941271e+02 -7.10415716e+01 -6.52413166e-05  1.00393888e+00
  1.00393888e+00  1.00393888e+00  2.46816935e+00  5.28512642e+01
  5.28512643e+01  5.28512643e+01  5.84247169e+03  5.84247169e+03
  5.84247169e+03]
E1 = -577.3526733925647  E_coul = 16836272078.38842
cycle= 24 E= 16836271501.0357  delta_E= 1.68e+10  |g|= 2.27  |ddm|= 1.8e+15
    CPU time for cycle= 24      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=3.00618
diis-c [-6.80898561e-17 -2.85527243e-02  2.68279671e-02  3.74682324e-01
 -6.83303276e-01  7.02893351e-09  2.15374524e-11  1.31034571e+00
 -8.39065193e-09]

WARN: HOMO 52.8512640951122 == LUMO 52.8512640952045

  mo_energy =
[-7.10415718e+01 -2.25822199e+01 -6.52412614e-05  1.00393877e+00
  1.00393877e+00  1.00393877e+00  2.46816922e+00  5.28512641e+01
  5.28512641e+01  5.28512641e+01  5.84247169e+03  5.84247169e+03
  5.84247169e+03]
E1 = -577.3524804573811  E_coul = 15977278619.188215
cycle= 25 E= 15977278041.8357  delta_E= -8.59e+08  |g|= 2.27  |ddm|=  4.2
    CPU time for cycle= 25      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=3.00618
diis-c [-4.12356230e-17  3.72692069e-08  1.29947087e-05  3.71458091e-01
 -6.81642096e-01 -1.88296294e-07 -3.18792941e-08  1.31017097e+00
  2.25550391e-07]
  HOMO = 52.8512638476057  LUMO = 713.3361639096
  mo_energy =
[-7.10415723e+01 -6.52413237e-05  1.00393854e+00  1.00393854e+00
  1.00393854e+00  2.46816894e+00  5.28512637e+01  5.28512637e+01
  5.28512638e+01  7.13336164e+02  5.84247169e+03  5.84247169e+03
  5.84247169e+03]
E1 = -583.4068780797514  E_coul = 384.695579681769
cycle= 26 E= -198.711298397982  delta_E= -1.6e+10  |g|= 7.31e-05  |ddm|= 1.8e+15
    CPU time for cycle= 26      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=1.84896e-08
Linear dependence found in DIIS error vectors.
diis-c [-7.19780714e-17  3.85579800e-08  6.98719429e-01  1.11912781e-01
 -2.05358763e-01 -1.98340862e-07 -3.30333929e-08  3.94726509e-01
  2.37572026e-07]
  HOMO = 52.8512638364141  LUMO = 748.774329192805
  mo_energy =
[-7.10415724e+01 -6.52413232e-05  1.00393853e+00  1.00393853e+00
  1.00393853e+00  2.46816893e+00  5.28512637e+01  5.28512637e+01
  5.28512638e+01  7.48774329e+02  5.84247169e+03  5.84247169e+03
  5.84247169e+03]
E1 = -583.4068780797485  E_coul = 384.6955796817659
cycle= 27 E= -198.711298397983  delta_E= -1.71e-13  |g|= 7.31e-05  |ddm|= 0.463
    CPU time for cycle= 27      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=1.94177e-08
Linear dependence found in DIIS error vectors.
diis-c [ 3.10636092e-15  4.03966718e-08  5.00001961e-01  4.99990847e-01
 -1.23980596e-06 -2.09292684e-07 -3.46315279e-08  8.38489853e-06
  2.50684227e-07]
  HOMO = 52.8512638233631  LUMO = 788.990674407651
  mo_energy =
[-7.10415724e+01 -6.52413229e-05  1.00393852e+00  1.00393852e+00
  1.00393852e+00  2.46816891e+00  5.28512637e+01  5.28512637e+01
  5.28512638e+01  7.88990674e+02  5.84247169e+03  5.84247169e+03
  5.84247169e+03]
E1 = -583.4068780797444  E_coul = 384.69557968176264
cycle= 28 E= -198.711298397982  delta_E= 8.53e-13  |g|= 7.31e-05  |ddm|= 0.454
    CPU time for cycle= 28      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=2.04667e-08
Linear dependence found in DIIS error vectors.
diis-c [ 3.98122709e-16  4.15777362e-08  3.33333397e-01  3.33333394e-01
  3.33333391e-01 -2.15415600e-07 -3.56443457e-08 -2.31452787e-07
  2.58017633e-07]
  HOMO = 52.8512638157613  LUMO = 812.058984954526
  mo_energy =
[-7.10415724e+01 -6.52413230e-05  1.00393851e+00  1.00393851e+00
  1.00393851e+00  2.46816890e+00  5.28512637e+01  5.28512637e+01
  5.28512638e+01  8.12058985e+02  5.84247169e+03  5.84247169e+03
  5.84247169e+03]
E1 = -583.4068780797427  E_coul = 384.69557968176133
cycle= 29 E= -198.711298397981  delta_E= 3.98e-13  |g|= 7.31e-05  |ddm|= 0.231
    CPU time for cycle= 29      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=2.10611e-08
Linear dependence found in DIIS error vectors.
diis-c [ 6.06852826e-16  6.37130814e-09  2.50000088e-01  2.50000085e-01
  2.50000080e-01  2.50000078e-01 -5.30157553e-09 -3.32489282e-07
  4.88223254e-10]

WARN: HOMO 52.8512640710241 == LUMO 52.8512640742605

  mo_energy =
[-7.10415719e+01 -6.52413723e-05  1.00393875e+00  1.00393875e+00
  1.00393875e+00  2.46816920e+00  2.53113836e+01  5.28512641e+01
  5.28512641e+01  5.28512641e+01  5.84247169e+03  5.84247169e+03
  5.84247169e+03]
E1 = -577.3524889901646  E_coul = 16836272078.38828
cycle= 30 E= 16836271501.0358  delta_E= 1.68e+10  |g|= 2.27  |ddm|= 1.8e+15
    CPU time for cycle= 30      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=3.00618
Linear dependence found in DIIS error vectors.
diis-c [ 1.49556054e-16  2.40341027e-10  2.50000089e-01  2.50000085e-01
  2.50000081e-01  2.50000078e-01 -2.26173244e-11 -3.34023719e-07
  5.10084917e-10]

WARN: HOMO 52.8512640778452 == LUMO 52.851264078891

  mo_energy =
[-7.10415719e+01 -6.52414301e-05  1.00393876e+00  1.00393876e+00
  1.00393876e+00  2.46816920e+00  1.20472479e+01  5.28512641e+01
  5.28512641e+01  5.28512641e+01  5.84247169e+03  5.84247169e+03
  5.84247169e+03]
E1 = -577.352602530177  E_coul = 16836272078.38842
cycle= 31 E= 16836271501.0358  delta_E= 2.67e-05  |g|= 2.27  |ddm|= 3.47
    CPU time for cycle= 31      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=3.00618
Linear dependence found in DIIS error vectors.
diis-c [ 1.42240860e-16  4.06299076e-09  2.50000000e-01  2.50000000e-01
  2.50000000e-01  2.50000000e-01 -4.25574068e-09  1.78383674e-07
 -1.76670512e-07]

WARN: HOMO 52.8512640723271 == LUMO 52.8512640733718

  mo_energy =
[-7.10415719e+01 -6.52413805e-05  1.00393875e+00  1.00393875e+00
  1.00393875e+00  2.46816920e+00  2.21080816e+01  5.28512641e+01
  5.28512641e+01  5.28512641e+01  5.84247169e+03  5.84247169e+03
  5.84247169e+03]
E1 = -577.3527160718093  E_coul = 16836272078.388184
cycle= 32 E= 16836271501.0355  delta_E= -0.000351  |g|= 2.27  |ddm|= 0.185
    CPU time for cycle= 32      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=3.00619
Linear dependence found in DIIS error vectors.
diis-c [ 1.04475196e-15  6.98010275e-10  2.50000000e-01  2.50000000e-01
  2.50000000e-01  2.50000000e-01 -9.71975616e-11  6.43629407e-10
  2.76022623e-10]

WARN: HOMO 52.8512640723265 == LUMO 52.8512640733722

  mo_energy =
[-7.10415719e+01 -6.52413729e-05  1.00393875e+00  1.00393875e+00
  1.00393875e+00  2.46816920e+00  2.49995001e+01  5.28512641e+01
  5.28512641e+01  5.28512641e+01  5.84247169e+03  5.84247169e+03
  5.84247169e+03]
E1 = -577.3525598833506  E_coul = 17695265537.58781
cycle= 33 E= 17695264960.2353  delta_E= 8.59e+08  |g|= 2.27  |ddm|= 1.13
    CPU time for cycle= 33      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=3.00618
Linear dependence found in DIIS error vectors.
diis-c [ 1.88474672e-15  7.85216589e-07  2.50000000e-01  2.50000000e-01
  2.50000000e-01  2.50000000e-01  7.19335632e-10 -5.39005015e-07
 -2.45481251e-07]
  HOMO = 52.8512640740201  LUMO = 698.902869231867
  mo_energy =
[-7.10415719e+01 -6.52413260e-05  1.00393875e+00  1.00393875e+00
  1.00393875e+00  2.46816920e+00  5.28512641e+01  5.28512641e+01
  5.28512641e+01  6.98902869e+02  5.84247169e+03  5.84247169e+03
  5.84247169e+03]
E1 = -583.4068780797832  E_coul = 384.69557968179714
cycle= 34 E= -198.711298397986  delta_E= -1.77e+10  |g|= 7.31e-05  |ddm|= 1.8e+15
    CPU time for cycle= 34      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=6.32042e-10
Linear dependence found in DIIS error vectors.
diis-c [ 1.79663921e-15  6.11354329e-07  2.49999999e-01  2.50000000e-01
  2.50000000e-01  2.50000000e-01  5.58891735e-10 -4.19664114e-07
 -1.91124789e-07]
  HOMO = 52.8512640761294  LUMO = 544.078693206471
  mo_energy =
[-7.10415719e+01 -6.52413258e-05  1.00393876e+00  1.00393876e+00
  1.00393876e+00  2.46816920e+00  5.28512641e+01  5.28512641e+01
  5.28512641e+01  5.44078693e+02  5.84247169e+03  5.84247169e+03
  5.84247169e+03]
E1 = -583.4068780798071  E_coul = 384.69557968181897
cycle= 35 E= -198.711298397988  delta_E= -2.16e-12  |g|= 7.31e-05  |ddm|= 4.51
    CPU time for cycle= 35      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=4.91361e-10
Linear dependence found in DIIS error vectors.
diis-c [ 2.59332867e-16  4.24010425e-07  2.50000000e-01  2.50000000e-01
  2.50000000e-01  2.50000000e-01  3.88177630e-10 -2.91062523e-07
 -1.32556975e-07]
  HOMO = 52.8512640783736  LUMO = 377.339270599043
  mo_energy =
[-7.10415719e+01 -6.52413261e-05  1.00393876e+00  1.00393876e+00
  1.00393876e+00  2.46816920e+00  5.28512641e+01  5.28512641e+01
  5.28512641e+01  3.77339271e+02  5.84247169e+03  5.84247169e+03
  5.84247169e+03]
E1 = -583.4068780798535  E_coul = 384.69557968186103
cycle= 36 E= -198.711298397992  delta_E= -4.32e-12  |g|= 7.31e-05  |ddm|= 11.3
    CPU time for cycle= 36      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=3.39633e-10
Linear dependence found in DIIS error vectors.
diis-c [ 1.52251801e-15  2.26447705e-07  2.50000000e-01  2.50000000e-01
  2.50000000e-01  2.50000000e-01  2.06973123e-10 -1.55450267e-07
 -7.07921361e-08]
  HOMO = 52.8512640807559  LUMO = 201.458038909586
  mo_energy =
[-7.10415719e+01 -6.52413281e-05  1.00393876e+00  1.00393876e+00
  1.00393876e+00  2.46816921e+00  5.28512641e+01  5.28512641e+01
  5.28512641e+01  2.01458039e+02  5.84247169e+03  5.84247169e+03
  5.84247169e+03]
E1 = -583.4068780799879  E_coul = 384.69557968198325
cycle= 37 E= -198.711298398005  delta_E= -1.22e-11  |g|= 7.31e-05  |ddm|= 49.5
    CPU time for cycle= 37      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=1.80529e-10
Linear dependence found in DIIS error vectors.
diis-c [ 3.66055852e-16  1.79926281e-08  2.50000000e-01  2.50000000e-01
  2.50000000e-01  2.50000000e-01  1.78167359e-11 -1.23535491e-08
 -5.62585996e-09]

WARN: HOMO 52.8512640832198 == LUMO 52.8512640832362

  mo_energy =
[-7.10415719e+01 -6.52414034e-05  1.00393876e+00  1.00393876e+00
  1.00393876e+00  2.46816921e+00  1.59778692e+01  5.28512641e+01
  5.28512641e+01  5.28512641e+01  5.84247169e+03  5.84247169e+03
  5.84247169e+03]
E1 = -577.3526195885667  E_coul = 21131239374.388615
cycle= 38 E= 21131238797.036  delta_E= 2.11e+10  |g|= 2.27  |ddm|= 1.8e+15
    CPU time for cycle= 38      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=3.00619
Linear dependence found in DIIS error vectors.
diis-c [ 3.17509770e-15  7.99012959e-08  2.50000000e-01  2.50000000e-01
  2.50000000e-01  2.50000000e-01  7.92237919e-11 -5.49788139e-08
 -2.49775228e-08]
  HOMO = 52.8512640832967  LUMO = 69.3819097592031
  mo_energy =
[-7.10415719e+01 -6.52413396e-05  1.00393876e+00  1.00393876e+00
  1.00393876e+00  2.46816921e+00  5.28512641e+01  5.28512641e+01
  5.28512641e+01  6.93819098e+01  5.84247169e+03  5.84247169e+03
  5.84247169e+03]
E1 = -583.4068780805385  E_coul = 384.6955796824832
cycle= 39 E= -198.711298398055  delta_E= -2.11e+10  |g|= 7.31e-05  |ddm|= 1.8e+15
    CPU time for cycle= 39      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=1.24877e-11
Linear dependence found in DIIS error vectors.
diis-c [ 1.16357941e-16  2.04133179e-11  2.00000000e-01  2.00000000e-01
  2.00000000e-01  2.00000000e-01  7.27724813e-12  2.00000000e-01
 -1.26257027e-11]

WARN: HOMO 52.8512640833194 == LUMO 52.8512640833709

  mo_energy =
[-7.10415719e+01 -6.52456997e-05  3.03430760e-01  1.00393876e+00
  1.00393876e+00  1.00393876e+00  2.46816921e+00  5.28512641e+01
  5.28512641e+01  5.28512641e+01  5.84247169e+03  5.84247169e+03
  5.84247169e+03]
E1 = -577.3527587179327  E_coul = 21990232833.588295
cycle= 40 E= 21990232256.2355  delta_E= 2.2e+10  |g|= 2.27  |ddm|= 1.8e+15
    CPU time for cycle= 40      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=3.00618
Linear dependence found in DIIS error vectors.
diis-c [ 7.33548660e-16  1.77639338e-10  2.00000000e-01  2.00000000e-01
  2.00000000e-01  2.00000000e-01  1.75211859e-10  2.00000000e-01
 -3.27350976e-10]

WARN: HOMO 52.8512640832663 == LUMO 52.8512640832785

  mo_energy =
[-7.10415719e+01 -3.51690098e-01 -6.52375344e-05  1.00393876e+00
  1.00393876e+00  1.00393876e+00  2.46816921e+00  5.28512641e+01
  5.28512641e+01  5.28512641e+01  5.84247169e+03  5.84247169e+03
  5.84247169e+03]
E1 = -577.3525684113418  E_coul = 21131239374.38874
cycle= 41 E= 21131238797.0362  delta_E= -8.59e+08  |g|= 2.27  |ddm|=  2.3
    CPU time for cycle= 41      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=3.00619
Linear dependence found in DIIS error vectors.
diis-c [ 5.52211295e-16  7.78003900e-12  2.00000000e-01  2.00000000e-01
  2.00000000e-01  2.00000000e-01  8.01969538e-12  2.00000000e-01
 -1.11514009e-12]

WARN: HOMO 52.8512640833234 == LUMO 52.8512640833736

  mo_energy =
[-7.10415719e+01 -6.52456018e-05  3.10358250e-01  1.00393876e+00
  1.00393876e+00  1.00393876e+00  2.46816921e+00  5.28512641e+01
  5.28512641e+01  5.28512641e+01  5.84247169e+03  5.84247169e+03
  5.84247169e+03]
E1 = -577.3525939999369  E_coul = 21990232833.588184
cycle= 42 E= 21990232256.2356  delta_E= 8.59e+08  |g|= 2.27  |ddm|= 0.94
    CPU time for cycle= 42      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=3.00618
Linear dependence found in DIIS error vectors.
diis-c [ 3.75012547e-15  2.04682251e-10 -3.72169646e-10  2.50000000e-01
  2.50000000e-01  2.50000000e-01  2.10700287e-10  2.50000000e-01
 -2.40771786e-11]

WARN: HOMO 52.8512640833152 == LUMO 52.8512640833223

  mo_energy =
[-7.10415719e+01 -6.52616304e-05  6.53814592e-02  1.00393876e+00
  1.00393876e+00  1.00393876e+00  2.46816921e+00  5.28512641e+01
  5.28512641e+01  5.28512641e+01  5.84247169e+03  5.84247169e+03
  5.84247169e+03]
E1 = -577.3525060477782  E_coul = 16836272078.387892
cycle= 43 E= 16836271501.0354  delta_E= -5.15e+09  |g|= 2.27  |ddm|= 1.13
    CPU time for cycle= 43      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=3.00618
Linear dependence found in DIIS error vectors.
diis-c [-9.99740870e-16  2.27025974e-10  3.59166379e-11 -1.64485439e-09
  3.33333333e-01  3.33333333e-01  8.22263431e-11  3.33333333e-01
  1.31650384e-09]

WARN: HOMO 52.8512640833338 == LUMO 52.8512640833362

  mo_energy =
[-7.10415719e+01 -6.52414707e-05  1.00393876e+00  1.00393876e+00
  1.00393876e+00  2.46816921e+00  8.58363705e+00  5.28512641e+01
  5.28512641e+01  5.28512641e+01  5.84247169e+03  5.84247169e+03
  5.84247169e+03]
E1 = -577.3527160702555  E_coul = 16836272078.38856
cycle= 44 E= 16836271501.0358  delta_E= 0.000458  |g|= 2.27  |ddm|= 1.52
    CPU time for cycle= 44      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=3.00618
Linear dependence found in DIIS error vectors.
diis-c [-4.82242653e-15  2.17790439e-10  1.09592586e-11 -1.88093079e-09
 -4.28108618e-11  5.00000000e-01  1.35134828e-10  5.00000000e-01
  1.57021575e-09]

WARN: HOMO 52.8512640833845 == LUMO 52.8512640833881

  mo_energy =
[-7.10415719e+01 -6.52414495e-05  1.00393876e+00  1.00393876e+00
  1.00393876e+00  2.46816921e+00  9.84252377e+00  5.28512641e+01
  5.28512641e+01  5.28512641e+01  5.84247169e+03  5.84247169e+03
  5.84247169e+03]
E1 = -577.3524804591605  E_coul = 15977278619.188175
cycle= 45 E= 15977278041.8357  delta_E= -8.59e+08  |g|= 2.27  |ddm|= 1.45
    CPU time for cycle= 45      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=3.00618
diis-c [ 1.59817301e-21  5.91071777e-07 -4.80658961e-07 -3.71714541e-06
 -1.85824573e-07 -4.78690363e-07  3.60490440e-07  1.00000000e+00
  3.91075460e-06]
  HOMO = 52.8512640835685  LUMO = 5842.47168605526
  mo_energy =
[-7.10415719e+01 -6.52412959e-05  1.00393876e+00  1.00393876e+00
  1.00393876e+00  2.46816921e+00  5.28512641e+01  5.28512641e+01
  5.28512641e+01  5.84247169e+03  5.84247169e+03  5.84247169e+03
  2.21766626e+04]
E1 = -583.4068780796636  E_coul = 384.6955796816886
cycle= 46 E= -198.711298397975  delta_E= -1.6e+10  |g|= 7.31e-05  |ddm|= 1.8e+15
    CPU time for cycle= 46      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=7.56736e-12
Linear dependence found in DIIS error vectors.
diis-c [ 5.83267387e-16  2.45896053e-12  8.89103375e-12 -3.63606070e-11
  1.69954282e-12  7.29806381e-12  5.00000000e-01  5.00000000e-01
  1.66771443e-11]

WARN: HOMO 52.8512640834503 == LUMO 52.8512640834513

  mo_energy =
[-7.10415719e+01 -6.52501852e-05  1.49902932e-01  1.00393876e+00
  1.00393876e+00  1.00393876e+00  2.46816921e+00  5.28512641e+01
  5.28512641e+01  5.28512641e+01  5.84247169e+03  5.84247169e+03
  5.84247169e+03]
E1 = -577.3527075407017  E_coul = 21990232833.58856
cycle= 47 E= 21990232256.2359  delta_E= 2.2e+10  |g|= 2.27  |ddm|= 1.8e+15
    CPU time for cycle= 47      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=3.00618
diis-c [-2.02817390e-22  2.04441186e-07 -1.44178077e-08 -7.75213358e-07
  9.24248426e-08 -2.19124922e-08  1.00000000e+00 -1.99346309e-08
  5.34611645e-07]
  HOMO = 52.851264083452  LUMO = 3475.19637509135
  mo_energy =
[-7.10415719e+01 -6.52413177e-05  1.00393876e+00  1.00393876e+00
  1.00393876e+00  2.46816921e+00  5.28512641e+01  5.28512641e+01
  5.28512641e+01  3.47519638e+03  5.84247169e+03  5.84247169e+03
  5.84247169e+03]
E1 = -583.4068780796777  E_coul = 384.6955796817014
cycle= 48 E= -198.711298397976  delta_E= -2.2e+10  |g|= 7.31e-05  |ddm|= 1.8e+15
    CPU time for cycle= 48      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=6.30674e-12
Linear dependence found in DIIS error vectors.
diis-c [-2.14886223e-15 -3.78450559e-12  2.83725061e-12  1.67226515e-12
 -2.32935054e-12  1.19679664e-12  5.00000000e-01  5.44234668e-13
  5.00000000e-01]

WARN: HOMO 52.8512640834315 == LUMO 52.8512640834316

  mo_energy =
[-7.10415719e+01 -6.58659419e-05  2.06419239e-03  1.00393876e+00
  1.00393876e+00  1.00393876e+00  2.46816921e+00  5.28512641e+01
  5.28512641e+01  5.28512641e+01  5.84247169e+03  5.84247169e+03
  5.84247169e+03]
E1 = -577.3525684113155  E_coul = 21131239374.388134
cycle= 49 E= 21131238797.0356  delta_E= 2.11e+10  |g|= 2.27  |ddm|= 1.8e+15
    CPU time for cycle= 49      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=3.00619
Linear dependence found in DIIS error vectors.
diis-c [-4.30853578e-18  1.34462892e-13  5.64585900e-13 -1.98493169e-12
  4.76451701e-13  1.01209965e-12  5.00000000e-01 -7.25168565e-14
  5.00000000e-01]

WARN: HOMO 52.8512640834303 == LUMO 52.8512640834311

  mo_energy =
[-7.10415719e+01 -6.55652040e-05  4.04143072e-03  1.00393876e+00
  1.00393876e+00  1.00393876e+00  2.46816921e+00  5.28512641e+01
  5.28512641e+01  5.28512641e+01  5.84247169e+03  5.84247169e+03
  5.84247169e+03]
E1 = -577.3524378114657  E_coul = 17695265537.588184
cycle= 50 E= 17695264960.2357  delta_E= -3.44e+09  |g|= 2.27  |ddm|= 3.22
    CPU time for cycle= 50      0.01 sec, wall time      0.01 sec
E1 = -577.3524378114657  E_coul = 17695265537.588184

WARN: 	An extra scf cycle is going to be run
	in order to restore the mo_energy derivatives
	missing in implicit differentiation.

  HOMO = 47.7473524257326  LUMO = 5829.40538905655
  mo_energy =
[-8.23066782e+01 -4.26475181e+00 -4.25910731e+00 -4.25910731e+00
 -3.78238324e+00 -1.17098023e-04  4.41191709e+01  4.41191709e+01
  4.77473524e+01  5.82940539e+03  5.82950472e+03  5.82950472e+03
  1.76952653e+10]
E1 = -583.4070217261165  E_coul = 384.6957348196477
Extra cycle  E= -198.711286906469  delta_E= -1.77e+10  |g|= 0.365  |ddm|= 1.8e+15
    CPU time for scf_cycle      8.33 sec, wall time      1.08 sec
exp = [1.00000008e-09 1.08454970e+02 1.00000000e-09 4.97871900e+00
 4.29938280e+01 5.98483449e+00 2.69396511e+03]
E = -198.71128690646873
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
number_of_s_exps = 4
number_of_p_exps = 3

exps = np.zeros((number_of_s_exps+number_of_p_exps,2))
#exps[:, 0] = decaying_nums(5)

# S
exps[0,0] = 20.0
exps[1,0] = 9.5045827955887916e+01
exps[2,0] = 4.4881042475048387e+00 
exps[3,0] = 3.9799528004692630e-01
             
# P          
exps[3,0] = 3.0108199280832128e+01
exps[4,0] = 6.1393781325590453e+00
exps[5,0] = 4.8929328703550412e-01

basis =  str(number_of_s_exps)+"s"+str(number_of_p_exps)+"p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc21115.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 24
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 18 14:57:48 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35677784.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 32000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 32000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 32000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  9.49594138158        1
[INPUT] 0    0    [1    /1   ]  101.670301663        1
[INPUT] 0    0    [1    /1   ]  1.00012360418e-09      1
[INPUT] 0    0    [1    /1   ]  17.692688638         1
[INPUT] 1    0    [1    /1   ]  24.3655333722        1
[INPUT] 1    0    [1    /1   ]  2.84369927001        1
[INPUT] 1    0    [1    /1   ]  2693.96491116        1

nuclear repulsion = 0
number of shells = 7
number of NR pGTOs = 13
number of NR cGTOs = 13
basis = {'Ar': [[0, [9.495941381579168, 1.0]], [0, [101.67030166283028, 1.0]], [0, [1.0001236041816891e-09, 1.0]], [0, [17.6926886380022, 1.0]], [1, [24.365533372216806, 1.0]], [1, [2.84369927000528, 1.0]], [1, [2693.9649111642384, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [9.49594138]
bas 1, expnt(s) = [101.67030166]
bas 2, expnt(s) = [1.0001236e-09]
bas 3, expnt(s) = [17.69268864]
bas 4, expnt(s) = [24.36553337]
bas 5, expnt(s) = [2.84369927]
bas 6, expnt(s) = [2693.96491116]
CPU time:        51.37
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  1  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]
 [ 0  1  1  1  0 36 37  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 9.49594138e+00 1.36668536e+01 1.01670302e+02 8.08929379e+01
 1.00012360e-09 4.49319516e-07 1.76926886e+01 2.17951770e+01
 2.43655334e+01 1.57926240e+02 2.84369927e+00 1.07730574e+01
 2.69396491e+03 5.66205796e+04]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 10.411129352445908
cond(S) = 51.774098684195565
E1 = -566.8748909562623  E_coul = 134.34294311650987
init E= -432.531947839752
    CPU time for initialize scf      5.33 sec, wall time      0.25 sec
  HOMO = 6.37952013260317  LUMO = 55.2332407626445
  mo_energy =
[-1.07694273e+02 -1.34230881e+01 -1.28800255e+01 -1.28800255e+01
 -1.28800255e+01 -3.82976693e-04  6.37952013e+00  6.37952013e+00
  6.37952013e+00  5.52332408e+01  5.79930345e+03  5.79930345e+03
  5.79930345e+03]
E1 = -684.2382597853713  E_coul = 297.0175589705446
cycle= 1 E= -387.220700814827  delta_E= 45.3  |g|= 5.04  |ddm|= 4.82
    CPU time for cycle= 1      0.23 sec, wall time      0.01 sec
diis-norm(errvec)=2.19163
diis-c [-4.80324338  1.        ]
  HOMO = 17.8551904579823  LUMO = 69.9708380420896
  mo_energy =
[-8.94924455e+01 -2.74496544e+00 -2.74496544e+00 -2.74496544e+00
 -1.01275791e+00 -6.52453487e-05  1.78551905e+01  1.78551905e+01
  1.78551905e+01  6.99708380e+01  5.81871064e+03  5.81871064e+03
  5.81871064e+03]
E1 = -683.387393487115  E_coul = 296.01744569708853
cycle= 2 E= -387.369947790026  delta_E= -0.149  |g|= 0.107  |ddm|= 1.12
    CPU time for cycle= 2      0.10 sec, wall time      0.01 sec
diis-norm(errvec)=0.0387076
diis-c [-0.00103433 -0.00992669  1.00992669]
  HOMO = 17.7789767721625  LUMO = 69.9111094498641
  mo_energy =
[-8.96753103e+01 -2.76845671e+00 -2.76845671e+00 -2.76845671e+00
 -1.03745359e+00 -6.52453487e-05  1.77789768e+01  1.77789768e+01
  1.77789768e+01  6.99111094e+01  5.81828300e+03  5.81828300e+03
  5.81828300e+03]
E1 = -683.3651686190249  E_coul = 295.99514436548407
cycle= 3 E= -387.370024253541  delta_E= -7.65e-05  |g|= 0.00161  |ddm|= 0.0275
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.000679523
diis-c [-1.51176077e-07  2.56114539e-04 -1.67247683e-02  1.01646865e+00]
  HOMO = 17.7780397675729  LUMO = 69.9103402016106
  mo_energy =
[-8.96774932e+01 -2.76877114e+00 -2.76877114e+00 -2.76877114e+00
 -1.03774254e+00 -6.52453487e-05  1.77780398e+01  1.77780398e+01
  1.77780398e+01  6.99103402e+01  5.81827886e+03  5.81827886e+03
  5.81827886e+03]
E1 = -683.3648576562083  E_coul = 295.99483338434084
cycle= 4 E= -387.370024271867  delta_E= -1.83e-08  |g|= 2.65e-05  |ddm|= 0.00042
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=1.20794e-05
diis-c [-7.57089539e-15 -3.15105414e-07  6.91773946e-05 -2.01097394e-02
  1.02004088e+00]
  HOMO = 17.778024565414  LUMO = 69.9103288786246
  mo_energy =
[-8.96775291e+01 -2.76877638e+00 -2.76877638e+00 -2.76877638e+00
 -1.03774821e+00 -6.52453487e-05  1.77780246e+01  1.77780246e+01
  1.77780246e+01  6.99103289e+01  5.81827879e+03  5.81827879e+03
  5.81827879e+03]
E1 = -683.3648526488438  E_coul = 295.994828376971
cycle= 5 E= -387.370024271873  delta_E= -5.34e-12  |g|= 2.41e-10  |ddm|= 6.88e-06
    CPU time for cycle= 5      0.01 sec, wall time      0.01 sec
E1 = -683.3648526488438  E_coul = 295.994828376971
  HOMO = 17.7780245656542  LUMO = 69.9103288780658
  mo_energy =
[-8.96775291e+01 -2.76877638e+00 -2.76877638e+00 -2.76877638e+00
 -1.03774821e+00 -6.52453487e-05  1.77780246e+01  1.77780246e+01
  1.77780246e+01  6.99103289e+01  5.81827879e+03  5.81827879e+03
  5.81827879e+03]
E1 = -683.3648526488241  E_coul = 295.9948283769515
Extra cycle  E= -387.370024271873  delta_E= 1.71e-13  |g|= 7.84e-12  |ddm|= 3.49e-11
    CPU time for scf_cycle      5.70 sec, wall time      0.31 sec
exp = [9.49594138e+00 1.01670302e+02 1.00012360e-09 1.76926886e+01
 2.43655334e+01 2.84369927e+00 2.69396491e+03]
E = -387.37002427187264
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
number_of_s_exps = 4
number_of_p_exps = 3

exps = np.zeros((number_of_s_exps+number_of_p_exps,2))
#exps[:, 0] = decaying_nums(5)

# S
exps[0,0] = 20.0
exps[1,0] = 9.5045827955887916e+01
exps[2,0] = 4.4881042475048387e+00 
exps[3,0] = 3.9799528004692630e-01
             
# P          
exps[3,0] = 3.0108199280832128e+01
exps[4,0] = 6.1393781325590453e+00
exps[5,0] = 4.8929328703550412e-01

basis =  str(number_of_s_exps)+"s"+str(number_of_p_exps)+"p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc21115.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 24
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 18 14:57:49 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35677784.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 32000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 32000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 32000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  13.8673793897        1
[INPUT] 0    0    [1    /1   ]  98.5469928194        1
[INPUT] 0    0    [1    /1   ]  1.00018050512e-09      1
[INPUT] 0    0    [1    /1   ]  23.545539647         1
[INPUT] 1    0    [1    /1   ]  15.7900344492        1
[INPUT] 1    0    [1    /1   ]  1.39768382463        1
[INPUT] 1    0    [1    /1   ]  2693.96482052        1

nuclear repulsion = 0
number of shells = 7
number of NR pGTOs = 13
number of NR cGTOs = 13
basis = {'Ar': [[0, [13.867379389727517, 1.0]], [0, [98.54699281940084, 1.0]], [0, [1.0001805051245389e-09, 1.0]], [0, [23.545539646955906, 1.0]], [1, [15.790034449151719, 1.0]], [1, [1.3976838246266987, 1.0]], [1, [2693.9648205217723, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [13.86737939]
bas 1, expnt(s) = [98.54699282]
bas 2, expnt(s) = [1.00018051e-09]
bas 3, expnt(s) = [23.54553965]
bas 4, expnt(s) = [15.79003445]
bas 5, expnt(s) = [1.39768382]
bas 6, expnt(s) = [2693.96482052]
CPU time:        57.13
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  1  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]
 [ 0  1  1  1  0 36 37  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.38673794e+01 1.81556090e+01 9.85469928e+01 7.90219162e+01
 1.00018051e-09 4.49338688e-07 2.35455396e+01 2.70051448e+01
 1.57900344e+01 9.18254868e+01 1.39768382e+00 4.43348830e+00
 2.69396482e+03 5.66205773e+04]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 12.012385975068835
cond(S) = 93.84097116114326
E1 = -576.4263251604037  E_coul = 152.60443025093858
init E= -423.821894909465
    CPU time for initialize scf      0.19 sec, wall time      0.02 sec
  HOMO = -0.000302176641402095  LUMO = 85.558120107886
  mo_energy =
[-1.05591467e+02 -1.01668533e+01 -1.01668533e+01 -1.01668533e+01
 -6.56302831e+00 -9.93065372e-01 -9.93065372e-01 -9.93065372e-01
 -3.02176641e-04  8.55581201e+01  5.79898931e+03  5.79898931e+03
  5.79898931e+03]
E1 = -677.5129616833725  E_coul = 243.9376065577053
cycle= 1 E= -433.575355125667  delta_E= -9.75  |g|= 1.34  |ddm|= 5.13
    CPU time for cycle= 1      0.21 sec, wall time      0.01 sec
diis-norm(errvec)=0.715887
diis-c [-0.5124941  1.       ]
  HOMO = 4.31398803250635  LUMO = 94.3110953623801
  mo_energy =
[-9.57721052e+01 -4.19600304e+00 -4.19600304e+00 -4.19600304e+00
 -6.52472101e-05  5.95690073e-01  4.31398803e+00  4.31398803e+00
  4.31398803e+00  9.43110954e+01  5.80945435e+03  5.80945435e+03
  5.80945435e+03]
E1 = -677.3809369085274  E_coul = 243.79813154544584
cycle= 2 E= -433.582805363082  delta_E= -0.00745  |g|= 0.026  |ddm|= 0.333
    CPU time for cycle= 2      0.15 sec, wall time      0.01 sec
diis-norm(errvec)=0.0112257
diis-c [-4.74021090e-05 -1.25412772e-02  1.01254128e+00]
  HOMO = 4.30760839158936  LUMO = 94.298797818999
  mo_energy =
[-9.58073612e+01 -4.19988292e+00 -4.19988292e+00 -4.19988292e+00
 -6.52472101e-05  5.91036037e-01  4.30760839e+00  4.30760839e+00
  4.30760839e+00  9.42987978e+01  5.80936192e+03  5.80936192e+03
  5.80936192e+03]
E1 = -677.377951804429  E_coul = 243.7951433042458
cycle= 3 E= -433.582808500183  delta_E= -3.14e-06  |g|= 0.00023  |ddm|= 0.00751
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=5.63305e-05
diis-c [-1.03625519e-09  6.88178254e-05 -6.67264166e-03  1.00660382e+00]
  HOMO = 4.30755072022662  LUMO = 94.2986927964636
  mo_energy =
[-9.58076584e+01 -4.19991949e+00 -4.19991949e+00 -4.19991949e+00
 -6.52472101e-05  5.90992332e-01  4.30755072e+00  4.30755072e+00
  4.30755072e+00  9.42986928e+01  5.80936127e+03  5.80936127e+03
  5.80936127e+03]
E1 = -677.3779238342664  E_coul = 243.7951153337994
cycle= 4 E= -433.582808500467  delta_E= -2.84e-10  |g|= 3.58e-06  |ddm|= 7.69e-05
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
E1 = -677.3779238342664  E_coul = 243.7951153337994
  HOMO = 4.30754988806528  LUMO = 94.2986913856606
  mo_energy =
[-9.58076626e+01 -4.19992003e+00 -4.19992003e+00 -4.19992003e+00
 -6.52472101e-05  5.90991654e-01  4.30754989e+00  4.30754989e+00
  4.30754989e+00  9.42986914e+01  5.80936126e+03  5.80936126e+03
  5.80936126e+03]
E1 = -677.3779234245198  E_coul = 243.79511492405254
Extra cycle  E= -433.582808500467  delta_E= -2.84e-13  |g|= 8.57e-08  |ddm|= 1.18e-06
    CPU time for scf_cycle      0.58 sec, wall time      0.07 sec
exp = [1.38673794e+01 9.85469928e+01 1.00018051e-09 2.35455396e+01
 1.57900344e+01 1.39768382e+00 2.69396482e+03]
E = -433.5828085004673
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
number_of_s_exps = 4
number_of_p_exps = 3

exps = np.zeros((number_of_s_exps+number_of_p_exps,2))
#exps[:, 0] = decaying_nums(5)

# S
exps[0,0] = 20.0
exps[1,0] = 9.5045827955887916e+01
exps[2,0] = 4.4881042475048387e+00 
exps[3,0] = 3.9799528004692630e-01
             
# P          
exps[3,0] = 3.0108199280832128e+01
exps[4,0] = 6.1393781325590453e+00
exps[5,0] = 4.8929328703550412e-01

basis =  str(number_of_s_exps)+"s"+str(number_of_p_exps)+"p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc21115.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 24
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 18 14:57:49 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35677784.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 32000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 32000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 32000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  15.9564606777        1
[INPUT] 0    0    [1    /1   ]  97.0543841974        1
[INPUT] 0    0    [1    /1   ]  1.00020769771e-09      1
[INPUT] 0    0    [1    /1   ]  26.342578402         1
[INPUT] 1    0    [1    /1   ]  11.6918602782        1
[INPUT] 1    0    [1    /1   ]  0.706642614983       1
[INPUT] 1    0    [1    /1   ]  2693.9647772         1

nuclear repulsion = 0
number of shells = 7
number of NR pGTOs = 13
number of NR cGTOs = 13
basis = {'Ar': [[0, [15.956460677681756, 1.0]], [0, [97.05438419744436, 1.0]], [0, [1.0002076977084788e-09, 1.0]], [0, [26.342578401982973, 1.0]], [1, [11.691860278168708, 1.0]], [1, [0.7066426149830161, 1.0]], [1, [2693.964777204337, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [15.95646068]
bas 1, expnt(s) = [97.0543842]
bas 2, expnt(s) = [1.0002077e-09]
bas 3, expnt(s) = [26.3425784]
bas 4, expnt(s) = [11.69186028]
bas 5, expnt(s) = [0.70664261]
bas 6, expnt(s) = [2693.9647772]
CPU time:        57.74
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  1  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]
 [ 0  1  1  1  0 36 37  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.59564607e+01 2.01705365e+01 9.70543842e+01 7.81225468e+01
 1.00020770e-09 4.49347851e-07 2.63425784e+01 2.93770874e+01
 1.16918603e+01 6.30723356e+01 7.06642615e-01 1.89009735e+00
 2.69396478e+03 5.66205761e+04]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 14.120584966605175
cond(S) = 120.23586109174806
E1 = -587.7377592295426  E_coul = 162.02040290764583
init E= -425.717356321897
    CPU time for initialize scf      0.19 sec, wall time      0.02 sec
  HOMO = -0.000195784392842328  LUMO = 98.8184171371552
  mo_energy =
[-1.05363058e+02 -9.00081530e+00 -9.00081530e+00 -9.00081530e+00
 -2.79418802e+00 -2.22580607e+00 -2.22580607e+00 -2.22580607e+00
 -1.95784393e-04  9.88184171e+01  5.79824963e+03  5.79824963e+03
  5.79824963e+03]
E1 = -649.8657442846616  E_coul = 206.65947432720216
cycle= 1 E= -443.206269957459  delta_E= -17.5  |g|= 0.593  |ddm|= 6.08
    CPU time for cycle= 1      0.21 sec, wall time      0.01 sec
diis-norm(errvec)=0.447879
diis-c [-0.20059543  1.        ]
  HOMO = 0.506467051840819  LUMO = 103.454166200412
  mo_energy =
[-1.00158295e+02 -5.68745325e+00 -5.68745325e+00 -5.68745325e+00
 -5.19865205e-01 -5.19865205e-01 -5.19865205e-01 -6.52480988e-05
  5.06467052e-01  1.03454166e+02  5.80408510e+03  5.80408510e+03
  5.80408510e+03]
E1 = -649.8383029062111  E_coul = 206.63111537569603
cycle= 2 E= -443.207187530515  delta_E= -0.000918  |g|= 0.0101  |ddm|= 0.0745
    CPU time for cycle= 2      0.15 sec, wall time      0.01 sec
diis-norm(errvec)=0.0067238
diis-c [-1.57500146e-05 -1.22677307e-02  1.01226773e+00]
  HOMO = 0.505583318895865  LUMO = 103.450842786163
  mo_energy =
[-1.00167437e+02 -5.68854889e+00 -5.68854889e+00 -5.68854889e+00
 -5.20214810e-01 -5.20214810e-01 -5.20214810e-01 -6.52480988e-05
  5.05583319e-01  1.03450843e+02  5.80405373e+03  5.80405373e+03
  5.80405373e+03]
E1 = -649.8377506875096  E_coul = 206.63056286345346
cycle= 3 E= -443.207187824056  delta_E= -2.94e-07  |g|= 5.8e-05  |ddm|= 0.00152
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=3.48894e-05
diis-c [-5.40193990e-12  1.56037120e-05 -6.01753176e-03  1.00600193e+00]
  HOMO = 0.505576197498385  LUMO = 103.450820009075
  mo_energy =
[-1.00167500e+02 -5.68855752e+00 -5.68855752e+00 -5.68855752e+00
 -5.20217498e-01 -5.20217498e-01 -5.20217498e-01 -6.52480988e-05
  5.05576197e-01  1.03450820e+02  5.80405353e+03  5.80405353e+03
  5.80405353e+03]
E1 = -649.8377465166186  E_coul = 206.63055869255172
cycle= 4 E= -443.207187824067  delta_E= -1.07e-11  |g|= 3.06e-07  |ddm|= 1.29e-05
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
E1 = -649.8377465166186  E_coul = 206.63055869255172
  HOMO = 0.505576139929003  LUMO = 103.450819892145
  mo_energy =
[-1.00167500e+02 -5.68855758e+00 -5.68855758e+00 -5.68855758e+00
 -5.20217517e-01 -5.20217517e-01 -5.20217517e-01 -6.52480988e-05
  5.05576140e-01  1.03450820e+02  5.80405353e+03  5.80405353e+03
  5.80405353e+03]
E1 = -649.8377464875059  E_coul = 206.63055866343933
Extra cycle  E= -443.207187824067  delta_E= 2.84e-13  |g|= 7.03e-09  |ddm|= 1.14e-07
    CPU time for scf_cycle      0.58 sec, wall time      0.07 sec
exp = [1.59564607e+01 9.70543842e+01 1.00020770e-09 2.63425784e+01
 1.16918603e+01 7.06642615e-01 2.69396478e+03]
E = -443.2071878240666
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
number_of_s_exps = 4
number_of_p_exps = 3

exps = np.zeros((number_of_s_exps+number_of_p_exps,2))
#exps[:, 0] = decaying_nums(5)

# S
exps[0,0] = 20.0
exps[1,0] = 9.5045827955887916e+01
exps[2,0] = 4.4881042475048387e+00 
exps[3,0] = 3.9799528004692630e-01
             
# P          
exps[3,0] = 3.0108199280832128e+01
exps[4,0] = 6.1393781325590453e+00
exps[5,0] = 4.8929328703550412e-01

basis =  str(number_of_s_exps)+"s"+str(number_of_p_exps)+"p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc21115.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 24
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 18 14:57:49 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35677784.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 32000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 32000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 32000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  16.979120047         1
[INPUT] 0    0    [1    /1   ]  96.3237136387        1
[INPUT] 0    0    [1    /1   ]  1.00022100918e-09      1
[INPUT] 0    0    [1    /1   ]  27.7118012779        1
[INPUT] 1    0    [1    /1   ]  9.68569793442        1
[INPUT] 1    0    [1    /1   ]  0.36836005428        1
[INPUT] 1    0    [1    /1   ]  2693.964756          1

nuclear repulsion = 0
number of shells = 7
number of NR pGTOs = 13
number of NR cGTOs = 13
basis = {'Ar': [[0, [16.979120046969367, 1.0]], [0, [96.32371363870415, 1.0]], [0, [1.000221009182236e-09, 1.0]], [0, [27.71180127788652, 1.0]], [1, [9.685697934417885, 1.0]], [1, [0.36836005427998, 1.0]], [1, [2693.964755999332, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [16.97912005]
bas 1, expnt(s) = [96.32371364]
bas 2, expnt(s) = [1.00022101e-09]
bas 3, expnt(s) = [27.71180128]
bas 4, expnt(s) = [9.68569793]
bas 5, expnt(s) = [0.36836005]
bas 6, expnt(s) = [2693.964756]
CPU time:        58.36
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  1  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]
 [ 0  1  1  1  0 36 37  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.69791200e+01 2.11325258e+01 9.63237136e+01 7.76810233e+01
 1.00022101e-09 4.49352336e-07 2.77118013e+01 3.05150152e+01
 9.68569793e+00 4.98480350e+01 3.68360054e-01 8.37191968e-01
 2.69396476e+03 5.66205756e+04]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 14.730885701672726
cond(S) = 135.09364816994892
E1 = -572.3105116305344  E_coul = 149.74002156054752
init E= -422.570490069987
    CPU time for initialize scf      0.19 sec, wall time      0.02 sec
  HOMO = -0.000164984900316654  LUMO = 103.295007386317
  mo_energy =
[-1.07175179e+02 -1.00991570e+01 -1.00991570e+01 -1.00991570e+01
 -2.42746992e+00 -2.25612770e+00 -2.25612770e+00 -2.25612770e+00
 -1.64984900e-04  1.03295007e+02  5.79601676e+03  5.79601676e+03
  5.79601676e+03]
E1 = -623.6009361207964  E_coul = 181.82998781527508
cycle= 1 E= -441.770948305521  delta_E= -19.2  |g|= 0.507  |ddm|= 6.89
    CPU time for cycle= 1      0.21 sec, wall time      0.01 sec
diis-norm(errvec)=0.403139
diis-c [-0.1625208  1.       ]
  HOMO = -6.5248494474155e-05  LUMO = 106.949646904721
  mo_energy =
[-1.03025983e+02 -7.49242145e+00 -7.49242145e+00 -7.49242145e+00
 -1.46192294e+00 -1.46192294e+00 -1.46192294e+00 -8.16768532e-02
 -6.52484945e-05  1.06949647e+02  5.80085966e+03  5.80085966e+03
  5.80085966e+03]
E1 = -623.5955058362205  E_coul = 181.823992111043
cycle= 2 E= -441.771513725177  delta_E= -0.000565  |g|= 0.0086  |ddm|= 0.0196
    CPU time for cycle= 2      0.14 sec, wall time      0.01 sec
diis-norm(errvec)=0.00596538
diis-c [-1.20676518e-05 -1.21763911e-02  1.01217639e+00]
  HOMO = -6.52484944602866e-05  LUMO = 106.94840618632
  mo_energy =
[-1.03029155e+02 -7.49239317e+00 -7.49239317e+00 -7.49239317e+00
 -1.46192423e+00 -1.46192423e+00 -1.46192423e+00 -8.16246904e-02
 -6.52484945e-05  1.06948406e+02  5.80084186e+03  5.80084186e+03
  5.80084186e+03]
E1 = -623.595437761556  E_coul = 181.82392385626574
cycle= 3 E= -441.77151390529  delta_E= -1.8e-07  |g|= 5.27e-05  |ddm|= 0.000459
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=3.53513e-05
diis-c [-2.65079284e-12  7.55749508e-06 -6.36794849e-03  1.00636039e+00]
  HOMO = -6.52484944402423e-05  LUMO = 106.948402672067
  mo_energy =
[-1.03029163e+02 -7.49239079e+00 -7.49239079e+00 -7.49239079e+00
 -1.46192414e+00 -1.46192414e+00 -1.46192414e+00 -8.16224512e-02
 -6.52484944e-05  1.06948403e+02  5.80084177e+03  5.80084177e+03
  5.80084177e+03]
E1 = -623.595438250066  E_coul = 181.82392434476867
cycle= 4 E= -441.771513905297  delta_E= -7.05e-12  |g|= 2.25e-07  |ddm|= 6.31e-06
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
E1 = -623.595438250066  E_coul = 181.82392434476867
  HOMO = -6.52484944477982e-05  LUMO = 106.948402757105
  mo_energy =
[-1.03029162e+02 -7.49239075e+00 -7.49239075e+00 -7.49239075e+00
 -1.46192414e+00 -1.46192414e+00 -1.46192414e+00 -8.16224087e-02
 -6.52484944e-05  1.06948403e+02  5.80084177e+03  5.80084177e+03
  5.80084177e+03]
E1 = -623.5954382695444  E_coul = 181.82392436424777
Extra cycle  E= -441.771513905297  delta_E= 6.82e-13  |g|= 5.1e-09  |ddm|= 8.91e-08
    CPU time for scf_cycle      0.58 sec, wall time      0.07 sec
exp = [1.69791200e+01 9.63237136e+01 1.00022101e-09 2.77118013e+01
 9.68569793e+00 3.68360054e-01 2.69396476e+03]
E = -441.7715139052966
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
number_of_s_exps = 4
number_of_p_exps = 3

exps = np.zeros((number_of_s_exps+number_of_p_exps,2))
#exps[:, 0] = decaying_nums(5)

# S
exps[0,0] = 20.0
exps[1,0] = 9.5045827955887916e+01
exps[2,0] = 4.4881042475048387e+00 
exps[3,0] = 3.9799528004692630e-01
             
# P          
exps[3,0] = 3.0108199280832128e+01
exps[4,0] = 6.1393781325590453e+00
exps[5,0] = 4.8929328703550412e-01

basis =  str(number_of_s_exps)+"s"+str(number_of_p_exps)+"p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc21115.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 24
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 18 14:57:49 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35677784.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 32000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 32000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 32000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  17.4922250659        1
[INPUT] 0    0    [1    /1   ]  95.957109917         1
[INPUT] 0    0    [1    /1   ]  1.00022768803e-09      1
[INPUT] 0    0    [1    /1   ]  28.3987896835        1
[INPUT] 1    0    [1    /1   ]  8.67913406943        1
[INPUT] 1    0    [1    /1   ]  0.198631516198       1
[INPUT] 1    0    [1    /1   ]  2693.96474536        1

nuclear repulsion = 0
number of shells = 7
number of NR pGTOs = 13
number of NR cGTOs = 13
basis = {'Ar': [[0, [17.492225065873953, 1.0]], [0, [95.9571099169619, 1.0]], [0, [1.0002276880278019e-09, 1.0]], [0, [28.398789683531778, 1.0]], [1, [8.679134069430264, 1.0]], [1, [0.19863151619839323, 1.0]], [1, [2693.9647453600173, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [17.49222507]
bas 1, expnt(s) = [95.95710992]
bas 2, expnt(s) = [1.00022769e-09]
bas 3, expnt(s) = [28.39878968]
bas 4, expnt(s) = [8.67913407]
bas 5, expnt(s) = [0.19863152]
bas 6, expnt(s) = [2693.96474536]
CPU time:        58.98
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  1  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]
 [ 0  1  1  1  0 36 37  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.74922251e+01 2.16097039e+01 9.59571099e+01 7.74591797e+01
 1.00022769e-09 4.49354586e-07 2.83987897e+01 3.10806360e+01
 8.67913407e+00 4.34590160e+01 1.98631516e-01 3.86851771e-01
 2.69396475e+03 5.66205753e+04]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 13.527401515307847
cond(S) = 143.10078361092818
E1 = -543.5788817028458  E_coul = 128.74175801582604
init E= -414.83712368702
    CPU time for initialize scf      0.19 sec, wall time      0.02 sec
  HOMO = -0.00022572336727598  LUMO = 104.126619675666
  mo_energy =
[-1.09474556e+02 -1.18875477e+01 -1.18875477e+01 -1.18875477e+01
 -3.52374376e+00 -2.33254093e+00 -2.33254093e+00 -2.33254093e+00
 -2.25723367e-04  1.04126620e+02  5.79352437e+03  5.79352437e+03
  5.79352437e+03]
E1 = -603.4057263828041  E_coul = 165.41043695709877
cycle= 1 E= -437.995289425705  delta_E= -23.2  |g|= 0.498  |ddm|= 7.41
    CPU time for cycle= 1      0.21 sec, wall time      0.01 sec
diis-norm(errvec)=0.388333
diis-c [-0.1508029  1.       ]
  HOMO = -6.5248743392773e-05  LUMO = 108.261672794391
  mo_energy =
[-1.04848586e+02 -8.82638007e+00 -8.82638007e+00 -8.82638007e+00
 -1.41323621e+00 -1.41323621e+00 -1.41323621e+00 -7.25193112e-01
 -6.52487434e-05  1.08261673e+02  5.79888980e+03  5.79888980e+03
  5.79888980e+03]
E1 = -603.4050818154019  E_coul = 165.40924868141315
cycle= 2 E= -437.995833133989  delta_E= -0.000544  |g|= 0.00856  |ddm|= 0.0354
    CPU time for cycle= 2      0.15 sec, wall time      0.01 sec
diis-norm(errvec)=0.00569073
diis-c [-1.09910218e-05 -1.20546558e-02  1.01205466e+00]
  HOMO = -6.52487433906069e-05  LUMO = 108.260931155745
  mo_energy =
[-1.04850338e+02 -8.82609300e+00 -8.82609300e+00 -8.82609300e+00
 -1.41323434e+00 -1.41323434e+00 -1.41323434e+00 -7.24914743e-01
 -6.52487434e-05  1.08260931e+02  5.79887535e+03  5.79887535e+03
  5.79887535e+03]
E1 = -603.4051141308697  E_coul = 165.4092808155449
cycle= 3 E= -437.995833315325  delta_E= -1.81e-07  |g|= 5.72e-05  |ddm|= 0.000876
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=3.49164e-05
diis-c [-4.96588726e-12  6.26734635e-06 -6.50777546e-03  1.00650151e+00]
  HOMO = -6.52487433931798e-05  LUMO = 108.260932003955
  mo_energy =
[-1.04850332e+02 -8.82608841e+00 -8.82608841e+00 -8.82608841e+00
 -1.41323430e+00 -1.41323430e+00 -1.41323430e+00 -7.24910308e-01
 -6.52487434e-05  1.08260932e+02  5.79887529e+03  5.79887529e+03
  5.79887529e+03]
E1 = -603.4051155174892  E_coul = 165.4092822021558
cycle= 4 E= -437.995833315333  delta_E= -8.58e-12  |g|= 3.15e-07  |ddm|= 1.1e-05
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
E1 = -603.4051155174892  E_coul = 165.4092822021558
  HOMO = -6.52487433863495e-05  LUMO = 108.260932121923
  mo_energy =
[-1.04850332e+02 -8.82608835e+00 -8.82608835e+00 -8.82608835e+00
 -1.41323430e+00 -1.41323430e+00 -1.41323430e+00 -7.24910248e-01
 -6.52487434e-05  1.08260932e+02  5.79887529e+03  5.79887529e+03
  5.79887529e+03]
E1 = -603.4051155433613  E_coul = 165.40928222802742
Extra cycle  E= -437.995833315334  delta_E= -3.98e-13  |g|= 7.1e-09  |ddm|= 1.29e-07
    CPU time for scf_cycle      0.58 sec, wall time      0.07 sec
exp = [1.74922251e+01 9.59571099e+01 1.00022769e-09 2.83987897e+01
 8.67913407e+00 1.98631516e-01 2.69396475e+03]
E = -437.9958333153338
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
number_of_s_exps = 4
number_of_p_exps = 3

exps = np.zeros((number_of_s_exps+number_of_p_exps,2))
#exps[:, 0] = decaying_nums(5)

# S
exps[0,0] = 20.0
exps[1,0] = 9.5045827955887916e+01
exps[2,0] = 4.4881042475048387e+00 
exps[3,0] = 3.9799528004692630e-01
             
# P          
exps[3,0] = 3.0108199280832128e+01
exps[4,0] = 6.1393781325590453e+00
exps[5,0] = 4.8929328703550412e-01

basis =  str(number_of_s_exps)+"s"+str(number_of_p_exps)+"p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc21115.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 24
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 18 14:57:49 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35677784.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 32000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 32000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 32000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  17.4922250659        1
[INPUT] 0    0    [1    /1   ]  95.957109917         1
[INPUT] 0    0    [1    /1   ]  1.00022768803e-09      1
[INPUT] 0    0    [1    /1   ]  28.3987896835        1
[INPUT] 1    0    [1    /1   ]  8.67913406943        1
[INPUT] 1    0    [1    /1   ]  0.198631516198       1
[INPUT] 1    0    [1    /1   ]  2693.96474536        1

nuclear repulsion = 0
number of shells = 7
number of NR pGTOs = 13
number of NR cGTOs = 13
basis = {'Ar': [[0, [17.492225065873953, 1.0]], [0, [95.9571099169619, 1.0]], [0, [1.0002276880278019e-09, 1.0]], [0, [28.398789683531778, 1.0]], [1, [8.679134069430264, 1.0]], [1, [0.19863151619839323, 1.0]], [1, [2693.9647453600173, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [17.49222507]
bas 1, expnt(s) = [95.95710992]
bas 2, expnt(s) = [1.00022769e-09]
bas 3, expnt(s) = [28.39878968]
bas 4, expnt(s) = [8.67913407]
bas 5, expnt(s) = [0.19863152]
bas 6, expnt(s) = [2693.96474536]
CPU time:        59.59
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  1  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]
 [ 0  1  1  1  0 36 37  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.74922251e+01 2.16097039e+01 9.59571099e+01 7.74591797e+01
 1.00022769e-09 4.49354586e-07 2.83987897e+01 3.10806360e+01
 8.67913407e+00 4.34590160e+01 1.98631516e-01 3.86851771e-01
 2.69396475e+03 5.66205753e+04]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 13.527401515307847
cond(S) = 143.10078361092818
E1 = -543.5788817028458  E_coul = 128.74175801582604
init E= -414.83712368702
    CPU time for initialize scf      0.19 sec, wall time      0.02 sec
  HOMO = -0.00022572336727598  LUMO = 104.126619675666
  mo_energy =
[-1.09474556e+02 -1.18875477e+01 -1.18875477e+01 -1.18875477e+01
 -3.52374376e+00 -2.33254093e+00 -2.33254093e+00 -2.33254093e+00
 -2.25723367e-04  1.04126620e+02  5.79352437e+03  5.79352437e+03
  5.79352437e+03]
E1 = -603.4057263828041  E_coul = 165.41043695709877
cycle= 1 E= -437.995289425705  delta_E= -23.2  |g|= 0.498  |ddm|= 7.41
    CPU time for cycle= 1      0.21 sec, wall time      0.01 sec
diis-norm(errvec)=0.388333
diis-c [-0.1508029  1.       ]
  HOMO = -6.5248743392773e-05  LUMO = 108.261672794391
  mo_energy =
[-1.04848586e+02 -8.82638007e+00 -8.82638007e+00 -8.82638007e+00
 -1.41323621e+00 -1.41323621e+00 -1.41323621e+00 -7.25193112e-01
 -6.52487434e-05  1.08261673e+02  5.79888980e+03  5.79888980e+03
  5.79888980e+03]
E1 = -603.4050818154019  E_coul = 165.40924868141315
cycle= 2 E= -437.995833133989  delta_E= -0.000544  |g|= 0.00856  |ddm|= 0.0354
    CPU time for cycle= 2      0.15 sec, wall time      0.01 sec
diis-norm(errvec)=0.00569073
diis-c [-1.09910218e-05 -1.20546558e-02  1.01205466e+00]
  HOMO = -6.52487433906069e-05  LUMO = 108.260931155745
  mo_energy =
[-1.04850338e+02 -8.82609300e+00 -8.82609300e+00 -8.82609300e+00
 -1.41323434e+00 -1.41323434e+00 -1.41323434e+00 -7.24914743e-01
 -6.52487434e-05  1.08260931e+02  5.79887535e+03  5.79887535e+03
  5.79887535e+03]
E1 = -603.4051141308697  E_coul = 165.4092808155449
cycle= 3 E= -437.995833315325  delta_E= -1.81e-07  |g|= 5.72e-05  |ddm|= 0.000876
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=3.49164e-05
diis-c [-4.96588726e-12  6.26734635e-06 -6.50777546e-03  1.00650151e+00]
  HOMO = -6.52487433931798e-05  LUMO = 108.260932003955
  mo_energy =
[-1.04850332e+02 -8.82608841e+00 -8.82608841e+00 -8.82608841e+00
 -1.41323430e+00 -1.41323430e+00 -1.41323430e+00 -7.24910308e-01
 -6.52487434e-05  1.08260932e+02  5.79887529e+03  5.79887529e+03
  5.79887529e+03]
E1 = -603.4051155174892  E_coul = 165.4092822021558
cycle= 4 E= -437.995833315333  delta_E= -8.58e-12  |g|= 3.15e-07  |ddm|= 1.1e-05
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
E1 = -603.4051155174892  E_coul = 165.4092822021558
  HOMO = -6.52487433863495e-05  LUMO = 108.260932121923
  mo_energy =
[-1.04850332e+02 -8.82608835e+00 -8.82608835e+00 -8.82608835e+00
 -1.41323430e+00 -1.41323430e+00 -1.41323430e+00 -7.24910248e-01
 -6.52487434e-05  1.08260932e+02  5.79887529e+03  5.79887529e+03
  5.79887529e+03]
E1 = -603.4051155433613  E_coul = 165.40928222802742
Extra cycle  E= -437.995833315334  delta_E= -3.98e-13  |g|= 7.1e-09  |ddm|= 1.29e-07
    CPU time for scf_cycle      0.57 sec, wall time      0.07 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 143.10078361092818
E1 = -603.4051155433613  E_coul = 165.40928222802742
init E= -437.995833315334
    CPU time for initialize scf      1.13 sec, wall time      0.05 sec
  HOMO = -6.52487433862643e-05  LUMO = 108.260932124504
  mo_energy =
[-1.04850332e+02 -8.82608835e+00 -8.82608835e+00 -8.82608835e+00
 -1.41323430e+00 -1.41323430e+00 -1.41323430e+00 -7.24910247e-01
 -6.52487434e-05  1.08260932e+02  5.79887529e+03  5.79887529e+03
  5.79887529e+03]
E1 = -603.4051155439356  E_coul = 165.40928222860154
cycle= 1 E= -437.995833315334  delta_E= -2.27e-13  |g|= 1.6e-10  |ddm|= 2.89e-09
    CPU time for cycle= 1      0.20 sec, wall time      0.01 sec
E1 = -603.4051155439356  E_coul = 165.40928222860154
  HOMO = -6.52487433858957e-05  LUMO = 108.260932124562
  mo_energy =
[-1.04850332e+02 -8.82608835e+00 -8.82608835e+00 -8.82608835e+00
 -1.41323430e+00 -1.41323430e+00 -1.41323430e+00 -7.24910247e-01
 -6.52487434e-05  1.08260932e+02  5.79887529e+03  5.79887529e+03
  5.79887529e+03]
E1 = -603.4051155439483  E_coul = 165.40928222861427
Extra cycle  E= -437.995833315334  delta_E=    0  |g|= 3.5e-12  |ddm|= 6.5e-11
    CPU time for scf_cycle      1.43 sec, wall time      0.11 sec
exp = [1.74922251e+01 9.59571099e+01 1.00022769e-09 2.83987897e+01
 8.67913407e+00 1.98631516e-01 2.69396475e+03]
grad_E = [ 1.96772970e+00 -4.79385171e-01 -8.30716089e+04  8.28891254e-01
  5.13901967e-01 -2.49571547e+01  6.24910247e-06]
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
number_of_s_exps = 4
number_of_p_exps = 3

exps = np.zeros((number_of_s_exps+number_of_p_exps,2))
#exps[:, 0] = decaying_nums(5)

# S
exps[0,0] = 20.0
exps[1,0] = 9.5045827955887916e+01
exps[2,0] = 4.4881042475048387e+00 
exps[3,0] = 3.9799528004692630e-01
             
# P          
exps[3,0] = 3.0108199280832128e+01
exps[4,0] = 6.1393781325590453e+00
exps[5,0] = 4.8929328703550412e-01

basis =  str(number_of_s_exps)+"s"+str(number_of_p_exps)+"p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc21115.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 24
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 18 14:57:52 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35677784.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 32000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 32000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 32000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  66.366094772         1
[INPUT] 0    0    [1    /1   ]  83.5653832814        1
[INPUT] 0    0    [1    /1   ]  136.403863536        1
[INPUT] 0    0    [1    /1   ]  51.7543961546        1
[INPUT] 1    0    [1    /1   ]  1.00000008274e-09      1
[INPUT] 1    0    [1    /1   ]  1e-09                1
[INPUT] 1    0    [1    /1   ]  2693.96435466        1

nuclear repulsion = 0
number of shells = 7
number of NR pGTOs = 13
number of NR cGTOs = 13
basis = {'Ar': [[0, [66.36609477204922, 1.0]], [0, [83.56538328135348, 1.0]], [0, [136.40386353566802, 1.0]], [0, [51.75439615463807, 1.0]], [1, [1.000000082740371e-09, 1.0]], [1, [1e-09, 1.0]], [1, [2693.9643546587663, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [66.36609477]
bas 1, expnt(s) = [83.56538328]
bas 2, expnt(s) = [136.40386354]
bas 3, expnt(s) = [51.75439615]
bas 4, expnt(s) = [1.00000008e-09]
bas 5, expnt(s) = [1.e-09]
bas 6, expnt(s) = [2693.96435466]
CPU time:        64.24
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  1  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]
 [ 0  1  1  1  0 36 37  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 6.63660948e+01 5.87455158e+01 8.35653833e+01 6.98288406e+01
 1.36403864e+02 1.00840509e+02 5.17543962e+01 4.87500941e+01
 1.00000008e-09 1.64053099e-11 1.00000000e-09 1.64053082e-11
 2.69396435e+03 5.66205650e+04]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 2.7946204516720172
cond(S) = 1947003805194046.0

WARN: Singularity detected in overlap matrix (condition number = 1.95e+15). SCF may be inaccurate and hard to converge.

E1 = -265.40705849335734  E_coul = 19.14341496499543
init E= -246.263643528362
    CPU time for initialize scf      7.40 sec, wall time      0.34 sec
  HOMO = 221.461480017894  LUMO = 543.833085032679
  mo_energy =
[-1.37405994e+02 -7.42200470e-04 -7.42200470e-04 -7.42200470e-04
 -3.18283246e-04 -3.18283245e-04 -3.18283245e-04  6.93984383e+00
  2.21461480e+02  5.43833085e+02  5.77662446e+03  5.77662446e+03
  5.77662446e+03]
E1 = 94.3028117888263  E_coul = 87.14690105800842
cycle= 1 E= 181.449712846835  delta_E=  428  |g|= 3.43  |ddm|= 1.73e+15
    CPU time for cycle= 1      0.26 sec, wall time      0.01 sec
diis-norm(errvec)=0.288573
diis-c [-0.08327426  1.        ]
  HOMO = 232.818955028663  LUMO = 562.104613257278
  mo_energy =
[-1.17334688e+02 -7.42200470e-04 -7.42200469e-04 -7.42200468e-04
 -3.18283246e-04 -3.18283245e-04 -3.18283245e-04  1.88083925e+01
  2.32818955e+02  5.62104613e+02  5.80365394e+03  5.80365394e+03
  5.80365394e+03]
E1 = 94.40419118335755  E_coul = 87.02772029959105
cycle= 2 E= 181.431911482949  delta_E= -0.0178  |g|= 0.0411  |ddm|=  248
    CPU time for cycle= 2      0.03 sec, wall time      0.01 sec
diis-norm(errvec)=0.00342893
diis-c [-1.31618014e-08 -1.20184336e-02  1.01201843e+00]
  HOMO = 232.808022706728  LUMO = 562.087674737963
  mo_energy =
[-1.17372419e+02 -7.42200470e-04 -7.42200470e-04 -7.42200470e-04
 -3.18283245e-04 -3.18283245e-04 -3.18283245e-04  1.87966403e+01
  2.32808023e+02  5.62087675e+02  5.80355454e+03  5.80355454e+03
  5.80355454e+03]
E1 = 94.40552542697729  E_coul = 87.02628243181435
cycle= 3 E= 181.431807858792  delta_E= -0.000104  |g|= 1.04e-05  |ddm|= 3.29
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=9.98895e-07
diis-c [-2.15896131e-17  1.04809100e-04 -8.85199760e-03  1.00874719e+00]
  HOMO = 232.808023716638  LUMO = 562.087672267704
  mo_energy =
[-1.17372420e+02 -7.42200470e-04 -7.42200468e-04 -7.42200468e-04
 -3.18283245e-04 -3.18283245e-04 -3.18283244e-04  1.87966397e+01
  2.32808024e+02  5.62087672e+02  5.80355454e+03  5.80355454e+03
  5.80355454e+03]
E1 = 94.4055949919513  E_coul = 87.02628211294619
cycle= 4 E= 181.431877104897  delta_E= 6.92e-05  |g|= 5.13e-07  |ddm|= 0.437
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=2.91965e-09
Linear dependence found in DIIS error vectors.
diis-c [-6.74534483e-16  5.20271705e-05 -4.39381356e-03  4.99967999e-01
  5.04373787e-01]
  HOMO = 232.808023644765  LUMO = 562.087672087642
  mo_energy =
[-1.17372420e+02 -7.42200470e-04 -7.42200470e-04 -7.42200469e-04
 -3.18283246e-04 -3.18283245e-04 -3.18283245e-04  1.87966397e+01
  2.32808024e+02  5.62087672e+02  5.80355454e+03  5.80355454e+03
  5.80355454e+03]
E1 = 94.40560352176907  E_coul = 87.02628217450378
cycle= 5 E= 181.431885696273  delta_E= 8.59e-06  |g|= 9.64e-08  |ddm|= 0.617
    CPU time for cycle= 5      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=8.27617e-10
Linear dependence found in DIIS error vectors.
diis-c [-3.99997935e-16  3.46011139e-05 -2.92219854e-03  3.32342498e-01
  3.35271159e-01  3.35273941e-01]
  HOMO = 232.808023635052  LUMO = 562.087672058762
  mo_energy =
[-1.17372420e+02 -7.42200471e-04 -7.42200470e-04 -7.42200468e-04
 -3.18283248e-04 -3.18283245e-04 -3.18283245e-04  1.87966397e+01
  2.32808024e+02  5.62087672e+02  5.80355454e+03  5.80355454e+03
  5.80355454e+03]
E1 = 94.40560352176907  E_coul = 87.02628235047051
cycle= 6 E= 181.43188587224  delta_E= 1.76e-07  |g|= 5.01e-07  |ddm|= 0.311
    CPU time for cycle= 6      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=2.02046e-09
Linear dependence found in DIIS error vectors.
diis-c [-1.61274758e-16  2.58733137e-05 -2.18511008e-03  2.48892713e-01
  2.51085970e-01  2.51088053e-01  2.51092501e-01]
  HOMO = 232.808023661267  LUMO = 562.087672163472
  mo_energy =
[-1.17372420e+02 -7.42200471e-04 -7.42200470e-04 -7.42200470e-04
 -3.18283245e-04 -3.18283245e-04 -3.18283245e-04  1.87966397e+01
  2.32808024e+02  5.62087672e+02  5.80355454e+03  5.80355454e+03
  5.80355454e+03]
E1 = 94.40533006413024  E_coul = 87.02628213048251
cycle= 7 E= 181.431612194613  delta_E= -0.000274  |g|= 2.66e-07  |ddm|= 0.573
    CPU time for cycle= 7      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=1.02307e-09
Linear dependence found in DIIS error vectors.
diis-c [ 3.78023430e-17  2.06752818e-05 -1.74609972e-03  1.98940647e-01
  2.00693720e-01  2.00695385e-01  2.00698939e-01  2.00696734e-01]
  HOMO = 232.808023646522  LUMO = 562.087672131257
  mo_energy =
[-1.17372420e+02 -7.42200470e-04 -7.42200470e-04 -7.42200468e-04
 -3.18283245e-04 -3.18283245e-04 -3.18283244e-04  1.87966397e+01
  2.32808024e+02  5.62087672e+02  5.80355454e+03  5.80355454e+03
  5.80355454e+03]
E1 = 94.4054180151717  E_coul = 87.02628236151168
cycle= 8 E= 181.431700376683  delta_E= 8.82e-05  |g|= 4.96e-07  |ddm|= 1.53
    CPU time for cycle= 8      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=1.5634e-09
Linear dependence found in DIIS error vectors.
diis-c [ 3.62556864e-17  1.72063295e-05 -1.45311764e-03  1.65687376e-01
  1.67147410e-01  1.67148796e-01  1.67151757e-01  1.67149920e-01
  1.67150652e-01]
  HOMO = 232.808023663337  LUMO = 562.087672196075
  mo_energy =
[-1.17372420e+02 -7.42200471e-04 -7.42200470e-04 -7.42200469e-04
 -3.18283246e-04 -3.18283245e-04 -3.18283245e-04  1.87966397e+01
  2.32808024e+02  5.62087672e+02  5.80355454e+03  5.80355454e+03
  5.80355454e+03]
E1 = 94.40557180362664  E_coul = 87.02628230867077
cycle= 9 E= 181.431854112297  delta_E= 0.000154  |g|= 2.14e-07  |ddm|= 0.787
    CPU time for cycle= 9      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=7.36934e-10
Linear dependence found in DIIS error vectors.
diis-c [-9.38833303e-17  1.66699321e-01  1.04060233e-07  1.07866544e-04
  1.66366956e-01  1.66540182e-01  1.66875221e-01  1.66663431e-01
  1.66746918e-01]
  HOMO = 232.808023662349  LUMO = 562.087672213617
  mo_energy =
[-1.17372420e+02 -7.51332510e-04 -7.51332509e-04 -7.51332508e-04
 -3.36277945e-04 -3.36277943e-04 -3.36277943e-04  1.87966397e+01
  2.32808024e+02  5.62087672e+02  5.80355454e+03  5.80355454e+03
  5.80355454e+03]
E1 = 94.40558033344439  E_coul = 87.02628235728146
cycle= 10 E= 181.431862690726  delta_E= 8.58e-06  |g|= 3.7e-07  |ddm|= 0.45
    CPU time for cycle= 10      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=1.09307e-09
Linear dependence found in DIIS error vectors.
diis-c [1.38480504e-16 1.42831428e-01 1.42851551e-01 3.89538040e-04
 1.42583003e-01 1.42684664e-01 1.42978692e-01 1.42804197e-01
 1.42876928e-01]
  HOMO = 232.80802367351  LUMO = 562.087672254476
  mo_energy =
[-1.17372420e+02 -7.33826514e-04 -7.33826514e-04 -7.33826513e-04
 -2.99530466e-04 -2.99530466e-04 -2.99530465e-04  1.87966397e+01
  2.32808024e+02  5.62087672e+02  5.80355454e+03  5.80355454e+03
  5.80355454e+03]
E1 = 94.40545826313189  E_coul = 87.02628218125585
cycle= 11 E= 181.431740444388  delta_E= -0.000122  |g|= 2.68e-07  |ddm|= 0.35
    CPU time for cycle= 11      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=1.46761e-09
Linear dependence found in DIIS error vectors.
diis-c [-2.89052492e-16  1.25000000e-01  1.25000000e-01  1.25000000e-01
  1.25000000e-01  1.25000000e-01  1.25000000e-01  1.25000000e-01
  1.25000000e-01]
  HOMO = 232.808023666197  LUMO = 562.087672226209
  mo_energy =
[-1.17372420e+02 -7.42200471e-04 -7.42200470e-04 -7.42200469e-04
 -3.18283248e-04 -3.18283245e-04 -3.18283245e-04  1.87966397e+01
  2.32808024e+02  5.62087672e+02  5.80355454e+03  5.80355454e+03
  5.80355454e+03]
E1 = 94.40557180362664  E_coul = 87.0262821772902
cycle= 12 E= 181.431853980917  delta_E= 0.000114  |g|= 2.24e-07  |ddm|= 0.584
    CPU time for cycle= 12      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=1.82952e-09
Linear dependence found in DIIS error vectors.
diis-c [-2.89052492e-16  1.25000000e-01  1.25000000e-01  1.25000000e-01
  1.25000000e-01  1.25000000e-01  1.25000000e-01  1.25000000e-01
  1.25000000e-01]
  HOMO = 232.808023671258  LUMO = 562.087672246027
  mo_energy =
[-1.17372420e+02 -7.42200470e-04 -7.42200469e-04 -7.42200467e-04
 -3.18283246e-04 -3.18283245e-04 -3.18283245e-04  1.87966397e+01
  2.32808024e+02  5.62087672e+02  5.80355454e+03  5.80355454e+03
  5.80355454e+03]
E1 = 94.40551076847039  E_coul = 87.02628234516905
cycle= 13 E= 181.431793113639  delta_E= -6.09e-05  |g|= 2.86e-07  |ddm|= 0.326
    CPU time for cycle= 13      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=8.4059e-10
Linear dependence found in DIIS error vectors.
diis-c [-2.89052492e-16  1.25000000e-01  1.25000000e-01  1.25000000e-01
  1.25000000e-01  1.25000000e-01  1.25000000e-01  1.25000000e-01
  1.25000000e-01]
  HOMO = 232.808023685493  LUMO = 562.087672305863
  mo_energy =
[-1.17372420e+02 -7.42200470e-04 -7.42200470e-04 -7.42200470e-04
 -3.18283246e-04 -3.18283245e-04 -3.18283245e-04  1.87966397e+01
  2.32808024e+02  5.62087672e+02  5.80355454e+03  5.80355454e+03
  5.80355454e+03]
E1 = 94.40548758014572  E_coul = 87.02628239109968
cycle= 14 E= 181.431769971245  delta_E= -2.31e-05  |g|= 3.09e-07  |ddm|= 1.04
    CPU time for cycle= 14      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=8.93668e-10
Linear dependence found in DIIS error vectors.
diis-c [-2.89052492e-16  1.25000000e-01  1.25000000e-01  1.25000000e-01
  1.25000000e-01  1.25000000e-01  1.25000000e-01  1.25000000e-01
  1.25000000e-01]
  HOMO = 232.80802368832  LUMO = 562.087672310185
  mo_energy =
[-1.17372420e+02 -7.42200470e-04 -7.42200470e-04 -7.42200470e-04
 -3.18283245e-04 -3.18283245e-04 -3.18283245e-04  1.87966397e+01
  2.32808024e+02  5.62087672e+02  5.80355454e+03  5.80355454e+03
  5.80355454e+03]
E1 = 94.40554861530197  E_coul = 87.02628243277881
cycle= 15 E= 181.431831048081  delta_E= 6.11e-05  |g|= 3.94e-07  |ddm|= 0.523
    CPU time for cycle= 15      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=1.05794e-09
Linear dependence found in DIIS error vectors.
diis-c [-2.89052492e-16  1.25000000e-01  1.25000000e-01  1.25000000e-01
  1.25000000e-01  1.25000000e-01  1.25000000e-01  1.25000000e-01
  1.25000000e-01]
  HOMO = 232.808023713534  LUMO = 562.087672384019
  mo_energy =
[-1.17372420e+02 -7.42200470e-04 -7.42200469e-04 -7.42200468e-04
 -3.18283245e-04 -3.18283245e-04 -3.18283245e-04  1.87966397e+01
  2.32808024e+02  5.62087672e+02  5.80355454e+03  5.80355454e+03
  5.80355454e+03]
E1 = 94.40540335666479  E_coul = 87.02628237029232
cycle= 16 E= 181.431685726957  delta_E= -0.000145  |g|= 1.55e-07  |ddm|= 0.329
    CPU time for cycle= 16      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=2.07197e-09
Linear dependence found in DIIS error vectors.
diis-c [-2.89052492e-16  1.25000000e-01  1.25000000e-01  1.25000000e-01
  1.25000000e-01  1.25000000e-01  1.25000000e-01  1.25000000e-01
  1.25000000e-01]
  HOMO = 232.808023712937  LUMO = 562.087672386143
  mo_energy =
[-1.17372420e+02 -7.42200470e-04 -7.42200470e-04 -7.42200469e-04
 -3.18283248e-04 -3.18283245e-04 -3.18283245e-04  1.87966397e+01
  2.32808024e+02  5.62087672e+02  5.80355454e+03  5.80355454e+03
  5.80355454e+03]
E1 = 94.40569387393914  E_coul = 87.02628229652554
cycle= 17 E= 181.431976170465  delta_E= 0.00029  |g|= 4.04e-08  |ddm|= 0.407
    CPU time for cycle= 17      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=1.80014e-09
Linear dependence found in DIIS error vectors.
diis-c [-2.89052492e-16  1.25000000e-01  1.25000000e-01  1.25000000e-01
  1.25000000e-01  1.25000000e-01  1.25000000e-01  1.25000000e-01
  1.25000000e-01]
  HOMO = 232.808023711442  LUMO = 562.087672392994
  mo_energy =
[-1.17372420e+02 -7.42200470e-04 -7.42200470e-04 -7.42200470e-04
 -3.18283245e-04 -3.18283245e-04 -3.18283245e-04  1.87966397e+01
  2.32808024e+02  5.62087672e+02  5.80355454e+03  5.80355454e+03
  5.80355454e+03]
E1 = 94.40551076847039  E_coul = 87.02628213572986
cycle= 18 E= 181.4317929042  delta_E= -0.000183  |g|= 5.43e-07  |ddm|= 0.366
    CPU time for cycle= 18      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=1.60192e-09
Linear dependence found in DIIS error vectors.
diis-c [-2.89052492e-16  1.25000000e-01  1.25000000e-01  1.25000000e-01
  1.25000000e-01  1.25000000e-01  1.25000000e-01  1.25000000e-01
  1.25000000e-01]
  HOMO = 232.808023691483  LUMO = 562.08767233346
  mo_energy =
[-1.17372420e+02 -7.42200471e-04 -7.42200470e-04 -7.42200469e-04
 -3.18283246e-04 -3.18283245e-04 -3.18283245e-04  1.87966397e+01
  2.32808024e+02  5.62087672e+02  5.80355454e+03  5.80355454e+03
  5.80355454e+03]
E1 = 94.40534472263715  E_coul = 87.02628227451734
cycle= 19 E= 181.431626997154  delta_E= -0.000166  |g|= 1.83e-08  |ddm|= 1.01
    CPU time for cycle= 19      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=9.43712e-10
Linear dependence found in DIIS error vectors.
diis-c [-2.89052492e-16  1.25000000e-01  1.25000000e-01  1.25000000e-01
  1.25000000e-01  1.25000000e-01  1.25000000e-01  1.25000000e-01
  1.25000000e-01]
  HOMO = 232.808023699784  LUMO = 562.08767237165
  mo_energy =
[-1.17372420e+02 -7.42200470e-04 -7.42200470e-04 -7.42200470e-04
 -3.18283246e-04 -3.18283245e-04 -3.18283244e-04  1.87966397e+01
  2.32808024e+02  5.62087672e+02  5.80355454e+03  5.80355454e+03
  5.80355454e+03]
E1 = 94.4055278281059  E_coul = 87.02628211057589
cycle= 20 E= 181.431809938682  delta_E= 0.000183  |g|= 5.79e-07  |ddm|= 0.345
    CPU time for cycle= 20      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=1.84868e-09
Linear dependence found in DIIS error vectors.
diis-c [-2.89052492e-16  1.25000000e-01  1.25000000e-01  1.25000000e-01
  1.25000000e-01  1.25000000e-01  1.25000000e-01  1.25000000e-01
  1.25000000e-01]
  HOMO = 232.808023693854  LUMO = 562.087672354046
  mo_energy =
[-1.17372420e+02 -7.42200470e-04 -7.42200470e-04 -7.42200470e-04
 -3.18283245e-04 -3.18283245e-04 -3.18283245e-04  1.87966397e+01
  2.32808024e+02  5.62087672e+02  5.80355454e+03  5.80355454e+03
  5.80355454e+03]
E1 = 94.40572319095295  E_coul = 87.02628210926048
cycle= 21 E= 181.432005300213  delta_E= 0.000195  |g|= 5.07e-07  |ddm|= 1.14
    CPU time for cycle= 21      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=1.72869e-09
Linear dependence found in DIIS error vectors.
diis-c [-2.89052492e-16  1.25000000e-01  1.25000000e-01  1.25000000e-01
  1.25000000e-01  1.25000000e-01  1.25000000e-01  1.25000000e-01
  1.25000000e-01]
  HOMO = 232.808023673425  LUMO = 562.08767229468
  mo_energy =
[-1.17372420e+02 -7.42200470e-04 -7.42200469e-04 -7.42200469e-04
 -3.18283245e-04 -3.18283245e-04 -3.18283243e-04  1.87966397e+01
  2.32808024e+02  5.62087672e+02  5.80355454e+03  5.80355454e+03
  5.80355454e+03]
E1 = 94.40570853244604  E_coul = 87.02628224029904
cycle= 22 E= 181.431990772745  delta_E= -1.45e-05  |g|= 1.44e-07  |ddm|= 0.41
    CPU time for cycle= 22      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=2.03918e-09
Linear dependence found in DIIS error vectors.
diis-c [-2.89052492e-16  1.25000000e-01  1.25000000e-01  1.25000000e-01
  1.25000000e-01  1.25000000e-01  1.25000000e-01  1.25000000e-01
  1.25000000e-01]
  HOMO = 232.808023660516  LUMO = 562.087672250101
  mo_energy =
[-1.17372420e+02 -7.42200470e-04 -7.42200470e-04 -7.42200467e-04
 -3.18283248e-04 -3.18283246e-04 -3.18283245e-04  1.87966397e+01
  2.32808024e+02  5.62087672e+02  5.80355454e+03  5.80355454e+03
  5.80355454e+03]
E1 = 94.40561205158683  E_coul = 87.02628230589832
cycle= 23 E= 181.431894357485  delta_E= -9.64e-05  |g|= 6.95e-08  |ddm|= 1.19
    CPU time for cycle= 23      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=2.41953e-09
Linear dependence found in DIIS error vectors.
diis-c [-2.89052492e-16  1.25000000e-01  1.25000000e-01  1.25000000e-01
  1.25000000e-01  1.25000000e-01  1.25000000e-01  1.25000000e-01
  1.25000000e-01]
  HOMO = 232.80802364979  LUMO = 562.087672200524
  mo_energy =
[-1.17372420e+02 -7.42200470e-04 -7.42200469e-04 -7.42200468e-04
 -3.18283246e-04 -3.18283245e-04 -3.18283245e-04  1.87966397e+01
  2.32808024e+02  5.62087672e+02  5.80355454e+03  5.80355454e+03
  5.80355454e+03]
E1 = 94.40544120349638  E_coul = 87.02628221280098
cycle= 24 E= 181.431723416297  delta_E= -0.000171  |g|= 7.21e-08  |ddm|= 1.59
    CPU time for cycle= 24      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=1.10387e-09
Linear dependence found in DIIS error vectors.
diis-c [-2.89052492e-16  1.25000000e-01  1.25000000e-01  1.25000000e-01
  1.25000000e-01  1.25000000e-01  1.25000000e-01  1.25000000e-01
  1.25000000e-01]
  HOMO = 232.808023637312  LUMO = 562.087672149086
  mo_energy =
[-1.17372420e+02 -7.42200470e-04 -7.42200470e-04 -7.42200469e-04
 -3.18283246e-04 -3.18283245e-04 -3.18283245e-04  1.87966397e+01
  2.32808024e+02  5.62087672e+02  5.80355454e+03  5.80355454e+03
  5.80355454e+03]
E1 = 94.40561818027598  E_coul = 87.02628230272042
cycle= 25 E= 181.431900482996  delta_E= 0.000177  |g|= 2.87e-07  |ddm|= 1.14
    CPU time for cycle= 25      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=1.16427e-09
Linear dependence found in DIIS error vectors.
diis-c [-2.89052492e-16  1.25000000e-01  1.25000000e-01  1.25000000e-01
  1.25000000e-01  1.25000000e-01  1.25000000e-01  1.25000000e-01
  1.25000000e-01]
  HOMO = 232.808023638159  LUMO = 562.08767214221
  mo_energy =
[-1.17372420e+02 -7.42200471e-04 -7.42200470e-04 -7.42200470e-04
 -3.18283246e-04 -3.18283245e-04 -3.18283245e-04  1.87966397e+01
  2.32808024e+02  5.62087672e+02  5.80355454e+03  5.80355454e+03
  5.80355454e+03]
E1 = 94.40546679294965  E_coul = 87.02628233330277
cycle= 26 E= 181.431749126252  delta_E= -0.000151  |g|= 4.1e-07  |ddm|= 1.04
    CPU time for cycle= 26      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=1.54346e-09
Linear dependence found in DIIS error vectors.
diis-c [-2.89052492e-16  1.25000000e-01  1.25000000e-01  1.25000000e-01
  1.25000000e-01  1.25000000e-01  1.25000000e-01  1.25000000e-01
  1.25000000e-01]
  HOMO = 232.808023656126  LUMO = 562.087672197504
  mo_energy =
[-1.17372420e+02 -7.42200471e-04 -7.42200470e-04 -7.42200470e-04
 -3.18283247e-04 -3.18283245e-04 -3.18283245e-04  1.87966397e+01
  2.32808024e+02  5.62087672e+02  5.80355454e+03  5.80355454e+03
  5.80355454e+03]
E1 = 94.40560352176907  E_coul = 87.02628218453292
cycle= 27 E= 181.431885706302  delta_E= 0.000137  |g|= 1.2e-07  |ddm|= 0.448
    CPU time for cycle= 27      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=6.1992e-10
Linear dependence found in DIIS error vectors.
diis-c [-2.89052492e-16  1.25000000e-01  1.25000000e-01  1.25000000e-01
  1.25000000e-01  1.25000000e-01  1.25000000e-01  1.25000000e-01
  1.25000000e-01]
  HOMO = 232.80802364891  LUMO = 562.087672173811
  mo_energy =
[-1.17372420e+02 -7.42200471e-04 -7.42200470e-04 -7.42200468e-04
 -3.18283247e-04 -3.18283246e-04 -3.18283245e-04  1.87966397e+01
  2.32808024e+02  5.62087672e+02  5.80355454e+03  5.80355454e+03
  5.80355454e+03]
E1 = 94.40554248661282  E_coul = 87.02628214955897
cycle= 28 E= 181.431824636172  delta_E= -6.11e-05  |g|= 2.16e-07  |ddm|= 0.791
    CPU time for cycle= 28      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=7.2589e-10
Linear dependence found in DIIS error vectors.
diis-c [-2.89052492e-16  1.25000000e-01  1.25000000e-01  1.25000000e-01
  1.25000000e-01  1.25000000e-01  1.25000000e-01  1.25000000e-01
  1.25000000e-01]
  HOMO = 232.80802365299  LUMO = 562.087672187376
  mo_energy =
[-1.17372420e+02 -7.42200470e-04 -7.42200470e-04 -7.42200470e-04
 -3.18283247e-04 -3.18283245e-04 -3.18283245e-04  1.87966397e+01
  2.32808024e+02  5.62087672e+02  5.80355454e+03  5.80355454e+03
  5.80355454e+03]
E1 = 94.40545213444274  E_coul = 87.02628226926346
cycle= 29 E= 181.431734403706  delta_E= -9.02e-05  |g|= 1.04e-07  |ddm|= 0.904
    CPU time for cycle= 29      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=2.16802e-09
Linear dependence found in DIIS error vectors.
diis-c [-2.89052492e-16  1.25000000e-01  1.25000000e-01  1.25000000e-01
  1.25000000e-01  1.25000000e-01  1.25000000e-01  1.25000000e-01
  1.25000000e-01]
  HOMO = 232.808023666593  LUMO = 562.087672218827
  mo_energy =
[-1.17372420e+02 -7.42200470e-04 -7.42200470e-04 -7.42200469e-04
 -3.18283246e-04 -3.18283245e-04 -3.18283245e-04  1.87966397e+01
  2.32808024e+02  5.62087672e+02  5.80355454e+03  5.80355454e+03
  5.80355454e+03]
E1 = 94.4055400854842  E_coul = 87.0262823118804
cycle= 30 E= 181.431822397365  delta_E= 8.8e-05  |g|= 1.92e-07  |ddm|= 1.56
    CPU time for cycle= 30      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=1.11384e-09
Linear dependence found in DIIS error vectors.
diis-c [-2.89052492e-16  1.25000000e-01  1.25000000e-01  1.25000000e-01
  1.25000000e-01  1.25000000e-01  1.25000000e-01  1.25000000e-01
  1.25000000e-01]
  HOMO = 232.808023672965  LUMO = 562.08767224198
  mo_energy =
[-1.17372420e+02 -7.42200470e-04 -7.42200469e-04 -7.42200467e-04
 -3.18283246e-04 -3.18283245e-04 -3.18283245e-04  1.87966397e+01
  2.32808024e+02  5.62087672e+02  5.80355454e+03  5.80355454e+03
  5.80355454e+03]
E1 = 94.40539722797564  E_coul = 87.02628225866107
cycle= 31 E= 181.431679486637  delta_E= -0.000143  |g|= 1.07e-08  |ddm|= 1.12
    CPU time for cycle= 31      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=9.49954e-10
Linear dependence found in DIIS error vectors.
diis-c [-2.89052492e-16  1.25000000e-01  1.25000000e-01  1.25000000e-01
  1.25000000e-01  1.25000000e-01  1.25000000e-01  1.25000000e-01
  1.25000000e-01]
  HOMO = 232.808023669333  LUMO = 562.087672246969
  mo_energy =
[-1.17372420e+02 -7.42200470e-04 -7.42200470e-04 -7.42200469e-04
 -3.18283246e-04 -3.18283245e-04 -3.18283245e-04  1.87966397e+01
  2.32808024e+02  5.62087672e+02  5.80355454e+03  5.80355454e+03
  5.80355454e+03]
E1 = 94.40548145145657  E_coul = 87.0262823486828
cycle= 32 E= 181.431763800139  delta_E= 8.43e-05  |g|= 2.11e-07  |ddm|= 0.99
    CPU time for cycle= 32      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=1.48639e-09
Linear dependence found in DIIS error vectors.
diis-c [-2.89052492e-16  1.25000000e-01  1.25000000e-01  1.25000000e-01
  1.25000000e-01  1.25000000e-01  1.25000000e-01  1.25000000e-01
  1.25000000e-01]
  HOMO = 232.808023680192  LUMO = 562.087672278262
  mo_energy =
[-1.17372420e+02 -7.42200470e-04 -7.42200470e-04 -7.42200470e-04
 -3.18283246e-04 -3.18283245e-04 -3.18283245e-04  1.87966397e+01
  2.32808024e+02  5.62087672e+02  5.80355454e+03  5.80355454e+03
  5.80355454e+03]
E1 = 94.40531300449473  E_coul = 87.0262822986348
cycle= 33 E= 181.43159530313  delta_E= -0.000168  |g|= 4.71e-08  |ddm|= 0.504
    CPU time for cycle= 33      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=8.03922e-10
Linear dependence found in DIIS error vectors.
diis-c [-2.89052492e-16  1.25000000e-01  1.25000000e-01  1.25000000e-01
  1.25000000e-01  1.25000000e-01  1.25000000e-01  1.25000000e-01
  1.25000000e-01]
  HOMO = 232.808023679422  LUMO = 562.087672267328
  mo_energy =
[-1.17372420e+02 -7.42200470e-04 -7.42200470e-04 -7.42200469e-04
 -3.18283246e-04 -3.18283246e-04 -3.18283245e-04  1.87966397e+01
  2.32808024e+02  5.62087672e+02  5.80355454e+03  5.80355454e+03
  5.80355454e+03]
E1 = 94.40558886326215  E_coul = 87.02628213331204
cycle= 34 E= 181.431870996574  delta_E= 0.000276  |g|= 3.78e-07  |ddm|= 0.848
    CPU time for cycle= 34      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=1.46485e-09
Linear dependence found in DIIS error vectors.
diis-c [-2.89052492e-16  1.25000000e-01  1.25000000e-01  1.25000000e-01
  1.25000000e-01  1.25000000e-01  1.25000000e-01  1.25000000e-01
  1.25000000e-01]
  HOMO = 232.808023661749  LUMO = 562.087672207039
  mo_energy =
[-1.17372420e+02 -7.42200470e-04 -7.42200470e-04 -7.42200468e-04
 -3.18283245e-04 -3.18283245e-04 -3.18283243e-04  1.87966397e+01
  2.32808024e+02  5.62087672e+02  5.80355454e+03  5.80355454e+03
  5.80355454e+03]
E1 = 94.40554861530197  E_coul = 87.02628230618957
cycle= 35 E= 181.431830921492  delta_E= -4.01e-05  |g|= 1.89e-07  |ddm|= 1.13
    CPU time for cycle= 35      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=8.41599e-10
Linear dependence found in DIIS error vectors.
diis-c [-2.89052492e-16  1.25000000e-01  1.25000000e-01  1.25000000e-01
  1.25000000e-01  1.25000000e-01  1.25000000e-01  1.25000000e-01
  1.25000000e-01]
  HOMO = 232.80802367215  LUMO = 562.087672233567
  mo_energy =
[-1.17372420e+02 -7.42200470e-04 -7.42200469e-04 -7.42200469e-04
 -3.18283246e-04 -3.18283245e-04 -3.18283245e-04  1.87966397e+01
  2.32808024e+02  5.62087672e+02  5.80355454e+03  5.80355454e+03
  5.80355454e+03]
E1 = 94.4056498984184  E_coul = 87.02628214475706
cycle= 36 E= 181.431932043175  delta_E= 0.000101  |g|= 3.65e-07  |ddm|= 1.02
    CPU time for cycle= 36      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=9.92026e-10
Linear dependence found in DIIS error vectors.
diis-c [-2.89052492e-16  1.25000000e-01  1.25000000e-01  1.25000000e-01
  1.25000000e-01  1.25000000e-01  1.25000000e-01  1.25000000e-01
  1.25000000e-01]
  HOMO = 232.808023671342  LUMO = 562.087672224917
  mo_energy =
[-1.17372420e+02 -7.42200470e-04 -7.42200468e-04 -7.42200466e-04
 -3.18283245e-04 -3.18283245e-04 -3.18283243e-04  1.87966397e+01
  2.32808024e+02  5.62087672e+02  5.80355454e+03  5.80355454e+03
  5.80355454e+03]
E1 = 94.40556327380888  E_coul = 87.02628238773865
cycle= 37 E= 181.431845661548  delta_E= -8.64e-05  |g|= 3.76e-07  |ddm|= 1.47
    CPU time for cycle= 37      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=1.45128e-09
Linear dependence found in DIIS error vectors.
diis-c [-2.89052492e-16  1.25000000e-01  1.25000000e-01  1.25000000e-01
  1.25000000e-01  1.25000000e-01  1.25000000e-01  1.25000000e-01
  1.25000000e-01]
  HOMO = 232.808023681561  LUMO = 562.087672256541
  mo_energy =
[-1.17372420e+02 -7.42200470e-04 -7.42200470e-04 -7.42200469e-04
 -3.18283248e-04 -3.18283246e-04 -3.18283245e-04  1.87966397e+01
  2.32808024e+02  5.62087672e+02  5.80355454e+03  5.80355454e+03
  5.80355454e+03]
E1 = 94.40552542697729  E_coul = 87.0262822642238
cycle= 38 E= 181.431807691201  delta_E= -3.8e-05  |g|= 9.59e-09  |ddm|= 0.715
    CPU time for cycle= 38      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=1.01408e-09
Linear dependence found in DIIS error vectors.
diis-c [-2.89052492e-16  1.25000000e-01  1.25000000e-01  1.25000000e-01
  1.25000000e-01  1.25000000e-01  1.25000000e-01  1.25000000e-01
  1.25000000e-01]
  HOMO = 232.80802367691  LUMO = 562.087672250149
  mo_energy =
[-1.17372420e+02 -7.42200470e-04 -7.42200470e-04 -7.42200469e-04
 -3.18283245e-04 -3.18283245e-04 -3.18283244e-04  1.87966397e+01
  2.32808024e+02  5.62087672e+02  5.80355454e+03  5.80355454e+03
  5.80355454e+03]
E1 = 94.40552542697729  E_coul = 87.02628228501746
cycle= 39 E= 181.431807711995  delta_E= 2.08e-08  |g|= 7.53e-08  |ddm|= 0.53
    CPU time for cycle= 39      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=9.35927e-10
Linear dependence found in DIIS error vectors.
diis-c [-2.89052492e-16  1.25000000e-01  1.25000000e-01  1.25000000e-01
  1.25000000e-01  1.25000000e-01  1.25000000e-01  1.25000000e-01
  1.25000000e-01]
  HOMO = 232.808023678745  LUMO = 562.08767225915
  mo_energy =
[-1.17372420e+02 -7.42200470e-04 -7.42200470e-04 -7.42200469e-04
 -3.18283247e-04 -3.18283245e-04 -3.18283245e-04  1.87966397e+01
  2.32808024e+02  5.62087672e+02  5.80355454e+03  5.80355454e+03
  5.80355454e+03]
E1 = 94.40549610996348  E_coul = 87.02628234708011
cycle= 40 E= 181.431778457044  delta_E= -2.93e-05  |g|= 1.54e-07  |ddm|= 0.641
    CPU time for cycle= 40      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=1.49725e-09
Linear dependence found in DIIS error vectors.
diis-c [-2.89052492e-16  1.25000000e-01  1.25000000e-01  1.25000000e-01
  1.25000000e-01  1.25000000e-01  1.25000000e-01  1.25000000e-01
  1.25000000e-01]
  HOMO = 232.808023678799  LUMO = 562.087672257932
  mo_energy =
[-1.17372420e+02 -7.42200470e-04 -7.42200470e-04 -7.42200466e-04
 -3.18283246e-04 -3.18283245e-04 -3.18283245e-04  1.87966397e+01
  2.32808024e+02  5.62087672e+02  5.80355454e+03  5.80355454e+03
  5.80355454e+03]
E1 = 94.40554248661282  E_coul = 87.02628217190306
cycle= 41 E= 181.431824658516  delta_E= 4.62e-05  |g|= 3.09e-07  |ddm|= 0.647
    CPU time for cycle= 41      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=1.52523e-09
Linear dependence found in DIIS error vectors.
diis-c [-2.89052492e-16  1.25000000e-01  1.25000000e-01  1.25000000e-01
  1.25000000e-01  1.25000000e-01  1.25000000e-01  1.25000000e-01
  1.25000000e-01]
  HOMO = 232.80802366784  LUMO = 562.087672223974
  mo_energy =
[-1.17372420e+02 -7.42200470e-04 -7.42200469e-04 -7.42200468e-04
 -3.18283247e-04 -3.18283245e-04 -3.18283245e-04  1.87966397e+01
  2.32808024e+02  5.62087672e+02  5.80355454e+03  5.80355454e+03
  5.80355454e+03]
E1 = 94.40541188648255  E_coul = 87.0262821975673
cycle= 42 E= 181.43169408405  delta_E= -0.000131  |g|= 1.58e-07  |ddm|= 0.666
    CPU time for cycle= 42      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=8.45781e-10
Linear dependence found in DIIS error vectors.
diis-c [-2.89052492e-16  1.25000000e-01  1.25000000e-01  1.25000000e-01
  1.25000000e-01  1.25000000e-01  1.25000000e-01  1.25000000e-01
  1.25000000e-01]
  HOMO = 232.808023673075  LUMO = 562.087672239736
  mo_energy =
[-1.17372420e+02 -7.42200470e-04 -7.42200470e-04 -7.42200469e-04
 -3.18283245e-04 -3.18283245e-04 -3.18283245e-04  1.87966397e+01
  2.32808024e+02  5.62087672e+02  5.80355454e+03  5.80355454e+03
  5.80355454e+03]
E1 = 94.40552542697729  E_coul = 87.0262824849739
cycle= 43 E= 181.431807911951  delta_E= 0.000114  |g|= 6.56e-07  |ddm|= 0.912
    CPU time for cycle= 43      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=1.92567e-09
Linear dependence found in DIIS error vectors.
diis-c [-2.89052492e-16  1.25000000e-01  1.25000000e-01  1.25000000e-01
  1.25000000e-01  1.25000000e-01  1.25000000e-01  1.25000000e-01
  1.25000000e-01]
  HOMO = 232.808023687831  LUMO = 562.087672285347
  mo_energy =
[-1.17372420e+02 -7.42200471e-04 -7.42200470e-04 -7.42200469e-04
 -3.18283247e-04 -3.18283245e-04 -3.18283245e-04  1.87966397e+01
  2.32808024e+02  5.62087672e+02  5.80355454e+03  5.80355454e+03
  5.80355454e+03]
E1 = 94.4055949919513  E_coul = 87.02628209696432
cycle= 44 E= 181.431877088916  delta_E= 6.92e-05  |g|= 4.87e-07  |ddm|= 0.599
    CPU time for cycle= 44      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=1.52185e-09
Linear dependence found in DIIS error vectors.
diis-c [-2.89052492e-16  1.25000000e-01  1.25000000e-01  1.25000000e-01
  1.25000000e-01  1.25000000e-01  1.25000000e-01  1.25000000e-01
  1.25000000e-01]
  HOMO = 232.808023683652  LUMO = 562.087672288304
  mo_energy =
[-1.17372420e+02 -7.42200470e-04 -7.42200469e-04 -7.42200468e-04
 -3.18283247e-04 -3.18283246e-04 -3.18283245e-04  1.87966397e+01
  2.32808024e+02  5.62087672e+02  5.80355454e+03  5.80355454e+03
  5.80355454e+03]
E1 = 94.40563283878289  E_coul = 87.02628242335841
cycle= 45 E= 181.431915262141  delta_E= 3.82e-05  |g|= 3.97e-07  |ddm|= 0.328
    CPU time for cycle= 45      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=1.28012e-09
Linear dependence found in DIIS error vectors.
diis-c [-2.89052492e-16  1.25000000e-01  1.25000000e-01  1.25000000e-01
  1.25000000e-01  1.25000000e-01  1.25000000e-01  1.25000000e-01
  1.25000000e-01]
  HOMO = 232.808023686921  LUMO = 562.087672298208
  mo_energy =
[-1.17372420e+02 -7.42200471e-04 -7.42200470e-04 -7.42200469e-04
 -3.18283245e-04 -3.18283245e-04 -3.18283244e-04  1.87966397e+01
  2.32808024e+02  5.62087672e+02  5.80355454e+03  5.80355454e+03
  5.80355454e+03]
E1 = 94.40551689715954  E_coul = 87.0262822463289
cycle= 46 E= 181.431799143488  delta_E= -0.000116  |g|= 1.46e-07  |ddm|= 0.74
    CPU time for cycle= 46      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=1.45099e-09
Linear dependence found in DIIS error vectors.
diis-c [-2.89052492e-16  1.25000000e-01  1.25000000e-01  1.25000000e-01
  1.25000000e-01  1.25000000e-01  1.25000000e-01  1.25000000e-01
  1.25000000e-01]
  HOMO = 232.808023685524  LUMO = 562.087672282646
  mo_energy =
[-1.17372420e+02 -7.42200470e-04 -7.42200470e-04 -7.42200469e-04
 -3.18283245e-04 -3.18283245e-04 -3.18283243e-04  1.87966397e+01
  2.32808024e+02  5.62087672e+02  5.80355454e+03  5.80355454e+03
  5.80355454e+03]
E1 = 94.40554248661282  E_coul = 87.02628219585782
cycle= 47 E= 181.431824682471  delta_E= 2.55e-05  |g|= 2.18e-07  |ddm|= 1.18
    CPU time for cycle= 47      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=1.62002e-09
Linear dependence found in DIIS error vectors.
diis-c [-2.89052492e-16  1.25000000e-01  1.25000000e-01  1.25000000e-01
  1.25000000e-01  1.25000000e-01  1.25000000e-01  1.25000000e-01
  1.25000000e-01]
  HOMO = 232.808023677313  LUMO = 562.087672259471
  mo_energy =
[-1.17372420e+02 -7.42200471e-04 -7.42200470e-04 -7.42200468e-04
 -3.18283245e-04 -3.18283245e-04 -3.18283244e-04  1.87966397e+01
  2.32808024e+02  5.62087672e+02  5.80355454e+03  5.80355454e+03
  5.80355454e+03]
E1 = 94.40549610996348  E_coul = 87.0262822638797
cycle= 48 E= 181.431778373843  delta_E= -4.63e-05  |g|= 1.28e-08  |ddm|= 0.861
    CPU time for cycle= 48      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=1.309e-09
Linear dependence found in DIIS error vectors.
diis-c [-2.89052492e-16  1.25000000e-01  1.25000000e-01  1.25000000e-01
  1.25000000e-01  1.25000000e-01  1.25000000e-01  1.25000000e-01
  1.25000000e-01]
  HOMO = 232.808023670217  LUMO = 562.087672248092
  mo_energy =
[-1.17372420e+02 -7.42200470e-04 -7.42200470e-04 -7.42200469e-04
 -3.18283245e-04 -3.18283245e-04 -3.18283245e-04  1.87966397e+01
  2.32808024e+02  5.62087672e+02  5.80355454e+03  5.80355454e+03
  5.80355454e+03]
E1 = 94.40554248661282  E_coul = 87.0262822744297
cycle= 49 E= 181.431824761043  delta_E= 4.64e-05  |g|= 8.2e-08  |ddm|= 1.25
    CPU time for cycle= 49      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=9.54105e-10
Linear dependence found in DIIS error vectors.
diis-c [-2.89052492e-16  1.25000000e-01  1.25000000e-01  1.25000000e-01
  1.25000000e-01  1.25000000e-01  1.25000000e-01  1.25000000e-01
  1.25000000e-01]
  HOMO = 232.80802367911  LUMO = 562.087672288578
  mo_energy =
[-1.17372420e+02 -7.42200471e-04 -7.42200470e-04 -7.42200469e-04
 -3.18283246e-04 -3.18283245e-04 -3.18283243e-04  1.87966397e+01
  2.32808024e+02  5.62087672e+02  5.80355454e+03  5.80355454e+03
  5.80355454e+03]
E1 = 94.40544973331414  E_coul = 87.02628242503613
cycle= 50 E= 181.43173215835  delta_E= -9.26e-05  |g|= 3.95e-07  |ddm|= 0.797
    CPU time for cycle= 50      0.02 sec, wall time      0.02 sec
E1 = 94.40544973331414  E_coul = 87.02628242503613

WARN: 	An extra scf cycle is going to be run
	in order to restore the mo_energy derivatives
	missing in implicit differentiation.

  HOMO = 232.80802378404  LUMO = 562.087672538511
  mo_energy =
[-1.17372420e+02 -7.42200470e-04 -7.42200470e-04 -7.42200469e-04
 -3.18283248e-04 -3.18283245e-04 -3.18283245e-04  1.87966397e+01
  2.32808024e+02  5.62087673e+02  5.80355454e+03  5.80355454e+03
  5.80355454e+03]
E1 = 94.40555714511973  E_coul = 87.0262822107955
Extra cycle  E= 181.431839355915  delta_E= 0.000107  |g|= 5.86e-07  |ddm|= 1.07
    CPU time for scf_cycle      8.43 sec, wall time      1.10 sec
exp = [6.63660948e+01 8.35653833e+01 1.36403864e+02 5.17543962e+01
 1.00000008e-09 1.00000000e-09 2.69396435e+03]
E = 181.43183935591523
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
number_of_s_exps = 4
number_of_p_exps = 3

exps = np.zeros((number_of_s_exps+number_of_p_exps,2))
#exps[:, 0] = decaying_nums(5)

# S
exps[0,0] = 20.0
exps[1,0] = 9.5045827955887916e+01
exps[2,0] = 4.4881042475048387e+00 
exps[3,0] = 3.9799528004692630e-01
             
# P          
exps[3,0] = 3.0108199280832128e+01
exps[4,0] = 6.1393781325590453e+00
exps[5,0] = 4.8929328703550412e-01

basis =  str(number_of_s_exps)+"s"+str(number_of_p_exps)+"p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc21115.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 24
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 18 14:57:53 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35677784.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 32000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 32000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 32000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  41.9278241265        1
[INPUT] 0    0    [1    /1   ]  89.7615852827        1
[INPUT] 0    0    [1    /1   ]  68.1982036566        1
[INPUT] 0    0    [1    /1   ]  40.0759545771        1
[INPUT] 1    0    [1    /1   ]  4.3398042483         1
[INPUT] 1    0    [1    /1   ]  0.0993211874812      1
[INPUT] 1    0    [1    /1   ]  2693.96455002        1

nuclear repulsion = 0
number of shells = 7
number of NR pGTOs = 13
number of NR cGTOs = 13
basis = {'Ar': [[0, [41.92782412654045, 1.0]], [0, [89.76158528268375, 1.0]], [0, [68.19820365660041, 1.0]], [0, [40.07595457711809, 1.0]], [1, [4.339804248302214, 1.0]], [1, [0.09932118748121878, 1.0]], [1, [2693.96455002007, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [41.92782413]
bas 1, expnt(s) = [89.76158528]
bas 2, expnt(s) = [68.19820366]
bas 3, expnt(s) = [40.07595458]
bas 4, expnt(s) = [4.33980425]
bas 5, expnt(s) = [0.09932119]
bas 6, expnt(s) = [2693.96455002]
CPU time:        72.76
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  1  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]
 [ 0  1  1  1  0 36 37  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 4.19278241e+01 4.16285964e+01 8.97615853e+01 7.36771656e+01
 6.81982037e+01 5.99576670e+01 4.00759546e+01 4.02418494e+01
 4.33980425e+00 1.82735139e+01 9.93211875e-02 1.62662249e-01
 2.69396455e+03 5.66205701e+04]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 10.391955526225502
cond(S) = 847473.4270292461
E1 = -442.00750651762644  E_coul = 77.71161843594834
init E= -364.295888081678
    CPU time for initialize scf      7.30 sec, wall time      0.34 sec
  HOMO = 152.854798495413  LUMO = 373.864705906574
  mo_energy =
[-1.21272754e+02 -1.46660501e+01 -1.46660501e+01 -1.46660501e+01
 -2.55698780e+00 -2.55698780e+00 -2.55698780e+00  3.28717174e-01
  1.52854798e+02  3.73864706e+02  5.78798797e+03  5.78798797e+03
  5.78798797e+03]
E1 = -296.154540641674  E_coul = 205.1193626553531
cycle= 1 E= -91.0351779863209  delta_E=  273  |g|= 2.48  |ddm|= 8.68e+04
    CPU time for cycle= 1      0.25 sec, wall time      0.01 sec
diis-norm(errvec)=0.362433
diis-c [-0.13135732  1.        ]
  HOMO = 164.626636666584  LUMO = 391.0701460438
  mo_energy =
[-1.02036582e+02 -5.77386030e+00 -5.77386030e+00 -5.77386030e+00
 -4.56569866e-01 -4.56569866e-01 -4.56569866e-01  1.31366268e+01
  1.64626637e+02  3.91070146e+02  5.81144862e+03  5.81144862e+03
  5.81144862e+03]
E1 = -296.0574647115777  E_coul = 205.00869532630833
cycle= 2 E= -91.0487693852694  delta_E= -0.0136  |g|= 0.0369  |ddm|= 1.79e+03
    CPU time for cycle= 2      0.07 sec, wall time      0.01 sec
diis-norm(errvec)=0.00381137
diis-c [-1.05636343e-05 -5.52316878e-03  1.00552317e+00]
  HOMO = 164.617885972658  LUMO = 391.057128785646
  mo_energy =
[-1.02072001e+02 -5.77467421e+00 -5.77467421e+00 -5.77467421e+00
 -4.56573983e-01 -4.56573983e-01 -4.56573983e-01  1.31275146e+01
  1.64617886e+02  3.91057129e+02  5.81136556e+03  5.81136556e+03
  5.81136556e+03]
E1 = -296.0558125347516  E_coul = 205.00702701205572
cycle= 3 E= -91.0487855226959  delta_E= -1.61e-05  |g|= 0.000374  |ddm|= 26.4
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=3.75554e-05
diis-c [-1.08873338e-14  5.65624134e-06 -1.02287854e-02  1.01022313e+00]
  HOMO = 164.617796480578  LUMO = 391.056981113231
  mo_energy =
[-1.02072340e+02 -5.77468177e+00 -5.77468177e+00 -5.77468177e+00
 -4.56574021e-01 -4.56574021e-01 -4.56574021e-01  1.31274236e+01
  1.64617796e+02  3.91056981e+02  5.81136476e+03  5.81136476e+03
  5.81136476e+03]
E1 = -296.05579557776065  E_coul = 205.0070184456104
cycle= 4 E= -91.0487771321502  delta_E= 8.39e-06  |g|= 2.04e-05  |ddm|= 0.276
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=6.12494e-08
Linear dependence found in DIIS error vectors.
diis-c [-2.86236076e-15  2.78872037e-06 -5.06819907e-03  4.99954284e-01
  5.05111127e-01]
  HOMO = 164.617799238709  LUMO = 391.05698655969
  mo_energy =
[-1.02072340e+02 -5.77468178e+00 -5.77468178e+00 -5.77468178e+00
 -4.56574021e-01 -4.56574021e-01 -4.56574021e-01  1.31274250e+01
  1.64617799e+02  3.91056987e+02  5.81136476e+03  5.81136476e+03
  5.81136476e+03]
E1 = -296.0557958942198  E_coul = 205.0070096781712
cycle= 5 E= -91.0487862160486  delta_E= -9.08e-06  |g|= 1.02e-05  |ddm|= 0.00799
    CPU time for cycle= 5      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=4.83931e-08
Linear dependence found in DIIS error vectors.
diis-c [-2.01408650e-15  1.86210835e-06 -3.36368331e-03  3.32167277e-01
  3.35593422e-01  3.35601122e-01]
  HOMO = 164.617798205396  LUMO = 391.05698482359
  mo_energy =
[-1.02072340e+02 -5.77468178e+00 -5.77468178e+00 -5.77468178e+00
 -4.56574021e-01 -4.56574021e-01 -4.56574021e-01  1.31274245e+01
  1.64617798e+02  3.91056985e+02  5.81136476e+03  5.81136476e+03
  5.81136476e+03]
E1 = -296.0557957804056  E_coul = 205.00700859028555
cycle= 6 E= -91.0487871901201  delta_E= -9.74e-07  |g|= 9.18e-06  |ddm|= 0.00281
    CPU time for cycle= 6      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=1.73582e-08
Linear dependence found in DIIS error vectors.
diis-c [-1.80998533e-15  1.39652288e-06 -2.51775395e-03  2.48702774e-01
  2.51268016e-01  2.51273781e-01  2.51271786e-01]
  HOMO = 164.617797513821  LUMO = 391.056983581134
  mo_energy =
[-1.02072340e+02 -5.77468178e+00 -5.77468178e+00 -5.77468178e+00
 -4.56574021e-01 -4.56574021e-01 -4.56574021e-01  1.31274241e+01
  1.64617798e+02  3.91056984e+02  5.81136476e+03  5.81136476e+03
  5.81136476e+03]
E1 = -296.05579571040494  E_coul = 205.00701106785468
cycle= 7 E= -91.0487846425503  delta_E= 2.55e-06  |g|= 2.02e-06  |ddm|= 0.00187
    CPU time for cycle= 7      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=8.10889e-09
Linear dependence found in DIIS error vectors.
diis-c [-1.19624707e-15  1.11568747e-06 -2.01250289e-03  1.98760247e-01
  2.00810361e-01  2.00814968e-01  2.00813374e-01  2.00812436e-01]
  HOMO = 164.617797430225  LUMO = 391.056983333177
  mo_energy =
[-1.02072340e+02 -5.77468178e+00 -5.77468178e+00 -5.77468178e+00
 -4.56574021e-01 -4.56574021e-01 -4.56574021e-01  1.31274241e+01
  1.64617797e+02  3.91056983e+02  5.81136476e+03  5.81136476e+03
  5.81136476e+03]
E1 = -296.0557956953558  E_coul = 205.00701763886812
cycle= 8 E= -91.0487780564877  delta_E= 6.59e-06  |g|= 1.27e-05  |ddm|= 0.000265
    CPU time for cycle= 8      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=6.3747e-08
Linear dependence found in DIIS error vectors.
diis-c [-8.21558713e-17  4.53499343e-07 -8.02307932e-04  7.94509182e-02
  2.02888989e-01  1.68837645e-01  1.70446489e-01  1.76902688e-01
  2.02275125e-01]
  HOMO = 164.617798504237  LUMO = 391.056985129184
  mo_energy =
[-1.02072340e+02 -5.77468178e+00 -5.77468178e+00 -5.77468178e+00
 -4.56574021e-01 -4.56574021e-01 -4.56574021e-01  1.31274246e+01
  1.64617799e+02  3.91056985e+02  5.81136476e+03  5.81136476e+03
  5.81136476e+03]
E1 = -296.0557958133025  E_coul = 205.00700282875505
cycle= 9 E= -91.0487929845474  delta_E= -1.49e-05  |g|= 2.28e-05  |ddm|= 0.00284
    CPU time for cycle= 9      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=3.94831e-08
Linear dependence found in DIIS error vectors.
diis-c [-1.21419430e-16  1.66979758e-01  1.63784869e-05 -1.40789462e-03
  1.67878682e-01  1.66271885e-01  1.66830326e-01  1.67188381e-01
  1.66242484e-01]
  HOMO = 164.617797314478  LUMO = 391.056983072318
  mo_energy =
[-1.02072340e+02 -5.77468178e+00 -5.77468178e+00 -5.77468178e+00
 -4.56574021e-01 -4.56574021e-01 -4.56574021e-01  1.31274240e+01
  1.64617797e+02  3.91056983e+02  5.81136476e+03  5.81136476e+03
  5.81136476e+03]
E1 = -296.05579568084244  E_coul = 205.00700968258596
cycle= 10 E= -91.0487859982565  delta_E= 6.99e-06  |g|= 5.09e-06  |ddm|= 0.00322
    CPU time for cycle= 10      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=2.29855e-08
Linear dependence found in DIIS error vectors.
diis-c [1.38471328e-16 1.42808431e-01 1.42764098e-01 1.76840853e-04
 1.42620441e-01 1.42980691e-01 1.42854834e-01 1.42780639e-01
 1.43014026e-01]
  HOMO = 164.617797153818  LUMO = 391.056982492996
  mo_energy =
[-1.02072340e+02 -5.77468178e+00 -5.77468178e+00 -5.77468178e+00
 -4.56574021e-01 -4.56574021e-01 -4.56574021e-01  1.31274239e+01
  1.64617797e+02  3.91056982e+02  5.81136476e+03  5.81136476e+03
  5.81136476e+03]
E1 = -296.055795659361  E_coul = 205.00699412722173
cycle= 11 E= -91.0488015321393  delta_E= -1.55e-05  |g|= 3.86e-05  |ddm|= 0.000617
    CPU time for cycle= 11      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=4.00335e-08
Linear dependence found in DIIS error vectors.
diis-c [9.95255666e-17 1.25000000e-01 1.25000000e-01 1.25000000e-01
 1.25000000e-01 1.25000000e-01 1.25000000e-01 1.25000000e-01
 1.25000000e-01]
  HOMO = 164.617795763621  LUMO = 391.056979624997
  mo_energy =
[-1.02072340e+02 -5.77468178e+00 -5.77468178e+00 -5.77468178e+00
 -4.56574021e-01 -4.56574021e-01 -4.56574021e-01  1.31274232e+01
  1.64617796e+02  3.91056980e+02  5.81136476e+03  5.81136476e+03
  5.81136476e+03]
E1 = -296.05579549333777  E_coul = 205.00701326564663
cycle= 12 E= -91.0487822276911  delta_E= 1.93e-05  |g|= 1.14e-05  |ddm|= 0.00408
    CPU time for cycle= 12      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=4.22164e-08
Linear dependence found in DIIS error vectors.
diis-c [-1.6990077e-16  1.2500000e-01  1.2500000e-01  1.2500000e-01
  1.2500000e-01  1.2500000e-01  1.2500000e-01  1.2500000e-01
  1.2500000e-01]
  HOMO = 164.617795339055  LUMO = 391.056979028264
  mo_energy =
[-1.02072340e+02 -5.77468178e+00 -5.77468178e+00 -5.77468178e+00
 -4.56574021e-01 -4.56574021e-01 -4.56574021e-01  1.31274230e+01
  1.64617795e+02  3.91056979e+02  5.81136476e+03  5.81136476e+03
  5.81136476e+03]
E1 = -296.0557954561813  E_coul = 205.007000422097
cycle= 13 E= -91.0487950340843  delta_E= -1.28e-05  |g|= 1.96e-05  |ddm|= 0.00104
    CPU time for cycle= 13      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=2.9728e-08
Linear dependence found in DIIS error vectors.
diis-c [-3.16808068e-16  1.25000000e-01  1.25000000e-01  1.25000000e-01
  1.25000000e-01  1.25000000e-01  1.25000000e-01  1.25000000e-01
  1.25000000e-01]
  HOMO = 164.6177946022  LUMO = 391.056977182465
  mo_energy =
[-1.02072340e+02 -5.77468178e+00 -5.77468178e+00 -5.77468178e+00
 -4.56574021e-01 -4.56574021e-01 -4.56574021e-01  1.31274226e+01
  1.64617795e+02  3.91056977e+02  5.81136476e+03  5.81136476e+03
  5.81136476e+03]
E1 = -296.0557953576176  E_coul = 205.00700968714688
cycle= 14 E= -91.0487856704707  delta_E= 9.36e-06  |g|= 7.6e-06  |ddm|= 0.00236
    CPU time for cycle= 14      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=4.37209e-08
Linear dependence found in DIIS error vectors.
diis-c [-1.14389618e-16  1.25000000e-01  1.25000000e-01  1.25000000e-01
  1.25000000e-01  1.25000000e-01  1.25000000e-01  1.25000000e-01
  1.25000000e-01]
  HOMO = 164.617794706718  LUMO = 391.056977603671
  mo_energy =
[-1.02072340e+02 -5.77468178e+00 -5.77468178e+00 -5.77468178e+00
 -4.56574021e-01 -4.56574021e-01 -4.56574021e-01  1.31274227e+01
  1.64617795e+02  3.91056978e+02  5.81136476e+03  5.81136476e+03
  5.81136476e+03]
E1 = -296.0557953794612  E_coul = 205.0070085844507
cycle= 15 E= -91.0487867950105  delta_E= -1.12e-06  |g|= 4.95e-06  |ddm|= 0.000475
    CPU time for cycle= 15      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=2.33522e-08
Linear dependence found in DIIS error vectors.
diis-c [-1.22519038e-16  1.25000000e-01  1.25000000e-01  1.25000000e-01
  1.25000000e-01  1.25000000e-01  1.25000000e-01  1.25000000e-01
  1.25000000e-01]
  HOMO = 164.617794519105  LUMO = 391.056977483198
  mo_energy =
[-1.02072340e+02 -5.77468178e+00 -5.77468178e+00 -5.77468178e+00
 -4.56574021e-01 -4.56574021e-01 -4.56574021e-01  1.31274226e+01
  1.64617795e+02  3.91056977e+02  5.81136476e+03  5.81136476e+03
  5.81136476e+03]
E1 = -296.0557953641721  E_coul = 205.0070166014078
cycle= 16 E= -91.0487787627643  delta_E= 8.03e-06  |g|= 2.26e-05  |ddm|= 0.000369
    CPU time for cycle= 16      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=3.35639e-08
Linear dependence found in DIIS error vectors.
diis-c [7.98994109e-17 1.25000000e-01 1.25000000e-01 1.25000000e-01
 1.25000000e-01 1.25000000e-01 1.25000000e-01 1.25000000e-01
 1.25000000e-01]
  HOMO = 164.617794437681  LUMO = 391.056977550758
  mo_energy =
[-1.02072340e+02 -5.77468178e+00 -5.77468178e+00 -5.77468178e+00
 -4.56574021e-01 -4.56574021e-01 -4.56574021e-01  1.31274226e+01
  1.64617794e+02  3.91056978e+02  5.81136476e+03  5.81136476e+03
  5.81136476e+03]
E1 = -296.0557953570822  E_coul = 205.00700523700118
cycle= 17 E= -91.048790120081  delta_E= -1.14e-05  |g|= 5.84e-06  |ddm|= 5.74e-05
    CPU time for cycle= 17      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=2.42791e-08
Linear dependence found in DIIS error vectors.
diis-c [-1.6990077e-16  1.2500000e-01  1.2500000e-01  1.2500000e-01
  1.2500000e-01  1.2500000e-01  1.2500000e-01  1.2500000e-01
  1.2500000e-01]
  HOMO = 164.617794673497  LUMO = 391.056977536641
  mo_energy =
[-1.02072340e+02 -5.77468178e+00 -5.77468178e+00 -5.77468178e+00
 -4.56574021e-01 -4.56574021e-01 -4.56574021e-01  1.31274227e+01
  1.64617795e+02  3.91056978e+02  5.81136476e+03  5.81136476e+03
  5.81136476e+03]
E1 = -296.0557953756379  E_coul = 205.00701217796922
cycle= 18 E= -91.0487831976687  delta_E= 6.92e-06  |g|= 1.71e-05  |ddm|= 0.000374
    CPU time for cycle= 18      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=8.22851e-08
Linear dependence found in DIIS error vectors.
diis-c [-1.89526925e-16  1.25000000e-01  1.25000000e-01  1.25000000e-01
  1.25000000e-01  1.25000000e-01  1.25000000e-01  1.25000000e-01
  1.25000000e-01]
  HOMO = 164.617794887593  LUMO = 391.056979128929
  mo_energy =
[-1.02072340e+02 -5.77468178e+00 -5.77468178e+00 -5.77468178e+00
 -4.56574021e-01 -4.56574021e-01 -4.56574021e-01  1.31274228e+01
  1.64617795e+02  3.91056979e+02  5.81136476e+03  5.81136476e+03
  5.81136476e+03]
E1 = -296.0557954307919  E_coul = 205.00702038015726
cycle= 19 E= -91.0487750506346  delta_E= 8.15e-06  |g|= 2.86e-05  |ddm|= 0.00141
    CPU time for cycle= 19      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=3.79386e-08
Linear dependence found in DIIS error vectors.
diis-c [-4.42694422e-16  1.25000000e-01  1.25000000e-01  1.25000000e-01
  1.25000000e-01  1.25000000e-01  1.25000000e-01  1.25000000e-01
  1.25000000e-01]
  HOMO = 164.617797051715  LUMO = 391.056983695293
  mo_energy =
[-1.02072340e+02 -5.77468178e+00 -5.77468178e+00 -5.77468178e+00
 -4.56574021e-01 -4.56574021e-01 -4.56574021e-01  1.31274239e+01
  1.64617797e+02  3.91056984e+02  5.81136476e+03  5.81136476e+03
  5.81136476e+03]
E1 = -296.0557956799196  E_coul = 205.00700830909472
cycle= 20 E= -91.0487873708249  delta_E= -1.23e-05  |g|= 9.44e-06  |ddm|= 0.00639
    CPU time for cycle= 20      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=4.10758e-08
Linear dependence found in DIIS error vectors.
diis-c [-1.6990077e-16  1.2500000e-01  1.2500000e-01  1.2500000e-01
  1.2500000e-01  1.2500000e-01  1.2500000e-01  1.2500000e-01
  1.2500000e-01]
  HOMO = 164.617796656755  LUMO = 391.056982345569
  mo_energy =
[-1.02072340e+02 -5.77468178e+00 -5.77468178e+00 -5.77468178e+00
 -4.56574021e-01 -4.56574021e-01 -4.56574021e-01  1.31274237e+01
  1.64617797e+02  3.91056982e+02  5.81136476e+03  5.81136476e+03
  5.81136476e+03]
E1 = -296.0557956273621  E_coul = 205.00701691399877
cycle= 21 E= -91.0487787133633  delta_E= 8.66e-06  |g|= 1.36e-05  |ddm|= 0.00154
    CPU time for cycle= 21      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=4.44147e-08
Linear dependence found in DIIS error vectors.
diis-c [-2.17282501e-16  1.37268786e-01  9.58731140e-02  1.21608312e-01
  1.41831293e-01  1.40026546e-01  1.16035372e-01  1.18562804e-01
  1.28793774e-01]
  HOMO = 164.617797975101  LUMO = 391.056984614804
  mo_energy =
[-1.02072340e+02 -5.77468178e+00 -5.77468178e+00 -5.77468178e+00
 -4.56574021e-01 -4.56574021e-01 -4.56574021e-01  1.31274243e+01
  1.64617798e+02  3.91056985e+02  5.81136476e+03  5.81136476e+03
  5.81136476e+03]
E1 = -296.0557957652714  E_coul = 205.00702176631154
cycle= 22 E= -91.0487739989599  delta_E= 4.71e-06  |g|= 2.06e-05  |ddm|= 0.00355
    CPU time for cycle= 22      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=3.02726e-08
Linear dependence found in DIIS error vectors.
diis-c [-7.85046229e-17  1.25000000e-01  1.25000000e-01  1.25000000e-01
  1.25000000e-01  1.25000000e-01  1.25000000e-01  1.25000000e-01
  1.25000000e-01]
  HOMO = 164.617798982872  LUMO = 391.056986614062
  mo_energy =
[-1.02072340e+02 -5.77468178e+00 -5.77468178e+00 -5.77468178e+00
 -4.56574021e-01 -4.56574021e-01 -4.56574021e-01  1.31274248e+01
  1.64617799e+02  3.91056987e+02  5.81136476e+03  5.81136476e+03
  5.81136476e+03]
E1 = -296.05579587936626  E_coul = 205.00701690461577
cycle= 23 E= -91.0487789747505  delta_E= -4.98e-06  |g|= 7.51e-06  |ddm|= 0.00287
    CPU time for cycle= 23      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=1.82795e-08
Linear dependence found in DIIS error vectors.
diis-c [-1.18733286e-15  1.25000000e-01  1.25000000e-01  1.25000000e-01
  1.25000000e-01  1.25000000e-01  1.25000000e-01  1.25000000e-01
  1.25000000e-01]
  HOMO = 164.617799638386  LUMO = 391.056987856341
  mo_energy =
[-1.02072340e+02 -5.77468178e+00 -5.77468178e+00 -5.77468178e+00
 -4.56574021e-01 -4.56574021e-01 -4.56574021e-01  1.31274252e+01
  1.64617800e+02  3.91056988e+02  5.81136476e+03  5.81136476e+03
  5.81136476e+03]
E1 = -296.05579595299525  E_coul = 205.0070126919042
cycle= 24 E= -91.048783261091  delta_E= -4.29e-06  |g|= 5.17e-06  |ddm|= 0.00186
    CPU time for cycle= 24      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=3.09274e-08
Linear dependence found in DIIS error vectors.
diis-c [7.98994109e-17 1.25000000e-01 1.25000000e-01 1.25000000e-01
 1.25000000e-01 1.25000000e-01 1.25000000e-01 1.25000000e-01
 1.25000000e-01]
  HOMO = 164.61779926477  LUMO = 391.056987092881
  mo_energy =
[-1.02072340e+02 -5.77468178e+00 -5.77468178e+00 -5.77468178e+00
 -4.56574021e-01 -4.56574021e-01 -4.56574021e-01  1.31274250e+01
  1.64617799e+02  3.91056987e+02  5.81136476e+03  5.81136476e+03
  5.81136476e+03]
E1 = -296.0557959106288  E_coul = 205.00700477210972
cycle= 25 E= -91.0487911385191  delta_E= -7.88e-06  |g|= 2.12e-05  |ddm|= 0.00107
    CPU time for cycle= 25      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=3.07412e-08
Linear dependence found in DIIS error vectors.
diis-c [-1.89526925e-16  1.25000000e-01  1.25000000e-01  1.25000000e-01
  1.25000000e-01  1.25000000e-01  1.25000000e-01  1.25000000e-01
  1.25000000e-01]
  HOMO = 164.617799184491  LUMO = 391.056987433588
  mo_energy =
[-1.02072340e+02 -5.77468178e+00 -5.77468178e+00 -5.77468178e+00
 -4.56574021e-01 -4.56574021e-01 -4.56574021e-01  1.31274250e+01
  1.64617799e+02  3.91056987e+02  5.81136476e+03  5.81136476e+03
  5.81136476e+03]
E1 = -296.05579591654816  E_coul = 205.00701061574915
cycle= 26 E= -91.048785300799  delta_E= 5.84e-06  |g|= 8.86e-06  |ddm|= 9.79e-05
    CPU time for cycle= 26      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=2.60822e-08
Linear dependence found in DIIS error vectors.
diis-c [-3.92523115e-17  1.25000000e-01  1.25000000e-01  1.25000000e-01
  1.25000000e-01  1.25000000e-01  1.25000000e-01  1.25000000e-01
  1.25000000e-01]
  HOMO = 164.617799033817  LUMO = 391.056986301844
  mo_energy =
[-1.02072340e+02 -5.77468178e+00 -5.77468178e+00 -5.77468178e+00
 -4.56574021e-01 -4.56574021e-01 -4.56574021e-01  1.31274249e+01
  1.64617799e+02  3.91056986e+02  5.81136476e+03  5.81136476e+03
  5.81136476e+03]
E1 = -296.05579587287133  E_coul = 205.0070117385349
cycle= 27 E= -91.0487841343364  delta_E= 1.17e-06  |g|= 6.3e-06  |ddm|= 0.00101
    CPU time for cycle= 27      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=2.15571e-08
Linear dependence found in DIIS error vectors.
diis-c [1.66533454e-16 1.25000000e-01 1.25000000e-01 1.25000000e-01
 1.25000000e-01 1.25000000e-01 1.25000000e-01 1.25000000e-01
 1.25000000e-01]
  HOMO = 164.617798298328  LUMO = 391.056984555761
  mo_energy =
[-1.02072340e+02 -5.77468178e+00 -5.77468178e+00 -5.77468178e+00
 -4.56574021e-01 -4.56574021e-01 -4.56574021e-01  1.31274245e+01
  1.64617798e+02  3.91056985e+02  5.81136476e+03  5.81136476e+03
  5.81136476e+03]
E1 = -296.0557957890587  E_coul = 205.0069976410592
cycle= 28 E= -91.0487981479995  delta_E= -1.4e-05  |g|= 3.45e-05  |ddm|= 0.00228
    CPU time for cycle= 28      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=4.58864e-08
Linear dependence found in DIIS error vectors.
diis-c [-4.1157153e-16  1.2500000e-01  1.2500000e-01  1.2500000e-01
  1.2500000e-01  1.2500000e-01  1.2500000e-01  1.2500000e-01
  1.2500000e-01]
  HOMO = 164.617797397486  LUMO = 391.05698316704
  mo_energy =
[-1.02072340e+02 -5.77468178e+00 -5.77468178e+00 -5.77468178e+00
 -4.56574021e-01 -4.56574021e-01 -4.56574021e-01  1.31274240e+01
  1.64617797e+02  3.91056983e+02  5.81136476e+03  5.81136476e+03
  5.81136476e+03]
E1 = -296.0557956971032  E_coul = 205.00701333258453
cycle= 29 E= -91.0487823645186  delta_E= 1.58e-05  |g|= 3.4e-06  |ddm|= 0.0023
    CPU time for cycle= 29      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=1.19711e-08
Linear dependence found in DIIS error vectors.
diis-c [-4.1157153e-16  1.2500000e-01  1.2500000e-01  1.2500000e-01
  1.2500000e-01  1.2500000e-01  1.2500000e-01  1.2500000e-01
  1.2500000e-01]
  HOMO = 164.617797098745  LUMO = 391.056982753081
  mo_energy =
[-1.02072340e+02 -5.77468178e+00 -5.77468178e+00 -5.77468178e+00
 -4.56574021e-01 -4.56574021e-01 -4.56574021e-01  1.31274239e+01
  1.64617797e+02  3.91056983e+02  5.81136476e+03  5.81136476e+03
  5.81136476e+03]
E1 = -296.05579566465804  E_coul = 205.00701992946298
cycle= 30 E= -91.0487757351951  delta_E= 6.63e-06  |g|= 2.19e-05  |ddm|= 0.000753
    CPU time for cycle= 30      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=2.3931e-08
Linear dependence found in DIIS error vectors.
diis-c [-4.1157153e-16  1.2500000e-01  1.2500000e-01  1.2500000e-01
  1.2500000e-01  1.2500000e-01  1.2500000e-01  1.2500000e-01
  1.2500000e-01]
  HOMO = 164.617796947174  LUMO = 391.056982718536
  mo_energy =
[-1.02072340e+02 -5.77468178e+00 -5.77468178e+00 -5.77468178e+00
 -4.56574021e-01 -4.56574021e-01 -4.56574021e-01  1.31274238e+01
  1.64617797e+02  3.91056983e+02  5.81136476e+03  5.81136476e+03
  5.81136476e+03]
E1 = -296.05579565447505  E_coul = 205.0070014094897
cycle= 31 E= -91.0487942449853  delta_E= -1.85e-05  |g|= 2.14e-05  |ddm|= 0.00025
    CPU time for cycle= 31      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=3.76486e-08
Linear dependence found in DIIS error vectors.
diis-c [9.95255666e-17 1.25000000e-01 1.25000000e-01 1.25000000e-01
 1.25000000e-01 1.25000000e-01 1.25000000e-01 1.25000000e-01
 1.25000000e-01]
  HOMO = 164.617795693697  LUMO = 391.05698019907
  mo_energy =
[-1.02072340e+02 -5.77468178e+00 -5.77468178e+00 -5.77468178e+00
 -4.56574021e-01 -4.56574021e-01 -4.56574021e-01  1.31274232e+01
  1.64617796e+02  3.91056980e+02  5.81136476e+03  5.81136476e+03
  5.81136476e+03]
E1 = -296.0557955048198  E_coul = 205.00699785351088
cycle= 32 E= -91.0487976513089  delta_E= -3.41e-06  |g|= 2.35e-05  |ddm|= 0.00365
    CPU time for cycle= 32      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=4.51763e-08
Linear dependence found in DIIS error vectors.
diis-c [-1.89526925e-16  1.25000000e-01  1.25000000e-01  1.25000000e-01
  1.25000000e-01  1.25000000e-01  1.25000000e-01  1.25000000e-01
  1.25000000e-01]
  HOMO = 164.61779451456  LUMO = 391.056978190275
  mo_energy =
[-1.02072340e+02 -5.77468178e+00 -5.77468178e+00 -5.77468178e+00
 -4.56574021e-01 -4.56574021e-01 -4.56574021e-01  1.31274226e+01
  1.64617795e+02  3.91056978e+02  5.81136476e+03  5.81136476e+03
  5.81136476e+03]
E1 = -296.05579537540046  E_coul = 205.00702417525503
cycle= 33 E= -91.0487712001454  delta_E= 2.65e-05  |g|= 4.12e-05  |ddm|= 0.0032
    CPU time for cycle= 33      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=5.44229e-08
Linear dependence found in DIIS error vectors.
diis-c [-1.97656345e-16  1.25000000e-01  1.25000000e-01  1.25000000e-01
  1.25000000e-01  1.25000000e-01  1.25000000e-01  1.25000000e-01
  1.25000000e-01]
  HOMO = 164.617796146494  LUMO = 391.05698150909
  mo_energy =
[-1.02072340e+02 -5.77468178e+00 -5.77468178e+00 -5.77468178e+00
 -4.56574021e-01 -4.56574021e-01 -4.56574021e-01  1.31274234e+01
  1.64617796e+02  3.91056982e+02  5.81136476e+03  5.81136476e+03
  5.81136476e+03]
E1 = -296.05579557198485  E_coul = 205.00702320354702
cycle= 34 E= -91.0487723684378  delta_E= -1.17e-06  |g|= 3.44e-05  |ddm|= 0.00473
    CPU time for cycle= 34      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=4.57075e-08
Linear dependence found in DIIS error vectors.
diis-c [-4.1157153e-16  1.2500000e-01  1.2500000e-01  1.2500000e-01
  1.2500000e-01  1.2500000e-01  1.2500000e-01  1.2500000e-01
  1.2500000e-01]
  HOMO = 164.617797193052  LUMO = 391.056984027438
  mo_energy =
[-1.02072340e+02 -5.77468178e+00 -5.77468178e+00 -5.77468178e+00
 -4.56574021e-01 -4.56574021e-01 -4.56574021e-01  1.31274239e+01
  1.64617797e+02  3.91056984e+02  5.81136476e+03  5.81136476e+03
  5.81136476e+03]
E1 = -296.05579570257834  E_coul = 205.00702228635598
cycle= 35 E= -91.0487734162224  delta_E= -1.05e-06  |g|= 2.62e-05  |ddm|= 0.00332
    CPU time for cycle= 35      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=4.6005e-08
Linear dependence found in DIIS error vectors.
diis-c [-2.45038077e-16  1.25000000e-01  1.25000000e-01  1.25000000e-01
  1.25000000e-01  1.25000000e-01  1.25000000e-01  1.25000000e-01
  1.25000000e-01]
  HOMO = 164.617798080245  LUMO = 391.056986145799
  mo_energy =
[-1.02072340e+02 -5.77468178e+00 -5.77468178e+00 -5.77468178e+00
 -4.56574021e-01 -4.56574021e-01 -4.56574021e-01  1.31274244e+01
  1.64617798e+02  3.91056986e+02  5.81136476e+03  5.81136476e+03
  5.81136476e+03]
E1 = -296.0557958172674  E_coul = 205.00701475085336
cycle= 36 E= -91.048781066414  delta_E= -7.65e-06  |g|= 4.79e-06  |ddm|= 0.00281
    CPU time for cycle= 36      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=2.6701e-08
Linear dependence found in DIIS error vectors.
diis-c [-2.17282501e-16  1.25000000e-01  1.25000000e-01  1.25000000e-01
  1.25000000e-01  1.25000000e-01  1.25000000e-01  1.25000000e-01
  1.25000000e-01]
  HOMO = 164.617799479112  LUMO = 391.056989098301
  mo_energy =
[-1.02072340e+02 -5.77468178e+00 -5.77468178e+00 -5.77468178e+00
 -4.56574021e-01 -4.56574021e-01 -4.56574021e-01  1.31274251e+01
  1.64617799e+02  3.91056989e+02  5.81136476e+03  5.81136476e+03
  5.81136476e+03]
E1 = -296.05579597966283  E_coul = 205.00701626502274
cycle= 37 E= -91.0487797146401  delta_E= 1.35e-06  |g|= 1.81e-06  |ddm|= 0.00415
    CPU time for cycle= 37      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=2.7534e-08
Linear dependence found in DIIS error vectors.
diis-c [-3.00549228e-16  1.25000000e-01  1.25000000e-01  1.25000000e-01
  1.25000000e-01  1.25000000e-01  1.25000000e-01  1.25000000e-01
  1.25000000e-01]
  HOMO = 164.617799697026  LUMO = 391.056989559665
  mo_energy =
[-1.02072340e+02 -5.77468178e+00 -5.77468178e+00 -5.77468178e+00
 -4.56574021e-01 -4.56574021e-01 -4.56574021e-01  1.31274252e+01
  1.64617800e+02  3.91056990e+02  5.81136476e+03  5.81136476e+03
  5.81136476e+03]
E1 = -296.0557960049513  E_coul = 205.007002499283
cycle= 38 E= -91.0487935056683  delta_E= -1.38e-05  |g|= 3.29e-05  |ddm|= 0.000673
    CPU time for cycle= 38      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=5.79578e-08
Linear dependence found in DIIS error vectors.
diis-c [-1.22519038e-16  1.25000000e-01  1.25000000e-01  1.25000000e-01
  1.25000000e-01  1.25000000e-01  1.25000000e-01  1.25000000e-01
  1.25000000e-01]
  HOMO = 164.617798245507  LUMO = 391.056986064048
  mo_energy =
[-1.02072340e+02 -5.77468178e+00 -5.77468178e+00 -5.77468178e+00
 -4.56574021e-01 -4.56574021e-01 -4.56574021e-01  1.31274245e+01
  1.64617798e+02  3.91056986e+02  5.81136476e+03  5.81136476e+03
  5.81136476e+03]
E1 = -296.0557958227723  E_coul = 205.0070104956043
cycle= 39 E= -91.048785327168  delta_E= 8.18e-06  |g|= 7.99e-06  |ddm|= 0.00458
    CPU time for cycle= 39      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=4.16842e-08
Linear dependence found in DIIS error vectors.
diis-c [-1.6990077e-16  1.2500000e-01  1.2500000e-01  1.2500000e-01
  1.2500000e-01  1.2500000e-01  1.2500000e-01  1.2500000e-01
  1.2500000e-01]
  HOMO = 164.617798966089  LUMO = 391.056987337983
  mo_energy =
[-1.02072340e+02 -5.77468178e+00 -5.77468178e+00 -5.77468178e+00
 -4.56574021e-01 -4.56574021e-01 -4.56574021e-01  1.31274249e+01
  1.64617799e+02  3.91056987e+02  5.81136476e+03  5.81136476e+03
  5.81136476e+03]
E1 = -296.0557959009511  E_coul = 205.00701796292554
cycle= 40 E= -91.0487779380256  delta_E= 7.39e-06  |g|= 8.42e-06  |ddm|= 0.00198
    CPU time for cycle= 40      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=3.52456e-08
Linear dependence found in DIIS error vectors.
diis-c [-3.03916544e-16  1.25000000e-01  1.25000000e-01  1.25000000e-01
  1.25000000e-01  1.25000000e-01  1.25000000e-01  1.25000000e-01
  1.25000000e-01]
  HOMO = 164.61780059989  LUMO = 391.056990270222
  mo_energy =
[-1.02072340e+02 -5.77468178e+00 -5.77468178e+00 -5.77468178e+00
 -4.56574021e-01 -4.56574021e-01 -4.56574021e-01  1.31274257e+01
  1.64617801e+02  3.91056990e+02  5.81136476e+03  5.81136476e+03
  5.81136476e+03]
E1 = -296.0557960806545  E_coul = 205.00699631407107
cycle= 41 E= -91.0487997665834  delta_E= -2.18e-05  |g|= 4.81e-05  |ddm|= 0.0045
    CPU time for cycle= 41      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=6.01586e-08
Linear dependence found in DIIS error vectors.
diis-c [-3.16808068e-16  1.25000000e-01  1.25000000e-01  1.25000000e-01
  1.25000000e-01  1.25000000e-01  1.25000000e-01  1.25000000e-01
  1.25000000e-01]
  HOMO = 164.617798267972  LUMO = 391.056985226107
  mo_energy =
[-1.02072340e+02 -5.77468178e+00 -5.77468178e+00 -5.77468178e+00
 -4.56574021e-01 -4.56574021e-01 -4.56574021e-01  1.31274245e+01
  1.64617798e+02  3.91056985e+02  5.81136476e+03  5.81136476e+03
  5.81136476e+03]
E1 = -296.05579580335  E_coul = 205.0070051204177
cycle= 42 E= -91.0487906829323  delta_E= 9.08e-06  |g|= 1.86e-05  |ddm|= 0.00699
    CPU time for cycle= 42      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=2.22687e-08
Linear dependence found in DIIS error vectors.
diis-c [-2.45038077e-16  1.25000000e-01  1.25000000e-01  1.25000000e-01
  1.25000000e-01  1.25000000e-01  1.25000000e-01  1.25000000e-01
  1.25000000e-01]
  HOMO = 164.61779677005  LUMO = 391.056981552255
  mo_energy =
[-1.02072340e+02 -5.77468178e+00 -5.77468178e+00 -5.77468178e+00
 -4.56574021e-01 -4.56574021e-01 -4.56574021e-01  1.31274237e+01
  1.64617797e+02  3.91056982e+02  5.81136476e+03  5.81136476e+03
  5.81136476e+03]
E1 = -296.05579561576354  E_coul = 205.0070264526653
cycle= 43 E= -91.0487691630983  delta_E= 2.15e-05  |g|= 3.69e-05  |ddm|= 0.00481
    CPU time for cycle= 43      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=4.68662e-08
Linear dependence found in DIIS error vectors.
diis-c [-1.12032497e-15  1.25000000e-01  1.25000000e-01  1.25000000e-01
  1.25000000e-01  1.25000000e-01  1.25000000e-01  1.25000000e-01
  1.25000000e-01]
  HOMO = 164.617797112684  LUMO = 391.056982047072
  mo_energy =
[-1.02072340e+02 -5.77468178e+00 -5.77468178e+00 -5.77468178e+00
 -4.56574021e-01 -4.56574021e-01 -4.56574021e-01  1.31274239e+01
  1.64617797e+02  3.91056982e+02  5.81136476e+03  5.81136476e+03
  5.81136476e+03]
E1 = -296.0557956426787  E_coul = 205.00700832503637
cycle= 44 E= -91.0487873176423  delta_E= -1.82e-05  |g|= 6.16e-06  |ddm|= 0.000834
    CPU time for cycle= 44      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=2.68416e-08
Linear dependence found in DIIS error vectors.
diis-c [-3.00549228e-16  1.25000000e-01  1.25000000e-01  1.25000000e-01
  1.25000000e-01  1.25000000e-01  1.25000000e-01  1.25000000e-01
  1.25000000e-01]
  HOMO = 164.617796616344  LUMO = 391.056980636618
  mo_energy =
[-1.02072340e+02 -5.77468178e+00 -5.77468178e+00 -5.77468178e+00
 -4.56574021e-01 -4.56574021e-01 -4.56574021e-01  1.31274236e+01
  1.64617797e+02  3.91056981e+02  5.81136476e+03  5.81136476e+03
  5.81136476e+03]
E1 = -296.05579557477694  E_coul = 205.00702300545657
cycle= 45 E= -91.0487725693204  delta_E= 1.47e-05  |g|= 3.17e-05  |ddm|= 0.00177
    CPU time for cycle= 45      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=4.25494e-08
Linear dependence found in DIIS error vectors.
diis-c [-1.6990077e-16  1.2500000e-01  1.2500000e-01  1.2500000e-01
  1.2500000e-01  1.2500000e-01  1.2500000e-01  1.2500000e-01
  1.2500000e-01]
  HOMO = 164.617797200241  LUMO = 391.056982090842
  mo_energy =
[-1.02072340e+02 -5.77468178e+00 -5.77468178e+00 -5.77468178e+00
 -4.56574021e-01 -4.56574021e-01 -4.56574021e-01  1.31274239e+01
  1.64617797e+02  3.91056982e+02  5.81136476e+03  5.81136476e+03
  5.81136476e+03]
E1 = -296.05579565114255  E_coul = 205.00701949715443
cycle= 46 E= -91.0487761539881  delta_E= -3.58e-06  |g|= 1.94e-05  |ddm|= 0.00187
    CPU time for cycle= 46      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=2.34735e-08
Linear dependence found in DIIS error vectors.
diis-c [-9.14539207e-16  1.25000000e-01  1.25000000e-01  1.25000000e-01
  1.25000000e-01  1.25000000e-01  1.25000000e-01  1.25000000e-01
  1.25000000e-01]
  HOMO = 164.617798622798  LUMO = 391.05698529641
  mo_energy =
[-1.02072340e+02 -5.77468178e+00 -5.77468178e+00 -5.77468178e+00
 -4.56574021e-01 -4.56574021e-01 -4.56574021e-01  1.31274246e+01
  1.64617799e+02  3.91056985e+02  5.81136476e+03  5.81136476e+03
  5.81136476e+03]
E1 = -296.05579582402646  E_coul = 205.00701427206968
cycle= 47 E= -91.0487815519568  delta_E= -5.4e-06  |g|= 2.7e-06  |ddm|= 0.00434
    CPU time for cycle= 47      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=1.70316e-08
Linear dependence found in DIIS error vectors.
diis-c [-1.6990077e-16  1.2500000e-01  1.2500000e-01  1.2500000e-01
  1.2500000e-01  1.2500000e-01  1.2500000e-01  1.2500000e-01
  1.2500000e-01]
  HOMO = 164.617798940112  LUMO = 391.056985916042
  mo_energy =
[-1.02072340e+02 -5.77468178e+00 -5.77468178e+00 -5.77468178e+00
 -4.56574021e-01 -4.56574021e-01 -4.56574021e-01  1.31274248e+01
  1.64617799e+02  3.91056986e+02  5.81136476e+03  5.81136476e+03
  5.81136476e+03]
E1 = -296.0557958600591  E_coul = 205.00702252769997
cycle= 48 E= -91.0487733323591  delta_E= 8.22e-06  |g|= 2.4e-05  |ddm|= 0.000891
    CPU time for cycle= 48      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=4.747e-08
Linear dependence found in DIIS error vectors.
diis-c [7.1769991e-17 1.2500000e-01 1.2500000e-01 1.2500000e-01 1.2500000e-01
 1.2500000e-01 1.2500000e-01 1.2500000e-01 1.2500000e-01]
  HOMO = 164.617799301923  LUMO = 391.056987254824
  mo_energy =
[-1.02072340e+02 -5.77468178e+00 -5.77468178e+00 -5.77468178e+00
 -4.56574021e-01 -4.56574021e-01 -4.56574021e-01  1.31274250e+01
  1.64617799e+02  3.91056987e+02  5.81136476e+03  5.81136476e+03
  5.81136476e+03]
E1 = -296.0557959173906  E_coul = 205.00701932100637
cycle= 49 E= -91.0487765963842  delta_E= -3.26e-06  |g|= 1.05e-05  |ddm|= 0.00148
    CPU time for cycle= 49      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=2.79614e-08
Linear dependence found in DIIS error vectors.
diis-c [-1.06260199e-16  1.25000000e-01  1.25000000e-01  1.25000000e-01
  1.25000000e-01  1.25000000e-01  1.25000000e-01  1.25000000e-01
  1.25000000e-01]
  HOMO = 164.617801204706  LUMO = 391.056991174562
  mo_energy =
[-1.02072340e+02 -5.77468178e+00 -5.77468178e+00 -5.77468178e+00
 -4.56574021e-01 -4.56574021e-01 -4.56574021e-01  1.31274260e+01
  1.64617801e+02  3.91056991e+02  5.81136476e+03  5.81136476e+03
  5.81136476e+03]
E1 = -296.0557961386376  E_coul = 205.0070147625585
cycle= 50 E= -91.0487813760791  delta_E= -4.78e-06  |g|= 8.49e-06  |ddm|= 0.00559
    CPU time for cycle= 50      0.02 sec, wall time      0.02 sec
E1 = -296.0557961386376  E_coul = 205.0070147625585

WARN: 	An extra scf cycle is going to be run
	in order to restore the mo_energy derivatives
	missing in implicit differentiation.

  HOMO = 164.617799400452  LUMO = 391.056984285664
  mo_energy =
[-1.02072340e+02 -5.77468178e+00 -5.77468178e+00 -5.77468178e+00
 -4.56574021e-01 -4.56574021e-01 -4.56574021e-01  1.31274249e+01
  1.64617799e+02  3.91056984e+02  5.81136476e+03  5.81136476e+03
  5.81136476e+03]
E1 = -296.0557958464482  E_coul = 205.0070038225974
Extra cycle  E= -91.0487920238508  delta_E= -1.06e-05  |g|= 2.35e-05  |ddm|= 0.0075
    CPU time for scf_cycle      8.36 sec, wall time      1.10 sec
exp = [4.19278241e+01 8.97615853e+01 6.81982037e+01 4.00759546e+01
 4.33980425e+00 9.93211875e-02 2.69396455e+03]
E = -91.04879202385078
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
number_of_s_exps = 4
number_of_p_exps = 3

exps = np.zeros((number_of_s_exps+number_of_p_exps,2))
#exps[:, 0] = decaying_nums(5)

# S
exps[0,0] = 20.0
exps[1,0] = 9.5045827955887916e+01
exps[2,0] = 4.4881042475048387e+00 
exps[3,0] = 3.9799528004692630e-01
             
# P          
exps[3,0] = 3.0108199280832128e+01
exps[4,0] = 6.1393781325590453e+00
exps[5,0] = 4.8929328703550412e-01

basis =  str(number_of_s_exps)+"s"+str(number_of_p_exps)+"p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc21115.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 24
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 18 14:57:54 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35677784.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 32000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 32000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 32000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  29.7092764117        1
[INPUT] 0    0    [1    /1   ]  92.8595372983        1
[INPUT] 0    0    [1    /1   ]  34.0970136934        1
[INPUT] 0    0    [1    /1   ]  34.2370145916        1
[INPUT] 1    0    [1    /1   ]  6.50960202319        1
[INPUT] 1    0    [1    /1   ]  0.148979392586       1
[INPUT] 1    0    [1    /1   ]  2693.9646477         1

nuclear repulsion = 0
number of shells = 7
number of NR pGTOs = 13
number of NR cGTOs = 13
basis = {'Ar': [[0, [29.709276411710977, 1.0]], [0, [92.85953729828145, 1.0]], [0, [34.09701369343197, 1.0]], [0, [34.237014591567174, 1.0]], [1, [6.509602023188006, 1.0]], [1, [0.1489793925857307, 1.0]], [1, [2693.9646476960247, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [29.70927641]
bas 1, expnt(s) = [92.8595373]
bas 2, expnt(s) = [34.09701369]
bas 3, expnt(s) = [34.23701459]
bas 4, expnt(s) = [6.50960202]
bas 5, expnt(s) = [0.14897939]
bas 6, expnt(s) = [2693.9646477]
CPU time:        81.21
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  1  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]
 [ 0  1  1  1  0 36 37  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 2.97092764e+01 3.21502297e+01 9.28595373e+01 7.55761755e+01
 3.40970137e+01 3.56494047e+01 3.42370146e+01 3.57591297e+01
 6.50960202e+00 3.03338434e+01 1.48979393e-01 2.70017643e-01
 2.69396465e+03 5.66205727e+04]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 12.528879284858704
cond(S) = 789699100.6472278

WARN: Singularity detected in overlap matrix (condition number = 7.9e+08). SCF may be inaccurate and hard to converge.

E1 = -511.83753123142867  E_coul = 107.52831282737039
init E= -404.309218404058
    CPU time for initialize scf      5.85 sec, wall time      0.27 sec
  HOMO = 95.4921137099743  LUMO = 253.783628544028
  mo_energy =
[-1.13817848e+02 -1.31313738e+01 -1.31313738e+01 -1.31313738e+01
 -7.34722471e+00 -2.36694785e+00 -2.36694785e+00 -2.36694785e+00
  9.54921137e+01  2.53783629e+02  5.79229618e+03  5.79229618e+03
  5.79229618e+03]
E1 = -447.8989157411873  E_coul = 207.08609095890841
cycle= 1 E= -240.812824782279  delta_E=  163  |g|= 19.6  |ddm|= 8.17e+07
    CPU time for cycle= 1      0.23 sec, wall time      0.01 sec
diis-norm(errvec)=0.350574
diis-c [-0.12290181  1.        ]
  HOMO = 98.1877183700038  LUMO = 255.193899203089
  mo_energy =
[-9.95639822e+01 -4.92942521e+00 -4.92942521e+00 -4.92942521e+00
 -4.67024392e-01 -4.67024392e-01 -4.67024392e-01  1.50239341e-01
  9.81877184e+01  2.55193899e+02  5.80915725e+03  5.80915725e+03
  5.80915725e+03]
E1 = -444.502957675029  E_coul = 206.32455130652752
cycle= 2 E= -238.178406368501  delta_E= 2.63  |g|= 4.18  |ddm|= 2.3e+07
    CPU time for cycle= 2      0.11 sec, wall time      0.01 sec
diis-norm(errvec)=0.0160795
diis-c [-2.54223144e-04 -5.97467353e-03  1.00597467e+00]
  HOMO = 99.4787252863704  LUMO = 257.732078389744
  mo_energy =
[-9.97898293e+01 -4.95413034e+00 -4.95413034e+00 -4.95413034e+00
 -4.67313730e-01 -4.67313730e-01 -4.67313730e-01  6.32965979e-01
  9.94787253e+01  2.57732078e+02  5.80867856e+03  5.80867856e+03
  5.80867856e+03]
E1 = -445.38422854681863  E_coul = 206.1337518649185
cycle= 3 E= -239.2504766819  delta_E= -1.07  |g|= 1.57  |ddm|= 4.88e+06
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.00321324
diis-c [-5.88819930e-08  3.37848281e-04  1.64912352e-01  8.34749800e-01]
  HOMO = 99.0719730225012  LUMO = 256.955644568135
  mo_energy =
[-9.97574911e+01 -4.94995032e+00 -4.94995032e+00 -4.94995032e+00
 -4.67265199e-01 -4.67265199e-01 -4.67265199e-01  4.76275199e-01
  9.90719730e+01  2.56955645e+02  5.80875265e+03  5.80875265e+03
  5.80875265e+03]
E1 = -445.11782535060394  E_coul = 207.54611548148418
cycle= 4 E= -237.57170986912  delta_E= 1.68  |g|= 3.49  |ddm|= 1.53e+06
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.00128808
diis-c [-8.11440417e-09  7.30742465e-04  2.44590277e-01  1.13056063e+00
 -3.75881653e-01]
  HOMO = 98.6897014107974  LUMO = 256.185823629663
  mo_energy =
[-9.97636486e+01 -4.94975184e+00 -4.94975184e+00 -4.94975184e+00
 -4.67262888e-01 -4.67262888e-01 -4.67262888e-01  3.28085523e-01
  9.86897014e+01  2.56185824e+02  5.80875628e+03  5.80875628e+03
  5.80875628e+03]
E1 = -444.84553759109195  E_coul = 201.3140110290199
cycle= 5 E= -243.531526562072  delta_E= -5.96  |g|= 9.54  |ddm|= 1.51e+06
    CPU time for cycle= 5      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.00226814
diis-c [-2.63410938e-11  7.71954559e-04  2.59972049e-01  1.14310302e+00
 -2.35059641e-01 -1.68787387e-01]
  HOMO = 99.3886287207909  LUMO = 257.562481572158
  mo_energy =
[-9.97471676e+01 -4.94952940e+00 -4.94952940e+00 -4.94952940e+00
 -4.67260298e-01 -4.67260298e-01 -4.67260298e-01  6.01593156e-01
  9.93886287e+01  2.57562482e+02  5.80876035e+03  5.80876035e+03
  5.80876035e+03]
E1 = -445.3319189488097  E_coul = 196.6453879734049
cycle= 6 E= -248.686530975405  delta_E= -5.16  |g|= 23.8  |ddm|= 2.73e+06
    CPU time for cycle= 6      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.00120304
diis-c [-4.87963192e-12 -3.15583596e-04  1.18805387e-01  2.67744694e-01
  1.20876560e+00 -1.29454494e+00  6.99544844e-01]
  HOMO = 99.7689850821376  LUMO = 258.359146964553
  mo_energy =
[-9.97226306e+01 -4.94788232e+00 -4.94788232e+00 -4.94788232e+00
 -4.67241118e-01 -4.67241118e-01 -4.67241118e-01  7.49065653e-01
  9.97689851e+01  2.58359147e+02  5.80879050e+03  5.80879050e+03
  5.80879050e+03]
E1 = -445.5931990509898  E_coul = 208.78942487345716
cycle= 7 E= -236.803774177533  delta_E= 11.9  |g|= 3.43  |ddm|= 1.53e+06
    CPU time for cycle= 7      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.000276001
diis-c [-7.82939053e-14  1.37903137e-05  1.96123401e-02  6.84154486e-03
  2.69841862e-01 -2.75713418e-01  2.57477308e-01  7.21926574e-01]
  HOMO = 99.7472015979279  LUMO = 258.305074568513
  mo_energy =
[-9.97244662e+01 -4.94800880e+00 -4.94800880e+00 -4.94800880e+00
 -4.67242601e-01 -4.67242601e-01 -4.67242601e-01  7.40852745e-01
  9.97472016e+01  2.58305075e+02  5.80878819e+03  5.80878819e+03
  5.80878819e+03]
E1 = -445.5770361411172  E_coul = 204.56241398540828
cycle= 8 E= -241.014622155709  delta_E= -4.21  |g|= 6.62  |ddm|= 9.64e+04
    CPU time for cycle= 8      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.00116639
diis-c [-2.65589437e-14  7.36244449e-05  6.39153644e-03 -2.77902436e-01
  6.58952852e-01 -7.60785970e-01  6.51320527e-01  1.01690130e+00
 -2.94951436e-01]
  HOMO = 99.9452242642489  LUMO = 258.719238974359
  mo_energy =
[-9.97118808e+01 -4.94716094e+00 -4.94716094e+00 -4.94716094e+00
 -4.67232723e-01 -4.67232723e-01 -4.67232723e-01  8.16651526e-01
  9.99452243e+01  2.58719239e+02  5.80880376e+03  5.80880376e+03
  5.80880376e+03]
E1 = -445.70920181166093  E_coul = 200.8421776228366
cycle= 9 E= -244.867024188824  delta_E= -3.85  |g|= 16.4  |ddm|= 7.95e+05
    CPU time for cycle= 9      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.000811262
diis-c [-1.36769617e-15 -1.41739916e-01  1.72923223e-02 -9.08797898e-02
  3.41527071e-01 -4.61354323e-01  5.19794323e-01  9.57967465e-01
 -1.42607153e-01]
  HOMO = 99.8080723783059  LUMO = 258.424466456574
  mo_energy =
[-9.97209170e+01 -4.94777289e+00 -4.94777289e+00 -4.94777289e+00
 -4.67239854e-01 -4.67239854e-01 -4.67239854e-01  7.64823640e-01
  9.98080724e+01  2.58424466e+02  5.80879252e+03  5.80879252e+03
  5.80879252e+03]
E1 = -445.6167072658639  E_coul = 204.15241109291577
cycle= 10 E= -241.464296172948  delta_E=  3.4  |g|= 7.83  |ddm|= 5.57e+05
    CPU time for cycle= 10      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.000899691
diis-c [-5.71215834e-14  1.26348843e-01 -2.11440477e-01 -2.07662473e-01
  4.53382827e-01 -5.38784753e-01  4.10545285e-01  9.44291315e-01
  2.33194318e-02]
  HOMO = 99.9381218695794  LUMO = 258.701334293185
  mo_energy =
[-9.97123454e+01 -4.94718658e+00 -4.94718658e+00 -4.94718658e+00
 -4.67233022e-01 -4.67233022e-01 -4.67233022e-01  8.14484527e-01
  9.99381219e+01  2.58701334e+02  5.80880326e+03  5.80880326e+03
  5.80880326e+03]
E1 = -445.7040756513529  E_coul = 212.2874994300526
cycle= 11 E= -233.4165762213  delta_E= 8.05  |g|= 11.1  |ddm|= 5.27e+05
    CPU time for cycle= 11      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.00060925
diis-c [-3.58499373e-15  2.95664050e-01 -4.21816063e-01 -3.20423414e-01
 -3.54063848e-02 -4.33162359e-03 -1.95403510e-01  1.15618667e+00
  5.25530273e-01]
  HOMO = 99.837597807734  LUMO = 258.486442251114
  mo_energy =
[-9.97187299e+01 -4.94760887e+00 -4.94760887e+00 -4.94760887e+00
 -4.67237945e-01 -4.67237945e-01 -4.67237945e-01  7.76561309e-01
  9.98375978e+01  2.58486442e+02  5.80879547e+03  5.80879547e+03
  5.80879547e+03]
E1 = -445.63657140048315  E_coul = 203.25825193075693
cycle= 12 E= -242.378319469726  delta_E= -8.96  |g|= 10.1  |ddm|= 4.07e+05
    CPU time for cycle= 12      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.000595626
Linear dependence found in DIIS error vectors.
diis-c [-1.98355532e-14  1.30369664e-01 -5.56943151e-02  6.96902303e-02
  5.90134458e-01 -2.42480683e-02 -2.84709076e-01  3.60486171e-01
  2.13970937e-01]
  HOMO = 99.9578060780925  LUMO = 258.746950906029
  mo_energy =
[-9.97110692e+01 -4.94709540e+00 -4.94709540e+00 -4.94709540e+00
 -4.67231962e-01 -4.67231962e-01 -4.67231962e-01  8.22657753e-01
  9.99578061e+01  2.58746951e+02  5.80880484e+03  5.80880484e+03
  5.80880484e+03]
E1 = -445.71782395124876  E_coul = 199.59869270616176
cycle= 13 E= -246.119131245087  delta_E= -3.74  |g|= 19.4  |ddm|= 4.91e+05
    CPU time for cycle= 13      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.000894971
Linear dependence found in DIIS error vectors.
diis-c [-5.01930831e-15  3.12052866e-02  4.75934813e-01 -6.63572635e-01
  5.13370505e-01 -5.15809452e-01 -1.05027690e-01  1.25468509e+00
  9.21407929e-03]
  HOMO = 99.6539887042234  LUMO = 258.110845194682
  mo_energy =
[-9.97299910e+01 -4.94836981e+00 -4.94836981e+00 -4.94836981e+00
 -4.67246823e-01 -4.67246823e-01 -4.67246823e-01  7.04608663e-01
  9.96539887e+01  2.58110845e+02  5.80878157e+03  5.80878157e+03
  5.80878157e+03]
E1 = -445.5140189314083  E_coul = 206.03172418431376
cycle= 14 E= -239.482294747095  delta_E= 6.64  |g|= 2.59  |ddm|= 1.22e+06
    CPU time for cycle= 14      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.000413542
Linear dependence found in DIIS error vectors.
diis-c [-9.19304324e-15  1.06920392e-01  3.43421289e-01 -5.71564750e-01
  4.83424182e-01 -4.76100879e-01 -3.63873007e-01  1.51576547e+00
 -3.79926944e-02]
  HOMO = 99.694229731376  LUMO = 258.186502343269
  mo_energy =
[-9.97278841e+01 -4.94823392e+00 -4.94823392e+00 -4.94823392e+00
 -4.67245241e-01 -4.67245241e-01 -4.67245241e-01  7.20998659e-01
  9.96942297e+01  2.58186502e+02  5.80878405e+03  5.80878405e+03
  5.80878405e+03]
E1 = -445.5399893055792  E_coul = 211.89185998650214
cycle= 15 E= -233.648129319077  delta_E= 5.83  |g|= 11.2  |ddm|= 1.54e+05
    CPU time for cycle= 15      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.000777861
Linear dependence found in DIIS error vectors.
diis-c [-9.71831978e-14 -1.49688872e-01  2.69987391e-01 -5.72156085e-01
  3.03266785e-01  9.65505531e-02  7.51829182e-01  8.36930440e-01
 -5.36719395e-01]
  HOMO = 99.5367356922096  LUMO = 257.880611730771
  mo_energy =
[-9.97364919e+01 -4.94879176e+00 -4.94879176e+00 -4.94879176e+00
 -4.67251717e-01 -4.67251717e-01 -4.67251717e-01  6.57684237e-01
  9.95367357e+01  2.57880612e+02  5.80877385e+03  5.80877385e+03
  5.80877385e+03]
E1 = -445.43617748776387  E_coul = 202.39966928115558
cycle= 16 E= -243.036508206608  delta_E= -9.39  |g|= 10.7  |ddm|= 6.12e+05
    CPU time for cycle= 16      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.000638064
diis-c [-4.39678782e-17 -6.10222681e-01  7.76731488e-01 -3.21445040e-03
 -8.29179327e-02 -1.75841701e-01  7.30204194e-01 -1.03474019e-01
  4.68735102e-01]
  HOMO = 99.4702074486886  LUMO = 257.752989741076
  mo_energy =
[-9.97413424e+01 -4.94915249e+00 -4.94915249e+00 -4.94915249e+00
 -4.67255920e-01 -4.67255920e-01 -4.67255920e-01  6.31227752e-01
  9.94702074e+01  2.57752990e+02  5.80876731e+03  5.80876731e+03
  5.80876731e+03]
E1 = -445.3919757073432  E_coul = 207.9176105356268
cycle= 17 E= -237.474365171716  delta_E= 5.56  |g|= 2.55  |ddm|= 2.58e+05
    CPU time for cycle= 17      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.000968971
diis-c [-3.76333569e-16  3.04216162e-01 -8.80867698e-03 -9.82129893e-03
 -3.77110479e-01  6.19033589e-02  6.05318173e-01  1.27791014e-01
  2.96511747e-01]
  HOMO = 99.5137063752224  LUMO = 257.835179611376
  mo_energy =
[-9.97384812e+01 -4.94894810e+00 -4.94894810e+00 -4.94894810e+00
 -4.67253531e-01 -4.67253531e-01 -4.67253531e-01  6.48567806e-01
  9.95137064e+01  2.57835180e+02  5.80877106e+03  5.80877106e+03
  5.80877106e+03]
E1 = -445.4206406965187  E_coul = 205.55150997856032
cycle= 18 E= -239.869130717958  delta_E= -2.39  |g|= 3.15  |ddm|= 1.67e+05
    CPU time for cycle= 18      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.000412763
Linear dependence found in DIIS error vectors.
diis-c [-7.93249897e-16  2.87553104e-01  1.88407989e-01  1.00320312e-01
 -4.18660080e-01  7.45095017e-02  4.85725009e-01  1.23238604e-02
  2.69820303e-01]
  HOMO = 99.5187855690763  LUMO = 257.849985623926
  mo_energy =
[-9.97381288e+01 -4.94892830e+00 -4.94892830e+00 -4.94892830e+00
 -4.67253300e-01 -4.67253300e-01 -4.67253300e-01  6.50209440e-01
  9.95187856e+01  2.57849986e+02  5.80877143e+03  5.80877143e+03
  5.80877143e+03]
E1 = -445.42480615892043  E_coul = 212.18801644480087
cycle= 19 E= -233.23678971412  delta_E= 6.63  |g|= 12.6  |ddm|= 2.42e+04
    CPU time for cycle= 19      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.0005658
diis-c [-3.80251219e-16  2.99857340e-01  1.47847424e-02  7.05909795e-03
 -3.69436697e-01  5.52495931e-02  5.88126966e-01  1.10341545e-01
  2.94017414e-01]
  HOMO = 99.5146657663381  LUMO = 257.837665089465
  mo_energy =
[-9.97384163e+01 -4.94894418e+00 -4.94894418e+00 -4.94894418e+00
 -4.67253486e-01 -4.67253486e-01 -4.67253486e-01  6.48898873e-01
  9.95146658e+01  2.57837665e+02  5.80877114e+03  5.80877114e+03
  5.80877114e+03]
E1 = -445.4213804533428  E_coul = 208.68667795312396
cycle= 20 E= -236.734702500219  delta_E= -3.5  |g|= 4.26  |ddm|= 1.99e+04
    CPU time for cycle= 20      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.000710402
diis-c [-3.53428596e-17  3.28716269e-02 -7.56712270e-01 -5.51283863e-02
  1.60786972e+00  1.43840718e-03  1.31101560e+00 -7.96831752e-01
 -3.44522946e-01]
  HOMO = 99.5425366748128  LUMO = 257.900927684401
  mo_energy =
[-9.97365036e+01 -4.94881304e+00 -4.94881304e+00 -4.94881304e+00
 -4.67251943e-01 -4.67251943e-01 -4.67251943e-01  6.60868897e-01
  9.95425367e+01  2.57900928e+02  5.80877354e+03  5.80877354e+03
  5.80877354e+03]
E1 = -445.44158492925067  E_coul = 204.3725121677148
cycle= 21 E= -241.069072761536  delta_E= -4.33  |g|= 6.11  |ddm|= 1.19e+05
    CPU time for cycle= 21      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.000672437
Linear dependence found in DIIS error vectors.
diis-c [-1.70086785e-14 -1.80942909e-01  5.05394850e-01  3.11551348e-01
  4.02694822e-01  2.35110013e-01  1.67352687e-01 -2.94846539e-01
 -1.46314272e-01]
  HOMO = 99.4881952409105  LUMO = 257.80609696429
  mo_energy =
[-9.97393361e+01 -4.94900695e+00 -4.94900695e+00 -4.94900695e+00
 -4.67254211e-01 -4.67254211e-01 -4.67254211e-01  6.37195131e-01
  9.94881952e+01  2.57806097e+02  5.80877000e+03  5.80877000e+03
  5.80877000e+03]
E1 = -445.40702923047303  E_coul = 204.68184196285821
cycle= 22 E= -240.725187267615  delta_E= 0.344  |g|=  5.1  |ddm|= 2.03e+05
    CPU time for cycle= 22      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.000334607
diis-c [-1.33648843e-16  2.91245003e-01  3.52361706e-01  5.53108179e-01
 -2.64387775e-01  2.63108953e-01 -4.55313818e-01 -1.55560707e-01
  4.15438460e-01]
  HOMO = 99.5033891611526  LUMO = 257.808375455433
  mo_energy =
[-9.97391030e+01 -4.94898598e+00 -4.94898598e+00 -4.94898598e+00
 -4.67253976e-01 -4.67253976e-01 -4.67253976e-01  6.45128666e-01
  9.95033892e+01  2.57808375e+02  5.80877037e+03  5.80877037e+03
  5.80877037e+03]
E1 = -445.4127145548839  E_coul = 199.4411099531678
cycle= 23 E= -245.971604601716  delta_E= -5.25  |g|= 17.7  |ddm|= 3.37e+04
    CPU time for cycle= 23      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.000732419
Linear dependence found in DIIS error vectors.
diis-c [-1.78830999e-14  5.23353101e-01  2.64292278e-01  2.04352545e-01
 -4.27451249e-01  5.46236111e-01 -2.37207280e-01 -3.20713506e-01
  4.47138000e-01]
  HOMO = 99.5298817556036  LUMO = 257.860940526409
  mo_energy =
[-9.97376217e+01 -4.94888813e+00 -4.94888813e+00 -4.94888813e+00
 -4.67252839e-01 -4.67252839e-01 -4.67252839e-01  6.56247893e-01
  9.95298818e+01  2.57860941e+02  5.80877214e+03  5.80877214e+03
  5.80877214e+03]
E1 = -445.43059497505914  E_coul = 207.36447108222703
cycle= 24 E= -238.066123892832  delta_E= 7.91  |g|= 1.04  |ddm|= 1.05e+05
    CPU time for cycle= 24      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.000419539
Linear dependence found in DIIS error vectors.
diis-c [-1.00635684e-14  2.88759022e-02  5.67069141e-01  2.46062901e-01
 -2.04053597e-01  2.64868331e-01  1.09741781e-01 -8.90558908e-02
  7.64914317e-02]
  HOMO = 99.5137159033414  LUMO = 257.851960210819
  mo_energy =
[-9.97379427e+01 -4.94891270e+00 -4.94891270e+00 -4.94891270e+00
 -4.67253121e-01 -4.67253121e-01 -4.67253121e-01  6.47445273e-01
  9.95137159e+01  2.57851960e+02  5.80877171e+03  5.80877171e+03
  5.80877171e+03]
E1 = -445.42339928914936  E_coul = 204.54185202741047
cycle= 25 E= -240.881547261739  delta_E= -2.82  |g|= 5.58  |ddm|= 4.28e+04
    CPU time for cycle= 25      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.000517059
diis-c [-5.64627133e-17 -3.73592230e-01  5.05221789e-01  5.13774596e-02
  3.06516260e-01  7.67322764e-01 -8.74467326e-02 -1.05759869e-01
 -6.36394412e-02]
  HOMO = 99.5383725068918  LUMO = 257.886813882563
  mo_energy =
[-9.97369466e+01 -4.94884590e+00 -4.94884590e+00 -4.94884590e+00
 -4.67252343e-01 -4.67252343e-01 -4.67252343e-01  6.59449084e-01
  9.95383725e+01  2.57886814e+02  5.80877290e+03  5.80877290e+03
  5.80877290e+03]
E1 = -445.4378327915708  E_coul = 205.97195629059087
cycle= 26 E= -239.46587650098  delta_E= 1.42  |g|= 2.32  |ddm|= 8.52e+04
    CPU time for cycle= 26      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.000680876
diis-c [-1.41416450e-16 -3.64225636e-01 -8.13670078e-01  8.45598122e-01
 -1.19963441e-01  5.66192962e-01 -2.46813216e-01  6.96346008e-01
  4.36535280e-01]
  HOMO = 99.520682706893  LUMO = 257.84018659677
  mo_energy =
[-9.97382198e+01 -4.94893117e+00 -4.94893117e+00 -4.94893117e+00
 -4.67253345e-01 -4.67253345e-01 -4.67253345e-01  6.52276842e-01
  9.95206827e+01  2.57840187e+02  5.80877136e+03  5.80877136e+03
  5.80877136e+03]
E1 = -445.42394823392686  E_coul = 212.56864692858792
cycle= 27 E= -232.855301305339  delta_E= 6.61  |g|= 13.5  |ddm|= 8.13e+04
    CPU time for cycle= 27      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.000578251
Linear dependence found in DIIS error vectors.
diis-c [-6.62425065e-16 -7.83220665e-02  1.51254399e-02  5.41889022e-01
  6.22152716e-02  1.07844134e-01 -7.82254610e-02  4.36673126e-01
 -7.19946634e-03]
  HOMO = 99.5188616217813  LUMO = 257.839380999095
  mo_energy =
[-9.97383428e+01 -4.94893587e+00 -4.94893587e+00 -4.94893587e+00
 -4.67253390e-01 -4.67253390e-01 -4.67253390e-01  6.51927709e-01
  9.95188616e+01  2.57839381e+02  5.80877126e+03  5.80877126e+03
  5.80877126e+03]
E1 = -445.4232519023294  E_coul = 207.76365517690726
cycle= 28 E= -237.659596725422  delta_E= -4.8  |g|= 2.06  |ddm|= 3.92e+03
    CPU time for cycle= 28      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.000544458
Linear dependence found in DIIS error vectors.
diis-c [ 8.04007774e-17  9.73927142e-02  3.97834697e-02  3.63299758e-01
  2.06868240e-01 -1.98760762e-01  1.05335053e-01  3.08992608e-01
  7.70889192e-02]
  HOMO = 99.5061500601014  LUMO = 257.820605406773
  mo_energy =
[-9.97389104e+01 -4.94897284e+00 -4.94897284e+00 -4.94897284e+00
 -4.67253818e-01 -4.67253818e-01 -4.67253818e-01  6.45965957e-01
  9.95061501e+01  2.57820605e+02  5.80877060e+03  5.80877060e+03
  5.80877060e+03]
E1 = -445.41568311269856  E_coul = 205.35325292370382
cycle= 29 E= -240.062430188995  delta_E= -2.4  |g|= 3.56  |ddm|= 4.45e+04
    CPU time for cycle= 29      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.000214343
diis-c [-2.06670295e-18 -3.03335848e-02  8.28656247e-02  5.39519024e-01
 -1.67206693e-02  4.73769744e-02 -2.80693357e-02  4.07588250e-01
 -2.22628338e-03]
  HOMO = 99.5144615156469  LUMO = 257.834023801192
  mo_energy =
[-9.97384921e+01 -4.94894589e+00 -4.94894589e+00 -4.94894589e+00
 -4.67253505e-01 -4.67253505e-01 -4.67253505e-01  6.49727443e-01
  9.95144615e+01  2.57834024e+02  5.80877108e+03  5.80877108e+03
  5.80877108e+03]
E1 = -445.42081612493024  E_coul = 203.48005335352912
cycle= 30 E= -241.940762771401  delta_E= -1.88  |g|=  8.1  |ddm|= 3.01e+04
    CPU time for cycle= 30      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.000399767
Linear dependence found in DIIS error vectors.
diis-c [-6.50387342e-17  5.42404930e-04  3.45702981e-02  4.89988371e-01
  5.92873008e-02 -9.02752618e-03  8.56938105e-02  3.39296312e-01
 -3.50971851e-04]
  HOMO = 99.5138251847225  LUMO = 257.833381153577
  mo_energy =
[-9.97385198e+01 -4.94894730e+00 -4.94894730e+00 -4.94894730e+00
 -4.67253522e-01 -4.67253522e-01 -4.67253522e-01  6.49436660e-01
  9.95138252e+01  2.57833381e+02  5.80877106e+03  5.80877106e+03
  5.80877106e+03]
E1 = -445.4204832215869  E_coul = 207.61664982467437
cycle= 31 E= -237.803833396913  delta_E= 4.14  |g|= 1.68  |ddm|= 1.95e+03
    CPU time for cycle= 31      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.000386588
Linear dependence found in DIIS error vectors.
diis-c [-9.75554892e-15  1.81529708e-01  2.11631518e-02  3.09250704e-01
 -2.10281016e-01 -8.50488050e-02  4.55877622e-01  5.70419263e-01
 -2.42910628e-01]
  HOMO = 99.5177589571936  LUMO = 257.832473899484
  mo_energy =
[-9.97385698e+01 -4.94894969e+00 -4.94894969e+00 -4.94894969e+00
 -4.67253557e-01 -4.67253557e-01 -4.67253557e-01  6.51638781e-01
  9.95177590e+01  2.57832474e+02  5.80877103e+03  5.80877103e+03
  5.80877103e+03]
E1 = -445.42170981556467  E_coul = 206.40601086624824
cycle= 32 E= -239.015698949316  delta_E= -1.21  |g|= 1.19  |ddm|= 7.33e+03
    CPU time for cycle= 32      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.000279133
diis-c [-4.86827232e-17  4.22098310e-01 -5.39321339e-01  4.71285808e-01
  9.81592143e-01 -8.43528504e-01  1.32079357e+00 -1.93978433e-01
 -6.18941557e-01]
  HOMO = 99.5091108578888  LUMO = 257.835496162449
  mo_energy =
[-9.97386267e+01 -4.94894701e+00 -4.94894701e+00 -4.94894701e+00
 -4.67253525e-01 -4.67253525e-01 -4.67253525e-01  6.47122320e-01
  9.95091109e+01  2.57835496e+02  5.80877107e+03  5.80877107e+03
  5.80877107e+03]
E1 = -445.4191898445084  E_coul = 202.80786517706238
cycle= 33 E= -242.611324667446  delta_E= -3.6  |g|= 9.72  |ddm|= 1.51e+04
    CPU time for cycle= 33      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.000476056
Linear dependence found in DIIS error vectors.
diis-c [-4.75992797e-14 -1.63215224e-01  3.26242884e-01  4.19878721e-01
 -9.68233454e-02  3.55740558e-01  6.98687785e-01 -1.11281551e-02
 -5.29383223e-01]
  HOMO = 99.5056104761057  LUMO = 257.843668482231
  mo_energy =
[-9.97381144e+01 -4.94891741e+00 -4.94891741e+00 -4.94891741e+00
 -4.67253170e-01 -4.67253170e-01 -4.67253170e-01  6.43908679e-01
  9.95056105e+01  2.57843668e+02  5.80877160e+03  5.80877160e+03
  5.80877160e+03]
E1 = -445.4192564945977  E_coul = 198.34799576796297
cycle= 34 E= -247.071260726635  delta_E= -4.46  |g|= 20.3  |ddm|=  132
    CPU time for cycle= 34      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.000876
diis-c [-6.94914364e-19 -1.44770087e-01  2.52505717e-01  4.31551140e-01
  5.40453614e-01 -3.98348186e-01  4.85949004e-01 -3.17511976e-01
  1.50170776e-01]
  HOMO = 99.520481898525  LUMO = 257.847230861202
  mo_energy =
[-9.97380963e+01 -4.94891639e+00 -4.94891639e+00 -4.94891639e+00
 -4.67253161e-01 -4.67253161e-01 -4.67253161e-01  6.52159715e-01
  9.95204819e+01  2.57847231e+02  5.80877161e+03  5.80877161e+03
  5.80877161e+03]
E1 = -445.4250721346274  E_coul = 211.35850763193739
cycle= 35 E= -234.06656450269  delta_E=   13  |g|= 10.6  |ddm|= 3.47e+04
    CPU time for cycle= 35      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.000722714
diis-c [-1.04027462e-17 -7.87134306e-01  3.90709758e-01  1.98807371e-01
  9.77354614e-02  2.61721919e-02  8.99534362e-02 -1.66870113e-02
  1.00044310e+00]
  HOMO = 99.5195692669028  LUMO = 257.836758611704
  mo_energy =
[-9.97382457e+01 -4.94892986e+00 -4.94892986e+00 -4.94892986e+00
 -4.67253321e-01 -4.67253321e-01 -4.67253321e-01  6.51909283e-01
  9.95195693e+01  2.57836759e+02  5.80877137e+03  5.80877137e+03
  5.80877137e+03]
E1 = -445.42299884514273  E_coul = 194.93258402755202
cycle= 36 E= -250.490414817591  delta_E= -16.4  |g|= 28.4  |ddm|= 1.21e+04
    CPU time for cycle= 36      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.00133917
Linear dependence found in DIIS error vectors.
diis-c [-3.77325131e-16 -5.60976712e-01  2.72960090e-01 -1.15066381e-02
 -1.62755311e-01  1.82554801e-01  4.54281569e-01  3.07679367e-01
  5.17762833e-01]
  HOMO = 99.5140954237058  LUMO = 257.82819999286
  mo_energy =
[-9.97385464e+01 -4.94894767e+00 -4.94894767e+00 -4.94894767e+00
 -4.67253531e-01 -4.67253531e-01 -4.67253531e-01  6.49508132e-01
  9.95140954e+01  2.57828200e+02  5.80877105e+03  5.80877105e+03
  5.80877105e+03]
E1 = -445.4196773027502  E_coul = 208.01002951794874
cycle= 37 E= -237.409647784801  delta_E= 13.1  |g|= 2.76  |ddm|= 1.95e+04
    CPU time for cycle= 37      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.000705832
Linear dependence found in DIIS error vectors.
diis-c [-2.40694864e-14 -2.73334741e-01  3.00863848e-01 -3.14787262e-01
 -2.82061352e-01  8.70641483e-02  1.63620924e-01  4.91669823e-01
  8.26964613e-01]
  HOMO = 99.5219691347045  LUMO = 257.824267249898
  mo_energy =
[-9.97386613e+01 -4.94895367e+00 -4.94895367e+00 -4.94895367e+00
 -4.67253602e-01 -4.67253602e-01 -4.67253602e-01  6.54276040e-01
  9.95219691e+01  2.57824267e+02  5.80877095e+03  5.80877095e+03
  5.80877095e+03]
E1 = -445.42182334009686  E_coul = 210.30243693099533
cycle= 38 E= -235.119386409102  delta_E= 2.29  |g|= 8.13  |ddm|= 1.3e+04
    CPU time for cycle= 38      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.000592913
Linear dependence found in DIIS error vectors.
diis-c [-1.24005556e-14 -3.59421321e-01  3.13605039e-01 -2.75089161e-01
 -2.42660867e-01  2.28018909e-01 -1.13089139e-01  3.12516407e-01
  1.13612013e+00]
  HOMO = 99.5212817748938  LUMO = 257.828697877881
  mo_energy =
[-9.97385692e+01 -4.94895108e+00 -4.94895108e+00 -4.94895108e+00
 -4.67253570e-01 -4.67253570e-01 -4.67253570e-01  6.53537355e-01
  9.95212818e+01  2.57828698e+02  5.80877100e+03  5.80877100e+03
  5.80877100e+03]
E1 = -445.4222899158409  E_coul = 195.84329600645754
cycle= 39 E= -249.578993909383  delta_E= -14.5  |g|= 26.3  |ddm|= 2.63e+03
    CPU time for cycle= 39      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.00141618
Linear dependence found in DIIS error vectors.
diis-c [-8.03747233e-16 -8.70302426e-01  3.86820712e-01 -1.41752612e-02
  9.13245619e-03  2.82604503e-01 -2.12277877e-01 -9.69246222e-02
  1.51512252e+00]
  HOMO = 99.5193067664379  LUMO = 257.835096021436
  mo_energy =
[-9.97382922e+01 -4.94893618e+00 -4.94893618e+00 -4.94893618e+00
 -4.67253390e-01 -4.67253390e-01 -4.67253390e-01  6.51844273e-01
  9.95193068e+01  2.57835096e+02  5.80877126e+03  5.80877126e+03
  5.80877126e+03]
E1 = -445.4226261375558  E_coul = 198.34344379849838
cycle= 40 E= -247.079182339057  delta_E=  2.5  |g|= 20.3  |ddm|= 1.7e+03
    CPU time for cycle= 40      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.000958507
Linear dependence found in DIIS error vectors.
diis-c [-7.68240151e-14 -1.58938735e+00  1.02245599e+00 -2.73920150e-01
 -8.61023783e-01 -4.06353362e-01  1.66430005e+00 -1.08755561e-01
  1.55268417e+00]
  HOMO = 99.5033147623955  LUMO = 257.825736446774
  mo_energy =
[-9.97384432e+01 -4.94892884e+00 -4.94892884e+00 -4.94892884e+00
 -4.67253326e-01 -4.67253326e-01 -4.67253326e-01  6.43432956e-01
  9.95033148e+01  2.57825736e+02  5.80877135e+03  5.80877135e+03
  5.80877135e+03]
E1 = -445.41543543472204  E_coul = 208.50707997331097
cycle= 41 E= -236.908355461411  delta_E= 10.2  |g|= 3.94  |ddm|= 4.27e+04
    CPU time for cycle= 41      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.000649848
Linear dependence found in DIIS error vectors.
diis-c [-3.67726030e-14  5.28157409e-01 -7.15663445e-01 -8.66048863e-02
  2.21216585e-01  4.04881367e-01  5.92616986e-02 -1.67512482e-01
  7.56263753e-01]
  HOMO = 99.5009618029935  LUMO = 257.83686027658
  mo_energy =
[-9.97385377e+01 -4.94895012e+00 -4.94895012e+00 -4.94895012e+00
 -4.67253550e-01 -4.67253550e-01 -4.67253550e-01  6.42981054e-01
  9.95009618e+01  2.57836860e+02  5.80877100e+03  5.80877100e+03
  5.80877100e+03]
E1 = -445.4166011174685  E_coul = 199.11531536546872
cycle= 42 E= -246.301285752  delta_E= -9.39  |g|= 18.4  |ddm|= 7.06e+03
    CPU time for cycle= 42      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.000958904
Linear dependence found in DIIS error vectors.
diis-c [-1.57100718e-14  1.39481774e-01 -4.33519790e-01  3.43112200e-01
 -1.21311128e-02  2.93713005e-01  2.37369356e-02  6.87625876e-02
  5.76844400e-01]
  HOMO = 99.5111358414131  LUMO = 257.844696827308
  mo_energy =
[-9.97382646e+01 -4.94892512e+00 -4.94892512e+00 -4.94892512e+00
 -4.67253273e-01 -4.67253273e-01 -4.67253273e-01  6.47561714e-01
  9.95111358e+01  2.57844697e+02  5.80877146e+03  5.80877146e+03
  5.80877146e+03]
E1 = -445.4214152905222  E_coul = 211.26937889607285
cycle= 43 E= -234.152036394449  delta_E= 12.1  |g|= 10.4  |ddm|= 2.83e+04
    CPU time for cycle= 43      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.000474588
diis-c [-1.57079759e-18 -6.88302599e-02 -1.53306828e-01  5.09613351e-01
  3.40473591e-02  1.81714238e-01  1.10314106e-01  7.14736195e-02
  3.14974414e-01]
  HOMO = 99.5176366089659  LUMO = 257.841775631552
  mo_energy =
[-9.97383140e+01 -4.94893316e+00 -4.94893316e+00 -4.94893316e+00
 -4.67253367e-01 -4.67253367e-01 -4.67253367e-01  6.51255528e-01
  9.95176366e+01  2.57841776e+02  5.80877131e+03  5.80877131e+03
  5.80877131e+03]
E1 = -445.4231959753498  E_coul = 201.61414997591874
cycle= 44 E= -243.809045999431  delta_E= -9.66  |g|= 12.6  |ddm|= 1.08e+04
    CPU time for cycle= 44      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.0007269
Linear dependence found in DIIS error vectors.
diis-c [-1.36458468e-15 -5.12412367e-02 -1.59610619e-01  3.67641665e-01
  1.81189384e-01  3.18390145e-01  6.87801850e-02  2.22067193e-02
  2.52643757e-01]
  HOMO = 99.5145733051965  LUMO = 257.842372423425
  mo_energy =
[-9.97383382e+01 -4.94893421e+00 -4.94893421e+00 -4.94893421e+00
 -4.67253378e-01 -4.67253378e-01 -4.67253378e-01  6.49606766e-01
  9.95145733e+01  2.57842372e+02  5.80877129e+03  5.80877129e+03
  5.80877129e+03]
E1 = -445.4222250517233  E_coul = 199.29695270187943
cycle= 45 E= -246.125272349844  delta_E= -2.32  |g|=   18  |ddm|= 5.81e+03
    CPU time for cycle= 45      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.00105897
Linear dependence found in DIIS error vectors.
diis-c [ 3.89972909e-17 -3.18567604e-02 -7.09202226e-02  3.54138511e-01
  1.72605816e-01  2.10413139e-01  2.82704066e-01 -8.18612543e-02
  1.64776706e-01]
  HOMO = 99.517416892252  LUMO = 257.839401186121
  mo_energy =
[-9.97383348e+01 -4.94893388e+00 -4.94893388e+00 -4.94893388e+00
 -4.67253371e-01 -4.67253371e-01 -4.67253371e-01  6.51141171e-01
  9.95174169e+01  2.57839401e+02  5.80877130e+03  5.80877130e+03
  5.80877130e+03]
E1 = -445.42272073818435  E_coul = 201.89983978764252
cycle= 46 E= -243.522880950542  delta_E=  2.6  |g|= 11.9  |ddm|= 3.02e+03
    CPU time for cycle= 46      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.00106658
Linear dependence found in DIIS error vectors.
diis-c [ 5.05010006e-16 -1.57125328e-01 -7.83691589e-01  1.57146941e+00
 -1.98684866e+00  4.05224988e-01 -6.98336005e-01  3.82955200e-01
  2.26635198e+00]
  HOMO = 99.521697098917  LUMO = 257.848685656266
  mo_energy =
[-9.97379935e+01 -4.94891986e+00 -4.94891986e+00 -4.94891986e+00
 -4.67253238e-01 -4.67253238e-01 -4.67253238e-01  6.52358471e-01
  9.95216971e+01  2.57848686e+02  5.80877157e+03  5.80877157e+03
  5.80877157e+03]
E1 = -445.4256836780315  E_coul = 206.6632924136169
cycle= 47 E= -238.762391264415  delta_E= 4.76  |g|= 0.55  |ddm|= 1.72e+04
    CPU time for cycle= 47      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=9.92886e-05
Linear dependence found in DIIS error vectors.
diis-c [-3.37580718e-15 -2.37177602e-01  2.17946579e-01  6.21015462e-01
  1.33913926e-01  3.90020477e-01 -2.37536227e-01  3.36917056e-01
 -2.25099671e-01]
  HOMO = 99.5199237254999  LUMO = 257.847440817904
  mo_energy =
[-9.97381322e+01 -4.94893064e+00 -4.94893064e+00 -4.94893064e+00
 -4.67253334e-01 -4.67253334e-01 -4.67253334e-01  6.52007924e-01
  9.95199237e+01  2.57847441e+02  5.80877136e+03  5.80877136e+03
  5.80877136e+03]
E1 = -445.42489659207405  E_coul = 195.87073941887937
cycle= 48 E= -249.554157173195  delta_E= -10.8  |g|= 26.2  |ddm|= 4.49e+03
    CPU time for cycle= 48      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.00139098
Linear dependence found in DIIS error vectors.
diis-c [-4.32213512e-15 -1.39652096e-01  5.65084928e-03  7.06726607e-01
  4.46264239e-02  2.67380943e-02 -1.19762934e-01  2.10083297e-01
  2.65589759e-01]
  HOMO = 99.5215595585916  LUMO = 257.849949655483
  mo_energy =
[-9.97380915e+01 -4.94892598e+00 -4.94892598e+00 -4.94892598e+00
 -4.67253284e-01 -4.67253284e-01 -4.67253284e-01  6.52983205e-01
  9.95215596e+01  2.57849950e+02  5.80877145e+03  5.80877145e+03
  5.80877145e+03]
E1 = -445.42590901651675  E_coul = 210.63424180848685
cycle= 49 E= -234.79166720803  delta_E= 14.8  |g|=  8.9  |ddm|= 6.02e+03
    CPU time for cycle= 49      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.000634482
Linear dependence found in DIIS error vectors.
diis-c [ 2.36091802e-17  2.54962092e-01  5.39841866e-03  3.57259134e-01
  9.79971581e-02  1.17446251e-01 -1.53112582e-01  1.57220985e-01
  1.62828544e-01]
  HOMO = 99.5168315984324  LUMO = 257.84991178802
  mo_energy =
[-9.97381161e+01 -4.94892684e+00 -4.94892684e+00 -4.94892684e+00
 -4.67253288e-01 -4.67253288e-01 -4.67253288e-01  6.50427597e-01
  9.95168316e+01  2.57849912e+02  5.80877143e+03  5.80877143e+03
  5.80877143e+03]
E1 = -445.42425888478425  E_coul = 206.98109697420927
cycle= 50 E= -238.443161910575  delta_E= -3.65  |g|= 0.238  |ddm|= 9.87e+03
    CPU time for cycle= 50      0.01 sec, wall time      0.01 sec
E1 = -445.42425888478425  E_coul = 206.98109697420927

WARN: 	An extra scf cycle is going to be run
	in order to restore the mo_energy derivatives
	missing in implicit differentiation.

  HOMO = 99.5821868501925  LUMO = 258.005090777956
  mo_energy =
[-9.97365990e+01 -4.94892434e+00 -4.94892434e+00 -4.94892434e+00
 -4.67253248e-01 -4.67253248e-01 -4.67253248e-01  6.71834565e-01
  9.95821869e+01  2.58005091e+02  5.80877146e+03  5.80877146e+03
  5.80877146e+03]
E1 = -445.4715304541023  E_coul = 208.0269347532064
Extra cycle  E= -237.444595700896  delta_E= 0.999  |g|= 2.37  |ddm|= 2.76e+05
    CPU time for scf_cycle      6.76 sec, wall time      0.87 sec
exp = [2.97092764e+01 9.28595373e+01 3.40970137e+01 3.42370146e+01
 6.50960202e+00 1.48979393e-01 2.69396465e+03]
E = -237.44459570089592
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
number_of_s_exps = 4
number_of_p_exps = 3

exps = np.zeros((number_of_s_exps+number_of_p_exps,2))
#exps[:, 0] = decaying_nums(5)

# S
exps[0,0] = 20.0
exps[1,0] = 9.5045827955887916e+01
exps[2,0] = 4.4881042475048387e+00 
exps[3,0] = 3.9799528004692630e-01
             
# P          
exps[3,0] = 3.0108199280832128e+01
exps[4,0] = 6.1393781325590453e+00
exps[5,0] = 4.8929328703550412e-01

basis =  str(number_of_s_exps)+"s"+str(number_of_p_exps)+"p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc21115.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 24
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 18 14:57:55 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35677784.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 32000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 32000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 32000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  23.6003182581        1
[INPUT] 0    0    [1    /1   ]  94.4084332609        1
[INPUT] 0    0    [1    /1   ]  17.0472998211        1
[INPUT] 0    0    [1    /1   ]  31.3176954658        1
[INPUT] 1    0    [1    /1   ]  7.59444484722        1
[INPUT] 1    0    [1    /1   ]  0.173807212065       1
[INPUT] 1    0    [1    /1   ]  2693.96469653        1

nuclear repulsion = 0
number of shells = 7
number of NR pGTOs = 13
number of NR cGTOs = 13
basis = {'Ar': [[0, [23.60031825811408, 1.0]], [0, [94.40843326094713, 1.0]], [0, [17.047299821134658, 1.0]], [0, [31.31769546579233, 1.0]], [1, [7.594444847221612, 1.0]], [1, [0.17380721206529223, 1.0]], [1, [2693.9646965314782, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [23.60031826]
bas 1, expnt(s) = [94.40843326]
bas 2, expnt(s) = [17.04729982]
bas 3, expnt(s) = [31.31769547]
bas 4, expnt(s) = [7.59444485]
bas 5, expnt(s) = [0.17380721]
bas 6, expnt(s) = [2693.96469653]
CPU time:        88.03
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  1  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]
 [ 0  1  1  1  0 36 37  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 2.36003183e+01 2.70522517e+01 9.44084333e+01 7.65196750e+01
 1.70472998e+01 2.11961373e+01 3.13176955e+01 3.34470155e+01
 7.59444485e+00 3.67793825e+01 1.73807212e-01 3.27392808e-01
 2.69396470e+03 5.66205740e+04]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 13.38006516312089
cond(S) = 14147.860206177711
E1 = -547.4306327984336  E_coul = 124.65328199315469
init E= -422.777350805279
    CPU time for initialize scf      0.19 sec, wall time      0.02 sec
  HOMO = 61.5188250521238  LUMO = 192.912955185215
  mo_energy =
[-1.10625099e+02 -1.21190418e+01 -1.21190418e+01 -1.21190418e+01
 -1.10221816e+01 -2.22011048e+00 -2.22011048e+00 -2.22011048e+00
  6.15188251e+01  1.92912955e+02  5.79383412e+03  5.79383412e+03
  5.79383412e+03]
E1 = -540.7865394360574  E_coul = 220.52325458288638
cycle= 1 E= -320.263284853171  delta_E=  103  |g|= 1.63  |ddm|= 1.74e+03
    CPU time for cycle= 1      0.21 sec, wall time      0.01 sec
diis-norm(errvec)=0.335859
diis-c [-0.11280118  1.        ]
  HOMO = 67.6897969067487  LUMO = 203.080186347074
  mo_energy =
[-9.89579353e+01 -4.69308339e+00 -4.69308339e+00 -4.69308339e+00
 -3.15571978e+00 -4.57223775e-01 -4.57223775e-01 -4.57223775e-01
  6.76897969e+01  2.03080186e+02  5.80725204e+03  5.80725204e+03
  5.80725204e+03]
E1 = -540.671743670332  E_coul = 220.39875647021833
cycle= 2 E= -320.272987200114  delta_E= -0.0097  |g|= 0.0295  |ddm|= 38.5
    CPU time for cycle= 2      0.14 sec, wall time      0.01 sec
diis-norm(errvec)=0.00373055
diis-c [-1.32330090e-05 -2.46865223e-03  1.00246865e+00]
  HOMO = 67.6831603261427  LUMO = 203.068384608694
  mo_energy =
[-9.89940291e+01 -4.69726966e+00 -4.69726966e+00 -4.69726966e+00
 -3.16270968e+00 -4.57294467e-01 -4.57294467e-01 -4.57294467e-01
  6.76831603e+01  2.03068385e+02  5.80717580e+03  5.80717580e+03
  5.80717580e+03]
E1 = -540.6694852083843  E_coul = 220.3964947810404
cycle= 3 E= -320.272990427344  delta_E= -3.23e-06  |g|= 0.000472  |ddm|= 0.691
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=6.11409e-05
diis-c [-4.65488972e-11  1.14489117e-05 -1.67688502e-02  1.01675740e+00]
  HOMO = 67.683057130658  LUMO = 203.068193745898
  mo_energy =
[-9.89946078e+01 -4.69733592e+00 -4.69733592e+00 -4.69733592e+00
 -3.16282088e+00 -4.57295589e-01 -4.57295589e-01 -4.57295589e-01
  6.76830571e+01  2.03068194e+02  5.80717459e+03  5.80717459e+03
  5.80717459e+03]
E1 = -540.6694488301608  E_coul = 220.39645840316177
cycle= 4 E= -320.272990426999  delta_E= 3.45e-10  |g|= 3.67e-07  |ddm|= 0.0109
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
E1 = -540.6694488301608  E_coul = 220.39645840316177
  HOMO = 67.6830571436671  LUMO = 203.068193755889
  mo_energy =
[-9.89946078e+01 -4.69733591e+00 -4.69733591e+00 -4.69733591e+00
 -3.16282088e+00 -4.57295589e-01 -4.57295589e-01 -4.57295589e-01
  6.76830571e+01  2.03068194e+02  5.80717459e+03  5.80717459e+03
  5.80717459e+03]
E1 = -540.6694488304482  E_coul = 220.39645840080476
Extra cycle  E= -320.272990429643  delta_E= -2.64e-09  |g|= 6.81e-09  |ddm|= 2.01e-06
    CPU time for scf_cycle      0.58 sec, wall time      0.07 sec
exp = [2.36003183e+01 9.44084333e+01 1.70472998e+01 3.13176955e+01
 7.59444485e+00 1.73807212e-01 2.69396470e+03]
E = -320.27299042964347
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
number_of_s_exps = 4
number_of_p_exps = 3

exps = np.zeros((number_of_s_exps+number_of_p_exps,2))
#exps[:, 0] = decaying_nums(5)

# S
exps[0,0] = 20.0
exps[1,0] = 9.5045827955887916e+01
exps[2,0] = 4.4881042475048387e+00 
exps[3,0] = 3.9799528004692630e-01
             
# P          
exps[3,0] = 3.0108199280832128e+01
exps[4,0] = 6.1393781325590453e+00
exps[5,0] = 4.8929328703550412e-01

basis =  str(number_of_s_exps)+"s"+str(number_of_p_exps)+"p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc21115.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 24
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 18 14:57:55 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35677784.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 32000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 32000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 32000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  20.5460178005        1
[INPUT] 0    0    [1    /1   ]  95.1828359543        1
[INPUT] 0    0    [1    /1   ]  8.5229413999         1
[INPUT] 0    0    [1    /1   ]  29.8581212606        1
[INPUT] 1    0    [1    /1   ]  8.13683453963        1
[INPUT] 1    0    [1    /1   ]  0.186220395867       1
[INPUT] 1    0    [1    /1   ]  2693.96472095        1

nuclear repulsion = 0
number of shells = 7
number of NR pGTOs = 13
number of NR cGTOs = 13
basis = {'Ar': [[0, [20.54601780054648, 1.0]], [0, [95.1828359542622, 1.0]], [0, [8.52294139990484, 1.0]], [0, [29.858121260591723, 1.0]], [1, [8.13683453962503, 1.0]], [1, [0.1862203958668839, 1.0]], [1, [2693.964720947777, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [20.5460178]
bas 1, expnt(s) = [95.18283595]
bas 2, expnt(s) = [8.5229414]
bas 3, expnt(s) = [29.85812126]
bas 4, expnt(s) = [8.13683454]
bas 5, expnt(s) = [0.1862204]
bas 6, expnt(s) = [2693.96472095]
CPU time:        88.66
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  1  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]
 [ 0  1  1  1  0 36 37  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 2.05460178e+01 2.43815196e+01 9.51828360e+01 7.69899441e+01
 8.52294140e+00 1.26025129e+01 2.98581213e+01 3.22709598e+01
 8.13683454e+00 4.00916332e+01 1.86220396e-01 3.56876910e-01
 2.69396472e+03 5.66205746e+04]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 13.829441001824891
cond(S) = 1196.2978222602596
E1 = -568.3239577172889  E_coul = 132.23717277774347
init E= -436.086784939545
    CPU time for initialize scf      0.19 sec, wall time      0.02 sec
  HOMO = 36.7064946641168  LUMO = 151.236679184614
  mo_energy =
[-1.09315807e+02 -1.42644072e+01 -1.15037596e+01 -1.15037596e+01
 -1.15037596e+01 -2.10768945e+00 -2.10768945e+00 -2.10768945e+00
  3.67064947e+01  1.51236679e+02  5.79443845e+03  5.79443845e+03
  5.79443845e+03]
E1 = -596.0727906178397  E_coul = 216.37412654984513
cycle= 1 E= -379.698664067995  delta_E= 56.4  |g|= 1.34  |ddm|=  168
    CPU time for cycle= 1      0.21 sec, wall time      0.01 sec
diis-norm(errvec)=0.316334
diis-c [-0.10006745  1.        ]
  HOMO = 41.6145843255859  LUMO = 159.729795636802
  mo_energy =
[-9.96424704e+01 -7.66119526e+00 -4.87228966e+00 -4.87228966e+00
 -4.87228966e+00 -4.53328596e-01 -4.53328596e-01 -4.53328596e-01
  4.16145843e+01  1.59729796e+02  5.80534642e+03  5.80534642e+03
  5.80534642e+03]
E1 = -595.9599176126934  E_coul = 216.2537840523935
cycle= 2 E= -379.7061335603  delta_E= -0.00747  |g|= 0.0245  |ddm|= 3.42
    CPU time for cycle= 2      0.15 sec, wall time      0.01 sec
diis-norm(errvec)=0.00382846
diis-c [-1.38189067e-05 -2.90281827e-03  1.00290282e+00]
  HOMO = 41.6089723280967  LUMO = 159.718680392124
  mo_energy =
[-9.96757381e+01 -7.66689075e+00 -4.87747745e+00 -4.87747745e+00
 -4.87747745e+00 -4.53420677e-01 -4.53420677e-01 -4.53420677e-01
  4.16089723e+01  1.59718680e+02  5.80527658e+03  5.80527658e+03
  5.80527658e+03]
E1 = -595.9576930240976  E_coul = 216.251556906073
cycle= 3 E= -379.706136118025  delta_E= -2.56e-06  |g|= 0.000396  |ddm|= 0.0623
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=6.95399e-05
diis-c [-4.32475927e-10  2.35892649e-05 -1.80322209e-02  1.01800863e+00]
  HOMO = 41.6088868736778  LUMO = 159.718501554146
  mo_energy =
[-9.96762717e+01 -7.66698025e+00 -4.87755893e+00 -4.87755893e+00
 -4.87755893e+00 -4.53422135e-01 -4.53422135e-01 -4.53422135e-01
  4.16088869e+01  1.59718502e+02  5.80527549e+03  5.80527549e+03
  5.80527549e+03]
E1 = -595.9576570537586  E_coul = 216.2515209350751
cycle= 4 E= -379.706136118684  delta_E= -6.59e-10  |g|= 6.97e-07  |ddm|= 0.000985
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
E1 = -595.9576570537586  E_coul = 216.2515209350751
  HOMO = 41.6088869545715  LUMO = 159.718501673537
  mo_energy =
[-9.96762714e+01 -7.66698018e+00 -4.87755887e+00 -4.87755887e+00
 -4.87755887e+00 -4.53422134e-01 -4.53422134e-01 -4.53422134e-01
  4.16088870e+01  1.59718502e+02  5.80527549e+03  5.80527549e+03
  5.80527549e+03]
E1 = -595.9576570724084  E_coul = 216.25152095371385
Extra cycle  E= -379.706136118695  delta_E= -1.11e-11  |g|= 1.01e-08  |ddm|= 7.66e-07
    CPU time for scf_cycle      0.58 sec, wall time      0.07 sec
exp = [2.05460178e+01 9.51828360e+01 8.52294140e+00 2.98581213e+01
 8.13683454e+00 1.86220396e-01 2.69396472e+03]
E = -379.7061361186946
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
number_of_s_exps = 4
number_of_p_exps = 3

exps = np.zeros((number_of_s_exps+number_of_p_exps,2))
#exps[:, 0] = decaying_nums(5)

# S
exps[0,0] = 20.0
exps[1,0] = 9.5045827955887916e+01
exps[2,0] = 4.4881042475048387e+00 
exps[3,0] = 3.9799528004692630e-01
             
# P          
exps[3,0] = 3.0108199280832128e+01
exps[4,0] = 6.1393781325590453e+00
exps[5,0] = 4.8929328703550412e-01

basis =  str(number_of_s_exps)+"s"+str(number_of_p_exps)+"p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc21115.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 24
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 18 14:57:55 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35677784.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 32000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 32000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 32000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  19.0189957353        1
[INPUT] 0    0    [1    /1   ]  95.5700048057        1
[INPUT] 0    0    [1    /1   ]  4.26111988549        1
[INPUT] 0    0    [1    /1   ]  29.1283954041        1
[INPUT] 1    0    [1    /1   ]  8.40800662626        1
[INPUT] 1    0    [1    /1   ]  0.19242646689        1
[INPUT] 1    0    [1    /1   ]  2693.96473315        1

nuclear repulsion = 0
number of shells = 7
number of NR pGTOs = 13
number of NR cGTOs = 13
basis = {'Ar': [[0, [19.01899573527097, 1.0]], [0, [95.5700048056995, 1.0]], [0, [4.261119885494471, 1.0]], [0, [29.12839540414364, 1.0]], [1, [8.408006626256483, 1.0]], [1, [0.19242646688991832, 1.0]], [1, [2693.964733154902, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [19.01899574]
bas 1, expnt(s) = [95.57000481]
bas 2, expnt(s) = [4.26111989]
bas 3, expnt(s) = [29.1283954]
bas 4, expnt(s) = [8.40800663]
bas 5, expnt(s) = [0.19242647]
bas 6, expnt(s) = [2693.96473315]
CPU time:        89.28
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  1  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]
 [ 0  1  1  1  0 36 37  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.90189957e+01 2.30094220e+01 9.55700048e+01 7.72247000e+01
 4.26111989e+00 7.49303634e+00 2.91283954e+01 3.16776127e+01
 8.40800663e+00 4.17686750e+01 1.92426467e-01 3.71805149e-01
 2.69396473e+03 5.66205750e+04]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 14.119150750438246
cond(S) = 396.26039535411405
E1 = -576.8032618856133  E_coul = 136.89998672302266
init E= -439.903275162591
    CPU time for initialize scf      0.19 sec, wall time      0.02 sec
  HOMO = 20.9663568487296  LUMO = 128.146122982575
  mo_energy =
[-1.08716176e+02 -1.53806772e+01 -1.10984928e+01 -1.10984928e+01
 -1.10984928e+01 -2.01448743e+00 -2.01448743e+00 -2.01448743e+00
  2.09663568e+01  1.28146123e+02  5.79467903e+03  5.79467903e+03
  5.79467903e+03]
E1 = -626.3387103418048  E_coul = 210.71369427950427
cycle= 1 E= -415.625016062301  delta_E= 24.3  |g|= 1.05  |ddm|= 53.1
    CPU time for cycle= 1      0.21 sec, wall time      0.01 sec
diis-norm(errvec)=0.339904
diis-c [-0.11553492  1.        ]
  HOMO = 25.0702833971168  LUMO = 135.418977021123
  mo_energy =
[-1.00526511e+02 -9.89346618e+00 -5.24699243e+00 -5.24699243e+00
 -5.24699243e+00 -4.55764505e-01 -4.55764505e-01 -4.55764505e-01
  2.50702834e+01  1.35418977e+02  5.80383296e+03  5.80383296e+03
  5.80383296e+03]
E1 = -626.2467000722223  E_coul = 210.6169963439572
cycle= 2 E= -415.629703728265  delta_E= -0.00469  |g|= 0.018  |ddm|= 0.976
    CPU time for cycle= 2      0.15 sec, wall time      0.01 sec
diis-norm(errvec)=0.00345833
diis-c [-9.93066173e-06 -4.20891575e-03  1.00420892e+00]
  HOMO = 25.0660122588957  LUMO = 135.410037336683
  mo_energy =
[-1.00552193e+02 -9.89736958e+00 -5.25182221e+00 -5.25182221e+00
 -5.25182221e+00 -4.55847069e-01 -4.55847069e-01 -4.55847069e-01
  2.50660123e+01  1.35410037e+02  5.80377733e+03  5.80377733e+03
  5.80377733e+03]
E1 = -626.2449496301564  E_coul = 210.61524444865913
cycle= 3 E= -415.629705181497  delta_E= -1.45e-06  |g|= 0.000263  |ddm|= 0.0175
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=4.88354e-05
diis-c [-6.62838166e-10  5.48226949e-05 -1.33986635e-02  1.01334384e+00]
  HOMO = 25.0659570959301  LUMO = 135.40990910743
  mo_energy =
[-1.00552563e+02 -9.89742271e+00 -5.25188858e+00 -5.25188858e+00
 -5.25188858e+00 -4.55848213e-01 -4.55848213e-01 -4.55848213e-01
  2.50659571e+01  1.35409909e+02  5.80377654e+03  5.80377654e+03
  5.80377654e+03]
E1 = -626.2449239895928  E_coul = 210.61521880778295
cycle= 4 E= -415.62970518181  delta_E= -3.13e-10  |g|= 1.81e-06  |ddm|= 0.000252
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
E1 = -626.2449239895928  E_coul = 210.61521880778295
  HOMO = 25.0659568233826  LUMO = 135.40990839074
  mo_energy =
[-1.00552566e+02 -9.89742299e+00 -5.25188894e+00 -5.25188894e+00
 -5.25188894e+00 -4.55848219e-01 -4.55848219e-01 -4.55848219e-01
  2.50659568e+01  1.35409908e+02  5.80377654e+03  5.80377654e+03
  5.80377654e+03]
E1 = -626.2449238381296  E_coul = 210.6152186563202
Extra cycle  E= -415.629705181809  delta_E= 4.55e-13  |g|= 3.67e-08  |ddm|= 1.47e-06
    CPU time for scf_cycle      0.58 sec, wall time      0.07 sec
exp = [1.90189957e+01 9.55700048e+01 4.26111989e+00 2.91283954e+01
 8.40800663e+00 1.92426467e-01 2.69396473e+03]
E = -415.6297051818094
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
number_of_s_exps = 4
number_of_p_exps = 3

exps = np.zeros((number_of_s_exps+number_of_p_exps,2))
#exps[:, 0] = decaying_nums(5)

# S
exps[0,0] = 20.0
exps[1,0] = 9.5045827955887916e+01
exps[2,0] = 4.4881042475048387e+00 
exps[3,0] = 3.9799528004692630e-01
             
# P          
exps[3,0] = 3.0108199280832128e+01
exps[4,0] = 6.1393781325590453e+00
exps[5,0] = 4.8929328703550412e-01

basis =  str(number_of_s_exps)+"s"+str(number_of_p_exps)+"p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc21115.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 24
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 18 14:57:56 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35677784.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 32000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 32000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 32000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  18.2555621685        1
[INPUT] 0    0    [1    /1   ]  95.7635695903        1
[INPUT] 0    0    [1    /1   ]  2.13042533074        1
[INPUT] 0    0    [1    /1   ]  28.763569495         1
[INPUT] 1    0    [1    /1   ]  8.543578913          1
[INPUT] 1    0    [1    /1   ]  0.195529187567       1
[INPUT] 1    0    [1    /1   ]  2693.96473926        1

nuclear repulsion = 0
number of shells = 7
number of NR pGTOs = 13
number of NR cGTOs = 13
basis = {'Ar': [[0, [18.255562168549194, 1.0]], [0, [95.76356959032036, 1.0]], [0, [2.1304253307364194, 1.0]], [0, [28.763569494953682, 1.0]], [1, [8.543578912996878, 1.0]], [1, [0.19552918756710058, 1.0]], [1, [2693.9647392578454, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [18.25556217]
bas 1, expnt(s) = [95.76356959]
bas 2, expnt(s) = [2.13042533]
bas 3, expnt(s) = [28.76356949]
bas 4, expnt(s) = [8.54357891]
bas 5, expnt(s) = [0.19552919]
bas 6, expnt(s) = [2693.96473926]
CPU time:        89.91
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  1  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]
 [ 0  1  1  1  0 36 37  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.82555622e+01 2.23131781e+01 9.57635696e+01 7.73419769e+01
 2.13042533e+00 4.45517494e+00 2.87635695e+01 3.13795788e+01
 8.54357891e+00 4.26122225e+01 1.95529188e-01 3.79314013e-01
 2.69396474e+03 5.66205751e+04]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 14.41834931489187
cond(S) = 229.36716450464414
E1 = -576.3678810459494  E_coul = 141.30161456534464
init E= -435.066266480605
    CPU time for initialize scf      0.19 sec, wall time      0.02 sec
  HOMO = 11.3917654658957  LUMO = 116.292068619462
  mo_energy =
[-1.08291598e+02 -1.42181749e+01 -1.07158808e+01 -1.07158808e+01
 -1.07158808e+01 -1.89614625e+00 -1.89614625e+00 -1.89614625e+00
  1.13917655e+01  1.16292069e+02  5.79489397e+03  5.79489397e+03
  5.79489397e+03]
E1 = -638.8371696907752  E_coul = 204.46310934599364
cycle= 1 E= -434.374060344782  delta_E= 0.692  |g|= 0.787  |ddm|=   19
    CPU time for cycle= 1      0.22 sec, wall time      0.01 sec
diis-norm(errvec)=0.412224
diis-c [-0.16992881  1.        ]
  HOMO = 14.9195197716951  LUMO = 122.485177311705
  mo_energy =
[-1.01369427e+02 -9.91245530e+00 -5.73292949e+00 -5.73292949e+00
 -5.73292949e+00 -4.65162486e-01 -4.65162486e-01 -4.65162486e-01
  1.49195198e+01  1.22485177e+02  5.80266207e+03  5.80266207e+03
  5.80266207e+03]
E1 = -638.7789052671634  E_coul = 204.4024839781346
cycle= 2 E= -434.376421289029  delta_E= -0.00236  |g|= 0.0116  |ddm|= 0.347
    CPU time for cycle= 2      0.13 sec, wall time      0.01 sec
diis-norm(errvec)=0.00465843
diis-c [-1.01420600e-05 -8.31639183e-03  1.00831639e+00]
  HOMO = 14.916793654969  LUMO = 122.479437712632
  mo_energy =
[-1.01385196e+02 -9.91454307e+00 -5.73620582e+00 -5.73620582e+00
 -5.73620582e+00 -4.65219488e-01 -4.65219488e-01 -4.65219488e-01
  1.49167937e+01  1.22479438e+02  5.80262414e+03  5.80262414e+03
  5.80262414e+03]
E1 = -638.7778874506737  E_coul = 204.40146561457527
cycle= 3 E= -434.376421836098  delta_E= -5.47e-07  |g|= 0.000105  |ddm|= 0.0059
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=3.18903e-05
diis-c [-2.67572643e-10  3.73589774e-05 -7.91255106e-03  1.00787519e+00]
  HOMO = 14.9167750167208  LUMO = 122.479385737296
  mo_energy =
[-1.01385342e+02 -9.91455910e+00 -5.73623174e+00 -5.73623174e+00
 -5.73623174e+00 -4.65219920e-01 -4.65219920e-01 -4.65219920e-01
  1.49167750e+01  1.22479386e+02  5.80262379e+03  5.80262379e+03
  5.80262379e+03]
E1 = -638.7778776815383  E_coul = 204.40145584539295
cycle= 4 E= -434.376421836145  delta_E= -4.69e-11  |g|= 1.04e-06  |ddm|= 5.8e-05
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
E1 = -638.7778776815383  E_coul = 204.40145584539295
  HOMO = 14.9167749033929  LUMO = 122.479385326529
  mo_energy =
[-1.01385343e+02 -9.91455921e+00 -5.73623193e+00 -5.73623193e+00
 -5.73623193e+00 -4.65219922e-01 -4.65219922e-01 -4.65219922e-01
  1.49167749e+01  1.22479385e+02  5.80262379e+03  5.80262379e+03
  5.80262379e+03]
E1 = -638.7778775968941  E_coul = 204.4014557607486
Extra cycle  E= -434.376421836145  delta_E= -1.71e-13  |g|= 2.15e-08  |ddm|= 5.31e-07
    CPU time for scf_cycle      0.58 sec, wall time      0.08 sec
exp = [1.82555622e+01 9.57635696e+01 2.13042533e+00 2.87635695e+01
 8.54357891e+00 1.95529188e-01 2.69396474e+03]
E = -434.3764218361455
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
number_of_s_exps = 4
number_of_p_exps = 3

exps = np.zeros((number_of_s_exps+number_of_p_exps,2))
#exps[:, 0] = decaying_nums(5)

# S
exps[0,0] = 20.0
exps[1,0] = 9.5045827955887916e+01
exps[2,0] = 4.4881042475048387e+00 
exps[3,0] = 3.9799528004692630e-01
             
# P          
exps[3,0] = 3.0108199280832128e+01
exps[4,0] = 6.1393781325590453e+00
exps[5,0] = 4.8929328703550412e-01

basis =  str(number_of_s_exps)+"s"+str(number_of_p_exps)+"p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc21115.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 24
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 18 14:57:56 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35677784.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 32000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 32000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 32000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  17.8738858117        1
[INPUT] 0    0    [1    /1   ]  95.8603417327        1
[INPUT] 0    0    [1    /1   ]  1.06519088119        1
[INPUT] 0    0    [1    /1   ]  28.5811758592        1
[INPUT] 1    0    [1    /1   ]  8.61135787733        1
[INPUT] 1    0    [1    /1   ]  0.197080383606       1
[INPUT] 1    0    [1    /1   ]  2693.96474231        1

nuclear repulsion = 0
number of shells = 7
number of NR pGTOs = 13
number of NR cGTOs = 13
basis = {'Ar': [[0, [17.873885811703275, 1.0]], [0, [95.86034173268895, 1.0]], [0, [1.065190881190846, 1.0]], [0, [28.581175859184498, 1.0]], [1, [8.611357877333667, 1.0]], [1, [0.19708038360562763, 1.0]], [1, [2693.9647423089937, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [17.87388581]
bas 1, expnt(s) = [95.86034173]
bas 2, expnt(s) = [1.06519088]
bas 3, expnt(s) = [28.58117586]
bas 4, expnt(s) = [8.61135788]
bas 5, expnt(s) = [0.19708038]
bas 6, expnt(s) = [2693.96474231]
CPU time:        90.54
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  1  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]
 [ 0  1  1  1  0 36 37  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.78738858e+01 2.19623728e+01 9.58603417e+01 7.74005869e+01
 1.06519088e+00 2.64902224e+00 2.85811759e+01 3.12302236e+01
 8.61135788e+00 4.30352114e+01 1.97080384e-01 3.83079261e-01
 2.69396474e+03 5.66205752e+04]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 14.893782371127521
cond(S) = 176.38432017699483
E1 = -575.6418066520667  E_coul = 146.6886565571027
init E= -428.953150094964
    CPU time for initialize scf      0.19 sec, wall time      0.02 sec
  HOMO = 5.88765367859557  LUMO = 110.732811651707
  mo_energy =
[-1.07838910e+02 -1.14993143e+01 -1.02661672e+01 -1.02661672e+01
 -1.02661672e+01 -1.69637428e+00 -1.69637428e+00 -1.69637428e+00
  5.88765368e+00  1.10732812e+02  5.79522741e+03  5.79522741e+03
  5.79522741e+03]
E1 = -639.949662836419  E_coul = 197.97335231092285
cycle= 1 E= -441.976310525496  delta_E=  -13  |g|= 0.623  |ddm|= 6.24
    CPU time for cycle= 1      0.21 sec, wall time      0.01 sec
diis-norm(errvec)=0.428762
diis-c [-0.18383675  1.        ]
  HOMO = 8.83608520320027  LUMO = 115.835149501458
  mo_energy =
[-1.02122769e+02 -8.40990187e+00 -6.28072155e+00 -6.28072155e+00
 -6.28072155e+00 -4.87772816e-01 -4.87772816e-01 -4.87772816e-01
  8.83608520e+00  1.15835150e+02  5.80174543e+03  5.80174543e+03
  5.80174543e+03]
E1 = -639.9216456475972  E_coul = 197.94414091244172
cycle= 2 E= -441.977504735155  delta_E= -0.00119  |g|= 0.0086  |ddm|= 0.104
    CPU time for cycle= 2      0.14 sec, wall time      0.01 sec
diis-norm(errvec)=0.0054222
diis-c [-1.03644060e-05 -1.02807517e-02  1.01028075e+00]
  HOMO = 8.8347251032805  LUMO = 115.832166534803
  mo_energy =
[-1.02130562e+02 -8.41072421e+00 -6.28228218e+00 -6.28228218e+00
 -6.28228218e+00 -4.87808137e-01 -4.87808137e-01 -4.87808137e-01
  8.83472510e+00  1.15832167e+02  5.80172134e+03  5.80172134e+03
  5.80172134e+03]
E1 = -639.9212438941356  E_coul = 197.94373894433292
cycle= 3 E= -441.977504949803  delta_E= -2.15e-07  |g|= 5.18e-05  |ddm|= 0.00138
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=3.31487e-05
diis-c [-1.46050970e-10  2.42875983e-05 -7.17518553e-03  1.00715090e+00]
  HOMO = 8.83472320713023  LUMO = 115.832152321267
  mo_energy =
[-1.02130601e+02 -8.41072583e+00 -6.28228546e+00 -6.28228546e+00
 -6.28228546e+00 -4.87808185e-01 -4.87808185e-01 -4.87808185e-01
  8.83472321e+00  1.15832152e+02  5.80172120e+03  5.80172120e+03
  5.80172120e+03]
E1 = -639.9212420152392  E_coul = 197.9437370654307
cycle= 4 E= -441.977504949808  delta_E= -5.8e-12  |g|= 2.67e-07  |ddm|= 6.31e-06
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
E1 = -639.9212420152392  E_coul = 197.9437370654307
  HOMO = 8.83472325024608  LUMO = 115.832152315373
  mo_energy =
[-1.02130601e+02 -8.41072581e+00 -6.28228542e+00 -6.28228542e+00
 -6.28228542e+00 -4.87808184e-01 -4.87808184e-01 -4.87808184e-01
  8.83472325e+00  1.15832152e+02  5.80172120e+03  5.80172120e+03
  5.80172120e+03]
E1 = -639.9212420139172  E_coul = 197.94373706410877
Extra cycle  E= -441.977504949808  delta_E=    0  |g|= 3.68e-09  |ddm|= 2.24e-08
    CPU time for scf_cycle      0.58 sec, wall time      0.07 sec
exp = [1.78738858e+01 9.58603417e+01 1.06519088e+00 2.85811759e+01
 8.61135788e+00 1.97080384e-01 2.69396474e+03]
E = -441.97750494980846
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
number_of_s_exps = 4
number_of_p_exps = 3

exps = np.zeros((number_of_s_exps+number_of_p_exps,2))
#exps[:, 0] = decaying_nums(5)

# S
exps[0,0] = 20.0
exps[1,0] = 9.5045827955887916e+01
exps[2,0] = 4.4881042475048387e+00 
exps[3,0] = 3.9799528004692630e-01
             
# P          
exps[3,0] = 3.0108199280832128e+01
exps[4,0] = 6.1393781325590453e+00
exps[5,0] = 4.8929328703550412e-01

basis =  str(number_of_s_exps)+"s"+str(number_of_p_exps)+"p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc21115.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 24
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 18 14:57:56 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35677784.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 32000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 32000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 32000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  17.6830640261        1
[INPUT] 0    0    [1    /1   ]  95.9087236476        1
[INPUT] 0    0    [1    /1   ]  0.532619407729       1
[INPUT] 0    0    [1    /1   ]  28.489986875         1
[INPUT] 1    0    [1    /1   ]  8.64524444843        1
[INPUT] 1    0    [1    /1   ]  0.197855915002       1
[INPUT] 1    0    [1    /1   ]  2693.96474383        1

nuclear repulsion = 0
number of shells = 7
number of NR pGTOs = 13
number of NR cGTOs = 13
basis = {'Ar': [[0, [17.68306402609772, 1.0]], [0, [95.9087236475559, 1.0]], [0, [0.5326194077293805, 1.0]], [0, [28.48998687501953, 1.0]], [1, [8.645244448427885, 1.0]], [1, [0.19785591500176147, 1.0]], [1, [2693.964743834437, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [17.68306403]
bas 1, expnt(s) = [95.90872365]
bas 2, expnt(s) = [0.53261941]
bas 3, expnt(s) = [28.48998688]
bas 4, expnt(s) = [8.64524445]
bas 5, expnt(s) = [0.19785592]
bas 6, expnt(s) = [2693.96474383]
CPU time:        91.17
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  1  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]
 [ 0  1  1  1  0 36 37  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.76830640e+01 2.17862842e+01 9.59087236e+01 7.74298839e+01
 5.32619408e-01 1.57517121e+00 2.84899869e+01 3.11554631e+01
 8.64524445e+00 4.32470003e+01 1.97855915e-01 3.84964507e-01
 2.69396474e+03 5.66205752e+04]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 15.384763561712273
cond(S) = 156.58518637352137
E1 = -574.8491306838733  E_coul = 149.36389515445575
init E= -425.485235529418
    CPU time for initialize scf      0.19 sec, wall time      0.02 sec
  HOMO = 2.71022412060394  LUMO = 108.114753367545
  mo_energy =
[-1.07669163e+02 -1.00850048e+01 -1.00850048e+01 -1.00850048e+01
 -8.52959694e+00 -1.51835174e+00 -1.51835174e+00 -1.51835174e+00
  2.71022412e+00  1.08114753e+02  5.79533922e+03  5.79533922e+03
  5.79533922e+03]
E1 = -635.285189463016  E_coul = 191.6579288652089
cycle= 1 E= -443.627260597807  delta_E= -18.1  |g|= 0.57  |ddm|= 7.06
    CPU time for cycle= 1      0.21 sec, wall time      0.01 sec
diis-norm(errvec)=0.420698
diis-c [-0.17698641  1.        ]
  HOMO = 5.21140298837748  LUMO = 112.455264584814
  mo_energy =
[-1.02772618e+02 -6.82823147e+00 -6.82823147e+00 -6.82823147e+00
 -6.33135728e+00 -5.35943840e-01 -5.35943840e-01 -5.35943840e-01
  5.21140299e+00  1.12455265e+02  5.80102017e+03  5.80102017e+03
  5.80102017e+03]
E1 = -635.2730352951919  E_coul = 191.64489824675687
cycle= 2 E= -443.628137048435  delta_E= -0.000876  |g|= 0.0085  |ddm|= 0.031
    CPU time for cycle= 2      0.14 sec, wall time      0.01 sec
diis-norm(errvec)=0.00566307
diis-c [-1.07761507e-05 -1.10908216e-02  1.01109082e+00]
  HOMO = 5.21081694764563  LUMO = 112.453668372792
  mo_energy =
[-1.02776545e+02 -6.82880891e+00 -6.82880891e+00 -6.82880891e+00
 -6.33162577e+00 -5.35970441e-01 -5.35970441e-01 -5.35970441e-01
  5.21081695e+00  1.12453668e+02  5.80100256e+03  5.80100256e+03
  5.80100256e+03]
E1 = -635.272933502361  E_coul = 191.6447962704967
cycle= 3 E= -443.628137231864  delta_E= -1.83e-07  |g|= 5.73e-05  |ddm|= 0.000483
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=3.61702e-05
diis-c [-9.59658061e-11  1.89417129e-05 -7.29324369e-03  1.00727430e+00]
  HOMO = 5.21082073348081  LUMO = 112.453667606931
  mo_energy =
[-1.02776545e+02 -6.82880387e+00 -6.82880387e+00 -6.82880387e+00
 -6.33162368e+00 -5.35970329e-01 -5.35970329e-01 -5.35970329e-01
  5.21082073e+00  1.12453668e+02  5.80100249e+03  5.80100249e+03
  5.80100249e+03]
E1 = -635.2729344385721  E_coul = 191.6447972066988
cycle= 4 E= -443.628137231873  delta_E= -9.04e-12  |g|= 2.97e-07  |ddm|= 8.99e-06
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
E1 = -635.2729344385721  E_coul = 191.6447972066988
  HOMO = 5.21082080558164  LUMO = 112.45366772373
  mo_energy =
[-1.02776545e+02 -6.82880378e+00 -6.82880378e+00 -6.82880378e+00
 -6.33162364e+00 -5.35970326e-01 -5.35970326e-01 -5.35970326e-01
  5.21082081e+00  1.12453668e+02  5.80100249e+03  5.80100249e+03
  5.80100249e+03]
E1 = -635.2729344621446  E_coul = 191.6447972302718
Extra cycle  E= -443.628137231873  delta_E= 5.12e-13  |g|= 5.79e-09  |ddm|= 1.18e-07
    CPU time for scf_cycle      0.58 sec, wall time      0.07 sec
exp = [1.76830640e+01 9.59087236e+01 5.32619408e-01 2.84899869e+01
 8.64524445e+00 1.97855915e-01 2.69396474e+03]
E = -443.62813723187276
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
number_of_s_exps = 4
number_of_p_exps = 3

exps = np.zeros((number_of_s_exps+number_of_p_exps,2))
#exps[:, 0] = decaying_nums(5)

# S
exps[0,0] = 20.0
exps[1,0] = 9.5045827955887916e+01
exps[2,0] = 4.4881042475048387e+00 
exps[3,0] = 3.9799528004692630e-01
             
# P          
exps[3,0] = 3.0108199280832128e+01
exps[4,0] = 6.1393781325590453e+00
exps[5,0] = 4.8929328703550412e-01

basis =  str(number_of_s_exps)+"s"+str(number_of_p_exps)+"p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc21115.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 24
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 18 14:57:56 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35677784.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 32000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 32000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 32000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  17.5876566942        1
[INPUT] 0    0    [1    /1   ]  95.9329137021        1
[INPUT] 0    0    [1    /1   ]  0.26634360934        1
[INPUT] 0    0    [1    /1   ]  28.4443940846        1
[INPUT] 1    0    [1    /1   ]  8.66218710162        1
[INPUT] 1    0    [1    /1   ]  0.198243666228       1
[INPUT] 1    0    [1    /1   ]  2693.9647446         1

nuclear repulsion = 0
number of shells = 7
number of NR pGTOs = 13
number of NR cGTOs = 13
basis = {'Ar': [[0, [17.587656694229146, 1.0]], [0, [95.93291370213221, 1.0]], [0, [0.26634360933963863, 1.0]], [0, [28.444394084618914, 1.0]], [1, [8.662187101616118, 1.0]], [1, [0.19824366622760103, 1.0]], [1, [2693.96474459713, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [17.58765669]
bas 1, expnt(s) = [95.9329137]
bas 2, expnt(s) = [0.26634361]
bas 3, expnt(s) = [28.44439408]
bas 4, expnt(s) = [8.6621871]
bas 5, expnt(s) = [0.19824367]
bas 6, expnt(s) = [2693.9647446]
CPU time:        91.79
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  1  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]
 [ 0  1  1  1  0 36 37  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.75876567e+01 2.16980652e+01 9.59329137e+01 7.74445304e+01
 2.66343609e-01 9.36691836e-01 2.84443941e+01 3.11180618e+01
 8.66218710e+00 4.33529688e+01 1.98243666e-01 3.85907788e-01
 2.69396474e+03 5.66205753e+04]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 15.435525743701842
cond(S) = 148.71411369642647
E1 = -567.7941339931702  E_coul = 145.48690852132893
init E= -422.307225471841
    CPU time for initialize scf      0.19 sec, wall time      0.02 sec
  HOMO = 0.619940764993022  LUMO = 106.485308451788
  mo_energy =
[-1.08060713e+02 -1.04664159e+01 -1.04664159e+01 -1.04664159e+01
 -6.22733601e+00 -1.57436916e+00 -1.57436916e+00 -1.57436916e+00
  6.19940765e-01  1.06485308e+02  5.79492859e+03  5.79492859e+03
  5.79492859e+03]
E1 = -628.7993528213736  E_coul = 185.93966238307684
cycle= 1 E= -442.859690438297  delta_E= -20.6  |g|= 0.555  |ddm|= 7.62
    CPU time for cycle= 1      0.21 sec, wall time      0.01 sec
diis-norm(errvec)=0.414616
diis-c [-0.17190681  1.        ]
  HOMO = 3.03324618038164  LUMO = 110.711459927885
  mo_energy =
[-1.03307294e+02 -7.31708519e+00 -7.31708519e+00 -7.31708519e+00
 -4.38365675e+00 -6.17149520e-01 -6.17149520e-01 -6.17149520e-01
  3.03324618e+00  1.10711460e+02  5.80045312e+03  5.80045312e+03
  5.80045312e+03]
E1 = -628.7930328523975  E_coul = 185.9325409903249
cycle= 2 E= -442.860491862073  delta_E= -0.000801  |g|= 0.00864  |ddm|= 0.0325
    CPU time for cycle= 2      0.15 sec, wall time      0.01 sec
diis-norm(errvec)=0.00572612
diis-c [-1.12011235e-05 -1.13334429e-02  1.01133344e+00]
  HOMO = 3.03300049249159  LUMO = 110.71033721953
  mo_energy =
[-1.03309951e+02 -7.31726654e+00 -7.31726654e+00 -7.31726654e+00
 -4.38374254e+00 -6.17174490e-01 -6.17174490e-01 -6.17174490e-01
  3.03300049e+00  1.10710337e+02  5.80043748e+03  5.80043748e+03
  5.80043748e+03]
E1 = -628.7930270720392  E_coul = 185.93253502153783
cycle= 3 E= -442.860492050501  delta_E= -1.88e-07  |g|= 6.21e-05  |ddm|= 0.000813
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=3.77387e-05
diis-c [-6.73843204e-11  1.70146240e-05 -7.44681810e-03  1.00742980e+00]
  HOMO = 3.03300561652613  LUMO = 110.710339499792
  mo_energy =
[-1.03309942e+02 -7.31725959e+00 -7.31725959e+00 -7.31725959e+00
 -4.38374005e+00 -6.17174309e-01 -6.17174309e-01 -6.17174309e-01
  3.03300562e+00  1.10710339e+02  5.80043742e+03  5.80043742e+03
  5.80043742e+03]
E1 = -628.7930286446921  E_coul = 185.93253659417937
cycle= 4 E= -442.860492050513  delta_E= -1.13e-11  |g|= 3.3e-07  |ddm|= 1.21e-05
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
E1 = -628.7930286446921  E_coul = 185.93253659417937
  HOMO = 3.03300568225063  LUMO = 110.710339633613
  mo_energy =
[-1.03309942e+02 -7.31725950e+00 -7.31725950e+00 -7.31725950e+00
 -4.38374002e+00 -6.17174307e-01 -6.17174307e-01 -6.17174307e-01
  3.03300568e+00  1.10710340e+02  5.80043742e+03  5.80043742e+03
  5.80043742e+03]
E1 = -628.7930286720529  E_coul = 185.93253662154072
Extra cycle  E= -442.860492050512  delta_E= 5.68e-13  |g|= 7.13e-09  |ddm|= 1.36e-07
    CPU time for scf_cycle      0.58 sec, wall time      0.07 sec
exp = [1.75876567e+01 9.59329137e+01 2.66343609e-01 2.84443941e+01
 8.66218710e+00 1.98243666e-01 2.69396474e+03]
E = -442.8604920505121
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
number_of_s_exps = 4
number_of_p_exps = 3

exps = np.zeros((number_of_s_exps+number_of_p_exps,2))
#exps[:, 0] = decaying_nums(5)

# S
exps[0,0] = 20.0
exps[1,0] = 9.5045827955887916e+01
exps[2,0] = 4.4881042475048387e+00 
exps[3,0] = 3.9799528004692630e-01
             
# P          
exps[3,0] = 3.0108199280832128e+01
exps[4,0] = 6.1393781325590453e+00
exps[5,0] = 4.8929328703550412e-01

basis =  str(number_of_s_exps)+"s"+str(number_of_p_exps)+"p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc21115.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 24
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 18 14:57:56 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35677784.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 32000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 32000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 32000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  17.5399513735        1
[INPUT] 0    0    [1    /1   ]  95.945009149         1
[INPUT] 0    0    [1    /1   ]  0.133201091836       1
[INPUT] 0    0    [1    /1   ]  28.4215968987        1
[INPUT] 1    0    [1    /1   ]  8.67065872206        1
[INPUT] 1    0    [1    /1   ]  0.198437548566       1
[INPUT] 1    0    [1    /1   ]  2693.96474498        1

nuclear repulsion = 0
number of shells = 7
number of NR pGTOs = 13
number of NR cGTOs = 13
basis = {'Ar': [[0, [17.539951373542426, 1.0]], [0, [95.94500914897462, 1.0]], [0, [0.13320109183591677, 1.0]], [0, [28.421596898653583, 1.0]], [1, [8.670658722064973, 1.0]], [1, [0.19843754856570922, 1.0]], [1, [2693.9647449784898, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [17.53995137]
bas 1, expnt(s) = [95.94500915]
bas 2, expnt(s) = [0.13320109]
bas 3, expnt(s) = [28.4215969]
bas 4, expnt(s) = [8.67065872]
bas 5, expnt(s) = [0.19843755]
bas 6, expnt(s) = [2693.96474498]
CPU time:        92.42
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  1  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]
 [ 0  1  1  1  0 36 37  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.75399514e+01 2.16539093e+01 9.59450091e+01 7.74518536e+01
 1.33201092e-01 5.57052160e-01 2.84215969e+01 3.10993549e+01
 8.67065872e+00 4.34059742e+01 1.98437549e-01 3.86379618e-01
 2.69396474e+03 5.66205753e+04]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 14.964822078418635
cond(S) = 145.4939938008468
E1 = -557.1393517044365  E_coul = 138.31802445881561
init E= -418.821327245621
    CPU time for initialize scf      0.19 sec, wall time      0.02 sec
  HOMO = -0.72373015050588  LUMO = 105.317990292266
  mo_energy =
[-1.08691111e+02 -1.10954798e+01 -1.10954798e+01 -1.10954798e+01
 -4.73145529e+00 -1.83449888e+00 -1.83449888e+00 -1.83449888e+00
 -7.23730151e-01  1.05317990e+02  5.79429778e+03  5.79429778e+03
  5.79429778e+03]
E1 = -622.6079739222814  E_coul = 181.1156996166709
cycle= 1 E= -441.492274305611  delta_E= -22.7  |g|= 0.538  |ddm|= 7.45
    CPU time for cycle= 1      0.21 sec, wall time      0.01 sec
diis-norm(errvec)=0.406242
diis-c [-0.16503252  1.        ]
  HOMO = 1.71101894238608  LUMO = 109.773140764309
  mo_energy =
[-1.03726069e+02 -7.71661667e+00 -7.71661667e+00 -7.71661667e+00
 -2.86595327e+00 -7.19263090e-01 -7.19263090e-01 -7.19263090e-01
  1.71101894e+00  1.09773141e+02  5.80002109e+03  5.80002109e+03
  5.80002109e+03]
E1 = -622.6043336768008  E_coul = 181.11133780179372
cycle= 2 E= -441.492995875007  delta_E= -0.000722  |g|= 0.00863  |ddm|= 0.0355
    CPU time for cycle= 2      0.14 sec, wall time      0.01 sec
diis-norm(errvec)=0.0057162
diis-c [-1.14206219e-05 -1.14791664e-02  1.01147917e+00]
  HOMO = 1.71097401791102  LUMO = 109.772207173423
  mo_energy =
[-1.03728260e+02 -7.71658724e+00 -7.71658724e+00 -7.71658724e+00
 -2.86595848e+00 -7.19282810e-01 -7.19282810e-01 -7.19282810e-01
  1.71097402e+00  1.09772207e+02  5.80000607e+03  5.80000607e+03
  5.80000607e+03]
E1 = -622.6043553851592  E_coul = 181.1113593241245
cycle= 3 E= -441.492996061035  delta_E= -1.86e-07  |g|= 6.22e-05  |ddm|= 0.000882
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=3.7831e-05
diis-c [-3.69761570e-11  1.37100065e-05 -7.34597563e-03  1.00733227e+00]
  HOMO = 1.71097886174705  LUMO = 109.772209365972
  mo_energy =
[-1.03728251e+02 -7.71658058e+00 -7.71658058e+00 -7.71658058e+00
 -2.86595631e+00 -7.19282621e-01 -7.19282621e-01 -7.19282621e-01
  1.71097886e+00  1.09772209e+02  5.80000602e+03  5.80000602e+03
  5.80000602e+03]
E1 = -622.6043569564617  E_coul = 181.11136089541554
cycle= 4 E= -441.492996061046  delta_E= -1.14e-11  |g|= 3.24e-07  |ddm|= 1.21e-05
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
E1 = -622.6043569564617  E_coul = 181.11136089541554
  HOMO = 1.71097891590334  LUMO = 109.772209493952
  mo_energy =
[-1.03728251e+02 -7.71658050e+00 -7.71658050e+00 -7.71658050e+00
 -2.86595628e+00 -7.19282619e-01 -7.19282619e-01 -7.19282619e-01
  1.71097892e+00  1.09772209e+02  5.80000602e+03  5.80000602e+03
  5.80000602e+03]
E1 = -622.6043569832342  E_coul = 181.11136092218786
Extra cycle  E= -441.492996061046  delta_E= -1.71e-13  |g|= 7.22e-09  |ddm|= 1.33e-07
    CPU time for scf_cycle      0.58 sec, wall time      0.07 sec
exp = [1.75399514e+01 9.59450091e+01 1.33201092e-01 2.84215969e+01
 8.67065872e+00 1.98437549e-01 2.69396474e+03]
E = -441.49299606104637
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
number_of_s_exps = 4
number_of_p_exps = 3

exps = np.zeros((number_of_s_exps+number_of_p_exps,2))
#exps[:, 0] = decaying_nums(5)

# S
exps[0,0] = 20.0
exps[1,0] = 9.5045827955887916e+01
exps[2,0] = 4.4881042475048387e+00 
exps[3,0] = 3.9799528004692630e-01
             
# P          
exps[3,0] = 3.0108199280832128e+01
exps[4,0] = 6.1393781325590453e+00
exps[5,0] = 4.8929328703550412e-01

basis =  str(number_of_s_exps)+"s"+str(number_of_p_exps)+"p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc21115.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 24
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 18 14:57:56 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35677784.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 32000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 32000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 32000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  17.5399513735        1
[INPUT] 0    0    [1    /1   ]  95.945009149         1
[INPUT] 0    0    [1    /1   ]  0.133201091836       1
[INPUT] 0    0    [1    /1   ]  28.4215968987        1
[INPUT] 1    0    [1    /1   ]  8.67065872206        1
[INPUT] 1    0    [1    /1   ]  0.198437548566       1
[INPUT] 1    0    [1    /1   ]  2693.96474498        1

nuclear repulsion = 0
number of shells = 7
number of NR pGTOs = 13
number of NR cGTOs = 13
basis = {'Ar': [[0, [17.539951373542426, 1.0]], [0, [95.94500914897462, 1.0]], [0, [0.13320109183591677, 1.0]], [0, [28.421596898653583, 1.0]], [1, [8.670658722064973, 1.0]], [1, [0.19843754856570922, 1.0]], [1, [2693.9647449784898, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [17.53995137]
bas 1, expnt(s) = [95.94500915]
bas 2, expnt(s) = [0.13320109]
bas 3, expnt(s) = [28.4215969]
bas 4, expnt(s) = [8.67065872]
bas 5, expnt(s) = [0.19843755]
bas 6, expnt(s) = [2693.96474498]
CPU time:        93.04
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  1  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]
 [ 0  1  1  1  0 36 37  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.75399514e+01 2.16539093e+01 9.59450091e+01 7.74518536e+01
 1.33201092e-01 5.57052160e-01 2.84215969e+01 3.10993549e+01
 8.67065872e+00 4.34059742e+01 1.98437549e-01 3.86379618e-01
 2.69396474e+03 5.66205753e+04]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 14.964822078418635
cond(S) = 145.4939938008468
E1 = -557.1393517044365  E_coul = 138.31802445881561
init E= -418.821327245621
    CPU time for initialize scf      0.19 sec, wall time      0.02 sec
  HOMO = -0.72373015050588  LUMO = 105.317990292266
  mo_energy =
[-1.08691111e+02 -1.10954798e+01 -1.10954798e+01 -1.10954798e+01
 -4.73145529e+00 -1.83449888e+00 -1.83449888e+00 -1.83449888e+00
 -7.23730151e-01  1.05317990e+02  5.79429778e+03  5.79429778e+03
  5.79429778e+03]
E1 = -622.6079739222814  E_coul = 181.1156996166709
cycle= 1 E= -441.492274305611  delta_E= -22.7  |g|= 0.538  |ddm|= 7.45
    CPU time for cycle= 1      0.21 sec, wall time      0.01 sec
diis-norm(errvec)=0.406242
diis-c [-0.16503252  1.        ]
  HOMO = 1.71101894238608  LUMO = 109.773140764309
  mo_energy =
[-1.03726069e+02 -7.71661667e+00 -7.71661667e+00 -7.71661667e+00
 -2.86595327e+00 -7.19263090e-01 -7.19263090e-01 -7.19263090e-01
  1.71101894e+00  1.09773141e+02  5.80002109e+03  5.80002109e+03
  5.80002109e+03]
E1 = -622.6043336768008  E_coul = 181.11133780179372
cycle= 2 E= -441.492995875007  delta_E= -0.000722  |g|= 0.00863  |ddm|= 0.0355
    CPU time for cycle= 2      0.14 sec, wall time      0.01 sec
diis-norm(errvec)=0.0057162
diis-c [-1.14206219e-05 -1.14791664e-02  1.01147917e+00]
  HOMO = 1.71097401791102  LUMO = 109.772207173423
  mo_energy =
[-1.03728260e+02 -7.71658724e+00 -7.71658724e+00 -7.71658724e+00
 -2.86595848e+00 -7.19282810e-01 -7.19282810e-01 -7.19282810e-01
  1.71097402e+00  1.09772207e+02  5.80000607e+03  5.80000607e+03
  5.80000607e+03]
E1 = -622.6043553851592  E_coul = 181.1113593241245
cycle= 3 E= -441.492996061035  delta_E= -1.86e-07  |g|= 6.22e-05  |ddm|= 0.000882
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=3.7831e-05
diis-c [-3.69761570e-11  1.37100065e-05 -7.34597563e-03  1.00733227e+00]
  HOMO = 1.71097886174705  LUMO = 109.772209365972
  mo_energy =
[-1.03728251e+02 -7.71658058e+00 -7.71658058e+00 -7.71658058e+00
 -2.86595631e+00 -7.19282621e-01 -7.19282621e-01 -7.19282621e-01
  1.71097886e+00  1.09772209e+02  5.80000602e+03  5.80000602e+03
  5.80000602e+03]
E1 = -622.6043569564617  E_coul = 181.11136089541554
cycle= 4 E= -441.492996061046  delta_E= -1.14e-11  |g|= 3.24e-07  |ddm|= 1.21e-05
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
E1 = -622.6043569564617  E_coul = 181.11136089541554
  HOMO = 1.71097891590334  LUMO = 109.772209493952
  mo_energy =
[-1.03728251e+02 -7.71658050e+00 -7.71658050e+00 -7.71658050e+00
 -2.86595628e+00 -7.19282619e-01 -7.19282619e-01 -7.19282619e-01
  1.71097892e+00  1.09772209e+02  5.80000602e+03  5.80000602e+03
  5.80000602e+03]
E1 = -622.6043569832342  E_coul = 181.11136092218786
Extra cycle  E= -441.492996061046  delta_E= -1.71e-13  |g|= 7.22e-09  |ddm|= 1.33e-07
    CPU time for scf_cycle      0.58 sec, wall time      0.07 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 145.4939938008468
E1 = -622.6043569832342  E_coul = 181.11136092218786
init E= -441.492996061046
    CPU time for initialize scf      1.12 sec, wall time      0.05 sec
  HOMO = 1.71097891688434  LUMO = 109.77220949656
  mo_energy =
[-1.03728251e+02 -7.71658050e+00 -7.71658050e+00 -7.71658050e+00
 -2.86595628e+00 -7.19282619e-01 -7.19282619e-01 -7.19282619e-01
  1.71097892e+00  1.09772209e+02  5.80000602e+03  5.80000602e+03
  5.80000602e+03]
E1 = -622.6043569838145  E_coul = 181.11136092276706
cycle= 1 E= -441.492996061047  delta_E= -1.02e-12  |g|= 1.62e-10  |ddm|= 2.95e-09
    CPU time for cycle= 1      0.20 sec, wall time      0.01 sec
E1 = -622.6043569838145  E_coul = 181.11136092276706
  HOMO = 1.71097891690497  LUMO = 109.772209496618
  mo_energy =
[-1.03728251e+02 -7.71658050e+00 -7.71658050e+00 -7.71658050e+00
 -2.86595628e+00 -7.19282619e-01 -7.19282619e-01 -7.19282619e-01
  1.71097892e+00  1.09772209e+02  5.80000602e+03  5.80000602e+03
  5.80000602e+03]
E1 = -622.6043569838272  E_coul = 181.1113609227798
Extra cycle  E= -441.492996061047  delta_E=    0  |g|= 3.33e-12  |ddm|= 6.59e-11
    CPU time for scf_cycle      1.43 sec, wall time      0.11 sec
exp = [1.75399514e+01 9.59450091e+01 1.33201092e-01 2.84215969e+01
 8.67065872e+00 1.98437549e-01 2.69396474e+03]
grad_E = [ 1.95278495e+00 -4.79686639e-01 -1.57519697e+01  8.26492379e-01
  5.18950168e-01 -1.92149791e+01  6.23442082e-06]
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
number_of_s_exps = 4
number_of_p_exps = 3

exps = np.zeros((number_of_s_exps+number_of_p_exps,2))
#exps[:, 0] = decaying_nums(5)

# S
exps[0,0] = 20.0
exps[1,0] = 9.5045827955887916e+01
exps[2,0] = 4.4881042475048387e+00 
exps[3,0] = 3.9799528004692630e-01
             
# P          
exps[3,0] = 3.0108199280832128e+01
exps[4,0] = 6.1393781325590453e+00
exps[5,0] = 4.8929328703550412e-01

basis =  str(number_of_s_exps)+"s"+str(number_of_p_exps)+"p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc21115.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 24
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 18 14:57:59 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35677784.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 32000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 32000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 32000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  15.5273732404        1
[INPUT] 0    0    [1    /1   ]  96.4403215598        1
[INPUT] 0    0    [1    /1   ]  0.798598505102       1
[INPUT] 0    0    [1    /1   ]  27.5637667153        1
[INPUT] 1    0    [1    /1   ]  7.47355382983        1
[INPUT] 1    0    [1    /1   ]  1.00002212067e-09      1
[INPUT] 1    0    [1    /1   ]  2693.96474517        1

nuclear repulsion = 0
number of shells = 7
number of NR pGTOs = 13
number of NR cGTOs = 13
basis = {'Ar': [[0, [15.527373240370625, 1.0]], [0, [96.44032155978076, 1.0]], [0, [0.7985985051018626, 1.0]], [0, [27.56376671533434, 1.0]], [1, [7.473553829833129, 1.0]], [1, [1.0000221206674098e-09, 1.0]], [1, [2693.964745170483, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [15.52737324]
bas 1, expnt(s) = [96.44032156]
bas 2, expnt(s) = [0.79859851]
bas 3, expnt(s) = [27.56376672]
bas 4, expnt(s) = [7.47355383]
bas 5, expnt(s) = [1.00002212e-09]
bas 6, expnt(s) = [2693.96474517]
CPU time:        97.64
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  1  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]
 [ 0  1  1  1  0 36 37  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.55273732e+01 1.97623469e+01 9.64403216e+01 7.77515421e+01
 7.98598505e-01 2.13432914e+00 2.75637667e+01 3.03926766e+01
 7.47355383e+00 3.60490107e+01 1.00002212e-09 1.64057618e-11
 2.69396475e+03 5.66205753e+04]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 10.692029824738835
cond(S) = 107.49331097882173
E1 = -538.6569955804249  E_coul = 118.55617014353153
init E= -420.100825436893
    CPU time for initialize scf      4.60 sec, wall time      0.22 sec
  HOMO = -0.000605556002483198  LUMO = 97.5037168840937
  mo_energy =
[-1.10916707e+02 -1.30636078e+01 -1.24513072e+01 -1.24513072e+01
 -1.24513072e+01 -2.09725283e-02 -6.05556003e-04 -6.05556003e-04
 -6.05556002e-04  9.75037169e+01  5.79200487e+03  5.79200487e+03
  5.79200487e+03]
E1 = -588.637196615822  E_coul = 148.74733709650633
cycle= 1 E= -439.889859519316  delta_E= -19.8  |g|= 0.571  |ddm|=  5.6
    CPU time for cycle= 1      0.23 sec, wall time      0.01 sec
diis-norm(errvec)=0.418994
diis-c [-0.17555638  1.        ]
  HOMO = 1.7364157080895  LUMO = 101.15283568091
  mo_energy =
[-1.06728396e+02 -1.10720764e+01 -9.83528672e+00 -9.83528672e+00
 -9.83528672e+00 -6.05556002e-04 -6.05556002e-04 -6.05556002e-04
  1.73641571e+00  1.01152836e+02  5.79685413e+03  5.79685413e+03
  5.79685413e+03]
E1 = -588.6171748359548  E_coul = 148.72635756001026
cycle= 2 E= -439.890817275945  delta_E= -0.000958  |g|= 0.00857  |ddm|= 0.0439
    CPU time for cycle= 2      0.09 sec, wall time      0.01 sec
diis-norm(errvec)=0.0058577
diis-c [-1.00039376e-05 -1.19076410e-02  1.01190764e+00]
  HOMO = 1.73559734364058  LUMO = 101.150465175296
  mo_energy =
[-1.06734561e+02 -1.10727362e+01 -9.83627934e+00 -9.83627934e+00
 -9.83627934e+00 -6.05556005e-04 -6.05556003e-04 -6.05556002e-04
  1.73559734e+00  1.01150465e+02  5.79683207e+03  5.79683207e+03
  5.79683207e+03]
E1 = -588.6169211210962  E_coul = 148.726103644048
cycle= 3 E= -439.890817477048  delta_E= -2.01e-07  |g|= 4.69e-05  |ddm|= 0.000466
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=3.17608e-05
diis-c [-9.58259120e-11  1.83739751e-05 -6.25422928e-03  1.00623586e+00]
  HOMO = 1.73559893304732  LUMO = 101.150460460348
  mo_energy =
[-1.06734573e+02 -1.10727349e+01 -9.83627717e+00 -9.83627717e+00
 -9.83627717e+00 -6.05556004e-04 -6.05556003e-04 -6.05556002e-04
  1.73559893e+00  1.01150460e+02  5.79683199e+03  5.79683199e+03
  5.79683199e+03]
E1 = -588.6169211360551  E_coul = 148.7261036590009
cycle= 4 E= -439.890817477054  delta_E= -6.03e-12  |g|= 2.58e-07  |ddm|= 2.84e-06
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
E1 = -588.6169211360551  E_coul = 148.7261036590009
  HOMO = 1.73559899331249  LUMO = 101.150460553663
  mo_energy =
[-1.06734573e+02 -1.10727349e+01 -9.83627709e+00 -9.83627709e+00
 -9.83627709e+00 -6.05556004e-04 -6.05556003e-04 -6.05556003e-04
  1.73559899e+00  1.01150461e+02  5.79683199e+03  5.79683199e+03
  5.79683199e+03]
E1 = -588.6169211544997  E_coul = 148.72610367744556
Extra cycle  E= -439.890817477054  delta_E= 1.14e-13  |g|= 4.28e-09  |ddm|= 6.34e-08
    CPU time for scf_cycle      4.95 sec, wall time      0.27 sec
exp = [1.55273732e+01 9.64403216e+01 7.98598505e-01 2.75637667e+01
 7.47355383e+00 1.00002212e-09 2.69396475e+03]
E = -439.8908174770541
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
number_of_s_exps = 4
number_of_p_exps = 3

exps = np.zeros((number_of_s_exps+number_of_p_exps,2))
#exps[:, 0] = decaying_nums(5)

# S
exps[0,0] = 20.0
exps[1,0] = 9.5045827955887916e+01
exps[2,0] = 4.4881042475048387e+00 
exps[3,0] = 3.9799528004692630e-01
             
# P          
exps[3,0] = 3.0108199280832128e+01
exps[4,0] = 6.1393781325590453e+00
exps[5,0] = 4.8929328703550412e-01

basis =  str(number_of_s_exps)+"s"+str(number_of_p_exps)+"p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc21115.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 24
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 18 14:57:59 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35677784.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 32000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 32000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 32000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  16.6507598212        1
[INPUT] 0    0    [1    /1   ]  96.1638466709        1
[INPUT] 0    0    [1    /1   ]  0.42718508632        1
[INPUT] 0    0    [1    /1   ]  28.0425928045        1
[INPUT] 1    0    [1    /1   ]  8.14175724001        1
[INPUT] 1    0    [1    /1   ]  0.110764435136       1
[INPUT] 1    0    [1    /1   ]  2693.96474506        1

nuclear repulsion = 0
number of shells = 7
number of NR pGTOs = 13
number of NR cGTOs = 13
basis = {'Ar': [[0, [16.650759821239312, 1.0]], [0, [96.1638466709473, 1.0]], [0, [0.4271850863196311, 1.0]], [0, [28.042592804479124, 1.0]], [1, [8.141757240006378, 1.0]], [1, [0.11076443513628195, 1.0]], [1, [2693.9647450633156, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [16.65075982]
bas 1, expnt(s) = [96.16384667]
bas 2, expnt(s) = [0.42718509]
bas 3, expnt(s) = [28.0425928]
bas 4, expnt(s) = [8.14175724]
bas 5, expnt(s) = [0.11076444]
bas 6, expnt(s) = [2693.96474506]
CPU time:       102.65
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  1  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]
 [ 0  1  1  1  0 36 37  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.66507598e+01 2.08252664e+01 9.61638467e+01 7.75843087e+01
 4.27185086e-01 1.33498715e+00 2.80425928e+01 3.07877994e+01
 8.14175724e+00 4.01219543e+01 1.10764435e-01 1.86416699e-01
 2.69396475e+03 5.66205753e+04]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 13.721326302194015
cond(S) = 125.96510468264644
E1 = -554.4281763630681  E_coul = 132.58947823508038
init E= -421.838698127988
    CPU time for initialize scf      0.18 sec, wall time      0.02 sec
  HOMO = -0.102364721500674  LUMO = 102.097081384676
  mo_energy =
[-1.09332054e+02 -1.13882746e+01 -1.13882746e+01 -1.13882746e+01
 -9.14518630e+00 -1.60408597e+00 -1.60408597e+00 -1.60408597e+00
 -1.02364722e-01  1.02097081e+02  5.79361029e+03  5.79361029e+03
  5.79361029e+03]
E1 = -621.4132662967199  E_coul = 177.1054538380925
cycle= 1 E= -444.307812458627  delta_E= -22.5  |g|= 0.561  |ddm|= 6.54
    CPU time for cycle= 1      0.21 sec, wall time      0.01 sec
diis-norm(errvec)=0.419098
diis-c [-0.17564279  1.        ]
  HOMO = 2.61748480408431  LUMO = 106.602927850699
  mo_energy =
[-1.04302193e+02 -7.92075117e+00 -7.92075117e+00 -7.92075117e+00
 -6.61094372e+00 -5.14564394e-01 -5.14564394e-01 -5.14564394e-01
  2.61748480e+00  1.06602928e+02  5.79936088e+03  5.79936088e+03
  5.79936088e+03]
E1 = -621.4035775803403  E_coul = 177.09491502145758
cycle= 2 E= -444.308662558883  delta_E= -0.00085  |g|= 0.00871  |ddm|= 0.0266
    CPU time for cycle= 2      0.15 sec, wall time      0.01 sec
diis-norm(errvec)=0.00588951
diis-c [-1.07927576e-05 -1.18014027e-02  1.01180140e+00]
  HOMO = 2.61706826300914  LUMO = 106.601511367929
  mo_energy =
[-1.04305649e+02 -7.92115498e+00 -7.92115498e+00 -7.92115498e+00
 -6.61117049e+00 -5.14573285e-01 -5.14573285e-01 -5.14573285e-01
  2.61706826e+00  1.06601511e+02  5.79934369e+03  5.79934369e+03
  5.79934369e+03]
E1 = -621.403520893995  E_coul = 177.09485813938366
cycle= 3 E= -444.308662754611  delta_E= -1.96e-07  |g|= 5.74e-05  |ddm|= 0.000557
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=3.57886e-05
diis-c [-8.40756248e-11  1.75685810e-05 -6.91713223e-03  1.00689956e+00]
  HOMO = 2.61707251466199  LUMO = 106.60151323158
  mo_energy =
[-1.04305642e+02 -7.92114858e+00 -7.92114858e+00 -7.92114858e+00
 -6.61116742e+00 -5.14573239e-01 -5.14573239e-01 -5.14573239e-01
  2.61707251e+00  1.06601513e+02  5.79934364e+03  5.79934364e+03
  5.79934364e+03]
E1 = -621.4035223235936  E_coul = 177.0948595689735
cycle= 4 E= -444.30866275462  delta_E= -8.7e-12  |g|= 3.4e-07  |ddm|= 9.27e-06
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
E1 = -621.4035223235936  E_coul = 177.0948595689735
  HOMO = 2.61707258322883  LUMO = 106.60151337436
  mo_energy =
[-1.04305642e+02 -7.92114847e+00 -7.92114847e+00 -7.92114847e+00
 -6.61116738e+00 -5.14573238e-01 -5.14573238e-01 -5.14573238e-01
  2.61707258e+00  1.06601513e+02  5.79934364e+03  5.79934364e+03
  5.79934364e+03]
E1 = -621.4035223523333  E_coul = 177.09485959771396
Extra cycle  E= -444.308662754619  delta_E= 7.39e-13  |g|= 7.11e-09  |ddm|= 1.19e-07
    CPU time for scf_cycle      0.58 sec, wall time      0.07 sec
exp = [1.66507598e+01 9.61638467e+01 4.27185086e-01 2.80425928e+01
 8.14175724e+00 1.10764435e-01 2.69396475e+03]
E = -444.3086627546194
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
number_of_s_exps = 4
number_of_p_exps = 3

exps = np.zeros((number_of_s_exps+number_of_p_exps,2))
#exps[:, 0] = decaying_nums(5)

# S
exps[0,0] = 20.0
exps[1,0] = 9.5045827955887916e+01
exps[2,0] = 4.4881042475048387e+00 
exps[3,0] = 3.9799528004692630e-01
             
# P          
exps[3,0] = 3.0108199280832128e+01
exps[4,0] = 6.1393781325590453e+00
exps[5,0] = 4.8929328703550412e-01

basis =  str(number_of_s_exps)+"s"+str(number_of_p_exps)+"p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc21115.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 24
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 18 14:57:59 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35677784.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 32000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 32000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 32000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  16.6507598212        1
[INPUT] 0    0    [1    /1   ]  96.1638466709        1
[INPUT] 0    0    [1    /1   ]  0.42718508632        1
[INPUT] 0    0    [1    /1   ]  28.0425928045        1
[INPUT] 1    0    [1    /1   ]  8.14175724001        1
[INPUT] 1    0    [1    /1   ]  0.110764435136       1
[INPUT] 1    0    [1    /1   ]  2693.96474506        1

nuclear repulsion = 0
number of shells = 7
number of NR pGTOs = 13
number of NR cGTOs = 13
basis = {'Ar': [[0, [16.650759821239312, 1.0]], [0, [96.1638466709473, 1.0]], [0, [0.4271850863196311, 1.0]], [0, [28.042592804479124, 1.0]], [1, [8.141757240006378, 1.0]], [1, [0.11076443513628195, 1.0]], [1, [2693.9647450633156, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [16.65075982]
bas 1, expnt(s) = [96.16384667]
bas 2, expnt(s) = [0.42718509]
bas 3, expnt(s) = [28.0425928]
bas 4, expnt(s) = [8.14175724]
bas 5, expnt(s) = [0.11076444]
bas 6, expnt(s) = [2693.96474506]
CPU time:       103.28
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  1  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]
 [ 0  1  1  1  0 36 37  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.66507598e+01 2.08252664e+01 9.61638467e+01 7.75843087e+01
 4.27185086e-01 1.33498715e+00 2.80425928e+01 3.07877994e+01
 8.14175724e+00 4.01219543e+01 1.10764435e-01 1.86416699e-01
 2.69396475e+03 5.66205753e+04]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 13.721326302194015
cond(S) = 125.96510468264644
E1 = -554.4281763630681  E_coul = 132.58947823508038
init E= -421.838698127988
    CPU time for initialize scf      0.19 sec, wall time      0.02 sec
  HOMO = -0.102364721500674  LUMO = 102.097081384676
  mo_energy =
[-1.09332054e+02 -1.13882746e+01 -1.13882746e+01 -1.13882746e+01
 -9.14518630e+00 -1.60408597e+00 -1.60408597e+00 -1.60408597e+00
 -1.02364722e-01  1.02097081e+02  5.79361029e+03  5.79361029e+03
  5.79361029e+03]
E1 = -621.4132662967199  E_coul = 177.1054538380925
cycle= 1 E= -444.307812458627  delta_E= -22.5  |g|= 0.561  |ddm|= 6.54
    CPU time for cycle= 1      0.21 sec, wall time      0.01 sec
diis-norm(errvec)=0.419098
diis-c [-0.17564279  1.        ]
  HOMO = 2.61748480408431  LUMO = 106.602927850699
  mo_energy =
[-1.04302193e+02 -7.92075117e+00 -7.92075117e+00 -7.92075117e+00
 -6.61094372e+00 -5.14564394e-01 -5.14564394e-01 -5.14564394e-01
  2.61748480e+00  1.06602928e+02  5.79936088e+03  5.79936088e+03
  5.79936088e+03]
E1 = -621.4035775803403  E_coul = 177.09491502145758
cycle= 2 E= -444.308662558883  delta_E= -0.00085  |g|= 0.00871  |ddm|= 0.0266
    CPU time for cycle= 2      0.15 sec, wall time      0.01 sec
diis-norm(errvec)=0.00588951
diis-c [-1.07927576e-05 -1.18014027e-02  1.01180140e+00]
  HOMO = 2.61706826300914  LUMO = 106.601511367929
  mo_energy =
[-1.04305649e+02 -7.92115498e+00 -7.92115498e+00 -7.92115498e+00
 -6.61117049e+00 -5.14573285e-01 -5.14573285e-01 -5.14573285e-01
  2.61706826e+00  1.06601511e+02  5.79934369e+03  5.79934369e+03
  5.79934369e+03]
E1 = -621.403520893995  E_coul = 177.09485813938366
cycle= 3 E= -444.308662754611  delta_E= -1.96e-07  |g|= 5.74e-05  |ddm|= 0.000557
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=3.57886e-05
diis-c [-8.40756248e-11  1.75685810e-05 -6.91713223e-03  1.00689956e+00]
  HOMO = 2.61707251466199  LUMO = 106.60151323158
  mo_energy =
[-1.04305642e+02 -7.92114858e+00 -7.92114858e+00 -7.92114858e+00
 -6.61116742e+00 -5.14573239e-01 -5.14573239e-01 -5.14573239e-01
  2.61707251e+00  1.06601513e+02  5.79934364e+03  5.79934364e+03
  5.79934364e+03]
E1 = -621.4035223235936  E_coul = 177.0948595689735
cycle= 4 E= -444.30866275462  delta_E= -8.7e-12  |g|= 3.4e-07  |ddm|= 9.27e-06
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
E1 = -621.4035223235936  E_coul = 177.0948595689735
  HOMO = 2.61707258322883  LUMO = 106.60151337436
  mo_energy =
[-1.04305642e+02 -7.92114847e+00 -7.92114847e+00 -7.92114847e+00
 -6.61116738e+00 -5.14573238e-01 -5.14573238e-01 -5.14573238e-01
  2.61707258e+00  1.06601513e+02  5.79934364e+03  5.79934364e+03
  5.79934364e+03]
E1 = -621.4035223523333  E_coul = 177.09485959771396
Extra cycle  E= -444.308662754619  delta_E= 7.39e-13  |g|= 7.11e-09  |ddm|= 1.19e-07
    CPU time for scf_cycle      0.58 sec, wall time      0.07 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 125.96510468264644
E1 = -621.4035223523333  E_coul = 177.09485959771396
init E= -444.308662754619
    CPU time for initialize scf      1.13 sec, wall time      0.05 sec
  HOMO = 2.61707258424723  LUMO = 106.60151337701
  mo_energy =
[-1.04305642e+02 -7.92114847e+00 -7.92114847e+00 -7.92114847e+00
 -6.61116737e+00 -5.14573238e-01 -5.14573238e-01 -5.14573238e-01
  2.61707258e+00  1.06601513e+02  5.79934364e+03  5.79934364e+03
  5.79934364e+03]
E1 = -621.4035223529141  E_coul = 177.09485959829445
cycle= 1 E= -444.30866275462  delta_E= -3.41e-13  |g|= 1.59e-10  |ddm|= 2.52e-09
    CPU time for cycle= 1      0.21 sec, wall time      0.01 sec
E1 = -621.4035223529141  E_coul = 177.09485959829445
  HOMO = 2.61707258426592  LUMO = 106.601513377065
  mo_energy =
[-1.04305642e+02 -7.92114847e+00 -7.92114847e+00 -7.92114847e+00
 -6.61116737e+00 -5.14573238e-01 -5.14573238e-01 -5.14573238e-01
  2.61707258e+00  1.06601513e+02  5.79934364e+03  5.79934364e+03
  5.79934364e+03]
E1 = -621.4035223529261  E_coul = 177.09485959830675
Extra cycle  E= -444.308662754619  delta_E= 3.98e-13  |g|= 3.83e-12  |ddm|= 5.55e-11
    CPU time for scf_cycle      1.43 sec, wall time      0.11 sec
exp = [1.66507598e+01 9.61638467e+01 4.27185086e-01 2.80425928e+01
 8.14175724e+00 1.10764435e-01 2.69396475e+03]
grad_E = [ 1.91030888e+00 -4.82909243e-01 -3.58304729e+00  7.61541784e-01
  1.69010703e-01 -2.60212398e+01  5.39091309e-06]
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
number_of_s_exps = 4
number_of_p_exps = 3

exps = np.zeros((number_of_s_exps+number_of_p_exps,2))
#exps[:, 0] = decaying_nums(5)

# S
exps[0,0] = 20.0
exps[1,0] = 9.5045827955887916e+01
exps[2,0] = 4.4881042475048387e+00 
exps[3,0] = 3.9799528004692630e-01
             
# P          
exps[3,0] = 3.0108199280832128e+01
exps[4,0] = 6.1393781325590453e+00
exps[5,0] = 4.8929328703550412e-01

basis =  str(number_of_s_exps)+"s"+str(number_of_p_exps)+"p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc21115.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 24
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 18 14:58:02 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35677784.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 32000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 32000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 32000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  1.00000718817e-09      1
[INPUT] 0    0    [1    /1   ]  100.486778409        1
[INPUT] 0    0    [1    /1   ]  0.32487812242        1
[INPUT] 0    0    [1    /1   ]  20.5597872081        1
[INPUT] 1    0    [1    /1   ]  6.67738010155        1
[INPUT] 1    0    [1    /1   ]  0.141316469653       1
[INPUT] 1    0    [1    /1   ]  2693.96476086        1

nuclear repulsion = 0
number of shells = 7
number of NR pGTOs = 13
number of NR cGTOs = 13
basis = {'Ar': [[0, [1.0000071881677286e-09, 1.0]], [0, [100.48677840885111, 1.0]], [0, [0.3248781224197119, 1.0]], [0, [20.55978720806475, 1.0]], [1, [6.677380101553725, 1.0]], [1, [0.14131646965252417, 1.0]], [1, [2693.9647608605887, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [1.00000719e-09]
bas 1, expnt(s) = [100.48677841]
bas 2, expnt(s) = [0.32487812]
bas 3, expnt(s) = [20.55978721]
bas 4, expnt(s) = [6.6773801]
bas 5, expnt(s) = [0.14131647]
bas 6, expnt(s) = [2693.96476086]
CPU time:       107.88
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  1  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]
 [ 0  1  1  1  0 36 37  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.00000719e-09 4.49280289e-07 1.00486778e+02 8.01856615e+01
 3.24878122e-01 1.08718981e+00 2.05597872e+01 2.43937734e+01
 6.67738010e+00 3.13142501e+01 1.41316470e-01 2.52769906e-01
 2.69396476e+03 5.66205757e+04]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 13.805609159836814
cond(S) = 4.861266432085827
E1 = -522.0758446845431  E_coul = 118.77170303834043
init E= -403.304141646203
    CPU time for initialize scf      0.19 sec, wall time      0.02 sec
  HOMO = -0.000211659337652683  LUMO = 18.2832333324076
  mo_energy =
[-1.11967301e+02 -1.25590587e+01 -1.25590587e+01 -1.25590587e+01
 -6.52632766e+00 -1.85840303e+00 -1.85840303e+00 -1.85840303e+00
 -2.11659338e-04  1.82832333e+01  5.79300658e+03  5.79300658e+03
  5.79300658e+03]
E1 = -558.7329128901782  E_coul = 116.78454313432377
cycle= 1 E= -441.948369755854  delta_E= -38.6  |g|= 0.48  |ddm|= 3.69
    CPU time for cycle= 1      0.21 sec, wall time      0.01 sec
diis-norm(errvec)=0.447364
diis-c [-0.2001348  1.       ]
  HOMO = -6.52415532388212e-05  LUMO = 18.7655794324665
  mo_energy =
[-1.14292260e+02 -1.27579208e+01 -1.27579208e+01 -1.27579208e+01
 -5.95584046e+00 -1.35376857e+00 -1.35376857e+00 -1.35376857e+00
 -6.52415532e-05  1.87655794e+01  5.78860263e+03  5.78860263e+03
  5.78860263e+03]
E1 = -558.8530731982751  E_coul = 116.90200994054479
cycle= 2 E= -441.95106325773  delta_E= -0.00269  |g|= 0.00796  |ddm|= 0.033
    CPU time for cycle= 2      0.14 sec, wall time      0.01 sec
diis-norm(errvec)=0.00700541
diis-c [-5.67228778e-06 -1.49468771e-02  1.01494688e+00]
  HOMO = -6.52415532383944e-05  LUMO = 18.7775136520108
  mo_energy =
[-1.14262689e+02 -1.27485000e+01 -1.27485000e+01 -1.27485000e+01
 -5.95477637e+00 -1.35353985e+00 -1.35353985e+00 -1.35353985e+00
 -6.52415532e-05  1.87775137e+01  5.78866181e+03  5.78866181e+03
  5.78866181e+03]
E1 = -558.8554804435466  E_coul = 116.9044161394135
cycle= 3 E= -441.951064304133  delta_E= -1.05e-06  |g|= 7.09e-05  |ddm|= 0.000692
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=7.28568e-05
diis-c [-4.30032390e-12  4.97498421e-04 -3.11841104e-02  1.03068661e+00]
  HOMO = -6.52415532383922e-05  LUMO = 18.7775714518204
  mo_energy =
[-1.14262546e+02 -1.27484403e+01 -1.27484403e+01 -1.27484403e+01
 -5.95476895e+00 -1.35353832e+00 -1.35353832e+00 -1.35353832e+00
 -6.52415532e-05  1.87775715e+01  5.78866196e+03  5.78866196e+03
  5.78866196e+03]
E1 = -558.8554948430151  E_coul = 116.90443053882105
cycle= 4 E= -441.951064304194  delta_E= -6.09e-11  |g|= 4.33e-08  |ddm|= 4.94e-06
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
E1 = -558.8554948430151  E_coul = 116.90443053882105
  HOMO = -6.52415532383925e-05  LUMO = 18.7775713861674
  mo_energy =
[-1.14262547e+02 -1.27484404e+01 -1.27484404e+01 -1.27484404e+01
 -5.95476898e+00 -1.35353832e+00 -1.35353832e+00 -1.35353832e+00
 -6.52415532e-05  1.87775714e+01  5.78866196e+03  5.78866196e+03
  5.78866196e+03]
E1 = -558.8554948493737  E_coul = 116.90443054517964
Extra cycle  E= -441.951064304194  delta_E=    0  |g|= 7.46e-10  |ddm|= 1.64e-09
    CPU time for scf_cycle      0.58 sec, wall time      0.07 sec
exp = [1.00000719e-09 1.00486778e+02 3.24878122e-01 2.05597872e+01
 6.67738010e+00 1.41316470e-01 2.69396476e+03]
E = -441.95106430419406
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
number_of_s_exps = 4
number_of_p_exps = 3

exps = np.zeros((number_of_s_exps+number_of_p_exps,2))
#exps[:, 0] = decaying_nums(5)

# S
exps[0,0] = 20.0
exps[1,0] = 9.5045827955887916e+01
exps[2,0] = 4.4881042475048387e+00 
exps[3,0] = 3.9799528004692630e-01
             
# P          
exps[3,0] = 3.0108199280832128e+01
exps[4,0] = 6.1393781325590453e+00
exps[5,0] = 4.8929328703550412e-01

basis =  str(number_of_s_exps)+"s"+str(number_of_p_exps)+"p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc21115.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 24
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 18 14:58:02 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35677784.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 32000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 32000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 32000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  8.78582970246        1
[INPUT] 0    0    [1    /1   ]  98.2057688651        1
[INPUT] 0    0    [1    /1   ]  0.378860737736       1
[INPUT] 0    0    [1    /1   ]  24.5081148741        1
[INPUT] 1    0    [1    /1   ]  7.45006364849        1
[INPUT] 1    0    [1    /1   ]  0.125195585369       1
[INPUT] 1    0    [1    /1   ]  2693.96475253        1

nuclear repulsion = 0
number of shells = 7
number of NR pGTOs = 13
number of NR cGTOs = 13
basis = {'Ar': [[0, [8.78582970246164, 1.0]], [0, [98.20576886512443, 1.0]], [0, [0.37886073773590323, 1.0]], [0, [24.508114874128935, 1.0]], [1, [7.450063648494336, 1.0]], [1, [0.1251955853691171, 1.0]], [1, [2693.964752525104, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [8.7858297]
bas 1, expnt(s) = [98.20576887]
bas 2, expnt(s) = [0.37886074]
bas 3, expnt(s) = [24.50811487]
bas 4, expnt(s) = [7.45006365]
bas 5, expnt(s) = [0.12519559]
bas 6, expnt(s) = [2693.96475253]
CPU time:       108.52
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  1  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]
 [ 0  1  1  1  0 36 37  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 8.78582970e+00 1.28929444e+01 9.82057689e+01 7.88166142e+01
 3.78860738e-01 1.22004184e+00 2.45081149e+01 2.78289906e+01
 7.45006365e+00 3.59074340e+01 1.25195585e-01 2.17255441e-01
 2.69396475e+03 5.66205755e+04]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 14.433604921765973
cond(S) = 28.514958999432395
E1 = -577.1353486261554  E_coul = 135.7790949488831
init E= -441.356253677272
    CPU time for initialize scf      0.19 sec, wall time      0.02 sec
  HOMO = -1.4780297638594  LUMO = 67.8853300662632
  mo_energy =
[-1.09724083e+02 -1.34215349e+01 -1.09913236e+01 -1.09913236e+01
 -1.09913236e+01 -3.49257098e+00 -1.47802976e+00 -1.47802976e+00
 -1.47802976e+00  6.78853301e+01  5.79355643e+03  5.79355643e+03
  5.79355643e+03]
E1 = -630.1479801350837  E_coul = 168.42951203873326
cycle= 1 E= -461.71846809635  delta_E= -20.4  |g|= 0.562  |ddm|= 2.01
    CPU time for cycle= 1      0.22 sec, wall time      0.01 sec
diis-norm(errvec)=0.419083
diis-c [-0.17563028  1.        ]
  HOMO = -0.537841212441903  LUMO = 70.8788411293077
  mo_energy =
[-1.06502858e+02 -1.10432600e+01 -8.54576162e+00 -8.54576162e+00
 -8.54576162e+00 -1.84810005e+00 -5.37841212e-01 -5.37841212e-01
 -5.37841212e-01  7.08788411e+01  5.79688968e+03  5.79688968e+03
  5.79688968e+03]
E1 = -630.1098475788173  E_coul = 168.39026529259166
cycle= 2 E= -461.719582286226  delta_E= -0.00111  |g|= 0.00911  |ddm|= 0.0307
    CPU time for cycle= 2      0.14 sec, wall time      0.01 sec
diis-norm(errvec)=0.00636204
diis-c [-9.95560112e-06 -1.33587990e-02  1.01335880e+00]
  HOMO = -0.537863127280342  LUMO = 70.8746022127146
  mo_energy =
[-1.06514749e+02 -1.10449360e+01 -8.54777758e+00 -8.54777758e+00
 -8.54777758e+00 -1.84831375e+00 -5.37863127e-01 -5.37863127e-01
 -5.37863127e-01  7.08746022e+01  5.79685450e+03  5.79685450e+03
  5.79685450e+03]
E1 = -630.1092084495453  E_coul = 168.38962587553743
cycle= 3 E= -461.719582574008  delta_E= -2.88e-07  |g|= 3.95e-05  |ddm|= 0.000492
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=2.57106e-05
diis-c [-8.88153041e-11  2.11654683e-05 -4.93218122e-03  1.00491102e+00]
  HOMO = -0.537863090238375  LUMO = 70.8745867809641
  mo_energy =
[-1.06514793e+02 -1.10449382e+01 -8.54778169e+00 -8.54778169e+00
 -8.54778169e+00 -1.84831358e+00 -5.37863090e-01 -5.37863090e-01
 -5.37863090e-01  7.08745868e+01  5.79685436e+03  5.79685436e+03
  5.79685436e+03]
E1 = -630.1092058686476  E_coul = 168.38962329463467
cycle= 4 E= -461.719582574013  delta_E= -4.95e-12  |g|= 2.4e-07  |ddm|= 2.25e-06
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
E1 = -630.1092058686476  E_coul = 168.38962329463467
  HOMO = -0.537863089210797  LUMO = 70.8745867314421
  mo_energy =
[-1.06514794e+02 -1.10449382e+01 -8.54778169e+00 -8.54778169e+00
 -8.54778169e+00 -1.84831358e+00 -5.37863089e-01 -5.37863089e-01
 -5.37863089e-01  7.08745867e+01  5.79685436e+03  5.79685436e+03
  5.79685436e+03]
E1 = -630.1092058542189  E_coul = 168.38962328020594
Extra cycle  E= -461.719582574013  delta_E= -1.14e-13  |g|= 4.78e-09  |ddm|= 1.84e-08
    CPU time for scf_cycle      0.58 sec, wall time      0.07 sec
exp = [8.78582970e+00 9.82057689e+01 3.78860738e-01 2.45081149e+01
 7.45006365e+00 1.25195585e-01 2.69396475e+03]
E = -461.719582574013
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
number_of_s_exps = 4
number_of_p_exps = 3

exps = np.zeros((number_of_s_exps+number_of_p_exps,2))
#exps[:, 0] = decaying_nums(5)

# S
exps[0,0] = 20.0
exps[1,0] = 9.5045827955887916e+01
exps[2,0] = 4.4881042475048387e+00 
exps[3,0] = 3.9799528004692630e-01
             
# P          
exps[3,0] = 3.0108199280832128e+01
exps[4,0] = 6.1393781325590453e+00
exps[5,0] = 4.8929328703550412e-01

basis =  str(number_of_s_exps)+"s"+str(number_of_p_exps)+"p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc21115.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 24
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 18 14:58:02 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35677784.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 32000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 32000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 32000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  8.78582970246        1
[INPUT] 0    0    [1    /1   ]  98.2057688651        1
[INPUT] 0    0    [1    /1   ]  0.378860737736       1
[INPUT] 0    0    [1    /1   ]  24.5081148741        1
[INPUT] 1    0    [1    /1   ]  7.45006364849        1
[INPUT] 1    0    [1    /1   ]  0.125195585369       1
[INPUT] 1    0    [1    /1   ]  2693.96475253        1

nuclear repulsion = 0
number of shells = 7
number of NR pGTOs = 13
number of NR cGTOs = 13
basis = {'Ar': [[0, [8.78582970246164, 1.0]], [0, [98.20576886512443, 1.0]], [0, [0.37886073773590323, 1.0]], [0, [24.508114874128935, 1.0]], [1, [7.450063648494336, 1.0]], [1, [0.1251955853691171, 1.0]], [1, [2693.964752525104, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [8.7858297]
bas 1, expnt(s) = [98.20576887]
bas 2, expnt(s) = [0.37886074]
bas 3, expnt(s) = [24.50811487]
bas 4, expnt(s) = [7.45006365]
bas 5, expnt(s) = [0.12519559]
bas 6, expnt(s) = [2693.96475253]
CPU time:       109.16
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  1  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]
 [ 0  1  1  1  0 36 37  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 8.78582970e+00 1.28929444e+01 9.82057689e+01 7.88166142e+01
 3.78860738e-01 1.22004184e+00 2.45081149e+01 2.78289906e+01
 7.45006365e+00 3.59074340e+01 1.25195585e-01 2.17255441e-01
 2.69396475e+03 5.66205755e+04]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 14.433604921765973
cond(S) = 28.514958999432395
E1 = -577.1353486261554  E_coul = 135.7790949488831
init E= -441.356253677272
    CPU time for initialize scf      0.19 sec, wall time      0.02 sec
  HOMO = -1.4780297638594  LUMO = 67.8853300662632
  mo_energy =
[-1.09724083e+02 -1.34215349e+01 -1.09913236e+01 -1.09913236e+01
 -1.09913236e+01 -3.49257098e+00 -1.47802976e+00 -1.47802976e+00
 -1.47802976e+00  6.78853301e+01  5.79355643e+03  5.79355643e+03
  5.79355643e+03]
E1 = -630.1479801350837  E_coul = 168.42951203873326
cycle= 1 E= -461.71846809635  delta_E= -20.4  |g|= 0.562  |ddm|= 2.01
    CPU time for cycle= 1      0.21 sec, wall time      0.01 sec
diis-norm(errvec)=0.419083
diis-c [-0.17563028  1.        ]
  HOMO = -0.537841212441903  LUMO = 70.8788411293077
  mo_energy =
[-1.06502858e+02 -1.10432600e+01 -8.54576162e+00 -8.54576162e+00
 -8.54576162e+00 -1.84810005e+00 -5.37841212e-01 -5.37841212e-01
 -5.37841212e-01  7.08788411e+01  5.79688968e+03  5.79688968e+03
  5.79688968e+03]
E1 = -630.1098475788173  E_coul = 168.39026529259166
cycle= 2 E= -461.719582286226  delta_E= -0.00111  |g|= 0.00911  |ddm|= 0.0307
    CPU time for cycle= 2      0.14 sec, wall time      0.01 sec
diis-norm(errvec)=0.00636204
diis-c [-9.95560112e-06 -1.33587990e-02  1.01335880e+00]
  HOMO = -0.537863127280342  LUMO = 70.8746022127146
  mo_energy =
[-1.06514749e+02 -1.10449360e+01 -8.54777758e+00 -8.54777758e+00
 -8.54777758e+00 -1.84831375e+00 -5.37863127e-01 -5.37863127e-01
 -5.37863127e-01  7.08746022e+01  5.79685450e+03  5.79685450e+03
  5.79685450e+03]
E1 = -630.1092084495453  E_coul = 168.38962587553743
cycle= 3 E= -461.719582574008  delta_E= -2.88e-07  |g|= 3.95e-05  |ddm|= 0.000492
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=2.57106e-05
diis-c [-8.88153041e-11  2.11654683e-05 -4.93218122e-03  1.00491102e+00]
  HOMO = -0.537863090238375  LUMO = 70.8745867809641
  mo_energy =
[-1.06514793e+02 -1.10449382e+01 -8.54778169e+00 -8.54778169e+00
 -8.54778169e+00 -1.84831358e+00 -5.37863090e-01 -5.37863090e-01
 -5.37863090e-01  7.08745868e+01  5.79685436e+03  5.79685436e+03
  5.79685436e+03]
E1 = -630.1092058686476  E_coul = 168.38962329463467
cycle= 4 E= -461.719582574013  delta_E= -4.95e-12  |g|= 2.4e-07  |ddm|= 2.25e-06
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
E1 = -630.1092058686476  E_coul = 168.38962329463467
  HOMO = -0.537863089210797  LUMO = 70.8745867314421
  mo_energy =
[-1.06514794e+02 -1.10449382e+01 -8.54778169e+00 -8.54778169e+00
 -8.54778169e+00 -1.84831358e+00 -5.37863089e-01 -5.37863089e-01
 -5.37863089e-01  7.08745867e+01  5.79685436e+03  5.79685436e+03
  5.79685436e+03]
E1 = -630.1092058542189  E_coul = 168.38962328020594
Extra cycle  E= -461.719582574013  delta_E= -1.14e-13  |g|= 4.78e-09  |ddm|= 1.84e-08
    CPU time for scf_cycle      0.58 sec, wall time      0.08 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 28.514958999432395
E1 = -630.1092058542189  E_coul = 168.38962328020594
init E= -461.719582574013
    CPU time for initialize scf      1.17 sec, wall time      0.05 sec
  HOMO = -0.537863089198374  LUMO = 70.8745867297915
  mo_energy =
[-1.06514794e+02 -1.10449382e+01 -8.54778169e+00 -8.54778169e+00
 -8.54778169e+00 -1.84831358e+00 -5.37863089e-01 -5.37863089e-01
 -5.37863089e-01  7.08745867e+01  5.79685436e+03  5.79685436e+03
  5.79685436e+03]
E1 = -630.109205853795  E_coul = 168.38962327978152
cycle= 1 E= -461.719582574013  delta_E= -4.55e-13  |g|= 1.1e-10  |ddm|= 4.46e-10
    CPU time for cycle= 1      0.21 sec, wall time      0.01 sec
E1 = -630.109205853795  E_coul = 168.38962327978152
  HOMO = -0.537863089200849  LUMO = 70.8745867297481
  mo_energy =
[-1.06514794e+02 -1.10449382e+01 -8.54778169e+00 -8.54778169e+00
 -8.54778169e+00 -1.84831358e+00 -5.37863089e-01 -5.37863089e-01
 -5.37863089e-01  7.08745867e+01  5.79685436e+03  5.79685436e+03
  5.79685436e+03]
E1 = -630.1092058537844  E_coul = 168.38962327977063
Extra cycle  E= -461.719582574014  delta_E= -3.41e-13  |g|= 4.17e-12  |ddm|= 1.11e-11
    CPU time for scf_cycle      1.46 sec, wall time      0.11 sec
exp = [8.78582970e+00 9.82057689e+01 3.78860738e-01 2.45081149e+01
 7.45006365e+00 1.25195585e-01 2.69396475e+03]
grad_E = [ 1.60745003e+00 -4.52064866e-01 -3.02383840e+00  2.92489119e-01
 -6.49912047e-01 -2.40488793e+01  4.42126967e-06]
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
number_of_s_exps = 4
number_of_p_exps = 3

exps = np.zeros((number_of_s_exps+number_of_p_exps,2))
#exps[:, 0] = decaying_nums(5)

# S
exps[0,0] = 20.0
exps[1,0] = 9.5045827955887916e+01
exps[2,0] = 4.4881042475048387e+00 
exps[3,0] = 3.9799528004692630e-01
             
# P          
exps[3,0] = 3.0108199280832128e+01
exps[4,0] = 6.1393781325590453e+00
exps[5,0] = 4.8929328703550412e-01

basis =  str(number_of_s_exps)+"s"+str(number_of_p_exps)+"p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc21115.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 24
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 18 14:58:05 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35677784.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 32000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 32000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 32000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  1.00000008274e-09      1
[INPUT] 0    0    [1    /1   ]  100.902816897        1
[INPUT] 0    0    [1    /1   ]  0.23227845527        1
[INPUT] 0    0    [1    /1   ]  20.6479202606        1
[INPUT] 1    0    [1    /1   ]  8.16448095691        1
[INPUT] 1    0    [1    /1   ]  0.168935131917       1
[INPUT] 1    0    [1    /1   ]  2693.96476037        1

nuclear repulsion = 0
number of shells = 7
number of NR pGTOs = 13
number of NR cGTOs = 13
basis = {'Ar': [[0, [1.000000082740371e-09, 1.0]], [0, [100.902816897052, 1.0]], [0, [0.23227845527024898, 1.0]], [0, [20.647920260570114, 1.0]], [1, [8.16448095690784, 1.0]], [1, [0.16893513191721962, 1.0]], [1, [2693.964760374667, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [1.00000008e-09]
bas 1, expnt(s) = [100.9028169]
bas 2, expnt(s) = [0.23227846]
bas 3, expnt(s) = [20.64792026]
bas 4, expnt(s) = [8.16448096]
bas 5, expnt(s) = [0.16893513]
bas 6, expnt(s) = [2693.96476037]
CPU time:       113.82
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  1  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]
 [ 0  1  1  1  0 36 37  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.00000008e-09 4.49277895e-07 1.00902817e+02 8.04345233e+01
 2.32278455e-01 8.45321123e-01 2.06479203e+01 2.44721576e+01
 8.16448096e+00 4.02619790e+01 1.68935132e-01 3.15961642e-01
 2.69396476e+03 5.66205757e+04]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 14.348673163421264
cond(S) = 4.809648808622647
E1 = -534.8772110964935  E_coul = 129.13140381126266
init E= -405.745807285231
    CPU time for initialize scf      1.23 sec, wall time      0.07 sec
  HOMO = -0.000184254134679948  LUMO = 19.5538184379512
  mo_energy =
[-1.10196934e+02 -1.20797596e+01 -1.20797596e+01 -1.20797596e+01
 -5.05381781e+00 -1.89162787e+00 -1.89162787e+00 -1.89162787e+00
 -1.84254135e-04  1.95538184e+01  5.79505185e+03  5.79505185e+03
  5.79505185e+03]
E1 = -566.6077673559204  E_coul = 123.30020722942164
cycle= 1 E= -443.307560126499  delta_E= -37.6  |g|= 0.476  |ddm|= 3.58
    CPU time for cycle= 1      0.24 sec, wall time      0.01 sec
diis-norm(errvec)=0.455732
diis-c [-0.20769131  1.        ]
  HOMO = -6.52413202681935e-05  LUMO = 19.7362046824675
  mo_energy =
[-1.12886525e+02 -1.26571424e+01 -1.26571424e+01 -1.26571424e+01
 -4.66336343e+00 -1.49449569e+00 -1.49449569e+00 -1.49449569e+00
 -6.52413203e-05  1.97362047e+01  5.79019115e+03  5.79019115e+03
  5.79019115e+03]
E1 = -566.7121290291063  E_coul = 123.4021395726944
cycle= 2 E= -443.309989456412  delta_E= -0.00243  |g|= 0.00808  |ddm|= 0.0307
    CPU time for cycle= 2      0.09 sec, wall time      0.01 sec
diis-norm(errvec)=0.00746593
diis-c [-2.18231787e-06 -1.63205700e-02  1.01632057e+00]
  HOMO = -6.52413202677706e-05  LUMO = 19.7462252353971
  mo_energy =
[-1.12862115e+02 -1.26485544e+01 -1.26485544e+01 -1.26485544e+01
 -4.66272838e+00 -1.49417410e+00 -1.49417410e+00 -1.49417410e+00
 -6.52413203e-05  1.97462252e+01  5.79024378e+03  5.79024378e+03
  5.79024378e+03]
E1 = -566.714172254122  E_coul = 123.40418190193508
cycle= 3 E= -443.309990352187  delta_E= -8.96e-07  |g|= 4.06e-05  |ddm|= 0.000625
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=4.10999e-05
diis-c [-8.60112956e-11  4.62055468e-04 -2.72500716e-02  1.02678802e+00]
  HOMO = -6.52413202677682e-05  LUMO = 19.7462564651516
  mo_energy =
[-1.12862039e+02 -1.26485178e+01 -1.26485178e+01 -1.26485178e+01
 -4.66272503e+00 -1.49417260e+00 -1.49417260e+00 -1.49417260e+00
 -6.52413203e-05  1.97462565e+01  5.79024385e+03  5.79024385e+03
  5.79024385e+03]
E1 = -566.7141798229582  E_coul = 123.40418947074959
cycle= 4 E= -443.309990352209  delta_E= -2.17e-11  |g|= 7.8e-08  |ddm|= 2.95e-06
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
E1 = -566.7141798229582  E_coul = 123.40418947074959
  HOMO = -6.52413202677684e-05  LUMO = 19.7462564799136
  mo_energy =
[-1.12862039e+02 -1.26485178e+01 -1.26485178e+01 -1.26485178e+01
 -4.66272505e+00 -1.49417260e+00 -1.49417260e+00 -1.49417260e+00
 -6.52413203e-05  1.97462565e+01  5.79024385e+03  5.79024385e+03
  5.79024385e+03]
E1 = -566.7141798449818  E_coul = 123.40418949277286
Extra cycle  E= -443.309990352209  delta_E= -3.98e-13  |g|= 1.95e-09  |ddm|= 7.55e-09
    CPU time for scf_cycle      1.60 sec, wall time      0.13 sec
exp = [1.00000008e-09 1.00902817e+02 2.32278455e-01 2.06479203e+01
 8.16448096e+00 1.68935132e-01 2.69396476e+03]
E = -443.30999035220896
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
number_of_s_exps = 4
number_of_p_exps = 3

exps = np.zeros((number_of_s_exps+number_of_p_exps,2))
#exps[:, 0] = decaying_nums(5)

# S
exps[0,0] = 20.0
exps[1,0] = 9.5045827955887916e+01
exps[2,0] = 4.4881042475048387e+00 
exps[3,0] = 3.9799528004692630e-01
             
# P          
exps[3,0] = 3.0108199280832128e+01
exps[4,0] = 6.1393781325590453e+00
exps[5,0] = 4.8929328703550412e-01

basis =  str(number_of_s_exps)+"s"+str(number_of_p_exps)+"p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc21115.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 24
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 18 14:58:05 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35677784.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 32000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 32000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 32000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  6.64224992967        1
[INPUT] 0    0    [1    /1   ]  98.8637986476        1
[INPUT] 0    0    [1    /1   ]  0.343097374864       1
[INPUT] 0    0    [1    /1   ]  23.566298862         1
[INPUT] 1    0    [1    /1   ]  7.62436824393        1
[INPUT] 1    0    [1    /1   ]  0.135867224866       1
[INPUT] 1    0    [1    /1   ]  2693.96475444        1

nuclear repulsion = 0
number of shells = 7
number of NR pGTOs = 13
number of NR cGTOs = 13
basis = {'Ar': [[0, [6.642249929667775, 1.0]], [0, [98.86379864761972, 1.0]], [0, [0.3430973748640893, 1.0]], [0, [23.56629886200023, 1.0]], [1, [7.624368243926484, 1.0]], [1, [0.1358672248656225, 1.0]], [1, [2693.964754440252, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [6.64224993]
bas 1, expnt(s) = [98.86379865]
bas 2, expnt(s) = [0.34309737]
bas 3, expnt(s) = [23.56629886]
bas 4, expnt(s) = [7.62436824]
bas 5, expnt(s) = [0.13586722]
bas 6, expnt(s) = [2693.96475444]
CPU time:       115.51
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  1  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]
 [ 0  1  1  1  0 36 37  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 6.64224993e+00 1.04532523e+01 9.88637986e+01 7.92123676e+01
 3.43097375e-01 1.13260395e+00 2.35662989e+01 2.70229999e+01
 7.62436824e+00 3.69606178e+01 1.35867225e-01 2.40645516e-01
 2.69396475e+03 5.66205755e+04]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 14.796490084933097
cond(S) = 18.90076590155611
E1 = -586.2267877362827  E_coul = 139.05048416734567
init E= -447.176303568937
    CPU time for initialize scf      0.22 sec, wall time      0.03 sec
  HOMO = -1.43127962010758  LUMO = 57.8407600074573
  mo_energy =
[-1.09475742e+02 -1.45133044e+01 -1.07782617e+01 -1.07782617e+01
 -1.07782617e+01 -3.46740411e+00 -1.43127962e+00 -1.43127962e+00
 -1.43127962e+00  5.78407600e+01  5.79408707e+03  5.79408707e+03
  5.79408707e+03]
E1 = -632.9018453953502  E_coul = 167.39030027386076
cycle= 1 E= -465.511545121489  delta_E= -18.3  |g|= 0.601  |ddm|= 1.62
    CPU time for cycle= 1      0.23 sec, wall time      0.01 sec
diis-norm(errvec)=0.402437
diis-c [-0.16195576  1.        ]
  HOMO = -0.557827511741121  LUMO = 60.3569814582001
  mo_energy =
[-1.06921485e+02 -1.23861149e+01 -8.67435538e+00 -8.67435538e+00
 -8.67435538e+00 -2.05729470e+00 -5.57827512e-01 -5.57827512e-01
 -5.57827512e-01  6.03569815e+01  5.79650602e+03  5.79650602e+03
  5.79650602e+03]
E1 = -632.8383187094248  E_coul = 167.32510422808218
cycle= 2 E= -465.513214481343  delta_E= -0.00167  |g|= 0.00995  |ddm|= 0.0371
    CPU time for cycle= 2      0.10 sec, wall time      0.01 sec
diis-norm(errvec)=0.00577508
diis-c [-1.01623004e-05 -1.21112010e-02  1.01211120e+00]
  HOMO = -0.557866484476052  LUMO = 60.3504462735063
  mo_energy =
[-1.06940130e+02 -1.23888490e+01 -8.67813431e+00 -8.67813431e+00
 -8.67813431e+00 -2.05746857e+00 -5.57866484e-01 -5.57866484e-01
 -5.57866484e-01  6.03504463e+01  5.79645931e+03  5.79645931e+03
  5.79645931e+03]
E1 = -632.8371282879066  E_coul = 167.32391330501315
cycle= 3 E= -465.513214982893  delta_E= -5.02e-07  |g|= 7.1e-05  |ddm|= 0.000678
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=3.55134e-05
diis-c [-6.61593136e-10  6.55782438e-05 -7.29868931e-03  1.00723311e+00]
  HOMO = -0.557866522493757  LUMO = 60.3504046576487
  mo_energy =
[-1.06940251e+02 -1.23888626e+01 -8.67815700e+00 -8.67815700e+00
 -8.67815700e+00 -2.05746876e+00 -5.57866522e-01 -5.57866522e-01
 -5.57866522e-01  6.03504047e+01  5.79645904e+03  5.79645904e+03
  5.79645904e+03]
E1 = -632.8371191420769  E_coul = 167.32390415914966
cycle= 4 E= -465.513214982927  delta_E= -3.38e-11  |g|= 1.04e-06  |ddm|= 5.66e-06
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
E1 = -632.8371191420769  E_coul = 167.32390415914966
  HOMO = -0.557866522543896  LUMO = 60.3504041997858
  mo_energy =
[-1.06940252e+02 -1.23888627e+01 -8.67815729e+00 -8.67815729e+00
 -8.67815729e+00 -2.05746876e+00 -5.57866523e-01 -5.57866523e-01
 -5.57866523e-01  6.03504042e+01  5.79645904e+03  5.79645904e+03
  5.79645904e+03]
E1 = -632.8371190224278  E_coul = 167.32390403950072
Extra cycle  E= -465.513214982927  delta_E= 5.68e-14  |g|= 2.66e-08  |ddm|= 7.97e-08
    CPU time for scf_cycle      0.59 sec, wall time      0.08 sec
exp = [6.64224993e+00 9.88637986e+01 3.43097375e-01 2.35662989e+01
 7.62436824e+00 1.35867225e-01 2.69396475e+03]
E = -465.51321498292714
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
number_of_s_exps = 4
number_of_p_exps = 3

exps = np.zeros((number_of_s_exps+number_of_p_exps,2))
#exps[:, 0] = decaying_nums(5)

# S
exps[0,0] = 20.0
exps[1,0] = 9.5045827955887916e+01
exps[2,0] = 4.4881042475048387e+00 
exps[3,0] = 3.9799528004692630e-01
             
# P          
exps[3,0] = 3.0108199280832128e+01
exps[4,0] = 6.1393781325590453e+00
exps[5,0] = 4.8929328703550412e-01

basis =  str(number_of_s_exps)+"s"+str(number_of_p_exps)+"p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc21115.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 24
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 18 14:58:06 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35677784.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 32000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 32000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 32000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  6.64224992967        1
[INPUT] 0    0    [1    /1   ]  98.8637986476        1
[INPUT] 0    0    [1    /1   ]  0.343097374864       1
[INPUT] 0    0    [1    /1   ]  23.566298862         1
[INPUT] 1    0    [1    /1   ]  7.62436824393        1
[INPUT] 1    0    [1    /1   ]  0.135867224866       1
[INPUT] 1    0    [1    /1   ]  2693.96475444        1

nuclear repulsion = 0
number of shells = 7
number of NR pGTOs = 13
number of NR cGTOs = 13
basis = {'Ar': [[0, [6.642249929667775, 1.0]], [0, [98.86379864761972, 1.0]], [0, [0.3430973748640893, 1.0]], [0, [23.56629886200023, 1.0]], [1, [7.624368243926484, 1.0]], [1, [0.1358672248656225, 1.0]], [1, [2693.964754440252, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [6.64224993]
bas 1, expnt(s) = [98.86379865]
bas 2, expnt(s) = [0.34309737]
bas 3, expnt(s) = [23.56629886]
bas 4, expnt(s) = [7.62436824]
bas 5, expnt(s) = [0.13586722]
bas 6, expnt(s) = [2693.96475444]
CPU time:       116.19
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  1  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]
 [ 0  1  1  1  0 36 37  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 6.64224993e+00 1.04532523e+01 9.88637986e+01 7.92123676e+01
 3.43097375e-01 1.13260395e+00 2.35662989e+01 2.70229999e+01
 7.62436824e+00 3.69606178e+01 1.35867225e-01 2.40645516e-01
 2.69396475e+03 5.66205755e+04]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 14.796490084933097
cond(S) = 18.90076590155611
E1 = -586.2267877362827  E_coul = 139.05048416734567
init E= -447.176303568937
    CPU time for initialize scf      0.21 sec, wall time      0.03 sec
  HOMO = -1.43127962010758  LUMO = 57.8407600074573
  mo_energy =
[-1.09475742e+02 -1.45133044e+01 -1.07782617e+01 -1.07782617e+01
 -1.07782617e+01 -3.46740411e+00 -1.43127962e+00 -1.43127962e+00
 -1.43127962e+00  5.78407600e+01  5.79408707e+03  5.79408707e+03
  5.79408707e+03]
E1 = -632.9018453953502  E_coul = 167.39030027386076
cycle= 1 E= -465.511545121489  delta_E= -18.3  |g|= 0.601  |ddm|= 1.62
    CPU time for cycle= 1      0.24 sec, wall time      0.01 sec
diis-norm(errvec)=0.402437
diis-c [-0.16195576  1.        ]
  HOMO = -0.557827511741121  LUMO = 60.3569814582001
  mo_energy =
[-1.06921485e+02 -1.23861149e+01 -8.67435538e+00 -8.67435538e+00
 -8.67435538e+00 -2.05729470e+00 -5.57827512e-01 -5.57827512e-01
 -5.57827512e-01  6.03569815e+01  5.79650602e+03  5.79650602e+03
  5.79650602e+03]
E1 = -632.8383187094248  E_coul = 167.32510422808218
cycle= 2 E= -465.513214481343  delta_E= -0.00167  |g|= 0.00995  |ddm|= 0.0371
    CPU time for cycle= 2      0.10 sec, wall time      0.01 sec
diis-norm(errvec)=0.00577508
diis-c [-1.01623004e-05 -1.21112010e-02  1.01211120e+00]
  HOMO = -0.557866484476052  LUMO = 60.3504462735063
  mo_energy =
[-1.06940130e+02 -1.23888490e+01 -8.67813431e+00 -8.67813431e+00
 -8.67813431e+00 -2.05746857e+00 -5.57866484e-01 -5.57866484e-01
 -5.57866484e-01  6.03504463e+01  5.79645931e+03  5.79645931e+03
  5.79645931e+03]
E1 = -632.8371282879066  E_coul = 167.32391330501315
cycle= 3 E= -465.513214982893  delta_E= -5.02e-07  |g|= 7.1e-05  |ddm|= 0.000678
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=3.55134e-05
diis-c [-6.61593136e-10  6.55782438e-05 -7.29868931e-03  1.00723311e+00]
  HOMO = -0.557866522493757  LUMO = 60.3504046576487
  mo_energy =
[-1.06940251e+02 -1.23888626e+01 -8.67815700e+00 -8.67815700e+00
 -8.67815700e+00 -2.05746876e+00 -5.57866522e-01 -5.57866522e-01
 -5.57866522e-01  6.03504047e+01  5.79645904e+03  5.79645904e+03
  5.79645904e+03]
E1 = -632.8371191420769  E_coul = 167.32390415914966
cycle= 4 E= -465.513214982927  delta_E= -3.38e-11  |g|= 1.04e-06  |ddm|= 5.66e-06
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
E1 = -632.8371191420769  E_coul = 167.32390415914966
  HOMO = -0.557866522543896  LUMO = 60.3504041997858
  mo_energy =
[-1.06940252e+02 -1.23888627e+01 -8.67815729e+00 -8.67815729e+00
 -8.67815729e+00 -2.05746876e+00 -5.57866523e-01 -5.57866523e-01
 -5.57866523e-01  6.03504042e+01  5.79645904e+03  5.79645904e+03
  5.79645904e+03]
E1 = -632.8371190224278  E_coul = 167.32390403950072
Extra cycle  E= -465.513214982927  delta_E= 5.68e-14  |g|= 2.66e-08  |ddm|= 7.97e-08
    CPU time for scf_cycle      0.59 sec, wall time      0.08 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 18.90076590155611
E1 = -632.8371190224278  E_coul = 167.32390403950072
init E= -465.513214982927
    CPU time for initialize scf      1.30 sec, wall time      0.06 sec
  HOMO = -0.557866522556632  LUMO = 60.3504041887256
  mo_energy =
[-1.06940253e+02 -1.23888627e+01 -8.67815729e+00 -8.67815729e+00
 -8.67815729e+00 -2.05746876e+00 -5.57866523e-01 -5.57866523e-01
 -5.57866523e-01  6.03504042e+01  5.79645904e+03  5.79645904e+03
  5.79645904e+03]
E1 = -632.8371190194534  E_coul = 167.32390403652624
cycle= 1 E= -465.513214982927  delta_E= -5.68e-14  |g|= 6.87e-10  |ddm|= 2e-09
    CPU time for cycle= 1      0.21 sec, wall time      0.01 sec
E1 = -632.8371190194534  E_coul = 167.32390403652624
  HOMO = -0.557866522558571  LUMO = 60.3504041884571
  mo_energy =
[-1.06940253e+02 -1.23888627e+01 -8.67815729e+00 -8.67815729e+00
 -8.67815729e+00 -2.05746876e+00 -5.57866523e-01 -5.57866523e-01
 -5.57866523e-01  6.03504042e+01  5.79645904e+03  5.79645904e+03
  5.79645904e+03]
E1 = -632.8371190193791  E_coul = 167.323904036452
Extra cycle  E= -465.513214982927  delta_E= 1.14e-13  |g|= 1.78e-11  |ddm|= 5.04e-11
    CPU time for scf_cycle      1.57 sec, wall time      0.12 sec
exp = [6.64224993e+00 9.88637986e+01 3.43097375e-01 2.35662989e+01
 7.62436824e+00 1.35867225e-01 2.69396475e+03]
grad_E = [ 1.17185665e+00 -4.27216026e-01 -3.19419802e+00  1.65365321e-01
 -5.63701559e-01 -2.31190277e+01  4.67557091e-06]
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
number_of_s_exps = 4
number_of_p_exps = 3

exps = np.zeros((number_of_s_exps+number_of_p_exps,2))
#exps[:, 0] = decaying_nums(5)

# S
exps[0,0] = 20.0
exps[1,0] = 9.5045827955887916e+01
exps[2,0] = 4.4881042475048387e+00 
exps[3,0] = 3.9799528004692630e-01
             
# P          
exps[3,0] = 3.0108199280832128e+01
exps[4,0] = 6.1393781325590453e+00
exps[5,0] = 4.8929328703550412e-01

basis =  str(number_of_s_exps)+"s"+str(number_of_p_exps)+"p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc21115.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 24
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 18 14:58:09 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35677784.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 32000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 32000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 32000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  0.559577180342       1
[INPUT] 0    0    [1    /1   ]  101.145811334        1
[INPUT] 0    0    [1    /1   ]  0.180541434603       1
[INPUT] 0    0    [1    /1   ]  20.9992372124        1
[INPUT] 1    0    [1    /1   ]  8.48469957143        1
[INPUT] 1    0    [1    /1   ]  0.1843659935         1
[INPUT] 1    0    [1    /1   ]  2693.96475986        1

nuclear repulsion = 0
number of shells = 7
number of NR pGTOs = 13
number of NR cGTOs = 13
basis = {'Ar': [[0, [0.5595771803417708, 1.0]], [0, [101.1458113344867, 1.0]], [0, [0.18054143460309344, 1.0]], [0, [20.99923721242253, 1.0]], [1, [8.484699571431406, 1.0]], [1, [0.18436599349972727, 1.0]], [1, [2693.9647598606552, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [0.55957718]
bas 1, expnt(s) = [101.14581133]
bas 2, expnt(s) = [0.18054143]
bas 3, expnt(s) = [20.99923721]
bas 4, expnt(s) = [8.48469957]
bas 5, expnt(s) = [0.18436599]
bas 6, expnt(s) = [2693.96475986]
CPU time:       121.19
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  1  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]
 [ 0  1  1  1  0 36 37  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 5.59577180e-01 1.63459445e+00 1.01145811e+02 8.05797566e+01
 1.80541435e-01 6.99757708e-01 2.09992372e+01 2.47837868e+01
 8.48469957e+00 4.22454538e+01 1.84365993e-01 3.52440181e-01
 2.69396476e+03 5.66205757e+04]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 14.947260969616778
cond(S) = 9.92497250405611
E1 = -555.5336756097976  E_coul = 138.27115115951585
init E= -417.262524450282
    CPU time for initialize scf      0.27 sec, wall time      0.03 sec
  HOMO = -1.67068286338276  LUMO = 23.6852747176712
  mo_energy =
[-1.09299632e+02 -1.12656930e+01 -1.12656930e+01 -1.12656930e+01
 -8.38756706e+00 -1.70816329e+00 -1.70816329e+00 -1.70816329e+00
 -1.67068286e+00  2.36852747e+01  5.79592043e+03  5.79592043e+03
  5.79592043e+03]
E1 = -601.9187893688461  E_coul = 148.035144916976
cycle= 1 E= -453.88364445187  delta_E= -36.6  |g|= 0.331  |ddm|= 8.74
    CPU time for cycle= 1      0.24 sec, wall time      0.01 sec
diis-norm(errvec)=0.2707
diis-c [-0.07327838  1.        ]
  HOMO = -0.792095882965921  LUMO = 25.010537215182
  mo_energy =
[-1.10359263e+02 -1.06611716e+01 -1.06611716e+01 -1.06611716e+01
 -7.34180139e+00 -8.64106728e-01 -7.92095883e-01 -7.92095883e-01
 -7.92095883e-01  2.50105372e+01  5.79299132e+03  5.79299132e+03
  5.79299132e+03]
E1 = -601.8886369443796  E_coul = 148.00352056860328
cycle= 2 E= -453.885116375776  delta_E= -0.00147  |g|= 0.00662  |ddm|= 0.0487
    CPU time for cycle= 2      0.08 sec, wall time      0.01 sec
diis-norm(errvec)=0.00597594
diis-c [-2.65961799e-06 -2.16991916e-02  1.02169919e+00]
  HOMO = -0.792344220972071  LUMO = 25.0086886904961
  mo_energy =
[-1.10363621e+02 -1.06643834e+01 -1.06643834e+01 -1.06643834e+01
 -7.34311000e+00 -8.64228044e-01 -7.92344221e-01 -7.92344221e-01
 -7.92344221e-01  2.50086887e+01  5.79299434e+03  5.79299434e+03
  5.79299434e+03]
E1 = -601.8883295565837  E_coul = 148.0032127489412
cycle= 3 E= -453.885116807642  delta_E= -4.32e-07  |g|= 2.22e-05  |ddm|= 0.000762
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=1.71285e-05
diis-c [-1.75313549e-10  1.48661256e-04 -6.82937654e-03  1.00668072e+00]
  HOMO = -0.792342575925436  LUMO = 25.0087207142418
  mo_energy =
[-1.10363539e+02 -1.06643522e+01 -1.06643522e+01 -1.06643522e+01
 -7.34310027e+00 -8.64227019e-01 -7.92342576e-01 -7.92342576e-01
 -7.92342576e-01  2.50087207e+01  5.79299450e+03  5.79299450e+03
  5.79299450e+03]
E1 = -601.888333233923  E_coul = 148.00321642627182
cycle= 4 E= -453.885116807651  delta_E= -8.75e-12  |g|= 1.76e-07  |ddm|= 3.9e-06
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
E1 = -601.888333233923  E_coul = 148.00321642627182
  HOMO = -0.792342568482427  LUMO = 25.0087207987226
  mo_energy =
[-1.10363539e+02 -1.06643521e+01 -1.06643521e+01 -1.06643521e+01
 -7.34310023e+00 -8.64227017e-01 -7.92342568e-01 -7.92342568e-01
 -7.92342568e-01  2.50087208e+01  5.79299450e+03  5.79299450e+03
  5.79299450e+03]
E1 = -601.8883332406887  E_coul = 148.003216433037
Extra cycle  E= -453.885116807652  delta_E= -4.55e-13  |g|= 3.45e-09  |ddm|= 2.38e-08
    CPU time for scf_cycle      0.63 sec, wall time      0.08 sec
exp = [5.59577180e-01 1.01145811e+02 1.80541435e-01 2.09992372e+01
 8.48469957e+00 1.84365993e-01 2.69396476e+03]
E = -453.8851168076517
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
number_of_s_exps = 4
number_of_p_exps = 3

exps = np.zeros((number_of_s_exps+number_of_p_exps,2))
#exps[:, 0] = decaying_nums(5)

# S
exps[0,0] = 20.0
exps[1,0] = 9.5045827955887916e+01
exps[2,0] = 4.4881042475048387e+00 
exps[3,0] = 3.9799528004692630e-01
             
# P          
exps[3,0] = 3.0108199280832128e+01
exps[4,0] = 6.1393781325590453e+00
exps[5,0] = 4.8929328703550412e-01

basis =  str(number_of_s_exps)+"s"+str(number_of_p_exps)+"p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc21115.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 24
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 18 14:58:09 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35677784.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 32000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 32000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 32000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  5.2657334614         1
[INPUT] 0    0    [1    /1   ]  99.3802209793        1
[INPUT] 0    0    [1    /1   ]  0.306310761807       1
[INPUT] 0    0    [1    /1   ]  22.9853695927        1
[INPUT] 1    0    [1    /1   ]  7.81906230183        1
[INPUT] 1    0    [1    /1   ]  0.146842557004       1
[INPUT] 1    0    [1    /1   ]  2693.96475567        1

nuclear repulsion = 0
number of shells = 7
number of NR pGTOs = 13
number of NR cGTOs = 13
basis = {'Ar': [[0, [5.265733461402503, 1.0]], [0, [99.38022097933414, 1.0]], [0, [0.3063107618067946, 1.0]], [0, [22.98536959269383, 1.0]], [1, [7.8190623018315835, 1.0]], [1, [0.1468425570044146, 1.0]], [1, [2693.964755666896, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [5.26573346]
bas 1, expnt(s) = [99.38022098]
bas 2, expnt(s) = [0.30631076]
bas 3, expnt(s) = [22.98536959]
bas 4, expnt(s) = [7.8190623]
bas 5, expnt(s) = [0.14684256]
bas 6, expnt(s) = [2693.96475567]
CPU time:       121.91
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  1  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]
 [ 0  1  1  1  0 36 37  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 5.26573346e+00 8.78231841e+00 9.93802210e+01 7.95224941e+01
 3.06310762e-01 1.04024758e+00 2.29853696e+01 2.65218395e+01
 7.81906230e+00 3.81441318e+01 1.46842557e-01 2.65185220e-01
 2.69396476e+03 5.66205755e+04]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 15.075494687213235
cond(S) = 14.391007732813954
E1 = -591.2099331071216  E_coul = 141.4054841310355
init E= -449.804448976086
    CPU time for initialize scf      0.21 sec, wall time      0.03 sec
  HOMO = -1.40976640050717  LUMO = 51.0923596774214
  mo_energy =
[-1.09272562e+02 -1.49271698e+01 -1.06501130e+01 -1.06501130e+01
 -1.06501130e+01 -3.27430463e+00 -1.40976640e+00 -1.40976640e+00
 -1.40976640e+00  5.10923597e+01  5.79454496e+03  5.79454496e+03
  5.79454496e+03]
E1 = -634.0454242152389  E_coul = 166.7521454140201
cycle= 1 E= -467.293278801219  delta_E= -17.5  |g|= 0.657  |ddm|= 1.52
    CPU time for cycle= 1      0.23 sec, wall time      0.01 sec
diis-norm(errvec)=0.401114
diis-c [-0.16089271  1.        ]
  HOMO = -0.58066802655815  LUMO = 53.3195613179519
  mo_energy =
[-1.07198928e+02 -1.29908657e+01 -8.77297966e+00 -8.77297966e+00
 -8.77297966e+00 -2.02107264e+00 -5.80668027e-01 -5.80668027e-01
 -5.80668027e-01  5.33195613e+01  5.79627890e+03  5.79627890e+03
  5.79627890e+03]
E1 = -633.9552659415692  E_coul = 166.65945685750137
cycle= 2 E= -467.295809084068  delta_E= -0.00253  |g|= 0.0114  |ddm|= 0.0428
    CPU time for cycle= 2      0.11 sec, wall time      0.01 sec
diis-norm(errvec)=0.00602273
diis-c [-1.48024806e-05 -1.16875091e-02  1.01168751e+00]
  HOMO = -0.580733756315834  LUMO = 53.3106894399837
  mo_energy =
[-1.07224278e+02 -1.29946064e+01 -8.77879535e+00 -8.77879535e+00
 -8.77879535e+00 -2.02124653e+00 -5.80733756e-01 -5.80733756e-01
 -5.80733756e-01  5.33106894e+01  5.79622186e+03  5.79622186e+03
  5.79622186e+03]
E1 = -633.9534983426928  E_coul = 166.65768838192832
cycle= 3 E= -467.295809960764  delta_E= -8.77e-07  |g|= 0.000115  |ddm|= 0.000815
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=7.27624e-05
diis-c [-2.36087654e-09  1.55605900e-04 -1.43913909e-02  1.01423579e+00]
  HOMO = -0.580733882685192  LUMO = 53.3106229337902
  mo_energy =
[-1.07224470e+02 -1.29946299e+01 -8.77883909e+00 -8.77883909e+00
 -8.77883909e+00 -2.02124682e+00 -5.80733883e-01 -5.80733883e-01
 -5.80733883e-01  5.33106229e+01  5.79622150e+03  5.79622150e+03
  5.79622150e+03]
E1 = -633.9534820522167  E_coul = 166.65767209134992
cycle= 4 E= -467.295809960867  delta_E= -1.02e-10  |g|= 1.36e-06  |ddm|= 8.07e-06
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
E1 = -633.9534820522167  E_coul = 166.65767209134992
  HOMO = -0.580733883246467  LUMO = 53.3106224594272
  mo_energy =
[-1.07224472e+02 -1.29946301e+01 -8.77883947e+00 -8.77883947e+00
 -8.77883947e+00 -2.02124682e+00 -5.80733883e-01 -5.80733883e-01
 -5.80733883e-01  5.33106225e+01  5.79622150e+03  5.79622150e+03
  5.79622150e+03]
E1 = -633.9534819077996  E_coul = 166.6576719469332
Extra cycle  E= -467.295809960866  delta_E= 3.41e-13  |g|= 3.58e-08  |ddm|= 7.81e-08
    CPU time for scf_cycle      0.59 sec, wall time      0.08 sec
exp = [5.26573346e+00 9.93802210e+01 3.06310762e-01 2.29853696e+01
 7.81906230e+00 1.46842557e-01 2.69396476e+03]
E = -467.29580996086645
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
number_of_s_exps = 4
number_of_p_exps = 3

exps = np.zeros((number_of_s_exps+number_of_p_exps,2))
#exps[:, 0] = decaying_nums(5)

# S
exps[0,0] = 20.0
exps[1,0] = 9.5045827955887916e+01
exps[2,0] = 4.4881042475048387e+00 
exps[3,0] = 3.9799528004692630e-01
             
# P          
exps[3,0] = 3.0108199280832128e+01
exps[4,0] = 6.1393781325590453e+00
exps[5,0] = 4.8929328703550412e-01

basis =  str(number_of_s_exps)+"s"+str(number_of_p_exps)+"p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc21115.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 24
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 18 14:58:09 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35677784.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 32000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 32000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 32000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  5.2657334614         1
[INPUT] 0    0    [1    /1   ]  99.3802209793        1
[INPUT] 0    0    [1    /1   ]  0.306310761807       1
[INPUT] 0    0    [1    /1   ]  22.9853695927        1
[INPUT] 1    0    [1    /1   ]  7.81906230183        1
[INPUT] 1    0    [1    /1   ]  0.146842557004       1
[INPUT] 1    0    [1    /1   ]  2693.96475567        1

nuclear repulsion = 0
number of shells = 7
number of NR pGTOs = 13
number of NR cGTOs = 13
basis = {'Ar': [[0, [5.265733461402503, 1.0]], [0, [99.38022097933414, 1.0]], [0, [0.3063107618067946, 1.0]], [0, [22.98536959269383, 1.0]], [1, [7.8190623018315835, 1.0]], [1, [0.1468425570044146, 1.0]], [1, [2693.964755666896, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [5.26573346]
bas 1, expnt(s) = [99.38022098]
bas 2, expnt(s) = [0.30631076]
bas 3, expnt(s) = [22.98536959]
bas 4, expnt(s) = [7.8190623]
bas 5, expnt(s) = [0.14684256]
bas 6, expnt(s) = [2693.96475567]
CPU time:       122.58
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  1  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]
 [ 0  1  1  1  0 36 37  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 5.26573346e+00 8.78231841e+00 9.93802210e+01 7.95224941e+01
 3.06310762e-01 1.04024758e+00 2.29853696e+01 2.65218395e+01
 7.81906230e+00 3.81441318e+01 1.46842557e-01 2.65185220e-01
 2.69396476e+03 5.66205755e+04]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 15.075494687213235
cond(S) = 14.391007732813954
E1 = -591.2099331071216  E_coul = 141.4054841310355
init E= -449.804448976086
    CPU time for initialize scf      0.21 sec, wall time      0.03 sec
  HOMO = -1.40976640050717  LUMO = 51.0923596774214
  mo_energy =
[-1.09272562e+02 -1.49271698e+01 -1.06501130e+01 -1.06501130e+01
 -1.06501130e+01 -3.27430463e+00 -1.40976640e+00 -1.40976640e+00
 -1.40976640e+00  5.10923597e+01  5.79454496e+03  5.79454496e+03
  5.79454496e+03]
E1 = -634.0454242152389  E_coul = 166.7521454140201
cycle= 1 E= -467.293278801219  delta_E= -17.5  |g|= 0.657  |ddm|= 1.52
    CPU time for cycle= 1      0.23 sec, wall time      0.01 sec
diis-norm(errvec)=0.401114
diis-c [-0.16089271  1.        ]
  HOMO = -0.58066802655815  LUMO = 53.3195613179519
  mo_energy =
[-1.07198928e+02 -1.29908657e+01 -8.77297966e+00 -8.77297966e+00
 -8.77297966e+00 -2.02107264e+00 -5.80668027e-01 -5.80668027e-01
 -5.80668027e-01  5.33195613e+01  5.79627890e+03  5.79627890e+03
  5.79627890e+03]
E1 = -633.9552659415692  E_coul = 166.65945685750137
cycle= 2 E= -467.295809084068  delta_E= -0.00253  |g|= 0.0114  |ddm|= 0.0428
    CPU time for cycle= 2      0.11 sec, wall time      0.01 sec
diis-norm(errvec)=0.00602273
diis-c [-1.48024806e-05 -1.16875091e-02  1.01168751e+00]
  HOMO = -0.580733756315834  LUMO = 53.3106894399837
  mo_energy =
[-1.07224278e+02 -1.29946064e+01 -8.77879535e+00 -8.77879535e+00
 -8.77879535e+00 -2.02124653e+00 -5.80733756e-01 -5.80733756e-01
 -5.80733756e-01  5.33106894e+01  5.79622186e+03  5.79622186e+03
  5.79622186e+03]
E1 = -633.9534983426928  E_coul = 166.65768838192832
cycle= 3 E= -467.295809960764  delta_E= -8.77e-07  |g|= 0.000115  |ddm|= 0.000815
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=7.27624e-05
diis-c [-2.36087654e-09  1.55605900e-04 -1.43913909e-02  1.01423579e+00]
  HOMO = -0.580733882685192  LUMO = 53.3106229337902
  mo_energy =
[-1.07224470e+02 -1.29946299e+01 -8.77883909e+00 -8.77883909e+00
 -8.77883909e+00 -2.02124682e+00 -5.80733883e-01 -5.80733883e-01
 -5.80733883e-01  5.33106229e+01  5.79622150e+03  5.79622150e+03
  5.79622150e+03]
E1 = -633.9534820522167  E_coul = 166.65767209134992
cycle= 4 E= -467.295809960867  delta_E= -1.02e-10  |g|= 1.36e-06  |ddm|= 8.07e-06
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
E1 = -633.9534820522167  E_coul = 166.65767209134992
  HOMO = -0.580733883246467  LUMO = 53.3106224594272
  mo_energy =
[-1.07224472e+02 -1.29946301e+01 -8.77883947e+00 -8.77883947e+00
 -8.77883947e+00 -2.02124682e+00 -5.80733883e-01 -5.80733883e-01
 -5.80733883e-01  5.33106225e+01  5.79622150e+03  5.79622150e+03
  5.79622150e+03]
E1 = -633.9534819077996  E_coul = 166.6576719469332
Extra cycle  E= -467.295809960866  delta_E= 3.41e-13  |g|= 3.58e-08  |ddm|= 7.81e-08
    CPU time for scf_cycle      0.59 sec, wall time      0.08 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 14.391007732813954
E1 = -633.9534819077996  E_coul = 166.6576719469332
init E= -467.295809960866
    CPU time for initialize scf      1.25 sec, wall time      0.05 sec
  HOMO = -0.580733883268701  LUMO = 53.3106224470377
  mo_energy =
[-1.07224472e+02 -1.29946302e+01 -8.77883948e+00 -8.77883948e+00
 -8.77883948e+00 -2.02124682e+00 -5.80733883e-01 -5.80733883e-01
 -5.80733883e-01  5.33106224e+01  5.79622150e+03  5.79622150e+03
  5.79622150e+03]
E1 = -633.9534819040205  E_coul = 166.65767194315396
cycle= 1 E= -467.295809960867  delta_E= -5.68e-14  |g|= 9.41e-10  |ddm|= 2.04e-09
    CPU time for cycle= 1      0.23 sec, wall time      0.01 sec
E1 = -633.9534819040205  E_coul = 166.65767194315396
  HOMO = -0.580733883269528  LUMO = 53.3106224467162
  mo_energy =
[-1.07224472e+02 -1.29946302e+01 -8.77883948e+00 -8.77883948e+00
 -8.77883948e+00 -2.02124682e+00 -5.80733883e-01 -5.80733883e-01
 -5.80733883e-01  5.33106224e+01  5.79622150e+03  5.79622150e+03
  5.79622150e+03]
E1 = -633.9534819039219  E_coul = 166.65767194305522
Extra cycle  E= -467.295809960867  delta_E= -1.71e-13  |g|= 2.48e-11  |ddm|= 5.35e-11
    CPU time for scf_cycle      1.53 sec, wall time      0.12 sec
exp = [5.26573346e+00 9.93802210e+01 3.06310762e-01 2.29853696e+01
 7.81906230e+00 1.46842557e-01 2.69396476e+03]
grad_E = [ 6.19706366e-01 -4.06655104e-01 -3.64981519e+00  9.70191267e-02
 -4.45595315e-01 -2.23542913e+01  4.96527781e-06]
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
number_of_s_exps = 4
number_of_p_exps = 3

exps = np.zeros((number_of_s_exps+number_of_p_exps,2))
#exps[:, 0] = decaying_nums(5)

# S
exps[0,0] = 20.0
exps[1,0] = 9.5045827955887916e+01
exps[2,0] = 4.4881042475048387e+00 
exps[3,0] = 3.9799528004692630e-01
             
# P          
exps[3,0] = 3.0108199280832128e+01
exps[4,0] = 6.1393781325590453e+00
exps[5,0] = 4.8929328703550412e-01

basis =  str(number_of_s_exps)+"s"+str(number_of_p_exps)+"p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc21115.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 24
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 18 14:58:12 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35677784.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 32000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 32000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 32000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  3.31932222664        1
[INPUT] 0    0    [1    /1   ]  100.604984707        1
[INPUT] 0    0    [1    /1   ]  0.194930935249       1
[INPUT] 0    0    [1    /1   ]  22.0360342353        1
[INPUT] 1    0    [1    /1   ]  8.46514052198        1
[INPUT] 1    0    [1    /1   ]  0.180069119889       1
[INPUT] 1    0    [1    /1   ]  2693.96475746        1

nuclear repulsion = 0
number of shells = 7
number of NR pGTOs = 13
number of NR cGTOs = 13
basis = {'Ar': [[0, [3.319322226642611, 1.0]], [0, [100.60498470730461, 1.0]], [0, [0.19493093524862232, 1.0]], [0, [22.036034235321594, 1.0]], [1, [8.46514052197986, 1.0]], [1, [0.18006911988885352, 1.0]], [1, [2693.964757460859, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [3.31932223]
bas 1, expnt(s) = [100.60498471]
bas 2, expnt(s) = [0.19493094]
bas 3, expnt(s) = [22.03603424]
bas 4, expnt(s) = [8.46514052]
bas 5, expnt(s) = [0.18006912]
bas 6, expnt(s) = [2693.96475746]
CPU time:       127.37
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  1  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]
 [ 0  1  1  1  0 36 37  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 3.31932223e+00 6.21301046e+00 1.00604985e+02 8.02563951e+01
 1.94930935e-01 7.41183255e-01 2.20360342e+01 2.56959751e+01
 8.46514052e+00 4.21237578e+01 1.80069120e-01 3.42202710e-01
 2.69396476e+03 5.66205756e+04]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 15.478244080240085
cond(S) = 9.425080604066602
E1 = -593.4382192496132  E_coul = 145.2155827788787
init E= -448.222636470735
    CPU time for initialize scf      4.30 sec, wall time      0.20 sec
  HOMO = -1.48062296077327  LUMO = 40.5993296867938
  mo_energy =
[-1.08815689e+02 -1.45953357e+01 -1.04993254e+01 -1.04993254e+01
 -1.04993254e+01 -2.55283692e+00 -1.48062296e+00 -1.48062296e+00
 -1.48062296e+00  4.05993297e+01  5.79563454e+03  5.79563454e+03
  5.79563454e+03]
E1 = -634.173351330909  E_coul = 166.20766019944654
cycle= 1 E= -467.965691131462  delta_E= -19.7  |g|= 0.76  |ddm|=  1.8
    CPU time for cycle= 1      0.23 sec, wall time      0.01 sec
diis-norm(errvec)=0.454799
diis-c [-0.20684217  1.        ]
  HOMO = -0.670711896813315  LUMO = 42.5281118402855
  mo_energy =
[-1.07542516e+02 -1.29548585e+01 -8.92769960e+00 -8.92769960e+00
 -8.92769960e+00 -1.58883418e+00 -6.70711897e-01 -6.70711897e-01
 -6.70711897e-01  4.25281118e+01  5.79613287e+03  5.79613287e+03
  5.79613287e+03]
E1 = -634.0275461515779  E_coul = 166.0569086396032
cycle= 2 E= -467.970637511975  delta_E= -0.00495  |g|= 0.0147  |ddm|= 0.052
    CPU time for cycle= 2      0.10 sec, wall time      0.01 sec
diis-norm(errvec)=0.00946521
diis-c [-4.33878185e-05 -1.51739430e-02  1.01517394e+00]
  HOMO = -0.670899126664638  LUMO = 42.5145592039741
  mo_energy =
[-1.07580595e+02 -1.29602622e+01 -8.93847797e+00 -8.93847797e+00
 -8.93847797e+00 -1.58902100e+00 -6.70899127e-01 -6.70899127e-01
 -6.70899127e-01  4.25145592e+01  5.79605949e+03  5.79605949e+03
  5.79605949e+03]
E1 = -634.0245876350666  E_coul = 166.05394812883642
cycle= 3 E= -467.97063950623  delta_E= -1.99e-06  |g|= 0.000169  |ddm|= 0.001
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.000151823
diis-c [-4.86230275e-09  2.60590917e-04 -2.08570342e-02  1.02059644e+00]
  HOMO = -0.670898843944996  LUMO = 42.5144980155607
  mo_energy =
[-1.07580768e+02 -1.29602797e+01 -8.93853044e+00 -8.93853044e+00
 -8.93853044e+00 -1.58902071e+00 -6.70898844e-01 -6.70898844e-01
 -6.70898844e-01  4.25144980e+01  5.79605932e+03  5.79605932e+03
  5.79605932e+03]
E1 = -634.0245670742075  E_coul = 166.05392756776837
cycle= 4 E= -467.970639506439  delta_E= -2.09e-10  |g|= 9.14e-07  |ddm|= 7.98e-06
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
E1 = -634.0245670742075  E_coul = 166.05392756776837
  HOMO = -0.670898841185091  LUMO = 42.514498204016
  mo_energy =
[-1.07580768e+02 -1.29602797e+01 -8.93853041e+00 -8.93853041e+00
 -8.93853041e+00 -1.58902071e+00 -6.70898841e-01 -6.70898841e-01
 -6.70898841e-01  4.25144982e+01  5.79605932e+03  5.79605932e+03
  5.79605932e+03]
E1 = -634.024567074313  E_coul = 166.0539275678736
Extra cycle  E= -467.970639506439  delta_E= -2.84e-13  |g|= 1.97e-08  |ddm|= 1.65e-08
    CPU time for scf_cycle      4.67 sec, wall time      0.26 sec
exp = [3.31932223e+00 1.00604985e+02 1.94930935e-01 2.20360342e+01
 8.46514052e+00 1.80069120e-01 2.69396476e+03]
E = -467.97063950643945
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
number_of_s_exps = 4
number_of_p_exps = 3

exps = np.zeros((number_of_s_exps+number_of_p_exps,2))
#exps[:, 0] = decaying_nums(5)

# S
exps[0,0] = 20.0
exps[1,0] = 9.5045827955887916e+01
exps[2,0] = 4.4881042475048387e+00 
exps[3,0] = 3.9799528004692630e-01
             
# P          
exps[3,0] = 3.0108199280832128e+01
exps[4,0] = 6.1393781325590453e+00
exps[5,0] = 4.8929328703550412e-01

basis =  str(number_of_s_exps)+"s"+str(number_of_p_exps)+"p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc21115.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 24
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 18 14:58:12 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35677784.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 32000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 32000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 32000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  3.31932222664        1
[INPUT] 0    0    [1    /1   ]  100.604984707        1
[INPUT] 0    0    [1    /1   ]  0.194930935249       1
[INPUT] 0    0    [1    /1   ]  22.0360342353        1
[INPUT] 1    0    [1    /1   ]  8.46514052198        1
[INPUT] 1    0    [1    /1   ]  0.180069119889       1
[INPUT] 1    0    [1    /1   ]  2693.96475746        1

nuclear repulsion = 0
number of shells = 7
number of NR pGTOs = 13
number of NR cGTOs = 13
basis = {'Ar': [[0, [3.319322226642611, 1.0]], [0, [100.60498470730461, 1.0]], [0, [0.19493093524862232, 1.0]], [0, [22.036034235321594, 1.0]], [1, [8.46514052197986, 1.0]], [1, [0.18006911988885352, 1.0]], [1, [2693.964757460859, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [3.31932223]
bas 1, expnt(s) = [100.60498471]
bas 2, expnt(s) = [0.19493094]
bas 3, expnt(s) = [22.03603424]
bas 4, expnt(s) = [8.46514052]
bas 5, expnt(s) = [0.18006912]
bas 6, expnt(s) = [2693.96475746]
CPU time:       132.14
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  1  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]
 [ 0  1  1  1  0 36 37  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 3.31932223e+00 6.21301046e+00 1.00604985e+02 8.02563951e+01
 1.94930935e-01 7.41183255e-01 2.20360342e+01 2.56959751e+01
 8.46514052e+00 4.21237578e+01 1.80069120e-01 3.42202710e-01
 2.69396476e+03 5.66205756e+04]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 15.478244080240085
cond(S) = 9.425080604066602
E1 = -593.4382192496132  E_coul = 145.2155827788787
init E= -448.222636470735
    CPU time for initialize scf      0.21 sec, wall time      0.03 sec
  HOMO = -1.48062296077327  LUMO = 40.5993296867938
  mo_energy =
[-1.08815689e+02 -1.45953357e+01 -1.04993254e+01 -1.04993254e+01
 -1.04993254e+01 -2.55283692e+00 -1.48062296e+00 -1.48062296e+00
 -1.48062296e+00  4.05993297e+01  5.79563454e+03  5.79563454e+03
  5.79563454e+03]
E1 = -634.173351330909  E_coul = 166.20766019944654
cycle= 1 E= -467.965691131462  delta_E= -19.7  |g|= 0.76  |ddm|=  1.8
    CPU time for cycle= 1      0.24 sec, wall time      0.01 sec
diis-norm(errvec)=0.454799
diis-c [-0.20684217  1.        ]
  HOMO = -0.670711896813315  LUMO = 42.5281118402855
  mo_energy =
[-1.07542516e+02 -1.29548585e+01 -8.92769960e+00 -8.92769960e+00
 -8.92769960e+00 -1.58883418e+00 -6.70711897e-01 -6.70711897e-01
 -6.70711897e-01  4.25281118e+01  5.79613287e+03  5.79613287e+03
  5.79613287e+03]
E1 = -634.0275461515779  E_coul = 166.0569086396032
cycle= 2 E= -467.970637511975  delta_E= -0.00495  |g|= 0.0147  |ddm|= 0.052
    CPU time for cycle= 2      0.11 sec, wall time      0.01 sec
diis-norm(errvec)=0.00946521
diis-c [-4.33878185e-05 -1.51739430e-02  1.01517394e+00]
  HOMO = -0.670899126664638  LUMO = 42.5145592039741
  mo_energy =
[-1.07580595e+02 -1.29602622e+01 -8.93847797e+00 -8.93847797e+00
 -8.93847797e+00 -1.58902100e+00 -6.70899127e-01 -6.70899127e-01
 -6.70899127e-01  4.25145592e+01  5.79605949e+03  5.79605949e+03
  5.79605949e+03]
E1 = -634.0245876350666  E_coul = 166.05394812883642
cycle= 3 E= -467.97063950623  delta_E= -1.99e-06  |g|= 0.000169  |ddm|= 0.001
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.000151823
diis-c [-4.86230275e-09  2.60590917e-04 -2.08570342e-02  1.02059644e+00]
  HOMO = -0.670898843944996  LUMO = 42.5144980155607
  mo_energy =
[-1.07580768e+02 -1.29602797e+01 -8.93853044e+00 -8.93853044e+00
 -8.93853044e+00 -1.58902071e+00 -6.70898844e-01 -6.70898844e-01
 -6.70898844e-01  4.25144980e+01  5.79605932e+03  5.79605932e+03
  5.79605932e+03]
E1 = -634.0245670742075  E_coul = 166.05392756776837
cycle= 4 E= -467.970639506439  delta_E= -2.09e-10  |g|= 9.14e-07  |ddm|= 7.98e-06
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
E1 = -634.0245670742075  E_coul = 166.05392756776837
  HOMO = -0.670898841185091  LUMO = 42.514498204016
  mo_energy =
[-1.07580768e+02 -1.29602797e+01 -8.93853041e+00 -8.93853041e+00
 -8.93853041e+00 -1.58902071e+00 -6.70898841e-01 -6.70898841e-01
 -6.70898841e-01  4.25144982e+01  5.79605932e+03  5.79605932e+03
  5.79605932e+03]
E1 = -634.024567074313  E_coul = 166.0539275678736
Extra cycle  E= -467.970639506439  delta_E= -2.84e-13  |g|= 1.97e-08  |ddm|= 1.65e-08
    CPU time for scf_cycle      0.58 sec, wall time      0.08 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 9.425080604066602
E1 = -634.024567074313  E_coul = 166.0539275678736
init E= -467.970639506439
    CPU time for initialize scf      1.20 sec, wall time      0.05 sec
  HOMO = -0.670898841157881  LUMO = 42.5144982053648
  mo_energy =
[-1.07580768e+02 -1.29602797e+01 -8.93853041e+00 -8.93853041e+00
 -8.93853041e+00 -1.58902071e+00 -6.70898841e-01 -6.70898841e-01
 -6.70898841e-01  4.25144982e+01  5.79605932e+03  5.79605932e+03
  5.79605932e+03]
E1 = -634.0245670736698  E_coul = 166.05392756723
cycle= 1 E= -467.97063950644  delta_E= -3.41e-13  |g|= 4.6e-10  |ddm|= 4.58e-10
    CPU time for cycle= 1      0.22 sec, wall time      0.01 sec
E1 = -634.0245670736698  E_coul = 166.05392756723
  HOMO = -0.670898841158007  LUMO = 42.5144982053365
  mo_energy =
[-1.07580768e+02 -1.29602797e+01 -8.93853041e+00 -8.93853041e+00
 -8.93853041e+00 -1.58902071e+00 -6.70898841e-01 -6.70898841e-01
 -6.70898841e-01  4.25144982e+01  5.79605932e+03  5.79605932e+03
  5.79605932e+03]
E1 = -634.0245670736425  E_coul = 166.05392756720283
Extra cycle  E= -467.97063950644  delta_E= 1.14e-13  |g|= 1.17e-11  |ddm|= 1.36e-11
    CPU time for scf_cycle      1.48 sec, wall time      0.12 sec
exp = [3.31932223e+00 1.00604985e+02 1.94930935e-01 2.20360342e+01
 8.46514052e+00 1.80069120e-01 2.69396476e+03]
grad_E = [-1.04564912e+00 -3.67400532e-01 -6.70685959e+00  3.46235598e-02
 -2.67613041e-02 -2.06250298e+01  5.98153122e-06]
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
number_of_s_exps = 4
number_of_p_exps = 3

exps = np.zeros((number_of_s_exps+number_of_p_exps,2))
#exps[:, 0] = decaying_nums(5)

# S
exps[0,0] = 20.0
exps[1,0] = 9.5045827955887916e+01
exps[2,0] = 4.4881042475048387e+00 
exps[3,0] = 3.9799528004692630e-01
             
# P          
exps[3,0] = 3.0108199280832128e+01
exps[4,0] = 6.1393781325590453e+00
exps[5,0] = 4.8929328703550412e-01

basis =  str(number_of_s_exps)+"s"+str(number_of_p_exps)+"p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc21115.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 24
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 18 14:58:15 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35677784.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 32000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 32000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 32000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  4.28940123524        1
[INPUT] 0    0    [1    /1   ]  100.627347322        1
[INPUT] 0    0    [1    /1   ]  0.196786834123       1
[INPUT] 0    0    [1    /1   ]  22.2676683491        1
[INPUT] 1    0    [1    /1   ]  8.55801232943        1
[INPUT] 1    0    [1    /1   ]  0.179515188644       1
[INPUT] 1    0    [1    /1   ]  2693.96475663        1

nuclear repulsion = 0
number of shells = 7
number of NR pGTOs = 13
number of NR cGTOs = 13
basis = {'Ar': [[0, [4.28940123524179, 1.0]], [0, [100.62734732206724, 1.0]], [0, [0.19678683412262132, 1.0]], [0, [22.267668349104536, 1.0]], [1, [8.558012329426681, 1.0]], [1, [0.1795151886436137, 1.0]], [1, [2693.9647566269873, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [4.28940124]
bas 1, expnt(s) = [100.62734732]
bas 2, expnt(s) = [0.19678683]
bas 3, expnt(s) = [22.26766835]
bas 4, expnt(s) = [8.55801233]
bas 5, expnt(s) = [0.17951519]
bas 6, expnt(s) = [2693.96475663]
CPU time:       136.89
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  1  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]
 [ 0  1  1  1  0 36 37  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 4.28940124e+00 7.53030434e+00 1.00627347e+02 8.02697744e+01
 1.96786834e-01 7.46469476e-01 2.22676683e+01 2.58982896e+01
 8.55801233e+00 4.27022272e+01 1.79515189e-01 3.40887355e-01
 2.69396476e+03 5.66205756e+04]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 15.505885331094035
cond(S) = 11.351666152672568
E1 = -597.0658501547963  E_coul = 146.48235438247215
init E= -450.583495772324
    CPU time for initialize scf      1.61 sec, wall time      0.09 sec
  HOMO = -1.46635473662908  LUMO = 45.7277920510092
  mo_energy =
[-1.08668533e+02 -1.47244281e+01 -1.03686734e+01 -1.03686734e+01
 -1.03686734e+01 -2.62631055e+00 -1.46635474e+00 -1.46635474e+00
 -1.46635474e+00  4.57277921e+01  5.79567748e+03  5.79567748e+03
  5.79567748e+03]
E1 = -637.4166295938602  E_coul = 169.00145728296022
cycle= 1 E= -468.4151723109  delta_E= -17.8  |g|= 0.713  |ddm|= 1.51
    CPU time for cycle= 1      0.23 sec, wall time      0.01 sec
diis-norm(errvec)=0.424113
diis-c [-0.17987157  1.        ]
  HOMO = -0.664407579208302  LUMO = 47.749451525159
  mo_energy =
[-1.07037852e+02 -1.29732028e+01 -8.68576173e+00 -8.68576173e+00
 -8.68576173e+00 -1.64708150e+00 -6.64407579e-01 -6.64407579e-01
 -6.64407579e-01  4.77494515e+01  5.79673815e+03  5.79673815e+03
  5.79673815e+03]
E1 = -637.2994503501193  E_coul = 168.88063993186591
cycle= 2 E= -468.418810418253  delta_E= -0.00364  |g|= 0.013  |ddm|= 0.0465
    CPU time for cycle= 2      0.11 sec, wall time      0.01 sec
diis-norm(errvec)=0.00736927
diis-c [-2.63972706e-05 -1.26143673e-02  1.01261437e+00]
  HOMO = -0.664544836637222  LUMO = 47.7383801277254
  mo_energy =
[-1.07069284e+02 -1.29777250e+01 -8.69399529e+00 -8.69399529e+00
 -8.69399529e+00 -1.64721889e+00 -6.64544837e-01 -6.64544837e-01
 -6.64544837e-01  4.77383801e+01  5.79667254e+03  5.79667254e+03
  5.79667254e+03]
E1 = -637.2970902921548  E_coul = 168.8782784969846
cycle= 3 E= -468.41881179517  delta_E= -1.38e-06  |g|= 0.000153  |ddm|= 0.000902
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.000117491
diis-c [-4.04585843e-09  2.24272709e-04 -1.97459276e-02  1.01952165e+00]
  HOMO = -0.664544934166192  LUMO = 47.7383025439333
  mo_energy =
[-1.07069507e+02 -1.29777511e+01 -8.69405496e+00 -8.69405496e+00
 -8.69405496e+00 -1.64721887e+00 -6.64544934e-01 -6.64544934e-01
 -6.64544934e-01  4.77383025e+01  5.79667219e+03  5.79667219e+03
  5.79667219e+03]
E1 = -637.2970685752671  E_coul = 168.87825677991435
cycle= 4 E= -468.418811795353  delta_E= -1.82e-10  |g|= 1.18e-06  |ddm|= 9.09e-06
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
E1 = -637.2970685752671  E_coul = 168.87825677991435
  HOMO = -0.664544934487492  LUMO = 47.7383023776499
  mo_energy =
[-1.07069507e+02 -1.29777512e+01 -8.69405519e+00 -8.69405519e+00
 -8.69405519e+00 -1.64721887e+00 -6.64544934e-01 -6.64544934e-01
 -6.64544934e-01  4.77383024e+01  5.79667219e+03  5.79667219e+03
  5.79667219e+03]
E1 = -637.2970684898538  E_coul = 168.87825669450106
Extra cycle  E= -468.418811795353  delta_E= -5.68e-14  |g|= 2.98e-08  |ddm|= 4.4e-08
    CPU time for scf_cycle      1.98 sec, wall time      0.14 sec
exp = [4.28940124e+00 1.00627347e+02 1.96786834e-01 2.22676683e+01
 8.55801233e+00 1.79515189e-01 2.69396476e+03]
E = -468.4188117953528
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
number_of_s_exps = 4
number_of_p_exps = 3

exps = np.zeros((number_of_s_exps+number_of_p_exps,2))
#exps[:, 0] = decaying_nums(5)

# S
exps[0,0] = 20.0
exps[1,0] = 9.5045827955887916e+01
exps[2,0] = 4.4881042475048387e+00 
exps[3,0] = 3.9799528004692630e-01
             
# P          
exps[3,0] = 3.0108199280832128e+01
exps[4,0] = 6.1393781325590453e+00
exps[5,0] = 4.8929328703550412e-01

basis =  str(number_of_s_exps)+"s"+str(number_of_p_exps)+"p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc21115.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 24
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 18 14:58:15 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35677784.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 32000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 32000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 32000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  4.28940123524        1
[INPUT] 0    0    [1    /1   ]  100.627347322        1
[INPUT] 0    0    [1    /1   ]  0.196786834123       1
[INPUT] 0    0    [1    /1   ]  22.2676683491        1
[INPUT] 1    0    [1    /1   ]  8.55801232943        1
[INPUT] 1    0    [1    /1   ]  0.179515188644       1
[INPUT] 1    0    [1    /1   ]  2693.96475663        1

nuclear repulsion = 0
number of shells = 7
number of NR pGTOs = 13
number of NR cGTOs = 13
basis = {'Ar': [[0, [4.28940123524179, 1.0]], [0, [100.62734732206724, 1.0]], [0, [0.19678683412262132, 1.0]], [0, [22.267668349104536, 1.0]], [1, [8.558012329426681, 1.0]], [1, [0.1795151886436137, 1.0]], [1, [2693.9647566269873, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [4.28940124]
bas 1, expnt(s) = [100.62734732]
bas 2, expnt(s) = [0.19678683]
bas 3, expnt(s) = [22.26766835]
bas 4, expnt(s) = [8.55801233]
bas 5, expnt(s) = [0.17951519]
bas 6, expnt(s) = [2693.96475663]
CPU time:       138.95
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  1  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]
 [ 0  1  1  1  0 36 37  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 4.28940124e+00 7.53030434e+00 1.00627347e+02 8.02697744e+01
 1.96786834e-01 7.46469476e-01 2.22676683e+01 2.58982896e+01
 8.55801233e+00 4.27022272e+01 1.79515189e-01 3.40887355e-01
 2.69396476e+03 5.66205756e+04]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 15.505885331094035
cond(S) = 11.351666152672568
E1 = -597.0658501547963  E_coul = 146.48235438247215
init E= -450.583495772324
    CPU time for initialize scf      0.20 sec, wall time      0.02 sec
  HOMO = -1.46635473662908  LUMO = 45.7277920510092
  mo_energy =
[-1.08668533e+02 -1.47244281e+01 -1.03686734e+01 -1.03686734e+01
 -1.03686734e+01 -2.62631055e+00 -1.46635474e+00 -1.46635474e+00
 -1.46635474e+00  4.57277921e+01  5.79567748e+03  5.79567748e+03
  5.79567748e+03]
E1 = -637.4166295938602  E_coul = 169.00145728296022
cycle= 1 E= -468.4151723109  delta_E= -17.8  |g|= 0.713  |ddm|= 1.51
    CPU time for cycle= 1      0.22 sec, wall time      0.01 sec
diis-norm(errvec)=0.424113
diis-c [-0.17987157  1.        ]
  HOMO = -0.664407579208302  LUMO = 47.749451525159
  mo_energy =
[-1.07037852e+02 -1.29732028e+01 -8.68576173e+00 -8.68576173e+00
 -8.68576173e+00 -1.64708150e+00 -6.64407579e-01 -6.64407579e-01
 -6.64407579e-01  4.77494515e+01  5.79673815e+03  5.79673815e+03
  5.79673815e+03]
E1 = -637.2994503501193  E_coul = 168.88063993186591
cycle= 2 E= -468.418810418253  delta_E= -0.00364  |g|= 0.013  |ddm|= 0.0465
    CPU time for cycle= 2      0.13 sec, wall time      0.01 sec
diis-norm(errvec)=0.00736927
diis-c [-2.63972706e-05 -1.26143673e-02  1.01261437e+00]
  HOMO = -0.664544836637222  LUMO = 47.7383801277254
  mo_energy =
[-1.07069284e+02 -1.29777250e+01 -8.69399529e+00 -8.69399529e+00
 -8.69399529e+00 -1.64721889e+00 -6.64544837e-01 -6.64544837e-01
 -6.64544837e-01  4.77383801e+01  5.79667254e+03  5.79667254e+03
  5.79667254e+03]
E1 = -637.2970902921548  E_coul = 168.8782784969846
cycle= 3 E= -468.41881179517  delta_E= -1.38e-06  |g|= 0.000153  |ddm|= 0.000902
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.000117491
diis-c [-4.04585843e-09  2.24272709e-04 -1.97459276e-02  1.01952165e+00]
  HOMO = -0.664544934166192  LUMO = 47.7383025439333
  mo_energy =
[-1.07069507e+02 -1.29777511e+01 -8.69405496e+00 -8.69405496e+00
 -8.69405496e+00 -1.64721887e+00 -6.64544934e-01 -6.64544934e-01
 -6.64544934e-01  4.77383025e+01  5.79667219e+03  5.79667219e+03
  5.79667219e+03]
E1 = -637.2970685752671  E_coul = 168.87825677991435
cycle= 4 E= -468.418811795353  delta_E= -1.82e-10  |g|= 1.18e-06  |ddm|= 9.09e-06
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
E1 = -637.2970685752671  E_coul = 168.87825677991435
  HOMO = -0.664544934487492  LUMO = 47.7383023776499
  mo_energy =
[-1.07069507e+02 -1.29777512e+01 -8.69405519e+00 -8.69405519e+00
 -8.69405519e+00 -1.64721887e+00 -6.64544934e-01 -6.64544934e-01
 -6.64544934e-01  4.77383024e+01  5.79667219e+03  5.79667219e+03
  5.79667219e+03]
E1 = -637.2970684898538  E_coul = 168.87825669450106
Extra cycle  E= -468.418811795353  delta_E= -5.68e-14  |g|= 2.98e-08  |ddm|= 4.4e-08
    CPU time for scf_cycle      0.58 sec, wall time      0.08 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 11.351666152672568
E1 = -637.2970684898538  E_coul = 168.87825669450106
init E= -468.418811795353
    CPU time for initialize scf      2.82 sec, wall time      0.12 sec
  HOMO = -0.664544934511687  LUMO = 47.7383023714387
  mo_energy =
[-1.07069507e+02 -1.29777512e+01 -8.69405520e+00 -8.69405520e+00
 -8.69405520e+00 -1.64721887e+00 -6.64544935e-01 -6.64544935e-01
 -6.64544935e-01  4.77383024e+01  5.79667219e+03  5.79667219e+03
  5.79667219e+03]
E1 = -637.2970684872826  E_coul = 168.87825669192986
cycle= 1 E= -468.418811795353  delta_E= 1.14e-13  |g|= 7.72e-10  |ddm|= 1.24e-09
    CPU time for cycle= 1      0.22 sec, wall time      0.01 sec
E1 = -637.2970684872826  E_coul = 168.87825669192986
  HOMO = -0.664544934512873  LUMO = 47.738302371243
  mo_energy =
[-1.07069507e+02 -1.29777512e+01 -8.69405520e+00 -8.69405520e+00
 -8.69405520e+00 -1.64721887e+00 -6.64544935e-01 -6.64544935e-01
 -6.64544935e-01  4.77383024e+01  5.79667219e+03  5.79667219e+03
  5.79667219e+03]
E1 = -637.2970684872085  E_coul = 168.87825669185645
Extra cycle  E= -468.418811795352  delta_E= 5.68e-13  |g|= 2.05e-11  |ddm|= 3.42e-11
    CPU time for scf_cycle      3.09 sec, wall time      0.19 sec
exp = [4.28940124e+00 1.00627347e+02 1.96786834e-01 2.22676683e+01
 8.55801233e+00 1.79515189e-01 2.69396476e+03]
grad_E = [ 2.11167589e-02 -3.80308782e-01 -7.12379731e+00  4.89359344e-02
  1.14651900e-01 -2.05246681e+01  6.12234434e-06]
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
number_of_s_exps = 4
number_of_p_exps = 3

exps = np.zeros((number_of_s_exps+number_of_p_exps,2))
#exps[:, 0] = decaying_nums(5)

# S
exps[0,0] = 20.0
exps[1,0] = 9.5045827955887916e+01
exps[2,0] = 4.4881042475048387e+00 
exps[3,0] = 3.9799528004692630e-01
             
# P          
exps[3,0] = 3.0108199280832128e+01
exps[4,0] = 6.1393781325590453e+00
exps[5,0] = 4.8929328703550412e-01

basis =  str(number_of_s_exps)+"s"+str(number_of_p_exps)+"p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc21115.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 24
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 18 14:58:18 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35677784.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 32000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 32000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 32000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  4.27779921825        1
[INPUT] 0    0    [1    /1   ]  101.181912046        1
[INPUT] 0    0    [1    /1   ]  0.209112919894       1
[INPUT] 0    0    [1    /1   ]  22.1313223354        1
[INPUT] 1    0    [1    /1   ]  8.52182538506        1
[INPUT] 1    0    [1    /1   ]  0.175843052685       1
[INPUT] 1    0    [1    /1   ]  2693.96475667        1

nuclear repulsion = 0
number of shells = 7
number of NR pGTOs = 13
number of NR cGTOs = 13
basis = {'Ar': [[0, [4.277799218253504, 1.0]], [0, [101.18191204552669, 1.0]], [0, [0.20911291989420394, 1.0]], [0, [22.13132233540473, 1.0]], [1, [8.521825385060993, 1.0]], [1, [0.17584305268517067, 1.0]], [1, [2693.96475667457, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [4.27779922]
bas 1, expnt(s) = [101.18191205]
bas 2, expnt(s) = [0.20911292]
bas 3, expnt(s) = [22.13132234]
bas 4, expnt(s) = [8.52182539]
bas 5, expnt(s) = [0.17584305]
bas 6, expnt(s) = [2693.96475667]
CPU time:       145.26
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  1  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]
 [ 0  1  1  1  0 36 37  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 4.27779922e+00 7.51502313e+00 1.01181912e+02 8.06013259e+01
 2.09112920e-01 7.81269147e-01 2.21313223e+01 2.57792660e+01
 8.52182539e+00 4.24766425e+01 1.75843053e-01 3.32193332e-01
 2.69396476e+03 5.66205756e+04]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 15.483712267070457
cond(S) = 11.31018573534601
E1 = -597.2810043301224  E_coul = 146.31590766665778
init E= -450.965096663465
    CPU time for initialize scf      7.28 sec, wall time      0.33 sec
  HOMO = -1.45190951253604  LUMO = 45.5358410625304
  mo_energy =
[-1.08795005e+02 -1.47413742e+01 -1.03779189e+01 -1.03779189e+01
 -1.03779189e+01 -2.69811524e+00 -1.45190951e+00 -1.45190951e+00
 -1.45190951e+00  4.55358411e+01  5.79568847e+03  5.79568847e+03
  5.79568847e+03]
E1 = -637.4686949610236  E_coul = 168.8261188574691
cycle= 1 E= -468.642576103555  delta_E= -17.7  |g|= 0.713  |ddm|= 1.52
    CPU time for cycle= 1      0.21 sec, wall time      0.01 sec
diis-norm(errvec)=0.423427
diis-c [-0.17929017  1.        ]
  HOMO = -0.65359523826909  LUMO = 47.5504719780365
  mo_energy =
[-1.07169368e+02 -1.29927912e+01 -8.69747970e+00 -8.69747970e+00
 -8.69747970e+00 -1.69463625e+00 -6.53595238e-01 -6.53595238e-01
 -6.53595238e-01  4.75504720e+01  5.79673531e+03  5.79673531e+03
  5.79673531e+03]
E1 = -637.3505003649917  E_coul = 168.70427436606514
cycle= 2 E= -468.646225998927  delta_E= -0.00365  |g|= 0.013  |ddm|= 0.0469
    CPU time for cycle= 2      0.12 sec, wall time      0.01 sec
diis-norm(errvec)=0.00736219
diis-c [-2.68755919e-05 -1.25008607e-02  1.01250086e+00]
  HOMO = -0.653728822719784  LUMO = 47.5393167803666
  mo_energy =
[-1.07201043e+02 -1.29973753e+01 -8.70578289e+00 -8.70578289e+00
 -8.70578289e+00 -1.69478477e+00 -6.53728823e-01 -6.53728823e-01
 -6.53728823e-01  4.75393168e+01  5.79666932e+03  5.79666932e+03
  5.79666932e+03]
E1 = -637.3481302881668  E_coul = 168.70190291315353
cycle= 3 E= -468.646227375013  delta_E= -1.38e-06  |g|= 0.000155  |ddm|= 0.000907
    CPU time for cycle= 3      0.02 sec, wall time      0.01 sec
diis-norm(errvec)=0.000120071
diis-c [-4.12176903e-09  2.27804207e-04 -2.01198347e-02  1.01989203e+00]
  HOMO = -0.653728943525674  LUMO = 47.5392384079355
  mo_energy =
[-1.07201268e+02 -1.29974020e+01 -8.70584341e+00 -8.70584341e+00
 -8.70584341e+00 -1.69478480e+00 -6.53728944e-01 -6.53728944e-01
 -6.53728944e-01  4.75392384e+01  5.79666897e+03  5.79666897e+03
  5.79666897e+03]
E1 = -637.3481083680298  E_coul = 168.70188099282876
cycle= 4 E= -468.646227375201  delta_E= -1.88e-10  |g|= 1.16e-06  |ddm|= 9.17e-06
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
E1 = -637.3481083680298  E_coul = 168.70188099282876
  HOMO = -0.653728943593854  LUMO = 47.5392382602007
  mo_energy =
[-1.07201269e+02 -1.29974021e+01 -8.70584363e+00 -8.70584363e+00
 -8.70584363e+00 -1.69478480e+00 -6.53728944e-01 -6.53728944e-01
 -6.53728944e-01  4.75392383e+01  5.79666897e+03  5.79666897e+03
  5.79666897e+03]
E1 = -637.3481082868259  E_coul = 168.70188091162498
Extra cycle  E= -468.646227375201  delta_E= 1.14e-13  |g|= 2.92e-08  |ddm|= 4.23e-08
    CPU time for scf_cycle      7.65 sec, wall time      0.38 sec
exp = [4.27779922e+00 1.01181912e+02 2.09112920e-01 2.21313223e+01
 8.52182539e+00 1.75843053e-01 2.69396476e+03]
E = -468.6462273752009
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
number_of_s_exps = 4
number_of_p_exps = 3

exps = np.zeros((number_of_s_exps+number_of_p_exps,2))
#exps[:, 0] = decaying_nums(5)

# S
exps[0,0] = 20.0
exps[1,0] = 9.5045827955887916e+01
exps[2,0] = 4.4881042475048387e+00 
exps[3,0] = 3.9799528004692630e-01
             
# P          
exps[3,0] = 3.0108199280832128e+01
exps[4,0] = 6.1393781325590453e+00
exps[5,0] = 4.8929328703550412e-01

basis =  str(number_of_s_exps)+"s"+str(number_of_p_exps)+"p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc21115.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 24
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 18 14:58:19 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35677784.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 32000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 32000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 32000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  4.27779921825        1
[INPUT] 0    0    [1    /1   ]  101.181912046        1
[INPUT] 0    0    [1    /1   ]  0.209112919894       1
[INPUT] 0    0    [1    /1   ]  22.1313223354        1
[INPUT] 1    0    [1    /1   ]  8.52182538506        1
[INPUT] 1    0    [1    /1   ]  0.175843052685       1
[INPUT] 1    0    [1    /1   ]  2693.96475667        1

nuclear repulsion = 0
number of shells = 7
number of NR pGTOs = 13
number of NR cGTOs = 13
basis = {'Ar': [[0, [4.277799218253504, 1.0]], [0, [101.18191204552669, 1.0]], [0, [0.20911291989420394, 1.0]], [0, [22.13132233540473, 1.0]], [1, [8.521825385060993, 1.0]], [1, [0.17584305268517067, 1.0]], [1, [2693.96475667457, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [4.27779922]
bas 1, expnt(s) = [101.18191205]
bas 2, expnt(s) = [0.20911292]
bas 3, expnt(s) = [22.13132234]
bas 4, expnt(s) = [8.52182539]
bas 5, expnt(s) = [0.17584305]
bas 6, expnt(s) = [2693.96475667]
CPU time:       152.99
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  1  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]
 [ 0  1  1  1  0 36 37  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 4.27779922e+00 7.51502313e+00 1.01181912e+02 8.06013259e+01
 2.09112920e-01 7.81269147e-01 2.21313223e+01 2.57792660e+01
 8.52182539e+00 4.24766425e+01 1.75843053e-01 3.32193332e-01
 2.69396476e+03 5.66205756e+04]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 15.483712267070457
cond(S) = 11.31018573534601
E1 = -597.2810043301224  E_coul = 146.31590766665778
init E= -450.965096663465
    CPU time for initialize scf      5.25 sec, wall time      0.24 sec
  HOMO = -1.45190951253604  LUMO = 45.5358410625304
  mo_energy =
[-1.08795005e+02 -1.47413742e+01 -1.03779189e+01 -1.03779189e+01
 -1.03779189e+01 -2.69811524e+00 -1.45190951e+00 -1.45190951e+00
 -1.45190951e+00  4.55358411e+01  5.79568847e+03  5.79568847e+03
  5.79568847e+03]
E1 = -637.4686949610236  E_coul = 168.8261188574691
cycle= 1 E= -468.642576103555  delta_E= -17.7  |g|= 0.713  |ddm|= 1.52
    CPU time for cycle= 1      0.23 sec, wall time      0.01 sec
diis-norm(errvec)=0.423427
diis-c [-0.17929017  1.        ]
  HOMO = -0.65359523826909  LUMO = 47.5504719780365
  mo_energy =
[-1.07169368e+02 -1.29927912e+01 -8.69747970e+00 -8.69747970e+00
 -8.69747970e+00 -1.69463625e+00 -6.53595238e-01 -6.53595238e-01
 -6.53595238e-01  4.75504720e+01  5.79673531e+03  5.79673531e+03
  5.79673531e+03]
E1 = -637.3505003649917  E_coul = 168.70427436606514
cycle= 2 E= -468.646225998927  delta_E= -0.00365  |g|= 0.013  |ddm|= 0.0469
    CPU time for cycle= 2      0.10 sec, wall time      0.01 sec
diis-norm(errvec)=0.00736219
diis-c [-2.68755919e-05 -1.25008607e-02  1.01250086e+00]
  HOMO = -0.653728822719784  LUMO = 47.5393167803666
  mo_energy =
[-1.07201043e+02 -1.29973753e+01 -8.70578289e+00 -8.70578289e+00
 -8.70578289e+00 -1.69478477e+00 -6.53728823e-01 -6.53728823e-01
 -6.53728823e-01  4.75393168e+01  5.79666932e+03  5.79666932e+03
  5.79666932e+03]
E1 = -637.3481302881668  E_coul = 168.70190291315353
cycle= 3 E= -468.646227375013  delta_E= -1.38e-06  |g|= 0.000155  |ddm|= 0.000907
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.000120071
diis-c [-4.12176903e-09  2.27804207e-04 -2.01198347e-02  1.01989203e+00]
  HOMO = -0.653728943525674  LUMO = 47.5392384079355
  mo_energy =
[-1.07201268e+02 -1.29974020e+01 -8.70584341e+00 -8.70584341e+00
 -8.70584341e+00 -1.69478480e+00 -6.53728944e-01 -6.53728944e-01
 -6.53728944e-01  4.75392384e+01  5.79666897e+03  5.79666897e+03
  5.79666897e+03]
E1 = -637.3481083680298  E_coul = 168.70188099282876
cycle= 4 E= -468.646227375201  delta_E= -1.88e-10  |g|= 1.16e-06  |ddm|= 9.17e-06
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
E1 = -637.3481083680298  E_coul = 168.70188099282876
  HOMO = -0.653728943593854  LUMO = 47.5392382602007
  mo_energy =
[-1.07201269e+02 -1.29974021e+01 -8.70584363e+00 -8.70584363e+00
 -8.70584363e+00 -1.69478480e+00 -6.53728944e-01 -6.53728944e-01
 -6.53728944e-01  4.75392383e+01  5.79666897e+03  5.79666897e+03
  5.79666897e+03]
E1 = -637.3481082868259  E_coul = 168.70188091162498
Extra cycle  E= -468.646227375201  delta_E= 1.14e-13  |g|= 2.92e-08  |ddm|= 4.23e-08
    CPU time for scf_cycle      5.61 sec, wall time      0.30 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 11.31018573534601
E1 = -637.3481082868259  E_coul = 168.70188091162498
init E= -468.646227375201
    CPU time for initialize scf      1.18 sec, wall time      0.05 sec
  HOMO = -0.653728943613511  LUMO = 47.5392382543499
  mo_energy =
[-1.07201269e+02 -1.29974021e+01 -8.70584363e+00 -8.70584363e+00
 -8.70584363e+00 -1.69478480e+00 -6.53728944e-01 -6.53728944e-01
 -6.53728944e-01  4.75392383e+01  5.79666897e+03  5.79666897e+03
  5.79666897e+03]
E1 = -637.3481082843447  E_coul = 168.70188090914363
cycle= 1 E= -468.646227375201  delta_E= -1.71e-13  |g|= 7.55e-10  |ddm|= 1.2e-09
    CPU time for cycle= 1      0.22 sec, wall time      0.01 sec
E1 = -637.3481082843447  E_coul = 168.70188090914363
  HOMO = -0.653728943612928  LUMO = 47.5392382541617
  mo_energy =
[-1.07201269e+02 -1.29974021e+01 -8.70584364e+00 -8.70584364e+00
 -8.70584364e+00 -1.69478480e+00 -6.53728944e-01 -6.53728944e-01
 -6.53728944e-01  4.75392383e+01  5.79666897e+03  5.79666897e+03
  5.79666897e+03]
E1 = -637.3481082842737  E_coul = 168.70188090907268
Extra cycle  E= -468.646227375201  delta_E=    0  |g|= 2.05e-11  |ddm|= 3.33e-11
    CPU time for scf_cycle      1.47 sec, wall time      0.11 sec
exp = [4.27779922e+00 1.01181912e+02 2.09112920e-01 2.21313223e+01
 8.52182539e+00 1.75843053e-01 2.69396476e+03]
grad_E = [-6.49798105e-03 -3.74367518e-01 -6.53019092e+00  4.04496848e-02
  8.69331273e-02 -2.07408403e+01  6.06245697e-06]
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
number_of_s_exps = 4
number_of_p_exps = 3

exps = np.zeros((number_of_s_exps+number_of_p_exps,2))
#exps[:, 0] = decaying_nums(5)

# S
exps[0,0] = 20.0
exps[1,0] = 9.5045827955887916e+01
exps[2,0] = 4.4881042475048387e+00 
exps[3,0] = 3.9799528004692630e-01
             
# P          
exps[3,0] = 3.0108199280832128e+01
exps[4,0] = 6.1393781325590453e+00
exps[5,0] = 4.8929328703550412e-01

basis =  str(number_of_s_exps)+"s"+str(number_of_p_exps)+"p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc21115.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 24
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 18 14:58:22 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35677784.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 32000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 32000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 32000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  4.28486750474        1
[INPUT] 0    0    [1    /1   ]  104.632886203        1
[INPUT] 0    0    [1    /1   ]  0.20228497493        1
[INPUT] 0    0    [1    /1   ]  21.2870415916        1
[INPUT] 1    0    [1    /1   ]  8.53644421581        1
[INPUT] 1    0    [1    /1   ]  0.177903613984       1
[INPUT] 1    0    [1    /1   ]  2693.96475706        1

nuclear repulsion = 0
number of shells = 7
number of NR pGTOs = 13
number of NR cGTOs = 13
basis = {'Ar': [[0, [4.284867504743375, 1.0]], [0, [104.63288620336483, 1.0]], [0, [0.20228497492951808, 1.0]], [0, [21.287041591590704, 1.0]], [1, [8.536444215807048, 1.0]], [1, [0.1779036139837838, 1.0]], [1, [2693.9647570620277, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [4.2848675]
bas 1, expnt(s) = [104.6328862]
bas 2, expnt(s) = [0.20228497]
bas 3, expnt(s) = [21.28704159]
bas 4, expnt(s) = [8.53644422]
bas 5, expnt(s) = [0.17790361]
bas 6, expnt(s) = [2693.96475706]
CPU time:       162.71
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  1  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]
 [ 0  1  1  1  0 36 37  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 4.28486750e+00 7.52433412e+00 1.04632886e+02 8.26544381e+01
 2.02284975e-01 7.62057504e-01 2.12870416e+01 2.50381078e+01
 8.53644422e+00 4.25677456e+01 1.77903614e-01 3.37066317e-01
 2.69396476e+03 5.66205756e+04]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 15.501922927303685
cond(S) = 10.942702183263732
E1 = -599.1273207907708  E_coul = 146.65664364642856
init E= -452.470677144342
    CPU time for initialize scf      7.40 sec, wall time      0.34 sec
  HOMO = -1.4573562330044  LUMO = 44.4902940856154
  mo_energy =
[-1.09300741e+02 -1.47529313e+01 -1.03607516e+01 -1.03607516e+01
 -1.03607516e+01 -2.65579665e+00 -1.45735623e+00 -1.45735623e+00
 -1.45735623e+00  4.44902941e+01  5.79602952e+03  5.79602952e+03
  5.79602952e+03]
E1 = -638.7683104849939  E_coul = 168.88989232905638
cycle= 1 E= -469.878418155938  delta_E= -17.4  |g|= 0.698  |ddm|= 1.52
    CPU time for cycle= 1      0.22 sec, wall time      0.01 sec
diis-norm(errvec)=0.418653
diis-c [-0.17527049  1.        ]
  HOMO = -0.659576187590711  LUMO = 46.4728644753477
  mo_energy =
[-1.07723572e+02 -1.30224072e+01 -8.70058739e+00 -8.70058739e+00
 -8.70058739e+00 -1.66954812e+00 -6.59576188e-01 -6.59576188e-01
 -6.59576188e-01  4.64728645e+01  5.79695820e+03  5.79695820e+03
  5.79695820e+03]
E1 = -638.6491160261171  E_coul = 168.76712507960664
cycle= 2 E= -469.88199094651  delta_E= -0.00357  |g|= 0.0125  |ddm|= 0.0466
    CPU time for cycle= 2      0.11 sec, wall time      0.01 sec
diis-norm(errvec)=0.00724147
diis-c [-2.88921498e-05 -1.17276241e-02  1.01172762e+00]
  HOMO = -0.659715959881255  LUMO = 46.4616626772149
  mo_energy =
[-1.07755386e+02 -1.30270409e+01 -8.70896120e+00 -8.70896120e+00
 -8.70896120e+00 -1.66969580e+00 -6.59715960e-01 -6.59715960e-01
 -6.59715960e-01  4.64616627e+01  5.79689203e+03  5.79689203e+03
  5.79689203e+03]
E1 = -638.6467614899617  E_coul = 168.76476922417058
cycle= 3 E= -469.881992265791  delta_E= -1.32e-06  |g|= 0.000165  |ddm|= 0.000892
    CPU time for cycle= 3      0.02 sec, wall time      0.01 sec
diis-norm(errvec)=0.000132599
diis-c [-4.38291568e-09  2.42003044e-04 -2.20581189e-02  1.02181612e+00]
  HOMO = -0.659716178242368  LUMO = 46.4615792491705
  mo_energy =
[-1.07755626e+02 -1.30270705e+01 -8.70902718e+00 -8.70902718e+00
 -8.70902718e+00 -1.66969590e+00 -6.59716178e-01 -6.59716178e-01
 -6.59716178e-01  4.64615792e+01  5.79689167e+03  5.79689167e+03
  5.79689167e+03]
E1 = -638.6467379708355  E_coul = 168.7647457048343
cycle= 4 E= -469.881992266001  delta_E= -2.1e-10  |g|= 1.07e-06  |ddm|= 9.75e-06
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
E1 = -638.6467379708355  E_coul = 168.7647457048343
  HOMO = -0.659716178284682  LUMO = 46.4615791666933
  mo_energy =
[-1.07755626e+02 -1.30270706e+01 -8.70902736e+00 -8.70902736e+00
 -8.70902736e+00 -1.66969590e+00 -6.59716178e-01 -6.59716178e-01
 -6.59716178e-01  4.64615792e+01  5.79689167e+03  5.79689167e+03
  5.79689167e+03]
E1 = -638.6467379040737  E_coul = 168.76474563807258
Extra cycle  E= -469.881992266001  delta_E= 5.68e-14  |g|= 2.66e-08  |ddm|= 3.62e-08
    CPU time for scf_cycle      7.77 sec, wall time      0.39 sec
exp = [4.28486750e+00 1.04632886e+02 2.02284975e-01 2.12870416e+01
 8.53644422e+00 1.77903614e-01 2.69396476e+03]
E = -469.88199226600113
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
number_of_s_exps = 4
number_of_p_exps = 3

exps = np.zeros((number_of_s_exps+number_of_p_exps,2))
#exps[:, 0] = decaying_nums(5)

# S
exps[0,0] = 20.0
exps[1,0] = 9.5045827955887916e+01
exps[2,0] = 4.4881042475048387e+00 
exps[3,0] = 3.9799528004692630e-01
             
# P          
exps[3,0] = 3.0108199280832128e+01
exps[4,0] = 6.1393781325590453e+00
exps[5,0] = 4.8929328703550412e-01

basis =  str(number_of_s_exps)+"s"+str(number_of_p_exps)+"p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc21115.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 24
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 18 14:58:22 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35677784.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 32000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 32000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 32000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  4.28486750474        1
[INPUT] 0    0    [1    /1   ]  104.632886203        1
[INPUT] 0    0    [1    /1   ]  0.20228497493        1
[INPUT] 0    0    [1    /1   ]  21.2870415916        1
[INPUT] 1    0    [1    /1   ]  8.53644421581        1
[INPUT] 1    0    [1    /1   ]  0.177903613984       1
[INPUT] 1    0    [1    /1   ]  2693.96475706        1

nuclear repulsion = 0
number of shells = 7
number of NR pGTOs = 13
number of NR cGTOs = 13
basis = {'Ar': [[0, [4.284867504743375, 1.0]], [0, [104.63288620336483, 1.0]], [0, [0.20228497492951808, 1.0]], [0, [21.287041591590704, 1.0]], [1, [8.536444215807048, 1.0]], [1, [0.1779036139837838, 1.0]], [1, [2693.9647570620277, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [4.2848675]
bas 1, expnt(s) = [104.6328862]
bas 2, expnt(s) = [0.20228497]
bas 3, expnt(s) = [21.28704159]
bas 4, expnt(s) = [8.53644422]
bas 5, expnt(s) = [0.17790361]
bas 6, expnt(s) = [2693.96475706]
CPU time:       170.56
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  1  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]
 [ 0  1  1  1  0 36 37  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 4.28486750e+00 7.52433412e+00 1.04632886e+02 8.26544381e+01
 2.02284975e-01 7.62057504e-01 2.12870416e+01 2.50381078e+01
 8.53644422e+00 4.25677456e+01 1.77903614e-01 3.37066317e-01
 2.69396476e+03 5.66205756e+04]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 15.501922927303685
cond(S) = 10.942702183263732
E1 = -599.1273207907708  E_coul = 146.65664364642856
init E= -452.470677144342
    CPU time for initialize scf      7.27 sec, wall time      0.33 sec
  HOMO = -1.4573562330044  LUMO = 44.4902940856154
  mo_energy =
[-1.09300741e+02 -1.47529313e+01 -1.03607516e+01 -1.03607516e+01
 -1.03607516e+01 -2.65579665e+00 -1.45735623e+00 -1.45735623e+00
 -1.45735623e+00  4.44902941e+01  5.79602952e+03  5.79602952e+03
  5.79602952e+03]
E1 = -638.7683104849939  E_coul = 168.88989232905638
cycle= 1 E= -469.878418155938  delta_E= -17.4  |g|= 0.698  |ddm|= 1.52
    CPU time for cycle= 1      0.22 sec, wall time      0.01 sec
diis-norm(errvec)=0.418653
diis-c [-0.17527049  1.        ]
  HOMO = -0.659576187590711  LUMO = 46.4728644753477
  mo_energy =
[-1.07723572e+02 -1.30224072e+01 -8.70058739e+00 -8.70058739e+00
 -8.70058739e+00 -1.66954812e+00 -6.59576188e-01 -6.59576188e-01
 -6.59576188e-01  4.64728645e+01  5.79695820e+03  5.79695820e+03
  5.79695820e+03]
E1 = -638.6491160261171  E_coul = 168.76712507960664
cycle= 2 E= -469.88199094651  delta_E= -0.00357  |g|= 0.0125  |ddm|= 0.0466
    CPU time for cycle= 2      0.11 sec, wall time      0.01 sec
diis-norm(errvec)=0.00724147
diis-c [-2.88921498e-05 -1.17276241e-02  1.01172762e+00]
  HOMO = -0.659715959881255  LUMO = 46.4616626772149
  mo_energy =
[-1.07755386e+02 -1.30270409e+01 -8.70896120e+00 -8.70896120e+00
 -8.70896120e+00 -1.66969580e+00 -6.59715960e-01 -6.59715960e-01
 -6.59715960e-01  4.64616627e+01  5.79689203e+03  5.79689203e+03
  5.79689203e+03]
E1 = -638.6467614899617  E_coul = 168.76476922417058
cycle= 3 E= -469.881992265791  delta_E= -1.32e-06  |g|= 0.000165  |ddm|= 0.000892
    CPU time for cycle= 3      0.02 sec, wall time      0.01 sec
diis-norm(errvec)=0.000132599
diis-c [-4.38291568e-09  2.42003044e-04 -2.20581189e-02  1.02181612e+00]
  HOMO = -0.659716178242368  LUMO = 46.4615792491705
  mo_energy =
[-1.07755626e+02 -1.30270705e+01 -8.70902718e+00 -8.70902718e+00
 -8.70902718e+00 -1.66969590e+00 -6.59716178e-01 -6.59716178e-01
 -6.59716178e-01  4.64615792e+01  5.79689167e+03  5.79689167e+03
  5.79689167e+03]
E1 = -638.6467379708355  E_coul = 168.7647457048343
cycle= 4 E= -469.881992266001  delta_E= -2.1e-10  |g|= 1.07e-06  |ddm|= 9.75e-06
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
E1 = -638.6467379708355  E_coul = 168.7647457048343
  HOMO = -0.659716178284682  LUMO = 46.4615791666933
  mo_energy =
[-1.07755626e+02 -1.30270706e+01 -8.70902736e+00 -8.70902736e+00
 -8.70902736e+00 -1.66969590e+00 -6.59716178e-01 -6.59716178e-01
 -6.59716178e-01  4.64615792e+01  5.79689167e+03  5.79689167e+03
  5.79689167e+03]
E1 = -638.6467379040737  E_coul = 168.76474563807258
Extra cycle  E= -469.881992266001  delta_E= 5.68e-14  |g|= 2.66e-08  |ddm|= 3.62e-08
    CPU time for scf_cycle      7.64 sec, wall time      0.39 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 10.942702183263732
E1 = -638.6467379040737  E_coul = 168.76474563807258
init E= -469.881992266001
    CPU time for initialize scf     15.62 sec, wall time      0.68 sec
  HOMO = -0.659716178300914  LUMO = 46.4615791621832
  mo_energy =
[-1.07755626e+02 -1.30270706e+01 -8.70902736e+00 -8.70902736e+00
 -8.70902736e+00 -1.66969590e+00 -6.59716178e-01 -6.59716178e-01
 -6.59716178e-01  4.64615792e+01  5.79689167e+03  5.79689167e+03
  5.79689167e+03]
E1 = -638.6467379019076  E_coul = 168.7647456359067
cycle= 1 E= -469.881992266001  delta_E= 2.27e-13  |g|= 6.87e-10  |ddm|= 1.06e-09
    CPU time for cycle= 1      0.18 sec, wall time      0.01 sec
E1 = -638.6467379019076  E_coul = 168.7647456359067
  HOMO = -0.659716178302143  LUMO = 46.4615791620236
  mo_energy =
[-1.07755626e+02 -1.30270706e+01 -8.70902736e+00 -8.70902736e+00
 -8.70902736e+00 -1.66969590e+00 -6.59716178e-01 -6.59716178e-01
 -6.59716178e-01  4.64615792e+01  5.79689167e+03  5.79689167e+03
  5.79689167e+03]
E1 = -638.6467379018436  E_coul = 168.7647456358426
Extra cycle  E= -469.881992266001  delta_E= -1.14e-13  |g|= 1.82e-11  |ddm|= 2.99e-11
    CPU time for scf_cycle     15.87 sec, wall time      0.75 sec
exp = [4.28486750e+00 1.04632886e+02 2.02284975e-01 2.12870416e+01
 8.53644422e+00 1.77903614e-01 2.69396476e+03]
grad_E = [-5.47517457e-02 -3.37588235e-01 -6.85788097e+00 -1.56391389e-02
  9.40025211e-02 -2.06167089e+01  6.08420461e-06]
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
number_of_s_exps = 4
number_of_p_exps = 3

exps = np.zeros((number_of_s_exps+number_of_p_exps,2))
#exps[:, 0] = decaying_nums(5)

# S
exps[0,0] = 20.0
exps[1,0] = 9.5045827955887916e+01
exps[2,0] = 4.4881042475048387e+00 
exps[3,0] = 3.9799528004692630e-01
             
# P          
exps[3,0] = 3.0108199280832128e+01
exps[4,0] = 6.1393781325590453e+00
exps[5,0] = 4.8929328703550412e-01

basis =  str(number_of_s_exps)+"s"+str(number_of_p_exps)+"p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc21115.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 24
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 18 14:58:26 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35677784.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 32000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 32000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 32000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  4.6479607214         1
[INPUT] 0    0    [1    /1   ]  120.288930996        1
[INPUT] 0    0    [1    /1   ]  0.225096800241       1
[INPUT] 0    0    [1    /1   ]  17.8705422837        1
[INPUT] 1    0    [1    /1   ]  8.4050781497         1
[INPUT] 1    0    [1    /1   ]  0.171211492335       1
[INPUT] 1    0    [1    /1   ]  2693.96475836        1

nuclear repulsion = 0
number of shells = 7
number of NR pGTOs = 13
number of NR cGTOs = 13
basis = {'Ar': [[0, [4.647960721401256, 1.0]], [0, [120.28893099556197, 1.0]], [0, [0.22509680024062653, 1.0]], [0, [17.87054228373877, 1.0]], [1, [8.405078149700426, 1.0]], [1, [0.17121149233494495, 1.0]], [1, [2693.964758362651, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [4.64796072]
bas 1, expnt(s) = [120.288931]
bas 2, expnt(s) = [0.2250968]
bas 3, expnt(s) = [17.87054228]
bas 4, expnt(s) = [8.40507815]
bas 5, expnt(s) = [0.17121149]
bas 6, expnt(s) = [2693.96475836]
CPU time:       196.72
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  1  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]
 [ 0  1  1  1  0 36 37  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 4.64796072e+00 7.99764018e+00 1.20288931e+02 9.17665223e+01
 2.25096800e-01 8.25642453e-01 1.78705423e+01 2.19592914e+01
 8.40507815e+00 4.17504910e+01 1.71211492e-01 3.21292460e-01
 2.69396476e+03 5.66205756e+04]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 15.46232866822575
cond(S) = 11.611686487677504
E1 = -603.8058436964402  E_coul = 146.8275166968443
init E= -456.978326999596
    CPU time for initialize scf      0.20 sec, wall time      0.02 sec
  HOMO = -1.42872522683892  LUMO = 41.4010739551852
  mo_energy =
[-1.10846539e+02 -1.47964962e+01 -1.03616409e+01 -1.03616409e+01
 -1.03616409e+01 -2.79588003e+00 -1.42872523e+00 -1.42872523e+00
 -1.42872523e+00  4.14010740e+01  5.79720599e+03  5.79720599e+03
  5.79720599e+03]
E1 = -642.1300948295989  E_coul = 168.79678707810834
cycle= 1 E= -473.333307751491  delta_E= -16.4  |g|= 0.643  |ddm|= 1.57
    CPU time for cycle= 1      0.22 sec, wall time      0.01 sec
diis-norm(errvec)=0.384049
diis-c [-0.14749349  1.        ]
  HOMO = -0.6393706009951  LUMO = 43.3127970718077
  mo_energy =
[-1.09332323e+02 -1.30864997e+01 -8.72230947e+00 -8.72230947e+00
 -8.72230947e+00 -1.76594918e+00 -6.39370601e-01 -6.39370601e-01
 -6.39370601e-01  4.33127971e+01  5.79787398e+03  5.79787398e+03
  5.79787398e+03]
E1 = -642.0095115036571  E_coul = 168.67305022834907
cycle= 2 E= -473.336461275308  delta_E= -0.00315  |g|= 0.0106  |ddm|= 0.0505
    CPU time for cycle= 2      0.13 sec, wall time      0.01 sec
diis-norm(errvec)=0.0065558
diis-c [-3.61482226e-05 -6.85256546e-03  1.00685257e+00]
  HOMO = -0.639507451430407  LUMO = 43.3015930240556
  mo_energy =
[-1.09364236e+02 -1.30913838e+01 -8.73061929e+00 -8.73061929e+00
 -8.73061929e+00 -1.76613039e+00 -6.39507451e-01 -6.39507451e-01
 -6.39507451e-01  4.33015930e+01  5.79780648e+03  5.79780648e+03
  5.79780648e+03]
E1 = -642.0073423975026  E_coul = 168.6708800911909
cycle= 3 E= -473.336462306312  delta_E= -1.03e-06  |g|= 0.00021  |ddm|= 0.000912
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.00018609
diis-c [-4.57586805e-09  2.52236743e-04 -2.97694613e-02  1.02951722e+00]
  HOMO = -0.639508309099782  LUMO = 43.3014779350681
  mo_energy =
[-1.09364573e+02 -1.30914328e+01 -8.73071532e+00 -8.73071532e+00
 -8.73071532e+00 -1.76613128e+00 -6.39508309e-01 -6.39508309e-01
 -6.39508309e-01  4.33014779e+01  5.79780598e+03  5.79780598e+03
  5.79780598e+03]
E1 = -642.0073107893845  E_coul = 168.67084848272984
cycle= 4 E= -473.336462306655  delta_E= -3.43e-10  |g|= 6.41e-07  |ddm|= 1.44e-05
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
E1 = -642.0073107893845  E_coul = 168.67084848272984
  HOMO = -0.639508305833055  LUMO = 43.3014781123942
  mo_energy =
[-1.09364572e+02 -1.30914327e+01 -8.73071527e+00 -8.73071527e+00
 -8.73071527e+00 -1.76613127e+00 -6.39508306e-01 -6.39508306e-01
 -6.39508306e-01  4.33014781e+01  5.79780598e+03  5.79780598e+03
  5.79780598e+03]
E1 = -642.0073107799615  E_coul = 168.67084847330665
Extra cycle  E= -473.336462306655  delta_E= -1.71e-13  |g|= 1.43e-08  |ddm|= 1.57e-08
    CPU time for scf_cycle      0.58 sec, wall time      0.08 sec
exp = [4.64796072e+00 1.20288931e+02 2.25096800e-01 1.78705423e+01
 8.40507815e+00 1.71211492e-01 2.69396476e+03]
E = -473.3364623066548
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
number_of_s_exps = 4
number_of_p_exps = 3

exps = np.zeros((number_of_s_exps+number_of_p_exps,2))
#exps[:, 0] = decaying_nums(5)

# S
exps[0,0] = 20.0
exps[1,0] = 9.5045827955887916e+01
exps[2,0] = 4.4881042475048387e+00 
exps[3,0] = 3.9799528004692630e-01
             
# P          
exps[3,0] = 3.0108199280832128e+01
exps[4,0] = 6.1393781325590453e+00
exps[5,0] = 4.8929328703550412e-01

basis =  str(number_of_s_exps)+"s"+str(number_of_p_exps)+"p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc21115.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 24
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 18 14:58:26 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35677784.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 32000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 32000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 32000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  4.6479607214         1
[INPUT] 0    0    [1    /1   ]  120.288930996        1
[INPUT] 0    0    [1    /1   ]  0.225096800241       1
[INPUT] 0    0    [1    /1   ]  17.8705422837        1
[INPUT] 1    0    [1    /1   ]  8.4050781497         1
[INPUT] 1    0    [1    /1   ]  0.171211492335       1
[INPUT] 1    0    [1    /1   ]  2693.96475836        1

nuclear repulsion = 0
number of shells = 7
number of NR pGTOs = 13
number of NR cGTOs = 13
basis = {'Ar': [[0, [4.647960721401256, 1.0]], [0, [120.28893099556197, 1.0]], [0, [0.22509680024062653, 1.0]], [0, [17.87054228373877, 1.0]], [1, [8.405078149700426, 1.0]], [1, [0.17121149233494495, 1.0]], [1, [2693.964758362651, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [4.64796072]
bas 1, expnt(s) = [120.288931]
bas 2, expnt(s) = [0.2250968]
bas 3, expnt(s) = [17.87054228]
bas 4, expnt(s) = [8.40507815]
bas 5, expnt(s) = [0.17121149]
bas 6, expnt(s) = [2693.96475836]
CPU time:       197.38
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  1  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]
 [ 0  1  1  1  0 36 37  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 4.64796072e+00 7.99764018e+00 1.20288931e+02 9.17665223e+01
 2.25096800e-01 8.25642453e-01 1.78705423e+01 2.19592914e+01
 8.40507815e+00 4.17504910e+01 1.71211492e-01 3.21292460e-01
 2.69396476e+03 5.66205756e+04]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 15.46232866822575
cond(S) = 11.611686487677504
E1 = -603.8058436964402  E_coul = 146.8275166968443
init E= -456.978326999596
    CPU time for initialize scf      0.19 sec, wall time      0.02 sec
  HOMO = -1.42872522683892  LUMO = 41.4010739551852
  mo_energy =
[-1.10846539e+02 -1.47964962e+01 -1.03616409e+01 -1.03616409e+01
 -1.03616409e+01 -2.79588003e+00 -1.42872523e+00 -1.42872523e+00
 -1.42872523e+00  4.14010740e+01  5.79720599e+03  5.79720599e+03
  5.79720599e+03]
E1 = -642.1300948295989  E_coul = 168.79678707810834
cycle= 1 E= -473.333307751491  delta_E= -16.4  |g|= 0.643  |ddm|= 1.57
    CPU time for cycle= 1      0.22 sec, wall time      0.01 sec
diis-norm(errvec)=0.384049
diis-c [-0.14749349  1.        ]
  HOMO = -0.6393706009951  LUMO = 43.3127970718077
  mo_energy =
[-1.09332323e+02 -1.30864997e+01 -8.72230947e+00 -8.72230947e+00
 -8.72230947e+00 -1.76594918e+00 -6.39370601e-01 -6.39370601e-01
 -6.39370601e-01  4.33127971e+01  5.79787398e+03  5.79787398e+03
  5.79787398e+03]
E1 = -642.0095115036571  E_coul = 168.67305022834907
cycle= 2 E= -473.336461275308  delta_E= -0.00315  |g|= 0.0106  |ddm|= 0.0505
    CPU time for cycle= 2      0.14 sec, wall time      0.01 sec
diis-norm(errvec)=0.0065558
diis-c [-3.61482226e-05 -6.85256546e-03  1.00685257e+00]
  HOMO = -0.639507451430407  LUMO = 43.3015930240556
  mo_energy =
[-1.09364236e+02 -1.30913838e+01 -8.73061929e+00 -8.73061929e+00
 -8.73061929e+00 -1.76613039e+00 -6.39507451e-01 -6.39507451e-01
 -6.39507451e-01  4.33015930e+01  5.79780648e+03  5.79780648e+03
  5.79780648e+03]
E1 = -642.0073423975026  E_coul = 168.6708800911909
cycle= 3 E= -473.336462306312  delta_E= -1.03e-06  |g|= 0.00021  |ddm|= 0.000912
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.00018609
diis-c [-4.57586805e-09  2.52236743e-04 -2.97694613e-02  1.02951722e+00]
  HOMO = -0.639508309099782  LUMO = 43.3014779350681
  mo_energy =
[-1.09364573e+02 -1.30914328e+01 -8.73071532e+00 -8.73071532e+00
 -8.73071532e+00 -1.76613128e+00 -6.39508309e-01 -6.39508309e-01
 -6.39508309e-01  4.33014779e+01  5.79780598e+03  5.79780598e+03
  5.79780598e+03]
E1 = -642.0073107893845  E_coul = 168.67084848272984
cycle= 4 E= -473.336462306655  delta_E= -3.43e-10  |g|= 6.41e-07  |ddm|= 1.44e-05
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
E1 = -642.0073107893845  E_coul = 168.67084848272984
  HOMO = -0.639508305833055  LUMO = 43.3014781123942
  mo_energy =
[-1.09364572e+02 -1.30914327e+01 -8.73071527e+00 -8.73071527e+00
 -8.73071527e+00 -1.76613127e+00 -6.39508306e-01 -6.39508306e-01
 -6.39508306e-01  4.33014781e+01  5.79780598e+03  5.79780598e+03
  5.79780598e+03]
E1 = -642.0073107799615  E_coul = 168.67084847330665
Extra cycle  E= -473.336462306655  delta_E= -1.71e-13  |g|= 1.43e-08  |ddm|= 1.57e-08
    CPU time for scf_cycle      0.58 sec, wall time      0.08 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 11.611686487677504
E1 = -642.0073107799615  E_coul = 168.67084847330665
init E= -473.336462306655
    CPU time for initialize scf      1.17 sec, wall time      0.05 sec
  HOMO = -0.639508305801171  LUMO = 43.3014781125465
  mo_energy =
[-1.09364572e+02 -1.30914327e+01 -8.73071528e+00 -8.73071528e+00
 -8.73071528e+00 -1.76613127e+00 -6.39508306e-01 -6.39508306e-01
 -6.39508306e-01  4.33014781e+01  5.79780598e+03  5.79780598e+03
  5.79780598e+03]
E1 = -642.0073107790557  E_coul = 168.67084847240142
cycle= 1 E= -473.336462306654  delta_E= 5.12e-13  |g|= 3.66e-10  |ddm|= 5.4e-10
    CPU time for cycle= 1      0.22 sec, wall time      0.01 sec
E1 = -642.0073107790557  E_coul = 168.67084847240142
  HOMO = -0.639508305800443  LUMO = 43.3014781124875
  mo_energy =
[-1.09364572e+02 -1.30914327e+01 -8.73071528e+00 -8.73071528e+00
 -8.73071528e+00 -1.76613127e+00 -6.39508306e-01 -6.39508306e-01
 -6.39508306e-01  4.33014781e+01  5.79780598e+03  5.79780598e+03
  5.79780598e+03]
E1 = -642.0073107790226  E_coul = 168.67084847236816
Extra cycle  E= -473.336462306654  delta_E= -1.71e-13  |g|= 1.03e-11  |ddm|= 1.73e-11
    CPU time for scf_cycle      1.46 sec, wall time      0.11 sec
exp = [4.64796072e+00 1.20288931e+02 2.25096800e-01 1.78705423e+01
 8.40507815e+00 1.71211492e-01 2.69396476e+03]
grad_E = [-1.67637295e-01 -1.73558198e-01 -6.07151269e+00 -3.66900642e-01
 -1.17239421e-02 -2.09406229e+01  5.85878582e-06]
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
number_of_s_exps = 4
number_of_p_exps = 3

exps = np.zeros((number_of_s_exps+number_of_p_exps,2))
#exps[:, 0] = decaying_nums(5)

# S
exps[0,0] = 20.0
exps[1,0] = 9.5045827955887916e+01
exps[2,0] = 4.4881042475048387e+00 
exps[3,0] = 3.9799528004692630e-01
             
# P          
exps[3,0] = 3.0108199280832128e+01
exps[4,0] = 6.1393781325590453e+00
exps[5,0] = 4.8929328703550412e-01

basis =  str(number_of_s_exps)+"s"+str(number_of_p_exps)+"p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc21115.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 24
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 18 14:58:29 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35677784.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 32000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 32000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 32000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  5.10864347458        1
[INPUT] 0    0    [1    /1   ]  127.682716508        1
[INPUT] 0    0    [1    /1   ]  0.23553389312        1
[INPUT] 0    0    [1    /1   ]  16.892596033         1
[INPUT] 1    0    [1    /1   ]  8.33035196523        1
[INPUT] 1    0    [1    /1   ]  0.168152752926       1
[INPUT] 1    0    [1    /1   ]  2693.96475856        1

nuclear repulsion = 0
number of shells = 7
number of NR pGTOs = 13
number of NR cGTOs = 13
basis = {'Ar': [[0, [5.108643474579464, 1.0]], [0, [127.68271650816455, 1.0]], [0, [0.23553389311958775, 1.0]], [0, [16.89259603298565, 1.0]], [1, [8.330351965225674, 1.0]], [1, [0.16815275292642315, 1.0]], [1, [2693.964758555722, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [5.10864347]
bas 1, expnt(s) = [127.68271651]
bas 2, expnt(s) = [0.23553389]
bas 3, expnt(s) = [16.89259603]
bas 4, expnt(s) = [8.33035197]
bas 5, expnt(s) = [0.16815275]
bas 6, expnt(s) = [2693.96475856]
CPU time:       202.03
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  1  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]
 [ 0  1  1  1  0 36 37  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 5.10864347e+00 8.58507751e+00 1.27682717e+02 9.59652745e+01
 2.35533893e-01 8.54191179e-01 1.68925960e+01 2.10517072e+01
 8.33035197e+00 4.12870242e+01 1.68152753e-01 3.14133584e-01
 2.69396476e+03 5.66205756e+04]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 15.430100303016063
cond(S) = 13.413166999662389
E1 = -604.4235616270875  E_coul = 146.62161516728412
init E= -457.801946459803
    CPU time for initialize scf      7.26 sec, wall time      0.33 sec
  HOMO = -1.42096100715586  LUMO = 42.3824290718532
  mo_energy =
[-1.11212934e+02 -1.47846267e+01 -1.03780150e+01 -1.03780150e+01
 -1.03780150e+01 -2.87229392e+00 -1.42096101e+00 -1.42096101e+00
 -1.42096101e+00  4.23824291e+01  5.79760451e+03  5.79760451e+03
  5.79760451e+03]
E1 = -643.0621207163022  E_coul = 169.05588189263383
cycle= 1 E= -474.006238823668  delta_E= -16.2  |g|= 0.621  |ddm|= 1.58
    CPU time for cycle= 1      0.22 sec, wall time      0.01 sec
diis-norm(errvec)=0.370358
diis-c [-0.13716503  1.        ]
  HOMO = -0.630003134988719  LUMO = 44.3182546024761
  mo_energy =
[-1.09625226e+02 -1.30448622e+01 -8.70142079e+00 -8.70142079e+00
 -8.70142079e+00 -1.81217696e+00 -6.30003135e-01 -6.30003135e-01
 -6.30003135e-01  4.43182546e+01  5.79831576e+03  5.79831576e+03
  5.79831576e+03]
E1 = -642.9497341342468  E_coul = 168.94073766370806
cycle= 2 E= -474.008996470539  delta_E= -0.00276  |g|= 0.00929  |ddm|= 0.053
    CPU time for cycle= 2      0.11 sec, wall time      0.01 sec
diis-norm(errvec)=0.00559257
diis-c [-2.93602040e-05 -3.75250884e-03  1.00375251e+00]
  HOMO = -0.630123944634482  LUMO = 44.3075766599359
  mo_energy =
[-1.09655290e+02 -1.30494867e+01 -8.70894651e+00 -8.70894651e+00
 -8.70894651e+00 -1.81235756e+00 -6.30123945e-01 -6.30123945e-01
 -6.30123945e-01  4.43075767e+01  5.79824969e+03  5.79824969e+03
  5.79824969e+03]
E1 = -642.9478529652956  E_coul = 168.93885570910308
cycle= 3 E= -474.008997256193  delta_E= -7.86e-07  |g|= 0.000211  |ddm|= 0.000908
    CPU time for cycle= 3      0.02 sec, wall time      0.01 sec
diis-norm(errvec)=0.000184488
diis-c [-4.16566581e-09  2.35474086e-04 -3.21996855e-02  1.03196421e+00]
  HOMO = -0.630125025391516  LUMO = 44.3074485278003
  mo_energy =
[-1.09655663e+02 -1.30495429e+01 -8.70904927e+00 -8.70904927e+00
 -8.70904927e+00 -1.81235887e+00 -6.30125025e-01 -6.30125025e-01
 -6.30125025e-01  4.43074485e+01  5.79824908e+03  5.79824908e+03
  5.79824908e+03]
E1 = -642.9478208132975  E_coul = 168.93882355676206
cycle= 4 E= -474.008997256536  delta_E= -3.43e-10  |g|= 5.87e-07  |ddm|= 1.67e-05
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
E1 = -642.9478208132975  E_coul = 168.93882355676206
  HOMO = -0.630125022307489  LUMO = 44.3074486683301
  mo_energy =
[-1.09655662e+02 -1.30495429e+01 -8.70904924e+00 -8.70904924e+00
 -8.70904924e+00 -1.81235886e+00 -6.30125022e-01 -6.30125022e-01
 -6.30125022e-01  4.43074487e+01  5.79824908e+03  5.79824908e+03
  5.79824908e+03]
E1 = -642.9478207954205  E_coul = 168.93882353888495
Extra cycle  E= -474.008997256536  delta_E= -5.68e-14  |g|= 1.39e-08  |ddm|= 1.91e-08
    CPU time for scf_cycle      7.63 sec, wall time      0.39 sec
exp = [5.10864347e+00 1.27682717e+02 2.35533893e-01 1.68925960e+01
 8.33035197e+00 1.68152753e-01 2.69396476e+03]
E = -474.00899725653557
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
number_of_s_exps = 4
number_of_p_exps = 3

exps = np.zeros((number_of_s_exps+number_of_p_exps,2))
#exps[:, 0] = decaying_nums(5)

# S
exps[0,0] = 20.0
exps[1,0] = 9.5045827955887916e+01
exps[2,0] = 4.4881042475048387e+00 
exps[3,0] = 3.9799528004692630e-01
             
# P          
exps[3,0] = 3.0108199280832128e+01
exps[4,0] = 6.1393781325590453e+00
exps[5,0] = 4.8929328703550412e-01

basis =  str(number_of_s_exps)+"s"+str(number_of_p_exps)+"p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc21115.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 24
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 18 14:58:29 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35677784.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 32000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 32000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 32000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  5.10864347458        1
[INPUT] 0    0    [1    /1   ]  127.682716508        1
[INPUT] 0    0    [1    /1   ]  0.23553389312        1
[INPUT] 0    0    [1    /1   ]  16.892596033         1
[INPUT] 1    0    [1    /1   ]  8.33035196523        1
[INPUT] 1    0    [1    /1   ]  0.168152752926       1
[INPUT] 1    0    [1    /1   ]  2693.96475856        1

nuclear repulsion = 0
number of shells = 7
number of NR pGTOs = 13
number of NR cGTOs = 13
basis = {'Ar': [[0, [5.108643474579464, 1.0]], [0, [127.68271650816455, 1.0]], [0, [0.23553389311958775, 1.0]], [0, [16.89259603298565, 1.0]], [1, [8.330351965225674, 1.0]], [1, [0.16815275292642315, 1.0]], [1, [2693.964758555722, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [5.10864347]
bas 1, expnt(s) = [127.68271651]
bas 2, expnt(s) = [0.23553389]
bas 3, expnt(s) = [16.89259603]
bas 4, expnt(s) = [8.33035197]
bas 5, expnt(s) = [0.16815275]
bas 6, expnt(s) = [2693.96475856]
CPU time:       209.76
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  1  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]
 [ 0  1  1  1  0 36 37  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 5.10864347e+00 8.58507751e+00 1.27682717e+02 9.59652745e+01
 2.35533893e-01 8.54191179e-01 1.68925960e+01 2.10517072e+01
 8.33035197e+00 4.12870242e+01 1.68152753e-01 3.14133584e-01
 2.69396476e+03 5.66205756e+04]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 15.430100303016063
cond(S) = 13.413166999662389
E1 = -604.4235616270875  E_coul = 146.62161516728412
init E= -457.801946459803
    CPU time for initialize scf      7.27 sec, wall time      0.33 sec
  HOMO = -1.42096100715586  LUMO = 42.3824290718532
  mo_energy =
[-1.11212934e+02 -1.47846267e+01 -1.03780150e+01 -1.03780150e+01
 -1.03780150e+01 -2.87229392e+00 -1.42096101e+00 -1.42096101e+00
 -1.42096101e+00  4.23824291e+01  5.79760451e+03  5.79760451e+03
  5.79760451e+03]
E1 = -643.0621207163022  E_coul = 169.05588189263383
cycle= 1 E= -474.006238823668  delta_E= -16.2  |g|= 0.621  |ddm|= 1.58
    CPU time for cycle= 1      0.22 sec, wall time      0.01 sec
diis-norm(errvec)=0.370358
diis-c [-0.13716503  1.        ]
  HOMO = -0.630003134988719  LUMO = 44.3182546024761
  mo_energy =
[-1.09625226e+02 -1.30448622e+01 -8.70142079e+00 -8.70142079e+00
 -8.70142079e+00 -1.81217696e+00 -6.30003135e-01 -6.30003135e-01
 -6.30003135e-01  4.43182546e+01  5.79831576e+03  5.79831576e+03
  5.79831576e+03]
E1 = -642.9497341342468  E_coul = 168.94073766370806
cycle= 2 E= -474.008996470539  delta_E= -0.00276  |g|= 0.00929  |ddm|= 0.053
    CPU time for cycle= 2      0.11 sec, wall time      0.01 sec
diis-norm(errvec)=0.00559257
diis-c [-2.93602040e-05 -3.75250884e-03  1.00375251e+00]
  HOMO = -0.630123944634482  LUMO = 44.3075766599359
  mo_energy =
[-1.09655290e+02 -1.30494867e+01 -8.70894651e+00 -8.70894651e+00
 -8.70894651e+00 -1.81235756e+00 -6.30123945e-01 -6.30123945e-01
 -6.30123945e-01  4.43075767e+01  5.79824969e+03  5.79824969e+03
  5.79824969e+03]
E1 = -642.9478529652956  E_coul = 168.93885570910308
cycle= 3 E= -474.008997256193  delta_E= -7.86e-07  |g|= 0.000211  |ddm|= 0.000908
    CPU time for cycle= 3      0.02 sec, wall time      0.01 sec
diis-norm(errvec)=0.000184488
diis-c [-4.16566581e-09  2.35474086e-04 -3.21996855e-02  1.03196421e+00]
  HOMO = -0.630125025391516  LUMO = 44.3074485278003
  mo_energy =
[-1.09655663e+02 -1.30495429e+01 -8.70904927e+00 -8.70904927e+00
 -8.70904927e+00 -1.81235887e+00 -6.30125025e-01 -6.30125025e-01
 -6.30125025e-01  4.43074485e+01  5.79824908e+03  5.79824908e+03
  5.79824908e+03]
E1 = -642.9478208132975  E_coul = 168.93882355676206
cycle= 4 E= -474.008997256536  delta_E= -3.43e-10  |g|= 5.87e-07  |ddm|= 1.67e-05
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
E1 = -642.9478208132975  E_coul = 168.93882355676206
  HOMO = -0.630125022307489  LUMO = 44.3074486683301
  mo_energy =
[-1.09655662e+02 -1.30495429e+01 -8.70904924e+00 -8.70904924e+00
 -8.70904924e+00 -1.81235886e+00 -6.30125022e-01 -6.30125022e-01
 -6.30125022e-01  4.43074487e+01  5.79824908e+03  5.79824908e+03
  5.79824908e+03]
E1 = -642.9478207954205  E_coul = 168.93882353888495
Extra cycle  E= -474.008997256536  delta_E= -5.68e-14  |g|= 1.39e-08  |ddm|= 1.91e-08
    CPU time for scf_cycle      7.64 sec, wall time      0.39 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 13.413166999662389
E1 = -642.9478207954205  E_coul = 168.93882353888495
init E= -474.008997256536
    CPU time for initialize scf     11.15 sec, wall time      0.49 sec
  HOMO = -0.630125022279294  LUMO = 44.3074486676246
  mo_energy =
[-1.09655662e+02 -1.30495429e+01 -8.70904924e+00 -8.70904924e+00
 -8.70904924e+00 -1.81235886e+00 -6.30125022e-01 -6.30125022e-01
 -6.30125022e-01  4.43074487e+01  5.79824908e+03  5.79824908e+03
  5.79824908e+03]
E1 = -642.947820794359  E_coul = 168.93882353782368
cycle= 1 E= -474.008997256535  delta_E= 2.27e-13  |g|= 3.71e-10  |ddm|= 6.73e-10
    CPU time for cycle= 1      0.22 sec, wall time      0.01 sec
E1 = -642.947820794359  E_coul = 168.93882353782368
  HOMO = -0.630125022279383  LUMO = 44.3074486675497
  mo_energy =
[-1.09655662e+02 -1.30495429e+01 -8.70904924e+00 -8.70904924e+00
 -8.70904924e+00 -1.81235886e+00 -6.30125022e-01 -6.30125022e-01
 -6.30125022e-01  4.43074487e+01  5.79824908e+03  5.79824908e+03
  5.79824908e+03]
E1 = -642.9478207943228  E_coul = 168.93882353778727
Extra cycle  E= -474.008997256536  delta_E= -1.71e-13  |g|= 1.09e-11  |ddm|= 2.11e-11
    CPU time for scf_cycle     11.42 sec, wall time      0.55 sec
exp = [5.10864347e+00 1.27682717e+02 2.35533893e-01 1.68925960e+01
 8.33035197e+00 1.68152753e-01 2.69396476e+03]
grad_E = [-1.14834498e-01 -1.11232758e-01 -5.88447165e+00 -5.24676220e-01
 -6.31196086e-02 -2.10571945e+01  5.73302656e-06]
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
number_of_s_exps = 4
number_of_p_exps = 3

exps = np.zeros((number_of_s_exps+number_of_p_exps,2))
#exps[:, 0] = decaying_nums(5)

# S
exps[0,0] = 20.0
exps[1,0] = 9.5045827955887916e+01
exps[2,0] = 4.4881042475048387e+00 
exps[3,0] = 3.9799528004692630e-01
             
# P          
exps[3,0] = 3.0108199280832128e+01
exps[4,0] = 6.1393781325590453e+00
exps[5,0] = 4.8929328703550412e-01

basis =  str(number_of_s_exps)+"s"+str(number_of_p_exps)+"p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc21115.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 24
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 18 14:58:33 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35677784.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 32000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 32000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 32000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  5.70863426969        1
[INPUT] 0    0    [1    /1   ]  133.12996289         1
[INPUT] 0    0    [1    /1   ]  0.244672134623       1
[INPUT] 0    0    [1    /1   ]  17.0284288984        1
[INPUT] 1    0    [1    /1   ]  8.27692835022        1
[INPUT] 1    0    [1    /1   ]  0.165469218951       1
[INPUT] 1    0    [1    /1   ]  2693.96475821        1

nuclear repulsion = 0
number of shells = 7
number of NR pGTOs = 13
number of NR cGTOs = 13
basis = {'Ar': [[0, [5.708634269686944, 1.0]], [0, [133.12996288985408, 1.0]], [0, [0.2446721346226985, 1.0]], [0, [17.028428898391653, 1.0]], [1, [8.276928350224829, 1.0]], [1, [0.16546921895080988, 1.0]], [1, [2693.964758207909, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [5.70863427]
bas 1, expnt(s) = [133.12996289]
bas 2, expnt(s) = [0.24467213]
bas 3, expnt(s) = [17.0284289]
bas 4, expnt(s) = [8.27692835]
bas 5, expnt(s) = [0.16546922]
bas 6, expnt(s) = [2693.96475821]
CPU time:       231.46
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  1  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]
 [ 0  1  1  1  0 36 37  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 5.70863427e+00 9.33069921e+00 1.33129963e+02 9.90197630e+01
 2.44672135e-01 8.78928217e-01 1.70284289e+01 2.11785372e+01
 8.27692835e+00 4.09563162e+01 1.65469219e-01 3.07879600e-01
 2.69396476e+03 5.66205756e+04]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 15.39236749963436
cond(S) = 15.474867484843926
E1 = -604.9366377097474  E_coul = 146.37687053401555
init E= -458.559767175732
    CPU time for initialize scf      7.39 sec, wall time      0.34 sec
  HOMO = -1.41780626958101  LUMO = 46.376583346799
  mo_energy =
[-1.11614962e+02 -1.47425948e+01 -1.03897451e+01 -1.03897451e+01
 -1.03897451e+01 -2.94547595e+00 -1.41780627e+00 -1.41780627e+00
 -1.41780627e+00  4.63765833e+01  5.79777770e+03  5.79777770e+03
  5.79777770e+03]
E1 = -644.2480623963795  E_coul = 169.62042990322956
cycle= 1 E= -474.62763249315  delta_E= -16.1  |g|= 0.599  |ddm|= 1.54
    CPU time for cycle= 1      0.22 sec, wall time      0.01 sec
diis-norm(errvec)=0.376121
diis-c [-0.14146694  1.        ]
  HOMO = -0.621816762341709  LUMO = 48.3753710303046
  mo_energy =
[-1.09885450e+02 -1.29527231e+01 -8.64982508e+00 -8.64982508e+00
 -8.64982508e+00 -1.85159484e+00 -6.21816762e-01 -6.21816762e-01
 -6.21816762e-01  4.83753710e+01  5.79864650e+03  5.79864650e+03
  5.79864650e+03]
E1 = -644.1525950960682  E_coul = 169.52274945638246
cycle= 2 E= -474.629845639686  delta_E= -0.00221  |g|= 0.0077  |ddm|= 0.051
    CPU time for cycle= 2      0.11 sec, wall time      0.01 sec
diis-norm(errvec)=0.00405077
diis-c [-1.54230093e-05 -2.64685754e-03  1.00264686e+00]
  HOMO = -0.621911423667  LUMO = 48.3657500158105
  mo_energy =
[-1.09911702e+02 -1.29566716e+01 -8.65593776e+00 -8.65593776e+00
 -8.65593776e+00 -1.85175691e+00 -6.21911424e-01 -6.21911424e-01
 -6.21911424e-01  4.83657500e+01  5.79858506e+03  5.79858506e+03
  5.79858506e+03]
E1 = -644.1511334465456  E_coul = 169.52128731268385
cycle= 3 E= -474.629846133862  delta_E= -4.94e-07  |g|= 0.000164  |ddm|= 0.000806
    CPU time for cycle= 3      0.02 sec, wall time      0.01 sec
diis-norm(errvec)=0.000136441
diis-c [-3.41234116e-09  2.17233242e-04 -2.96793131e-02  1.02946208e+00]
  HOMO = -0.621912293033181  LUMO = 48.3656380098156
  mo_energy =
[-1.09912018e+02 -1.29567189e+01 -8.65601932e+00 -8.65601932e+00
 -8.65601932e+00 -1.85175812e+00 -6.21912293e-01 -6.21912293e-01
 -6.21912293e-01  4.83656380e+01  5.79858449e+03  5.79858449e+03
  5.79858449e+03]
E1 = -644.1511090587994  E_coul = 169.52126292473443
cycle= 4 E= -474.629846134065  delta_E= -2.03e-10  |g|= 8.38e-07  |ddm|= 1.46e-05
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -644.1511090587994  E_coul = 169.52126292473443
  HOMO = -0.621912293560631  LUMO = 48.3656378361518
  mo_energy =
[-1.09912019e+02 -1.29567190e+01 -8.65601952e+00 -8.65601952e+00
 -8.65601952e+00 -1.85175812e+00 -6.21912294e-01 -6.21912294e-01
 -6.21912294e-01  4.83656378e+01  5.79858449e+03  5.79858449e+03
  5.79858449e+03]
E1 = -644.1511089814841  E_coul = 169.52126284741925
Extra cycle  E= -474.629846134065  delta_E= 2.27e-13  |g|= 2.3e-08  |ddm|= 5.2e-08
    CPU time for scf_cycle      7.76 sec, wall time      0.40 sec
exp = [5.70863427e+00 1.33129963e+02 2.44672135e-01 1.70284289e+01
 8.27692835e+00 1.65469219e-01 2.69396476e+03]
E = -474.6298461340648
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
number_of_s_exps = 4
number_of_p_exps = 3

exps = np.zeros((number_of_s_exps+number_of_p_exps,2))
#exps[:, 0] = decaying_nums(5)

# S
exps[0,0] = 20.0
exps[1,0] = 9.5045827955887916e+01
exps[2,0] = 4.4881042475048387e+00 
exps[3,0] = 3.9799528004692630e-01
             
# P          
exps[3,0] = 3.0108199280832128e+01
exps[4,0] = 6.1393781325590453e+00
exps[5,0] = 4.8929328703550412e-01

basis =  str(number_of_s_exps)+"s"+str(number_of_p_exps)+"p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc21115.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 24
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 18 14:58:33 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35677784.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 32000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 32000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 32000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  5.70863426969        1
[INPUT] 0    0    [1    /1   ]  133.12996289         1
[INPUT] 0    0    [1    /1   ]  0.244672134623       1
[INPUT] 0    0    [1    /1   ]  17.0284288984        1
[INPUT] 1    0    [1    /1   ]  8.27692835022        1
[INPUT] 1    0    [1    /1   ]  0.165469218951       1
[INPUT] 1    0    [1    /1   ]  2693.96475821        1

nuclear repulsion = 0
number of shells = 7
number of NR pGTOs = 13
number of NR cGTOs = 13
basis = {'Ar': [[0, [5.708634269686944, 1.0]], [0, [133.12996288985408, 1.0]], [0, [0.2446721346226985, 1.0]], [0, [17.028428898391653, 1.0]], [1, [8.276928350224829, 1.0]], [1, [0.16546921895080988, 1.0]], [1, [2693.964758207909, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [5.70863427]
bas 1, expnt(s) = [133.12996289]
bas 2, expnt(s) = [0.24467213]
bas 3, expnt(s) = [17.0284289]
bas 4, expnt(s) = [8.27692835]
bas 5, expnt(s) = [0.16546922]
bas 6, expnt(s) = [2693.96475821]
CPU time:       239.35
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  1  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]
 [ 0  1  1  1  0 36 37  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 5.70863427e+00 9.33069921e+00 1.33129963e+02 9.90197630e+01
 2.44672135e-01 8.78928217e-01 1.70284289e+01 2.11785372e+01
 8.27692835e+00 4.09563162e+01 1.65469219e-01 3.07879600e-01
 2.69396476e+03 5.66205756e+04]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 15.39236749963436
cond(S) = 15.474867484843926
E1 = -604.9366377097474  E_coul = 146.37687053401555
init E= -458.559767175732
    CPU time for initialize scf      7.27 sec, wall time      0.33 sec
  HOMO = -1.41780626958101  LUMO = 46.376583346799
  mo_energy =
[-1.11614962e+02 -1.47425948e+01 -1.03897451e+01 -1.03897451e+01
 -1.03897451e+01 -2.94547595e+00 -1.41780627e+00 -1.41780627e+00
 -1.41780627e+00  4.63765833e+01  5.79777770e+03  5.79777770e+03
  5.79777770e+03]
E1 = -644.2480623963795  E_coul = 169.62042990322956
cycle= 1 E= -474.62763249315  delta_E= -16.1  |g|= 0.599  |ddm|= 1.54
    CPU time for cycle= 1      0.21 sec, wall time      0.01 sec
diis-norm(errvec)=0.376121
diis-c [-0.14146694  1.        ]
  HOMO = -0.621816762341709  LUMO = 48.3753710303046
  mo_energy =
[-1.09885450e+02 -1.29527231e+01 -8.64982508e+00 -8.64982508e+00
 -8.64982508e+00 -1.85159484e+00 -6.21816762e-01 -6.21816762e-01
 -6.21816762e-01  4.83753710e+01  5.79864650e+03  5.79864650e+03
  5.79864650e+03]
E1 = -644.1525950960682  E_coul = 169.52274945638246
cycle= 2 E= -474.629845639686  delta_E= -0.00221  |g|= 0.0077  |ddm|= 0.051
    CPU time for cycle= 2      0.12 sec, wall time      0.01 sec
diis-norm(errvec)=0.00405077
diis-c [-1.54230093e-05 -2.64685754e-03  1.00264686e+00]
  HOMO = -0.621911423667  LUMO = 48.3657500158105
  mo_energy =
[-1.09911702e+02 -1.29566716e+01 -8.65593776e+00 -8.65593776e+00
 -8.65593776e+00 -1.85175691e+00 -6.21911424e-01 -6.21911424e-01
 -6.21911424e-01  4.83657500e+01  5.79858506e+03  5.79858506e+03
  5.79858506e+03]
E1 = -644.1511334465456  E_coul = 169.52128731268385
cycle= 3 E= -474.629846133862  delta_E= -4.94e-07  |g|= 0.000164  |ddm|= 0.000806
    CPU time for cycle= 3      0.02 sec, wall time      0.01 sec
diis-norm(errvec)=0.000136441
diis-c [-3.41234116e-09  2.17233242e-04 -2.96793131e-02  1.02946208e+00]
  HOMO = -0.621912293033181  LUMO = 48.3656380098156
  mo_energy =
[-1.09912018e+02 -1.29567189e+01 -8.65601932e+00 -8.65601932e+00
 -8.65601932e+00 -1.85175812e+00 -6.21912293e-01 -6.21912293e-01
 -6.21912293e-01  4.83656380e+01  5.79858449e+03  5.79858449e+03
  5.79858449e+03]
E1 = -644.1511090587994  E_coul = 169.52126292473443
cycle= 4 E= -474.629846134065  delta_E= -2.03e-10  |g|= 8.38e-07  |ddm|= 1.46e-05
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
E1 = -644.1511090587994  E_coul = 169.52126292473443
  HOMO = -0.621912293560631  LUMO = 48.3656378361518
  mo_energy =
[-1.09912019e+02 -1.29567190e+01 -8.65601952e+00 -8.65601952e+00
 -8.65601952e+00 -1.85175812e+00 -6.21912294e-01 -6.21912294e-01
 -6.21912294e-01  4.83656378e+01  5.79858449e+03  5.79858449e+03
  5.79858449e+03]
E1 = -644.1511089814841  E_coul = 169.52126284741925
Extra cycle  E= -474.629846134065  delta_E= 2.27e-13  |g|= 2.3e-08  |ddm|= 5.2e-08
    CPU time for scf_cycle      7.65 sec, wall time      0.38 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 15.474867484843926
E1 = -644.1511089814841  E_coul = 169.52126284741925
init E= -474.629846134065
    CPU time for initialize scf     11.43 sec, wall time      0.50 sec
  HOMO = -0.62191229358078  LUMO = 48.3656378302846
  mo_energy =
[-1.09912019e+02 -1.29567190e+01 -8.65601952e+00 -8.65601952e+00
 -8.65601952e+00 -1.85175812e+00 -6.21912294e-01 -6.21912294e-01
 -6.21912294e-01  4.83656378e+01  5.79858449e+03  5.79858449e+03
  5.79858449e+03]
E1 = -644.1511089792093  E_coul = 169.52126284514452
cycle= 1 E= -474.629846134065  delta_E=    0  |g|= 6.39e-10  |ddm|= 1.5e-09
    CPU time for cycle= 1      0.22 sec, wall time      0.01 sec
E1 = -644.1511089792093  E_coul = 169.52126284514452
  HOMO = -0.621912293580525  LUMO = 48.3656378301082
  mo_energy =
[-1.09912019e+02 -1.29567190e+01 -8.65601952e+00 -8.65601952e+00
 -8.65601952e+00 -1.85175812e+00 -6.21912294e-01 -6.21912294e-01
 -6.21912294e-01  4.83656378e+01  5.79858449e+03  5.79858449e+03
  5.79858449e+03]
E1 = -644.1511089791446  E_coul = 169.5212628450798
Extra cycle  E= -474.629846134065  delta_E=    0  |g|= 1.81e-11  |ddm|= 4.24e-11
    CPU time for scf_cycle     11.72 sec, wall time      0.56 sec
exp = [5.70863427e+00 1.33129963e+02 2.44672135e-01 1.70284289e+01
 8.27692835e+00 1.65469219e-01 2.69396476e+03]
grad_E = [ 5.23143339e-02 -8.71572049e-02 -5.79789687e+00 -5.53926968e-01
 -8.83224513e-02 -2.11546175e+01  5.64299030e-06]
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
number_of_s_exps = 4
number_of_p_exps = 3

exps = np.zeros((number_of_s_exps+number_of_p_exps,2))
#exps[:, 0] = decaying_nums(5)

# S
exps[0,0] = 20.0
exps[1,0] = 9.5045827955887916e+01
exps[2,0] = 4.4881042475048387e+00 
exps[3,0] = 3.9799528004692630e-01
             
# P          
exps[3,0] = 3.0108199280832128e+01
exps[4,0] = 6.1393781325590453e+00
exps[5,0] = 4.8929328703550412e-01

basis =  str(number_of_s_exps)+"s"+str(number_of_p_exps)+"p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc21115.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 24
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 18 14:58:37 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35677784.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 32000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 32000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 32000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  7.16826029166        1
[INPUT] 0    0    [1    /1   ]  146.127624097        1
[INPUT] 0    0    [1    /1   ]  0.256426090002       1
[INPUT] 0    0    [1    /1   ]  18.7157650943        1
[INPUT] 1    0    [1    /1   ]  8.22847043801        1
[INPUT] 1    0    [1    /1   ]  0.162067677099       1
[INPUT] 1    0    [1    /1   ]  2693.96475688        1

nuclear repulsion = 0
number of shells = 7
number of NR pGTOs = 13
number of NR cGTOs = 13
basis = {'Ar': [[0, [7.168260291660211, 1.0]], [0, [146.12762409655414, 1.0]], [0, [0.2564260900018875, 1.0]], [0, [18.715765094278787, 1.0]], [1, [8.22847043801129, 1.0]], [1, [0.16206767709932648, 1.0]], [1, [2693.9647568771334, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [7.16826029]
bas 1, expnt(s) = [146.1276241]
bas 2, expnt(s) = [0.25642609]
bas 3, expnt(s) = [18.71576509]
bas 4, expnt(s) = [8.22847044]
bas 5, expnt(s) = [0.16206768]
bas 6, expnt(s) = [2693.96475688]
CPU time:       261.47
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  1  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]
 [ 0  1  1  1  0 36 37  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 7.16826029e+00 1.10681580e+01 1.46127624e+02 1.06185268e+02
 2.56426090e-01 9.10409293e-01 1.87157651e+01 2.27337308e+01
 8.22847044e+00 4.06568085e+01 1.62067677e-01 2.99988704e-01
 2.69396476e+03 5.66205756e+04]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 15.31410277083477
cond(S) = 19.507472887851875
E1 = -606.0107773330365  E_coul = 146.06235878749138
init E= -459.948418545545
    CPU time for initialize scf      0.19 sec, wall time      0.02 sec
  HOMO = -1.42567492368864  LUMO = 59.9725402965345
  mo_energy =
[-1.12706506e+02 -1.44344092e+01 -1.04025159e+01 -1.04025159e+01
 -1.04025159e+01 -3.04881706e+00 -1.42567492e+00 -1.42567492e+00
 -1.42567492e+00  5.99725403e+01  5.79811531e+03  5.79811531e+03
  5.79811531e+03]
E1 = -647.4318534558436  E_coul = 171.34880281582912
cycle= 1 E= -476.083050640014  delta_E= -16.1  |g|= 0.562  |ddm|= 1.39
    CPU time for cycle= 1      0.22 sec, wall time      0.01 sec
diis-norm(errvec)=0.441333
diis-c [-0.19477453  1.        ]
  HOMO = -0.61100196786738  LUMO = 62.1667537947954
  mo_energy =
[-1.10621083e+02 -1.25256698e+01 -8.50129765e+00 -8.50129765e+00
 -8.50129765e+00 -1.88411561e+00 -6.11001968e-01 -6.11001968e-01
 -6.11001968e-01  6.21667538e+01  5.79939589e+03  5.79939589e+03
  5.79939589e+03]
E1 = -647.3731498228055  E_coul = 171.288800031375
cycle= 2 E= -476.084349791431  delta_E= -0.0013  |g|= 0.00523  |ddm|= 0.0384
    CPU time for cycle= 2      0.13 sec, wall time      0.01 sec
diis-norm(errvec)=0.00337124
diis-c [-3.89229938e-06 -6.23279859e-03  1.00623280e+00]
  HOMO = -0.611052837359128  LUMO = 62.1594701093453
  mo_energy =
[-1.10638733e+02 -1.25281042e+01 -8.50457538e+00 -8.50457538e+00
 -8.50457538e+00 -1.88424003e+00 -6.11052837e-01 -6.11052837e-01
 -6.11052837e-01  6.21594701e+01  5.79934626e+03  5.79934626e+03
  5.79934626e+03]
E1 = -647.372487930198  E_coul = 171.28813800803314
cycle= 3 E= -476.084349922165  delta_E= -1.31e-07  |g|= 3.41e-05  |ddm|= 0.000437
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=2.22829e-05
diis-c [-3.03560473e-10  5.04418031e-05 -3.83580381e-03  1.00378536e+00]
  HOMO = -0.611052982140317  LUMO = 62.1594377483263
  mo_energy =
[-1.10638815e+02 -1.25281149e+01 -8.50459204e+00 -8.50459204e+00
 -8.50459204e+00 -1.88424033e+00 -6.11052982e-01 -6.11052982e-01
 -6.11052982e-01  6.21594377e+01  5.79934607e+03  5.79934607e+03
  5.79934607e+03]
E1 = -647.3724833622286  E_coul = 171.28813344005584
cycle= 4 E= -476.084349922173  delta_E= -7.96e-12  |g|= 7.77e-07  |ddm|= 3.47e-06
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
E1 = -647.3724833622286  E_coul = 171.28813344005584
  HOMO = -0.611052984712592  LUMO = 62.1594372146704
  mo_energy =
[-1.10638817e+02 -1.25281151e+01 -8.50459235e+00 -8.50459235e+00
 -8.50459235e+00 -1.88424033e+00 -6.11052985e-01 -6.11052985e-01
 -6.11052985e-01  6.21594372e+01  5.79934607e+03  5.79934607e+03
  5.79934607e+03]
E1 = -647.3724832715984  E_coul = 171.28813334942606
Extra cycle  E= -476.084349922172  delta_E= 4.55e-13  |g|= 2.06e-08  |ddm|= 7.17e-08
    CPU time for scf_cycle      0.58 sec, wall time      0.07 sec
exp = [7.16826029e+00 1.46127624e+02 2.56426090e-01 1.87157651e+01
 8.22847044e+00 1.62067677e-01 2.69396476e+03]
E = -476.08434992217235
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
number_of_s_exps = 4
number_of_p_exps = 3

exps = np.zeros((number_of_s_exps+number_of_p_exps,2))
#exps[:, 0] = decaying_nums(5)

# S
exps[0,0] = 20.0
exps[1,0] = 9.5045827955887916e+01
exps[2,0] = 4.4881042475048387e+00 
exps[3,0] = 3.9799528004692630e-01
             
# P          
exps[3,0] = 3.0108199280832128e+01
exps[4,0] = 6.1393781325590453e+00
exps[5,0] = 4.8929328703550412e-01

basis =  str(number_of_s_exps)+"s"+str(number_of_p_exps)+"p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc21115.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 24
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 18 14:58:37 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35677784.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 32000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 32000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 32000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  7.16826029166        1
[INPUT] 0    0    [1    /1   ]  146.127624097        1
[INPUT] 0    0    [1    /1   ]  0.256426090002       1
[INPUT] 0    0    [1    /1   ]  18.7157650943        1
[INPUT] 1    0    [1    /1   ]  8.22847043801        1
[INPUT] 1    0    [1    /1   ]  0.162067677099       1
[INPUT] 1    0    [1    /1   ]  2693.96475688        1

nuclear repulsion = 0
number of shells = 7
number of NR pGTOs = 13
number of NR cGTOs = 13
basis = {'Ar': [[0, [7.168260291660211, 1.0]], [0, [146.12762409655414, 1.0]], [0, [0.2564260900018875, 1.0]], [0, [18.715765094278787, 1.0]], [1, [8.22847043801129, 1.0]], [1, [0.16206767709932648, 1.0]], [1, [2693.9647568771334, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [7.16826029]
bas 1, expnt(s) = [146.1276241]
bas 2, expnt(s) = [0.25642609]
bas 3, expnt(s) = [18.71576509]
bas 4, expnt(s) = [8.22847044]
bas 5, expnt(s) = [0.16206768]
bas 6, expnt(s) = [2693.96475688]
CPU time:       262.15
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  1  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]
 [ 0  1  1  1  0 36 37  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 7.16826029e+00 1.10681580e+01 1.46127624e+02 1.06185268e+02
 2.56426090e-01 9.10409293e-01 1.87157651e+01 2.27337308e+01
 8.22847044e+00 4.06568085e+01 1.62067677e-01 2.99988704e-01
 2.69396476e+03 5.66205756e+04]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 15.31410277083477
cond(S) = 19.507472887851875
E1 = -606.0107773330365  E_coul = 146.06235878749138
init E= -459.948418545545
    CPU time for initialize scf      0.20 sec, wall time      0.02 sec
  HOMO = -1.42567492368864  LUMO = 59.9725402965345
  mo_energy =
[-1.12706506e+02 -1.44344092e+01 -1.04025159e+01 -1.04025159e+01
 -1.04025159e+01 -3.04881706e+00 -1.42567492e+00 -1.42567492e+00
 -1.42567492e+00  5.99725403e+01  5.79811531e+03  5.79811531e+03
  5.79811531e+03]
E1 = -647.4318534558436  E_coul = 171.34880281582912
cycle= 1 E= -476.083050640014  delta_E= -16.1  |g|= 0.562  |ddm|= 1.39
    CPU time for cycle= 1      0.22 sec, wall time      0.01 sec
diis-norm(errvec)=0.441333
diis-c [-0.19477453  1.        ]
  HOMO = -0.61100196786738  LUMO = 62.1667537947954
  mo_energy =
[-1.10621083e+02 -1.25256698e+01 -8.50129765e+00 -8.50129765e+00
 -8.50129765e+00 -1.88411561e+00 -6.11001968e-01 -6.11001968e-01
 -6.11001968e-01  6.21667538e+01  5.79939589e+03  5.79939589e+03
  5.79939589e+03]
E1 = -647.3731498228055  E_coul = 171.288800031375
cycle= 2 E= -476.084349791431  delta_E= -0.0013  |g|= 0.00523  |ddm|= 0.0384
    CPU time for cycle= 2      0.13 sec, wall time      0.01 sec
diis-norm(errvec)=0.00337124
diis-c [-3.89229938e-06 -6.23279859e-03  1.00623280e+00]
  HOMO = -0.611052837359128  LUMO = 62.1594701093453
  mo_energy =
[-1.10638733e+02 -1.25281042e+01 -8.50457538e+00 -8.50457538e+00
 -8.50457538e+00 -1.88424003e+00 -6.11052837e-01 -6.11052837e-01
 -6.11052837e-01  6.21594701e+01  5.79934626e+03  5.79934626e+03
  5.79934626e+03]
E1 = -647.372487930198  E_coul = 171.28813800803314
cycle= 3 E= -476.084349922165  delta_E= -1.31e-07  |g|= 3.41e-05  |ddm|= 0.000437
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=2.22829e-05
diis-c [-3.03560473e-10  5.04418031e-05 -3.83580381e-03  1.00378536e+00]
  HOMO = -0.611052982140317  LUMO = 62.1594377483263
  mo_energy =
[-1.10638815e+02 -1.25281149e+01 -8.50459204e+00 -8.50459204e+00
 -8.50459204e+00 -1.88424033e+00 -6.11052982e-01 -6.11052982e-01
 -6.11052982e-01  6.21594377e+01  5.79934607e+03  5.79934607e+03
  5.79934607e+03]
E1 = -647.3724833622286  E_coul = 171.28813344005584
cycle= 4 E= -476.084349922173  delta_E= -7.96e-12  |g|= 7.77e-07  |ddm|= 3.47e-06
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
E1 = -647.3724833622286  E_coul = 171.28813344005584
  HOMO = -0.611052984712592  LUMO = 62.1594372146704
  mo_energy =
[-1.10638817e+02 -1.25281151e+01 -8.50459235e+00 -8.50459235e+00
 -8.50459235e+00 -1.88424033e+00 -6.11052985e-01 -6.11052985e-01
 -6.11052985e-01  6.21594372e+01  5.79934607e+03  5.79934607e+03
  5.79934607e+03]
E1 = -647.3724832715984  E_coul = 171.28813334942606
Extra cycle  E= -476.084349922172  delta_E= 4.55e-13  |g|= 2.06e-08  |ddm|= 7.17e-08
    CPU time for scf_cycle      0.58 sec, wall time      0.08 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 19.507472887851875
E1 = -647.3724832715984  E_coul = 171.28813334942606
init E= -476.084349922172
    CPU time for initialize scf      1.21 sec, wall time      0.05 sec
  HOMO = -0.611052984747688  LUMO = 62.1594372060811
  mo_energy =
[-1.10638817e+02 -1.25281151e+01 -8.50459236e+00 -8.50459236e+00
 -8.50459236e+00 -1.88424033e+00 -6.11052985e-01 -6.11052985e-01
 -6.11052985e-01  6.21594372e+01  5.79934607e+03  5.79934607e+03
  5.79934607e+03]
E1 = -647.372483269643  E_coul = 171.28813334747116
cycle= 1 E= -476.084349922172  delta_E= 5.12e-13  |g|= 5.45e-10  |ddm|= 1.63e-09
    CPU time for cycle= 1      0.22 sec, wall time      0.01 sec
E1 = -647.372483269643  E_coul = 171.28813334747116
  HOMO = -0.611052984747439  LUMO = 62.1594372059099
  mo_energy =
[-1.10638817e+02 -1.25281151e+01 -8.50459236e+00 -8.50459236e+00
 -8.50459236e+00 -1.88424033e+00 -6.11052985e-01 -6.11052985e-01
 -6.11052985e-01  6.21594372e+01  5.79934607e+03  5.79934607e+03
  5.79934607e+03]
E1 = -647.3724832695968  E_coul = 171.28813334742438
Extra cycle  E= -476.084349922172  delta_E= -6.25e-13  |g|= 1.44e-11  |ddm|= 4.02e-11
    CPU time for scf_cycle      1.49 sec, wall time      0.12 sec
exp = [7.16826029e+00 1.46127624e+02 2.56426090e-01 1.87157651e+01
 8.22847044e+00 1.62067677e-01 2.69396476e+03]
grad_E = [ 4.44658832e-01 -6.20327695e-02 -5.95781392e+00 -4.89082029e-01
 -8.12343340e-02 -2.12552488e+01  5.55430216e-06]
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
number_of_s_exps = 4
number_of_p_exps = 3

exps = np.zeros((number_of_s_exps+number_of_p_exps,2))
#exps[:, 0] = decaying_nums(5)

# S
exps[0,0] = 20.0
exps[1,0] = 9.5045827955887916e+01
exps[2,0] = 4.4881042475048387e+00 
exps[3,0] = 3.9799528004692630e-01
             
# P          
exps[3,0] = 3.0108199280832128e+01
exps[4,0] = 6.1393781325590453e+00
exps[5,0] = 4.8929328703550412e-01

basis =  str(number_of_s_exps)+"s"+str(number_of_p_exps)+"p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc21115.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 24
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 18 14:58:40 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35677784.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 32000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 32000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 32000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  8.31803655582        1
[INPUT] 0    0    [1    /1   ]  160.01515845         1
[INPUT] 0    0    [1    /1   ]  0.259419199816       1
[INPUT] 0    0    [1    /1   ]  21.439077115         1
[INPUT] 1    0    [1    /1   ]  8.23756986032        1
[INPUT] 1    0    [1    /1   ]  0.161290140414       1
[INPUT] 1    0    [1    /1   ]  2693.96475543        1

nuclear repulsion = 0
number of shells = 7
number of NR pGTOs = 13
number of NR cGTOs = 13
basis = {'Ar': [[0, [8.318036555816951, 1.0]], [0, [160.01515845010564, 1.0]], [0, [0.2594191998160632, 1.0]], [0, [21.439077114951413, 1.0]], [1, [8.237569860324443, 1.0]], [1, [0.16129014041367326, 1.0]], [1, [2693.9647554300705, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [8.31803656]
bas 1, expnt(s) = [160.01515845]
bas 2, expnt(s) = [0.2594192]
bas 3, expnt(s) = [21.43907711]
bas 4, expnt(s) = [8.23756986]
bas 5, expnt(s) = [0.16129014]
bas 6, expnt(s) = [2693.96475543]
CPU time:       267.27
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  1  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]
 [ 0  1  1  1  0 36 37  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 8.31803656e+00 1.23745850e+01 1.60015158e+02 1.13667385e+02
 2.59419200e-01 9.18367721e-01 2.14390771e+01 2.51721082e+01
 8.23756986e+00 4.07130165e+01 1.61290140e-01 2.98190750e-01
 2.69396476e+03 5.66205755e+04]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 15.258505636949485
cond(S) = 20.265564428100028
E1 = -606.8233874492845  E_coul = 145.98750043231237
init E= -460.835887016972
    CPU time for initialize scf      0.22 sec, wall time      0.03 sec
  HOMO = -1.44280317135789  LUMO = 76.1534546887985
  mo_energy =
[-1.13803581e+02 -1.39654521e+01 -1.04081814e+01 -1.04081814e+01
 -1.04081814e+01 -3.07907373e+00 -1.44280317e+00 -1.44280317e+00
 -1.44280317e+00  7.61534547e+01  5.79844412e+03  5.79844412e+03
  5.79844412e+03]
E1 = -650.4415997715578  E_coul = 173.09248040829738
cycle= 1 E= -477.34911936326  delta_E= -16.5  |g|= 0.549  |ddm|= 1.33
    CPU time for cycle= 1      0.23 sec, wall time      0.01 sec
diis-norm(errvec)=0.518093
diis-c [-0.26842018  1.        ]
  HOMO = -0.607467933680449  LUMO = 78.5550217359393
  mo_energy =
[-1.11405345e+02 -1.19584717e+01 -8.36158457e+00 -8.36158457e+00
 -8.36158457e+00 -1.85779766e+00 -6.07467934e-01 -6.07467934e-01
 -6.07467934e-01  7.85550217e+01  5.80010207e+03  5.80010207e+03
  5.80010207e+03]
E1 = -650.4062435519742  E_coul = 173.05621129778797
cycle= 2 E= -477.350032254186  delta_E= -0.000913  |g|= 0.0055  |ddm|= 0.0232
    CPU time for cycle= 2      0.12 sec, wall time      0.01 sec
diis-norm(errvec)=0.00559954
diis-c [-5.33727105e-06 -9.94321158e-03  1.00994321e+00]
  HOMO = -0.60749712463403  LUMO = 78.5493442796455
  mo_energy =
[-1.11417107e+02 -1.19599286e+01 -8.36322110e+00 -8.36322110e+00
 -8.36322110e+00 -1.85790053e+00 -6.07497125e-01 -6.07497125e-01
 -6.07497125e-01  7.85493443e+01  5.80006186e+03  5.80006186e+03
  5.80006186e+03]
E1 = -650.4059992445807  E_coul = 173.0559669059141
cycle= 3 E= -477.350032338667  delta_E= -8.45e-08  |g|= 2.7e-05  |ddm|= 0.000146
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=2.4973e-05
diis-c [-1.15695393e-10  3.52872518e-07 -4.07112318e-03  1.00407077e+00]
  HOMO = -0.607497017415543  LUMO = 78.5493550350045
  mo_energy =
[-1.11417078e+02 -1.19599233e+01 -8.36321343e+00 -8.36321343e+00
 -8.36321343e+00 -1.85790031e+00 -6.07497017e-01 -6.07497017e-01
 -6.07497017e-01  7.85493550e+01  5.80006190e+03  5.80006190e+03
  5.80006190e+03]
E1 = -650.4060012751903  E_coul = 173.05596893652017
cycle= 4 E= -477.35003233867  delta_E= -3.52e-12  |g|= 4.43e-07  |ddm|= 1.86e-06
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
E1 = -650.4060012751903  E_coul = 173.05596893652017
  HOMO = -0.607497015441559  LUMO = 78.5493553922588
  mo_energy =
[-1.11417077e+02 -1.19599231e+01 -8.36321325e+00 -8.36321325e+00
 -8.36321325e+00 -1.85790030e+00 -6.07497015e-01 -6.07497015e-01
 -6.07497015e-01  7.85493554e+01  5.80006190e+03  5.80006190e+03
  5.80006190e+03]
E1 = -650.4060013195009  E_coul = 173.05596898083067
Extra cycle  E= -477.35003233867  delta_E= -5.68e-14  |g|= 1.05e-08  |ddm|= 3.75e-08
    CPU time for scf_cycle      0.59 sec, wall time      0.08 sec
exp = [8.31803656e+00 1.60015158e+02 2.59419200e-01 2.14390771e+01
 8.23756986e+00 1.61290140e-01 2.69396476e+03]
E = -477.3500323386702
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
number_of_s_exps = 4
number_of_p_exps = 3

exps = np.zeros((number_of_s_exps+number_of_p_exps,2))
#exps[:, 0] = decaying_nums(5)

# S
exps[0,0] = 20.0
exps[1,0] = 9.5045827955887916e+01
exps[2,0] = 4.4881042475048387e+00 
exps[3,0] = 3.9799528004692630e-01
             
# P          
exps[3,0] = 3.0108199280832128e+01
exps[4,0] = 6.1393781325590453e+00
exps[5,0] = 4.8929328703550412e-01

basis =  str(number_of_s_exps)+"s"+str(number_of_p_exps)+"p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc21115.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 24
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 18 14:58:41 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35677784.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 32000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 32000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 32000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  8.31803655582        1
[INPUT] 0    0    [1    /1   ]  160.01515845         1
[INPUT] 0    0    [1    /1   ]  0.259419199816       1
[INPUT] 0    0    [1    /1   ]  21.439077115         1
[INPUT] 1    0    [1    /1   ]  8.23756986032        1
[INPUT] 1    0    [1    /1   ]  0.161290140414       1
[INPUT] 1    0    [1    /1   ]  2693.96475543        1

nuclear repulsion = 0
number of shells = 7
number of NR pGTOs = 13
number of NR cGTOs = 13
basis = {'Ar': [[0, [8.318036555816951, 1.0]], [0, [160.01515845010564, 1.0]], [0, [0.2594191998160632, 1.0]], [0, [21.439077114951413, 1.0]], [1, [8.237569860324443, 1.0]], [1, [0.16129014041367326, 1.0]], [1, [2693.9647554300705, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [8.31803656]
bas 1, expnt(s) = [160.01515845]
bas 2, expnt(s) = [0.2594192]
bas 3, expnt(s) = [21.43907711]
bas 4, expnt(s) = [8.23756986]
bas 5, expnt(s) = [0.16129014]
bas 6, expnt(s) = [2693.96475543]
CPU time:       267.94
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  1  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]
 [ 0  1  1  1  0 36 37  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 8.31803656e+00 1.23745850e+01 1.60015158e+02 1.13667385e+02
 2.59419200e-01 9.18367721e-01 2.14390771e+01 2.51721082e+01
 8.23756986e+00 4.07130165e+01 1.61290140e-01 2.98190750e-01
 2.69396476e+03 5.66205755e+04]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 15.258505636949485
cond(S) = 20.265564428100028
E1 = -606.8233874492845  E_coul = 145.98750043231237
init E= -460.835887016972
    CPU time for initialize scf      0.19 sec, wall time      0.02 sec
  HOMO = -1.44280317135789  LUMO = 76.1534546887985
  mo_energy =
[-1.13803581e+02 -1.39654521e+01 -1.04081814e+01 -1.04081814e+01
 -1.04081814e+01 -3.07907373e+00 -1.44280317e+00 -1.44280317e+00
 -1.44280317e+00  7.61534547e+01  5.79844412e+03  5.79844412e+03
  5.79844412e+03]
E1 = -650.4415997715578  E_coul = 173.09248040829738
cycle= 1 E= -477.34911936326  delta_E= -16.5  |g|= 0.549  |ddm|= 1.33
    CPU time for cycle= 1      0.22 sec, wall time      0.01 sec
diis-norm(errvec)=0.518093
diis-c [-0.26842018  1.        ]
  HOMO = -0.607467933680449  LUMO = 78.5550217359393
  mo_energy =
[-1.11405345e+02 -1.19584717e+01 -8.36158457e+00 -8.36158457e+00
 -8.36158457e+00 -1.85779766e+00 -6.07467934e-01 -6.07467934e-01
 -6.07467934e-01  7.85550217e+01  5.80010207e+03  5.80010207e+03
  5.80010207e+03]
E1 = -650.4062435519742  E_coul = 173.05621129778797
cycle= 2 E= -477.350032254186  delta_E= -0.000913  |g|= 0.0055  |ddm|= 0.0232
    CPU time for cycle= 2      0.13 sec, wall time      0.01 sec
diis-norm(errvec)=0.00559954
diis-c [-5.33727105e-06 -9.94321158e-03  1.00994321e+00]
  HOMO = -0.60749712463403  LUMO = 78.5493442796455
  mo_energy =
[-1.11417107e+02 -1.19599286e+01 -8.36322110e+00 -8.36322110e+00
 -8.36322110e+00 -1.85790053e+00 -6.07497125e-01 -6.07497125e-01
 -6.07497125e-01  7.85493443e+01  5.80006186e+03  5.80006186e+03
  5.80006186e+03]
E1 = -650.4059992445807  E_coul = 173.0559669059141
cycle= 3 E= -477.350032338667  delta_E= -8.45e-08  |g|= 2.7e-05  |ddm|= 0.000146
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=2.4973e-05
diis-c [-1.15695393e-10  3.52872518e-07 -4.07112318e-03  1.00407077e+00]
  HOMO = -0.607497017415543  LUMO = 78.5493550350045
  mo_energy =
[-1.11417078e+02 -1.19599233e+01 -8.36321343e+00 -8.36321343e+00
 -8.36321343e+00 -1.85790031e+00 -6.07497017e-01 -6.07497017e-01
 -6.07497017e-01  7.85493550e+01  5.80006190e+03  5.80006190e+03
  5.80006190e+03]
E1 = -650.4060012751903  E_coul = 173.05596893652017
cycle= 4 E= -477.35003233867  delta_E= -3.52e-12  |g|= 4.43e-07  |ddm|= 1.86e-06
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
E1 = -650.4060012751903  E_coul = 173.05596893652017
  HOMO = -0.607497015441559  LUMO = 78.5493553922588
  mo_energy =
[-1.11417077e+02 -1.19599231e+01 -8.36321325e+00 -8.36321325e+00
 -8.36321325e+00 -1.85790030e+00 -6.07497015e-01 -6.07497015e-01
 -6.07497015e-01  7.85493554e+01  5.80006190e+03  5.80006190e+03
  5.80006190e+03]
E1 = -650.4060013195009  E_coul = 173.05596898083067
Extra cycle  E= -477.35003233867  delta_E= -5.68e-14  |g|= 1.05e-08  |ddm|= 3.75e-08
    CPU time for scf_cycle      0.58 sec, wall time      0.08 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 20.265564428100028
E1 = -650.4060013195009  E_coul = 173.05596898083067
init E= -477.35003233867
    CPU time for initialize scf      1.18 sec, wall time      0.05 sec
  HOMO = -0.60749701541632  LUMO = 78.5493553968994
  mo_energy =
[-1.11417077e+02 -1.19599231e+01 -8.36321325e+00 -8.36321325e+00
 -8.36321325e+00 -1.85790030e+00 -6.07497015e-01 -6.07497015e-01
 -6.07497015e-01  7.85493554e+01  5.80006190e+03  5.80006190e+03
  5.80006190e+03]
E1 = -650.4060013203181  E_coul = 173.0559689816482
cycle= 1 E= -477.35003233867  delta_E= 3.41e-13  |g|= 2.55e-10  |ddm|= 7.47e-10
    CPU time for cycle= 1      0.21 sec, wall time      0.01 sec
E1 = -650.4060013203181  E_coul = 173.0559689816482
  HOMO = -0.607497015418011  LUMO = 78.5493553969757
  mo_energy =
[-1.11417077e+02 -1.19599231e+01 -8.36321325e+00 -8.36321325e+00
 -8.36321325e+00 -1.85790030e+00 -6.07497015e-01 -6.07497015e-01
 -6.07497015e-01  7.85493554e+01  5.80006190e+03  5.80006190e+03
  5.80006190e+03]
E1 = -650.4060013203358  E_coul = 173.05596898166567
Extra cycle  E= -477.35003233867  delta_E= -2.84e-13  |g|= 6.28e-12  |ddm|= 1.65e-11
    CPU time for scf_cycle      1.47 sec, wall time      0.11 sec
exp = [8.31803656e+00 1.60015158e+02 2.59419200e-01 2.14390771e+01
 8.23756986e+00 1.61290140e-01 2.69396476e+03]
grad_E = [ 7.89981152e-01 -5.13752394e-02 -6.32000550e+00 -3.88727822e-01
 -3.01627280e-02 -2.12437370e+01  5.55651320e-06]
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
number_of_s_exps = 4
number_of_p_exps = 3

exps = np.zeros((number_of_s_exps+number_of_p_exps,2))
#exps[:, 0] = decaying_nums(5)

# S
exps[0,0] = 20.0
exps[1,0] = 9.5045827955887916e+01
exps[2,0] = 4.4881042475048387e+00 
exps[3,0] = 3.9799528004692630e-01
             
# P          
exps[3,0] = 3.0108199280832128e+01
exps[4,0] = 6.1393781325590453e+00
exps[5,0] = 4.8929328703550412e-01

basis =  str(number_of_s_exps)+"s"+str(number_of_p_exps)+"p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc21115.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 24
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 18 14:58:44 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35677784.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 32000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 32000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 32000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  9.01927802153        1
[INPUT] 0    0    [1    /1   ]  177.961387562        1
[INPUT] 0    0    [1    /1   ]  0.258056548209       1
[INPUT] 0    0    [1    /1   ]  25.7413784976        1
[INPUT] 1    0    [1    /1   ]  8.25329848335        1
[INPUT] 1    0    [1    /1   ]  0.161850084867       1
[INPUT] 1    0    [1    /1   ]  2693.96475387        1

nuclear repulsion = 0
number of shells = 7
number of NR pGTOs = 13
number of NR cGTOs = 13
basis = {'Ar': [[0, [9.019278021531916, 1.0]], [0, [177.96138756155247, 1.0]], [0, [0.2580565482091854, 1.0]], [0, [25.74137849759913, 1.0]], [1, [8.25329848335149, 1.0]], [1, [0.16185008486723898, 1.0]], [1, [2693.9647538669947, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [9.01927802]
bas 1, expnt(s) = [177.96138756]
bas 2, expnt(s) = [0.25805655]
bas 3, expnt(s) = [25.7413785]
bas 4, expnt(s) = [8.25329848]
bas 5, expnt(s) = [0.16185008]
bas 6, expnt(s) = [2693.96475387]
CPU time:       273.01
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  1  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]
 [ 0  1  1  1  0 36 37  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 9.01927802e+00 1.31490342e+01 1.77961388e+02 1.23100371e+02
 2.58056548e-01 9.14747407e-01 2.57413785e+01 2.88727981e+01
 8.25329848e+00 4.08102103e+01 1.61850085e-01 2.99485332e-01
 2.69396475e+03 5.66205755e+04]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 15.223119965159006
cond(S) = 17.276026651629444
E1 = -608.2074974086321  E_coul = 146.05045004379414
init E= -462.157047364838
    CPU time for initialize scf      0.25 sec, wall time      0.04 sec
  HOMO = -1.46134109461861  LUMO = 97.2880338167037
  mo_energy =
[-1.15071014e+02 -1.34897072e+01 -1.04097458e+01 -1.04097458e+01
 -1.04097458e+01 -3.07056971e+00 -1.46134109e+00 -1.46134109e+00
 -1.46134109e+00  9.72880338e+01  5.79880325e+03  5.79880325e+03
  5.79880325e+03]
E1 = -653.6755376586975  E_coul = 174.67002723006757
cycle= 1 E= -479.00551042863  delta_E= -16.8  |g|= 0.539  |ddm|= 1.33
    CPU time for cycle= 1      0.35 sec, wall time      0.02 sec
diis-norm(errvec)=0.573972
diis-c [-0.32944373  1.        ]
  HOMO = -0.607419576464959  LUMO = 99.8863452965511
  mo_energy =
[-1.12407460e+02 -1.14056410e+01 -8.24241054e+00 -8.24241054e+00
 -8.24241054e+00 -1.80550547e+00 -6.07419576e-01 -6.07419576e-01
 -6.07419576e-01  9.98863453e+01  5.80080089e+03  5.80080089e+03
  5.80080089e+03]
E1 = -653.6555628761856  E_coul = 174.64933425977634
cycle= 2 E= -479.006228616409  delta_E= -0.000718  |g|= 0.00637  |ddm|= 0.0113
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.00717063
diis-c [-6.87648398e-06 -1.17645490e-02  1.01176455e+00]
  HOMO = -0.607435936933179  LUMO = 99.8818383801887
  mo_energy =
[-1.12415002e+02 -1.14064408e+01 -8.24307726e+00 -8.24307726e+00
 -8.24307726e+00 -1.80558635e+00 -6.07435937e-01 -6.07435937e-01
 -6.07435937e-01  9.98818384e+01  5.80076891e+03  5.80076891e+03
  5.80076891e+03]
E1 = -653.6555189452171  E_coul = 174.64929022409785
cycle= 3 E= -479.006228721119  delta_E= -1.05e-07  |g|= 4.09e-05  |ddm|= 8.96e-05
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=3.56299e-05
diis-c [-1.89183908e-10  8.96843234e-06 -5.26985668e-03  1.00526089e+00]
  HOMO = -0.607435794627084  LUMO = 99.8818627151797
  mo_energy =
[-1.12414947e+02 -1.14064321e+01 -8.24306575e+00 -8.24306575e+00
 -8.24306575e+00 -1.80558593e+00 -6.07435795e-01 -6.07435795e-01
 -6.07435795e-01  9.98818627e+01  5.80076902e+03  5.80076902e+03
  5.80076902e+03]
E1 = -653.6555217340649  E_coul = 174.6492930129387
cycle= 4 E= -479.006228721126  delta_E= -6.99e-12  |g|= 4.5e-07  |ddm|= 2.25e-06
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
E1 = -653.6555217340649  E_coul = 174.6492930129387
  HOMO = -0.607435793104007  LUMO = 99.8818631136395
  mo_energy =
[-1.12414946e+02 -1.14064320e+01 -8.24306560e+00 -8.24306560e+00
 -8.24306560e+00 -1.80558592e+00 -6.07435793e-01 -6.07435793e-01
 -6.07435793e-01  9.98818631e+01  5.80076902e+03  5.80076902e+03
  5.80076902e+03]
E1 = -653.6555217702615  E_coul = 174.64929304913574
Extra cycle  E= -479.006228721126  delta_E= 3.98e-13  |g|= 9.41e-09  |ddm|= 2.76e-08
    CPU time for scf_cycle      0.64 sec, wall time      0.10 sec
exp = [9.01927802e+00 1.77961388e+02 2.58056548e-01 2.57413785e+01
 8.25329848e+00 1.61850085e-01 2.69396475e+03]
E = -479.0062287211258
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
number_of_s_exps = 4
number_of_p_exps = 3

exps = np.zeros((number_of_s_exps+number_of_p_exps,2))
#exps[:, 0] = decaying_nums(5)

# S
exps[0,0] = 20.0
exps[1,0] = 9.5045827955887916e+01
exps[2,0] = 4.4881042475048387e+00 
exps[3,0] = 3.9799528004692630e-01
             
# P          
exps[3,0] = 3.0108199280832128e+01
exps[4,0] = 6.1393781325590453e+00
exps[5,0] = 4.8929328703550412e-01

basis =  str(number_of_s_exps)+"s"+str(number_of_p_exps)+"p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc21115.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 24
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 18 14:58:44 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35677784.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 32000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 32000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 32000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  9.01927802153        1
[INPUT] 0    0    [1    /1   ]  177.961387562        1
[INPUT] 0    0    [1    /1   ]  0.258056548209       1
[INPUT] 0    0    [1    /1   ]  25.7413784976        1
[INPUT] 1    0    [1    /1   ]  8.25329848335        1
[INPUT] 1    0    [1    /1   ]  0.161850084867       1
[INPUT] 1    0    [1    /1   ]  2693.96475387        1

nuclear repulsion = 0
number of shells = 7
number of NR pGTOs = 13
number of NR cGTOs = 13
basis = {'Ar': [[0, [9.019278021531916, 1.0]], [0, [177.96138756155247, 1.0]], [0, [0.2580565482091854, 1.0]], [0, [25.74137849759913, 1.0]], [1, [8.25329848335149, 1.0]], [1, [0.16185008486723898, 1.0]], [1, [2693.9647538669947, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [9.01927802]
bas 1, expnt(s) = [177.96138756]
bas 2, expnt(s) = [0.25805655]
bas 3, expnt(s) = [25.7413785]
bas 4, expnt(s) = [8.25329848]
bas 5, expnt(s) = [0.16185008]
bas 6, expnt(s) = [2693.96475387]
CPU time:       273.76
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  1  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]
 [ 0  1  1  1  0 36 37  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 9.01927802e+00 1.31490342e+01 1.77961388e+02 1.23100371e+02
 2.58056548e-01 9.14747407e-01 2.57413785e+01 2.88727981e+01
 8.25329848e+00 4.08102103e+01 1.61850085e-01 2.99485332e-01
 2.69396475e+03 5.66205755e+04]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 15.223119965159006
cond(S) = 17.276026651629444
E1 = -608.2074974086321  E_coul = 146.05045004379414
init E= -462.157047364838
    CPU time for initialize scf      0.24 sec, wall time      0.03 sec
  HOMO = -1.46134109461861  LUMO = 97.2880338167037
  mo_energy =
[-1.15071014e+02 -1.34897072e+01 -1.04097458e+01 -1.04097458e+01
 -1.04097458e+01 -3.07056971e+00 -1.46134109e+00 -1.46134109e+00
 -1.46134109e+00  9.72880338e+01  5.79880325e+03  5.79880325e+03
  5.79880325e+03]
E1 = -653.6755376586975  E_coul = 174.67002723006757
cycle= 1 E= -479.00551042863  delta_E= -16.8  |g|= 0.539  |ddm|= 1.33
    CPU time for cycle= 1      0.26 sec, wall time      0.01 sec
diis-norm(errvec)=0.573972
diis-c [-0.32944373  1.        ]
  HOMO = -0.607419576464959  LUMO = 99.8863452965511
  mo_energy =
[-1.12407460e+02 -1.14056410e+01 -8.24241054e+00 -8.24241054e+00
 -8.24241054e+00 -1.80550547e+00 -6.07419576e-01 -6.07419576e-01
 -6.07419576e-01  9.98863453e+01  5.80080089e+03  5.80080089e+03
  5.80080089e+03]
E1 = -653.6555628761856  E_coul = 174.64933425977634
cycle= 2 E= -479.006228616409  delta_E= -0.000718  |g|= 0.00637  |ddm|= 0.0113
    CPU time for cycle= 2      0.07 sec, wall time      0.01 sec
diis-norm(errvec)=0.00717063
diis-c [-6.87648398e-06 -1.17645490e-02  1.01176455e+00]
  HOMO = -0.607435936933179  LUMO = 99.8818383801887
  mo_energy =
[-1.12415002e+02 -1.14064408e+01 -8.24307726e+00 -8.24307726e+00
 -8.24307726e+00 -1.80558635e+00 -6.07435937e-01 -6.07435937e-01
 -6.07435937e-01  9.98818384e+01  5.80076891e+03  5.80076891e+03
  5.80076891e+03]
E1 = -653.6555189452171  E_coul = 174.64929022409785
cycle= 3 E= -479.006228721119  delta_E= -1.05e-07  |g|= 4.09e-05  |ddm|= 8.96e-05
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=3.56299e-05
diis-c [-1.89183908e-10  8.96843234e-06 -5.26985668e-03  1.00526089e+00]
  HOMO = -0.607435794627084  LUMO = 99.8818627151797
  mo_energy =
[-1.12414947e+02 -1.14064321e+01 -8.24306575e+00 -8.24306575e+00
 -8.24306575e+00 -1.80558593e+00 -6.07435795e-01 -6.07435795e-01
 -6.07435795e-01  9.98818627e+01  5.80076902e+03  5.80076902e+03
  5.80076902e+03]
E1 = -653.6555217340649  E_coul = 174.6492930129387
cycle= 4 E= -479.006228721126  delta_E= -6.99e-12  |g|= 4.5e-07  |ddm|= 2.25e-06
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
E1 = -653.6555217340649  E_coul = 174.6492930129387
  HOMO = -0.607435793104007  LUMO = 99.8818631136395
  mo_energy =
[-1.12414946e+02 -1.14064320e+01 -8.24306560e+00 -8.24306560e+00
 -8.24306560e+00 -1.80558592e+00 -6.07435793e-01 -6.07435793e-01
 -6.07435793e-01  9.98818631e+01  5.80076902e+03  5.80076902e+03
  5.80076902e+03]
E1 = -653.6555217702615  E_coul = 174.64929304913574
Extra cycle  E= -479.006228721126  delta_E= 3.98e-13  |g|= 9.41e-09  |ddm|= 2.76e-08
    CPU time for scf_cycle      0.61 sec, wall time      0.09 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 17.276026651629444
E1 = -653.6555217702615  E_coul = 174.64929304913574
init E= -479.006228721126
    CPU time for initialize scf      1.38 sec, wall time      0.06 sec
  HOMO = -0.607435793089935  LUMO = 99.8818631180006
  mo_energy =
[-1.12414946e+02 -1.14064320e+01 -8.24306560e+00 -8.24306560e+00
 -8.24306560e+00 -1.80558592e+00 -6.07435793e-01 -6.07435793e-01
 -6.07435793e-01  9.98818631e+01  5.80076902e+03  5.80076902e+03
  5.80076902e+03]
E1 = -653.6555217708387  E_coul = 174.64929304971272
cycle= 1 E= -479.006228721126  delta_E= -2.27e-13  |g|= 2.04e-10  |ddm|= 4.82e-10
    CPU time for cycle= 1      0.19 sec, wall time      0.01 sec
E1 = -653.6555217708387  E_coul = 174.64929304971272
  HOMO = -0.60743579308949  LUMO = 99.8818631180595
  mo_energy =
[-1.12414946e+02 -1.14064320e+01 -8.24306560e+00 -8.24306560e+00
 -8.24306560e+00 -1.80558592e+00 -6.07435793e-01 -6.07435793e-01
 -6.07435793e-01  9.98818631e+01  5.80076902e+03  5.80076902e+03
  5.80076902e+03]
E1 = -653.6555217708494  E_coul = 174.64929304972352
Extra cycle  E= -479.006228721126  delta_E= 1.14e-13  |g|= 6.41e-12  |ddm|= 9.42e-12
    CPU time for scf_cycle      1.64 sec, wall time      0.13 sec
exp = [9.01927802e+00 1.77961388e+02 2.58056548e-01 2.57413785e+01
 8.25329848e+00 1.61850085e-01 2.69396475e+03]
grad_E = [ 1.16874907e+00 -4.52912358e-02 -6.72225771e+00 -2.99701844e-01
  2.52288674e-02 -2.11652451e+01  5.56911042e-06]
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
number_of_s_exps = 4
number_of_p_exps = 3

exps = np.zeros((number_of_s_exps+number_of_p_exps,2))
#exps[:, 0] = decaying_nums(5)

# S
exps[0,0] = 20.0
exps[1,0] = 9.5045827955887916e+01
exps[2,0] = 4.4881042475048387e+00 
exps[3,0] = 3.9799528004692630e-01
             
# P          
exps[3,0] = 3.0108199280832128e+01
exps[4,0] = 6.1393781325590453e+00
exps[5,0] = 4.8929328703550412e-01

basis =  str(number_of_s_exps)+"s"+str(number_of_p_exps)+"p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc21115.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 24
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 18 14:58:47 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35677784.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 32000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 32000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 32000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  9.04086384337        1
[INPUT] 0    0    [1    /1   ]  219.744361539        1
[INPUT] 0    0    [1    /1   ]  0.247832414552       1
[INPUT] 0    0    [1    /1   ]  37.1620988811        1
[INPUT] 1    0    [1    /1   ]  8.27908459567        1
[INPUT] 1    0    [1    /1   ]  0.165265666164       1
[INPUT] 1    0    [1    /1   ]  2693.96475093        1

nuclear repulsion = 0
number of shells = 7
number of NR pGTOs = 13
number of NR cGTOs = 13
basis = {'Ar': [[0, [9.040863843365111, 1.0]], [0, [219.74436153875362, 1.0]], [0, [0.2478324145519489, 1.0]], [0, [37.162098881090074, 1.0]], [1, [8.279084595665184, 1.0]], [1, [0.16526566616389785, 1.0]], [1, [2693.964750927192, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [9.04086384]
bas 1, expnt(s) = [219.74436154]
bas 2, expnt(s) = [0.24783241]
bas 3, expnt(s) = [37.16209888]
bas 4, expnt(s) = [8.2790846]
bas 5, expnt(s) = [0.16526567]
bas 6, expnt(s) = [2693.96475093]
CPU time:       279.13
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  1  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]
 [ 0  1  1  1  0 36 37  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 9.04086384e+00 1.31726293e+01 2.19744362e+02 1.44196039e+02
 2.47832415e-01 8.87428977e-01 3.71620989e+01 3.80268367e+01
 8.27908460e+00 4.09696537e+01 1.65265666e-01 3.07406248e-01
 2.69396475e+03 5.66205754e+04]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 15.234688677556672
cond(S) = 11.152405277473836
E1 = -613.7064870934131  E_coul = 146.80555822465695
init E= -466.900928868756
    CPU time for initialize scf      0.29 sec, wall time      0.03 sec
  HOMO = -1.48100239860289  LUMO = 148.09083836805
  mo_energy =
[-1.17425515e+02 -1.31130769e+01 -1.03677437e+01 -1.03677437e+01
 -1.03677437e+01 -3.01680224e+00 -1.48100240e+00 -1.48100240e+00
 -1.48100240e+00  1.48090838e+02  5.79941849e+03  5.79941849e+03
  5.79941849e+03]
E1 = -660.0206668259834  E_coul = 176.6048560411011
cycle= 1 E= -483.415810784882  delta_E= -16.5  |g|= 0.483  |ddm|= 1.29
    CPU time for cycle= 1      0.22 sec, wall time      0.01 sec
diis-norm(errvec)=0.562666
diis-c [-0.31659276  1.        ]
  HOMO = -0.613887819424011  LUMO = 150.895421509577
  mo_energy =
[-1.14500521e+02 -1.09755778e+01 -8.11592188e+00 -8.11592188e+00
 -8.11592188e+00 -1.74016816e+00 -6.13887819e-01 -6.13887819e-01
 -6.13887819e-01  1.50895422e+02  5.80189608e+03  5.80189608e+03
  5.80189608e+03]
E1 = -660.0140745199676  E_coul = 176.59782114040715
cycle= 2 E= -483.41625337956  delta_E= -0.000443  |g|= 0.00609  |ddm|= 0.00418
    CPU time for cycle= 2      0.12 sec, wall time      0.01 sec
diis-norm(errvec)=0.00704647
diis-c [-6.47879264e-06 -1.18158847e-02  1.01181588e+00]
  HOMO = -0.613893420947534  LUMO = 150.892345777534
  mo_energy =
[-1.14503788e+02 -1.09757999e+01 -8.11592800e+00 -8.11592800e+00
 -8.11592800e+00 -1.74020541e+00 -6.13893421e-01 -6.13893421e-01
 -6.13893421e-01  1.50892346e+02  5.80187618e+03  5.80187618e+03
  5.80187618e+03]
E1 = -660.014099458259  E_coul = 176.5978459991251
cycle= 3 E= -483.416253459134  delta_E= -7.96e-08  |g|= 2.79e-05  |ddm|= 6.94e-05
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=2.54953e-05
diis-c [-7.49885127e-11  1.13279320e-05 -4.24713135e-03  1.00423580e+00]
  HOMO = -0.613893343077193  LUMO = 150.892361846946
  mo_energy =
[-1.14503757e+02 -1.09757951e+01 -8.11592227e+00 -8.11592227e+00
 -8.11592227e+00 -1.74020512e+00 -6.13893343e-01 -6.13893343e-01
 -6.13893343e-01  1.50892362e+02  5.80187624e+03  5.80187624e+03
  5.80187624e+03]
E1 = -660.0141006165936  E_coul = 176.59784715745772
cycle= 4 E= -483.416253459136  delta_E= -1.93e-12  |g|= 1.76e-07  |ddm|= 7.13e-07
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
E1 = -660.0141006165936  E_coul = 176.59784715745772
  HOMO = -0.613893342612398  LUMO = 150.892362029573
  mo_energy =
[-1.14503756e+02 -1.09757950e+01 -8.11592222e+00 -8.11592222e+00
 -8.11592222e+00 -1.74020512e+00 -6.13893343e-01 -6.13893343e-01
 -6.13893343e-01  1.50892362e+02  5.80187624e+03  5.80187624e+03
  5.80187624e+03]
E1 = -660.0141006261466  E_coul = 176.5978471670109
Extra cycle  E= -483.416253459136  delta_E= 1.71e-13  |g|= 2.76e-09  |ddm|= 5.22e-09
    CPU time for scf_cycle      0.67 sec, wall time      0.08 sec
exp = [9.04086384e+00 2.19744362e+02 2.47832415e-01 3.71620989e+01
 8.27908460e+00 1.65265666e-01 2.69396475e+03]
E = -483.4162534591357
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
number_of_s_exps = 4
number_of_p_exps = 3

exps = np.zeros((number_of_s_exps+number_of_p_exps,2))
#exps[:, 0] = decaying_nums(5)

# S
exps[0,0] = 20.0
exps[1,0] = 9.5045827955887916e+01
exps[2,0] = 4.4881042475048387e+00 
exps[3,0] = 3.9799528004692630e-01
             
# P          
exps[3,0] = 3.0108199280832128e+01
exps[4,0] = 6.1393781325590453e+00
exps[5,0] = 4.8929328703550412e-01

basis =  str(number_of_s_exps)+"s"+str(number_of_p_exps)+"p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc21115.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 24
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 18 14:58:47 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35677784.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 32000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 32000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 32000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  9.04086384337        1
[INPUT] 0    0    [1    /1   ]  219.744361539        1
[INPUT] 0    0    [1    /1   ]  0.247832414552       1
[INPUT] 0    0    [1    /1   ]  37.1620988811        1
[INPUT] 1    0    [1    /1   ]  8.27908459567        1
[INPUT] 1    0    [1    /1   ]  0.165265666164       1
[INPUT] 1    0    [1    /1   ]  2693.96475093        1

nuclear repulsion = 0
number of shells = 7
number of NR pGTOs = 13
number of NR cGTOs = 13
basis = {'Ar': [[0, [9.040863843365111, 1.0]], [0, [219.74436153875362, 1.0]], [0, [0.2478324145519489, 1.0]], [0, [37.162098881090074, 1.0]], [1, [8.279084595665184, 1.0]], [1, [0.16526566616389785, 1.0]], [1, [2693.964750927192, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [9.04086384]
bas 1, expnt(s) = [219.74436154]
bas 2, expnt(s) = [0.24783241]
bas 3, expnt(s) = [37.16209888]
bas 4, expnt(s) = [8.2790846]
bas 5, expnt(s) = [0.16526567]
bas 6, expnt(s) = [2693.96475093]
CPU time:       279.87
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  1  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]
 [ 0  1  1  1  0 36 37  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 9.04086384e+00 1.31726293e+01 2.19744362e+02 1.44196039e+02
 2.47832415e-01 8.87428977e-01 3.71620989e+01 3.80268367e+01
 8.27908460e+00 4.09696537e+01 1.65265666e-01 3.07406248e-01
 2.69396475e+03 5.66205754e+04]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 15.234688677556672
cond(S) = 11.152405277473836
E1 = -613.7064870934131  E_coul = 146.80555822465695
init E= -466.900928868756
    CPU time for initialize scf      0.19 sec, wall time      0.02 sec
  HOMO = -1.48100239860289  LUMO = 148.09083836805
  mo_energy =
[-1.17425515e+02 -1.31130769e+01 -1.03677437e+01 -1.03677437e+01
 -1.03677437e+01 -3.01680224e+00 -1.48100240e+00 -1.48100240e+00
 -1.48100240e+00  1.48090838e+02  5.79941849e+03  5.79941849e+03
  5.79941849e+03]
E1 = -660.0206668259834  E_coul = 176.6048560411011
cycle= 1 E= -483.415810784882  delta_E= -16.5  |g|= 0.483  |ddm|= 1.29
    CPU time for cycle= 1      0.22 sec, wall time      0.01 sec
diis-norm(errvec)=0.562666
diis-c [-0.31659276  1.        ]
  HOMO = -0.613887819424011  LUMO = 150.895421509577
  mo_energy =
[-1.14500521e+02 -1.09755778e+01 -8.11592188e+00 -8.11592188e+00
 -8.11592188e+00 -1.74016816e+00 -6.13887819e-01 -6.13887819e-01
 -6.13887819e-01  1.50895422e+02  5.80189608e+03  5.80189608e+03
  5.80189608e+03]
E1 = -660.0140745199676  E_coul = 176.59782114040715
cycle= 2 E= -483.41625337956  delta_E= -0.000443  |g|= 0.00609  |ddm|= 0.00418
    CPU time for cycle= 2      0.14 sec, wall time      0.01 sec
diis-norm(errvec)=0.00704647
diis-c [-6.47879264e-06 -1.18158847e-02  1.01181588e+00]
  HOMO = -0.613893420947534  LUMO = 150.892345777534
  mo_energy =
[-1.14503788e+02 -1.09757999e+01 -8.11592800e+00 -8.11592800e+00
 -8.11592800e+00 -1.74020541e+00 -6.13893421e-01 -6.13893421e-01
 -6.13893421e-01  1.50892346e+02  5.80187618e+03  5.80187618e+03
  5.80187618e+03]
E1 = -660.014099458259  E_coul = 176.5978459991251
cycle= 3 E= -483.416253459134  delta_E= -7.96e-08  |g|= 2.79e-05  |ddm|= 6.94e-05
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=2.54953e-05
diis-c [-7.49885127e-11  1.13279320e-05 -4.24713135e-03  1.00423580e+00]
  HOMO = -0.613893343077193  LUMO = 150.892361846946
  mo_energy =
[-1.14503757e+02 -1.09757951e+01 -8.11592227e+00 -8.11592227e+00
 -8.11592227e+00 -1.74020512e+00 -6.13893343e-01 -6.13893343e-01
 -6.13893343e-01  1.50892362e+02  5.80187624e+03  5.80187624e+03
  5.80187624e+03]
E1 = -660.0141006165936  E_coul = 176.59784715745772
cycle= 4 E= -483.416253459136  delta_E= -1.93e-12  |g|= 1.76e-07  |ddm|= 7.13e-07
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
E1 = -660.0141006165936  E_coul = 176.59784715745772
  HOMO = -0.613893342612398  LUMO = 150.892362029573
  mo_energy =
[-1.14503756e+02 -1.09757950e+01 -8.11592222e+00 -8.11592222e+00
 -8.11592222e+00 -1.74020512e+00 -6.13893343e-01 -6.13893343e-01
 -6.13893343e-01  1.50892362e+02  5.80187624e+03  5.80187624e+03
  5.80187624e+03]
E1 = -660.0141006261466  E_coul = 176.5978471670109
Extra cycle  E= -483.416253459136  delta_E= 1.71e-13  |g|= 2.76e-09  |ddm|= 5.22e-09
    CPU time for scf_cycle      0.58 sec, wall time      0.07 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 11.152405277473836
E1 = -660.0141006261466  E_coul = 176.5978471670109
init E= -483.416253459136
    CPU time for initialize scf      1.18 sec, wall time      0.05 sec
  HOMO = -0.613893342609763  LUMO = 150.892362031074
  mo_energy =
[-1.14503756e+02 -1.09757950e+01 -8.11592222e+00 -8.11592222e+00
 -8.11592222e+00 -1.74020512e+00 -6.13893343e-01 -6.13893343e-01
 -6.13893343e-01  1.50892362e+02  5.80187624e+03  5.80187624e+03
  5.80187624e+03]
E1 = -660.0141006262593  E_coul = 176.59784716712315
cycle= 1 E= -483.416253459136  delta_E= -3.98e-13  |g|= 4.71e-11  |ddm|= 6.9e-11
    CPU time for cycle= 1      0.21 sec, wall time      0.01 sec
E1 = -660.0141006262593  E_coul = 176.59784716712315
  HOMO = -0.613893342609548  LUMO = 150.892362031088
  mo_energy =
[-1.14503756e+02 -1.09757950e+01 -8.11592222e+00 -8.11592222e+00
 -8.11592222e+00 -1.74020512e+00 -6.13893343e-01 -6.13893343e-01
 -6.13893343e-01  1.50892362e+02  5.80187624e+03  5.80187624e+03
  5.80187624e+03]
E1 = -660.0141006262605  E_coul = 176.59784716712463
Extra cycle  E= -483.416253459136  delta_E= 2.27e-13  |g|= 2.3e-12  |ddm|= 1.04e-12
    CPU time for scf_cycle      1.46 sec, wall time      0.11 sec
exp = [9.04086384e+00 2.19744362e+02 2.47832415e-01 3.71620989e+01
 8.27908460e+00 1.65265666e-01 2.69396475e+03]
grad_E = [ 1.80822312e+00 -4.51328844e-02 -7.34770825e+00 -1.46012464e-01
  1.06464439e-01 -2.09060524e+01  5.59038885e-06]
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
number_of_s_exps = 4
number_of_p_exps = 3

exps = np.zeros((number_of_s_exps+number_of_p_exps,2))
#exps[:, 0] = decaying_nums(5)

# S
exps[0,0] = 20.0
exps[1,0] = 9.5045827955887916e+01
exps[2,0] = 4.4881042475048387e+00 
exps[3,0] = 3.9799528004692630e-01
             
# P          
exps[3,0] = 3.0108199280832128e+01
exps[4,0] = 6.1393781325590453e+00
exps[5,0] = 4.8929328703550412e-01

basis =  str(number_of_s_exps)+"s"+str(number_of_p_exps)+"p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc21115.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 24
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 18 14:58:50 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35677784.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 32000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 32000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 32000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  5.99709868023        1
[INPUT] 0    0    [1    /1   ]  341.420406575        1
[INPUT] 0    0    [1    /1   ]  0.204927096096       1
[INPUT] 0    0    [1    /1   ]  72.2835681497        1
[INPUT] 1    0    [1    /1   ]  8.36243763926        1
[INPUT] 1    0    [1    /1   ]  0.179142574838       1
[INPUT] 1    0    [1    /1   ]  2693.96474399        1

nuclear repulsion = 0
number of shells = 7
number of NR pGTOs = 13
number of NR cGTOs = 13
basis = {'Ar': [[0, [5.997098680225221, 1.0]], [0, [341.42040657465066, 1.0]], [0, [0.2049270960964441, 1.0]], [0, [72.28356814973787, 1.0]], [1, [8.362437639261632, 1.0]], [1, [0.17914257483751528, 1.0]], [1, [2693.964743991628, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [5.99709868]
bas 1, expnt(s) = [341.42040657]
bas 2, expnt(s) = [0.2049271]
bas 3, expnt(s) = [72.28356815]
bas 4, expnt(s) = [8.36243764]
bas 5, expnt(s) = [0.17914257]
bas 6, expnt(s) = [2693.96474399]
CPU time:       284.53
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  1  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]
 [ 0  1  1  1  0 36 37  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 5.99709868e+00 9.68213025e+00 3.41420407e+02 2.00669852e+02
 2.04927096e-01 7.69510524e-01 7.22835681e+01 6.26317737e+01
 8.36243764e+00 4.14858992e+01 1.79142575e-01 3.40003124e-01
 2.69396474e+03 5.66205752e+04]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 15.507580276749284
cond(S) = 6.532243662361405
E1 = -627.1771287486548  E_coul = 149.5754777339499
init E= -477.601651014705
    CPU time for initialize scf      0.20 sec, wall time      0.02 sec
  HOMO = -1.46044479827963  LUMO = 311.953939541571
  mo_energy =
[-1.18933578e+02 -1.49899542e+01 -1.01930933e+01 -1.01930933e+01
 -1.01930933e+01 -2.77140052e+00 -1.46044480e+00 -1.46044480e+00
 -1.46044480e+00  3.11953940e+02  5.80021140e+03  5.80021140e+03
  5.80021140e+03]
E1 = -667.3977723221624  E_coul = 175.79271276717148
cycle= 1 E= -491.605059554991  delta_E=  -14  |g|= 0.15  |ddm|= 1.12
    CPU time for cycle= 1      0.22 sec, wall time      0.01 sec
diis-norm(errvec)=0.193384
diis-c [-0.03739734  1.        ]
  HOMO = -0.651582703638311  LUMO = 314.657637636881
  mo_energy =
[-1.16303638e+02 -1.30486015e+01 -8.28721528e+00 -8.28721528e+00
 -8.28721528e+00 -1.73754496e+00 -6.51582704e-01 -6.51582704e-01
 -6.51582704e-01  3.14657638e+02  5.80359347e+03  5.80359347e+03
  5.80359347e+03]
E1 = -667.3969017530154  E_coul = 175.79183184993678
cycle= 2 E= -491.605069903079  delta_E= -1.03e-05  |g|= 0.000217  |ddm|= 0.000681
    CPU time for cycle= 2      0.13 sec, wall time      0.01 sec
diis-norm(errvec)=0.000171471
diis-c [-1.68988497e-08 -5.78556556e-04  1.00057856e+00]
  HOMO = -0.651584145650602  LUMO = 314.657427385677
  mo_energy =
[-1.16303904e+02 -1.30486441e+01 -8.28725731e+00 -8.28725731e+00
 -8.28725731e+00 -1.73754705e+00 -6.51584146e-01 -6.51584146e-01
 -6.51584146e-01  3.14657427e+02  5.80359274e+03  5.80359274e+03
  5.80359274e+03]
E1 = -667.3968977151764  E_coul = 175.7918278120287
cycle= 3 E= -491.605069903148  delta_E= -6.9e-11  |g|= 1.17e-06  |ddm|= 2.07e-06
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
E1 = -667.3968977151764  E_coul = 175.7918278120287
  HOMO = -0.651584148383162  LUMO = 314.657426595171
  mo_energy =
[-1.16303905e+02 -1.30486443e+01 -8.28725747e+00 -8.28725747e+00
 -8.28725747e+00 -1.73754705e+00 -6.51584148e-01 -6.51584148e-01
 -6.51584148e-01  3.14657427e+02  5.80359274e+03  5.80359274e+03
  5.80359274e+03]
E1 = -667.396897694035  E_coul = 175.79182779088748
Extra cycle  E= -491.605069903148  delta_E= 1.14e-13  |g|= 1.04e-08  |ddm|= 1.03e-08
    CPU time for scf_cycle      0.57 sec, wall time      0.06 sec
exp = [5.99709868e+00 3.41420407e+02 2.04927096e-01 7.22835681e+01
 8.36243764e+00 1.79142575e-01 2.69396474e+03]
E = -491.6050699031475
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
number_of_s_exps = 4
number_of_p_exps = 3

exps = np.zeros((number_of_s_exps+number_of_p_exps,2))
#exps[:, 0] = decaying_nums(5)

# S
exps[0,0] = 20.0
exps[1,0] = 9.5045827955887916e+01
exps[2,0] = 4.4881042475048387e+00 
exps[3,0] = 3.9799528004692630e-01
             
# P          
exps[3,0] = 3.0108199280832128e+01
exps[4,0] = 6.1393781325590453e+00
exps[5,0] = 4.8929328703550412e-01

basis =  str(number_of_s_exps)+"s"+str(number_of_p_exps)+"p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc21115.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 24
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 18 14:58:50 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35677784.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 32000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 32000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 32000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  5.99709868023        1
[INPUT] 0    0    [1    /1   ]  341.420406575        1
[INPUT] 0    0    [1    /1   ]  0.204927096096       1
[INPUT] 0    0    [1    /1   ]  72.2835681497        1
[INPUT] 1    0    [1    /1   ]  8.36243763926        1
[INPUT] 1    0    [1    /1   ]  0.179142574838       1
[INPUT] 1    0    [1    /1   ]  2693.96474399        1

nuclear repulsion = 0
number of shells = 7
number of NR pGTOs = 13
number of NR cGTOs = 13
basis = {'Ar': [[0, [5.997098680225221, 1.0]], [0, [341.42040657465066, 1.0]], [0, [0.2049270960964441, 1.0]], [0, [72.28356814973787, 1.0]], [1, [8.362437639261632, 1.0]], [1, [0.17914257483751528, 1.0]], [1, [2693.964743991628, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [5.99709868]
bas 1, expnt(s) = [341.42040657]
bas 2, expnt(s) = [0.2049271]
bas 3, expnt(s) = [72.28356815]
bas 4, expnt(s) = [8.36243764]
bas 5, expnt(s) = [0.17914257]
bas 6, expnt(s) = [2693.96474399]
CPU time:       285.17
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  1  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]
 [ 0  1  1  1  0 36 37  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 5.99709868e+00 9.68213025e+00 3.41420407e+02 2.00669852e+02
 2.04927096e-01 7.69510524e-01 7.22835681e+01 6.26317737e+01
 8.36243764e+00 4.14858992e+01 1.79142575e-01 3.40003124e-01
 2.69396474e+03 5.66205752e+04]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 15.507580276749284
cond(S) = 6.532243662361405
E1 = -627.1771287486548  E_coul = 149.5754777339499
init E= -477.601651014705
    CPU time for initialize scf      0.19 sec, wall time      0.02 sec
  HOMO = -1.46044479827963  LUMO = 311.953939541571
  mo_energy =
[-1.18933578e+02 -1.49899542e+01 -1.01930933e+01 -1.01930933e+01
 -1.01930933e+01 -2.77140052e+00 -1.46044480e+00 -1.46044480e+00
 -1.46044480e+00  3.11953940e+02  5.80021140e+03  5.80021140e+03
  5.80021140e+03]
E1 = -667.3977723221624  E_coul = 175.79271276717148
cycle= 1 E= -491.605059554991  delta_E=  -14  |g|= 0.15  |ddm|= 1.12
    CPU time for cycle= 1      0.22 sec, wall time      0.01 sec
diis-norm(errvec)=0.193384
diis-c [-0.03739734  1.        ]
  HOMO = -0.651582703638311  LUMO = 314.657637636881
  mo_energy =
[-1.16303638e+02 -1.30486015e+01 -8.28721528e+00 -8.28721528e+00
 -8.28721528e+00 -1.73754496e+00 -6.51582704e-01 -6.51582704e-01
 -6.51582704e-01  3.14657638e+02  5.80359347e+03  5.80359347e+03
  5.80359347e+03]
E1 = -667.3969017530154  E_coul = 175.79183184993678
cycle= 2 E= -491.605069903079  delta_E= -1.03e-05  |g|= 0.000217  |ddm|= 0.000681
    CPU time for cycle= 2      0.14 sec, wall time      0.01 sec
diis-norm(errvec)=0.000171471
diis-c [-1.68988497e-08 -5.78556556e-04  1.00057856e+00]
  HOMO = -0.651584145650602  LUMO = 314.657427385677
  mo_energy =
[-1.16303904e+02 -1.30486441e+01 -8.28725731e+00 -8.28725731e+00
 -8.28725731e+00 -1.73754705e+00 -6.51584146e-01 -6.51584146e-01
 -6.51584146e-01  3.14657427e+02  5.80359274e+03  5.80359274e+03
  5.80359274e+03]
E1 = -667.3968977151764  E_coul = 175.7918278120287
cycle= 3 E= -491.605069903148  delta_E= -6.9e-11  |g|= 1.17e-06  |ddm|= 2.07e-06
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
E1 = -667.3968977151764  E_coul = 175.7918278120287
  HOMO = -0.651584148383162  LUMO = 314.657426595171
  mo_energy =
[-1.16303905e+02 -1.30486443e+01 -8.28725747e+00 -8.28725747e+00
 -8.28725747e+00 -1.73754705e+00 -6.51584148e-01 -6.51584148e-01
 -6.51584148e-01  3.14657427e+02  5.80359274e+03  5.80359274e+03
  5.80359274e+03]
E1 = -667.396897694035  E_coul = 175.79182779088748
Extra cycle  E= -491.605069903148  delta_E= 1.14e-13  |g|= 1.04e-08  |ddm|= 1.03e-08
    CPU time for scf_cycle      0.57 sec, wall time      0.06 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 6.532243662361405
E1 = -667.396897694035  E_coul = 175.79182779088748
init E= -491.605069903148
    CPU time for initialize scf      1.17 sec, wall time      0.05 sec
  HOMO = -0.651584148394233  LUMO = 314.657426591634
  mo_energy =
[-1.16303905e+02 -1.30486443e+01 -8.28725747e+00 -8.28725747e+00
 -8.28725747e+00 -1.73754705e+00 -6.51584148e-01 -6.51584148e-01
 -6.51584148e-01  3.14657427e+02  5.80359274e+03  5.80359274e+03
  5.80359274e+03]
E1 = -667.3968976939008  E_coul = 175.79182779075342
cycle= 1 E= -491.605069903147  delta_E= 1.71e-13  |g|= 1.01e-10  |ddm|= 7.98e-11
    CPU time for cycle= 1      0.21 sec, wall time      0.01 sec
E1 = -667.3968976939008  E_coul = 175.79182779075342
  HOMO = -0.651584148392413  LUMO = 314.657426591626
  mo_energy =
[-1.16303905e+02 -1.30486443e+01 -8.28725747e+00 -8.28725747e+00
 -8.28725747e+00 -1.73754705e+00 -6.51584148e-01 -6.51584148e-01
 -6.51584148e-01  3.14657427e+02  5.80359274e+03  5.80359274e+03
  5.80359274e+03]
E1 = -667.3968976938999  E_coul = 175.7918277907527
Extra cycle  E= -491.605069903147  delta_E= 1.71e-13  |g|= 2.6e-12  |ddm|= 6.83e-13
    CPU time for scf_cycle      1.48 sec, wall time      0.11 sec
exp = [5.99709868e+00 3.41420407e+02 2.04927096e-01 7.22835681e+01
 8.36243764e+00 1.79142575e-01 2.69396474e+03]
grad_E = [ 1.13646955e+00 -5.38568372e-02 -8.33048427e+00  3.38520524e-01
  1.58135746e-01 -2.01431583e+01  5.69374764e-06]
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
number_of_s_exps = 4
number_of_p_exps = 3

exps = np.zeros((number_of_s_exps+number_of_p_exps,2))
#exps[:, 0] = decaying_nums(5)

# S
exps[0,0] = 20.0
exps[1,0] = 9.5045827955887916e+01
exps[2,0] = 4.4881042475048387e+00 
exps[3,0] = 3.9799528004692630e-01
             
# P          
exps[3,0] = 3.0108199280832128e+01
exps[4,0] = 6.1393781325590453e+00
exps[5,0] = 4.8929328703550412e-01

basis =  str(number_of_s_exps)+"s"+str(number_of_p_exps)+"p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc21115.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 24
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 18 14:58:53 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35677784.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 32000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 32000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 32000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  5.42467913028        1
[INPUT] 0    0    [1    /1   ]  327.523810037        1
[INPUT] 0    0    [1    /1   ]  0.22802430033        1
[INPUT] 0    0    [1    /1   ]  67.2401448947        1
[INPUT] 1    0    [1    /1   ]  8.32008245113        1
[INPUT] 1    0    [1    /1   ]  0.172131832578       1
[INPUT] 1    0    [1    /1   ]  2693.96474576        1

nuclear repulsion = 0
number of shells = 7
number of NR pGTOs = 13
number of NR cGTOs = 13
basis = {'Ar': [[0, [5.424679130284797, 1.0]], [0, [327.5238100369182, 1.0]], [0, [0.22802430033005056, 1.0]], [0, [67.24014489465067, 1.0]], [1, [8.320082451128828, 1.0]], [1, [0.17213183257755021, 1.0]], [1, [2693.9647457563415, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [5.42467913]
bas 1, expnt(s) = [327.52381004]
bas 2, expnt(s) = [0.2280243]
bas 3, expnt(s) = [67.24014489]
bas 4, expnt(s) = [8.32008245]
bas 5, expnt(s) = [0.17213183]
bas 6, expnt(s) = [2693.96474576]
CPU time:       289.91
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  1  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]
 [ 0  1  1  1  0 36 37  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 5.42467913e+00 8.98039760e+00 3.27523810e+02 1.94512351e+02
 2.28024300e-01 8.33682861e-01 6.72401449e+01 5.93248303e+01
 8.32008245e+00 4.12234116e+01 1.72131833e-01 3.23452776e-01
 2.69396475e+03 5.66205753e+04]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 15.484335142386243
cond(S) = 6.305112365264535
E1 = -629.4056711384153  E_coul = 149.04140976498113
init E= -480.364261373434
    CPU time for initialize scf      0.23 sec, wall time      0.03 sec
  HOMO = -1.42377919529804  LUMO = 285.176908152318
  mo_energy =
[-1.19305513e+02 -1.54615205e+01 -1.02168671e+01 -1.02168671e+01
 -1.02168671e+01 -2.88429968e+00 -1.42377920e+00 -1.42377920e+00
 -1.42377920e+00  2.85176908e+02  5.80006154e+03  5.80006154e+03
  5.80006154e+03]
E1 = -666.9252717957286  E_coul = 173.96325276695703
cycle= 1 E= -492.962019028772  delta_E= -12.6  |g|= 0.165  |ddm|= 1.16
    CPU time for cycle= 1      0.22 sec, wall time      0.01 sec
diis-norm(errvec)=0.188688
diis-c [-0.03560302  1.        ]
  HOMO = -0.634270080774666  LUMO = 287.585280746106
  mo_energy =
[-1.16939403e+02 -1.36022863e+01 -8.40672745e+00 -8.40672745e+00
 -8.40672745e+00 -1.83471208e+00 -6.34270081e-01 -6.34270081e-01
 -6.34270081e-01  2.87585281e+02  5.80278404e+03  5.80278404e+03
  5.80278404e+03]
E1 = -666.9224658222109  E_coul = 173.9604241734492
cycle= 2 E= -492.962041648762  delta_E= -2.26e-05  |g|= 0.000614  |ddm|= 0.00121
    CPU time for cycle= 2      0.12 sec, wall time      0.01 sec
diis-norm(errvec)=0.000439271
diis-c [-1.64788231e-07 -8.90308034e-04  1.00089031e+00]
  HOMO = -0.634272055031745  LUMO = 287.584448160953
  mo_energy =
[-1.16940380e+02 -1.36023842e+01 -8.40683806e+00 -8.40683806e+00
 -8.40683806e+00 -1.83471580e+00 -6.34272055e-01 -6.34272055e-01
 -6.34272055e-01  2.87584448e+02  5.80278090e+03  5.80278090e+03
  5.80278090e+03]
E1 = -666.9224484868745  E_coul = 173.9604068374914
cycle= 3 E= -492.962041649383  delta_E= -6.21e-10  |g|= 3.82e-06  |ddm|= 6.51e-06
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
E1 = -666.9224484868745  E_coul = 173.9604068374914
  HOMO = -0.634272060102818  LUMO = 287.584443841893
  mo_energy =
[-1.16940385e+02 -1.36023847e+01 -8.40683862e+00 -8.40683862e+00
 -8.40683862e+00 -1.83471581e+00 -6.34272060e-01 -6.34272060e-01
 -6.34272060e-01  2.87584444e+02  5.80278088e+03  5.80278088e+03
  5.80278088e+03]
E1 = -666.9224483866475  E_coul = 173.96040673726404
Extra cycle  E= -492.962041649383  delta_E= -3.41e-13  |g|= 3e-08  |ddm|= 3.88e-08
    CPU time for scf_cycle      0.59 sec, wall time      0.07 sec
exp = [5.42467913e+00 3.27523810e+02 2.28024300e-01 6.72401449e+01
 8.32008245e+00 1.72131833e-01 2.69396475e+03]
E = -492.9620416493834
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
number_of_s_exps = 4
number_of_p_exps = 3

exps = np.zeros((number_of_s_exps+number_of_p_exps,2))
#exps[:, 0] = decaying_nums(5)

# S
exps[0,0] = 20.0
exps[1,0] = 9.5045827955887916e+01
exps[2,0] = 4.4881042475048387e+00 
exps[3,0] = 3.9799528004692630e-01
             
# P          
exps[3,0] = 3.0108199280832128e+01
exps[4,0] = 6.1393781325590453e+00
exps[5,0] = 4.8929328703550412e-01

basis =  str(number_of_s_exps)+"s"+str(number_of_p_exps)+"p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc21115.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 24
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 18 14:58:53 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35677784.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 32000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 32000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 32000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  5.42467913028        1
[INPUT] 0    0    [1    /1   ]  327.523810037        1
[INPUT] 0    0    [1    /1   ]  0.22802430033        1
[INPUT] 0    0    [1    /1   ]  67.2401448947        1
[INPUT] 1    0    [1    /1   ]  8.32008245113        1
[INPUT] 1    0    [1    /1   ]  0.172131832578       1
[INPUT] 1    0    [1    /1   ]  2693.96474576        1

nuclear repulsion = 0
number of shells = 7
number of NR pGTOs = 13
number of NR cGTOs = 13
basis = {'Ar': [[0, [5.424679130284797, 1.0]], [0, [327.5238100369182, 1.0]], [0, [0.22802430033005056, 1.0]], [0, [67.24014489465067, 1.0]], [1, [8.320082451128828, 1.0]], [1, [0.17213183257755021, 1.0]], [1, [2693.9647457563415, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [5.42467913]
bas 1, expnt(s) = [327.52381004]
bas 2, expnt(s) = [0.2280243]
bas 3, expnt(s) = [67.24014489]
bas 4, expnt(s) = [8.32008245]
bas 5, expnt(s) = [0.17213183]
bas 6, expnt(s) = [2693.96474576]
CPU time:       290.58
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  1  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]
 [ 0  1  1  1  0 36 37  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 5.42467913e+00 8.98039760e+00 3.27523810e+02 1.94512351e+02
 2.28024300e-01 8.33682861e-01 6.72401449e+01 5.93248303e+01
 8.32008245e+00 4.12234116e+01 1.72131833e-01 3.23452776e-01
 2.69396475e+03 5.66205753e+04]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 15.484335142386243
cond(S) = 6.305112365264535
E1 = -629.4056711384153  E_coul = 149.04140976498113
init E= -480.364261373434
    CPU time for initialize scf      0.20 sec, wall time      0.02 sec
  HOMO = -1.42377919529804  LUMO = 285.176908152318
  mo_energy =
[-1.19305513e+02 -1.54615205e+01 -1.02168671e+01 -1.02168671e+01
 -1.02168671e+01 -2.88429968e+00 -1.42377920e+00 -1.42377920e+00
 -1.42377920e+00  2.85176908e+02  5.80006154e+03  5.80006154e+03
  5.80006154e+03]
E1 = -666.9252717957286  E_coul = 173.96325276695703
cycle= 1 E= -492.962019028772  delta_E= -12.6  |g|= 0.165  |ddm|= 1.16
    CPU time for cycle= 1      0.22 sec, wall time      0.01 sec
diis-norm(errvec)=0.188688
diis-c [-0.03560302  1.        ]
  HOMO = -0.634270080774666  LUMO = 287.585280746106
  mo_energy =
[-1.16939403e+02 -1.36022863e+01 -8.40672745e+00 -8.40672745e+00
 -8.40672745e+00 -1.83471208e+00 -6.34270081e-01 -6.34270081e-01
 -6.34270081e-01  2.87585281e+02  5.80278404e+03  5.80278404e+03
  5.80278404e+03]
E1 = -666.9224658222109  E_coul = 173.9604241734492
cycle= 2 E= -492.962041648762  delta_E= -2.26e-05  |g|= 0.000614  |ddm|= 0.00121
    CPU time for cycle= 2      0.13 sec, wall time      0.01 sec
diis-norm(errvec)=0.000439271
diis-c [-1.64788231e-07 -8.90308034e-04  1.00089031e+00]
  HOMO = -0.634272055031745  LUMO = 287.584448160953
  mo_energy =
[-1.16940380e+02 -1.36023842e+01 -8.40683806e+00 -8.40683806e+00
 -8.40683806e+00 -1.83471580e+00 -6.34272055e-01 -6.34272055e-01
 -6.34272055e-01  2.87584448e+02  5.80278090e+03  5.80278090e+03
  5.80278090e+03]
E1 = -666.9224484868745  E_coul = 173.9604068374914
cycle= 3 E= -492.962041649383  delta_E= -6.21e-10  |g|= 3.82e-06  |ddm|= 6.51e-06
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
E1 = -666.9224484868745  E_coul = 173.9604068374914
  HOMO = -0.634272060102818  LUMO = 287.584443841893
  mo_energy =
[-1.16940385e+02 -1.36023847e+01 -8.40683862e+00 -8.40683862e+00
 -8.40683862e+00 -1.83471581e+00 -6.34272060e-01 -6.34272060e-01
 -6.34272060e-01  2.87584444e+02  5.80278088e+03  5.80278088e+03
  5.80278088e+03]
E1 = -666.9224483866475  E_coul = 173.96040673726404
Extra cycle  E= -492.962041649383  delta_E= -3.41e-13  |g|= 3e-08  |ddm|= 3.88e-08
    CPU time for scf_cycle      0.57 sec, wall time      0.06 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 6.305112365264535
E1 = -666.9224483866475  E_coul = 173.96040673726404
init E= -492.962041649383
    CPU time for initialize scf      1.24 sec, wall time      0.05 sec
  HOMO = -0.634272060130507  LUMO = 287.584443815117
  mo_energy =
[-1.16940385e+02 -1.36023847e+01 -8.40683862e+00 -8.40683862e+00
 -8.40683862e+00 -1.83471581e+00 -6.34272060e-01 -6.34272060e-01
 -6.34272060e-01  2.87584444e+02  5.80278088e+03  5.80278088e+03
  5.80278088e+03]
E1 = -666.9224483859596  E_coul = 173.96040673657552
cycle= 1 E= -492.962041649384  delta_E= -6.25e-13  |g|= 2.59e-10  |ddm|= 2.91e-10
    CPU time for cycle= 1      0.22 sec, wall time      0.01 sec
E1 = -666.9224483859596  E_coul = 173.96040673657552
  HOMO = -0.634272060129653  LUMO = 287.584443814963
  mo_energy =
[-1.16940385e+02 -1.36023847e+01 -8.40683862e+00 -8.40683862e+00
 -8.40683862e+00 -1.83471581e+00 -6.34272060e-01 -6.34272060e-01
 -6.34272060e-01  2.87584444e+02  5.80278088e+03  5.80278088e+03
  5.80278088e+03]
E1 = -666.9224483859545  E_coul = 173.96040673657083
Extra cycle  E= -492.962041649384  delta_E= 3.98e-13  |g|= 3.44e-12  |ddm|= 2.32e-12
    CPU time for scf_cycle      1.53 sec, wall time      0.12 sec
exp = [5.42467913e+00 3.27523810e+02 2.28024300e-01 6.72401449e+01
 8.32008245e+00 1.72131833e-01 2.69396475e+03]
grad_E = [ 6.94651491e-01 -5.11913535e-02 -6.93437777e+00  2.63707613e-01
  8.48775115e-02 -2.06186789e+01  5.64417358e-06]
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
number_of_s_exps = 4
number_of_p_exps = 3

exps = np.zeros((number_of_s_exps+number_of_p_exps,2))
#exps[:, 0] = decaying_nums(5)

# S
exps[0,0] = 20.0
exps[1,0] = 9.5045827955887916e+01
exps[2,0] = 4.4881042475048387e+00 
exps[3,0] = 3.9799528004692630e-01
             
# P          
exps[3,0] = 3.0108199280832128e+01
exps[4,0] = 6.1393781325590453e+00
exps[5,0] = 4.8929328703550412e-01

basis =  str(number_of_s_exps)+"s"+str(number_of_p_exps)+"p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc21115.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 24
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 18 14:58:56 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35677784.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 32000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 32000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 32000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  4.36034838692        1
[INPUT] 0    0    [1    /1   ]  314.320363495        1
[INPUT] 0    0    [1    /1   ]  0.234242100946       1
[INPUT] 0    0    [1    /1   ]  59.3338532113        1
[INPUT] 1    0    [1    /1   ]  8.32986038061        1
[INPUT] 1    0    [1    /1   ]  0.170157051009       1
[INPUT] 1    0    [1    /1   ]  2693.9647489         1

nuclear repulsion = 0
number of shells = 7
number of NR pGTOs = 13
number of NR cGTOs = 13
basis = {'Ar': [[0, [4.360348386917368, 1.0]], [0, [314.320363495267, 1.0]], [0, [0.23424210094578293, 1.0]], [0, [59.33385321126237, 1.0]], [1, [8.329860380610459, 1.0]], [1, [0.1701570510091686, 1.0]], [1, [2693.9647489040563, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [4.36034839]
bas 1, expnt(s) = [314.3203635]
bas 2, expnt(s) = [0.2342421]
bas 3, expnt(s) = [59.33385321]
bas 4, expnt(s) = [8.32986038]
bas 5, expnt(s) = [0.17015705]
bas 6, expnt(s) = [2693.9647489]
CPU time:       295.21
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  1  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]
 [ 0  1  1  1  0 36 37  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 4.36034839e+00 7.62352655e+00 3.14320363e+02 1.88601183e+02
 2.34242101e-01 8.50675138e-01 5.93338532e+01 5.40122089e+01
 8.32986038e+00 4.12839787e+01 1.70157051e-01 3.18820934e-01
 2.69396475e+03 5.66205754e+04]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 15.482674638135588
cond(S) = 5.6873837732340125
E1 = -629.2999219987144  E_coul = 147.3593739795396
init E= -481.940548019175
    CPU time for initialize scf      0.19 sec, wall time      0.02 sec
  HOMO = -1.41282540867554  LUMO = 248.387510374766
  mo_energy =
[-1.19930366e+02 -1.58245472e+01 -1.03588880e+01 -1.03588880e+01
 -1.03588880e+01 -2.86195391e+00 -1.41282541e+00 -1.41282541e+00
 -1.41282541e+00  2.48387510e+02  5.79983377e+03  5.79983377e+03
  5.79983377e+03]
E1 = -664.7112918266583  E_coul = 170.65787287409756
cycle= 1 E= -494.053418952561  delta_E= -12.1  |g|= 0.258  |ddm|=  1.2
    CPU time for cycle= 1      0.22 sec, wall time      0.01 sec
diis-norm(errvec)=0.225665
diis-c [-0.05092488  1.        ]
  HOMO = -0.633355906542947  LUMO = 250.406182605322
  mo_energy =
[-1.17961852e+02 -1.40657536e+01 -8.64509452e+00 -8.64509452e+00
 -8.64509452e+00 -1.83486844e+00 -6.33355907e-01 -6.33355907e-01
 -6.33355907e-01  2.50406183e+02  5.80142135e+03  5.80142135e+03
  5.80142135e+03]
E1 = -664.7040659330903  E_coul = 170.65054084936077
cycle= 2 E= -494.05352508373  delta_E= -0.000106  |g|= 0.00165  |ddm|= 0.00276
    CPU time for cycle= 2      0.14 sec, wall time      0.01 sec
diis-norm(errvec)=0.00131936
diis-c [-1.08204850e-06 -3.60937449e-03  1.00360937e+00]
  HOMO = -0.633359547445132  LUMO = 250.404135265818
  mo_energy =
[-1.17964380e+02 -1.40659576e+01 -8.64540494e+00 -8.64540494e+00
 -8.64540494e+00 -1.83487461e+00 -6.33359547e-01 -6.33359547e-01
 -6.33359547e-01  2.50404135e+02  5.80141364e+03  5.80141364e+03
  5.80141364e+03]
E1 = -664.7040182299279  E_coul = 170.6504931410051
cycle= 3 E= -494.053525088923  delta_E= -5.19e-09  |g|= 8.23e-06  |ddm|= 1.84e-05
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=8.09246e-06
diis-c [-1.50811838e-11  1.13487730e-05 -6.39759964e-03  1.00638625e+00]
  HOMO = -0.633359551133904  LUMO = 250.404130774214
  mo_energy =
[-1.17964387e+02 -1.40659582e+01 -8.64540599e+00 -8.64540599e+00
 -8.64540599e+00 -1.83487462e+00 -6.33359551e-01 -6.33359551e-01
 -6.33359551e-01  2.50404131e+02  5.80141362e+03  5.80141362e+03
  5.80141362e+03]
E1 = -664.7040180754078  E_coul = 170.6504929864851
cycle= 4 E= -494.053525088923  delta_E= 1.14e-13  |g|= 3e-08  |ddm|= 7.77e-08
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
E1 = -664.7040180754078  E_coul = 170.6504929864851
  HOMO = -0.633359551115062  LUMO = 250.40413080728
  mo_energy =
[-1.17964387e+02 -1.40659582e+01 -8.64540599e+00 -8.64540599e+00
 -8.64540599e+00 -1.83487462e+00 -6.33359551e-01 -6.33359551e-01
 -6.33359551e-01  2.50404131e+02  5.80141362e+03  5.80141362e+03
  5.80141362e+03]
E1 = -664.7040180758459  E_coul = 170.6504929869227
Extra cycle  E= -494.053525088923  delta_E= -4.55e-13  |g|= 3.01e-10  |ddm|= 1.61e-10
    CPU time for scf_cycle      0.57 sec, wall time      0.07 sec
exp = [4.36034839e+00 3.14320363e+02 2.34242101e-01 5.93338532e+01
 8.32986038e+00 1.70157051e-01 2.69396475e+03]
E = -494.05352508892315
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
number_of_s_exps = 4
number_of_p_exps = 3

exps = np.zeros((number_of_s_exps+number_of_p_exps,2))
#exps[:, 0] = decaying_nums(5)

# S
exps[0,0] = 20.0
exps[1,0] = 9.5045827955887916e+01
exps[2,0] = 4.4881042475048387e+00 
exps[3,0] = 3.9799528004692630e-01
             
# P          
exps[3,0] = 3.0108199280832128e+01
exps[4,0] = 6.1393781325590453e+00
exps[5,0] = 4.8929328703550412e-01

basis =  str(number_of_s_exps)+"s"+str(number_of_p_exps)+"p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc21115.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 24
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 18 14:58:56 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35677784.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 32000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 32000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 32000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  4.36034838692        1
[INPUT] 0    0    [1    /1   ]  314.320363495        1
[INPUT] 0    0    [1    /1   ]  0.234242100946       1
[INPUT] 0    0    [1    /1   ]  59.3338532113        1
[INPUT] 1    0    [1    /1   ]  8.32986038061        1
[INPUT] 1    0    [1    /1   ]  0.170157051009       1
[INPUT] 1    0    [1    /1   ]  2693.9647489         1

nuclear repulsion = 0
number of shells = 7
number of NR pGTOs = 13
number of NR cGTOs = 13
basis = {'Ar': [[0, [4.360348386917368, 1.0]], [0, [314.320363495267, 1.0]], [0, [0.23424210094578293, 1.0]], [0, [59.33385321126237, 1.0]], [1, [8.329860380610459, 1.0]], [1, [0.1701570510091686, 1.0]], [1, [2693.9647489040563, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [4.36034839]
bas 1, expnt(s) = [314.3203635]
bas 2, expnt(s) = [0.2342421]
bas 3, expnt(s) = [59.33385321]
bas 4, expnt(s) = [8.32986038]
bas 5, expnt(s) = [0.17015705]
bas 6, expnt(s) = [2693.9647489]
CPU time:       295.87
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  1  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]
 [ 0  1  1  1  0 36 37  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 4.36034839e+00 7.62352655e+00 3.14320363e+02 1.88601183e+02
 2.34242101e-01 8.50675138e-01 5.93338532e+01 5.40122089e+01
 8.32986038e+00 4.12839787e+01 1.70157051e-01 3.18820934e-01
 2.69396475e+03 5.66205754e+04]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 15.482674638135588
cond(S) = 5.6873837732340125
E1 = -629.2999219987144  E_coul = 147.3593739795396
init E= -481.940548019175
    CPU time for initialize scf      0.19 sec, wall time      0.02 sec
  HOMO = -1.41282540867554  LUMO = 248.387510374766
  mo_energy =
[-1.19930366e+02 -1.58245472e+01 -1.03588880e+01 -1.03588880e+01
 -1.03588880e+01 -2.86195391e+00 -1.41282541e+00 -1.41282541e+00
 -1.41282541e+00  2.48387510e+02  5.79983377e+03  5.79983377e+03
  5.79983377e+03]
E1 = -664.7112918266583  E_coul = 170.65787287409756
cycle= 1 E= -494.053418952561  delta_E= -12.1  |g|= 0.258  |ddm|=  1.2
    CPU time for cycle= 1      0.22 sec, wall time      0.01 sec
diis-norm(errvec)=0.225665
diis-c [-0.05092488  1.        ]
  HOMO = -0.633355906542947  LUMO = 250.406182605322
  mo_energy =
[-1.17961852e+02 -1.40657536e+01 -8.64509452e+00 -8.64509452e+00
 -8.64509452e+00 -1.83486844e+00 -6.33355907e-01 -6.33355907e-01
 -6.33355907e-01  2.50406183e+02  5.80142135e+03  5.80142135e+03
  5.80142135e+03]
E1 = -664.7040659330903  E_coul = 170.65054084936077
cycle= 2 E= -494.05352508373  delta_E= -0.000106  |g|= 0.00165  |ddm|= 0.00276
    CPU time for cycle= 2      0.14 sec, wall time      0.01 sec
diis-norm(errvec)=0.00131936
diis-c [-1.08204850e-06 -3.60937449e-03  1.00360937e+00]
  HOMO = -0.633359547445132  LUMO = 250.404135265818
  mo_energy =
[-1.17964380e+02 -1.40659576e+01 -8.64540494e+00 -8.64540494e+00
 -8.64540494e+00 -1.83487461e+00 -6.33359547e-01 -6.33359547e-01
 -6.33359547e-01  2.50404135e+02  5.80141364e+03  5.80141364e+03
  5.80141364e+03]
E1 = -664.7040182299279  E_coul = 170.6504931410051
cycle= 3 E= -494.053525088923  delta_E= -5.19e-09  |g|= 8.23e-06  |ddm|= 1.84e-05
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=8.09246e-06
diis-c [-1.50811838e-11  1.13487730e-05 -6.39759964e-03  1.00638625e+00]
  HOMO = -0.633359551133904  LUMO = 250.404130774214
  mo_energy =
[-1.17964387e+02 -1.40659582e+01 -8.64540599e+00 -8.64540599e+00
 -8.64540599e+00 -1.83487462e+00 -6.33359551e-01 -6.33359551e-01
 -6.33359551e-01  2.50404131e+02  5.80141362e+03  5.80141362e+03
  5.80141362e+03]
E1 = -664.7040180754078  E_coul = 170.6504929864851
cycle= 4 E= -494.053525088923  delta_E= 1.14e-13  |g|= 3e-08  |ddm|= 7.77e-08
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
E1 = -664.7040180754078  E_coul = 170.6504929864851
  HOMO = -0.633359551115062  LUMO = 250.40413080728
  mo_energy =
[-1.17964387e+02 -1.40659582e+01 -8.64540599e+00 -8.64540599e+00
 -8.64540599e+00 -1.83487462e+00 -6.33359551e-01 -6.33359551e-01
 -6.33359551e-01  2.50404131e+02  5.80141362e+03  5.80141362e+03
  5.80141362e+03]
E1 = -664.7040180758459  E_coul = 170.6504929869227
Extra cycle  E= -494.053525088923  delta_E= -4.55e-13  |g|= 3.01e-10  |ddm|= 1.61e-10
    CPU time for scf_cycle      0.57 sec, wall time      0.07 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 5.6873837732340125
E1 = -664.7040180758459  E_coul = 170.6504929869227
init E= -494.053525088923
    CPU time for initialize scf      1.14 sec, wall time      0.05 sec
  HOMO = -0.633359551115218  LUMO = 250.404130807549
  mo_energy =
[-1.17964387e+02 -1.40659582e+01 -8.64540599e+00 -8.64540599e+00
 -8.64540599e+00 -1.83487462e+00 -6.33359551e-01 -6.33359551e-01
 -6.33359551e-01  2.50404131e+02  5.80141362e+03  5.80141362e+03
  5.80141362e+03]
E1 = -664.7040180758489  E_coul = 170.65049298692563
cycle= 1 E= -494.053525088923  delta_E= -1.14e-13  |g|= 3.56e-12  |ddm|= 1.58e-12
    CPU time for cycle= 1      0.20 sec, wall time      0.01 sec
E1 = -664.7040180758489  E_coul = 170.65049298692563
  HOMO = -0.633359551113573  LUMO = 250.404130807551
  mo_energy =
[-1.17964387e+02 -1.40659582e+01 -8.64540599e+00 -8.64540599e+00
 -8.64540599e+00 -1.83487462e+00 -6.33359551e-01 -6.33359551e-01
 -6.33359551e-01  2.50404131e+02  5.80141362e+03  5.80141362e+03
  5.80141362e+03]
E1 = -664.7040180758487  E_coul = 170.65049298692577
Extra cycle  E= -494.053525088923  delta_E= 3.41e-13  |g|= 4.15e-12  |ddm|= 1.83e-14
    CPU time for scf_cycle      1.44 sec, wall time      0.11 sec
exp = [4.36034839e+00 3.14320363e+02 2.34242101e-01 5.93338532e+01
 8.32986038e+00 1.70157051e-01 2.69396475e+03]
grad_E = [-3.23803167e-01 -3.83472328e-02 -6.07456002e+00  9.89734414e-02
  4.64813992e-03 -2.09002605e+01  5.69078707e-06]
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
number_of_s_exps = 4
number_of_p_exps = 3

exps = np.zeros((number_of_s_exps+number_of_p_exps,2))
#exps[:, 0] = decaying_nums(5)

# S
exps[0,0] = 20.0
exps[1,0] = 9.5045827955887916e+01
exps[2,0] = 4.4881042475048387e+00 
exps[3,0] = 3.9799528004692630e-01
             
# P          
exps[3,0] = 3.0108199280832128e+01
exps[4,0] = 6.1393781325590453e+00
exps[5,0] = 4.8929328703550412e-01

basis =  str(number_of_s_exps)+"s"+str(number_of_p_exps)+"p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc21115.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 24
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 18 14:58:59 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35677784.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 32000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 32000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 32000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  4.56224636106        1
[INPUT] 0    0    [1    /1   ]  321.67072129         1
[INPUT] 0    0    [1    /1   ]  0.241369437291       1
[INPUT] 0    0    [1    /1   ]  59.1505896538        1
[INPUT] 1    0    [1    /1   ]  8.3008111452         1
[INPUT] 1    0    [1    /1   ]  0.168091701578       1
[INPUT] 1    0    [1    /1   ]  2693.96474899        1

nuclear repulsion = 0
number of shells = 7
number of NR pGTOs = 13
number of NR cGTOs = 13
basis = {'Ar': [[0, [4.562246361059726, 1.0]], [0, [321.67072129029657, 1.0]], [0, [0.24136943729135613, 1.0]], [0, [59.150589653838324, 1.0]], [1, [8.300811145202529, 1.0]], [1, [0.1680917015781701, 1.0]], [1, [2693.9647489862455, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [4.56224636]
bas 1, expnt(s) = [321.67072129]
bas 2, expnt(s) = [0.24136944]
bas 3, expnt(s) = [59.15058965]
bas 4, expnt(s) = [8.30081115]
bas 5, expnt(s) = [0.1680917]
bas 6, expnt(s) = [2693.96474899]
CPU time:       300.37
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  1  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]
 [ 0  1  1  1  0 36 37  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 4.56224636e+00 7.88676816e+00 3.21670721e+02 1.91899425e+02
 2.41369437e-01 8.70014985e-01 5.91505897e+01 5.38870405e+01
 8.30081115e+00 4.11040920e+01 1.68091702e-01 3.13991025e-01
 2.69396475e+03 5.66205754e+04]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 15.46407204598426
cond(S) = 5.638562535452523
E1 = -630.0542535193924  E_coul = 147.60613401262043
init E= -482.448119506772
    CPU time for initialize scf      0.19 sec, wall time      0.02 sec
  HOMO = -1.40595759888475  LUMO = 253.501493358476
  mo_energy =
[-1.20037631e+02 -1.58153324e+01 -1.03294766e+01 -1.03294766e+01
 -1.03294766e+01 -2.91262661e+00 -1.40595760e+00 -1.40595760e+00
 -1.40595760e+00  2.53501493e+02  5.79992351e+03  5.79992351e+03
  5.79992351e+03]
E1 = -665.3718291777556  E_coul = 170.9996610358176
cycle= 1 E= -494.372168141938  delta_E= -11.9  |g|= 0.245  |ddm|= 1.21
    CPU time for cycle= 1      0.22 sec, wall time      0.01 sec
diis-norm(errvec)=0.221076
diis-c [-0.04887438  1.        ]
  HOMO = -0.627229172340563  LUMO = 255.52091282536
  mo_energy =
[-1.18053086e+02 -1.40482855e+01 -8.61147474e+00 -8.61147474e+00
 -8.61147474e+00 -1.86881428e+00 -6.27229172e-01 -6.27229172e-01
 -6.27229172e-01  2.55520913e+02  5.80150750e+03  5.80150750e+03
  5.80150750e+03]
E1 = -665.3650105733116  E_coul = 170.99275287911178
cycle= 2 E= -494.3722576942  delta_E= -8.96e-05  |g|= 0.00144  |ddm|= 0.00249
    CPU time for cycle= 2      0.13 sec, wall time      0.01 sec
diis-norm(errvec)=0.00112268
diis-c [-7.97356024e-07 -3.08754691e-03  1.00308755e+00]
  HOMO = -0.627232387377263  LUMO = 255.518809619881
  mo_energy =
[-1.18055526e+02 -1.40484775e+01 -8.61174728e+00 -8.61174728e+00
 -8.61174728e+00 -1.86882046e+00 -6.27232387e-01 -6.27232387e-01
 -6.27232387e-01  2.55518810e+02  5.80149946e+03  5.80149946e+03
  5.80149946e+03]
E1 = -665.3649665919187  E_coul = 170.99270889390556
cycle= 3 E= -494.372257698013  delta_E= -3.81e-09  |g|= 6.69e-06  |ddm|= 1.58e-05
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=6.10528e-06
diis-c [-8.95182933e-12  9.00998094e-06 -5.63583408e-03  1.00562682e+00]
  HOMO = -0.627232391458656  LUMO = 255.518803553564
  mo_energy =
[-1.18055534e+02 -1.40484781e+01 -8.61174825e+00 -8.61174825e+00
 -8.61174825e+00 -1.86882047e+00 -6.27232391e-01 -6.27232391e-01
 -6.27232391e-01  2.55518804e+02  5.80149943e+03  5.80149943e+03
  5.80149943e+03]
E1 = -665.3649664326612  E_coul = 170.9927087346476
cycle= 4 E= -494.372257698014  delta_E= -3.98e-13  |g|= 2.43e-08  |ddm|= 6.72e-08
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
E1 = -665.3649664326612  E_coul = 170.9927087346476
  HOMO = -0.62723239144603  LUMO = 255.518803572165
  mo_energy =
[-1.18055534e+02 -1.40484781e+01 -8.61174825e+00 -8.61174825e+00
 -8.61174825e+00 -1.86882047e+00 -6.27232391e-01 -6.27232391e-01
 -6.27232391e-01  2.55518804e+02  5.80149943e+03  5.80149943e+03
  5.80149943e+03]
E1 = -665.36496643281  E_coul = 170.99270873479696
Extra cycle  E= -494.372257698013  delta_E= 5.12e-13  |g|= 2.6e-10  |ddm|= 1.28e-10
    CPU time for scf_cycle      0.58 sec, wall time      0.08 sec
exp = [4.56224636e+00 3.21670721e+02 2.41369437e-01 5.91505897e+01
 8.30081115e+00 1.68091702e-01 2.69396475e+03]
E = -494.372257698013
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
number_of_s_exps = 4
number_of_p_exps = 3

exps = np.zeros((number_of_s_exps+number_of_p_exps,2))
#exps[:, 0] = decaying_nums(5)

# S
exps[0,0] = 20.0
exps[1,0] = 9.5045827955887916e+01
exps[2,0] = 4.4881042475048387e+00 
exps[3,0] = 3.9799528004692630e-01
             
# P          
exps[3,0] = 3.0108199280832128e+01
exps[4,0] = 6.1393781325590453e+00
exps[5,0] = 4.8929328703550412e-01

basis =  str(number_of_s_exps)+"s"+str(number_of_p_exps)+"p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc21115.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 24
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 18 14:58:59 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35677784.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 32000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 32000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 32000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  4.56224636106        1
[INPUT] 0    0    [1    /1   ]  321.67072129         1
[INPUT] 0    0    [1    /1   ]  0.241369437291       1
[INPUT] 0    0    [1    /1   ]  59.1505896538        1
[INPUT] 1    0    [1    /1   ]  8.3008111452         1
[INPUT] 1    0    [1    /1   ]  0.168091701578       1
[INPUT] 1    0    [1    /1   ]  2693.96474899        1

nuclear repulsion = 0
number of shells = 7
number of NR pGTOs = 13
number of NR cGTOs = 13
basis = {'Ar': [[0, [4.562246361059726, 1.0]], [0, [321.67072129029657, 1.0]], [0, [0.24136943729135613, 1.0]], [0, [59.150589653838324, 1.0]], [1, [8.300811145202529, 1.0]], [1, [0.1680917015781701, 1.0]], [1, [2693.9647489862455, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [4.56224636]
bas 1, expnt(s) = [321.67072129]
bas 2, expnt(s) = [0.24136944]
bas 3, expnt(s) = [59.15058965]
bas 4, expnt(s) = [8.30081115]
bas 5, expnt(s) = [0.1680917]
bas 6, expnt(s) = [2693.96474899]
CPU time:       301.05
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  1  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]
 [ 0  1  1  1  0 36 37  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 4.56224636e+00 7.88676816e+00 3.21670721e+02 1.91899425e+02
 2.41369437e-01 8.70014985e-01 5.91505897e+01 5.38870405e+01
 8.30081115e+00 4.11040920e+01 1.68091702e-01 3.13991025e-01
 2.69396475e+03 5.66205754e+04]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 15.46407204598426
cond(S) = 5.638562535452523
E1 = -630.0542535193924  E_coul = 147.60613401262043
init E= -482.448119506772
    CPU time for initialize scf      0.19 sec, wall time      0.02 sec
  HOMO = -1.40595759888475  LUMO = 253.501493358476
  mo_energy =
[-1.20037631e+02 -1.58153324e+01 -1.03294766e+01 -1.03294766e+01
 -1.03294766e+01 -2.91262661e+00 -1.40595760e+00 -1.40595760e+00
 -1.40595760e+00  2.53501493e+02  5.79992351e+03  5.79992351e+03
  5.79992351e+03]
E1 = -665.3718291777556  E_coul = 170.9996610358176
cycle= 1 E= -494.372168141938  delta_E= -11.9  |g|= 0.245  |ddm|= 1.21
    CPU time for cycle= 1      0.22 sec, wall time      0.01 sec
diis-norm(errvec)=0.221076
diis-c [-0.04887438  1.        ]
  HOMO = -0.627229172340563  LUMO = 255.52091282536
  mo_energy =
[-1.18053086e+02 -1.40482855e+01 -8.61147474e+00 -8.61147474e+00
 -8.61147474e+00 -1.86881428e+00 -6.27229172e-01 -6.27229172e-01
 -6.27229172e-01  2.55520913e+02  5.80150750e+03  5.80150750e+03
  5.80150750e+03]
E1 = -665.3650105733116  E_coul = 170.99275287911178
cycle= 2 E= -494.3722576942  delta_E= -8.96e-05  |g|= 0.00144  |ddm|= 0.00249
    CPU time for cycle= 2      0.14 sec, wall time      0.01 sec
diis-norm(errvec)=0.00112268
diis-c [-7.97356024e-07 -3.08754691e-03  1.00308755e+00]
  HOMO = -0.627232387377263  LUMO = 255.518809619881
  mo_energy =
[-1.18055526e+02 -1.40484775e+01 -8.61174728e+00 -8.61174728e+00
 -8.61174728e+00 -1.86882046e+00 -6.27232387e-01 -6.27232387e-01
 -6.27232387e-01  2.55518810e+02  5.80149946e+03  5.80149946e+03
  5.80149946e+03]
E1 = -665.3649665919187  E_coul = 170.99270889390556
cycle= 3 E= -494.372257698013  delta_E= -3.81e-09  |g|= 6.69e-06  |ddm|= 1.58e-05
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=6.10528e-06
diis-c [-8.95182933e-12  9.00998094e-06 -5.63583408e-03  1.00562682e+00]
  HOMO = -0.627232391458656  LUMO = 255.518803553564
  mo_energy =
[-1.18055534e+02 -1.40484781e+01 -8.61174825e+00 -8.61174825e+00
 -8.61174825e+00 -1.86882047e+00 -6.27232391e-01 -6.27232391e-01
 -6.27232391e-01  2.55518804e+02  5.80149943e+03  5.80149943e+03
  5.80149943e+03]
E1 = -665.3649664326612  E_coul = 170.9927087346476
cycle= 4 E= -494.372257698014  delta_E= -3.98e-13  |g|= 2.43e-08  |ddm|= 6.72e-08
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
E1 = -665.3649664326612  E_coul = 170.9927087346476
  HOMO = -0.62723239144603  LUMO = 255.518803572165
  mo_energy =
[-1.18055534e+02 -1.40484781e+01 -8.61174825e+00 -8.61174825e+00
 -8.61174825e+00 -1.86882047e+00 -6.27232391e-01 -6.27232391e-01
 -6.27232391e-01  2.55518804e+02  5.80149943e+03  5.80149943e+03
  5.80149943e+03]
E1 = -665.36496643281  E_coul = 170.99270873479696
Extra cycle  E= -494.372257698013  delta_E= 5.12e-13  |g|= 2.6e-10  |ddm|= 1.28e-10
    CPU time for scf_cycle      0.58 sec, wall time      0.08 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 5.638562535452523
E1 = -665.36496643281  E_coul = 170.99270873479696
init E= -494.372257698013
    CPU time for initialize scf      1.20 sec, wall time      0.05 sec
  HOMO = -0.627232391447588  LUMO = 255.518803572328
  mo_energy =
[-1.18055534e+02 -1.40484781e+01 -8.61174825e+00 -8.61174825e+00
 -8.61174825e+00 -1.86882047e+00 -6.27232391e-01 -6.27232391e-01
 -6.27232391e-01  2.55518804e+02  5.80149943e+03  5.80149943e+03
  5.80149943e+03]
E1 = -665.3649664328111  E_coul = 170.9927087347978
cycle= 1 E= -494.372257698013  delta_E= -2.84e-13  |g|= 4.11e-12  |ddm|= 1.45e-12
    CPU time for cycle= 1      0.22 sec, wall time      0.01 sec
E1 = -665.3649664328111  E_coul = 170.9927087347978
  HOMO = -0.627232391446335  LUMO = 255.518803572329
  mo_energy =
[-1.18055534e+02 -1.40484781e+01 -8.61174825e+00 -8.61174825e+00
 -8.61174825e+00 -1.86882047e+00 -6.27232391e-01 -6.27232391e-01
 -6.27232391e-01  2.55518804e+02  5.80149943e+03  5.80149943e+03
  5.80149943e+03]
E1 = -665.3649664328109  E_coul = 170.9927087347977
Extra cycle  E= -494.372257698013  delta_E= 1.14e-13  |g|= 3.26e-12  |ddm|= 1.62e-14
    CPU time for scf_cycle      1.48 sec, wall time      0.12 sec
exp = [4.56224636e+00 3.21670721e+02 2.41369437e-01 5.91505897e+01
 8.30081115e+00 1.68091702e-01 2.69396475e+03]
grad_E = [-9.98984519e-02 -3.28522887e-02 -5.89338581e+00  6.87754401e-02
 -5.74366695e-03 -2.09900845e+01  5.64327227e-06]
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
number_of_s_exps = 4
number_of_p_exps = 3

exps = np.zeros((number_of_s_exps+number_of_p_exps,2))
#exps[:, 0] = decaying_nums(5)

# S
exps[0,0] = 20.0
exps[1,0] = 9.5045827955887916e+01
exps[2,0] = 4.4881042475048387e+00 
exps[3,0] = 3.9799528004692630e-01
             
# P          
exps[3,0] = 3.0108199280832128e+01
exps[4,0] = 6.1393781325590453e+00
exps[5,0] = 4.8929328703550412e-01

basis =  str(number_of_s_exps)+"s"+str(number_of_p_exps)+"p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc21115.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 24
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 18 14:59:02 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35677784.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 32000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 32000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 32000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  4.7566616905         1
[INPUT] 0    0    [1    /1   ]  398.16175464         1
[INPUT] 0    0    [1    /1   ]  0.257381887395       1
[INPUT] 0    0    [1    /1   ]  65.6154683123        1
[INPUT] 1    0    [1    /1   ]  8.21949182446        1
[INPUT] 1    0    [1    /1   ]  0.163964774551       1
[INPUT] 1    0    [1    /1   ]  2693.96474841        1

nuclear repulsion = 0
number of shells = 7
number of NR pGTOs = 13
number of NR cGTOs = 13
basis = {'Ar': [[0, [4.756661690500748, 1.0]], [0, [398.1617546399676, 1.0]], [0, [0.257381887394762, 1.0]], [0, [65.61546831228726, 1.0]], [1, [8.21949182446015, 1.0]], [1, [0.16396477455123548, 1.0]], [1, [2693.96474840538, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [4.75666169]
bas 1, expnt(s) = [398.16175464]
bas 2, expnt(s) = [0.25738189]
bas 3, expnt(s) = [65.61546831]
bas 4, expnt(s) = [8.21949182]
bas 5, expnt(s) = [0.16396477]
bas 6, expnt(s) = [2693.96474841]
CPU time:       305.65
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  1  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]
 [ 0  1  1  1  0 36 37  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 4.75666169e+00 8.13751350e+00 3.98161755e+02 2.25195486e+02
 2.57381887e-01 9.12953189e-01 6.56154683e+01 5.82464819e+01
 8.21949182e+00 4.06013620e+01 1.63964775e-01 3.04384538e-01
 2.69396475e+03 5.66205754e+04]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 15.415239535505256
cond(S) = 5.0273986146635234
E1 = -631.216335935185  E_coul = 147.58751959254087
init E= -483.628816342644
    CPU time for initialize scf      0.19 sec, wall time      0.02 sec
  HOMO = -1.39635720281462  LUMO = 327.225046019282
  mo_energy =
[-1.20591728e+02 -1.58774239e+01 -1.03204037e+01 -1.03204037e+01
 -1.03204037e+01 -3.01253200e+00 -1.39635720e+00 -1.39635720e+00
 -1.39635720e+00  3.27225046e+02  5.80018655e+03  5.80018655e+03
  5.80018655e+03]
E1 = -667.0655145447682  E_coul = 171.4219774618466
cycle= 1 E= -495.643537082922  delta_E=  -12  |g|= 0.212  |ddm|= 1.24
    CPU time for cycle= 1      0.22 sec, wall time      0.01 sec
diis-norm(errvec)=0.21463
diis-c [-0.04606617  1.        ]
  HOMO = -0.615374289033667  LUMO = 329.327476912349
  mo_energy =
[-1.18512158e+02 -1.40829371e+01 -8.57913826e+00 -8.57913826e+00
 -8.57913826e+00 -1.93217053e+00 -6.15374289e-01 -6.15374289e-01
 -6.15374289e-01  3.29327477e+02  5.80201609e+03  5.80201609e+03
  5.80201609e+03]
E1 = -667.0612436509874  E_coul = 171.41765946471918
cycle= 2 E= -495.643584186268  delta_E= -4.71e-05  |g|= 0.000983  |ddm|= 0.00149
    CPU time for cycle= 2      0.13 sec, wall time      0.01 sec
diis-norm(errvec)=0.000844088
diis-c [-4.33195576e-07 -2.46836034e-03  1.00246836e+00]
  HOMO = -0.61537593117917  LUMO = 329.32573179205
  mo_energy =
[-1.18513771e+02 -1.40830548e+01 -8.57927969e+00 -8.57927969e+00
 -8.57927969e+00 -1.93217484e+00 -6.15375931e-01 -6.15375931e-01
 -6.15375931e-01  3.29325732e+02  5.80200991e+03  5.80200991e+03
  5.80200991e+03]
E1 = -667.0612200246169  E_coul = 171.4176358370292
cycle= 3 E= -495.643584187588  delta_E= -1.32e-09  |g|= 3.33e-06  |ddm|= 7.66e-06
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=2.9876e-06
diis-c [-1.92387505e-13  3.67681794e-06 -4.02671854e-03  1.00402304e+00]
  HOMO = -0.615375932704981  LUMO = 329.325726307461
  mo_energy =
[-1.18513776e+02 -1.40830551e+01 -8.57928008e+00 -8.57928008e+00
 -8.57928008e+00 -1.93217485e+00 -6.15375933e-01 -6.15375933e-01
 -6.15375933e-01  3.29325726e+02  5.80200989e+03  5.80200989e+03
  5.80200989e+03]
E1 = -667.0612199473569  E_coul = 171.41763575976972
cycle= 4 E= -495.643584187587  delta_E= 5.12e-13  |g|= 1.2e-09  |ddm|= 2.48e-08
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
E1 = -667.0612199473569  E_coul = 171.41763575976972
  HOMO = -0.61537593269949  LUMO = 329.325726308238
  mo_energy =
[-1.18513776e+02 -1.40830551e+01 -8.57928008e+00 -8.57928008e+00
 -8.57928008e+00 -1.93217485e+00 -6.15375933e-01 -6.15375933e-01
 -6.15375933e-01  3.29325726e+02  5.80200989e+03  5.80200989e+03
  5.80200989e+03]
E1 = -667.0612199473607  E_coul = 171.41763575977308
Extra cycle  E= -495.643584187588  delta_E= -3.98e-13  |g|= 8.32e-12  |ddm|= 6.46e-12
    CPU time for scf_cycle      0.58 sec, wall time      0.08 sec
exp = [4.75666169e+00 3.98161755e+02 2.57381887e-01 6.56154683e+01
 8.21949182e+00 1.63964775e-01 2.69396475e+03]
E = -495.6435841875876
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
number_of_s_exps = 4
number_of_p_exps = 3

exps = np.zeros((number_of_s_exps+number_of_p_exps,2))
#exps[:, 0] = decaying_nums(5)

# S
exps[0,0] = 20.0
exps[1,0] = 9.5045827955887916e+01
exps[2,0] = 4.4881042475048387e+00 
exps[3,0] = 3.9799528004692630e-01
             
# P          
exps[3,0] = 3.0108199280832128e+01
exps[4,0] = 6.1393781325590453e+00
exps[5,0] = 4.8929328703550412e-01

basis =  str(number_of_s_exps)+"s"+str(number_of_p_exps)+"p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc21115.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 24
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 18 14:59:02 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35677784.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 32000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 32000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 32000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  4.7566616905         1
[INPUT] 0    0    [1    /1   ]  398.16175464         1
[INPUT] 0    0    [1    /1   ]  0.257381887395       1
[INPUT] 0    0    [1    /1   ]  65.6154683123        1
[INPUT] 1    0    [1    /1   ]  8.21949182446        1
[INPUT] 1    0    [1    /1   ]  0.163964774551       1
[INPUT] 1    0    [1    /1   ]  2693.96474841        1

nuclear repulsion = 0
number of shells = 7
number of NR pGTOs = 13
number of NR cGTOs = 13
basis = {'Ar': [[0, [4.756661690500748, 1.0]], [0, [398.1617546399676, 1.0]], [0, [0.257381887394762, 1.0]], [0, [65.61546831228726, 1.0]], [1, [8.21949182446015, 1.0]], [1, [0.16396477455123548, 1.0]], [1, [2693.96474840538, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [4.75666169]
bas 1, expnt(s) = [398.16175464]
bas 2, expnt(s) = [0.25738189]
bas 3, expnt(s) = [65.61546831]
bas 4, expnt(s) = [8.21949182]
bas 5, expnt(s) = [0.16396477]
bas 6, expnt(s) = [2693.96474841]
CPU time:       306.32
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  1  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]
 [ 0  1  1  1  0 36 37  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 4.75666169e+00 8.13751350e+00 3.98161755e+02 2.25195486e+02
 2.57381887e-01 9.12953189e-01 6.56154683e+01 5.82464819e+01
 8.21949182e+00 4.06013620e+01 1.63964775e-01 3.04384538e-01
 2.69396475e+03 5.66205754e+04]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 15.415239535505256
cond(S) = 5.0273986146635234
E1 = -631.216335935185  E_coul = 147.58751959254087
init E= -483.628816342644
    CPU time for initialize scf      0.19 sec, wall time      0.02 sec
  HOMO = -1.39635720281462  LUMO = 327.225046019282
  mo_energy =
[-1.20591728e+02 -1.58774239e+01 -1.03204037e+01 -1.03204037e+01
 -1.03204037e+01 -3.01253200e+00 -1.39635720e+00 -1.39635720e+00
 -1.39635720e+00  3.27225046e+02  5.80018655e+03  5.80018655e+03
  5.80018655e+03]
E1 = -667.0655145447682  E_coul = 171.4219774618466
cycle= 1 E= -495.643537082922  delta_E=  -12  |g|= 0.212  |ddm|= 1.24
    CPU time for cycle= 1      0.22 sec, wall time      0.01 sec
diis-norm(errvec)=0.21463
diis-c [-0.04606617  1.        ]
  HOMO = -0.615374289033667  LUMO = 329.327476912349
  mo_energy =
[-1.18512158e+02 -1.40829371e+01 -8.57913826e+00 -8.57913826e+00
 -8.57913826e+00 -1.93217053e+00 -6.15374289e-01 -6.15374289e-01
 -6.15374289e-01  3.29327477e+02  5.80201609e+03  5.80201609e+03
  5.80201609e+03]
E1 = -667.0612436509874  E_coul = 171.41765946471918
cycle= 2 E= -495.643584186268  delta_E= -4.71e-05  |g|= 0.000983  |ddm|= 0.00149
    CPU time for cycle= 2      0.13 sec, wall time      0.01 sec
diis-norm(errvec)=0.000844088
diis-c [-4.33195576e-07 -2.46836034e-03  1.00246836e+00]
  HOMO = -0.61537593117917  LUMO = 329.32573179205
  mo_energy =
[-1.18513771e+02 -1.40830548e+01 -8.57927969e+00 -8.57927969e+00
 -8.57927969e+00 -1.93217484e+00 -6.15375931e-01 -6.15375931e-01
 -6.15375931e-01  3.29325732e+02  5.80200991e+03  5.80200991e+03
  5.80200991e+03]
E1 = -667.0612200246169  E_coul = 171.4176358370292
cycle= 3 E= -495.643584187588  delta_E= -1.32e-09  |g|= 3.33e-06  |ddm|= 7.66e-06
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=2.9876e-06
diis-c [-1.92387505e-13  3.67681794e-06 -4.02671854e-03  1.00402304e+00]
  HOMO = -0.615375932704981  LUMO = 329.325726307461
  mo_energy =
[-1.18513776e+02 -1.40830551e+01 -8.57928008e+00 -8.57928008e+00
 -8.57928008e+00 -1.93217485e+00 -6.15375933e-01 -6.15375933e-01
 -6.15375933e-01  3.29325726e+02  5.80200989e+03  5.80200989e+03
  5.80200989e+03]
E1 = -667.0612199473569  E_coul = 171.41763575976972
cycle= 4 E= -495.643584187587  delta_E= 5.12e-13  |g|= 1.2e-09  |ddm|= 2.48e-08
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
E1 = -667.0612199473569  E_coul = 171.41763575976972
  HOMO = -0.61537593269949  LUMO = 329.325726308238
  mo_energy =
[-1.18513776e+02 -1.40830551e+01 -8.57928008e+00 -8.57928008e+00
 -8.57928008e+00 -1.93217485e+00 -6.15375933e-01 -6.15375933e-01
 -6.15375933e-01  3.29325726e+02  5.80200989e+03  5.80200989e+03
  5.80200989e+03]
E1 = -667.0612199473607  E_coul = 171.41763575977308
Extra cycle  E= -495.643584187588  delta_E= -3.98e-13  |g|= 8.32e-12  |ddm|= 6.46e-12
    CPU time for scf_cycle      0.58 sec, wall time      0.07 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 5.0273986146635234
E1 = -667.0612199473607  E_coul = 171.41763575977308
init E= -495.643584187588
    CPU time for initialize scf      1.57 sec, wall time      0.07 sec
  HOMO = -0.615375932699866  LUMO = 329.325726308243
  mo_energy =
[-1.18513776e+02 -1.40830551e+01 -8.57928008e+00 -8.57928008e+00
 -8.57928008e+00 -1.93217485e+00 -6.15375933e-01 -6.15375933e-01
 -6.15375933e-01  3.29325726e+02  5.80200989e+03  5.80200989e+03
  5.80200989e+03]
E1 = -667.0612199473604  E_coul = 171.41763575977305
cycle= 1 E= -495.643584187587  delta_E= 1.71e-13  |g|= 5.01e-12  |ddm|= 3.58e-14
    CPU time for cycle= 1      0.20 sec, wall time      0.01 sec
E1 = -667.0612199473604  E_coul = 171.41763575977305
  HOMO = -0.615375932698357  LUMO = 329.325726308243
  mo_energy =
[-1.18513776e+02 -1.40830551e+01 -8.57928008e+00 -8.57928008e+00
 -8.57928008e+00 -1.93217485e+00 -6.15375933e-01 -6.15375933e-01
 -6.15375933e-01  3.29325726e+02  5.80200989e+03  5.80200989e+03
  5.80200989e+03]
E1 = -667.0612199473605  E_coul = 171.4176357597732
Extra cycle  E= -495.643584187587  delta_E= 5.68e-14  |g|= 2.94e-12  |ddm|= 4.73e-15
    CPU time for scf_cycle      1.88 sec, wall time      0.13 sec
exp = [4.75666169e+00 3.98161755e+02 2.57381887e-01 6.56154683e+01
 8.21949182e+00 1.63964775e-01 2.69396475e+03]
grad_E = [ 5.60127139e-02 -1.25091574e-02 -5.48893134e+00  5.27447510e-02
 -4.72730832e-02 -2.11706950e+01  5.50767628e-06]
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
number_of_s_exps = 4
number_of_p_exps = 3

exps = np.zeros((number_of_s_exps+number_of_p_exps,2))
#exps[:, 0] = decaying_nums(5)

# S
exps[0,0] = 20.0
exps[1,0] = 9.5045827955887916e+01
exps[2,0] = 4.4881042475048387e+00 
exps[3,0] = 3.9799528004692630e-01
             
# P          
exps[3,0] = 3.0108199280832128e+01
exps[4,0] = 6.1393781325590453e+00
exps[5,0] = 4.8929328703550412e-01

basis =  str(number_of_s_exps)+"s"+str(number_of_p_exps)+"p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc21115.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 24
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 18 14:59:05 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35677784.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 32000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 32000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 32000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  4.71199822467        1
[INPUT] 0    0    [1    /1   ]  429.103572547        1
[INPUT] 0    0    [1    /1   ]  0.241863920559       1
[INPUT] 0    0    [1    /1   ]  66.2922754997        1
[INPUT] 1    0    [1    /1   ]  8.28795974394        1
[INPUT] 1    0    [1    /1   ]  0.168854606275       1
[INPUT] 1    0    [1    /1   ]  2693.96474894        1

nuclear repulsion = 0
number of shells = 7
number of NR pGTOs = 13
number of NR cGTOs = 13
basis = {'Ar': [[0, [4.711998224666243, 1.0]], [0, [429.10357254701313, 1.0]], [0, [0.2418639205588451, 1.0]], [0, [66.29227549973743, 1.0]], [1, [8.287959743944084, 1.0]], [1, [0.16885460627485332, 1.0]], [1, [2693.9647489398326, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [4.71199822]
bas 1, expnt(s) = [429.10357255]
bas 2, expnt(s) = [0.24186392]
bas 3, expnt(s) = [66.2922755]
bas 4, expnt(s) = [8.28795974]
bas 5, expnt(s) = [0.16885461]
bas 6, expnt(s) = [2693.96474894]
CPU time:       311.28
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  1  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]
 [ 0  1  1  1  0 36 37  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 4.71199822e+00 8.08013958e+00 4.29103573e+02 2.38197183e+02
 2.41863921e-01 8.71351415e-01 6.62922755e+01 5.86965018e+01
 8.28795974e+00 4.10245602e+01 1.68854606e-01 3.15773393e-01
 2.69396475e+03 5.66205754e+04]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 15.476390707867175
cond(S) = 4.7281011488765055
E1 = -631.782527581582  E_coul = 148.0516871447674
init E= -483.730840436815
    CPU time for initialize scf      0.19 sec, wall time      0.02 sec
  HOMO = -1.40468553071438  LUMO = 351.855210780796
  mo_energy =
[-1.20630128e+02 -1.58543367e+01 -1.02956205e+01 -1.02956205e+01
 -1.02956205e+01 -2.92128777e+00 -1.40468553e+00 -1.40468553e+00
 -1.40468553e+00  3.51855211e+02  5.80034803e+03  5.80034803e+03
  5.80034803e+03]
E1 = -667.5650680313291  E_coul = 171.67942574330044
cycle= 1 E= -495.885642288029  delta_E= -12.2  |g|= 0.223  |ddm|= 1.19
    CPU time for cycle= 1      0.21 sec, wall time      0.01 sec
diis-norm(errvec)=0.228972
diis-c [-0.05242827  1.        ]
  HOMO = -0.626879183618766  LUMO = 353.907457070076
  mo_energy =
[-1.18588447e+02 -1.40701189e+01 -8.56274290e+00 -8.56274290e+00
 -8.56274290e+00 -1.87570053e+00 -6.26879184e-01 -6.26879184e-01
 -6.26879184e-01  3.53907457e+02  5.80201943e+03  5.80201943e+03
  5.80201943e+03]
E1 = -667.560865396546  E_coul = 171.67517354534522
cycle= 2 E= -495.885691851201  delta_E= -4.96e-05  |g|= 0.00103  |ddm|= 0.0014
    CPU time for cycle= 2      0.14 sec, wall time      0.01 sec
diis-norm(errvec)=0.00095605
diis-c [-4.80375692e-07 -2.88431715e-03  1.00288432e+00]
  HOMO = -0.626880719570106  LUMO = 353.905511385423
  mo_energy =
[-1.18590075e+02 -1.40702295e+01 -8.56287145e+00 -8.56287145e+00
 -8.56287145e+00 -1.87570430e+00 -6.26880720e-01 -6.26880720e-01
 -6.26880720e-01  3.53905511e+02  5.80201275e+03  5.80201275e+03
  5.80201275e+03]
E1 = -667.5608430436644  E_coul = 171.6751511911697
cycle= 3 E= -495.885691852495  delta_E= -1.29e-09  |g|= 2.96e-06  |ddm|= 6.86e-06
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=3.03938e-06
diis-c [-4.29348187e-13  3.38116556e-06 -3.61963642e-03  1.00361626e+00]
  HOMO = -0.626880719936579  LUMO = 353.905506160382
  mo_energy =
[-1.18590079e+02 -1.40702297e+01 -8.56287169e+00 -8.56287169e+00
 -8.56287169e+00 -1.87570431e+00 -6.26880720e-01 -6.26880720e-01
 -6.26880720e-01  3.53905506e+02  5.80201273e+03  5.80201273e+03
  5.80201273e+03]
E1 = -667.5608429847556  E_coul = 171.67515113226062
cycle= 4 E= -495.885691852495  delta_E= -2.84e-13  |g|= 4.8e-09  |ddm|= 1.73e-08
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
E1 = -667.5608429847556  E_coul = 171.67515113226062
  HOMO = -0.626880719930678  LUMO = 353.90550616099
  mo_energy =
[-1.18590079e+02 -1.40702297e+01 -8.56287169e+00 -8.56287169e+00
 -8.56287169e+00 -1.87570431e+00 -6.26880720e-01 -6.26880720e-01
 -6.26880720e-01  3.53905506e+02  5.80201273e+03  5.80201273e+03
  5.80201273e+03]
E1 = -667.5608429847865  E_coul = 171.67515113229115
Extra cycle  E= -495.885691852495  delta_E= -3.98e-13  |g|= 4.15e-11  |ddm|= 2.68e-11
    CPU time for scf_cycle      0.58 sec, wall time      0.07 sec
exp = [4.71199822e+00 4.29103573e+02 2.41863921e-01 6.62922755e+01
 8.28795974e+00 1.68854606e-01 2.69396475e+03]
E = -495.88569185249537
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
number_of_s_exps = 4
number_of_p_exps = 3

exps = np.zeros((number_of_s_exps+number_of_p_exps,2))
#exps[:, 0] = decaying_nums(5)

# S
exps[0,0] = 20.0
exps[1,0] = 9.5045827955887916e+01
exps[2,0] = 4.4881042475048387e+00 
exps[3,0] = 3.9799528004692630e-01
             
# P          
exps[3,0] = 3.0108199280832128e+01
exps[4,0] = 6.1393781325590453e+00
exps[5,0] = 4.8929328703550412e-01

basis =  str(number_of_s_exps)+"s"+str(number_of_p_exps)+"p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc21115.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 24
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 18 14:59:05 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35677784.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 32000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 32000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 32000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  4.71199822467        1
[INPUT] 0    0    [1    /1   ]  429.103572547        1
[INPUT] 0    0    [1    /1   ]  0.241863920559       1
[INPUT] 0    0    [1    /1   ]  66.2922754997        1
[INPUT] 1    0    [1    /1   ]  8.28795974394        1
[INPUT] 1    0    [1    /1   ]  0.168854606275       1
[INPUT] 1    0    [1    /1   ]  2693.96474894        1

nuclear repulsion = 0
number of shells = 7
number of NR pGTOs = 13
number of NR cGTOs = 13
basis = {'Ar': [[0, [4.711998224666243, 1.0]], [0, [429.10357254701313, 1.0]], [0, [0.2418639205588451, 1.0]], [0, [66.29227549973743, 1.0]], [1, [8.287959743944084, 1.0]], [1, [0.16885460627485332, 1.0]], [1, [2693.9647489398326, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [4.71199822]
bas 1, expnt(s) = [429.10357255]
bas 2, expnt(s) = [0.24186392]
bas 3, expnt(s) = [66.2922755]
bas 4, expnt(s) = [8.28795974]
bas 5, expnt(s) = [0.16885461]
bas 6, expnt(s) = [2693.96474894]
CPU time:       311.94
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  1  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]
 [ 0  1  1  1  0 36 37  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 4.71199822e+00 8.08013958e+00 4.29103573e+02 2.38197183e+02
 2.41863921e-01 8.71351415e-01 6.62922755e+01 5.86965018e+01
 8.28795974e+00 4.10245602e+01 1.68854606e-01 3.15773393e-01
 2.69396475e+03 5.66205754e+04]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 15.476390707867175
cond(S) = 4.7281011488765055
E1 = -631.782527581582  E_coul = 148.0516871447674
init E= -483.730840436815
    CPU time for initialize scf      0.19 sec, wall time      0.02 sec
  HOMO = -1.40468553071438  LUMO = 351.855210780796
  mo_energy =
[-1.20630128e+02 -1.58543367e+01 -1.02956205e+01 -1.02956205e+01
 -1.02956205e+01 -2.92128777e+00 -1.40468553e+00 -1.40468553e+00
 -1.40468553e+00  3.51855211e+02  5.80034803e+03  5.80034803e+03
  5.80034803e+03]
E1 = -667.5650680313291  E_coul = 171.67942574330044
cycle= 1 E= -495.885642288029  delta_E= -12.2  |g|= 0.223  |ddm|= 1.19
    CPU time for cycle= 1      0.21 sec, wall time      0.01 sec
diis-norm(errvec)=0.228972
diis-c [-0.05242827  1.        ]
  HOMO = -0.626879183618766  LUMO = 353.907457070076
  mo_energy =
[-1.18588447e+02 -1.40701189e+01 -8.56274290e+00 -8.56274290e+00
 -8.56274290e+00 -1.87570053e+00 -6.26879184e-01 -6.26879184e-01
 -6.26879184e-01  3.53907457e+02  5.80201943e+03  5.80201943e+03
  5.80201943e+03]
E1 = -667.560865396546  E_coul = 171.67517354534522
cycle= 2 E= -495.885691851201  delta_E= -4.96e-05  |g|= 0.00103  |ddm|= 0.0014
    CPU time for cycle= 2      0.14 sec, wall time      0.01 sec
diis-norm(errvec)=0.00095605
diis-c [-4.80375692e-07 -2.88431715e-03  1.00288432e+00]
  HOMO = -0.626880719570106  LUMO = 353.905511385423
  mo_energy =
[-1.18590075e+02 -1.40702295e+01 -8.56287145e+00 -8.56287145e+00
 -8.56287145e+00 -1.87570430e+00 -6.26880720e-01 -6.26880720e-01
 -6.26880720e-01  3.53905511e+02  5.80201275e+03  5.80201275e+03
  5.80201275e+03]
E1 = -667.5608430436644  E_coul = 171.6751511911697
cycle= 3 E= -495.885691852495  delta_E= -1.29e-09  |g|= 2.96e-06  |ddm|= 6.86e-06
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=3.03938e-06
diis-c [-4.29348187e-13  3.38116556e-06 -3.61963642e-03  1.00361626e+00]
  HOMO = -0.626880719936579  LUMO = 353.905506160382
  mo_energy =
[-1.18590079e+02 -1.40702297e+01 -8.56287169e+00 -8.56287169e+00
 -8.56287169e+00 -1.87570431e+00 -6.26880720e-01 -6.26880720e-01
 -6.26880720e-01  3.53905506e+02  5.80201273e+03  5.80201273e+03
  5.80201273e+03]
E1 = -667.5608429847556  E_coul = 171.67515113226062
cycle= 4 E= -495.885691852495  delta_E= -2.84e-13  |g|= 4.8e-09  |ddm|= 1.73e-08
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
E1 = -667.5608429847556  E_coul = 171.67515113226062
  HOMO = -0.626880719930678  LUMO = 353.90550616099
  mo_energy =
[-1.18590079e+02 -1.40702297e+01 -8.56287169e+00 -8.56287169e+00
 -8.56287169e+00 -1.87570431e+00 -6.26880720e-01 -6.26880720e-01
 -6.26880720e-01  3.53905506e+02  5.80201273e+03  5.80201273e+03
  5.80201273e+03]
E1 = -667.5608429847865  E_coul = 171.67515113229115
Extra cycle  E= -495.885691852495  delta_E= -3.98e-13  |g|= 4.15e-11  |ddm|= 2.68e-11
    CPU time for scf_cycle      0.58 sec, wall time      0.07 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 4.7281011488765055
E1 = -667.5608429847865  E_coul = 171.67515113229115
init E= -495.885691852495
    CPU time for initialize scf      1.12 sec, wall time      0.05 sec
  HOMO = -0.62688071992813  LUMO = 353.905506160982
  mo_energy =
[-1.18590079e+02 -1.40702297e+01 -8.56287169e+00 -8.56287169e+00
 -8.56287169e+00 -1.87570431e+00 -6.26880720e-01 -6.26880720e-01
 -6.26880720e-01  3.53905506e+02  5.80201273e+03  5.80201273e+03
  5.80201273e+03]
E1 = -667.5608429847865  E_coul = 171.67515113229106
cycle= 1 E= -495.885691852495  delta_E= -1.14e-13  |g|= 2.25e-12  |ddm|= 2.01e-13
    CPU time for cycle= 1      0.20 sec, wall time      0.01 sec
E1 = -667.5608429847865  E_coul = 171.67515113229106
  HOMO = -0.626880719929001  LUMO = 353.905506160981
  mo_energy =
[-1.18590079e+02 -1.40702297e+01 -8.56287169e+00 -8.56287169e+00
 -8.56287169e+00 -1.87570431e+00 -6.26880720e-01 -6.26880720e-01
 -6.26880720e-01  3.53905506e+02  5.80201273e+03  5.80201273e+03
  5.80201273e+03]
E1 = -667.5608429847863  E_coul = 171.67515113229106
Extra cycle  E= -495.885691852495  delta_E= 2.27e-13  |g|= 2.89e-12  |ddm|= 5.78e-15
    CPU time for scf_cycle      1.42 sec, wall time      0.11 sec
exp = [4.71199822e+00 4.29103573e+02 2.41863921e-01 6.62922755e+01
 8.28795974e+00 1.68854606e-01 2.69396475e+03]
grad_E = [ 2.26015268e-02 -3.56850831e-03 -6.00330993e+00  7.29999888e-04
  3.39253286e-03 -2.08644431e+01  5.61681554e-06]
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
number_of_s_exps = 4
number_of_p_exps = 3

exps = np.zeros((number_of_s_exps+number_of_p_exps,2))
#exps[:, 0] = decaying_nums(5)

# S
exps[0,0] = 20.0
exps[1,0] = 9.5045827955887916e+01
exps[2,0] = 4.4881042475048387e+00 
exps[3,0] = 3.9799528004692630e-01
             
# P          
exps[3,0] = 3.0108199280832128e+01
exps[4,0] = 6.1393781325590453e+00
exps[5,0] = 4.8929328703550412e-01

basis =  str(number_of_s_exps)+"s"+str(number_of_p_exps)+"p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc21115.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 24
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 18 14:59:07 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35677784.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 32000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 32000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 32000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  4.69450437543        1
[INPUT] 0    0    [1    /1   ]  453.554445914        1
[INPUT] 0    0    [1    /1   ]  0.235847163814       1
[INPUT] 0    0    [1    /1   ]  68.2792038598        1
[INPUT] 1    0    [1    /1   ]  8.2882156894         1
[INPUT] 1    0    [1    /1   ]  0.170860323875       1
[INPUT] 1    0    [1    /1   ]  2693.96474885        1

nuclear repulsion = 0
number of shells = 7
number of NR pGTOs = 13
number of NR cGTOs = 13
basis = {'Ar': [[0, [4.694504375433453, 1.0]], [0, [453.5544459136346, 1.0]], [0, [0.23584716381426166, 1.0]], [0, [68.27920385983508, 1.0]], [1, [8.288215689399589, 1.0]], [1, [0.17086032387479572, 1.0]], [1, [2693.964748853342, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [4.69450438]
bas 1, expnt(s) = [453.55444591]
bas 2, expnt(s) = [0.23584716]
bas 3, expnt(s) = [68.27920386]
bas 4, expnt(s) = [8.28821569]
bas 5, expnt(s) = [0.17086032]
bas 6, expnt(s) = [2693.96474885]
CPU time:       316.44
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  1  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]
 [ 0  1  1  1  0 36 37  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 4.69450438e+00 8.05763027e+00 4.53554446e+02 2.48305932e+02
 2.35847164e-01 8.55043122e-01 6.82792039e+01 6.00110687e+01
 8.28821569e+00 4.10261438e+01 1.70860324e-01 3.20468925e-01
 2.69396475e+03 5.66205754e+04]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 15.497895033487467
cond(S) = 4.578301770128845
E1 = -631.770173448146  E_coul = 148.12238273111765
init E= -483.647790717028
    CPU time for initialize scf      0.19 sec, wall time      0.02 sec
  HOMO = -1.40903256114316  LUMO = 376.522456448209
  mo_energy =
[-1.20631910e+02 -1.58636809e+01 -1.02949607e+01 -1.02949607e+01
 -1.02949607e+01 -2.88627333e+00 -1.40903256e+00 -1.40903256e+00
 -1.40903256e+00  3.76522456e+02  5.80039545e+03  5.80039545e+03
  5.80039545e+03]
E1 = -667.7155318488955  E_coul = 171.77854586704447
cycle= 1 E= -495.936985981851  delta_E= -12.3  |g|= 0.22  |ddm|= 1.17
    CPU time for cycle= 1      0.22 sec, wall time      0.01 sec
diis-norm(errvec)=0.229022
diis-c [-0.05245094  1.        ]
  HOMO = -0.631479451153472  LUMO = 378.597251840946
  mo_energy =
[-1.18573522e+02 -1.40771137e+01 -8.56030326e+00 -8.56030326e+00
 -8.56030326e+00 -1.85325819e+00 -6.31479451e-01 -6.31479451e-01
 -6.31479451e-01  3.78597252e+02  5.80213213e+03  5.80213213e+03
  5.80213213e+03]
E1 = -667.7117316416948  E_coul = 171.7747010004343
cycle= 2 E= -495.93703064126  delta_E= -4.47e-05  |g|= 0.000985  |ddm|= 0.00126
    CPU time for cycle= 2      0.14 sec, wall time      0.01 sec
diis-norm(errvec)=0.000939331
diis-c [-4.61452844e-07 -2.84080391e-03  1.00284080e+00]
  HOMO = -0.631480817770869  LUMO = 378.595386876282
  mo_energy =
[-1.18575007e+02 -1.40772130e+01 -8.56041551e+00 -8.56041551e+00
 -8.56041551e+00 -1.85326148e+00 -6.31480818e-01 -6.31480818e-01
 -6.31480818e-01  3.78595387e+02  5.80212589e+03  5.80212589e+03
  5.80212589e+03]
E1 = -667.7117119110528  E_coul = 171.77468126868078
cycle= 3 E= -495.937030642372  delta_E= -1.11e-09  |g|= 2.86e-06  |ddm|= 6e-06
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=3.06418e-06
diis-c [-6.67772599e-13  3.41241984e-06 -3.67433502e-03  1.00367092e+00]
  HOMO = -0.631480817952962  LUMO = 378.595381906434
  mo_energy =
[-1.18575010e+02 -1.40772132e+01 -8.56041570e+00 -8.56041570e+00
 -8.56041570e+00 -1.85326149e+00 -6.31480818e-01 -6.31480818e-01
 -6.31480818e-01  3.78595382e+02  5.80212587e+03  5.80212587e+03
  5.80212587e+03]
E1 = -667.7117118603267  E_coul = 171.77468121795482
cycle= 4 E= -495.937030642372  delta_E= 2.27e-13  |g|= 5.81e-09  |ddm|= 1.47e-08
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
E1 = -667.7117118603267  E_coul = 171.77468121795482
  HOMO = -0.631480817945149  LUMO = 378.595381907179
  mo_energy =
[-1.18575010e+02 -1.40772132e+01 -8.56041570e+00 -8.56041570e+00
 -8.56041570e+00 -1.85326149e+00 -6.31480818e-01 -6.31480818e-01
 -6.31480818e-01  3.78595382e+02  5.80212587e+03  5.80212587e+03
  5.80212587e+03]
E1 = -667.7117118603595  E_coul = 171.7746812179882
Extra cycle  E= -495.937030642371  delta_E= 5.12e-13  |g|= 4.79e-11  |ddm|= 2.97e-11
    CPU time for scf_cycle      0.58 sec, wall time      0.08 sec
exp = [4.69450438e+00 4.53554446e+02 2.35847164e-01 6.82792039e+01
 8.28821569e+00 1.70860324e-01 2.69396475e+03]
E = -495.9370306423713
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
number_of_s_exps = 4
number_of_p_exps = 3

exps = np.zeros((number_of_s_exps+number_of_p_exps,2))
#exps[:, 0] = decaying_nums(5)

# S
exps[0,0] = 20.0
exps[1,0] = 9.5045827955887916e+01
exps[2,0] = 4.4881042475048387e+00 
exps[3,0] = 3.9799528004692630e-01
             
# P          
exps[3,0] = 3.0108199280832128e+01
exps[4,0] = 6.1393781325590453e+00
exps[5,0] = 4.8929328703550412e-01

basis =  str(number_of_s_exps)+"s"+str(number_of_p_exps)+"p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc21115.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 24
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 18 14:59:08 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35677784.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 32000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 32000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 32000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  4.69450437543        1
[INPUT] 0    0    [1    /1   ]  453.554445914        1
[INPUT] 0    0    [1    /1   ]  0.235847163814       1
[INPUT] 0    0    [1    /1   ]  68.2792038598        1
[INPUT] 1    0    [1    /1   ]  8.2882156894         1
[INPUT] 1    0    [1    /1   ]  0.170860323875       1
[INPUT] 1    0    [1    /1   ]  2693.96474885        1

nuclear repulsion = 0
number of shells = 7
number of NR pGTOs = 13
number of NR cGTOs = 13
basis = {'Ar': [[0, [4.694504375433453, 1.0]], [0, [453.5544459136346, 1.0]], [0, [0.23584716381426166, 1.0]], [0, [68.27920385983508, 1.0]], [1, [8.288215689399589, 1.0]], [1, [0.17086032387479572, 1.0]], [1, [2693.964748853342, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [4.69450438]
bas 1, expnt(s) = [453.55444591]
bas 2, expnt(s) = [0.23584716]
bas 3, expnt(s) = [68.27920386]
bas 4, expnt(s) = [8.28821569]
bas 5, expnt(s) = [0.17086032]
bas 6, expnt(s) = [2693.96474885]
CPU time:       317.12
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  1  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]
 [ 0  1  1  1  0 36 37  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 4.69450438e+00 8.05763027e+00 4.53554446e+02 2.48305932e+02
 2.35847164e-01 8.55043122e-01 6.82792039e+01 6.00110687e+01
 8.28821569e+00 4.10261438e+01 1.70860324e-01 3.20468925e-01
 2.69396475e+03 5.66205754e+04]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 15.497895033487467
cond(S) = 4.578301770128845
E1 = -631.770173448146  E_coul = 148.12238273111765
init E= -483.647790717028
    CPU time for initialize scf      0.20 sec, wall time      0.02 sec
  HOMO = -1.40903256114316  LUMO = 376.522456448209
  mo_energy =
[-1.20631910e+02 -1.58636809e+01 -1.02949607e+01 -1.02949607e+01
 -1.02949607e+01 -2.88627333e+00 -1.40903256e+00 -1.40903256e+00
 -1.40903256e+00  3.76522456e+02  5.80039545e+03  5.80039545e+03
  5.80039545e+03]
E1 = -667.7155318488955  E_coul = 171.77854586704447
cycle= 1 E= -495.936985981851  delta_E= -12.3  |g|= 0.22  |ddm|= 1.17
    CPU time for cycle= 1      0.22 sec, wall time      0.01 sec
diis-norm(errvec)=0.229022
diis-c [-0.05245094  1.        ]
  HOMO = -0.631479451153472  LUMO = 378.597251840946
  mo_energy =
[-1.18573522e+02 -1.40771137e+01 -8.56030326e+00 -8.56030326e+00
 -8.56030326e+00 -1.85325819e+00 -6.31479451e-01 -6.31479451e-01
 -6.31479451e-01  3.78597252e+02  5.80213213e+03  5.80213213e+03
  5.80213213e+03]
E1 = -667.7117316416948  E_coul = 171.7747010004343
cycle= 2 E= -495.93703064126  delta_E= -4.47e-05  |g|= 0.000985  |ddm|= 0.00126
    CPU time for cycle= 2      0.13 sec, wall time      0.01 sec
diis-norm(errvec)=0.000939331
diis-c [-4.61452844e-07 -2.84080391e-03  1.00284080e+00]
  HOMO = -0.631480817770869  LUMO = 378.595386876282
  mo_energy =
[-1.18575007e+02 -1.40772130e+01 -8.56041551e+00 -8.56041551e+00
 -8.56041551e+00 -1.85326148e+00 -6.31480818e-01 -6.31480818e-01
 -6.31480818e-01  3.78595387e+02  5.80212589e+03  5.80212589e+03
  5.80212589e+03]
E1 = -667.7117119110528  E_coul = 171.77468126868078
cycle= 3 E= -495.937030642372  delta_E= -1.11e-09  |g|= 2.86e-06  |ddm|= 6e-06
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=3.06418e-06
diis-c [-6.67772599e-13  3.41241984e-06 -3.67433502e-03  1.00367092e+00]
  HOMO = -0.631480817952962  LUMO = 378.595381906434
  mo_energy =
[-1.18575010e+02 -1.40772132e+01 -8.56041570e+00 -8.56041570e+00
 -8.56041570e+00 -1.85326149e+00 -6.31480818e-01 -6.31480818e-01
 -6.31480818e-01  3.78595382e+02  5.80212587e+03  5.80212587e+03
  5.80212587e+03]
E1 = -667.7117118603267  E_coul = 171.77468121795482
cycle= 4 E= -495.937030642372  delta_E= 2.27e-13  |g|= 5.81e-09  |ddm|= 1.47e-08
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
E1 = -667.7117118603267  E_coul = 171.77468121795482
  HOMO = -0.631480817945149  LUMO = 378.595381907179
  mo_energy =
[-1.18575010e+02 -1.40772132e+01 -8.56041570e+00 -8.56041570e+00
 -8.56041570e+00 -1.85326149e+00 -6.31480818e-01 -6.31480818e-01
 -6.31480818e-01  3.78595382e+02  5.80212587e+03  5.80212587e+03
  5.80212587e+03]
E1 = -667.7117118603595  E_coul = 171.7746812179882
Extra cycle  E= -495.937030642371  delta_E= 5.12e-13  |g|= 4.79e-11  |ddm|= 2.97e-11
    CPU time for scf_cycle      0.59 sec, wall time      0.08 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 4.578301770128845
E1 = -667.7117118603595  E_coul = 171.7746812179882
init E= -495.937030642371
    CPU time for initialize scf      1.21 sec, wall time      0.05 sec
  HOMO = -0.631480817946599  LUMO = 378.595381907168
  mo_energy =
[-1.18575010e+02 -1.40772132e+01 -8.56041570e+00 -8.56041570e+00
 -8.56041570e+00 -1.85326149e+00 -6.31480818e-01 -6.31480818e-01
 -6.31480818e-01  3.78595382e+02  5.80212587e+03  5.80212587e+03
  5.80212587e+03]
E1 = -667.7117118603597  E_coul = 171.77468121798842
cycle= 1 E= -495.937030642371  delta_E=    0  |g|= 2.45e-12  |ddm|= 2.14e-13
    CPU time for cycle= 1      0.21 sec, wall time      0.01 sec
E1 = -667.7117118603597  E_coul = 171.77468121798842
  HOMO = -0.631480817945795  LUMO = 378.595381907168
  mo_energy =
[-1.18575010e+02 -1.40772132e+01 -8.56041570e+00 -8.56041570e+00
 -8.56041570e+00 -1.85326149e+00 -6.31480818e-01 -6.31480818e-01
 -6.31480818e-01  3.78595382e+02  5.80212587e+03  5.80212587e+03
  5.80212587e+03]
E1 = -667.7117118603597  E_coul = 171.77468121798836
Extra cycle  E= -495.937030642371  delta_E= -5.68e-14  |g|= 3.02e-12  |ddm|= 4.94e-15
    CPU time for scf_cycle      1.49 sec, wall time      0.11 sec
exp = [4.69450438e+00 4.53554446e+02 2.35847164e-01 6.82792039e+01
 8.28821569e+00 1.70860324e-01 2.69396475e+03]
grad_E = [-4.85206306e-03 -1.05792706e-03 -6.24172086e+00  8.71355384e-03
  4.87697704e-03 -2.07224998e+01  5.61544674e-06]
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
number_of_s_exps = 4
number_of_p_exps = 3

exps = np.zeros((number_of_s_exps+number_of_p_exps,2))
#exps[:, 0] = decaying_nums(5)

# S
exps[0,0] = 20.0
exps[1,0] = 9.5045827955887916e+01
exps[2,0] = 4.4881042475048387e+00 
exps[3,0] = 3.9799528004692630e-01
             
# P          
exps[3,0] = 3.0108199280832128e+01
exps[4,0] = 6.1393781325590453e+00
exps[5,0] = 4.8929328703550412e-01

basis =  str(number_of_s_exps)+"s"+str(number_of_p_exps)+"p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc21115.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 24
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 18 14:59:10 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35677784.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 32000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 32000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 32000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  4.69669537921        1
[INPUT] 0    0    [1    /1   ]  458.487685738        1
[INPUT] 0    0    [1    /1   ]  0.236710415127       1
[INPUT] 0    0    [1    /1   ]  68.3289728554        1
[INPUT] 1    0    [1    /1   ]  8.2814743262         1
[INPUT] 1    0    [1    /1   ]  0.170647592306       1
[INPUT] 1    0    [1    /1   ]  2693.96474894        1

nuclear repulsion = 0
number of shells = 7
number of NR pGTOs = 13
number of NR cGTOs = 13
basis = {'Ar': [[0, [4.696695379208359, 1.0]], [0, [458.48768573788976, 1.0]], [0, [0.2367104151269458, 1.0]], [0, [68.32897285540098, 1.0]], [1, [8.281474326200415, 1.0]], [1, [0.17064759230620966, 1.0]], [1, [2693.9647489434537, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [4.69669538]
bas 1, expnt(s) = [458.48768574]
bas 2, expnt(s) = [0.23671042]
bas 3, expnt(s) = [68.32897286]
bas 4, expnt(s) = [8.28147433]
bas 5, expnt(s) = [0.17064759]
bas 6, expnt(s) = [2693.96474894]
CPU time:       321.75
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  1  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]
 [ 0  1  1  1  0 36 37  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 4.69669538e+00 8.06045057e+00 4.58487686e+02 2.50328779e+02
 2.36710415e-01 8.57389281e-01 6.83289729e+01 6.00438724e+01
 8.28147433e+00 4.09844364e+01 1.70647592e-01 3.19970249e-01
 2.69396475e+03 5.66205754e+04]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 15.495961782484965
cond(S) = 4.544309145177129
E1 = -631.7163750097877  E_coul = 148.09117867444067
init E= -483.625196335347
    CPU time for initialize scf      0.19 sec, wall time      0.02 sec
  HOMO = -1.40832189336231  LUMO = 380.426446989792
  mo_energy =
[-1.20640669e+02 -1.58649537e+01 -1.02965656e+01 -1.02965656e+01
 -1.02965656e+01 -2.89092092e+00 -1.40832189e+00 -1.40832189e+00
 -1.40832189e+00  3.80426447e+02  5.80039920e+03  5.80039920e+03
  5.80039920e+03]
E1 = -667.6792657070376  E_coul = 171.7391834652556
cycle= 1 E= -495.940082241782  delta_E= -12.3  |g|= 0.222  |ddm|= 1.17
    CPU time for cycle= 1      0.22 sec, wall time      0.01 sec
diis-norm(errvec)=0.232192
diis-c [-0.05391327  1.        ]
  HOMO = -0.630842941897117  LUMO = 382.493444887884
  mo_energy =
[-1.18586872e+02 -1.40785427e+01 -8.56207282e+00 -8.56207282e+00
 -8.56207282e+00 -1.85631016e+00 -6.30842942e-01 -6.30842942e-01
 -6.30842942e-01  3.82493445e+02  5.80211012e+03  5.80211012e+03
  5.80211012e+03]
E1 = -667.6754641796581  E_coul = 171.73533671780106
cycle= 2 E= -495.940127461857  delta_E= -4.52e-05  |g|= 0.001  |ddm|= 0.00125
    CPU time for cycle= 2      0.14 sec, wall time      0.01 sec
diis-norm(errvec)=0.000970538
diis-c [-4.78969196e-07 -2.93905471e-03  1.00293905e+00]
  HOMO = -0.630844276388096  LUMO = 382.491536938013
  mo_energy =
[-1.18588364e+02 -1.40786413e+01 -8.56218300e+00 -8.56218300e+00
 -8.56218300e+00 -1.85631345e+00 -6.30844276e-01 -6.30844276e-01
 -6.30844276e-01  3.82491537e+02  5.80210376e+03  5.80210376e+03
  5.80210376e+03]
E1 = -667.6754445100092  E_coul = 171.73531704702577
cycle= 3 E= -495.940127462983  delta_E= -1.13e-09  |g|= 2.88e-06  |ddm|= 5.93e-06
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=3.1673e-06
diis-c [-8.57423402e-13  3.49912626e-06 -3.66389433e-03  1.00366040e+00]
  HOMO = -0.630844276378532  LUMO = 382.491532014083
  mo_energy =
[-1.18588368e+02 -1.40786415e+01 -8.56218317e+00 -8.56218317e+00
 -8.56218317e+00 -1.85631346e+00 -6.30844276e-01 -6.30844276e-01
 -6.30844276e-01  3.82491532e+02  5.80210375e+03  5.80210375e+03
  5.80210375e+03]
E1 = -667.6754444616249  E_coul = 171.73531699864094
cycle= 4 E= -495.940127462984  delta_E= -5.12e-13  |g|= 6.52e-09  |ddm|= 1.4e-08
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
E1 = -667.6754444616249  E_coul = 171.73531699864094
  HOMO = -0.630844276370806  LUMO = 382.491532015264
  mo_energy =
[-1.18588368e+02 -1.40786415e+01 -8.56218317e+00 -8.56218317e+00
 -8.56218317e+00 -1.85631346e+00 -6.30844276e-01 -6.30844276e-01
 -6.30844276e-01  3.82491532e+02  5.80210375e+03  5.80210375e+03
  5.80210375e+03]
E1 = -667.6754444616657  E_coul = 171.73531699868172
Extra cycle  E= -495.940127462984  delta_E= -5.68e-14  |g|= 5.31e-11  |ddm|= 3.33e-11
    CPU time for scf_cycle      0.58 sec, wall time      0.08 sec
exp = [4.69669538e+00 4.58487686e+02 2.36710415e-01 6.83289729e+01
 8.28147433e+00 1.70647592e-01 2.69396475e+03]
E = -495.94012746298404
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
number_of_s_exps = 4
number_of_p_exps = 3

exps = np.zeros((number_of_s_exps+number_of_p_exps,2))
#exps[:, 0] = decaying_nums(5)

# S
exps[0,0] = 20.0
exps[1,0] = 9.5045827955887916e+01
exps[2,0] = 4.4881042475048387e+00 
exps[3,0] = 3.9799528004692630e-01
             
# P          
exps[3,0] = 3.0108199280832128e+01
exps[4,0] = 6.1393781325590453e+00
exps[5,0] = 4.8929328703550412e-01

basis =  str(number_of_s_exps)+"s"+str(number_of_p_exps)+"p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc21115.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 24
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 18 14:59:11 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35677784.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 32000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 32000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 32000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  4.69669537921        1
[INPUT] 0    0    [1    /1   ]  458.487685738        1
[INPUT] 0    0    [1    /1   ]  0.236710415127       1
[INPUT] 0    0    [1    /1   ]  68.3289728554        1
[INPUT] 1    0    [1    /1   ]  8.2814743262         1
[INPUT] 1    0    [1    /1   ]  0.170647592306       1
[INPUT] 1    0    [1    /1   ]  2693.96474894        1

nuclear repulsion = 0
number of shells = 7
number of NR pGTOs = 13
number of NR cGTOs = 13
basis = {'Ar': [[0, [4.696695379208359, 1.0]], [0, [458.48768573788976, 1.0]], [0, [0.2367104151269458, 1.0]], [0, [68.32897285540098, 1.0]], [1, [8.281474326200415, 1.0]], [1, [0.17064759230620966, 1.0]], [1, [2693.9647489434537, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [4.69669538]
bas 1, expnt(s) = [458.48768574]
bas 2, expnt(s) = [0.23671042]
bas 3, expnt(s) = [68.32897286]
bas 4, expnt(s) = [8.28147433]
bas 5, expnt(s) = [0.17064759]
bas 6, expnt(s) = [2693.96474894]
CPU time:       322.42
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  1  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]
 [ 0  1  1  1  0 36 37  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 4.69669538e+00 8.06045057e+00 4.58487686e+02 2.50328779e+02
 2.36710415e-01 8.57389281e-01 6.83289729e+01 6.00438724e+01
 8.28147433e+00 4.09844364e+01 1.70647592e-01 3.19970249e-01
 2.69396475e+03 5.66205754e+04]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 15.495961782484965
cond(S) = 4.544309145177129
E1 = -631.7163750097877  E_coul = 148.09117867444067
init E= -483.625196335347
    CPU time for initialize scf      0.19 sec, wall time      0.02 sec
  HOMO = -1.40832189336231  LUMO = 380.426446989792
  mo_energy =
[-1.20640669e+02 -1.58649537e+01 -1.02965656e+01 -1.02965656e+01
 -1.02965656e+01 -2.89092092e+00 -1.40832189e+00 -1.40832189e+00
 -1.40832189e+00  3.80426447e+02  5.80039920e+03  5.80039920e+03
  5.80039920e+03]
E1 = -667.6792657070376  E_coul = 171.7391834652556
cycle= 1 E= -495.940082241782  delta_E= -12.3  |g|= 0.222  |ddm|= 1.17
    CPU time for cycle= 1      0.22 sec, wall time      0.01 sec
diis-norm(errvec)=0.232192
diis-c [-0.05391327  1.        ]
  HOMO = -0.630842941897117  LUMO = 382.493444887884
  mo_energy =
[-1.18586872e+02 -1.40785427e+01 -8.56207282e+00 -8.56207282e+00
 -8.56207282e+00 -1.85631016e+00 -6.30842942e-01 -6.30842942e-01
 -6.30842942e-01  3.82493445e+02  5.80211012e+03  5.80211012e+03
  5.80211012e+03]
E1 = -667.6754641796581  E_coul = 171.73533671780106
cycle= 2 E= -495.940127461857  delta_E= -4.52e-05  |g|= 0.001  |ddm|= 0.00125
    CPU time for cycle= 2      0.14 sec, wall time      0.01 sec
diis-norm(errvec)=0.000970538
diis-c [-4.78969196e-07 -2.93905471e-03  1.00293905e+00]
  HOMO = -0.630844276388096  LUMO = 382.491536938013
  mo_energy =
[-1.18588364e+02 -1.40786413e+01 -8.56218300e+00 -8.56218300e+00
 -8.56218300e+00 -1.85631345e+00 -6.30844276e-01 -6.30844276e-01
 -6.30844276e-01  3.82491537e+02  5.80210376e+03  5.80210376e+03
  5.80210376e+03]
E1 = -667.6754445100092  E_coul = 171.73531704702577
cycle= 3 E= -495.940127462983  delta_E= -1.13e-09  |g|= 2.88e-06  |ddm|= 5.93e-06
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=3.1673e-06
diis-c [-8.57423402e-13  3.49912626e-06 -3.66389433e-03  1.00366040e+00]
  HOMO = -0.630844276378532  LUMO = 382.491532014083
  mo_energy =
[-1.18588368e+02 -1.40786415e+01 -8.56218317e+00 -8.56218317e+00
 -8.56218317e+00 -1.85631346e+00 -6.30844276e-01 -6.30844276e-01
 -6.30844276e-01  3.82491532e+02  5.80210375e+03  5.80210375e+03
  5.80210375e+03]
E1 = -667.6754444616249  E_coul = 171.73531699864094
cycle= 4 E= -495.940127462984  delta_E= -5.12e-13  |g|= 6.52e-09  |ddm|= 1.4e-08
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
E1 = -667.6754444616249  E_coul = 171.73531699864094
  HOMO = -0.630844276370806  LUMO = 382.491532015264
  mo_energy =
[-1.18588368e+02 -1.40786415e+01 -8.56218317e+00 -8.56218317e+00
 -8.56218317e+00 -1.85631346e+00 -6.30844276e-01 -6.30844276e-01
 -6.30844276e-01  3.82491532e+02  5.80210375e+03  5.80210375e+03
  5.80210375e+03]
E1 = -667.6754444616657  E_coul = 171.73531699868172
Extra cycle  E= -495.940127462984  delta_E= -5.68e-14  |g|= 5.31e-11  |ddm|= 3.33e-11
    CPU time for scf_cycle      0.58 sec, wall time      0.08 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 4.544309145177129
E1 = -667.6754444616657  E_coul = 171.73531699868172
init E= -495.940127462984
    CPU time for initialize scf      1.14 sec, wall time      0.05 sec
  HOMO = -0.630844276370964  LUMO = 382.491532015255
  mo_energy =
[-1.18588368e+02 -1.40786415e+01 -8.56218317e+00 -8.56218317e+00
 -8.56218317e+00 -1.85631346e+00 -6.30844276e-01 -6.30844276e-01
 -6.30844276e-01  3.82491532e+02  5.80210375e+03  5.80210375e+03
  5.80210375e+03]
E1 = -667.6754444616662  E_coul = 171.73531699868187
cycle= 1 E= -495.940127462984  delta_E= -2.84e-13  |g|= 2.53e-12  |ddm|= 2.36e-13
    CPU time for cycle= 1      0.21 sec, wall time      0.01 sec
E1 = -667.6754444616662  E_coul = 171.73531699868187
  HOMO = -0.630844276371002  LUMO = 382.491532015254
  mo_energy =
[-1.18588368e+02 -1.40786415e+01 -8.56218317e+00 -8.56218317e+00
 -8.56218317e+00 -1.85631346e+00 -6.30844276e-01 -6.30844276e-01
 -6.30844276e-01  3.82491532e+02  5.80210375e+03  5.80210375e+03
  5.80210375e+03]
E1 = -667.6754444616662  E_coul = 171.7353169986819
Extra cycle  E= -495.940127462984  delta_E= 5.68e-14  |g|= 2.4e-12  |ddm|= 3.45e-15
    CPU time for scf_cycle      1.44 sec, wall time      0.11 sec
exp = [4.69669538e+00 4.58487686e+02 2.36710415e-01 6.83289729e+01
 8.28147433e+00 1.70647592e-01 2.69396475e+03]
grad_E = [-2.22757608e-03  1.09685357e-04 -6.20846235e+00 -2.40526646e-04
 -7.76950790e-04 -2.07307984e+01  5.60536682e-06]
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
number_of_s_exps = 4
number_of_p_exps = 3

exps = np.zeros((number_of_s_exps+number_of_p_exps,2))
#exps[:, 0] = decaying_nums(5)

# S
exps[0,0] = 20.0
exps[1,0] = 9.5045827955887916e+01
exps[2,0] = 4.4881042475048387e+00 
exps[3,0] = 3.9799528004692630e-01
             
# P          
exps[3,0] = 3.0108199280832128e+01
exps[4,0] = 6.1393781325590453e+00
exps[5,0] = 4.8929328703550412e-01

basis =  str(number_of_s_exps)+"s"+str(number_of_p_exps)+"p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc21115.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 24
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 18 14:59:13 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35677784.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 32000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 32000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 32000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  4.69906966571        1
[INPUT] 0    0    [1    /1   ]  459.320591376        1
[INPUT] 0    0    [1    /1   ]  0.237251052868       1
[INPUT] 0    0    [1    /1   ]  68.3934868516        1
[INPUT] 1    0    [1    /1   ]  8.28155162658        1
[INPUT] 1    0    [1    /1   ]  0.170496357377       1
[INPUT] 1    0    [1    /1   ]  2693.96474893        1

nuclear repulsion = 0
number of shells = 7
number of NR pGTOs = 13
number of NR cGTOs = 13
basis = {'Ar': [[0, [4.699069665708831, 1.0]], [0, [459.3205913760519, 1.0]], [0, [0.23725105286824877, 1.0]], [0, [68.39348685157377, 1.0]], [1, [8.281551626583477, 1.0]], [1, [0.17049635737684604, 1.0]], [1, [2693.9647489309755, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [4.69906967]
bas 1, expnt(s) = [459.32059138]
bas 2, expnt(s) = [0.23725105]
bas 3, expnt(s) = [68.39348685]
bas 4, expnt(s) = [8.28155163]
bas 5, expnt(s) = [0.17049636]
bas 6, expnt(s) = [2693.96474893]
CPU time:       326.97
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  1  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]
 [ 0  1  1  1  0 36 37  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 4.69906967e+00 8.06350644e+00 4.59320591e+02 2.50669769e+02
 2.37251053e-01 8.58857546e-01 6.83934869e+01 6.00863860e+01
 8.28155163e+00 4.09849146e+01 1.70496357e-01 3.19615825e-01
 2.69396475e+03 5.66205754e+04]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 15.49442265008283
cond(S) = 4.541223043346961
E1 = -631.7183242217111  E_coul = 148.09371512041494
init E= -483.624609101296
    CPU time for initialize scf      0.19 sec, wall time      0.02 sec
  HOMO = -1.40793593564541  LUMO = 381.28039519577
  mo_energy =
[-1.20639397e+02 -1.58646672e+01 -1.02961384e+01 -1.02961384e+01
 -1.02961384e+01 -2.89405050e+00 -1.40793594e+00 -1.40793594e+00
 -1.40793594e+00  3.81280395e+02  5.80040166e+03  5.80040166e+03
  5.80040166e+03]
E1 = -667.6892422203937  E_coul = 171.74905554780722
cycle= 1 E= -495.940186672586  delta_E= -12.3  |g|= 0.222  |ddm|= 1.18
    CPU time for cycle= 1      0.22 sec, wall time      0.01 sec
diis-norm(errvec)=0.232251
diis-c [-0.05394042  1.        ]
  HOMO = -0.630441994773715  LUMO = 383.348780811839
  mo_energy =
[-1.18584363e+02 -1.40778428e+01 -8.56125114e+00 -8.56125114e+00
 -8.56125114e+00 -1.85830257e+00 -6.30441995e-01 -6.30441995e-01
 -6.30441995e-01  3.83348781e+02  5.80211590e+03  5.80211590e+03
  5.80211590e+03]
E1 = -667.6854541181951  E_coul = 171.74522242108384
cycle= 2 E= -495.940231697111  delta_E= -4.5e-05  |g|= 0.001  |ddm|= 0.00125
    CPU time for cycle= 2      0.14 sec, wall time      0.01 sec
diis-norm(errvec)=0.000971262
diis-c [-4.79483832e-07 -2.94114451e-03  1.00294114e+00]
  HOMO = -0.630443319653706  LUMO = 383.346874582181
  mo_energy =
[-1.18585851e+02 -1.40779411e+01 -8.56136069e+00 -8.56136069e+00
 -8.56136069e+00 -1.85830587e+00 -6.30443320e-01 -6.30443320e-01
 -6.30443320e-01  3.83346875e+02  5.80210956e+03  5.80210956e+03
  5.80210956e+03]
E1 = -667.6854345294086  E_coul = 171.74520283117528
cycle= 3 E= -495.940231698233  delta_E= -1.12e-09  |g|= 2.88e-06  |ddm|= 5.91e-06
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=3.17871e-06
diis-c [-8.76640403e-13  3.50882311e-06 -3.67199872e-03  1.00366849e+00]
  HOMO = -0.630443319630708  LUMO = 383.346869664153
  mo_energy =
[-1.18585855e+02 -1.40779413e+01 -8.56136085e+00 -8.56136085e+00
 -8.56136085e+00 -1.85830587e+00 -6.30443320e-01 -6.30443320e-01
 -6.30443320e-01  3.83346870e+02  5.80210954e+03  5.80210954e+03
  5.80210954e+03]
E1 = -667.6854344812937  E_coul = 171.74520278306036
cycle= 4 E= -495.940231698233  delta_E= -5.68e-14  |g|= 6.58e-09  |ddm|= 1.39e-08
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
E1 = -667.6854344812937  E_coul = 171.74520278306036
  HOMO = -0.63044331962374  LUMO = 383.346869665382
  mo_energy =
[-1.18585855e+02 -1.40779413e+01 -8.56136085e+00 -8.56136085e+00
 -8.56136085e+00 -1.85830587e+00 -6.30443320e-01 -6.30443320e-01
 -6.30443320e-01  3.83346870e+02  5.80210954e+03  5.80210954e+03
  5.80210954e+03]
E1 = -667.6854344813352  E_coul = 171.7452027831016
Extra cycle  E= -495.940231698234  delta_E= -2.27e-13  |g|= 5.33e-11  |ddm|= 3.36e-11
    CPU time for scf_cycle      0.58 sec, wall time      0.08 sec
exp = [4.69906967e+00 4.59320591e+02 2.37251053e-01 6.83934869e+01
 8.28155163e+00 1.70496357e-01 2.69396475e+03]
E = -495.94023169823356
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
number_of_s_exps = 4
number_of_p_exps = 3

exps = np.zeros((number_of_s_exps+number_of_p_exps,2))
#exps[:, 0] = decaying_nums(5)

# S
exps[0,0] = 20.0
exps[1,0] = 9.5045827955887916e+01
exps[2,0] = 4.4881042475048387e+00 
exps[3,0] = 3.9799528004692630e-01
             
# P          
exps[3,0] = 3.0108199280832128e+01
exps[4,0] = 6.1393781325590453e+00
exps[5,0] = 4.8929328703550412e-01

basis =  str(number_of_s_exps)+"s"+str(number_of_p_exps)+"p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc21115.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 24
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 18 14:59:13 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35677784.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 32000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 32000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 32000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  4.69906966571        1
[INPUT] 0    0    [1    /1   ]  459.320591376        1
[INPUT] 0    0    [1    /1   ]  0.237251052868       1
[INPUT] 0    0    [1    /1   ]  68.3934868516        1
[INPUT] 1    0    [1    /1   ]  8.28155162658        1
[INPUT] 1    0    [1    /1   ]  0.170496357377       1
[INPUT] 1    0    [1    /1   ]  2693.96474893        1

nuclear repulsion = 0
number of shells = 7
number of NR pGTOs = 13
number of NR cGTOs = 13
basis = {'Ar': [[0, [4.699069665708831, 1.0]], [0, [459.3205913760519, 1.0]], [0, [0.23725105286824877, 1.0]], [0, [68.39348685157377, 1.0]], [1, [8.281551626583477, 1.0]], [1, [0.17049635737684604, 1.0]], [1, [2693.9647489309755, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [4.69906967]
bas 1, expnt(s) = [459.32059138]
bas 2, expnt(s) = [0.23725105]
bas 3, expnt(s) = [68.39348685]
bas 4, expnt(s) = [8.28155163]
bas 5, expnt(s) = [0.17049636]
bas 6, expnt(s) = [2693.96474893]
CPU time:       327.65
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  1  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]
 [ 0  1  1  1  0 36 37  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 4.69906967e+00 8.06350644e+00 4.59320591e+02 2.50669769e+02
 2.37251053e-01 8.58857546e-01 6.83934869e+01 6.00863860e+01
 8.28155163e+00 4.09849146e+01 1.70496357e-01 3.19615825e-01
 2.69396475e+03 5.66205754e+04]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 15.49442265008283
cond(S) = 4.541223043346961
E1 = -631.7183242217111  E_coul = 148.09371512041494
init E= -483.624609101296
    CPU time for initialize scf      0.19 sec, wall time      0.02 sec
  HOMO = -1.40793593564541  LUMO = 381.28039519577
  mo_energy =
[-1.20639397e+02 -1.58646672e+01 -1.02961384e+01 -1.02961384e+01
 -1.02961384e+01 -2.89405050e+00 -1.40793594e+00 -1.40793594e+00
 -1.40793594e+00  3.81280395e+02  5.80040166e+03  5.80040166e+03
  5.80040166e+03]
E1 = -667.6892422203937  E_coul = 171.74905554780722
cycle= 1 E= -495.940186672586  delta_E= -12.3  |g|= 0.222  |ddm|= 1.18
    CPU time for cycle= 1      0.22 sec, wall time      0.01 sec
diis-norm(errvec)=0.232251
diis-c [-0.05394042  1.        ]
  HOMO = -0.630441994773715  LUMO = 383.348780811839
  mo_energy =
[-1.18584363e+02 -1.40778428e+01 -8.56125114e+00 -8.56125114e+00
 -8.56125114e+00 -1.85830257e+00 -6.30441995e-01 -6.30441995e-01
 -6.30441995e-01  3.83348781e+02  5.80211590e+03  5.80211590e+03
  5.80211590e+03]
E1 = -667.6854541181951  E_coul = 171.74522242108384
cycle= 2 E= -495.940231697111  delta_E= -4.5e-05  |g|= 0.001  |ddm|= 0.00125
    CPU time for cycle= 2      0.14 sec, wall time      0.01 sec
diis-norm(errvec)=0.000971262
diis-c [-4.79483832e-07 -2.94114451e-03  1.00294114e+00]
  HOMO = -0.630443319653706  LUMO = 383.346874582181
  mo_energy =
[-1.18585851e+02 -1.40779411e+01 -8.56136069e+00 -8.56136069e+00
 -8.56136069e+00 -1.85830587e+00 -6.30443320e-01 -6.30443320e-01
 -6.30443320e-01  3.83346875e+02  5.80210956e+03  5.80210956e+03
  5.80210956e+03]
E1 = -667.6854345294086  E_coul = 171.74520283117528
cycle= 3 E= -495.940231698233  delta_E= -1.12e-09  |g|= 2.88e-06  |ddm|= 5.91e-06
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=3.17871e-06
diis-c [-8.76640403e-13  3.50882311e-06 -3.67199872e-03  1.00366849e+00]
  HOMO = -0.630443319630708  LUMO = 383.346869664153
  mo_energy =
[-1.18585855e+02 -1.40779413e+01 -8.56136085e+00 -8.56136085e+00
 -8.56136085e+00 -1.85830587e+00 -6.30443320e-01 -6.30443320e-01
 -6.30443320e-01  3.83346870e+02  5.80210954e+03  5.80210954e+03
  5.80210954e+03]
E1 = -667.6854344812937  E_coul = 171.74520278306036
cycle= 4 E= -495.940231698233  delta_E= -5.68e-14  |g|= 6.58e-09  |ddm|= 1.39e-08
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
E1 = -667.6854344812937  E_coul = 171.74520278306036
  HOMO = -0.63044331962374  LUMO = 383.346869665382
  mo_energy =
[-1.18585855e+02 -1.40779413e+01 -8.56136085e+00 -8.56136085e+00
 -8.56136085e+00 -1.85830587e+00 -6.30443320e-01 -6.30443320e-01
 -6.30443320e-01  3.83346870e+02  5.80210954e+03  5.80210954e+03
  5.80210954e+03]
E1 = -667.6854344813352  E_coul = 171.7452027831016
Extra cycle  E= -495.940231698234  delta_E= -2.27e-13  |g|= 5.33e-11  |ddm|= 3.36e-11
    CPU time for scf_cycle      0.58 sec, wall time      0.08 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 4.541223043346961
E1 = -667.6854344813352  E_coul = 171.7452027831016
init E= -495.940231698234
    CPU time for initialize scf      1.14 sec, wall time      0.05 sec
  HOMO = -0.630443319622464  LUMO = 383.346869665372
  mo_energy =
[-1.18585855e+02 -1.40779413e+01 -8.56136085e+00 -8.56136085e+00
 -8.56136085e+00 -1.85830587e+00 -6.30443320e-01 -6.30443320e-01
 -6.30443320e-01  3.83346870e+02  5.80210954e+03  5.80210954e+03
  5.80210954e+03]
E1 = -667.6854344813347  E_coul = 171.7452027831016
cycle= 1 E= -495.940231698233  delta_E= 4.55e-13  |g|= 3.12e-12  |ddm|= 2.38e-13
    CPU time for cycle= 1      0.20 sec, wall time      0.01 sec
E1 = -667.6854344813347  E_coul = 171.7452027831016
  HOMO = -0.630443319622805  LUMO = 383.346869665372
  mo_energy =
[-1.18585855e+02 -1.40779413e+01 -8.56136085e+00 -8.56136085e+00
 -8.56136085e+00 -1.85830587e+00 -6.30443320e-01 -6.30443320e-01
 -6.30443320e-01  3.83346870e+02  5.80210954e+03  5.80210954e+03
  5.80210954e+03]
E1 = -667.6854344813349  E_coul = 171.74520278310166
Extra cycle  E= -495.940231698233  delta_E= -1.71e-13  |g|= 2.37e-12  |ddm|= 5.05e-15
    CPU time for scf_cycle      1.44 sec, wall time      0.11 sec
exp = [4.69906967e+00 4.59320591e+02 2.37251053e-01 6.83934869e+01
 8.28155163e+00 1.70496357e-01 2.69396475e+03]
grad_E = [-3.03453466e-04  1.85431982e-04 -6.18962866e+00 -2.62524390e-05
 -3.09977509e-04 -2.07400326e+01  5.60535733e-06]
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
number_of_s_exps = 4
number_of_p_exps = 3

exps = np.zeros((number_of_s_exps+number_of_p_exps,2))
#exps[:, 0] = decaying_nums(5)

# S
exps[0,0] = 20.0
exps[1,0] = 9.5045827955887916e+01
exps[2,0] = 4.4881042475048387e+00 
exps[3,0] = 3.9799528004692630e-01
             
# P          
exps[3,0] = 3.0108199280832128e+01
exps[4,0] = 6.1393781325590453e+00
exps[5,0] = 4.8929328703550412e-01

basis =  str(number_of_s_exps)+"s"+str(number_of_p_exps)+"p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc21115.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 24
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 18 14:59:16 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35677784.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 32000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 32000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 32000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  4.7008044787         1
[INPUT] 0    0    [1    /1   ]  459.807031179        1
[INPUT] 0    0    [1    /1   ]  0.23770003988        1
[INPUT] 0    0    [1    /1   ]  68.4296891426        1
[INPUT] 1    0    [1    /1   ]  8.28193398897        1
[INPUT] 1    0    [1    /1   ]  0.170372444584       1
[INPUT] 1    0    [1    /1   ]  2693.96474891        1

nuclear repulsion = 0
number of shells = 7
number of NR pGTOs = 13
number of NR cGTOs = 13
basis = {'Ar': [[0, [4.700804478703602, 1.0]], [0, [459.8070311791499, 1.0]], [0, [0.23770003988005972, 1.0]], [0, [68.42968914255866, 1.0]], [1, [8.281933988972785, 1.0]], [1, [0.1703724445835912, 1.0]], [1, [2693.964748914483, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [4.70080448]
bas 1, expnt(s) = [459.80703118]
bas 2, expnt(s) = [0.23770004]
bas 3, expnt(s) = [68.42968914]
bas 4, expnt(s) = [8.28193399]
bas 5, expnt(s) = [0.17037244]
bas 6, expnt(s) = [2693.96474891]
CPU time:       332.21
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  1  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]
 [ 0  1  1  1  0 36 37  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 4.70080448e+00 8.06573901e+00 4.59807031e+02 2.50868845e+02
 2.37700040e-01 8.60076270e-01 6.84296891e+01 6.01102383e+01
 8.28193399e+00 4.09872800e+01 1.70372445e-01 3.19325489e-01
 2.69396475e+03 5.66205754e+04]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 15.493182891641741
cond(S) = 4.539641299579101
E1 = -631.7221777825439  E_coul = 148.09697031801417
init E= -483.62520746453
    CPU time for initialize scf      0.20 sec, wall time      0.02 sec
  HOMO = -1.40760997292413  LUMO = 381.776549335787
  mo_energy =
[-1.20638228e+02 -1.58642706e+01 -1.02956977e+01 -1.02956977e+01
 -1.02956977e+01 -2.89659961e+00 -1.40760997e+00 -1.40760997e+00
 -1.40760997e+00  3.81776549e+02  5.80040361e+03  5.80040361e+03
  5.80040361e+03]
E1 = -667.6976599466564  E_coul = 171.75737096781776
cycle= 1 E= -495.940288978839  delta_E= -12.3  |g|= 0.222  |ddm|= 1.18
    CPU time for cycle= 1      0.22 sec, wall time      0.01 sec
diis-norm(errvec)=0.232306
diis-c [-0.05396587  1.        ]
  HOMO = -0.630113458355427  LUMO = 383.845777767735
  mo_energy =
[-1.18582415e+02 -1.40771745e+01 -8.56053968e+00 -8.56053968e+00
 -8.56053968e+00 -1.85993263e+00 -6.30113458e-01 -6.30113458e-01
 -6.30113458e-01  3.83845778e+02  5.80211979e+03  5.80211979e+03
  5.80211979e+03]
E1 = -667.6938793592042  E_coul = 171.75354546714885
cycle= 2 E= -495.940333892055  delta_E= -4.49e-05  |g|= 0.000999  |ddm|= 0.00124
    CPU time for cycle= 2      0.13 sec, wall time      0.01 sec
diis-norm(errvec)=0.000971972
diis-c [-4.79997008e-07 -2.94320400e-03  1.00294320e+00]
  HOMO = -0.630114777045891  LUMO = 383.843872179007
  mo_energy =
[-1.18583900e+02 -1.40772725e+01 -8.56064886e+00 -8.56064886e+00
 -8.56064886e+00 -1.85993592e+00 -6.30114777e-01 -6.30114777e-01
 -6.30114777e-01  3.83843872e+02  5.80211345e+03  5.80211345e+03
  5.80211345e+03]
E1 = -667.693859815566  E_coul = 171.75352592239105
cycle= 3 E= -495.940333893175  delta_E= -1.12e-09  |g|= 2.88e-06  |ddm|= 5.89e-06
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=3.18683e-06
diis-c [-8.89592838e-13  3.51548192e-06 -3.67719389e-03  1.00367368e+00]
  HOMO = -0.630114777015481  LUMO = 383.843867264288
  mo_energy =
[-1.18583904e+02 -1.40772727e+01 -8.56064902e+00 -8.56064902e+00
 -8.56064902e+00 -1.85993593e+00 -6.30114777e-01 -6.30114777e-01
 -6.30114777e-01  3.83843867e+02  5.80211343e+03  5.80211343e+03
  5.80211343e+03]
E1 = -667.6938597676166  E_coul = 171.75352587444144
cycle= 4 E= -495.940333893175  delta_E= -1.71e-13  |g|= 6.62e-09  |ddm|= 1.39e-08
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
E1 = -667.6938597676166  E_coul = 171.75352587444144
  HOMO = -0.63011477700711  LUMO = 383.84386726555
  mo_energy =
[-1.18583904e+02 -1.40772727e+01 -8.56064902e+00 -8.56064902e+00
 -8.56064902e+00 -1.85993593e+00 -6.30114777e-01 -6.30114777e-01
 -6.30114777e-01  3.83843867e+02  5.80211343e+03  5.80211343e+03
  5.80211343e+03]
E1 = -667.6938597676584  E_coul = 171.753525874483
Extra cycle  E= -495.940333893175  delta_E= -2.84e-13  |g|= 5.37e-11  |ddm|= 3.38e-11
    CPU time for scf_cycle      0.58 sec, wall time      0.08 sec
exp = [4.70080448e+00 4.59807031e+02 2.37700040e-01 6.84296891e+01
 8.28193399e+00 1.70372445e-01 2.69396475e+03]
E = -495.9403338931754
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
number_of_s_exps = 4
number_of_p_exps = 3

exps = np.zeros((number_of_s_exps+number_of_p_exps,2))
#exps[:, 0] = decaying_nums(5)

# S
exps[0,0] = 20.0
exps[1,0] = 9.5045827955887916e+01
exps[2,0] = 4.4881042475048387e+00 
exps[3,0] = 3.9799528004692630e-01
             
# P          
exps[3,0] = 3.0108199280832128e+01
exps[4,0] = 6.1393781325590453e+00
exps[5,0] = 4.8929328703550412e-01

basis =  str(number_of_s_exps)+"s"+str(number_of_p_exps)+"p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc21115.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 24
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 18 14:59:16 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35677784.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 32000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 32000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 32000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  4.7008044787         1
[INPUT] 0    0    [1    /1   ]  459.807031179        1
[INPUT] 0    0    [1    /1   ]  0.23770003988        1
[INPUT] 0    0    [1    /1   ]  68.4296891426        1
[INPUT] 1    0    [1    /1   ]  8.28193398897        1
[INPUT] 1    0    [1    /1   ]  0.170372444584       1
[INPUT] 1    0    [1    /1   ]  2693.96474891        1

nuclear repulsion = 0
number of shells = 7
number of NR pGTOs = 13
number of NR cGTOs = 13
basis = {'Ar': [[0, [4.700804478703602, 1.0]], [0, [459.8070311791499, 1.0]], [0, [0.23770003988005972, 1.0]], [0, [68.42968914255866, 1.0]], [1, [8.281933988972785, 1.0]], [1, [0.1703724445835912, 1.0]], [1, [2693.964748914483, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [4.70080448]
bas 1, expnt(s) = [459.80703118]
bas 2, expnt(s) = [0.23770004]
bas 3, expnt(s) = [68.42968914]
bas 4, expnt(s) = [8.28193399]
bas 5, expnt(s) = [0.17037244]
bas 6, expnt(s) = [2693.96474891]
CPU time:       332.91
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  1  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]
 [ 0  1  1  1  0 36 37  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 4.70080448e+00 8.06573901e+00 4.59807031e+02 2.50868845e+02
 2.37700040e-01 8.60076270e-01 6.84296891e+01 6.01102383e+01
 8.28193399e+00 4.09872800e+01 1.70372445e-01 3.19325489e-01
 2.69396475e+03 5.66205754e+04]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 15.493182891641741
cond(S) = 4.539641299579101
E1 = -631.7221777825439  E_coul = 148.09697031801417
init E= -483.62520746453
    CPU time for initialize scf      0.20 sec, wall time      0.02 sec
  HOMO = -1.40760997292413  LUMO = 381.776549335787
  mo_energy =
[-1.20638228e+02 -1.58642706e+01 -1.02956977e+01 -1.02956977e+01
 -1.02956977e+01 -2.89659961e+00 -1.40760997e+00 -1.40760997e+00
 -1.40760997e+00  3.81776549e+02  5.80040361e+03  5.80040361e+03
  5.80040361e+03]
E1 = -667.6976599466564  E_coul = 171.75737096781776
cycle= 1 E= -495.940288978839  delta_E= -12.3  |g|= 0.222  |ddm|= 1.18
    CPU time for cycle= 1      0.22 sec, wall time      0.01 sec
diis-norm(errvec)=0.232306
diis-c [-0.05396587  1.        ]
  HOMO = -0.630113458355427  LUMO = 383.845777767735
  mo_energy =
[-1.18582415e+02 -1.40771745e+01 -8.56053968e+00 -8.56053968e+00
 -8.56053968e+00 -1.85993263e+00 -6.30113458e-01 -6.30113458e-01
 -6.30113458e-01  3.83845778e+02  5.80211979e+03  5.80211979e+03
  5.80211979e+03]
E1 = -667.6938793592042  E_coul = 171.75354546714885
cycle= 2 E= -495.940333892055  delta_E= -4.49e-05  |g|= 0.000999  |ddm|= 0.00124
    CPU time for cycle= 2      0.13 sec, wall time      0.01 sec
diis-norm(errvec)=0.000971972
diis-c [-4.79997008e-07 -2.94320400e-03  1.00294320e+00]
  HOMO = -0.630114777045891  LUMO = 383.843872179007
  mo_energy =
[-1.18583900e+02 -1.40772725e+01 -8.56064886e+00 -8.56064886e+00
 -8.56064886e+00 -1.85993592e+00 -6.30114777e-01 -6.30114777e-01
 -6.30114777e-01  3.83843872e+02  5.80211345e+03  5.80211345e+03
  5.80211345e+03]
E1 = -667.693859815566  E_coul = 171.75352592239105
cycle= 3 E= -495.940333893175  delta_E= -1.12e-09  |g|= 2.88e-06  |ddm|= 5.89e-06
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=3.18683e-06
diis-c [-8.89592838e-13  3.51548192e-06 -3.67719389e-03  1.00367368e+00]
  HOMO = -0.630114777015481  LUMO = 383.843867264288
  mo_energy =
[-1.18583904e+02 -1.40772727e+01 -8.56064902e+00 -8.56064902e+00
 -8.56064902e+00 -1.85993593e+00 -6.30114777e-01 -6.30114777e-01
 -6.30114777e-01  3.83843867e+02  5.80211343e+03  5.80211343e+03
  5.80211343e+03]
E1 = -667.6938597676166  E_coul = 171.75352587444144
cycle= 4 E= -495.940333893175  delta_E= -1.71e-13  |g|= 6.62e-09  |ddm|= 1.39e-08
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
E1 = -667.6938597676166  E_coul = 171.75352587444144
  HOMO = -0.63011477700711  LUMO = 383.84386726555
  mo_energy =
[-1.18583904e+02 -1.40772727e+01 -8.56064902e+00 -8.56064902e+00
 -8.56064902e+00 -1.85993593e+00 -6.30114777e-01 -6.30114777e-01
 -6.30114777e-01  3.83843867e+02  5.80211343e+03  5.80211343e+03
  5.80211343e+03]
E1 = -667.6938597676584  E_coul = 171.753525874483
Extra cycle  E= -495.940333893175  delta_E= -2.84e-13  |g|= 5.37e-11  |ddm|= 3.38e-11
    CPU time for scf_cycle      0.58 sec, wall time      0.08 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 4.539641299579101
E1 = -667.6938597676584  E_coul = 171.753525874483
init E= -495.940333893175
    CPU time for initialize scf      1.15 sec, wall time      0.05 sec
  HOMO = -0.630114777007872  LUMO = 383.84386726554
  mo_energy =
[-1.18583904e+02 -1.40772727e+01 -8.56064902e+00 -8.56064902e+00
 -8.56064902e+00 -1.85993593e+00 -6.30114777e-01 -6.30114777e-01
 -6.30114777e-01  3.83843867e+02  5.80211343e+03  5.80211343e+03
  5.80211343e+03]
E1 = -667.6938597676591  E_coul = 171.75352587448327
cycle= 1 E= -495.940333893176  delta_E= -3.98e-13  |g|= 4.05e-12  |ddm|= 2.39e-13
    CPU time for cycle= 1      0.21 sec, wall time      0.01 sec
E1 = -667.6938597676591  E_coul = 171.75352587448327
  HOMO = -0.630114777005936  LUMO = 383.84386726554
  mo_energy =
[-1.18583904e+02 -1.40772727e+01 -8.56064902e+00 -8.56064902e+00
 -8.56064902e+00 -1.85993593e+00 -6.30114777e-01 -6.30114777e-01
 -6.30114777e-01  3.83843867e+02  5.80211343e+03  5.80211343e+03
  5.80211343e+03]
E1 = -667.6938597676591  E_coul = 171.7535258744832
Extra cycle  E= -495.940333893176  delta_E= -5.68e-14  |g|= 3.46e-12  |ddm|= 5.51e-15
    CPU time for scf_cycle      1.44 sec, wall time      0.11 sec
exp = [4.70080448e+00 4.59807031e+02 2.37700040e-01 6.84296891e+01
 8.28193399e+00 1.70372445e-01 2.69396475e+03]
grad_E = [ 1.16946519e-03  2.32589820e-04 -6.17367501e+00  4.98506098e-05
  2.94984401e-04 -2.07477186e+01  5.60586903e-06]
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
number_of_s_exps = 4
number_of_p_exps = 3

exps = np.zeros((number_of_s_exps+number_of_p_exps,2))
#exps[:, 0] = decaying_nums(5)

# S
exps[0,0] = 20.0
exps[1,0] = 9.5045827955887916e+01
exps[2,0] = 4.4881042475048387e+00 
exps[3,0] = 3.9799528004692630e-01
             
# P          
exps[3,0] = 3.0108199280832128e+01
exps[4,0] = 6.1393781325590453e+00
exps[5,0] = 4.8929328703550412e-01

basis =  str(number_of_s_exps)+"s"+str(number_of_p_exps)+"p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc21115.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 24
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 18 14:59:19 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35677784.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 32000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 32000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 32000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  4.704835094          1
[INPUT] 0    0    [1    /1   ]  460.900433418        1
[INPUT] 0    0    [1    /1   ]  0.238786999656       1
[INPUT] 0    0    [1    /1   ]  68.5111594256        1
[INPUT] 1    0    [1    /1   ]  8.28300637204        1
[INPUT] 1    0    [1    /1   ]  0.170084159248       1
[INPUT] 1    0    [1    /1   ]  2693.96474885        1

nuclear repulsion = 0
number of shells = 7
number of NR pGTOs = 13
number of NR cGTOs = 13
basis = {'Ar': [[0, [4.7048350940039, 1.0]], [0, [460.90043341830017, 1.0]], [0, [0.23878699965552017, 1.0]], [0, [68.51115942560214, 1.0]], [1, [8.283006372038487, 1.0]], [1, [0.1700841592478996, 1.0]], [1, [2693.9647488483047, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [4.70483509]
bas 1, expnt(s) = [460.90043342]
bas 2, expnt(s) = [0.238787]
bas 3, expnt(s) = [68.51115943]
bas 4, expnt(s) = [8.28300637]
bas 5, expnt(s) = [0.17008416]
bas 6, expnt(s) = [2693.96474885]
CPU time:       337.52
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  1  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]
 [ 0  1  1  1  0 36 37  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 4.70483509e+00 8.07092532e+00 4.60900433e+02 2.51316129e+02
 2.38787000e-01 8.63024318e-01 6.85111594e+01 6.01639044e+01
 8.28300637e+00 4.09939141e+01 1.70084159e-01 3.18650223e-01
 2.69396475e+03 5.66205754e+04]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 15.490367178980039
cond(S) = 4.536237473662144
E1 = -631.7342778230739  E_coul = 148.10691661067392
init E= -483.6273612124
    CPU time for initialize scf      6.92 sec, wall time      0.32 sec
  HOMO = -1.40680673805228  LUMO = 382.893756205094
  mo_energy =
[-1.20635180e+02 -1.58631291e+01 -1.02944790e+01 -1.02944790e+01
 -1.02944790e+01 -2.90263591e+00 -1.40680674e+00 -1.40680674e+00
 -1.40680674e+00  3.82893756e+02  5.80040842e+03  5.80040842e+03
  5.80040842e+03]
E1 = -667.7191998485603  E_coul = 171.7785407261639
cycle= 1 E= -495.940659122396  delta_E= -12.3  |g|= 0.222  |ddm|= 1.18
    CPU time for cycle= 1      0.23 sec, wall time      0.01 sec
diis-norm(errvec)=0.232432
diis-c [-0.05402469  1.        ]
  HOMO = -0.629331126797128  LUMO = 384.964883287924
  mo_energy =
[-1.18577612e+02 -1.40754539e+01 -8.55873729e+00 -8.55873729e+00
 -8.55873729e+00 -1.86381025e+00 -6.29331127e-01 -6.29331127e-01
 -6.29331127e-01  3.84964883e+02  5.80212899e+03  5.80212899e+03
  5.80212899e+03]
E1 = -667.7154360688345  E_coul = 171.77473228322137
cycle= 2 E= -495.940703785613  delta_E= -4.47e-05  |g|= 0.000999  |ddm|= 0.00124
    CPU time for cycle= 2      0.09 sec, wall time      0.01 sec
diis-norm(errvec)=0.000973646
diis-c [-4.81222607e-07 -2.94803732e-03  1.00294804e+00]
  HOMO = -0.629332431469596  LUMO = 384.96297909581
  mo_energy =
[-1.18579092e+02 -1.40755515e+01 -8.55884563e+00 -8.55884563e+00
 -8.55884563e+00 -1.86381356e+00 -6.29332431e-01 -6.29332431e-01
 -6.29332431e-01  3.84962979e+02  5.80212266e+03  5.80212266e+03
  5.80212266e+03]
E1 = -667.7154166259023  E_coul = 171.77471283917617
cycle= 3 E= -495.940703786726  delta_E= -1.11e-09  |g|= 2.89e-06  |ddm|= 5.85e-06
    CPU time for cycle= 3      0.02 sec, wall time      0.01 sec
diis-norm(errvec)=3.20553e-06
diis-c [-9.18949136e-13  3.53087727e-06 -3.68908534e-03  1.00368555e+00]
  HOMO = -0.629332431421731  LUMO = 384.962974188564
  mo_energy =
[-1.18579096e+02 -1.40755517e+01 -8.55884579e+00 -8.55884579e+00
 -8.55884579e+00 -1.86381356e+00 -6.29332431e-01 -6.29332431e-01
 -6.29332431e-01  3.84962974e+02  5.80212265e+03  5.80212265e+03
  5.80212265e+03]
E1 = -667.7154165783231  E_coul = 171.77471279159684
cycle= 4 E= -495.940703786726  delta_E= -1.71e-13  |g|= 6.71e-09  |ddm|= 1.38e-08
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
E1 = -667.7154165783231  E_coul = 171.77471279159684
  HOMO = -0.629332431413864  LUMO = 384.962974189904
  mo_energy =
[-1.18579096e+02 -1.40755517e+01 -8.55884579e+00 -8.55884579e+00
 -8.55884579e+00 -1.86381356e+00 -6.29332431e-01 -6.29332431e-01
 -6.29332431e-01  3.84962974e+02  5.80212265e+03  5.80212265e+03
  5.80212265e+03]
E1 = -667.7154165783662  E_coul = 171.7747127916398
Extra cycle  E= -495.940703786726  delta_E= -1.14e-13  |g|= 5.43e-11  |ddm|= 3.42e-11
    CPU time for scf_cycle      7.28 sec, wall time      0.37 sec
exp = [4.70483509e+00 4.60900433e+02 2.38787000e-01 6.85111594e+01
 8.28300637e+00 1.70084159e-01 2.69396475e+03]
E = -495.94070378672643
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
number_of_s_exps = 4
number_of_p_exps = 3

exps = np.zeros((number_of_s_exps+number_of_p_exps,2))
#exps[:, 0] = decaying_nums(5)

# S
exps[0,0] = 20.0
exps[1,0] = 9.5045827955887916e+01
exps[2,0] = 4.4881042475048387e+00 
exps[3,0] = 3.9799528004692630e-01
             
# P          
exps[3,0] = 3.0108199280832128e+01
exps[4,0] = 6.1393781325590453e+00
exps[5,0] = 4.8929328703550412e-01

basis =  str(number_of_s_exps)+"s"+str(number_of_p_exps)+"p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc21115.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 24
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 18 14:59:20 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35677784.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 32000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 32000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 32000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  4.704835094          1
[INPUT] 0    0    [1    /1   ]  460.900433418        1
[INPUT] 0    0    [1    /1   ]  0.238786999656       1
[INPUT] 0    0    [1    /1   ]  68.5111594256        1
[INPUT] 1    0    [1    /1   ]  8.28300637204        1
[INPUT] 1    0    [1    /1   ]  0.170084159248       1
[INPUT] 1    0    [1    /1   ]  2693.96474885        1

nuclear repulsion = 0
number of shells = 7
number of NR pGTOs = 13
number of NR cGTOs = 13
basis = {'Ar': [[0, [4.7048350940039, 1.0]], [0, [460.90043341830017, 1.0]], [0, [0.23878699965552017, 1.0]], [0, [68.51115942560214, 1.0]], [1, [8.283006372038487, 1.0]], [1, [0.1700841592478996, 1.0]], [1, [2693.9647488483047, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [4.70483509]
bas 1, expnt(s) = [460.90043342]
bas 2, expnt(s) = [0.238787]
bas 3, expnt(s) = [68.51115943]
bas 4, expnt(s) = [8.28300637]
bas 5, expnt(s) = [0.17008416]
bas 6, expnt(s) = [2693.96474885]
CPU time:       344.97
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  1  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]
 [ 0  1  1  1  0 36 37  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 4.70483509e+00 8.07092532e+00 4.60900433e+02 2.51316129e+02
 2.38787000e-01 8.63024318e-01 6.85111594e+01 6.01639044e+01
 8.28300637e+00 4.09939141e+01 1.70084159e-01 3.18650223e-01
 2.69396475e+03 5.66205754e+04]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 15.490367178980039
cond(S) = 4.536237473662144
E1 = -631.7342778230739  E_coul = 148.10691661067392
init E= -483.6273612124
    CPU time for initialize scf      5.26 sec, wall time      0.25 sec
  HOMO = -1.40680673805228  LUMO = 382.893756205094
  mo_energy =
[-1.20635180e+02 -1.58631291e+01 -1.02944790e+01 -1.02944790e+01
 -1.02944790e+01 -2.90263591e+00 -1.40680674e+00 -1.40680674e+00
 -1.40680674e+00  3.82893756e+02  5.80040842e+03  5.80040842e+03
  5.80040842e+03]
E1 = -667.7191998485603  E_coul = 171.7785407261639
cycle= 1 E= -495.940659122396  delta_E= -12.3  |g|= 0.222  |ddm|= 1.18
    CPU time for cycle= 1      0.23 sec, wall time      0.01 sec
diis-norm(errvec)=0.232432
diis-c [-0.05402469  1.        ]
  HOMO = -0.629331126797128  LUMO = 384.964883287924
  mo_energy =
[-1.18577612e+02 -1.40754539e+01 -8.55873729e+00 -8.55873729e+00
 -8.55873729e+00 -1.86381025e+00 -6.29331127e-01 -6.29331127e-01
 -6.29331127e-01  3.84964883e+02  5.80212899e+03  5.80212899e+03
  5.80212899e+03]
E1 = -667.7154360688345  E_coul = 171.77473228322137
cycle= 2 E= -495.940703785613  delta_E= -4.47e-05  |g|= 0.000999  |ddm|= 0.00124
    CPU time for cycle= 2      0.10 sec, wall time      0.01 sec
diis-norm(errvec)=0.000973646
diis-c [-4.81222607e-07 -2.94803732e-03  1.00294804e+00]
  HOMO = -0.629332431469596  LUMO = 384.96297909581
  mo_energy =
[-1.18579092e+02 -1.40755515e+01 -8.55884563e+00 -8.55884563e+00
 -8.55884563e+00 -1.86381356e+00 -6.29332431e-01 -6.29332431e-01
 -6.29332431e-01  3.84962979e+02  5.80212266e+03  5.80212266e+03
  5.80212266e+03]
E1 = -667.7154166259023  E_coul = 171.77471283917617
cycle= 3 E= -495.940703786726  delta_E= -1.11e-09  |g|= 2.89e-06  |ddm|= 5.85e-06
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=3.20553e-06
diis-c [-9.18949136e-13  3.53087727e-06 -3.68908534e-03  1.00368555e+00]
  HOMO = -0.629332431421731  LUMO = 384.962974188564
  mo_energy =
[-1.18579096e+02 -1.40755517e+01 -8.55884579e+00 -8.55884579e+00
 -8.55884579e+00 -1.86381356e+00 -6.29332431e-01 -6.29332431e-01
 -6.29332431e-01  3.84962974e+02  5.80212265e+03  5.80212265e+03
  5.80212265e+03]
E1 = -667.7154165783231  E_coul = 171.77471279159684
cycle= 4 E= -495.940703786726  delta_E= -1.71e-13  |g|= 6.71e-09  |ddm|= 1.38e-08
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
E1 = -667.7154165783231  E_coul = 171.77471279159684
  HOMO = -0.629332431413864  LUMO = 384.962974189904
  mo_energy =
[-1.18579096e+02 -1.40755517e+01 -8.55884579e+00 -8.55884579e+00
 -8.55884579e+00 -1.86381356e+00 -6.29332431e-01 -6.29332431e-01
 -6.29332431e-01  3.84962974e+02  5.80212265e+03  5.80212265e+03
  5.80212265e+03]
E1 = -667.7154165783662  E_coul = 171.7747127916398
Extra cycle  E= -495.940703786726  delta_E= -1.14e-13  |g|= 5.43e-11  |ddm|= 3.42e-11
    CPU time for scf_cycle      5.62 sec, wall time      0.30 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 4.536237473662144
E1 = -667.7154165783662  E_coul = 171.7747127916398
init E= -495.940703786726
    CPU time for initialize scf      1.20 sec, wall time      0.05 sec
  HOMO = -0.629332431413134  LUMO = 384.962974189894
  mo_energy =
[-1.18579096e+02 -1.40755517e+01 -8.55884579e+00 -8.55884579e+00
 -8.55884579e+00 -1.86381356e+00 -6.29332431e-01 -6.29332431e-01
 -6.29332431e-01  3.84962974e+02  5.80212265e+03  5.80212265e+03
  5.80212265e+03]
E1 = -667.7154165783663  E_coul = 171.77471279163987
cycle= 1 E= -495.940703786726  delta_E=    0  |g|= 2.87e-12  |ddm|= 2.42e-13
    CPU time for cycle= 1      0.22 sec, wall time      0.01 sec
E1 = -667.7154165783663  E_coul = 171.77471279163987
  HOMO = -0.629332431414664  LUMO = 384.962974189894
  mo_energy =
[-1.18579096e+02 -1.40755517e+01 -8.55884579e+00 -8.55884579e+00
 -8.55884579e+00 -1.86381356e+00 -6.29332431e-01 -6.29332431e-01
 -6.29332431e-01  3.84962974e+02  5.80212265e+03  5.80212265e+03
  5.80212265e+03]
E1 = -667.7154165783661  E_coul = 171.77471279163984
Extra cycle  E= -495.940703786726  delta_E= 1.71e-13  |g|= 1.98e-12  |ddm|= 5.58e-15
    CPU time for scf_cycle      1.48 sec, wall time      0.12 sec
exp = [4.70483509e+00 4.60900433e+02 2.38787000e-01 6.85111594e+01
 8.28300637e+00 1.70084159e-01 2.69396475e+03]
grad_E = [ 4.59762929e-03  3.37562407e-04 -6.13492843e+00  2.26045053e-04
  1.85445539e-03 -2.07651203e+01  5.60734568e-06]
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
number_of_s_exps = 4
number_of_p_exps = 3

exps = np.zeros((number_of_s_exps+number_of_p_exps,2))
#exps[:, 0] = decaying_nums(5)

# S
exps[0,0] = 20.0
exps[1,0] = 9.5045827955887916e+01
exps[2,0] = 4.4881042475048387e+00 
exps[3,0] = 3.9799528004692630e-01
             
# P          
exps[3,0] = 3.0108199280832128e+01
exps[4,0] = 6.1393781325590453e+00
exps[5,0] = 4.8929328703550412e-01

basis =  str(number_of_s_exps)+"s"+str(number_of_p_exps)+"p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc21115.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 24
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 18 14:59:23 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35677784.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 32000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 32000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 32000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  4.71058251581        1
[INPUT] 0    0    [1    /1   ]  462.455595908        1
[INPUT] 0    0    [1    /1   ]  0.240373944626       1
[INPUT] 0    0    [1    /1   ]  68.6267245729        1
[INPUT] 1    0    [1    /1   ]  8.28462224355        1
[INPUT] 1    0    [1    /1   ]  0.169693951787       1
[INPUT] 1    0    [1    /1   ]  2693.96474869        1

nuclear repulsion = 0
number of shells = 7
number of NR pGTOs = 13
number of NR cGTOs = 13
basis = {'Ar': [[0, [4.710582515814914, 1.0]], [0, [462.4555959083562, 1.0]], [0, [0.24037394462578218, 1.0]], [0, [68.62672457291487, 1.0]], [1, [8.28462224355454, 1.0]], [1, [0.16969395178689536, 1.0]], [1, [2693.9647486858194, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [4.71058252]
bas 1, expnt(s) = [462.45559591]
bas 2, expnt(s) = [0.24037394]
bas 3, expnt(s) = [68.62672457]
bas 4, expnt(s) = [8.28462224]
bas 5, expnt(s) = [0.16969395]
bas 6, expnt(s) = [2693.96474869]
CPU time:       354.63
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  1  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]
 [ 0  1  1  1  0 36 37  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 4.71058252e+00 8.07831876e+00 4.62455596e+02 2.51951851e+02
 2.40373945e-01 8.67322408e-01 6.86267246e+01 6.02400020e+01
 8.28462224e+00 4.10039109e+01 1.69693952e-01 3.17736675e-01
 2.69396475e+03 5.66205754e+04]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 15.486736014203984
cond(S) = 4.531487109925005
E1 = -631.7573641557203  E_coul = 148.12595424591373
init E= -483.631409909807
    CPU time for initialize scf      7.39 sec, wall time      0.34 sec
  HOMO = -1.40559930317411  LUMO = 384.483812303692
  mo_energy =
[-1.20630298e+02 -1.58610874e+01 -1.02923613e+01 -1.02923613e+01
 -1.02923613e+01 -2.91112548e+00 -1.40559930e+00 -1.40559930e+00
 -1.40559930e+00  3.84483812e+02  5.80041571e+03  5.80041571e+03
  5.80041571e+03]
E1 = -667.7534596793616  E_coul = 171.81194245360166
cycle= 1 E= -495.94151722576  delta_E= -12.3  |g|= 0.221  |ddm|= 1.18
    CPU time for cycle= 1      0.21 sec, wall time      0.01 sec
diis-norm(errvec)=0.232618
diis-c [-0.05411126  1.        ]
  HOMO = -0.628220295765348  LUMO = 386.557519648258
  mo_energy =
[-1.18570364e+02 -1.40727218e+01 -8.55591856e+00 -8.55591856e+00
 -8.55591856e+00 -1.86930692e+00 -6.28220296e-01 -6.28220296e-01
 -6.28220296e-01  3.86557520e+02  5.80214240e+03  5.80214240e+03
  5.80214240e+03]
E1 = -667.7497195216683  E_coul = 171.8081579823108
cycle= 2 E= -495.941561539358  delta_E= -4.43e-05  |g|= 0.000997  |ddm|= 0.00123
    CPU time for cycle= 2      0.13 sec, wall time      0.01 sec
diis-norm(errvec)=0.000976129
diis-c [-4.83052773e-07 -2.95518378e-03  1.00295518e+00]
  HOMO = -0.628221580988844  LUMO = 386.555617377687
  mo_energy =
[-1.18571836e+02 -1.40728188e+01 -8.55602571e+00 -8.55602571e+00
 -8.55602571e+00 -1.86931023e+00 -6.28221581e-01 -6.28221581e-01
 -6.28221581e-01  3.86555617e+02  5.80213609e+03  5.80213609e+03
  5.80213609e+03]
E1 = -667.7497002198486  E_coul = 171.80813867938727
cycle= 3 E= -495.941561540461  delta_E= -1.1e-09  |g|= 2.9e-06  |ddm|= 5.8e-06
    CPU time for cycle= 3      0.02 sec, wall time      0.01 sec
diis-norm(errvec)=3.23226e-06
diis-c [-9.60389809e-13  3.55318420e-06 -3.70591292e-03  1.00370236e+00]
  HOMO = -0.628221580918226  LUMO = 386.555612481347
  mo_energy =
[-1.18571840e+02 -1.40728190e+01 -8.55602587e+00 -8.55602587e+00
 -8.55602587e+00 -1.86931024e+00 -6.28221581e-01 -6.28221581e-01
 -6.28221581e-01  3.86555612e+02  5.80213607e+03  5.80213607e+03
  5.80213607e+03]
E1 = -667.7497001727918  E_coul = 171.80813863233
cycle= 4 E= -495.941561540462  delta_E= -4.55e-13  |g|= 6.84e-09  |ddm|= 1.37e-08
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
E1 = -667.7497001727918  E_coul = 171.80813863233
  HOMO = -0.628221580911449  LUMO = 386.5556124828
  mo_energy =
[-1.18571840e+02 -1.40728190e+01 -8.55602587e+00 -8.55602587e+00
 -8.55602587e+00 -1.86931024e+00 -6.28221581e-01 -6.28221581e-01
 -6.28221581e-01  3.86555612e+02  5.80213607e+03  5.80213607e+03
  5.80213607e+03]
E1 = -667.7497001728359  E_coul = 171.80813863237438
Extra cycle  E= -495.941561540462  delta_E= 2.27e-13  |g|= 5.48e-11  |ddm|= 3.48e-11
    CPU time for scf_cycle      7.76 sec, wall time      0.39 sec
exp = [4.71058252e+00 4.62455596e+02 2.40373945e-01 6.86267246e+01
 8.28462224e+00 1.69693952e-01 2.69396475e+03]
E = -495.9415615404615
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
number_of_s_exps = 4
number_of_p_exps = 3

exps = np.zeros((number_of_s_exps+number_of_p_exps,2))
#exps[:, 0] = decaying_nums(5)

# S
exps[0,0] = 20.0
exps[1,0] = 9.5045827955887916e+01
exps[2,0] = 4.4881042475048387e+00 
exps[3,0] = 3.9799528004692630e-01
             
# P          
exps[3,0] = 3.0108199280832128e+01
exps[4,0] = 6.1393781325590453e+00
exps[5,0] = 4.8929328703550412e-01

basis =  str(number_of_s_exps)+"s"+str(number_of_p_exps)+"p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc21115.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 24
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 18 14:59:23 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35677784.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 32000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 32000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 32000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  4.71058251581        1
[INPUT] 0    0    [1    /1   ]  462.455595908        1
[INPUT] 0    0    [1    /1   ]  0.240373944626       1
[INPUT] 0    0    [1    /1   ]  68.6267245729        1
[INPUT] 1    0    [1    /1   ]  8.28462224355        1
[INPUT] 1    0    [1    /1   ]  0.169693951787       1
[INPUT] 1    0    [1    /1   ]  2693.96474869        1

nuclear repulsion = 0
number of shells = 7
number of NR pGTOs = 13
number of NR cGTOs = 13
basis = {'Ar': [[0, [4.710582515814914, 1.0]], [0, [462.4555959083562, 1.0]], [0, [0.24037394462578218, 1.0]], [0, [68.62672457291487, 1.0]], [1, [8.28462224355454, 1.0]], [1, [0.16969395178689536, 1.0]], [1, [2693.9647486858194, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [4.71058252]
bas 1, expnt(s) = [462.45559591]
bas 2, expnt(s) = [0.24037394]
bas 3, expnt(s) = [68.62672457]
bas 4, expnt(s) = [8.28462224]
bas 5, expnt(s) = [0.16969395]
bas 6, expnt(s) = [2693.96474869]
CPU time:       362.51
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  1  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]
 [ 0  1  1  1  0 36 37  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 4.71058252e+00 8.07831876e+00 4.62455596e+02 2.51951851e+02
 2.40373945e-01 8.67322408e-01 6.86267246e+01 6.02400020e+01
 8.28462224e+00 4.10039109e+01 1.69693952e-01 3.17736675e-01
 2.69396475e+03 5.66205754e+04]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 15.486736014203984
cond(S) = 4.531487109925005
E1 = -631.7573641557203  E_coul = 148.12595424591373
init E= -483.631409909807
    CPU time for initialize scf      7.52 sec, wall time      0.34 sec
  HOMO = -1.40559930317411  LUMO = 384.483812303692
  mo_energy =
[-1.20630298e+02 -1.58610874e+01 -1.02923613e+01 -1.02923613e+01
 -1.02923613e+01 -2.91112548e+00 -1.40559930e+00 -1.40559930e+00
 -1.40559930e+00  3.84483812e+02  5.80041571e+03  5.80041571e+03
  5.80041571e+03]
E1 = -667.7534596793616  E_coul = 171.81194245360166
cycle= 1 E= -495.94151722576  delta_E= -12.3  |g|= 0.221  |ddm|= 1.18
    CPU time for cycle= 1      0.10 sec, wall time      0.01 sec
diis-norm(errvec)=0.232618
diis-c [-0.05411126  1.        ]
  HOMO = -0.628220295765348  LUMO = 386.557519648258
  mo_energy =
[-1.18570364e+02 -1.40727218e+01 -8.55591856e+00 -8.55591856e+00
 -8.55591856e+00 -1.86930692e+00 -6.28220296e-01 -6.28220296e-01
 -6.28220296e-01  3.86557520e+02  5.80214240e+03  5.80214240e+03
  5.80214240e+03]
E1 = -667.7497195216683  E_coul = 171.8081579823108
cycle= 2 E= -495.941561539358  delta_E= -4.43e-05  |g|= 0.000997  |ddm|= 0.00123
    CPU time for cycle= 2      0.02 sec, wall time      0.01 sec
diis-norm(errvec)=0.000976129
diis-c [-4.83052773e-07 -2.95518378e-03  1.00295518e+00]
  HOMO = -0.628221580988844  LUMO = 386.555617377687
  mo_energy =
[-1.18571836e+02 -1.40728188e+01 -8.55602571e+00 -8.55602571e+00
 -8.55602571e+00 -1.86931023e+00 -6.28221581e-01 -6.28221581e-01
 -6.28221581e-01  3.86555617e+02  5.80213609e+03  5.80213609e+03
  5.80213609e+03]
E1 = -667.7497002198486  E_coul = 171.80813867938727
cycle= 3 E= -495.941561540461  delta_E= -1.1e-09  |g|= 2.9e-06  |ddm|= 5.8e-06
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=3.23226e-06
diis-c [-9.60389809e-13  3.55318420e-06 -3.70591292e-03  1.00370236e+00]
  HOMO = -0.628221580918226  LUMO = 386.555612481347
  mo_energy =
[-1.18571840e+02 -1.40728190e+01 -8.55602587e+00 -8.55602587e+00
 -8.55602587e+00 -1.86931024e+00 -6.28221581e-01 -6.28221581e-01
 -6.28221581e-01  3.86555612e+02  5.80213607e+03  5.80213607e+03
  5.80213607e+03]
E1 = -667.7497001727918  E_coul = 171.80813863233
cycle= 4 E= -495.941561540462  delta_E= -4.55e-13  |g|= 6.84e-09  |ddm|= 1.37e-08
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
E1 = -667.7497001727918  E_coul = 171.80813863233
  HOMO = -0.628221580911449  LUMO = 386.5556124828
  mo_energy =
[-1.18571840e+02 -1.40728190e+01 -8.55602587e+00 -8.55602587e+00
 -8.55602587e+00 -1.86931024e+00 -6.28221581e-01 -6.28221581e-01
 -6.28221581e-01  3.86555612e+02  5.80213607e+03  5.80213607e+03
  5.80213607e+03]
E1 = -667.7497001728359  E_coul = 171.80813863237438
Extra cycle  E= -495.941561540462  delta_E= 2.27e-13  |g|= 5.48e-11  |ddm|= 3.48e-11
    CPU time for scf_cycle      7.67 sec, wall time      0.40 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 4.531487109925005
E1 = -667.7497001728359  E_coul = 171.80813863237438
init E= -495.941561540462
    CPU time for initialize scf      7.98 sec, wall time      0.35 sec
  HOMO = -0.628221580912307  LUMO = 386.555612482791
  mo_energy =
[-1.18571840e+02 -1.40728190e+01 -8.55602587e+00 -8.55602587e+00
 -8.55602587e+00 -1.86931024e+00 -6.28221581e-01 -6.28221581e-01
 -6.28221581e-01  3.86555612e+02  5.80213607e+03  5.80213607e+03
  5.80213607e+03]
E1 = -667.7497001728358  E_coul = 171.80813863237435
cycle= 1 E= -495.941561540461  delta_E= 1.14e-13  |g|= 2.76e-12  |ddm|= 2.44e-13
    CPU time for cycle= 1      0.22 sec, wall time      0.01 sec
E1 = -667.7497001728358  E_coul = 171.80813863237435
  HOMO = -0.628221580910437  LUMO = 386.555612482791
  mo_energy =
[-1.18571840e+02 -1.40728190e+01 -8.55602587e+00 -8.55602587e+00
 -8.55602587e+00 -1.86931024e+00 -6.28221581e-01 -6.28221581e-01
 -6.28221581e-01  3.86555612e+02  5.80213607e+03  5.80213607e+03
  5.80213607e+03]
E1 = -667.7497001728365  E_coul = 171.80813863237472
Extra cycle  E= -495.941561540462  delta_E= -3.41e-13  |g|= 3.69e-12  |ddm|= 9.03e-15
    CPU time for scf_cycle      8.26 sec, wall time      0.41 sec
exp = [4.71058252e+00 4.62455596e+02 2.40373945e-01 6.86267246e+01
 8.28462224e+00 1.69693952e-01 2.69396475e+03]
grad_E = [ 9.47934629e-03  4.85439988e-04 -6.07831919e+00  4.76433477e-04
  4.14134063e-03 -2.07871374e+01  5.60958863e-06]
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
number_of_s_exps = 4
number_of_p_exps = 3

exps = np.zeros((number_of_s_exps+number_of_p_exps,2))
#exps[:, 0] = decaying_nums(5)

# S
exps[0,0] = 20.0
exps[1,0] = 9.5045827955887916e+01
exps[2,0] = 4.4881042475048387e+00 
exps[3,0] = 3.9799528004692630e-01
             
# P          
exps[3,0] = 3.0108199280832128e+01
exps[4,0] = 6.1393781325590453e+00
exps[5,0] = 4.8929328703550412e-01

basis =  str(number_of_s_exps)+"s"+str(number_of_p_exps)+"p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc21115.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 24
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 18 14:59:27 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35677784.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 32000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 32000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 32000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  4.72029825212        1
[INPUT] 0    0    [1    /1   ]  465.105371573        1
[INPUT] 0    0    [1    /1   ]  0.243124864129       1
[INPUT] 0    0    [1    /1   ]  68.8226098352        1
[INPUT] 1    0    [1    /1   ]  8.28741275408        1
[INPUT] 1    0    [1    /1   ]  0.169100650361       1
[INPUT] 1    0    [1    /1   ]  2693.96474823        1

nuclear repulsion = 0
number of shells = 7
number of NR pGTOs = 13
number of NR cGTOs = 13
basis = {'Ar': [[0, [4.720298252115741, 1.0]], [0, [465.1053715731295, 1.0]], [0, [0.24312486412868006, 1.0]], [0, [68.82260983520548, 1.0]], [1, [8.287412754083704, 1.0]], [1, [0.1691006503605273, 1.0]], [1, [2693.964748226837, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [4.72029825]
bas 1, expnt(s) = [465.10537157]
bas 2, expnt(s) = [0.24312486]
bas 3, expnt(s) = [68.82260984]
bas 4, expnt(s) = [8.28741275]
bas 5, expnt(s) = [0.16910065]
bas 6, expnt(s) = [2693.96474823]
CPU time:       381.08
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  1  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]
 [ 0  1  1  1  0 36 37  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 4.72029825e+00 8.09081190e+00 4.65105372e+02 2.53033802e+02
 2.43124864e-01 8.74756254e-01 6.88226098e+01 6.03689160e+01
 8.28741275e+00 4.10211758e+01 1.69100650e-01 3.16348653e-01
 2.69396475e+03 5.66205754e+04]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 15.481744767601885
cond(S) = 4.523525249611075
E1 = -631.8112676814903  E_coul = 148.1707580222912
init E= -483.640509659199
    CPU time for initialize scf      0.20 sec, wall time      0.02 sec
  HOMO = -1.40341489952324  LUMO = 387.194422161682
  mo_energy =
[-1.20620745e+02 -1.58565770e+01 -1.02878033e+01 -1.02878033e+01
 -1.02878033e+01 -2.92496832e+00 -1.40341490e+00 -1.40341490e+00
 -1.40341490e+00  3.87194422e+02  5.80042908e+03  5.80042908e+03
  5.80042908e+03]
E1 = -667.8203075938794  E_coul = 171.87644596412048
cycle= 1 E= -495.943861629759  delta_E= -12.3  |g|= 0.221  |ddm|= 1.19
    CPU time for cycle= 1      0.22 sec, wall time      0.01 sec
diis-norm(errvec)=0.232951
diis-c [-0.05426597  1.        ]
  HOMO = -0.626379333550202  LUMO = 389.272153392548
  mo_energy =
[-1.18557175e+02 -1.40674137e+01 -8.55053842e+00 -8.55053842e+00
 -8.55053842e+00 -1.87838752e+00 -6.26379334e-01 -6.26379334e-01
 -6.26379334e-01  3.89272153e+02  5.80216575e+03  5.80216575e+03
  5.80216575e+03]
E1 = -667.8166069228356  E_coul = 171.8727015576607
cycle= 2 E= -495.943905365175  delta_E= -4.37e-05  |g|= 0.000996  |ddm|= 0.00121
    CPU time for cycle= 2      0.13 sec, wall time      0.01 sec
diis-norm(errvec)=0.000980588
diis-c [-4.86360374e-07 -2.96797374e-03  1.00296797e+00]
  HOMO = -0.6263805872293  LUMO = 389.270254250503
  mo_energy =
[-1.18558634e+02 -1.40675097e+01 -8.55064361e+00 -8.55064361e+00
 -8.55064361e+00 -1.87839085e+00 -6.26380587e-01 -6.26380587e-01
 -6.26380587e-01  3.89270254e+02  5.80215946e+03  5.80215946e+03
  5.80215946e+03]
E1 = -667.816587855854  E_coul = 171.87268248958839
cycle= 3 E= -495.943905366266  delta_E= -1.09e-09  |g|= 2.91e-06  |ddm|= 5.72e-06
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=3.27772e-06
diis-c [-1.02955312e-12  3.59197320e-06 -3.73405431e-03  1.00373046e+00]
  HOMO = -0.626380587118495  LUMO = 389.270249373543
  mo_energy =
[-1.18558638e+02 -1.40675098e+01 -8.55064376e+00 -8.55064376e+00
 -8.55064376e+00 -1.87839086e+00 -6.26380587e-01 -6.26380587e-01
 -6.26380587e-01  3.89270249e+02  5.80215944e+03  5.80215944e+03
  5.80215944e+03]
E1 = -667.816587809672  E_coul = 171.872682443407
cycle= 4 E= -495.943905366265  delta_E= 6.25e-13  |g|= 7.03e-09  |ddm|= 1.34e-08
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
E1 = -667.816587809672  E_coul = 171.872682443407
  HOMO = -0.626380587108968  LUMO = 389.27024937519
  mo_energy =
[-1.18558638e+02 -1.40675098e+01 -8.55064376e+00 -8.55064376e+00
 -8.55064376e+00 -1.87839086e+00 -6.26380587e-01 -6.26380587e-01
 -6.26380587e-01  3.89270249e+02  5.80215944e+03  5.80215944e+03
  5.80215944e+03]
E1 = -667.8165878097187  E_coul = 171.87268244345375
Extra cycle  E= -495.943905366265  delta_E=    0  |g|= 5.61e-11  |ddm|= 3.58e-11
    CPU time for scf_cycle      0.58 sec, wall time      0.08 sec
exp = [4.72029825e+00 4.65105372e+02 2.43124864e-01 6.88226098e+01
 8.28741275e+00 1.69100650e-01 2.69396475e+03]
E = -495.94390536626497
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
number_of_s_exps = 4
number_of_p_exps = 3

exps = np.zeros((number_of_s_exps+number_of_p_exps,2))
#exps[:, 0] = decaying_nums(5)

# S
exps[0,0] = 20.0
exps[1,0] = 9.5045827955887916e+01
exps[2,0] = 4.4881042475048387e+00 
exps[3,0] = 3.9799528004692630e-01
             
# P          
exps[3,0] = 3.0108199280832128e+01
exps[4,0] = 6.1393781325590453e+00
exps[5,0] = 4.8929328703550412e-01

basis =  str(number_of_s_exps)+"s"+str(number_of_p_exps)+"p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc21115.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 24
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 18 14:59:27 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35677784.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 32000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 32000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 32000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  4.72029825212        1
[INPUT] 0    0    [1    /1   ]  465.105371573        1
[INPUT] 0    0    [1    /1   ]  0.243124864129       1
[INPUT] 0    0    [1    /1   ]  68.8226098352        1
[INPUT] 1    0    [1    /1   ]  8.28741275408        1
[INPUT] 1    0    [1    /1   ]  0.169100650361       1
[INPUT] 1    0    [1    /1   ]  2693.96474823        1

nuclear repulsion = 0
number of shells = 7
number of NR pGTOs = 13
number of NR cGTOs = 13
basis = {'Ar': [[0, [4.720298252115741, 1.0]], [0, [465.1053715731295, 1.0]], [0, [0.24312486412868006, 1.0]], [0, [68.82260983520548, 1.0]], [1, [8.287412754083704, 1.0]], [1, [0.1691006503605273, 1.0]], [1, [2693.964748226837, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [4.72029825]
bas 1, expnt(s) = [465.10537157]
bas 2, expnt(s) = [0.24312486]
bas 3, expnt(s) = [68.82260984]
bas 4, expnt(s) = [8.28741275]
bas 5, expnt(s) = [0.16910065]
bas 6, expnt(s) = [2693.96474823]
CPU time:       381.78
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  1  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]
 [ 0  1  1  1  0 36 37  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 4.72029825e+00 8.09081190e+00 4.65105372e+02 2.53033802e+02
 2.43124864e-01 8.74756254e-01 6.88226098e+01 6.03689160e+01
 8.28741275e+00 4.10211758e+01 1.69100650e-01 3.16348653e-01
 2.69396475e+03 5.66205754e+04]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 15.481744767601885
cond(S) = 4.523525249611075
E1 = -631.8112676814903  E_coul = 148.1707580222912
init E= -483.640509659199
    CPU time for initialize scf      0.20 sec, wall time      0.02 sec
  HOMO = -1.40341489952324  LUMO = 387.194422161682
  mo_energy =
[-1.20620745e+02 -1.58565770e+01 -1.02878033e+01 -1.02878033e+01
 -1.02878033e+01 -2.92496832e+00 -1.40341490e+00 -1.40341490e+00
 -1.40341490e+00  3.87194422e+02  5.80042908e+03  5.80042908e+03
  5.80042908e+03]
E1 = -667.8203075938794  E_coul = 171.87644596412048
cycle= 1 E= -495.943861629759  delta_E= -12.3  |g|= 0.221  |ddm|= 1.19
    CPU time for cycle= 1      0.22 sec, wall time      0.01 sec
diis-norm(errvec)=0.232951
diis-c [-0.05426597  1.        ]
  HOMO = -0.626379333550202  LUMO = 389.272153392548
  mo_energy =
[-1.18557175e+02 -1.40674137e+01 -8.55053842e+00 -8.55053842e+00
 -8.55053842e+00 -1.87838752e+00 -6.26379334e-01 -6.26379334e-01
 -6.26379334e-01  3.89272153e+02  5.80216575e+03  5.80216575e+03
  5.80216575e+03]
E1 = -667.8166069228356  E_coul = 171.8727015576607
cycle= 2 E= -495.943905365175  delta_E= -4.37e-05  |g|= 0.000996  |ddm|= 0.00121
    CPU time for cycle= 2      0.13 sec, wall time      0.01 sec
diis-norm(errvec)=0.000980588
diis-c [-4.86360374e-07 -2.96797374e-03  1.00296797e+00]
  HOMO = -0.6263805872293  LUMO = 389.270254250503
  mo_energy =
[-1.18558634e+02 -1.40675097e+01 -8.55064361e+00 -8.55064361e+00
 -8.55064361e+00 -1.87839085e+00 -6.26380587e-01 -6.26380587e-01
 -6.26380587e-01  3.89270254e+02  5.80215946e+03  5.80215946e+03
  5.80215946e+03]
E1 = -667.816587855854  E_coul = 171.87268248958839
cycle= 3 E= -495.943905366266  delta_E= -1.09e-09  |g|= 2.91e-06  |ddm|= 5.72e-06
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=3.27772e-06
diis-c [-1.02955312e-12  3.59197320e-06 -3.73405431e-03  1.00373046e+00]
  HOMO = -0.626380587118495  LUMO = 389.270249373543
  mo_energy =
[-1.18558638e+02 -1.40675098e+01 -8.55064376e+00 -8.55064376e+00
 -8.55064376e+00 -1.87839086e+00 -6.26380587e-01 -6.26380587e-01
 -6.26380587e-01  3.89270249e+02  5.80215944e+03  5.80215944e+03
  5.80215944e+03]
E1 = -667.816587809672  E_coul = 171.872682443407
cycle= 4 E= -495.943905366265  delta_E= 6.25e-13  |g|= 7.03e-09  |ddm|= 1.34e-08
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
E1 = -667.816587809672  E_coul = 171.872682443407
  HOMO = -0.626380587108968  LUMO = 389.27024937519
  mo_energy =
[-1.18558638e+02 -1.40675098e+01 -8.55064376e+00 -8.55064376e+00
 -8.55064376e+00 -1.87839086e+00 -6.26380587e-01 -6.26380587e-01
 -6.26380587e-01  3.89270249e+02  5.80215944e+03  5.80215944e+03
  5.80215944e+03]
E1 = -667.8165878097187  E_coul = 171.87268244345375
Extra cycle  E= -495.943905366265  delta_E=    0  |g|= 5.61e-11  |ddm|= 3.58e-11
    CPU time for scf_cycle      0.58 sec, wall time      0.08 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 4.523525249611075
E1 = -667.8165878097187  E_coul = 171.87268244345375
init E= -495.943905366265
    CPU time for initialize scf      1.23 sec, wall time      0.05 sec
  HOMO = -0.626380587111111  LUMO = 389.270249375182
  mo_energy =
[-1.18558638e+02 -1.40675098e+01 -8.55064376e+00 -8.55064376e+00
 -8.55064376e+00 -1.87839086e+00 -6.26380587e-01 -6.26380587e-01
 -6.26380587e-01  3.89270249e+02  5.80215944e+03  5.80215944e+03
  5.80215944e+03]
E1 = -667.8165878097185  E_coul = 171.87268244345375
cycle= 1 E= -495.943905366265  delta_E= 2.27e-13  |g|= 3.17e-12  |ddm|= 2.49e-13
    CPU time for cycle= 1      0.21 sec, wall time      0.01 sec
E1 = -667.8165878097185  E_coul = 171.87268244345375
  HOMO = -0.626380587111896  LUMO = 389.270249375182
  mo_energy =
[-1.18558638e+02 -1.40675098e+01 -8.55064376e+00 -8.55064376e+00
 -8.55064376e+00 -1.87839086e+00 -6.26380587e-01 -6.26380587e-01
 -6.26380587e-01  3.89270249e+02  5.80215944e+03  5.80215944e+03
  5.80215944e+03]
E1 = -667.8165878097186  E_coul = 171.87268244345373
Extra cycle  E= -495.943905366265  delta_E= -1.14e-13  |g|= 1.13e-12  |ddm|= 6.22e-15
    CPU time for scf_cycle      1.54 sec, wall time      0.12 sec
exp = [4.72029825e+00 4.65105372e+02 2.43124864e-01 6.88226098e+01
 8.28741275e+00 1.69100650e-01 2.69396475e+03]
grad_E = [ 1.77065355e-02  7.33930645e-04 -5.98023307e+00  8.98443574e-04
  8.02633849e-03 -2.08160089e+01  5.61347831e-06]
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
number_of_s_exps = 4
number_of_p_exps = 3

exps = np.zeros((number_of_s_exps+number_of_p_exps,2))
#exps[:, 0] = decaying_nums(5)

# S
exps[0,0] = 20.0
exps[1,0] = 9.5045827955887916e+01
exps[2,0] = 4.4881042475048387e+00 
exps[3,0] = 3.9799528004692630e-01
             
# P          
exps[3,0] = 3.0108199280832128e+01
exps[4,0] = 6.1393781325590453e+00
exps[5,0] = 4.8929328703550412e-01

basis =  str(number_of_s_exps)+"s"+str(number_of_p_exps)+"p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc21115.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 24
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 18 14:59:30 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35677784.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 32000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 32000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 32000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  4.73555558899        1
[INPUT] 0    0    [1    /1   ]  469.332577969        1
[INPUT] 0    0    [1    /1   ]  0.247610446465       1
[INPUT] 0    0    [1    /1   ]  69.1324003548        1
[INPUT] 1    0    [1    /1   ]  8.29186748847        1
[INPUT] 1    0    [1    /1   ]  0.168344264584       1
[INPUT] 1    0    [1    /1   ]  2693.96474703        1

nuclear repulsion = 0
number of shells = 7
number of NR pGTOs = 13
number of NR cGTOs = 13
basis = {'Ar': [[0, [4.735555588988386, 1.0]], [0, [469.33257796887136, 1.0]], [0, [0.24761044646461364, 1.0]], [0, [69.13240035479429, 1.0]], [1, [8.291867488466098, 1.0]], [1, [0.16834426458409044, 1.0]], [1, [2693.9647470285768, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [4.73555559]
bas 1, expnt(s) = [469.33257797]
bas 2, expnt(s) = [0.24761045]
bas 3, expnt(s) = [69.13240035]
bas 4, expnt(s) = [8.29186749]
bas 5, expnt(s) = [0.16834426]
bas 6, expnt(s) = [2693.96474703]
CPU time:       386.58
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  1  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]
 [ 0  1  1  1  0 36 37  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 4.73555559e+00 8.11041783e+00 4.69332578e+02 2.54756662e+02
 2.47610446e-01 8.86832799e-01 6.91324004e+01 6.05726050e+01
 8.29186749e+00 4.10487403e+01 1.68344265e-01 3.14580862e-01
 2.69396475e+03 5.66205753e+04]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 15.476939882043325
cond(S) = 4.511124751517654
E1 = -631.9339342483223  E_coul = 148.27350151733873
init E= -483.660432730984
    CPU time for initialize scf      5.35 sec, wall time      0.25 sec
  HOMO = -1.39962885327455  LUMO = 391.521684038843
  mo_energy =
[-1.20602449e+02 -1.58467893e+01 -1.02781410e+01 -1.02781410e+01
 -1.02781410e+01 -2.94528407e+00 -1.39962885e+00 -1.39962885e+00
 -1.39962885e+00  3.91521684e+02  5.80045273e+03  5.80045273e+03
  5.80045273e+03]
E1 = -667.9481571502813  E_coul = 171.99830709692623
cycle= 1 E= -495.949850053355  delta_E= -12.3  |g|= 0.221  |ddm|= 1.19
    CPU time for cycle= 1      0.23 sec, wall time      0.01 sec
diis-norm(errvec)=0.233519
diis-c [-0.05453101  1.        ]
  HOMO = -0.623594865865195  LUMO = 393.604870157388
  mo_energy =
[-1.18534104e+02 -1.40573216e+01 -8.54051941e+00 -8.54051941e+00
 -8.54051941e+00 -1.89202462e+00 -6.23594866e-01 -6.23594866e-01
 -6.23594866e-01  3.93604870e+02  5.80220413e+03  5.80220413e+03
  5.80220413e+03]
E1 = -667.9445175451423  E_coul = 171.9946246340744
cycle= 2 E= -495.949892911068  delta_E= -4.29e-05  |g|= 0.000994  |ddm|= 0.00119
    CPU time for cycle= 2      0.08 sec, wall time      0.01 sec
diis-norm(errvec)=0.000988249
diis-c [-4.92079555e-07 -2.98984909e-03  1.00298985e+00]
  HOMO = -0.623596073241717  LUMO = 393.602975647356
  mo_energy =
[-1.18535543e+02 -1.40574160e+01 -8.54062156e+00 -8.54062156e+00
 -8.54062156e+00 -1.89202799e+00 -6.23596073e-01 -6.23596073e-01
 -6.23596073e-01  3.93602976e+02  5.80219788e+03  5.80219788e+03
  5.80219788e+03]
E1 = -667.9444988387472  E_coul = 171.99460592660833
cycle= 3 E= -495.949892912139  delta_E= -1.07e-09  |g|= 2.94e-06  |ddm|= 5.59e-06
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=3.34947e-06
diis-c [-1.13525649e-12  3.65503571e-06 -3.77711635e-03  1.00377346e+00]
  HOMO = -0.623596073072156  LUMO = 393.602970803283
  mo_energy =
[-1.18535546e+02 -1.40574161e+01 -8.54062169e+00 -8.54062169e+00
 -8.54062169e+00 -1.89202800e+00 -6.23596073e-01 -6.23596073e-01
 -6.23596073e-01  3.93602971e+02  5.80219786e+03  5.80219786e+03
  5.80219786e+03]
E1 = -667.9444987939263  E_coul = 171.9946058817875
cycle= 4 E= -495.949892912139  delta_E= 1.14e-13  |g|= 7.3e-09  |ddm|= 1.31e-08
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
E1 = -667.9444987939263  E_coul = 171.9946058817875
  HOMO = -0.623596073066168  LUMO = 393.602970805246
  mo_energy =
[-1.18535546e+02 -1.40574161e+01 -8.54062169e+00 -8.54062169e+00
 -8.54062169e+00 -1.89202800e+00 -6.23596073e-01 -6.23596073e-01
 -6.23596073e-01  3.93602971e+02  5.80219786e+03  5.80219786e+03
  5.80219786e+03]
E1 = -667.9444987939765  E_coul = 171.99460588183757
Extra cycle  E= -495.949892912139  delta_E= -1.71e-13  |g|= 5.73e-11  |ddm|= 3.7e-11
    CPU time for scf_cycle      5.70 sec, wall time      0.30 sec
exp = [4.73555559e+00 4.69332578e+02 2.47610446e-01 6.91324004e+01
 8.29186749e+00 1.68344265e-01 2.69396475e+03]
E = -495.949892912139
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
number_of_s_exps = 4
number_of_p_exps = 3

exps = np.zeros((number_of_s_exps+number_of_p_exps,2))
#exps[:, 0] = decaying_nums(5)

# S
exps[0,0] = 20.0
exps[1,0] = 9.5045827955887916e+01
exps[2,0] = 4.4881042475048387e+00 
exps[3,0] = 3.9799528004692630e-01
             
# P          
exps[3,0] = 3.0108199280832128e+01
exps[4,0] = 6.1393781325590453e+00
exps[5,0] = 4.8929328703550412e-01

basis =  str(number_of_s_exps)+"s"+str(number_of_p_exps)+"p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc21115.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 24
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 18 14:59:30 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35677784.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 32000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 32000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 32000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  4.73555558899        1
[INPUT] 0    0    [1    /1   ]  469.332577969        1
[INPUT] 0    0    [1    /1   ]  0.247610446465       1
[INPUT] 0    0    [1    /1   ]  69.1324003548        1
[INPUT] 1    0    [1    /1   ]  8.29186748847        1
[INPUT] 1    0    [1    /1   ]  0.168344264584       1
[INPUT] 1    0    [1    /1   ]  2693.96474703        1

nuclear repulsion = 0
number of shells = 7
number of NR pGTOs = 13
number of NR cGTOs = 13
basis = {'Ar': [[0, [4.735555588988386, 1.0]], [0, [469.33257796887136, 1.0]], [0, [0.24761044646461364, 1.0]], [0, [69.13240035479429, 1.0]], [1, [8.291867488466098, 1.0]], [1, [0.16834426458409044, 1.0]], [1, [2693.9647470285768, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [4.73555559]
bas 1, expnt(s) = [469.33257797]
bas 2, expnt(s) = [0.24761045]
bas 3, expnt(s) = [69.13240035]
bas 4, expnt(s) = [8.29186749]
bas 5, expnt(s) = [0.16834426]
bas 6, expnt(s) = [2693.96474703]
CPU time:       392.43
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  1  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]
 [ 0  1  1  1  0 36 37  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 4.73555559e+00 8.11041783e+00 4.69332578e+02 2.54756662e+02
 2.47610446e-01 8.86832799e-01 6.91324004e+01 6.05726050e+01
 8.29186749e+00 4.10487403e+01 1.68344265e-01 3.14580862e-01
 2.69396475e+03 5.66205753e+04]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 15.476939882043325
cond(S) = 4.511124751517654
E1 = -631.9339342483223  E_coul = 148.27350151733873
init E= -483.660432730984
    CPU time for initialize scf      0.21 sec, wall time      0.03 sec
  HOMO = -1.39962885327455  LUMO = 391.521684038843
  mo_energy =
[-1.20602449e+02 -1.58467893e+01 -1.02781410e+01 -1.02781410e+01
 -1.02781410e+01 -2.94528407e+00 -1.39962885e+00 -1.39962885e+00
 -1.39962885e+00  3.91521684e+02  5.80045273e+03  5.80045273e+03
  5.80045273e+03]
E1 = -667.9481571502813  E_coul = 171.99830709692623
cycle= 1 E= -495.949850053355  delta_E= -12.3  |g|= 0.221  |ddm|= 1.19
    CPU time for cycle= 1      0.23 sec, wall time      0.01 sec
diis-norm(errvec)=0.233519
diis-c [-0.05453101  1.        ]
  HOMO = -0.623594865865195  LUMO = 393.604870157388
  mo_energy =
[-1.18534104e+02 -1.40573216e+01 -8.54051941e+00 -8.54051941e+00
 -8.54051941e+00 -1.89202462e+00 -6.23594866e-01 -6.23594866e-01
 -6.23594866e-01  3.93604870e+02  5.80220413e+03  5.80220413e+03
  5.80220413e+03]
E1 = -667.9445175451423  E_coul = 171.9946246340744
cycle= 2 E= -495.949892911068  delta_E= -4.29e-05  |g|= 0.000994  |ddm|= 0.00119
    CPU time for cycle= 2      0.12 sec, wall time      0.01 sec
diis-norm(errvec)=0.000988249
diis-c [-4.92079555e-07 -2.98984909e-03  1.00298985e+00]
  HOMO = -0.623596073241717  LUMO = 393.602975647356
  mo_energy =
[-1.18535543e+02 -1.40574160e+01 -8.54062156e+00 -8.54062156e+00
 -8.54062156e+00 -1.89202799e+00 -6.23596073e-01 -6.23596073e-01
 -6.23596073e-01  3.93602976e+02  5.80219788e+03  5.80219788e+03
  5.80219788e+03]
E1 = -667.9444988387472  E_coul = 171.99460592660833
cycle= 3 E= -495.949892912139  delta_E= -1.07e-09  |g|= 2.94e-06  |ddm|= 5.59e-06
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=3.34947e-06
diis-c [-1.13525649e-12  3.65503571e-06 -3.77711635e-03  1.00377346e+00]
  HOMO = -0.623596073072156  LUMO = 393.602970803283
  mo_energy =
[-1.18535546e+02 -1.40574161e+01 -8.54062169e+00 -8.54062169e+00
 -8.54062169e+00 -1.89202800e+00 -6.23596073e-01 -6.23596073e-01
 -6.23596073e-01  3.93602971e+02  5.80219786e+03  5.80219786e+03
  5.80219786e+03]
E1 = -667.9444987939263  E_coul = 171.9946058817875
cycle= 4 E= -495.949892912139  delta_E= 1.14e-13  |g|= 7.3e-09  |ddm|= 1.31e-08
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
E1 = -667.9444987939263  E_coul = 171.9946058817875
  HOMO = -0.623596073066168  LUMO = 393.602970805246
  mo_energy =
[-1.18535546e+02 -1.40574161e+01 -8.54062169e+00 -8.54062169e+00
 -8.54062169e+00 -1.89202800e+00 -6.23596073e-01 -6.23596073e-01
 -6.23596073e-01  3.93602971e+02  5.80219786e+03  5.80219786e+03
  5.80219786e+03]
E1 = -667.9444987939765  E_coul = 171.99460588183757
Extra cycle  E= -495.949892912139  delta_E= -1.71e-13  |g|= 5.73e-11  |ddm|= 3.7e-11
    CPU time for scf_cycle      0.58 sec, wall time      0.08 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 4.511124751517654
E1 = -667.9444987939765  E_coul = 171.99460588183757
init E= -495.949892912139
    CPU time for initialize scf      1.19 sec, wall time      0.05 sec
  HOMO = -0.62359607306436  LUMO = 393.602970805239
  mo_energy =
[-1.18535546e+02 -1.40574161e+01 -8.54062169e+00 -8.54062169e+00
 -8.54062169e+00 -1.89202800e+00 -6.23596073e-01 -6.23596073e-01
 -6.23596073e-01  3.93602971e+02  5.80219786e+03  5.80219786e+03
  5.80219786e+03]
E1 = -667.9444987939764  E_coul = 171.99460588183774
cycle= 1 E= -495.949892912139  delta_E= 2.84e-13  |g|= 3.19e-12  |ddm|= 2.54e-13
    CPU time for cycle= 1      0.21 sec, wall time      0.01 sec
E1 = -667.9444987939764  E_coul = 171.99460588183774
  HOMO = -0.62359607306556  LUMO = 393.602970805239
  mo_energy =
[-1.18535546e+02 -1.40574161e+01 -8.54062169e+00 -8.54062169e+00
 -8.54062169e+00 -1.89202800e+00 -6.23596073e-01 -6.23596073e-01
 -6.23596073e-01  3.93602971e+02  5.80219786e+03  5.80219786e+03
  5.80219786e+03]
E1 = -667.9444987939768  E_coul = 171.99460588183797
Extra cycle  E= -495.949892912139  delta_E= -1.14e-13  |g|= 3.59e-12  |ddm|= 5.72e-15
    CPU time for scf_cycle      1.48 sec, wall time      0.11 sec
exp = [4.73555559e+00 4.69332578e+02 2.47610446e-01 6.91324004e+01
 8.29186749e+00 1.68344265e-01 2.69396475e+03]
grad_E = [ 3.05607375e-02  1.12160300e-03 -5.82062363e+00  1.55826736e-03
  1.41091863e-02 -2.08393933e+01  5.61971570e-06]
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
number_of_s_exps = 4
number_of_p_exps = 3

exps = np.zeros((number_of_s_exps+number_of_p_exps,2))
#exps[:, 0] = decaying_nums(5)

# S
exps[0,0] = 20.0
exps[1,0] = 9.5045827955887916e+01
exps[2,0] = 4.4881042475048387e+00 
exps[3,0] = 3.9799528004692630e-01
             
# P          
exps[3,0] = 3.0108199280832128e+01
exps[4,0] = 6.1393781325590453e+00
exps[5,0] = 4.8929328703550412e-01

basis =  str(number_of_s_exps)+"s"+str(number_of_p_exps)+"p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc21115.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 24
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 18 14:59:33 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35677784.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 32000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 32000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 32000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  4.75985152085        1
[INPUT] 0    0    [1    /1   ]  476.243713704        1
[INPUT] 0    0    [1    /1   ]  0.255195237446       1
[INPUT] 0    0    [1    /1   ]  69.6317950559        1
[INPUT] 1    0    [1    /1   ]  8.2991107429         1
[INPUT] 1    0    [1    /1   ]  0.167599478199       1
[INPUT] 1    0    [1    /1   ]  2693.96474386        1

nuclear repulsion = 0
number of shells = 7
number of NR pGTOs = 13
number of NR cGTOs = 13
basis = {'Ar': [[0, [4.759851520849258, 1.0]], [0, [476.243713704446, 1.0]], [0, [0.25519523744591316, 1.0]], [0, [69.63179505589841, 1.0]], [1, [8.299110742899835, 1.0]], [1, [0.1675994781993652, 1.0]], [1, [2693.9647438637235, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [4.75985152]
bas 1, expnt(s) = [476.2437137]
bas 2, expnt(s) = [0.25519524]
bas 3, expnt(s) = [69.63179506]
bas 4, expnt(s) = [8.29911074]
bas 5, expnt(s) = [0.16759948]
bas 6, expnt(s) = [2693.96474386]
CPU time:       397.22
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  1  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]
 [ 0  1  1  1  0 36 37  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 4.75985152e+00 8.14160594e+00 4.76243714e+02 2.57565071e+02
 2.55195237e-01 9.07129829e-01 6.96317951e+01 6.09004803e+01
 8.29911074e+00 4.10935672e+01 1.67599478e-01 3.12842120e-01
 2.69396474e+03 5.66205752e+04]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 15.477326584186
cond(S) = 4.491642285231645
E1 = -632.2284891866403  E_coul = 148.5218149348987
init E= -483.706674251742
    CPU time for initialize scf      3.90 sec, wall time      0.19 sec
  HOMO = -1.39268489980335  LUMO = 398.603954414413
  mo_energy =
[-1.20564743e+02 -1.58241641e+01 -1.02562165e+01 -1.02562165e+01
 -1.02562165e+01 -2.97375690e+00 -1.39268490e+00 -1.39268490e+00
 -1.39268490e+00  3.98603954e+02  5.80049732e+03  5.80049732e+03
  5.80049732e+03]
E1 = -668.2119008922774  E_coul = 172.24648586326484
cycle= 1 E= -495.965415029013  delta_E= -12.3  |g|= 0.22  |ddm|=  1.2
    CPU time for cycle= 1      0.23 sec, wall time      0.01 sec
diis-norm(errvec)=0.234546
diis-c [-0.05501164  1.        ]
  HOMO = -0.619443414834029  LUMO = 400.693601324785
  mo_energy =
[-1.18491200e+02 -1.40366596e+01 -8.52043843e+00 -8.52043843e+00
 -8.52043843e+00 -1.91198031e+00 -6.19443415e-01 -6.19443415e-01
 -6.19443415e-01  4.00693601e+02  5.80226974e+03  5.80226974e+03
  5.80226974e+03]
E1 = -668.2083562548019  E_coul = 172.24289969110308
cycle= 2 E= -495.965456563699  delta_E= -4.15e-05  |g|= 0.000992  |ddm|= 0.00116
    CPU time for cycle= 2      0.09 sec, wall time      0.01 sec
diis-norm(errvec)=0.00100208
diis-c [-5.02448652e-07 -3.02913281e-03  1.00302913e+00]
  HOMO = -0.619444556243866  LUMO = 400.69171347178
  mo_energy =
[-1.18492607e+02 -1.40367515e+01 -8.52053587e+00 -8.52053587e+00
 -8.52053587e+00 -1.91198374e+00 -6.19444556e-01 -6.19444556e-01
 -6.19444556e-01  4.00691713e+02  5.80226355e+03  5.80226355e+03
  5.80226355e+03]
E1 = -668.2083381028561  E_coul = 172.24288153811315
cycle= 3 E= -495.965456564743  delta_E= -1.04e-09  |g|= 2.98e-06  |ddm|= 5.4e-06
    CPU time for cycle= 3      0.02 sec, wall time      0.01 sec
diis-norm(errvec)=3.4632e-06
diis-c [-1.29332717e-12  3.75822847e-06 -3.84128422e-03  1.00383753e+00]
  HOMO = -0.619444555988288  LUMO = 400.691708686168
  mo_energy =
[-1.18492611e+02 -1.40367516e+01 -8.52053599e+00 -8.52053599e+00
 -8.52053599e+00 -1.91198374e+00 -6.19444556e-01 -6.19444556e-01
 -6.19444556e-01  4.00691709e+02  5.80226353e+03  5.80226353e+03
  5.80226353e+03]
E1 = -668.2083380601639  E_coul = 172.24288149542252
cycle= 4 E= -495.965456564741  delta_E= 1.65e-12  |g|= 7.64e-09  |ddm|= 1.27e-08
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
E1 = -668.2083380601639  E_coul = 172.24288149542252
  HOMO = -0.619444555980104  LUMO = 400.691708688645
  mo_energy =
[-1.18492611e+02 -1.40367516e+01 -8.52053599e+00 -8.52053599e+00
 -8.52053599e+00 -1.91198374e+00 -6.19444556e-01 -6.19444556e-01
 -6.19444556e-01  4.00691709e+02  5.80226353e+03  5.80226353e+03
  5.80226353e+03]
E1 = -668.2083380602203  E_coul = 172.24288149547797
Extra cycle  E= -495.965456564742  delta_E= -9.66e-13  |g|= 5.87e-11  |ddm|= 3.86e-11
    CPU time for scf_cycle      4.25 sec, wall time      0.24 sec
exp = [4.75985152e+00 4.76243714e+02 2.55195237e-01 6.96317951e+01
 8.29911074e+00 1.67599478e-01 2.69396474e+03]
E = -495.96545656474234
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
number_of_s_exps = 4
number_of_p_exps = 3

exps = np.zeros((number_of_s_exps+number_of_p_exps,2))
#exps[:, 0] = decaying_nums(5)

# S
exps[0,0] = 20.0
exps[1,0] = 9.5045827955887916e+01
exps[2,0] = 4.4881042475048387e+00 
exps[3,0] = 3.9799528004692630e-01
             
# P          
exps[3,0] = 3.0108199280832128e+01
exps[4,0] = 6.1393781325590453e+00
exps[5,0] = 4.8929328703550412e-01

basis =  str(number_of_s_exps)+"s"+str(number_of_p_exps)+"p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc21115.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 24
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 18 14:59:33 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35677784.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 32000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 32000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 32000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  4.75985152085        1
[INPUT] 0    0    [1    /1   ]  476.243713704        1
[INPUT] 0    0    [1    /1   ]  0.255195237446       1
[INPUT] 0    0    [1    /1   ]  69.6317950559        1
[INPUT] 1    0    [1    /1   ]  8.2991107429         1
[INPUT] 1    0    [1    /1   ]  0.167599478199       1
[INPUT] 1    0    [1    /1   ]  2693.96474386        1

nuclear repulsion = 0
number of shells = 7
number of NR pGTOs = 13
number of NR cGTOs = 13
basis = {'Ar': [[0, [4.759851520849258, 1.0]], [0, [476.243713704446, 1.0]], [0, [0.25519523744591316, 1.0]], [0, [69.63179505589841, 1.0]], [1, [8.299110742899835, 1.0]], [1, [0.1675994781993652, 1.0]], [1, [2693.9647438637235, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [4.75985152]
bas 1, expnt(s) = [476.2437137]
bas 2, expnt(s) = [0.25519524]
bas 3, expnt(s) = [69.63179506]
bas 4, expnt(s) = [8.29911074]
bas 5, expnt(s) = [0.16759948]
bas 6, expnt(s) = [2693.96474386]
CPU time:       401.66
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  1  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]
 [ 0  1  1  1  0 36 37  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 4.75985152e+00 8.14160594e+00 4.76243714e+02 2.57565071e+02
 2.55195237e-01 9.07129829e-01 6.96317951e+01 6.09004803e+01
 8.29911074e+00 4.10935672e+01 1.67599478e-01 3.12842120e-01
 2.69396474e+03 5.66205752e+04]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 15.477326584186
cond(S) = 4.491642285231645
E1 = -632.2284891866403  E_coul = 148.5218149348987
init E= -483.706674251742
    CPU time for initialize scf      4.77 sec, wall time      0.22 sec
  HOMO = -1.39268489980335  LUMO = 398.603954414413
  mo_energy =
[-1.20564743e+02 -1.58241641e+01 -1.02562165e+01 -1.02562165e+01
 -1.02562165e+01 -2.97375690e+00 -1.39268490e+00 -1.39268490e+00
 -1.39268490e+00  3.98603954e+02  5.80049732e+03  5.80049732e+03
  5.80049732e+03]
E1 = -668.2119008922774  E_coul = 172.24648586326484
cycle= 1 E= -495.965415029013  delta_E= -12.3  |g|= 0.22  |ddm|=  1.2
    CPU time for cycle= 1      0.22 sec, wall time      0.01 sec
diis-norm(errvec)=0.234546
diis-c [-0.05501164  1.        ]
  HOMO = -0.619443414834029  LUMO = 400.693601324785
  mo_energy =
[-1.18491200e+02 -1.40366596e+01 -8.52043843e+00 -8.52043843e+00
 -8.52043843e+00 -1.91198031e+00 -6.19443415e-01 -6.19443415e-01
 -6.19443415e-01  4.00693601e+02  5.80226974e+03  5.80226974e+03
  5.80226974e+03]
E1 = -668.2083562548019  E_coul = 172.24289969110308
cycle= 2 E= -495.965456563699  delta_E= -4.15e-05  |g|= 0.000992  |ddm|= 0.00116
    CPU time for cycle= 2      0.11 sec, wall time      0.01 sec
diis-norm(errvec)=0.00100208
diis-c [-5.02448652e-07 -3.02913281e-03  1.00302913e+00]
  HOMO = -0.619444556243866  LUMO = 400.69171347178
  mo_energy =
[-1.18492607e+02 -1.40367515e+01 -8.52053587e+00 -8.52053587e+00
 -8.52053587e+00 -1.91198374e+00 -6.19444556e-01 -6.19444556e-01
 -6.19444556e-01  4.00691713e+02  5.80226355e+03  5.80226355e+03
  5.80226355e+03]
E1 = -668.2083381028561  E_coul = 172.24288153811315
cycle= 3 E= -495.965456564743  delta_E= -1.04e-09  |g|= 2.98e-06  |ddm|= 5.4e-06
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=3.4632e-06
diis-c [-1.29332717e-12  3.75822847e-06 -3.84128422e-03  1.00383753e+00]
  HOMO = -0.619444555988288  LUMO = 400.691708686168
  mo_energy =
[-1.18492611e+02 -1.40367516e+01 -8.52053599e+00 -8.52053599e+00
 -8.52053599e+00 -1.91198374e+00 -6.19444556e-01 -6.19444556e-01
 -6.19444556e-01  4.00691709e+02  5.80226353e+03  5.80226353e+03
  5.80226353e+03]
E1 = -668.2083380601639  E_coul = 172.24288149542252
cycle= 4 E= -495.965456564741  delta_E= 1.65e-12  |g|= 7.64e-09  |ddm|= 1.27e-08
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
E1 = -668.2083380601639  E_coul = 172.24288149542252
  HOMO = -0.619444555980104  LUMO = 400.691708688645
  mo_energy =
[-1.18492611e+02 -1.40367516e+01 -8.52053599e+00 -8.52053599e+00
 -8.52053599e+00 -1.91198374e+00 -6.19444556e-01 -6.19444556e-01
 -6.19444556e-01  4.00691709e+02  5.80226353e+03  5.80226353e+03
  5.80226353e+03]
E1 = -668.2083380602203  E_coul = 172.24288149547797
Extra cycle  E= -495.965456564742  delta_E= -9.66e-13  |g|= 5.87e-11  |ddm|= 3.86e-11
    CPU time for scf_cycle      5.13 sec, wall time      0.28 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 4.491642285231645
E1 = -668.2083380602203  E_coul = 172.24288149547797
init E= -495.965456564742
    CPU time for initialize scf      1.31 sec, wall time      0.06 sec
  HOMO = -0.619444555981126  LUMO = 400.69170868864
  mo_energy =
[-1.18492611e+02 -1.40367516e+01 -8.52053599e+00 -8.52053599e+00
 -8.52053599e+00 -1.91198374e+00 -6.19444556e-01 -6.19444556e-01
 -6.19444556e-01  4.00691709e+02  5.80226353e+03  5.80226353e+03
  5.80226353e+03]
E1 = -668.2083380602198  E_coul = 172.242881495478
cycle= 1 E= -495.965456564742  delta_E= 5.12e-13  |g|= 3.48e-12  |ddm|= 2.58e-13
    CPU time for cycle= 1      0.22 sec, wall time      0.01 sec
E1 = -668.2083380602198  E_coul = 172.242881495478
  HOMO = -0.619444555981055  LUMO = 400.69170868864
  mo_energy =
[-1.18492611e+02 -1.40367516e+01 -8.52053599e+00 -8.52053599e+00
 -8.52053599e+00 -1.91198374e+00 -6.19444556e-01 -6.19444556e-01
 -6.19444556e-01  4.00691709e+02  5.80226353e+03  5.80226353e+03
  5.80226353e+03]
E1 = -668.2083380602202  E_coul = 172.2428814954781
Extra cycle  E= -495.965456564742  delta_E= -2.84e-13  |g|= 2.03e-12  |ddm|= 7.32e-15
    CPU time for scf_cycle      1.59 sec, wall time      0.12 sec
exp = [4.75985152e+00 4.76243714e+02 2.55195237e-01 6.96317951e+01
 8.29911074e+00 1.67599478e-01 2.69396474e+03]
grad_E = [ 5.08666385e-02  1.73309075e-03 -5.55230382e+00  2.60125354e-03
  2.37198689e-02 -2.08189621e+01  5.62992226e-06]
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
number_of_s_exps = 4
number_of_p_exps = 3

exps = np.zeros((number_of_s_exps+number_of_p_exps,2))
#exps[:, 0] = decaying_nums(5)

# S
exps[0,0] = 20.0
exps[1,0] = 9.5045827955887916e+01
exps[2,0] = 4.4881042475048387e+00 
exps[3,0] = 3.9799528004692630e-01
             
# P          
exps[3,0] = 3.0108199280832128e+01
exps[4,0] = 6.1393781325590453e+00
exps[5,0] = 4.8929328703550412e-01

basis =  str(number_of_s_exps)+"s"+str(number_of_p_exps)+"p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc21115.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 24
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 18 14:59:36 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35677784.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 32000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 32000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 32000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  4.7971929256         1
[INPUT] 0    0    [1    /1   ]  487.34019239         1
[INPUT] 0    0    [1    /1   ]  0.268055884019       1
[INPUT] 0    0    [1    /1   ]  70.4154661325        1
[INPUT] 1    0    [1    /1   ]  8.31059623316        1
[INPUT] 1    0    [1    /1   ]  0.167644795374       1
[INPUT] 1    0    [1    /1   ]  2693.96473571        1

nuclear repulsion = 0
number of shells = 7
number of NR pGTOs = 13
number of NR cGTOs = 13
basis = {'Ar': [[0, [4.797192925599401, 1.0]], [0, [487.34019238967886, 1.0]], [0, [0.26805588401934144, 1.0]], [0, [70.41546613245428, 1.0]], [1, [8.310596233159837, 1.0]], [1, [0.16764479537407462, 1.0]], [1, [2693.964735708542, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [4.79719293]
bas 1, expnt(s) = [487.34019239]
bas 2, expnt(s) = [0.26805588]
bas 3, expnt(s) = [70.41546613]
bas 4, expnt(s) = [8.31059623]
bas 5, expnt(s) = [0.1676448]
bas 6, expnt(s) = [2693.96473571]
CPU time:       411.02
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  1  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]
 [ 0  1  1  1  0 36 37  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 4.79719293e+00 8.18946277e+00 4.87340192e+02 2.62053037e+02
 2.68055884e-01 9.41204582e-01 7.04154661e+01 6.14138138e+01
 8.31059623e+00 4.11646684e+01 1.67644795e-01 3.12947860e-01
 2.69396474e+03 5.66205750e+04]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 15.498880688334214
cond(S) = 4.46247445957304
E1 = -632.937715164782  E_coul = 149.1230635109749
init E= -483.814651653807
    CPU time for initialize scf      0.20 sec, wall time      0.02 sec
  HOMO = -1.37964269444383  LUMO = 409.993604765668
  mo_energy =
[-1.20484758e+02 -1.57713041e+01 -1.02056264e+01 -1.02056264e+01
 -1.02056264e+01 -3.00702899e+00 -1.37964269e+00 -1.37964269e+00
 -1.37964269e+00  4.09993605e+02  5.80058372e+03  5.80058372e+03
  5.80058372e+03]
E1 = -668.7745156902496  E_coul = 172.76959900021097
cycle= 1 E= -496.004916690039  delta_E= -12.2  |g|= 0.219  |ddm|=  1.2
    CPU time for cycle= 1      0.22 sec, wall time      0.01 sec
diis-norm(errvec)=0.23644
diis-c [-0.05590374  1.        ]
  HOMO = -0.613758233060912  LUMO = 412.087545760736
  mo_energy =
[-1.18409307e+02 -1.39930265e+01 -8.47879729e+00 -8.47879729e+00
 -8.47879729e+00 -1.93767902e+00 -6.13758233e-01 -6.13758233e-01
 -6.13758233e-01  4.12087546e+02  5.80238232e+03  5.80238232e+03
  5.80238232e+03]
E1 = -668.7711117285235  E_coul = 172.76615536125905
cycle= 2 E= -496.004956367264  delta_E= -3.97e-05  |g|= 0.000993  |ddm|= 0.0011
    CPU time for cycle= 2      0.12 sec, wall time      0.01 sec
diis-norm(errvec)=0.00102718
diis-c [-5.21196898e-07 -3.09998664e-03  1.00309999e+00]
  HOMO = -0.613759290629895  LUMO = 412.085666298302
  mo_energy =
[-1.18410667e+02 -1.39931147e+01 -8.47888777e+00 -8.47888777e+00
 -8.47888777e+00 -1.93768256e+00 -6.13759291e-01 -6.13759291e-01
 -6.13759291e-01  4.12085666e+02  5.80237622e+03  5.80237622e+03
  5.80237622e+03]
E1 = -668.7710943834779  E_coul = 172.76613801520455
cycle= 3 E= -496.004956368273  delta_E= -1.01e-09  |g|= 3.05e-06  |ddm|= 5.12e-06
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=3.63218e-06
diis-c [-1.50373518e-12  3.91517700e-06 -3.92429173e-03  1.00392038e+00]
  HOMO = -0.613759290250159  LUMO = 412.085661616723
  mo_energy =
[-1.18410670e+02 -1.39931148e+01 -8.47888786e+00 -8.47888786e+00
 -8.47888786e+00 -1.93768257e+00 -6.13759290e-01 -6.13759290e-01
 -6.13759290e-01  4.12085662e+02  5.80237620e+03  5.80237620e+03
  5.80237620e+03]
E1 = -668.7710943439741  E_coul = 172.76613797569988
cycle= 4 E= -496.004956368274  delta_E= -9.09e-13  |g|= 7.96e-09  |ddm|= 1.21e-08
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
E1 = -668.7710943439741  E_coul = 172.76613797569988
  HOMO = -0.613759290244666  LUMO = 412.085661619984
  mo_energy =
[-1.18410670e+02 -1.39931148e+01 -8.47888786e+00 -8.47888786e+00
 -8.47888786e+00 -1.93768257e+00 -6.13759290e-01 -6.13759290e-01
 -6.13759290e-01  4.12085662e+02  5.80237620e+03  5.80237620e+03
  5.80237620e+03]
E1 = -668.7710943440352  E_coul = 172.76613797576178
Extra cycle  E= -496.004956368273  delta_E= 9.09e-13  |g|= 5.92e-11  |ddm|= 4e-11
    CPU time for scf_cycle      0.58 sec, wall time      0.08 sec
exp = [4.79719293e+00 4.87340192e+02 2.68055884e-01 7.04154661e+01
 8.31059623e+00 1.67644795e-01 2.69396474e+03]
E = -496.0049563682734
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
number_of_s_exps = 4
number_of_p_exps = 3

exps = np.zeros((number_of_s_exps+number_of_p_exps,2))
#exps[:, 0] = decaying_nums(5)

# S
exps[0,0] = 20.0
exps[1,0] = 9.5045827955887916e+01
exps[2,0] = 4.4881042475048387e+00 
exps[3,0] = 3.9799528004692630e-01
             
# P          
exps[3,0] = 3.0108199280832128e+01
exps[4,0] = 6.1393781325590453e+00
exps[5,0] = 4.8929328703550412e-01

basis =  str(number_of_s_exps)+"s"+str(number_of_p_exps)+"p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc21115.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 24
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 18 14:59:37 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35677784.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 32000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 32000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 32000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  4.7971929256         1
[INPUT] 0    0    [1    /1   ]  487.34019239         1
[INPUT] 0    0    [1    /1   ]  0.268055884019       1
[INPUT] 0    0    [1    /1   ]  70.4154661325        1
[INPUT] 1    0    [1    /1   ]  8.31059623316        1
[INPUT] 1    0    [1    /1   ]  0.167644795374       1
[INPUT] 1    0    [1    /1   ]  2693.96473571        1

nuclear repulsion = 0
number of shells = 7
number of NR pGTOs = 13
number of NR cGTOs = 13
basis = {'Ar': [[0, [4.797192925599401, 1.0]], [0, [487.34019238967886, 1.0]], [0, [0.26805588401934144, 1.0]], [0, [70.41546613245428, 1.0]], [1, [8.310596233159837, 1.0]], [1, [0.16764479537407462, 1.0]], [1, [2693.964735708542, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [4.79719293]
bas 1, expnt(s) = [487.34019239]
bas 2, expnt(s) = [0.26805588]
bas 3, expnt(s) = [70.41546613]
bas 4, expnt(s) = [8.31059623]
bas 5, expnt(s) = [0.1676448]
bas 6, expnt(s) = [2693.96473571]
CPU time:       411.74
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  1  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]
 [ 0  1  1  1  0 36 37  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 4.79719293e+00 8.18946277e+00 4.87340192e+02 2.62053037e+02
 2.68055884e-01 9.41204582e-01 7.04154661e+01 6.14138138e+01
 8.31059623e+00 4.11646684e+01 1.67644795e-01 3.12947860e-01
 2.69396474e+03 5.66205750e+04]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 15.498880688334214
cond(S) = 4.46247445957304
E1 = -632.937715164782  E_coul = 149.1230635109749
init E= -483.814651653807
    CPU time for initialize scf      0.21 sec, wall time      0.03 sec
  HOMO = -1.37964269444383  LUMO = 409.993604765668
  mo_energy =
[-1.20484758e+02 -1.57713041e+01 -1.02056264e+01 -1.02056264e+01
 -1.02056264e+01 -3.00702899e+00 -1.37964269e+00 -1.37964269e+00
 -1.37964269e+00  4.09993605e+02  5.80058372e+03  5.80058372e+03
  5.80058372e+03]
E1 = -668.7745156902496  E_coul = 172.76959900021097
cycle= 1 E= -496.004916690039  delta_E= -12.2  |g|= 0.219  |ddm|=  1.2
    CPU time for cycle= 1      0.23 sec, wall time      0.01 sec
diis-norm(errvec)=0.23644
diis-c [-0.05590374  1.        ]
  HOMO = -0.613758233060912  LUMO = 412.087545760736
  mo_energy =
[-1.18409307e+02 -1.39930265e+01 -8.47879729e+00 -8.47879729e+00
 -8.47879729e+00 -1.93767902e+00 -6.13758233e-01 -6.13758233e-01
 -6.13758233e-01  4.12087546e+02  5.80238232e+03  5.80238232e+03
  5.80238232e+03]
E1 = -668.7711117285235  E_coul = 172.76615536125905
cycle= 2 E= -496.004956367264  delta_E= -3.97e-05  |g|= 0.000993  |ddm|= 0.0011
    CPU time for cycle= 2      0.11 sec, wall time      0.01 sec
diis-norm(errvec)=0.00102718
diis-c [-5.21196898e-07 -3.09998664e-03  1.00309999e+00]
  HOMO = -0.613759290629895  LUMO = 412.085666298302
  mo_energy =
[-1.18410667e+02 -1.39931147e+01 -8.47888777e+00 -8.47888777e+00
 -8.47888777e+00 -1.93768256e+00 -6.13759291e-01 -6.13759291e-01
 -6.13759291e-01  4.12085666e+02  5.80237622e+03  5.80237622e+03
  5.80237622e+03]
E1 = -668.7710943834779  E_coul = 172.76613801520455
cycle= 3 E= -496.004956368273  delta_E= -1.01e-09  |g|= 3.05e-06  |ddm|= 5.12e-06
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=3.63218e-06
diis-c [-1.50373518e-12  3.91517700e-06 -3.92429173e-03  1.00392038e+00]
  HOMO = -0.613759290250159  LUMO = 412.085661616723
  mo_energy =
[-1.18410670e+02 -1.39931148e+01 -8.47888786e+00 -8.47888786e+00
 -8.47888786e+00 -1.93768257e+00 -6.13759290e-01 -6.13759290e-01
 -6.13759290e-01  4.12085662e+02  5.80237620e+03  5.80237620e+03
  5.80237620e+03]
E1 = -668.7710943439741  E_coul = 172.76613797569988
cycle= 4 E= -496.004956368274  delta_E= -9.09e-13  |g|= 7.96e-09  |ddm|= 1.21e-08
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
E1 = -668.7710943439741  E_coul = 172.76613797569988
  HOMO = -0.613759290244666  LUMO = 412.085661619984
  mo_energy =
[-1.18410670e+02 -1.39931148e+01 -8.47888786e+00 -8.47888786e+00
 -8.47888786e+00 -1.93768257e+00 -6.13759290e-01 -6.13759290e-01
 -6.13759290e-01  4.12085662e+02  5.80237620e+03  5.80237620e+03
  5.80237620e+03]
E1 = -668.7710943440352  E_coul = 172.76613797576178
Extra cycle  E= -496.004956368273  delta_E= 9.09e-13  |g|= 5.92e-11  |ddm|= 4e-11
    CPU time for scf_cycle      0.59 sec, wall time      0.08 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 4.46247445957304
E1 = -668.7710943440352  E_coul = 172.76613797576178
init E= -496.004956368273
    CPU time for initialize scf      1.27 sec, wall time      0.05 sec
  HOMO = -0.613759290243314  LUMO = 412.085661619982
  mo_energy =
[-1.18410670e+02 -1.39931148e+01 -8.47888786e+00 -8.47888786e+00
 -8.47888786e+00 -1.93768257e+00 -6.13759290e-01 -6.13759290e-01
 -6.13759290e-01  4.12085662e+02  5.80237620e+03  5.80237620e+03
  5.80237620e+03]
E1 = -668.7710943440355  E_coul = 172.76613797576212
cycle= 1 E= -496.004956368273  delta_E=    0  |g|= 4.71e-12  |ddm|= 2.58e-13
    CPU time for cycle= 1      0.22 sec, wall time      0.01 sec
E1 = -668.7710943440355  E_coul = 172.76613797576212
  HOMO = -0.613759290242649  LUMO = 412.085661619982
  mo_energy =
[-1.18410670e+02 -1.39931148e+01 -8.47888786e+00 -8.47888786e+00
 -8.47888786e+00 -1.93768257e+00 -6.13759290e-01 -6.13759290e-01
 -6.13759290e-01  4.12085662e+02  5.80237620e+03  5.80237620e+03
  5.80237620e+03]
E1 = -668.7710943440359  E_coul = 172.76613797576223
Extra cycle  E= -496.004956368274  delta_E= -2.27e-13  |g|= 2.51e-12  |ddm|= 2.84e-15
    CPU time for scf_cycle      1.55 sec, wall time      0.12 sec
exp = [4.79719293e+00 4.87340192e+02 2.68055884e-01 7.04154661e+01
 8.31059623e+00 1.67644795e-01 2.69396474e+03]
grad_E = [ 8.16963119e-02  2.66040851e-03 -5.10411320e+00  4.17873804e-03
  3.82857629e-02 -2.06390493e+01  5.64626337e-06]
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
number_of_s_exps = 4
number_of_p_exps = 3

exps = np.zeros((number_of_s_exps+number_of_p_exps,2))
#exps[:, 0] = decaying_nums(5)

# S
exps[0,0] = 20.0
exps[1,0] = 9.5045827955887916e+01
exps[2,0] = 4.4881042475048387e+00 
exps[3,0] = 3.9799528004692630e-01
             
# P          
exps[3,0] = 3.0108199280832128e+01
exps[4,0] = 6.1393781325590453e+00
exps[5,0] = 4.8929328703550412e-01

basis =  str(number_of_s_exps)+"s"+str(number_of_p_exps)+"p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc21115.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 24
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 18 14:59:39 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35677784.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 32000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 32000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 32000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  4.85137416091        1
[INPUT] 0    0    [1    /1   ]  504.679638691        1
[INPUT] 0    0    [1    /1   ]  0.290056822268       1
[INPUT] 0    0    [1    /1   ]  71.5948793305        1
[INPUT] 1    0    [1    /1   ]  8.32812695057        1
[INPUT] 1    0    [1    /1   ]  0.170786061253       1
[INPUT] 1    0    [1    /1   ]  2693.96471522        1

nuclear repulsion = 0
number of shells = 7
number of NR pGTOs = 13
number of NR cGTOs = 13
basis = {'Ar': [[0, [4.851374160907442, 1.0]], [0, [504.67963869133007, 1.0]], [0, [0.2900568222679894, 1.0]], [0, [71.59487933047508, 1.0]], [1, [8.328126950572369, 1.0]], [1, [0.17078606125327475, 1.0]], [1, [2693.964715223052, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [4.85137416]
bas 1, expnt(s) = [504.67963869]
bas 2, expnt(s) = [0.29005682]
bas 3, expnt(s) = [71.59487933]
bas 4, expnt(s) = [8.32812695]
bas 5, expnt(s) = [0.17078606]
bas 6, expnt(s) = [2693.96471522]
CPU time:       416.46
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  1  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]
 [ 0  1  1  1  0 36 37  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 4.85137416e+00 8.25873636e+00 5.04679639e+02 2.69015226e+02
 2.90056822e-01 9.98567295e-01 7.15948793e+01 6.21836908e+01
 8.32812695e+00 4.12732401e+01 1.70786061e-01 3.20294824e-01
 2.69396472e+03 5.66205745e+04]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 15.583388830742866
cond(S) = 4.422478012514368
E1 = -634.6260642015623  E_coul = 150.56220395583512
init E= -484.063860245727
    CPU time for initialize scf      0.21 sec, wall time      0.03 sec
  HOMO = -1.35431190923231  LUMO = 427.829479647322
  mo_energy =
[-1.20313000e+02 -1.56487431e+01 -1.00889301e+01 -1.00889301e+01
 -1.00889301e+01 -3.02704044e+00 -1.35431191e+00 -1.35431191e+00
 -1.35431191e+00  4.27829480e+02  5.80075498e+03  5.80075498e+03
  5.80075498e+03]
E1 = -669.9997072600146  E_coul = 173.8975180375526
cycle= 1 E= -496.102189222462  delta_E=  -12  |g|= 0.218  |ddm|= 1.16
    CPU time for cycle= 1      0.22 sec, wall time      0.01 sec
diis-norm(errvec)=0.239989
diis-c [-0.05759471  1.        ]
  HOMO = -0.606938289360282  LUMO = 429.915486360252
  mo_energy =
[-1.18249941e+02 -1.38994294e+01 -8.39042832e+00 -8.39042832e+00
 -8.39042832e+00 -1.96088439e+00 -6.06938289e-01 -6.06938289e-01
 -6.06938289e-01  4.29915486e+02  5.80257624e+03  5.80257624e+03
  5.80257624e+03]
E1 = -669.9964965393715  E_coul = 173.89426995756588
cycle= 2 E= -496.102226581806  delta_E= -3.74e-05  |g|= 0.001  |ddm|= 0.00103
    CPU time for cycle= 2      0.12 sec, wall time      0.01 sec
diis-norm(errvec)=0.00107209
diis-c [-5.53972935e-07 -3.22561565e-03  1.00322562e+00]
  HOMO = -0.606939261839316  LUMO = 429.913614361939
  mo_energy =
[-1.18251237e+02 -1.38995125e+01 -8.39050924e+00 -8.39050924e+00
 -8.39050924e+00 -1.96088815e+00 -6.06939262e-01 -6.06939262e-01
 -6.06939262e-01  4.29913614e+02  5.80257025e+03  5.80257025e+03
  5.80257025e+03]
E1 = -669.9964802739905  E_coul = 173.89425369120823
cycle= 3 E= -496.102226582782  delta_E= -9.77e-10  |g|= 3.15e-06  |ddm|= 4.78e-06
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
E1 = -669.9964802739905  E_coul = 173.89425369120823
  HOMO = -0.606939261288806  LUMO = 429.913609895649
  mo_energy =
[-1.18251240e+02 -1.38995126e+01 -8.39050930e+00 -8.39050930e+00
 -8.39050930e+00 -1.96088815e+00 -6.06939261e-01 -6.06939261e-01
 -6.06939261e-01  4.29913610e+02  5.80257023e+03  5.80257023e+03
  5.80257023e+03]
E1 = -669.9964802392141  E_coul = 173.8942536564316
Extra cycle  E= -496.102226582782  delta_E= -1.71e-13  |g|= 2.34e-08  |ddm|= 1.13e-08
    CPU time for scf_cycle      0.57 sec, wall time      0.07 sec
exp = [4.85137416e+00 5.04679639e+02 2.90056822e-01 7.15948793e+01
 8.32812695e+00 1.70786061e-01 2.69396472e+03]
E = -496.10222658278246
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
number_of_s_exps = 4
number_of_p_exps = 3

exps = np.zeros((number_of_s_exps+number_of_p_exps,2))
#exps[:, 0] = decaying_nums(5)

# S
exps[0,0] = 20.0
exps[1,0] = 9.5045827955887916e+01
exps[2,0] = 4.4881042475048387e+00 
exps[3,0] = 3.9799528004692630e-01
             
# P          
exps[3,0] = 3.0108199280832128e+01
exps[4,0] = 6.1393781325590453e+00
exps[5,0] = 4.8929328703550412e-01

basis =  str(number_of_s_exps)+"s"+str(number_of_p_exps)+"p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc21115.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 24
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 18 14:59:40 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35677784.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 32000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 32000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 32000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  4.85137416091        1
[INPUT] 0    0    [1    /1   ]  504.679638691        1
[INPUT] 0    0    [1    /1   ]  0.290056822268       1
[INPUT] 0    0    [1    /1   ]  71.5948793305        1
[INPUT] 1    0    [1    /1   ]  8.32812695057        1
[INPUT] 1    0    [1    /1   ]  0.170786061253       1
[INPUT] 1    0    [1    /1   ]  2693.96471522        1

nuclear repulsion = 0
number of shells = 7
number of NR pGTOs = 13
number of NR cGTOs = 13
basis = {'Ar': [[0, [4.851374160907442, 1.0]], [0, [504.67963869133007, 1.0]], [0, [0.2900568222679894, 1.0]], [0, [71.59487933047508, 1.0]], [1, [8.328126950572369, 1.0]], [1, [0.17078606125327475, 1.0]], [1, [2693.964715223052, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [4.85137416]
bas 1, expnt(s) = [504.67963869]
bas 2, expnt(s) = [0.29005682]
bas 3, expnt(s) = [71.59487933]
bas 4, expnt(s) = [8.32812695]
bas 5, expnt(s) = [0.17078606]
bas 6, expnt(s) = [2693.96471522]
CPU time:       417.15
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  1  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]
 [ 0  1  1  1  0 36 37  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 4.85137416e+00 8.25873636e+00 5.04679639e+02 2.69015226e+02
 2.90056822e-01 9.98567295e-01 7.15948793e+01 6.21836908e+01
 8.32812695e+00 4.12732401e+01 1.70786061e-01 3.20294824e-01
 2.69396472e+03 5.66205745e+04]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 15.583388830742866
cond(S) = 4.422478012514368
E1 = -634.6260642015623  E_coul = 150.56220395583512
init E= -484.063860245727
    CPU time for initialize scf      0.20 sec, wall time      0.02 sec
  HOMO = -1.35431190923231  LUMO = 427.829479647322
  mo_energy =
[-1.20313000e+02 -1.56487431e+01 -1.00889301e+01 -1.00889301e+01
 -1.00889301e+01 -3.02704044e+00 -1.35431191e+00 -1.35431191e+00
 -1.35431191e+00  4.27829480e+02  5.80075498e+03  5.80075498e+03
  5.80075498e+03]
E1 = -669.9997072600146  E_coul = 173.8975180375526
cycle= 1 E= -496.102189222462  delta_E=  -12  |g|= 0.218  |ddm|= 1.16
    CPU time for cycle= 1      0.22 sec, wall time      0.01 sec
diis-norm(errvec)=0.239989
diis-c [-0.05759471  1.        ]
  HOMO = -0.606938289360282  LUMO = 429.915486360252
  mo_energy =
[-1.18249941e+02 -1.38994294e+01 -8.39042832e+00 -8.39042832e+00
 -8.39042832e+00 -1.96088439e+00 -6.06938289e-01 -6.06938289e-01
 -6.06938289e-01  4.29915486e+02  5.80257624e+03  5.80257624e+03
  5.80257624e+03]
E1 = -669.9964965393715  E_coul = 173.89426995756588
cycle= 2 E= -496.102226581806  delta_E= -3.74e-05  |g|= 0.001  |ddm|= 0.00103
    CPU time for cycle= 2      0.13 sec, wall time      0.01 sec
diis-norm(errvec)=0.00107209
diis-c [-5.53972935e-07 -3.22561565e-03  1.00322562e+00]
  HOMO = -0.606939261839316  LUMO = 429.913614361939
  mo_energy =
[-1.18251237e+02 -1.38995125e+01 -8.39050924e+00 -8.39050924e+00
 -8.39050924e+00 -1.96088815e+00 -6.06939262e-01 -6.06939262e-01
 -6.06939262e-01  4.29913614e+02  5.80257025e+03  5.80257025e+03
  5.80257025e+03]
E1 = -669.9964802739905  E_coul = 173.89425369120823
cycle= 3 E= -496.102226582782  delta_E= -9.77e-10  |g|= 3.15e-06  |ddm|= 4.78e-06
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
E1 = -669.9964802739905  E_coul = 173.89425369120823
  HOMO = -0.606939261288806  LUMO = 429.913609895649
  mo_energy =
[-1.18251240e+02 -1.38995126e+01 -8.39050930e+00 -8.39050930e+00
 -8.39050930e+00 -1.96088815e+00 -6.06939261e-01 -6.06939261e-01
 -6.06939261e-01  4.29913610e+02  5.80257023e+03  5.80257023e+03
  5.80257023e+03]
E1 = -669.9964802392141  E_coul = 173.8942536564316
Extra cycle  E= -496.102226582782  delta_E= -1.71e-13  |g|= 2.34e-08  |ddm|= 1.13e-08
    CPU time for scf_cycle      0.57 sec, wall time      0.06 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 4.422478012514368
E1 = -669.9964802392141  E_coul = 173.8942536564316
init E= -496.102226582782
    CPU time for initialize scf      1.15 sec, wall time      0.05 sec
  HOMO = -0.606939261289202  LUMO = 429.913609865965
  mo_energy =
[-1.18251240e+02 -1.38995126e+01 -8.39050930e+00 -8.39050930e+00
 -8.39050930e+00 -1.96088815e+00 -6.06939261e-01 -6.06939261e-01
 -6.06939261e-01  4.29913610e+02  5.80257023e+03  5.80257023e+03
  5.80257023e+03]
E1 = -669.996480239003  E_coul = 173.89425365622066
cycle= 1 E= -496.102226582782  delta_E= 1.71e-13  |g|= 1.82e-10  |ddm|= 7.88e-11
    CPU time for cycle= 1      0.21 sec, wall time      0.01 sec
E1 = -669.996480239003  E_coul = 173.89425365622066
  HOMO = -0.60693926128806  LUMO = 429.913609865761
  mo_energy =
[-1.18251240e+02 -1.38995126e+01 -8.39050930e+00 -8.39050930e+00
 -8.39050930e+00 -1.96088815e+00 -6.06939261e-01 -6.06939261e-01
 -6.06939261e-01  4.29913610e+02  5.80257023e+03  5.80257023e+03
  5.80257023e+03]
E1 = -669.996480239002  E_coul = 173.89425365621935
Extra cycle  E= -496.102226582783  delta_E= -3.98e-13  |g|= 4.45e-12  |ddm|= 5.99e-13
    CPU time for scf_cycle      1.47 sec, wall time      0.13 sec
exp = [4.85137416e+00 5.04679639e+02 2.90056822e-01 7.15948793e+01
 8.32812695e+00 1.70786061e-01 2.69396472e+03]
grad_E = [ 1.25660834e-01  3.98960002e-03 -4.36420252e+00  6.35086053e-03
  5.88895605e-02 -2.00063084e+01  5.67159206e-06]
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
number_of_s_exps = 4
number_of_p_exps = 3

exps = np.zeros((number_of_s_exps+number_of_p_exps,2))
#exps[:, 0] = decaying_nums(5)

# S
exps[0,0] = 20.0
exps[1,0] = 9.5045827955887916e+01
exps[2,0] = 4.4881042475048387e+00 
exps[3,0] = 3.9799528004692630e-01
             
# P          
exps[3,0] = 3.0108199280832128e+01
exps[4,0] = 6.1393781325590453e+00
exps[5,0] = 4.8929328703550412e-01

basis =  str(number_of_s_exps)+"s"+str(number_of_p_exps)+"p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc21115.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 24
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 18 14:59:42 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35677784.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 32000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 32000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 32000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  4.91874663183        1
[INPUT] 0    0    [1    /1   ]  529.369440681        1
[INPUT] 0    0    [1    /1   ]  0.326762510977       1
[INPUT] 0    0    [1    /1   ]  73.1702755394        1
[INPUT] 1    0    [1    /1   ]  8.35223588058        1
[INPUT] 1    0    [1    /1   ]  0.182632951377       1
[INPUT] 1    0    [1    /1   ]  2693.96466694        1

nuclear repulsion = 0
number of shells = 7
number of NR pGTOs = 13
number of NR cGTOs = 13
basis = {'Ar': [[0, [4.918746631829798, 1.0]], [0, [529.3694406811568, 1.0]], [0, [0.3267625109773406, 1.0]], [0, [73.17027553937062, 1.0]], [1, [8.352235880576622, 1.0]], [1, [0.18263295137738794, 1.0]], [1, [2693.964666944467, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [4.91874663]
bas 1, expnt(s) = [529.36944068]
bas 2, expnt(s) = [0.32676251]
bas 3, expnt(s) = [73.17027554]
bas 4, expnt(s) = [8.35223588]
bas 5, expnt(s) = [0.18263295]
bas 6, expnt(s) = [2693.96466694]
CPU time:       421.79
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  1  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]
 [ 0  1  1  1  0 36 37  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 4.91874663e+00 8.34460653e+00 5.29369441e+02 2.78826582e+02
 3.26762511e-01 1.09191591e+00 7.31702755e+01 6.32071258e+01
 8.35223588e+00 4.14226454e+01 1.82632951e-01 3.48303882e-01
 2.69396467e+03 5.66205732e+04]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 15.814178386060561
cond(S) = 4.379525028961008
E1 = -638.3960028410677  E_coul = 153.79467427178753
init E= -484.60132856928
    CPU time for initialize scf      0.22 sec, wall time      0.03 sec
  HOMO = -1.3041272842782  LUMO = 453.268578455062
  mo_energy =
[-1.19963516e+02 -1.53830643e+01 -9.83495373e+00 -9.83495373e+00
 -9.83495373e+00 -2.97861909e+00 -1.30412728e+00 -1.30412728e+00
 -1.30412728e+00  4.53268578e+02  5.80108423e+03  5.80108423e+03
  5.80108423e+03]
E1 = -672.5649695361233  E_coul = 176.24083932773868
cycle= 1 E= -496.324130208385  delta_E= -11.7  |g|= 0.219  |ddm|= 1.04
    CPU time for cycle= 1      0.22 sec, wall time      0.01 sec
diis-norm(errvec)=0.246344
diis-c [-0.06068557  1.        ]
  HOMO = -0.599761972139588  LUMO = 455.309197771181
  mo_energy =
[-1.17953136e+02 -1.37083439e+01 -8.20975873e+00 -8.20975873e+00
 -8.20975873e+00 -1.95162087e+00 -5.99761972e-01 -5.99761972e-01
 -5.99761972e-01  4.55309198e+02  5.80289561e+03  5.80289561e+03
  5.80289561e+03]
E1 = -672.5619827567186  E_coul = 176.23781740270803
cycle= 2 E= -496.324165354011  delta_E= -3.51e-05  |g|= 0.00103  |ddm|= 0.000946
    CPU time for cycle= 2      0.13 sec, wall time      0.01 sec
diis-norm(errvec)=0.00114561
diis-c [-6.04442534e-07 -3.42733092e-03  1.00342733e+00]
  HOMO = -0.599762909777393  LUMO = 455.307323006392
  mo_energy =
[-1.17954359e+02 -1.37084208e+01 -8.20982844e+00 -8.20982844e+00
 -8.20982844e+00 -1.95162504e+00 -5.99762910e-01 -5.99762910e-01
 -5.99762910e-01  4.55307323e+02  5.80288974e+03  5.80288974e+03
  5.80288974e+03]
E1 = -672.561967699128  E_coul = 176.23780234415182
cycle= 3 E= -496.324165354976  delta_E= -9.66e-10  |g|= 3.24e-06  |ddm|= 4.42e-06
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
E1 = -672.561967699128  E_coul = 176.23780234415182
  HOMO = -0.59976290899184  LUMO = 455.307318822756
  mo_energy =
[-1.17954361e+02 -1.37084209e+01 -8.20982846e+00 -8.20982846e+00
 -8.20982846e+00 -1.95162504e+00 -5.99762909e-01 -5.99762909e-01
 -5.99762909e-01  4.55307319e+02  5.80288973e+03  5.80288973e+03
  5.80288973e+03]
E1 = -672.5619676697138  E_coul = 176.23780231473737
Extra cycle  E= -496.324165354976  delta_E= -2.84e-13  |g|= 2.44e-08  |ddm|= 1.06e-08
    CPU time for scf_cycle      0.59 sec, wall time      0.07 sec
exp = [4.91874663e+00 5.29369441e+02 3.26762511e-01 7.31702755e+01
 8.35223588e+00 1.82632951e-01 2.69396467e+03]
E = -496.32416535497646
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
number_of_s_exps = 4
number_of_p_exps = 3

exps = np.zeros((number_of_s_exps+number_of_p_exps,2))
#exps[:, 0] = decaying_nums(5)

# S
exps[0,0] = 20.0
exps[1,0] = 9.5045827955887916e+01
exps[2,0] = 4.4881042475048387e+00 
exps[3,0] = 3.9799528004692630e-01
             
# P          
exps[3,0] = 3.0108199280832128e+01
exps[4,0] = 6.1393781325590453e+00
exps[5,0] = 4.8929328703550412e-01

basis =  str(number_of_s_exps)+"s"+str(number_of_p_exps)+"p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc21115.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 24
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 18 14:59:42 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35677784.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 32000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 32000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 32000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  4.91874663183        1
[INPUT] 0    0    [1    /1   ]  529.369440681        1
[INPUT] 0    0    [1    /1   ]  0.326762510977       1
[INPUT] 0    0    [1    /1   ]  73.1702755394        1
[INPUT] 1    0    [1    /1   ]  8.35223588058        1
[INPUT] 1    0    [1    /1   ]  0.182632951377       1
[INPUT] 1    0    [1    /1   ]  2693.96466694        1

nuclear repulsion = 0
number of shells = 7
number of NR pGTOs = 13
number of NR cGTOs = 13
basis = {'Ar': [[0, [4.918746631829798, 1.0]], [0, [529.3694406811568, 1.0]], [0, [0.3267625109773406, 1.0]], [0, [73.17027553937062, 1.0]], [1, [8.352235880576622, 1.0]], [1, [0.18263295137738794, 1.0]], [1, [2693.964666944467, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [4.91874663]
bas 1, expnt(s) = [529.36944068]
bas 2, expnt(s) = [0.32676251]
bas 3, expnt(s) = [73.17027554]
bas 4, expnt(s) = [8.35223588]
bas 5, expnt(s) = [0.18263295]
bas 6, expnt(s) = [2693.96466694]
CPU time:       422.50
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  1  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]
 [ 0  1  1  1  0 36 37  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 4.91874663e+00 8.34460653e+00 5.29369441e+02 2.78826582e+02
 3.26762511e-01 1.09191591e+00 7.31702755e+01 6.32071258e+01
 8.35223588e+00 4.14226454e+01 1.82632951e-01 3.48303882e-01
 2.69396467e+03 5.66205732e+04]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 15.814178386060561
cond(S) = 4.379525028961008
E1 = -638.3960028410677  E_coul = 153.79467427178753
init E= -484.60132856928
    CPU time for initialize scf      0.19 sec, wall time      0.02 sec
  HOMO = -1.3041272842782  LUMO = 453.268578455062
  mo_energy =
[-1.19963516e+02 -1.53830643e+01 -9.83495373e+00 -9.83495373e+00
 -9.83495373e+00 -2.97861909e+00 -1.30412728e+00 -1.30412728e+00
 -1.30412728e+00  4.53268578e+02  5.80108423e+03  5.80108423e+03
  5.80108423e+03]
E1 = -672.5649695361233  E_coul = 176.24083932773868
cycle= 1 E= -496.324130208385  delta_E= -11.7  |g|= 0.219  |ddm|= 1.04
    CPU time for cycle= 1      0.22 sec, wall time      0.01 sec
diis-norm(errvec)=0.246344
diis-c [-0.06068557  1.        ]
  HOMO = -0.599761972139588  LUMO = 455.309197771181
  mo_energy =
[-1.17953136e+02 -1.37083439e+01 -8.20975873e+00 -8.20975873e+00
 -8.20975873e+00 -1.95162087e+00 -5.99761972e-01 -5.99761972e-01
 -5.99761972e-01  4.55309198e+02  5.80289561e+03  5.80289561e+03
  5.80289561e+03]
E1 = -672.5619827567186  E_coul = 176.23781740270803
cycle= 2 E= -496.324165354011  delta_E= -3.51e-05  |g|= 0.00103  |ddm|= 0.000946
    CPU time for cycle= 2      0.14 sec, wall time      0.01 sec
diis-norm(errvec)=0.00114561
diis-c [-6.04442534e-07 -3.42733092e-03  1.00342733e+00]
  HOMO = -0.599762909777393  LUMO = 455.307323006392
  mo_energy =
[-1.17954359e+02 -1.37084208e+01 -8.20982844e+00 -8.20982844e+00
 -8.20982844e+00 -1.95162504e+00 -5.99762910e-01 -5.99762910e-01
 -5.99762910e-01  4.55307323e+02  5.80288974e+03  5.80288974e+03
  5.80288974e+03]
E1 = -672.561967699128  E_coul = 176.23780234415182
cycle= 3 E= -496.324165354976  delta_E= -9.66e-10  |g|= 3.24e-06  |ddm|= 4.42e-06
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
E1 = -672.561967699128  E_coul = 176.23780234415182
  HOMO = -0.59976290899184  LUMO = 455.307318822756
  mo_energy =
[-1.17954361e+02 -1.37084209e+01 -8.20982846e+00 -8.20982846e+00
 -8.20982846e+00 -1.95162504e+00 -5.99762909e-01 -5.99762909e-01
 -5.99762909e-01  4.55307319e+02  5.80288973e+03  5.80288973e+03
  5.80288973e+03]
E1 = -672.5619676697138  E_coul = 176.23780231473737
Extra cycle  E= -496.324165354976  delta_E= -2.84e-13  |g|= 2.44e-08  |ddm|= 1.06e-08
    CPU time for scf_cycle      0.57 sec, wall time      0.06 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 4.379525028961008
E1 = -672.5619676697138  E_coul = 176.23780231473737
init E= -496.324165354976
    CPU time for initialize scf      1.16 sec, wall time      0.05 sec
  HOMO = -0.599762908990827  LUMO = 455.307318794163
  mo_energy =
[-1.17954362e+02 -1.37084209e+01 -8.20982846e+00 -8.20982846e+00
 -8.20982846e+00 -1.95162504e+00 -5.99762909e-01 -5.99762909e-01
 -5.99762909e-01  4.55307319e+02  5.80288973e+03  5.80288973e+03
  5.80288973e+03]
E1 = -672.5619676695288  E_coul = 176.2378023145522
cycle= 1 E= -496.324165354977  delta_E= -1.71e-13  |g|= 1.88e-10  |ddm|= 7.66e-11
    CPU time for cycle= 1      0.21 sec, wall time      0.01 sec
E1 = -672.5619676695288  E_coul = 176.2378023145522
  HOMO = -0.599762908990434  LUMO = 455.307318793962
  mo_energy =
[-1.17954362e+02 -1.37084209e+01 -8.20982846e+00 -8.20982846e+00
 -8.20982846e+00 -1.95162504e+00 -5.99762909e-01 -5.99762909e-01
 -5.99762909e-01  4.55307319e+02  5.80288973e+03  5.80288973e+03
  5.80288973e+03]
E1 = -672.5619676695273  E_coul = 176.23780231455103
Extra cycle  E= -496.324165354976  delta_E= 2.84e-13  |g|= 3.31e-12  |ddm|= 5.85e-13
    CPU time for scf_cycle      1.45 sec, wall time      0.11 sec
exp = [4.91874663e+00 5.29369441e+02 3.26762511e-01 7.31702755e+01
 8.35223588e+00 1.82632951e-01 2.69396467e+03]
grad_E = [ 1.79262070e-01  5.68225190e-03 -3.22044502e+00  8.44748751e-03
  8.31204076e-02 -1.83448070e+01  5.70743972e-06]
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
number_of_s_exps = 4
number_of_p_exps = 3

exps = np.zeros((number_of_s_exps+number_of_p_exps,2))
#exps[:, 0] = decaying_nums(5)

# S
exps[0,0] = 20.0
exps[1,0] = 9.5045827955887916e+01
exps[2,0] = 4.4881042475048387e+00 
exps[3,0] = 3.9799528004692630e-01
             
# P          
exps[3,0] = 3.0108199280832128e+01
exps[4,0] = 6.1393781325590453e+00
exps[5,0] = 4.8929328703550412e-01

basis =  str(number_of_s_exps)+"s"+str(number_of_p_exps)+"p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc21115.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 24
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 18 14:59:45 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35677784.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 32000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 32000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 32000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  4.97332154526        1
[INPUT] 0    0    [1    /1   ]  556.830327121        1
[INPUT] 0    0    [1    /1   ]  0.382547388234       1
[INPUT] 0    0    [1    /1   ]  74.7204073663        1
[INPUT] 1    0    [1    /1   ]  8.37937254445        1
[INPUT] 1    0    [1    /1   ]  0.213168893188       1
[INPUT] 1    0    [1    /1   ]  2693.96456678        1

nuclear repulsion = 0
number of shells = 7
number of NR pGTOs = 13
number of NR cGTOs = 13
basis = {'Ar': [[0, [4.973321545264466, 1.0]], [0, [556.8303271213683, 1.0]], [0, [0.38254738823391987, 1.0]], [0, [74.7204073662977, 1.0]], [1, [8.379372544447776, 1.0]], [1, [0.21316889318838408, 1.0]], [1, [2693.964566775444, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [4.97332155]
bas 1, expnt(s) = [556.83032712]
bas 2, expnt(s) = [0.38254739]
bas 3, expnt(s) = [74.72040737]
bas 4, expnt(s) = [8.37937254]
bas 5, expnt(s) = [0.21316889]
bas 6, expnt(s) = [2693.96456678]
CPU time:       427.12
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  1  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]
 [ 0  1  1  1  0 36 37  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 4.97332155e+00 8.41395003e+00 5.56830327e+02 2.89605753e+02
 3.82547388e-01 1.22893512e+00 7.47204074e+01 6.42087843e+01
 8.37937254e+00 4.15909430e+01 2.13168893e-01 4.22560775e-01
 2.69396457e+03 5.66205706e+04]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 16.268189726135503
cond(S) = 4.364234737574471
E1 = -645.6381803167953  E_coul = 160.03970084442594
init E= -485.598479472369
    CPU time for initialize scf      0.20 sec, wall time      0.02 sec
  HOMO = -1.20725871325728  LUMO = 481.467631886901
  mo_energy =
[-1.19358610e+02 -1.48929007e+01 -9.35944908e+00 -9.35944908e+00
 -9.35944908e+00 -2.76368748e+00 -1.20725871e+00 -1.20725871e+00
 -1.20725871e+00  4.81467632e+02  5.80164380e+03  5.80164380e+03
  5.80164380e+03]
E1 = -677.2717325497126  E_coul = 180.5107097999642
cycle= 1 E= -496.761022749748  delta_E= -11.2  |g|= 0.223  |ddm|= 0.797
    CPU time for cycle= 1      0.23 sec, wall time      0.01 sec
diis-norm(errvec)=0.255952
diis-c [-0.06551143  1.        ]
  HOMO = -0.587182019688341  LUMO = 483.383182793756
  mo_energy =
[-1.17480821e+02 -1.33724264e+01 -7.88671944e+00 -7.88671944e+00
 -7.88671944e+00 -1.85022156e+00 -5.87182020e-01 -5.87182020e-01
 -5.87182020e-01  4.83383183e+02  5.80335443e+03  5.80335443e+03
  5.80335443e+03]
E1 = -677.2689196539269  E_coul = 180.50786265556965
cycle= 2 E= -496.761056998357  delta_E= -3.42e-05  |g|= 0.00108  |ddm|= 0.000882
    CPU time for cycle= 2      0.12 sec, wall time      0.01 sec
diis-norm(errvec)=0.00124394
diis-c [-6.64269695e-07 -3.68511168e-03  1.00368511e+00]
  HOMO = -0.587183086940963  LUMO = 483.381275222278
  mo_energy =
[-1.17481990e+02 -1.33724981e+01 -7.88677959e+00 -7.88677959e+00
 -7.88677959e+00 -1.85022646e+00 -5.87183087e-01 -5.87183087e-01
 -5.87183087e-01  4.83381275e+02  5.80334859e+03  5.80334859e+03
  5.80334859e+03]
E1 = -677.2689054975463  E_coul = 180.50784849819016
cycle= 3 E= -496.761056999356  delta_E= -9.99e-10  |g|= 3.28e-06  |ddm|= 4.18e-06
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
E1 = -677.2689054975463  E_coul = 180.50784849819016
  HOMO = -0.587183085771894  LUMO = 483.381271380862
  mo_energy =
[-1.17481992e+02 -1.33724982e+01 -7.88677957e+00 -7.88677957e+00
 -7.88677957e+00 -1.85022646e+00 -5.87183086e-01 -5.87183086e-01
 -5.87183086e-01  4.83381271e+02  5.80334858e+03  5.80334858e+03
  5.80334858e+03]
E1 = -677.2689054731826  E_coul = 180.50784847382596
Extra cycle  E= -496.761056999357  delta_E= -5.12e-13  |g|= 2.45e-08  |ddm|= 9.89e-09
    CPU time for scf_cycle      0.57 sec, wall time      0.07 sec
exp = [4.97332155e+00 5.56830327e+02 3.82547388e-01 7.47204074e+01
 8.37937254e+00 2.13168893e-01 2.69396457e+03]
E = -496.76105699935664
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
number_of_s_exps = 4
number_of_p_exps = 3

exps = np.zeros((number_of_s_exps+number_of_p_exps,2))
#exps[:, 0] = decaying_nums(5)

# S
exps[0,0] = 20.0
exps[1,0] = 9.5045827955887916e+01
exps[2,0] = 4.4881042475048387e+00 
exps[3,0] = 3.9799528004692630e-01
             
# P          
exps[3,0] = 3.0108199280832128e+01
exps[4,0] = 6.1393781325590453e+00
exps[5,0] = 4.8929328703550412e-01

basis =  str(number_of_s_exps)+"s"+str(number_of_p_exps)+"p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc21115.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 24
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 18 14:59:45 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35677784.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 32000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 32000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 32000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  4.97332154526        1
[INPUT] 0    0    [1    /1   ]  556.830327121        1
[INPUT] 0    0    [1    /1   ]  0.382547388234       1
[INPUT] 0    0    [1    /1   ]  74.7204073663        1
[INPUT] 1    0    [1    /1   ]  8.37937254445        1
[INPUT] 1    0    [1    /1   ]  0.213168893188       1
[INPUT] 1    0    [1    /1   ]  2693.96456678        1

nuclear repulsion = 0
number of shells = 7
number of NR pGTOs = 13
number of NR cGTOs = 13
basis = {'Ar': [[0, [4.973321545264466, 1.0]], [0, [556.8303271213683, 1.0]], [0, [0.38254738823391987, 1.0]], [0, [74.7204073662977, 1.0]], [1, [8.379372544447776, 1.0]], [1, [0.21316889318838408, 1.0]], [1, [2693.964566775444, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [4.97332155]
bas 1, expnt(s) = [556.83032712]
bas 2, expnt(s) = [0.38254739]
bas 3, expnt(s) = [74.72040737]
bas 4, expnt(s) = [8.37937254]
bas 5, expnt(s) = [0.21316889]
bas 6, expnt(s) = [2693.96456678]
CPU time:       427.82
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  1  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]
 [ 0  1  1  1  0 36 37  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 4.97332155e+00 8.41395003e+00 5.56830327e+02 2.89605753e+02
 3.82547388e-01 1.22893512e+00 7.47204074e+01 6.42087843e+01
 8.37937254e+00 4.15909430e+01 2.13168893e-01 4.22560775e-01
 2.69396457e+03 5.66205706e+04]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 16.268189726135503
cond(S) = 4.364234737574471
E1 = -645.6381803167953  E_coul = 160.03970084442594
init E= -485.598479472369
    CPU time for initialize scf      0.19 sec, wall time      0.02 sec
  HOMO = -1.20725871325728  LUMO = 481.467631886901
  mo_energy =
[-1.19358610e+02 -1.48929007e+01 -9.35944908e+00 -9.35944908e+00
 -9.35944908e+00 -2.76368748e+00 -1.20725871e+00 -1.20725871e+00
 -1.20725871e+00  4.81467632e+02  5.80164380e+03  5.80164380e+03
  5.80164380e+03]
E1 = -677.2717325497126  E_coul = 180.5107097999642
cycle= 1 E= -496.761022749748  delta_E= -11.2  |g|= 0.223  |ddm|= 0.797
    CPU time for cycle= 1      0.22 sec, wall time      0.01 sec
diis-norm(errvec)=0.255952
diis-c [-0.06551143  1.        ]
  HOMO = -0.587182019688341  LUMO = 483.383182793756
  mo_energy =
[-1.17480821e+02 -1.33724264e+01 -7.88671944e+00 -7.88671944e+00
 -7.88671944e+00 -1.85022156e+00 -5.87182020e-01 -5.87182020e-01
 -5.87182020e-01  4.83383183e+02  5.80335443e+03  5.80335443e+03
  5.80335443e+03]
E1 = -677.2689196539269  E_coul = 180.50786265556965
cycle= 2 E= -496.761056998357  delta_E= -3.42e-05  |g|= 0.00108  |ddm|= 0.000882
    CPU time for cycle= 2      0.13 sec, wall time      0.01 sec
diis-norm(errvec)=0.00124394
diis-c [-6.64269695e-07 -3.68511168e-03  1.00368511e+00]
  HOMO = -0.587183086940963  LUMO = 483.381275222278
  mo_energy =
[-1.17481990e+02 -1.33724981e+01 -7.88677959e+00 -7.88677959e+00
 -7.88677959e+00 -1.85022646e+00 -5.87183087e-01 -5.87183087e-01
 -5.87183087e-01  4.83381275e+02  5.80334859e+03  5.80334859e+03
  5.80334859e+03]
E1 = -677.2689054975463  E_coul = 180.50784849819016
cycle= 3 E= -496.761056999356  delta_E= -9.99e-10  |g|= 3.28e-06  |ddm|= 4.18e-06
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
E1 = -677.2689054975463  E_coul = 180.50784849819016
  HOMO = -0.587183085771894  LUMO = 483.381271380862
  mo_energy =
[-1.17481992e+02 -1.33724982e+01 -7.88677957e+00 -7.88677957e+00
 -7.88677957e+00 -1.85022646e+00 -5.87183086e-01 -5.87183086e-01
 -5.87183086e-01  4.83381271e+02  5.80334858e+03  5.80334858e+03
  5.80334858e+03]
E1 = -677.2689054731826  E_coul = 180.50784847382596
Extra cycle  E= -496.761056999357  delta_E= -5.12e-13  |g|= 2.45e-08  |ddm|= 9.89e-09
    CPU time for scf_cycle      0.57 sec, wall time      0.06 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 4.364234737574471
E1 = -677.2689054731826  E_coul = 180.50784847382596
init E= -496.761056999357
    CPU time for initialize scf      1.20 sec, wall time      0.05 sec
  HOMO = -0.587183085768306  LUMO = 483.381271353872
  mo_energy =
[-1.17481992e+02 -1.33724982e+01 -7.88677957e+00 -7.88677957e+00
 -7.88677957e+00 -1.85022646e+00 -5.87183086e-01 -5.87183086e-01
 -5.87183086e-01  4.83381271e+02  5.80334858e+03  5.80334858e+03
  5.80334858e+03]
E1 = -677.2689054730222  E_coul = 180.50784847366617
cycle= 1 E= -496.761056999356  delta_E= 6.25e-13  |g|= 1.86e-10  |ddm|= 7.25e-11
    CPU time for cycle= 1      0.21 sec, wall time      0.01 sec
E1 = -677.2689054730222  E_coul = 180.50784847366617
  HOMO = -0.58718308576856  LUMO = 483.38127135368
  mo_energy =
[-1.17481992e+02 -1.33724982e+01 -7.88677957e+00 -7.88677957e+00
 -7.88677957e+00 -1.85022646e+00 -5.87183086e-01 -5.87183086e-01
 -5.87183086e-01  4.83381271e+02  5.80334858e+03  5.80334858e+03
  5.80334858e+03]
E1 = -677.2689054730214  E_coul = 180.50784847366532
Extra cycle  E= -496.761056999356  delta_E= -5.68e-14  |g|= 3.97e-12  |ddm|= 5.45e-13
    CPU time for scf_cycle      1.49 sec, wall time      0.11 sec
exp = [4.97332155e+00 5.56830327e+02 3.82547388e-01 7.47204074e+01
 8.37937254e+00 2.13168893e-01 2.69396457e+03]
grad_E = [ 2.22777533e-01  7.42979276e-03 -1.70634047e+00  7.53242402e-03
  9.91934723e-02 -1.50315107e+01  5.75074049e-06]
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
number_of_s_exps = 4
number_of_p_exps = 3

exps = np.zeros((number_of_s_exps+number_of_p_exps,2))
#exps[:, 0] = decaying_nums(5)

# S
exps[0,0] = 20.0
exps[1,0] = 9.5045827955887916e+01
exps[2,0] = 4.4881042475048387e+00 
exps[3,0] = 3.9799528004692630e-01
             
# P          
exps[3,0] = 3.0108199280832128e+01
exps[4,0] = 6.1393781325590453e+00
exps[5,0] = 4.8929328703550412e-01

basis =  str(number_of_s_exps)+"s"+str(number_of_p_exps)+"p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc21115.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 24
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 18 14:59:48 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35677784.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 32000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 32000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 32000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  4.96307923028        1
[INPUT] 0    0    [1    /1   ]  570.719734541        1
[INPUT] 0    0    [1    /1   ]  0.451857312313       1
[INPUT] 0    0    [1    /1   ]  75.2029039988        1
[INPUT] 1    0    [1    /1   ]  8.40617032322        1
[INPUT] 1    0    [1    /1   ]  0.271985321372       1
[INPUT] 1    0    [1    /1   ]  2693.96439754        1

nuclear repulsion = 0
number of shells = 7
number of NR pGTOs = 13
number of NR cGTOs = 13
basis = {'Ar': [[0, [4.963079230281235, 1.0]], [0, [570.7197345412826, 1.0]], [0, [0.4518573123131884, 1.0]], [0, [75.20290399883271, 1.0]], [1, [8.406170323216863, 1.0]], [1, [0.2719853213724127, 1.0]], [1, [2693.9643975412996, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [4.96307923]
bas 1, expnt(s) = [570.71973454]
bas 2, expnt(s) = [0.45185731]
bas 3, expnt(s) = [75.202904]
bas 4, expnt(s) = [8.40617032]
bas 5, expnt(s) = [0.27198532]
bas 6, expnt(s) = [2693.96439754]
CPU time:       432.58
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  1  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]
 [ 0  1  1  1  0 36 37  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 4.96307923e+00 8.40095059e+00 5.70719735e+02 2.95006912e+02
 4.51857312e-01 1.39240640e+00 7.52029040e+01 6.45194985e+01
 8.40617032e+00 4.17572725e+01 2.71985321e-01 5.73015310e-01
 2.69396440e+03 5.66205661e+04]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 16.832199474627643
cond(S) = 4.433460744287422
E1 = -656.2338154398191  E_coul = 169.18462265346065
init E= -487.049192786358
    CPU time for initialize scf      0.36 sec, wall time      0.03 sec
  HOMO = -1.05068570576835  LUMO = 495.309872698775
  mo_energy =
[-1.18588466e+02 -1.42116024e+01 -8.68554585e+00 -8.68554585e+00
 -8.68554585e+00 -2.34751264e+00 -1.05068571e+00 -1.05068571e+00
 -1.05068571e+00  4.95309873e+02  5.80238436e+03  5.80238436e+03
  5.80238436e+03]
E1 = -684.1296381362529  E_coul = 186.68352903669657
cycle= 1 E= -497.446109099556  delta_E= -10.4  |g|= 0.229  |ddm|= 0.491
    CPU time for cycle= 1      0.23 sec, wall time      0.01 sec
diis-norm(errvec)=0.265036
diis-c [-0.07024387  1.        ]
  HOMO = -0.543613258354753  LUMO = 497.012587747115
  mo_energy =
[-1.16922344e+02 -1.29118610e+01 -7.43297789e+00 -7.43297789e+00
 -7.43297789e+00 -1.61732917e+00 -5.43613258e-01 -5.43613258e-01
 -5.43613258e-01  4.97012588e+02  5.80387160e+03  5.80387160e+03
  5.80387160e+03]
E1 = -684.1268238672185  E_coul = 186.6806790777104
cycle= 2 E= -497.446144789508  delta_E= -3.57e-05  |g|= 0.00113  |ddm|= 0.000878
    CPU time for cycle= 2      0.11 sec, wall time      0.01 sec
diis-norm(errvec)=0.00132605
diis-c [-7.05944281e-07 -3.88583717e-03  1.00388584e+00]
  HOMO = -0.543614870676643  LUMO = 497.010605352899
  mo_energy =
[-1.16923522e+02 -1.29119313e+01 -7.43303519e+00 -7.43303519e+00
 -7.43303519e+00 -1.61733518e+00 -5.43614871e-01 -5.43614871e-01
 -5.43614871e-01  4.97010605e+02  5.80386561e+03  5.80386561e+03
  5.80386561e+03]
E1 = -684.1268097019398  E_coul = 186.68066491135573
cycle= 3 E= -497.446144790584  delta_E= -1.08e-09  |g|= 3.26e-06  |ddm|= 4.2e-06
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=4.21828e-06
diis-c [-1.99857279e-12  4.55832923e-06 -3.65928359e-03  1.00365473e+00]
  HOMO = -0.543614868843668  LUMO = 497.010601710958
  mo_energy =
[-1.16923523e+02 -1.29119313e+01 -7.43303515e+00 -7.43303515e+00
 -7.43303515e+00 -1.61733518e+00 -5.43614869e-01 -5.43614869e-01
 -5.43614869e-01  4.97010602e+02  5.80386560e+03  5.80386560e+03
  5.80386560e+03]
E1 = -684.1268096801665  E_coul = 186.68066488958215
cycle= 4 E= -497.446144790584  delta_E= -2.84e-13  |g|= 7.21e-09  |ddm|= 9.61e-09
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
E1 = -684.1268096801665  E_coul = 186.68066488958215
  HOMO = -0.543614868827375  LUMO = 497.010601717164
  mo_energy =
[-1.16923523e+02 -1.29119313e+01 -7.43303515e+00 -7.43303515e+00
 -7.43303515e+00 -1.61733518e+00 -5.43614869e-01 -5.43614869e-01
 -5.43614869e-01  4.97010602e+02  5.80386560e+03  5.80386560e+03
  5.80386560e+03]
E1 = -684.1268096802346  E_coul = 186.68066488965027
Extra cycle  E= -497.446144790584  delta_E= 5.68e-14  |g|= 4.15e-11  |ddm|= 3.35e-11
    CPU time for scf_cycle      0.73 sec, wall time      0.08 sec
exp = [4.96307923e+00 5.70719735e+02 4.51857312e-01 7.52029040e+01
 8.40617032e+00 2.71985321e-01 2.69396440e+03]
E = -497.4461447905843
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
number_of_s_exps = 4
number_of_p_exps = 3

exps = np.zeros((number_of_s_exps+number_of_p_exps,2))
#exps[:, 0] = decaying_nums(5)

# S
exps[0,0] = 20.0
exps[1,0] = 9.5045827955887916e+01
exps[2,0] = 4.4881042475048387e+00 
exps[3,0] = 3.9799528004692630e-01
             
# P          
exps[3,0] = 3.0108199280832128e+01
exps[4,0] = 6.1393781325590453e+00
exps[5,0] = 4.8929328703550412e-01

basis =  str(number_of_s_exps)+"s"+str(number_of_p_exps)+"p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc21115.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 24
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 18 14:59:49 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35677784.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 32000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 32000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 32000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  4.96307923028        1
[INPUT] 0    0    [1    /1   ]  570.719734541        1
[INPUT] 0    0    [1    /1   ]  0.451857312313       1
[INPUT] 0    0    [1    /1   ]  75.2029039988        1
[INPUT] 1    0    [1    /1   ]  8.40617032322        1
[INPUT] 1    0    [1    /1   ]  0.271985321372       1
[INPUT] 1    0    [1    /1   ]  2693.96439754        1

nuclear repulsion = 0
number of shells = 7
number of NR pGTOs = 13
number of NR cGTOs = 13
basis = {'Ar': [[0, [4.963079230281235, 1.0]], [0, [570.7197345412826, 1.0]], [0, [0.4518573123131884, 1.0]], [0, [75.20290399883271, 1.0]], [1, [8.406170323216863, 1.0]], [1, [0.2719853213724127, 1.0]], [1, [2693.9643975412996, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [4.96307923]
bas 1, expnt(s) = [570.71973454]
bas 2, expnt(s) = [0.45185731]
bas 3, expnt(s) = [75.202904]
bas 4, expnt(s) = [8.40617032]
bas 5, expnt(s) = [0.27198532]
bas 6, expnt(s) = [2693.96439754]
CPU time:       433.47
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  1  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]
 [ 0  1  1  1  0 36 37  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 4.96307923e+00 8.40095059e+00 5.70719735e+02 2.95006912e+02
 4.51857312e-01 1.39240640e+00 7.52029040e+01 6.45194985e+01
 8.40617032e+00 4.17572725e+01 2.71985321e-01 5.73015310e-01
 2.69396440e+03 5.66205661e+04]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 16.832199474627643
cond(S) = 4.433460744287422
E1 = -656.2338154398191  E_coul = 169.18462265346065
init E= -487.049192786358
    CPU time for initialize scf      0.19 sec, wall time      0.02 sec
  HOMO = -1.05068570576835  LUMO = 495.309872698775
  mo_energy =
[-1.18588466e+02 -1.42116024e+01 -8.68554585e+00 -8.68554585e+00
 -8.68554585e+00 -2.34751264e+00 -1.05068571e+00 -1.05068571e+00
 -1.05068571e+00  4.95309873e+02  5.80238436e+03  5.80238436e+03
  5.80238436e+03]
E1 = -684.1296381362529  E_coul = 186.68352903669657
cycle= 1 E= -497.446109099556  delta_E= -10.4  |g|= 0.229  |ddm|= 0.491
    CPU time for cycle= 1      0.31 sec, wall time      0.01 sec
diis-norm(errvec)=0.265036
diis-c [-0.07024387  1.        ]
  HOMO = -0.543613258354753  LUMO = 497.012587747115
  mo_energy =
[-1.16922344e+02 -1.29118610e+01 -7.43297789e+00 -7.43297789e+00
 -7.43297789e+00 -1.61732917e+00 -5.43613258e-01 -5.43613258e-01
 -5.43613258e-01  4.97012588e+02  5.80387160e+03  5.80387160e+03
  5.80387160e+03]
E1 = -684.1268238672185  E_coul = 186.6806790777104
cycle= 2 E= -497.446144789508  delta_E= -3.57e-05  |g|= 0.00113  |ddm|= 0.000878
    CPU time for cycle= 2      0.06 sec, wall time      0.01 sec
diis-norm(errvec)=0.00132605
diis-c [-7.05944281e-07 -3.88583717e-03  1.00388584e+00]
  HOMO = -0.543614870676643  LUMO = 497.010605352899
  mo_energy =
[-1.16923522e+02 -1.29119313e+01 -7.43303519e+00 -7.43303519e+00
 -7.43303519e+00 -1.61733518e+00 -5.43614871e-01 -5.43614871e-01
 -5.43614871e-01  4.97010605e+02  5.80386561e+03  5.80386561e+03
  5.80386561e+03]
E1 = -684.1268097019398  E_coul = 186.68066491135573
cycle= 3 E= -497.446144790584  delta_E= -1.08e-09  |g|= 3.26e-06  |ddm|= 4.2e-06
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=4.21828e-06
diis-c [-1.99857279e-12  4.55832923e-06 -3.65928359e-03  1.00365473e+00]
  HOMO = -0.543614868843668  LUMO = 497.010601710958
  mo_energy =
[-1.16923523e+02 -1.29119313e+01 -7.43303515e+00 -7.43303515e+00
 -7.43303515e+00 -1.61733518e+00 -5.43614869e-01 -5.43614869e-01
 -5.43614869e-01  4.97010602e+02  5.80386560e+03  5.80386560e+03
  5.80386560e+03]
E1 = -684.1268096801665  E_coul = 186.68066488958215
cycle= 4 E= -497.446144790584  delta_E= -2.84e-13  |g|= 7.21e-09  |ddm|= 9.61e-09
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
E1 = -684.1268096801665  E_coul = 186.68066488958215
  HOMO = -0.543614868827375  LUMO = 497.010601717164
  mo_energy =
[-1.16923523e+02 -1.29119313e+01 -7.43303515e+00 -7.43303515e+00
 -7.43303515e+00 -1.61733518e+00 -5.43614869e-01 -5.43614869e-01
 -5.43614869e-01  4.97010602e+02  5.80386560e+03  5.80386560e+03
  5.80386560e+03]
E1 = -684.1268096802346  E_coul = 186.68066488965027
Extra cycle  E= -497.446144790584  delta_E= 5.68e-14  |g|= 4.15e-11  |ddm|= 3.35e-11
    CPU time for scf_cycle      0.59 sec, wall time      0.08 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 4.433460744287422
E1 = -684.1268096802346  E_coul = 186.68066488965027
init E= -497.446144790584
    CPU time for initialize scf      1.19 sec, wall time      0.05 sec
  HOMO = -0.543614868825784  LUMO = 497.01060171718
  mo_energy =
[-1.16923523e+02 -1.29119313e+01 -7.43303515e+00 -7.43303515e+00
 -7.43303515e+00 -1.61733518e+00 -5.43614869e-01 -5.43614869e-01
 -5.43614869e-01  4.97010602e+02  5.80386560e+03  5.80386560e+03
  5.80386560e+03]
E1 = -684.126809680235  E_coul = 186.68066488965067
cycle= 1 E= -497.446144790584  delta_E= -1.14e-13  |g|= 3.15e-12  |ddm|= 1.7e-13
    CPU time for cycle= 1      0.22 sec, wall time      0.01 sec
E1 = -684.126809680235  E_coul = 186.68066488965067
  HOMO = -0.54361486882744  LUMO = 497.01060171718
  mo_energy =
[-1.16923523e+02 -1.29119313e+01 -7.43303515e+00 -7.43303515e+00
 -7.43303515e+00 -1.61733518e+00 -5.43614869e-01 -5.43614869e-01
 -5.43614869e-01  4.97010602e+02  5.80386560e+03  5.80386560e+03
  5.80386560e+03]
E1 = -684.1268096802352  E_coul = 186.68066488965061
Extra cycle  E= -497.446144790585  delta_E= -1.14e-13  |g|= 2.46e-12  |ddm|= 4.89e-15
    CPU time for scf_cycle      1.47 sec, wall time      0.11 sec
exp = [4.96307923e+00 5.70719735e+02 4.51857312e-01 7.52029040e+01
 8.40617032e+00 2.71985321e-01 2.69396440e+03]
grad_E = [ 2.19744338e-01  8.59951694e-03 -1.53312695e-01 -8.00406504e-04
  8.77658338e-02 -1.02431616e+01  5.80136823e-06]
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
number_of_s_exps = 4
number_of_p_exps = 3

exps = np.zeros((number_of_s_exps+number_of_p_exps,2))
#exps[:, 0] = decaying_nums(5)

# S
exps[0,0] = 20.0
exps[1,0] = 9.5045827955887916e+01
exps[2,0] = 4.4881042475048387e+00 
exps[3,0] = 3.9799528004692630e-01
             
# P          
exps[3,0] = 3.0108199280832128e+01
exps[4,0] = 6.1393781325590453e+00
exps[5,0] = 4.8929328703550412e-01

basis =  str(number_of_s_exps)+"s"+str(number_of_p_exps)+"p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc21115.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 24
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 18 14:59:51 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35677784.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 32000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 32000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 32000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  4.85792906633        1
[INPUT] 0    0    [1    /1   ]  548.926229345        1
[INPUT] 0    0    [1    /1   ]  0.513131650963       1
[INPUT] 0    0    [1    /1   ]  73.6820516544        1
[INPUT] 1    0    [1    /1   ]  8.44828009934        1
[INPUT] 1    0    [1    /1   ]  0.357976531869       1
[INPUT] 1    0    [1    /1   ]  2693.96417479        1

nuclear repulsion = 0
number of shells = 7
number of NR pGTOs = 13
number of NR cGTOs = 13
basis = {'Ar': [[0, [4.8579290663262595, 1.0]], [0, [548.9262293447104, 1.0]], [0, [0.5131316509627043, 1.0]], [0, [73.68205165441564, 1.0]], [1, [8.448280099340542, 1.0]], [1, [0.3579765318692319, 1.0]], [1, [2693.964174791265, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [4.85792907]
bas 1, expnt(s) = [548.92622934]
bas 2, expnt(s) = [0.51313165]
bas 3, expnt(s) = [73.68205165]
bas 4, expnt(s) = [8.4482801]
bas 5, expnt(s) = [0.35797653]
bas 6, expnt(s) = [2693.96417479]
CPU time:       438.20
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  1  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]
 [ 0  1  1  1  0 36 37  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 4.85792907e+00 8.26710400e+00 5.48926229e+02 2.86517077e+02
 5.13131651e-01 1.53174555e+00 7.36820517e+01 6.35384047e+01
 8.44828010e+00 4.20189091e+01 3.57976532e-01 8.07797654e-01
 2.69396417e+03 5.66205603e+04]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.202667218944722
cond(S) = 4.634766234563246
E1 = -667.0440113138136  E_coul = 178.35946060010548
init E= -488.684550713708
    CPU time for initialize scf      0.21 sec, wall time      0.02 sec
  HOMO = -0.868663495050136  LUMO = 472.949825793843
  mo_energy =
[-1.17951011e+02 -1.35507100e+01 -8.03280975e+00 -8.03280975e+00
 -8.03280975e+00 -1.89862175e+00 -8.68663495e-01 -8.68663495e-01
 -8.68663495e-01  4.72949826e+02  5.80307819e+03  5.80307819e+03
  5.80307819e+03]
E1 = -691.8153303602408  E_coul = 193.5585374929914
cycle= 1 E= -498.256792867249  delta_E= -9.57  |g|= 0.231  |ddm|= 0.334
    CPU time for cycle= 1      0.23 sec, wall time      0.01 sec
diis-norm(errvec)=0.262488
diis-c [-0.06889981  1.        ]
  HOMO = -0.43011915722881  LUMO = 474.462100504216
  mo_energy =
[-1.16463113e+02 -1.24212430e+01 -6.95301208e+00 -6.95301208e+00
 -6.95301208e+00 -1.31539709e+00 -4.30119157e-01 -4.30119157e-01
 -4.30119157e-01  4.74462101e+02  5.80433453e+03  5.80433453e+03
  5.80433453e+03]
E1 = -691.8122468515921  E_coul = 193.55541529349225
cycle= 2 E= -498.2568315581  delta_E= -3.87e-05  |g|= 0.00113  |ddm|= 0.000971
    CPU time for cycle= 2      0.11 sec, wall time      0.01 sec
diis-norm(errvec)=0.00129131
diis-c [-6.79877333e-07 -3.80040360e-03  1.00380040e+00]
  HOMO = -0.430122381720523  LUMO = 474.460055595844
  mo_energy =
[-1.16464388e+02 -1.24213186e+01 -6.95307862e+00 -6.95307862e+00
 -6.95307862e+00 -1.31540445e+00 -4.30122382e-01 -4.30122382e-01
 -4.30122382e-01  4.74460056e+02  5.80432823e+03  5.80432823e+03
  5.80432823e+03]
E1 = -691.8122313397  E_coul = 193.55539978047128
cycle= 3 E= -498.256831559229  delta_E= -1.13e-09  |g|= 3.24e-06  |ddm|= 4.58e-06
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=4.14988e-06
diis-c [-2.23486585e-12  4.58318385e-06 -3.66883342e-03  1.00366425e+00]
  HOMO = -0.43012237961448  LUMO = 474.460051760145
  mo_energy =
[-1.16464390e+02 -1.24213186e+01 -6.95307860e+00 -6.95307860e+00
 -6.95307860e+00 -1.31540445e+00 -4.30122380e-01 -4.30122380e-01
 -4.30122380e-01  4.74460052e+02  5.80432822e+03  5.80432822e+03
  5.80432822e+03]
E1 = -691.8122313153399  E_coul = 193.55539975611143
cycle= 4 E= -498.256831559228  delta_E= 3.41e-13  |g|= 8.03e-09  |ddm|= 1.01e-08
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
E1 = -691.8122313153399  E_coul = 193.55539975611143
  HOMO = -0.430122379581882  LUMO = 474.460051766116
  mo_energy =
[-1.16464390e+02 -1.24213186e+01 -6.95307860e+00 -6.95307860e+00
 -6.95307860e+00 -1.31540445e+00 -4.30122380e-01 -4.30122380e-01
 -4.30122380e-01  4.74460052e+02  5.80432822e+03  5.80432822e+03
  5.80432822e+03]
E1 = -691.8122313154134  E_coul = 193.55539975618484
Extra cycle  E= -498.256831559229  delta_E= -1.71e-13  |g|= 4.97e-11  |ddm|= 3.9e-11
    CPU time for scf_cycle      0.58 sec, wall time      0.08 sec
exp = [4.85792907e+00 5.48926229e+02 5.13131651e-01 7.36820517e+01
 8.44828010e+00 3.57976532e-01 2.69396417e+03]
E = -498.2568315592286
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
number_of_s_exps = 4
number_of_p_exps = 3

exps = np.zeros((number_of_s_exps+number_of_p_exps,2))
#exps[:, 0] = decaying_nums(5)

# S
exps[0,0] = 20.0
exps[1,0] = 9.5045827955887916e+01
exps[2,0] = 4.4881042475048387e+00 
exps[3,0] = 3.9799528004692630e-01
             
# P          
exps[3,0] = 3.0108199280832128e+01
exps[4,0] = 6.1393781325590453e+00
exps[5,0] = 4.8929328703550412e-01

basis =  str(number_of_s_exps)+"s"+str(number_of_p_exps)+"p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc21115.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 24
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 18 14:59:52 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35677784.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 32000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 32000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 32000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  4.85792906633        1
[INPUT] 0    0    [1    /1   ]  548.926229345        1
[INPUT] 0    0    [1    /1   ]  0.513131650963       1
[INPUT] 0    0    [1    /1   ]  73.6820516544        1
[INPUT] 1    0    [1    /1   ]  8.44828009934        1
[INPUT] 1    0    [1    /1   ]  0.357976531869       1
[INPUT] 1    0    [1    /1   ]  2693.96417479        1

nuclear repulsion = 0
number of shells = 7
number of NR pGTOs = 13
number of NR cGTOs = 13
basis = {'Ar': [[0, [4.8579290663262595, 1.0]], [0, [548.9262293447104, 1.0]], [0, [0.5131316509627043, 1.0]], [0, [73.68205165441564, 1.0]], [1, [8.448280099340542, 1.0]], [1, [0.3579765318692319, 1.0]], [1, [2693.964174791265, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [4.85792907]
bas 1, expnt(s) = [548.92622934]
bas 2, expnt(s) = [0.51313165]
bas 3, expnt(s) = [73.68205165]
bas 4, expnt(s) = [8.4482801]
bas 5, expnt(s) = [0.35797653]
bas 6, expnt(s) = [2693.96417479]
CPU time:       438.97
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  1  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]
 [ 0  1  1  1  0 36 37  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 4.85792907e+00 8.26710400e+00 5.48926229e+02 2.86517077e+02
 5.13131651e-01 1.53174555e+00 7.36820517e+01 6.35384047e+01
 8.44828010e+00 4.20189091e+01 3.57976532e-01 8.07797654e-01
 2.69396417e+03 5.66205603e+04]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.202667218944722
cond(S) = 4.634766234563246
E1 = -667.0440113138136  E_coul = 178.35946060010548
init E= -488.684550713708
    CPU time for initialize scf      0.20 sec, wall time      0.02 sec
  HOMO = -0.868663495050136  LUMO = 472.949825793843
  mo_energy =
[-1.17951011e+02 -1.35507100e+01 -8.03280975e+00 -8.03280975e+00
 -8.03280975e+00 -1.89862175e+00 -8.68663495e-01 -8.68663495e-01
 -8.68663495e-01  4.72949826e+02  5.80307819e+03  5.80307819e+03
  5.80307819e+03]
E1 = -691.8153303602408  E_coul = 193.5585374929914
cycle= 1 E= -498.256792867249  delta_E= -9.57  |g|= 0.231  |ddm|= 0.334
    CPU time for cycle= 1      0.23 sec, wall time      0.01 sec
diis-norm(errvec)=0.262488
diis-c [-0.06889981  1.        ]
  HOMO = -0.43011915722881  LUMO = 474.462100504216
  mo_energy =
[-1.16463113e+02 -1.24212430e+01 -6.95301208e+00 -6.95301208e+00
 -6.95301208e+00 -1.31539709e+00 -4.30119157e-01 -4.30119157e-01
 -4.30119157e-01  4.74462101e+02  5.80433453e+03  5.80433453e+03
  5.80433453e+03]
E1 = -691.8122468515921  E_coul = 193.55541529349225
cycle= 2 E= -498.2568315581  delta_E= -3.87e-05  |g|= 0.00113  |ddm|= 0.000971
    CPU time for cycle= 2      0.11 sec, wall time      0.01 sec
diis-norm(errvec)=0.00129131
diis-c [-6.79877333e-07 -3.80040360e-03  1.00380040e+00]
  HOMO = -0.430122381720523  LUMO = 474.460055595844
  mo_energy =
[-1.16464388e+02 -1.24213186e+01 -6.95307862e+00 -6.95307862e+00
 -6.95307862e+00 -1.31540445e+00 -4.30122382e-01 -4.30122382e-01
 -4.30122382e-01  4.74460056e+02  5.80432823e+03  5.80432823e+03
  5.80432823e+03]
E1 = -691.8122313397  E_coul = 193.55539978047128
cycle= 3 E= -498.256831559229  delta_E= -1.13e-09  |g|= 3.24e-06  |ddm|= 4.58e-06
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=4.14988e-06
diis-c [-2.23486585e-12  4.58318385e-06 -3.66883342e-03  1.00366425e+00]
  HOMO = -0.43012237961448  LUMO = 474.460051760145
  mo_energy =
[-1.16464390e+02 -1.24213186e+01 -6.95307860e+00 -6.95307860e+00
 -6.95307860e+00 -1.31540445e+00 -4.30122380e-01 -4.30122380e-01
 -4.30122380e-01  4.74460052e+02  5.80432822e+03  5.80432822e+03
  5.80432822e+03]
E1 = -691.8122313153399  E_coul = 193.55539975611143
cycle= 4 E= -498.256831559228  delta_E= 3.41e-13  |g|= 8.03e-09  |ddm|= 1.01e-08
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
E1 = -691.8122313153399  E_coul = 193.55539975611143
  HOMO = -0.430122379581882  LUMO = 474.460051766116
  mo_energy =
[-1.16464390e+02 -1.24213186e+01 -6.95307860e+00 -6.95307860e+00
 -6.95307860e+00 -1.31540445e+00 -4.30122380e-01 -4.30122380e-01
 -4.30122380e-01  4.74460052e+02  5.80432822e+03  5.80432822e+03
  5.80432822e+03]
E1 = -691.8122313154134  E_coul = 193.55539975618484
Extra cycle  E= -498.256831559229  delta_E= -1.71e-13  |g|= 4.97e-11  |ddm|= 3.9e-11
    CPU time for scf_cycle      0.59 sec, wall time      0.08 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 4.634766234563246
E1 = -691.8122313154134  E_coul = 193.55539975618484
init E= -498.256831559229
    CPU time for initialize scf      1.19 sec, wall time      0.05 sec
  HOMO = -0.430122379580676  LUMO = 474.460051766129
  mo_energy =
[-1.16464390e+02 -1.24213186e+01 -6.95307860e+00 -6.95307860e+00
 -6.95307860e+00 -1.31540445e+00 -4.30122380e-01 -4.30122380e-01
 -4.30122380e-01  4.74460052e+02  5.80432822e+03  5.80432822e+03
  5.80432822e+03]
E1 = -691.8122313154138  E_coul = 193.55539975618518
cycle= 1 E= -498.256831559229  delta_E=    0  |g|= 3.18e-12  |ddm|= 2.09e-13
    CPU time for cycle= 1      0.21 sec, wall time      0.01 sec
E1 = -691.8122313154138  E_coul = 193.55539975618518
  HOMO = -0.430122379582971  LUMO = 474.460051766129
  mo_energy =
[-1.16464390e+02 -1.24213186e+01 -6.95307860e+00 -6.95307860e+00
 -6.95307860e+00 -1.31540445e+00 -4.30122380e-01 -4.30122380e-01
 -4.30122380e-01  4.74460052e+02  5.80432822e+03  5.80432822e+03
  5.80432822e+03]
E1 = -691.8122313154138  E_coul = 193.55539975618515
Extra cycle  E= -498.256831559229  delta_E= -5.68e-14  |g|= 5.21e-12  |ddm|= 5.73e-15
    CPU time for scf_cycle      1.48 sec, wall time      0.11 sec
exp = [4.85792907e+00 5.48926229e+02 5.13131651e-01 7.36820517e+01
 8.44828010e+00 3.57976532e-01 2.69396417e+03]
grad_E = [ 1.48813854e-01  7.93670123e-03  1.00876677e+00 -1.09602455e-02
  4.90797771e-02 -5.14040274e+00  5.88911148e-06]
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
number_of_s_exps = 4
number_of_p_exps = 3

exps = np.zeros((number_of_s_exps+number_of_p_exps,2))
#exps[:, 0] = decaying_nums(5)

# S
exps[0,0] = 20.0
exps[1,0] = 9.5045827955887916e+01
exps[2,0] = 4.4881042475048387e+00 
exps[3,0] = 3.9799528004692630e-01
             
# P          
exps[3,0] = 3.0108199280832128e+01
exps[4,0] = 6.1393781325590453e+00
exps[5,0] = 4.8929328703550412e-01

basis =  str(number_of_s_exps)+"s"+str(number_of_p_exps)+"p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc21115.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 24
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 18 14:59:55 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35677784.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 32000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 32000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 32000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  4.71395852182        1
[INPUT] 0    0    [1    /1   ]  489.276529423        1
[INPUT] 0    0    [1    /1   ]  0.532223633859       1
[INPUT] 0    0    [1    /1   ]  70.4823562373        1
[INPUT] 1    0    [1    /1   ]  8.52292740687        1
[INPUT] 1    0    [1    /1   ]  0.445878586688       1
[INPUT] 1    0    [1    /1   ]  2693.96397393        1

nuclear repulsion = 0
number of shells = 7
number of NR pGTOs = 13
number of NR cGTOs = 13
basis = {'Ar': [[0, [4.71395852182095, 1.0]], [0, [489.2765294233091, 1.0]], [0, [0.532223633859384, 1.0]], [0, [70.48235623731955, 1.0]], [1, [8.522927406872833, 1.0]], [1, [0.44587858668816593, 1.0]], [1, [2693.963973934568, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [4.71395852]
bas 1, expnt(s) = [489.27652942]
bas 2, expnt(s) = [0.53222363]
bas 3, expnt(s) = [70.48235624]
bas 4, expnt(s) = [8.52292741]
bas 5, expnt(s) = [0.44587859]
bas 6, expnt(s) = [2693.96397393]
CPU time:       443.79
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  1  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]
 [ 0  1  1  1  0 36 37  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 4.71395852e+00 8.08266059e+00 4.89276529e+02 2.62833556e+02
 5.32223634e-01 1.57429328e+00 7.04823562e+01 6.14575630e+01
 8.52292741e+00 4.24835088e+01 4.45878587e-01 1.06293122e+00
 2.69396397e+03 5.66205550e+04]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.274261838733437
cond(S) = 4.93009992329851
E1 = -674.1295995362759  E_coul = 184.09113259861041
init E= -490.038466937665
    CPU time for initialize scf      4.76 sec, wall time      0.22 sec
  HOMO = -0.725806635598933  LUMO = 414.970923880497
  mo_energy =
[-1.17624652e+02 -1.31279095e+01 -7.64716392e+00 -7.64716392e+00
 -7.64716392e+00 -1.64744912e+00 -7.25806636e-01 -7.25806636e-01
 -7.25806636e-01  4.14970924e+02  5.80347729e+03  5.80347729e+03
  5.80347729e+03]
E1 = -697.8442804867732  E_coul = 199.00715003721675
cycle= 1 E= -498.837130449556  delta_E= -8.8  |g|= 0.227  |ddm|= 0.325
    CPU time for cycle= 1      0.23 sec, wall time      0.01 sec
diis-norm(errvec)=0.243749
diis-c [-0.0594138  1.       ]
  HOMO = -0.267830265226034  LUMO = 416.43357273222
  mo_energy =
[-1.16178726e+02 -1.20296766e+01 -6.60290642e+00 -6.60290642e+00
 -6.60290642e+00 -1.09439844e+00 -2.67830265e-01 -2.67830265e-01
 -2.67830265e-01  4.16433573e+02  5.80466128e+03  5.80466128e+03
  5.80466128e+03]
E1 = -697.8406299999499  E_coul = 199.0034568530114
cycle= 2 E= -498.837173146939  delta_E= -4.27e-05  |g|= 0.00106  |ddm|= 0.00119
    CPU time for cycle= 2      0.09 sec, wall time      0.01 sec
diis-norm(errvec)=0.00109031
diis-c [-5.53949105e-07 -3.27948705e-03  1.00327949e+00]
  HOMO = -0.267837312403618  LUMO = 416.431567656789
  mo_energy =
[-1.16180178e+02 -1.20297673e+01 -6.60300008e+00 -6.60300008e+00
 -6.60300008e+00 -1.09440707e+00 -2.67837312e-01 -2.67837312e-01
 -2.67837312e-01  4.16431568e+02  5.80465478e+03  5.80465478e+03
  5.80465478e+03]
E1 = -697.8406114060452  E_coul = 199.00343825796776
cycle= 3 E= -498.837173148077  delta_E= -1.14e-09  |g|= 3.01e-06  |ddm|= 5.59e-06
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=3.58081e-06
diis-c [-1.61846373e-12  3.76571764e-06 -3.64438409e-03  1.00364062e+00]
  HOMO = -0.26783731622418  LUMO = 416.431563080931
  mo_energy =
[-1.16180181e+02 -1.20297674e+01 -6.60300016e+00 -6.60300016e+00
 -6.60300016e+00 -1.09440708e+00 -2.67837316e-01 -2.67837316e-01
 -2.67837316e-01  4.16431563e+02  5.80465477e+03  5.80465477e+03
  5.80465477e+03]
E1 = -697.8406113679129  E_coul = 199.0034382198358
cycle= 4 E= -498.837173148077  delta_E= 3.98e-13  |g|= 8.38e-09  |ddm|= 1.18e-08
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
E1 = -697.8406113679129  E_coul = 199.0034382198358
  HOMO = -0.267837316168598  LUMO = 416.431563084091
  mo_energy =
[-1.16180181e+02 -1.20297674e+01 -6.60300016e+00 -6.60300016e+00
 -6.60300016e+00 -1.09440708e+00 -2.67837316e-01 -2.67837316e-01
 -2.67837316e-01  4.16431563e+02  5.80465477e+03  5.80465477e+03
  5.80465477e+03]
E1 = -697.8406113679774  E_coul = 199.00343821989978
Extra cycle  E= -498.837173148078  delta_E= -6.25e-13  |g|= 6.27e-11  |ddm|= 4.44e-11
    CPU time for scf_cycle      5.12 sec, wall time      0.28 sec
exp = [4.71395852e+00 4.89276529e+02 5.32223634e-01 7.04823562e+01
 8.52292741e+00 4.45878587e-01 2.69396397e+03]
E = -498.8371731480777
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
number_of_s_exps = 4
number_of_p_exps = 3

exps = np.zeros((number_of_s_exps+number_of_p_exps,2))
#exps[:, 0] = decaying_nums(5)

# S
exps[0,0] = 20.0
exps[1,0] = 9.5045827955887916e+01
exps[2,0] = 4.4881042475048387e+00 
exps[3,0] = 3.9799528004692630e-01
             
# P          
exps[3,0] = 3.0108199280832128e+01
exps[4,0] = 6.1393781325590453e+00
exps[5,0] = 4.8929328703550412e-01

basis =  str(number_of_s_exps)+"s"+str(number_of_p_exps)+"p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc21115.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 24
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 18 14:59:55 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35677784.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 32000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 32000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 32000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  4.71395852182        1
[INPUT] 0    0    [1    /1   ]  489.276529423        1
[INPUT] 0    0    [1    /1   ]  0.532223633859       1
[INPUT] 0    0    [1    /1   ]  70.4823562373        1
[INPUT] 1    0    [1    /1   ]  8.52292740687        1
[INPUT] 1    0    [1    /1   ]  0.445878586688       1
[INPUT] 1    0    [1    /1   ]  2693.96397393        1

nuclear repulsion = 0
number of shells = 7
number of NR pGTOs = 13
number of NR cGTOs = 13
basis = {'Ar': [[0, [4.71395852182095, 1.0]], [0, [489.2765294233091, 1.0]], [0, [0.532223633859384, 1.0]], [0, [70.48235623731955, 1.0]], [1, [8.522927406872833, 1.0]], [1, [0.44587858668816593, 1.0]], [1, [2693.963973934568, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [4.71395852]
bas 1, expnt(s) = [489.27652942]
bas 2, expnt(s) = [0.53222363]
bas 3, expnt(s) = [70.48235624]
bas 4, expnt(s) = [8.52292741]
bas 5, expnt(s) = [0.44587859]
bas 6, expnt(s) = [2693.96397393]
CPU time:       449.09
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  1  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]
 [ 0  1  1  1  0 36 37  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 4.71395852e+00 8.08266059e+00 4.89276529e+02 2.62833556e+02
 5.32223634e-01 1.57429328e+00 7.04823562e+01 6.14575630e+01
 8.52292741e+00 4.24835088e+01 4.45878587e-01 1.06293122e+00
 2.69396397e+03 5.66205550e+04]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.274261838733437
cond(S) = 4.93009992329851
E1 = -674.1295995362759  E_coul = 184.09113259861041
init E= -490.038466937665
    CPU time for initialize scf      0.19 sec, wall time      0.02 sec
  HOMO = -0.725806635598933  LUMO = 414.970923880497
  mo_energy =
[-1.17624652e+02 -1.31279095e+01 -7.64716392e+00 -7.64716392e+00
 -7.64716392e+00 -1.64744912e+00 -7.25806636e-01 -7.25806636e-01
 -7.25806636e-01  4.14970924e+02  5.80347729e+03  5.80347729e+03
  5.80347729e+03]
E1 = -697.8442804867732  E_coul = 199.00715003721675
cycle= 1 E= -498.837130449556  delta_E= -8.8  |g|= 0.227  |ddm|= 0.325
    CPU time for cycle= 1      0.22 sec, wall time      0.01 sec
diis-norm(errvec)=0.243749
diis-c [-0.0594138  1.       ]
  HOMO = -0.267830265226034  LUMO = 416.43357273222
  mo_energy =
[-1.16178726e+02 -1.20296766e+01 -6.60290642e+00 -6.60290642e+00
 -6.60290642e+00 -1.09439844e+00 -2.67830265e-01 -2.67830265e-01
 -2.67830265e-01  4.16433573e+02  5.80466128e+03  5.80466128e+03
  5.80466128e+03]
E1 = -697.8406299999499  E_coul = 199.0034568530114
cycle= 2 E= -498.837173146939  delta_E= -4.27e-05  |g|= 0.00106  |ddm|= 0.00119
    CPU time for cycle= 2      0.13 sec, wall time      0.01 sec
diis-norm(errvec)=0.00109031
diis-c [-5.53949105e-07 -3.27948705e-03  1.00327949e+00]
  HOMO = -0.267837312403618  LUMO = 416.431567656789
  mo_energy =
[-1.16180178e+02 -1.20297673e+01 -6.60300008e+00 -6.60300008e+00
 -6.60300008e+00 -1.09440707e+00 -2.67837312e-01 -2.67837312e-01
 -2.67837312e-01  4.16431568e+02  5.80465478e+03  5.80465478e+03
  5.80465478e+03]
E1 = -697.8406114060452  E_coul = 199.00343825796776
cycle= 3 E= -498.837173148077  delta_E= -1.14e-09  |g|= 3.01e-06  |ddm|= 5.59e-06
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=3.58081e-06
diis-c [-1.61846373e-12  3.76571764e-06 -3.64438409e-03  1.00364062e+00]
  HOMO = -0.26783731622418  LUMO = 416.431563080931
  mo_energy =
[-1.16180181e+02 -1.20297674e+01 -6.60300016e+00 -6.60300016e+00
 -6.60300016e+00 -1.09440708e+00 -2.67837316e-01 -2.67837316e-01
 -2.67837316e-01  4.16431563e+02  5.80465477e+03  5.80465477e+03
  5.80465477e+03]
E1 = -697.8406113679129  E_coul = 199.0034382198358
cycle= 4 E= -498.837173148077  delta_E= 3.98e-13  |g|= 8.38e-09  |ddm|= 1.18e-08
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
E1 = -697.8406113679129  E_coul = 199.0034382198358
  HOMO = -0.267837316168598  LUMO = 416.431563084091
  mo_energy =
[-1.16180181e+02 -1.20297674e+01 -6.60300016e+00 -6.60300016e+00
 -6.60300016e+00 -1.09440708e+00 -2.67837316e-01 -2.67837316e-01
 -2.67837316e-01  4.16431563e+02  5.80465477e+03  5.80465477e+03
  5.80465477e+03]
E1 = -697.8406113679774  E_coul = 199.00343821989978
Extra cycle  E= -498.837173148078  delta_E= -6.25e-13  |g|= 6.27e-11  |ddm|= 4.44e-11
    CPU time for scf_cycle      0.58 sec, wall time      0.08 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 4.93009992329851
E1 = -697.8406113679774  E_coul = 199.00343821989978
init E= -498.837173148078
    CPU time for initialize scf      1.14 sec, wall time      0.05 sec
  HOMO = -0.26783731616797  LUMO = 416.431563084088
  mo_energy =
[-1.16180181e+02 -1.20297674e+01 -6.60300016e+00 -6.60300016e+00
 -6.60300016e+00 -1.09440708e+00 -2.67837316e-01 -2.67837316e-01
 -2.67837316e-01  4.16431563e+02  5.80465477e+03  5.80465477e+03
  5.80465477e+03]
E1 = -697.8406113679772  E_coul = 199.00343821989992
cycle= 1 E= -498.837173148077  delta_E= 3.98e-13  |g|= 2.49e-12  |ddm|= 2.84e-13
    CPU time for cycle= 1      0.21 sec, wall time      0.01 sec
E1 = -697.8406113679772  E_coul = 199.00343821989992
  HOMO = -0.267837316167957  LUMO = 416.431563084088
  mo_energy =
[-1.16180181e+02 -1.20297674e+01 -6.60300016e+00 -6.60300016e+00
 -6.60300016e+00 -1.09440708e+00 -2.67837316e-01 -2.67837316e-01
 -2.67837316e-01  4.16431563e+02  5.80465477e+03  5.80465477e+03
  5.80465477e+03]
E1 = -697.8406113679774  E_coul = 199.00343821989995
Extra cycle  E= -498.837173148077  delta_E= -1.71e-13  |g|= 1.69e-12  |ddm|= 7.68e-15
    CPU time for scf_cycle      1.44 sec, wall time      0.11 sec
exp = [4.71395852e+00 4.89276529e+02 5.32223634e-01 7.04823562e+01
 8.52292741e+00 4.45878587e-01 2.69396397e+03]
grad_E = [ 4.43071533e-02  3.00662045e-03  1.49503626e+00 -5.04228247e-04
  1.86203710e-02 -1.26414590e+00  6.03742960e-06]
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
number_of_s_exps = 4
number_of_p_exps = 3

exps = np.zeros((number_of_s_exps+number_of_p_exps,2))
#exps[:, 0] = decaying_nums(5)

# S
exps[0,0] = 20.0
exps[1,0] = 9.5045827955887916e+01
exps[2,0] = 4.4881042475048387e+00 
exps[3,0] = 3.9799528004692630e-01
             
# P          
exps[3,0] = 3.0108199280832128e+01
exps[4,0] = 6.1393781325590453e+00
exps[5,0] = 4.8929328703550412e-01

basis =  str(number_of_s_exps)+"s"+str(number_of_p_exps)+"p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc21115.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 24
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 18 14:59:58 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35677784.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 32000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 32000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 32000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  4.65654467851        1
[INPUT] 0    0    [1    /1   ]  454.907434496        1
[INPUT] 0    0    [1    /1   ]  0.497482266101       1
[INPUT] 0    0    [1    /1   ]  68.4820955272        1
[INPUT] 1    0    [1    /1   ]  8.56779673527        1
[INPUT] 1    0    [1    /1   ]  0.479165850991       1
[INPUT] 1    0    [1    /1   ]  2693.96392446        1

nuclear repulsion = 0
number of shells = 7
number of NR pGTOs = 13
number of NR cGTOs = 13
basis = {'Ar': [[0, [4.6565446785065525, 1.0]], [0, [454.9074344963591, 1.0]], [0, [0.4974822661014784, 1.0]], [0, [68.48209552724765, 1.0]], [1, [8.567796735265219, 1.0]], [1, [0.4791658509912628, 1.0]], [1, [2693.9639244578434, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [4.65654468]
bas 1, expnt(s) = [454.9074345]
bas 2, expnt(s) = [0.49748227]
bas 3, expnt(s) = [68.48209553]
bas 4, expnt(s) = [8.56779674]
bas 5, expnt(s) = [0.47916585]
bas 6, expnt(s) = [2693.96392446]
CPU time:       453.76
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  1  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]
 [ 0  1  1  1  0 36 37  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 4.65654468e+00 8.00871529e+00 4.54907434e+02 2.48861263e+02
 4.97482266e-01 1.49657411e+00 6.84820955e+01 6.01447612e+01
 8.56779674e+00 4.27632630e+01 4.79165851e-01 1.16303214e+00
 2.69396392e+03 5.66205537e+04]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.27794655336914
cond(S) = 5.020994856934055
E1 = -675.9079666657537  E_coul = 185.41815286396363
init E= -490.48981380179
    CPU time for initialize scf      7.11 sec, wall time      0.33 sec
  HOMO = -0.67892525196293  LUMO = 381.855292691921
  mo_energy =
[-1.17530585e+02 -1.30183520e+01 -7.56990413e+00 -7.56990413e+00
 -7.56990413e+00 -1.61611464e+00 -6.78925252e-01 -6.78925252e-01
 -6.78925252e-01  3.81855293e+02  5.80353893e+03  5.80353893e+03
  5.80353893e+03]
E1 = -699.2335460744711  E_coul = 200.28053869711616
cycle= 1 E= -498.953007377355  delta_E= -8.46  |g|= 0.227  |ddm|= 0.316
    CPU time for cycle= 1      0.32 sec, wall time      0.02 sec
diis-norm(errvec)=0.235802
diis-c [-0.05560263  1.        ]
  HOMO = -0.210122521893206  LUMO = 383.296062718071
  mo_energy =
[-1.16104212e+02 -1.19265311e+01 -6.53469290e+00 -6.53469290e+00
 -6.53469290e+00 -1.07106811e+00 -2.10122522e-01 -2.10122522e-01
 -2.10122522e-01  3.83296063e+02  5.80468236e+03  5.80468236e+03
  5.80468236e+03]
E1 = -699.2294634648335  E_coul = 200.27640873006686
cycle= 2 E= -498.953054734767  delta_E= -4.74e-05  |g|= 0.00105  |ddm|= 0.00137
    CPU time for cycle= 2      0.02 sec, wall time      0.01 sec
diis-norm(errvec)=0.00101041
diis-c [-5.07591317e-07 -3.04772959e-03  1.00304773e+00]
  HOMO = -0.210132490254319  LUMO = 383.294068649305
  mo_energy =
[-1.16105796e+02 -1.19266344e+01 -6.53480824e+00 -6.53480824e+00
 -6.53480824e+00 -1.07107692e+00 -2.10132490e-01 -2.10132490e-01
 -2.10132490e-01  3.83294069e+02  5.80467569e+03  5.80467569e+03
  5.80467569e+03]
E1 = -699.2294422502861  E_coul = 200.27638751426295
cycle= 3 E= -498.953054736023  delta_E= -1.26e-09  |g|= 2.86e-06  |ddm|= 6.58e-06
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=3.10118e-06
diis-c [-7.08757172e-13  3.20521019e-06 -3.44914556e-03  1.00344594e+00]
  HOMO = -0.210132501664037  LUMO = 383.294063748114
  mo_energy =
[-1.16105799e+02 -1.19266346e+01 -6.53480842e+00 -6.53480842e+00
 -6.53480842e+00 -1.07107693e+00 -2.10132502e-01 -2.10132502e-01
 -2.10132502e-01  3.83294064e+02  5.80467568e+03  5.80467568e+03
  5.80467568e+03]
E1 = -699.2294422007574  E_coul = 200.27638746473372
cycle= 4 E= -498.953054736024  delta_E= -5.68e-13  |g|= 6.34e-09  |ddm|= 1.44e-08
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
E1 = -699.2294422007574  E_coul = 200.27638746473372
  HOMO = -0.210132501610945  LUMO = 383.294063749228
  mo_energy =
[-1.16105799e+02 -1.19266346e+01 -6.53480842e+00 -6.53480842e+00
 -6.53480842e+00 -1.07107693e+00 -2.10132502e-01 -2.10132502e-01
 -2.10132502e-01  3.83294064e+02  5.80467568e+03  5.80467568e+03
  5.80467568e+03]
E1 = -699.2294422007986  E_coul = 200.27638746477473
Extra cycle  E= -498.953054736024  delta_E= -2.27e-13  |g|= 5.19e-11  |ddm|= 3.54e-11
    CPU time for scf_cycle      7.48 sec, wall time      0.38 sec
exp = [4.65654468e+00 4.54907434e+02 4.97482266e-01 6.84820955e+01
 8.56779674e+00 4.79165851e-01 2.69396392e+03]
E = -498.9530547360239
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
number_of_s_exps = 4
number_of_p_exps = 3

exps = np.zeros((number_of_s_exps+number_of_p_exps,2))
#exps[:, 0] = decaying_nums(5)

# S
exps[0,0] = 20.0
exps[1,0] = 9.5045827955887916e+01
exps[2,0] = 4.4881042475048387e+00 
exps[3,0] = 3.9799528004692630e-01
             
# P          
exps[3,0] = 3.0108199280832128e+01
exps[4,0] = 6.1393781325590453e+00
exps[5,0] = 4.8929328703550412e-01

basis =  str(number_of_s_exps)+"s"+str(number_of_p_exps)+"p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc21115.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 24
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 18 14:59:58 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35677784.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 32000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 32000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 32000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  4.65654467851        1
[INPUT] 0    0    [1    /1   ]  454.907434496        1
[INPUT] 0    0    [1    /1   ]  0.497482266101       1
[INPUT] 0    0    [1    /1   ]  68.4820955272        1
[INPUT] 1    0    [1    /1   ]  8.56779673527        1
[INPUT] 1    0    [1    /1   ]  0.479165850991       1
[INPUT] 1    0    [1    /1   ]  2693.96392446        1

nuclear repulsion = 0
number of shells = 7
number of NR pGTOs = 13
number of NR cGTOs = 13
basis = {'Ar': [[0, [4.6565446785065525, 1.0]], [0, [454.9074344963591, 1.0]], [0, [0.4974822661014784, 1.0]], [0, [68.48209552724765, 1.0]], [1, [8.567796735265219, 1.0]], [1, [0.4791658509912628, 1.0]], [1, [2693.9639244578434, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [4.65654468]
bas 1, expnt(s) = [454.9074345]
bas 2, expnt(s) = [0.49748227]
bas 3, expnt(s) = [68.48209553]
bas 4, expnt(s) = [8.56779674]
bas 5, expnt(s) = [0.47916585]
bas 6, expnt(s) = [2693.96392446]
CPU time:       461.41
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  1  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]
 [ 0  1  1  1  0 36 37  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 4.65654468e+00 8.00871529e+00 4.54907434e+02 2.48861263e+02
 4.97482266e-01 1.49657411e+00 6.84820955e+01 6.01447612e+01
 8.56779674e+00 4.27632630e+01 4.79165851e-01 1.16303214e+00
 2.69396392e+03 5.66205537e+04]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.27794655336914
cond(S) = 5.020994856934055
E1 = -675.9079666657537  E_coul = 185.41815286396363
init E= -490.48981380179
    CPU time for initialize scf      7.28 sec, wall time      0.33 sec
  HOMO = -0.67892525196293  LUMO = 381.855292691921
  mo_energy =
[-1.17530585e+02 -1.30183520e+01 -7.56990413e+00 -7.56990413e+00
 -7.56990413e+00 -1.61611464e+00 -6.78925252e-01 -6.78925252e-01
 -6.78925252e-01  3.81855293e+02  5.80353893e+03  5.80353893e+03
  5.80353893e+03]
E1 = -699.2335460744711  E_coul = 200.28053869711616
cycle= 1 E= -498.953007377355  delta_E= -8.46  |g|= 0.227  |ddm|= 0.316
    CPU time for cycle= 1      0.32 sec, wall time      0.02 sec
diis-norm(errvec)=0.235802
diis-c [-0.05560263  1.        ]
  HOMO = -0.210122521893206  LUMO = 383.296062718071
  mo_energy =
[-1.16104212e+02 -1.19265311e+01 -6.53469290e+00 -6.53469290e+00
 -6.53469290e+00 -1.07106811e+00 -2.10122522e-01 -2.10122522e-01
 -2.10122522e-01  3.83296063e+02  5.80468236e+03  5.80468236e+03
  5.80468236e+03]
E1 = -699.2294634648335  E_coul = 200.27640873006686
cycle= 2 E= -498.953054734767  delta_E= -4.74e-05  |g|= 0.00105  |ddm|= 0.00137
    CPU time for cycle= 2      0.02 sec, wall time      0.01 sec
diis-norm(errvec)=0.00101041
diis-c [-5.07591317e-07 -3.04772959e-03  1.00304773e+00]
  HOMO = -0.210132490254319  LUMO = 383.294068649305
  mo_energy =
[-1.16105796e+02 -1.19266344e+01 -6.53480824e+00 -6.53480824e+00
 -6.53480824e+00 -1.07107692e+00 -2.10132490e-01 -2.10132490e-01
 -2.10132490e-01  3.83294069e+02  5.80467569e+03  5.80467569e+03
  5.80467569e+03]
E1 = -699.2294422502861  E_coul = 200.27638751426295
cycle= 3 E= -498.953054736023  delta_E= -1.26e-09  |g|= 2.86e-06  |ddm|= 6.58e-06
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=3.10118e-06
diis-c [-7.08757172e-13  3.20521019e-06 -3.44914556e-03  1.00344594e+00]
  HOMO = -0.210132501664037  LUMO = 383.294063748114
  mo_energy =
[-1.16105799e+02 -1.19266346e+01 -6.53480842e+00 -6.53480842e+00
 -6.53480842e+00 -1.07107693e+00 -2.10132502e-01 -2.10132502e-01
 -2.10132502e-01  3.83294064e+02  5.80467568e+03  5.80467568e+03
  5.80467568e+03]
E1 = -699.2294422007574  E_coul = 200.27638746473372
cycle= 4 E= -498.953054736024  delta_E= -5.68e-13  |g|= 6.34e-09  |ddm|= 1.44e-08
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
E1 = -699.2294422007574  E_coul = 200.27638746473372
  HOMO = -0.210132501610945  LUMO = 383.294063749228
  mo_energy =
[-1.16105799e+02 -1.19266346e+01 -6.53480842e+00 -6.53480842e+00
 -6.53480842e+00 -1.07107693e+00 -2.10132502e-01 -2.10132502e-01
 -2.10132502e-01  3.83294064e+02  5.80467568e+03  5.80467568e+03
  5.80467568e+03]
E1 = -699.2294422007986  E_coul = 200.27638746477473
Extra cycle  E= -498.953054736024  delta_E= -2.27e-13  |g|= 5.19e-11  |ddm|= 3.54e-11
    CPU time for scf_cycle      7.65 sec, wall time      0.39 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 5.020994856934055
E1 = -699.2294422007986  E_coul = 200.27638746477473
init E= -498.953054736024
    CPU time for initialize scf     15.07 sec, wall time      0.66 sec
  HOMO = -0.210132501610507  LUMO = 383.294063749218
  mo_energy =
[-1.16105799e+02 -1.19266346e+01 -6.53480842e+00 -6.53480842e+00
 -6.53480842e+00 -1.07107693e+00 -2.10132502e-01 -2.10132502e-01
 -2.10132502e-01  3.83294064e+02  5.80467568e+03  5.80467568e+03
  5.80467568e+03]
E1 = -699.2294422007982  E_coul = 200.27638746477461
cycle= 1 E= -498.953054736024  delta_E= 3.41e-13  |g|= 3.48e-12  |ddm|= 2.46e-13
    CPU time for cycle= 1      0.17 sec, wall time      0.02 sec
E1 = -699.2294422007982  E_coul = 200.27638746477461
  HOMO = -0.210132501611181  LUMO = 383.294063749218
  mo_energy =
[-1.16105799e+02 -1.19266346e+01 -6.53480842e+00 -6.53480842e+00
 -6.53480842e+00 -1.07107693e+00 -2.10132502e-01 -2.10132502e-01
 -2.10132502e-01  3.83294064e+02  5.80467568e+03  5.80467568e+03
  5.80467568e+03]
E1 = -699.2294422007983  E_coul = 200.2763874647748
Extra cycle  E= -498.953054736023  delta_E= 5.68e-14  |g|= 2.97e-12  |ddm|= 6.9e-15
    CPU time for scf_cycle     15.30 sec, wall time      0.73 sec
exp = [4.65654468e+00 4.54907434e+02 4.97482266e-01 6.84820955e+01
 8.56779674e+00 4.79165851e-01 2.69396392e+03]
grad_E = [-2.65392058e-03 -1.06158387e-03  1.25605226e+00  8.95216895e-03
  1.45176944e-02 -1.21813910e-01  6.12355401e-06]
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
number_of_s_exps = 4
number_of_p_exps = 3

exps = np.zeros((number_of_s_exps+number_of_p_exps,2))
#exps[:, 0] = decaying_nums(5)

# S
exps[0,0] = 20.0
exps[1,0] = 9.5045827955887916e+01
exps[2,0] = 4.4881042475048387e+00 
exps[3,0] = 3.9799528004692630e-01
             
# P          
exps[3,0] = 3.0108199280832128e+01
exps[4,0] = 6.1393781325590453e+00
exps[5,0] = 4.8929328703550412e-01

basis =  str(number_of_s_exps)+"s"+str(number_of_p_exps)+"p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc21115.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 24
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 18 15:00:02 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35677784.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 32000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 32000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 32000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  4.64595368176        1
[INPUT] 0    0    [1    /1   ]  451.433260432        1
[INPUT] 0    0    [1    /1   ]  0.451467415026       1
[INPUT] 0    0    [1    /1   ]  68.0157684866        1
[INPUT] 1    0    [1    /1   ]  8.57594131155        1
[INPUT] 1    0    [1    /1   ]  0.48540257585        1
[INPUT] 1    0    [1    /1   ]  2693.96394057        1

nuclear repulsion = 0
number of shells = 7
number of NR pGTOs = 13
number of NR cGTOs = 13
basis = {'Ar': [[0, [4.645953681756973, 1.0]], [0, [451.4332604321924, 1.0]], [0, [0.4514674150263265, 1.0]], [0, [68.0157684866068, 1.0]], [1, [8.575941311550755, 1.0]], [1, [0.48540257585027535, 1.0]], [1, [2693.9639405741946, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [4.64595368]
bas 1, expnt(s) = [451.43326043]
bas 2, expnt(s) = [0.45146742]
bas 3, expnt(s) = [68.01576849]
bas 4, expnt(s) = [8.57594131]
bas 5, expnt(s) = [0.48540258]
bas 6, expnt(s) = [2693.96394057]
CPU time:       487.17
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  1  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]
 [ 0  1  1  1  0 36 37  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 4.64595368e+00 7.99504994e+00 4.51433260e+02 2.47434463e+02
 4.51467415e-01 1.39150519e+00 6.80157685e+01 5.98373334e+01
 8.57594131e+00 4.28140826e+01 4.85402576e-01 1.18198506e+00
 2.69396394e+03 5.66205541e+04]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.298308522645527
cond(S) = 4.931488801624232
E1 = -675.8789443940608  E_coul = 185.2956975453517
init E= -490.583246848709
    CPU time for initialize scf      0.27 sec, wall time      0.03 sec
  HOMO = -0.675411364227607  LUMO = 377.531922401761
  mo_energy =
[-1.17545753e+02 -1.30236380e+01 -7.58809197e+00 -7.58809197e+00
 -7.58809197e+00 -1.62947045e+00 -6.75411364e-01 -6.75411364e-01
 -6.75411364e-01  3.77531922e+02  5.80351846e+03  5.80351846e+03
  5.80351846e+03]
E1 = -698.8178708960606  E_coul = 199.8188337693134
cycle= 1 E= -498.999037126747  delta_E= -8.42  |g|= 0.23  |ddm|= 0.307
    CPU time for cycle= 1      0.28 sec, wall time      0.01 sec
diis-norm(errvec)=0.236776
diis-c [-0.05606293  1.        ]
  HOMO = -0.216827850024774  LUMO = 378.934224426593
  mo_energy =
[-1.16154971e+02 -1.19524632e+01 -6.57519201e+00 -6.57519201e+00
 -6.57519201e+00 -1.10663291e+00 -2.16827850e-01 -2.16827850e-01
 -2.16827850e-01  3.78934224e+02  5.80459438e+03  5.80459438e+03
  5.80459438e+03]
E1 = -698.8136812266976  E_coul = 199.81459458544143
cycle= 2 E= -498.999086641256  delta_E= -4.95e-05  |g|= 0.00107  |ddm|= 0.0014
    CPU time for cycle= 2      0.04 sec, wall time      0.01 sec
diis-norm(errvec)=0.00101765
diis-c [-5.10708037e-07 -3.06926748e-03  1.00306927e+00]
  HOMO = -0.216838403708407  LUMO = 378.932198383698
  mo_energy =
[-1.16156592e+02 -1.19525695e+01 -6.57531172e+00 -6.57531172e+00
 -6.57531172e+00 -1.10664098e+00 -2.16838404e-01 -2.16838404e-01
 -2.16838404e-01  3.78932198e+02  5.80458759e+03  5.80458759e+03
  5.80458759e+03]
E1 = -698.8136594262755  E_coul = 199.81457278371053
cycle= 3 E= -498.999086642565  delta_E= -1.31e-09  |g|= 2.84e-06  |ddm|= 6.75e-06
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=3.05672e-06
diis-c [-6.43219214e-13  3.20457168e-06 -3.39347777e-03  1.00339027e+00]
  HOMO = -0.216838415648207  LUMO = 378.932193468073
  mo_energy =
[-1.16156595e+02 -1.19525696e+01 -6.57531191e+00 -6.57531191e+00
 -6.57531191e+00 -1.10664099e+00 -2.16838416e-01 -2.16838416e-01
 -2.16838416e-01  3.78932193e+02  5.80458757e+03  5.80458757e+03
  5.80458757e+03]
E1 = -698.8136593757474  E_coul = 199.8145727331817
cycle= 4 E= -498.999086642566  delta_E= -7.39e-13  |g|= 6.06e-09  |ddm|= 1.47e-08
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
E1 = -698.8136593757474  E_coul = 199.8145727331817
  HOMO = -0.216838415595788  LUMO = 378.932193469048
  mo_energy =
[-1.16156595e+02 -1.19525696e+01 -6.57531191e+00 -6.57531191e+00
 -6.57531191e+00 -1.10664099e+00 -2.16838416e-01 -2.16838416e-01
 -2.16838416e-01  3.78932193e+02  5.80458757e+03  5.80458757e+03
  5.80458757e+03]
E1 = -698.8136593757856  E_coul = 199.8145727332201
Extra cycle  E= -498.999086642566  delta_E= 1.71e-13  |g|= 5.01e-11  |ddm|= 3.37e-11
    CPU time for scf_cycle      0.62 sec, wall time      0.10 sec
exp = [4.64595368e+00 4.51433260e+02 4.51467415e-01 6.80157685e+01
 8.57594131e+00 4.85402576e-01 2.69396394e+03]
E = -498.99908664256554
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
number_of_s_exps = 4
number_of_p_exps = 3

exps = np.zeros((number_of_s_exps+number_of_p_exps,2))
#exps[:, 0] = decaying_nums(5)

# S
exps[0,0] = 20.0
exps[1,0] = 9.5045827955887916e+01
exps[2,0] = 4.4881042475048387e+00 
exps[3,0] = 3.9799528004692630e-01
             
# P          
exps[3,0] = 3.0108199280832128e+01
exps[4,0] = 6.1393781325590453e+00
exps[5,0] = 4.8929328703550412e-01

basis =  str(number_of_s_exps)+"s"+str(number_of_p_exps)+"p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc21115.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 24
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 18 15:00:03 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35677784.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 32000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 32000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 32000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  4.64595368176        1
[INPUT] 0    0    [1    /1   ]  451.433260432        1
[INPUT] 0    0    [1    /1   ]  0.451467415026       1
[INPUT] 0    0    [1    /1   ]  68.0157684866        1
[INPUT] 1    0    [1    /1   ]  8.57594131155        1
[INPUT] 1    0    [1    /1   ]  0.48540257585        1
[INPUT] 1    0    [1    /1   ]  2693.96394057        1

nuclear repulsion = 0
number of shells = 7
number of NR pGTOs = 13
number of NR cGTOs = 13
basis = {'Ar': [[0, [4.645953681756973, 1.0]], [0, [451.4332604321924, 1.0]], [0, [0.4514674150263265, 1.0]], [0, [68.0157684866068, 1.0]], [1, [8.575941311550755, 1.0]], [1, [0.48540257585027535, 1.0]], [1, [2693.9639405741946, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [4.64595368]
bas 1, expnt(s) = [451.43326043]
bas 2, expnt(s) = [0.45146742]
bas 3, expnt(s) = [68.01576849]
bas 4, expnt(s) = [8.57594131]
bas 5, expnt(s) = [0.48540258]
bas 6, expnt(s) = [2693.96394057]
CPU time:       488.07
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  1  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]
 [ 0  1  1  1  0 36 37  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 4.64595368e+00 7.99504994e+00 4.51433260e+02 2.47434463e+02
 4.51467415e-01 1.39150519e+00 6.80157685e+01 5.98373334e+01
 8.57594131e+00 4.28140826e+01 4.85402576e-01 1.18198506e+00
 2.69396394e+03 5.66205541e+04]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.298308522645527
cond(S) = 4.931488801624232
E1 = -675.8789443940608  E_coul = 185.2956975453517
init E= -490.583246848709
    CPU time for initialize scf      0.25 sec, wall time      0.03 sec
  HOMO = -0.675411364227607  LUMO = 377.531922401761
  mo_energy =
[-1.17545753e+02 -1.30236380e+01 -7.58809197e+00 -7.58809197e+00
 -7.58809197e+00 -1.62947045e+00 -6.75411364e-01 -6.75411364e-01
 -6.75411364e-01  3.77531922e+02  5.80351846e+03  5.80351846e+03
  5.80351846e+03]
E1 = -698.8178708960606  E_coul = 199.8188337693134
cycle= 1 E= -498.999037126747  delta_E= -8.42  |g|= 0.23  |ddm|= 0.307
    CPU time for cycle= 1      0.28 sec, wall time      0.01 sec
diis-norm(errvec)=0.236776
diis-c [-0.05606293  1.        ]
  HOMO = -0.216827850024774  LUMO = 378.934224426593
  mo_energy =
[-1.16154971e+02 -1.19524632e+01 -6.57519201e+00 -6.57519201e+00
 -6.57519201e+00 -1.10663291e+00 -2.16827850e-01 -2.16827850e-01
 -2.16827850e-01  3.78934224e+02  5.80459438e+03  5.80459438e+03
  5.80459438e+03]
E1 = -698.8136812266976  E_coul = 199.81459458544143
cycle= 2 E= -498.999086641256  delta_E= -4.95e-05  |g|= 0.00107  |ddm|= 0.0014
    CPU time for cycle= 2      0.04 sec, wall time      0.01 sec
diis-norm(errvec)=0.00101765
diis-c [-5.10708037e-07 -3.06926748e-03  1.00306927e+00]
  HOMO = -0.216838403708407  LUMO = 378.932198383698
  mo_energy =
[-1.16156592e+02 -1.19525695e+01 -6.57531172e+00 -6.57531172e+00
 -6.57531172e+00 -1.10664098e+00 -2.16838404e-01 -2.16838404e-01
 -2.16838404e-01  3.78932198e+02  5.80458759e+03  5.80458759e+03
  5.80458759e+03]
E1 = -698.8136594262755  E_coul = 199.81457278371053
cycle= 3 E= -498.999086642565  delta_E= -1.31e-09  |g|= 2.84e-06  |ddm|= 6.75e-06
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=3.05672e-06
diis-c [-6.43219214e-13  3.20457168e-06 -3.39347777e-03  1.00339027e+00]
  HOMO = -0.216838415648207  LUMO = 378.932193468073
  mo_energy =
[-1.16156595e+02 -1.19525696e+01 -6.57531191e+00 -6.57531191e+00
 -6.57531191e+00 -1.10664099e+00 -2.16838416e-01 -2.16838416e-01
 -2.16838416e-01  3.78932193e+02  5.80458757e+03  5.80458757e+03
  5.80458757e+03]
E1 = -698.8136593757474  E_coul = 199.8145727331817
cycle= 4 E= -498.999086642566  delta_E= -7.39e-13  |g|= 6.06e-09  |ddm|= 1.47e-08
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
E1 = -698.8136593757474  E_coul = 199.8145727331817
  HOMO = -0.216838415595788  LUMO = 378.932193469048
  mo_energy =
[-1.16156595e+02 -1.19525696e+01 -6.57531191e+00 -6.57531191e+00
 -6.57531191e+00 -1.10664099e+00 -2.16838416e-01 -2.16838416e-01
 -2.16838416e-01  3.78932193e+02  5.80458757e+03  5.80458757e+03
  5.80458757e+03]
E1 = -698.8136593757856  E_coul = 199.8145727332201
Extra cycle  E= -498.999086642566  delta_E= 1.71e-13  |g|= 5.01e-11  |ddm|= 3.37e-11
    CPU time for scf_cycle      0.61 sec, wall time      0.10 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 4.931488801624232
E1 = -698.8136593757856  E_coul = 199.8145727332201
init E= -498.999086642566
    CPU time for initialize scf      1.28 sec, wall time      0.05 sec
  HOMO = -0.216838415595561  LUMO = 378.932193469038
  mo_energy =
[-1.16156595e+02 -1.19525696e+01 -6.57531191e+00 -6.57531191e+00
 -6.57531191e+00 -1.10664099e+00 -2.16838416e-01 -2.16838416e-01
 -2.16838416e-01  3.78932193e+02  5.80458757e+03  5.80458757e+03
  5.80458757e+03]
E1 = -698.8136593757862  E_coul = 199.8145727332204
cycle= 1 E= -498.999086642566  delta_E= -2.27e-13  |g|= 3.67e-12  |ddm|= 2.38e-13
    CPU time for cycle= 1      0.22 sec, wall time      0.01 sec
E1 = -698.8136593757862  E_coul = 199.8145727332204
  HOMO = -0.216838415595486  LUMO = 378.932193469038
  mo_energy =
[-1.16156595e+02 -1.19525696e+01 -6.57531191e+00 -6.57531191e+00
 -6.57531191e+00 -1.10664099e+00 -2.16838416e-01 -2.16838416e-01
 -2.16838416e-01  3.78932193e+02  5.80458757e+03  5.80458757e+03
  5.80458757e+03]
E1 = -698.813659375786  E_coul = 199.81457273322047
Extra cycle  E= -498.999086642565  delta_E= 2.84e-13  |g|= 5.25e-12  |ddm|= 7e-15
    CPU time for scf_cycle      1.55 sec, wall time      0.12 sec
exp = [4.64595368e+00 4.51433260e+02 4.51467415e-01 6.80157685e+01
 8.57594131e+00 4.85402576e-01 2.69396394e+03]
grad_E = [-1.52949938e-02 -1.00744050e-03  7.54174580e-01  2.94570218e-03
  9.44476640e-03 -1.68896047e-02  6.14053939e-06]
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
number_of_s_exps = 4
number_of_p_exps = 3

exps = np.zeros((number_of_s_exps+number_of_p_exps,2))
#exps[:, 0] = decaying_nums(5)

# S
exps[0,0] = 20.0
exps[1,0] = 9.5045827955887916e+01
exps[2,0] = 4.4881042475048387e+00 
exps[3,0] = 3.9799528004692630e-01
             
# P          
exps[3,0] = 3.0108199280832128e+01
exps[4,0] = 6.1393781325590453e+00
exps[5,0] = 4.8929328703550412e-01

basis =  str(number_of_s_exps)+"s"+str(number_of_p_exps)+"p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc21115.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 24
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 18 15:00:06 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35677784.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 32000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 32000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 32000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  4.6591802638         1
[INPUT] 0    0    [1    /1   ]  456.443479119        1
[INPUT] 0    0    [1    /1   ]  0.386022210459       1
[INPUT] 0    0    [1    /1   ]  68.15790868          1
[INPUT] 1    0    [1    /1   ]  8.57414292004        1
[INPUT] 1    0    [1    /1   ]  0.48862745824        1
[INPUT] 1    0    [1    /1   ]  2693.96397565        1

nuclear repulsion = 0
number of shells = 7
number of NR pGTOs = 13
number of NR cGTOs = 13
basis = {'Ar': [[0, [4.6591802637965944, 1.0]], [0, [456.4434791190031, 1.0]], [0, [0.3860222104586744, 1.0]], [0, [68.15790868002593, 1.0]], [1, [8.574142920040456, 1.0]], [1, [0.4886274582402018, 1.0]], [1, [2693.963975646376, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [4.65918026]
bas 1, expnt(s) = [456.44347912]
bas 2, expnt(s) = [0.38602221]
bas 3, expnt(s) = [68.15790868]
bas 4, expnt(s) = [8.57414292]
bas 5, expnt(s) = [0.48862746]
bas 6, expnt(s) = [2693.96397565]
CPU time:       492.98
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  1  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]
 [ 0  1  1  1  0 36 37  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 4.65918026e+00 8.01211473e+00 4.56443479e+02 2.49491227e+02
 3.86022210e-01 1.23729781e+00 6.81579087e+01 5.99310955e+01
 8.57414292e+00 4.28028602e+01 4.88627458e-01 1.19180918e+00
 2.69396398e+03 5.66205551e+04]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.31324942402754
cond(S) = 4.772588372167894
E1 = -675.0911802054644  E_coul = 184.54330562697166
init E= -490.547874578493
    CPU time for initialize scf      0.21 sec, wall time      0.03 sec
  HOMO = -0.693572742512432  LUMO = 381.588168023839
  mo_energy =
[-1.17613218e+02 -1.30773390e+01 -7.65352140e+00 -7.65352140e+00
 -7.65352140e+00 -1.64067360e+00 -6.93572743e-01 -6.93572743e-01
 -6.93572743e-01  3.81588168e+02  5.80345887e+03  5.80345887e+03
  5.80345887e+03]
E1 = -697.8177563593224  E_coul = 198.79561779440343
cycle= 1 E= -499.022138564919  delta_E= -8.47  |g|= 0.231  |ddm|= 0.305
    CPU time for cycle= 1      0.23 sec, wall time      0.01 sec
diis-norm(errvec)=0.238271
diis-c [-0.05677292  1.        ]
  HOMO = -0.243048347821027  LUMO = 382.964087599599
  mo_energy =
[-1.16247633e+02 -1.20196286e+01 -6.65659994e+00 -6.65659994e+00
 -6.65659994e+00 -1.14707855e+00 -2.43048348e-01 -2.43048348e-01
 -2.43048348e-01  3.82964088e+02  5.80449038e+03  5.80449038e+03
  5.80449038e+03]
E1 = -697.8136228233923  E_coul = 198.79143465781053
cycle= 2 E= -499.022188165582  delta_E= -4.96e-05  |g|= 0.00106  |ddm|= 0.00137
    CPU time for cycle= 2      0.11 sec, wall time      0.01 sec
diis-norm(errvec)=0.00102581
diis-c [-5.13333898e-07 -3.09063258e-03  1.00309063e+00]
  HOMO = -0.243058735799651  LUMO = 382.962054168834
  mo_energy =
[-1.16249237e+02 -1.20197336e+01 -6.65671695e+00 -6.65671695e+00
 -6.65671695e+00 -1.14708523e+00 -2.43058736e-01 -2.43058736e-01
 -2.43058736e-01  3.82962054e+02  5.80448359e+03  5.80448359e+03
  5.80448359e+03]
E1 = -697.8136014328418  E_coul = 198.79141326597193
cycle= 3 E= -499.02218816687  delta_E= -1.29e-09  |g|= 2.85e-06  |ddm|= 6.53e-06
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=3.11169e-06
diis-c [-7.84766822e-13  3.31559734e-06 -3.42088129e-03  1.00341757e+00]
  HOMO = -0.243058746279493  LUMO = 382.962049283825
  mo_energy =
[-1.16249241e+02 -1.20197338e+01 -6.65671712e+00 -6.65671712e+00
 -6.65671712e+00 -1.14708524e+00 -2.43058746e-01 -2.43058746e-01
 -2.43058746e-01  3.82962049e+02  5.80448358e+03  5.80448358e+03
  5.80448358e+03]
E1 = -697.8136013840551  E_coul = 198.79141321718524
cycle= 4 E= -499.02218816687  delta_E= -5.68e-14  |g|= 6.5e-09  |ddm|= 1.41e-08
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
E1 = -697.8136013840551  E_coul = 198.79141321718524
  HOMO = -0.243058746225979  LUMO = 382.962049284949
  mo_energy =
[-1.16249241e+02 -1.20197338e+01 -6.65671712e+00 -6.65671712e+00
 -6.65671712e+00 -1.14708524e+00 -2.43058746e-01 -2.43058746e-01
 -2.43058746e-01  3.82962049e+02  5.80448358e+03  5.80448358e+03
  5.80448358e+03]
E1 = -697.8136013840963  E_coul = 198.7914132172267
Extra cycle  E= -499.02218816687  delta_E= 3.41e-13  |g|= 5.33e-11  |ddm|= 3.48e-11
    CPU time for scf_cycle      0.59 sec, wall time      0.08 sec
exp = [4.65918026e+00 4.56443479e+02 3.86022210e-01 6.81579087e+01
 8.57414292e+00 4.88627458e-01 2.69396398e+03]
E = -499.02218816686957
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
number_of_s_exps = 4
number_of_p_exps = 3

exps = np.zeros((number_of_s_exps+number_of_p_exps,2))
#exps[:, 0] = decaying_nums(5)

# S
exps[0,0] = 20.0
exps[1,0] = 9.5045827955887916e+01
exps[2,0] = 4.4881042475048387e+00 
exps[3,0] = 3.9799528004692630e-01
             
# P          
exps[3,0] = 3.0108199280832128e+01
exps[4,0] = 6.1393781325590453e+00
exps[5,0] = 4.8929328703550412e-01

basis =  str(number_of_s_exps)+"s"+str(number_of_p_exps)+"p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc21115.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 24
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 18 15:00:06 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35677784.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 32000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 32000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 32000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  4.6591802638         1
[INPUT] 0    0    [1    /1   ]  456.443479119        1
[INPUT] 0    0    [1    /1   ]  0.386022210459       1
[INPUT] 0    0    [1    /1   ]  68.15790868          1
[INPUT] 1    0    [1    /1   ]  8.57414292004        1
[INPUT] 1    0    [1    /1   ]  0.48862745824        1
[INPUT] 1    0    [1    /1   ]  2693.96397565        1

nuclear repulsion = 0
number of shells = 7
number of NR pGTOs = 13
number of NR cGTOs = 13
basis = {'Ar': [[0, [4.6591802637965944, 1.0]], [0, [456.4434791190031, 1.0]], [0, [0.3860222104586744, 1.0]], [0, [68.15790868002593, 1.0]], [1, [8.574142920040456, 1.0]], [1, [0.4886274582402018, 1.0]], [1, [2693.963975646376, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [4.65918026]
bas 1, expnt(s) = [456.44347912]
bas 2, expnt(s) = [0.38602221]
bas 3, expnt(s) = [68.15790868]
bas 4, expnt(s) = [8.57414292]
bas 5, expnt(s) = [0.48862746]
bas 6, expnt(s) = [2693.96397565]
CPU time:       493.74
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  1  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]
 [ 0  1  1  1  0 36 37  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 4.65918026e+00 8.01211473e+00 4.56443479e+02 2.49491227e+02
 3.86022210e-01 1.23729781e+00 6.81579087e+01 5.99310955e+01
 8.57414292e+00 4.28028602e+01 4.88627458e-01 1.19180918e+00
 2.69396398e+03 5.66205551e+04]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.31324942402754
cond(S) = 4.772588372167894
E1 = -675.0911802054644  E_coul = 184.54330562697166
init E= -490.547874578493
    CPU time for initialize scf      0.21 sec, wall time      0.03 sec
  HOMO = -0.693572742512432  LUMO = 381.588168023839
  mo_energy =
[-1.17613218e+02 -1.30773390e+01 -7.65352140e+00 -7.65352140e+00
 -7.65352140e+00 -1.64067360e+00 -6.93572743e-01 -6.93572743e-01
 -6.93572743e-01  3.81588168e+02  5.80345887e+03  5.80345887e+03
  5.80345887e+03]
E1 = -697.8177563593224  E_coul = 198.79561779440343
cycle= 1 E= -499.022138564919  delta_E= -8.47  |g|= 0.231  |ddm|= 0.305
    CPU time for cycle= 1      0.23 sec, wall time      0.01 sec
diis-norm(errvec)=0.238271
diis-c [-0.05677292  1.        ]
  HOMO = -0.243048347821027  LUMO = 382.964087599599
  mo_energy =
[-1.16247633e+02 -1.20196286e+01 -6.65659994e+00 -6.65659994e+00
 -6.65659994e+00 -1.14707855e+00 -2.43048348e-01 -2.43048348e-01
 -2.43048348e-01  3.82964088e+02  5.80449038e+03  5.80449038e+03
  5.80449038e+03]
E1 = -697.8136228233923  E_coul = 198.79143465781053
cycle= 2 E= -499.022188165582  delta_E= -4.96e-05  |g|= 0.00106  |ddm|= 0.00137
    CPU time for cycle= 2      0.11 sec, wall time      0.01 sec
diis-norm(errvec)=0.00102581
diis-c [-5.13333898e-07 -3.09063258e-03  1.00309063e+00]
  HOMO = -0.243058735799651  LUMO = 382.962054168834
  mo_energy =
[-1.16249237e+02 -1.20197336e+01 -6.65671695e+00 -6.65671695e+00
 -6.65671695e+00 -1.14708523e+00 -2.43058736e-01 -2.43058736e-01
 -2.43058736e-01  3.82962054e+02  5.80448359e+03  5.80448359e+03
  5.80448359e+03]
E1 = -697.8136014328418  E_coul = 198.79141326597193
cycle= 3 E= -499.02218816687  delta_E= -1.29e-09  |g|= 2.85e-06  |ddm|= 6.53e-06
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=3.11169e-06
diis-c [-7.84766822e-13  3.31559734e-06 -3.42088129e-03  1.00341757e+00]
  HOMO = -0.243058746279493  LUMO = 382.962049283825
  mo_energy =
[-1.16249241e+02 -1.20197338e+01 -6.65671712e+00 -6.65671712e+00
 -6.65671712e+00 -1.14708524e+00 -2.43058746e-01 -2.43058746e-01
 -2.43058746e-01  3.82962049e+02  5.80448358e+03  5.80448358e+03
  5.80448358e+03]
E1 = -697.8136013840551  E_coul = 198.79141321718524
cycle= 4 E= -499.02218816687  delta_E= -5.68e-14  |g|= 6.5e-09  |ddm|= 1.41e-08
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -697.8136013840551  E_coul = 198.79141321718524
  HOMO = -0.243058746225979  LUMO = 382.962049284949
  mo_energy =
[-1.16249241e+02 -1.20197338e+01 -6.65671712e+00 -6.65671712e+00
 -6.65671712e+00 -1.14708524e+00 -2.43058746e-01 -2.43058746e-01
 -2.43058746e-01  3.82962049e+02  5.80448358e+03  5.80448358e+03
  5.80448358e+03]
E1 = -697.8136013840963  E_coul = 198.7914132172267
Extra cycle  E= -499.02218816687  delta_E= 3.41e-13  |g|= 5.33e-11  |ddm|= 3.48e-11
    CPU time for scf_cycle      0.59 sec, wall time      0.09 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 4.772588372167894
E1 = -697.8136013840963  E_coul = 198.7914132172267
init E= -499.02218816687
    CPU time for initialize scf      1.31 sec, wall time      0.06 sec
  HOMO = -0.243058746226267  LUMO = 382.962049284938
  mo_energy =
[-1.16249241e+02 -1.20197338e+01 -6.65671712e+00 -6.65671712e+00
 -6.65671712e+00 -1.14708524e+00 -2.43058746e-01 -2.43058746e-01
 -2.43058746e-01  3.82962049e+02  5.80448358e+03  5.80448358e+03
  5.80448358e+03]
E1 = -697.8136013840964  E_coul = 198.79141321722665
cycle= 1 E= -499.02218816687  delta_E= -1.71e-13  |g|= 4.04e-12  |ddm|= 2.45e-13
    CPU time for cycle= 1      0.21 sec, wall time      0.01 sec
E1 = -697.8136013840964  E_coul = 198.79141321722665
  HOMO = -0.243058746226283  LUMO = 382.962049284938
  mo_energy =
[-1.16249241e+02 -1.20197338e+01 -6.65671712e+00 -6.65671712e+00
 -6.65671712e+00 -1.14708524e+00 -2.43058746e-01 -2.43058746e-01
 -2.43058746e-01  3.82962049e+02  5.80448358e+03  5.80448358e+03
  5.80448358e+03]
E1 = -697.8136013840967  E_coul = 198.7914132172268
Extra cycle  E= -499.02218816687  delta_E= -1.71e-13  |g|= 3.04e-12  |ddm|= 5.07e-15
    CPU time for scf_cycle      1.57 sec, wall time      0.12 sec
exp = [4.65918026e+00 4.56443479e+02 3.86022210e-01 6.81579087e+01
 8.57414292e+00 4.88627458e-01 2.69396398e+03]
grad_E = [-4.31151169e-03 -2.87207679e-05 -1.78655397e-01 -2.29201190e-03
 -1.12709477e-04 -7.19355364e-02  6.13958215e-06]
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
number_of_s_exps = 4
number_of_p_exps = 3

exps = np.zeros((number_of_s_exps+number_of_p_exps,2))
#exps[:, 0] = decaying_nums(5)

# S
exps[0,0] = 20.0
exps[1,0] = 9.5045827955887916e+01
exps[2,0] = 4.4881042475048387e+00 
exps[3,0] = 3.9799528004692630e-01
             
# P          
exps[3,0] = 3.0108199280832128e+01
exps[4,0] = 6.1393781325590453e+00
exps[5,0] = 4.8929328703550412e-01

basis =  str(number_of_s_exps)+"s"+str(number_of_p_exps)+"p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc21115.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 24
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 18 15:00:09 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35677784.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 32000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 32000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 32000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  4.66163554287        1
[INPUT] 0    0    [1    /1   ]  457.666042901        1
[INPUT] 0    0    [1    /1   ]  0.398250417927       1
[INPUT] 0    0    [1    /1   ]  68.3105226355        1
[INPUT] 1    0    [1    /1   ]  8.57153194083        1
[INPUT] 1    0    [1    /1   ]  0.488190183716       1
[INPUT] 1    0    [1    /1   ]  2693.96396876        1

nuclear repulsion = 0
number of shells = 7
number of NR pGTOs = 13
number of NR cGTOs = 13
basis = {'Ar': [[0, [4.661635542872044, 1.0]], [0, [457.66604290133165, 1.0]], [0, [0.39825041792724963, 1.0]], [0, [68.31052263546833, 1.0]], [1, [8.571531940832836, 1.0]], [1, [0.4881901837156913, 1.0]], [1, [2693.9639687610593, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [4.66163554]
bas 1, expnt(s) = [457.6660429]
bas 2, expnt(s) = [0.39825042]
bas 3, expnt(s) = [68.31052264]
bas 4, expnt(s) = [8.57153194]
bas 5, expnt(s) = [0.48819018]
bas 6, expnt(s) = [2693.96396876]
CPU time:       498.65
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  1  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]
 [ 0  1  1  1  0 36 37  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 4.66163554e+00 8.01528117e+00 4.57666043e+02 2.49992248e+02
 3.98250418e-01 1.26657877e+00 6.83105226e+01 6.00317122e+01
 8.57153194e+00 4.27865680e+01 4.88190184e-01 1.19047614e+00
 2.69396397e+03 5.66205549e+04]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.31223739887239
cond(S) = 4.790444382187446
E1 = -675.2841472360049  E_coul = 184.72690922545678
init E= -490.557238010548
    CPU time for initialize scf      7.29 sec, wall time      0.33 sec
  HOMO = -0.688276326540149  LUMO = 383.069326107123
  mo_energy =
[-1.17597321e+02 -1.30648050e+01 -7.63819853e+00 -7.63819853e+00
 -7.63819853e+00 -1.64028719e+00 -6.88276327e-01 -6.88276327e-01
 -6.88276327e-01  3.83069326e+02  5.80347615e+03  5.80347615e+03
  5.80347615e+03]
E1 = -698.0409182469884  E_coul = 199.01756178059233
cycle= 1 E= -499.023356466396  delta_E= -8.47  |g|= 0.23  |ddm|= 0.305
    CPU time for cycle= 1      0.23 sec, wall time      0.01 sec
diis-norm(errvec)=0.237926
diis-c [-0.05660858  1.        ]
  HOMO = -0.237155093108413  LUMO = 384.451666373517
  mo_energy =
[-1.16226173e+02 -1.20055816e+01 -6.63946314e+00 -6.63946314e+00
 -6.63946314e+00 -1.14131281e+00 -2.37155093e-01 -2.37155093e-01
 -2.37155093e-01  3.84451666e+02  5.80452284e+03  5.80452284e+03
  5.80452284e+03]
E1 = -698.0368166866236  E_coul = 199.01341126214288
cycle= 2 E= -499.023405424481  delta_E= -4.9e-05  |g|= 0.00106  |ddm|= 0.00136
    CPU time for cycle= 2      0.08 sec, wall time      0.01 sec
diis-norm(errvec)=0.00102342
diis-c [-5.12148402e-07 -3.08439996e-03  1.00308440e+00]
  HOMO = -0.237165369043499  LUMO = 384.44964263794
  mo_energy =
[-1.16227765e+02 -1.20056858e+01 -6.63957885e+00 -6.63957885e+00
 -6.63957885e+00 -1.14131969e+00 -2.37165369e-01 -2.37165369e-01
 -2.37165369e-01  3.84449643e+02  5.80451610e+03  5.80451610e+03
  5.80451610e+03]
E1 = -698.0367954771007  E_coul = 199.01339005134724
cycle= 3 E= -499.023405425753  delta_E= -1.27e-09  |g|= 2.85e-06  |ddm|= 6.48e-06
    CPU time for cycle= 3      0.02 sec, wall time      0.01 sec
diis-norm(errvec)=3.12237e-06
diis-c [-8.02476419e-13  3.31394571e-06 -3.43546524e-03  1.00343215e+00]
  HOMO = -0.237165379448883  LUMO = 384.449637761138
  mo_energy =
[-1.16227769e+02 -1.20056860e+01 -6.63957902e+00 -6.63957902e+00
 -6.63957902e+00 -1.14131970e+00 -2.37165379e-01 -2.37165379e-01
 -2.37165379e-01  3.84449638e+02  5.80451608e+03  5.80451608e+03
  5.80451608e+03]
E1 = -698.0367954286523  E_coul = 199.01339000289835
cycle= 4 E= -499.023405425754  delta_E= -5.68e-13  |g|= 6.56e-09  |ddm|= 1.4e-08
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
E1 = -698.0367954286523  E_coul = 199.01339000289835
  HOMO = -0.237165379392983  LUMO = 384.449637762305
  mo_energy =
[-1.16227769e+02 -1.20056860e+01 -6.63957902e+00 -6.63957902e+00
 -6.63957902e+00 -1.14131970e+00 -2.37165379e-01 -2.37165379e-01
 -2.37165379e-01  3.84449638e+02  5.80451608e+03  5.80451608e+03
  5.80451608e+03]
E1 = -698.0367954286936  E_coul = 199.0133900029402
Extra cycle  E= -499.023405425753  delta_E= 6.25e-13  |g|= 5.36e-11  |ddm|= 3.52e-11
    CPU time for scf_cycle      7.64 sec, wall time      0.39 sec
exp = [4.66163554e+00 4.57666043e+02 3.98250418e-01 6.83105226e+01
 8.57153194e+00 4.88190184e-01 2.69396397e+03]
E = -499.02340542575337
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
number_of_s_exps = 4
number_of_p_exps = 3

exps = np.zeros((number_of_s_exps+number_of_p_exps,2))
#exps[:, 0] = decaying_nums(5)

# S
exps[0,0] = 20.0
exps[1,0] = 9.5045827955887916e+01
exps[2,0] = 4.4881042475048387e+00 
exps[3,0] = 3.9799528004692630e-01
             
# P          
exps[3,0] = 3.0108199280832128e+01
exps[4,0] = 6.1393781325590453e+00
exps[5,0] = 4.8929328703550412e-01

basis =  str(number_of_s_exps)+"s"+str(number_of_p_exps)+"p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc21115.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 24
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 18 15:00:09 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35677784.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 32000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 32000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 32000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  4.66163554287        1
[INPUT] 0    0    [1    /1   ]  457.666042901        1
[INPUT] 0    0    [1    /1   ]  0.398250417927       1
[INPUT] 0    0    [1    /1   ]  68.3105226355        1
[INPUT] 1    0    [1    /1   ]  8.57153194083        1
[INPUT] 1    0    [1    /1   ]  0.488190183716       1
[INPUT] 1    0    [1    /1   ]  2693.96396876        1

nuclear repulsion = 0
number of shells = 7
number of NR pGTOs = 13
number of NR cGTOs = 13
basis = {'Ar': [[0, [4.661635542872044, 1.0]], [0, [457.66604290133165, 1.0]], [0, [0.39825041792724963, 1.0]], [0, [68.31052263546833, 1.0]], [1, [8.571531940832836, 1.0]], [1, [0.4881901837156913, 1.0]], [1, [2693.9639687610593, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [4.66163554]
bas 1, expnt(s) = [457.6660429]
bas 2, expnt(s) = [0.39825042]
bas 3, expnt(s) = [68.31052264]
bas 4, expnt(s) = [8.57153194]
bas 5, expnt(s) = [0.48819018]
bas 6, expnt(s) = [2693.96396876]
CPU time:       506.47
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  1  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]
 [ 0  1  1  1  0 36 37  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 4.66163554e+00 8.01528117e+00 4.57666043e+02 2.49992248e+02
 3.98250418e-01 1.26657877e+00 6.83105226e+01 6.00317122e+01
 8.57153194e+00 4.27865680e+01 4.88190184e-01 1.19047614e+00
 2.69396397e+03 5.66205549e+04]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.31223739887239
cond(S) = 4.790444382187446
E1 = -675.2841472360049  E_coul = 184.72690922545678
init E= -490.557238010548
    CPU time for initialize scf      7.46 sec, wall time      0.34 sec
  HOMO = -0.688276326540149  LUMO = 383.069326107123
  mo_energy =
[-1.17597321e+02 -1.30648050e+01 -7.63819853e+00 -7.63819853e+00
 -7.63819853e+00 -1.64028719e+00 -6.88276327e-01 -6.88276327e-01
 -6.88276327e-01  3.83069326e+02  5.80347615e+03  5.80347615e+03
  5.80347615e+03]
E1 = -698.0409182469884  E_coul = 199.01756178059233
cycle= 1 E= -499.023356466396  delta_E= -8.47  |g|= 0.23  |ddm|= 0.305
    CPU time for cycle= 1      0.23 sec, wall time      0.01 sec
diis-norm(errvec)=0.237926
diis-c [-0.05660858  1.        ]
  HOMO = -0.237155093108413  LUMO = 384.451666373517
  mo_energy =
[-1.16226173e+02 -1.20055816e+01 -6.63946314e+00 -6.63946314e+00
 -6.63946314e+00 -1.14131281e+00 -2.37155093e-01 -2.37155093e-01
 -2.37155093e-01  3.84451666e+02  5.80452284e+03  5.80452284e+03
  5.80452284e+03]
E1 = -698.0368166866236  E_coul = 199.01341126214288
cycle= 2 E= -499.023405424481  delta_E= -4.9e-05  |g|= 0.00106  |ddm|= 0.00136
    CPU time for cycle= 2      0.07 sec, wall time      0.01 sec
diis-norm(errvec)=0.00102342
diis-c [-5.12148402e-07 -3.08439996e-03  1.00308440e+00]
  HOMO = -0.237165369043499  LUMO = 384.44964263794
  mo_energy =
[-1.16227765e+02 -1.20056858e+01 -6.63957885e+00 -6.63957885e+00
 -6.63957885e+00 -1.14131969e+00 -2.37165369e-01 -2.37165369e-01
 -2.37165369e-01  3.84449643e+02  5.80451610e+03  5.80451610e+03
  5.80451610e+03]
E1 = -698.0367954771007  E_coul = 199.01339005134724
cycle= 3 E= -499.023405425753  delta_E= -1.27e-09  |g|= 2.85e-06  |ddm|= 6.48e-06
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=3.12237e-06
diis-c [-8.02476419e-13  3.31394571e-06 -3.43546524e-03  1.00343215e+00]
  HOMO = -0.237165379448883  LUMO = 384.449637761138
  mo_energy =
[-1.16227769e+02 -1.20056860e+01 -6.63957902e+00 -6.63957902e+00
 -6.63957902e+00 -1.14131970e+00 -2.37165379e-01 -2.37165379e-01
 -2.37165379e-01  3.84449638e+02  5.80451608e+03  5.80451608e+03
  5.80451608e+03]
E1 = -698.0367954286523  E_coul = 199.01339000289835
cycle= 4 E= -499.023405425754  delta_E= -5.68e-13  |g|= 6.56e-09  |ddm|= 1.4e-08
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
E1 = -698.0367954286523  E_coul = 199.01339000289835
  HOMO = -0.237165379392983  LUMO = 384.449637762305
  mo_energy =
[-1.16227769e+02 -1.20056860e+01 -6.63957902e+00 -6.63957902e+00
 -6.63957902e+00 -1.14131970e+00 -2.37165379e-01 -2.37165379e-01
 -2.37165379e-01  3.84449638e+02  5.80451608e+03  5.80451608e+03
  5.80451608e+03]
E1 = -698.0367954286936  E_coul = 199.0133900029402
Extra cycle  E= -499.023405425753  delta_E= 6.25e-13  |g|= 5.36e-11  |ddm|= 3.52e-11
    CPU time for scf_cycle      7.80 sec, wall time      0.40 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 4.790444382187446
E1 = -698.0367954286936  E_coul = 199.0133900029402
init E= -499.023405425753
    CPU time for initialize scf     15.31 sec, wall time      0.67 sec
  HOMO = -0.237165379394515  LUMO = 384.449637762295
  mo_energy =
[-1.16227769e+02 -1.20056860e+01 -6.63957902e+00 -6.63957902e+00
 -6.63957902e+00 -1.14131970e+00 -2.37165379e-01 -2.37165379e-01
 -2.37165379e-01  3.84449638e+02  5.80451608e+03  5.80451608e+03
  5.80451608e+03]
E1 = -698.0367954286936  E_coul = 199.01339000294038
cycle= 1 E= -499.023405425753  delta_E= 1.14e-13  |g|= 4.96e-12  |ddm|= 2.48e-13
    CPU time for cycle= 1      0.10 sec, wall time      0.01 sec
E1 = -698.0367954286936  E_coul = 199.01339000294038
  HOMO = -0.237165379394631  LUMO = 384.449637762295
  mo_energy =
[-1.16227769e+02 -1.20056860e+01 -6.63957902e+00 -6.63957902e+00
 -6.63957902e+00 -1.14131970e+00 -2.37165379e-01 -2.37165379e-01
 -2.37165379e-01  3.84449638e+02  5.80451608e+03  5.80451608e+03
  5.80451608e+03]
E1 = -698.0367954286935  E_coul = 199.01339000294027
Extra cycle  E= -499.023405425753  delta_E=    0  |g|= 3.76e-12  |ddm|= 4.61e-15
    CPU time for scf_cycle     15.48 sec, wall time      0.74 sec
exp = [4.66163554e+00 4.57666043e+02 3.98250418e-01 6.83105226e+01
 8.57153194e+00 4.88190184e-01 2.69396397e+03]
grad_E = [-3.13489348e-03 -3.25272975e-05  1.45783262e-02 -3.97919411e-04
 -2.86613702e-04 -5.00676478e-02  6.13472383e-06]
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
number_of_s_exps = 4
number_of_p_exps = 3

exps = np.zeros((number_of_s_exps+number_of_p_exps,2))
#exps[:, 0] = decaying_nums(5)

# S
exps[0,0] = 20.0
exps[1,0] = 9.5045827955887916e+01
exps[2,0] = 4.4881042475048387e+00 
exps[3,0] = 3.9799528004692630e-01
             
# P          
exps[3,0] = 3.0108199280832128e+01
exps[4,0] = 6.1393781325590453e+00
exps[5,0] = 4.8929328703550412e-01

basis =  str(number_of_s_exps)+"s"+str(number_of_p_exps)+"p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc21115.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 24
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 18 15:00:13 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35677784.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 32000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 32000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 32000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  4.6639443263         1
[INPUT] 0    0    [1    /1   ]  458.009210004        1
[INPUT] 0    0    [1    /1   ]  0.397325807993       1
[INPUT] 0    0    [1    /1   ]  68.3468697329        1
[INPUT] 1    0    [1    /1   ]  8.57226332937        1
[INPUT] 1    0    [1    /1   ]  0.4889136807         1
[INPUT] 1    0    [1    /1   ]  2693.9639678         1

nuclear repulsion = 0
number of shells = 7
number of NR pGTOs = 13
number of NR cGTOs = 13
basis = {'Ar': [[0, [4.663944326295889, 1.0]], [0, [458.0092100040999, 1.0]], [0, [0.3973258079926171, 1.0]], [0, [68.34686973294363, 1.0]], [1, [8.572263329374948, 1.0]], [1, [0.488913680700474, 1.0]], [1, [2693.963967803285, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [4.66394433]
bas 1, expnt(s) = [458.00921]
bas 2, expnt(s) = [0.39732581]
bas 3, expnt(s) = [68.34686973]
bas 4, expnt(s) = [8.57226333]
bas 5, expnt(s) = [0.48891368]
bas 6, expnt(s) = [2693.9639678]
CPU time:       532.55
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  1  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]
 [ 0  1  1  1  0 36 37  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 4.66394433e+00 8.01825830e+00 4.58009210e+02 2.50132822e+02
 3.97325808e-01 1.26437269e+00 6.83468697e+01 6.00556671e+01
 8.57226333e+00 4.27911317e+01 4.88913681e-01 1.19268190e+00
 2.69396397e+03 5.66205548e+04]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.311414539661435
cond(S) = 4.787581713891211
E1 = -675.303162142998  E_coul = 184.7448953458474
init E= -490.558266797151
    CPU time for initialize scf      0.26 sec, wall time      0.03 sec
  HOMO = -0.687810948492661  LUMO = 383.456466266705
  mo_energy =
[-1.17594836e+02 -1.30632375e+01 -7.63729495e+00 -7.63729495e+00
 -7.63729495e+00 -1.63973689e+00 -6.87810948e-01 -6.87810948e-01
 -6.87810948e-01  3.83456466e+02  5.80347913e+03  5.80347913e+03
  5.80347913e+03]
E1 = -698.0740663100297  E_coul = 199.05065343130087
cycle= 1 E= -499.023412878729  delta_E= -8.47  |g|= 0.23  |ddm|= 0.305
    CPU time for cycle= 1      0.25 sec, wall time      0.01 sec
diis-norm(errvec)=0.237865
diis-c [-0.05657996  1.        ]
  HOMO = -0.235943383861922  LUMO = 384.840677613213
  mo_energy =
[-1.16222022e+02 -1.20030124e+01 -6.63767160e+00 -6.63767160e+00
 -6.63767160e+00 -1.14052487e+00 -2.35943384e-01 -2.35943384e-01
 -2.35943384e-01  3.84840678e+02  5.80452934e+03  5.80452934e+03
  5.80452934e+03]
E1 = -698.069973813617  E_coul = 199.0465121226202
cycle= 2 E= -499.023461690997  delta_E= -4.88e-05  |g|= 0.00106  |ddm|= 0.00135
    CPU time for cycle= 2      0.08 sec, wall time      0.01 sec
diis-norm(errvec)=0.00102277
diis-c [-5.11928205e-07 -3.08199976e-03  1.00308200e+00]
  HOMO = -0.235953660383679  LUMO = 384.838656440583
  mo_energy =
[-1.16223611e+02 -1.20031164e+01 -6.63778695e+00 -6.63778695e+00
 -6.63778695e+00 -1.14053172e+00 -2.35953660e-01 -2.35953660e-01
 -2.35953660e-01  3.84838656e+02  5.80452261e+03  5.80452261e+03
  5.80452261e+03]
E1 = -698.069952656421  E_coul = 199.04649096415656
cycle= 3 E= -499.023461692265  delta_E= -1.27e-09  |g|= 2.85e-06  |ddm|= 6.46e-06
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=3.12763e-06
diis-c [-8.10290035e-13  3.31912256e-06 -3.44216241e-03  1.00343884e+00]
  HOMO = -0.235953670771712  LUMO = 384.838651563734
  mo_energy =
[-1.16223615e+02 -1.20031166e+01 -6.63778711e+00 -6.63778711e+00
 -6.63778711e+00 -1.14053173e+00 -2.35953671e-01 -2.35953671e-01
 -2.35953671e-01  3.84838652e+02  5.80452259e+03  5.80452259e+03
  5.80452259e+03]
E1 = -698.0699526080498  E_coul = 199.04649091578466
cycle= 4 E= -499.023461692265  delta_E= -6.25e-13  |g|= 6.58e-09  |ddm|= 1.4e-08
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
E1 = -698.0699526080498  E_coul = 199.04649091578466
  HOMO = -0.235953670716833  LUMO = 384.838651564915
  mo_energy =
[-1.16223615e+02 -1.20031166e+01 -6.63778711e+00 -6.63778711e+00
 -6.63778711e+00 -1.14053173e+00 -2.35953671e-01 -2.35953671e-01
 -2.35953671e-01  3.84838652e+02  5.80452259e+03  5.80452259e+03
  5.80452259e+03]
E1 = -698.0699526080916  E_coul = 199.04649091582704
Extra cycle  E= -499.023461692265  delta_E= 5.12e-13  |g|= 5.37e-11  |ddm|= 3.53e-11
    CPU time for scf_cycle      0.62 sec, wall time      0.09 sec
exp = [4.66394433e+00 4.58009210e+02 3.97325808e-01 6.83468697e+01
 8.57226333e+00 4.88913681e-01 2.69396397e+03]
E = -499.0234616922646
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
number_of_s_exps = 4
number_of_p_exps = 3

exps = np.zeros((number_of_s_exps+number_of_p_exps,2))
#exps[:, 0] = decaying_nums(5)

# S
exps[0,0] = 20.0
exps[1,0] = 9.5045827955887916e+01
exps[2,0] = 4.4881042475048387e+00 
exps[3,0] = 3.9799528004692630e-01
             
# P          
exps[3,0] = 3.0108199280832128e+01
exps[4,0] = 6.1393781325590453e+00
exps[5,0] = 4.8929328703550412e-01

basis =  str(number_of_s_exps)+"s"+str(number_of_p_exps)+"p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc21115.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 24
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 18 15:00:14 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35677784.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 32000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 32000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 32000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  4.6639443263         1
[INPUT] 0    0    [1    /1   ]  458.009210004        1
[INPUT] 0    0    [1    /1   ]  0.397325807993       1
[INPUT] 0    0    [1    /1   ]  68.3468697329        1
[INPUT] 1    0    [1    /1   ]  8.57226332937        1
[INPUT] 1    0    [1    /1   ]  0.4889136807         1
[INPUT] 1    0    [1    /1   ]  2693.9639678         1

nuclear repulsion = 0
number of shells = 7
number of NR pGTOs = 13
number of NR cGTOs = 13
basis = {'Ar': [[0, [4.663944326295889, 1.0]], [0, [458.0092100040999, 1.0]], [0, [0.3973258079926171, 1.0]], [0, [68.34686973294363, 1.0]], [1, [8.572263329374948, 1.0]], [1, [0.488913680700474, 1.0]], [1, [2693.963967803285, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [4.66394433]
bas 1, expnt(s) = [458.00921]
bas 2, expnt(s) = [0.39732581]
bas 3, expnt(s) = [68.34686973]
bas 4, expnt(s) = [8.57226333]
bas 5, expnt(s) = [0.48891368]
bas 6, expnt(s) = [2693.9639678]
CPU time:       533.49
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  1  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]
 [ 0  1  1  1  0 36 37  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 4.66394433e+00 8.01825830e+00 4.58009210e+02 2.50132822e+02
 3.97325808e-01 1.26437269e+00 6.83468697e+01 6.00556671e+01
 8.57226333e+00 4.27911317e+01 4.88913681e-01 1.19268190e+00
 2.69396397e+03 5.66205548e+04]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.311414539661435
cond(S) = 4.787581713891211
E1 = -675.303162142998  E_coul = 184.7448953458474
init E= -490.558266797151
    CPU time for initialize scf      0.26 sec, wall time      0.03 sec
  HOMO = -0.687810948492661  LUMO = 383.456466266705
  mo_energy =
[-1.17594836e+02 -1.30632375e+01 -7.63729495e+00 -7.63729495e+00
 -7.63729495e+00 -1.63973689e+00 -6.87810948e-01 -6.87810948e-01
 -6.87810948e-01  3.83456466e+02  5.80347913e+03  5.80347913e+03
  5.80347913e+03]
E1 = -698.0740663100297  E_coul = 199.05065343130087
cycle= 1 E= -499.023412878729  delta_E= -8.47  |g|= 0.23  |ddm|= 0.305
    CPU time for cycle= 1      0.29 sec, wall time      0.01 sec
diis-norm(errvec)=0.237865
diis-c [-0.05657996  1.        ]
  HOMO = -0.235943383861922  LUMO = 384.840677613213
  mo_energy =
[-1.16222022e+02 -1.20030124e+01 -6.63767160e+00 -6.63767160e+00
 -6.63767160e+00 -1.14052487e+00 -2.35943384e-01 -2.35943384e-01
 -2.35943384e-01  3.84840678e+02  5.80452934e+03  5.80452934e+03
  5.80452934e+03]
E1 = -698.069973813617  E_coul = 199.0465121226202
cycle= 2 E= -499.023461690997  delta_E= -4.88e-05  |g|= 0.00106  |ddm|= 0.00135
    CPU time for cycle= 2      0.03 sec, wall time      0.01 sec
diis-norm(errvec)=0.00102277
diis-c [-5.11928205e-07 -3.08199976e-03  1.00308200e+00]
  HOMO = -0.235953660383679  LUMO = 384.838656440583
  mo_energy =
[-1.16223611e+02 -1.20031164e+01 -6.63778695e+00 -6.63778695e+00
 -6.63778695e+00 -1.14053172e+00 -2.35953660e-01 -2.35953660e-01
 -2.35953660e-01  3.84838656e+02  5.80452261e+03  5.80452261e+03
  5.80452261e+03]
E1 = -698.069952656421  E_coul = 199.04649096415656
cycle= 3 E= -499.023461692265  delta_E= -1.27e-09  |g|= 2.85e-06  |ddm|= 6.46e-06
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=3.12763e-06
diis-c [-8.10290035e-13  3.31912256e-06 -3.44216241e-03  1.00343884e+00]
  HOMO = -0.235953670771712  LUMO = 384.838651563734
  mo_energy =
[-1.16223615e+02 -1.20031166e+01 -6.63778711e+00 -6.63778711e+00
 -6.63778711e+00 -1.14053173e+00 -2.35953671e-01 -2.35953671e-01
 -2.35953671e-01  3.84838652e+02  5.80452259e+03  5.80452259e+03
  5.80452259e+03]
E1 = -698.0699526080498  E_coul = 199.04649091578466
cycle= 4 E= -499.023461692265  delta_E= -6.25e-13  |g|= 6.58e-09  |ddm|= 1.4e-08
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
E1 = -698.0699526080498  E_coul = 199.04649091578466
  HOMO = -0.235953670716833  LUMO = 384.838651564915
  mo_energy =
[-1.16223615e+02 -1.20031166e+01 -6.63778711e+00 -6.63778711e+00
 -6.63778711e+00 -1.14053173e+00 -2.35953671e-01 -2.35953671e-01
 -2.35953671e-01  3.84838652e+02  5.80452259e+03  5.80452259e+03
  5.80452259e+03]
E1 = -698.0699526080916  E_coul = 199.04649091582704
Extra cycle  E= -499.023461692265  delta_E= 5.12e-13  |g|= 5.37e-11  |ddm|= 3.53e-11
    CPU time for scf_cycle      0.61 sec, wall time      0.09 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 4.787581713891211
E1 = -698.0699526080916  E_coul = 199.04649091582704
init E= -499.023461692265
    CPU time for initialize scf      1.40 sec, wall time      0.06 sec
  HOMO = -0.235953670716683  LUMO = 384.838651564905
  mo_energy =
[-1.16223615e+02 -1.20031166e+01 -6.63778711e+00 -6.63778711e+00
 -6.63778711e+00 -1.14053173e+00 -2.35953671e-01 -2.35953671e-01
 -2.35953671e-01  3.84838652e+02  5.80452259e+03  5.80452259e+03
  5.80452259e+03]
E1 = -698.0699526080919  E_coul = 199.04649091582726
cycle= 1 E= -499.023461692265  delta_E=    0  |g|= 3.16e-12  |ddm|= 2.48e-13
    CPU time for cycle= 1      0.21 sec, wall time      0.01 sec
E1 = -698.0699526080919  E_coul = 199.04649091582726
  HOMO = -0.235953670716227  LUMO = 384.838651564905
  mo_energy =
[-1.16223615e+02 -1.20031166e+01 -6.63778711e+00 -6.63778711e+00
 -6.63778711e+00 -1.14053173e+00 -2.35953671e-01 -2.35953671e-01
 -2.35953671e-01  3.84838652e+02  5.80452259e+03  5.80452259e+03
  5.80452259e+03]
E1 = -698.0699526080921  E_coul = 199.0464909158273
Extra cycle  E= -499.023461692265  delta_E= -1.71e-13  |g|= 3.1e-12  |ddm|= 5.63e-15
    CPU time for scf_cycle      1.67 sec, wall time      0.13 sec
exp = [4.66394433e+00 4.58009210e+02 3.97325808e-01 6.83468697e+01
 8.57226333e+00 4.88913681e-01 2.69396397e+03]
grad_E = [-8.24417703e-04 -2.15626520e-05  1.69908618e-03  2.95823307e-07
 -2.12526843e-04 -2.58960665e-02  6.13607301e-06]
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
number_of_s_exps = 4
number_of_p_exps = 3

exps = np.zeros((number_of_s_exps+number_of_p_exps,2))
#exps[:, 0] = decaying_nums(5)

# S
exps[0,0] = 20.0
exps[1,0] = 9.5045827955887916e+01
exps[2,0] = 4.4881042475048387e+00 
exps[3,0] = 3.9799528004692630e-01
             
# P          
exps[3,0] = 3.0108199280832128e+01
exps[4,0] = 6.1393781325590453e+00
exps[5,0] = 4.8929328703550412e-01

basis =  str(number_of_s_exps)+"s"+str(number_of_p_exps)+"p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc21115.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 24
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 18 15:00:17 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35677784.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 32000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 32000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 32000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  4.6648885719         1
[INPUT] 0    0    [1    /1   ]  458.20967084         1
[INPUT] 0    0    [1    /1   ]  0.39703473019        1
[INPUT] 0    0    [1    /1   ]  68.3621782554        1
[INPUT] 1    0    [1    /1   ]  8.57312163146        1
[INPUT] 1    0    [1    /1   ]  0.489553532541       1
[INPUT] 1    0    [1    /1   ]  2693.96396662        1

nuclear repulsion = 0
number of shells = 7
number of NR pGTOs = 13
number of NR cGTOs = 13
basis = {'Ar': [[0, [4.664888571897592, 1.0]], [0, [458.2096708404895, 1.0]], [0, [0.39703473018955404, 1.0]], [0, [68.36217825540122, 1.0]], [1, [8.57312163145881, 1.0]], [1, [0.4895535325405237, 1.0]], [1, [2693.9639666174803, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [4.66488857]
bas 1, expnt(s) = [458.20967084]
bas 2, expnt(s) = [0.39703473]
bas 3, expnt(s) = [68.36217826]
bas 4, expnt(s) = [8.57312163]
bas 5, expnt(s) = [0.48955353]
bas 6, expnt(s) = [2693.96396662]
CPU time:       538.62
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  1  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]
 [ 0  1  1  1  0 36 37  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 4.66488857e+00 8.01947578e+00 4.58209671e+02 2.50214926e+02
 3.97034730e-01 1.26367792e+00 6.83621783e+01 6.00657554e+01
 8.57312163e+00 4.27964873e+01 4.89553533e-01 1.19463333e+00
 2.69396397e+03 5.66205548e+04]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.310625111344372
cond(S) = 4.786161198378413
E1 = -675.327451433289  E_coul = 184.76758396061075
init E= -490.559867472678
    CPU time for initialize scf      6.85 sec, wall time      0.31 sec
  HOMO = -0.687169754386311  LUMO = 383.663759968461
  mo_energy =
[-1.17592206e+02 -1.30613235e+01 -7.63594072e+00 -7.63594072e+00
 -7.63594072e+00 -1.63915794e+00 -6.87169754e-01 -6.87169754e-01
 -6.87169754e-01  3.83663760e+02  5.80348218e+03  5.80348218e+03
  5.80348218e+03]
E1 = -698.1101095488978  E_coul = 199.08668472866353
cycle= 1 E= -499.023424820234  delta_E= -8.46  |g|= 0.23  |ddm|= 0.305
    CPU time for cycle= 1      0.22 sec, wall time      0.01 sec
diis-norm(errvec)=0.237898
diis-c [-0.05659562  1.        ]
  HOMO = -0.234610618081296  LUMO = 385.049180485424
  mo_energy =
[-1.16218227e+02 -1.20002399e+01 -6.63551926e+00 -6.63551926e+00
 -6.63551926e+00 -1.13953811e+00 -2.34610618e-01 -2.34610618e-01
 -2.34610618e-01  3.85049180e+02  5.80453404e+03  5.80453404e+03
  5.80453404e+03]
E1 = -698.1060201317232  E_coul = 199.08254653748833
cycle= 2 E= -499.023473594235  delta_E= -4.88e-05  |g|= 0.00106  |ddm|= 0.00135
    CPU time for cycle= 2      0.12 sec, wall time      0.01 sec
diis-norm(errvec)=0.00102297
diis-c [-5.12094036e-07 -3.08228436e-03  1.00308228e+00]
  HOMO = -0.234620909008064  LUMO = 385.047159601892
  mo_energy =
[-1.16219815e+02 -1.20003438e+01 -6.63563445e+00 -6.63563445e+00
 -6.63563445e+00 -1.13954495e+00 -2.34620909e-01 -2.34620909e-01
 -2.34620909e-01  3.85047160e+02  5.80452731e+03  5.80452731e+03
  5.80452731e+03]
E1 = -698.105998993886  E_coul = 199.08252539838412
cycle= 3 E= -499.023473595502  delta_E= -1.27e-09  |g|= 2.85e-06  |ddm|= 6.46e-06
    CPU time for cycle= 3      0.02 sec, wall time      0.01 sec
diis-norm(errvec)=3.13077e-06
diis-c [-8.15734516e-13  3.32222496e-06 -3.44436289e-03  1.00344104e+00]
  HOMO = -0.234620919390519  LUMO = 385.047154725726
  mo_energy =
[-1.16219819e+02 -1.20003440e+01 -6.63563462e+00 -6.63563462e+00
 -6.63563462e+00 -1.13954496e+00 -2.34620919e-01 -2.34620919e-01
 -2.34620919e-01  3.85047155e+02  5.80452729e+03  5.80452729e+03
  5.80452729e+03]
E1 = -698.1059989455723  E_coul = 199.0825253500713
cycle= 4 E= -499.023473595501  delta_E= 9.09e-13  |g|= 6.6e-09  |ddm|= 1.4e-08
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
E1 = -698.1059989455723  E_coul = 199.0825253500713
  HOMO = -0.23462091933595  LUMO = 385.047154726917
  mo_energy =
[-1.16219819e+02 -1.20003440e+01 -6.63563461e+00 -6.63563461e+00
 -6.63563461e+00 -1.13954496e+00 -2.34620919e-01 -2.34620919e-01
 -2.34620919e-01  3.85047155e+02  5.80452729e+03  5.80452729e+03
  5.80452729e+03]
E1 = -698.1059989456148  E_coul = 199.0825253501137
Extra cycle  E= -499.023473595501  delta_E= -1.14e-13  |g|= 5.38e-11  |ddm|= 3.54e-11
    CPU time for scf_cycle      7.22 sec, wall time      0.37 sec
exp = [4.66488857e+00 4.58209671e+02 3.97034730e-01 6.83621783e+01
 8.57312163e+00 4.89553533e-01 2.69396397e+03]
E = -499.0234735955011
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
number_of_s_exps = 4
number_of_p_exps = 3

exps = np.zeros((number_of_s_exps+number_of_p_exps,2))
#exps[:, 0] = decaying_nums(5)

# S
exps[0,0] = 20.0
exps[1,0] = 9.5045827955887916e+01
exps[2,0] = 4.4881042475048387e+00 
exps[3,0] = 3.9799528004692630e-01
             
# P          
exps[3,0] = 3.0108199280832128e+01
exps[4,0] = 6.1393781325590453e+00
exps[5,0] = 4.8929328703550412e-01

basis =  str(number_of_s_exps)+"s"+str(number_of_p_exps)+"p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc21115.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 24
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 18 15:00:17 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35677784.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 32000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 32000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 32000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  4.6648885719         1
[INPUT] 0    0    [1    /1   ]  458.20967084         1
[INPUT] 0    0    [1    /1   ]  0.39703473019        1
[INPUT] 0    0    [1    /1   ]  68.3621782554        1
[INPUT] 1    0    [1    /1   ]  8.57312163146        1
[INPUT] 1    0    [1    /1   ]  0.489553532541       1
[INPUT] 1    0    [1    /1   ]  2693.96396662        1

nuclear repulsion = 0
number of shells = 7
number of NR pGTOs = 13
number of NR cGTOs = 13
basis = {'Ar': [[0, [4.664888571897592, 1.0]], [0, [458.2096708404895, 1.0]], [0, [0.39703473018955404, 1.0]], [0, [68.36217825540122, 1.0]], [1, [8.57312163145881, 1.0]], [1, [0.4895535325405237, 1.0]], [1, [2693.9639666174803, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [4.66488857]
bas 1, expnt(s) = [458.20967084]
bas 2, expnt(s) = [0.39703473]
bas 3, expnt(s) = [68.36217826]
bas 4, expnt(s) = [8.57312163]
bas 5, expnt(s) = [0.48955353]
bas 6, expnt(s) = [2693.96396662]
CPU time:       546.01
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  1  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]
 [ 0  1  1  1  0 36 37  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 4.66488857e+00 8.01947578e+00 4.58209671e+02 2.50214926e+02
 3.97034730e-01 1.26367792e+00 6.83621783e+01 6.00657554e+01
 8.57312163e+00 4.27964873e+01 4.89553533e-01 1.19463333e+00
 2.69396397e+03 5.66205548e+04]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.310625111344372
cond(S) = 4.786161198378413
E1 = -675.327451433289  E_coul = 184.76758396061075
init E= -490.559867472678
    CPU time for initialize scf      7.32 sec, wall time      0.34 sec
  HOMO = -0.687169754386311  LUMO = 383.663759968461
  mo_energy =
[-1.17592206e+02 -1.30613235e+01 -7.63594072e+00 -7.63594072e+00
 -7.63594072e+00 -1.63915794e+00 -6.87169754e-01 -6.87169754e-01
 -6.87169754e-01  3.83663760e+02  5.80348218e+03  5.80348218e+03
  5.80348218e+03]
E1 = -698.1101095488978  E_coul = 199.08668472866353
cycle= 1 E= -499.023424820234  delta_E= -8.46  |g|= 0.23  |ddm|= 0.305
    CPU time for cycle= 1      0.24 sec, wall time      0.01 sec
diis-norm(errvec)=0.237898
diis-c [-0.05659562  1.        ]
  HOMO = -0.234610618081296  LUMO = 385.049180485424
  mo_energy =
[-1.16218227e+02 -1.20002399e+01 -6.63551926e+00 -6.63551926e+00
 -6.63551926e+00 -1.13953811e+00 -2.34610618e-01 -2.34610618e-01
 -2.34610618e-01  3.85049180e+02  5.80453404e+03  5.80453404e+03
  5.80453404e+03]
E1 = -698.1060201317232  E_coul = 199.08254653748833
cycle= 2 E= -499.023473594235  delta_E= -4.88e-05  |g|= 0.00106  |ddm|= 0.00135
    CPU time for cycle= 2      0.08 sec, wall time      0.01 sec
diis-norm(errvec)=0.00102297
diis-c [-5.12094036e-07 -3.08228436e-03  1.00308228e+00]
  HOMO = -0.234620909008064  LUMO = 385.047159601892
  mo_energy =
[-1.16219815e+02 -1.20003438e+01 -6.63563445e+00 -6.63563445e+00
 -6.63563445e+00 -1.13954495e+00 -2.34620909e-01 -2.34620909e-01
 -2.34620909e-01  3.85047160e+02  5.80452731e+03  5.80452731e+03
  5.80452731e+03]
E1 = -698.105998993886  E_coul = 199.08252539838412
cycle= 3 E= -499.023473595502  delta_E= -1.27e-09  |g|= 2.85e-06  |ddm|= 6.46e-06
    CPU time for cycle= 3      0.02 sec, wall time      0.01 sec
diis-norm(errvec)=3.13077e-06
diis-c [-8.15734516e-13  3.32222496e-06 -3.44436289e-03  1.00344104e+00]
  HOMO = -0.234620919390519  LUMO = 385.047154725726
  mo_energy =
[-1.16219819e+02 -1.20003440e+01 -6.63563462e+00 -6.63563462e+00
 -6.63563462e+00 -1.13954496e+00 -2.34620919e-01 -2.34620919e-01
 -2.34620919e-01  3.85047155e+02  5.80452729e+03  5.80452729e+03
  5.80452729e+03]
E1 = -698.1059989455723  E_coul = 199.0825253500713
cycle= 4 E= -499.023473595501  delta_E= 9.09e-13  |g|= 6.6e-09  |ddm|= 1.4e-08
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
E1 = -698.1059989455723  E_coul = 199.0825253500713
  HOMO = -0.23462091933595  LUMO = 385.047154726917
  mo_energy =
[-1.16219819e+02 -1.20003440e+01 -6.63563461e+00 -6.63563461e+00
 -6.63563461e+00 -1.13954496e+00 -2.34620919e-01 -2.34620919e-01
 -2.34620919e-01  3.85047155e+02  5.80452729e+03  5.80452729e+03
  5.80452729e+03]
E1 = -698.1059989456148  E_coul = 199.0825253501137
Extra cycle  E= -499.023473595501  delta_E= -1.14e-13  |g|= 5.38e-11  |ddm|= 3.54e-11
    CPU time for scf_cycle      7.69 sec, wall time      0.39 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 4.786161198378413
E1 = -698.1059989456148  E_coul = 199.0825253501137
init E= -499.023473595501
    CPU time for initialize scf      1.22 sec, wall time      0.05 sec
  HOMO = -0.234620919335578  LUMO = 385.047154726907
  mo_energy =
[-1.16219819e+02 -1.20003440e+01 -6.63563461e+00 -6.63563461e+00
 -6.63563461e+00 -1.13954496e+00 -2.34620919e-01 -2.34620919e-01
 -2.34620919e-01  3.85047155e+02  5.80452729e+03  5.80452729e+03
  5.80452729e+03]
E1 = -698.105998945615  E_coul = 199.08252535011388
cycle= 1 E= -499.023473595501  delta_E= -5.68e-14  |g|= 5.28e-12  |ddm|= 2.48e-13
    CPU time for cycle= 1      0.22 sec, wall time      0.01 sec
E1 = -698.105998945615  E_coul = 199.08252535011388
  HOMO = -0.234620919335139  LUMO = 385.047154726907
  mo_energy =
[-1.16219819e+02 -1.20003440e+01 -6.63563461e+00 -6.63563461e+00
 -6.63563461e+00 -1.13954496e+00 -2.34620919e-01 -2.34620919e-01
 -2.34620919e-01  3.85047155e+02  5.80452729e+03  5.80452729e+03
  5.80452729e+03]
E1 = -698.1059989456149  E_coul = 199.08252535011366
Extra cycle  E= -499.023473595501  delta_E= -1.14e-13  |g|= 2.64e-12  |ddm|= 7.07e-15
    CPU time for scf_cycle      1.49 sec, wall time      0.12 sec
exp = [4.66488857e+00 4.58209671e+02 3.97034730e-01 6.83621783e+01
 8.57312163e+00 4.89553533e-01 2.69396397e+03]
grad_E = [ 2.31897211e-04 -2.78133085e-06 -1.16810603e-03  5.09501908e-05
 -3.84071034e-05 -3.46320723e-03  6.13765634e-06]
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
number_of_s_exps = 4
number_of_p_exps = 3

exps = np.zeros((number_of_s_exps+number_of_p_exps,2))
#exps[:, 0] = decaying_nums(5)

# S
exps[0,0] = 20.0
exps[1,0] = 9.5045827955887916e+01
exps[2,0] = 4.4881042475048387e+00 
exps[3,0] = 3.9799528004692630e-01
             
# P          
exps[3,0] = 3.0108199280832128e+01
exps[4,0] = 6.1393781325590453e+00
exps[5,0] = 4.8929328703550412e-01

basis =  str(number_of_s_exps)+"s"+str(number_of_p_exps)+"p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc21115.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 24
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 18 15:00:20 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35677784.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 32000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 32000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 32000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  4.66470176943        1
[INPUT] 0    0    [1    /1   ]  458.20729414         1
[INPUT] 0    0    [1    /1   ]  0.397073545611       1
[INPUT] 0    0    [1    /1   ]  68.3607165481        1
[INPUT] 1    0    [1    /1   ]  8.57326976607        1
[INPUT] 1    0    [1    /1   ]  0.48963684825        1
[INPUT] 1    0    [1    /1   ]  2693.96396641        1

nuclear repulsion = 0
number of shells = 7
number of NR pGTOs = 13
number of NR cGTOs = 13
basis = {'Ar': [[0, [4.664701769426191, 1.0]], [0, [458.20729414011856, 1.0]], [0, [0.3970735456108596, 1.0]], [0, [68.36071654811097, 1.0]], [1, [8.573269766074182, 1.0]], [1, [0.4896368482499835, 1.0]], [1, [2693.963966408865, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [4.66470177]
bas 1, expnt(s) = [458.20729414]
bas 2, expnt(s) = [0.39707355]
bas 3, expnt(s) = [68.36071655]
bas 4, expnt(s) = [8.57326977]
bas 5, expnt(s) = [0.48963685]
bas 6, expnt(s) = [2693.96396641]
CPU time:       557.92
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  1  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]
 [ 0  1  1  1  0 36 37  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 4.66470177e+00 8.01923493e+00 4.58207294e+02 2.50213952e+02
 3.97073546e-01 1.26377058e+00 6.83607165e+01 6.00647922e+01
 8.57326977e+00 4.27974117e+01 4.89636848e-01 1.19488748e+00
 2.69396397e+03 5.66205548e+04]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.310517762682142
cond(S) = 4.786178898321631
E1 = -675.3314748216565  E_coul = 184.77127092553903
init E= -490.560203896117
    CPU time for initialize scf      0.25 sec, wall time      0.03 sec
  HOMO = -0.687052856426504  LUMO = 383.656993271831
  mo_energy =
[-1.17591837e+02 -1.30610241e+01 -7.63570550e+00 -7.63570550e+00
 -7.63570550e+00 -1.63906601e+00 -6.87052856e-01 -6.87052856e-01
 -6.87052856e-01  3.83656993e+02  5.80348256e+03  5.80348256e+03
  5.80348256e+03]
E1 = -698.1153423004855  E_coul = 199.0919172298851
cycle= 1 E= -499.0234250706  delta_E= -8.46  |g|= 0.23  |ddm|= 0.305
    CPU time for cycle= 1      0.24 sec, wall time      0.01 sec
diis-norm(errvec)=0.237914
diis-c [-0.05660288  1.        ]
  HOMO = -0.234402739348438  LUMO = 385.042470030401
  mo_energy =
[-1.16217787e+02 -1.19998454e+01 -6.63518916e+00 -6.63518916e+00
 -6.63518916e+00 -1.13937051e+00 -2.34402739e-01 -2.34402739e-01
 -2.34402739e-01  3.85042470e+02  5.80453435e+03  5.80453435e+03
  5.80453435e+03]
E1 = -698.1112522344542  E_coul = 199.0877783756879
cycle= 2 E= -499.023473858766  delta_E= -4.88e-05  |g|= 0.00106  |ddm|= 0.00135
    CPU time for cycle= 2      0.09 sec, wall time      0.01 sec
diis-norm(errvec)=0.00102308
diis-c [-5.12138601e-07 -3.08259043e-03  1.00308259e+00]
  HOMO = -0.234413035559071  LUMO = 385.040448867886
  mo_energy =
[-1.16219375e+02 -1.19999493e+01 -6.63530437e+00 -6.63530437e+00
 -6.63530437e+00 -1.13937736e+00 -2.34413036e-01 -2.34413036e-01
 -2.34413036e-01  3.85040449e+02  5.80452761e+03  5.80452761e+03
  5.80452761e+03]
E1 = -698.1112310934056  E_coul = 199.08775723337263
cycle= 3 E= -499.023473860033  delta_E= -1.27e-09  |g|= 2.85e-06  |ddm|= 6.46e-06
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=3.13046e-06
diis-c [-8.15519668e-13  3.32206700e-06 -3.44376448e-03  1.00344044e+00]
  HOMO = -0.234413045944159  LUMO = 385.040443991926
  mo_energy =
[-1.16219379e+02 -1.19999495e+01 -6.63530454e+00 -6.63530454e+00
 -6.63530454e+00 -1.13937737e+00 -2.34413046e-01 -2.34413046e-01
 -2.34413046e-01  3.85040444e+02  5.80452760e+03  5.80452760e+03
  5.80452760e+03]
E1 = -698.1112310450942  E_coul = 199.08775718506075
cycle= 4 E= -499.023473860033  delta_E= -3.98e-13  |g|= 6.6e-09  |ddm|= 1.4e-08
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
E1 = -698.1112310450942  E_coul = 199.08775718506075
  HOMO = -0.234413045890425  LUMO = 385.040443993117
  mo_energy =
[-1.16219379e+02 -1.19999495e+01 -6.63530454e+00 -6.63530454e+00
 -6.63530454e+00 -1.13937737e+00 -2.34413046e-01 -2.34413046e-01
 -2.34413046e-01  3.85040444e+02  5.80452760e+03  5.80452760e+03
  5.80452760e+03]
E1 = -698.1112310451358  E_coul = 199.08775718510273
Extra cycle  E= -499.023473860033  delta_E= 3.98e-13  |g|= 5.39e-11  |ddm|= 3.54e-11
    CPU time for scf_cycle      0.61 sec, wall time      0.08 sec
exp = [4.66470177e+00 4.58207294e+02 3.97073546e-01 6.83607165e+01
 8.57326977e+00 4.89636848e-01 2.69396397e+03]
E = -499.02347386003305
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
number_of_s_exps = 4
number_of_p_exps = 3

exps = np.zeros((number_of_s_exps+number_of_p_exps,2))
#exps[:, 0] = decaying_nums(5)

# S
exps[0,0] = 20.0
exps[1,0] = 9.5045827955887916e+01
exps[2,0] = 4.4881042475048387e+00 
exps[3,0] = 3.9799528004692630e-01
             
# P          
exps[3,0] = 3.0108199280832128e+01
exps[4,0] = 6.1393781325590453e+00
exps[5,0] = 4.8929328703550412e-01

basis =  str(number_of_s_exps)+"s"+str(number_of_p_exps)+"p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc21115.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 24
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 18 15:00:21 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35677784.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 32000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 32000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 32000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  4.66470176943        1
[INPUT] 0    0    [1    /1   ]  458.20729414         1
[INPUT] 0    0    [1    /1   ]  0.397073545611       1
[INPUT] 0    0    [1    /1   ]  68.3607165481        1
[INPUT] 1    0    [1    /1   ]  8.57326976607        1
[INPUT] 1    0    [1    /1   ]  0.48963684825        1
[INPUT] 1    0    [1    /1   ]  2693.96396641        1

nuclear repulsion = 0
number of shells = 7
number of NR pGTOs = 13
number of NR cGTOs = 13
basis = {'Ar': [[0, [4.664701769426191, 1.0]], [0, [458.20729414011856, 1.0]], [0, [0.3970735456108596, 1.0]], [0, [68.36071654811097, 1.0]], [1, [8.573269766074182, 1.0]], [1, [0.4896368482499835, 1.0]], [1, [2693.963966408865, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [4.66470177]
bas 1, expnt(s) = [458.20729414]
bas 2, expnt(s) = [0.39707355]
bas 3, expnt(s) = [68.36071655]
bas 4, expnt(s) = [8.57326977]
bas 5, expnt(s) = [0.48963685]
bas 6, expnt(s) = [2693.96396641]
CPU time:       558.69
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  1  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]
 [ 0  1  1  1  0 36 37  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 4.66470177e+00 8.01923493e+00 4.58207294e+02 2.50213952e+02
 3.97073546e-01 1.26377058e+00 6.83607165e+01 6.00647922e+01
 8.57326977e+00 4.27974117e+01 4.89636848e-01 1.19488748e+00
 2.69396397e+03 5.66205548e+04]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.310517762682142
cond(S) = 4.786178898321631
E1 = -675.3314748216565  E_coul = 184.77127092553903
init E= -490.560203896117
    CPU time for initialize scf      0.20 sec, wall time      0.02 sec
  HOMO = -0.687052856426504  LUMO = 383.656993271831
  mo_energy =
[-1.17591837e+02 -1.30610241e+01 -7.63570550e+00 -7.63570550e+00
 -7.63570550e+00 -1.63906601e+00 -6.87052856e-01 -6.87052856e-01
 -6.87052856e-01  3.83656993e+02  5.80348256e+03  5.80348256e+03
  5.80348256e+03]
E1 = -698.1153423004855  E_coul = 199.0919172298851
cycle= 1 E= -499.0234250706  delta_E= -8.46  |g|= 0.23  |ddm|= 0.305
    CPU time for cycle= 1      0.23 sec, wall time      0.01 sec
diis-norm(errvec)=0.237914
diis-c [-0.05660288  1.        ]
  HOMO = -0.234402739348438  LUMO = 385.042470030401
  mo_energy =
[-1.16217787e+02 -1.19998454e+01 -6.63518916e+00 -6.63518916e+00
 -6.63518916e+00 -1.13937051e+00 -2.34402739e-01 -2.34402739e-01
 -2.34402739e-01  3.85042470e+02  5.80453435e+03  5.80453435e+03
  5.80453435e+03]
E1 = -698.1112522344542  E_coul = 199.0877783756879
cycle= 2 E= -499.023473858766  delta_E= -4.88e-05  |g|= 0.00106  |ddm|= 0.00135
    CPU time for cycle= 2      0.12 sec, wall time      0.01 sec
diis-norm(errvec)=0.00102308
diis-c [-5.12138601e-07 -3.08259043e-03  1.00308259e+00]
  HOMO = -0.234413035559071  LUMO = 385.040448867886
  mo_energy =
[-1.16219375e+02 -1.19999493e+01 -6.63530437e+00 -6.63530437e+00
 -6.63530437e+00 -1.13937736e+00 -2.34413036e-01 -2.34413036e-01
 -2.34413036e-01  3.85040449e+02  5.80452761e+03  5.80452761e+03
  5.80452761e+03]
E1 = -698.1112310934056  E_coul = 199.08775723337263
cycle= 3 E= -499.023473860033  delta_E= -1.27e-09  |g|= 2.85e-06  |ddm|= 6.46e-06
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=3.13046e-06
diis-c [-8.15519668e-13  3.32206700e-06 -3.44376448e-03  1.00344044e+00]
  HOMO = -0.234413045944159  LUMO = 385.040443991926
  mo_energy =
[-1.16219379e+02 -1.19999495e+01 -6.63530454e+00 -6.63530454e+00
 -6.63530454e+00 -1.13937737e+00 -2.34413046e-01 -2.34413046e-01
 -2.34413046e-01  3.85040444e+02  5.80452760e+03  5.80452760e+03
  5.80452760e+03]
E1 = -698.1112310450942  E_coul = 199.08775718506075
cycle= 4 E= -499.023473860033  delta_E= -3.98e-13  |g|= 6.6e-09  |ddm|= 1.4e-08
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
E1 = -698.1112310450942  E_coul = 199.08775718506075
  HOMO = -0.234413045890425  LUMO = 385.040443993117
  mo_energy =
[-1.16219379e+02 -1.19999495e+01 -6.63530454e+00 -6.63530454e+00
 -6.63530454e+00 -1.13937737e+00 -2.34413046e-01 -2.34413046e-01
 -2.34413046e-01  3.85040444e+02  5.80452760e+03  5.80452760e+03
  5.80452760e+03]
E1 = -698.1112310451358  E_coul = 199.08775718510273
Extra cycle  E= -499.023473860033  delta_E= 3.98e-13  |g|= 5.39e-11  |ddm|= 3.54e-11
    CPU time for scf_cycle      0.58 sec, wall time      0.08 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 4.786178898321631
E1 = -698.1112310451358  E_coul = 199.08775718510273
init E= -499.023473860033
    CPU time for initialize scf      1.19 sec, wall time      0.05 sec
  HOMO = -0.234413045889593  LUMO = 385.040443993107
  mo_energy =
[-1.16219379e+02 -1.19999495e+01 -6.63530454e+00 -6.63530454e+00
 -6.63530454e+00 -1.13937737e+00 -2.34413046e-01 -2.34413046e-01
 -2.34413046e-01  3.85040444e+02  5.80452760e+03  5.80452760e+03
  5.80452760e+03]
E1 = -698.111231045136  E_coul = 199.08775718510293
cycle= 1 E= -499.023473860033  delta_E= -5.68e-14  |g|= 2.77e-12  |ddm|= 2.48e-13
    CPU time for cycle= 1      0.22 sec, wall time      0.01 sec
E1 = -698.111231045136  E_coul = 199.08775718510293
  HOMO = -0.234413045889862  LUMO = 385.040443993106
  mo_energy =
[-1.16219379e+02 -1.19999495e+01 -6.63530454e+00 -6.63530454e+00
 -6.63530454e+00 -1.13937737e+00 -2.34413046e-01 -2.34413046e-01
 -2.34413046e-01  3.85040444e+02  5.80452760e+03  5.80452760e+03
  5.80452760e+03]
E1 = -698.1112310451363  E_coul = 199.08775718510302
Extra cycle  E= -499.023473860033  delta_E= -1.71e-13  |g|= 2.21e-12  |ddm|= 3.69e-15
    CPU time for scf_cycle      1.48 sec, wall time      0.11 sec
exp = [4.66470177e+00 4.58207294e+02 3.97073546e-01 6.83607165e+01
 8.57326977e+00 4.89636848e-01 2.69396397e+03]
grad_E = [ 7.56772679e-05 -3.66754467e-07 -2.83299622e-04  1.24728888e-05
 -7.23897556e-06 -4.17118213e-04  6.13793196e-06]
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
number_of_s_exps = 4
number_of_p_exps = 3

exps = np.zeros((number_of_s_exps+number_of_p_exps,2))
#exps[:, 0] = decaying_nums(5)

# S
exps[0,0] = 20.0
exps[1,0] = 9.5045827955887916e+01
exps[2,0] = 4.4881042475048387e+00 
exps[3,0] = 3.9799528004692630e-01
             
# P          
exps[3,0] = 3.0108199280832128e+01
exps[4,0] = 6.1393781325590453e+00
exps[5,0] = 4.8929328703550412e-01

basis =  str(number_of_s_exps)+"s"+str(number_of_p_exps)+"p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc21115.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 24
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 18 15:00:24 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35677784.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 32000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 32000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 32000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  4.66462302455        1
[INPUT] 0    0    [1    /1   ]  458.202985743        1
[INPUT] 0    0    [1    /1   ]  0.397088337192       1
[INPUT] 0    0    [1    /1   ]  68.3600076538        1
[INPUT] 1    0    [1    /1   ]  8.57329797449        1
[INPUT] 1    0    [1    /1   ]  0.489648396655       1
[INPUT] 1    0    [1    /1   ]  2693.96396637        1

nuclear repulsion = 0
number of shells = 7
number of NR pGTOs = 13
number of NR cGTOs = 13
basis = {'Ar': [[0, [4.6646230245524265, 1.0]], [0, [458.20298574302, 1.0]], [0, [0.3970883371922047, 1.0]], [0, [68.36000765380082, 1.0]], [1, [8.573297974488801, 1.0]], [1, [0.489648396654927, 1.0]], [1, [2693.963966367561, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [4.66462302]
bas 1, expnt(s) = [458.20298574]
bas 2, expnt(s) = [0.39708834]
bas 3, expnt(s) = [68.36000765]
bas 4, expnt(s) = [8.57329797]
bas 5, expnt(s) = [0.4896484]
bas 6, expnt(s) = [2693.96396637]
CPU time:       563.45
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  1  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]
 [ 0  1  1  1  0 36 37  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 4.66462302e+00 8.01913340e+00 4.58202986e+02 2.50212188e+02
 3.97088337e-01 1.26380588e+00 6.83600077e+01 6.00643251e+01
 8.57329797e+00 4.27975877e+01 4.89648397e-01 1.19492271e+00
 2.69396397e+03 5.66205548e+04]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.310502688850985
cond(S) = 4.786204705745287
E1 = -675.3321218783562  E_coul = 184.77185685034019
init E= -490.560265028016
    CPU time for initialize scf      0.21 sec, wall time      0.03 sec
  HOMO = -0.687032648515574  LUMO = 383.651221609922
  mo_energy =
[-1.17591784e+02 -1.30609781e+01 -7.63566712e+00 -7.63566712e+00
 -7.63566712e+00 -1.63905086e+00 -6.87032649e-01 -6.87032649e-01
 -6.87032649e-01  3.83651222e+02  5.80348261e+03  5.80348261e+03
  5.80348261e+03]
E1 = -698.116101539916  E_coul = 199.0926764629033
cycle= 1 E= -499.023425077013  delta_E= -8.46  |g|= 0.23  |ddm|= 0.305
    CPU time for cycle= 1      0.22 sec, wall time      0.01 sec
diis-norm(errvec)=0.237917
diis-c [-0.0566047  1.       ]
  HOMO = -0.234370093048816  LUMO = 385.036689440232
  mo_energy =
[-1.16217737e+02 -1.19997894e+01 -6.63513962e+00 -6.63513962e+00
 -6.63513962e+00 -1.13934269e+00 -2.34370093e-01 -2.34370093e-01
 -2.34370093e-01  3.85036689e+02  5.80453434e+03  5.80453434e+03
  5.80453434e+03]
E1 = -698.1120112233756  E_coul = 199.0885373531984
cycle= 2 E= -499.023473870177  delta_E= -4.88e-05  |g|= 0.00106  |ddm|= 0.00135
    CPU time for cycle= 2      0.12 sec, wall time      0.01 sec
diis-norm(errvec)=0.00102311
diis-c [-5.12147008e-07 -3.08267124e-03  1.00308267e+00]
  HOMO = -0.2343803905168  LUMO = 385.034668191159
  mo_energy =
[-1.16219326e+02 -1.19998933e+01 -6.63525483e+00 -6.63525483e+00
 -6.63525483e+00 -1.13934953e+00 -2.34380391e-01 -2.34380391e-01
 -2.34380391e-01  3.85034668e+02  5.80452761e+03  5.80452761e+03
  5.80452761e+03]
E1 = -698.1119900810181  E_coul = 199.08851620957375
cycle= 3 E= -499.023473871444  delta_E= -1.27e-09  |g|= 2.85e-06  |ddm|= 6.46e-06
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=3.1303e-06
diis-c [-8.15340212e-13  3.32193797e-06 -3.44353362e-03  1.00344021e+00]
  HOMO = -0.234380400904099  LUMO = 385.034663315254
  mo_energy =
[-1.16219330e+02 -1.19998935e+01 -6.63525500e+00 -6.63525500e+00
 -6.63525500e+00 -1.13934954e+00 -2.34380401e-01 -2.34380401e-01
 -2.34380401e-01  3.85034663e+02  5.80452759e+03  5.80452759e+03
  5.80452759e+03]
E1 = -698.1119900327056  E_coul = 199.08851616126125
cycle= 4 E= -499.023473871444  delta_E=    0  |g|= 6.6e-09  |ddm|= 1.4e-08
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
E1 = -698.1119900327056  E_coul = 199.08851616126125
  HOMO = -0.234380400850032  LUMO = 385.034663316444
  mo_energy =
[-1.16219330e+02 -1.19998935e+01 -6.63525500e+00 -6.63525500e+00
 -6.63525500e+00 -1.13934954e+00 -2.34380401e-01 -2.34380401e-01
 -2.34380401e-01  3.85034663e+02  5.80452759e+03  5.80452759e+03
  5.80452759e+03]
E1 = -698.1119900327477  E_coul = 199.0885161613035
Extra cycle  E= -499.023473871444  delta_E= 1.14e-13  |g|= 5.37e-11  |ddm|= 3.54e-11
    CPU time for scf_cycle      0.58 sec, wall time      0.08 sec
exp = [4.66462302e+00 4.58202986e+02 3.97088337e-01 6.83600077e+01
 8.57329797e+00 4.89648397e-01 2.69396397e+03]
E = -499.02347387144425
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
number_of_s_exps = 4
number_of_p_exps = 3

exps = np.zeros((number_of_s_exps+number_of_p_exps,2))
#exps[:, 0] = decaying_nums(5)

# S
exps[0,0] = 20.0
exps[1,0] = 9.5045827955887916e+01
exps[2,0] = 4.4881042475048387e+00 
exps[3,0] = 3.9799528004692630e-01
             
# P          
exps[3,0] = 3.0108199280832128e+01
exps[4,0] = 6.1393781325590453e+00
exps[5,0] = 4.8929328703550412e-01

basis =  str(number_of_s_exps)+"s"+str(number_of_p_exps)+"p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc21115.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 24
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 18 15:00:24 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35677784.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 32000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 32000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 32000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  4.66462302455        1
[INPUT] 0    0    [1    /1   ]  458.202985743        1
[INPUT] 0    0    [1    /1   ]  0.397088337192       1
[INPUT] 0    0    [1    /1   ]  68.3600076538        1
[INPUT] 1    0    [1    /1   ]  8.57329797449        1
[INPUT] 1    0    [1    /1   ]  0.489648396655       1
[INPUT] 1    0    [1    /1   ]  2693.96396637        1

nuclear repulsion = 0
number of shells = 7
number of NR pGTOs = 13
number of NR cGTOs = 13
basis = {'Ar': [[0, [4.6646230245524265, 1.0]], [0, [458.20298574302, 1.0]], [0, [0.3970883371922047, 1.0]], [0, [68.36000765380082, 1.0]], [1, [8.573297974488801, 1.0]], [1, [0.489648396654927, 1.0]], [1, [2693.963966367561, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [4.66462302]
bas 1, expnt(s) = [458.20298574]
bas 2, expnt(s) = [0.39708834]
bas 3, expnt(s) = [68.36000765]
bas 4, expnt(s) = [8.57329797]
bas 5, expnt(s) = [0.4896484]
bas 6, expnt(s) = [2693.96396637]
CPU time:       564.18
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  1  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]
 [ 0  1  1  1  0 36 37  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 4.66462302e+00 8.01913340e+00 4.58202986e+02 2.50212188e+02
 3.97088337e-01 1.26380588e+00 6.83600077e+01 6.00643251e+01
 8.57329797e+00 4.27975877e+01 4.89648397e-01 1.19492271e+00
 2.69396397e+03 5.66205548e+04]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.310502688850985
cond(S) = 4.786204705745287
E1 = -675.3321218783562  E_coul = 184.77185685034019
init E= -490.560265028016
    CPU time for initialize scf      0.20 sec, wall time      0.02 sec
  HOMO = -0.687032648515574  LUMO = 383.651221609922
  mo_energy =
[-1.17591784e+02 -1.30609781e+01 -7.63566712e+00 -7.63566712e+00
 -7.63566712e+00 -1.63905086e+00 -6.87032649e-01 -6.87032649e-01
 -6.87032649e-01  3.83651222e+02  5.80348261e+03  5.80348261e+03
  5.80348261e+03]
E1 = -698.116101539916  E_coul = 199.0926764629033
cycle= 1 E= -499.023425077013  delta_E= -8.46  |g|= 0.23  |ddm|= 0.305
    CPU time for cycle= 1      0.22 sec, wall time      0.01 sec
diis-norm(errvec)=0.237917
diis-c [-0.0566047  1.       ]
  HOMO = -0.234370093048816  LUMO = 385.036689440232
  mo_energy =
[-1.16217737e+02 -1.19997894e+01 -6.63513962e+00 -6.63513962e+00
 -6.63513962e+00 -1.13934269e+00 -2.34370093e-01 -2.34370093e-01
 -2.34370093e-01  3.85036689e+02  5.80453434e+03  5.80453434e+03
  5.80453434e+03]
E1 = -698.1120112233756  E_coul = 199.0885373531984
cycle= 2 E= -499.023473870177  delta_E= -4.88e-05  |g|= 0.00106  |ddm|= 0.00135
    CPU time for cycle= 2      0.13 sec, wall time      0.01 sec
diis-norm(errvec)=0.00102311
diis-c [-5.12147008e-07 -3.08267124e-03  1.00308267e+00]
  HOMO = -0.2343803905168  LUMO = 385.034668191159
  mo_energy =
[-1.16219326e+02 -1.19998933e+01 -6.63525483e+00 -6.63525483e+00
 -6.63525483e+00 -1.13934953e+00 -2.34380391e-01 -2.34380391e-01
 -2.34380391e-01  3.85034668e+02  5.80452761e+03  5.80452761e+03
  5.80452761e+03]
E1 = -698.1119900810181  E_coul = 199.08851620957375
cycle= 3 E= -499.023473871444  delta_E= -1.27e-09  |g|= 2.85e-06  |ddm|= 6.46e-06
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=3.1303e-06
diis-c [-8.15340212e-13  3.32193797e-06 -3.44353362e-03  1.00344021e+00]
  HOMO = -0.234380400904099  LUMO = 385.034663315254
  mo_energy =
[-1.16219330e+02 -1.19998935e+01 -6.63525500e+00 -6.63525500e+00
 -6.63525500e+00 -1.13934954e+00 -2.34380401e-01 -2.34380401e-01
 -2.34380401e-01  3.85034663e+02  5.80452759e+03  5.80452759e+03
  5.80452759e+03]
E1 = -698.1119900327056  E_coul = 199.08851616126125
cycle= 4 E= -499.023473871444  delta_E=    0  |g|= 6.6e-09  |ddm|= 1.4e-08
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
E1 = -698.1119900327056  E_coul = 199.08851616126125
  HOMO = -0.234380400850032  LUMO = 385.034663316444
  mo_energy =
[-1.16219330e+02 -1.19998935e+01 -6.63525500e+00 -6.63525500e+00
 -6.63525500e+00 -1.13934954e+00 -2.34380401e-01 -2.34380401e-01
 -2.34380401e-01  3.85034663e+02  5.80452759e+03  5.80452759e+03
  5.80452759e+03]
E1 = -698.1119900327477  E_coul = 199.0885161613035
Extra cycle  E= -499.023473871444  delta_E= 1.14e-13  |g|= 5.37e-11  |ddm|= 3.54e-11
    CPU time for scf_cycle      0.58 sec, wall time      0.08 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 4.786204705745287
E1 = -698.1119900327477  E_coul = 199.0885161613035
init E= -499.023473871444
    CPU time for initialize scf      1.15 sec, wall time      0.05 sec
  HOMO = -0.23438040085024  LUMO = 385.034663316433
  mo_energy =
[-1.16219330e+02 -1.19998935e+01 -6.63525500e+00 -6.63525500e+00
 -6.63525500e+00 -1.13934954e+00 -2.34380401e-01 -2.34380401e-01
 -2.34380401e-01  3.85034663e+02  5.80452759e+03  5.80452759e+03
  5.80452759e+03]
E1 = -698.1119900327478  E_coul = 199.08851616130346
cycle= 1 E= -499.023473871444  delta_E= -1.14e-13  |g|= 3.73e-12  |ddm|= 2.47e-13
    CPU time for cycle= 1      0.21 sec, wall time      0.01 sec
E1 = -698.1119900327478  E_coul = 199.08851616130346
  HOMO = -0.234380400849647  LUMO = 385.034663316433
  mo_energy =
[-1.16219330e+02 -1.19998935e+01 -6.63525500e+00 -6.63525500e+00
 -6.63525500e+00 -1.13934954e+00 -2.34380401e-01 -2.34380401e-01
 -2.34380401e-01  3.85034663e+02  5.80452759e+03  5.80452759e+03
  5.80452759e+03]
E1 = -698.1119900327478  E_coul = 199.0885161613037
Extra cycle  E= -499.023473871444  delta_E= 2.27e-13  |g|= 3.22e-12  |ddm|= 5.92e-15
    CPU time for scf_cycle      1.44 sec, wall time      0.11 sec
exp = [4.66462302e+00 4.58202986e+02 3.97088337e-01 6.83600077e+01
 8.57329797e+00 4.89648397e-01 2.69396397e+03]
grad_E = [ 3.41623404e-06  9.64324084e-09 -4.89379531e-06  2.39163610e-07
 -3.69949461e-07  1.50107521e-05  6.13798431e-06]
 message: Optimization terminated successfully
 success: True
  status: 0
     fun: -499.02347387144425
       x: [ 4.665e+00  4.582e+02  3.971e-01  6.836e+01  8.573e+00
            4.896e-01  2.694e+03]
     nit: 51
     jac: [ 3.416e-06  9.643e-09 -4.894e-06  2.392e-07 -3.699e-07
            1.501e-05  6.138e-06]
    nfev: 90
    njev: 51
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
number_of_s_exps = 4
number_of_p_exps = 3

exps = np.zeros((number_of_s_exps+number_of_p_exps,2))
#exps[:, 0] = decaying_nums(5)

# S
exps[0,0] = 20.0
exps[1,0] = 9.5045827955887916e+01
exps[2,0] = 4.4881042475048387e+00 
exps[3,0] = 3.9799528004692630e-01
             
# P          
exps[3,0] = 3.0108199280832128e+01
exps[4,0] = 6.1393781325590453e+00
exps[5,0] = 4.8929328703550412e-01

basis =  str(number_of_s_exps)+"s"+str(number_of_p_exps)+"p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc21115.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 24
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 18 15:00:27 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35677784.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 32000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 32000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 32000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  4.66462302455        1
[INPUT] 0    0    [1    /1   ]  458.202985743        1
[INPUT] 0    0    [1    /1   ]  0.397088337192       1
[INPUT] 0    0    [1    /1   ]  68.3600076538        1
[INPUT] 1    0    [1    /1   ]  8.57329797449        1
[INPUT] 1    0    [1    /1   ]  0.489648396655       1
[INPUT] 1    0    [1    /1   ]  2693.96396637        1

nuclear repulsion = 0
number of shells = 7
number of NR pGTOs = 13
number of NR cGTOs = 13
basis = {'Ar': [[0, [4.6646230245524265, 1.0]], [0, [458.20298574302, 1.0]], [0, [0.3970883371922047, 1.0]], [0, [68.36000765380082, 1.0]], [1, [8.573297974488801, 1.0]], [1, [0.489648396654927, 1.0]], [1, [2693.963966367561, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [4.66462302]
bas 1, expnt(s) = [458.20298574]
bas 2, expnt(s) = [0.39708834]
bas 3, expnt(s) = [68.36000765]
bas 4, expnt(s) = [8.57329797]
bas 5, expnt(s) = [0.4896484]
bas 6, expnt(s) = [2693.96396637]
CPU time:       568.91
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  1  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]
 [ 0  1  1  1  0 36 37  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 4.66462302e+00 8.01913340e+00 4.58202986e+02 2.50212188e+02
 3.97088337e-01 1.26380588e+00 6.83600077e+01 6.00643251e+01
 8.57329797e+00 4.27975877e+01 4.89648397e-01 1.19492271e+00
 2.69396397e+03 5.66205548e+04]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.310502688850985
cond(S) = 4.786204705745287
E1 = -675.3321218783562  E_coul = 184.77185685034019
init E= -490.560265028016
    CPU time for initialize scf      2.47 sec, wall time      0.12 sec
  HOMO = -0.687032648515574  LUMO = 383.651221609922
  mo_energy =
[-1.17591784e+02 -1.30609781e+01 -7.63566712e+00 -7.63566712e+00
 -7.63566712e+00 -1.63905086e+00 -6.87032649e-01 -6.87032649e-01
 -6.87032649e-01  3.83651222e+02  5.80348261e+03  5.80348261e+03
  5.80348261e+03]
E1 = -698.116101539916  E_coul = 199.0926764629033
cycle= 1 E= -499.023425077013  delta_E= -8.46  |g|= 0.23  |ddm|= 0.305
    CPU time for cycle= 1      0.26 sec, wall time      0.01 sec
diis-norm(errvec)=0.237917
diis-c [-0.0566047  1.       ]
  HOMO = -0.234370093048816  LUMO = 385.036689440232
  mo_energy =
[-1.16217737e+02 -1.19997894e+01 -6.63513962e+00 -6.63513962e+00
 -6.63513962e+00 -1.13934269e+00 -2.34370093e-01 -2.34370093e-01
 -2.34370093e-01  3.85036689e+02  5.80453434e+03  5.80453434e+03
  5.80453434e+03]
E1 = -698.1120112233756  E_coul = 199.0885373531984
cycle= 2 E= -499.023473870177  delta_E= -4.88e-05  |g|= 0.00106  |ddm|= 0.00135
    CPU time for cycle= 2      0.06 sec, wall time      0.01 sec
diis-norm(errvec)=0.00102311
diis-c [-5.12147008e-07 -3.08267124e-03  1.00308267e+00]
  HOMO = -0.2343803905168  LUMO = 385.034668191159
  mo_energy =
[-1.16219326e+02 -1.19998933e+01 -6.63525483e+00 -6.63525483e+00
 -6.63525483e+00 -1.13934953e+00 -2.34380391e-01 -2.34380391e-01
 -2.34380391e-01  3.85034668e+02  5.80452761e+03  5.80452761e+03
  5.80452761e+03]
E1 = -698.1119900810181  E_coul = 199.08851620957375
cycle= 3 E= -499.023473871444  delta_E= -1.27e-09  |g|= 2.85e-06  |ddm|= 6.46e-06
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=3.1303e-06
diis-c [-8.15340212e-13  3.32193797e-06 -3.44353362e-03  1.00344021e+00]
  HOMO = -0.234380400904099  LUMO = 385.034663315254
  mo_energy =
[-1.16219330e+02 -1.19998935e+01 -6.63525500e+00 -6.63525500e+00
 -6.63525500e+00 -1.13934954e+00 -2.34380401e-01 -2.34380401e-01
 -2.34380401e-01  3.85034663e+02  5.80452759e+03  5.80452759e+03
  5.80452759e+03]
E1 = -698.1119900327056  E_coul = 199.08851616126125
cycle= 4 E= -499.023473871444  delta_E=    0  |g|= 6.6e-09  |ddm|= 1.4e-08
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
E1 = -698.1119900327056  E_coul = 199.08851616126125
  HOMO = -0.234380400850032  LUMO = 385.034663316444
  mo_energy =
[-1.16219330e+02 -1.19998935e+01 -6.63525500e+00 -6.63525500e+00
 -6.63525500e+00 -1.13934954e+00 -2.34380401e-01 -2.34380401e-01
 -2.34380401e-01  3.85034663e+02  5.80452759e+03  5.80452759e+03
  5.80452759e+03]
E1 = -698.1119900327477  E_coul = 199.0885161613035
Extra cycle  E= -499.023473871444  delta_E= 1.14e-13  |g|= 5.37e-11  |ddm|= 3.54e-11
    CPU time for scf_cycle      2.82 sec, wall time      0.18 sec
exp = [4.66462302e+00 4.58202986e+02 3.97088337e-01 6.83600077e+01
 8.57329797e+00 4.89648397e-01 2.69396397e+03]
E = -499.02347387144425
E = -499.02347387144425
exp = [4.6646230245524265e+00,4.5820298574302001e+02,3.9708833719220471e-01,6.8360007653800821e+01,8.5732979744888009e+00,4.8964839665492699e-01,2.6939639663675612e+03]
