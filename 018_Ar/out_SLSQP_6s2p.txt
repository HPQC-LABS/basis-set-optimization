#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((8, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([1.5735952963858392e+03,2.3761303919145971e+02,5.2332977870138201e+01,4.7281081235122091e+00,3.9325830426169639e-01,8.5907170030661746e+00,4.9039633283239870e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "6s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:45:32 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  6294.38118554        1
[INPUT] 0    0    [1    /1   ]  1573.59529639        1
[INPUT] 0    0    [1    /1   ]  237.613039191        1
[INPUT] 0    0    [1    /1   ]  52.3329778701        1
[INPUT] 0    0    [1    /1   ]  4.72810812351        1
[INPUT] 0    0    [1    /1   ]  0.393258304262       1
[INPUT] 1    0    [1    /1   ]  8.59071700307        1
[INPUT] 1    0    [1    /1   ]  0.490396332832       1

nuclear repulsion = 0
number of shells = 8
number of NR pGTOs = 12
number of NR cGTOs = 12
basis = {'Ar': [[0, [6294.381185543357, 1.0]], [0, [1573.5952963858392, 1.0]], [0, [237.6130391914597, 1.0]], [0, [52.3329778701382, 1.0]], [0, [4.728108123512209, 1.0]], [0, [0.3932583042616964, 1.0]], [1, [8.590717003066175, 1.0]], [1, [0.4903963328323987, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [6294.38118554]
bas 1, expnt(s) = [1573.59529639]
bas 2, expnt(s) = [237.61303919]
bas 3, expnt(s) = [52.33297787]
bas 4, expnt(s) = [4.72810812]
bas 5, expnt(s) = [0.3932583]
bas 6, expnt(s) = [8.590717]
bas 7, expnt(s) = [0.49039633]
CPU time:         2.05
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  1  1  1  0 36 37  0]
 [ 0  1  1  1  0 38 39  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 6.29438119e+03 1.78537646e+03 1.57359530e+03 6.31225901e+02
 2.37613039e+02 1.52903605e+02 5.23329779e+01 4.91582722e+01
 4.72810812e+00 8.10084969e+00 3.93258304e-01 1.25465248e+00
 8.59071700e+00 4.29063092e+01 4.90396333e-01 1.19720469e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.318085278923053
cond(S) = 16.50031559769185
E1 = -687.6671890149829  E_coul = 184.8947468964453
init E= -502.772442118538
    CPU time for initialize scf      0.17 sec, wall time      0.17 sec
  HOMO = -0.68187057063456  LUMO = 180.760154631483
  mo_energy =
[-1.21088469e+02 -1.32703490e+01 -7.62165012e+00 -7.62165012e+00
 -7.62165012e+00 -1.65197380e+00 -6.81870571e-01 -6.81870571e-01
 -6.81870571e-01  1.80760155e+02  2.12679865e+03  1.27537252e+04]
E1 = -705.504050978833  E_coul = 199.02512522976303
cycle= 1 E= -506.47892574907  delta_E= -3.71  |g|= 0.282  |ddm|= 0.295
    CPU time for cycle= 1      0.36 sec, wall time      0.36 sec
diis-norm(errvec)=0.374848
diis-c [-0.1405111  1.       ]
  HOMO = -0.235484093247925  LUMO = 182.164684863917
  mo_energy =
[-1.19688998e+02 -1.22336659e+01 -6.64536687e+00 -6.64536687e+00
 -6.64536687e+00 -1.16174720e+00 -2.35484093e-01 -2.35484093e-01
 -2.35484093e-01  1.82164685e+02  2.12811817e+03  1.27548613e+04]
E1 = -705.4942817236088  E_coul = 199.01522762168563
cycle= 2 E= -506.479054101923  delta_E= -0.000128  |g|= 0.00236  |ddm|= 0.00406
    CPU time for cycle= 2      0.11 sec, wall time      0.11 sec
diis-norm(errvec)=0.0024696
diis-c [-4.70189292e-06 -3.16319592e-03  1.00316320e+00]
  HOMO = -0.235527563017637  LUMO = 182.162884746443
  mo_energy =
[-1.19692058e+02 -1.22339862e+01 -6.64584572e+00 -6.64584572e+00
 -6.64584572e+00 -1.16176465e+00 -2.35527563e-01 -2.35527563e-01
 -2.35527563e-01  1.82162885e+02  2.12811206e+03  1.27548528e+04]
E1 = -705.4942036406417  E_coul = 199.01514952574973
cycle= 3 E= -506.479054114892  delta_E= -1.3e-08  |g|= 2.32e-05  |ddm|= 3.62e-05
    CPU time for cycle= 3      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=3.1545e-05
diis-c [-8.39689288e-12  5.26808339e-05 -1.47109173e-02  1.01465824e+00]
  HOMO = -0.235527778324382  LUMO = 182.162880231076
  mo_energy =
[-1.19692071e+02 -1.22339878e+01 -6.64584867e+00 -6.64584867e+00
 -6.64584867e+00 -1.16176470e+00 -2.35527778e-01 -2.35527778e-01
 -2.35527778e-01  1.82162880e+02  2.12811205e+03  1.27548528e+04]
E1 = -705.4942031492334  E_coul = 199.0151490343403
cycle= 4 E= -506.479054114893  delta_E= -1.14e-12  |g|= 2.67e-08  |ddm|= 2.94e-07
    CPU time for cycle= 4      0.01 sec, wall time      0.02 sec
E1 = -705.4942031492334  E_coul = 199.0151490343403
  HOMO = -0.235527777996466  LUMO = 182.16288026718
  mo_energy =
[-1.19692071e+02 -1.22339878e+01 -6.64584866e+00 -6.64584866e+00
 -6.64584866e+00 -1.16176470e+00 -2.35527778e-01 -2.35527778e-01
 -2.35527778e-01  1.82162880e+02  2.12811205e+03  1.27548528e+04]
E1 = -705.4942031502399  E_coul = 199.01514903534672
Extra cycle  E= -506.479054114893  delta_E= -5.68e-14  |g|= 2.11e-10  |ddm|= 3.21e-10
    CPU time for scf_cycle      0.68 sec, wall time      0.69 sec
exp = [6.29438119e+03 1.57359530e+03 2.37613039e+02 5.23329779e+01
 4.72810812e+00 3.93258304e-01 8.59071700e+00 4.90396333e-01]
E = -506.47905411489313
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((8, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([1.5735952963858392e+03,2.3761303919145971e+02,5.2332977870138201e+01,4.7281081235122091e+00,3.9325830426169639e-01,8.5907170030661746e+00,4.9039633283239870e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "6s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:45:33 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  6294.38118554        1
[INPUT] 0    0    [1    /1   ]  1573.59529639        1
[INPUT] 0    0    [1    /1   ]  237.613039191        1
[INPUT] 0    0    [1    /1   ]  52.3329778701        1
[INPUT] 0    0    [1    /1   ]  4.72810812351        1
[INPUT] 0    0    [1    /1   ]  0.393258304262       1
[INPUT] 1    0    [1    /1   ]  8.59071700307        1
[INPUT] 1    0    [1    /1   ]  0.490396332832       1

nuclear repulsion = 0
number of shells = 8
number of NR pGTOs = 12
number of NR cGTOs = 12
basis = {'Ar': [[0, [6294.381185543357, 1.0]], [0, [1573.5952963858392, 1.0]], [0, [237.6130391914597, 1.0]], [0, [52.3329778701382, 1.0]], [0, [4.728108123512209, 1.0]], [0, [0.3932583042616964, 1.0]], [1, [8.590717003066175, 1.0]], [1, [0.4903963328323987, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [6294.38118554]
bas 1, expnt(s) = [1573.59529639]
bas 2, expnt(s) = [237.61303919]
bas 3, expnt(s) = [52.33297787]
bas 4, expnt(s) = [4.72810812]
bas 5, expnt(s) = [0.3932583]
bas 6, expnt(s) = [8.590717]
bas 7, expnt(s) = [0.49039633]
CPU time:         2.91
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  1  1  1  0 36 37  0]
 [ 0  1  1  1  0 38 39  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 6.29438119e+03 1.78537646e+03 1.57359530e+03 6.31225901e+02
 2.37613039e+02 1.52903605e+02 5.23329779e+01 4.91582722e+01
 4.72810812e+00 8.10084969e+00 3.93258304e-01 1.25465248e+00
 8.59071700e+00 4.29063092e+01 4.90396333e-01 1.19720469e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.318085278923053
cond(S) = 16.50031559769185
E1 = -687.6671890149829  E_coul = 184.8947468964453
init E= -502.772442118538
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.68187057063456  LUMO = 180.760154631483
  mo_energy =
[-1.21088469e+02 -1.32703490e+01 -7.62165012e+00 -7.62165012e+00
 -7.62165012e+00 -1.65197380e+00 -6.81870571e-01 -6.81870571e-01
 -6.81870571e-01  1.80760155e+02  2.12679865e+03  1.27537252e+04]
E1 = -705.504050978833  E_coul = 199.02512522976303
cycle= 1 E= -506.47892574907  delta_E= -3.71  |g|= 0.282  |ddm|= 0.295
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.374848
diis-c [-0.1405111  1.       ]
  HOMO = -0.235484093247925  LUMO = 182.164684863917
  mo_energy =
[-1.19688998e+02 -1.22336659e+01 -6.64536687e+00 -6.64536687e+00
 -6.64536687e+00 -1.16174720e+00 -2.35484093e-01 -2.35484093e-01
 -2.35484093e-01  1.82164685e+02  2.12811817e+03  1.27548613e+04]
E1 = -705.4942817236088  E_coul = 199.01522762168563
cycle= 2 E= -506.479054101923  delta_E= -0.000128  |g|= 0.00236  |ddm|= 0.00406
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.0024696
diis-c [-4.70189292e-06 -3.16319592e-03  1.00316320e+00]
  HOMO = -0.235527563017637  LUMO = 182.162884746443
  mo_energy =
[-1.19692058e+02 -1.22339862e+01 -6.64584572e+00 -6.64584572e+00
 -6.64584572e+00 -1.16176465e+00 -2.35527563e-01 -2.35527563e-01
 -2.35527563e-01  1.82162885e+02  2.12811206e+03  1.27548528e+04]
E1 = -705.4942036406417  E_coul = 199.01514952574973
cycle= 3 E= -506.479054114892  delta_E= -1.3e-08  |g|= 2.32e-05  |ddm|= 3.62e-05
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=3.1545e-05
diis-c [-8.39689288e-12  5.26808339e-05 -1.47109173e-02  1.01465824e+00]
  HOMO = -0.235527778324382  LUMO = 182.162880231076
  mo_energy =
[-1.19692071e+02 -1.22339878e+01 -6.64584867e+00 -6.64584867e+00
 -6.64584867e+00 -1.16176470e+00 -2.35527778e-01 -2.35527778e-01
 -2.35527778e-01  1.82162880e+02  2.12811205e+03  1.27548528e+04]
E1 = -705.4942031492334  E_coul = 199.0151490343403
cycle= 4 E= -506.479054114893  delta_E= -1.14e-12  |g|= 2.67e-08  |ddm|= 2.94e-07
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
E1 = -705.4942031492334  E_coul = 199.0151490343403
  HOMO = -0.235527777996466  LUMO = 182.16288026718
  mo_energy =
[-1.19692071e+02 -1.22339878e+01 -6.64584866e+00 -6.64584866e+00
 -6.64584866e+00 -1.16176470e+00 -2.35527778e-01 -2.35527778e-01
 -2.35527778e-01  1.82162880e+02  2.12811205e+03  1.27548528e+04]
E1 = -705.4942031502399  E_coul = 199.01514903534672
Extra cycle  E= -506.479054114893  delta_E= -5.68e-14  |g|= 2.11e-10  |ddm|= 3.21e-10
    CPU time for scf_cycle      0.08 sec, wall time      0.09 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 16.50031559769185
E1 = -705.4942031502399  E_coul = 199.01514903534672
init E= -506.479054114893
    CPU time for initialize scf      0.37 sec, wall time      0.37 sec
  HOMO = -0.235527777993986  LUMO = 182.162880267447
  mo_energy =
[-1.19692071e+02 -1.22339878e+01 -6.64584866e+00 -6.64584866e+00
 -6.64584866e+00 -1.16176470e+00 -2.35527778e-01 -2.35527778e-01
 -2.35527778e-01  1.82162880e+02  2.12811205e+03  1.27548528e+04]
E1 = -705.4942031502478  E_coul = 199.01514903535468
cycle= 1 E= -506.479054114893  delta_E=    0  |g|= 3.89e-12  |ddm|= 2.61e-12
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -705.4942031502478  E_coul = 199.01514903535468
  HOMO = -0.235527777993962  LUMO = 182.162880267448
  mo_energy =
[-1.19692071e+02 -1.22339878e+01 -6.64584866e+00 -6.64584866e+00
 -6.64584866e+00 -1.16176470e+00 -2.35527778e-01 -2.35527778e-01
 -2.35527778e-01  1.82162880e+02  2.12811205e+03  1.27548528e+04]
E1 = -705.4942031502482  E_coul = 199.01514903535474
Extra cycle  E= -506.479054114893  delta_E= -2.84e-13  |g|= 2.22e-12  |ddm|= 3.83e-14
    CPU time for scf_cycle      1.34 sec, wall time      1.34 sec
exp = [6.29438119e+03 1.57359530e+03 2.37613039e+02 5.23329779e+01
 4.72810812e+00 3.93258304e-01 8.59071700e+00 4.90396333e-01]
grad_E = [-9.00895849e-05  1.63617760e-03 -7.42891934e-03  1.19449181e-02
 -8.18199981e-03 -9.38541908e-03  1.20592966e-03  4.51038631e-04]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((8, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([1.5735952963858392e+03,2.3761303919145971e+02,5.2332977870138201e+01,4.7281081235122091e+00,3.9325830426169639e-01,8.5907170030661746e+00,4.9039633283239870e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "6s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:45:39 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  6294.38127563        1
[INPUT] 0    0    [1    /1   ]  1573.59366021        1
[INPUT] 0    0    [1    /1   ]  237.620468111        1
[INPUT] 0    0    [1    /1   ]  52.3210329521        1
[INPUT] 0    0    [1    /1   ]  4.73629012333        1
[INPUT] 0    0    [1    /1   ]  0.402643723344       1
[INPUT] 1    0    [1    /1   ]  8.58951107341        1
[INPUT] 1    0    [1    /1   ]  0.489945294201       1

nuclear repulsion = 0
number of shells = 8
number of NR pGTOs = 12
number of NR cGTOs = 12
basis = {'Ar': [[0, [6294.381275632942, 1.0]], [0, [1573.593660208241, 1.0]], [0, [237.6204681107959, 1.0]], [0, [52.3210329520828, 1.0]], [0, [4.736290123326249, 1.0]], [0, [0.40264372334383247, 1.0]], [1, [8.589511073405781, 1.0]], [1, [0.4899452942009309, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [6294.38127563]
bas 1, expnt(s) = [1573.59366021]
bas 2, expnt(s) = [237.62046811]
bas 3, expnt(s) = [52.32103295]
bas 4, expnt(s) = [4.73629012]
bas 5, expnt(s) = [0.40264372]
bas 6, expnt(s) = [8.58951107]
bas 7, expnt(s) = [0.48994529]
CPU time:         9.30
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  1  1  1  0 36 37  0]
 [ 0  1  1  1  0 38 39  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 6.29438128e+03 1.78537648e+03 1.57359366e+03 6.31225409e+02
 2.37620468e+02 1.52907191e+02 5.23210330e+01 4.91498567e+01
 4.73629012e+00 8.11136132e+00 4.02643723e-01 1.27704360e+00
 8.58951107e+00 4.28987806e+01 4.89945294e-01 1.19582845e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.316970282935067
cond(S) = 16.509168503621378
E1 = -687.8167887063117  E_coul = 185.03158120574372
init E= -502.785207500568
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.678254980044679  LUMO = 180.807810594688
  mo_energy =
[-1.21076713e+02 -1.32601849e+01 -7.60988145e+00 -7.60988145e+00
 -7.60988145e+00 -1.65200143e+00 -6.78254980e-01 -6.78254980e-01
 -6.78254980e-01  1.80807811e+02  2.12683346e+03  1.27537564e+04]
E1 = -705.677122671762  E_coul = 199.19855988471895
cycle= 1 E= -506.478562787043  delta_E= -3.69  |g|= 0.281  |ddm|= 0.294
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.375038
diis-c [-0.14065385  1.        ]
  HOMO = -0.231189990416946  LUMO = 182.215655956414
  mo_energy =
[-1.19672555e+02 -1.22217405e+01 -6.63153630e+00 -6.63153630e+00
 -6.63153630e+00 -1.15759029e+00 -2.31189990e-01 -2.31189990e-01
 -2.31189990e-01  1.82215656e+02  2.12815925e+03  1.27548996e+04]
E1 = -705.6673733235928  E_coul = 199.18868371871264
cycle= 2 E= -506.47868960488  delta_E= -0.000127  |g|= 0.00234  |ddm|= 0.00405
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.00245064
diis-c [-4.62532306e-06 -3.14256148e-03  1.00314256e+00]
  HOMO = -0.231233253640178  LUMO = 182.213854578479
  mo_energy =
[-1.19675612e+02 -1.22220600e+01 -6.63201291e+00 -6.63201291e+00
 -6.63201291e+00 -1.15760816e+00 -2.31233254e-01 -2.31233254e-01
 -2.31233254e-01  1.82213855e+02  2.12815312e+03  1.27548911e+04]
E1 = -705.6672954501443  E_coul = 199.1886058324756
cycle= 3 E= -506.478689617669  delta_E= -1.28e-08  |g|= 2.31e-05  |ddm|= 3.61e-05
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=3.13668e-05
diis-c [-8.35841615e-12  5.27227996e-05 -1.47446786e-02  1.01469196e+00]
  HOMO = -0.231233469249133  LUMO = 182.213850002181
  mo_energy =
[-1.19675624e+02 -1.22220617e+01 -6.63201585e+00 -6.63201585e+00
 -6.63201585e+00 -1.15760822e+00 -2.31233469e-01 -2.31233469e-01
 -2.31233469e-01  1.82213850e+02  2.12815311e+03  1.27548911e+04]
E1 = -705.6672949589671  E_coul = 199.18860534129712
cycle= 4 E= -506.47868961767  delta_E= -1.25e-12  |g|= 2.67e-08  |ddm|= 2.94e-07
    CPU time for cycle= 4      0.01 sec, wall time      0.02 sec
E1 = -705.6672949589671  E_coul = 199.18860534129712
  HOMO = -0.231233468916793  LUMO = 182.213850038327
  mo_energy =
[-1.19675624e+02 -1.22220617e+01 -6.63201585e+00 -6.63201585e+00
 -6.63201585e+00 -1.15760822e+00 -2.31233469e-01 -2.31233469e-01
 -2.31233469e-01  1.82213850e+02  2.12815311e+03  1.27548911e+04]
E1 = -705.6672949599761  E_coul = 199.18860534230612
Extra cycle  E= -506.47868961767  delta_E=    0  |g|= 2.11e-10  |ddm|= 3.23e-10
    CPU time for scf_cycle      0.09 sec, wall time      0.09 sec
exp = [6.29438128e+03 1.57359366e+03 2.37620468e+02 5.23210330e+01
 4.73629012e+00 4.02643723e-01 8.58951107e+00 4.89945294e-01]
E = -506.47868961766994
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((8, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([1.5735952963858392e+03,2.3761303919145971e+02,5.2332977870138201e+01,4.7281081235122091e+00,3.9325830426169639e-01,8.5907170030661746e+00,4.9039633283239870e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "6s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:45:39 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  6294.38120784        1
[INPUT] 0    0    [1    /1   ]  1573.59489145        1
[INPUT] 0    0    [1    /1   ]  237.614877757        1
[INPUT] 0    0    [1    /1   ]  52.330021651         1
[INPUT] 0    0    [1    /1   ]  4.73013306702        1
[INPUT] 0    0    [1    /1   ]  0.395581079122       1
[INPUT] 1    0    [1    /1   ]  8.59041855043        1
[INPUT] 1    0    [1    /1   ]  0.490284706363       1

nuclear repulsion = 0
number of shells = 8
number of NR pGTOs = 12
number of NR cGTOs = 12
basis = {'Ar': [[0, [6294.381207839412, 1.0]], [0, [1573.5948914521693, 1.0]], [0, [237.6148777568902, 1.0]], [0, [52.330021651014945, 1.0]], [0, [4.7301330670241315, 1.0]], [0, [0.39558107912224233, 1.0]], [1, [8.590418550426582, 1.0]], [1, [0.4902847063631766, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [6294.38120784]
bas 1, expnt(s) = [1573.59489145]
bas 2, expnt(s) = [237.61487776]
bas 3, expnt(s) = [52.33002165]
bas 4, expnt(s) = [4.73013307]
bas 5, expnt(s) = [0.39558108]
bas 6, expnt(s) = [8.59041855]
bas 7, expnt(s) = [0.49028471]
CPU time:         9.44
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  1  1  1  0 36 37  0]
 [ 0  1  1  1  0 38 39  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 6.29438121e+03 1.78537646e+03 1.57359489e+03 6.31225779e+02
 2.37614878e+02 1.52904493e+02 5.23300217e+01 4.91561895e+01
 4.73013307e+00 8.10345161e+00 3.95581079e-01 1.26020633e+00
 8.59041855e+00 4.29044460e+01 4.90284706e-01 1.19686406e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.317873151103303
cond(S) = 16.502496780766194
E1 = -687.7057815963964  E_coul = 184.92969912504248
init E= -502.776082471354
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.680927817251757  LUMO = 180.77201560543
  mo_energy =
[-1.21085479e+02 -1.32677558e+01 -7.61865876e+00 -7.61865876e+00
 -7.61865876e+00 -1.65202641e+00 -6.80927817e-01 -6.80927817e-01
 -6.80927817e-01  1.80772016e+02  2.12680734e+03  1.27537330e+04]
E1 = -705.5473483297409  E_coul = 199.0683784022559
cycle= 1 E= -506.478969927485  delta_E= -3.7  |g|= 0.282  |ddm|= 0.295
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.374894
diis-c [-0.1405458  1.       ]
  HOMO = -0.23440894928888  LUMO = 182.177308825219
  mo_energy =
[-1.19684904e+02 -1.22306904e+01 -6.64191949e+00 -6.64191949e+00
 -6.64191949e+00 -1.16077911e+00 -2.34408949e-01 -2.34408949e-01
 -2.34408949e-01  1.82177309e+02  2.12812835e+03  1.27548708e+04]
E1 = -705.5375839392342  E_coul = 199.0584860404314
cycle= 2 E= -506.479097898803  delta_E= -0.000128  |g|= 0.00235  |ddm|= 0.00405
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.0024649
diis-c [-4.68288755e-06 -3.15802390e-03  1.00315802e+00]
  HOMO = -0.234452368460645  LUMO = 182.175508384783
  mo_energy =
[-1.19687964e+02 -1.22310105e+01 -6.64239779e+00 -6.64239779e+00
 -6.64239779e+00 -1.16079666e+00 -2.34452368e-01 -2.34452368e-01
 -2.34452368e-01  1.82175508e+02  2.12812223e+03  1.27548623e+04]
E1 = -705.5375059077292  E_coul = 199.0584079960025
cycle= 3 E= -506.479097911727  delta_E= -1.29e-08  |g|= 2.32e-05  |ddm|= 3.62e-05
    CPU time for cycle= 3      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=3.15012e-05
diis-c [-8.38724829e-12  5.26912404e-05 -1.47193477e-02  1.01466666e+00]
  HOMO = -0.234452583849246  LUMO = 182.175503854191
  mo_energy =
[-1.19687976e+02 -1.22310121e+01 -6.64240073e+00 -6.64240073e+00
 -6.64240073e+00 -1.16079672e+00 -2.34452584e-01 -2.34452584e-01
 -2.34452584e-01  1.82175504e+02  2.12812223e+03  1.27548623e+04]
E1 = -705.5375054163705  E_coul = 199.05840750464273
cycle= 4 E= -506.479097911728  delta_E= -1.19e-12  |g|= 2.67e-08  |ddm|= 2.94e-07
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -705.5375054163705  E_coul = 199.05840750464273
  HOMO = -0.234452583520216  LUMO = 182.175503890306
  mo_energy =
[-1.19687976e+02 -1.22310121e+01 -6.64240073e+00 -6.64240073e+00
 -6.64240073e+00 -1.16079672e+00 -2.34452584e-01 -2.34452584e-01
 -2.34452584e-01  1.82175504e+02  2.12812223e+03  1.27548623e+04]
E1 = -705.5375054173772  E_coul = 199.05840750564963
Extra cycle  E= -506.479097911728  delta_E= 1.71e-13  |g|= 2.1e-10  |ddm|= 3.21e-10
    CPU time for scf_cycle      0.10 sec, wall time      0.10 sec
exp = [6.29438121e+03 1.57359489e+03 2.37614878e+02 5.23300217e+01
 4.73013307e+00 3.95581079e-01 8.59041855e+00 4.90284706e-01]
E = -506.47909791172765
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((8, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([1.5735952963858392e+03,2.3761303919145971e+02,5.2332977870138201e+01,4.7281081235122091e+00,3.9325830426169639e-01,8.5907170030661746e+00,4.9039633283239870e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "6s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:45:40 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  6294.38120784        1
[INPUT] 0    0    [1    /1   ]  1573.59489145        1
[INPUT] 0    0    [1    /1   ]  237.614877757        1
[INPUT] 0    0    [1    /1   ]  52.330021651         1
[INPUT] 0    0    [1    /1   ]  4.73013306702        1
[INPUT] 0    0    [1    /1   ]  0.395581079122       1
[INPUT] 1    0    [1    /1   ]  8.59041855043        1
[INPUT] 1    0    [1    /1   ]  0.490284706363       1

nuclear repulsion = 0
number of shells = 8
number of NR pGTOs = 12
number of NR cGTOs = 12
basis = {'Ar': [[0, [6294.381207839412, 1.0]], [0, [1573.5948914521693, 1.0]], [0, [237.6148777568902, 1.0]], [0, [52.330021651014945, 1.0]], [0, [4.7301330670241315, 1.0]], [0, [0.39558107912224233, 1.0]], [1, [8.590418550426582, 1.0]], [1, [0.4902847063631766, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [6294.38120784]
bas 1, expnt(s) = [1573.59489145]
bas 2, expnt(s) = [237.61487776]
bas 3, expnt(s) = [52.33002165]
bas 4, expnt(s) = [4.73013307]
bas 5, expnt(s) = [0.39558108]
bas 6, expnt(s) = [8.59041855]
bas 7, expnt(s) = [0.49028471]
CPU time:         9.59
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  1  1  1  0 36 37  0]
 [ 0  1  1  1  0 38 39  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 6.29438121e+03 1.78537646e+03 1.57359489e+03 6.31225779e+02
 2.37614878e+02 1.52904493e+02 5.23300217e+01 4.91561895e+01
 4.73013307e+00 8.10345161e+00 3.95581079e-01 1.26020633e+00
 8.59041855e+00 4.29044460e+01 4.90284706e-01 1.19686406e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.317873151103303
cond(S) = 16.502496780766194
E1 = -687.7057815963964  E_coul = 184.92969912504248
init E= -502.776082471354
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.680927817251757  LUMO = 180.77201560543
  mo_energy =
[-1.21085479e+02 -1.32677558e+01 -7.61865876e+00 -7.61865876e+00
 -7.61865876e+00 -1.65202641e+00 -6.80927817e-01 -6.80927817e-01
 -6.80927817e-01  1.80772016e+02  2.12680734e+03  1.27537330e+04]
E1 = -705.5473483297409  E_coul = 199.0683784022559
cycle= 1 E= -506.478969927485  delta_E= -3.7  |g|= 0.282  |ddm|= 0.295
    CPU time for cycle= 1      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.374894
diis-c [-0.1405458  1.       ]
  HOMO = -0.23440894928888  LUMO = 182.177308825219
  mo_energy =
[-1.19684904e+02 -1.22306904e+01 -6.64191949e+00 -6.64191949e+00
 -6.64191949e+00 -1.16077911e+00 -2.34408949e-01 -2.34408949e-01
 -2.34408949e-01  1.82177309e+02  2.12812835e+03  1.27548708e+04]
E1 = -705.5375839392342  E_coul = 199.0584860404314
cycle= 2 E= -506.479097898803  delta_E= -0.000128  |g|= 0.00235  |ddm|= 0.00405
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.0024649
diis-c [-4.68288755e-06 -3.15802390e-03  1.00315802e+00]
  HOMO = -0.234452368460645  LUMO = 182.175508384783
  mo_energy =
[-1.19687964e+02 -1.22310105e+01 -6.64239779e+00 -6.64239779e+00
 -6.64239779e+00 -1.16079666e+00 -2.34452368e-01 -2.34452368e-01
 -2.34452368e-01  1.82175508e+02  2.12812223e+03  1.27548623e+04]
E1 = -705.5375059077292  E_coul = 199.0584079960025
cycle= 3 E= -506.479097911727  delta_E= -1.29e-08  |g|= 2.32e-05  |ddm|= 3.62e-05
    CPU time for cycle= 3      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=3.15012e-05
diis-c [-8.38724829e-12  5.26912404e-05 -1.47193477e-02  1.01466666e+00]
  HOMO = -0.234452583849246  LUMO = 182.175503854191
  mo_energy =
[-1.19687976e+02 -1.22310121e+01 -6.64240073e+00 -6.64240073e+00
 -6.64240073e+00 -1.16079672e+00 -2.34452584e-01 -2.34452584e-01
 -2.34452584e-01  1.82175504e+02  2.12812223e+03  1.27548623e+04]
E1 = -705.5375054163705  E_coul = 199.05840750464273
cycle= 4 E= -506.479097911728  delta_E= -1.19e-12  |g|= 2.67e-08  |ddm|= 2.94e-07
    CPU time for cycle= 4      0.01 sec, wall time      0.02 sec
E1 = -705.5375054163705  E_coul = 199.05840750464273
  HOMO = -0.234452583520216  LUMO = 182.175503890306
  mo_energy =
[-1.19687976e+02 -1.22310121e+01 -6.64240073e+00 -6.64240073e+00
 -6.64240073e+00 -1.16079672e+00 -2.34452584e-01 -2.34452584e-01
 -2.34452584e-01  1.82175504e+02  2.12812223e+03  1.27548623e+04]
E1 = -705.5375054173772  E_coul = 199.05840750564963
Extra cycle  E= -506.479097911728  delta_E= 1.71e-13  |g|= 2.1e-10  |ddm|= 3.21e-10
    CPU time for scf_cycle      0.09 sec, wall time      0.10 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 16.502496780766194
E1 = -705.5375054173772  E_coul = 199.05840750564963
init E= -506.479097911728
    CPU time for initialize scf      0.05 sec, wall time      0.05 sec
  HOMO = -0.234452583517735  LUMO = 182.175503890573
  mo_energy =
[-1.19687976e+02 -1.22310121e+01 -6.64240073e+00 -6.64240073e+00
 -6.64240073e+00 -1.16079672e+00 -2.34452584e-01 -2.34452584e-01
 -2.34452584e-01  1.82175504e+02  2.12812223e+03  1.27548623e+04]
E1 = -705.5375054173854  E_coul = 199.05840750565767
cycle= 1 E= -506.479097911728  delta_E= -1.14e-13  |g|= 3.76e-12  |ddm|= 2.63e-12
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -705.5375054173854  E_coul = 199.05840750565767
  HOMO = -0.23445258351771  LUMO = 182.175503890576
  mo_energy =
[-1.19687976e+02 -1.22310121e+01 -6.64240073e+00 -6.64240073e+00
 -6.64240073e+00 -1.16079672e+00 -2.34452584e-01 -2.34452584e-01
 -2.34452584e-01  1.82175504e+02  2.12812223e+03  1.27548623e+04]
E1 = -705.5375054173855  E_coul = 199.05840750565764
Extra cycle  E= -506.479097911728  delta_E= -1.14e-13  |g|= 5.02e-12  |ddm|= 1.38e-14
    CPU time for scf_cycle      0.11 sec, wall time      0.12 sec
exp = [6.29438121e+03 1.57359489e+03 2.37614878e+02 5.23300217e+01
 4.73013307e+00 3.95581079e-01 8.59041855e+00 4.90284706e-01]
grad_E = [-9.00906298e-05  1.63590202e-03 -7.41365370e-03  1.18291974e-02
 -6.38371642e-03  2.74163839e-02  1.38533789e-03  3.52624333e-03]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((8, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([1.5735952963858392e+03,2.3761303919145971e+02,5.2332977870138201e+01,4.7281081235122091e+00,3.9325830426169639e-01,8.5907170030661746e+00,4.9039633283239870e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "6s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:45:42 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  6294.38154716        1
[INPUT] 0    0    [1    /1   ]  1573.5887292         1
[INPUT] 0    0    [1    /1   ]  237.642843005        1
[INPUT] 0    0    [1    /1   ]  52.2851469599        1
[INPUT] 0    0    [1    /1   ]  4.75916539371        1
[INPUT] 0    0    [1    /1   ]  0.394411073536       1
[INPUT] 1    0    [1    /1   ]  8.58569848685        1
[INPUT] 1    0    [1    /1   ]  0.485534301339       1

nuclear repulsion = 0
number of shells = 8
number of NR pGTOs = 12
number of NR cGTOs = 12
basis = {'Ar': [[0, [6294.3815471552525, 1.0]], [0, [1573.588729201071, 1.0]], [0, [237.64284300485326, 1.0]], [0, [52.285146959944996, 1.0]], [0, [4.759165393712374, 1.0]], [0, [0.39441107353557686, 1.0]], [1, [8.58569848685382, 1.0]], [1, [0.4855343013391277, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [6294.38154716]
bas 1, expnt(s) = [1573.5887292]
bas 2, expnt(s) = [237.642843]
bas 3, expnt(s) = [52.28514696]
bas 4, expnt(s) = [4.75916539]
bas 5, expnt(s) = [0.39441107]
bas 6, expnt(s) = [8.58569849]
bas 7, expnt(s) = [0.4855343]
CPU time:        12.38
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  1  1  1  0 36 37  0]
 [ 0  1  1  1  0 38 39  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 6.29438155e+03 1.78537654e+03 1.57358873e+03 6.31223925e+02
 2.37642843e+02 1.52917989e+02 5.22851470e+01 4.91245714e+01
 4.75916539e+00 8.14072572e+00 3.94411074e-01 1.25740982e+00
 8.58569849e+00 4.28749803e+01 4.85534301e-01 1.18238603e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.3234499894123
cond(S) = 16.50538925338887
E1 = -687.5454116464796  E_coul = 184.77326556142407
init E= -502.772146085056
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.68711282621918  LUMO = 180.768645198655
  mo_energy =
[-1.21099687e+02 -1.32804733e+01 -7.62739374e+00 -7.62739374e+00
 -7.62739374e+00 -1.65747113e+00 -6.87112826e-01 -6.87112826e-01
 -6.87112826e-01  1.80768645e+02  2.12679916e+03  1.27537253e+04]
E1 = -705.3240815561845  E_coul = 198.84495226276934
cycle= 1 E= -506.479129293415  delta_E= -3.71  |g|= 0.279  |ddm|= 0.291
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.37414
diis-c [-0.13998052  1.        ]
  HOMO = -0.245266746400068  LUMO = 182.170528268929
  mo_energy =
[-1.19700570e+02 -1.22475375e+01 -6.65459623e+00 -6.65459623e+00
 -6.65459623e+00 -1.16945360e+00 -2.45266746e-01 -2.45266746e-01
 -2.45266746e-01  1.82170528e+02  2.12812049e+03  1.27548648e+04]
E1 = -705.3144322884343  E_coul = 198.8351791134307
cycle= 2 E= -506.479253175004  delta_E= -0.000124  |g|= 0.0023  |ddm|= 0.00399
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00240322
diis-c [-4.43708763e-06 -3.10173290e-03  1.00310173e+00]
  HOMO = -0.245308840344428  LUMO = 182.168739134576
  mo_energy =
[-1.19703599e+02 -1.22478543e+01 -6.65506710e+00 -6.65506710e+00
 -6.65506710e+00 -1.16947100e+00 -2.45308840e-01 -2.45308840e-01
 -2.45308840e-01  1.82168739e+02  2.12811439e+03  1.27548563e+04]
E1 = -705.314355383481  E_coul = 198.83510219611966
cycle= 3 E= -506.479253187361  delta_E= -1.24e-08  |g|= 2.27e-05  |ddm|= 3.55e-05
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=3.08673e-05
diis-c [-8.18818020e-12  5.27799162e-05 -1.48065082e-02  1.01475373e+00]
  HOMO = -0.245309049732522  LUMO = 182.168734500657
  mo_energy =
[-1.19703612e+02 -1.22478559e+01 -6.65507002e+00 -6.65507002e+00
 -6.65507002e+00 -1.16947105e+00 -2.45309050e-01 -2.45309050e-01
 -2.45309050e-01  1.82168735e+02  2.12811438e+03  1.27548563e+04]
E1 = -705.3143548959266  E_coul = 198.83510170856334
cycle= 4 E= -506.479253187363  delta_E= -1.93e-12  |g|= 2.64e-08  |ddm|= 2.9e-07
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -705.3143548959266  E_coul = 198.83510170856334
  HOMO = -0.245309049410191  LUMO = 182.168734536484
  mo_energy =
[-1.19703612e+02 -1.22478559e+01 -6.65507002e+00 -6.65507002e+00
 -6.65507002e+00 -1.16947105e+00 -2.45309049e-01 -2.45309049e-01
 -2.45309049e-01  1.82168735e+02  2.12811438e+03  1.27548563e+04]
E1 = -705.3143548969296  E_coul = 198.8351017095666
Extra cycle  E= -506.479253187363  delta_E= 3.41e-13  |g|= 2.08e-10  |ddm|= 3.21e-10
    CPU time for scf_cycle      0.10 sec, wall time      0.11 sec
exp = [6.29438155e+03 1.57358873e+03 2.37642843e+02 5.22851470e+01
 4.75916539e+00 3.94411074e-01 8.58569849e+00 4.85534301e-01]
E = -506.47925318736293
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((8, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([1.5735952963858392e+03,2.3761303919145971e+02,5.2332977870138201e+01,4.7281081235122091e+00,3.9325830426169639e-01,8.5907170030661746e+00,4.9039633283239870e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "6s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:45:42 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  6294.38154716        1
[INPUT] 0    0    [1    /1   ]  1573.5887292         1
[INPUT] 0    0    [1    /1   ]  237.642843005        1
[INPUT] 0    0    [1    /1   ]  52.2851469599        1
[INPUT] 0    0    [1    /1   ]  4.75916539371        1
[INPUT] 0    0    [1    /1   ]  0.394411073536       1
[INPUT] 1    0    [1    /1   ]  8.58569848685        1
[INPUT] 1    0    [1    /1   ]  0.485534301339       1

nuclear repulsion = 0
number of shells = 8
number of NR pGTOs = 12
number of NR cGTOs = 12
basis = {'Ar': [[0, [6294.3815471552525, 1.0]], [0, [1573.588729201071, 1.0]], [0, [237.64284300485326, 1.0]], [0, [52.285146959944996, 1.0]], [0, [4.759165393712374, 1.0]], [0, [0.39441107353557686, 1.0]], [1, [8.58569848685382, 1.0]], [1, [0.4855343013391277, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [6294.38154716]
bas 1, expnt(s) = [1573.5887292]
bas 2, expnt(s) = [237.642843]
bas 3, expnt(s) = [52.28514696]
bas 4, expnt(s) = [4.75916539]
bas 5, expnt(s) = [0.39441107]
bas 6, expnt(s) = [8.58569849]
bas 7, expnt(s) = [0.4855343]
CPU time:        12.55
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  1  1  1  0 36 37  0]
 [ 0  1  1  1  0 38 39  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 6.29438155e+03 1.78537654e+03 1.57358873e+03 6.31223925e+02
 2.37642843e+02 1.52917989e+02 5.22851470e+01 4.91245714e+01
 4.75916539e+00 8.14072572e+00 3.94411074e-01 1.25740982e+00
 8.58569849e+00 4.28749803e+01 4.85534301e-01 1.18238603e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.3234499894123
cond(S) = 16.50538925338887
E1 = -687.5454116464796  E_coul = 184.77326556142407
init E= -502.772146085056
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.68711282621918  LUMO = 180.768645198655
  mo_energy =
[-1.21099687e+02 -1.32804733e+01 -7.62739374e+00 -7.62739374e+00
 -7.62739374e+00 -1.65747113e+00 -6.87112826e-01 -6.87112826e-01
 -6.87112826e-01  1.80768645e+02  2.12679916e+03  1.27537253e+04]
E1 = -705.3240815561845  E_coul = 198.84495226276934
cycle= 1 E= -506.479129293415  delta_E= -3.71  |g|= 0.279  |ddm|= 0.291
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.37414
diis-c [-0.13998052  1.        ]
  HOMO = -0.245266746400068  LUMO = 182.170528268929
  mo_energy =
[-1.19700570e+02 -1.22475375e+01 -6.65459623e+00 -6.65459623e+00
 -6.65459623e+00 -1.16945360e+00 -2.45266746e-01 -2.45266746e-01
 -2.45266746e-01  1.82170528e+02  2.12812049e+03  1.27548648e+04]
E1 = -705.3144322884343  E_coul = 198.8351791134307
cycle= 2 E= -506.479253175004  delta_E= -0.000124  |g|= 0.0023  |ddm|= 0.00399
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00240322
diis-c [-4.43708763e-06 -3.10173290e-03  1.00310173e+00]
  HOMO = -0.245308840344428  LUMO = 182.168739134576
  mo_energy =
[-1.19703599e+02 -1.22478543e+01 -6.65506710e+00 -6.65506710e+00
 -6.65506710e+00 -1.16947100e+00 -2.45308840e-01 -2.45308840e-01
 -2.45308840e-01  1.82168739e+02  2.12811439e+03  1.27548563e+04]
E1 = -705.314355383481  E_coul = 198.83510219611966
cycle= 3 E= -506.479253187361  delta_E= -1.24e-08  |g|= 2.27e-05  |ddm|= 3.55e-05
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=3.08673e-05
diis-c [-8.18818020e-12  5.27799162e-05 -1.48065082e-02  1.01475373e+00]
  HOMO = -0.245309049732522  LUMO = 182.168734500657
  mo_energy =
[-1.19703612e+02 -1.22478559e+01 -6.65507002e+00 -6.65507002e+00
 -6.65507002e+00 -1.16947105e+00 -2.45309050e-01 -2.45309050e-01
 -2.45309050e-01  1.82168735e+02  2.12811438e+03  1.27548563e+04]
E1 = -705.3143548959266  E_coul = 198.83510170856334
cycle= 4 E= -506.479253187363  delta_E= -1.93e-12  |g|= 2.64e-08  |ddm|= 2.9e-07
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -705.3143548959266  E_coul = 198.83510170856334
  HOMO = -0.245309049410191  LUMO = 182.168734536484
  mo_energy =
[-1.19703612e+02 -1.22478559e+01 -6.65507002e+00 -6.65507002e+00
 -6.65507002e+00 -1.16947105e+00 -2.45309049e-01 -2.45309049e-01
 -2.45309049e-01  1.82168735e+02  2.12811438e+03  1.27548563e+04]
E1 = -705.3143548969296  E_coul = 198.8351017095666
Extra cycle  E= -506.479253187363  delta_E= 3.41e-13  |g|= 2.08e-10  |ddm|= 3.21e-10
    CPU time for scf_cycle      0.10 sec, wall time      0.10 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 16.50538925338887
E1 = -705.3143548969296  E_coul = 198.8351017095666
init E= -506.479253187363
    CPU time for initialize scf      0.05 sec, wall time      0.05 sec
  HOMO = -0.245309049407752  LUMO = 182.168734536747
  mo_energy =
[-1.19703612e+02 -1.22478559e+01 -6.65507002e+00 -6.65507002e+00
 -6.65507002e+00 -1.16947105e+00 -2.45309049e-01 -2.45309049e-01
 -2.45309049e-01  1.82168735e+02  2.12811438e+03  1.27548563e+04]
E1 = -705.3143548969379  E_coul = 198.83510170957467
cycle= 1 E= -506.479253187363  delta_E= -2.27e-13  |g|= 3.4e-12  |ddm|= 2.65e-12
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -705.3143548969379  E_coul = 198.83510170957467
  HOMO = -0.245309049407731  LUMO = 182.16873453675
  mo_energy =
[-1.19703612e+02 -1.22478559e+01 -6.65507002e+00 -6.65507002e+00
 -6.65507002e+00 -1.16947105e+00 -2.45309049e-01 -2.45309049e-01
 -2.45309049e-01  1.82168735e+02  2.12811438e+03  1.27548563e+04]
E1 = -705.3143548969379  E_coul = 198.83510170957481
Extra cycle  E= -506.479253187363  delta_E= 1.14e-13  |g|= 1.1e-12  |ddm|= 2.06e-14
    CPU time for scf_cycle      0.12 sec, wall time      0.12 sec
exp = [6.29438155e+03 1.57358873e+03 2.37642843e+02 5.22851470e+01
 4.75916539e+00 3.94411074e-01 8.58569849e+00 4.85534301e-01]
grad_E = [-9.00705187e-05  1.63154787e-03 -7.21283032e-03  1.05447593e-02
  1.97134386e-02 -5.66167525e-03  3.60256358e-03 -1.68811194e-01]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((8, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([1.5735952963858392e+03,2.3761303919145971e+02,5.2332977870138201e+01,4.7281081235122091e+00,3.9325830426169639e-01,8.5907170030661746e+00,4.9039633283239870e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "6s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:45:45 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  6294.38495195        1
[INPUT] 0    0    [1    /1   ]  1573.52689799        1
[INPUT] 0    0    [1    /1   ]  237.923324905        1
[INPUT] 0    0    [1    /1   ]  51.8357068913        1
[INPUT] 0    0    [1    /1   ]  5.03368495747        1
[INPUT] 0    0    [1    /1   ]  0.37515830412        1
[INPUT] 1    0    [1    /1   ]  8.53688889371        1
[INPUT] 1    0    [1    /1   ]  0.537789685212       1

nuclear repulsion = 0
number of shells = 8
number of NR pGTOs = 12
number of NR cGTOs = 12
basis = {'Ar': [[0, [6294.384951947638, 1.0]], [0, [1573.526897989854, 1.0]], [0, [237.92332490452068, 1.0]], [0, [51.83570689131234, 1.0]], [0, [5.033684957472252, 1.0]], [0, [0.3751583041200674, 1.0]], [1, [8.536888893709898, 1.0]], [1, [0.5377896852120155, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [6294.38495195]
bas 1, expnt(s) = [1573.52689799]
bas 2, expnt(s) = [237.9233249]
bas 3, expnt(s) = [51.83570689]
bas 4, expnt(s) = [5.03368496]
bas 5, expnt(s) = [0.3751583]
bas 6, expnt(s) = [8.53688889]
bas 7, expnt(s) = [0.53778969]
CPU time:        15.35
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  1  1  1  0 36 37  0]
 [ 0  1  1  1  0 38 39  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 6.29438495e+03 1.78537726e+03 1.57352690e+03 6.31205323e+02
 2.37923325e+02 1.53053332e+02 5.18357069e+01 4.88075259e+01
 5.03368496e+00 8.49042730e+00 3.75158304e-01 1.21108869e+00
 8.53688889e+00 4.25705174e+01 5.37789685e-01 1.34353807e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.235592388948888
cond(S) = 16.524209988512826
E1 = -688.9127916300931  E_coul = 186.0440539455381
init E= -502.868737684555
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.635449386664575  LUMO = 180.888185501771
  mo_energy =
[-1.20995341e+02 -1.31456676e+01 -7.55183598e+00 -7.55183598e+00
 -7.55183598e+00 -1.62843570e+00 -6.35449387e-01 -6.35449387e-01
 -6.35449387e-01  1.80888186e+02  2.12690558e+03  1.27538474e+04]
E1 = -707.9604817411297  E_coul = 201.56288901788204
cycle= 1 E= -506.397592723248  delta_E= -3.53  |g|= 0.256  |ddm|= 0.34
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.371013
diis-c [-0.13765031  1.        ]
  HOMO = -0.124554764163429  LUMO = 182.404861313465
  mo_energy =
[-1.19463044e+02 -1.20196299e+01 -6.49057862e+00 -6.49057862e+00
 -6.49057862e+00 -1.08932723e+00 -1.24554764e-01 -1.24554764e-01
 -1.24554764e-01  1.82404861e+02  2.12837589e+03  1.27551481e+04]
E1 = -707.9514780279419  E_coul = 201.55378549235746
cycle= 2 E= -506.397692535584  delta_E= -9.98e-05  |g|= 0.00189  |ddm|= 0.00361
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00190687
diis-c [-2.65056049e-06 -2.68305912e-03  1.00268306e+00]
  HOMO = -0.124601098348219  LUMO = 182.403099297523
  mo_energy =
[-1.19465916e+02 -1.20199303e+01 -6.49099078e+00 -6.49099078e+00
 -6.49099078e+00 -1.08934410e+00 -1.24601098e-01 -1.24601098e-01
 -1.24601098e-01  1.82403099e+02  2.12836967e+03  1.27551394e+04]
E1 = -707.9514087049287  E_coul = 201.5537161609406
cycle= 3 E= -506.397692543988  delta_E= -8.4e-09  |g|= 1.89e-05  |ddm|= 3.04e-05
    CPU time for cycle= 3      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=2.52968e-05
diis-c [-7.68042508e-12  5.31952010e-05 -1.55082881e-02  1.01545509e+00]
  HOMO = -0.124601332228352  LUMO = 182.403093736839
  mo_energy =
[-1.19465928e+02 -1.20199318e+01 -6.49099335e+00 -6.49099335e+00
 -6.49099335e+00 -1.08934416e+00 -1.24601332e-01 -1.24601332e-01
 -1.24601332e-01  1.82403094e+02  2.12836966e+03  1.27551394e+04]
E1 = -707.9514082514376  E_coul = 201.5537157074487
cycle= 4 E= -506.397692543989  delta_E= -7.96e-13  |g|= 2.58e-08  |ddm|= 2.51e-07
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -707.9514082514376  E_coul = 201.5537157074487
  HOMO = -0.124601331809982  LUMO = 182.403093772224
  mo_energy =
[-1.19465928e+02 -1.20199318e+01 -6.49099334e+00 -6.49099334e+00
 -6.49099334e+00 -1.08934416e+00 -1.24601332e-01 -1.24601332e-01
 -1.24601332e-01  1.82403094e+02  2.12836966e+03  1.27551394e+04]
E1 = -707.9514082524648  E_coul = 201.5537157084762
Extra cycle  E= -506.397692543989  delta_E= 2.27e-13  |g|= 2.09e-10  |ddm|= 3.39e-10
    CPU time for scf_cycle      0.10 sec, wall time      0.10 sec
exp = [6.29438495e+03 1.57352690e+03 2.37923325e+02 5.18357069e+01
 5.03368496e+00 3.75158304e-01 8.53688889e+00 5.37789685e-01]
E = -506.3976925439886
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((8, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([1.5735952963858392e+03,2.3761303919145971e+02,5.2332977870138201e+01,4.7281081235122091e+00,3.9325830426169639e-01,8.5907170030661746e+00,4.9039633283239870e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "6s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:45:45 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  6294.38188763        1
[INPUT] 0    0    [1    /1   ]  1573.58254608        1
[INPUT] 0    0    [1    /1   ]  237.670891195        1
[INPUT] 0    0    [1    /1   ]  52.2402029531        1
[INPUT] 0    0    [1    /1   ]  4.78661735009        1
[INPUT] 0    0    [1    /1   ]  0.392485796594       1
[INPUT] 1    0    [1    /1   ]  8.58081752754        1
[INPUT] 1    0    [1    /1   ]  0.490759839726       1

nuclear repulsion = 0
number of shells = 8
number of NR pGTOs = 12
number of NR cGTOs = 12
basis = {'Ar': [[0, [6294.381887634491, 1.0]], [0, [1573.5825460799492, 1.0]], [0, [237.67089119482, 1.0]], [0, [52.24020295308173, 1.0]], [0, [4.7866173500883615, 1.0]], [0, [0.39248579659402594, 1.0]], [1, [8.580817527539429, 1.0]], [1, [0.4907598397264165, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [6294.38188763]
bas 1, expnt(s) = [1573.58254608]
bas 2, expnt(s) = [237.67089119]
bas 3, expnt(s) = [52.24020295]
bas 4, expnt(s) = [4.78661735]
bas 5, expnt(s) = [0.3924858]
bas 6, expnt(s) = [8.58081753]
bas 7, expnt(s) = [0.49075984]
CPU time:        15.53
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  1  1  1  0 36 37  0]
 [ 0  1  1  1  0 38 39  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 6.29438189e+03 1.78537661e+03 1.57358255e+03 6.31222065e+02
 2.37670891e+02 1.52931525e+02 5.22402030e+01 4.90928976e+01
 4.78661735e+00 8.17591857e+00 3.92485797e-01 1.25280357e+00
 8.58081753e+00 4.28445145e+01 4.90759840e-01 1.19831408e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.316763837221043
cond(S) = 16.507051756968234
E1 = -687.7374907277336  E_coul = 184.9395916207519
init E= -502.797899106982
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.681393513572639  LUMO = 180.783513366298
  mo_energy =
[-1.21086420e+02 -1.32656811e+01 -7.61689147e+00 -7.61689147e+00
 -7.61689147e+00 -1.65308226e+00 -6.81393514e-01 -6.81393514e-01
 -6.81393514e-01  1.80783513e+02  2.12681237e+03  1.27537401e+04]
E1 = -705.607758554425  E_coul = 199.12853737359836
cycle= 1 E= -506.479221180827  delta_E= -3.68  |g|= 0.276  |ddm|= 0.294
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.37363
diis-c [-0.1395994  1.       ]
  HOMO = -0.23383070264517  LUMO = 182.194766343185
  mo_energy =
[-1.19676052e+02 -1.22252591e+01 -6.63715534e+00 -6.63715534e+00
 -6.63715534e+00 -1.16113314e+00 -2.33830703e-01 -2.33830703e-01
 -2.33830703e-01  1.82194766e+02  2.12814654e+03  1.27548936e+04]
E1 = -705.5981771114299  E_coul = 199.11883484592684
cycle= 2 E= -506.479342265503  delta_E= -0.000121  |g|= 0.00226  |ddm|= 0.00395
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00235103
diis-c [-4.23771950e-06 -3.04871676e-03  1.00304872e+00]
  HOMO = -0.233873246613031  LUMO = 182.192980383096
  mo_energy =
[-1.19679064e+02 -1.22255742e+01 -6.63762002e+00 -6.63762002e+00
 -6.63762002e+00 -1.16115047e+00 -2.33873247e-01 -2.33873247e-01
 -2.33873247e-01  1.82192980e+02  2.12814043e+03  1.27548852e+04]
E1 = -705.5981009733155  E_coul = 199.11875869589846
cycle= 3 E= -506.479342277417  delta_E= -1.19e-08  |g|= 2.24e-05  |ddm|= 3.5e-05
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=3.03525e-05
diis-c [-8.10019511e-12  5.28207957e-05 -1.48864877e-02  1.01483367e+00]
  HOMO = -0.233873459276345  LUMO = 182.192975632688
  mo_energy =
[-1.19679077e+02 -1.22255758e+01 -6.63762290e+00 -6.63762290e+00
 -6.63762290e+00 -1.16115052e+00 -2.33873459e-01 -2.33873459e-01
 -2.33873459e-01  1.82192976e+02  2.12814042e+03  1.27548851e+04]
E1 = -705.5981004878332  E_coul = 199.11875821041448
cycle= 4 E= -506.479342277419  delta_E= -1.71e-12  |g|= 2.63e-08  |ddm|= 2.87e-07
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -705.5981004878332  E_coul = 199.11875821041448
  HOMO = -0.233873458944983  LUMO = 182.192975668441
  mo_energy =
[-1.19679077e+02 -1.22255758e+01 -6.63762290e+00 -6.63762290e+00
 -6.63762290e+00 -1.16115052e+00 -2.33873459e-01 -2.33873459e-01
 -2.33873459e-01  1.82192976e+02  2.12814042e+03  1.27548851e+04]
E1 = -705.5981004888378  E_coul = 199.11875821141976
Extra cycle  E= -506.479342277418  delta_E= 6.82e-13  |g|= 2.1e-10  |ddm|= 3.23e-10
    CPU time for scf_cycle      0.10 sec, wall time      0.10 sec
exp = [6.29438189e+03 1.57358255e+03 2.37670891e+02 5.22402030e+01
 4.78661735e+00 3.92485797e-01 8.58081753e+00 4.90759840e-01]
E = -506.479342277418
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((8, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([1.5735952963858392e+03,2.3761303919145971e+02,5.2332977870138201e+01,4.7281081235122091e+00,3.9325830426169639e-01,8.5907170030661746e+00,4.9039633283239870e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "6s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:45:46 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  6294.38173345        1
[INPUT] 0    0    [1    /1   ]  1573.58534615        1
[INPUT] 0    0    [1    /1   ]  237.658189364        1
[INPUT] 0    0    [1    /1   ]  52.2605561795        1
[INPUT] 0    0    [1    /1   ]  4.77418552829        1
[INPUT] 0    0    [1    /1   ]  0.393357672519       1
[INPUT] 1    0    [1    /1   ]  8.58302790612        1
[INPUT] 1    0    [1    /1   ]  0.488393415959       1

nuclear repulsion = 0
number of shells = 8
number of NR pGTOs = 12
number of NR cGTOs = 12
basis = {'Ar': [[0, [6294.381733445945, 1.0]], [0, [1573.5853461521515, 1.0]], [0, [237.65818936422272, 1.0]], [0, [52.26055617951872, 1.0]], [0, [4.774185528289322, 1.0]], [0, [0.3933576725187632, 1.0]], [1, [8.583027906121334, 1.0]], [1, [0.48839341595883246, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [6294.38173345]
bas 1, expnt(s) = [1573.58534615]
bas 2, expnt(s) = [237.65818936]
bas 3, expnt(s) = [52.26055618]
bas 4, expnt(s) = [4.77418553]
bas 5, expnt(s) = [0.39335767]
bas 6, expnt(s) = [8.58302791]
bas 7, expnt(s) = [0.48839342]
CPU time:        15.72
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  1  1  1  0 36 37  0]
 [ 0  1  1  1  0 38 39  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 6.29438173e+03 1.78537658e+03 1.57358535e+03 6.31222907e+02
 2.37658189e+02 1.52925395e+02 5.22605562e+01 4.91072421e+01
 4.77418553e+00 8.15998750e+00 3.93357673e-01 1.25489025e+00
 8.58302791e+00 4.28583106e+01 4.88393416e-01 1.19109566e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.31985600508512
cond(S) = 16.506292841618635
E1 = -687.6521148620999  E_coul = 184.8654142766021
init E= -502.786700585498
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.683967584070983  LUMO = 180.776864570362
  mo_energy =
[-1.21092345e+02 -1.32723406e+01 -7.62156145e+00 -7.62156145e+00
 -7.62156145e+00 -1.65502501e+00 -6.83967584e-01 -6.83967584e-01
 -6.83967584e-01  1.80776865e+02  2.12680646e+03  1.27537335e+04]
E1 = -705.4798638784613  E_coul = 199.0004505735868
cycle= 1 E= -506.479413304874  delta_E= -3.69  |g|= 0.277  |ddm|= 0.292
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.373855
diis-c [-0.13976783  1.        ]
  HOMO = -0.239028082525192  LUMO = 182.183812741143
  mo_energy =
[-1.19687133e+02 -1.22353622e+01 -6.64502355e+00 -6.64502355e+00
 -6.64502355e+00 -1.16489202e+00 -2.39028083e-01 -2.39028083e-01
 -2.39028083e-01  1.82183813e+02  2.12813476e+03  1.27548806e+04]
E1 = -705.4702518083425  E_coul = 198.99071616330727
cycle= 2 E= -506.479535645035  delta_E= -0.000122  |g|= 0.00228  |ddm|= 0.00397
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.0023746
diis-c [-4.32746706e-06 -3.07242979e-03  1.00307243e+00]
  HOMO = -0.23907042340351  LUMO = 182.182025355747
  mo_energy =
[-1.19690153e+02 -1.22356781e+01 -6.64549103e+00 -6.64549103e+00
 -6.64549103e+00 -1.16490938e+00 -2.39070423e-01 -2.39070423e-01
 -2.39070423e-01  1.82182025e+02  2.12812865e+03  1.27548721e+04]
E1 = -705.4701753231518  E_coul = 198.99063966600224
cycle= 3 E= -506.47953565715  delta_E= -1.21e-08  |g|= 2.25e-05  |ddm|= 3.52e-05
    CPU time for cycle= 3      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=3.0587e-05
diis-c [-8.13904094e-12  5.28022818e-05 -1.48505272e-02  1.01479772e+00]
  HOMO = -0.239070634603733  LUMO = 182.182020657437
  mo_energy =
[-1.19690165e+02 -1.22356797e+01 -6.64549393e+00 -6.64549393e+00
 -6.64549393e+00 -1.16490944e+00 -2.39070635e-01 -2.39070635e-01
 -2.39070635e-01  1.82182021e+02  2.12812864e+03  1.27548721e+04]
E1 = -705.4701748366915  E_coul = 198.9906391795409
cycle= 4 E= -506.479535657151  delta_E= -1.08e-12  |g|= 2.64e-08  |ddm|= 2.88e-07
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -705.4701748366915  E_coul = 198.9906391795409
  HOMO = -0.239070634276484  LUMO = 182.182020693224
  mo_energy =
[-1.19690165e+02 -1.22356797e+01 -6.64549392e+00 -6.64549392e+00
 -6.64549392e+00 -1.16490944e+00 -2.39070634e-01 -2.39070634e-01
 -2.39070634e-01  1.82182021e+02  2.12812864e+03  1.27548721e+04]
E1 = -705.4701748376957  E_coul = 198.9906391805453
Extra cycle  E= -506.47953565715  delta_E= 1.71e-13  |g|= 2.08e-10  |ddm|= 3.22e-10
    CPU time for scf_cycle      0.10 sec, wall time      0.10 sec
exp = [6.29438173e+03 1.57358535e+03 2.37658189e+02 5.22605562e+01
 4.77418553e+00 3.93357673e-01 8.58302791e+00 4.88393416e-01]
E = -506.47953565715045
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((8, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([1.5735952963858392e+03,2.3761303919145971e+02,5.2332977870138201e+01,4.7281081235122091e+00,3.9325830426169639e-01,8.5907170030661746e+00,4.9039633283239870e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "6s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:45:46 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  6294.38173345        1
[INPUT] 0    0    [1    /1   ]  1573.58534615        1
[INPUT] 0    0    [1    /1   ]  237.658189364        1
[INPUT] 0    0    [1    /1   ]  52.2605561795        1
[INPUT] 0    0    [1    /1   ]  4.77418552829        1
[INPUT] 0    0    [1    /1   ]  0.393357672519       1
[INPUT] 1    0    [1    /1   ]  8.58302790612        1
[INPUT] 1    0    [1    /1   ]  0.488393415959       1

nuclear repulsion = 0
number of shells = 8
number of NR pGTOs = 12
number of NR cGTOs = 12
basis = {'Ar': [[0, [6294.381733445945, 1.0]], [0, [1573.5853461521515, 1.0]], [0, [237.65818936422272, 1.0]], [0, [52.26055617951872, 1.0]], [0, [4.774185528289322, 1.0]], [0, [0.3933576725187632, 1.0]], [1, [8.583027906121334, 1.0]], [1, [0.48839341595883246, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [6294.38173345]
bas 1, expnt(s) = [1573.58534615]
bas 2, expnt(s) = [237.65818936]
bas 3, expnt(s) = [52.26055618]
bas 4, expnt(s) = [4.77418553]
bas 5, expnt(s) = [0.39335767]
bas 6, expnt(s) = [8.58302791]
bas 7, expnt(s) = [0.48839342]
CPU time:        15.90
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  1  1  1  0 36 37  0]
 [ 0  1  1  1  0 38 39  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 6.29438173e+03 1.78537658e+03 1.57358535e+03 6.31222907e+02
 2.37658189e+02 1.52925395e+02 5.22605562e+01 4.91072421e+01
 4.77418553e+00 8.15998750e+00 3.93357673e-01 1.25489025e+00
 8.58302791e+00 4.28583106e+01 4.88393416e-01 1.19109566e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.31985600508512
cond(S) = 16.506292841618635
E1 = -687.6521148620999  E_coul = 184.8654142766021
init E= -502.786700585498
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.683967584070983  LUMO = 180.776864570362
  mo_energy =
[-1.21092345e+02 -1.32723406e+01 -7.62156145e+00 -7.62156145e+00
 -7.62156145e+00 -1.65502501e+00 -6.83967584e-01 -6.83967584e-01
 -6.83967584e-01  1.80776865e+02  2.12680646e+03  1.27537335e+04]
E1 = -705.4798638784613  E_coul = 199.0004505735868
cycle= 1 E= -506.479413304874  delta_E= -3.69  |g|= 0.277  |ddm|= 0.292
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.373855
diis-c [-0.13976783  1.        ]
  HOMO = -0.239028082525192  LUMO = 182.183812741143
  mo_energy =
[-1.19687133e+02 -1.22353622e+01 -6.64502355e+00 -6.64502355e+00
 -6.64502355e+00 -1.16489202e+00 -2.39028083e-01 -2.39028083e-01
 -2.39028083e-01  1.82183813e+02  2.12813476e+03  1.27548806e+04]
E1 = -705.4702518083425  E_coul = 198.99071616330727
cycle= 2 E= -506.479535645035  delta_E= -0.000122  |g|= 0.00228  |ddm|= 0.00397
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.0023746
diis-c [-4.32746706e-06 -3.07242979e-03  1.00307243e+00]
  HOMO = -0.23907042340351  LUMO = 182.182025355747
  mo_energy =
[-1.19690153e+02 -1.22356781e+01 -6.64549103e+00 -6.64549103e+00
 -6.64549103e+00 -1.16490938e+00 -2.39070423e-01 -2.39070423e-01
 -2.39070423e-01  1.82182025e+02  2.12812865e+03  1.27548721e+04]
E1 = -705.4701753231518  E_coul = 198.99063966600224
cycle= 3 E= -506.47953565715  delta_E= -1.21e-08  |g|= 2.25e-05  |ddm|= 3.52e-05
    CPU time for cycle= 3      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=3.0587e-05
diis-c [-8.13904094e-12  5.28022818e-05 -1.48505272e-02  1.01479772e+00]
  HOMO = -0.239070634603733  LUMO = 182.182020657437
  mo_energy =
[-1.19690165e+02 -1.22356797e+01 -6.64549393e+00 -6.64549393e+00
 -6.64549393e+00 -1.16490944e+00 -2.39070635e-01 -2.39070635e-01
 -2.39070635e-01  1.82182021e+02  2.12812864e+03  1.27548721e+04]
E1 = -705.4701748366915  E_coul = 198.9906391795409
cycle= 4 E= -506.479535657151  delta_E= -1.08e-12  |g|= 2.64e-08  |ddm|= 2.88e-07
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -705.4701748366915  E_coul = 198.9906391795409
  HOMO = -0.239070634276484  LUMO = 182.182020693224
  mo_energy =
[-1.19690165e+02 -1.22356797e+01 -6.64549392e+00 -6.64549392e+00
 -6.64549392e+00 -1.16490944e+00 -2.39070634e-01 -2.39070634e-01
 -2.39070634e-01  1.82182021e+02  2.12812864e+03  1.27548721e+04]
E1 = -705.4701748376957  E_coul = 198.9906391805453
Extra cycle  E= -506.47953565715  delta_E= 1.71e-13  |g|= 2.08e-10  |ddm|= 3.22e-10
    CPU time for scf_cycle      0.09 sec, wall time      0.10 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 16.506292841618635
E1 = -705.4701748376957  E_coul = 198.9906391805453
init E= -506.47953565715
    CPU time for initialize scf      0.06 sec, wall time      0.06 sec
  HOMO = -0.239070634274005  LUMO = 182.182020693488
  mo_energy =
[-1.19690165e+02 -1.22356797e+01 -6.64549392e+00 -6.64549392e+00
 -6.64549392e+00 -1.16490944e+00 -2.39070634e-01 -2.39070634e-01
 -2.39070634e-01  1.82182021e+02  2.12812864e+03  1.27548721e+04]
E1 = -705.470174837704  E_coul = 198.99063918055333
cycle= 1 E= -506.479535657151  delta_E= -2.27e-13  |g|= 4.49e-12  |ddm|= 2.66e-12
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -705.470174837704  E_coul = 198.99063918055333
  HOMO = -0.239070634273977  LUMO = 182.18202069349
  mo_energy =
[-1.19690165e+02 -1.22356797e+01 -6.64549392e+00 -6.64549392e+00
 -6.64549392e+00 -1.16490944e+00 -2.39070634e-01 -2.39070634e-01
 -2.39070634e-01  1.82182021e+02  2.12812864e+03  1.27548721e+04]
E1 = -705.470174837704  E_coul = 198.99063918055333
Extra cycle  E= -506.479535657151  delta_E=    0  |g|= 2.16e-12  |ddm|= 1.48e-14
    CPU time for scf_cycle      0.13 sec, wall time      0.13 sec
exp = [6.29438173e+03 1.57358535e+03 2.37658189e+02 5.22605562e+01
 4.77418553e+00 3.93357673e-01 8.58302791e+00 4.88393416e-01]
grad_E = [-9.00578973e-05  1.62915219e-03 -7.10357189e-03  9.85551329e-03
  3.39510501e-02 -1.48738488e-02 -6.37644207e-04 -5.94964253e-02]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((8, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([1.5735952963858392e+03,2.3761303919145971e+02,5.2332977870138201e+01,4.7281081235122091e+00,3.9325830426169639e-01,8.5907170030661746e+00,4.9039633283239870e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "6s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:45:49 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  6294.38194294        1
[INPUT] 0    0    [1    /1   ]  1573.58154671        1
[INPUT] 0    0    [1    /1   ]  237.675199464        1
[INPUT] 0    0    [1    /1   ]  52.2345004397        1
[INPUT] 0    0    [1    /1   ]  4.75874723557        1
[INPUT] 0    0    [1    /1   ]  0.393899988555       1
[INPUT] 1    0    [1    /1   ]  8.58270356996        1
[INPUT] 1    0    [1    /1   ]  0.490253022072       1

nuclear repulsion = 0
number of shells = 8
number of NR pGTOs = 12
number of NR cGTOs = 12
basis = {'Ar': [[0, [6294.381942938202, 1.0]], [0, [1573.5815467089967, 1.0]], [0, [237.6751994641684, 1.0]], [0, [52.23450043968055, 1.0]], [0, [4.758747235569299, 1.0]], [0, [0.39389998855513897, 1.0]], [1, [8.582703569961085, 1.0]], [1, [0.49025302207220955, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [6294.38194294]
bas 1, expnt(s) = [1573.58154671]
bas 2, expnt(s) = [237.67519946]
bas 3, expnt(s) = [52.23450044]
bas 4, expnt(s) = [4.75874724]
bas 5, expnt(s) = [0.39389999]
bas 6, expnt(s) = [8.58270357]
bas 7, expnt(s) = [0.49025302]
CPU time:        18.86
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  1  1  1  0 36 37  0]
 [ 0  1  1  1  0 38 39  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 6.29438194e+03 1.78537662e+03 1.57358155e+03 6.31221764e+02
 2.37675199e+02 1.52933604e+02 5.22345004e+01 4.90888783e+01
 4.75874724e+00 8.14018926e+00 3.93899989e-01 1.25618760e+00
 8.58270357e+00 4.28562862e+01 4.90253022e-01 1.19676738e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.317719902480764
cond(S) = 16.495604569808172
E1 = -687.7064951842966  E_coul = 184.91086639894456
init E= -502.795628785352
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.681491233676044  LUMO = 180.655009651884
  mo_energy =
[-1.21090618e+02 -1.32682986e+01 -7.61937893e+00 -7.61937893e+00
 -7.61937893e+00 -1.65282807e+00 -6.81491234e-01 -6.81491234e-01
 -6.81491234e-01  1.80655010e+02  2.12672310e+03  1.27536657e+04]
E1 = -705.5437617518139  E_coul = 199.0635127071054
cycle= 1 E= -506.480249044709  delta_E= -3.68  |g|= 0.278  |ddm|= 0.294
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.372669
diis-c [-0.13888248  1.        ]
  HOMO = -0.234821304379577  LUMO = 182.061564104197
  mo_energy =
[-1.19686948e+02 -1.22301543e+01 -6.64177332e+00 -6.64177332e+00
 -6.64177332e+00 -1.16154373e+00 -2.34821304e-01 -2.34821304e-01
 -2.34821304e-01  1.82061564e+02  2.12804692e+03  1.27548073e+04]
E1 = -705.5340655157512  E_coul = 199.05369194488685
cycle= 2 E= -506.480373570864  delta_E= -0.000125  |g|= 0.0023  |ddm|= 0.00401
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00240206
diis-c [-4.45494619e-06 -3.08657079e-03  1.00308657e+00]
  HOMO = -0.234864284984671  LUMO = 182.059763084662
  mo_energy =
[-1.19689993e+02 -1.22304724e+01 -6.64224543e+00 -6.64224543e+00
 -6.64224543e+00 -1.16156119e+00 -2.34864285e-01 -2.34864285e-01
 -2.34864285e-01  1.82059763e+02  2.12804078e+03  1.27547988e+04]
E1 = -705.5339882648491  E_coul = 199.0536146815824
cycle= 3 E= -506.480373583267  delta_E= -1.24e-08  |g|= 2.28e-05  |ddm|= 3.56e-05
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=3.09512e-05
diis-c [-8.41360750e-12  5.26078361e-05 -1.48158588e-02  1.01476325e+00]
  HOMO = -0.234864499581436  LUMO = 182.059758378269
  mo_energy =
[-1.19690006e+02 -1.22304740e+01 -6.64224836e+00 -6.64224836e+00
 -6.64224836e+00 -1.16156124e+00 -2.34864500e-01 -2.34864500e-01
 -2.34864500e-01  1.82059758e+02  2.12804077e+03  1.27547988e+04]
E1 = -705.533987774152  E_coul = 199.05361419088436
cycle= 4 E= -506.480373583268  delta_E= -1.02e-12  |g|= 2.67e-08  |ddm|= 2.91e-07
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -705.533987774152  E_coul = 199.05361419088436
  HOMO = -0.234864499246478  LUMO = 182.059758414574
  mo_energy =
[-1.19690006e+02 -1.22304740e+01 -6.64224835e+00 -6.64224835e+00
 -6.64224835e+00 -1.16156124e+00 -2.34864499e-01 -2.34864499e-01
 -2.34864499e-01  1.82059758e+02  2.12804077e+03  1.27547988e+04]
E1 = -705.5339877751678  E_coul = 199.0536141919004
Extra cycle  E= -506.480373583267  delta_E= 2.84e-13  |g|= 2.11e-10  |ddm|= 3.25e-10
    CPU time for scf_cycle      0.10 sec, wall time      0.10 sec
exp = [6.29438194e+03 1.57358155e+03 2.37675199e+02 5.22345004e+01
 4.75874724e+00 3.93899989e-01 8.58270357e+00 4.90253022e-01]
E = -506.4803735832674
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((8, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([1.5735952963858392e+03,2.3761303919145971e+02,5.2332977870138201e+01,4.7281081235122091e+00,3.9325830426169639e-01,8.5907170030661746e+00,4.9039633283239870e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "6s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:45:49 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  6294.38194294        1
[INPUT] 0    0    [1    /1   ]  1573.58154671        1
[INPUT] 0    0    [1    /1   ]  237.675199464        1
[INPUT] 0    0    [1    /1   ]  52.2345004397        1
[INPUT] 0    0    [1    /1   ]  4.75874723557        1
[INPUT] 0    0    [1    /1   ]  0.393899988555       1
[INPUT] 1    0    [1    /1   ]  8.58270356996        1
[INPUT] 1    0    [1    /1   ]  0.490253022072       1

nuclear repulsion = 0
number of shells = 8
number of NR pGTOs = 12
number of NR cGTOs = 12
basis = {'Ar': [[0, [6294.381942938202, 1.0]], [0, [1573.5815467089967, 1.0]], [0, [237.6751994641684, 1.0]], [0, [52.23450043968055, 1.0]], [0, [4.758747235569299, 1.0]], [0, [0.39389998855513897, 1.0]], [1, [8.582703569961085, 1.0]], [1, [0.49025302207220955, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [6294.38194294]
bas 1, expnt(s) = [1573.58154671]
bas 2, expnt(s) = [237.67519946]
bas 3, expnt(s) = [52.23450044]
bas 4, expnt(s) = [4.75874724]
bas 5, expnt(s) = [0.39389999]
bas 6, expnt(s) = [8.58270357]
bas 7, expnt(s) = [0.49025302]
CPU time:        19.05
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  1  1  1  0 36 37  0]
 [ 0  1  1  1  0 38 39  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 6.29438194e+03 1.78537662e+03 1.57358155e+03 6.31221764e+02
 2.37675199e+02 1.52933604e+02 5.22345004e+01 4.90888783e+01
 4.75874724e+00 8.14018926e+00 3.93899989e-01 1.25618760e+00
 8.58270357e+00 4.28562862e+01 4.90253022e-01 1.19676738e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.317719902480764
cond(S) = 16.495604569808172
E1 = -687.7064951842966  E_coul = 184.91086639894456
init E= -502.795628785352
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.681491233676044  LUMO = 180.655009651884
  mo_energy =
[-1.21090618e+02 -1.32682986e+01 -7.61937893e+00 -7.61937893e+00
 -7.61937893e+00 -1.65282807e+00 -6.81491234e-01 -6.81491234e-01
 -6.81491234e-01  1.80655010e+02  2.12672310e+03  1.27536657e+04]
E1 = -705.5437617518139  E_coul = 199.0635127071054
cycle= 1 E= -506.480249044709  delta_E= -3.68  |g|= 0.278  |ddm|= 0.294
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.372669
diis-c [-0.13888248  1.        ]
  HOMO = -0.234821304379577  LUMO = 182.061564104197
  mo_energy =
[-1.19686948e+02 -1.22301543e+01 -6.64177332e+00 -6.64177332e+00
 -6.64177332e+00 -1.16154373e+00 -2.34821304e-01 -2.34821304e-01
 -2.34821304e-01  1.82061564e+02  2.12804692e+03  1.27548073e+04]
E1 = -705.5340655157512  E_coul = 199.05369194488685
cycle= 2 E= -506.480373570864  delta_E= -0.000125  |g|= 0.0023  |ddm|= 0.00401
    CPU time for cycle= 2      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.00240206
diis-c [-4.45494619e-06 -3.08657079e-03  1.00308657e+00]
  HOMO = -0.234864284984671  LUMO = 182.059763084662
  mo_energy =
[-1.19689993e+02 -1.22304724e+01 -6.64224543e+00 -6.64224543e+00
 -6.64224543e+00 -1.16156119e+00 -2.34864285e-01 -2.34864285e-01
 -2.34864285e-01  1.82059763e+02  2.12804078e+03  1.27547988e+04]
E1 = -705.5339882648491  E_coul = 199.0536146815824
cycle= 3 E= -506.480373583267  delta_E= -1.24e-08  |g|= 2.28e-05  |ddm|= 3.56e-05
    CPU time for cycle= 3      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=3.09512e-05
diis-c [-8.41360750e-12  5.26078361e-05 -1.48158588e-02  1.01476325e+00]
  HOMO = -0.234864499581436  LUMO = 182.059758378269
  mo_energy =
[-1.19690006e+02 -1.22304740e+01 -6.64224836e+00 -6.64224836e+00
 -6.64224836e+00 -1.16156124e+00 -2.34864500e-01 -2.34864500e-01
 -2.34864500e-01  1.82059758e+02  2.12804077e+03  1.27547988e+04]
E1 = -705.533987774152  E_coul = 199.05361419088436
cycle= 4 E= -506.480373583268  delta_E= -1.02e-12  |g|= 2.67e-08  |ddm|= 2.91e-07
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -705.533987774152  E_coul = 199.05361419088436
  HOMO = -0.234864499246478  LUMO = 182.059758414574
  mo_energy =
[-1.19690006e+02 -1.22304740e+01 -6.64224835e+00 -6.64224835e+00
 -6.64224835e+00 -1.16156124e+00 -2.34864499e-01 -2.34864499e-01
 -2.34864499e-01  1.82059758e+02  2.12804077e+03  1.27547988e+04]
E1 = -705.5339877751678  E_coul = 199.0536141919004
Extra cycle  E= -506.480373583267  delta_E= 2.84e-13  |g|= 2.11e-10  |ddm|= 3.25e-10
    CPU time for scf_cycle      0.09 sec, wall time      0.10 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 16.495604569808172
E1 = -705.5339877751678  E_coul = 199.0536141919004
init E= -506.480373583267
    CPU time for initialize scf      0.05 sec, wall time      0.06 sec
  HOMO = -0.234864499243953  LUMO = 182.059758414842
  mo_energy =
[-1.19690006e+02 -1.22304740e+01 -6.64224835e+00 -6.64224835e+00
 -6.64224835e+00 -1.16156124e+00 -2.34864499e-01 -2.34864499e-01
 -2.34864499e-01  1.82059758e+02  2.12804077e+03  1.27547988e+04]
E1 = -705.5339877751765  E_coul = 199.0536141919086
cycle= 1 E= -506.480373583268  delta_E= -4.55e-13  |g|= 2.16e-12  |ddm|= 2.67e-12
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -705.5339877751765  E_coul = 199.0536141919086
  HOMO = -0.234864499243928  LUMO = 182.059758414844
  mo_energy =
[-1.19690006e+02 -1.22304740e+01 -6.64224835e+00 -6.64224835e+00
 -6.64224835e+00 -1.16156124e+00 -2.34864499e-01 -2.34864499e-01
 -2.34864499e-01  1.82059758e+02  2.12804077e+03  1.27547988e+04]
E1 = -705.5339877751763  E_coul = 199.05361419190862
Extra cycle  E= -506.480373583268  delta_E= 1.71e-13  |g|= 2.56e-12  |ddm|= 2.98e-14
    CPU time for scf_cycle      0.12 sec, wall time      0.12 sec
exp = [6.29438194e+03 1.57358155e+03 2.37675199e+02 5.22345004e+01
 4.75874724e+00 3.93899989e-01 8.58270357e+00 4.90253022e-01]
grad_E = [-9.00069590e-05  1.62604116e-03 -6.98440906e-03  9.07960020e-03
  1.98561547e-02  1.33111309e-04 -3.74070488e-03  9.42198567e-03]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((8, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([1.5735952963858392e+03,2.3761303919145971e+02,5.2332977870138201e+01,4.7281081235122091e+00,3.9325830426169639e-01,8.5907170030661746e+00,4.9039633283239870e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "6s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:45:52 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  6294.3831085         1
[INPUT] 0    0    [1    /1   ]  1573.56041008        1
[INPUT] 0    0    [1    /1   ]  237.769697959        1
[INPUT] 0    0    [1    /1   ]  52.0905132287        1
[INPUT] 0    0    [1    /1   ]  4.73347684125        1
[INPUT] 0    0    [1    /1   ]  0.394435976803       1
[INPUT] 1    0    [1    /1   ]  8.58306354826        1
[INPUT] 1    0    [1    /1   ]  0.492620436562       1

nuclear repulsion = 0
number of shells = 8
number of NR pGTOs = 12
number of NR cGTOs = 12
basis = {'Ar': [[0, [6294.383108501321, 1.0]], [0, [1573.5604100822702, 1.0]], [0, [237.76969795940693, 1.0]], [0, [52.09051322874774, 1.0]], [0, [4.733476841249035, 1.0]], [0, [0.3944359768030874, 1.0]], [1, [8.58306354826414, 1.0]], [1, [0.4926204365615546, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [6294.3831085]
bas 1, expnt(s) = [1573.56041008]
bas 2, expnt(s) = [237.76969796]
bas 3, expnt(s) = [52.09051323]
bas 4, expnt(s) = [4.73347684]
bas 5, expnt(s) = [0.39443598]
bas 6, expnt(s) = [8.58306355]
bas 7, expnt(s) = [0.49262044]
CPU time:        21.85
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  1  1  1  0 36 37  0]
 [ 0  1  1  1  0 38 39  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 6.29438311e+03 1.78537687e+03 1.57356041e+03 6.31215405e+02
 2.37769698e+02 1.52979206e+02 5.20905132e+01 4.89873562e+01
 4.73347684e+00 8.10774753e+00 3.94435977e-01 1.25746937e+00
 8.58306355e+00 4.28585331e+01 4.92620437e-01 1.20399567e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.315043024128208
cond(S) = 16.459578074957832
E1 = -687.7773808584718  E_coul = 184.95659357533458
init E= -502.820787283137
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.678474353171345  LUMO = 180.212280033921
  mo_energy =
[-1.21091625e+02 -1.32627190e+01 -7.61770458e+00 -7.61770458e+00
 -7.61770458e+00 -1.64983450e+00 -6.78474353e-01 -6.78474353e-01
 -6.78474353e-01  1.80212280e+02  2.12642218e+03  1.27534221e+04]
E1 = -705.6006043994704  E_coul = 199.11861145247565
cycle= 1 E= -506.481992946995  delta_E= -3.66  |g|= 0.278  |ddm|= 0.297
    CPU time for cycle= 1      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.367655
diis-c [-0.13516983  1.        ]
  HOMO = -0.229695340312783  LUMO = 181.615201982969
  mo_energy =
[-1.19693720e+02 -1.22237102e+01 -6.63930626e+00 -6.63930626e+00
 -6.63930626e+00 -1.15731911e+00 -2.29695340e-01 -2.29695340e-01
 -2.29695340e-01  1.81615202e+02  2.12773139e+03  1.27545465e+04]
E1 = -705.5907119401087  E_coul = 199.10859047008984
cycle= 2 E= -506.482121470019  delta_E= -0.000129  |g|= 0.00233  |ddm|= 0.00408
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.00243978
diis-c [-4.67496942e-06 -3.08383567e-03  1.00308384e+00]
  HOMO = -0.229739439679737  LUMO = 181.613361128389
  mo_energy =
[-1.19696829e+02 -1.22240332e+01 -6.63978803e+00 -6.63978803e+00
 -6.63978803e+00 -1.15733678e+00 -2.29739440e-01 -2.29739440e-01
 -2.29739440e-01  1.81613361e+02  2.12772512e+03  1.27545379e+04]
E1 = -705.5906330068708  E_coul = 199.10851152396228
cycle= 3 E= -506.482121482908  delta_E= -1.29e-08  |g|= 2.32e-05  |ddm|= 3.63e-05
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=3.16092e-05
diis-c [-9.29305467e-12  5.19742758e-05 -1.47752162e-02  1.01472324e+00]
  HOMO = -0.229739661009467  LUMO = 181.613356287957
  mo_energy =
[-1.19696842e+02 -1.22240348e+01 -6.63979102e+00 -6.63979102e+00
 -6.63979102e+00 -1.15733684e+00 -2.29739661e-01 -2.29739661e-01
 -2.29739661e-01  1.81613356e+02  2.12772512e+03  1.27545379e+04]
E1 = -705.5906325048335  E_coul = 199.10851102192353
cycle= 4 E= -506.48212148291  delta_E= -1.48e-12  |g|= 2.77e-08  |ddm|= 2.97e-07
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -705.5906325048335  E_coul = 199.10851102192353
  HOMO = -0.229739660651227  LUMO = 181.613356325933
  mo_energy =
[-1.19696842e+02 -1.22240348e+01 -6.63979101e+00 -6.63979101e+00
 -6.63979101e+00 -1.15733684e+00 -2.29739661e-01 -2.29739661e-01
 -2.29739661e-01  1.81613356e+02  2.12772512e+03  1.27545379e+04]
E1 = -705.5906325058895  E_coul = 199.10851102298008
Extra cycle  E= -506.482121482909  delta_E= 5.68e-13  |g|= 2.18e-10  |ddm|= 3.37e-10
    CPU time for scf_cycle      0.09 sec, wall time      0.10 sec
exp = [6.29438311e+03 1.57356041e+03 2.37769698e+02 5.20905132e+01
 4.73347684e+00 3.94435977e-01 8.58306355e+00 4.92620437e-01]
E = -506.4821214829094
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((8, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([1.5735952963858392e+03,2.3761303919145971e+02,5.2332977870138201e+01,4.7281081235122091e+00,3.9325830426169639e-01,8.5907170030661746e+00,4.9039633283239870e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "6s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:45:52 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  6294.3831085         1
[INPUT] 0    0    [1    /1   ]  1573.56041008        1
[INPUT] 0    0    [1    /1   ]  237.769697959        1
[INPUT] 0    0    [1    /1   ]  52.0905132287        1
[INPUT] 0    0    [1    /1   ]  4.73347684125        1
[INPUT] 0    0    [1    /1   ]  0.394435976803       1
[INPUT] 1    0    [1    /1   ]  8.58306354826        1
[INPUT] 1    0    [1    /1   ]  0.492620436562       1

nuclear repulsion = 0
number of shells = 8
number of NR pGTOs = 12
number of NR cGTOs = 12
basis = {'Ar': [[0, [6294.383108501321, 1.0]], [0, [1573.5604100822702, 1.0]], [0, [237.76969795940693, 1.0]], [0, [52.09051322874774, 1.0]], [0, [4.733476841249035, 1.0]], [0, [0.3944359768030874, 1.0]], [1, [8.58306354826414, 1.0]], [1, [0.4926204365615546, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [6294.3831085]
bas 1, expnt(s) = [1573.56041008]
bas 2, expnt(s) = [237.76969796]
bas 3, expnt(s) = [52.09051323]
bas 4, expnt(s) = [4.73347684]
bas 5, expnt(s) = [0.39443598]
bas 6, expnt(s) = [8.58306355]
bas 7, expnt(s) = [0.49262044]
CPU time:        22.06
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  1  1  1  0 36 37  0]
 [ 0  1  1  1  0 38 39  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 6.29438311e+03 1.78537687e+03 1.57356041e+03 6.31215405e+02
 2.37769698e+02 1.52979206e+02 5.20905132e+01 4.89873562e+01
 4.73347684e+00 8.10774753e+00 3.94435977e-01 1.25746937e+00
 8.58306355e+00 4.28585331e+01 4.92620437e-01 1.20399567e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.315043024128208
cond(S) = 16.459578074957832
E1 = -687.7773808584718  E_coul = 184.95659357533458
init E= -502.820787283137
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.678474353171345  LUMO = 180.212280033921
  mo_energy =
[-1.21091625e+02 -1.32627190e+01 -7.61770458e+00 -7.61770458e+00
 -7.61770458e+00 -1.64983450e+00 -6.78474353e-01 -6.78474353e-01
 -6.78474353e-01  1.80212280e+02  2.12642218e+03  1.27534221e+04]
E1 = -705.6006043994704  E_coul = 199.11861145247565
cycle= 1 E= -506.481992946995  delta_E= -3.66  |g|= 0.278  |ddm|= 0.297
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.367655
diis-c [-0.13516983  1.        ]
  HOMO = -0.229695340312783  LUMO = 181.615201982969
  mo_energy =
[-1.19693720e+02 -1.22237102e+01 -6.63930626e+00 -6.63930626e+00
 -6.63930626e+00 -1.15731911e+00 -2.29695340e-01 -2.29695340e-01
 -2.29695340e-01  1.81615202e+02  2.12773139e+03  1.27545465e+04]
E1 = -705.5907119401087  E_coul = 199.10859047008984
cycle= 2 E= -506.482121470019  delta_E= -0.000129  |g|= 0.00233  |ddm|= 0.00408
    CPU time for cycle= 2      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.00243978
diis-c [-4.67496942e-06 -3.08383567e-03  1.00308384e+00]
  HOMO = -0.229739439679737  LUMO = 181.613361128389
  mo_energy =
[-1.19696829e+02 -1.22240332e+01 -6.63978803e+00 -6.63978803e+00
 -6.63978803e+00 -1.15733678e+00 -2.29739440e-01 -2.29739440e-01
 -2.29739440e-01  1.81613361e+02  2.12772512e+03  1.27545379e+04]
E1 = -705.5906330068708  E_coul = 199.10851152396228
cycle= 3 E= -506.482121482908  delta_E= -1.29e-08  |g|= 2.32e-05  |ddm|= 3.63e-05
    CPU time for cycle= 3      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=3.16092e-05
diis-c [-9.29305467e-12  5.19742758e-05 -1.47752162e-02  1.01472324e+00]
  HOMO = -0.229739661009467  LUMO = 181.613356287957
  mo_energy =
[-1.19696842e+02 -1.22240348e+01 -6.63979102e+00 -6.63979102e+00
 -6.63979102e+00 -1.15733684e+00 -2.29739661e-01 -2.29739661e-01
 -2.29739661e-01  1.81613356e+02  2.12772512e+03  1.27545379e+04]
E1 = -705.5906325048335  E_coul = 199.10851102192353
cycle= 4 E= -506.48212148291  delta_E= -1.48e-12  |g|= 2.77e-08  |ddm|= 2.97e-07
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -705.5906325048335  E_coul = 199.10851102192353
  HOMO = -0.229739660651227  LUMO = 181.613356325933
  mo_energy =
[-1.19696842e+02 -1.22240348e+01 -6.63979101e+00 -6.63979101e+00
 -6.63979101e+00 -1.15733684e+00 -2.29739661e-01 -2.29739661e-01
 -2.29739661e-01  1.81613356e+02  2.12772512e+03  1.27545379e+04]
E1 = -705.5906325058895  E_coul = 199.10851102298008
Extra cycle  E= -506.482121482909  delta_E= 5.68e-13  |g|= 2.18e-10  |ddm|= 3.37e-10
    CPU time for scf_cycle      0.09 sec, wall time      0.10 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 16.459578074957832
E1 = -705.5906325058895  E_coul = 199.10851102298008
init E= -506.482121482909
    CPU time for initialize scf      0.05 sec, wall time      0.05 sec
  HOMO = -0.22973966064857  LUMO = 181.613356326212
  mo_energy =
[-1.19696842e+02 -1.22240348e+01 -6.63979101e+00 -6.63979101e+00
 -6.63979101e+00 -1.15733684e+00 -2.29739661e-01 -2.29739661e-01
 -2.29739661e-01  1.81613356e+02  2.12772512e+03  1.27545379e+04]
E1 = -705.5906325058979  E_coul = 199.10851102298838
cycle= 1 E= -506.48212148291  delta_E= -1.14e-13  |g|= 2.22e-12  |ddm|= 2.75e-12
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -705.5906325058979  E_coul = 199.10851102298838
  HOMO = -0.229739660648547  LUMO = 181.613356326214
  mo_energy =
[-1.19696842e+02 -1.22240348e+01 -6.63979101e+00 -6.63979101e+00
 -6.63979101e+00 -1.15733684e+00 -2.29739661e-01 -2.29739661e-01
 -2.29739661e-01  1.81613356e+02  2.12772512e+03  1.27545379e+04]
E1 = -705.5906325058983  E_coul = 199.10851102298852
Extra cycle  E= -506.48212148291  delta_E= -2.27e-13  |g|= 1.03e-12  |ddm|= 2.71e-14
    CPU time for scf_cycle      0.12 sec, wall time      0.12 sec
exp = [6.29438311e+03 1.57356041e+03 2.37769698e+02 5.20905132e+01
 4.73347684e+00 3.94435977e-01 8.58306355e+00 4.92620437e-01]
grad_E = [-8.97959588e-05  1.60989169e-03 -6.32803550e-03  4.84803526e-03
 -3.47071047e-03  1.83032235e-02 -7.79751843e-03  9.44394521e-02]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((8, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([1.5735952963858392e+03,2.3761303919145971e+02,5.2332977870138201e+01,4.7281081235122091e+00,3.9325830426169639e-01,8.5907170030661746e+00,4.9039633283239870e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "6s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:45:55 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  6294.38461392        1
[INPUT] 0    0    [1    /1   ]  1573.53313026        1
[INPUT] 0    0    [1    /1   ]  237.890725155        1
[INPUT] 0    0    [1    /1   ]  51.9112697381        1
[INPUT] 0    0    [1    /1   ]  4.72521909158        1
[INPUT] 0    0    [1    /1   ]  0.39423431947        1
[INPUT] 1    0    [1    /1   ]  8.58618020011        1
[INPUT] 1    0    [1    /1   ]  0.492587623667       1

nuclear repulsion = 0
number of shells = 8
number of NR pGTOs = 12
number of NR cGTOs = 12
basis = {'Ar': [[0, [6294.384613918984, 1.0]], [0, [1573.533130257144, 1.0]], [0, [237.89072515514613, 1.0]], [0, [51.911269738081614, 1.0]], [0, [4.725219091579373, 1.0]], [0, [0.394234319470318, 1.0]], [1, [8.586180200105833, 1.0]], [1, [0.49258762366683967, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [6294.38461392]
bas 1, expnt(s) = [1573.53313026]
bas 2, expnt(s) = [237.89072516]
bas 3, expnt(s) = [51.91126974]
bas 4, expnt(s) = [4.72521909]
bas 5, expnt(s) = [0.39423432]
bas 6, expnt(s) = [8.5861802]
bas 7, expnt(s) = [0.49258762]
CPU time:        24.88
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  1  1  1  0 36 37  0]
 [ 0  1  1  1  0 38 39  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 6.29438461e+03 1.78537719e+03 1.57353313e+03 6.31207198e+02
 2.37890725e+02 1.53037604e+02 5.19112697e+01 4.88608776e+01
 4.72521909e+00 8.09713699e+00 3.94234319e-01 1.25698717e+00
 8.58618020e+00 4.28779873e+01 4.92587624e-01 1.20389542e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.315286489551713
cond(S) = 16.42385875978035
E1 = -687.7924479365972  E_coul = 184.9492175813375
init E= -502.84323035526
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.678684811876615  LUMO = 179.754087843573
  mo_energy =
[-1.21094309e+02 -1.32612797e+01 -7.61856278e+00 -7.61856278e+00
 -7.61856278e+00 -1.64942727e+00 -6.78684812e-01 -6.78684812e-01
 -6.78684812e-01  1.79754088e+02  2.12612124e+03  1.27531804e+04]
E1 = -705.5727954036084  E_coul = 199.0896811761599
cycle= 1 E= -506.483114227449  delta_E= -3.64  |g|= 0.276  |ddm|= 0.298
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.362002
diis-c [-0.13104557  1.        ]
  HOMO = -0.230130090233334  LUMO = 181.15202741673
  mo_energy =
[-1.19702409e+02 -1.22233078e+01 -6.64110932e+00 -6.64110932e+00
 -6.64110932e+00 -1.15734661e+00 -2.30130090e-01 -2.30130090e-01
 -2.30130090e-01  1.81152027e+02  2.12741624e+03  1.27542889e+04]
E1 = -705.5627594445872  E_coul = 199.07951483100456
cycle= 2 E= -506.483244613583  delta_E= -0.00013  |g|= 0.00234  |ddm|= 0.00412
    CPU time for cycle= 2      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.00244318
diis-c [-4.76068268e-06 -3.04599995e-03  1.00304600e+00]
  HOMO = -0.230174666494902  LUMO = 181.150150008649
  mo_energy =
[-1.19705567e+02 -1.22236340e+01 -6.64159710e+00 -6.64159710e+00
 -6.64159710e+00 -1.15736443e+00 -2.30174666e-01 -2.30174666e-01
 -2.30174666e-01  1.81150150e+02  2.12740985e+03  1.27542801e+04]
E1 = -705.5626793793015  E_coul = 199.0794347526523
cycle= 3 E= -506.483244626649  delta_E= -1.31e-08  |g|= 2.34e-05  |ddm|= 3.66e-05
    CPU time for cycle= 3      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=3.19216e-05
diis-c [-1.02040208e-11  5.13358071e-05 -1.47838482e-02  1.01473251e+00]
  HOMO = -0.230174891851252  LUMO = 181.150144955859
  mo_energy =
[-1.19705580e+02 -1.22236357e+01 -6.64160015e+00 -6.64160015e+00
 -6.64160015e+00 -1.15736449e+00 -2.30174892e-01 -2.30174892e-01
 -2.30174892e-01  1.81150145e+02  2.12740984e+03  1.27542801e+04]
E1 = -705.5626788672973  E_coul = 199.0794342406468
cycle= 4 E= -506.483244626651  delta_E= -1.36e-12  |g|= 2.86e-08  |ddm|= 3.01e-07
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -705.5626788672973  E_coul = 199.0794342406468
  HOMO = -0.230174891471033  LUMO = 181.150144995496
  mo_energy =
[-1.19705580e+02 -1.22236357e+01 -6.64160015e+00 -6.64160015e+00
 -6.64160015e+00 -1.15736448e+00 -2.30174891e-01 -2.30174891e-01
 -2.30174891e-01  1.81150145e+02  2.12740984e+03  1.27542801e+04]
E1 = -705.5626788683966  E_coul = 199.079434241746
Extra cycle  E= -506.483244626651  delta_E= -1.14e-13  |g|= 2.26e-10  |ddm|= 3.5e-10
    CPU time for scf_cycle      0.09 sec, wall time      0.10 sec
exp = [6.29438461e+03 1.57353313e+03 2.37890725e+02 5.19112697e+01
 4.72521909e+00 3.94234319e-01 8.58618020e+00 4.92587624e-01]
E = -506.4832446266506
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((8, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([1.5735952963858392e+03,2.3761303919145971e+02,5.2332977870138201e+01,4.7281081235122091e+00,3.9325830426169639e-01,8.5907170030661746e+00,4.9039633283239870e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "6s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:45:55 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  6294.38461392        1
[INPUT] 0    0    [1    /1   ]  1573.53313026        1
[INPUT] 0    0    [1    /1   ]  237.890725155        1
[INPUT] 0    0    [1    /1   ]  51.9112697381        1
[INPUT] 0    0    [1    /1   ]  4.72521909158        1
[INPUT] 0    0    [1    /1   ]  0.39423431947        1
[INPUT] 1    0    [1    /1   ]  8.58618020011        1
[INPUT] 1    0    [1    /1   ]  0.492587623667       1

nuclear repulsion = 0
number of shells = 8
number of NR pGTOs = 12
number of NR cGTOs = 12
basis = {'Ar': [[0, [6294.384613918984, 1.0]], [0, [1573.533130257144, 1.0]], [0, [237.89072515514613, 1.0]], [0, [51.911269738081614, 1.0]], [0, [4.725219091579373, 1.0]], [0, [0.394234319470318, 1.0]], [1, [8.586180200105833, 1.0]], [1, [0.49258762366683967, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [6294.38461392]
bas 1, expnt(s) = [1573.53313026]
bas 2, expnt(s) = [237.89072516]
bas 3, expnt(s) = [51.91126974]
bas 4, expnt(s) = [4.72521909]
bas 5, expnt(s) = [0.39423432]
bas 6, expnt(s) = [8.5861802]
bas 7, expnt(s) = [0.49258762]
CPU time:        25.10
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  1  1  1  0 36 37  0]
 [ 0  1  1  1  0 38 39  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 6.29438461e+03 1.78537719e+03 1.57353313e+03 6.31207198e+02
 2.37890725e+02 1.53037604e+02 5.19112697e+01 4.88608776e+01
 4.72521909e+00 8.09713699e+00 3.94234319e-01 1.25698717e+00
 8.58618020e+00 4.28779873e+01 4.92587624e-01 1.20389542e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.315286489551713
cond(S) = 16.42385875978035
E1 = -687.7924479365972  E_coul = 184.9492175813375
init E= -502.84323035526
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.678684811876615  LUMO = 179.754087843573
  mo_energy =
[-1.21094309e+02 -1.32612797e+01 -7.61856278e+00 -7.61856278e+00
 -7.61856278e+00 -1.64942727e+00 -6.78684812e-01 -6.78684812e-01
 -6.78684812e-01  1.79754088e+02  2.12612124e+03  1.27531804e+04]
E1 = -705.5727954036084  E_coul = 199.0896811761599
cycle= 1 E= -506.483114227449  delta_E= -3.64  |g|= 0.276  |ddm|= 0.298
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.362002
diis-c [-0.13104557  1.        ]
  HOMO = -0.230130090233334  LUMO = 181.15202741673
  mo_energy =
[-1.19702409e+02 -1.22233078e+01 -6.64110932e+00 -6.64110932e+00
 -6.64110932e+00 -1.15734661e+00 -2.30130090e-01 -2.30130090e-01
 -2.30130090e-01  1.81152027e+02  2.12741624e+03  1.27542889e+04]
E1 = -705.5627594445872  E_coul = 199.07951483100456
cycle= 2 E= -506.483244613583  delta_E= -0.00013  |g|= 0.00234  |ddm|= 0.00412
    CPU time for cycle= 2      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.00244318
diis-c [-4.76068268e-06 -3.04599995e-03  1.00304600e+00]
  HOMO = -0.230174666494902  LUMO = 181.150150008649
  mo_energy =
[-1.19705567e+02 -1.22236340e+01 -6.64159710e+00 -6.64159710e+00
 -6.64159710e+00 -1.15736443e+00 -2.30174666e-01 -2.30174666e-01
 -2.30174666e-01  1.81150150e+02  2.12740985e+03  1.27542801e+04]
E1 = -705.5626793793015  E_coul = 199.0794347526523
cycle= 3 E= -506.483244626649  delta_E= -1.31e-08  |g|= 2.34e-05  |ddm|= 3.66e-05
    CPU time for cycle= 3      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=3.19216e-05
diis-c [-1.02040208e-11  5.13358071e-05 -1.47838482e-02  1.01473251e+00]
  HOMO = -0.230174891851252  LUMO = 181.150144955859
  mo_energy =
[-1.19705580e+02 -1.22236357e+01 -6.64160015e+00 -6.64160015e+00
 -6.64160015e+00 -1.15736449e+00 -2.30174892e-01 -2.30174892e-01
 -2.30174892e-01  1.81150145e+02  2.12740984e+03  1.27542801e+04]
E1 = -705.5626788672973  E_coul = 199.0794342406468
cycle= 4 E= -506.483244626651  delta_E= -1.36e-12  |g|= 2.86e-08  |ddm|= 3.01e-07
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -705.5626788672973  E_coul = 199.0794342406468
  HOMO = -0.230174891471033  LUMO = 181.150144995496
  mo_energy =
[-1.19705580e+02 -1.22236357e+01 -6.64160015e+00 -6.64160015e+00
 -6.64160015e+00 -1.15736448e+00 -2.30174891e-01 -2.30174891e-01
 -2.30174891e-01  1.81150145e+02  2.12740984e+03  1.27542801e+04]
E1 = -705.5626788683966  E_coul = 199.079434241746
Extra cycle  E= -506.483244626651  delta_E= -1.14e-13  |g|= 2.26e-10  |ddm|= 3.5e-10
    CPU time for scf_cycle      0.09 sec, wall time      0.10 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 16.42385875978035
E1 = -705.5626788683966  E_coul = 199.079434241746
init E= -506.483244626651
    CPU time for initialize scf      0.05 sec, wall time      0.05 sec
  HOMO = -0.230174891468232  LUMO = 181.150144995786
  mo_energy =
[-1.19705580e+02 -1.22236357e+01 -6.64160015e+00 -6.64160015e+00
 -6.64160015e+00 -1.15736448e+00 -2.30174891e-01 -2.30174891e-01
 -2.30174891e-01  1.81150145e+02  2.12740984e+03  1.27542801e+04]
E1 = -705.562678868405  E_coul = 199.07943424175426
cycle= 1 E= -506.483244626651  delta_E= -1.14e-13  |g|= 5.69e-12  |ddm|= 2.85e-12
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -705.562678868405  E_coul = 199.07943424175426
  HOMO = -0.230174891468218  LUMO = 181.150144995788
  mo_energy =
[-1.19705580e+02 -1.22236357e+01 -6.64160015e+00 -6.64160015e+00
 -6.64160015e+00 -1.15736448e+00 -2.30174891e-01 -2.30174891e-01
 -2.30174891e-01  1.81150145e+02  2.12740984e+03  1.27542801e+04]
E1 = -705.562678868405  E_coul = 199.07943424175454
Extra cycle  E= -506.48324462665  delta_E= 2.84e-13  |g|= 1.89e-12  |ddm|= 2.26e-14
    CPU time for scf_cycle      0.12 sec, wall time      0.12 sec
exp = [6.29438461e+03 1.57353313e+03 2.37890725e+02 5.19112697e+01
 4.72521909e+00 3.94234319e-01 8.58618020e+00 4.92587624e-01]
grad_E = [-8.95569772e-05  1.59008073e-03 -5.50403369e-03 -4.48647157e-04
 -1.11606283e-02  1.79423079e-02 -6.29278328e-03  8.80176428e-02]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((8, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([1.5735952963858392e+03,2.3761303919145971e+02,5.2332977870138201e+01,4.7281081235122091e+00,3.9325830426169639e-01,8.5907170030661746e+00,4.9039633283239870e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "6s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:45:58 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  6294.38556272        1
[INPUT] 0    0    [1    /1   ]  1573.51597336        1
[INPUT] 0    0    [1    /1   ]  237.965118909        1
[INPUT] 0    0    [1    /1   ]  51.8106378641        1
[INPUT] 0    0    [1    /1   ]  4.73122131451        1
[INPUT] 0    0    [1    /1   ]  0.393676363985       1
[INPUT] 1    0    [1    /1   ]  8.58965454859        1
[INPUT] 1    0    [1    /1   ]  0.491145484699       1

nuclear repulsion = 0
number of shells = 8
number of NR pGTOs = 12
number of NR cGTOs = 12
basis = {'Ar': [[0, [6294.385562718113, 1.0]], [0, [1573.5159733598912, 1.0]], [0, [237.9651189089815, 1.0]], [0, [51.81063786406778, 1.0]], [0, [4.731221314505255, 1.0]], [0, [0.39367636398484385, 1.0]], [1, [8.589654548586344, 1.0]], [1, [0.49114548469939856, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [6294.38556272]
bas 1, expnt(s) = [1573.51597336]
bas 2, expnt(s) = [237.96511891]
bas 3, expnt(s) = [51.81063786]
bas 4, expnt(s) = [4.73122131]
bas 5, expnt(s) = [0.39367636]
bas 6, expnt(s) = [8.58965455]
bas 7, expnt(s) = [0.49114548]
CPU time:        27.96
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  1  1  1  0 36 37  0]
 [ 0  1  1  1  0 38 39  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 6.29438556e+03 1.78537739e+03 1.57351597e+03 6.31202036e+02
 2.37965119e+02 1.53073496e+02 5.18106379e+01 4.87898214e+01
 4.73122131e+00 8.10484982e+00 3.93676364e-01 1.25565269e+00
 8.58965455e+00 4.28996763e+01 4.91145485e-01 1.19949126e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.317162167771677
cond(S) = 16.407950076744537
E1 = -687.7684876385852  E_coul = 184.91565492033178
init E= -502.852832718253
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.680706826332917  LUMO = 179.542509086427
  mo_energy =
[-1.21096158e+02 -1.32631447e+01 -7.62037003e+00 -7.62037003e+00
 -7.62037003e+00 -1.65076370e+00 -6.80706826e-01 -6.80706826e-01
 -6.80706826e-01  1.79542509e+02  2.12600050e+03  1.27530858e+04]
E1 = -705.5109560969188  E_coul = 199.0274615765495
cycle= 1 E= -506.483494520369  delta_E= -3.63  |g|= 0.274  |ddm|= 0.297
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.359048
diis-c [-0.12891514  1.        ]
  HOMO = -0.233655449089688  LUMO = 180.937347025221
  mo_energy =
[-1.19707181e+02 -1.22267990e+01 -6.64441016e+00 -6.64441016e+00
 -6.64441016e+00 -1.15990455e+00 -2.33655449e-01 -2.33655449e-01
 -2.33655449e-01  1.80937347e+02  2.12728925e+03  1.27541877e+04]
E1 = -705.5008857589437  E_coul = 199.01726127159728
cycle= 2 E= -506.483624487346  delta_E= -0.00013  |g|= 0.00232  |ddm|= 0.00412
    CPU time for cycle= 2      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.00242409
diis-c [-4.71864955e-06 -3.00559042e-03  1.00300559e+00]
  HOMO = -0.233699857263831  LUMO = 180.935454960263
  mo_energy =
[-1.19710354e+02 -1.22271258e+01 -6.64489857e+00 -6.64489857e+00
 -6.64489857e+00 -1.15992239e+00 -2.33699857e-01 -2.33699857e-01
 -2.33699857e-01  1.80935455e+02  2.12728280e+03  1.27541788e+04]
E1 = -705.5008055030123  E_coul = 199.01718100270364
cycle= 3 E= -506.483624500309  delta_E= -1.3e-08  |g|= 2.34e-05  |ddm|= 3.65e-05
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=3.18661e-05
diis-c [-1.06183632e-11  5.10410715e-05 -1.48186258e-02  1.01476758e+00]
  HOMO = -0.233700082912518  LUMO = 180.935449759507
  mo_energy =
[-1.19710367e+02 -1.22271275e+01 -6.64490164e+00 -6.64490164e+00
 -6.64490164e+00 -1.15992245e+00 -2.33700083e-01 -2.33700083e-01
 -2.33700083e-01  1.80935450e+02  2.12728279e+03  1.27541788e+04]
E1 = -705.5008049871044  E_coul = 199.01718048679487
cycle= 4 E= -506.48362450031  delta_E= -8.53e-13  |g|= 2.9e-08  |ddm|= 3.01e-07
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -705.5008049871044  E_coul = 199.01718048679487
  HOMO = -0.233700082523559  LUMO = 180.935449799884
  mo_energy =
[-1.19710367e+02 -1.22271274e+01 -6.64490163e+00 -6.64490163e+00
 -6.64490163e+00 -1.15992245e+00 -2.33700083e-01 -2.33700083e-01
 -2.33700083e-01  1.80935450e+02  2.12728279e+03  1.27541788e+04]
E1 = -705.5008049882234  E_coul = 199.01718048791366
Extra cycle  E= -506.48362450031  delta_E= -2.27e-13  |g|= 2.29e-10  |ddm|= 3.56e-10
    CPU time for scf_cycle      0.10 sec, wall time      0.11 sec
exp = [6.29438556e+03 1.57351597e+03 2.37965119e+02 5.18106379e+01
 4.73122131e+00 3.93676364e-01 8.58965455e+00 4.91145485e-01]
E = -506.48362450030976
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((8, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([1.5735952963858392e+03,2.3761303919145971e+02,5.2332977870138201e+01,4.7281081235122091e+00,3.9325830426169639e-01,8.5907170030661746e+00,4.9039633283239870e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "6s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:45:58 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  6294.38556272        1
[INPUT] 0    0    [1    /1   ]  1573.51597336        1
[INPUT] 0    0    [1    /1   ]  237.965118909        1
[INPUT] 0    0    [1    /1   ]  51.8106378641        1
[INPUT] 0    0    [1    /1   ]  4.73122131451        1
[INPUT] 0    0    [1    /1   ]  0.393676363985       1
[INPUT] 1    0    [1    /1   ]  8.58965454859        1
[INPUT] 1    0    [1    /1   ]  0.491145484699       1

nuclear repulsion = 0
number of shells = 8
number of NR pGTOs = 12
number of NR cGTOs = 12
basis = {'Ar': [[0, [6294.385562718113, 1.0]], [0, [1573.5159733598912, 1.0]], [0, [237.9651189089815, 1.0]], [0, [51.81063786406778, 1.0]], [0, [4.731221314505255, 1.0]], [0, [0.39367636398484385, 1.0]], [1, [8.589654548586344, 1.0]], [1, [0.49114548469939856, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [6294.38556272]
bas 1, expnt(s) = [1573.51597336]
bas 2, expnt(s) = [237.96511891]
bas 3, expnt(s) = [51.81063786]
bas 4, expnt(s) = [4.73122131]
bas 5, expnt(s) = [0.39367636]
bas 6, expnt(s) = [8.58965455]
bas 7, expnt(s) = [0.49114548]
CPU time:        28.20
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  1  1  1  0 36 37  0]
 [ 0  1  1  1  0 38 39  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 6.29438556e+03 1.78537739e+03 1.57351597e+03 6.31202036e+02
 2.37965119e+02 1.53073496e+02 5.18106379e+01 4.87898214e+01
 4.73122131e+00 8.10484982e+00 3.93676364e-01 1.25565269e+00
 8.58965455e+00 4.28996763e+01 4.91145485e-01 1.19949126e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.317162167771677
cond(S) = 16.407950076744537
E1 = -687.7684876385852  E_coul = 184.91565492033178
init E= -502.852832718253
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.680706826332917  LUMO = 179.542509086427
  mo_energy =
[-1.21096158e+02 -1.32631447e+01 -7.62037003e+00 -7.62037003e+00
 -7.62037003e+00 -1.65076370e+00 -6.80706826e-01 -6.80706826e-01
 -6.80706826e-01  1.79542509e+02  2.12600050e+03  1.27530858e+04]
E1 = -705.5109560969188  E_coul = 199.0274615765495
cycle= 1 E= -506.483494520369  delta_E= -3.63  |g|= 0.274  |ddm|= 0.297
    CPU time for cycle= 1      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.359048
diis-c [-0.12891514  1.        ]
  HOMO = -0.233655449089688  LUMO = 180.937347025221
  mo_energy =
[-1.19707181e+02 -1.22267990e+01 -6.64441016e+00 -6.64441016e+00
 -6.64441016e+00 -1.15990455e+00 -2.33655449e-01 -2.33655449e-01
 -2.33655449e-01  1.80937347e+02  2.12728925e+03  1.27541877e+04]
E1 = -705.5008857589437  E_coul = 199.01726127159728
cycle= 2 E= -506.483624487346  delta_E= -0.00013  |g|= 0.00232  |ddm|= 0.00412
    CPU time for cycle= 2      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.00242409
diis-c [-4.71864955e-06 -3.00559042e-03  1.00300559e+00]
  HOMO = -0.233699857263831  LUMO = 180.935454960263
  mo_energy =
[-1.19710354e+02 -1.22271258e+01 -6.64489857e+00 -6.64489857e+00
 -6.64489857e+00 -1.15992239e+00 -2.33699857e-01 -2.33699857e-01
 -2.33699857e-01  1.80935455e+02  2.12728280e+03  1.27541788e+04]
E1 = -705.5008055030123  E_coul = 199.01718100270364
cycle= 3 E= -506.483624500309  delta_E= -1.3e-08  |g|= 2.34e-05  |ddm|= 3.65e-05
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=3.18661e-05
diis-c [-1.06183632e-11  5.10410715e-05 -1.48186258e-02  1.01476758e+00]
  HOMO = -0.233700082912518  LUMO = 180.935449759507
  mo_energy =
[-1.19710367e+02 -1.22271275e+01 -6.64490164e+00 -6.64490164e+00
 -6.64490164e+00 -1.15992245e+00 -2.33700083e-01 -2.33700083e-01
 -2.33700083e-01  1.80935450e+02  2.12728279e+03  1.27541788e+04]
E1 = -705.5008049871044  E_coul = 199.01718048679487
cycle= 4 E= -506.48362450031  delta_E= -8.53e-13  |g|= 2.9e-08  |ddm|= 3.01e-07
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -705.5008049871044  E_coul = 199.01718048679487
  HOMO = -0.233700082523559  LUMO = 180.935449799884
  mo_energy =
[-1.19710367e+02 -1.22271274e+01 -6.64490163e+00 -6.64490163e+00
 -6.64490163e+00 -1.15992245e+00 -2.33700083e-01 -2.33700083e-01
 -2.33700083e-01  1.80935450e+02  2.12728279e+03  1.27541788e+04]
E1 = -705.5008049882234  E_coul = 199.01718048791366
Extra cycle  E= -506.48362450031  delta_E= -2.27e-13  |g|= 2.29e-10  |ddm|= 3.56e-10
    CPU time for scf_cycle      0.10 sec, wall time      0.10 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 16.407950076744537
E1 = -705.5008049882234  E_coul = 199.01718048791366
init E= -506.48362450031
    CPU time for initialize scf      0.06 sec, wall time      0.06 sec
  HOMO = -0.233700082520717  LUMO = 180.93544980018
  mo_energy =
[-1.19710367e+02 -1.22271274e+01 -6.64490163e+00 -6.64490163e+00
 -6.64490163e+00 -1.15992245e+00 -2.33700083e-01 -2.33700083e-01
 -2.33700083e-01  1.80935450e+02  2.12728279e+03  1.27541788e+04]
E1 = -705.5008049882322  E_coul = 199.01718048792236
cycle= 1 E= -506.48362450031  delta_E= -5.68e-14  |g|= 2.78e-12  |ddm|= 2.89e-12
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -705.5008049882322  E_coul = 199.01718048792236
  HOMO = -0.233700082520689  LUMO = 180.935449800183
  mo_energy =
[-1.19710367e+02 -1.22271274e+01 -6.64490163e+00 -6.64490163e+00
 -6.64490163e+00 -1.15992245e+00 -2.33700083e-01 -2.33700083e-01
 -2.33700083e-01  1.80935450e+02  2.12728279e+03  1.27541788e+04]
E1 = -705.5008049882323  E_coul = 199.01718048792247
Extra cycle  E= -506.48362450031  delta_E=    0  |g|= 3.96e-12  |ddm|= 1.93e-14
    CPU time for scf_cycle      0.13 sec, wall time      0.13 sec
exp = [6.29438556e+03 1.57351597e+03 2.37965119e+02 5.18106379e+01
 4.73122131e+00 3.93676364e-01 8.58965455e+00 4.91145485e-01]
grad_E = [-8.94313893e-05  1.57888929e-03 -5.03330699e-03 -3.45246600e-03
 -5.62097615e-03  6.39618464e-03 -1.96767032e-03  3.02552493e-02]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((8, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([1.5735952963858392e+03,2.3761303919145971e+02,5.2332977870138201e+01,4.7281081235122091e+00,3.9325830426169639e-01,8.5907170030661746e+00,4.9039633283239870e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "6s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:46:01 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  6294.38585057        1
[INPUT] 0    0    [1    /1   ]  1573.5108138         1
[INPUT] 0    0    [1    /1   ]  237.985330894        1
[INPUT] 0    0    [1    /1   ]  51.7955185436        1
[INPUT] 0    0    [1    /1   ]  4.7366165542         1
[INPUT] 0    0    [1    /1   ]  0.393395517725       1
[INPUT] 1    0    [1    /1   ]  8.59101926801        1
[INPUT] 1    0    [1    /1   ]  0.49031540909        1

nuclear repulsion = 0
number of shells = 8
number of NR pGTOs = 12
number of NR cGTOs = 12
basis = {'Ar': [[0, [6294.385850570938, 1.0]], [0, [1573.5108138031233, 1.0]], [0, [237.9853308935028, 1.0]], [0, [51.79551854359697, 1.0]], [0, [4.736616554196241, 1.0]], [0, [0.3933955177252904, 1.0]], [1, [8.591019268008528, 1.0]], [1, [0.4903154090897153, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [6294.38585057]
bas 1, expnt(s) = [1573.5108138]
bas 2, expnt(s) = [237.98533089]
bas 3, expnt(s) = [51.79551854]
bas 4, expnt(s) = [4.73661655]
bas 5, expnt(s) = [0.39339552]
bas 6, expnt(s) = [8.59101927]
bas 7, expnt(s) = [0.49031541]
CPU time:        31.02
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  1  1  1  0 36 37  0]
 [ 0  1  1  1  0 38 39  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 6.29438585e+03 1.78537745e+03 1.57351081e+03 6.31200484e+02
 2.37985331e+02 1.53083247e+02 5.17955185e+01 4.87791427e+01
 4.73661655e+00 8.11178060e+00 3.93395518e-01 1.25498079e+00
 8.59101927e+00 4.29081963e+01 4.90315409e-01 1.19695775e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.318178597142754
cond(S) = 16.40729908475088
E1 = -687.7513315869986  E_coul = 184.8978458799492
init E= -502.853485707049
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.68183898611833  LUMO = 179.533897610921
  mo_energy =
[-1.21096634e+02 -1.32645765e+01 -7.62122351e+00 -7.62122351e+00
 -7.62122351e+00 -1.65164744e+00 -6.81838986e-01 -6.81838986e-01
 -6.81838986e-01  1.79533898e+02  2.12602113e+03  1.27531054e+04]
E1 = -705.4819097642016  E_coul = 198.99833066131725
cycle= 1 E= -506.483579102884  delta_E= -3.63  |g|= 0.273  |ddm|= 0.296
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.358656
diis-c [-0.12863404  1.        ]
  HOMO = -0.235599342630486  LUMO = 180.928134269137
  mo_energy =
[-1.19707912e+02 -1.22289158e+01 -6.64589127e+00 -6.64589127e+00
 -6.64589127e+00 -1.16138828e+00 -2.35599343e-01 -2.35599343e-01
 -2.35599343e-01  1.80928134e+02  2.12730965e+03  1.27542072e+04]
E1 = -705.471853861762  E_coul = 198.9881454825086
cycle= 2 E= -506.483708379253  delta_E= -0.000129  |g|= 0.00231  |ddm|= 0.00411
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00241196
diis-c [-4.67356012e-06 -2.99114812e-03  1.00299115e+00]
  HOMO = -0.235643539130764  LUMO = 180.926242402133
  mo_energy =
[-1.19711082e+02 -1.22292421e+01 -6.64637860e+00 -6.64637860e+00
 -6.64637860e+00 -1.16140610e+00 -2.35643539e-01 -2.35643539e-01
 -2.35643539e-01  1.80926242e+02  2.12730319e+03  1.27541983e+04]
E1 = -705.4717737680611  E_coul = 198.98806537594876
cycle= 3 E= -506.483708392112  delta_E= -1.29e-08  |g|= 2.33e-05  |ddm|= 3.64e-05
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=3.1757e-05
diis-c [-1.06286570e-11  5.10221067e-05 -1.48366153e-02  1.01478559e+00]
  HOMO = -0.235643763968258  LUMO = 180.92623716669
  mo_energy =
[-1.19711096e+02 -1.22292438e+01 -6.64638167e+00 -6.64638167e+00
 -6.64638167e+00 -1.16140615e+00 -2.35643764e-01 -2.35643764e-01
 -2.35643764e-01  1.80926237e+02  2.12730318e+03  1.27541983e+04]
E1 = -705.4717732523313  E_coul = 198.98806486021746
cycle= 4 E= -506.483708392114  delta_E= -1.48e-12  |g|= 2.9e-08  |ddm|= 3.01e-07
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -705.4717732523313  E_coul = 198.98806486021746
  HOMO = -0.235643763579557  LUMO = 180.926237207097
  mo_energy =
[-1.19711096e+02 -1.22292438e+01 -6.64638166e+00 -6.64638166e+00
 -6.64638166e+00 -1.16140615e+00 -2.35643764e-01 -2.35643764e-01
 -2.35643764e-01  1.80926237e+02  2.12730318e+03  1.27541983e+04]
E1 = -705.4717732534515  E_coul = 198.98806486133765
Extra cycle  E= -506.483708392114  delta_E=    0  |g|= 2.29e-10  |ddm|= 3.57e-10
    CPU time for scf_cycle      0.09 sec, wall time      0.10 sec
exp = [6.29438585e+03 1.57351081e+03 2.37985331e+02 5.17955185e+01
 4.73661655e+00 3.93395518e-01 8.59101927e+00 4.90315409e-01]
E = -506.48370839211384
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((8, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([1.5735952963858392e+03,2.3761303919145971e+02,5.2332977870138201e+01,4.7281081235122091e+00,3.9325830426169639e-01,8.5907170030661746e+00,4.9039633283239870e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "6s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:46:01 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  6294.38585057        1
[INPUT] 0    0    [1    /1   ]  1573.5108138         1
[INPUT] 0    0    [1    /1   ]  237.985330894        1
[INPUT] 0    0    [1    /1   ]  51.7955185436        1
[INPUT] 0    0    [1    /1   ]  4.7366165542         1
[INPUT] 0    0    [1    /1   ]  0.393395517725       1
[INPUT] 1    0    [1    /1   ]  8.59101926801        1
[INPUT] 1    0    [1    /1   ]  0.49031540909        1

nuclear repulsion = 0
number of shells = 8
number of NR pGTOs = 12
number of NR cGTOs = 12
basis = {'Ar': [[0, [6294.385850570938, 1.0]], [0, [1573.5108138031233, 1.0]], [0, [237.9853308935028, 1.0]], [0, [51.79551854359697, 1.0]], [0, [4.736616554196241, 1.0]], [0, [0.3933955177252904, 1.0]], [1, [8.591019268008528, 1.0]], [1, [0.4903154090897153, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [6294.38585057]
bas 1, expnt(s) = [1573.5108138]
bas 2, expnt(s) = [237.98533089]
bas 3, expnt(s) = [51.79551854]
bas 4, expnt(s) = [4.73661655]
bas 5, expnt(s) = [0.39339552]
bas 6, expnt(s) = [8.59101927]
bas 7, expnt(s) = [0.49031541]
CPU time:        31.27
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  1  1  1  0 36 37  0]
 [ 0  1  1  1  0 38 39  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 6.29438585e+03 1.78537745e+03 1.57351081e+03 6.31200484e+02
 2.37985331e+02 1.53083247e+02 5.17955185e+01 4.87791427e+01
 4.73661655e+00 8.11178060e+00 3.93395518e-01 1.25498079e+00
 8.59101927e+00 4.29081963e+01 4.90315409e-01 1.19695775e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.318178597142754
cond(S) = 16.40729908475088
E1 = -687.7513315869986  E_coul = 184.8978458799492
init E= -502.853485707049
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.68183898611833  LUMO = 179.533897610921
  mo_energy =
[-1.21096634e+02 -1.32645765e+01 -7.62122351e+00 -7.62122351e+00
 -7.62122351e+00 -1.65164744e+00 -6.81838986e-01 -6.81838986e-01
 -6.81838986e-01  1.79533898e+02  2.12602113e+03  1.27531054e+04]
E1 = -705.4819097642016  E_coul = 198.99833066131725
cycle= 1 E= -506.483579102884  delta_E= -3.63  |g|= 0.273  |ddm|= 0.296
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.358656
diis-c [-0.12863404  1.        ]
  HOMO = -0.235599342630486  LUMO = 180.928134269137
  mo_energy =
[-1.19707912e+02 -1.22289158e+01 -6.64589127e+00 -6.64589127e+00
 -6.64589127e+00 -1.16138828e+00 -2.35599343e-01 -2.35599343e-01
 -2.35599343e-01  1.80928134e+02  2.12730965e+03  1.27542072e+04]
E1 = -705.471853861762  E_coul = 198.9881454825086
cycle= 2 E= -506.483708379253  delta_E= -0.000129  |g|= 0.00231  |ddm|= 0.00411
    CPU time for cycle= 2      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.00241196
diis-c [-4.67356012e-06 -2.99114812e-03  1.00299115e+00]
  HOMO = -0.235643539130764  LUMO = 180.926242402133
  mo_energy =
[-1.19711082e+02 -1.22292421e+01 -6.64637860e+00 -6.64637860e+00
 -6.64637860e+00 -1.16140610e+00 -2.35643539e-01 -2.35643539e-01
 -2.35643539e-01  1.80926242e+02  2.12730319e+03  1.27541983e+04]
E1 = -705.4717737680611  E_coul = 198.98806537594876
cycle= 3 E= -506.483708392112  delta_E= -1.29e-08  |g|= 2.33e-05  |ddm|= 3.64e-05
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=3.1757e-05
diis-c [-1.06286570e-11  5.10221067e-05 -1.48366153e-02  1.01478559e+00]
  HOMO = -0.235643763968258  LUMO = 180.92623716669
  mo_energy =
[-1.19711096e+02 -1.22292438e+01 -6.64638167e+00 -6.64638167e+00
 -6.64638167e+00 -1.16140615e+00 -2.35643764e-01 -2.35643764e-01
 -2.35643764e-01  1.80926237e+02  2.12730318e+03  1.27541983e+04]
E1 = -705.4717732523313  E_coul = 198.98806486021746
cycle= 4 E= -506.483708392114  delta_E= -1.48e-12  |g|= 2.9e-08  |ddm|= 3.01e-07
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -705.4717732523313  E_coul = 198.98806486021746
  HOMO = -0.235643763579557  LUMO = 180.926237207097
  mo_energy =
[-1.19711096e+02 -1.22292438e+01 -6.64638166e+00 -6.64638166e+00
 -6.64638166e+00 -1.16140615e+00 -2.35643764e-01 -2.35643764e-01
 -2.35643764e-01  1.80926237e+02  2.12730318e+03  1.27541983e+04]
E1 = -705.4717732534515  E_coul = 198.98806486133765
Extra cycle  E= -506.483708392114  delta_E=    0  |g|= 2.29e-10  |ddm|= 3.57e-10
    CPU time for scf_cycle      0.09 sec, wall time      0.10 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 16.40729908475088
E1 = -705.4717732534515  E_coul = 198.98806486133765
init E= -506.483708392114
    CPU time for initialize scf      0.05 sec, wall time      0.05 sec
  HOMO = -0.235643763576711  LUMO = 180.926237207391
  mo_energy =
[-1.19711096e+02 -1.22292438e+01 -6.64638166e+00 -6.64638166e+00
 -6.64638166e+00 -1.16140615e+00 -2.35643764e-01 -2.35643764e-01
 -2.35643764e-01  1.80926237e+02  2.12730318e+03  1.27541983e+04]
E1 = -705.4717732534597  E_coul = 198.9880648613462
cycle= 1 E= -506.483708392113  delta_E= 3.41e-13  |g|= 3.8e-12  |ddm|= 2.91e-12
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -705.4717732534597  E_coul = 198.9880648613462
  HOMO = -0.235643763576692  LUMO = 180.926237207393
  mo_energy =
[-1.19711096e+02 -1.22292438e+01 -6.64638166e+00 -6.64638166e+00
 -6.64638166e+00 -1.16140615e+00 -2.35643764e-01 -2.35643764e-01
 -2.35643764e-01  1.80926237e+02  2.12730318e+03  1.27541983e+04]
E1 = -705.4717732534602  E_coul = 198.9880648613465
Extra cycle  E= -506.483708392114  delta_E= -2.27e-13  |g|= 4.58e-12  |ddm|= 3.06e-14
    CPU time for scf_cycle      0.12 sec, wall time      0.12 sec
exp = [6.29438585e+03 1.57351081e+03 2.37985331e+02 5.17955185e+01
 4.73661655e+00 3.93395518e-01 8.59101927e+00 4.90315409e-01]
grad_E = [-8.94138550e-05  1.57691045e-03 -4.95379514e-03 -3.93212950e-03
 -6.28947970e-04 -3.30883226e-04  2.57002247e-04 -1.96625266e-03]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((8, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([1.5735952963858392e+03,2.3761303919145971e+02,5.2332977870138201e+01,4.7281081235122091e+00,3.9325830426169639e-01,8.5907170030661746e+00,4.9039633283239870e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "6s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:46:04 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  6294.38619015        1
[INPUT] 0    0    [1    /1   ]  1573.5047741         1
[INPUT] 0    0    [1    /1   ]  238.006761727        1
[INPUT] 0    0    [1    /1   ]  51.7934054398        1
[INPUT] 0    0    [1    /1   ]  4.74124571165        1
[INPUT] 0    0    [1    /1   ]  0.393187482393       1
[INPUT] 1    0    [1    /1   ]  8.59198317795        1
[INPUT] 1    0    [1    /1   ]  0.489670744937       1

nuclear repulsion = 0
number of shells = 8
number of NR pGTOs = 12
number of NR cGTOs = 12
basis = {'Ar': [[0, [6294.386190145918, 1.0]], [0, [1573.5047741001406, 1.0]], [0, [238.00676172709905, 1.0]], [0, [51.793405439784955, 1.0]], [0, [4.741245711647989, 1.0]], [0, [0.3931874823926697, 1.0]], [1, [8.591983177953132, 1.0]], [1, [0.4896707449367709, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [6294.38619015]
bas 1, expnt(s) = [1573.5047741]
bas 2, expnt(s) = [238.00676173]
bas 3, expnt(s) = [51.79340544]
bas 4, expnt(s) = [4.74124571]
bas 5, expnt(s) = [0.39318748]
bas 6, expnt(s) = [8.59198318]
bas 7, expnt(s) = [0.48967074]
CPU time:        34.08
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  1  1  1  0 36 37  0]
 [ 0  1  1  1  0 38 39  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 6.29438619e+03 1.78537752e+03 1.57350477e+03 6.31198667e+02
 2.38006762e+02 1.53093586e+02 5.17934054e+01 4.87776502e+01
 4.74124571e+00 8.11772568e+00 3.93187482e-01 1.25448302e+00
 8.59198318e+00 4.29142143e+01 4.89670745e-01 1.19499088e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.318948203972994
cond(S) = 16.408762639352396
E1 = -687.737618615654  E_coul = 184.88446695150955
init E= -502.853151664144
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.682712943289052  LUMO = 179.559186064671
  mo_energy =
[-1.21096884e+02 -1.32657446e+01 -7.62183686e+00 -7.62183686e+00
 -7.62183686e+00 -1.65236147e+00 -6.82712943e-01 -6.82712943e-01
 -6.82712943e-01  1.79559186e+02  2.12608901e+03  1.27531653e+04]
E1 = -705.4610324196036  E_coul = 198.97736368861231
cycle= 1 E= -506.483668730991  delta_E= -3.63  |g|= 0.273  |ddm|= 0.295
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.358588
diis-c [-0.1285852  1.       ]
  HOMO = -0.237088343356163  LUMO = 180.953211842517
  mo_energy =
[-1.19708053e+02 -1.22305549e+01 -6.64693397e+00 -6.64693397e+00
 -6.64693397e+00 -1.16254130e+00 -2.37088343e-01 -2.37088343e-01
 -2.37088343e-01  1.80953212e+02  2.12737805e+03  1.27542679e+04]
E1 = -705.4509954167913  E_coul = 198.96719805260898
cycle= 2 E= -506.483797364182  delta_E= -0.000129  |g|= 0.0023  |ddm|= 0.0041
    CPU time for cycle= 2      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.00240205
diis-c [-4.63349152e-06 -2.98167207e-03  1.00298167e+00]
  HOMO = -0.23713234827084  LUMO = 180.951321900373
  mo_energy =
[-1.19711218e+02 -1.22308806e+01 -6.64742011e+00 -6.64742011e+00
 -6.64742011e+00 -1.16255909e+00 -2.37132348e-01 -2.37132348e-01
 -2.37132348e-01  1.80951322e+02  2.12737160e+03  1.27542590e+04]
E1 = -705.4509155142068  E_coul = 198.9671181372569
cycle= 3 E= -506.48379737695  delta_E= -1.28e-08  |g|= 2.32e-05  |ddm|= 3.63e-05
    CPU time for cycle= 3      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=3.16521e-05
diis-c [-1.05907850e-11  5.10338148e-05 -1.48496037e-02  1.01479857e+00]
  HOMO = -0.23713257224277  LUMO = 180.951316648714
  mo_energy =
[-1.19711231e+02 -1.22308823e+01 -6.64742316e+00 -6.64742316e+00
 -6.64742316e+00 -1.16255915e+00 -2.37132572e-01 -2.37132572e-01
 -2.37132572e-01  1.80951317e+02  2.12737159e+03  1.27542590e+04]
E1 = -705.4509149992141  E_coul = 198.96711762226352
cycle= 4 E= -506.483797376951  delta_E= -6.25e-13  |g|= 2.9e-08  |ddm|= 3e-07
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -705.4509149992141  E_coul = 198.96711762226352
  HOMO = -0.23713257185538  LUMO = 180.951316689062
  mo_energy =
[-1.19711231e+02 -1.22308823e+01 -6.64742316e+00 -6.64742316e+00
 -6.64742316e+00 -1.16255915e+00 -2.37132572e-01 -2.37132572e-01
 -2.37132572e-01  1.80951317e+02  2.12737159e+03  1.27542590e+04]
E1 = -705.4509150003332  E_coul = 198.96711762338256
Extra cycle  E= -506.483797376951  delta_E= -5.68e-14  |g|= 2.28e-10  |ddm|= 3.57e-10
    CPU time for scf_cycle      0.09 sec, wall time      0.10 sec
exp = [6.29438619e+03 1.57350477e+03 2.38006762e+02 5.17934054e+01
 4.74124571e+00 3.93187482e-01 8.59198318e+00 4.89670745e-01]
E = -506.48379737695063
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((8, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([1.5735952963858392e+03,2.3761303919145971e+02,5.2332977870138201e+01,4.7281081235122091e+00,3.9325830426169639e-01,8.5907170030661746e+00,4.9039633283239870e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "6s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:46:04 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  6294.38619015        1
[INPUT] 0    0    [1    /1   ]  1573.5047741         1
[INPUT] 0    0    [1    /1   ]  238.006761727        1
[INPUT] 0    0    [1    /1   ]  51.7934054398        1
[INPUT] 0    0    [1    /1   ]  4.74124571165        1
[INPUT] 0    0    [1    /1   ]  0.393187482393       1
[INPUT] 1    0    [1    /1   ]  8.59198317795        1
[INPUT] 1    0    [1    /1   ]  0.489670744937       1

nuclear repulsion = 0
number of shells = 8
number of NR pGTOs = 12
number of NR cGTOs = 12
basis = {'Ar': [[0, [6294.386190145918, 1.0]], [0, [1573.5047741001406, 1.0]], [0, [238.00676172709905, 1.0]], [0, [51.793405439784955, 1.0]], [0, [4.741245711647989, 1.0]], [0, [0.3931874823926697, 1.0]], [1, [8.591983177953132, 1.0]], [1, [0.4896707449367709, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [6294.38619015]
bas 1, expnt(s) = [1573.5047741]
bas 2, expnt(s) = [238.00676173]
bas 3, expnt(s) = [51.79340544]
bas 4, expnt(s) = [4.74124571]
bas 5, expnt(s) = [0.39318748]
bas 6, expnt(s) = [8.59198318]
bas 7, expnt(s) = [0.48967074]
CPU time:        34.34
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  1  1  1  0 36 37  0]
 [ 0  1  1  1  0 38 39  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 6.29438619e+03 1.78537752e+03 1.57350477e+03 6.31198667e+02
 2.38006762e+02 1.53093586e+02 5.17934054e+01 4.87776502e+01
 4.74124571e+00 8.11772568e+00 3.93187482e-01 1.25448302e+00
 8.59198318e+00 4.29142143e+01 4.89670745e-01 1.19499088e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.318948203972994
cond(S) = 16.408762639352396
E1 = -687.737618615654  E_coul = 184.88446695150955
init E= -502.853151664144
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.682712943289052  LUMO = 179.559186064671
  mo_energy =
[-1.21096884e+02 -1.32657446e+01 -7.62183686e+00 -7.62183686e+00
 -7.62183686e+00 -1.65236147e+00 -6.82712943e-01 -6.82712943e-01
 -6.82712943e-01  1.79559186e+02  2.12608901e+03  1.27531653e+04]
E1 = -705.4610324196036  E_coul = 198.97736368861231
cycle= 1 E= -506.483668730991  delta_E= -3.63  |g|= 0.273  |ddm|= 0.295
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.358588
diis-c [-0.1285852  1.       ]
  HOMO = -0.237088343356163  LUMO = 180.953211842517
  mo_energy =
[-1.19708053e+02 -1.22305549e+01 -6.64693397e+00 -6.64693397e+00
 -6.64693397e+00 -1.16254130e+00 -2.37088343e-01 -2.37088343e-01
 -2.37088343e-01  1.80953212e+02  2.12737805e+03  1.27542679e+04]
E1 = -705.4509954167913  E_coul = 198.96719805260898
cycle= 2 E= -506.483797364182  delta_E= -0.000129  |g|= 0.0023  |ddm|= 0.0041
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00240205
diis-c [-4.63349152e-06 -2.98167207e-03  1.00298167e+00]
  HOMO = -0.23713234827084  LUMO = 180.951321900373
  mo_energy =
[-1.19711218e+02 -1.22308806e+01 -6.64742011e+00 -6.64742011e+00
 -6.64742011e+00 -1.16255909e+00 -2.37132348e-01 -2.37132348e-01
 -2.37132348e-01  1.80951322e+02  2.12737160e+03  1.27542590e+04]
E1 = -705.4509155142068  E_coul = 198.9671181372569
cycle= 3 E= -506.48379737695  delta_E= -1.28e-08  |g|= 2.32e-05  |ddm|= 3.63e-05
    CPU time for cycle= 3      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=3.16521e-05
diis-c [-1.05907850e-11  5.10338148e-05 -1.48496037e-02  1.01479857e+00]
  HOMO = -0.23713257224277  LUMO = 180.951316648714
  mo_energy =
[-1.19711231e+02 -1.22308823e+01 -6.64742316e+00 -6.64742316e+00
 -6.64742316e+00 -1.16255915e+00 -2.37132572e-01 -2.37132572e-01
 -2.37132572e-01  1.80951317e+02  2.12737159e+03  1.27542590e+04]
E1 = -705.4509149992141  E_coul = 198.96711762226352
cycle= 4 E= -506.483797376951  delta_E= -6.25e-13  |g|= 2.9e-08  |ddm|= 3e-07
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -705.4509149992141  E_coul = 198.96711762226352
  HOMO = -0.23713257185538  LUMO = 180.951316689062
  mo_energy =
[-1.19711231e+02 -1.22308823e+01 -6.64742316e+00 -6.64742316e+00
 -6.64742316e+00 -1.16255915e+00 -2.37132572e-01 -2.37132572e-01
 -2.37132572e-01  1.80951317e+02  2.12737159e+03  1.27542590e+04]
E1 = -705.4509150003332  E_coul = 198.96711762338256
Extra cycle  E= -506.483797376951  delta_E= -5.68e-14  |g|= 2.28e-10  |ddm|= 3.57e-10
    CPU time for scf_cycle      0.09 sec, wall time      0.10 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 16.408762639352396
E1 = -705.4509150003332  E_coul = 198.96711762338256
init E= -506.483797376951
    CPU time for initialize scf      0.05 sec, wall time      0.05 sec
  HOMO = -0.237132571852539  LUMO = 180.951316689357
  mo_energy =
[-1.19711231e+02 -1.22308823e+01 -6.64742316e+00 -6.64742316e+00
 -6.64742316e+00 -1.16255915e+00 -2.37132572e-01 -2.37132572e-01
 -2.37132572e-01  1.80951317e+02  2.12737159e+03  1.27542590e+04]
E1 = -705.4509150003422  E_coul = 198.96711762339132
cycle= 1 E= -506.483797376951  delta_E= -2.27e-13  |g|= 2.36e-12  |ddm|= 2.9e-12
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -705.4509150003422  E_coul = 198.96711762339132
  HOMO = -0.237132571852513  LUMO = 180.951316689358
  mo_energy =
[-1.19711231e+02 -1.22308823e+01 -6.64742316e+00 -6.64742316e+00
 -6.64742316e+00 -1.16255915e+00 -2.37132572e-01 -2.37132572e-01
 -2.37132572e-01  1.80951317e+02  2.12737159e+03  1.27542590e+04]
E1 = -705.4509150003421  E_coul = 198.96711762339135
Extra cycle  E= -506.483797376951  delta_E= 1.14e-13  |g|= 1.52e-12  |ddm|= 3.75e-14
    CPU time for scf_cycle      0.12 sec, wall time      0.13 sec
exp = [6.29438619e+03 1.57350477e+03 2.38006762e+02 5.17934054e+01
 4.74124571e+00 3.93187482e-01 8.59198318e+00 4.89670745e-01]
grad_E = [-8.94079157e-05  1.57592419e-03 -4.92426627e-03 -4.06523427e-03
  3.65393878e-03 -5.55531833e-03  1.96166061e-03 -2.68271412e-02]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((8, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([1.5735952963858392e+03,2.3761303919145971e+02,5.2332977870138201e+01,4.7281081235122091e+00,3.9325830426169639e-01,8.5907170030661746e+00,4.9039633283239870e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "6s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:46:07 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  6294.38727285        1
[INPUT] 0    0    [1    /1   ]  1573.48555001        1
[INPUT] 0    0    [1    /1   ]  238.073438536        1
[INPUT] 0    0    [1    /1   ]  51.7973189616        1
[INPUT] 0    0    [1    /1   ]  4.74947448758        1
[INPUT] 0    0    [1    /1   ]  0.392832528067       1
[INPUT] 1    0    [1    /1   ]  8.59363228382        1
[INPUT] 1    0    [1    /1   ]  0.488550183208       1

nuclear repulsion = 0
number of shells = 8
number of NR pGTOs = 12
number of NR cGTOs = 12
basis = {'Ar': [[0, [6294.387272846077, 1.0]], [0, [1573.4855500081344, 1.0]], [0, [238.0734385363629, 1.0]], [0, [51.797318961626615, 1.0]], [0, [4.749474487581499, 1.0]], [0, [0.39283252806713254, 1.0]], [1, [8.593632283820627, 1.0]], [1, [0.48855018320766036, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [6294.38727285]
bas 1, expnt(s) = [1573.48555001]
bas 2, expnt(s) = [238.07343854]
bas 3, expnt(s) = [51.79731896]
bas 4, expnt(s) = [4.74947449]
bas 5, expnt(s) = [0.39283253]
bas 6, expnt(s) = [8.59363228]
bas 7, expnt(s) = [0.48855018]
CPU time:        37.17
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  1  1  1  0 36 37  0]
 [ 0  1  1  1  0 38 39  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 6.29438727e+03 1.78537775e+03 1.57348555e+03 6.31192883e+02
 2.38073439e+02 1.53125751e+02 5.17973190e+01 4.87804144e+01
 4.74947449e+00 8.12829007e+00 3.92832528e-01 1.25363355e+00
 8.59363228e+00 4.29245104e+01 4.88550183e-01 1.19157359e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.32026072991988
cond(S) = 16.412924246901042
E1 = -687.7135694816969  E_coul = 184.86123829253867
init E= -502.852331189158
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.684233851087351  LUMO = 179.642492962194
  mo_energy =
[-1.21097326e+02 -1.32678082e+01 -7.62289436e+00 -7.62289436e+00
 -7.62289436e+00 -1.65362610e+00 -6.84233851e-01 -6.84233851e-01
 -6.84233851e-01  1.79642493e+02  2.12631996e+03  1.27533689e+04]
E1 = -705.4256658947024  E_coul = 198.9417476854628
cycle= 1 E= -506.48391820924  delta_E= -3.63  |g|= 0.272  |ddm|= 0.294
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.358517
diis-c [-0.12853431  1.        ]
  HOMO = -0.239662449951565  LUMO = 181.036298161788
  mo_energy =
[-1.19708142e+02 -1.22333925e+01 -6.64869333e+00 -6.64869333e+00
 -6.64869333e+00 -1.16454633e+00 -2.39662450e-01 -2.39662450e-01
 -2.39662450e-01  1.81036298e+02  2.12761027e+03  1.27544734e+04]
E1 = -705.4156671265916  E_coul = 198.9316214766036
cycle= 2 E= -506.484045649988  delta_E= -0.000127  |g|= 0.00229  |ddm|= 0.00408
    CPU time for cycle= 2      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.00238424
diis-c [-4.56047200e-06 -2.96617467e-03  1.00296617e+00]
  HOMO = -0.239706099793723  LUMO = 181.034412487369
  mo_energy =
[-1.19711296e+02 -1.22337171e+01 -6.64917714e+00 -6.64917714e+00
 -6.64917714e+00 -1.16456407e+00 -2.39706100e-01 -2.39706100e-01
 -2.39706100e-01  1.81034412e+02  2.12760383e+03  1.27544645e+04]
E1 = -705.4155876103289  E_coul = 198.93154194774348
cycle= 3 E= -506.484045662585  delta_E= -1.26e-08  |g|= 2.31e-05  |ddm|= 3.61e-05
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=3.14512e-05
diis-c [-1.05070408e-11  5.10557266e-05 -1.48697325e-02  1.01481868e+00]
  HOMO = -0.239706322053731  LUMO = 181.034407214575
  mo_energy =
[-1.19711310e+02 -1.22337188e+01 -6.64918018e+00 -6.64918018e+00
 -6.64918018e+00 -1.16456413e+00 -2.39706322e-01 -2.39706322e-01
 -2.39706322e-01  1.81034407e+02  2.12760382e+03  1.27544645e+04]
E1 = -705.4155870971822  E_coul = 198.93154143459515
cycle= 4 E= -506.484045662587  delta_E= -1.65e-12  |g|= 2.89e-08  |ddm|= 2.98e-07
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -705.4155870971822  E_coul = 198.93154143459515
  HOMO = -0.239706321669238  LUMO = 181.034407254778
  mo_energy =
[-1.19711310e+02 -1.22337188e+01 -6.64918018e+00 -6.64918018e+00
 -6.64918018e+00 -1.16456413e+00 -2.39706322e-01 -2.39706322e-01
 -2.39706322e-01  1.81034407e+02  2.12760382e+03  1.27544645e+04]
E1 = -705.4155870982975  E_coul = 198.93154143571056
Extra cycle  E= -506.484045662587  delta_E= 1.14e-13  |g|= 2.28e-10  |ddm|= 3.56e-10
    CPU time for scf_cycle      0.10 sec, wall time      0.10 sec
exp = [6.29438727e+03 1.57348555e+03 2.38073439e+02 5.17973190e+01
 4.74947449e+00 3.92832528e-01 8.59363228e+00 4.88550183e-01]
E = -506.48404566258694
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((8, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([1.5735952963858392e+03,2.3761303919145971e+02,5.2332977870138201e+01,4.7281081235122091e+00,3.9325830426169639e-01,8.5907170030661746e+00,4.9039633283239870e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "6s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:46:08 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  6294.38727285        1
[INPUT] 0    0    [1    /1   ]  1573.48555001        1
[INPUT] 0    0    [1    /1   ]  238.073438536        1
[INPUT] 0    0    [1    /1   ]  51.7973189616        1
[INPUT] 0    0    [1    /1   ]  4.74947448758        1
[INPUT] 0    0    [1    /1   ]  0.392832528067       1
[INPUT] 1    0    [1    /1   ]  8.59363228382        1
[INPUT] 1    0    [1    /1   ]  0.488550183208       1

nuclear repulsion = 0
number of shells = 8
number of NR pGTOs = 12
number of NR cGTOs = 12
basis = {'Ar': [[0, [6294.387272846077, 1.0]], [0, [1573.4855500081344, 1.0]], [0, [238.0734385363629, 1.0]], [0, [51.797318961626615, 1.0]], [0, [4.749474487581499, 1.0]], [0, [0.39283252806713254, 1.0]], [1, [8.593632283820627, 1.0]], [1, [0.48855018320766036, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [6294.38727285]
bas 1, expnt(s) = [1573.48555001]
bas 2, expnt(s) = [238.07343854]
bas 3, expnt(s) = [51.79731896]
bas 4, expnt(s) = [4.74947449]
bas 5, expnt(s) = [0.39283253]
bas 6, expnt(s) = [8.59363228]
bas 7, expnt(s) = [0.48855018]
CPU time:        37.45
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  1  1  1  0 36 37  0]
 [ 0  1  1  1  0 38 39  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 6.29438727e+03 1.78537775e+03 1.57348555e+03 6.31192883e+02
 2.38073439e+02 1.53125751e+02 5.17973190e+01 4.87804144e+01
 4.74947449e+00 8.12829007e+00 3.92832528e-01 1.25363355e+00
 8.59363228e+00 4.29245104e+01 4.88550183e-01 1.19157359e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.32026072991988
cond(S) = 16.412924246901042
E1 = -687.7135694816969  E_coul = 184.86123829253867
init E= -502.852331189158
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.684233851087351  LUMO = 179.642492962194
  mo_energy =
[-1.21097326e+02 -1.32678082e+01 -7.62289436e+00 -7.62289436e+00
 -7.62289436e+00 -1.65362610e+00 -6.84233851e-01 -6.84233851e-01
 -6.84233851e-01  1.79642493e+02  2.12631996e+03  1.27533689e+04]
E1 = -705.4256658947024  E_coul = 198.9417476854628
cycle= 1 E= -506.48391820924  delta_E= -3.63  |g|= 0.272  |ddm|= 0.294
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.358517
diis-c [-0.12853431  1.        ]
  HOMO = -0.239662449951565  LUMO = 181.036298161788
  mo_energy =
[-1.19708142e+02 -1.22333925e+01 -6.64869333e+00 -6.64869333e+00
 -6.64869333e+00 -1.16454633e+00 -2.39662450e-01 -2.39662450e-01
 -2.39662450e-01  1.81036298e+02  2.12761027e+03  1.27544734e+04]
E1 = -705.4156671265916  E_coul = 198.9316214766036
cycle= 2 E= -506.484045649988  delta_E= -0.000127  |g|= 0.00229  |ddm|= 0.00408
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00238424
diis-c [-4.56047200e-06 -2.96617467e-03  1.00296617e+00]
  HOMO = -0.239706099793723  LUMO = 181.034412487369
  mo_energy =
[-1.19711296e+02 -1.22337171e+01 -6.64917714e+00 -6.64917714e+00
 -6.64917714e+00 -1.16456407e+00 -2.39706100e-01 -2.39706100e-01
 -2.39706100e-01  1.81034412e+02  2.12760383e+03  1.27544645e+04]
E1 = -705.4155876103289  E_coul = 198.93154194774348
cycle= 3 E= -506.484045662585  delta_E= -1.26e-08  |g|= 2.31e-05  |ddm|= 3.61e-05
    CPU time for cycle= 3      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=3.14512e-05
diis-c [-1.05070408e-11  5.10557266e-05 -1.48697325e-02  1.01481868e+00]
  HOMO = -0.239706322053731  LUMO = 181.034407214575
  mo_energy =
[-1.19711310e+02 -1.22337188e+01 -6.64918018e+00 -6.64918018e+00
 -6.64918018e+00 -1.16456413e+00 -2.39706322e-01 -2.39706322e-01
 -2.39706322e-01  1.81034407e+02  2.12760382e+03  1.27544645e+04]
E1 = -705.4155870971822  E_coul = 198.93154143459515
cycle= 4 E= -506.484045662587  delta_E= -1.65e-12  |g|= 2.89e-08  |ddm|= 2.98e-07
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -705.4155870971822  E_coul = 198.93154143459515
  HOMO = -0.239706321669238  LUMO = 181.034407254778
  mo_energy =
[-1.19711310e+02 -1.22337188e+01 -6.64918018e+00 -6.64918018e+00
 -6.64918018e+00 -1.16456413e+00 -2.39706322e-01 -2.39706322e-01
 -2.39706322e-01  1.81034407e+02  2.12760382e+03  1.27544645e+04]
E1 = -705.4155870982975  E_coul = 198.93154143571056
Extra cycle  E= -506.484045662587  delta_E= 1.14e-13  |g|= 2.28e-10  |ddm|= 3.56e-10
    CPU time for scf_cycle      0.09 sec, wall time      0.10 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 16.412924246901042
E1 = -705.4155870982975  E_coul = 198.93154143571056
init E= -506.484045662587
    CPU time for initialize scf      0.05 sec, wall time      0.05 sec
  HOMO = -0.239706321666419  LUMO = 181.034407255071
  mo_energy =
[-1.19711310e+02 -1.22337188e+01 -6.64918018e+00 -6.64918018e+00
 -6.64918018e+00 -1.16456413e+00 -2.39706322e-01 -2.39706322e-01
 -2.39706322e-01  1.81034407e+02  2.12760382e+03  1.27544645e+04]
E1 = -705.4155870983063  E_coul = 198.9315414357194
cycle= 1 E= -506.484045662587  delta_E=    0  |g|= 2.95e-12  |ddm|= 2.91e-12
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -705.4155870983063  E_coul = 198.9315414357194
  HOMO = -0.239706321666394  LUMO = 181.034407255073
  mo_energy =
[-1.19711310e+02 -1.22337188e+01 -6.64918018e+00 -6.64918018e+00
 -6.64918018e+00 -1.16456413e+00 -2.39706322e-01 -2.39706322e-01
 -2.39706322e-01  1.81034407e+02  2.12760382e+03  1.27544645e+04]
E1 = -705.415587098306  E_coul = 198.93154143571934
Extra cycle  E= -506.484045662587  delta_E= 2.84e-13  |g|= 4.28e-12  |ddm|= 2.22e-14
    CPU time for scf_cycle      0.12 sec, wall time      0.12 sec
exp = [6.29438727e+03 1.57348555e+03 2.38073439e+02 5.17973190e+01
 4.74947449e+00 3.92832528e-01 8.59363228e+00 4.88550183e-01]
grad_E = [-8.93925714e-05  1.57359893e-03 -4.87305461e-03 -4.20668327e-03
  1.12572453e-02 -1.46506546e-02  4.92934246e-03 -7.00476428e-02]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((8, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([1.5735952963858392e+03,2.3761303919145971e+02,5.2332977870138201e+01,4.7281081235122091e+00,3.9325830426169639e-01,8.5907170030661746e+00,4.9039633283239870e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "6s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:46:10 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  6294.39021261        1
[INPUT] 0    0    [1    /1   ]  1573.43338158        1
[INPUT] 0    0    [1    /1   ]  238.253104233        1
[INPUT] 0    0    [1    /1   ]  51.8165198468        1
[INPUT] 0    0    [1    /1   ]  4.76202131122        1
[INPUT] 0    0    [1    /1   ]  0.392307140734       1
[INPUT] 1    0    [1    /1   ]  8.5961091738         1
[INPUT] 1    0    [1    /1   ]  0.486857880461       1

nuclear repulsion = 0
number of shells = 8
number of NR pGTOs = 12
number of NR cGTOs = 12
basis = {'Ar': [[0, [6294.390212610635, 1.0]], [0, [1573.4333815820326, 1.0]], [0, [238.2531042332902, 1.0]], [0, [51.81651984676691, 1.0]], [0, [4.762021311217443, 1.0]], [0, [0.39230714073406653, 1.0]], [1, [8.596109173796831, 1.0]], [1, [0.48685788046055206, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [6294.39021261]
bas 1, expnt(s) = [1573.43338158]
bas 2, expnt(s) = [238.25310423]
bas 3, expnt(s) = [51.81651985]
bas 4, expnt(s) = [4.76202131]
bas 5, expnt(s) = [0.39230714]
bas 6, expnt(s) = [8.59610917]
bas 7, expnt(s) = [0.48685788]
CPU time:        40.28
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  1  1  1  0 36 37  0]
 [ 0  1  1  1  0 38 39  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 6.29439021e+03 1.78537838e+03 1.57343338e+03 6.31177188e+02
 2.38253104e+02 1.53212412e+02 5.18165198e+01 4.87939756e+01
 4.76202131e+00 8.14438931e+00 3.92307141e-01 1.25237585e+00
 8.59610917e+00 4.29399758e+01 4.86857880e-01 1.18641642e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.322188755826424
cond(S) = 16.422110347574055
E1 = -687.676854348659  E_coul = 184.82573440648832
init E= -502.851119942171
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.686539961501597  LUMO = 179.852739960893
  mo_energy =
[-1.21098142e+02 -1.32709782e+01 -7.62451788e+00 -7.62451788e+00
 -7.62451788e+00 -1.65557864e+00 -6.86539962e-01 -6.86539962e-01
 -6.86539962e-01  1.79852740e+02  2.12694585e+03  1.27539213e+04]
E1 = -705.3732715520175  E_coul = 198.8887375502651
cycle= 1 E= -506.484534001752  delta_E= -3.63  |g|= 0.27  |ddm|= 0.292
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.35834
diis-c [-0.12840729  1.        ]
  HOMO = -0.243528005200793  LUMO = 181.246401327636
  mo_energy =
[-1.19708230e+02 -1.22376601e+01 -6.65130337e+00 -6.65130337e+00
 -6.65130337e+00 -1.16757655e+00 -2.43528005e-01 -2.43528005e-01
 -2.43528005e-01  1.81246401e+02  2.12823853e+03  1.27550292e+04]
E1 = -705.3633390715346  E_coul = 198.8786795450707
cycle= 2 E= -506.484659526464  delta_E= -0.000126  |g|= 0.00226  |ddm|= 0.00404
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.0023562
diis-c [-4.44528774e-06 -2.94402879e-03  1.00294403e+00]
  HOMO = -0.243571080392757  LUMO = 181.244523176204
  mo_energy =
[-1.19711365e+02 -1.22379828e+01 -6.65178317e+00 -6.65178317e+00
 -6.65178317e+00 -1.16759420e+00 -2.43571080e-01 -2.43571080e-01
 -2.43571080e-01  1.81244523e+02  2.12823211e+03  1.27550203e+04]
E1 = -705.3632602347051  E_coul = 198.87860069591886
cycle= 3 E= -506.484659538786  delta_E= -1.23e-08  |g|= 2.28e-05  |ddm|= 3.57e-05
    CPU time for cycle= 3      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=3.11129e-05
diis-c [-1.03695955e-11  5.10700807e-05 -1.48939755e-02  1.01484291e+00]
  HOMO = -0.243571299690136  LUMO = 181.244517882176
  mo_energy =
[-1.19711379e+02 -1.22379845e+01 -6.65178619e+00 -6.65178619e+00
 -6.65178619e+00 -1.16759426e+00 -2.43571300e-01 -2.43571300e-01
 -2.43571300e-01  1.81244518e+02  2.12823210e+03  1.27550203e+04]
E1 = -705.3632597254065  E_coul = 198.87860018661888
cycle= 4 E= -506.484659538788  delta_E= -1.36e-12  |g|= 2.87e-08  |ddm|= 2.95e-07
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -705.3632597254065  E_coul = 198.87860018661888
  HOMO = -0.2435712993109  LUMO = 181.244517922118
  mo_energy =
[-1.19711378e+02 -1.22379845e+01 -6.65178619e+00 -6.65178619e+00
 -6.65178619e+00 -1.16759426e+00 -2.43571299e-01 -2.43571299e-01
 -2.43571299e-01  1.81244518e+02  2.12823210e+03  1.27550203e+04]
E1 = -705.3632597265145  E_coul = 198.8786001877268
Extra cycle  E= -506.484659538788  delta_E= -1.14e-13  |g|= 2.26e-10  |ddm|= 3.54e-10
    CPU time for scf_cycle      0.09 sec, wall time      0.10 sec
exp = [6.29439021e+03 1.57343338e+03 2.38253104e+02 5.18165198e+01
 4.76202131e+00 3.92307141e-01 8.59610917e+00 4.86857880e-01]
E = -506.4846595387877
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((8, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([1.5735952963858392e+03,2.3761303919145971e+02,5.2332977870138201e+01,4.7281081235122091e+00,3.9325830426169639e-01,8.5907170030661746e+00,4.9039633283239870e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "6s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:46:11 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  6294.39021261        1
[INPUT] 0    0    [1    /1   ]  1573.43338158        1
[INPUT] 0    0    [1    /1   ]  238.253104233        1
[INPUT] 0    0    [1    /1   ]  51.8165198468        1
[INPUT] 0    0    [1    /1   ]  4.76202131122        1
[INPUT] 0    0    [1    /1   ]  0.392307140734       1
[INPUT] 1    0    [1    /1   ]  8.5961091738         1
[INPUT] 1    0    [1    /1   ]  0.486857880461       1

nuclear repulsion = 0
number of shells = 8
number of NR pGTOs = 12
number of NR cGTOs = 12
basis = {'Ar': [[0, [6294.390212610635, 1.0]], [0, [1573.4333815820326, 1.0]], [0, [238.2531042332902, 1.0]], [0, [51.81651984676691, 1.0]], [0, [4.762021311217443, 1.0]], [0, [0.39230714073406653, 1.0]], [1, [8.596109173796831, 1.0]], [1, [0.48685788046055206, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [6294.39021261]
bas 1, expnt(s) = [1573.43338158]
bas 2, expnt(s) = [238.25310423]
bas 3, expnt(s) = [51.81651985]
bas 4, expnt(s) = [4.76202131]
bas 5, expnt(s) = [0.39230714]
bas 6, expnt(s) = [8.59610917]
bas 7, expnt(s) = [0.48685788]
CPU time:        40.58
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  1  1  1  0 36 37  0]
 [ 0  1  1  1  0 38 39  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 6.29439021e+03 1.78537838e+03 1.57343338e+03 6.31177188e+02
 2.38253104e+02 1.53212412e+02 5.18165198e+01 4.87939756e+01
 4.76202131e+00 8.14438931e+00 3.92307141e-01 1.25237585e+00
 8.59610917e+00 4.29399758e+01 4.86857880e-01 1.18641642e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.322188755826424
cond(S) = 16.422110347574055
E1 = -687.676854348659  E_coul = 184.82573440648832
init E= -502.851119942171
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.686539961501597  LUMO = 179.852739960893
  mo_energy =
[-1.21098142e+02 -1.32709782e+01 -7.62451788e+00 -7.62451788e+00
 -7.62451788e+00 -1.65557864e+00 -6.86539962e-01 -6.86539962e-01
 -6.86539962e-01  1.79852740e+02  2.12694585e+03  1.27539213e+04]
E1 = -705.3732715520175  E_coul = 198.8887375502651
cycle= 1 E= -506.484534001752  delta_E= -3.63  |g|= 0.27  |ddm|= 0.292
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.35834
diis-c [-0.12840729  1.        ]
  HOMO = -0.243528005200793  LUMO = 181.246401327636
  mo_energy =
[-1.19708230e+02 -1.22376601e+01 -6.65130337e+00 -6.65130337e+00
 -6.65130337e+00 -1.16757655e+00 -2.43528005e-01 -2.43528005e-01
 -2.43528005e-01  1.81246401e+02  2.12823853e+03  1.27550292e+04]
E1 = -705.3633390715346  E_coul = 198.8786795450707
cycle= 2 E= -506.484659526464  delta_E= -0.000126  |g|= 0.00226  |ddm|= 0.00404
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.0023562
diis-c [-4.44528774e-06 -2.94402879e-03  1.00294403e+00]
  HOMO = -0.243571080392757  LUMO = 181.244523176204
  mo_energy =
[-1.19711365e+02 -1.22379828e+01 -6.65178317e+00 -6.65178317e+00
 -6.65178317e+00 -1.16759420e+00 -2.43571080e-01 -2.43571080e-01
 -2.43571080e-01  1.81244523e+02  2.12823211e+03  1.27550203e+04]
E1 = -705.3632602347051  E_coul = 198.87860069591886
cycle= 3 E= -506.484659538786  delta_E= -1.23e-08  |g|= 2.28e-05  |ddm|= 3.57e-05
    CPU time for cycle= 3      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=3.11129e-05
diis-c [-1.03695955e-11  5.10700807e-05 -1.48939755e-02  1.01484291e+00]
  HOMO = -0.243571299690136  LUMO = 181.244517882176
  mo_energy =
[-1.19711379e+02 -1.22379845e+01 -6.65178619e+00 -6.65178619e+00
 -6.65178619e+00 -1.16759426e+00 -2.43571300e-01 -2.43571300e-01
 -2.43571300e-01  1.81244518e+02  2.12823210e+03  1.27550203e+04]
E1 = -705.3632597254065  E_coul = 198.87860018661888
cycle= 4 E= -506.484659538788  delta_E= -1.36e-12  |g|= 2.87e-08  |ddm|= 2.95e-07
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -705.3632597254065  E_coul = 198.87860018661888
  HOMO = -0.2435712993109  LUMO = 181.244517922118
  mo_energy =
[-1.19711378e+02 -1.22379845e+01 -6.65178619e+00 -6.65178619e+00
 -6.65178619e+00 -1.16759426e+00 -2.43571299e-01 -2.43571299e-01
 -2.43571299e-01  1.81244518e+02  2.12823210e+03  1.27550203e+04]
E1 = -705.3632597265145  E_coul = 198.8786001877268
Extra cycle  E= -506.484659538788  delta_E= -1.14e-13  |g|= 2.26e-10  |ddm|= 3.54e-10
    CPU time for scf_cycle      0.09 sec, wall time      0.10 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 16.422110347574055
E1 = -705.3632597265145  E_coul = 198.8786001877268
init E= -506.484659538788
    CPU time for initialize scf      0.05 sec, wall time      0.05 sec
  HOMO = -0.243571299308118  LUMO = 181.24451792241
  mo_energy =
[-1.19711378e+02 -1.22379845e+01 -6.65178619e+00 -6.65178619e+00
 -6.65178619e+00 -1.16759426e+00 -2.43571299e-01 -2.43571299e-01
 -2.43571299e-01  1.81244518e+02  2.12823210e+03  1.27550203e+04]
E1 = -705.3632597265225  E_coul = 198.8786001877351
cycle= 1 E= -506.484659538787  delta_E= 2.27e-13  |g|= 5.1e-12  |ddm|= 2.87e-12
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -705.3632597265225  E_coul = 198.8786001877351
  HOMO = -0.243571299308103  LUMO = 181.244517922411
  mo_energy =
[-1.19711378e+02 -1.22379845e+01 -6.65178619e+00 -6.65178619e+00
 -6.65178619e+00 -1.16759426e+00 -2.43571299e-01 -2.43571299e-01
 -2.43571299e-01  1.81244518e+02  2.12823210e+03  1.27550203e+04]
E1 = -705.363259726523  E_coul = 198.8786001877354
Extra cycle  E= -506.484659538788  delta_E= -1.14e-13  |g|= 3.57e-12  |ddm|= 3.38e-14
    CPU time for scf_cycle      0.12 sec, wall time      0.12 sec
exp = [6.29439021e+03 1.57343338e+03 2.38253104e+02 5.18165198e+01
 4.76202131e+00 3.92307141e-01 8.59610917e+00 4.86857880e-01]
grad_E = [-8.93482398e-05  1.56787297e-03 -4.76825810e-03 -4.37145855e-03
  2.28227841e-02 -2.84189221e-02  9.42503335e-03 -1.35460942e-01]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((8, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([1.5735952963858392e+03,2.3761303919145971e+02,5.2332977870138201e+01,4.7281081235122091e+00,3.9325830426169639e-01,8.5907170030661746e+00,4.9039633283239870e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "6s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:46:14 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  6294.39823229        1
[INPUT] 0    0    [1    /1   ]  1573.29110781        1
[INPUT] 0    0    [1    /1   ]  238.74144481         1
[INPUT] 0    0    [1    /1   ]  51.8794013747        1
[INPUT] 0    0    [1    /1   ]  4.78168373823        1
[INPUT] 0    0    [1    /1   ]  0.391517896642       1
[INPUT] 1    0    [1    /1   ]  8.59992462304        1
[INPUT] 1    0    [1    /1   ]  0.484232143908       1

nuclear repulsion = 0
number of shells = 8
number of NR pGTOs = 12
number of NR cGTOs = 12
basis = {'Ar': [[0, [6294.398232288105, 1.0]], [0, [1573.2911078051245, 1.0]], [0, [238.74144481042245, 1.0]], [0, [51.87940137465198, 1.0]], [0, [4.781683738232667, 1.0]], [0, [0.391517896642234, 1.0]], [1, [8.599924623036607, 1.0]], [1, [0.48423214390777025, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [6294.39823229]
bas 1, expnt(s) = [1573.29110781]
bas 2, expnt(s) = [238.74144481]
bas 3, expnt(s) = [51.87940137]
bas 4, expnt(s) = [4.78168374]
bas 5, expnt(s) = [0.3915179]
bas 6, expnt(s) = [8.59992462]
bas 7, expnt(s) = [0.48423214]
CPU time:        43.41
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  1  1  1  0 36 37  0]
 [ 0  1  1  1  0 38 39  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 6.29439823e+03 1.78538009e+03 1.57329111e+03 6.31134383e+02
 2.38741445e+02 1.53447878e+02 5.18794014e+01 4.88383791e+01
 4.78168374e+00 8.16959751e+00 3.91517897e-01 1.25048572e+00
 8.59992462e+00 4.29638012e+01 4.84232144e-01 1.17842355e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.325050463746948
cond(S) = 16.443637015856535
E1 = -687.6190539915036  E_coul = 184.76952964939122
init E= -502.849524342112
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.690140902095212  LUMO = 180.396644771402
  mo_energy =
[-1.21099809e+02 -1.32760238e+01 -7.62711102e+00 -7.62711102e+00
 -7.62711102e+00 -1.65870839e+00 -6.90140902e-01 -6.90140902e-01
 -6.90140902e-01  1.80396645e+02  2.12864408e+03  1.27554215e+04]
E1 = -705.2942239604835  E_coul = 198.80811011567317
cycle= 1 E= -506.48611384481  delta_E= -3.64  |g|= 0.268  |ddm|= 0.289
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.35782
diis-c [-0.12803527  1.        ]
  HOMO = -0.249475155772521  LUMO = 181.790511781476
  mo_energy =
[-1.19708338e+02 -1.22442437e+01 -6.65525736e+00 -6.65525736e+00
 -6.65525736e+00 -1.17228324e+00 -2.49475156e-01 -2.49475156e-01
 -2.49475156e-01  1.81790512e+02  2.12994142e+03  1.27565361e+04]
E1 = -705.2844147606511  E_coul = 198.7981786345209
cycle= 2 E= -506.48623612613  delta_E= -0.000122  |g|= 0.00222  |ddm|= 0.00399
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.0023098
diis-c [-4.25552089e-06 -2.91240451e-03  1.00291240e+00]
  HOMO = -0.249517246837805  LUMO = 181.788647688131
  mo_energy =
[-1.19711439e+02 -1.22445625e+01 -6.65572981e+00 -6.65572981e+00
 -6.65572981e+00 -1.17230070e+00 -2.49517247e-01 -2.49517247e-01
 -2.49517247e-01  1.81788648e+02  2.12993503e+03  1.27565273e+04]
E1 = -705.2843372109257  E_coul = 198.79810107294466
cycle= 3 E= -506.486236137981  delta_E= -1.19e-08  |g|= 2.24e-05  |ddm|= 3.5e-05
    CPU time for cycle= 3      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=3.05038e-05
diis-c [-1.01396792e-11  5.10353074e-05 -1.49155519e-02  1.01486452e+00]
  HOMO = -0.249517460638725  LUMO = 181.788642386073
  mo_energy =
[-1.19711452e+02 -1.22445642e+01 -6.65573278e+00 -6.65573278e+00
 -6.65573278e+00 -1.17230076e+00 -2.49517461e-01 -2.49517461e-01
 -2.49517461e-01  1.81788642e+02  2.12993502e+03  1.27565273e+04]
E1 = -705.2843367101832  E_coul = 198.7981005722008
cycle= 4 E= -506.486236137982  delta_E= -1.25e-12  |g|= 2.83e-08  |ddm|= 2.89e-07
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -705.2843367101832  E_coul = 198.7981005722008
  HOMO = -0.249517460269642  LUMO = 181.788642425508
  mo_energy =
[-1.19711452e+02 -1.22445642e+01 -6.65573277e+00 -6.65573277e+00
 -6.65573277e+00 -1.17230076e+00 -2.49517460e-01 -2.49517460e-01
 -2.49517460e-01  1.81788642e+02  2.12993503e+03  1.27565273e+04]
E1 = -705.2843367112748  E_coul = 198.7981005732924
Extra cycle  E= -506.486236137982  delta_E= -5.68e-14  |g|= 2.22e-10  |ddm|= 3.49e-10
    CPU time for scf_cycle      0.09 sec, wall time      0.09 sec
exp = [6.29439823e+03 1.57329111e+03 2.38741445e+02 5.18794014e+01
 4.78168374e+00 3.91517897e-01 8.59992462e+00 4.84232144e-01]
E = -506.4862361379824
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((8, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([1.5735952963858392e+03,2.3761303919145971e+02,5.2332977870138201e+01,4.7281081235122091e+00,3.9325830426169639e-01,8.5907170030661746e+00,4.9039633283239870e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "6s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:46:14 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  6294.39823229        1
[INPUT] 0    0    [1    /1   ]  1573.29110781        1
[INPUT] 0    0    [1    /1   ]  238.74144481         1
[INPUT] 0    0    [1    /1   ]  51.8794013747        1
[INPUT] 0    0    [1    /1   ]  4.78168373823        1
[INPUT] 0    0    [1    /1   ]  0.391517896642       1
[INPUT] 1    0    [1    /1   ]  8.59992462304        1
[INPUT] 1    0    [1    /1   ]  0.484232143908       1

nuclear repulsion = 0
number of shells = 8
number of NR pGTOs = 12
number of NR cGTOs = 12
basis = {'Ar': [[0, [6294.398232288105, 1.0]], [0, [1573.2911078051245, 1.0]], [0, [238.74144481042245, 1.0]], [0, [51.87940137465198, 1.0]], [0, [4.781683738232667, 1.0]], [0, [0.391517896642234, 1.0]], [1, [8.599924623036607, 1.0]], [1, [0.48423214390777025, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [6294.39823229]
bas 1, expnt(s) = [1573.29110781]
bas 2, expnt(s) = [238.74144481]
bas 3, expnt(s) = [51.87940137]
bas 4, expnt(s) = [4.78168374]
bas 5, expnt(s) = [0.3915179]
bas 6, expnt(s) = [8.59992462]
bas 7, expnt(s) = [0.48423214]
CPU time:        43.72
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  1  1  1  0 36 37  0]
 [ 0  1  1  1  0 38 39  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 6.29439823e+03 1.78538009e+03 1.57329111e+03 6.31134383e+02
 2.38741445e+02 1.53447878e+02 5.18794014e+01 4.88383791e+01
 4.78168374e+00 8.16959751e+00 3.91517897e-01 1.25048572e+00
 8.59992462e+00 4.29638012e+01 4.84232144e-01 1.17842355e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.325050463746948
cond(S) = 16.443637015856535
E1 = -687.6190539915036  E_coul = 184.76952964939122
init E= -502.849524342112
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.690140902095212  LUMO = 180.396644771402
  mo_energy =
[-1.21099809e+02 -1.32760238e+01 -7.62711102e+00 -7.62711102e+00
 -7.62711102e+00 -1.65870839e+00 -6.90140902e-01 -6.90140902e-01
 -6.90140902e-01  1.80396645e+02  2.12864408e+03  1.27554215e+04]
E1 = -705.2942239604835  E_coul = 198.80811011567317
cycle= 1 E= -506.48611384481  delta_E= -3.64  |g|= 0.268  |ddm|= 0.289
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.35782
diis-c [-0.12803527  1.        ]
  HOMO = -0.249475155772521  LUMO = 181.790511781476
  mo_energy =
[-1.19708338e+02 -1.22442437e+01 -6.65525736e+00 -6.65525736e+00
 -6.65525736e+00 -1.17228324e+00 -2.49475156e-01 -2.49475156e-01
 -2.49475156e-01  1.81790512e+02  2.12994142e+03  1.27565361e+04]
E1 = -705.2844147606511  E_coul = 198.7981786345209
cycle= 2 E= -506.48623612613  delta_E= -0.000122  |g|= 0.00222  |ddm|= 0.00399
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.0023098
diis-c [-4.25552089e-06 -2.91240451e-03  1.00291240e+00]
  HOMO = -0.249517246837805  LUMO = 181.788647688131
  mo_energy =
[-1.19711439e+02 -1.22445625e+01 -6.65572981e+00 -6.65572981e+00
 -6.65572981e+00 -1.17230070e+00 -2.49517247e-01 -2.49517247e-01
 -2.49517247e-01  1.81788648e+02  2.12993503e+03  1.27565273e+04]
E1 = -705.2843372109257  E_coul = 198.79810107294466
cycle= 3 E= -506.486236137981  delta_E= -1.19e-08  |g|= 2.24e-05  |ddm|= 3.5e-05
    CPU time for cycle= 3      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=3.05038e-05
diis-c [-1.01396792e-11  5.10353074e-05 -1.49155519e-02  1.01486452e+00]
  HOMO = -0.249517460638725  LUMO = 181.788642386073
  mo_energy =
[-1.19711452e+02 -1.22445642e+01 -6.65573278e+00 -6.65573278e+00
 -6.65573278e+00 -1.17230076e+00 -2.49517461e-01 -2.49517461e-01
 -2.49517461e-01  1.81788642e+02  2.12993502e+03  1.27565273e+04]
E1 = -705.2843367101832  E_coul = 198.7981005722008
cycle= 4 E= -506.486236137982  delta_E= -1.25e-12  |g|= 2.83e-08  |ddm|= 2.89e-07
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -705.2843367101832  E_coul = 198.7981005722008
  HOMO = -0.249517460269642  LUMO = 181.788642425508
  mo_energy =
[-1.19711452e+02 -1.22445642e+01 -6.65573277e+00 -6.65573277e+00
 -6.65573277e+00 -1.17230076e+00 -2.49517460e-01 -2.49517460e-01
 -2.49517460e-01  1.81788642e+02  2.12993503e+03  1.27565273e+04]
E1 = -705.2843367112748  E_coul = 198.7981005732924
Extra cycle  E= -506.486236137982  delta_E= -5.68e-14  |g|= 2.22e-10  |ddm|= 3.49e-10
    CPU time for scf_cycle      0.09 sec, wall time      0.10 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 16.443637015856535
E1 = -705.2843367112748  E_coul = 198.7981005732924
init E= -506.486236137982
    CPU time for initialize scf      0.05 sec, wall time      0.05 sec
  HOMO = -0.249517460266932  LUMO = 181.788642425795
  mo_energy =
[-1.19711452e+02 -1.22445642e+01 -6.65573277e+00 -6.65573277e+00
 -6.65573277e+00 -1.17230076e+00 -2.49517460e-01 -2.49517460e-01
 -2.49517460e-01  1.81788642e+02  2.12993503e+03  1.27565273e+04]
E1 = -705.2843367112827  E_coul = 198.7981005733008
cycle= 1 E= -506.486236137982  delta_E= 5.12e-13  |g|= 3.34e-12  |ddm|= 2.85e-12
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -705.2843367112827  E_coul = 198.7981005733008
  HOMO = -0.249517460266911  LUMO = 181.788642425797
  mo_energy =
[-1.19711452e+02 -1.22445642e+01 -6.65573277e+00 -6.65573277e+00
 -6.65573277e+00 -1.17230076e+00 -2.49517460e-01 -2.49517460e-01
 -2.49517460e-01  1.81788642e+02  2.12993503e+03  1.27565273e+04]
E1 = -705.2843367112831  E_coul = 198.79810057330099
Extra cycle  E= -506.486236137982  delta_E= -2.27e-13  |g|= 4.05e-12  |ddm|= 2.64e-14
    CPU time for scf_cycle      0.12 sec, wall time      0.12 sec
exp = [6.29439823e+03 1.57329111e+03 2.38741445e+02 5.18794014e+01
 4.78168374e+00 3.91517897e-01 8.59992462e+00 4.84232144e-01]
grad_E = [-8.92200133e-05  1.55298137e-03 -4.52550688e-03 -4.55509118e-03
  4.08875360e-02 -4.98418358e-02  1.64308905e-02 -2.37308798e-01]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((8, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([1.5735952963858392e+03,2.3761303919145971e+02,5.2332977870138201e+01,4.7281081235122091e+00,3.9325830426169639e-01,8.5907170030661746e+00,4.9039633283239870e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "6s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:46:17 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  6294.41821827        1
[INPUT] 0    0    [1    /1   ]  1572.93661654        1
[INPUT] 0    0    [1    /1   ]  239.955726689        1
[INPUT] 0    0    [1    /1   ]  52.0507227255        1
[INPUT] 0    0    [1    /1   ]  4.80909406311        1
[INPUT] 0    0    [1    /1   ]  0.390497671215       1
[INPUT] 1    0    [1    /1   ]  8.60508470095        1
[INPUT] 1    0    [1    /1   ]  0.480626381448       1

nuclear repulsion = 0
number of shells = 8
number of NR pGTOs = 12
number of NR cGTOs = 12
basis = {'Ar': [[0, [6294.418218270013, 1.0]], [0, [1572.9366165439835, 1.0]], [0, [239.955726689163, 1.0]], [0, [52.050722725527514, 1.0]], [0, [4.8090940631105035, 1.0]], [0, [0.3904976712146541, 1.0]], [1, [8.60508470095401, 1.0]], [1, [0.48062638144849856, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [6294.41821827]
bas 1, expnt(s) = [1572.93661654]
bas 2, expnt(s) = [239.95572669]
bas 3, expnt(s) = [52.05072273]
bas 4, expnt(s) = [4.80909406]
bas 5, expnt(s) = [0.39049767]
bas 6, expnt(s) = [8.6050847]
bas 7, expnt(s) = [0.48062638]
CPU time:        46.61
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  1  1  1  0 36 37  0]
 [ 0  1  1  1  0 38 39  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 6.29441822e+03 1.78538434e+03 1.57293662e+03 6.31027725e+02
 2.39955727e+02 1.54032854e+02 5.20507227e+01 4.89592884e+01
 4.80909406e+00 8.20469569e+00 3.90497671e-01 1.24804102e+00
 8.60508470e+00 4.29960272e+01 4.80626381e-01 1.16746508e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.328710607934447
cond(S) = 16.492047362580433
E1 = -687.5387141441606  E_coul = 184.69050016269745
init E= -502.848213981463
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.695128411182381  LUMO = 181.706701378873
  mo_energy =
[-1.21102913e+02 -1.32832574e+01 -7.63079066e+00 -7.63079066e+00
 -7.63079066e+00 -1.66322025e+00 -6.95128411e-01 -6.95128411e-01
 -6.95128411e-01  1.81706701e+02  2.13285745e+03  1.27591484e+04]
E1 = -705.1914624690496  E_coul = 198.70159179451215
cycle= 1 E= -506.489870674537  delta_E= -3.64  |g|= 0.264  |ddm|= 0.286
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.356468
diis-c [-0.12706949  1.        ]
  HOMO = -0.257530920783851  LUMO = 183.101870873065
  mo_energy =
[-1.19708310e+02 -1.22532253e+01 -6.66043776e+00 -6.66043776e+00
 -6.66043776e+00 -1.17875605e+00 -2.57530921e-01 -2.57530921e-01
 -2.57530921e-01  1.83101871e+02  2.13416356e+03  1.27602757e+04]
E1 = -705.181873002707  E_coul = 198.69188516366287
cycle= 2 E= -506.489987839044  delta_E= -0.000117  |g|= 0.00216  |ddm|= 0.00389
    CPU time for cycle= 2      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.00223899
diis-c [-3.96883097e-06 -2.87495931e-03  1.00287496e+00]
  HOMO = -0.25757143326392  LUMO = 183.100031944089
  mo_energy =
[-1.19711349e+02 -1.22535373e+01 -6.66089728e+00 -6.66089728e+00
 -6.66089728e+00 -1.17877318e+00 -2.57571433e-01 -2.57571433e-01
 -2.57571433e-01  1.83100032e+02  2.13415725e+03  1.27602670e+04]
E1 = -705.1817977891142  E_coul = 198.69180993897257
cycle= 3 E= -506.489987850142  delta_E= -1.11e-08  |g|= 2.16e-05  |ddm|= 3.38e-05
    CPU time for cycle= 3      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=2.94639e-05
diis-c [-9.78784372e-12  5.08377608e-05 -1.49046766e-02  1.01485384e+00]
  HOMO = -0.257571637399746  LUMO = 183.100026690087
  mo_energy =
[-1.19711362e+02 -1.22535389e+01 -6.66090016e+00 -6.66090016e+00
 -6.66090016e+00 -1.17877324e+00 -2.57571637e-01 -2.57571637e-01
 -2.57571637e-01  1.83100027e+02  2.13415724e+03  1.27602670e+04]
E1 = -705.1817973063104  E_coul = 198.69180945616785
cycle= 4 E= -506.489987850143  delta_E= -9.66e-13  |g|= 2.75e-08  |ddm|= 2.78e-07
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -705.1817973063104  E_coul = 198.69180945616785
  HOMO = -0.257571637049302  LUMO = 183.100026728582
  mo_energy =
[-1.19711362e+02 -1.22535389e+01 -6.66090015e+00 -6.66090015e+00
 -6.66090015e+00 -1.17877324e+00 -2.57571637e-01 -2.57571637e-01
 -2.57571637e-01  1.83100027e+02  2.13415724e+03  1.27602670e+04]
E1 = -705.1817973073673  E_coul = 198.69180945722456
Extra cycle  E= -506.489987850143  delta_E= -2.27e-13  |g|= 2.17e-10  |ddm|= 3.38e-10
    CPU time for scf_cycle      0.09 sec, wall time      0.10 sec
exp = [6.29441822e+03 1.57293662e+03 2.39955727e+02 5.20507227e+01
 4.80909406e+00 3.90497671e-01 8.60508470e+00 4.80626381e-01]
E = -506.48998785014277
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((8, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([1.5735952963858392e+03,2.3761303919145971e+02,5.2332977870138201e+01,4.7281081235122091e+00,3.9325830426169639e-01,8.5907170030661746e+00,4.9039633283239870e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "6s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:46:17 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  6294.41821827        1
[INPUT] 0    0    [1    /1   ]  1572.93661654        1
[INPUT] 0    0    [1    /1   ]  239.955726689        1
[INPUT] 0    0    [1    /1   ]  52.0507227255        1
[INPUT] 0    0    [1    /1   ]  4.80909406311        1
[INPUT] 0    0    [1    /1   ]  0.390497671215       1
[INPUT] 1    0    [1    /1   ]  8.60508470095        1
[INPUT] 1    0    [1    /1   ]  0.480626381448       1

nuclear repulsion = 0
number of shells = 8
number of NR pGTOs = 12
number of NR cGTOs = 12
basis = {'Ar': [[0, [6294.418218270013, 1.0]], [0, [1572.9366165439835, 1.0]], [0, [239.955726689163, 1.0]], [0, [52.050722725527514, 1.0]], [0, [4.8090940631105035, 1.0]], [0, [0.3904976712146541, 1.0]], [1, [8.60508470095401, 1.0]], [1, [0.48062638144849856, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [6294.41821827]
bas 1, expnt(s) = [1572.93661654]
bas 2, expnt(s) = [239.95572669]
bas 3, expnt(s) = [52.05072273]
bas 4, expnt(s) = [4.80909406]
bas 5, expnt(s) = [0.39049767]
bas 6, expnt(s) = [8.6050847]
bas 7, expnt(s) = [0.48062638]
CPU time:        46.93
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  1  1  1  0 36 37  0]
 [ 0  1  1  1  0 38 39  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 6.29441822e+03 1.78538434e+03 1.57293662e+03 6.31027725e+02
 2.39955727e+02 1.54032854e+02 5.20507227e+01 4.89592884e+01
 4.80909406e+00 8.20469569e+00 3.90497671e-01 1.24804102e+00
 8.60508470e+00 4.29960272e+01 4.80626381e-01 1.16746508e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.328710607934447
cond(S) = 16.492047362580433
E1 = -687.5387141441606  E_coul = 184.69050016269745
init E= -502.848213981463
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.695128411182381  LUMO = 181.706701378873
  mo_energy =
[-1.21102913e+02 -1.32832574e+01 -7.63079066e+00 -7.63079066e+00
 -7.63079066e+00 -1.66322025e+00 -6.95128411e-01 -6.95128411e-01
 -6.95128411e-01  1.81706701e+02  2.13285745e+03  1.27591484e+04]
E1 = -705.1914624690496  E_coul = 198.70159179451215
cycle= 1 E= -506.489870674537  delta_E= -3.64  |g|= 0.264  |ddm|= 0.286
    CPU time for cycle= 1      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.356468
diis-c [-0.12706949  1.        ]
  HOMO = -0.257530920783851  LUMO = 183.101870873065
  mo_energy =
[-1.19708310e+02 -1.22532253e+01 -6.66043776e+00 -6.66043776e+00
 -6.66043776e+00 -1.17875605e+00 -2.57530921e-01 -2.57530921e-01
 -2.57530921e-01  1.83101871e+02  2.13416356e+03  1.27602757e+04]
E1 = -705.181873002707  E_coul = 198.69188516366287
cycle= 2 E= -506.489987839044  delta_E= -0.000117  |g|= 0.00216  |ddm|= 0.00389
    CPU time for cycle= 2      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.00223899
diis-c [-3.96883097e-06 -2.87495931e-03  1.00287496e+00]
  HOMO = -0.25757143326392  LUMO = 183.100031944089
  mo_energy =
[-1.19711349e+02 -1.22535373e+01 -6.66089728e+00 -6.66089728e+00
 -6.66089728e+00 -1.17877318e+00 -2.57571433e-01 -2.57571433e-01
 -2.57571433e-01  1.83100032e+02  2.13415725e+03  1.27602670e+04]
E1 = -705.1817977891142  E_coul = 198.69180993897257
cycle= 3 E= -506.489987850142  delta_E= -1.11e-08  |g|= 2.16e-05  |ddm|= 3.38e-05
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=2.94639e-05
diis-c [-9.78784372e-12  5.08377608e-05 -1.49046766e-02  1.01485384e+00]
  HOMO = -0.257571637399746  LUMO = 183.100026690087
  mo_energy =
[-1.19711362e+02 -1.22535389e+01 -6.66090016e+00 -6.66090016e+00
 -6.66090016e+00 -1.17877324e+00 -2.57571637e-01 -2.57571637e-01
 -2.57571637e-01  1.83100027e+02  2.13415724e+03  1.27602670e+04]
E1 = -705.1817973063104  E_coul = 198.69180945616785
cycle= 4 E= -506.489987850143  delta_E= -9.66e-13  |g|= 2.75e-08  |ddm|= 2.78e-07
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -705.1817973063104  E_coul = 198.69180945616785
  HOMO = -0.257571637049302  LUMO = 183.100026728582
  mo_energy =
[-1.19711362e+02 -1.22535389e+01 -6.66090015e+00 -6.66090015e+00
 -6.66090015e+00 -1.17877324e+00 -2.57571637e-01 -2.57571637e-01
 -2.57571637e-01  1.83100027e+02  2.13415724e+03  1.27602670e+04]
E1 = -705.1817973073673  E_coul = 198.69180945722456
Extra cycle  E= -506.489987850143  delta_E= -2.27e-13  |g|= 2.17e-10  |ddm|= 3.38e-10
    CPU time for scf_cycle      0.09 sec, wall time      0.10 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 16.492047362580433
E1 = -705.1817973073673  E_coul = 198.69180945722456
init E= -506.489987850143
    CPU time for initialize scf      0.06 sec, wall time      0.06 sec
  HOMO = -0.257571637046732  LUMO = 183.100026728862
  mo_energy =
[-1.19711362e+02 -1.22535389e+01 -6.66090015e+00 -6.66090015e+00
 -6.66090015e+00 -1.17877324e+00 -2.57571637e-01 -2.57571637e-01
 -2.57571637e-01  1.83100027e+02  2.13415724e+03  1.27602670e+04]
E1 = -705.1817973073753  E_coul = 198.6918094572327
cycle= 1 E= -506.489987850143  delta_E= 1.71e-13  |g|= 4.91e-12  |ddm|= 2.74e-12
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -705.1817973073753  E_coul = 198.6918094572327
  HOMO = -0.257571637046709  LUMO = 183.100026728863
  mo_energy =
[-1.19711362e+02 -1.22535389e+01 -6.66090015e+00 -6.66090015e+00
 -6.66090015e+00 -1.17877324e+00 -2.57571637e-01 -2.57571637e-01
 -2.57571637e-01  1.83100027e+02  2.13415724e+03  1.27602670e+04]
E1 = -705.1817973073753  E_coul = 198.69180945723278
Extra cycle  E= -506.489987850142  delta_E= 1.14e-13  |g|= 1.52e-12  |ddm|= 3.09e-14
    CPU time for scf_cycle      0.12 sec, wall time      0.12 sec
exp = [6.29441822e+03 1.57293662e+03 2.39955727e+02 5.20507227e+01
 4.80909406e+00 3.90497671e-01 8.60508470e+00 4.80626381e-01]
grad_E = [-8.88834976e-05  1.51717730e-03 -3.98879337e-03 -4.63063541e-03
  6.59871881e-02 -7.93109632e-02  2.61240251e-02 -3.77797865e-01]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((8, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([1.5735952963858392e+03,2.3761303919145971e+02,5.2332977870138201e+01,4.7281081235122091e+00,3.9325830426169639e-01,8.5907170030661746e+00,4.9039633283239870e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "6s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:46:20 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  6294.46259061        1
[INPUT] 0    0    [1    /1   ]  1572.14971381        1
[INPUT] 0    0    [1    /1   ]  242.647452399        1
[INPUT] 0    0    [1    /1   ]  52.4505136859        1
[INPUT] 0    0    [1    /1   ]  4.83855194648        1
[INPUT] 0    0    [1    /1   ]  0.389579341118       1
[INPUT] 1    0    [1    /1   ]  8.6102352754         1
[INPUT] 1    0    [1    /1   ]  0.476848799664       1

nuclear repulsion = 0
number of shells = 8
number of NR pGTOs = 12
number of NR cGTOs = 12
basis = {'Ar': [[0, [6294.462590614137, 1.0]], [0, [1572.1497138137208, 1.0]], [0, [242.6474523994431, 1.0]], [0, [52.45051368589743, 1.0]], [0, [4.8385519464841495, 1.0]], [0, [0.38957934111834613, 1.0]], [1, [8.610235275403516, 1.0]], [1, [0.47684879966380916, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [6294.46259061]
bas 1, expnt(s) = [1572.14971381]
bas 2, expnt(s) = [242.6474524]
bas 3, expnt(s) = [52.45051369]
bas 4, expnt(s) = [4.83855195]
bas 5, expnt(s) = [0.38957934]
bas 6, expnt(s) = [8.61023528]
bas 7, expnt(s) = [0.4768488]
CPU time:        50.06
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  1  1  1  0 36 37  0]
 [ 0  1  1  1  0 38 39  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 6.29446259e+03 1.78539378e+03 1.57214971e+03 6.30790944e+02
 2.42647452e+02 1.55326954e+02 5.24505137e+01 4.92410532e+01
 4.83855195e+00 8.24236002e+00 3.89579341e-01 1.24583912e+00
 8.61023528e+00 4.30281987e+01 4.76848800e-01 1.15600646e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.33215416723877
cond(S) = 16.592554580251534
E1 = -687.4574540143855  E_coul = 184.60771892843715
init E= -502.849735085948
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.700386933189551  LUMO = 184.550075379283
  mo_energy =
[-1.21107234e+02 -1.32915963e+01 -7.63461017e+00 -7.63461017e+00
 -7.63461017e+00 -1.66829958e+00 -7.00386933e-01 -7.00386933e-01
 -7.00386933e-01  1.84550075e+02  2.14216978e+03  1.27674052e+04]
E1 = -705.0991579856088  E_coul = 198.60134348325417
cycle= 1 E= -506.497814502355  delta_E= -3.65  |g|= 0.258  |ddm|= 0.282
    CPU time for cycle= 1      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.353453
diis-c [-0.12492917  1.        ]
  HOMO = -0.265767071821674  LUMO = 185.948917458687
  mo_energy =
[-1.19707166e+02 -1.22627241e+01 -6.66518355e+00 -6.66518355e+00
 -6.66518355e+00 -1.18554852e+00 -2.65767072e-01 -2.65767072e-01
 -2.65767072e-01  1.85948917e+02  2.14349077e+03  1.27685544e+04]
E1 = -705.0899237938041  E_coul = 198.59199916910873
cycle= 2 E= -506.497924624695  delta_E= -0.00011  |g|= 0.00207  |ddm|= 0.00373
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00214703
diis-c [-3.60262873e-06 -2.84739124e-03  1.00284739e+00]
  HOMO = -0.265805358345718  LUMO = 185.947119603499
  mo_energy =
[-1.19710103e+02 -1.22630243e+01 -6.66562257e+00 -6.66562257e+00
 -6.66562257e+00 -1.18556509e+00 -2.65805358e-01 -2.65805358e-01
 -2.65805358e-01  1.85947120e+02  2.14348461e+03  1.27685459e+04]
E1 = -705.0898524113194  E_coul = 198.5919277765731
cycle= 3 E= -506.497924634746  delta_E= -1.01e-08  |g|= 2.04e-05  |ddm|= 3.2e-05
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=2.78915e-05
diis-c [-9.33365969e-12  5.02440375e-05 -1.47922041e-02  1.01474196e+00]
  HOMO = -0.265805547418544  LUMO = 185.947114536136
  mo_energy =
[-1.19710115e+02 -1.22630259e+01 -6.66562527e+00 -6.66562527e+00
 -6.66562527e+00 -1.18556514e+00 -2.65805547e-01 -2.65805547e-01
 -2.65805547e-01  1.85947115e+02  2.14348460e+03  1.27685459e+04]
E1 = -705.0898519617137  E_coul = 198.59192732696607
cycle= 4 E= -506.497924634748  delta_E= -1.42e-12  |g|= 2.61e-08  |ddm|= 2.59e-07
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -705.0898519617137  E_coul = 198.59192732696607
  HOMO = -0.26580554709894  LUMO = 185.947114573038
  mo_energy =
[-1.19710115e+02 -1.22630259e+01 -6.66562526e+00 -6.66562526e+00
 -6.66562526e+00 -1.18556514e+00 -2.65805547e-01 -2.65805547e-01
 -2.65805547e-01  1.85947115e+02  2.14348460e+03  1.27685459e+04]
E1 = -705.0898519627042  E_coul = 198.59192732795677
Extra cycle  E= -506.497924634747  delta_E= 2.84e-13  |g|= 2.03e-10  |ddm|= 3.16e-10
    CPU time for scf_cycle      0.12 sec, wall time      0.13 sec
exp = [6.29446259e+03 1.57214971e+03 2.42647452e+02 5.24505137e+01
 4.83855195e+00 3.89579341e-01 8.61023528e+00 4.76848800e-01]
E = -506.4979246347474
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((8, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([1.5735952963858392e+03,2.3761303919145971e+02,5.2332977870138201e+01,4.7281081235122091e+00,3.9325830426169639e-01,8.5907170030661746e+00,4.9039633283239870e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "6s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:46:21 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  6294.46259061        1
[INPUT] 0    0    [1    /1   ]  1572.14971381        1
[INPUT] 0    0    [1    /1   ]  242.647452399        1
[INPUT] 0    0    [1    /1   ]  52.4505136859        1
[INPUT] 0    0    [1    /1   ]  4.83855194648        1
[INPUT] 0    0    [1    /1   ]  0.389579341118       1
[INPUT] 1    0    [1    /1   ]  8.6102352754         1
[INPUT] 1    0    [1    /1   ]  0.476848799664       1

nuclear repulsion = 0
number of shells = 8
number of NR pGTOs = 12
number of NR cGTOs = 12
basis = {'Ar': [[0, [6294.462590614137, 1.0]], [0, [1572.1497138137208, 1.0]], [0, [242.6474523994431, 1.0]], [0, [52.45051368589743, 1.0]], [0, [4.8385519464841495, 1.0]], [0, [0.38957934111834613, 1.0]], [1, [8.610235275403516, 1.0]], [1, [0.47684879966380916, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [6294.46259061]
bas 1, expnt(s) = [1572.14971381]
bas 2, expnt(s) = [242.6474524]
bas 3, expnt(s) = [52.45051369]
bas 4, expnt(s) = [4.83855195]
bas 5, expnt(s) = [0.38957934]
bas 6, expnt(s) = [8.61023528]
bas 7, expnt(s) = [0.4768488]
CPU time:        50.44
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  1  1  1  0 36 37  0]
 [ 0  1  1  1  0 38 39  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 6.29446259e+03 1.78539378e+03 1.57214971e+03 6.30790944e+02
 2.42647452e+02 1.55326954e+02 5.24505137e+01 4.92410532e+01
 4.83855195e+00 8.24236002e+00 3.89579341e-01 1.24583912e+00
 8.61023528e+00 4.30281987e+01 4.76848800e-01 1.15600646e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.33215416723877
cond(S) = 16.592554580251534
E1 = -687.4574540143855  E_coul = 184.60771892843715
init E= -502.849735085948
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.700386933189551  LUMO = 184.550075379283
  mo_energy =
[-1.21107234e+02 -1.32915963e+01 -7.63461017e+00 -7.63461017e+00
 -7.63461017e+00 -1.66829958e+00 -7.00386933e-01 -7.00386933e-01
 -7.00386933e-01  1.84550075e+02  2.14216978e+03  1.27674052e+04]
E1 = -705.0991579856088  E_coul = 198.60134348325417
cycle= 1 E= -506.497814502355  delta_E= -3.65  |g|= 0.258  |ddm|= 0.282
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.353453
diis-c [-0.12492917  1.        ]
  HOMO = -0.265767071821674  LUMO = 185.948917458687
  mo_energy =
[-1.19707166e+02 -1.22627241e+01 -6.66518355e+00 -6.66518355e+00
 -6.66518355e+00 -1.18554852e+00 -2.65767072e-01 -2.65767072e-01
 -2.65767072e-01  1.85948917e+02  2.14349077e+03  1.27685544e+04]
E1 = -705.0899237938041  E_coul = 198.59199916910873
cycle= 2 E= -506.497924624695  delta_E= -0.00011  |g|= 0.00207  |ddm|= 0.00373
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00214703
diis-c [-3.60262873e-06 -2.84739124e-03  1.00284739e+00]
  HOMO = -0.265805358345718  LUMO = 185.947119603499
  mo_energy =
[-1.19710103e+02 -1.22630243e+01 -6.66562257e+00 -6.66562257e+00
 -6.66562257e+00 -1.18556509e+00 -2.65805358e-01 -2.65805358e-01
 -2.65805358e-01  1.85947120e+02  2.14348461e+03  1.27685459e+04]
E1 = -705.0898524113194  E_coul = 198.5919277765731
cycle= 3 E= -506.497924634746  delta_E= -1.01e-08  |g|= 2.04e-05  |ddm|= 3.2e-05
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=2.78915e-05
diis-c [-9.33365969e-12  5.02440375e-05 -1.47922041e-02  1.01474196e+00]
  HOMO = -0.265805547418544  LUMO = 185.947114536136
  mo_energy =
[-1.19710115e+02 -1.22630259e+01 -6.66562527e+00 -6.66562527e+00
 -6.66562527e+00 -1.18556514e+00 -2.65805547e-01 -2.65805547e-01
 -2.65805547e-01  1.85947115e+02  2.14348460e+03  1.27685459e+04]
E1 = -705.0898519617137  E_coul = 198.59192732696607
cycle= 4 E= -506.497924634748  delta_E= -1.42e-12  |g|= 2.61e-08  |ddm|= 2.59e-07
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -705.0898519617137  E_coul = 198.59192732696607
  HOMO = -0.26580554709894  LUMO = 185.947114573038
  mo_energy =
[-1.19710115e+02 -1.22630259e+01 -6.66562526e+00 -6.66562526e+00
 -6.66562526e+00 -1.18556514e+00 -2.65805547e-01 -2.65805547e-01
 -2.65805547e-01  1.85947115e+02  2.14348460e+03  1.27685459e+04]
E1 = -705.0898519627042  E_coul = 198.59192732795677
Extra cycle  E= -506.497924634747  delta_E= 2.84e-13  |g|= 2.03e-10  |ddm|= 3.16e-10
    CPU time for scf_cycle      0.10 sec, wall time      0.10 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 16.592554580251534
E1 = -705.0898519627042  E_coul = 198.59192732795677
init E= -506.497924634747
    CPU time for initialize scf      0.06 sec, wall time      0.06 sec
  HOMO = -0.265805547096609  LUMO = 185.947114573304
  mo_energy =
[-1.19710115e+02 -1.22630259e+01 -6.66562526e+00 -6.66562526e+00
 -6.66562526e+00 -1.18556514e+00 -2.65805547e-01 -2.65805547e-01
 -2.65805547e-01  1.85947115e+02  2.14348460e+03  1.27685459e+04]
E1 = -705.0898519627114  E_coul = 198.59192732796436
cycle= 1 E= -506.497924634747  delta_E= 3.98e-13  |g|= 3.11e-12  |ddm|= 2.54e-12
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -705.0898519627114  E_coul = 198.59192732796436
  HOMO = -0.265805547096591  LUMO = 185.947114573305
  mo_energy =
[-1.19710115e+02 -1.22630259e+01 -6.66562526e+00 -6.66562526e+00
 -6.66562526e+00 -1.18556514e+00 -2.65805547e-01 -2.65805547e-01
 -2.65805547e-01  1.85947115e+02  2.14348460e+03  1.27685459e+04]
E1 = -705.0898519627115  E_coul = 198.59192732796447
Extra cycle  E= -506.497924634747  delta_E=    0  |g|= 4.07e-12  |ddm|= 3.08e-14
    CPU time for scf_cycle      0.13 sec, wall time      0.13 sec
exp = [6.29446259e+03 1.57214971e+03 2.42647452e+02 5.24505137e+01
 4.83855195e+00 3.89579341e-01 8.61023528e+00 4.76848800e-01]
grad_E = [-8.80877993e-05  1.44088005e-03 -2.92600788e-03 -4.22068998e-03
  9.30130184e-02 -1.09913487e-01  3.64413653e-02 -5.25268912e-01]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((8, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([1.5735952963858392e+03,2.3761303919145971e+02,5.2332977870138201e+01,4.7281081235122091e+00,3.9325830426169639e-01,8.5907170030661746e+00,4.9039633283239870e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "6s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:46:24 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  6294.53894137        1
[INPUT] 0    0    [1    /1   ]  1570.79591908        1
[INPUT] 0    0    [1    /1   ]  247.273472695        1
[INPUT] 0    0    [1    /1   ]  53.1572006404        1
[INPUT] 0    0    [1    /1   ]  4.84712279357        1
[INPUT] 0    0    [1    /1   ]  0.389698032843       1
[INPUT] 1    0    [1    /1   ]  8.6106735829         1
[INPUT] 1    0    [1    /1   ]  0.475857041406       1

nuclear repulsion = 0
number of shells = 8
number of NR pGTOs = 12
number of NR cGTOs = 12
basis = {'Ar': [[0, [6294.538941373541, 1.0]], [0, [1570.7959190778386, 1.0]], [0, [247.2734726949937, 1.0]], [0, [53.15720064042564, 1.0]], [0, [4.847122793570545, 1.0]], [0, [0.3896980328430971, 1.0]], [1, [8.610673582898583, 1.0]], [1, [0.47585704140649926, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [6294.53894137]
bas 1, expnt(s) = [1570.79591908]
bas 2, expnt(s) = [247.27347269]
bas 3, expnt(s) = [53.15720064]
bas 4, expnt(s) = [4.84712279]
bas 5, expnt(s) = [0.38969803]
bas 6, expnt(s) = [8.61067358]
bas 7, expnt(s) = [0.47585704]
CPU time:        53.41
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  1  1  1  0 36 37  0]
 [ 0  1  1  1  0 38 39  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 6.29453894e+03 1.78541002e+03 1.57079592e+03 6.30383515e+02
 2.47273473e+02 1.57542659e+02 5.31572006e+01 4.97378033e+01
 4.84712279e+00 8.25330777e+00 3.89698033e-01 1.24612378e+00
 8.61067358e+00 4.30309367e+01 4.75857041e-01 1.15300189e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.33276258929019
cond(S) = 16.757761469188125
E1 = -687.455972276441  E_coul = 184.59578296388352
init E= -502.860189312558
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.701678566404656  LUMO = 189.350761291784
  mo_energy =
[-1.21108929e+02 -1.32960914e+01 -7.63483009e+00 -7.63483009e+00
 -7.63483009e+00 -1.67009932e+00 -7.01678566e-01 -7.01678566e-01
 -7.01678566e-01  1.89350761e+02  2.15809091e+03  1.27815813e+04]
E1 = -705.1153615745468  E_coul = 198.60478968223134
cycle= 1 E= -506.510571892315  delta_E= -3.65  |g|= 0.253  |ddm|= 0.281
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.348399
diis-c [-0.12138208  1.        ]
  HOMO = -0.267592936075216  LUMO = 190.755950549367
  mo_energy =
[-1.19702461e+02 -1.22663754e+01 -6.66465713e+00 -6.66465713e+00
 -6.66465713e+00 -1.18735544e+00 -2.67592936e-01 -2.67592936e-01
 -2.67592936e-01  1.90755951e+02  2.15943024e+03  1.27827585e+04]
E1 = -705.1065553282558  E_coul = 198.59587989165917
cycle= 2 E= -506.510675436597  delta_E= -0.000104  |g|= 0.00199  |ddm|= 0.00356
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00207429
diis-c [-3.31259312e-06 -2.86419566e-03  1.00286420e+00]
  HOMO = -0.267629038939678  LUMO = 190.754203282187
  mo_energy =
[-1.19705275e+02 -1.22666610e+01 -6.66507219e+00 -6.66507219e+00
 -6.66507219e+00 -1.18737127e+00 -2.67629039e-01 -2.67629039e-01
 -2.67629039e-01  1.90754203e+02  2.15942428e+03  1.27827502e+04]
E1 = -705.1064886249176  E_coul = 198.59581317926632
cycle= 3 E= -506.510675445651  delta_E= -9.05e-09  |g|= 1.91e-05  |ddm|= 2.99e-05
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=2.62219e-05
diis-c [-8.98017710e-12  4.90379423e-05 -1.44948073e-02  1.01444577e+00]
  HOMO = -0.267629211056505  LUMO = 190.754198606443
  mo_energy =
[-1.19705286e+02 -1.22666624e+01 -6.66507467e+00 -6.66507467e+00
 -6.66507467e+00 -1.18737132e+00 -2.67629211e-01 -2.67629211e-01
 -2.67629211e-01  1.90754199e+02  2.15942427e+03  1.27827502e+04]
E1 = -705.1064882207137  E_coul = 198.59581277506163
cycle= 4 E= -506.510675445652  delta_E= -7.96e-13  |g|= 2.43e-08  |ddm|= 2.35e-07
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -705.1064882207137  E_coul = 198.59581277506163
  HOMO = -0.267629210774992  LUMO = 190.754198641313
  mo_energy =
[-1.19705286e+02 -1.22666624e+01 -6.66507466e+00 -6.66507466e+00
 -6.66507466e+00 -1.18737132e+00 -2.67629211e-01 -2.67629211e-01
 -2.67629211e-01  1.90754199e+02  2.15942427e+03  1.27827502e+04]
E1 = -705.1064882216106  E_coul = 198.59581277595885
Extra cycle  E= -506.510675445652  delta_E= 3.41e-13  |g|= 1.86e-10  |ddm|= 2.85e-10
    CPU time for scf_cycle      0.10 sec, wall time      0.10 sec
exp = [6.29453894e+03 1.57079592e+03 2.47273473e+02 5.31572006e+01
 4.84712279e+00 3.89698033e-01 8.61067358e+00 4.75857041e-01]
E = -506.5106754456517
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((8, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([1.5735952963858392e+03,2.3761303919145971e+02,5.2332977870138201e+01,4.7281081235122091e+00,3.9325830426169639e-01,8.5907170030661746e+00,4.9039633283239870e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "6s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:46:24 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  6294.53894137        1
[INPUT] 0    0    [1    /1   ]  1570.79591908        1
[INPUT] 0    0    [1    /1   ]  247.273472695        1
[INPUT] 0    0    [1    /1   ]  53.1572006404        1
[INPUT] 0    0    [1    /1   ]  4.84712279357        1
[INPUT] 0    0    [1    /1   ]  0.389698032843       1
[INPUT] 1    0    [1    /1   ]  8.6106735829         1
[INPUT] 1    0    [1    /1   ]  0.475857041406       1

nuclear repulsion = 0
number of shells = 8
number of NR pGTOs = 12
number of NR cGTOs = 12
basis = {'Ar': [[0, [6294.538941373541, 1.0]], [0, [1570.7959190778386, 1.0]], [0, [247.2734726949937, 1.0]], [0, [53.15720064042564, 1.0]], [0, [4.847122793570545, 1.0]], [0, [0.3896980328430971, 1.0]], [1, [8.610673582898583, 1.0]], [1, [0.47585704140649926, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [6294.53894137]
bas 1, expnt(s) = [1570.79591908]
bas 2, expnt(s) = [247.27347269]
bas 3, expnt(s) = [53.15720064]
bas 4, expnt(s) = [4.84712279]
bas 5, expnt(s) = [0.38969803]
bas 6, expnt(s) = [8.61067358]
bas 7, expnt(s) = [0.47585704]
CPU time:        53.77
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  1  1  1  0 36 37  0]
 [ 0  1  1  1  0 38 39  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 6.29453894e+03 1.78541002e+03 1.57079592e+03 6.30383515e+02
 2.47273473e+02 1.57542659e+02 5.31572006e+01 4.97378033e+01
 4.84712279e+00 8.25330777e+00 3.89698033e-01 1.24612378e+00
 8.61067358e+00 4.30309367e+01 4.75857041e-01 1.15300189e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.33276258929019
cond(S) = 16.757761469188125
E1 = -687.455972276441  E_coul = 184.59578296388352
init E= -502.860189312558
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.701678566404656  LUMO = 189.350761291784
  mo_energy =
[-1.21108929e+02 -1.32960914e+01 -7.63483009e+00 -7.63483009e+00
 -7.63483009e+00 -1.67009932e+00 -7.01678566e-01 -7.01678566e-01
 -7.01678566e-01  1.89350761e+02  2.15809091e+03  1.27815813e+04]
E1 = -705.1153615745468  E_coul = 198.60478968223134
cycle= 1 E= -506.510571892315  delta_E= -3.65  |g|= 0.253  |ddm|= 0.281
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.348399
diis-c [-0.12138208  1.        ]
  HOMO = -0.267592936075216  LUMO = 190.755950549367
  mo_energy =
[-1.19702461e+02 -1.22663754e+01 -6.66465713e+00 -6.66465713e+00
 -6.66465713e+00 -1.18735544e+00 -2.67592936e-01 -2.67592936e-01
 -2.67592936e-01  1.90755951e+02  2.15943024e+03  1.27827585e+04]
E1 = -705.1065553282558  E_coul = 198.59587989165917
cycle= 2 E= -506.510675436597  delta_E= -0.000104  |g|= 0.00199  |ddm|= 0.00356
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00207429
diis-c [-3.31259312e-06 -2.86419566e-03  1.00286420e+00]
  HOMO = -0.267629038939678  LUMO = 190.754203282187
  mo_energy =
[-1.19705275e+02 -1.22666610e+01 -6.66507219e+00 -6.66507219e+00
 -6.66507219e+00 -1.18737127e+00 -2.67629039e-01 -2.67629039e-01
 -2.67629039e-01  1.90754203e+02  2.15942428e+03  1.27827502e+04]
E1 = -705.1064886249176  E_coul = 198.59581317926632
cycle= 3 E= -506.510675445651  delta_E= -9.05e-09  |g|= 1.91e-05  |ddm|= 2.99e-05
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=2.62219e-05
diis-c [-8.98017710e-12  4.90379423e-05 -1.44948073e-02  1.01444577e+00]
  HOMO = -0.267629211056505  LUMO = 190.754198606443
  mo_energy =
[-1.19705286e+02 -1.22666624e+01 -6.66507467e+00 -6.66507467e+00
 -6.66507467e+00 -1.18737132e+00 -2.67629211e-01 -2.67629211e-01
 -2.67629211e-01  1.90754199e+02  2.15942427e+03  1.27827502e+04]
E1 = -705.1064882207137  E_coul = 198.59581277506163
cycle= 4 E= -506.510675445652  delta_E= -7.96e-13  |g|= 2.43e-08  |ddm|= 2.35e-07
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -705.1064882207137  E_coul = 198.59581277506163
  HOMO = -0.267629210774992  LUMO = 190.754198641313
  mo_energy =
[-1.19705286e+02 -1.22666624e+01 -6.66507466e+00 -6.66507466e+00
 -6.66507466e+00 -1.18737132e+00 -2.67629211e-01 -2.67629211e-01
 -2.67629211e-01  1.90754199e+02  2.15942427e+03  1.27827502e+04]
E1 = -705.1064882216106  E_coul = 198.59581277595885
Extra cycle  E= -506.510675445652  delta_E= 3.41e-13  |g|= 1.86e-10  |ddm|= 2.85e-10
    CPU time for scf_cycle      0.10 sec, wall time      0.10 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 16.757761469188125
E1 = -705.1064882216106  E_coul = 198.59581277595885
init E= -506.510675445652
    CPU time for initialize scf      0.06 sec, wall time      0.06 sec
  HOMO = -0.267629210772956  LUMO = 190.754198641562
  mo_energy =
[-1.19705286e+02 -1.22666624e+01 -6.66507466e+00 -6.66507466e+00
 -6.66507466e+00 -1.18737132e+00 -2.67629211e-01 -2.67629211e-01
 -2.67629211e-01  1.90754199e+02  2.15942427e+03  1.27827502e+04]
E1 = -705.1064882216178  E_coul = 198.59581277596575
cycle= 1 E= -506.510675445652  delta_E= -3.41e-13  |g|= 4.66e-12  |ddm|= 2.22e-12
    CPU time for cycle= 1      0.01 sec, wall time      0.02 sec
E1 = -705.1064882216178  E_coul = 198.59581277596575
  HOMO = -0.267629210772935  LUMO = 190.754198641564
  mo_energy =
[-1.19705286e+02 -1.22666624e+01 -6.66507466e+00 -6.66507466e+00
 -6.66507466e+00 -1.18737132e+00 -2.67629211e-01 -2.67629211e-01
 -2.67629211e-01  1.90754199e+02  2.15942427e+03  1.27827502e+04]
E1 = -705.1064882216182  E_coul = 198.59581277596578
Extra cycle  E= -506.510675445652  delta_E= -3.41e-13  |g|= 1.85e-12  |ddm|= 1.56e-14
    CPU time for scf_cycle      0.13 sec, wall time      0.14 sec
exp = [6.29453894e+03 1.57079592e+03 2.47273473e+02 5.31572006e+01
 4.84712279e+00 3.89698033e-01 8.61067358e+00 4.75857041e-01]
grad_E = [-8.65974205e-05  1.31696690e-03 -1.33009528e-03 -2.73781721e-03
  1.01476061e-01 -1.16658386e-01  3.94127548e-02 -5.61604074e-01]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((8, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([1.5735952963858392e+03,2.3761303919145971e+02,5.2332977870138201e+01,4.7281081235122091e+00,3.9325830426169639e-01,8.5907170030661746e+00,4.9039633283239870e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "6s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:46:27 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  6294.61875085        1
[INPUT] 0    0    [1    /1   ]  1569.38110376        1
[INPUT] 0    0    [1    /1   ]  252.10350213         1
[INPUT] 0    0    [1    /1   ]  53.8992452929        1
[INPUT] 0    0    [1    /1   ]  4.80901251952        1
[INPUT] 0    0    [1    /1   ]  0.391532818291       1
[INPUT] 1    0    [1    /1   ]  8.60168374803        1
[INPUT] 1    0    [1    /1   ]  0.480680932992       1

nuclear repulsion = 0
number of shells = 8
number of NR pGTOs = 12
number of NR cGTOs = 12
basis = {'Ar': [[0, [6294.618750846171, 1.0]], [0, [1569.3811037562532, 1.0]], [0, [252.1035021304443, 1.0]], [0, [53.89924529293543, 1.0]], [0, [4.809012519520892, 1.0]], [0, [0.39153281829123276, 1.0]], [1, [8.601683748030986, 1.0]], [1, [0.48068093299224823, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [6294.61875085]
bas 1, expnt(s) = [1569.38110376]
bas 2, expnt(s) = [252.10350213]
bas 3, expnt(s) = [53.89924529]
bas 4, expnt(s) = [4.80901252]
bas 5, expnt(s) = [0.39153282]
bas 6, expnt(s) = [8.60168375]
bas 7, expnt(s) = [0.48068093]
CPU time:        56.76
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  1  1  1  0 36 37  0]
 [ 0  1  1  1  0 38 39  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 6.29461875e+03 1.78542700e+03 1.56938110e+03 6.29957627e+02
 2.52103502e+02 1.59845047e+02 5.38992453e+01 5.02576338e+01
 4.80901252e+00 8.20459135e+00 3.91532818e-01 1.25052147e+00
 8.60168375e+00 4.29747869e+01 4.80680933e-01 1.16763072e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.327969625507762
cond(S) = 16.92055457684843
E1 = -687.59761605315  E_coul = 184.71627516908518
init E= -502.881340884065
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.694771942741783  LUMO = 194.222419401857
  mo_energy =
[-1.21105014e+02 -1.32911824e+01 -7.62879094e+00 -7.62879094e+00
 -7.62879094e+00 -1.66445040e+00 -6.94771943e-01 -6.94771943e-01
 -6.94771943e-01  1.94222419e+02  2.17454858e+03  1.27963154e+04]
E1 = -705.3064720935082  E_coul = 198.7840445764849
cycle= 1 E= -506.522427517023  delta_E= -3.64  |g|= 0.251  |ddm|= 0.285
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.343028
diis-c [-0.11766852  1.        ]
  HOMO = -0.25650246825809  LUMO = 195.633380176382
  mo_energy =
[-1.19695916e+02 -1.22578979e+01 -6.65570036e+00 -6.65570036e+00
 -6.65570036e+00 -1.17881979e+00 -2.56502468e-01 -2.56502468e-01
 -2.56502468e-01  1.95633380e+02  2.17589772e+03  1.27975095e+04]
E1 = -705.2979186961747  E_coul = 198.77538892398118
cycle= 2 E= -506.522529772194  delta_E= -0.000102  |g|= 0.00198  |ddm|= 0.00348
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00208764
diis-c [-3.33989249e-06 -2.95053420e-03  1.00295053e+00]
  HOMO = -0.256537914104526  LUMO = 195.631663695524
  mo_energy =
[-1.19698654e+02 -1.22581738e+01 -6.65610224e+00 -6.65610224e+00
 -6.65610224e+00 -1.17883508e+00 -2.56537914e-01 -2.56537914e-01
 -2.56537914e-01  1.95631664e+02  2.17589194e+03  1.27975015e+04]
E1 = -705.2978549452992  E_coul = 198.77532516434445
cycle= 3 E= -506.522529780955  delta_E= -8.76e-09  |g|= 1.84e-05  |ddm|= 2.88e-05
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=2.55457e-05
diis-c [-9.07613963e-12  4.75719451e-05 -1.40753053e-02  1.01402773e+00]
  HOMO = -0.256538076887642  LUMO = 195.631659506279
  mo_energy =
[-1.19698665e+02 -1.22581751e+01 -6.65610454e+00 -6.65610454e+00
 -6.65610454e+00 -1.17883512e+00 -2.56538077e-01 -2.56538077e-01
 -2.56538077e-01  1.95631660e+02  2.17589193e+03  1.27975015e+04]
E1 = -705.2978545769552  E_coul = 198.77532479599978
cycle= 4 E= -506.522529780955  delta_E= -6.82e-13  |g|= 2.31e-08  |ddm|= 2.19e-07
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -705.2978545769552  E_coul = 198.77532479599978
  HOMO = -0.256538076631198  LUMO = 195.631659539847
  mo_energy =
[-1.19698664e+02 -1.22581751e+01 -6.65610454e+00 -6.65610454e+00
 -6.65610454e+00 -1.17883512e+00 -2.56538077e-01 -2.56538077e-01
 -2.56538077e-01  1.95631660e+02  2.17589193e+03  1.27975015e+04]
E1 = -705.2978545777775  E_coul = 198.77532479682193
Extra cycle  E= -506.522529780956  delta_E= -1.71e-13  |g|= 1.73e-10  |ddm|= 2.58e-10
    CPU time for scf_cycle      0.10 sec, wall time      0.11 sec
exp = [6.29461875e+03 1.56938110e+03 2.52103502e+02 5.38992453e+01
 4.80901252e+00 3.91532818e-01 8.60168375e+00 4.80680933e-01]
E = -506.52252978095555
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((8, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([1.5735952963858392e+03,2.3761303919145971e+02,5.2332977870138201e+01,4.7281081235122091e+00,3.9325830426169639e-01,8.5907170030661746e+00,4.9039633283239870e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "6s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:46:27 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  6294.61875085        1
[INPUT] 0    0    [1    /1   ]  1569.38110376        1
[INPUT] 0    0    [1    /1   ]  252.10350213         1
[INPUT] 0    0    [1    /1   ]  53.8992452929        1
[INPUT] 0    0    [1    /1   ]  4.80901251952        1
[INPUT] 0    0    [1    /1   ]  0.391532818291       1
[INPUT] 1    0    [1    /1   ]  8.60168374803        1
[INPUT] 1    0    [1    /1   ]  0.480680932992       1

nuclear repulsion = 0
number of shells = 8
number of NR pGTOs = 12
number of NR cGTOs = 12
basis = {'Ar': [[0, [6294.618750846171, 1.0]], [0, [1569.3811037562532, 1.0]], [0, [252.1035021304443, 1.0]], [0, [53.89924529293543, 1.0]], [0, [4.809012519520892, 1.0]], [0, [0.39153281829123276, 1.0]], [1, [8.601683748030986, 1.0]], [1, [0.48068093299224823, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [6294.61875085]
bas 1, expnt(s) = [1569.38110376]
bas 2, expnt(s) = [252.10350213]
bas 3, expnt(s) = [53.89924529]
bas 4, expnt(s) = [4.80901252]
bas 5, expnt(s) = [0.39153282]
bas 6, expnt(s) = [8.60168375]
bas 7, expnt(s) = [0.48068093]
CPU time:        57.16
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  1  1  1  0 36 37  0]
 [ 0  1  1  1  0 38 39  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 6.29461875e+03 1.78542700e+03 1.56938110e+03 6.29957627e+02
 2.52103502e+02 1.59845047e+02 5.38992453e+01 5.02576338e+01
 4.80901252e+00 8.20459135e+00 3.91532818e-01 1.25052147e+00
 8.60168375e+00 4.29747869e+01 4.80680933e-01 1.16763072e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.327969625507762
cond(S) = 16.92055457684843
E1 = -687.59761605315  E_coul = 184.71627516908518
init E= -502.881340884065
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.694771942741783  LUMO = 194.222419401857
  mo_energy =
[-1.21105014e+02 -1.32911824e+01 -7.62879094e+00 -7.62879094e+00
 -7.62879094e+00 -1.66445040e+00 -6.94771943e-01 -6.94771943e-01
 -6.94771943e-01  1.94222419e+02  2.17454858e+03  1.27963154e+04]
E1 = -705.3064720935082  E_coul = 198.7840445764849
cycle= 1 E= -506.522427517023  delta_E= -3.64  |g|= 0.251  |ddm|= 0.285
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.343028
diis-c [-0.11766852  1.        ]
  HOMO = -0.25650246825809  LUMO = 195.633380176382
  mo_energy =
[-1.19695916e+02 -1.22578979e+01 -6.65570036e+00 -6.65570036e+00
 -6.65570036e+00 -1.17881979e+00 -2.56502468e-01 -2.56502468e-01
 -2.56502468e-01  1.95633380e+02  2.17589772e+03  1.27975095e+04]
E1 = -705.2979186961747  E_coul = 198.77538892398118
cycle= 2 E= -506.522529772194  delta_E= -0.000102  |g|= 0.00198  |ddm|= 0.00348
    CPU time for cycle= 2      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.00208764
diis-c [-3.33989249e-06 -2.95053420e-03  1.00295053e+00]
  HOMO = -0.256537914104526  LUMO = 195.631663695524
  mo_energy =
[-1.19698654e+02 -1.22581738e+01 -6.65610224e+00 -6.65610224e+00
 -6.65610224e+00 -1.17883508e+00 -2.56537914e-01 -2.56537914e-01
 -2.56537914e-01  1.95631664e+02  2.17589194e+03  1.27975015e+04]
E1 = -705.2978549452992  E_coul = 198.77532516434445
cycle= 3 E= -506.522529780955  delta_E= -8.76e-09  |g|= 1.84e-05  |ddm|= 2.88e-05
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=2.55457e-05
diis-c [-9.07613963e-12  4.75719451e-05 -1.40753053e-02  1.01402773e+00]
  HOMO = -0.256538076887642  LUMO = 195.631659506279
  mo_energy =
[-1.19698665e+02 -1.22581751e+01 -6.65610454e+00 -6.65610454e+00
 -6.65610454e+00 -1.17883512e+00 -2.56538077e-01 -2.56538077e-01
 -2.56538077e-01  1.95631660e+02  2.17589193e+03  1.27975015e+04]
E1 = -705.2978545769552  E_coul = 198.77532479599978
cycle= 4 E= -506.522529780955  delta_E= -6.82e-13  |g|= 2.31e-08  |ddm|= 2.19e-07
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -705.2978545769552  E_coul = 198.77532479599978
  HOMO = -0.256538076631198  LUMO = 195.631659539847
  mo_energy =
[-1.19698664e+02 -1.22581751e+01 -6.65610454e+00 -6.65610454e+00
 -6.65610454e+00 -1.17883512e+00 -2.56538077e-01 -2.56538077e-01
 -2.56538077e-01  1.95631660e+02  2.17589193e+03  1.27975015e+04]
E1 = -705.2978545777775  E_coul = 198.77532479682193
Extra cycle  E= -506.522529780956  delta_E= -1.71e-13  |g|= 1.73e-10  |ddm|= 2.58e-10
    CPU time for scf_cycle      0.09 sec, wall time      0.09 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 16.92055457684843
E1 = -705.2978545777775  E_coul = 198.77532479682193
init E= -506.522529780956
    CPU time for initialize scf      0.05 sec, wall time      0.05 sec
  HOMO = -0.256538076629385  LUMO = 195.631659540084
  mo_energy =
[-1.19698664e+02 -1.22581751e+01 -6.65610454e+00 -6.65610454e+00
 -6.65610454e+00 -1.17883512e+00 -2.56538077e-01 -2.56538077e-01
 -2.56538077e-01  1.95631660e+02  2.17589193e+03  1.27975015e+04]
E1 = -705.2978545777829  E_coul = 198.77532479682782
cycle= 1 E= -506.522529780955  delta_E= 4.55e-13  |g|= 4.99e-12  |ddm|= 1.96e-12
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -705.2978545777829  E_coul = 198.77532479682782
  HOMO = -0.256538076629376  LUMO = 195.631659540086
  mo_energy =
[-1.19698664e+02 -1.22581751e+01 -6.65610454e+00 -6.65610454e+00
 -6.65610454e+00 -1.17883512e+00 -2.56538077e-01 -2.56538077e-01
 -2.56538077e-01  1.95631660e+02  2.17589193e+03  1.27975015e+04]
E1 = -705.297854577783  E_coul = 198.77532479682793
Extra cycle  E= -506.522529780955  delta_E=    0  |g|= 2.95e-12  |ddm|= 1.35e-14
    CPU time for scf_cycle      0.12 sec, wall time      0.12 sec
exp = [6.29461875e+03 1.56938110e+03 2.52103502e+02 5.38992453e+01
 4.80901252e+00 3.91532818e-01 8.60168375e+00 4.80680933e-01]
grad_E = [-8.48820803e-05  1.19555577e-03  1.22443345e-04 -6.82889088e-04
  6.73977527e-02 -7.62180711e-02  2.61814546e-02 -3.67825964e-01]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((8, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([1.5735952963858392e+03,2.3761303919145971e+02,5.2332977870138201e+01,4.7281081235122091e+00,3.9325830426169639e-01,8.5907170030661746e+00,4.9039633283239870e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "6s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:46:30 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  6294.64749369        1
[INPUT] 0    0    [1    /1   ]  1568.87197361        1
[INPUT] 0    0    [1    /1   ]  253.83691139         1
[INPUT] 0    0    [1    /1   ]  54.1584701118        1
[INPUT] 0    0    [1    /1   ]  4.75780269287        1
[INPUT] 0    0    [1    /1   ]  0.393582833482       1
[INPUT] 1    0    [1    /1   ]  8.59068056914        1
[INPUT] 1    0    [1    /1   ]  0.487109290228       1

nuclear repulsion = 0
number of shells = 8
number of NR pGTOs = 12
number of NR cGTOs = 12
basis = {'Ar': [[0, [6294.647493687074, 1.0]], [0, [1568.871973606177, 1.0]], [0, [253.8369113899232, 1.0]], [0, [54.15847011178423, 1.0]], [0, [4.757802692871786, 1.0]], [0, [0.3935828334819062, 1.0]], [1, [8.59068056914164, 1.0]], [1, [0.4871092902278164, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [6294.64749369]
bas 1, expnt(s) = [1568.87197361]
bas 2, expnt(s) = [253.83691139]
bas 3, expnt(s) = [54.15847011]
bas 4, expnt(s) = [4.75780269]
bas 5, expnt(s) = [0.39358283]
bas 6, expnt(s) = [8.59068057]
bas 7, expnt(s) = [0.48710929]
CPU time:        60.16
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  1  1  1  0 36 37  0]
 [ 0  1  1  1  0 38 39  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 6.29464749e+03 1.78543311e+03 1.56887197e+03 6.29804346e+02
 2.53836911e+02 1.60668635e+02 5.41584701e+01 5.04388081e+01
 4.75780269e+00 8.13897745e+00 3.93582833e-01 1.25542894e+00
 8.59068057e+00 4.29060818e+01 4.87109290e-01 1.18718229e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.321113261012176
cond(S) = 16.96631379763667
E1 = -687.7478708831429  E_coul = 184.85026391843567
init E= -502.897606964707
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.685884199648995  LUMO = 195.80972564176
  mo_energy =
[-1.21102926e+02 -1.32819160e+01 -7.62274716e+00 -7.62274716e+00
 -7.62274716e+00 -1.65688933e+00 -6.85884200e-01 -6.85884200e-01
 -6.85884200e-01  1.95809726e+02  2.18031032e+03  1.28014965e+04]
E1 = -705.509432743277  E_coul = 198.98287304005515
cycle= 1 E= -506.526559703222  delta_E= -3.63  |g|= 0.254  |ddm|= 0.291
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.340429
diis-c [-0.11589223  1.        ]
  HOMO = -0.241920255987072  LUMO = 197.222499007074
  mo_energy =
[-1.19695556e+02 -1.22445877e+01 -6.64618034e+00 -6.64618034e+00
 -6.64618034e+00 -1.16745045e+00 -2.41920256e-01 -2.41920256e-01
 -2.41920256e-01  1.97222499e+02  2.18165559e+03  1.28026869e+04]
E1 = -705.5008282864742  E_coul = 198.9741624981993
cycle= 2 E= -506.526665788275  delta_E= -0.000106  |g|= 0.00203  |ddm|= 0.00352
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00216125
diis-c [-3.60199727e-06 -3.04642718e-03  1.00304643e+00]
  HOMO = -0.2419566832079  LUMO = 197.220775497084
  mo_energy =
[-1.19698307e+02 -1.22448641e+01 -6.64658590e+00 -6.64658590e+00
 -6.64658590e+00 -1.16746571e+00 -2.41956683e-01 -2.41956683e-01
 -2.41956683e-01  1.97220775e+02  2.18164983e+03  1.28026789e+04]
E1 = -705.5007643151034  E_coul = 198.97409851765215
cycle= 3 E= -506.526665797451  delta_E= -9.18e-09  |g|= 1.87e-05  |ddm|= 2.92e-05
    CPU time for cycle= 3      0.02 sec, wall time      0.06 sec
diis-norm(errvec)=2.60252e-05
diis-c [-9.52214343e-12  4.68221330e-05 -1.38230540e-02  1.01377623e+00]
  HOMO = -0.241956847639275  LUMO = 197.220771583481
  mo_energy =
[-1.19698318e+02 -1.22448654e+01 -6.64658818e+00 -6.64658818e+00
 -6.64658818e+00 -1.16746575e+00 -2.41956848e-01 -2.41956848e-01
 -2.41956848e-01  1.97220772e+02  2.18164982e+03  1.28026789e+04]
E1 = -705.5007639548846  E_coul = 198.97409815743234
cycle= 4 E= -506.526665797452  delta_E= -1.02e-12  |g|= 2.31e-08  |ddm|= 2.18e-07
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -705.5007639548846  E_coul = 198.97409815743234
  HOMO = -0.241956847382312  LUMO = 197.220771617244
  mo_energy =
[-1.19698318e+02 -1.22448654e+01 -6.64658818e+00 -6.64658818e+00
 -6.64658818e+00 -1.16746575e+00 -2.41956847e-01 -2.41956847e-01
 -2.41956847e-01  1.97220772e+02  2.18164982e+03  1.28026789e+04]
E1 = -705.5007639556934  E_coul = 198.9740981582412
Extra cycle  E= -506.526665797452  delta_E= 1.14e-13  |g|= 1.73e-10  |ddm|= 2.52e-10
    CPU time for scf_cycle      0.11 sec, wall time      0.15 sec
exp = [6.29464749e+03 1.56887197e+03 2.53836911e+02 5.41584701e+01
 4.75780269e+00 3.93582833e-01 8.59068057e+00 4.87109290e-01]
E = -506.5266657974522
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((8, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([1.5735952963858392e+03,2.3761303919145971e+02,5.2332977870138201e+01,4.7281081235122091e+00,3.9325830426169639e-01,8.5907170030661746e+00,4.9039633283239870e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "6s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:46:31 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  6294.64749369        1
[INPUT] 0    0    [1    /1   ]  1568.87197361        1
[INPUT] 0    0    [1    /1   ]  253.83691139         1
[INPUT] 0    0    [1    /1   ]  54.1584701118        1
[INPUT] 0    0    [1    /1   ]  4.75780269287        1
[INPUT] 0    0    [1    /1   ]  0.393582833482       1
[INPUT] 1    0    [1    /1   ]  8.59068056914        1
[INPUT] 1    0    [1    /1   ]  0.487109290228       1

nuclear repulsion = 0
number of shells = 8
number of NR pGTOs = 12
number of NR cGTOs = 12
basis = {'Ar': [[0, [6294.647493687074, 1.0]], [0, [1568.871973606177, 1.0]], [0, [253.8369113899232, 1.0]], [0, [54.15847011178423, 1.0]], [0, [4.757802692871786, 1.0]], [0, [0.3935828334819062, 1.0]], [1, [8.59068056914164, 1.0]], [1, [0.4871092902278164, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [6294.64749369]
bas 1, expnt(s) = [1568.87197361]
bas 2, expnt(s) = [253.83691139]
bas 3, expnt(s) = [54.15847011]
bas 4, expnt(s) = [4.75780269]
bas 5, expnt(s) = [0.39358283]
bas 6, expnt(s) = [8.59068057]
bas 7, expnt(s) = [0.48710929]
CPU time:        60.55
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  1  1  1  0 36 37  0]
 [ 0  1  1  1  0 38 39  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 6.29464749e+03 1.78543311e+03 1.56887197e+03 6.29804346e+02
 2.53836911e+02 1.60668635e+02 5.41584701e+01 5.04388081e+01
 4.75780269e+00 8.13897745e+00 3.93582833e-01 1.25542894e+00
 8.59068057e+00 4.29060818e+01 4.87109290e-01 1.18718229e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.321113261012176
cond(S) = 16.96631379763667
E1 = -687.7478708831429  E_coul = 184.85026391843567
init E= -502.897606964707
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.685884199648995  LUMO = 195.80972564176
  mo_energy =
[-1.21102926e+02 -1.32819160e+01 -7.62274716e+00 -7.62274716e+00
 -7.62274716e+00 -1.65688933e+00 -6.85884200e-01 -6.85884200e-01
 -6.85884200e-01  1.95809726e+02  2.18031032e+03  1.28014965e+04]
E1 = -705.509432743277  E_coul = 198.98287304005515
cycle= 1 E= -506.526559703222  delta_E= -3.63  |g|= 0.254  |ddm|= 0.291
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.340429
diis-c [-0.11589223  1.        ]
  HOMO = -0.241920255987072  LUMO = 197.222499007074
  mo_energy =
[-1.19695556e+02 -1.22445877e+01 -6.64618034e+00 -6.64618034e+00
 -6.64618034e+00 -1.16745045e+00 -2.41920256e-01 -2.41920256e-01
 -2.41920256e-01  1.97222499e+02  2.18165559e+03  1.28026869e+04]
E1 = -705.5008282864742  E_coul = 198.9741624981993
cycle= 2 E= -506.526665788275  delta_E= -0.000106  |g|= 0.00203  |ddm|= 0.00352
    CPU time for cycle= 2      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.00216125
diis-c [-3.60199727e-06 -3.04642718e-03  1.00304643e+00]
  HOMO = -0.2419566832079  LUMO = 197.220775497084
  mo_energy =
[-1.19698307e+02 -1.22448641e+01 -6.64658590e+00 -6.64658590e+00
 -6.64658590e+00 -1.16746571e+00 -2.41956683e-01 -2.41956683e-01
 -2.41956683e-01  1.97220775e+02  2.18164983e+03  1.28026789e+04]
E1 = -705.5007643151034  E_coul = 198.97409851765215
cycle= 3 E= -506.526665797451  delta_E= -9.18e-09  |g|= 1.87e-05  |ddm|= 2.92e-05
    CPU time for cycle= 3      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=2.60252e-05
diis-c [-9.52214343e-12  4.68221330e-05 -1.38230540e-02  1.01377623e+00]
  HOMO = -0.241956847639275  LUMO = 197.220771583481
  mo_energy =
[-1.19698318e+02 -1.22448654e+01 -6.64658818e+00 -6.64658818e+00
 -6.64658818e+00 -1.16746575e+00 -2.41956848e-01 -2.41956848e-01
 -2.41956848e-01  1.97220772e+02  2.18164982e+03  1.28026789e+04]
E1 = -705.5007639548846  E_coul = 198.97409815743234
cycle= 4 E= -506.526665797452  delta_E= -1.02e-12  |g|= 2.31e-08  |ddm|= 2.18e-07
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -705.5007639548846  E_coul = 198.97409815743234
  HOMO = -0.241956847382312  LUMO = 197.220771617244
  mo_energy =
[-1.19698318e+02 -1.22448654e+01 -6.64658818e+00 -6.64658818e+00
 -6.64658818e+00 -1.16746575e+00 -2.41956847e-01 -2.41956847e-01
 -2.41956847e-01  1.97220772e+02  2.18164982e+03  1.28026789e+04]
E1 = -705.5007639556934  E_coul = 198.9740981582412
Extra cycle  E= -506.526665797452  delta_E= 1.14e-13  |g|= 1.73e-10  |ddm|= 2.52e-10
    CPU time for scf_cycle      0.09 sec, wall time      0.10 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 16.96631379763667
E1 = -705.5007639556934  E_coul = 198.9740981582412
init E= -506.526665797452
    CPU time for initialize scf      0.05 sec, wall time      0.06 sec
  HOMO = -0.241956847380518  LUMO = 197.220771617481
  mo_energy =
[-1.19698318e+02 -1.22448654e+01 -6.64658818e+00 -6.64658818e+00
 -6.64658818e+00 -1.16746575e+00 -2.41956847e-01 -2.41956847e-01
 -2.41956847e-01  1.97220772e+02  2.18164982e+03  1.28026789e+04]
E1 = -705.5007639556992  E_coul = 198.97409815824713
cycle= 1 E= -506.526665797452  delta_E= 1.14e-13  |g|= 2.26e-12  |ddm|= 1.89e-12
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -705.5007639556992  E_coul = 198.97409815824713
  HOMO = -0.241956847380506  LUMO = 197.220771617484
  mo_energy =
[-1.19698318e+02 -1.22448654e+01 -6.64658818e+00 -6.64658818e+00
 -6.64658818e+00 -1.16746575e+00 -2.41956847e-01 -2.41956847e-01
 -2.41956847e-01  1.97220772e+02  2.18164982e+03  1.28026789e+04]
E1 = -705.5007639556992  E_coul = 198.9740981582471
Extra cycle  E= -506.526665797452  delta_E=    0  |g|= 5.32e-12  |ddm|= 1.17e-14
    CPU time for scf_cycle      0.12 sec, wall time      0.12 sec
exp = [6.29464749e+03 1.56887197e+03 2.53836911e+02 5.41584701e+01
 4.75780269e+00 3.93582833e-01 8.59068057e+00 4.87109290e-01]
grad_E = [-8.41917772e-05  1.15302900e-03  6.20473744e-04 -4.02116907e-05
  2.00772034e-02 -2.48114109e-02  8.02784410e-03 -1.15768463e-01]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((8, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([1.5735952963858392e+03,2.3761303919145971e+02,5.2332977870138201e+01,4.7281081235122091e+00,3.9325830426169639e-01,8.5907170030661746e+00,4.9039633283239870e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "6s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:46:34 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  6294.64142099        1
[INPUT] 0    0    [1    /1   ]  1568.98013898        1
[INPUT] 0    0    [1    /1   ]  253.460202026        1
[INPUT] 0    0    [1    /1   ]  54.1065129456        1
[INPUT] 0    0    [1    /1   ]  4.73891183066        1
[INPUT] 0    0    [1    /1   ]  0.394406980342       1
[INPUT] 1    0    [1    /1   ]  8.58671785462        1
[INPUT] 1    0    [1    /1   ]  0.489701062865       1

nuclear repulsion = 0
number of shells = 8
number of NR pGTOs = 12
number of NR cGTOs = 12
basis = {'Ar': [[0, [6294.641420985386, 1.0]], [0, [1568.9801389817212, 1.0]], [0, [253.46020202632184, 1.0]], [0, [54.10651294560981, 1.0]], [0, [4.738911830663177, 1.0]], [0, [0.39440698034166727, 1.0]], [1, [8.586717854624382, 1.0]], [1, [0.48970106286476406, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [6294.64142099]
bas 1, expnt(s) = [1568.98013898]
bas 2, expnt(s) = [253.46020203]
bas 3, expnt(s) = [54.10651295]
bas 4, expnt(s) = [4.73891183]
bas 5, expnt(s) = [0.39440698]
bas 6, expnt(s) = [8.58671785]
bas 7, expnt(s) = [0.48970106]
CPU time:        63.52
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  1  1  1  0 36 37  0]
 [ 0  1  1  1  0 38 39  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 6.29464142e+03 1.78543182e+03 1.56898014e+03 6.29836911e+02
 2.53460202e+02 1.60489771e+02 5.41065129e+01 5.04025122e+01
 4.73891183e+00 8.11472853e+00 3.94406980e-01 1.25740004e+00
 8.58671785e+00 4.28813435e+01 4.89701063e-01 1.19508336e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.318129475709657
cond(S) = 16.946603412140195
E1 = -687.8060900851701  E_coul = 184.90288835487326
init E= -502.903201730297
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.682346771284768  LUMO = 195.358254147048
  mo_energy =
[-1.21102851e+02 -1.32771724e+01 -7.62036470e+00 -7.62036470e+00
 -7.62036470e+00 -1.65391964e+00 -6.82346771e-01 -6.82346771e-01
 -6.82346771e-01  1.95358254e+02  2.17898807e+03  1.28003069e+04]
E1 = -705.5894490095496  E_coul = 199.06239893643075
cycle= 1 E= -506.527050073119  delta_E= -3.62  |g|= 0.256  |ddm|= 0.293
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.340511
diis-c [-0.11594768  1.        ]
  HOMO = -0.235979180836251  LUMO = 196.770979828419
  mo_energy =
[-1.19696685e+02 -1.22381562e+01 -6.64226377e+00 -6.64226377e+00
 -6.64226377e+00 -1.16280933e+00 -2.35979181e-01 -2.35979181e-01
 -2.35979181e-01  1.96770980e+02  2.18032916e+03  1.28014914e+04]
E1 = -705.58074715615  E_coul = 199.05358837616325
cycle= 2 E= -506.527158779987  delta_E= -0.000109  |g|= 0.00206  |ddm|= 0.00357
    CPU time for cycle= 2      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.00220129
diis-c [-3.75213981e-06 -3.08052890e-03  1.00308053e+00]
  HOMO = -0.236016398831977  LUMO = 196.769244383459
  mo_energy =
[-1.19699464e+02 -1.22384355e+01 -6.64267502e+00 -6.64267502e+00
 -6.64267502e+00 -1.16282473e+00 -2.36016399e-01 -2.36016399e-01
 -2.36016399e-01  1.96769244e+02  2.18032337e+03  1.28014834e+04]
E1 = -705.5806822607448  E_coul = 199.05352347124816
cycle= 3 E= -506.527158789497  delta_E= -9.51e-09  |g|= 1.9e-05  |ddm|= 2.97e-05
    CPU time for cycle= 3      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=2.64902e-05
diis-c [-9.73214357e-12  4.68104375e-05 -1.37916063e-02  1.01374480e+00]
  HOMO = -0.236016566878756  LUMO = 196.769240505672
  mo_energy =
[-1.19699475e+02 -1.22384367e+01 -6.64267734e+00 -6.64267734e+00
 -6.64267734e+00 -1.16282477e+00 -2.36016567e-01 -2.36016567e-01
 -2.36016567e-01  1.96769241e+02  2.18032337e+03  1.28014834e+04]
E1 = -705.5806818959336  E_coul = 199.05352310643656
cycle= 4 E= -506.527158789497  delta_E= -3.98e-13  |g|= 2.35e-08  |ddm|= 2.21e-07
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -705.5806818959336  E_coul = 199.05352310643656
  HOMO = -0.236016566614943  LUMO = 196.769240539863
  mo_energy =
[-1.19699475e+02 -1.22384367e+01 -6.64267734e+00 -6.64267734e+00
 -6.64267734e+00 -1.16282477e+00 -2.36016567e-01 -2.36016567e-01
 -2.36016567e-01  1.96769241e+02  2.18032337e+03  1.28014834e+04]
E1 = -705.5806818967541  E_coul = 199.05352310725667
Extra cycle  E= -506.527158789497  delta_E= -3.98e-13  |g|= 1.76e-10  |ddm|= 2.55e-10
    CPU time for scf_cycle      0.09 sec, wall time      0.10 sec
exp = [6.29464142e+03 1.56898014e+03 2.53460202e+02 5.41065129e+01
 4.73891183e+00 3.94406980e-01 8.58671785e+00 4.89701063e-01]
E = -506.52715878949743
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((8, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([1.5735952963858392e+03,2.3761303919145971e+02,5.2332977870138201e+01,4.7281081235122091e+00,3.9325830426169639e-01,8.5907170030661746e+00,4.9039633283239870e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "6s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:46:34 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  6294.64142099        1
[INPUT] 0    0    [1    /1   ]  1568.98013898        1
[INPUT] 0    0    [1    /1   ]  253.460202026        1
[INPUT] 0    0    [1    /1   ]  54.1065129456        1
[INPUT] 0    0    [1    /1   ]  4.73891183066        1
[INPUT] 0    0    [1    /1   ]  0.394406980342       1
[INPUT] 1    0    [1    /1   ]  8.58671785462        1
[INPUT] 1    0    [1    /1   ]  0.489701062865       1

nuclear repulsion = 0
number of shells = 8
number of NR pGTOs = 12
number of NR cGTOs = 12
basis = {'Ar': [[0, [6294.641420985386, 1.0]], [0, [1568.9801389817212, 1.0]], [0, [253.46020202632184, 1.0]], [0, [54.10651294560981, 1.0]], [0, [4.738911830663177, 1.0]], [0, [0.39440698034166727, 1.0]], [1, [8.586717854624382, 1.0]], [1, [0.48970106286476406, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [6294.64142099]
bas 1, expnt(s) = [1568.98013898]
bas 2, expnt(s) = [253.46020203]
bas 3, expnt(s) = [54.10651295]
bas 4, expnt(s) = [4.73891183]
bas 5, expnt(s) = [0.39440698]
bas 6, expnt(s) = [8.58671785]
bas 7, expnt(s) = [0.48970106]
CPU time:        63.91
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  1  1  1  0 36 37  0]
 [ 0  1  1  1  0 38 39  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 6.29464142e+03 1.78543182e+03 1.56898014e+03 6.29836911e+02
 2.53460202e+02 1.60489771e+02 5.41065129e+01 5.04025122e+01
 4.73891183e+00 8.11472853e+00 3.94406980e-01 1.25740004e+00
 8.58671785e+00 4.28813435e+01 4.89701063e-01 1.19508336e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.318129475709657
cond(S) = 16.946603412140195
E1 = -687.8060900851701  E_coul = 184.90288835487326
init E= -502.903201730297
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.682346771284768  LUMO = 195.358254147048
  mo_energy =
[-1.21102851e+02 -1.32771724e+01 -7.62036470e+00 -7.62036470e+00
 -7.62036470e+00 -1.65391964e+00 -6.82346771e-01 -6.82346771e-01
 -6.82346771e-01  1.95358254e+02  2.17898807e+03  1.28003069e+04]
E1 = -705.5894490095496  E_coul = 199.06239893643075
cycle= 1 E= -506.527050073119  delta_E= -3.62  |g|= 0.256  |ddm|= 0.293
    CPU time for cycle= 1      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.340511
diis-c [-0.11594768  1.        ]
  HOMO = -0.235979180836251  LUMO = 196.770979828419
  mo_energy =
[-1.19696685e+02 -1.22381562e+01 -6.64226377e+00 -6.64226377e+00
 -6.64226377e+00 -1.16280933e+00 -2.35979181e-01 -2.35979181e-01
 -2.35979181e-01  1.96770980e+02  2.18032916e+03  1.28014914e+04]
E1 = -705.58074715615  E_coul = 199.05358837616325
cycle= 2 E= -506.527158779987  delta_E= -0.000109  |g|= 0.00206  |ddm|= 0.00357
    CPU time for cycle= 2      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.00220129
diis-c [-3.75213981e-06 -3.08052890e-03  1.00308053e+00]
  HOMO = -0.236016398831977  LUMO = 196.769244383459
  mo_energy =
[-1.19699464e+02 -1.22384355e+01 -6.64267502e+00 -6.64267502e+00
 -6.64267502e+00 -1.16282473e+00 -2.36016399e-01 -2.36016399e-01
 -2.36016399e-01  1.96769244e+02  2.18032337e+03  1.28014834e+04]
E1 = -705.5806822607448  E_coul = 199.05352347124816
cycle= 3 E= -506.527158789497  delta_E= -9.51e-09  |g|= 1.9e-05  |ddm|= 2.97e-05
    CPU time for cycle= 3      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=2.64902e-05
diis-c [-9.73214357e-12  4.68104375e-05 -1.37916063e-02  1.01374480e+00]
  HOMO = -0.236016566878756  LUMO = 196.769240505672
  mo_energy =
[-1.19699475e+02 -1.22384367e+01 -6.64267734e+00 -6.64267734e+00
 -6.64267734e+00 -1.16282477e+00 -2.36016567e-01 -2.36016567e-01
 -2.36016567e-01  1.96769241e+02  2.18032337e+03  1.28014834e+04]
E1 = -705.5806818959336  E_coul = 199.05352310643656
cycle= 4 E= -506.527158789497  delta_E= -3.98e-13  |g|= 2.35e-08  |ddm|= 2.21e-07
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -705.5806818959336  E_coul = 199.05352310643656
  HOMO = -0.236016566614943  LUMO = 196.769240539863
  mo_energy =
[-1.19699475e+02 -1.22384367e+01 -6.64267734e+00 -6.64267734e+00
 -6.64267734e+00 -1.16282477e+00 -2.36016567e-01 -2.36016567e-01
 -2.36016567e-01  1.96769241e+02  2.18032337e+03  1.28014834e+04]
E1 = -705.5806818967541  E_coul = 199.05352310725667
Extra cycle  E= -506.527158789497  delta_E= -3.98e-13  |g|= 1.76e-10  |ddm|= 2.55e-10
    CPU time for scf_cycle      0.10 sec, wall time      0.10 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 16.946603412140195
E1 = -705.5806818967541  E_coul = 199.05352310725667
init E= -506.527158789497
    CPU time for initialize scf      0.05 sec, wall time      0.05 sec
  HOMO = -0.236016566613101  LUMO = 196.769240540105
  mo_energy =
[-1.19699475e+02 -1.22384367e+01 -6.64267734e+00 -6.64267734e+00
 -6.64267734e+00 -1.16282477e+00 -2.36016567e-01 -2.36016567e-01
 -2.36016567e-01  1.96769241e+02  2.18032337e+03  1.28014834e+04]
E1 = -705.5806818967601  E_coul = 199.0535231072626
cycle= 1 E= -506.527158789497  delta_E= -5.68e-14  |g|= 2.72e-12  |ddm|= 1.88e-12
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -705.5806818967601  E_coul = 199.0535231072626
  HOMO = -0.236016566613087  LUMO = 196.769240540106
  mo_energy =
[-1.19699475e+02 -1.22384367e+01 -6.64267734e+00 -6.64267734e+00
 -6.64267734e+00 -1.16282477e+00 -2.36016567e-01 -2.36016567e-01
 -2.36016567e-01  1.96769241e+02  2.18032337e+03  1.28014834e+04]
E1 = -705.5806818967599  E_coul = 199.05352310726266
Extra cycle  E= -506.527158789497  delta_E= 2.84e-13  |g|= 2.38e-12  |ddm|= 2.32e-14
    CPU time for scf_cycle      0.12 sec, wall time      0.12 sec
exp = [6.29464142e+03 1.56898014e+03 2.53460202e+02 5.41065129e+01
 4.73891183e+00 3.94406980e-01 8.58671785e+00 4.89701063e-01]
grad_E = [-8.43158803e-05  1.16218326e-03  4.97038335e-04 -8.92018419e-05
  2.36520946e-03 -3.46582452e-03  9.49593728e-04 -1.55302075e-02]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((8, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([1.5735952963858392e+03,2.3761303919145971e+02,5.2332977870138201e+01,4.7281081235122091e+00,3.9325830426169639e-01,8.5907170030661746e+00,4.9039633283239870e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "6s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:46:37 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  6294.6357512         1
[INPUT] 0    0    [1    /1   ]  1569.0811162         1
[INPUT] 0    0    [1    /1   ]  253.108248638        1
[INPUT] 0    0    [1    /1   ]  54.0622373072        1
[INPUT] 0    0    [1    /1   ]  4.73608336459        1
[INPUT] 0    0    [1    /1   ]  0.394545505686       1
[INPUT] 1    0    [1    /1   ]  8.58621605389        1
[INPUT] 1    0    [1    /1   ]  0.49014790853        1

nuclear repulsion = 0
number of shells = 8
number of NR pGTOs = 12
number of NR cGTOs = 12
basis = {'Ar': [[0, [6294.635751197587, 1.0]], [0, [1569.081116204281, 1.0]], [0, [253.1082486379714, 1.0]], [0, [54.06223730724524, 1.0]], [0, [4.736083364589898, 1.0]], [0, [0.39454550568618946, 1.0]], [1, [8.586216053890967, 1.0]], [1, [0.4901479085296913, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [6294.6357512]
bas 1, expnt(s) = [1569.0811162]
bas 2, expnt(s) = [253.10824864]
bas 3, expnt(s) = [54.06223731]
bas 4, expnt(s) = [4.73608336]
bas 5, expnt(s) = [0.39454551]
bas 6, expnt(s) = [8.58621605]
bas 7, expnt(s) = [0.49014791]
CPU time:        66.87
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  1  1  1  0 36 37  0]
 [ 0  1  1  1  0 38 39  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 6.29463575e+03 1.78543061e+03 1.56908112e+03 6.29867313e+02
 2.53108249e+02 1.60322600e+02 5.40622373e+01 5.03715755e+01
 4.73608336e+00 8.11109574e+00 3.94545506e-01 1.25773124e+00
 8.58621605e+00 4.28782111e+01 4.90147909e-01 1.19644664e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.31760580403882
cond(S) = 16.934108037782394
E1 = -687.8167934101373  E_coul = 184.91285369279612
init E= -502.903939717341
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.681736703030089  LUMO = 195.007181904675
  mo_energy =
[-1.21102830e+02 -1.32761255e+01 -7.61987745e+00 -7.61987745e+00
 -7.61987745e+00 -1.65340225e+00 -6.81736703e-01 -6.81736703e-01
 -6.81736703e-01  1.95007182e+02  2.17780911e+03  1.27992433e+04]
E1 = -705.6040298801361  E_coul = 199.07694258857475
cycle= 1 E= -506.527087291561  delta_E= -3.62  |g|= 0.257  |ddm|= 0.294
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.340971
diis-c [-0.1162614  1.       ]
  HOMO = -0.2349494296143  LUMO = 196.41977576269
  mo_energy =
[-1.19696925e+02 -1.22368282e+01 -6.64150994e+00 -6.64150994e+00
 -6.64150994e+00 -1.16199575e+00 -2.34949430e-01 -2.34949430e-01
 -2.34949430e-01  1.96419776e+02  2.17914912e+03  1.28004261e+04]
E1 = -705.5952934833597  E_coul = 199.0680967658607
cycle= 2 E= -506.527196717499  delta_E= -0.000109  |g|= 0.00207  |ddm|= 0.00358
    CPU time for cycle= 2      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.0022114
diis-c [-3.78990117e-06 -3.08601021e-03  1.00308601e+00]
  HOMO = -0.234986882762735  LUMO = 196.418036790446
  mo_energy =
[-1.19699714e+02 -1.22371086e+01 -6.64192321e+00 -6.64192321e+00
 -6.64192321e+00 -1.16201120e+00 -2.34986883e-01 -2.34986883e-01
 -2.34986883e-01  1.96418037e+02  2.17914331e+03  1.28004181e+04]
E1 = -705.5952282216399  E_coul = 199.0680314945283
cycle= 3 E= -506.527196727112  delta_E= -9.61e-09  |g|= 1.91e-05  |ddm|= 2.99e-05
    CPU time for cycle= 3      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=2.66452e-05
diis-c [-9.74988340e-12  4.69029740e-05 -1.38046510e-02  1.01375775e+00]
  HOMO = -0.234987052198752  LUMO = 196.418032903659
  mo_energy =
[-1.19699724e+02 -1.22371099e+01 -6.64192555e+00 -6.64192555e+00
 -6.64192555e+00 -1.16201125e+00 -2.34987052e-01 -2.34987052e-01
 -2.34987052e-01  1.96418033e+02  2.17914331e+03  1.28004180e+04]
E1 = -705.5952278540387  E_coul = 199.0680311269265
cycle= 4 E= -506.527196727112  delta_E= -6.82e-13  |g|= 2.36e-08  |ddm|= 2.23e-07
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -705.5952278540387  E_coul = 199.0680311269265
  HOMO = -0.234987051932449  LUMO = 196.418032937976
  mo_energy =
[-1.19699724e+02 -1.22371099e+01 -6.64192554e+00 -6.64192554e+00
 -6.64192554e+00 -1.16201125e+00 -2.34987052e-01 -2.34987052e-01
 -2.34987052e-01  1.96418033e+02  2.17914331e+03  1.28004180e+04]
E1 = -705.5952278548643  E_coul = 199.0680311277519
Extra cycle  E= -506.527196727112  delta_E= -1.71e-13  |g|= 1.77e-10  |ddm|= 2.57e-10
    CPU time for scf_cycle      0.09 sec, wall time      0.10 sec
exp = [6.29463575e+03 1.56908112e+03 2.53108249e+02 5.40622373e+01
 4.73608336e+00 3.94545506e-01 8.58621605e+00 4.90147909e-01]
E = -506.5271967271124
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((8, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([1.5735952963858392e+03,2.3761303919145971e+02,5.2332977870138201e+01,4.7281081235122091e+00,3.9325830426169639e-01,8.5907170030661746e+00,4.9039633283239870e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "6s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:46:38 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  6294.6357512         1
[INPUT] 0    0    [1    /1   ]  1569.0811162         1
[INPUT] 0    0    [1    /1   ]  253.108248638        1
[INPUT] 0    0    [1    /1   ]  54.0622373072        1
[INPUT] 0    0    [1    /1   ]  4.73608336459        1
[INPUT] 0    0    [1    /1   ]  0.394545505686       1
[INPUT] 1    0    [1    /1   ]  8.58621605389        1
[INPUT] 1    0    [1    /1   ]  0.49014790853        1

nuclear repulsion = 0
number of shells = 8
number of NR pGTOs = 12
number of NR cGTOs = 12
basis = {'Ar': [[0, [6294.635751197587, 1.0]], [0, [1569.081116204281, 1.0]], [0, [253.1082486379714, 1.0]], [0, [54.06223730724524, 1.0]], [0, [4.736083364589898, 1.0]], [0, [0.39454550568618946, 1.0]], [1, [8.586216053890967, 1.0]], [1, [0.4901479085296913, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [6294.6357512]
bas 1, expnt(s) = [1569.0811162]
bas 2, expnt(s) = [253.10824864]
bas 3, expnt(s) = [54.06223731]
bas 4, expnt(s) = [4.73608336]
bas 5, expnt(s) = [0.39454551]
bas 6, expnt(s) = [8.58621605]
bas 7, expnt(s) = [0.49014791]
CPU time:        67.28
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  1  1  1  0 36 37  0]
 [ 0  1  1  1  0 38 39  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 6.29463575e+03 1.78543061e+03 1.56908112e+03 6.29867313e+02
 2.53108249e+02 1.60322600e+02 5.40622373e+01 5.03715755e+01
 4.73608336e+00 8.11109574e+00 3.94545506e-01 1.25773124e+00
 8.58621605e+00 4.28782111e+01 4.90147909e-01 1.19644664e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.31760580403882
cond(S) = 16.934108037782394
E1 = -687.8167934101373  E_coul = 184.91285369279612
init E= -502.903939717341
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.681736703030089  LUMO = 195.007181904675
  mo_energy =
[-1.21102830e+02 -1.32761255e+01 -7.61987745e+00 -7.61987745e+00
 -7.61987745e+00 -1.65340225e+00 -6.81736703e-01 -6.81736703e-01
 -6.81736703e-01  1.95007182e+02  2.17780911e+03  1.27992433e+04]
E1 = -705.6040298801361  E_coul = 199.07694258857475
cycle= 1 E= -506.527087291561  delta_E= -3.62  |g|= 0.257  |ddm|= 0.294
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.340971
diis-c [-0.1162614  1.       ]
  HOMO = -0.2349494296143  LUMO = 196.41977576269
  mo_energy =
[-1.19696925e+02 -1.22368282e+01 -6.64150994e+00 -6.64150994e+00
 -6.64150994e+00 -1.16199575e+00 -2.34949430e-01 -2.34949430e-01
 -2.34949430e-01  1.96419776e+02  2.17914912e+03  1.28004261e+04]
E1 = -705.5952934833597  E_coul = 199.0680967658607
cycle= 2 E= -506.527196717499  delta_E= -0.000109  |g|= 0.00207  |ddm|= 0.00358
    CPU time for cycle= 2      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.0022114
diis-c [-3.78990117e-06 -3.08601021e-03  1.00308601e+00]
  HOMO = -0.234986882762735  LUMO = 196.418036790446
  mo_energy =
[-1.19699714e+02 -1.22371086e+01 -6.64192321e+00 -6.64192321e+00
 -6.64192321e+00 -1.16201120e+00 -2.34986883e-01 -2.34986883e-01
 -2.34986883e-01  1.96418037e+02  2.17914331e+03  1.28004181e+04]
E1 = -705.5952282216399  E_coul = 199.0680314945283
cycle= 3 E= -506.527196727112  delta_E= -9.61e-09  |g|= 1.91e-05  |ddm|= 2.99e-05
    CPU time for cycle= 3      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=2.66452e-05
diis-c [-9.74988340e-12  4.69029740e-05 -1.38046510e-02  1.01375775e+00]
  HOMO = -0.234987052198752  LUMO = 196.418032903659
  mo_energy =
[-1.19699724e+02 -1.22371099e+01 -6.64192555e+00 -6.64192555e+00
 -6.64192555e+00 -1.16201125e+00 -2.34987052e-01 -2.34987052e-01
 -2.34987052e-01  1.96418033e+02  2.17914331e+03  1.28004180e+04]
E1 = -705.5952278540387  E_coul = 199.0680311269265
cycle= 4 E= -506.527196727112  delta_E= -6.82e-13  |g|= 2.36e-08  |ddm|= 2.23e-07
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -705.5952278540387  E_coul = 199.0680311269265
  HOMO = -0.234987051932449  LUMO = 196.418032937976
  mo_energy =
[-1.19699724e+02 -1.22371099e+01 -6.64192554e+00 -6.64192554e+00
 -6.64192554e+00 -1.16201125e+00 -2.34987052e-01 -2.34987052e-01
 -2.34987052e-01  1.96418033e+02  2.17914331e+03  1.28004180e+04]
E1 = -705.5952278548643  E_coul = 199.0680311277519
Extra cycle  E= -506.527196727112  delta_E= -1.71e-13  |g|= 1.77e-10  |ddm|= 2.57e-10
    CPU time for scf_cycle      0.09 sec, wall time      0.10 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 16.934108037782394
E1 = -705.5952278548643  E_coul = 199.0680311277519
init E= -506.527196727112
    CPU time for initialize scf      0.05 sec, wall time      0.05 sec
  HOMO = -0.234987051930592  LUMO = 196.418032938218
  mo_energy =
[-1.19699724e+02 -1.22371099e+01 -6.64192554e+00 -6.64192554e+00
 -6.64192554e+00 -1.16201125e+00 -2.34987052e-01 -2.34987052e-01
 -2.34987052e-01  1.96418033e+02  2.17914331e+03  1.28004180e+04]
E1 = -705.5952278548704  E_coul = 199.06803112775793
cycle= 1 E= -506.527196727112  delta_E=    0  |g|= 4.25e-12  |ddm|= 1.92e-12
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -705.5952278548704  E_coul = 199.06803112775793
  HOMO = -0.234987051930578  LUMO = 196.41803293822
  mo_energy =
[-1.19699724e+02 -1.22371099e+01 -6.64192554e+00 -6.64192554e+00
 -6.64192554e+00 -1.16201125e+00 -2.34987052e-01 -2.34987052e-01
 -2.34987052e-01  1.96418033e+02  2.17914331e+03  1.28004180e+04]
E1 = -705.5952278548704  E_coul = 199.06803112775796
Extra cycle  E= -506.527196727112  delta_E= 5.68e-14  |g|= 1.51e-12  |ddm|= 1.09e-14
    CPU time for scf_cycle      0.12 sec, wall time      0.12 sec
exp = [6.29463575e+03 1.56908112e+03 2.53108249e+02 5.40622373e+01
 4.73608336e+00 3.94545506e-01 8.58621605e+00 4.90147909e-01]
grad_E = [-8.44530715e-05  1.17126961e-03  3.66202528e-04 -8.72420743e-06
 -3.00034951e-04  3.62652630e-04 -1.35398944e-04  1.54744535e-03]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((8, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([1.5735952963858392e+03,2.3761303919145971e+02,5.2332977870138201e+01,4.7281081235122091e+00,3.9325830426169639e-01,8.5907170030661746e+00,4.9039633283239870e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "6s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:46:41 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  6294.63470402        1
[INPUT] 0    0    [1    /1   ]  1569.10007565        1
[INPUT] 0    0    [1    /1   ]  253.037902847        1
[INPUT] 0    0    [1    /1   ]  54.0546836955        1
[INPUT] 0    0    [1    /1   ]  4.73622024183        1
[INPUT] 0    0    [1    /1   ]  0.394536702676       1
[INPUT] 1    0    [1    /1   ]  8.58627823435        1
[INPUT] 1    0    [1    /1   ]  0.490135552679       1

nuclear repulsion = 0
number of shells = 8
number of NR pGTOs = 12
number of NR cGTOs = 12
basis = {'Ar': [[0, [6294.634704018723, 1.0]], [0, [1569.1000756549106, 1.0]], [0, [253.03790284709603, 1.0]], [0, [54.05468369548087, 1.0]], [0, [4.736220241826203, 1.0]], [0, [0.3945367026759832, 1.0]], [1, [8.586278234350056, 1.0]], [1, [0.4901355526787473, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [6294.63470402]
bas 1, expnt(s) = [1569.10007565]
bas 2, expnt(s) = [253.03790285]
bas 3, expnt(s) = [54.0546837]
bas 4, expnt(s) = [4.73622024]
bas 5, expnt(s) = [0.3945367]
bas 6, expnt(s) = [8.58627823]
bas 7, expnt(s) = [0.49013555]
CPU time:        70.40
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  1  1  1  0 36 37  0]
 [ 0  1  1  1  0 38 39  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 6.29463470e+03 1.78543039e+03 1.56910008e+03 6.29873021e+02
 2.53037903e+02 1.60289181e+02 5.40546837e+01 5.03662970e+01
 4.73622024e+00 8.11127156e+00 3.94536703e-01 1.25771020e+00
 8.58627823e+00 4.28785992e+01 4.90135553e-01 1.19640894e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.31762276766208
cond(S) = 16.93208303393015
E1 = -687.8165175115481  E_coul = 184.91274688422033
init E= -502.903770627328
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.681754631805087  LUMO = 194.943416749629
  mo_energy =
[-1.21102828e+02 -1.32761126e+01 -7.61987762e+00 -7.61987762e+00
 -7.61987762e+00 -1.65341264e+00 -6.81754632e-01 -6.81754632e-01
 -6.81754632e-01  1.94943417e+02  2.17757886e+03  1.27990329e+04]
E1 = -705.6037242432053  E_coul = 199.07663445930075
cycle= 1 E= -506.527089783905  delta_E= -3.62  |g|= 0.257  |ddm|= 0.294
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.341108
diis-c [-0.11635479  1.        ]
  HOMO = -0.234980453822578  LUMO = 196.355988445886
  mo_energy =
[-1.19696925e+02 -1.22368309e+01 -6.64152248e+00 -6.64152248e+00
 -6.64152248e+00 -1.16201757e+00 -2.34980454e-01 -2.34980454e-01
 -2.34980454e-01  1.96355988e+02  2.17891884e+03  1.28002155e+04]
E1 = -705.5949842330142  E_coul = 199.0677849672299
cycle= 2 E= -506.527199265784  delta_E= -0.000109  |g|= 0.00207  |ddm|= 0.00359
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00221218
diis-c [-3.79241208e-06 -3.08610207e-03  1.00308610e+00]
  HOMO = -0.235017927008694  LUMO = 196.354249317793
  mo_energy =
[-1.19699715e+02 -1.22371114e+01 -6.64193599e+00 -6.64193599e+00
 -6.64193599e+00 -1.16203304e+00 -2.35017927e-01 -2.35017927e-01
 -2.35017927e-01  1.96354249e+02  2.17891303e+03  1.28002075e+04]
E1 = -705.5949189260679  E_coul = 199.06771965066082
cycle= 3 E= -506.527199275407  delta_E= -9.62e-09  |g|= 1.91e-05  |ddm|= 2.99e-05
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=2.66624e-05
diis-c [-9.74019152e-12  4.69295674e-05 -1.38091531e-02  1.01376222e+00]
  HOMO = -0.235018096606356  LUMO = 196.354245428354
  mo_energy =
[-1.19699725e+02 -1.22371127e+01 -6.64193832e+00 -6.64193832e+00
 -6.64193832e+00 -1.16203308e+00 -2.35018097e-01 -2.35018097e-01
 -2.35018097e-01  1.96354245e+02  2.17891303e+03  1.28002075e+04]
E1 = -705.5949185580189  E_coul = 199.06771928261054
cycle= 4 E= -506.527199275408  delta_E= -1.31e-12  |g|= 2.36e-08  |ddm|= 2.23e-07
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -705.5949185580189  E_coul = 199.06771928261054
  HOMO = -0.235018096339839  LUMO = 196.354245462674
  mo_energy =
[-1.19699725e+02 -1.22371127e+01 -6.64193832e+00 -6.64193832e+00
 -6.64193832e+00 -1.16203308e+00 -2.35018096e-01 -2.35018096e-01
 -2.35018096e-01  1.96354245e+02  2.17891303e+03  1.28002075e+04]
E1 = -705.5949185588447  E_coul = 199.06771928343642
Extra cycle  E= -506.527199275408  delta_E= 5.68e-14  |g|= 1.77e-10  |ddm|= 2.57e-10
    CPU time for scf_cycle      0.10 sec, wall time      0.11 sec
exp = [6.29463470e+03 1.56910008e+03 2.53037903e+02 5.40546837e+01
 4.73622024e+00 3.94536703e-01 8.58627823e+00 4.90135553e-01]
E = -506.5271992754083
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((8, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([1.5735952963858392e+03,2.3761303919145971e+02,5.2332977870138201e+01,4.7281081235122091e+00,3.9325830426169639e-01,8.5907170030661746e+00,4.9039633283239870e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "6s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:46:41 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  6294.63470402        1
[INPUT] 0    0    [1    /1   ]  1569.10007565        1
[INPUT] 0    0    [1    /1   ]  253.037902847        1
[INPUT] 0    0    [1    /1   ]  54.0546836955        1
[INPUT] 0    0    [1    /1   ]  4.73622024183        1
[INPUT] 0    0    [1    /1   ]  0.394536702676       1
[INPUT] 1    0    [1    /1   ]  8.58627823435        1
[INPUT] 1    0    [1    /1   ]  0.490135552679       1

nuclear repulsion = 0
number of shells = 8
number of NR pGTOs = 12
number of NR cGTOs = 12
basis = {'Ar': [[0, [6294.634704018723, 1.0]], [0, [1569.1000756549106, 1.0]], [0, [253.03790284709603, 1.0]], [0, [54.05468369548087, 1.0]], [0, [4.736220241826203, 1.0]], [0, [0.3945367026759832, 1.0]], [1, [8.586278234350056, 1.0]], [1, [0.4901355526787473, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [6294.63470402]
bas 1, expnt(s) = [1569.10007565]
bas 2, expnt(s) = [253.03790285]
bas 3, expnt(s) = [54.0546837]
bas 4, expnt(s) = [4.73622024]
bas 5, expnt(s) = [0.3945367]
bas 6, expnt(s) = [8.58627823]
bas 7, expnt(s) = [0.49013555]
CPU time:        70.86
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  1  1  1  0 36 37  0]
 [ 0  1  1  1  0 38 39  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 6.29463470e+03 1.78543039e+03 1.56910008e+03 6.29873021e+02
 2.53037903e+02 1.60289181e+02 5.40546837e+01 5.03662970e+01
 4.73622024e+00 8.11127156e+00 3.94536703e-01 1.25771020e+00
 8.58627823e+00 4.28785992e+01 4.90135553e-01 1.19640894e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.31762276766208
cond(S) = 16.93208303393015
E1 = -687.8165175115481  E_coul = 184.91274688422033
init E= -502.903770627328
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.681754631805087  LUMO = 194.943416749629
  mo_energy =
[-1.21102828e+02 -1.32761126e+01 -7.61987762e+00 -7.61987762e+00
 -7.61987762e+00 -1.65341264e+00 -6.81754632e-01 -6.81754632e-01
 -6.81754632e-01  1.94943417e+02  2.17757886e+03  1.27990329e+04]
E1 = -705.6037242432053  E_coul = 199.07663445930075
cycle= 1 E= -506.527089783905  delta_E= -3.62  |g|= 0.257  |ddm|= 0.294
    CPU time for cycle= 1      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.341108
diis-c [-0.11635479  1.        ]
  HOMO = -0.234980453822578  LUMO = 196.355988445886
  mo_energy =
[-1.19696925e+02 -1.22368309e+01 -6.64152248e+00 -6.64152248e+00
 -6.64152248e+00 -1.16201757e+00 -2.34980454e-01 -2.34980454e-01
 -2.34980454e-01  1.96355988e+02  2.17891884e+03  1.28002155e+04]
E1 = -705.5949842330142  E_coul = 199.0677849672299
cycle= 2 E= -506.527199265784  delta_E= -0.000109  |g|= 0.00207  |ddm|= 0.00359
    CPU time for cycle= 2      0.02 sec, wall time      0.03 sec
diis-norm(errvec)=0.00221218
diis-c [-3.79241208e-06 -3.08610207e-03  1.00308610e+00]
  HOMO = -0.235017927008694  LUMO = 196.354249317793
  mo_energy =
[-1.19699715e+02 -1.22371114e+01 -6.64193599e+00 -6.64193599e+00
 -6.64193599e+00 -1.16203304e+00 -2.35017927e-01 -2.35017927e-01
 -2.35017927e-01  1.96354249e+02  2.17891303e+03  1.28002075e+04]
E1 = -705.5949189260679  E_coul = 199.06771965066082
cycle= 3 E= -506.527199275407  delta_E= -9.62e-09  |g|= 1.91e-05  |ddm|= 2.99e-05
    CPU time for cycle= 3      0.02 sec, wall time      0.03 sec
diis-norm(errvec)=2.66624e-05
diis-c [-9.74019152e-12  4.69295674e-05 -1.38091531e-02  1.01376222e+00]
  HOMO = -0.235018096606356  LUMO = 196.354245428354
  mo_energy =
[-1.19699725e+02 -1.22371127e+01 -6.64193832e+00 -6.64193832e+00
 -6.64193832e+00 -1.16203308e+00 -2.35018097e-01 -2.35018097e-01
 -2.35018097e-01  1.96354245e+02  2.17891303e+03  1.28002075e+04]
E1 = -705.5949185580189  E_coul = 199.06771928261054
cycle= 4 E= -506.527199275408  delta_E= -1.31e-12  |g|= 2.36e-08  |ddm|= 2.23e-07
    CPU time for cycle= 4      0.02 sec, wall time      0.03 sec
E1 = -705.5949185580189  E_coul = 199.06771928261054
  HOMO = -0.235018096339839  LUMO = 196.354245462674
  mo_energy =
[-1.19699725e+02 -1.22371127e+01 -6.64193832e+00 -6.64193832e+00
 -6.64193832e+00 -1.16203308e+00 -2.35018096e-01 -2.35018096e-01
 -2.35018096e-01  1.96354245e+02  2.17891303e+03  1.28002075e+04]
E1 = -705.5949185588447  E_coul = 199.06771928343642
Extra cycle  E= -506.527199275408  delta_E= 5.68e-14  |g|= 1.77e-10  |ddm|= 2.57e-10
    CPU time for scf_cycle      0.12 sec, wall time      0.14 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 16.93208303393015
E1 = -705.5949185588447  E_coul = 199.06771928343642
init E= -506.527199275408
    CPU time for initialize scf      0.05 sec, wall time      0.05 sec
  HOMO = -0.235018096337983  LUMO = 196.354245462917
  mo_energy =
[-1.19699725e+02 -1.22371127e+01 -6.64193832e+00 -6.64193832e+00
 -6.64193832e+00 -1.16203308e+00 -2.35018096e-01 -2.35018096e-01
 -2.35018096e-01  1.96354245e+02  2.17891303e+03  1.28002075e+04]
E1 = -705.5949185588505  E_coul = 199.06771928344244
cycle= 1 E= -506.527199275408  delta_E= 2.27e-13  |g|= 2.27e-12  |ddm|= 1.91e-12
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -705.5949185588505  E_coul = 199.06771928344244
  HOMO = -0.235018096337969  LUMO = 196.354245462918
  mo_energy =
[-1.19699725e+02 -1.22371127e+01 -6.64193832e+00 -6.64193832e+00
 -6.64193832e+00 -1.16203308e+00 -2.35018096e-01 -2.35018096e-01
 -2.35018096e-01  1.96354245e+02  2.17891303e+03  1.28002075e+04]
E1 = -705.5949185588502  E_coul = 199.0677192834424
Extra cycle  E= -506.527199275408  delta_E= 2.84e-13  |g|= 2.13e-12  |ddm|= 2.69e-14
    CPU time for scf_cycle      0.13 sec, wall time      0.13 sec
exp = [6.29463470e+03 1.56910008e+03 2.53037903e+02 5.40546837e+01
 4.73622024e+00 3.94536703e-01 8.58627823e+00 4.90135553e-01]
grad_E = [-8.44828831e-05  1.17319693e-03  3.35323917e-04  4.30033689e-05
 -1.73501370e-04  2.29047850e-04 -6.99981373e-05  1.01827797e-03]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((8, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([1.5735952963858392e+03,2.3761303919145971e+02,5.2332977870138201e+01,4.7281081235122091e+00,3.9325830426169639e-01,8.5907170030661746e+00,4.9039633283239870e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "6s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:46:44 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  6294.63397329        1
[INPUT] 0    0    [1    /1   ]  1569.11397188        1
[INPUT] 0    0    [1    /1   ]  252.977535397        1
[INPUT] 0    0    [1    /1   ]  54.0486273423        1
[INPUT] 0    0    [1    /1   ]  4.73643778719        1
[INPUT] 0    0    [1    /1   ]  0.394524112163       1
[INPUT] 1    0    [1    /1   ]  8.58635233513        1
[INPUT] 1    0    [1    /1   ]  0.490111220511       1

nuclear repulsion = 0
number of shells = 8
number of NR pGTOs = 12
number of NR cGTOs = 12
basis = {'Ar': [[0, [6294.633973288271, 1.0]], [0, [1569.1139718837242, 1.0]], [0, [252.97753539675358, 1.0]], [0, [54.048627342307796, 1.0]], [0, [4.736437787185828, 1.0]], [0, [0.3945241121630117, 1.0]], [1, [8.586352335126321, 1.0]], [1, [0.49011122051106193, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [6294.63397329]
bas 1, expnt(s) = [1569.11397188]
bas 2, expnt(s) = [252.9775354]
bas 3, expnt(s) = [54.04862734]
bas 4, expnt(s) = [4.73643779]
bas 5, expnt(s) = [0.39452411]
bas 6, expnt(s) = [8.58635234]
bas 7, expnt(s) = [0.49011122]
CPU time:        73.97
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  1  1  1  0 36 37  0]
 [ 0  1  1  1  0 38 39  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 6.29463397e+03 1.78543024e+03 1.56911397e+03 6.29877205e+02
 2.52977535e+02 1.60260500e+02 5.40486273e+01 5.03620646e+01
 4.73643779e+00 8.11155098e+00 3.94524112e-01 1.25768010e+00
 8.58635234e+00 4.28790618e+01 4.90111221e-01 1.19633470e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.317653637663344
cond(S) = 16.930457692995333
E1 = -687.8159412934702  E_coul = 184.91237883102423
init E= -502.903562462446
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.681788926772501  LUMO = 194.890293068812
  mo_energy =
[-1.21102824e+02 -1.32761302e+01 -7.61989026e+00 -7.61989026e+00
 -7.61989026e+00 -1.65343732e+00 -6.81788927e-01 -6.81788927e-01
 -6.81788927e-01  1.94890293e+02  2.17738087e+03  1.27988471e+04]
E1 = -705.6030577655631  E_coul = 199.07596453342563
cycle= 1 E= -506.527093232137  delta_E= -3.62  |g|= 0.257  |ddm|= 0.294
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.341238
diis-c [-0.11644319  1.        ]
  HOMO = -0.235038929525668  LUMO = 196.302852417485
  mo_energy =
[-1.19696909e+02 -1.22368705e+01 -6.64155372e+00 -6.64155372e+00
 -6.64155372e+00 -1.16206140e+00 -2.35038930e-01 -2.35038930e-01
 -2.35038930e-01  1.96302852e+02  2.17872086e+03  1.28000297e+04]
E1 = -705.5943152507643  E_coul = 199.06711250221178
cycle= 2 E= -506.527202748553  delta_E= -0.00011  |g|= 0.00207  |ddm|= 0.00359
    CPU time for cycle= 2      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.00221269
diis-c [-3.79382838e-06 -3.08610149e-03  1.00308610e+00]
  HOMO = -0.235076415790942  LUMO = 196.301113273029
  mo_energy =
[-1.19699699e+02 -1.22371511e+01 -6.64196740e+00 -6.64196740e+00
 -6.64196740e+00 -1.16207687e+00 -2.35076416e-01 -2.35076416e-01
 -2.35076416e-01  1.96301113e+02  2.17871505e+03  1.28000217e+04]
E1 = -705.5942499099214  E_coul = 199.06704715173814
cycle= 3 E= -506.527202758183  delta_E= -9.63e-09  |g|= 1.91e-05  |ddm|= 2.99e-05
    CPU time for cycle= 3      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=2.6675e-05
diis-c [-9.72901221e-12  4.69541559e-05 -1.38132461e-02  1.01376629e+00]
  HOMO = -0.23507658550751  LUMO = 196.301109381463
  mo_energy =
[-1.19699710e+02 -1.22371524e+01 -6.64196974e+00 -6.64196974e+00
 -6.64196974e+00 -1.16207692e+00 -2.35076586e-01 -2.35076586e-01
 -2.35076586e-01  1.96301109e+02  2.17871505e+03  1.28000217e+04]
E1 = -705.594249541511  E_coul = 199.06704678332702
cycle= 4 E= -506.527202758184  delta_E= -7.96e-13  |g|= 2.36e-08  |ddm|= 2.24e-07
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -705.594249541511  E_coul = 199.06704678332702
  HOMO = -0.235076585240882  LUMO = 196.301109415782
  mo_energy =
[-1.19699710e+02 -1.22371524e+01 -6.64196973e+00 -6.64196973e+00
 -6.64196973e+00 -1.16207692e+00 -2.35076585e-01 -2.35076585e-01
 -2.35076585e-01  1.96301109e+02  2.17871505e+03  1.28000217e+04]
E1 = -705.5942495423371  E_coul = 199.0670467841534
Extra cycle  E= -506.527202758184  delta_E= 2.27e-13  |g|= 1.78e-10  |ddm|= 2.57e-10
    CPU time for scf_cycle      0.09 sec, wall time      0.10 sec
exp = [6.29463397e+03 1.56911397e+03 2.52977535e+02 5.40486273e+01
 4.73643779e+00 3.94524112e-01 8.58635234e+00 4.90111221e-01]
E = -506.52720275818376
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((8, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([1.5735952963858392e+03,2.3761303919145971e+02,5.2332977870138201e+01,4.7281081235122091e+00,3.9325830426169639e-01,8.5907170030661746e+00,4.9039633283239870e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "6s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:46:45 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  6294.63397329        1
[INPUT] 0    0    [1    /1   ]  1569.11397188        1
[INPUT] 0    0    [1    /1   ]  252.977535397        1
[INPUT] 0    0    [1    /1   ]  54.0486273423        1
[INPUT] 0    0    [1    /1   ]  4.73643778719        1
[INPUT] 0    0    [1    /1   ]  0.394524112163       1
[INPUT] 1    0    [1    /1   ]  8.58635233513        1
[INPUT] 1    0    [1    /1   ]  0.490111220511       1

nuclear repulsion = 0
number of shells = 8
number of NR pGTOs = 12
number of NR cGTOs = 12
basis = {'Ar': [[0, [6294.633973288271, 1.0]], [0, [1569.1139718837242, 1.0]], [0, [252.97753539675358, 1.0]], [0, [54.048627342307796, 1.0]], [0, [4.736437787185828, 1.0]], [0, [0.3945241121630117, 1.0]], [1, [8.586352335126321, 1.0]], [1, [0.49011122051106193, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [6294.63397329]
bas 1, expnt(s) = [1569.11397188]
bas 2, expnt(s) = [252.9775354]
bas 3, expnt(s) = [54.04862734]
bas 4, expnt(s) = [4.73643779]
bas 5, expnt(s) = [0.39452411]
bas 6, expnt(s) = [8.58635234]
bas 7, expnt(s) = [0.49011122]
CPU time:        74.41
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  1  1  1  0 36 37  0]
 [ 0  1  1  1  0 38 39  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 6.29463397e+03 1.78543024e+03 1.56911397e+03 6.29877205e+02
 2.52977535e+02 1.60260500e+02 5.40486273e+01 5.03620646e+01
 4.73643779e+00 8.11155098e+00 3.94524112e-01 1.25768010e+00
 8.58635234e+00 4.28790618e+01 4.90111221e-01 1.19633470e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.317653637663344
cond(S) = 16.930457692995333
E1 = -687.8159412934702  E_coul = 184.91237883102423
init E= -502.903562462446
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.681788926772501  LUMO = 194.890293068812
  mo_energy =
[-1.21102824e+02 -1.32761302e+01 -7.61989026e+00 -7.61989026e+00
 -7.61989026e+00 -1.65343732e+00 -6.81788927e-01 -6.81788927e-01
 -6.81788927e-01  1.94890293e+02  2.17738087e+03  1.27988471e+04]
E1 = -705.6030577655631  E_coul = 199.07596453342563
cycle= 1 E= -506.527093232137  delta_E= -3.62  |g|= 0.257  |ddm|= 0.294
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.341238
diis-c [-0.11644319  1.        ]
  HOMO = -0.235038929525668  LUMO = 196.302852417485
  mo_energy =
[-1.19696909e+02 -1.22368705e+01 -6.64155372e+00 -6.64155372e+00
 -6.64155372e+00 -1.16206140e+00 -2.35038930e-01 -2.35038930e-01
 -2.35038930e-01  1.96302852e+02  2.17872086e+03  1.28000297e+04]
E1 = -705.5943152507643  E_coul = 199.06711250221178
cycle= 2 E= -506.527202748553  delta_E= -0.00011  |g|= 0.00207  |ddm|= 0.00359
    CPU time for cycle= 2      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.00221269
diis-c [-3.79382838e-06 -3.08610149e-03  1.00308610e+00]
  HOMO = -0.235076415790942  LUMO = 196.301113273029
  mo_energy =
[-1.19699699e+02 -1.22371511e+01 -6.64196740e+00 -6.64196740e+00
 -6.64196740e+00 -1.16207687e+00 -2.35076416e-01 -2.35076416e-01
 -2.35076416e-01  1.96301113e+02  2.17871505e+03  1.28000217e+04]
E1 = -705.5942499099214  E_coul = 199.06704715173814
cycle= 3 E= -506.527202758183  delta_E= -9.63e-09  |g|= 1.91e-05  |ddm|= 2.99e-05
    CPU time for cycle= 3      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=2.6675e-05
diis-c [-9.72901221e-12  4.69541559e-05 -1.38132461e-02  1.01376629e+00]
  HOMO = -0.23507658550751  LUMO = 196.301109381463
  mo_energy =
[-1.19699710e+02 -1.22371524e+01 -6.64196974e+00 -6.64196974e+00
 -6.64196974e+00 -1.16207692e+00 -2.35076586e-01 -2.35076586e-01
 -2.35076586e-01  1.96301109e+02  2.17871505e+03  1.28000217e+04]
E1 = -705.594249541511  E_coul = 199.06704678332702
cycle= 4 E= -506.527202758184  delta_E= -7.96e-13  |g|= 2.36e-08  |ddm|= 2.24e-07
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -705.594249541511  E_coul = 199.06704678332702
  HOMO = -0.235076585240882  LUMO = 196.301109415782
  mo_energy =
[-1.19699710e+02 -1.22371524e+01 -6.64196973e+00 -6.64196973e+00
 -6.64196973e+00 -1.16207692e+00 -2.35076585e-01 -2.35076585e-01
 -2.35076585e-01  1.96301109e+02  2.17871505e+03  1.28000217e+04]
E1 = -705.5942495423371  E_coul = 199.0670467841534
Extra cycle  E= -506.527202758184  delta_E= 2.27e-13  |g|= 1.78e-10  |ddm|= 2.57e-10
    CPU time for scf_cycle      0.09 sec, wall time      0.10 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 16.930457692995333
E1 = -705.5942495423371  E_coul = 199.0670467841534
init E= -506.527202758184
    CPU time for initialize scf      0.05 sec, wall time      0.05 sec
  HOMO = -0.235076585239027  LUMO = 196.301109416025
  mo_energy =
[-1.19699710e+02 -1.22371524e+01 -6.64196973e+00 -6.64196973e+00
 -6.64196973e+00 -1.16207692e+00 -2.35076585e-01 -2.35076585e-01
 -2.35076585e-01  1.96301109e+02  2.17871505e+03  1.28000217e+04]
E1 = -705.5942495423437  E_coul = 199.06704678415963
cycle= 1 E= -506.527202758184  delta_E= -3.41e-13  |g|= 1.42e-12  |ddm|= 1.91e-12
    CPU time for cycle= 1      0.01 sec, wall time      0.02 sec
E1 = -705.5942495423437  E_coul = 199.06704678415963
  HOMO = -0.235076585239009  LUMO = 196.301109416027
  mo_energy =
[-1.19699710e+02 -1.22371524e+01 -6.64196973e+00 -6.64196973e+00
 -6.64196973e+00 -1.16207692e+00 -2.35076585e-01 -2.35076585e-01
 -2.35076585e-01  1.96301109e+02  2.17871505e+03  1.28000217e+04]
E1 = -705.5942495423435  E_coul = 199.0670467841595
Extra cycle  E= -506.527202758184  delta_E= 1.14e-13  |g|= 7.94e-13  |ddm|= 9.24e-15
    CPU time for scf_cycle      0.12 sec, wall time      0.13 sec
exp = [6.29463397e+03 1.56911397e+03 2.52977535e+02 5.40486273e+01
 4.73643779e+00 3.94524112e-01 8.58635234e+00 4.90111221e-01]
grad_E = [-8.45090565e-05  1.17488216e-03  3.07340359e-04  9.88327733e-05
  2.88573527e-05 -1.23241470e-05  2.43610561e-05  3.40399602e-05]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((8, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([1.5735952963858392e+03,2.3761303919145971e+02,5.2332977870138201e+01,4.7281081235122091e+00,3.9325830426169639e-01,8.5907170030661746e+00,4.9039633283239870e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "6s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:46:48 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  6294.63307017        1
[INPUT] 0    0    [1    /1   ]  1569.13349748        1
[INPUT] 0    0    [1    /1   ]  252.863223922        1
[INPUT] 0    0    [1    /1   ]  54.0373369141        1
[INPUT] 0    0    [1    /1   ]  4.73687158959        1
[INPUT] 0    0    [1    /1   ]  0.394499531415       1
[INPUT] 1    0    [1    /1   ]  8.58649584051        1
[INPUT] 1    0    [1    /1   ]  0.490062822706       1

nuclear repulsion = 0
number of shells = 8
number of NR pGTOs = 12
number of NR cGTOs = 12
basis = {'Ar': [[0, [6294.633070167687, 1.0]], [0, [1569.1334974782771, 1.0]], [0, [252.8632239218819, 1.0]], [0, [54.03733691405951, 1.0]], [0, [4.736871589592149, 1.0]], [0, [0.39449953141500965, 1.0]], [1, [8.58649584050626, 1.0]], [1, [0.4900628227056889, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [6294.63307017]
bas 1, expnt(s) = [1569.13349748]
bas 2, expnt(s) = [252.86322392]
bas 3, expnt(s) = [54.03733691]
bas 4, expnt(s) = [4.73687159]
bas 5, expnt(s) = [0.39449953]
bas 6, expnt(s) = [8.58649584]
bas 7, expnt(s) = [0.49006282]
CPU time:        77.53
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  1  1  1  0 36 37  0]
 [ 0  1  1  1  0 38 39  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 6.29463307e+03 1.78543004e+03 1.56913350e+03 6.29883083e+02
 2.52863224e+02 1.60206184e+02 5.40373369e+01 5.03541742e+01
 4.73687159e+00 8.11210817e+00 3.94499531e-01 1.25762133e+00
 8.58649584e+00 4.28799576e+01 4.90062823e-01 1.19618703e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.31771468044174
cond(S) = 16.927427664316394
E1 = -687.8147972516733  E_coul = 184.91164467907834
init E= -502.903152572595
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.681857010254462  LUMO = 194.790304896693
  mo_energy =
[-1.21102814e+02 -1.32761687e+01 -7.61991547e+00 -7.61991547e+00
 -7.61991547e+00 -1.65348700e+00 -6.81857010e-01 -6.81857010e-01
 -6.81857010e-01  1.94790305e+02  2.17700035e+03  1.27984763e+04]
E1 = -705.6017541863843  E_coul = 199.07465041857535
cycle= 1 E= -506.527103767809  delta_E= -3.62  |g|= 0.257  |ddm|= 0.294
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.341487
diis-c [-0.11661325  1.        ]
  HOMO = -0.235154832362235  LUMO = 196.202845014729
  mo_energy =
[-1.19696872e+02 -1.22369515e+01 -6.64161485e+00 -6.64161485e+00
 -6.64161485e+00 -1.16214863e+00 -2.35154832e-01 -2.35154832e-01
 -2.35154832e-01  1.96202845e+02  2.17834038e+03  1.27996588e+04]
E1 = -705.5930070964552  E_coul = 199.06579375005794
cycle= 2 E= -506.527213346397  delta_E= -0.00011  |g|= 0.00207  |ddm|= 0.00359
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00221362
diis-c [-3.79634796e-06 -3.08610664e-03  1.00308611e+00]
  HOMO = -0.235192342483367  LUMO = 196.201105876932
  mo_energy =
[-1.19699663e+02 -1.22372323e+01 -6.64202884e+00 -6.64202884e+00
 -6.64202884e+00 -1.16216411e+00 -2.35192342e-01 -2.35192342e-01
 -2.35192342e-01  1.96201106e+02  2.17833458e+03  1.27996508e+04]
E1 = -705.5929416927371  E_coul = 199.06572833669634
cycle= 3 E= -506.527213356041  delta_E= -9.64e-09  |g|= 1.91e-05  |ddm|= 2.99e-05
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=2.66983e-05
diis-c [-9.70703046e-12  4.70013875e-05 -1.38210354e-02  1.01377403e+00]
  HOMO = -0.235192512420078  LUMO = 196.20110198145
  mo_energy =
[-1.19699674e+02 -1.22372336e+01 -6.64203118e+00 -6.64203118e+00
 -6.64203118e+00 -1.16216416e+00 -2.35192512e-01 -2.35192512e-01
 -2.35192512e-01  1.96201102e+02  2.17833457e+03  1.27996508e+04]
E1 = -705.5929413236526  E_coul = 199.06572796761068
cycle= 4 E= -506.527213356042  delta_E= -1.14e-12  |g|= 2.36e-08  |ddm|= 2.24e-07
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -705.5929413236526  E_coul = 199.06572796761068
  HOMO = -0.235192512153244  LUMO = 196.201102015766
  mo_energy =
[-1.19699674e+02 -1.22372336e+01 -6.64203117e+00 -6.64203117e+00
 -6.64203117e+00 -1.16216416e+00 -2.35192512e-01 -2.35192512e-01
 -2.35192512e-01  1.96201102e+02  2.17833457e+03  1.27996508e+04]
E1 = -705.5929413244801  E_coul = 199.06572796843813
Extra cycle  E= -506.527213356042  delta_E= -5.68e-14  |g|= 1.76e-10  |ddm|= 2.58e-10
    CPU time for scf_cycle      0.10 sec, wall time      0.10 sec
exp = [6.29463307e+03 1.56913350e+03 2.52863224e+02 5.40373369e+01
 4.73687159e+00 3.94499531e-01 8.58649584e+00 4.90062823e-01]
E = -506.52721335604195
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((8, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([1.5735952963858392e+03,2.3761303919145971e+02,5.2332977870138201e+01,4.7281081235122091e+00,3.9325830426169639e-01,8.5907170030661746e+00,4.9039633283239870e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "6s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:46:48 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  6294.63307017        1
[INPUT] 0    0    [1    /1   ]  1569.13349748        1
[INPUT] 0    0    [1    /1   ]  252.863223922        1
[INPUT] 0    0    [1    /1   ]  54.0373369141        1
[INPUT] 0    0    [1    /1   ]  4.73687158959        1
[INPUT] 0    0    [1    /1   ]  0.394499531415       1
[INPUT] 1    0    [1    /1   ]  8.58649584051        1
[INPUT] 1    0    [1    /1   ]  0.490062822706       1

nuclear repulsion = 0
number of shells = 8
number of NR pGTOs = 12
number of NR cGTOs = 12
basis = {'Ar': [[0, [6294.633070167687, 1.0]], [0, [1569.1334974782771, 1.0]], [0, [252.8632239218819, 1.0]], [0, [54.03733691405951, 1.0]], [0, [4.736871589592149, 1.0]], [0, [0.39449953141500965, 1.0]], [1, [8.58649584050626, 1.0]], [1, [0.4900628227056889, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [6294.63307017]
bas 1, expnt(s) = [1569.13349748]
bas 2, expnt(s) = [252.86322392]
bas 3, expnt(s) = [54.03733691]
bas 4, expnt(s) = [4.73687159]
bas 5, expnt(s) = [0.39449953]
bas 6, expnt(s) = [8.58649584]
bas 7, expnt(s) = [0.49006282]
CPU time:        78.01
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  1  1  1  0 36 37  0]
 [ 0  1  1  1  0 38 39  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 6.29463307e+03 1.78543004e+03 1.56913350e+03 6.29883083e+02
 2.52863224e+02 1.60206184e+02 5.40373369e+01 5.03541742e+01
 4.73687159e+00 8.11210817e+00 3.94499531e-01 1.25762133e+00
 8.58649584e+00 4.28799576e+01 4.90062823e-01 1.19618703e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.31771468044174
cond(S) = 16.927427664316394
E1 = -687.8147972516733  E_coul = 184.91164467907834
init E= -502.903152572595
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.681857010254462  LUMO = 194.790304896693
  mo_energy =
[-1.21102814e+02 -1.32761687e+01 -7.61991547e+00 -7.61991547e+00
 -7.61991547e+00 -1.65348700e+00 -6.81857010e-01 -6.81857010e-01
 -6.81857010e-01  1.94790305e+02  2.17700035e+03  1.27984763e+04]
E1 = -705.6017541863843  E_coul = 199.07465041857535
cycle= 1 E= -506.527103767809  delta_E= -3.62  |g|= 0.257  |ddm|= 0.294
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.341487
diis-c [-0.11661325  1.        ]
  HOMO = -0.235154832362235  LUMO = 196.202845014729
  mo_energy =
[-1.19696872e+02 -1.22369515e+01 -6.64161485e+00 -6.64161485e+00
 -6.64161485e+00 -1.16214863e+00 -2.35154832e-01 -2.35154832e-01
 -2.35154832e-01  1.96202845e+02  2.17834038e+03  1.27996588e+04]
E1 = -705.5930070964552  E_coul = 199.06579375005794
cycle= 2 E= -506.527213346397  delta_E= -0.00011  |g|= 0.00207  |ddm|= 0.00359
    CPU time for cycle= 2      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.00221362
diis-c [-3.79634796e-06 -3.08610664e-03  1.00308611e+00]
  HOMO = -0.235192342483367  LUMO = 196.201105876932
  mo_energy =
[-1.19699663e+02 -1.22372323e+01 -6.64202884e+00 -6.64202884e+00
 -6.64202884e+00 -1.16216411e+00 -2.35192342e-01 -2.35192342e-01
 -2.35192342e-01  1.96201106e+02  2.17833458e+03  1.27996508e+04]
E1 = -705.5929416927371  E_coul = 199.06572833669634
cycle= 3 E= -506.527213356041  delta_E= -9.64e-09  |g|= 1.91e-05  |ddm|= 2.99e-05
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=2.66983e-05
diis-c [-9.70703046e-12  4.70013875e-05 -1.38210354e-02  1.01377403e+00]
  HOMO = -0.235192512420078  LUMO = 196.20110198145
  mo_energy =
[-1.19699674e+02 -1.22372336e+01 -6.64203118e+00 -6.64203118e+00
 -6.64203118e+00 -1.16216416e+00 -2.35192512e-01 -2.35192512e-01
 -2.35192512e-01  1.96201102e+02  2.17833457e+03  1.27996508e+04]
E1 = -705.5929413236526  E_coul = 199.06572796761068
cycle= 4 E= -506.527213356042  delta_E= -1.14e-12  |g|= 2.36e-08  |ddm|= 2.24e-07
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -705.5929413236526  E_coul = 199.06572796761068
  HOMO = -0.235192512153244  LUMO = 196.201102015766
  mo_energy =
[-1.19699674e+02 -1.22372336e+01 -6.64203117e+00 -6.64203117e+00
 -6.64203117e+00 -1.16216416e+00 -2.35192512e-01 -2.35192512e-01
 -2.35192512e-01  1.96201102e+02  2.17833457e+03  1.27996508e+04]
E1 = -705.5929413244801  E_coul = 199.06572796843813
Extra cycle  E= -506.527213356042  delta_E= -5.68e-14  |g|= 1.76e-10  |ddm|= 2.58e-10
    CPU time for scf_cycle      0.09 sec, wall time      0.10 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 16.927427664316394
E1 = -705.5929413244801  E_coul = 199.06572796843813
init E= -506.527213356042
    CPU time for initialize scf      0.06 sec, wall time      0.06 sec
  HOMO = -0.235192512151381  LUMO = 196.201102016009
  mo_energy =
[-1.19699674e+02 -1.22372336e+01 -6.64203117e+00 -6.64203117e+00
 -6.64203117e+00 -1.16216416e+00 -2.35192512e-01 -2.35192512e-01
 -2.35192512e-01  1.96201102e+02  2.17833457e+03  1.27996508e+04]
E1 = -705.5929413244855  E_coul = 199.0657279684438
cycle= 1 E= -506.527213356042  delta_E= 2.27e-13  |g|= 3.23e-12  |ddm|= 1.92e-12
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -705.5929413244855  E_coul = 199.0657279684438
  HOMO = -0.235192512151371  LUMO = 196.201102016011
  mo_energy =
[-1.19699674e+02 -1.22372336e+01 -6.64203117e+00 -6.64203117e+00
 -6.64203117e+00 -1.16216416e+00 -2.35192512e-01 -2.35192512e-01
 -2.35192512e-01  1.96201102e+02  2.17833457e+03  1.27996508e+04]
E1 = -705.5929413244861  E_coul = 199.06572796844395
Extra cycle  E= -506.527213356042  delta_E= -3.98e-13  |g|= 1.64e-12  |ddm|= 1.14e-14
    CPU time for scf_cycle      0.12 sec, wall time      0.13 sec
exp = [6.29463307e+03 1.56913350e+03 2.52863224e+02 5.40373369e+01
 4.73687159e+00 3.94499531e-01 8.58649584e+00 4.90062823e-01]
grad_E = [-8.45586300e-05  1.17807880e-03  2.53853910e-04  2.09013092e-04
  4.32386406e-04 -4.90766345e-04  2.09891982e-04 -1.91797832e-03]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((8, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([1.5735952963858392e+03,2.3761303919145971e+02,5.2332977870138201e+01,4.7281081235122091e+00,3.9325830426169639e-01,8.5907170030661746e+00,4.9039633283239870e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "6s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:46:51 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  6294.63289064        1
[INPUT] 0    0    [1    /1   ]  1569.14639852        1
[INPUT] 0    0    [1    /1   ]  252.688222033        1
[INPUT] 0    0    [1    /1   ]  54.020117972         1
[INPUT] 0    0    [1    /1   ]  4.73753822659        1
[INPUT] 0    0    [1    /1   ]  0.394461982577       1
[INPUT] 1    0    [1    /1   ]  8.58671522669        1
[INPUT] 1    0    [1    /1   ]  0.489988714177       1

nuclear repulsion = 0
number of shells = 8
number of NR pGTOs = 12
number of NR cGTOs = 12
basis = {'Ar': [[0, [6294.632890642837, 1.0]], [0, [1569.1463985165367, 1.0]], [0, [252.68822203261357, 1.0]], [0, [54.02011797201362, 1.0]], [0, [4.737538226587565, 1.0]], [0, [0.3944619825766665, 1.0]], [1, [8.586715226688638, 1.0]], [1, [0.48998871417701195, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [6294.63289064]
bas 1, expnt(s) = [1569.14639852]
bas 2, expnt(s) = [252.68822203]
bas 3, expnt(s) = [54.02011797]
bas 4, expnt(s) = [4.73753823]
bas 5, expnt(s) = [0.39446198]
bas 6, expnt(s) = [8.58671523]
bas 7, expnt(s) = [0.48998871]
CPU time:        81.10
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  1  1  1  0 36 37  0]
 [ 0  1  1  1  0 38 39  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 6.29463289e+03 1.78543001e+03 1.56914640e+03 6.29886967e+02
 2.52688222e+02 1.60123021e+02 5.40201180e+01 5.03421397e+01
 4.73753823e+00 8.11296439e+00 3.94461983e-01 1.25753155e+00
 8.58671523e+00 4.28813271e+01 4.89988714e-01 1.19596092e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.317807973829392
cond(S) = 16.922823125460447
E1 = -687.8130522879441  E_coul = 184.9105232287594
init E= -502.902529059185
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.681961250002393  LUMO = 194.637472899426
  mo_energy =
[-1.21102803e+02 -1.32762284e+01 -7.61995378e+00 -7.61995378e+00
 -7.61995378e+00 -1.65356328e+00 -6.81961250e-01 -6.81961250e-01
 -6.81961250e-01  1.94637473e+02  2.17640230e+03  1.27978601e+04]
E1 = -705.5997793405908  E_coul = 199.072649436583
cycle= 1 E= -506.527129904008  delta_E= -3.62  |g|= 0.257  |ddm|= 0.294
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.341867
diis-c [-0.11687311  1.        ]
  HOMO = -0.235332164518942  LUMO = 196.049985179452
  mo_energy =
[-1.19696817e+02 -1.22370758e+01 -6.64170773e+00 -6.64170773e+00
 -6.64170773e+00 -1.16228221e+00 -2.35332165e-01 -2.35332165e-01
 -2.35332165e-01  1.96049985e+02  2.17774240e+03  1.27990425e+04]
E1 = -705.591025273054  E_coul = 199.06378569575392
cycle= 2 E= -506.5272395773  delta_E= -0.00011  |g|= 0.00208  |ddm|= 0.00359
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.00221505
diis-c [-3.80019614e-06 -3.08613111e-03  1.00308613e+00]
  HOMO = -0.235369711078701  LUMO = 196.048246059436
  mo_energy =
[-1.19699610e+02 -1.22373569e+01 -6.64212219e+00 -6.64212219e+00
 -6.64212219e+00 -1.16229771e+00 -2.35369711e-01 -2.35369711e-01
 -2.35369711e-01  1.96048246e+02  2.17773660e+03  1.27990344e+04]
E1 = -705.5909597732034  E_coul = 199.06372018623847
cycle= 3 E= -506.527239586965  delta_E= -9.66e-09  |g|= 1.92e-05  |ddm|= 3e-05
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=2.6734e-05
diis-c [-9.67357199e-12  4.70735529e-05 -1.38329296e-02  1.01378586e+00]
  HOMO = -0.235369881351645  LUMO = 196.048242157997
  mo_energy =
[-1.19699621e+02 -1.22373582e+01 -6.64212453e+00 -6.64212453e+00
 -6.64212453e+00 -1.16229775e+00 -2.35369881e-01 -2.35369881e-01
 -2.35369881e-01  1.96048242e+02  2.17773659e+03  1.27990344e+04]
E1 = -705.5909594030858  E_coul = 199.06371981612008
cycle= 4 E= -506.527239586966  delta_E= -7.96e-13  |g|= 2.36e-08  |ddm|= 2.25e-07
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -705.5909594030858  E_coul = 199.06371981612008
  HOMO = -0.235369881084504  LUMO = 196.048242192311
  mo_energy =
[-1.19699621e+02 -1.22373582e+01 -6.64212453e+00 -6.64212453e+00
 -6.64212453e+00 -1.16229775e+00 -2.35369881e-01 -2.35369881e-01
 -2.35369881e-01  1.96048242e+02  2.17773659e+03  1.27990344e+04]
E1 = -705.5909594039147  E_coul = 199.0637198169487
Extra cycle  E= -506.527239586966  delta_E= -2.27e-13  |g|= 1.77e-10  |ddm|= 2.58e-10
    CPU time for scf_cycle      0.09 sec, wall time      0.10 sec
exp = [6.29463289e+03 1.56914640e+03 2.52688222e+02 5.40201180e+01
 4.73753823e+00 3.94461983e-01 8.58671523e+00 4.89988714e-01]
E = -506.52723958696595
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((8, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([1.5735952963858392e+03,2.3761303919145971e+02,5.2332977870138201e+01,4.7281081235122091e+00,3.9325830426169639e-01,8.5907170030661746e+00,4.9039633283239870e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "6s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:46:52 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  6294.63289064        1
[INPUT] 0    0    [1    /1   ]  1569.14639852        1
[INPUT] 0    0    [1    /1   ]  252.688222033        1
[INPUT] 0    0    [1    /1   ]  54.020117972         1
[INPUT] 0    0    [1    /1   ]  4.73753822659        1
[INPUT] 0    0    [1    /1   ]  0.394461982577       1
[INPUT] 1    0    [1    /1   ]  8.58671522669        1
[INPUT] 1    0    [1    /1   ]  0.489988714177       1

nuclear repulsion = 0
number of shells = 8
number of NR pGTOs = 12
number of NR cGTOs = 12
basis = {'Ar': [[0, [6294.632890642837, 1.0]], [0, [1569.1463985165367, 1.0]], [0, [252.68822203261357, 1.0]], [0, [54.02011797201362, 1.0]], [0, [4.737538226587565, 1.0]], [0, [0.3944619825766665, 1.0]], [1, [8.586715226688638, 1.0]], [1, [0.48998871417701195, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [6294.63289064]
bas 1, expnt(s) = [1569.14639852]
bas 2, expnt(s) = [252.68822203]
bas 3, expnt(s) = [54.02011797]
bas 4, expnt(s) = [4.73753823]
bas 5, expnt(s) = [0.39446198]
bas 6, expnt(s) = [8.58671523]
bas 7, expnt(s) = [0.48998871]
CPU time:        81.58
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  1  1  1  0 36 37  0]
 [ 0  1  1  1  0 38 39  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 6.29463289e+03 1.78543001e+03 1.56914640e+03 6.29886967e+02
 2.52688222e+02 1.60123021e+02 5.40201180e+01 5.03421397e+01
 4.73753823e+00 8.11296439e+00 3.94461983e-01 1.25753155e+00
 8.58671523e+00 4.28813271e+01 4.89988714e-01 1.19596092e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.317807973829392
cond(S) = 16.922823125460447
E1 = -687.8130522879441  E_coul = 184.9105232287594
init E= -502.902529059185
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.681961250002393  LUMO = 194.637472899426
  mo_energy =
[-1.21102803e+02 -1.32762284e+01 -7.61995378e+00 -7.61995378e+00
 -7.61995378e+00 -1.65356328e+00 -6.81961250e-01 -6.81961250e-01
 -6.81961250e-01  1.94637473e+02  2.17640230e+03  1.27978601e+04]
E1 = -705.5997793405908  E_coul = 199.072649436583
cycle= 1 E= -506.527129904008  delta_E= -3.62  |g|= 0.257  |ddm|= 0.294
    CPU time for cycle= 1      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.341867
diis-c [-0.11687311  1.        ]
  HOMO = -0.235332164518942  LUMO = 196.049985179452
  mo_energy =
[-1.19696817e+02 -1.22370758e+01 -6.64170773e+00 -6.64170773e+00
 -6.64170773e+00 -1.16228221e+00 -2.35332165e-01 -2.35332165e-01
 -2.35332165e-01  1.96049985e+02  2.17774240e+03  1.27990425e+04]
E1 = -705.591025273054  E_coul = 199.06378569575392
cycle= 2 E= -506.5272395773  delta_E= -0.00011  |g|= 0.00208  |ddm|= 0.00359
    CPU time for cycle= 2      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.00221505
diis-c [-3.80019614e-06 -3.08613111e-03  1.00308613e+00]
  HOMO = -0.235369711078701  LUMO = 196.048246059436
  mo_energy =
[-1.19699610e+02 -1.22373569e+01 -6.64212219e+00 -6.64212219e+00
 -6.64212219e+00 -1.16229771e+00 -2.35369711e-01 -2.35369711e-01
 -2.35369711e-01  1.96048246e+02  2.17773660e+03  1.27990344e+04]
E1 = -705.5909597732034  E_coul = 199.06372018623847
cycle= 3 E= -506.527239586965  delta_E= -9.66e-09  |g|= 1.92e-05  |ddm|= 3e-05
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=2.6734e-05
diis-c [-9.67357199e-12  4.70735529e-05 -1.38329296e-02  1.01378586e+00]
  HOMO = -0.235369881351645  LUMO = 196.048242157997
  mo_energy =
[-1.19699621e+02 -1.22373582e+01 -6.64212453e+00 -6.64212453e+00
 -6.64212453e+00 -1.16229775e+00 -2.35369881e-01 -2.35369881e-01
 -2.35369881e-01  1.96048242e+02  2.17773659e+03  1.27990344e+04]
E1 = -705.5909594030858  E_coul = 199.06371981612008
cycle= 4 E= -506.527239586966  delta_E= -7.96e-13  |g|= 2.36e-08  |ddm|= 2.25e-07
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -705.5909594030858  E_coul = 199.06371981612008
  HOMO = -0.235369881084504  LUMO = 196.048242192311
  mo_energy =
[-1.19699621e+02 -1.22373582e+01 -6.64212453e+00 -6.64212453e+00
 -6.64212453e+00 -1.16229775e+00 -2.35369881e-01 -2.35369881e-01
 -2.35369881e-01  1.96048242e+02  2.17773659e+03  1.27990344e+04]
E1 = -705.5909594039147  E_coul = 199.0637198169487
Extra cycle  E= -506.527239586966  delta_E= -2.27e-13  |g|= 1.77e-10  |ddm|= 2.58e-10
    CPU time for scf_cycle      0.10 sec, wall time      0.11 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 16.922823125460447
E1 = -705.5909594039147  E_coul = 199.0637198169487
init E= -506.527239586966
    CPU time for initialize scf      0.06 sec, wall time      0.06 sec
  HOMO = -0.235369881082637  LUMO = 196.048242192553
  mo_energy =
[-1.19699621e+02 -1.22373582e+01 -6.64212453e+00 -6.64212453e+00
 -6.64212453e+00 -1.16229775e+00 -2.35369881e-01 -2.35369881e-01
 -2.35369881e-01  1.96048242e+02  2.17773659e+03  1.27990344e+04]
E1 = -705.5909594039206  E_coul = 199.06371981695452
cycle= 1 E= -506.527239586966  delta_E= -1.14e-13  |g|= 2.31e-12  |ddm|= 1.93e-12
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -705.5909594039206  E_coul = 199.06371981695452
  HOMO = -0.235369881082625  LUMO = 196.048242192554
  mo_energy =
[-1.19699621e+02 -1.22373582e+01 -6.64212453e+00 -6.64212453e+00
 -6.64212453e+00 -1.16229775e+00 -2.35369881e-01 -2.35369881e-01
 -2.35369881e-01  1.96048242e+02  2.17773659e+03  1.27990344e+04]
E1 = -705.5909594039207  E_coul = 199.06371981695472
Extra cycle  E= -506.527239586966  delta_E= 1.14e-13  |g|= 2.27e-12  |ddm|= 2.1e-14
    CPU time for scf_cycle      0.12 sec, wall time      0.13 sec
exp = [6.29463289e+03 1.56914640e+03 2.52688222e+02 5.40201180e+01
 4.73753823e+00 3.94461983e-01 8.58671523e+00 4.89988714e-01]
grad_E = [-8.46339922e-05  1.18295657e-03  1.72089917e-04  3.78612521e-04
  1.05220027e-03 -1.22331896e-03  4.94025285e-04 -4.90633078e-03]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((8, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([1.5735952963858392e+03,2.3761303919145971e+02,5.2332977870138201e+01,4.7281081235122091e+00,3.9325830426169639e-01,8.5907170030661746e+00,4.9039633283239870e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "6s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:46:55 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  6294.63576682        1
[INPUT] 0    0    [1    /1   ]  1569.1231108         1
[INPUT] 0    0    [1    /1   ]  252.395611751        1
[INPUT] 0    0    [1    /1   ]  53.991363754         1
[INPUT] 0    0    [1    /1   ]  4.73864785689        1
[INPUT] 0    0    [1    /1   ]  0.394399626655       1
[INPUT] 1    0    [1    /1   ]  8.58707997077        1
[INPUT] 1    0    [1    /1   ]  0.489865604098       1

nuclear repulsion = 0
number of shells = 8
number of NR pGTOs = 12
number of NR cGTOs = 12
basis = {'Ar': [[0, [6294.635766822187, 1.0]], [0, [1569.123110799147, 1.0]], [0, [252.3956117512747, 1.0]], [0, [53.99136375396957, 1.0]], [0, [4.738647856886399, 1.0]], [0, [0.39439962665468137, 1.0]], [1, [8.587079970768933, 1.0]], [1, [0.48986560409758345, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [6294.63576682]
bas 1, expnt(s) = [1569.1231108]
bas 2, expnt(s) = [252.39561175]
bas 3, expnt(s) = [53.99136375]
bas 4, expnt(s) = [4.73864786]
bas 5, expnt(s) = [0.39439963]
bas 6, expnt(s) = [8.58707997]
bas 7, expnt(s) = [0.4898656]
CPU time:        84.64
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  1  1  1  0 36 37  0]
 [ 0  1  1  1  0 38 39  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 6.29463577e+03 1.78543062e+03 1.56912311e+03 6.29879956e+02
 2.52395612e+02 1.59983935e+02 5.39913638e+01 5.03220410e+01
 4.73864786e+00 8.11438952e+00 3.94399627e-01 1.25738245e+00
 8.58707997e+00 4.28836040e+01 4.89865604e-01 1.19558533e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.317962686186497
cond(S) = 16.91518616828262
E1 = -687.810169043468  E_coul = 184.908658912656
init E= -502.901510130812
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.682134471554547  LUMO = 194.382138088369
  mo_energy =
[-1.21102799e+02 -1.32763280e+01 -7.62001745e+00 -7.62001745e+00
 -7.62001745e+00 -1.65369025e+00 -6.82134472e-01 -6.82134472e-01
 -6.82134472e-01  1.94382138e+02  2.17536087e+03  1.27967008e+04]
E1 = -705.596530347042  E_coul = 199.06933031261389
cycle= 1 E= -506.527200034428  delta_E= -3.63  |g|= 0.258  |ddm|= 0.293
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.342496
diis-c [-0.11730381  1.        ]
  HOMO = -0.235626652195892  LUMO = 195.794604321701
  mo_energy =
[-1.19696738e+02 -1.22372824e+01 -6.64186166e+00 -6.64186166e+00
 -6.64186166e+00 -1.16250416e+00 -2.35626652e-01 -2.35626652e-01
 -2.35626652e-01  1.95794604e+02  2.17670110e+03  1.27978830e+04]
E1 = -705.5877645679403  E_coul = 199.06045470124675
cycle= 2 E= -506.527309866694  delta_E= -0.00011  |g|= 0.00208  |ddm|= 0.0036
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00221745
diis-c [-3.80669906e-06 -3.08620240e-03  1.00308620e+00]
  HOMO = -0.235664259971034  LUMO = 195.792865223803
  mo_energy =
[-1.19699534e+02 -1.22375641e+01 -6.64227692e+00 -6.64227692e+00
 -6.64227692e+00 -1.16251969e+00 -2.35664260e-01 -2.35664260e-01
 -2.35664260e-01  1.95792865e+02  2.17669529e+03  1.27978750e+04]
E1 = -705.5876989067639  E_coul = 199.0603890303701
cycle= 3 E= -506.527309876394  delta_E= -9.7e-09  |g|= 1.92e-05  |ddm|= 3.01e-05
    CPU time for cycle= 3      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=2.67938e-05
diis-c [-9.61871079e-12  4.71936254e-05 -1.38527363e-02  1.01380554e+00]
  HOMO = -0.235664430807271  LUMO = 195.792861312396
  mo_energy =
[-1.19699544e+02 -1.22375654e+01 -6.64227927e+00 -6.64227927e+00
 -6.64227927e+00 -1.16251973e+00 -2.35664431e-01 -2.35664431e-01
 -2.35664431e-01  1.95792861e+02  2.17669529e+03  1.27978750e+04]
E1 = -705.5876985349145  E_coul = 199.0603886585198
cycle= 4 E= -506.527309876395  delta_E= -8.53e-13  |g|= 2.36e-08  |ddm|= 2.26e-07
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -705.5876985349145  E_coul = 199.0603886585198
  HOMO = -0.235664430539585  LUMO = 195.792861346702
  mo_energy =
[-1.19699544e+02 -1.22375654e+01 -6.64227927e+00 -6.64227927e+00
 -6.64227927e+00 -1.16251973e+00 -2.35664431e-01 -2.35664431e-01
 -2.35664431e-01  1.95792861e+02  2.17669529e+03  1.27978750e+04]
E1 = -705.5876985357452  E_coul = 199.06038865935048
Extra cycle  E= -506.527309876395  delta_E= -5.68e-14  |g|= 1.78e-10  |ddm|= 2.59e-10
    CPU time for scf_cycle      0.09 sec, wall time      0.10 sec
exp = [6.29463577e+03 1.56912311e+03 2.52395612e+02 5.39913638e+01
 4.73864786e+00 3.94399627e-01 8.58707997e+00 4.89865604e-01]
E = -506.5273098763947
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((8, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([1.5735952963858392e+03,2.3761303919145971e+02,5.2332977870138201e+01,4.7281081235122091e+00,3.9325830426169639e-01,8.5907170030661746e+00,4.9039633283239870e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "6s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:46:56 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  6294.63576682        1
[INPUT] 0    0    [1    /1   ]  1569.1231108         1
[INPUT] 0    0    [1    /1   ]  252.395611751        1
[INPUT] 0    0    [1    /1   ]  53.991363754         1
[INPUT] 0    0    [1    /1   ]  4.73864785689        1
[INPUT] 0    0    [1    /1   ]  0.394399626655       1
[INPUT] 1    0    [1    /1   ]  8.58707997077        1
[INPUT] 1    0    [1    /1   ]  0.489865604098       1

nuclear repulsion = 0
number of shells = 8
number of NR pGTOs = 12
number of NR cGTOs = 12
basis = {'Ar': [[0, [6294.635766822187, 1.0]], [0, [1569.123110799147, 1.0]], [0, [252.3956117512747, 1.0]], [0, [53.99136375396957, 1.0]], [0, [4.738647856886399, 1.0]], [0, [0.39439962665468137, 1.0]], [1, [8.587079970768933, 1.0]], [1, [0.48986560409758345, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [6294.63576682]
bas 1, expnt(s) = [1569.1231108]
bas 2, expnt(s) = [252.39561175]
bas 3, expnt(s) = [53.99136375]
bas 4, expnt(s) = [4.73864786]
bas 5, expnt(s) = [0.39439963]
bas 6, expnt(s) = [8.58707997]
bas 7, expnt(s) = [0.4898656]
CPU time:        85.13
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  1  1  1  0 36 37  0]
 [ 0  1  1  1  0 38 39  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 6.29463577e+03 1.78543062e+03 1.56912311e+03 6.29879956e+02
 2.52395612e+02 1.59983935e+02 5.39913638e+01 5.03220410e+01
 4.73864786e+00 8.11438952e+00 3.94399627e-01 1.25738245e+00
 8.58707997e+00 4.28836040e+01 4.89865604e-01 1.19558533e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.317962686186497
cond(S) = 16.91518616828262
E1 = -687.810169043468  E_coul = 184.908658912656
init E= -502.901510130812
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.682134471554547  LUMO = 194.382138088369
  mo_energy =
[-1.21102799e+02 -1.32763280e+01 -7.62001745e+00 -7.62001745e+00
 -7.62001745e+00 -1.65369025e+00 -6.82134472e-01 -6.82134472e-01
 -6.82134472e-01  1.94382138e+02  2.17536087e+03  1.27967008e+04]
E1 = -705.596530347042  E_coul = 199.06933031261389
cycle= 1 E= -506.527200034428  delta_E= -3.63  |g|= 0.258  |ddm|= 0.293
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.342496
diis-c [-0.11730381  1.        ]
  HOMO = -0.235626652195892  LUMO = 195.794604321701
  mo_energy =
[-1.19696738e+02 -1.22372824e+01 -6.64186166e+00 -6.64186166e+00
 -6.64186166e+00 -1.16250416e+00 -2.35626652e-01 -2.35626652e-01
 -2.35626652e-01  1.95794604e+02  2.17670110e+03  1.27978830e+04]
E1 = -705.5877645679403  E_coul = 199.06045470124675
cycle= 2 E= -506.527309866694  delta_E= -0.00011  |g|= 0.00208  |ddm|= 0.0036
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.00221745
diis-c [-3.80669906e-06 -3.08620240e-03  1.00308620e+00]
  HOMO = -0.235664259971034  LUMO = 195.792865223803
  mo_energy =
[-1.19699534e+02 -1.22375641e+01 -6.64227692e+00 -6.64227692e+00
 -6.64227692e+00 -1.16251969e+00 -2.35664260e-01 -2.35664260e-01
 -2.35664260e-01  1.95792865e+02  2.17669529e+03  1.27978750e+04]
E1 = -705.5876989067639  E_coul = 199.0603890303701
cycle= 3 E= -506.527309876394  delta_E= -9.7e-09  |g|= 1.92e-05  |ddm|= 3.01e-05
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=2.67938e-05
diis-c [-9.61871079e-12  4.71936254e-05 -1.38527363e-02  1.01380554e+00]
  HOMO = -0.235664430807271  LUMO = 195.792861312396
  mo_energy =
[-1.19699544e+02 -1.22375654e+01 -6.64227927e+00 -6.64227927e+00
 -6.64227927e+00 -1.16251973e+00 -2.35664431e-01 -2.35664431e-01
 -2.35664431e-01  1.95792861e+02  2.17669529e+03  1.27978750e+04]
E1 = -705.5876985349145  E_coul = 199.0603886585198
cycle= 4 E= -506.527309876395  delta_E= -8.53e-13  |g|= 2.36e-08  |ddm|= 2.26e-07
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -705.5876985349145  E_coul = 199.0603886585198
  HOMO = -0.235664430539585  LUMO = 195.792861346702
  mo_energy =
[-1.19699544e+02 -1.22375654e+01 -6.64227927e+00 -6.64227927e+00
 -6.64227927e+00 -1.16251973e+00 -2.35664431e-01 -2.35664431e-01
 -2.35664431e-01  1.95792861e+02  2.17669529e+03  1.27978750e+04]
E1 = -705.5876985357452  E_coul = 199.06038865935048
Extra cycle  E= -506.527309876395  delta_E= -5.68e-14  |g|= 1.78e-10  |ddm|= 2.59e-10
    CPU time for scf_cycle      0.09 sec, wall time      0.10 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 16.91518616828262
E1 = -705.5876985357452  E_coul = 199.06038865935048
init E= -506.527309876395
    CPU time for initialize scf      0.05 sec, wall time      0.05 sec
  HOMO = -0.23566443053771  LUMO = 195.792861346943
  mo_energy =
[-1.19699544e+02 -1.22375654e+01 -6.64227927e+00 -6.64227927e+00
 -6.64227927e+00 -1.16251973e+00 -2.35664431e-01 -2.35664431e-01
 -2.35664431e-01  1.95792861e+02  2.17669529e+03  1.27978750e+04]
E1 = -705.5876985357517  E_coul = 199.0603886593567
cycle= 1 E= -506.527309876395  delta_E= -2.27e-13  |g|= 1.32e-12  |ddm|= 1.95e-12
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -705.5876985357517  E_coul = 199.0603886593567
  HOMO = -0.235664430537698  LUMO = 195.792861346945
  mo_energy =
[-1.19699544e+02 -1.22375654e+01 -6.64227927e+00 -6.64227927e+00
 -6.64227927e+00 -1.16251973e+00 -2.35664431e-01 -2.35664431e-01
 -2.35664431e-01  1.95792861e+02  2.17669529e+03  1.27978750e+04]
E1 = -705.5876985357514  E_coul = 199.06038865935682
Extra cycle  E= -506.527309876395  delta_E= 3.41e-13  |g|= 1.57e-12  |ddm|= 1.99e-14
    CPU time for scf_cycle      0.12 sec, wall time      0.12 sec
exp = [6.29463577e+03 1.56912311e+03 2.52395612e+02 5.39913638e+01
 4.73864786e+00 3.94399627e-01 8.58707997e+00 4.89865604e-01]
grad_E = [-8.47584365e-05  1.19106022e-03  3.61799371e-05  6.60943780e-04
  2.08301414e-03 -2.44059254e-03  9.66313098e-04 -9.87169429e-03]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((8, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([1.5735952963858392e+03,2.3761303919145971e+02,5.2332977870138201e+01,4.7281081235122091e+00,3.9325830426169639e-01,8.5907170030661746e+00,4.9039633283239870e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "6s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:46:59 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  6294.64865389        1
[INPUT] 0    0    [1    /1   ]  1568.96933608        1
[INPUT] 0    0    [1    /1   ]  251.919081451        1
[INPUT] 0    0    [1    /1   ]  53.9445819191        1
[INPUT] 0    0    [1    /1   ]  4.7404392104         1
[INPUT] 0    0    [1    /1   ]  0.394299172776       1
[INPUT] 1    0    [1    /1   ]  8.58766837372        1
[INPUT] 1    0    [1    /1   ]  0.489667262503       1

nuclear repulsion = 0
number of shells = 8
number of NR pGTOs = 12
number of NR cGTOs = 12
basis = {'Ar': [[0, [6294.648653892901, 1.0]], [0, [1568.9693360809624, 1.0]], [0, [251.91908145087976, 1.0]], [0, [53.94458191912466, 1.0]], [0, [4.740439210397707, 1.0]], [0, [0.39429917277559906, 1.0]], [1, [8.587668373717506, 1.0]], [1, [0.48966726250270987, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [6294.64865389]
bas 1, expnt(s) = [1568.96933608]
bas 2, expnt(s) = [251.91908145]
bas 3, expnt(s) = [53.94458192]
bas 4, expnt(s) = [4.74043921]
bas 5, expnt(s) = [0.39429917]
bas 6, expnt(s) = [8.58766837]
bas 7, expnt(s) = [0.48966726]
CPU time:        88.19
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  1  1  1  0 36 37  0]
 [ 0  1  1  1  0 38 39  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 6.29464865e+03 1.78543336e+03 1.56896934e+03 6.29833659e+02
 2.51919081e+02 1.59757341e+02 5.39445819e+01 5.02893356e+01
 4.74043921e+00 8.11669002e+00 3.94299173e-01 1.25714225e+00
 8.58766837e+00 4.28872771e+01 4.89667263e-01 1.19498026e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.318211300175157
cond(S) = 16.902900660573657
E1 = -687.805562694122  E_coul = 184.90564640881445
init E= -502.899916285308
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.682413723841528  LUMO = 193.966706285606
  mo_energy =
[-1.21102826e+02 -1.32764898e+01 -7.62012053e+00 -7.62012053e+00
 -7.62012053e+00 -1.65389533e+00 -6.82413724e-01 -6.82413724e-01
 -6.82413724e-01  1.93966706e+02  2.17355761e+03  1.27944800e+04]
E1 = -705.5913672003425  E_coul = 199.06398461014012
cycle= 1 E= -506.527382590202  delta_E= -3.63  |g|= 0.258  |ddm|= 0.293
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.343503
diis-c [-0.11799445  1.        ]
  HOMO = -0.236100930808109  LUMO = 195.379097462329
  mo_energy =
[-1.19696644e+02 -1.22376161e+01 -6.64210951e+00 -6.64210951e+00
 -6.64210951e+00 -1.16286189e+00 -2.36100931e-01 -2.36100931e-01
 -2.36100931e-01  1.95379097e+02  2.17489805e+03  1.27956618e+04]
E1 = -705.582582195536  E_coul = 199.05508951202128
cycle= 2 E= -506.527492683515  delta_E= -0.00011  |g|= 0.00209  |ddm|= 0.00361
    CPU time for cycle= 2      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.00222138
diis-c [-3.81749121e-06 -3.08639056e-03  1.00308639e+00]
  HOMO = -0.23613863916173  LUMO = 195.377358371863
  mo_energy =
[-1.19699445e+02 -1.22378986e+01 -6.64252606e+00 -6.64252606e+00
 -6.64252606e+00 -1.16287746e+00 -2.36138639e-01 -2.36138639e-01
 -2.36138639e-01  1.95377358e+02  2.17489224e+03  1.27956538e+04]
E1 = -705.5825162697912  E_coul = 199.05502357651883
cycle= 3 E= -506.527492693272  delta_E= -9.76e-09  |g|= 1.93e-05  |ddm|= 3.02e-05
    CPU time for cycle= 3      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=2.68917e-05
diis-c [-9.53245073e-12  4.73875170e-05 -1.38847848e-02  1.01383740e+00]
  HOMO = -0.236138810919146  LUMO = 195.377354444133
  mo_energy =
[-1.19699456e+02 -1.22378999e+01 -6.64252843e+00 -6.64252843e+00
 -6.64252843e+00 -1.16287750e+00 -2.36138811e-01 -2.36138811e-01
 -2.36138811e-01  1.95377354e+02  2.17489223e+03  1.27956538e+04]
E1 = -705.5825158951045  E_coul = 199.05502320183112
cycle= 4 E= -506.527492693273  delta_E= -1.02e-12  |g|= 2.37e-08  |ddm|= 2.27e-07
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -705.5825158951045  E_coul = 199.05502320183112
  HOMO = -0.236138810650552  LUMO = 195.377354478427
  mo_energy =
[-1.19699456e+02 -1.22378999e+01 -6.64252843e+00 -6.64252843e+00
 -6.64252843e+00 -1.16287750e+00 -2.36138811e-01 -2.36138811e-01
 -2.36138811e-01  1.95377354e+02  2.17489223e+03  1.27956538e+04]
E1 = -705.5825158959392  E_coul = 199.05502320266592
Extra cycle  E= -506.527492693273  delta_E= 1.14e-13  |g|= 1.79e-10  |ddm|= 2.61e-10
    CPU time for scf_cycle      0.09 sec, wall time      0.10 sec
exp = [6.29464865e+03 1.56896934e+03 2.51919081e+02 5.39445819e+01
 4.74043921e+00 3.94299173e-01 8.58766837e+00 4.89667263e-01]
E = -506.5274926932733
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((8, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([1.5735952963858392e+03,2.3761303919145971e+02,5.2332977870138201e+01,4.7281081235122091e+00,3.9325830426169639e-01,8.5907170030661746e+00,4.9039633283239870e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "6s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:46:59 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  6294.64865389        1
[INPUT] 0    0    [1    /1   ]  1568.96933608        1
[INPUT] 0    0    [1    /1   ]  251.919081451        1
[INPUT] 0    0    [1    /1   ]  53.9445819191        1
[INPUT] 0    0    [1    /1   ]  4.7404392104         1
[INPUT] 0    0    [1    /1   ]  0.394299172776       1
[INPUT] 1    0    [1    /1   ]  8.58766837372        1
[INPUT] 1    0    [1    /1   ]  0.489667262503       1

nuclear repulsion = 0
number of shells = 8
number of NR pGTOs = 12
number of NR cGTOs = 12
basis = {'Ar': [[0, [6294.648653892901, 1.0]], [0, [1568.9693360809624, 1.0]], [0, [251.91908145087976, 1.0]], [0, [53.94458191912466, 1.0]], [0, [4.740439210397707, 1.0]], [0, [0.39429917277559906, 1.0]], [1, [8.587668373717506, 1.0]], [1, [0.48966726250270987, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [6294.64865389]
bas 1, expnt(s) = [1568.96933608]
bas 2, expnt(s) = [251.91908145]
bas 3, expnt(s) = [53.94458192]
bas 4, expnt(s) = [4.74043921]
bas 5, expnt(s) = [0.39429917]
bas 6, expnt(s) = [8.58766837]
bas 7, expnt(s) = [0.48966726]
CPU time:        88.69
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  1  1  1  0 36 37  0]
 [ 0  1  1  1  0 38 39  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 6.29464865e+03 1.78543336e+03 1.56896934e+03 6.29833659e+02
 2.51919081e+02 1.59757341e+02 5.39445819e+01 5.02893356e+01
 4.74043921e+00 8.11669002e+00 3.94299173e-01 1.25714225e+00
 8.58766837e+00 4.28872771e+01 4.89667263e-01 1.19498026e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.318211300175157
cond(S) = 16.902900660573657
E1 = -687.805562694122  E_coul = 184.90564640881445
init E= -502.899916285308
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.682413723841528  LUMO = 193.966706285606
  mo_energy =
[-1.21102826e+02 -1.32764898e+01 -7.62012053e+00 -7.62012053e+00
 -7.62012053e+00 -1.65389533e+00 -6.82413724e-01 -6.82413724e-01
 -6.82413724e-01  1.93966706e+02  2.17355761e+03  1.27944800e+04]
E1 = -705.5913672003425  E_coul = 199.06398461014012
cycle= 1 E= -506.527382590202  delta_E= -3.63  |g|= 0.258  |ddm|= 0.293
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.343503
diis-c [-0.11799445  1.        ]
  HOMO = -0.236100930808109  LUMO = 195.379097462329
  mo_energy =
[-1.19696644e+02 -1.22376161e+01 -6.64210951e+00 -6.64210951e+00
 -6.64210951e+00 -1.16286189e+00 -2.36100931e-01 -2.36100931e-01
 -2.36100931e-01  1.95379097e+02  2.17489805e+03  1.27956618e+04]
E1 = -705.582582195536  E_coul = 199.05508951202128
cycle= 2 E= -506.527492683515  delta_E= -0.00011  |g|= 0.00209  |ddm|= 0.00361
    CPU time for cycle= 2      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.00222138
diis-c [-3.81749121e-06 -3.08639056e-03  1.00308639e+00]
  HOMO = -0.23613863916173  LUMO = 195.377358371863
  mo_energy =
[-1.19699445e+02 -1.22378986e+01 -6.64252606e+00 -6.64252606e+00
 -6.64252606e+00 -1.16287746e+00 -2.36138639e-01 -2.36138639e-01
 -2.36138639e-01  1.95377358e+02  2.17489224e+03  1.27956538e+04]
E1 = -705.5825162697912  E_coul = 199.05502357651883
cycle= 3 E= -506.527492693272  delta_E= -9.76e-09  |g|= 1.93e-05  |ddm|= 3.02e-05
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=2.68917e-05
diis-c [-9.53245073e-12  4.73875170e-05 -1.38847848e-02  1.01383740e+00]
  HOMO = -0.236138810919146  LUMO = 195.377354444133
  mo_energy =
[-1.19699456e+02 -1.22378999e+01 -6.64252843e+00 -6.64252843e+00
 -6.64252843e+00 -1.16287750e+00 -2.36138811e-01 -2.36138811e-01
 -2.36138811e-01  1.95377354e+02  2.17489223e+03  1.27956538e+04]
E1 = -705.5825158951045  E_coul = 199.05502320183112
cycle= 4 E= -506.527492693273  delta_E= -1.02e-12  |g|= 2.37e-08  |ddm|= 2.27e-07
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -705.5825158951045  E_coul = 199.05502320183112
  HOMO = -0.236138810650552  LUMO = 195.377354478427
  mo_energy =
[-1.19699456e+02 -1.22378999e+01 -6.64252843e+00 -6.64252843e+00
 -6.64252843e+00 -1.16287750e+00 -2.36138811e-01 -2.36138811e-01
 -2.36138811e-01  1.95377354e+02  2.17489223e+03  1.27956538e+04]
E1 = -705.5825158959392  E_coul = 199.05502320266592
Extra cycle  E= -506.527492693273  delta_E= 1.14e-13  |g|= 1.79e-10  |ddm|= 2.61e-10
    CPU time for scf_cycle      0.09 sec, wall time      0.10 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 16.902900660573657
E1 = -705.5825158959392  E_coul = 199.05502320266592
init E= -506.527492693273
    CPU time for initialize scf      0.05 sec, wall time      0.05 sec
  HOMO = -0.236138810648661  LUMO = 195.377354478669
  mo_energy =
[-1.19699456e+02 -1.22378999e+01 -6.64252843e+00 -6.64252843e+00
 -6.64252843e+00 -1.16287750e+00 -2.36138811e-01 -2.36138811e-01
 -2.36138811e-01  1.95377354e+02  2.17489223e+03  1.27956538e+04]
E1 = -705.5825158959459  E_coul = 199.0550232026723
cycle= 1 E= -506.527492693274  delta_E= -3.41e-13  |g|= 1.51e-12  |ddm|= 1.96e-12
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -705.5825158959459  E_coul = 199.0550232026723
  HOMO = -0.236138810648645  LUMO = 195.377354478671
  mo_energy =
[-1.19699456e+02 -1.22378999e+01 -6.64252843e+00 -6.64252843e+00
 -6.64252843e+00 -1.16287750e+00 -2.36138811e-01 -2.36138811e-01
 -2.36138811e-01  1.95377354e+02  2.17489223e+03  1.27956538e+04]
E1 = -705.5825158959452  E_coul = 199.05502320267212
Extra cycle  E= -506.527492693273  delta_E= 5.68e-13  |g|= 3.38e-12  |ddm|= 2.18e-14
    CPU time for scf_cycle      0.12 sec, wall time      0.12 sec
exp = [6.29464865e+03 1.56896934e+03 2.51919081e+02 5.39445819e+01
 4.74043921e+00 3.94299173e-01 8.58766837e+00 4.89667263e-01]
grad_E = [-8.49571330e-05  1.20412246e-03 -1.82935492e-04  1.11629265e-03
  3.74478867e-03 -4.40264974e-03  1.72763991e-03 -1.78747091e-02]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((8, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([1.5735952963858392e+03,2.3761303919145971e+02,5.2332977870138201e+01,4.7281081235122091e+00,3.9325830426169639e-01,8.5907170030661746e+00,4.9039633283239870e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "6s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:47:02 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  6294.69134562        1
[INPUT] 0    0    [1    /1   ]  1568.41337462        1
[INPUT] 0    0    [1    /1   ]  251.126241722        1
[INPUT] 0    0    [1    /1   ]  53.8668459689        1
[INPUT] 0    0    [1    /1   ]  4.7433786002         1
[INPUT] 0    0    [1    /1   ]  0.394134851123       1
[INPUT] 1    0    [1    /1   ]  8.5886328565         1
[INPUT] 1    0    [1    /1   ]  0.489342778152       1

nuclear repulsion = 0
number of shells = 8
number of NR pGTOs = 12
number of NR cGTOs = 12
basis = {'Ar': [[0, [6294.691345617207, 1.0]], [0, [1568.4133746176924, 1.0]], [0, [251.1262417220014, 1.0]], [0, [53.866845968930484, 1.0]], [0, [4.7433786001972065, 1.0]], [0, [0.3941348511230633, 1.0]], [1, [8.588632856499077, 1.0]], [1, [0.48934277815219324, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [6294.69134562]
bas 1, expnt(s) = [1568.41337462]
bas 2, expnt(s) = [251.12624172]
bas 3, expnt(s) = [53.86684597]
bas 4, expnt(s) = [4.7433786]
bas 5, expnt(s) = [0.39413485]
bas 6, expnt(s) = [8.58863286]
bas 7, expnt(s) = [0.48934278]
CPU time:        91.78
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  1  1  1  0 36 37  0]
 [ 0  1  1  1  0 38 39  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 6.29469135e+03 1.78544244e+03 1.56841337e+03 6.29666266e+02
 2.51126242e+02 1.59380101e+02 5.38668460e+01 5.02349743e+01
 4.74337860e+00 8.12046440e+00 3.94134851e-01 1.25674930e+00
 8.58863286e+00 4.28932980e+01 4.89342778e-01 1.19399050e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.31861632590622
cond(S) = 16.88285638837139
E1 = -687.7981291591251  E_coul = 184.90069155905852
init E= -502.897437600067
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.68287105769429  LUMO = 193.27652159288
  mo_energy =
[-1.21102966e+02 -1.32767577e+01 -7.62029077e+00 -7.62029077e+00
 -7.62029077e+00 -1.65423222e+00 -6.82871058e-01 -6.82871058e-01
 -6.82871058e-01  1.93276522e+02  2.17027953e+03  1.27899222e+04]
E1 = -705.5831037505258  E_coul = 199.05523998840087
cycle= 1 E= -506.527863762125  delta_E= -3.63  |g|= 0.259  |ddm|= 0.293
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.34513
diis-c [-0.11911495  1.        ]
  HOMO = -0.236876417819833  LUMO = 194.68878742251
  mo_energy =
[-1.19696582e+02 -1.22381640e+01 -6.64251479e+00 -6.64251479e+00
 -6.64251479e+00 -1.16344751e+00 -2.36876418e-01 -2.36876418e-01
 -2.36876418e-01  1.94688787e+02  2.17162034e+03  1.27911036e+04]
E1 = -705.5742863418345  E_coul = 199.04631204623874
cycle= 2 E= -506.527974295596  delta_E= -0.000111  |g|= 0.00209  |ddm|= 0.00362
    CPU time for cycle= 2      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.002228
diis-c [-3.83598048e-06 -3.08688894e-03  1.00308689e+00]
  HOMO = -0.236914295904623  LUMO = 194.687048267617
  mo_energy =
[-1.19699390e+02 -1.22384480e+01 -6.64293353e+00 -6.64293353e+00
 -6.64293353e+00 -1.16346315e+00 -2.36914296e-01 -2.36914296e-01
 -2.36914296e-01  1.94687048e+02  2.17161452e+03  1.27910955e+04]
E1 = -705.5742199708351  E_coul = 199.04624566538413
cycle= 3 E= -506.527974305451  delta_E= -9.86e-09  |g|= 1.95e-05  |ddm|= 3.04e-05
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=2.70557e-05
diis-c [-9.39677175e-12  4.77058901e-05 -1.39375756e-02  1.01388987e+00]
  HOMO = -0.236914469205673  LUMO = 194.687044312475
  mo_energy =
[-1.19699401e+02 -1.22384493e+01 -6.64293592e+00 -6.64293592e+00
 -6.64293592e+00 -1.16346320e+00 -2.36914469e-01 -2.36914469e-01
 -2.36914469e-01  1.94687044e+02  2.17161451e+03  1.27910955e+04]
E1 = -705.5742195913818  E_coul = 199.04624528593024
cycle= 4 E= -506.527974305452  delta_E= -6.82e-13  |g|= 2.37e-08  |ddm|= 2.3e-07
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -705.5742195913818  E_coul = 199.04624528593024
  HOMO = -0.236914468935427  LUMO = 194.687044346761
  mo_energy =
[-1.19699401e+02 -1.22384493e+01 -6.64293592e+00 -6.64293592e+00
 -6.64293592e+00 -1.16346320e+00 -2.36914469e-01 -2.36914469e-01
 -2.36914469e-01  1.94687044e+02  2.17161451e+03  1.27910955e+04]
E1 = -705.5742195922235  E_coul = 199.04624528677138
Extra cycle  E= -506.527974305452  delta_E= -4.55e-13  |g|= 1.8e-10  |ddm|= 2.63e-10
    CPU time for scf_cycle      0.09 sec, wall time      0.10 sec
exp = [6.29469135e+03 1.56841337e+03 2.51126242e+02 5.38668460e+01
 4.74337860e+00 3.94134851e-01 8.58863286e+00 4.89342778e-01]
E = -506.52797430545206
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((8, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([1.5735952963858392e+03,2.3761303919145971e+02,5.2332977870138201e+01,4.7281081235122091e+00,3.9325830426169639e-01,8.5907170030661746e+00,4.9039633283239870e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "6s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:47:03 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  6294.69134562        1
[INPUT] 0    0    [1    /1   ]  1568.41337462        1
[INPUT] 0    0    [1    /1   ]  251.126241722        1
[INPUT] 0    0    [1    /1   ]  53.8668459689        1
[INPUT] 0    0    [1    /1   ]  4.7433786002         1
[INPUT] 0    0    [1    /1   ]  0.394134851123       1
[INPUT] 1    0    [1    /1   ]  8.5886328565         1
[INPUT] 1    0    [1    /1   ]  0.489342778152       1

nuclear repulsion = 0
number of shells = 8
number of NR pGTOs = 12
number of NR cGTOs = 12
basis = {'Ar': [[0, [6294.691345617207, 1.0]], [0, [1568.4133746176924, 1.0]], [0, [251.1262417220014, 1.0]], [0, [53.866845968930484, 1.0]], [0, [4.7433786001972065, 1.0]], [0, [0.3941348511230633, 1.0]], [1, [8.588632856499077, 1.0]], [1, [0.48934277815219324, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [6294.69134562]
bas 1, expnt(s) = [1568.41337462]
bas 2, expnt(s) = [251.12624172]
bas 3, expnt(s) = [53.86684597]
bas 4, expnt(s) = [4.7433786]
bas 5, expnt(s) = [0.39413485]
bas 6, expnt(s) = [8.58863286]
bas 7, expnt(s) = [0.48934278]
CPU time:        92.30
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  1  1  1  0 36 37  0]
 [ 0  1  1  1  0 38 39  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 6.29469135e+03 1.78544244e+03 1.56841337e+03 6.29666266e+02
 2.51126242e+02 1.59380101e+02 5.38668460e+01 5.02349743e+01
 4.74337860e+00 8.12046440e+00 3.94134851e-01 1.25674930e+00
 8.58863286e+00 4.28932980e+01 4.89342778e-01 1.19399050e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.31861632590622
cond(S) = 16.88285638837139
E1 = -687.7981291591251  E_coul = 184.90069155905852
init E= -502.897437600067
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.68287105769429  LUMO = 193.27652159288
  mo_energy =
[-1.21102966e+02 -1.32767577e+01 -7.62029077e+00 -7.62029077e+00
 -7.62029077e+00 -1.65423222e+00 -6.82871058e-01 -6.82871058e-01
 -6.82871058e-01  1.93276522e+02  2.17027953e+03  1.27899222e+04]
E1 = -705.5831037505258  E_coul = 199.05523998840087
cycle= 1 E= -506.527863762125  delta_E= -3.63  |g|= 0.259  |ddm|= 0.293
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.34513
diis-c [-0.11911495  1.        ]
  HOMO = -0.236876417819833  LUMO = 194.68878742251
  mo_energy =
[-1.19696582e+02 -1.22381640e+01 -6.64251479e+00 -6.64251479e+00
 -6.64251479e+00 -1.16344751e+00 -2.36876418e-01 -2.36876418e-01
 -2.36876418e-01  1.94688787e+02  2.17162034e+03  1.27911036e+04]
E1 = -705.5742863418345  E_coul = 199.04631204623874
cycle= 2 E= -506.527974295596  delta_E= -0.000111  |g|= 0.00209  |ddm|= 0.00362
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.002228
diis-c [-3.83598048e-06 -3.08688894e-03  1.00308689e+00]
  HOMO = -0.236914295904623  LUMO = 194.687048267617
  mo_energy =
[-1.19699390e+02 -1.22384480e+01 -6.64293353e+00 -6.64293353e+00
 -6.64293353e+00 -1.16346315e+00 -2.36914296e-01 -2.36914296e-01
 -2.36914296e-01  1.94687048e+02  2.17161452e+03  1.27910955e+04]
E1 = -705.5742199708351  E_coul = 199.04624566538413
cycle= 3 E= -506.527974305451  delta_E= -9.86e-09  |g|= 1.95e-05  |ddm|= 3.04e-05
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=2.70557e-05
diis-c [-9.39677175e-12  4.77058901e-05 -1.39375756e-02  1.01388987e+00]
  HOMO = -0.236914469205673  LUMO = 194.687044312475
  mo_energy =
[-1.19699401e+02 -1.22384493e+01 -6.64293592e+00 -6.64293592e+00
 -6.64293592e+00 -1.16346320e+00 -2.36914469e-01 -2.36914469e-01
 -2.36914469e-01  1.94687044e+02  2.17161451e+03  1.27910955e+04]
E1 = -705.5742195913818  E_coul = 199.04624528593024
cycle= 4 E= -506.527974305452  delta_E= -6.82e-13  |g|= 2.37e-08  |ddm|= 2.3e-07
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -705.5742195913818  E_coul = 199.04624528593024
  HOMO = -0.236914468935427  LUMO = 194.687044346761
  mo_energy =
[-1.19699401e+02 -1.22384493e+01 -6.64293592e+00 -6.64293592e+00
 -6.64293592e+00 -1.16346320e+00 -2.36914469e-01 -2.36914469e-01
 -2.36914469e-01  1.94687044e+02  2.17161451e+03  1.27910955e+04]
E1 = -705.5742195922235  E_coul = 199.04624528677138
Extra cycle  E= -506.527974305452  delta_E= -4.55e-13  |g|= 1.8e-10  |ddm|= 2.63e-10
    CPU time for scf_cycle      0.10 sec, wall time      0.10 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 16.88285638837139
E1 = -705.5742195922235  E_coul = 199.04624528677138
init E= -506.527974305452
    CPU time for initialize scf      0.05 sec, wall time      0.05 sec
  HOMO = -0.236914468933514  LUMO = 194.687044347005
  mo_energy =
[-1.19699401e+02 -1.22384493e+01 -6.64293592e+00 -6.64293592e+00
 -6.64293592e+00 -1.16346320e+00 -2.36914469e-01 -2.36914469e-01
 -2.36914469e-01  1.94687044e+02  2.17161451e+03  1.27910955e+04]
E1 = -705.5742195922288  E_coul = 199.0462452867773
cycle= 1 E= -506.527974305451  delta_E= 5.68e-13  |g|= 2.21e-12  |ddm|= 1.98e-12
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -705.5742195922288  E_coul = 199.0462452867773
  HOMO = -0.236914468933505  LUMO = 194.687044347007
  mo_energy =
[-1.19699401e+02 -1.22384493e+01 -6.64293592e+00 -6.64293592e+00
 -6.64293592e+00 -1.16346320e+00 -2.36914469e-01 -2.36914469e-01
 -2.36914469e-01  1.94687044e+02  2.17161451e+03  1.27910955e+04]
E1 = -705.5742195922294  E_coul = 199.0462452867774
Extra cycle  E= -506.527974305452  delta_E= -4.55e-13  |g|= 1.18e-12  |ddm|= 1.41e-14
    CPU time for scf_cycle      0.12 sec, wall time      0.12 sec
exp = [6.29469135e+03 1.56841337e+03 2.51126242e+02 5.38668460e+01
 4.74337860e+00 3.94134851e-01 8.58863286e+00 4.89342778e-01]
grad_E = [-8.52779875e-05  1.22551918e-03 -5.41783688e-04  1.86220034e-03
  6.46528852e-03 -7.61502398e-03  2.97409097e-03 -3.09764587e-02]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((8, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([1.5735952963858392e+03,2.3761303919145971e+02,5.2332977870138201e+01,4.7281081235122091e+00,3.9325830426169639e-01,8.5907170030661746e+00,4.9039633283239870e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "6s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:47:07 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  6294.81753123        1
[INPUT] 0    0    [1    /1   ]  1566.71015144        1
[INPUT] 0    0    [1    /1   ]  249.794878313        1
[INPUT] 0    0    [1    /1   ]  53.73654135          1
[INPUT] 0    0    [1    /1   ]  4.74821145985        1
[INPUT] 0    0    [1    /1   ]  0.39386606253        1
[INPUT] 1    0    [1    /1   ]  8.59021575658        1
[INPUT] 1    0    [1    /1   ]  0.488811802069       1

nuclear repulsion = 0
number of shells = 8
number of NR pGTOs = 12
number of NR cGTOs = 12
basis = {'Ar': [[0, [6294.817531232056, 1.0]], [0, [1566.710151435744, 1.0]], [0, [249.79487831297433, 1.0]], [0, [53.73654134997301, 1.0]], [0, [4.7482114598532545, 1.0]], [0, [0.3938660625296319, 1.0]], [1, [8.590215756578573, 1.0]], [1, [0.4888118020686887, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [6294.81753123]
bas 1, expnt(s) = [1566.71015144]
bas 2, expnt(s) = [249.79487831]
bas 3, expnt(s) = [53.73654135]
bas 4, expnt(s) = [4.74821146]
bas 5, expnt(s) = [0.39386606]
bas 6, expnt(s) = [8.59021576]
bas 7, expnt(s) = [0.4888118]
CPU time:        95.84
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  1  1  1  0 36 37  0]
 [ 0  1  1  1  0 38 39  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 6.29481753e+03 1.78546928e+03 1.56671015e+03 6.29153356e+02
 2.49794878e+02 1.58745956e+02 5.37365413e+01 5.01438074e+01
 4.74821146e+00 8.12666885e+00 3.93866063e-01 1.25610645e+00
 8.59021576e+00 4.29031799e+01 4.88811802e-01 1.19237125e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.31927446632848
cond(S) = 16.850253872734648
E1 = -687.7862390833493  E_coul = 184.89251078347908
init E= -502.89372829987
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.683620729304593  LUMO = 192.120230489525
  mo_energy =
[-1.21103440e+02 -1.32772058e+01 -7.62057377e+00 -7.62057377e+00
 -7.62057377e+00 -1.65478728e+00 -6.83620729e-01 -6.83620729e-01
 -6.83620729e-01  1.92120230e+02  2.16406234e+03  1.27800557e+04]
E1 = -705.5700640678547  E_coul = 199.04093554923568
cycle= 1 E= -506.529128518619  delta_E= -3.64  |g|= 0.26  |ddm|= 0.292
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.347738
diis-c [-0.12092143  1.        ]
  HOMO = -0.238144217407691  LUMO = 193.532285364954
  mo_energy =
[-1.19696714e+02 -1.22390666e+01 -6.64317734e+00 -6.64317734e+00
 -6.64317734e+00 -1.16440681e+00 -2.38144217e-01 -2.38144217e-01
 -2.38144217e-01  1.93532285e+02  2.16540379e+03  1.27812363e+04]
E1 = -705.5611911320289  E_coul = 199.03195132530618
cycle= 2 E= -506.529239806723  delta_E= -0.000111  |g|= 0.00211  |ddm|= 0.00365
    CPU time for cycle= 2      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.00223931
diis-c [-3.86841623e-06 -3.08820650e-03  1.00308821e+00]
  HOMO = -0.238182386919102  LUMO = 193.530545905055
  mo_energy =
[-1.19699536e+02 -1.22393530e+01 -6.64359982e+00 -6.64359982e+00
 -6.64359982e+00 -1.16442259e+00 -2.38182387e-01 -2.38182387e-01
 -2.38182387e-01  1.93530546e+02  2.16539796e+03  1.27812282e+04]
E1 = -705.5611239993453  E_coul = 199.03188418260126
cycle= 3 E= -506.529239816744  delta_E= -1e-08  |g|= 1.97e-05  |ddm|= 3.08e-05
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=2.73347e-05
diis-c [-9.18866398e-12  4.82304169e-05 -1.40249169e-02  1.01397669e+00]
  HOMO = -0.238182562843736  LUMO = 193.530541903177
  mo_energy =
[-1.19699547e+02 -1.22393544e+01 -6.64360225e+00 -6.64360225e+00
 -6.64360225e+00 -1.16442263e+00 -2.38182563e-01 -2.38182563e-01
 -2.38182563e-01  1.93530542e+02  2.16539796e+03  1.27812282e+04]
E1 = -705.5611236117542  E_coul = 199.03188379500955
cycle= 4 E= -506.529239816745  delta_E= -5.68e-13  |g|= 2.39e-08  |ddm|= 2.34e-07
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -705.5611236117542  E_coul = 199.03188379500955
  HOMO = -0.238182562570428  LUMO = 193.530541937464
  mo_energy =
[-1.19699547e+02 -1.22393544e+01 -6.64360224e+00 -6.64360224e+00
 -6.64360224e+00 -1.16442263e+00 -2.38182563e-01 -2.38182563e-01
 -2.38182563e-01  1.93530542e+02  2.16539796e+03  1.27812282e+04]
E1 = -705.5611236126067  E_coul = 199.03188379586194
Extra cycle  E= -506.529239816745  delta_E= -1.14e-13  |g|= 1.81e-10  |ddm|= 2.67e-10
    CPU time for scf_cycle      0.09 sec, wall time      0.10 sec
exp = [6.29481753e+03 1.56671015e+03 2.49794878e+02 5.37365413e+01
 4.74821146e+00 3.93866063e-01 8.59021576e+00 4.88811802e-01]
E = -506.52923981674473
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((8, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([1.5735952963858392e+03,2.3761303919145971e+02,5.2332977870138201e+01,4.7281081235122091e+00,3.9325830426169639e-01,8.5907170030661746e+00,4.9039633283239870e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "6s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:47:07 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  6294.81753123        1
[INPUT] 0    0    [1    /1   ]  1566.71015144        1
[INPUT] 0    0    [1    /1   ]  249.794878313        1
[INPUT] 0    0    [1    /1   ]  53.73654135          1
[INPUT] 0    0    [1    /1   ]  4.74821145985        1
[INPUT] 0    0    [1    /1   ]  0.39386606253        1
[INPUT] 1    0    [1    /1   ]  8.59021575658        1
[INPUT] 1    0    [1    /1   ]  0.488811802069       1

nuclear repulsion = 0
number of shells = 8
number of NR pGTOs = 12
number of NR cGTOs = 12
basis = {'Ar': [[0, [6294.817531232056, 1.0]], [0, [1566.710151435744, 1.0]], [0, [249.79487831297433, 1.0]], [0, [53.73654134997301, 1.0]], [0, [4.7482114598532545, 1.0]], [0, [0.3938660625296319, 1.0]], [1, [8.590215756578573, 1.0]], [1, [0.4888118020686887, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [6294.81753123]
bas 1, expnt(s) = [1566.71015144]
bas 2, expnt(s) = [249.79487831]
bas 3, expnt(s) = [53.73654135]
bas 4, expnt(s) = [4.74821146]
bas 5, expnt(s) = [0.39386606]
bas 6, expnt(s) = [8.59021576]
bas 7, expnt(s) = [0.4888118]
CPU time:        96.36
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  1  1  1  0 36 37  0]
 [ 0  1  1  1  0 38 39  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 6.29481753e+03 1.78546928e+03 1.56671015e+03 6.29153356e+02
 2.49794878e+02 1.58745956e+02 5.37365413e+01 5.01438074e+01
 4.74821146e+00 8.12666885e+00 3.93866063e-01 1.25610645e+00
 8.59021576e+00 4.29031799e+01 4.88811802e-01 1.19237125e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.31927446632848
cond(S) = 16.850253872734648
E1 = -687.7862390833493  E_coul = 184.89251078347908
init E= -502.89372829987
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.683620729304593  LUMO = 192.120230489525
  mo_energy =
[-1.21103440e+02 -1.32772058e+01 -7.62057377e+00 -7.62057377e+00
 -7.62057377e+00 -1.65478728e+00 -6.83620729e-01 -6.83620729e-01
 -6.83620729e-01  1.92120230e+02  2.16406234e+03  1.27800557e+04]
E1 = -705.5700640678547  E_coul = 199.04093554923568
cycle= 1 E= -506.529128518619  delta_E= -3.64  |g|= 0.26  |ddm|= 0.292
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.347738
diis-c [-0.12092143  1.        ]
  HOMO = -0.238144217407691  LUMO = 193.532285364954
  mo_energy =
[-1.19696714e+02 -1.22390666e+01 -6.64317734e+00 -6.64317734e+00
 -6.64317734e+00 -1.16440681e+00 -2.38144217e-01 -2.38144217e-01
 -2.38144217e-01  1.93532285e+02  2.16540379e+03  1.27812363e+04]
E1 = -705.5611911320289  E_coul = 199.03195132530618
cycle= 2 E= -506.529239806723  delta_E= -0.000111  |g|= 0.00211  |ddm|= 0.00365
    CPU time for cycle= 2      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.00223931
diis-c [-3.86841623e-06 -3.08820650e-03  1.00308821e+00]
  HOMO = -0.238182386919102  LUMO = 193.530545905055
  mo_energy =
[-1.19699536e+02 -1.22393530e+01 -6.64359982e+00 -6.64359982e+00
 -6.64359982e+00 -1.16442259e+00 -2.38182387e-01 -2.38182387e-01
 -2.38182387e-01  1.93530546e+02  2.16539796e+03  1.27812282e+04]
E1 = -705.5611239993453  E_coul = 199.03188418260126
cycle= 3 E= -506.529239816744  delta_E= -1e-08  |g|= 1.97e-05  |ddm|= 3.08e-05
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=2.73347e-05
diis-c [-9.18866398e-12  4.82304169e-05 -1.40249169e-02  1.01397669e+00]
  HOMO = -0.238182562843736  LUMO = 193.530541903177
  mo_energy =
[-1.19699547e+02 -1.22393544e+01 -6.64360225e+00 -6.64360225e+00
 -6.64360225e+00 -1.16442263e+00 -2.38182563e-01 -2.38182563e-01
 -2.38182563e-01  1.93530542e+02  2.16539796e+03  1.27812282e+04]
E1 = -705.5611236117542  E_coul = 199.03188379500955
cycle= 4 E= -506.529239816745  delta_E= -5.68e-13  |g|= 2.39e-08  |ddm|= 2.34e-07
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -705.5611236117542  E_coul = 199.03188379500955
  HOMO = -0.238182562570428  LUMO = 193.530541937464
  mo_energy =
[-1.19699547e+02 -1.22393544e+01 -6.64360224e+00 -6.64360224e+00
 -6.64360224e+00 -1.16442263e+00 -2.38182563e-01 -2.38182563e-01
 -2.38182563e-01  1.93530542e+02  2.16539796e+03  1.27812282e+04]
E1 = -705.5611236126067  E_coul = 199.03188379586194
Extra cycle  E= -506.529239816745  delta_E= -1.14e-13  |g|= 1.81e-10  |ddm|= 2.67e-10
    CPU time for scf_cycle      0.09 sec, wall time      0.10 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 16.850253872734648
E1 = -705.5611236126067  E_coul = 199.03188379586194
init E= -506.529239816745
    CPU time for initialize scf      0.05 sec, wall time      0.05 sec
  HOMO = -0.238182562568476  LUMO = 193.530541937709
  mo_energy =
[-1.19699547e+02 -1.22393544e+01 -6.64360224e+00 -6.64360224e+00
 -6.64360224e+00 -1.16442263e+00 -2.38182563e-01 -2.38182563e-01
 -2.38182563e-01  1.93530542e+02  2.16539796e+03  1.27812282e+04]
E1 = -705.561123612613  E_coul = 199.0318837958684
cycle= 1 E= -506.529239816745  delta_E= 1.71e-13  |g|= 2.65e-12  |ddm|= 2.05e-12
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -705.561123612613  E_coul = 199.0318837958684
  HOMO = -0.23818256256846  LUMO = 193.53054193771
  mo_energy =
[-1.19699547e+02 -1.22393544e+01 -6.64360224e+00 -6.64360224e+00
 -6.64360224e+00 -1.16442263e+00 -2.38182563e-01 -2.38182563e-01
 -2.38182563e-01  1.93530542e+02  2.16539796e+03  1.27812282e+04]
E1 = -705.5611236126132  E_coul = 199.03188379586834
Extra cycle  E= -506.529239816745  delta_E= -2.84e-13  |g|= 7.91e-13  |ddm|= 1.57e-14
    CPU time for scf_cycle      0.12 sec, wall time      0.13 sec
exp = [6.29481753e+03 1.56671015e+03 2.49794878e+02 5.37365413e+01
 4.74821146e+00 3.93866063e-01 8.59021576e+00 4.88811802e-01]
grad_E = [-8.57940236e-05  1.26064936e-03 -1.13012829e-03  3.08571108e-03
  1.09213705e-02 -1.28785816e-02  5.01613606e-03 -5.24391625e-02]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((8, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([1.5735952963858392e+03,2.3761303919145971e+02,5.2332977870138201e+01,4.7281081235122091e+00,3.9325830426169639e-01,8.5907170030661746e+00,4.9039633283239870e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "6s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:47:10 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  6295.17275602        1
[INPUT] 0    0    [1    /1   ]  1561.82892366        1
[INPUT] 0    0    [1    /1   ]  247.507142678        1
[INPUT] 0    0    [1    /1   ]  53.5131598222        1
[INPUT] 0    0    [1    /1   ]  4.75626403537        1
[INPUT] 0    0    [1    /1   ]  0.393422114311       1
[INPUT] 1    0    [1    /1   ]  8.5928446122         1
[INPUT] 1    0    [1    /1   ]  0.487933830147       1

nuclear repulsion = 0
number of shells = 8
number of NR pGTOs = 12
number of NR cGTOs = 12
basis = {'Ar': [[0, [6295.172756024513, 1.0]], [0, [1561.8289236556004, 1.0]], [0, [247.50714267782544, 1.0]], [0, [53.513159822212124, 1.0]], [0, [4.756264035371862, 1.0]], [0, [0.39342211431053914, 1.0]], [1, [8.592844612204615, 1.0]], [1, [0.48793383014704594, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [6295.17275602]
bas 1, expnt(s) = [1561.82892366]
bas 2, expnt(s) = [247.50714268]
bas 3, expnt(s) = [53.51315982]
bas 4, expnt(s) = [4.75626404]
bas 5, expnt(s) = [0.39342211]
bas 6, expnt(s) = [8.59284461]
bas 7, expnt(s) = [0.48793383]
CPU time:        99.48
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  1  1  1  0 36 37  0]
 [ 0  1  1  1  0 38 39  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 6.29517276e+03 1.78554485e+03 1.56182892e+03 6.27682644e+02
 2.47507143e+02 1.57654302e+02 5.35131598e+01 4.99873911e+01
 4.75626404e+00 8.13700328e+00 3.93422114e-01 1.25504443e+00
 8.59284461e+00 4.29195926e+01 4.87933830e-01 1.18969478e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.320349765897344
cond(S) = 16.797194204555385
E1 = -687.7673224570175  E_coul = 184.8787804939043
init E= -502.888541963113
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.684863941873544  LUMO = 190.140800416701
  mo_energy =
[-1.21104867e+02 -1.32779742e+01 -7.62105414e+00 -7.62105414e+00
 -7.62105414e+00 -1.65571573e+00 -6.84863942e-01 -6.84863942e-01
 -6.84863942e-01  1.90140800e+02  2.15156896e+03  1.27574767e+04]
E1 = -705.5497841561055  E_coul = 199.01731468654674
cycle= 1 E= -506.532469469559  delta_E= -3.64  |g|= 0.263  |ddm|= 0.292
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.351891
diis-c [-0.12382725  1.        ]
  HOMO = -0.240237098950818  LUMO = 191.552495438177
  mo_energy =
[-1.19697540e+02 -1.22405753e+01 -6.64427010e+00 -6.64427010e+00
 -6.64427010e+00 -1.16599578e+00 -2.40237099e-01 -2.40237099e-01
 -2.40237099e-01  1.91552495e+02  2.15291164e+03  1.27586562e+04]
E1 = -705.5408127832258  E_coul = 199.00823068713706
cycle= 2 E= -506.532582096089  delta_E= -0.000113  |g|= 0.00213  |ddm|= 0.00369
    CPU time for cycle= 2      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.00225922
diis-c [-3.92776826e-06 -3.09171574e-03  1.00309172e+00]
  HOMO = -0.24027578674773  LUMO = 191.550754956858
  mo_energy =
[-1.19700387e+02 -1.22408661e+01 -6.64469916e+00 -6.64469916e+00
 -6.64469916e+00 -1.16601178e+00 -2.40275787e-01 -2.40275787e-01
 -2.40275787e-01  1.91550755e+02  2.15290579e+03  1.27586481e+04]
E1 = -705.5407443017313  E_coul = 199.00816219532666
cycle= 3 E= -506.532582106405  delta_E= -1.03e-08  |g|= 2.01e-05  |ddm|= 3.14e-05
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=2.78238e-05
diis-c [-8.87960756e-12  4.91093012e-05 -1.41719184e-02  1.01412281e+00]
  HOMO = -0.240275967275467  LUMO = 191.550750872549
  mo_energy =
[-1.19700398e+02 -1.22408675e+01 -6.64470166e+00 -6.64470166e+00
 -6.64470166e+00 -1.16601182e+00 -2.40275967e-01 -2.40275967e-01
 -2.40275967e-01  1.91550751e+02  2.15290579e+03  1.27586481e+04]
E1 = -705.5407438997498  E_coul = 199.00816179334447
cycle= 4 E= -506.532582106405  delta_E= -7.96e-13  |g|= 2.42e-08  |ddm|= 2.42e-07
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -705.5407438997498  E_coul = 199.00816179334447
  HOMO = -0.240275966996132  LUMO = 191.550750906872
  mo_energy =
[-1.19700398e+02 -1.22408675e+01 -6.64470166e+00 -6.64470166e+00
 -6.64470166e+00 -1.16601182e+00 -2.40275967e-01 -2.40275967e-01
 -2.40275967e-01  1.91550751e+02  2.15290579e+03  1.27586481e+04]
E1 = -705.5407439006237  E_coul = 199.00816179421795
Extra cycle  E= -506.532582106406  delta_E= -4.55e-13  |g|= 1.84e-10  |ddm|= 2.75e-10
    CPU time for scf_cycle      0.10 sec, wall time      0.10 sec
exp = [6.29517276e+03 1.56182892e+03 2.47507143e+02 5.35131598e+01
 4.75626404e+00 3.93422114e-01 8.59284461e+00 4.87933830e-01]
E = -506.5325821064058
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((8, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([1.5735952963858392e+03,2.3761303919145971e+02,5.2332977870138201e+01,4.7281081235122091e+00,3.9325830426169639e-01,8.5907170030661746e+00,4.9039633283239870e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "6s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:47:11 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  6295.17275602        1
[INPUT] 0    0    [1    /1   ]  1561.82892366        1
[INPUT] 0    0    [1    /1   ]  247.507142678        1
[INPUT] 0    0    [1    /1   ]  53.5131598222        1
[INPUT] 0    0    [1    /1   ]  4.75626403537        1
[INPUT] 0    0    [1    /1   ]  0.393422114311       1
[INPUT] 1    0    [1    /1   ]  8.5928446122         1
[INPUT] 1    0    [1    /1   ]  0.487933830147       1

nuclear repulsion = 0
number of shells = 8
number of NR pGTOs = 12
number of NR cGTOs = 12
basis = {'Ar': [[0, [6295.172756024513, 1.0]], [0, [1561.8289236556004, 1.0]], [0, [247.50714267782544, 1.0]], [0, [53.513159822212124, 1.0]], [0, [4.756264035371862, 1.0]], [0, [0.39342211431053914, 1.0]], [1, [8.592844612204615, 1.0]], [1, [0.48793383014704594, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [6295.17275602]
bas 1, expnt(s) = [1561.82892366]
bas 2, expnt(s) = [247.50714268]
bas 3, expnt(s) = [53.51315982]
bas 4, expnt(s) = [4.75626404]
bas 5, expnt(s) = [0.39342211]
bas 6, expnt(s) = [8.59284461]
bas 7, expnt(s) = [0.48793383]
CPU time:       100.03
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  1  1  1  0 36 37  0]
 [ 0  1  1  1  0 38 39  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 6.29517276e+03 1.78554485e+03 1.56182892e+03 6.27682644e+02
 2.47507143e+02 1.57654302e+02 5.35131598e+01 4.99873911e+01
 4.75626404e+00 8.13700328e+00 3.93422114e-01 1.25504443e+00
 8.59284461e+00 4.29195926e+01 4.87933830e-01 1.18969478e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.320349765897344
cond(S) = 16.797194204555385
E1 = -687.7673224570175  E_coul = 184.8787804939043
init E= -502.888541963113
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.684863941873544  LUMO = 190.140800416701
  mo_energy =
[-1.21104867e+02 -1.32779742e+01 -7.62105414e+00 -7.62105414e+00
 -7.62105414e+00 -1.65571573e+00 -6.84863942e-01 -6.84863942e-01
 -6.84863942e-01  1.90140800e+02  2.15156896e+03  1.27574767e+04]
E1 = -705.5497841561055  E_coul = 199.01731468654674
cycle= 1 E= -506.532469469559  delta_E= -3.64  |g|= 0.263  |ddm|= 0.292
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.351891
diis-c [-0.12382725  1.        ]
  HOMO = -0.240237098950818  LUMO = 191.552495438177
  mo_energy =
[-1.19697540e+02 -1.22405753e+01 -6.64427010e+00 -6.64427010e+00
 -6.64427010e+00 -1.16599578e+00 -2.40237099e-01 -2.40237099e-01
 -2.40237099e-01  1.91552495e+02  2.15291164e+03  1.27586562e+04]
E1 = -705.5408127832258  E_coul = 199.00823068713706
cycle= 2 E= -506.532582096089  delta_E= -0.000113  |g|= 0.00213  |ddm|= 0.00369
    CPU time for cycle= 2      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.00225922
diis-c [-3.92776826e-06 -3.09171574e-03  1.00309172e+00]
  HOMO = -0.24027578674773  LUMO = 191.550754956858
  mo_energy =
[-1.19700387e+02 -1.22408661e+01 -6.64469916e+00 -6.64469916e+00
 -6.64469916e+00 -1.16601178e+00 -2.40275787e-01 -2.40275787e-01
 -2.40275787e-01  1.91550755e+02  2.15290579e+03  1.27586481e+04]
E1 = -705.5407443017313  E_coul = 199.00816219532666
cycle= 3 E= -506.532582106405  delta_E= -1.03e-08  |g|= 2.01e-05  |ddm|= 3.14e-05
    CPU time for cycle= 3      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=2.78238e-05
diis-c [-8.87960756e-12  4.91093012e-05 -1.41719184e-02  1.01412281e+00]
  HOMO = -0.240275967275467  LUMO = 191.550750872549
  mo_energy =
[-1.19700398e+02 -1.22408675e+01 -6.64470166e+00 -6.64470166e+00
 -6.64470166e+00 -1.16601182e+00 -2.40275967e-01 -2.40275967e-01
 -2.40275967e-01  1.91550751e+02  2.15290579e+03  1.27586481e+04]
E1 = -705.5407438997498  E_coul = 199.00816179334447
cycle= 4 E= -506.532582106405  delta_E= -7.96e-13  |g|= 2.42e-08  |ddm|= 2.42e-07
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -705.5407438997498  E_coul = 199.00816179334447
  HOMO = -0.240275966996132  LUMO = 191.550750906872
  mo_energy =
[-1.19700398e+02 -1.22408675e+01 -6.64470166e+00 -6.64470166e+00
 -6.64470166e+00 -1.16601182e+00 -2.40275967e-01 -2.40275967e-01
 -2.40275967e-01  1.91550751e+02  2.15290579e+03  1.27586481e+04]
E1 = -705.5407439006237  E_coul = 199.00816179421795
Extra cycle  E= -506.532582106406  delta_E= -4.55e-13  |g|= 1.84e-10  |ddm|= 2.75e-10
    CPU time for scf_cycle      0.09 sec, wall time      0.10 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 16.797194204555385
E1 = -705.5407439006237  E_coul = 199.00816179421795
init E= -506.532582106406
    CPU time for initialize scf      0.06 sec, wall time      0.06 sec
  HOMO = -0.240275966994104  LUMO = 191.550750907118
  mo_energy =
[-1.19700398e+02 -1.22408675e+01 -6.64470166e+00 -6.64470166e+00
 -6.64470166e+00 -1.16601182e+00 -2.40275967e-01 -2.40275967e-01
 -2.40275967e-01  1.91550751e+02  2.15290579e+03  1.27586481e+04]
E1 = -705.5407439006298  E_coul = 199.00816179422435
cycle= 1 E= -506.532582106405  delta_E= 3.98e-13  |g|= 2.58e-12  |ddm|= 2.13e-12
    CPU time for cycle= 1      0.02 sec, wall time      0.02 sec
E1 = -705.5407439006298  E_coul = 199.00816179422435
  HOMO = -0.240275966994093  LUMO = 191.55075090712
  mo_energy =
[-1.19700398e+02 -1.22408675e+01 -6.64470166e+00 -6.64470166e+00
 -6.64470166e+00 -1.16601182e+00 -2.40275967e-01 -2.40275967e-01
 -2.40275967e-01  1.91550751e+02  2.15290579e+03  1.27586481e+04]
E1 = -705.5407439006302  E_coul = 199.00816179422455
Extra cycle  E= -506.532582106406  delta_E= -2.84e-13  |g|= 1.27e-12  |ddm|= 1.32e-14
    CPU time for scf_cycle      0.13 sec, wall time      0.13 sec
exp = [6.29517276e+03 1.56182892e+03 2.47507143e+02 5.35131598e+01
 4.75626404e+00 3.93422114e-01 8.59284461e+00 4.87933830e-01]
grad_E = [-8.66309915e-05  1.31923907e-03 -2.10663888e-03  5.11880484e-03
  1.82998593e-02 -2.16022696e-02  8.39916483e-03 -8.79896662e-02]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((8, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([1.5735952963858392e+03,2.3761303919145971e+02,5.2332977870138201e+01,4.7281081235122091e+00,3.9325830426169639e-01,8.5907170030661746e+00,4.9039633283239870e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "6s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:47:14 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  6296.14830417        1
[INPUT] 0    0    [1    /1   ]  1548.29174571        1
[INPUT] 0    0    [1    /1   ]  243.45191313         1
[INPUT] 0    0    [1    /1   ]  53.1182523265        1
[INPUT] 0    0    [1    /1   ]  4.76994893179        1
[INPUT] 0    0    [1    /1   ]  0.392679127703       1
[INPUT] 1    0    [1    /1   ]  8.59728521915        1
[INPUT] 1    0    [1    /1   ]  0.486459967427       1

nuclear repulsion = 0
number of shells = 8
number of NR pGTOs = 12
number of NR cGTOs = 12
basis = {'Ar': [[0, [6296.148304169422, 1.0]], [0, [1548.291745705117, 1.0]], [0, [243.4519131301205, 1.0]], [0, [53.11825232650466, 1.0]], [0, [4.769948931788888, 1.0]], [0, [0.39267912770310726, 1.0]], [1, [8.597285219150413, 1.0]], [1, [0.48645996742671854, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [6296.14830417]
bas 1, expnt(s) = [1548.29174571]
bas 2, expnt(s) = [243.45191313]
bas 3, expnt(s) = [53.11825233]
bas 4, expnt(s) = [4.76994893]
bas 5, expnt(s) = [0.39267913]
bas 6, expnt(s) = [8.59728522]
bas 7, expnt(s) = [0.48645997]
CPU time:       103.16
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  1  1  1  0 36 37  0]
 [ 0  1  1  1  0 38 39  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 6.29614830e+03 1.78575237e+03 1.54829175e+03 6.23597870e+02
 2.43451913e+02 1.55713017e+02 5.31182523e+01 4.97104686e+01
 4.76994893e+00 8.15455603e+00 3.92679128e-01 1.25326637e+00
 8.59728522e+00 4.29473193e+01 4.86459967e-01 1.18520446e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.32211720974682
cond(S) = 16.712452333355156
E1 = -687.73762016272  E_coul = 184.8551388917771
init E= -502.882481270943
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.686961442847488  LUMO = 186.653824648251
  mo_energy =
[-1.21108949e+02 -1.32793487e+01 -7.62189700e+00 -7.62189700e+00
 -7.62189700e+00 -1.65730568e+00 -6.86961443e-01 -6.86961443e-01
 -6.86961443e-01  1.86653825e+02  2.12489165e+03  1.27033570e+04]
E1 = -705.5191743844308  E_coul = 198.97782740111177
cycle= 1 E= -506.541346983319  delta_E= -3.66  |g|= 0.267  |ddm|= 0.29
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.358395
diis-c [-0.12844701  1.        ]
  HOMO = -0.243739952908961  LUMO = 188.06490480108
  mo_energy =
[-1.19700494e+02 -1.22431552e+01 -6.64609228e+00 -6.64609228e+00
 -6.64609228e+00 -1.16867076e+00 -2.43739953e-01 -2.43739953e-01
 -2.43739953e-01  1.88064905e+02  2.12623687e+03  1.27045351e+04]
E1 = -705.5100200033268  E_coul = 198.9685579051572
cycle= 2 E= -506.54146209817  delta_E= -0.000115  |g|= 0.00218  |ddm|= 0.00378
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00229568
diis-c [-4.04251085e-06 -3.10114936e-03  1.00310115e+00]
  HOMO = -0.243779609298106  LUMO = 188.063161264173
  mo_energy =
[-1.19703386e+02 -1.22434540e+01 -6.64653350e+00 -6.64653350e+00
 -6.64653350e+00 -1.16868717e+00 -2.43779609e-01 -2.43779609e-01
 -2.43779609e-01  1.88063161e+02  2.12623099e+03  1.27045269e+04]
E1 = -705.5099490094855  E_coul = 198.96848690044857
cycle= 3 E= -506.541462109037  delta_E= -1.09e-08  |g|= 2.09e-05  |ddm|= 3.27e-05
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=2.87199e-05
diis-c [-8.44761481e-12  5.06237995e-05 -1.44257505e-02  1.01437513e+00]
  HOMO = -0.243779798295065  LUMO = 188.063157026863
  mo_energy =
[-1.19703397e+02 -1.22434554e+01 -6.64653613e+00 -6.64653613e+00
 -6.64653613e+00 -1.16868722e+00 -2.43779798e-01 -2.43779798e-01
 -2.43779798e-01  1.88063157e+02  2.12623098e+03  1.27045269e+04]
E1 = -705.5099485806486  E_coul = 198.96848647161067
cycle= 4 E= -506.541462109038  delta_E= -1.02e-12  |g|= 2.47e-08  |ddm|= 2.57e-07
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -705.5099485806486  E_coul = 198.96848647161067
  HOMO = -0.243779798003078  LUMO = 188.06315706133
  mo_energy =
[-1.19703397e+02 -1.22434554e+01 -6.64653612e+00 -6.64653612e+00
 -6.64653612e+00 -1.16868722e+00 -2.43779798e-01 -2.43779798e-01
 -2.43779798e-01  1.88063157e+02  2.12623098e+03  1.27045269e+04]
E1 = -705.5099485815628  E_coul = 198.968486472525
Extra cycle  E= -506.541462109038  delta_E= 1.71e-13  |g|= 1.92e-10  |ddm|= 2.91e-10
    CPU time for scf_cycle      0.10 sec, wall time      0.10 sec
exp = [6.29614830e+03 1.54829175e+03 2.43451913e+02 5.31182523e+01
 4.76994893e+00 3.92679128e-01 8.59728522e+00 4.86459967e-01]
E = -506.54146210903775
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((8, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([1.5735952963858392e+03,2.3761303919145971e+02,5.2332977870138201e+01,4.7281081235122091e+00,3.9325830426169639e-01,8.5907170030661746e+00,4.9039633283239870e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "6s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:47:15 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  6296.14830417        1
[INPUT] 0    0    [1    /1   ]  1548.29174571        1
[INPUT] 0    0    [1    /1   ]  243.45191313         1
[INPUT] 0    0    [1    /1   ]  53.1182523265        1
[INPUT] 0    0    [1    /1   ]  4.76994893179        1
[INPUT] 0    0    [1    /1   ]  0.392679127703       1
[INPUT] 1    0    [1    /1   ]  8.59728521915        1
[INPUT] 1    0    [1    /1   ]  0.486459967427       1

nuclear repulsion = 0
number of shells = 8
number of NR pGTOs = 12
number of NR cGTOs = 12
basis = {'Ar': [[0, [6296.148304169422, 1.0]], [0, [1548.291745705117, 1.0]], [0, [243.4519131301205, 1.0]], [0, [53.11825232650466, 1.0]], [0, [4.769948931788888, 1.0]], [0, [0.39267912770310726, 1.0]], [1, [8.597285219150413, 1.0]], [1, [0.48645996742671854, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [6296.14830417]
bas 1, expnt(s) = [1548.29174571]
bas 2, expnt(s) = [243.45191313]
bas 3, expnt(s) = [53.11825233]
bas 4, expnt(s) = [4.76994893]
bas 5, expnt(s) = [0.39267913]
bas 6, expnt(s) = [8.59728522]
bas 7, expnt(s) = [0.48645997]
CPU time:       103.73
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  1  1  1  0 36 37  0]
 [ 0  1  1  1  0 38 39  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 6.29614830e+03 1.78575237e+03 1.54829175e+03 6.23597870e+02
 2.43451913e+02 1.55713017e+02 5.31182523e+01 4.97104686e+01
 4.76994893e+00 8.15455603e+00 3.92679128e-01 1.25326637e+00
 8.59728522e+00 4.29473193e+01 4.86459967e-01 1.18520446e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.32211720974682
cond(S) = 16.712452333355156
E1 = -687.73762016272  E_coul = 184.8551388917771
init E= -502.882481270943
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.686961442847488  LUMO = 186.653824648251
  mo_energy =
[-1.21108949e+02 -1.32793487e+01 -7.62189700e+00 -7.62189700e+00
 -7.62189700e+00 -1.65730568e+00 -6.86961443e-01 -6.86961443e-01
 -6.86961443e-01  1.86653825e+02  2.12489165e+03  1.27033570e+04]
E1 = -705.5191743844308  E_coul = 198.97782740111177
cycle= 1 E= -506.541346983319  delta_E= -3.66  |g|= 0.267  |ddm|= 0.29
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.358395
diis-c [-0.12844701  1.        ]
  HOMO = -0.243739952908961  LUMO = 188.06490480108
  mo_energy =
[-1.19700494e+02 -1.22431552e+01 -6.64609228e+00 -6.64609228e+00
 -6.64609228e+00 -1.16867076e+00 -2.43739953e-01 -2.43739953e-01
 -2.43739953e-01  1.88064905e+02  2.12623687e+03  1.27045351e+04]
E1 = -705.5100200033268  E_coul = 198.9685579051572
cycle= 2 E= -506.54146209817  delta_E= -0.000115  |g|= 0.00218  |ddm|= 0.00378
    CPU time for cycle= 2      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.00229568
diis-c [-4.04251085e-06 -3.10114936e-03  1.00310115e+00]
  HOMO = -0.243779609298106  LUMO = 188.063161264173
  mo_energy =
[-1.19703386e+02 -1.22434540e+01 -6.64653350e+00 -6.64653350e+00
 -6.64653350e+00 -1.16868717e+00 -2.43779609e-01 -2.43779609e-01
 -2.43779609e-01  1.88063161e+02  2.12623099e+03  1.27045269e+04]
E1 = -705.5099490094855  E_coul = 198.96848690044857
cycle= 3 E= -506.541462109037  delta_E= -1.09e-08  |g|= 2.09e-05  |ddm|= 3.27e-05
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=2.87199e-05
diis-c [-8.44761481e-12  5.06237995e-05 -1.44257505e-02  1.01437513e+00]
  HOMO = -0.243779798295065  LUMO = 188.063157026863
  mo_energy =
[-1.19703397e+02 -1.22434554e+01 -6.64653613e+00 -6.64653613e+00
 -6.64653613e+00 -1.16868722e+00 -2.43779798e-01 -2.43779798e-01
 -2.43779798e-01  1.88063157e+02  2.12623098e+03  1.27045269e+04]
E1 = -705.5099485806486  E_coul = 198.96848647161067
cycle= 4 E= -506.541462109038  delta_E= -1.02e-12  |g|= 2.47e-08  |ddm|= 2.57e-07
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -705.5099485806486  E_coul = 198.96848647161067
  HOMO = -0.243779798003078  LUMO = 188.06315706133
  mo_energy =
[-1.19703397e+02 -1.22434554e+01 -6.64653612e+00 -6.64653612e+00
 -6.64653612e+00 -1.16868722e+00 -2.43779798e-01 -2.43779798e-01
 -2.43779798e-01  1.88063157e+02  2.12623098e+03  1.27045269e+04]
E1 = -705.5099485815628  E_coul = 198.968486472525
Extra cycle  E= -506.541462109038  delta_E= 1.71e-13  |g|= 1.92e-10  |ddm|= 2.91e-10
    CPU time for scf_cycle      0.09 sec, wall time      0.10 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 16.712452333355156
E1 = -705.5099485815628  E_coul = 198.968486472525
init E= -506.541462109038
    CPU time for initialize scf      0.06 sec, wall time      0.06 sec
  HOMO = -0.243779798000912  LUMO = 188.06315706158
  mo_energy =
[-1.19703397e+02 -1.22434554e+01 -6.64653612e+00 -6.64653612e+00
 -6.64653612e+00 -1.16868722e+00 -2.43779798e-01 -2.43779798e-01
 -2.43779798e-01  1.88063157e+02  2.12623098e+03  1.27045269e+04]
E1 = -705.5099485815704  E_coul = 198.9684864725321
cycle= 1 E= -506.541462109038  delta_E= -5.12e-13  |g|= 1.73e-12  |ddm|= 2.32e-12
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -705.5099485815704  E_coul = 198.9684864725321
  HOMO = -0.243779798000891  LUMO = 188.063157061581
  mo_energy =
[-1.19703397e+02 -1.22434554e+01 -6.64653612e+00 -6.64653612e+00
 -6.64653612e+00 -1.16868722e+00 -2.43779798e-01 -2.43779798e-01
 -2.43779798e-01  1.88063157e+02  2.12623098e+03  1.27045269e+04]
E1 = -705.5099485815698  E_coul = 198.96848647253196
Extra cycle  E= -506.541462109038  delta_E= 3.98e-13  |g|= 1.46e-12  |ddm|= 1.9e-14
    CPU time for scf_cycle      0.12 sec, wall time      0.12 sec
exp = [6.29614830e+03 1.54829175e+03 2.43451913e+02 5.31182523e+01
 4.76994893e+00 3.92679128e-01 8.59728522e+00 4.86459967e-01]
grad_E = [-8.80146170e-05  1.41970115e-03 -3.75831800e-03  8.56749882e-03
  3.07090392e-02 -3.63109655e-02  1.40965911e-02 -1.47833899e-01]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((8, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([1.5735952963858392e+03,2.3761303919145971e+02,5.2332977870138201e+01,4.7281081235122091e+00,3.9325830426169639e-01,8.5907170030661746e+00,4.9039633283239870e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "6s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:47:18 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  6298.81214131        1
[INPUT] 0    0    [1    /1   ]  1511.11843113        1
[INPUT] 0    0    [1    /1   ]  235.900855846        1
[INPUT] 0    0    [1    /1   ]  52.384443085         1
[INPUT] 0    0    [1    /1   ]  4.7941515684         1
[INPUT] 0    0    [1    /1   ]  0.391400519636       1
[INPUT] 1    0    [1    /1   ]  8.60504907092        1
[INPUT] 1    0    [1    /1   ]  0.483903282395       1

nuclear repulsion = 0
number of shells = 8
number of NR pGTOs = 12
number of NR cGTOs = 12
basis = {'Ar': [[0, [6298.8121413115705, 1.0]], [0, [1511.1184311276895, 1.0]], [0, [235.90085584623057, 1.0]], [0, [52.38444308503798, 1.0]], [0, [4.794151568403673, 1.0]], [0, [0.39140051963599176, 1.0]], [1, [8.60504907092424, 1.0]], [1, [0.48390328239547326, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [6298.81214131]
bas 1, expnt(s) = [1511.11843113]
bas 2, expnt(s) = [235.90085585]
bas 3, expnt(s) = [52.38444309]
bas 4, expnt(s) = [4.79415157]
bas 5, expnt(s) = [0.39140052]
bas 6, expnt(s) = [8.60504907]
bas 7, expnt(s) = [0.48390328]
CPU time:       106.90
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  1  1  1  0 36 37  0]
 [ 0  1  1  1  0 38 39  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 6.29881214e+03 1.78631899e+03 1.51111843e+03 6.12334743e+02
 2.35900856e+02 1.52076518e+02 5.23844431e+01 4.91945251e+01
 4.79415157e+00 8.18556845e+00 3.91400520e-01 1.25020454e+00
 8.60504907e+00 4.29958047e+01 4.83903282e-01 1.17742324e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.325064959545088
cond(S) = 16.590918982392623
E1 = -687.6919205302952  E_coul = 184.81224562736563
init E= -502.87967490293
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.690632917197228  LUMO = 180.230248494913
  mo_energy =
[-1.21120466e+02 -1.32820124e+01 -7.62347655e+00 -7.62347655e+00
 -7.62347655e+00 -1.66016312e+00 -6.90632917e-01 -6.90632917e-01
 -6.90632917e-01  1.80230248e+02  2.06404873e+03  1.25677653e+04]
E1 = -705.4754481435908  E_coul = 198.91013050885255
cycle= 1 E= -506.565317634738  delta_E= -3.69  |g|= 0.274  |ddm|= 0.288
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.368199
diis-c [-0.13557071  1.        ]
  HOMO = -0.249781606701739  LUMO = 181.640310956562
  mo_energy =
[-1.19709607e+02 -1.22477730e+01 -6.64919840e+00 -6.64919840e+00
 -6.64919840e+00 -1.17333281e+00 -2.49781607e-01 -2.49781607e-01
 -2.49781607e-01  1.81640311e+02  2.06539985e+03  1.25689428e+04]
E1 = -705.4659268006119  E_coul = 198.90048907002807
cycle= 2 E= -506.565437730584  delta_E= -0.00012  |g|= 0.00227  |ddm|= 0.00395
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.0023664
diis-c [-4.28247925e-06 -3.12702710e-03  1.00312703e+00]
  HOMO = -0.249823222229089  LUMO = 181.638558565716
  mo_energy =
[-1.19712590e+02 -1.22480878e+01 -6.64966387e+00 -6.64966387e+00
 -6.64966387e+00 -1.17335006e+00 -2.49823222e-01 -2.49823222e-01
 -2.49823222e-01  1.81638559e+02  2.06539390e+03  1.25689344e+04]
E1 = -705.4658507149286  E_coul = 198.9004129723497
cycle= 3 E= -506.565437742579  delta_E= -1.2e-08  |g|= 2.24e-05  |ddm|= 3.52e-05
    CPU time for cycle= 3      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=3.04826e-05
diis-c [-7.91671596e-12  5.33913308e-05 -1.48861004e-02  1.01483271e+00]
  HOMO = -0.249823428145315  LUMO = 181.638554017602
  mo_energy =
[-1.19712603e+02 -1.22480894e+01 -6.64966675e+00 -6.64966675e+00
 -6.64966675e+00 -1.17335012e+00 -2.49823428e-01 -2.49823428e-01
 -2.49823428e-01  1.81638554e+02  2.06539389e+03  1.25689344e+04]
E1 = -705.4658502309958  E_coul = 198.90041248841553
cycle= 4 E= -506.56543774258  delta_E= -1.36e-12  |g|= 2.59e-08  |ddm|= 2.88e-07
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -705.4658502309958  E_coul = 198.90041248841553
  HOMO = -0.249823427824291  LUMO = 181.638554052505
  mo_energy =
[-1.19712603e+02 -1.22480894e+01 -6.64966675e+00 -6.64966675e+00
 -6.64966675e+00 -1.17335012e+00 -2.49823428e-01 -2.49823428e-01
 -2.49823428e-01  1.81638554e+02  2.06539389e+03  1.25689344e+04]
E1 = -705.465850231998  E_coul = 198.9004124894178
Extra cycle  E= -506.56543774258  delta_E=    0  |g|= 2.08e-10  |ddm|= 3.25e-10
    CPU time for scf_cycle      0.09 sec, wall time      0.10 sec
exp = [6.29881214e+03 1.51111843e+03 2.35900856e+02 5.23844431e+01
 4.79415157e+00 3.91400520e-01 8.60504907e+00 4.83903282e-01]
E = -506.56543774258023
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((8, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([1.5735952963858392e+03,2.3761303919145971e+02,5.2332977870138201e+01,4.7281081235122091e+00,3.9325830426169639e-01,8.5907170030661746e+00,4.9039633283239870e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "6s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:47:18 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  6298.81214131        1
[INPUT] 0    0    [1    /1   ]  1511.11843113        1
[INPUT] 0    0    [1    /1   ]  235.900855846        1
[INPUT] 0    0    [1    /1   ]  52.384443085         1
[INPUT] 0    0    [1    /1   ]  4.7941515684         1
[INPUT] 0    0    [1    /1   ]  0.391400519636       1
[INPUT] 1    0    [1    /1   ]  8.60504907092        1
[INPUT] 1    0    [1    /1   ]  0.483903282395       1

nuclear repulsion = 0
number of shells = 8
number of NR pGTOs = 12
number of NR cGTOs = 12
basis = {'Ar': [[0, [6298.8121413115705, 1.0]], [0, [1511.1184311276895, 1.0]], [0, [235.90085584623057, 1.0]], [0, [52.38444308503798, 1.0]], [0, [4.794151568403673, 1.0]], [0, [0.39140051963599176, 1.0]], [1, [8.60504907092424, 1.0]], [1, [0.48390328239547326, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [6298.81214131]
bas 1, expnt(s) = [1511.11843113]
bas 2, expnt(s) = [235.90085585]
bas 3, expnt(s) = [52.38444309]
bas 4, expnt(s) = [4.79415157]
bas 5, expnt(s) = [0.39140052]
bas 6, expnt(s) = [8.60504907]
bas 7, expnt(s) = [0.48390328]
CPU time:       107.48
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  1  1  1  0 36 37  0]
 [ 0  1  1  1  0 38 39  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 6.29881214e+03 1.78631899e+03 1.51111843e+03 6.12334743e+02
 2.35900856e+02 1.52076518e+02 5.23844431e+01 4.91945251e+01
 4.79415157e+00 8.18556845e+00 3.91400520e-01 1.25020454e+00
 8.60504907e+00 4.29958047e+01 4.83903282e-01 1.17742324e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.325064959545088
cond(S) = 16.590918982392623
E1 = -687.6919205302952  E_coul = 184.81224562736563
init E= -502.87967490293
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.690632917197228  LUMO = 180.230248494913
  mo_energy =
[-1.21120466e+02 -1.32820124e+01 -7.62347655e+00 -7.62347655e+00
 -7.62347655e+00 -1.66016312e+00 -6.90632917e-01 -6.90632917e-01
 -6.90632917e-01  1.80230248e+02  2.06404873e+03  1.25677653e+04]
E1 = -705.4754481435908  E_coul = 198.91013050885255
cycle= 1 E= -506.565317634738  delta_E= -3.69  |g|= 0.274  |ddm|= 0.288
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.368199
diis-c [-0.13557071  1.        ]
  HOMO = -0.249781606701739  LUMO = 181.640310956562
  mo_energy =
[-1.19709607e+02 -1.22477730e+01 -6.64919840e+00 -6.64919840e+00
 -6.64919840e+00 -1.17333281e+00 -2.49781607e-01 -2.49781607e-01
 -2.49781607e-01  1.81640311e+02  2.06539985e+03  1.25689428e+04]
E1 = -705.4659268006119  E_coul = 198.90048907002807
cycle= 2 E= -506.565437730584  delta_E= -0.00012  |g|= 0.00227  |ddm|= 0.00395
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.0023664
diis-c [-4.28247925e-06 -3.12702710e-03  1.00312703e+00]
  HOMO = -0.249823222229089  LUMO = 181.638558565716
  mo_energy =
[-1.19712590e+02 -1.22480878e+01 -6.64966387e+00 -6.64966387e+00
 -6.64966387e+00 -1.17335006e+00 -2.49823222e-01 -2.49823222e-01
 -2.49823222e-01  1.81638559e+02  2.06539390e+03  1.25689344e+04]
E1 = -705.4658507149286  E_coul = 198.9004129723497
cycle= 3 E= -506.565437742579  delta_E= -1.2e-08  |g|= 2.24e-05  |ddm|= 3.52e-05
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=3.04826e-05
diis-c [-7.91671596e-12  5.33913308e-05 -1.48861004e-02  1.01483271e+00]
  HOMO = -0.249823428145315  LUMO = 181.638554017602
  mo_energy =
[-1.19712603e+02 -1.22480894e+01 -6.64966675e+00 -6.64966675e+00
 -6.64966675e+00 -1.17335012e+00 -2.49823428e-01 -2.49823428e-01
 -2.49823428e-01  1.81638554e+02  2.06539389e+03  1.25689344e+04]
E1 = -705.4658502309958  E_coul = 198.90041248841553
cycle= 4 E= -506.56543774258  delta_E= -1.36e-12  |g|= 2.59e-08  |ddm|= 2.88e-07
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -705.4658502309958  E_coul = 198.90041248841553
  HOMO = -0.249823427824291  LUMO = 181.638554052505
  mo_energy =
[-1.19712603e+02 -1.22480894e+01 -6.64966675e+00 -6.64966675e+00
 -6.64966675e+00 -1.17335012e+00 -2.49823428e-01 -2.49823428e-01
 -2.49823428e-01  1.81638554e+02  2.06539389e+03  1.25689344e+04]
E1 = -705.465850231998  E_coul = 198.9004124894178
Extra cycle  E= -506.56543774258  delta_E=    0  |g|= 2.08e-10  |ddm|= 3.25e-10
    CPU time for scf_cycle      0.09 sec, wall time      0.10 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 16.590918982392623
E1 = -705.465850231998  E_coul = 198.9004124894178
init E= -506.56543774258
    CPU time for initialize scf      0.05 sec, wall time      0.05 sec
  HOMO = -0.249823427821808  LUMO = 181.638554052764
  mo_energy =
[-1.19712603e+02 -1.22480894e+01 -6.64966675e+00 -6.64966675e+00
 -6.64966675e+00 -1.17335012e+00 -2.49823428e-01 -2.49823428e-01
 -2.49823428e-01  1.81638554e+02  2.06539389e+03  1.25689344e+04]
E1 = -705.4658502320054  E_coul = 198.90041248942543
cycle= 1 E= -506.56543774258  delta_E= 2.27e-13  |g|= 4.86e-12  |ddm|= 2.72e-12
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -705.4658502320054  E_coul = 198.90041248942543
  HOMO = -0.249823427821798  LUMO = 181.638554052766
  mo_energy =
[-1.19712603e+02 -1.22480894e+01 -6.64966675e+00 -6.64966675e+00
 -6.64966675e+00 -1.17335012e+00 -2.49823428e-01 -2.49823428e-01
 -2.49823428e-01  1.81638554e+02  2.06539389e+03  1.25689344e+04]
E1 = -705.4658502320053  E_coul = 198.90041248942552
Extra cycle  E= -506.56543774258  delta_E= 2.27e-13  |g|= 1.35e-12  |ddm|= 2.25e-14
    CPU time for scf_cycle      0.12 sec, wall time      0.12 sec
exp = [6.29881214e+03 1.51111843e+03 2.35900856e+02 5.23844431e+01
 4.79415157e+00 3.91400520e-01 8.60504907e+00 4.83903282e-01]
grad_E = [-9.03744924e-05  1.60273926e-03 -6.66612460e-03  1.46798399e-02
  5.22745074e-02 -6.20530179e-02  2.40344983e-02 -2.52102862e-01]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((8, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([1.5735952963858392e+03,2.3761303919145971e+02,5.2332977870138201e+01,4.7281081235122091e+00,3.9325830426169639e-01,8.5907170030661746e+00,4.9039633283239870e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "6s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:47:21 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  6306.2523553         1
[INPUT] 0    0    [1    /1   ]  1406.95015984        1
[INPUT] 0    0    [1    /1   ]  220.577333538        1
[INPUT] 0    0    [1    /1   ]  50.8946505282        1
[INPUT] 0    0    [1    /1   ]  4.84084515346        1
[INPUT] 0    0    [1    /1   ]  0.389051139576       1
[INPUT] 1    0    [1    /1   ]  8.61970912814        1
[INPUT] 1    0    [1    /1   ]  0.479112009669       1

nuclear repulsion = 0
number of shells = 8
number of NR pGTOs = 12
number of NR cGTOs = 12
basis = {'Ar': [[0, [6306.252355297922, 1.0]], [0, [1406.9501598419274, 1.0]], [0, [220.57733353849414, 1.0]], [0, [50.89465052820427, 1.0]], [0, [4.840845153463972, 1.0]], [0, [0.38905113957550486, 1.0]], [1, [8.619709128140604, 1.0]], [1, [0.4791120096687542, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [6306.2523553]
bas 1, expnt(s) = [1406.95015984]
bas 2, expnt(s) = [220.57733354]
bas 3, expnt(s) = [50.89465053]
bas 4, expnt(s) = [4.84084515]
bas 5, expnt(s) = [0.38905114]
bas 6, expnt(s) = [8.61970913]
bas 7, expnt(s) = [0.47911201]
CPU time:       110.64
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  1  1  1  0 36 37  0]
 [ 0  1  1  1  0 38 39  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 6.30625236e+03 1.78790127e+03 1.40695016e+03 5.80395530e+02
 2.20577334e+02 1.44605791e+02 5.08946505e+01 4.81414455e+01
 4.84084515e+00 8.24528966e+00 3.89051140e-01 1.24457205e+00
 8.61970913e+00 4.30873869e+01 4.79112010e-01 1.16286879e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.330156833501263
cond(S) = 16.535105682761838
E1 = -687.6241882454004  E_coul = 184.7246486052487
init E= -502.899539640152
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.697636317168366  LUMO = 167.461922598241
  mo_energy =
[-1.21154118e+02 -1.32880720e+01 -7.62689793e+00 -7.62689793e+00
 -7.62689793e+00 -1.66588306e+00 -6.97636317e-01 -6.97636317e-01
 -6.97636317e-01  1.67461923e+02  1.91325073e+03  1.22067920e+04]
E1 = -705.4203578194193  E_coul = 198.78717476147904
cycle= 1 E= -506.63318305794  delta_E= -3.73  |g|= 0.286  |ddm|= 0.284
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.381333
diis-c [-0.14541449  1.        ]
  HOMO = -0.260972479635377  LUMO = 168.870546245841
  mo_energy =
[-1.19736826e+02 -1.22569060e+01 -6.65475957e+00 -6.65475957e+00
 -6.65475957e+00 -1.18214089e+00 -2.60972480e-01 -2.60972480e-01
 -2.60972480e-01  1.68870546e+02  1.91461827e+03  1.22079743e+04]
E1 = -705.4099928616598  E_coul = 198.77667834167647
cycle= 2 E= -506.633314519983  delta_E= -0.000131  |g|= 0.00246  |ddm|= 0.00436
    CPU time for cycle= 2      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.00251661
diis-c [-4.85243843e-06 -3.20151375e-03  1.00320151e+00]
  HOMO = -0.261018668936889  LUMO = 168.868766769853
  mo_energy =
[-1.19740019e+02 -1.22572576e+01 -6.65528082e+00 -6.65528082e+00
 -6.65528082e+00 -1.18216010e+00 -2.61018669e-01 -2.61018669e-01
 -2.61018669e-01  1.68868767e+02  1.91461220e+03  1.22079657e+04]
E1 = -705.4099046730162  E_coul = 198.7765901383026
cycle= 3 E= -506.633314534714  delta_E= -1.47e-08  |g|= 2.58e-05  |ddm|= 4.11e-05
    CPU time for cycle= 3      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=3.44262e-05
diis-c [-7.55175777e-12  5.91266748e-05 -1.58115761e-02  1.01575245e+00]
  HOMO = -0.261018914559242  LUMO = 168.868761465484
  mo_energy =
[-1.19740033e+02 -1.22572596e+01 -6.65528429e+00 -6.65528429e+00
 -6.65528429e+00 -1.18216016e+00 -2.61018915e-01 -2.61018915e-01
 -2.61018915e-01  1.68868761e+02  1.91461219e+03  1.22079657e+04]
E1 = -705.409904052759  E_coul = 198.7765895180439
cycle= 4 E= -506.633314534715  delta_E= -1.48e-12  |g|= 2.88e-08  |ddm|= 3.62e-07
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -705.409904052759  E_coul = 198.7765895180439
  HOMO = -0.261018914159174  LUMO = 168.868761501583
  mo_energy =
[-1.19740033e+02 -1.22572595e+01 -6.65528429e+00 -6.65528429e+00
 -6.65528429e+00 -1.18216016e+00 -2.61018914e-01 -2.61018914e-01
 -2.61018914e-01  1.68868762e+02  1.91461219e+03  1.22079657e+04]
E1 = -705.4099040539846  E_coul = 198.77658951926955
Extra cycle  E= -506.633314534715  delta_E=    0  |g|= 2.53e-10  |ddm|= 4.15e-10
    CPU time for scf_cycle      0.09 sec, wall time      0.10 sec
exp = [6.30625236e+03 1.40695016e+03 2.20577334e+02 5.08946505e+01
 4.84084515e+00 3.89051140e-01 8.61970913e+00 4.79112010e-01]
E = -506.63331453471505
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((8, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([1.5735952963858392e+03,2.3761303919145971e+02,5.2332977870138201e+01,4.7281081235122091e+00,3.9325830426169639e-01,8.5907170030661746e+00,4.9039633283239870e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "6s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:47:22 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  6306.2523553         1
[INPUT] 0    0    [1    /1   ]  1406.95015984        1
[INPUT] 0    0    [1    /1   ]  220.577333538        1
[INPUT] 0    0    [1    /1   ]  50.8946505282        1
[INPUT] 0    0    [1    /1   ]  4.84084515346        1
[INPUT] 0    0    [1    /1   ]  0.389051139576       1
[INPUT] 1    0    [1    /1   ]  8.61970912814        1
[INPUT] 1    0    [1    /1   ]  0.479112009669       1

nuclear repulsion = 0
number of shells = 8
number of NR pGTOs = 12
number of NR cGTOs = 12
basis = {'Ar': [[0, [6306.252355297922, 1.0]], [0, [1406.9501598419274, 1.0]], [0, [220.57733353849414, 1.0]], [0, [50.89465052820427, 1.0]], [0, [4.840845153463972, 1.0]], [0, [0.38905113957550486, 1.0]], [1, [8.619709128140604, 1.0]], [1, [0.4791120096687542, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [6306.2523553]
bas 1, expnt(s) = [1406.95015984]
bas 2, expnt(s) = [220.57733354]
bas 3, expnt(s) = [50.89465053]
bas 4, expnt(s) = [4.84084515]
bas 5, expnt(s) = [0.38905114]
bas 6, expnt(s) = [8.61970913]
bas 7, expnt(s) = [0.47911201]
CPU time:       111.21
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  1  1  1  0 36 37  0]
 [ 0  1  1  1  0 38 39  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 6.30625236e+03 1.78790127e+03 1.40695016e+03 5.80395530e+02
 2.20577334e+02 1.44605791e+02 5.08946505e+01 4.81414455e+01
 4.84084515e+00 8.24528966e+00 3.89051140e-01 1.24457205e+00
 8.61970913e+00 4.30873869e+01 4.79112010e-01 1.16286879e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.330156833501263
cond(S) = 16.535105682761838
E1 = -687.6241882454004  E_coul = 184.7246486052487
init E= -502.899539640152
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.697636317168366  LUMO = 167.461922598241
  mo_energy =
[-1.21154118e+02 -1.32880720e+01 -7.62689793e+00 -7.62689793e+00
 -7.62689793e+00 -1.66588306e+00 -6.97636317e-01 -6.97636317e-01
 -6.97636317e-01  1.67461923e+02  1.91325073e+03  1.22067920e+04]
E1 = -705.4203578194193  E_coul = 198.78717476147904
cycle= 1 E= -506.63318305794  delta_E= -3.73  |g|= 0.286  |ddm|= 0.284
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.381333
diis-c [-0.14541449  1.        ]
  HOMO = -0.260972479635377  LUMO = 168.870546245841
  mo_energy =
[-1.19736826e+02 -1.22569060e+01 -6.65475957e+00 -6.65475957e+00
 -6.65475957e+00 -1.18214089e+00 -2.60972480e-01 -2.60972480e-01
 -2.60972480e-01  1.68870546e+02  1.91461827e+03  1.22079743e+04]
E1 = -705.4099928616598  E_coul = 198.77667834167647
cycle= 2 E= -506.633314519983  delta_E= -0.000131  |g|= 0.00246  |ddm|= 0.00436
    CPU time for cycle= 2      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.00251661
diis-c [-4.85243843e-06 -3.20151375e-03  1.00320151e+00]
  HOMO = -0.261018668936889  LUMO = 168.868766769853
  mo_energy =
[-1.19740019e+02 -1.22572576e+01 -6.65528082e+00 -6.65528082e+00
 -6.65528082e+00 -1.18216010e+00 -2.61018669e-01 -2.61018669e-01
 -2.61018669e-01  1.68868767e+02  1.91461220e+03  1.22079657e+04]
E1 = -705.4099046730162  E_coul = 198.7765901383026
cycle= 3 E= -506.633314534714  delta_E= -1.47e-08  |g|= 2.58e-05  |ddm|= 4.11e-05
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=3.44262e-05
diis-c [-7.55175777e-12  5.91266748e-05 -1.58115761e-02  1.01575245e+00]
  HOMO = -0.261018914559242  LUMO = 168.868761465484
  mo_energy =
[-1.19740033e+02 -1.22572596e+01 -6.65528429e+00 -6.65528429e+00
 -6.65528429e+00 -1.18216016e+00 -2.61018915e-01 -2.61018915e-01
 -2.61018915e-01  1.68868761e+02  1.91461219e+03  1.22079657e+04]
E1 = -705.409904052759  E_coul = 198.7765895180439
cycle= 4 E= -506.633314534715  delta_E= -1.48e-12  |g|= 2.88e-08  |ddm|= 3.62e-07
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -705.409904052759  E_coul = 198.7765895180439
  HOMO = -0.261018914159174  LUMO = 168.868761501583
  mo_energy =
[-1.19740033e+02 -1.22572595e+01 -6.65528429e+00 -6.65528429e+00
 -6.65528429e+00 -1.18216016e+00 -2.61018914e-01 -2.61018914e-01
 -2.61018914e-01  1.68868762e+02  1.91461219e+03  1.22079657e+04]
E1 = -705.4099040539846  E_coul = 198.77658951926955
Extra cycle  E= -506.633314534715  delta_E=    0  |g|= 2.53e-10  |ddm|= 4.15e-10
    CPU time for scf_cycle      0.10 sec, wall time      0.10 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 16.535105682761838
E1 = -705.4099040539846  E_coul = 198.77658951926955
init E= -506.633314534715
    CPU time for initialize scf      0.06 sec, wall time      0.06 sec
  HOMO = -0.261018914155858  LUMO = 168.868761501864
  mo_energy =
[-1.19740033e+02 -1.22572595e+01 -6.65528429e+00 -6.65528429e+00
 -6.65528429e+00 -1.18216016e+00 -2.61018914e-01 -2.61018914e-01
 -2.61018914e-01  1.68868762e+02  1.91461219e+03  1.22079657e+04]
E1 = -705.4099040539954  E_coul = 198.77658951928024
cycle= 1 E= -506.633314534715  delta_E= -1.14e-13  |g|= 2.73e-12  |ddm|= 3.86e-12
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -705.4099040539954  E_coul = 198.77658951928024
  HOMO = -0.261018914155826  LUMO = 168.868761501866
  mo_energy =
[-1.19740033e+02 -1.22572595e+01 -6.65528429e+00 -6.65528429e+00
 -6.65528429e+00 -1.18216016e+00 -2.61018914e-01 -2.61018914e-01
 -2.61018914e-01  1.68868762e+02  1.91461219e+03  1.22079657e+04]
E1 = -705.4099040539958  E_coul = 198.77658951928044
Extra cycle  E= -506.633314534715  delta_E= -1.71e-13  |g|= 1.61e-12  |ddm|= 4.09e-14
    CPU time for scf_cycle      0.12 sec, wall time      0.12 sec
exp = [6.30625236e+03 1.40695016e+03 2.20577334e+02 5.08946505e+01
 4.84084515e+00 3.89051140e-01 8.61970913e+00 4.79112010e-01]
grad_E = [-9.39912052e-05  1.98233444e-03 -1.22532150e-02  2.65857607e-02
  9.26875997e-02 -1.11296108e-01  4.28455629e-02 -4.48943548e-01]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((8, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([1.5735952963858392e+03,2.3761303919145971e+02,5.2332977870138201e+01,4.7281081235122091e+00,3.9325830426169639e-01,8.5907170030661746e+00,4.9039633283239870e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "6s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:47:25 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  6329.70167954        1
[INPUT] 0    0    [1    /1   ]  1078.04452034        1
[INPUT] 0    0    [1    /1   ]  182.386339667        1
[INPUT] 0    0    [1    /1   ]  47.1625000459        1
[INPUT] 0    0    [1    /1   ]  4.95386099596        1
[INPUT] 0    0    [1    /1   ]  0.383813947011       1
[INPUT] 1    0    [1    /1   ]  8.65392405943        1
[INPUT] 1    0    [1    /1   ]  0.467950077079       1

nuclear repulsion = 0
number of shells = 8
number of NR pGTOs = 12
number of NR cGTOs = 12
basis = {'Ar': [[0, [6329.701679539761, 1.0]], [0, [1078.044520335984, 1.0]], [0, [182.38633966683352, 1.0]], [0, [47.162500045874125, 1.0]], [0, [4.953860995962938, 1.0]], [0, [0.38381394701100136, 1.0]], [1, [8.65392405942726, 1.0]], [1, [0.4679500770791475, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [6329.70167954]
bas 1, expnt(s) = [1078.04452034]
bas 2, expnt(s) = [182.38633967]
bas 3, expnt(s) = [47.16250005]
bas 4, expnt(s) = [4.953861]
bas 5, expnt(s) = [0.38381395]
bas 6, expnt(s) = [8.65392406]
bas 7, expnt(s) = [0.46795008]
CPU time:       114.51
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  1  1  1  0 36 37  0]
 [ 0  1  1  1  0 38 39  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 6.32970168e+03 1.79288509e+03 1.07804452e+03 4.75327068e+02
 1.82386340e+02 1.25388947e+02 4.71625000e+01 4.54687106e+01
 4.95386100e+00 8.38924517e+00 3.83813947e-01 1.23198548e+00
 8.65392406e+00 4.33012808e+01 4.67950077e-01 1.12910361e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.339678468520447
cond(S) = 18.037030550167284
E1 = -687.5609512912425  E_coul = 184.47694480920578
init E= -503.084006482037
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.714657420318181  LUMO = 137.287796355566
  mo_energy =
[-1.21272078e+02 -1.33077590e+01 -7.63780409e+00 -7.63780409e+00
 -7.63780409e+00 -1.68113119e+00 -7.14657420e-01 -7.14657420e-01
 -7.14657420e-01  1.37287796e+02  1.46853425e+03  1.10790958e+04]
E1 = -705.3840003664517  E_coul = 198.52262994770638
cycle= 1 E= -506.861370418745  delta_E= -3.78  |g|= 0.304  |ddm|= 0.282
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.385845
diis-c [-0.14887604  1.        ]
  HOMO = -0.286357700338542  LUMO = 138.695378116533
  mo_energy =
[-1.19828754e+02 -1.22800953e+01 -6.66618141e+00 -6.66618141e+00
 -6.66618141e+00 -1.20298668e+00 -2.86357700e-01 -2.86357700e-01
 -2.86357700e-01  1.38695378e+02  1.46996346e+03  1.10803210e+04]
E1 = -705.3708594268761  E_coul = 198.50932192099557
cycle= 2 E= -506.861537505881  delta_E= -0.000167  |g|= 0.00297  |ddm|= 0.00575
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.00288871
diis-c [-6.62355729e-06 -3.41178223e-03  1.00341178e+00]
  HOMO = -0.286419358435505  LUMO = 138.693478707483
  mo_energy =
[-1.19832626e+02 -1.22805719e+01 -6.66688741e+00 -6.66688741e+00
 -6.66688741e+00 -1.20301272e+00 -2.86419358e-01 -2.86419358e-01
 -2.86419358e-01  1.38693479e+02  1.46995705e+03  1.10803112e+04]
E1 = -705.3707276004346  E_coul = 198.50919006969542
cycle= 3 E= -506.861537530739  delta_E= -2.49e-08  |g|= 3.64e-05  |ddm|= 6.27e-05
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=4.64222e-05
diis-c [-9.66665971e-12  7.47865591e-05 -1.83031135e-02  1.01822833e+00]
  HOMO = -0.286419749400507  LUMO = 138.693470352813
  mo_energy =
[-1.19832648e+02 -1.22805751e+01 -6.66689307e+00 -6.66689307e+00
 -6.66689307e+00 -1.20301283e+00 -2.86419749e-01 -2.86419749e-01
 -2.86419749e-01  1.38693470e+02  1.46995704e+03  1.10803112e+04]
E1 = -705.3707264212497  E_coul = 198.50918889050678
cycle= 4 E= -506.861537530743  delta_E= -3.75e-12  |g|= 4.06e-08  |ddm|= 6.55e-07
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -705.3707264212497  E_coul = 198.50918889050678
  HOMO = -0.286419748586909  LUMO = 138.693470394497
  mo_energy =
[-1.19832648e+02 -1.22805751e+01 -6.66689306e+00 -6.66689306e+00
 -6.66689306e+00 -1.20301283e+00 -2.86419749e-01 -2.86419749e-01
 -2.86419749e-01  1.38693470e+02  1.46995704e+03  1.10803112e+04]
E1 = -705.3707264235168  E_coul = 198.50918889277406
Extra cycle  E= -506.861537530743  delta_E= 2.84e-13  |g|= 4.9e-10  |ddm|= 8.77e-10
    CPU time for scf_cycle      0.10 sec, wall time      0.10 sec
exp = [6.32970168e+03 1.07804452e+03 1.82386340e+02 4.71625000e+01
 4.95386100e+00 3.83813947e-01 8.65392406e+00 4.67950077e-01]
E = -506.8615375307427
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((8, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([1.5735952963858392e+03,2.3761303919145971e+02,5.2332977870138201e+01,4.7281081235122091e+00,3.9325830426169639e-01,8.5907170030661746e+00,4.9039633283239870e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "6s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:47:26 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  6329.70167954        1
[INPUT] 0    0    [1    /1   ]  1078.04452034        1
[INPUT] 0    0    [1    /1   ]  182.386339667        1
[INPUT] 0    0    [1    /1   ]  47.1625000459        1
[INPUT] 0    0    [1    /1   ]  4.95386099596        1
[INPUT] 0    0    [1    /1   ]  0.383813947011       1
[INPUT] 1    0    [1    /1   ]  8.65392405943        1
[INPUT] 1    0    [1    /1   ]  0.467950077079       1

nuclear repulsion = 0
number of shells = 8
number of NR pGTOs = 12
number of NR cGTOs = 12
basis = {'Ar': [[0, [6329.701679539761, 1.0]], [0, [1078.044520335984, 1.0]], [0, [182.38633966683352, 1.0]], [0, [47.162500045874125, 1.0]], [0, [4.953860995962938, 1.0]], [0, [0.38381394701100136, 1.0]], [1, [8.65392405942726, 1.0]], [1, [0.4679500770791475, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [6329.70167954]
bas 1, expnt(s) = [1078.04452034]
bas 2, expnt(s) = [182.38633967]
bas 3, expnt(s) = [47.16250005]
bas 4, expnt(s) = [4.953861]
bas 5, expnt(s) = [0.38381395]
bas 6, expnt(s) = [8.65392406]
bas 7, expnt(s) = [0.46795008]
CPU time:       115.13
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  1  1  1  0 36 37  0]
 [ 0  1  1  1  0 38 39  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 6.32970168e+03 1.79288509e+03 1.07804452e+03 4.75327068e+02
 1.82386340e+02 1.25388947e+02 4.71625000e+01 4.54687106e+01
 4.95386100e+00 8.38924517e+00 3.83813947e-01 1.23198548e+00
 8.65392406e+00 4.33012808e+01 4.67950077e-01 1.12910361e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.339678468520447
cond(S) = 18.037030550167284
E1 = -687.5609512912425  E_coul = 184.47694480920578
init E= -503.084006482037
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.714657420318181  LUMO = 137.287796355566
  mo_energy =
[-1.21272078e+02 -1.33077590e+01 -7.63780409e+00 -7.63780409e+00
 -7.63780409e+00 -1.68113119e+00 -7.14657420e-01 -7.14657420e-01
 -7.14657420e-01  1.37287796e+02  1.46853425e+03  1.10790958e+04]
E1 = -705.3840003664517  E_coul = 198.52262994770638
cycle= 1 E= -506.861370418745  delta_E= -3.78  |g|= 0.304  |ddm|= 0.282
    CPU time for cycle= 1      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.385845
diis-c [-0.14887604  1.        ]
  HOMO = -0.286357700338542  LUMO = 138.695378116533
  mo_energy =
[-1.19828754e+02 -1.22800953e+01 -6.66618141e+00 -6.66618141e+00
 -6.66618141e+00 -1.20298668e+00 -2.86357700e-01 -2.86357700e-01
 -2.86357700e-01  1.38695378e+02  1.46996346e+03  1.10803210e+04]
E1 = -705.3708594268761  E_coul = 198.50932192099557
cycle= 2 E= -506.861537505881  delta_E= -0.000167  |g|= 0.00297  |ddm|= 0.00575
    CPU time for cycle= 2      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.00288871
diis-c [-6.62355729e-06 -3.41178223e-03  1.00341178e+00]
  HOMO = -0.286419358435505  LUMO = 138.693478707483
  mo_energy =
[-1.19832626e+02 -1.22805719e+01 -6.66688741e+00 -6.66688741e+00
 -6.66688741e+00 -1.20301272e+00 -2.86419358e-01 -2.86419358e-01
 -2.86419358e-01  1.38693479e+02  1.46995705e+03  1.10803112e+04]
E1 = -705.3707276004346  E_coul = 198.50919006969542
cycle= 3 E= -506.861537530739  delta_E= -2.49e-08  |g|= 3.64e-05  |ddm|= 6.27e-05
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=4.64222e-05
diis-c [-9.66665971e-12  7.47865591e-05 -1.83031135e-02  1.01822833e+00]
  HOMO = -0.286419749400507  LUMO = 138.693470352813
  mo_energy =
[-1.19832648e+02 -1.22805751e+01 -6.66689307e+00 -6.66689307e+00
 -6.66689307e+00 -1.20301283e+00 -2.86419749e-01 -2.86419749e-01
 -2.86419749e-01  1.38693470e+02  1.46995704e+03  1.10803112e+04]
E1 = -705.3707264212497  E_coul = 198.50918889050678
cycle= 4 E= -506.861537530743  delta_E= -3.75e-12  |g|= 4.06e-08  |ddm|= 6.55e-07
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -705.3707264212497  E_coul = 198.50918889050678
  HOMO = -0.286419748586909  LUMO = 138.693470394497
  mo_energy =
[-1.19832648e+02 -1.22805751e+01 -6.66689306e+00 -6.66689306e+00
 -6.66689306e+00 -1.20301283e+00 -2.86419749e-01 -2.86419749e-01
 -2.86419749e-01  1.38693470e+02  1.46995704e+03  1.10803112e+04]
E1 = -705.3707264235168  E_coul = 198.50918889277406
Extra cycle  E= -506.861537530743  delta_E= 2.84e-13  |g|= 4.9e-10  |ddm|= 8.77e-10
    CPU time for scf_cycle      0.09 sec, wall time      0.10 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 18.037030550167284
E1 = -705.3707264235168  E_coul = 198.50918889277406
init E= -506.861537530743
    CPU time for initialize scf      0.07 sec, wall time      0.07 sec
  HOMO = -0.286419748579097  LUMO = 138.693470394873
  mo_energy =
[-1.19832648e+02 -1.22805751e+01 -6.66689306e+00 -6.66689306e+00
 -6.66689306e+00 -1.20301283e+00 -2.86419749e-01 -2.86419749e-01
 -2.86419749e-01  1.38693470e+02  1.46995704e+03  1.10803112e+04]
E1 = -705.3707264235421  E_coul = 198.5091888927991
cycle= 1 E= -506.861537530743  delta_E= -3.41e-13  |g|= 7.54e-12  |ddm|= 1.05e-11
    CPU time for cycle= 1      0.02 sec, wall time      0.02 sec
E1 = -705.3707264235421  E_coul = 198.5091888927991
  HOMO = -0.286419748579007  LUMO = 138.693470394875
  mo_energy =
[-1.19832648e+02 -1.22805751e+01 -6.66689306e+00 -6.66689306e+00
 -6.66689306e+00 -1.20301283e+00 -2.86419749e-01 -2.86419749e-01
 -2.86419749e-01  1.38693470e+02  1.46995704e+03  1.10803112e+04]
E1 = -705.3707264235421  E_coul = 198.50918889279922
Extra cycle  E= -506.861537530743  delta_E= 1.14e-13  |g|= 3.39e-12  |ddm|= 1.46e-13
    CPU time for scf_cycle      0.16 sec, wall time      0.16 sec
exp = [6.32970168e+03 1.07804452e+03 1.82386340e+02 4.71625000e+01
 4.95386100e+00 3.83813947e-01 8.65392406e+00 4.67950077e-01]
grad_E = [-7.79462301e-05  2.90653364e-03 -2.45859200e-02  5.35626378e-02
  1.86628175e-01 -2.32915407e-01  8.75582645e-02 -9.14516676e-01]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((8, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([1.5735952963858392e+03,2.3761303919145971e+02,5.2332977870138201e+01,4.7281081235122091e+00,3.9325830426169639e-01,8.5907170030661746e+00,4.9039633283239870e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "6s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:47:29 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  6406.49395059        1
[INPUT] 0    0    [1    /1   ]  1e-09                1
[INPUT] 0    0    [1    /1   ]  73.155160149         1
[INPUT] 0    0    [1    /1   ]  36.3788269437        1
[INPUT] 0    0    [1    /1   ]  5.25812923816        1
[INPUT] 0    0    [1    /1   ]  0.371620526471       1
[INPUT] 1    0    [1    /1   ]  8.74147081701        1
[INPUT] 1    0    [1    /1   ]  0.439429846364       1

nuclear repulsion = 0
number of shells = 8
number of NR pGTOs = 12
number of NR cGTOs = 12
basis = {'Ar': [[0, [6406.493950590849, 1.0]], [0, [1e-09, 1.0]], [0, [73.15516014899666, 1.0]], [0, [36.3788269436758, 1.0]], [0, [5.258129238164888, 1.0]], [0, [0.37162052647050786, 1.0]], [1, [8.741470817005672, 1.0]], [1, [0.43942984636442683, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [6406.49395059]
bas 1, expnt(s) = [1.e-09]
bas 2, expnt(s) = [73.15516015]
bas 3, expnt(s) = [36.37882694]
bas 4, expnt(s) = [5.25812924]
bas 5, expnt(s) = [0.37162053]
bas 6, expnt(s) = [8.74147082]
bas 7, expnt(s) = [0.43942985]
CPU time:       118.46
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  1  1  1  0 36 37  0]
 [ 0  1  1  1  0 38 39  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 6.40649395e+03 1.80917401e+03 1.00000000e-09 4.49277867e-07
 7.31551601e+01 6.31973326e+01 3.63788269e+01 3.74241153e+01
 5.25812924e+00 8.77280481e+00 3.71620526e-01 1.20251304e+00
 8.74147082e+00 4.38495391e+01 4.39429846e-01 1.04374962e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.262684542194478
cond(S) = 38.54762377270391
E1 = -526.204431504886  E_coul = 178.85078529535053
init E= -347.353646209535
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.828547766613353  LUMO = -3.72053913301879e-05
  mo_energy =
[-1.01081554e+02 -1.13819122e+01 -7.93472509e+00 -7.93472509e+00
 -7.93472509e+00 -1.57932468e+00 -8.28547767e-01 -8.28547767e-01
 -8.28547767e-01 -3.72053913e-05  6.85897170e+01  7.53183748e+03]
E1 = -654.6844339598116  E_coul = 195.39045459301434
cycle= 1 E= -459.293979366797  delta_E= -112  |g|= 1.88  |ddm|= 0.55
    CPU time for cycle= 1      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=3.44868
diis-c [-11.89342644   1.        ]
  HOMO = -0.349690161418039  LUMO = 1.50059601449522e-09
  mo_energy =
[-9.95639135e+01 -1.01524371e+01 -6.72554585e+00 -6.72554585e+00
 -6.72554585e+00 -1.01070752e+00 -3.49690161e-01 -3.49690161e-01
 -3.49690161e-01  1.50059601e-09  7.02641048e+01  7.53223049e+03]
E1 = -654.6164743457523  E_coul = 195.3204507791098
cycle= 2 E= -459.296023566642  delta_E= -0.00204  |g|= 0.0119  |ddm|= 0.0506
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00696405
diis-c [-1.72997403e-05 -1.62224345e-03  1.00162224e+00]
  HOMO = -0.350018910854482  LUMO = 1.50058559392091e-09
  mo_energy =
[-9.95822678e+01 -1.01550824e+01 -6.72985275e+00 -6.72985275e+00
 -6.72985275e+00 -1.01087835e+00 -3.50018911e-01 -3.50018911e-01
 -3.50018911e-01  1.50058559e-09  7.02575382e+01  7.53218846e+03]
E1 = -654.6150519003602  E_coul = 195.31902753848385
cycle= 3 E= -459.296024361876  delta_E= -7.95e-07  |g|= 0.000238  |ddm|= 0.00101
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=9.50246e-05
diis-c [-2.35598305e-10  3.70512230e-05 -2.31015540e-02  1.02306450e+00]
  HOMO = -0.350024216511257  LUMO = 1.50054274230789e-09
  mo_energy =
[-9.95826293e+01 -1.01551290e+01 -6.72993398e+00 -6.72993398e+00
 -6.72993398e+00 -1.01088067e+00 -3.50024217e-01 -3.50024217e-01
 -3.50024217e-01  1.50054274e-09  7.02574088e+01  7.53218766e+03]
E1 = -654.6150229332941  E_coul = 195.31899857108138
cycle= 4 E= -459.296024362213  delta_E= -3.36e-10  |g|= 4.35e-07  |ddm|= 2.05e-05
    CPU time for cycle= 4      0.02 sec, wall time      0.04 sec
E1 = -654.6150229332941  E_coul = 195.31899857108138
  HOMO = -0.350024202006388  LUMO = 1.500547405248e-09
  mo_energy =
[-9.95826291e+01 -1.01551289e+01 -6.72993389e+00 -6.72993389e+00
 -6.72993389e+00 -1.01088066e+00 -3.50024202e-01 -3.50024202e-01
 -3.50024202e-01  1.50054741e-09  7.02574089e+01  7.53218767e+03]
E1 = -654.6150229443359  E_coul = 195.31899858212358
Extra cycle  E= -459.296024362212  delta_E= 3.98e-13  |g|= 8.13e-09  |ddm|= 2.31e-08
    CPU time for scf_cycle      0.11 sec, wall time      0.13 sec
exp = [6.40649395e+03 1.00000000e-09 7.31551601e+01 3.63788269e+01
 5.25812924e+00 3.71620526e-01 8.74147082e+00 4.39429846e-01]
E = -459.29602436221234
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((8, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([1.5735952963858392e+03,2.3761303919145971e+02,5.2332977870138201e+01,4.7281081235122091e+00,3.9325830426169639e-01,8.5907170030661746e+00,4.9039633283239870e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "6s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:47:30 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  6337.38090664        1
[INPUT] 0    0    [1    /1   ]  970.240068302        1
[INPUT] 0    0    [1    /1   ]  171.463221715        1
[INPUT] 0    0    [1    /1   ]  46.0841327357        1
[INPUT] 0    0    [1    /1   ]  4.98428782018        1
[INPUT] 0    0    [1    /1   ]  0.382594604957       1
[INPUT] 1    0    [1    /1   ]  8.66267873519        1
[INPUT] 1    0    [1    /1   ]  0.465098054008       1

nuclear repulsion = 0
number of shells = 8
number of NR pGTOs = 12
number of NR cGTOs = 12
basis = {'Ar': [[0, [6337.38090664487, 1.0]], [0, [970.2400683024857, 1.0]], [0, [171.46322171504983, 1.0]], [0, [46.08413273565429, 1.0]], [0, [4.984287820183133, 1.0]], [0, [0.382594604956952, 1.0]], [1, [8.6626787351851, 1.0]], [1, [0.4650980540076754, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [6337.38090664]
bas 1, expnt(s) = [970.2400683]
bas 2, expnt(s) = [171.46322172]
bas 3, expnt(s) = [46.08413274]
bas 4, expnt(s) = [4.98428782]
bas 5, expnt(s) = [0.3825946]
bas 6, expnt(s) = [8.66267874]
bas 7, expnt(s) = [0.46509805]
CPU time:       119.09
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  1  1  1  0 36 37  0]
 [ 0  1  1  1  0 38 39  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 6.33738091e+03 1.79451620e+03 9.70240068e+02 4.39212234e+02
 1.71463222e+02 1.19713536e+02 4.60841327e+01 4.46867313e+01
 4.98428782e+00 8.42786090e+00 3.82594605e-01 1.22904888e+00
 8.66267874e+00 4.33560445e+01 4.65098054e-01 1.12050822e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.341571644720638
cond(S) = 19.14211107578975
E1 = -687.6217391083477  E_coul = 184.4051222903352
init E= -503.216616818012
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.719125602975649  LUMO = 129.141361790255
  mo_energy =
[-1.21318701e+02 -1.33141382e+01 -7.64119895e+00 -7.64119895e+00
 -7.64119895e+00 -1.68548700e+00 -7.19125603e-01 -7.19125603e-01
 -7.19125603e-01  1.29141362e+02  1.32819272e+03  1.07075945e+04]
E1 = -705.4128442659951  E_coul = 198.4614461150663
cycle= 1 E= -506.951398150929  delta_E= -3.73  |g|= 0.302  |ddm|= 0.283
    CPU time for cycle= 1      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.37868
diis-c [-0.14339879  1.        ]
  HOMO = -0.292646616677646  LUMO = 130.547933163569
  mo_energy =
[-1.19866445e+02 -1.22864889e+01 -6.66860476e+00 -6.66860476e+00
 -6.66860476e+00 -1.20837681e+00 -2.92646617e-01 -2.92646617e-01
 -2.92646617e-01  1.30547933e+02  1.32964173e+03  1.07088390e+04]
E1 = -705.39863103911  E_coul = 198.44705376019948
cycle= 2 E= -506.951577278911  delta_E= -0.000179  |g|= 0.00311  |ddm|= 0.00629
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00297338
diis-c [-7.19571207e-06 -3.39885813e-03  1.00339886e+00]
  HOMO = -0.292714240663773  LUMO = 130.545969907259
  mo_energy =
[-1.19870583e+02 -1.22870134e+01 -6.66938044e+00 -6.66938044e+00
 -6.66938044e+00 -1.20840555e+00 -2.92714241e-01 -2.92714241e-01
 -2.92714241e-01  1.30545970e+02  1.32963516e+03  1.07088288e+04]
E1 = -705.3984815485364  E_coul = 198.4469042408337
cycle= 3 E= -506.951577307703  delta_E= -2.88e-08  |g|= 4.01e-05  |ddm|= 7.13e-05
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=5.05365e-05
diis-c [-1.29144837e-11  7.82453166e-05 -1.91340204e-02  1.01905578e+00]
  HOMO = -0.292714695764308  LUMO = 130.545960043056
  mo_energy =
[-1.19870609e+02 -1.22870172e+01 -6.66938704e+00 -6.66938704e+00
 -6.66938704e+00 -1.20840568e+00 -2.92714696e-01 -2.92714696e-01
 -2.92714696e-01  1.30545960e+02  1.32963514e+03  1.07088287e+04]
E1 = -705.398480112565  E_coul = 198.4469028048575
cycle= 4 E= -506.951577307708  delta_E= -4.83e-12  |g|= 4.86e-08  |ddm|= 7.86e-07
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -705.398480112565  E_coul = 198.4469028048575
  HOMO = -0.292714694644012  LUMO = 130.545960090554
  mo_energy =
[-1.19870609e+02 -1.22870172e+01 -6.66938703e+00 -6.66938703e+00
 -6.66938703e+00 -1.20840568e+00 -2.92714695e-01 -2.92714695e-01
 -2.92714695e-01  1.30545960e+02  1.32963514e+03  1.07088287e+04]
E1 = -705.3984801155476  E_coul = 198.44690280784036
Extra cycle  E= -506.951577307707  delta_E= 3.41e-13  |g|= 6.58e-10  |ddm|= 1.21e-09
    CPU time for scf_cycle      0.10 sec, wall time      0.11 sec
exp = [6.33738091e+03 9.70240068e+02 1.71463222e+02 4.60841327e+01
 4.98428782e+00 3.82594605e-01 8.66267874e+00 4.65098054e-01]
E = -506.9515773077072
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((8, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([1.5735952963858392e+03,2.3761303919145971e+02,5.2332977870138201e+01,4.7281081235122091e+00,3.9325830426169639e-01,8.5907170030661746e+00,4.9039633283239870e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "6s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:47:31 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  6337.38090664        1
[INPUT] 0    0    [1    /1   ]  970.240068302        1
[INPUT] 0    0    [1    /1   ]  171.463221715        1
[INPUT] 0    0    [1    /1   ]  46.0841327357        1
[INPUT] 0    0    [1    /1   ]  4.98428782018        1
[INPUT] 0    0    [1    /1   ]  0.382594604957       1
[INPUT] 1    0    [1    /1   ]  8.66267873519        1
[INPUT] 1    0    [1    /1   ]  0.465098054008       1

nuclear repulsion = 0
number of shells = 8
number of NR pGTOs = 12
number of NR cGTOs = 12
basis = {'Ar': [[0, [6337.38090664487, 1.0]], [0, [970.2400683024857, 1.0]], [0, [171.46322171504983, 1.0]], [0, [46.08413273565429, 1.0]], [0, [4.984287820183133, 1.0]], [0, [0.382594604956952, 1.0]], [1, [8.6626787351851, 1.0]], [1, [0.4650980540076754, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [6337.38090664]
bas 1, expnt(s) = [970.2400683]
bas 2, expnt(s) = [171.46322172]
bas 3, expnt(s) = [46.08413274]
bas 4, expnt(s) = [4.98428782]
bas 5, expnt(s) = [0.3825946]
bas 6, expnt(s) = [8.66267874]
bas 7, expnt(s) = [0.46509805]
CPU time:       119.71
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  1  1  1  0 36 37  0]
 [ 0  1  1  1  0 38 39  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 6.33738091e+03 1.79451620e+03 9.70240068e+02 4.39212234e+02
 1.71463222e+02 1.19713536e+02 4.60841327e+01 4.46867313e+01
 4.98428782e+00 8.42786090e+00 3.82594605e-01 1.22904888e+00
 8.66267874e+00 4.33560445e+01 4.65098054e-01 1.12050822e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.341571644720638
cond(S) = 19.14211107578975
E1 = -687.6217391083477  E_coul = 184.4051222903352
init E= -503.216616818012
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.719125602975649  LUMO = 129.141361790255
  mo_energy =
[-1.21318701e+02 -1.33141382e+01 -7.64119895e+00 -7.64119895e+00
 -7.64119895e+00 -1.68548700e+00 -7.19125603e-01 -7.19125603e-01
 -7.19125603e-01  1.29141362e+02  1.32819272e+03  1.07075945e+04]
E1 = -705.4128442659951  E_coul = 198.4614461150663
cycle= 1 E= -506.951398150929  delta_E= -3.73  |g|= 0.302  |ddm|= 0.283
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.37868
diis-c [-0.14339879  1.        ]
  HOMO = -0.292646616677646  LUMO = 130.547933163569
  mo_energy =
[-1.19866445e+02 -1.22864889e+01 -6.66860476e+00 -6.66860476e+00
 -6.66860476e+00 -1.20837681e+00 -2.92646617e-01 -2.92646617e-01
 -2.92646617e-01  1.30547933e+02  1.32964173e+03  1.07088390e+04]
E1 = -705.39863103911  E_coul = 198.44705376019948
cycle= 2 E= -506.951577278911  delta_E= -0.000179  |g|= 0.00311  |ddm|= 0.00629
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00297338
diis-c [-7.19571207e-06 -3.39885813e-03  1.00339886e+00]
  HOMO = -0.292714240663773  LUMO = 130.545969907259
  mo_energy =
[-1.19870583e+02 -1.22870134e+01 -6.66938044e+00 -6.66938044e+00
 -6.66938044e+00 -1.20840555e+00 -2.92714241e-01 -2.92714241e-01
 -2.92714241e-01  1.30545970e+02  1.32963516e+03  1.07088288e+04]
E1 = -705.3984815485364  E_coul = 198.4469042408337
cycle= 3 E= -506.951577307703  delta_E= -2.88e-08  |g|= 4.01e-05  |ddm|= 7.13e-05
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=5.05365e-05
diis-c [-1.29144837e-11  7.82453166e-05 -1.91340204e-02  1.01905578e+00]
  HOMO = -0.292714695764308  LUMO = 130.545960043056
  mo_energy =
[-1.19870609e+02 -1.22870172e+01 -6.66938704e+00 -6.66938704e+00
 -6.66938704e+00 -1.20840568e+00 -2.92714696e-01 -2.92714696e-01
 -2.92714696e-01  1.30545960e+02  1.32963514e+03  1.07088287e+04]
E1 = -705.398480112565  E_coul = 198.4469028048575
cycle= 4 E= -506.951577307708  delta_E= -4.83e-12  |g|= 4.86e-08  |ddm|= 7.86e-07
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -705.398480112565  E_coul = 198.4469028048575
  HOMO = -0.292714694644012  LUMO = 130.545960090554
  mo_energy =
[-1.19870609e+02 -1.22870172e+01 -6.66938703e+00 -6.66938703e+00
 -6.66938703e+00 -1.20840568e+00 -2.92714695e-01 -2.92714695e-01
 -2.92714695e-01  1.30545960e+02  1.32963514e+03  1.07088287e+04]
E1 = -705.3984801155476  E_coul = 198.44690280784036
Extra cycle  E= -506.951577307707  delta_E= 3.41e-13  |g|= 6.58e-10  |ddm|= 1.21e-09
    CPU time for scf_cycle      0.09 sec, wall time      0.10 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 19.14211107578975
E1 = -705.3984801155476  E_coul = 198.44690280784036
init E= -506.951577307707
    CPU time for initialize scf      0.05 sec, wall time      0.05 sec
  HOMO = -0.292714694632928  LUMO = 130.545960091001
  mo_energy =
[-1.19870609e+02 -1.22870172e+01 -6.66938703e+00 -6.66938703e+00
 -6.66938703e+00 -1.20840568e+00 -2.92714695e-01 -2.92714695e-01
 -2.92714695e-01  1.30545960e+02  1.32963514e+03  1.07088287e+04]
E1 = -705.398480115583  E_coul = 198.44690280787538
cycle= 1 E= -506.951577307708  delta_E= -3.41e-13  |g|= 1.1e-11  |ddm|= 1.55e-11
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -705.398480115583  E_coul = 198.44690280787538
  HOMO = -0.292714694632792  LUMO = 130.545960091005
  mo_energy =
[-1.19870609e+02 -1.22870172e+01 -6.66938703e+00 -6.66938703e+00
 -6.66938703e+00 -1.20840568e+00 -2.92714695e-01 -2.92714695e-01
 -2.92714695e-01  1.30545960e+02  1.32963514e+03  1.07088287e+04]
E1 = -705.3984801155833  E_coul = 198.44690280787577
Extra cycle  E= -506.951577307708  delta_E=    0  |g|= 1.41e-12  |ddm|= 2.14e-13
    CPU time for scf_cycle      0.12 sec, wall time      0.12 sec
exp = [6.33738091e+03 9.70240068e+02 1.71463222e+02 4.60841327e+01
 4.98428782e+00 3.82594605e-01 8.66267874e+00 4.65098054e-01]
grad_E = [-5.47380653e-05  2.92576756e-03 -2.59327267e-02  5.76195216e-02
  2.11385312e-01 -2.64120570e-01  9.91108579e-02 -1.03481727e+00]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((8, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([1.5735952963858392e+03,2.3761303919145971e+02,5.2332977870138201e+01,4.7281081235122091e+00,3.9325830426169639e-01,8.5907170030661746e+00,4.9039633283239870e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "6s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:47:34 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  6406.46182028        1
[INPUT] 0    0    [1    /1   ]  1e-09                1
[INPUT] 0    0    [1    /1   ]  80.8265515505        1
[INPUT] 0    0    [1    /1   ]  36.6604355608        1
[INPUT] 0    0    [1    /1   ]  5.09453994705        1
[INPUT] 0    0    [1    /1   ]  0.380501910095       1
[INPUT] 1    0    [1    /1   ]  8.6915654231         1
[INPUT] 1    0    [1    /1   ]  0.45847816713        1

nuclear repulsion = 0
number of shells = 8
number of NR pGTOs = 12
number of NR cGTOs = 12
basis = {'Ar': [[0, [6406.461820276468, 1.0]], [0, [1e-09, 1.0]], [0, [80.826551550521, 1.0]], [0, [36.66043556084295, 1.0]], [0, [5.0945399470479185, 1.0]], [0, [0.3805019100946342, 1.0]], [1, [8.691565423104537, 1.0]], [1, [0.4584781671300389, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [6406.46182028]
bas 1, expnt(s) = [1.e-09]
bas 2, expnt(s) = [80.82655155]
bas 3, expnt(s) = [36.66043556]
bas 4, expnt(s) = [5.09453995]
bas 5, expnt(s) = [0.38050191]
bas 6, expnt(s) = [8.69156542]
bas 7, expnt(s) = [0.45847817]
CPU time:       122.88
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  1  1  1  0 36 37  0]
 [ 0  1  1  1  0 38 39  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 6.40646182e+03 1.80916720e+03 1.00000000e-09 4.49277867e-07
 8.08265516e+01 6.81052453e+01 3.66604356e+01 3.76411809e+01
 5.09453995e+00 8.56729563e+00 3.80501910e-01 1.22400349e+00
 8.69156542e+00 4.35368393e+01 4.58478167e-01 1.10060813e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.27309105877026
cond(S) = 29.655739325713366
E1 = -543.8789904645214  E_coul = 180.310472992983
init E= -363.568517471538
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.785806648493238  LUMO = -3.66802509102227e-05
  mo_energy =
[-1.02778203e+02 -1.16119427e+01 -7.84695759e+00 -7.84695759e+00
 -7.84695759e+00 -1.56872779e+00 -7.85806648e-01 -7.85806648e-01
 -7.85806648e-01 -3.66802509e-05  7.17631319e+01  7.54892238e+03]
E1 = -660.1316944100048  E_coul = 196.31734006243735
cycle= 1 E= -463.814354347567  delta_E= -100  |g|= 1.82  |ddm|= 0.468
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=3.32414
diis-c [-11.04990224   1.        ]
  HOMO = -0.307831250686352  LUMO = 1.50055016182372e-09
  mo_energy =
[-1.01330096e+02 -1.04193683e+01 -6.68742493e+00 -6.68742493e+00
 -6.68742493e+00 -1.01413726e+00 -3.07831251e-01 -3.07831251e-01
 -3.07831251e-01  1.50055016e-09  7.33730824e+01  7.54921444e+03]
E1 = -660.0695166511974  E_coul = 196.25340625788814
cycle= 2 E= -463.816110393309  delta_E= -0.00176  |g|= 0.0106  |ddm|= 0.0402
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00664784
diis-c [-1.56798657e-05 -1.60896830e-03  1.00160897e+00]
  HOMO = -0.308146733264173  LUMO = 1.50056303244961e-09
  mo_energy =
[-1.01347116e+02 -1.04217424e+01 -6.69127308e+00 -6.69127308e+00
 -6.69127308e+00 -1.01428640e+00 -3.08146733e-01 -3.08146733e-01
 -3.08146733e-01  1.50056303e-09  7.33667958e+01  7.54917513e+03]
E1 = -660.0682818662515  E_coul = 196.2521708620198
cycle= 3 E= -463.816111004232  delta_E= -6.11e-07  |g|= 0.000201  |ddm|= 0.000759
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=8.61483e-05
diis-c [-2.25884105e-10  3.55902695e-05 -2.19246340e-02  1.02188904e+00]
  HOMO = -0.308151594451859  LUMO = 1.50055304291197e-09
  mo_energy =
[-1.01347432e+02 -1.04217819e+01 -6.69134184e+00 -6.69134184e+00
 -6.69134184e+00 -1.01428835e+00 -3.08151594e-01 -3.08151594e-01
 -3.08151594e-01  1.50055304e-09  7.33666790e+01  7.54917443e+03]
E1 = -660.0682580647274  E_coul = 196.25214706026225
cycle= 4 E= -463.816111004465  delta_E= -2.33e-10  |g|= 3.98e-07  |ddm|= 1.46e-05
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -660.0682580647274  E_coul = 196.25214706026225
  HOMO = -0.308151582674164  LUMO = 1.50057546941472e-09
  mo_energy =
[-1.01347432e+02 -1.04217819e+01 -6.69134178e+00 -6.69134178e+00
 -6.69134178e+00 -1.01428834e+00 -3.08151583e-01 -3.08151583e-01
 -3.08151583e-01  1.50057547e-09  7.33666791e+01  7.54917444e+03]
E1 = -660.068258071326  E_coul = 196.25214706686103
Extra cycle  E= -463.816111004465  delta_E= 1.71e-13  |g|= 7.55e-09  |ddm|= 1.6e-08
    CPU time for scf_cycle      0.09 sec, wall time      0.10 sec
exp = [6.40646182e+03 1.00000000e-09 8.08265516e+01 3.66604356e+01
 5.09453995e+00 3.80501910e-01 8.69156542e+00 4.58478167e-01]
E = -463.816111004465
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((8, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([1.5735952963858392e+03,2.3761303919145971e+02,5.2332977870138201e+01,4.7281081235122091e+00,3.9325830426169639e-01,8.5907170030661746e+00,4.9039633283239870e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "6s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:47:34 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  6344.28899801        1
[INPUT] 0    0    [1    /1   ]  873.216061472        1
[INPUT] 0    0    [1    /1   ]  162.399554699        1
[INPUT] 0    0    [1    /1   ]  45.1417630182        1
[INPUT] 0    0    [1    /1   ]  4.99531303287        1
[INPUT] 0    0    [1    /1   ]  0.382385335471       1
[INPUT] 1    0    [1    /1   ]  8.66556740398        1
[INPUT] 1    0    [1    /1   ]  0.46443606532        1

nuclear repulsion = 0
number of shells = 8
number of NR pGTOs = 12
number of NR cGTOs = 12
basis = {'Ar': [[0, [6344.28899800803, 1.0]], [0, [873.2160614723372, 1.0]], [0, [162.39955469859694, 1.0]], [0, [45.14176301817316, 1.0]], [0, [4.995313032869611, 1.0]], [0, [0.38238533547072023, 1.0]], [1, [8.665567403977043, 1.0]], [1, [0.4644360653199118, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [6344.28899801]
bas 1, expnt(s) = [873.21606147]
bas 2, expnt(s) = [162.3995547]
bas 3, expnt(s) = [45.14176302]
bas 4, expnt(s) = [4.99531303]
bas 5, expnt(s) = [0.38238534]
bas 6, expnt(s) = [8.6655674]
bas 7, expnt(s) = [0.46443607]
CPU time:       123.49
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  1  1  1  0 36 37  0]
 [ 0  1  1  1  0 38 39  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 6.34428900e+03 1.79598309e+03 8.73216061e+02 4.05841366e+02
 1.62399555e+02 1.14935357e+02 4.51417630e+01 4.39996186e+01
 4.99531303e+00 8.44183882e+00 3.82385335e-01 1.22854465e+00
 8.66556740e+00 4.33741172e+01 4.64436065e-01 1.11851500e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.342012285575933
cond(S) = 20.4586617133499
E1 = -687.7761708850045  E_coul = 184.39245611436775
init E= -503.383714770637
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.720103888229124  LUMO = 122.438658490628
  mo_energy =
[-1.21362164e+02 -1.33166769e+01 -7.64167363e+00 -7.64167363e+00
 -7.64167363e+00 -1.68664473e+00 -7.20103888e-01 -7.20103888e-01
 -7.20103888e-01  1.22438658e+02  1.20497803e+03  1.03732181e+04]
E1 = -705.498682627972  E_coul = 198.45730327787018
cycle= 1 E= -507.041379350102  delta_E= -3.66  |g|= 0.296  |ddm|= 0.284
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.370451
diis-c [-0.13723425  1.        ]
  HOMO = -0.294019840393662  LUMO = 123.841465003875
  mo_energy =
[-1.19906235e+02 -1.22888514e+01 -6.66842336e+00 -6.66842336e+00
 -6.66842336e+00 -1.20971739e+00 -2.94019840e-01 -2.94019840e-01
 -2.94019840e-01  1.23841465e+02  1.20643666e+03  1.03744736e+04]
E1 = -705.4832758390664  E_coul = 198.4417043728863
cycle= 2 E= -507.04157146618  delta_E= -0.000192  |g|= 0.00323  |ddm|= 0.00688
    CPU time for cycle= 2      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.0030507
diis-c [-7.86049686e-06 -3.25700715e-03  1.00325701e+00]
  HOMO = -0.294094132527325  LUMO = 123.839406835605
  mo_energy =
[-1.19910683e+02 -1.22894257e+01 -6.66927299e+00 -6.66927299e+00
 -6.66927299e+00 -1.20974893e+00 -2.94094133e-01 -2.94094133e-01
 -2.94094133e-01  1.23839407e+02  1.20642986e+03  1.03744628e+04]
E1 = -705.4831072574782  E_coul = 198.44153575833127
cycle= 3 E= -507.041571499147  delta_E= -3.3e-08  |g|= 4.39e-05  |ddm|= 8.04e-05
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=5.49191e-05
diis-c [-2.44559175e-11  7.80663923e-05 -1.98935604e-02  1.01981549e+00]
  HOMO = -0.294094667893922  LUMO = 123.839395003714
  mo_energy =
[-1.19910714e+02 -1.22894301e+01 -6.66928068e+00 -6.66928068e+00
 -6.66928068e+00 -1.20974909e+00 -2.94094668e-01 -2.94094668e-01
 -2.94094668e-01  1.23839395e+02  1.20642984e+03  1.03744628e+04]
E1 = -705.483105524052  E_coul = 198.44153402489934
cycle= 4 E= -507.041571499153  delta_E= -5.74e-12  |g|= 6.26e-08  |ddm|= 9.33e-07
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -705.483105524052  E_coul = 198.44153402489934
  HOMO = -0.294094666248358  LUMO = 123.839395063562
  mo_energy =
[-1.19910714e+02 -1.22894301e+01 -6.66928066e+00 -6.66928066e+00
 -6.66928066e+00 -1.20974908e+00 -2.94094666e-01 -2.94094666e-01
 -2.94094666e-01  1.23839395e+02  1.20642984e+03  1.03744628e+04]
E1 = -705.4831055282211  E_coul = 198.44153402906838
Extra cycle  E= -507.041571499153  delta_E= -5.68e-14  |g|= 9.26e-10  |ddm|= 1.75e-09
    CPU time for scf_cycle      0.09 sec, wall time      0.10 sec
exp = [6.34428900e+03 8.73216061e+02 1.62399555e+02 4.51417630e+01
 4.99531303e+00 3.82385335e-01 8.66556740e+00 4.64436065e-01]
E = -507.0415714991527
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((8, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([1.5735952963858392e+03,2.3761303919145971e+02,5.2332977870138201e+01,4.7281081235122091e+00,3.9325830426169639e-01,8.5907170030661746e+00,4.9039633283239870e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "6s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:47:35 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  6344.28899801        1
[INPUT] 0    0    [1    /1   ]  873.216061472        1
[INPUT] 0    0    [1    /1   ]  162.399554699        1
[INPUT] 0    0    [1    /1   ]  45.1417630182        1
[INPUT] 0    0    [1    /1   ]  4.99531303287        1
[INPUT] 0    0    [1    /1   ]  0.382385335471       1
[INPUT] 1    0    [1    /1   ]  8.66556740398        1
[INPUT] 1    0    [1    /1   ]  0.46443606532        1

nuclear repulsion = 0
number of shells = 8
number of NR pGTOs = 12
number of NR cGTOs = 12
basis = {'Ar': [[0, [6344.28899800803, 1.0]], [0, [873.2160614723372, 1.0]], [0, [162.39955469859694, 1.0]], [0, [45.14176301817316, 1.0]], [0, [4.995313032869611, 1.0]], [0, [0.38238533547072023, 1.0]], [1, [8.665567403977043, 1.0]], [1, [0.4644360653199118, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [6344.28899801]
bas 1, expnt(s) = [873.21606147]
bas 2, expnt(s) = [162.3995547]
bas 3, expnt(s) = [45.14176302]
bas 4, expnt(s) = [4.99531303]
bas 5, expnt(s) = [0.38238534]
bas 6, expnt(s) = [8.6655674]
bas 7, expnt(s) = [0.46443607]
CPU time:       124.10
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  1  1  1  0 36 37  0]
 [ 0  1  1  1  0 38 39  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 6.34428900e+03 1.79598309e+03 8.73216061e+02 4.05841366e+02
 1.62399555e+02 1.14935357e+02 4.51417630e+01 4.39996186e+01
 4.99531303e+00 8.44183882e+00 3.82385335e-01 1.22854465e+00
 8.66556740e+00 4.33741172e+01 4.64436065e-01 1.11851500e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.342012285575933
cond(S) = 20.4586617133499
E1 = -687.7761708850045  E_coul = 184.39245611436775
init E= -503.383714770637
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.720103888229124  LUMO = 122.438658490628
  mo_energy =
[-1.21362164e+02 -1.33166769e+01 -7.64167363e+00 -7.64167363e+00
 -7.64167363e+00 -1.68664473e+00 -7.20103888e-01 -7.20103888e-01
 -7.20103888e-01  1.22438658e+02  1.20497803e+03  1.03732181e+04]
E1 = -705.498682627972  E_coul = 198.45730327787018
cycle= 1 E= -507.041379350102  delta_E= -3.66  |g|= 0.296  |ddm|= 0.284
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.370451
diis-c [-0.13723425  1.        ]
  HOMO = -0.294019840393662  LUMO = 123.841465003875
  mo_energy =
[-1.19906235e+02 -1.22888514e+01 -6.66842336e+00 -6.66842336e+00
 -6.66842336e+00 -1.20971739e+00 -2.94019840e-01 -2.94019840e-01
 -2.94019840e-01  1.23841465e+02  1.20643666e+03  1.03744736e+04]
E1 = -705.4832758390664  E_coul = 198.4417043728863
cycle= 2 E= -507.04157146618  delta_E= -0.000192  |g|= 0.00323  |ddm|= 0.00688
    CPU time for cycle= 2      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.0030507
diis-c [-7.86049686e-06 -3.25700715e-03  1.00325701e+00]
  HOMO = -0.294094132527325  LUMO = 123.839406835605
  mo_energy =
[-1.19910683e+02 -1.22894257e+01 -6.66927299e+00 -6.66927299e+00
 -6.66927299e+00 -1.20974893e+00 -2.94094133e-01 -2.94094133e-01
 -2.94094133e-01  1.23839407e+02  1.20642986e+03  1.03744628e+04]
E1 = -705.4831072574782  E_coul = 198.44153575833127
cycle= 3 E= -507.041571499147  delta_E= -3.3e-08  |g|= 4.39e-05  |ddm|= 8.04e-05
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=5.49191e-05
diis-c [-2.44559175e-11  7.80663923e-05 -1.98935604e-02  1.01981549e+00]
  HOMO = -0.294094667893922  LUMO = 123.839395003714
  mo_energy =
[-1.19910714e+02 -1.22894301e+01 -6.66928068e+00 -6.66928068e+00
 -6.66928068e+00 -1.20974909e+00 -2.94094668e-01 -2.94094668e-01
 -2.94094668e-01  1.23839395e+02  1.20642984e+03  1.03744628e+04]
E1 = -705.483105524052  E_coul = 198.44153402489934
cycle= 4 E= -507.041571499153  delta_E= -5.74e-12  |g|= 6.26e-08  |ddm|= 9.33e-07
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -705.483105524052  E_coul = 198.44153402489934
  HOMO = -0.294094666248358  LUMO = 123.839395063562
  mo_energy =
[-1.19910714e+02 -1.22894301e+01 -6.66928066e+00 -6.66928066e+00
 -6.66928066e+00 -1.20974908e+00 -2.94094666e-01 -2.94094666e-01
 -2.94094666e-01  1.23839395e+02  1.20642984e+03  1.03744628e+04]
E1 = -705.4831055282211  E_coul = 198.44153402906838
Extra cycle  E= -507.041571499153  delta_E= -5.68e-14  |g|= 9.26e-10  |ddm|= 1.75e-09
    CPU time for scf_cycle      0.09 sec, wall time      0.10 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 20.4586617133499
E1 = -705.4831055282211  E_coul = 198.44153402906838
init E= -507.041571499153
    CPU time for initialize scf      0.05 sec, wall time      0.05 sec
  HOMO = -0.294094666231826  LUMO = 123.83939506414
  mo_energy =
[-1.19910714e+02 -1.22894301e+01 -6.66928066e+00 -6.66928066e+00
 -6.66928066e+00 -1.20974908e+00 -2.94094666e-01 -2.94094666e-01
 -2.94094666e-01  1.23839395e+02  1.20642984e+03  1.03744628e+04]
E1 = -705.4831055282724  E_coul = 198.44153402911954
cycle= 1 E= -507.041571499153  delta_E= -1.14e-13  |g|= 1.54e-11  |ddm|= 2.34e-11
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -705.4831055282724  E_coul = 198.44153402911954
  HOMO = -0.294094666231628  LUMO = 123.839395064146
  mo_energy =
[-1.19910714e+02 -1.22894301e+01 -6.66928066e+00 -6.66928066e+00
 -6.66928066e+00 -1.20974908e+00 -2.94094666e-01 -2.94094666e-01
 -2.94094666e-01  1.23839395e+02  1.20642984e+03  1.03744628e+04]
E1 = -705.4831055282727  E_coul = 198.44153402912022
Extra cycle  E= -507.041571499152  delta_E= 3.41e-13  |g|= 2.16e-12  |ddm|= 3.5e-13
    CPU time for scf_cycle      0.12 sec, wall time      0.12 sec
exp = [6.34428900e+03 8.73216061e+02 1.62399555e+02 4.51417630e+01
 4.99531303e+00 3.82385335e-01 8.66556740e+00 4.64436065e-01]
grad_E = [-1.93349046e-05  2.54767619e-03 -2.44514073e-02  5.66232579e-02
  2.19918988e-01 -2.69031968e-01  1.02422980e-01 -1.06309344e+00]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((8, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([1.5735952963858392e+03,2.3761303919145971e+02,5.2332977870138201e+01,4.7281081235122091e+00,3.9325830426169639e-01,8.5907170030661746e+00,4.9039633283239870e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "6s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:47:39 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  6364.09313384        1
[INPUT] 0    0    [1    /1   ]  594.810718403        1
[INPUT] 0    0    [1    /1   ]  140.774717663        1
[INPUT] 0    0    [1    /1   ]  42.4220703193        1
[INPUT] 0    0    [1    /1   ]  4.9156754718         1
[INPUT] 0    0    [1    /1   ]  0.386363714374       1
[INPUT] 1    0    [1    /1   ]  8.64215769711        1
[INPUT] 1    0    [1    /1   ]  0.474479064353       1

nuclear repulsion = 0
number of shells = 8
number of NR pGTOs = 12
number of NR cGTOs = 12
basis = {'Ar': [[0, [6364.093133842264, 1.0]], [0, [594.8107184031142, 1.0]], [0, [140.77471766309853, 1.0]], [0, [42.422070319345785, 1.0]], [0, [4.915675471802804, 1.0]], [0, [0.3863637143739523, 1.0]], [1, [8.642157697105691, 1.0]], [1, [0.47447906435292764, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [6364.09313384]
bas 1, expnt(s) = [594.8107184]
bas 2, expnt(s) = [140.77471766]
bas 3, expnt(s) = [42.42207032]
bas 4, expnt(s) = [4.91567547]
bas 5, expnt(s) = [0.38636371]
bas 6, expnt(s) = [8.6421577]
bas 7, expnt(s) = [0.47447906]
CPU time:       127.76
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  1  1  1  0 36 37  0]
 [ 0  1  1  1  0 38 39  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 6.36409313e+03 1.80018616e+03 5.94810718e+02 3.04298011e+02
 1.40774718e+02 1.03254389e+02 4.24220703e+01 4.19960959e+01
 4.91567547e+00 8.34069858e+00 3.86363714e-01 1.23811867e+00
 8.64215770e+00 4.32276997e+01 4.74479064e-01 1.14882985e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.335231994711187
cond(S) = 27.11378405826097
E1 = -687.6950423074095  E_coul = 184.65503284273677
init E= -503.040009464673
    CPU time for initialize scf      0.04 sec, wall time      0.04 sec
  HOMO = -0.704342074442669  LUMO = 106.277939805434
  mo_energy =
[-1.21291979e+02 -1.32844009e+01 -7.62913070e+00 -7.62913070e+00
 -7.62913070e+00 -1.67074334e+00 -7.04342074e-01 -7.04342074e-01
 -7.04342074e-01  1.06277940e+02  8.71803044e+02  9.42011149e+03]
E1 = -705.5655444211015  E_coul = 198.6688557214269
cycle= 1 E= -506.896688699675  delta_E= -3.86  |g|= 0.316  |ddm|= 0.279
    CPU time for cycle= 1      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.445259
diis-c [-0.19825551  1.        ]
  HOMO = -0.27189151061812  LUMO = 107.643588226479
  mo_energy =
[-1.19873339e+02 -1.22576324e+01 -6.65905169e+00 -6.65905169e+00
 -6.65905169e+00 -1.19024191e+00 -2.71891511e-01 -2.71891511e-01
 -2.71891511e-01  1.07643588e+02  8.73206504e+02  9.42129152e+03]
E1 = -705.544682522088  E_coul = 198.64773730617048
cycle= 2 E= -506.896945215918  delta_E= -0.000257  |g|= 0.00354  |ddm|= 0.00942
    CPU time for cycle= 2      0.03 sec, wall time      0.03 sec
diis-norm(errvec)=0.00342488
diis-c [-1.13666217e-05 -1.35535221e-03  1.00135535e+00]
  HOMO = -0.271996244095982  LUMO = 107.640937482675
  mo_energy =
[-1.19879307e+02 -1.22584011e+01 -6.66021241e+00 -6.66021241e+00
 -6.66021241e+00 -1.19028408e+00 -2.71996244e-01 -2.71996244e-01
 -2.71996244e-01  1.07640937e+02  8.73198246e+02  9.42127787e+03]
E1 = -705.5444321733413  E_coul = 198.6474869070559
cycle= 3 E= -506.896945266285  delta_E= -5.04e-08  |g|= 6.03e-05  |ddm|= 0.000117
    CPU time for cycle= 3      0.02 sec, wall time      0.03 sec
diis-norm(errvec)=7.49351e-05
diis-c [-1.71321913e-10  4.17125057e-05 -2.23640397e-02  1.02232233e+00]
  HOMO = -0.271997292627048  LUMO = 107.640912668822
  mo_energy =
[-1.19879367e+02 -1.22584093e+01 -6.66022621e+00 -6.66022621e+00
 -6.66022621e+00 -1.19028441e+00 -2.71997293e-01 -2.71997293e-01
 -2.71997293e-01  1.07640913e+02  8.73198183e+02  9.42127780e+03]
E1 = -705.5444288388709  E_coul = 198.64748357257236
cycle= 4 E= -506.896945266299  delta_E= -1.31e-11  |g|= 1.9e-07  |ddm|= 1.68e-06
    CPU time for cycle= 4      0.03 sec, wall time      0.03 sec
E1 = -705.5444288388709  E_coul = 198.64748357257236
  HOMO = -0.271997285999382  LUMO = 107.640912857041
  mo_energy =
[-1.19879367e+02 -1.22584092e+01 -6.66022614e+00 -6.66022614e+00
 -6.66022614e+00 -1.19028441e+00 -2.71997286e-01 -2.71997286e-01
 -2.71997286e-01  1.07640913e+02  8.73198184e+02  9.42127780e+03]
E1 = -705.5444288541515  E_coul = 198.64748358785266
Extra cycle  E= -506.896945266299  delta_E= -3.41e-13  |g|= 3.01e-09  |ddm|= 6.69e-09
    CPU time for scf_cycle      0.15 sec, wall time      0.16 sec
exp = [6.36409313e+03 5.94810718e+02 1.40774718e+02 4.24220703e+01
 4.91567547e+00 3.86363714e-01 8.64215770e+00 4.74479064e-01]
E = -506.89694526629887
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((8, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([1.5735952963858392e+03,2.3761303919145971e+02,5.2332977870138201e+01,4.7281081235122091e+00,3.9325830426169639e-01,8.5907170030661746e+00,4.9039633283239870e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "6s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:47:40 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  6351.38959022        1
[INPUT] 0    0    [1    /1   ]  773.396365853        1
[INPUT] 0    0    [1    /1   ]  154.646166682        1
[INPUT] 0    0    [1    /1   ]  44.1666420152        1
[INPUT] 0    0    [1    /1   ]  4.96675971195        1
[INPUT] 0    0    [1    /1   ]  0.383811746928       1
[INPUT] 1    0    [1    /1   ]  8.65717406717        1
[INPUT] 1    0    [1    /1   ]  0.468036890992       1

nuclear repulsion = 0
number of shells = 8
number of NR pGTOs = 12
number of NR cGTOs = 12
basis = {'Ar': [[0, [6351.389590220718, 1.0]], [0, [773.3963658534633, 1.0]], [0, [154.64616668206563, 1.0]], [0, [44.16664201517459, 1.0]], [0, [4.966759711953132, 1.0]], [0, [0.38381174692819875, 1.0]], [1, [8.657174067165816, 1.0]], [1, [0.4680368909920219, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [6351.38959022]
bas 1, expnt(s) = [773.39636585]
bas 2, expnt(s) = [154.64616668]
bas 3, expnt(s) = [44.16664202]
bas 4, expnt(s) = [4.96675971]
bas 5, expnt(s) = [0.38381175]
bas 6, expnt(s) = [8.65717407]
bas 7, expnt(s) = [0.46803689]
CPU time:       128.52
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  1  1  1  0 36 37  0]
 [ 0  1  1  1  0 38 39  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 6.35138959e+03 1.79749044e+03 7.73396366e+02 3.70524235e+02
 1.54646167e+02 1.10794804e+02 4.41666420e+01 4.32848394e+01
 4.96675971e+00 8.40562259e+00 3.83811747e-01 1.23198018e+00
 8.65717407e+00 4.33216092e+01 4.68036891e-01 1.12936546e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.339884746398802
cond(S) = 22.134246512485568
E1 = -688.0741969280137  E_coul = 184.49118449184374
init E= -503.58301243617
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.714358289801487  LUMO = 116.419689529466
  mo_energy =
[-1.21402325e+02 -1.33115346e+01 -7.63683046e+00 -7.63683046e+00
 -7.63683046e+00 -1.68132247e+00 -7.14358290e-01 -7.14358290e-01
 -7.14358290e-01  1.16419690e+02  1.08397288e+03  1.00322607e+04]
E1 = -705.6816106824841  E_coul = 198.54618254525062
cycle= 1 E= -507.135428137233  delta_E= -3.55  |g|= 0.29  |ddm|= 0.282
    CPU time for cycle= 1      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.366088
diis-c [-0.13402045  1.        ]
  HOMO = -0.286103487680797  LUMO = 117.811394192086
  mo_energy =
[-1.19955616e+02 -1.22839813e+01 -6.66450860e+00 -6.66450860e+00
 -6.66450860e+00 -1.20329386e+00 -2.86103488e-01 -2.86103488e-01
 -2.86103488e-01  1.17811394e+02  1.08541968e+03  1.00335058e+04]
E1 = -705.6644881705467  E_coul = 198.52884815477609
cycle= 2 E= -507.135640015771  delta_E= -0.000212  |g|= 0.00335  |ddm|= 0.00766
    CPU time for cycle= 2      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.00317955
diis-c [-9.06711922e-06 -2.79683029e-03  1.00279683e+00]
  HOMO = -0.286187411234798  LUMO = 117.809152226182
  mo_energy =
[-1.19960540e+02 -1.22846180e+01 -6.66545718e+00 -6.66545718e+00
 -6.66545718e+00 -1.20332879e+00 -2.86187411e-01 -2.86187411e-01
 -2.86187411e-01  1.17809152e+02  1.08541241e+03  1.00334942e+04]
E1 = -705.6642940788248  E_coul = 198.52865402441154
cycle= 3 E= -507.135640054413  delta_E= -3.86e-08  |g|= 4.91e-05  |ddm|= 9.19e-05
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=6.13524e-05
diis-c [-6.25630782e-11  6.92686331e-05 -2.06408002e-02  1.02057153e+00]
  HOMO = -0.286188082796526  LUMO = 117.809136954938
  mo_energy =
[-1.19960578e+02 -1.22846235e+01 -6.66546654e+00 -6.66546654e+00
 -6.66546654e+00 -1.20332899e+00 -2.86188083e-01 -2.86188083e-01
 -2.86188083e-01  1.17809137e+02  1.08541237e+03  1.00334941e+04]
E1 = -705.6642919088207  E_coul = 198.52865185439973
cycle= 4 E= -507.135640054421  delta_E= -7.67e-12  |g|= 9.33e-08  |ddm|= 1.14e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -705.6642919088207  E_coul = 198.52865185439973
  HOMO = -0.286188079990669  LUMO = 117.809137045897
  mo_energy =
[-1.19960578e+02 -1.22846235e+01 -6.66546650e+00 -6.66546650e+00
 -6.66546650e+00 -1.20332898e+00 -2.86188080e-01 -2.86188080e-01
 -2.86188080e-01  1.17809137e+02  1.08541237e+03  1.00334941e+04]
E1 = -705.6642919155296  E_coul = 198.52865186110841
Extra cycle  E= -507.135640054421  delta_E= -2.27e-13  |g|= 1.44e-09  |ddm|= 2.88e-09
    CPU time for scf_cycle      0.11 sec, wall time      0.11 sec
exp = [6.35138959e+03 7.73396366e+02 1.54646167e+02 4.41666420e+01
 4.96675971e+00 3.83811747e-01 8.65717407e+00 4.68036891e-01]
E = -507.1356400544212
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((8, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([1.5735952963858392e+03,2.3761303919145971e+02,5.2332977870138201e+01,4.7281081235122091e+00,3.9325830426169639e-01,8.5907170030661746e+00,4.9039633283239870e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "6s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:47:40 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  6351.38959022        1
[INPUT] 0    0    [1    /1   ]  773.396365853        1
[INPUT] 0    0    [1    /1   ]  154.646166682        1
[INPUT] 0    0    [1    /1   ]  44.1666420152        1
[INPUT] 0    0    [1    /1   ]  4.96675971195        1
[INPUT] 0    0    [1    /1   ]  0.383811746928       1
[INPUT] 1    0    [1    /1   ]  8.65717406717        1
[INPUT] 1    0    [1    /1   ]  0.468036890992       1

nuclear repulsion = 0
number of shells = 8
number of NR pGTOs = 12
number of NR cGTOs = 12
basis = {'Ar': [[0, [6351.389590220718, 1.0]], [0, [773.3963658534633, 1.0]], [0, [154.64616668206563, 1.0]], [0, [44.16664201517459, 1.0]], [0, [4.966759711953132, 1.0]], [0, [0.38381174692819875, 1.0]], [1, [8.657174067165816, 1.0]], [1, [0.4680368909920219, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [6351.38959022]
bas 1, expnt(s) = [773.39636585]
bas 2, expnt(s) = [154.64616668]
bas 3, expnt(s) = [44.16664202]
bas 4, expnt(s) = [4.96675971]
bas 5, expnt(s) = [0.38381175]
bas 6, expnt(s) = [8.65717407]
bas 7, expnt(s) = [0.46803689]
CPU time:       129.18
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  1  1  1  0 36 37  0]
 [ 0  1  1  1  0 38 39  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 6.35138959e+03 1.79749044e+03 7.73396366e+02 3.70524235e+02
 1.54646167e+02 1.10794804e+02 4.41666420e+01 4.32848394e+01
 4.96675971e+00 8.40562259e+00 3.83811747e-01 1.23198018e+00
 8.65717407e+00 4.33216092e+01 4.68036891e-01 1.12936546e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.339884746398802
cond(S) = 22.134246512485568
E1 = -688.0741969280137  E_coul = 184.49118449184374
init E= -503.58301243617
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.714358289801487  LUMO = 116.419689529466
  mo_energy =
[-1.21402325e+02 -1.33115346e+01 -7.63683046e+00 -7.63683046e+00
 -7.63683046e+00 -1.68132247e+00 -7.14358290e-01 -7.14358290e-01
 -7.14358290e-01  1.16419690e+02  1.08397288e+03  1.00322607e+04]
E1 = -705.6816106824841  E_coul = 198.54618254525062
cycle= 1 E= -507.135428137233  delta_E= -3.55  |g|= 0.29  |ddm|= 0.282
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.366088
diis-c [-0.13402045  1.        ]
  HOMO = -0.286103487680797  LUMO = 117.811394192086
  mo_energy =
[-1.19955616e+02 -1.22839813e+01 -6.66450860e+00 -6.66450860e+00
 -6.66450860e+00 -1.20329386e+00 -2.86103488e-01 -2.86103488e-01
 -2.86103488e-01  1.17811394e+02  1.08541968e+03  1.00335058e+04]
E1 = -705.6644881705467  E_coul = 198.52884815477609
cycle= 2 E= -507.135640015771  delta_E= -0.000212  |g|= 0.00335  |ddm|= 0.00766
    CPU time for cycle= 2      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.00317955
diis-c [-9.06711922e-06 -2.79683029e-03  1.00279683e+00]
  HOMO = -0.286187411234798  LUMO = 117.809152226182
  mo_energy =
[-1.19960540e+02 -1.22846180e+01 -6.66545718e+00 -6.66545718e+00
 -6.66545718e+00 -1.20332879e+00 -2.86187411e-01 -2.86187411e-01
 -2.86187411e-01  1.17809152e+02  1.08541241e+03  1.00334942e+04]
E1 = -705.6642940788248  E_coul = 198.52865402441154
cycle= 3 E= -507.135640054413  delta_E= -3.86e-08  |g|= 4.91e-05  |ddm|= 9.19e-05
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=6.13524e-05
diis-c [-6.25630782e-11  6.92686331e-05 -2.06408002e-02  1.02057153e+00]
  HOMO = -0.286188082796526  LUMO = 117.809136954938
  mo_energy =
[-1.19960578e+02 -1.22846235e+01 -6.66546654e+00 -6.66546654e+00
 -6.66546654e+00 -1.20332899e+00 -2.86188083e-01 -2.86188083e-01
 -2.86188083e-01  1.17809137e+02  1.08541237e+03  1.00334941e+04]
E1 = -705.6642919088207  E_coul = 198.52865185439973
cycle= 4 E= -507.135640054421  delta_E= -7.67e-12  |g|= 9.33e-08  |ddm|= 1.14e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -705.6642919088207  E_coul = 198.52865185439973
  HOMO = -0.286188079990669  LUMO = 117.809137045897
  mo_energy =
[-1.19960578e+02 -1.22846235e+01 -6.66546650e+00 -6.66546650e+00
 -6.66546650e+00 -1.20332898e+00 -2.86188080e-01 -2.86188080e-01
 -2.86188080e-01  1.17809137e+02  1.08541237e+03  1.00334941e+04]
E1 = -705.6642919155296  E_coul = 198.52865186110841
Extra cycle  E= -507.135640054421  delta_E= -2.27e-13  |g|= 1.44e-09  |ddm|= 2.88e-09
    CPU time for scf_cycle      0.10 sec, wall time      0.10 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 22.134246512485568
E1 = -705.6642919155296  E_coul = 198.52865186110841
init E= -507.135640054421
    CPU time for initialize scf      0.06 sec, wall time      0.06 sec
  HOMO = -0.286188079962478  LUMO = 117.809137046786
  mo_energy =
[-1.19960578e+02 -1.22846235e+01 -6.66546650e+00 -6.66546650e+00
 -6.66546650e+00 -1.20332898e+00 -2.86188080e-01 -2.86188080e-01
 -2.86188080e-01  1.17809137e+02  1.08541237e+03  1.00334941e+04]
E1 = -705.6642919156143  E_coul = 198.52865186119345
cycle= 1 E= -507.135640054421  delta_E= 3.41e-13  |g|= 2.54e-11  |ddm|= 3.91e-11
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -705.6642919156143  E_coul = 198.52865186119345
  HOMO = -0.286188079962126  LUMO = 117.809137046797
  mo_energy =
[-1.19960578e+02 -1.22846235e+01 -6.66546650e+00 -6.66546650e+00
 -6.66546650e+00 -1.20332898e+00 -2.86188080e-01 -2.86188080e-01
 -2.86188080e-01  1.17809137e+02  1.08541237e+03  1.00334941e+04]
E1 = -705.6642919156158  E_coul = 198.52865186119465
Extra cycle  E= -507.135640054421  delta_E= -2.84e-13  |g|= 1.28e-12  |ddm|= 5.93e-13
    CPU time for scf_cycle      0.12 sec, wall time      0.12 sec
exp = [6.35138959e+03 7.73396366e+02 1.54646167e+02 4.41666420e+01
 4.96675971e+00 3.83811747e-01 8.65717407e+00 4.68036891e-01]
grad_E = [ 3.91177356e-05  1.28393237e-03 -1.77708114e-02  4.63181941e-02
  1.95149996e-01 -2.26156893e-01  8.93488061e-02 -9.13447889e-01]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((8, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([1.5735952963858392e+03,2.3761303919145971e+02,5.2332977870138201e+01,4.7281081235122091e+00,3.9325830426169639e-01,8.5907170030661746e+00,4.9039633283239870e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "6s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:47:44 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  6351.01908702        1
[INPUT] 0    0    [1    /1   ]  778.212261563        1
[INPUT] 0    0    [1    /1   ]  161.720644604        1
[INPUT] 0    0    [1    /1   ]  44.3217971426        1
[INPUT] 0    0    [1    /1   ]  4.84428411113        1
[INPUT] 0    0    [1    /1   ]  0.388742564826       1
[INPUT] 1    0    [1    /1   ]  8.62243782991        1
[INPUT] 1    0    [1    /1   ]  0.481037067477       1

nuclear repulsion = 0
number of shells = 8
number of NR pGTOs = 12
number of NR cGTOs = 12
basis = {'Ar': [[0, [6351.019087022001, 1.0]], [0, [778.2122615629258, 1.0]], [0, [161.72064460389876, 1.0]], [0, [44.32179714258606, 1.0]], [0, [4.844284111130491, 1.0]], [0, [0.3887425648257103, 1.0]], [1, [8.622437829914526, 1.0]], [1, [0.48103706747673314, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [6351.01908702]
bas 1, expnt(s) = [778.21226156]
bas 2, expnt(s) = [161.7206446]
bas 3, expnt(s) = [44.32179714]
bas 4, expnt(s) = [4.84428411]
bas 5, expnt(s) = [0.38874256]
bas 6, expnt(s) = [8.62243783]
bas 7, expnt(s) = [0.48103707]
CPU time:       132.39
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  1  1  1  0 36 37  0]
 [ 0  1  1  1  0 38 39  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 6.35101909e+03 1.79741180e+03 7.78212262e+02 3.72253317e+02
 1.61720645e+02 1.14574804e+02 4.43217971e+01 4.33988324e+01
 4.84428411e+00 8.24968239e+00 3.88742565e-01 1.24383163e+00
 8.62243783e+00 4.31044375e+01 4.81037067e-01 1.16871218e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.32942860827652
cond(S) = 21.548733673441422
E1 = -688.569421263085  E_coul = 184.77463068717063
init E= -503.794790575914
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.694688928206803  LUMO = 119.981528790154
  mo_energy =
[-1.21448516e+02 -1.32909506e+01 -7.62459682e+00 -7.62459682e+00
 -7.62459682e+00 -1.66330324e+00 -6.94688928e-01 -6.94688928e-01
 -6.94688928e-01  1.19981529e+02  1.10992256e+03  1.00707293e+04]
E1 = -706.0478177711701  E_coul = 198.80647531512017
cycle= 1 E= -507.24134245605  delta_E= -3.45  |g|= 0.288  |ddm|= 0.285
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.350791
diis-c [-0.1230544  1.       ]
  HOMO = -0.257368236802851  LUMO = 121.357097900386
  mo_energy =
[-1.20037929e+02 -1.22629046e+01 -6.65488250e+00 -6.65488250e+00
 -6.65488250e+00 -1.17995977e+00 -2.57368237e-01 -2.57368237e-01
 -2.57368237e-01  1.21357098e+02  1.11131091e+03  1.00719196e+04]
E1 = -706.0300431618972  E_coul = 198.78847386974837
cycle= 2 E= -507.241569292149  delta_E= -0.000227  |g|= 0.00338  |ddm|= 0.00775
    CPU time for cycle= 2      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.00337728
diis-c [-1.06695066e-05 -2.45256626e-03  1.00245257e+00]
  HOMO = -0.257456089735304  LUMO = 121.354656818058
  mo_energy =
[-1.20043114e+02 -1.22635418e+01 -6.65585065e+00 -6.65585065e+00
 -6.65585065e+00 -1.17999431e+00 -2.57456090e-01 -2.57456090e-01
 -2.57456090e-01  1.21354657e+02  1.11130310e+03  1.00719075e+04]
E1 = -706.0298467718417  E_coul = 198.78827743951595
cycle= 3 E= -507.241569332326  delta_E= -4.02e-08  |g|= 5e-05  |ddm|= 9.08e-05
    CPU time for cycle= 3      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=6.43733e-05
diis-c [-8.69178609e-11  5.39646664e-05 -1.99336881e-02  1.01987972e+00]
  HOMO = -0.257456809329074  LUMO = 121.354640067427
  mo_energy =
[-1.20043155e+02 -1.22635473e+01 -6.65586024e+00 -6.65586024e+00
 -6.65586024e+00 -1.17999451e+00 -2.57456809e-01 -2.57456809e-01
 -2.57456809e-01  1.21354640e+02  1.11130306e+03  1.00719074e+04]
E1 = -706.0298446004259  E_coul = 198.78827526809178
cycle= 4 E= -507.241569332334  delta_E= -8.41e-12  |g|= 1.11e-07  |ddm|= 1.12e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.0298446004259  E_coul = 198.78827526809178
  HOMO = -0.257456805901914  LUMO = 121.354640186166
  mo_energy =
[-1.20043154e+02 -1.22635472e+01 -6.65586020e+00 -6.65586020e+00
 -6.65586020e+00 -1.17999451e+00 -2.57456806e-01 -2.57456806e-01
 -2.57456806e-01  1.21354640e+02  1.11130306e+03  1.00719074e+04]
E1 = -706.0298446081845  E_coul = 198.78827527585076
Extra cycle  E= -507.241569332334  delta_E= 4.55e-13  |g|= 1.59e-09  |ddm|= 3.2e-09
    CPU time for scf_cycle      0.09 sec, wall time      0.10 sec
exp = [6.35101909e+03 7.78212262e+02 1.61720645e+02 4.43217971e+01
 4.84428411e+00 3.88742565e-01 8.62243783e+00 4.81037067e-01]
E = -507.2415693323337
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((8, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([1.5735952963858392e+03,2.3761303919145971e+02,5.2332977870138201e+01,4.7281081235122091e+00,3.9325830426169639e-01,8.5907170030661746e+00,4.9039633283239870e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "6s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:47:44 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  6351.01908702        1
[INPUT] 0    0    [1    /1   ]  778.212261563        1
[INPUT] 0    0    [1    /1   ]  161.720644604        1
[INPUT] 0    0    [1    /1   ]  44.3217971426        1
[INPUT] 0    0    [1    /1   ]  4.84428411113        1
[INPUT] 0    0    [1    /1   ]  0.388742564826       1
[INPUT] 1    0    [1    /1   ]  8.62243782991        1
[INPUT] 1    0    [1    /1   ]  0.481037067477       1

nuclear repulsion = 0
number of shells = 8
number of NR pGTOs = 12
number of NR cGTOs = 12
basis = {'Ar': [[0, [6351.019087022001, 1.0]], [0, [778.2122615629258, 1.0]], [0, [161.72064460389876, 1.0]], [0, [44.32179714258606, 1.0]], [0, [4.844284111130491, 1.0]], [0, [0.3887425648257103, 1.0]], [1, [8.622437829914526, 1.0]], [1, [0.48103706747673314, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [6351.01908702]
bas 1, expnt(s) = [778.21226156]
bas 2, expnt(s) = [161.7206446]
bas 3, expnt(s) = [44.32179714]
bas 4, expnt(s) = [4.84428411]
bas 5, expnt(s) = [0.38874256]
bas 6, expnt(s) = [8.62243783]
bas 7, expnt(s) = [0.48103707]
CPU time:       133.01
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  1  1  1  0 36 37  0]
 [ 0  1  1  1  0 38 39  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 6.35101909e+03 1.79741180e+03 7.78212262e+02 3.72253317e+02
 1.61720645e+02 1.14574804e+02 4.43217971e+01 4.33988324e+01
 4.84428411e+00 8.24968239e+00 3.88742565e-01 1.24383163e+00
 8.62243783e+00 4.31044375e+01 4.81037067e-01 1.16871218e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.32942860827652
cond(S) = 21.548733673441422
E1 = -688.569421263085  E_coul = 184.77463068717063
init E= -503.794790575914
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.694688928206803  LUMO = 119.981528790154
  mo_energy =
[-1.21448516e+02 -1.32909506e+01 -7.62459682e+00 -7.62459682e+00
 -7.62459682e+00 -1.66330324e+00 -6.94688928e-01 -6.94688928e-01
 -6.94688928e-01  1.19981529e+02  1.10992256e+03  1.00707293e+04]
E1 = -706.0478177711701  E_coul = 198.80647531512017
cycle= 1 E= -507.24134245605  delta_E= -3.45  |g|= 0.288  |ddm|= 0.285
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.350791
diis-c [-0.1230544  1.       ]
  HOMO = -0.257368236802851  LUMO = 121.357097900386
  mo_energy =
[-1.20037929e+02 -1.22629046e+01 -6.65488250e+00 -6.65488250e+00
 -6.65488250e+00 -1.17995977e+00 -2.57368237e-01 -2.57368237e-01
 -2.57368237e-01  1.21357098e+02  1.11131091e+03  1.00719196e+04]
E1 = -706.0300431618972  E_coul = 198.78847386974837
cycle= 2 E= -507.241569292149  delta_E= -0.000227  |g|= 0.00338  |ddm|= 0.00775
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.00337728
diis-c [-1.06695066e-05 -2.45256626e-03  1.00245257e+00]
  HOMO = -0.257456089735304  LUMO = 121.354656818058
  mo_energy =
[-1.20043114e+02 -1.22635418e+01 -6.65585065e+00 -6.65585065e+00
 -6.65585065e+00 -1.17999431e+00 -2.57456090e-01 -2.57456090e-01
 -2.57456090e-01  1.21354657e+02  1.11130310e+03  1.00719075e+04]
E1 = -706.0298467718417  E_coul = 198.78827743951595
cycle= 3 E= -507.241569332326  delta_E= -4.02e-08  |g|= 5e-05  |ddm|= 9.08e-05
    CPU time for cycle= 3      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=6.43733e-05
diis-c [-8.69178609e-11  5.39646664e-05 -1.99336881e-02  1.01987972e+00]
  HOMO = -0.257456809329074  LUMO = 121.354640067427
  mo_energy =
[-1.20043155e+02 -1.22635473e+01 -6.65586024e+00 -6.65586024e+00
 -6.65586024e+00 -1.17999451e+00 -2.57456809e-01 -2.57456809e-01
 -2.57456809e-01  1.21354640e+02  1.11130306e+03  1.00719074e+04]
E1 = -706.0298446004259  E_coul = 198.78827526809178
cycle= 4 E= -507.241569332334  delta_E= -8.41e-12  |g|= 1.11e-07  |ddm|= 1.12e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.0298446004259  E_coul = 198.78827526809178
  HOMO = -0.257456805901914  LUMO = 121.354640186166
  mo_energy =
[-1.20043154e+02 -1.22635472e+01 -6.65586020e+00 -6.65586020e+00
 -6.65586020e+00 -1.17999451e+00 -2.57456806e-01 -2.57456806e-01
 -2.57456806e-01  1.21354640e+02  1.11130306e+03  1.00719074e+04]
E1 = -706.0298446081845  E_coul = 198.78827527585076
Extra cycle  E= -507.241569332334  delta_E= 4.55e-13  |g|= 1.59e-09  |ddm|= 3.2e-09
    CPU time for scf_cycle      0.09 sec, wall time      0.10 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 21.548733673441422
E1 = -706.0298446081845  E_coul = 198.78827527585076
init E= -507.241569332334
    CPU time for initialize scf      0.05 sec, wall time      0.05 sec
  HOMO = -0.257456805869076  LUMO = 121.354640187267
  mo_energy =
[-1.20043154e+02 -1.22635472e+01 -6.65586020e+00 -6.65586020e+00
 -6.65586020e+00 -1.17999451e+00 -2.57456806e-01 -2.57456806e-01
 -2.57456806e-01  1.21354640e+02  1.11130306e+03  1.00719074e+04]
E1 = -706.0298446082775  E_coul = 198.78827527594345
cycle= 1 E= -507.241569332334  delta_E= -3.41e-13  |g|= 2.64e-11  |ddm|= 4.13e-11
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -706.0298446082775  E_coul = 198.78827527594345
  HOMO = -0.257456805868689  LUMO = 121.35464018728
  mo_energy =
[-1.20043154e+02 -1.22635472e+01 -6.65586020e+00 -6.65586020e+00
 -6.65586020e+00 -1.17999451e+00 -2.57456806e-01 -2.57456806e-01
 -2.57456806e-01  1.21354640e+02  1.11130306e+03  1.00719074e+04]
E1 = -706.0298446082786  E_coul = 198.78827527594456
Extra cycle  E= -507.241569332334  delta_E=    0  |g|= 1.07e-12  |ddm|= 6.02e-13
    CPU time for scf_cycle      0.12 sec, wall time      0.12 sec
exp = [6.35101909e+03 7.78212262e+02 1.61720645e+02 4.43217971e+01
 4.84428411e+00 3.88742565e-01 8.62243783e+00 4.81037067e-01]
grad_E = [ 5.02555571e-05  2.34789780e-04 -6.81146104e-03  2.10148986e-02
  8.60055556e-02 -8.90174364e-02  3.86727796e-02 -3.81711597e-01]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((8, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([1.5735952963858392e+03,2.3761303919145971e+02,5.2332977870138201e+01,4.7281081235122091e+00,3.9325830426169639e-01,8.5907170030661746e+00,4.9039633283239870e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "6s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:47:48 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  6346.93002659        1
[INPUT] 0    0    [1    /1   ]  835.327298971        1
[INPUT] 0    0    [1    /1   ]  172.453945958        1
[INPUT] 0    0    [1    /1   ]  44.8879538888        1
[INPUT] 0    0    [1    /1   ]  4.74607163502        1
[INPUT] 0    0    [1    /1   ]  0.391908233654       1
[INPUT] 1    0    [1    /1   ]  8.59506087733        1
[INPUT] 1    0    [1    /1   ]  0.49084489555        1

nuclear repulsion = 0
number of shells = 8
number of NR pGTOs = 12
number of NR cGTOs = 12
basis = {'Ar': [[0, [6346.930026586205, 1.0]], [0, [835.3272989706072, 1.0]], [0, [172.453945957506, 1.0]], [0, [44.88795388875324, 1.0]], [0, [4.746071635018024, 1.0]], [0, [0.3919082336537155, 1.0]], [1, [8.595060877327132, 1.0]], [1, [0.49084489555042565, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [6346.93002659]
bas 1, expnt(s) = [835.32729897]
bas 2, expnt(s) = [172.45394596]
bas 3, expnt(s) = [44.88795389]
bas 4, expnt(s) = [4.74607164]
bas 5, expnt(s) = [0.39190823]
bas 6, expnt(s) = [8.59506088]
bas 7, expnt(s) = [0.4908449]
CPU time:       136.25
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  1  1  1  0 36 37  0]
 [ 0  1  1  1  0 38 39  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 6.34693003e+03 1.79654379e+03 8.35327299e+02 3.92561343e+02
 1.72453946e+02 1.20231946e+02 4.48879539e+01 4.38139473e+01
 4.74607164e+00 8.12392193e+00 3.91908234e-01 1.25142064e+00
 8.59506088e+00 4.29334303e+01 4.90844896e-01 1.19857369e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319046147457883
cond(S) = 20.219866358139853
E1 = -688.7693984047366  E_coul = 184.91027309559172
init E= -503.859125309145
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.68104360072909  LUMO = 126.325126570501
  mo_energy =
[-1.21475879e+02 -1.32742405e+01 -7.62122675e+00 -7.62122675e+00
 -7.62122675e+00 -1.65095987e+00 -6.81043601e-01 -6.81043601e-01
 -6.81043601e-01  1.26325127e+02  1.19790697e+03  1.02866344e+04]
E1 = -706.2202736740585  E_coul = 198.95064265128337
cycle= 1 E= -507.269631022775  delta_E= -3.41  |g|= 0.288  |ddm|= 0.299
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.33025
diis-c [-0.10906494  1.        ]
  HOMO = -0.235670882195179  LUMO = 127.691641520528
  mo_energy =
[-1.20092747e+02 -1.22440067e+01 -6.65112343e+00 -6.65112343e+00
 -6.65112343e+00 -1.16247187e+00 -2.35670882e-01 -2.35670882e-01
 -2.35670882e-01  1.27691642e+02  1.19924406e+03  1.02877752e+04]
E1 = -706.2028086910682  E_coul = 198.93294647987184
cycle= 2 E= -507.269862211196  delta_E= -0.000231  |g|= 0.00335  |ddm|= 0.00745
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00349919
diis-c [-1.15219860e-05 -2.58025754e-03  1.00258026e+00]
  HOMO = -0.235757159949478  LUMO = 127.689108807088
  mo_energy =
[-1.20097918e+02 -1.22446132e+01 -6.65205791e+00 -6.65205791e+00
 -6.65205791e+00 -1.16250445e+00 -2.35757160e-01 -2.35757160e-01
 -2.35757160e-01  1.27689109e+02  1.19923598e+03  1.02877630e+04]
E1 = -706.202623786402  E_coul = 198.932761536738
cycle= 3 E= -507.269862249664  delta_E= -3.85e-08  |g|= 4.74e-05  |ddm|= 8.41e-05
    CPU time for cycle= 3      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=6.29162e-05
diis-c [-8.73322979e-11  4.61876930e-05 -1.87171430e-02  1.01867096e+00]
  HOMO = -0.235757827481503  LUMO = 127.689093182761
  mo_energy =
[-1.20097956e+02 -1.22446181e+01 -6.65206661e+00 -6.65206661e+00
 -6.65206661e+00 -1.16250463e+00 -2.35757827e-01 -2.35757827e-01
 -2.35757827e-01  1.27689093e+02  1.19923594e+03  1.02877630e+04]
E1 = -706.2026218829027  E_coul = 198.93275963323185
cycle= 4 E= -507.269862249671  delta_E= -6.82e-12  |g|= 1.09e-07  |ddm|= 9.81e-07
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.2026218829027  E_coul = 198.93275963323185
  HOMO = -0.235757824266674  LUMO = 127.689093306401
  mo_energy =
[-1.20097955e+02 -1.22446180e+01 -6.65206658e+00 -6.65206658e+00
 -6.65206658e+00 -1.16250463e+00 -2.35757824e-01 -2.35757824e-01
 -2.35757824e-01  1.27689093e+02  1.19923594e+03  1.02877630e+04]
E1 = -706.2026218899059  E_coul = 198.93275964023573
Extra cycle  E= -507.26986224967  delta_E= 6.82e-13  |g|= 1.4e-09  |ddm|= 2.77e-09
    CPU time for scf_cycle      0.09 sec, wall time      0.10 sec
exp = [6.34693003e+03 8.35327299e+02 1.72453946e+02 4.48879539e+01
 4.74607164e+00 3.91908234e-01 8.59506088e+00 4.90844896e-01]
E = -507.26986224967015
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((8, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([1.5735952963858392e+03,2.3761303919145971e+02,5.2332977870138201e+01,4.7281081235122091e+00,3.9325830426169639e-01,8.5907170030661746e+00,4.9039633283239870e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "6s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:47:48 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  6346.93002659        1
[INPUT] 0    0    [1    /1   ]  835.327298971        1
[INPUT] 0    0    [1    /1   ]  172.453945958        1
[INPUT] 0    0    [1    /1   ]  44.8879538888        1
[INPUT] 0    0    [1    /1   ]  4.74607163502        1
[INPUT] 0    0    [1    /1   ]  0.391908233654       1
[INPUT] 1    0    [1    /1   ]  8.59506087733        1
[INPUT] 1    0    [1    /1   ]  0.49084489555        1

nuclear repulsion = 0
number of shells = 8
number of NR pGTOs = 12
number of NR cGTOs = 12
basis = {'Ar': [[0, [6346.930026586205, 1.0]], [0, [835.3272989706072, 1.0]], [0, [172.453945957506, 1.0]], [0, [44.88795388875324, 1.0]], [0, [4.746071635018024, 1.0]], [0, [0.3919082336537155, 1.0]], [1, [8.595060877327132, 1.0]], [1, [0.49084489555042565, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [6346.93002659]
bas 1, expnt(s) = [835.32729897]
bas 2, expnt(s) = [172.45394596]
bas 3, expnt(s) = [44.88795389]
bas 4, expnt(s) = [4.74607164]
bas 5, expnt(s) = [0.39190823]
bas 6, expnt(s) = [8.59506088]
bas 7, expnt(s) = [0.4908449]
CPU time:       136.89
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  1  1  1  0 36 37  0]
 [ 0  1  1  1  0 38 39  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 6.34693003e+03 1.79654379e+03 8.35327299e+02 3.92561343e+02
 1.72453946e+02 1.20231946e+02 4.48879539e+01 4.38139473e+01
 4.74607164e+00 8.12392193e+00 3.91908234e-01 1.25142064e+00
 8.59506088e+00 4.29334303e+01 4.90844896e-01 1.19857369e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319046147457883
cond(S) = 20.219866358139853
E1 = -688.7693984047366  E_coul = 184.91027309559172
init E= -503.859125309145
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.68104360072909  LUMO = 126.325126570501
  mo_energy =
[-1.21475879e+02 -1.32742405e+01 -7.62122675e+00 -7.62122675e+00
 -7.62122675e+00 -1.65095987e+00 -6.81043601e-01 -6.81043601e-01
 -6.81043601e-01  1.26325127e+02  1.19790697e+03  1.02866344e+04]
E1 = -706.2202736740585  E_coul = 198.95064265128337
cycle= 1 E= -507.269631022775  delta_E= -3.41  |g|= 0.288  |ddm|= 0.299
    CPU time for cycle= 1      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.33025
diis-c [-0.10906494  1.        ]
  HOMO = -0.235670882195179  LUMO = 127.691641520528
  mo_energy =
[-1.20092747e+02 -1.22440067e+01 -6.65112343e+00 -6.65112343e+00
 -6.65112343e+00 -1.16247187e+00 -2.35670882e-01 -2.35670882e-01
 -2.35670882e-01  1.27691642e+02  1.19924406e+03  1.02877752e+04]
E1 = -706.2028086910682  E_coul = 198.93294647987184
cycle= 2 E= -507.269862211196  delta_E= -0.000231  |g|= 0.00335  |ddm|= 0.00745
    CPU time for cycle= 2      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.00349919
diis-c [-1.15219860e-05 -2.58025754e-03  1.00258026e+00]
  HOMO = -0.235757159949478  LUMO = 127.689108807088
  mo_energy =
[-1.20097918e+02 -1.22446132e+01 -6.65205791e+00 -6.65205791e+00
 -6.65205791e+00 -1.16250445e+00 -2.35757160e-01 -2.35757160e-01
 -2.35757160e-01  1.27689109e+02  1.19923598e+03  1.02877630e+04]
E1 = -706.202623786402  E_coul = 198.932761536738
cycle= 3 E= -507.269862249664  delta_E= -3.85e-08  |g|= 4.74e-05  |ddm|= 8.41e-05
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=6.29162e-05
diis-c [-8.73322979e-11  4.61876930e-05 -1.87171430e-02  1.01867096e+00]
  HOMO = -0.235757827481503  LUMO = 127.689093182761
  mo_energy =
[-1.20097956e+02 -1.22446181e+01 -6.65206661e+00 -6.65206661e+00
 -6.65206661e+00 -1.16250463e+00 -2.35757827e-01 -2.35757827e-01
 -2.35757827e-01  1.27689093e+02  1.19923594e+03  1.02877630e+04]
E1 = -706.2026218829027  E_coul = 198.93275963323185
cycle= 4 E= -507.269862249671  delta_E= -6.82e-12  |g|= 1.09e-07  |ddm|= 9.81e-07
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.2026218829027  E_coul = 198.93275963323185
  HOMO = -0.235757824266674  LUMO = 127.689093306401
  mo_energy =
[-1.20097955e+02 -1.22446180e+01 -6.65206658e+00 -6.65206658e+00
 -6.65206658e+00 -1.16250463e+00 -2.35757824e-01 -2.35757824e-01
 -2.35757824e-01  1.27689093e+02  1.19923594e+03  1.02877630e+04]
E1 = -706.2026218899059  E_coul = 198.93275964023573
Extra cycle  E= -507.26986224967  delta_E= 6.82e-13  |g|= 1.4e-09  |ddm|= 2.77e-09
    CPU time for scf_cycle      0.09 sec, wall time      0.10 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 20.219866358139853
E1 = -706.2026218899059  E_coul = 198.93275964023573
init E= -507.26986224967
    CPU time for initialize scf      0.05 sec, wall time      0.05 sec
  HOMO = -0.235757824237548  LUMO = 127.689093307481
  mo_energy =
[-1.20097955e+02 -1.22446180e+01 -6.65206658e+00 -6.65206658e+00
 -6.65206658e+00 -1.16250463e+00 -2.35757824e-01 -2.35757824e-01
 -2.35757824e-01  1.27689093e+02  1.19923594e+03  1.02877630e+04]
E1 = -706.2026218899846  E_coul = 198.932759640314
cycle= 1 E= -507.269862249671  delta_E= -4.55e-13  |g|= 2.13e-11  |ddm|= 3.35e-11
    CPU time for cycle= 1      0.02 sec, wall time      0.02 sec
E1 = -706.2026218899846  E_coul = 198.932759640314
  HOMO = -0.235757824237218  LUMO = 127.689093307492
  mo_energy =
[-1.20097955e+02 -1.22446180e+01 -6.65206658e+00 -6.65206658e+00
 -6.65206658e+00 -1.16250463e+00 -2.35757824e-01 -2.35757824e-01
 -2.35757824e-01  1.27689093e+02  1.19923594e+03  1.02877630e+04]
E1 = -706.2026218899856  E_coul = 198.93275964031477
Extra cycle  E= -507.269862249671  delta_E= -2.27e-13  |g|= 2.1e-12  |ddm|= 4.65e-13
    CPU time for scf_cycle      0.12 sec, wall time      0.13 sec
exp = [6.34693003e+03 8.35327299e+02 1.72453946e+02 4.48879539e+01
 4.74607164e+00 3.91908234e-01 8.59506088e+00 4.90844896e-01]
grad_E = [ 2.70335026e-05  2.21663550e-04 -8.69993358e-04 -9.28699206e-06
 -4.87291141e-03 -1.29207330e-03 -1.37564823e-03  7.57038329e-03]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((8, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([1.5735952963858392e+03,2.3761303919145971e+02,5.2332977870138201e+01,4.7281081235122091e+00,3.9325830426169639e-01,8.5907170030661746e+00,4.9039633283239870e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "6s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:47:51 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  6347.90040193        1
[INPUT] 0    0    [1    /1   ]  821.676612647        1
[INPUT] 0    0    [1    /1   ]  171.536926546        1
[INPUT] 0    0    [1    /1   ]  44.8061574076        1
[INPUT] 0    0    [1    /1   ]  4.74833614415        1
[INPUT] 0    0    [1    /1   ]  0.392024687466       1
[INPUT] 1    0    [1    /1   ]  8.59524256298        1
[INPUT] 1    0    [1    /1   ]  0.490798456747       1

nuclear repulsion = 0
number of shells = 8
number of NR pGTOs = 12
number of NR cGTOs = 12
basis = {'Ar': [[0, [6347.900401927979, 1.0]], [0, [821.6766126474356, 1.0]], [0, [171.53692654555073, 1.0]], [0, [44.80615740762304, 1.0]], [0, [4.748336144145502, 1.0]], [0, [0.39202468746586033, 1.0]], [1, [8.595242562984037, 1.0]], [1, [0.49079845674715183, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [6347.90040193]
bas 1, expnt(s) = [821.67661265]
bas 2, expnt(s) = [171.53692655]
bas 3, expnt(s) = [44.80615741]
bas 4, expnt(s) = [4.74833614]
bas 5, expnt(s) = [0.39202469]
bas 6, expnt(s) = [8.59524256]
bas 7, expnt(s) = [0.49079846]
CPU time:       140.15
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  1  1  1  0 36 37  0]
 [ 0  1  1  1  0 38 39  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 6.34790040e+03 1.79674979e+03 8.21676613e+02 3.87740101e+02
 1.71536927e+02 1.19752129e+02 4.48061574e+01 4.37540541e+01
 4.74833614e+00 8.12682890e+00 3.92024687e-01 1.25169952e+00
 8.59524256e+00 4.29345647e+01 4.90798457e-01 1.19843195e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.3190707921573
cond(S) = 20.4538064727469
E1 = -688.7631385764037  E_coul = 184.91484042801886
init E= -503.848298148385
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.681027598136776  LUMO = 125.714215098894
  mo_energy =
[-1.21475948e+02 -1.32737154e+01 -7.62081206e+00 -7.62081206e+00
 -7.62081206e+00 -1.65101888e+00 -6.81027598e-01 -6.81027598e-01
 -6.81027598e-01  1.25714215e+02  1.18188364e+03  1.02406169e+04]
E1 = -706.2265567093067  E_coul = 198.9557635311916
cycle= 1 E= -507.270793178115  delta_E= -3.42  |g|= 0.289  |ddm|= 0.299
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.332766
diis-c [-0.11073311  1.        ]
  HOMO = -0.235672101381663  LUMO = 127.080244110403
  mo_energy =
[-1.20092692e+02 -1.22434348e+01 -6.65067498e+00 -6.65067498e+00
 -6.65067498e+00 -1.16246147e+00 -2.35672101e-01 -2.35672101e-01
 -2.35672101e-01  1.27080244e+02  1.18322178e+03  1.02417591e+04]
E1 = -706.2089563621266  E_coul = 198.93793070308635
cycle= 2 E= -507.27102565904  delta_E= -0.000232  |g|= 0.00336  |ddm|= 0.00751
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00350801
diis-c [-1.16179770e-05 -2.49922404e-03  1.00249922e+00]
  HOMO = -0.235759111256937  LUMO = 127.077697734344
  mo_energy =
[-1.20097901e+02 -1.22440462e+01 -6.65161706e+00 -6.65161706e+00
 -6.65161706e+00 -1.16249434e+00 -2.35759111e-01 -2.35759111e-01
 -2.35759111e-01  1.27077698e+02  1.18321367e+03  1.02417468e+04]
E1 = -706.2087694315359  E_coul = 198.9377437336724
cycle= 3 E= -507.271025697863  delta_E= -3.88e-08  |g|= 4.79e-05  |ddm|= 8.5e-05
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=6.35298e-05
diis-c [-9.17991490e-11  4.49235767e-05 -1.88152062e-02  1.01877028e+00]
  HOMO = -0.235759793777863  LUMO = 127.077681675694
  mo_energy =
[-1.20097939e+02 -1.22440512e+01 -6.65162593e+00 -6.65162593e+00
 -6.65162593e+00 -1.16249452e+00 -2.35759794e-01 -2.35759794e-01
 -2.35759794e-01  1.27077682e+02  1.18321363e+03  1.02417468e+04]
E1 = -706.2087674843167  E_coul = 198.93774178644637
cycle= 4 E= -507.27102569787  delta_E= -6.82e-12  |g|= 1.13e-07  |ddm|= 1e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.2087674843167  E_coul = 198.93774178644637
  HOMO = -0.235759790418803  LUMO = 127.077681803445
  mo_energy =
[-1.20097939e+02 -1.22440511e+01 -6.65162590e+00 -6.65162590e+00
 -6.65162590e+00 -1.16249452e+00 -2.35759790e-01 -2.35759790e-01
 -2.35759790e-01  1.27077682e+02  1.18321363e+03  1.02417468e+04]
E1 = -706.2087674916188  E_coul = 198.93774179374822
Extra cycle  E= -507.271025697871  delta_E= -2.84e-13  |g|= 1.46e-09  |ddm|= 2.9e-09
    CPU time for scf_cycle      0.09 sec, wall time      0.10 sec
exp = [6.34790040e+03 8.21676613e+02 1.71536927e+02 4.48061574e+01
 4.74833614e+00 3.92024687e-01 8.59524256e+00 4.90798457e-01]
E = -507.2710256978706
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((8, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([1.5735952963858392e+03,2.3761303919145971e+02,5.2332977870138201e+01,4.7281081235122091e+00,3.9325830426169639e-01,8.5907170030661746e+00,4.9039633283239870e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "6s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:47:52 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  6347.90040193        1
[INPUT] 0    0    [1    /1   ]  821.676612647        1
[INPUT] 0    0    [1    /1   ]  171.536926546        1
[INPUT] 0    0    [1    /1   ]  44.8061574076        1
[INPUT] 0    0    [1    /1   ]  4.74833614415        1
[INPUT] 0    0    [1    /1   ]  0.392024687466       1
[INPUT] 1    0    [1    /1   ]  8.59524256298        1
[INPUT] 1    0    [1    /1   ]  0.490798456747       1

nuclear repulsion = 0
number of shells = 8
number of NR pGTOs = 12
number of NR cGTOs = 12
basis = {'Ar': [[0, [6347.900401927979, 1.0]], [0, [821.6766126474356, 1.0]], [0, [171.53692654555073, 1.0]], [0, [44.80615740762304, 1.0]], [0, [4.748336144145502, 1.0]], [0, [0.39202468746586033, 1.0]], [1, [8.595242562984037, 1.0]], [1, [0.49079845674715183, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [6347.90040193]
bas 1, expnt(s) = [821.67661265]
bas 2, expnt(s) = [171.53692655]
bas 3, expnt(s) = [44.80615741]
bas 4, expnt(s) = [4.74833614]
bas 5, expnt(s) = [0.39202469]
bas 6, expnt(s) = [8.59524256]
bas 7, expnt(s) = [0.49079846]
CPU time:       140.79
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  1  1  1  0 36 37  0]
 [ 0  1  1  1  0 38 39  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 6.34790040e+03 1.79674979e+03 8.21676613e+02 3.87740101e+02
 1.71536927e+02 1.19752129e+02 4.48061574e+01 4.37540541e+01
 4.74833614e+00 8.12682890e+00 3.92024687e-01 1.25169952e+00
 8.59524256e+00 4.29345647e+01 4.90798457e-01 1.19843195e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.3190707921573
cond(S) = 20.4538064727469
E1 = -688.7631385764037  E_coul = 184.91484042801886
init E= -503.848298148385
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.681027598136776  LUMO = 125.714215098894
  mo_energy =
[-1.21475948e+02 -1.32737154e+01 -7.62081206e+00 -7.62081206e+00
 -7.62081206e+00 -1.65101888e+00 -6.81027598e-01 -6.81027598e-01
 -6.81027598e-01  1.25714215e+02  1.18188364e+03  1.02406169e+04]
E1 = -706.2265567093067  E_coul = 198.9557635311916
cycle= 1 E= -507.270793178115  delta_E= -3.42  |g|= 0.289  |ddm|= 0.299
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.332766
diis-c [-0.11073311  1.        ]
  HOMO = -0.235672101381663  LUMO = 127.080244110403
  mo_energy =
[-1.20092692e+02 -1.22434348e+01 -6.65067498e+00 -6.65067498e+00
 -6.65067498e+00 -1.16246147e+00 -2.35672101e-01 -2.35672101e-01
 -2.35672101e-01  1.27080244e+02  1.18322178e+03  1.02417591e+04]
E1 = -706.2089563621266  E_coul = 198.93793070308635
cycle= 2 E= -507.27102565904  delta_E= -0.000232  |g|= 0.00336  |ddm|= 0.00751
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00350801
diis-c [-1.16179770e-05 -2.49922404e-03  1.00249922e+00]
  HOMO = -0.235759111256937  LUMO = 127.077697734344
  mo_energy =
[-1.20097901e+02 -1.22440462e+01 -6.65161706e+00 -6.65161706e+00
 -6.65161706e+00 -1.16249434e+00 -2.35759111e-01 -2.35759111e-01
 -2.35759111e-01  1.27077698e+02  1.18321367e+03  1.02417468e+04]
E1 = -706.2087694315359  E_coul = 198.9377437336724
cycle= 3 E= -507.271025697863  delta_E= -3.88e-08  |g|= 4.79e-05  |ddm|= 8.5e-05
    CPU time for cycle= 3      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=6.35298e-05
diis-c [-9.17991490e-11  4.49235767e-05 -1.88152062e-02  1.01877028e+00]
  HOMO = -0.235759793777863  LUMO = 127.077681675694
  mo_energy =
[-1.20097939e+02 -1.22440512e+01 -6.65162593e+00 -6.65162593e+00
 -6.65162593e+00 -1.16249452e+00 -2.35759794e-01 -2.35759794e-01
 -2.35759794e-01  1.27077682e+02  1.18321363e+03  1.02417468e+04]
E1 = -706.2087674843167  E_coul = 198.93774178644637
cycle= 4 E= -507.27102569787  delta_E= -6.82e-12  |g|= 1.13e-07  |ddm|= 1e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.2087674843167  E_coul = 198.93774178644637
  HOMO = -0.235759790418803  LUMO = 127.077681803445
  mo_energy =
[-1.20097939e+02 -1.22440511e+01 -6.65162590e+00 -6.65162590e+00
 -6.65162590e+00 -1.16249452e+00 -2.35759790e-01 -2.35759790e-01
 -2.35759790e-01  1.27077682e+02  1.18321363e+03  1.02417468e+04]
E1 = -706.2087674916188  E_coul = 198.93774179374822
Extra cycle  E= -507.271025697871  delta_E= -2.84e-13  |g|= 1.46e-09  |ddm|= 2.9e-09
    CPU time for scf_cycle      0.09 sec, wall time      0.10 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 20.4538064727469
E1 = -706.2087674916188  E_coul = 198.93774179374822
init E= -507.271025697871
    CPU time for initialize scf      0.06 sec, wall time      0.06 sec
  HOMO = -0.235759790388299  LUMO = 127.077681804564
  mo_energy =
[-1.20097939e+02 -1.22440511e+01 -6.65162590e+00 -6.65162590e+00
 -6.65162590e+00 -1.16249452e+00 -2.35759790e-01 -2.35759790e-01
 -2.35759790e-01  1.27077682e+02  1.18321363e+03  1.02417468e+04]
E1 = -706.2087674917003  E_coul = 198.93774179382987
cycle= 1 E= -507.27102569787  delta_E= 1.71e-13  |g|= 2.3e-11  |ddm|= 3.51e-11
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -706.2087674917003  E_coul = 198.93774179382987
  HOMO = -0.235759790387952  LUMO = 127.077681804576
  mo_energy =
[-1.20097939e+02 -1.22440511e+01 -6.65162590e+00 -6.65162590e+00
 -6.65162590e+00 -1.16249452e+00 -2.35759790e-01 -2.35759790e-01
 -2.35759790e-01  1.27077682e+02  1.18321363e+03  1.02417468e+04]
E1 = -706.2087674917011  E_coul = 198.93774179383095
Extra cycle  E= -507.27102569787  delta_E= 2.27e-13  |g|= 1.99e-12  |ddm|= 4.9e-13
    CPU time for scf_cycle      0.13 sec, wall time      0.13 sec
exp = [6.34790040e+03 8.21676613e+02 1.71536927e+02 4.48061574e+01
 4.74833614e+00 3.92024687e-01 8.59524256e+00 4.90798457e-01]
grad_E = [ 3.53579830e-05  1.55815400e-05 -2.65504861e-05 -9.45693017e-04
 -2.76293481e-03  7.97831208e-04 -1.12214579e-03  6.30388269e-03]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((8, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([1.5735952963858392e+03,2.3761303919145971e+02,5.2332977870138201e+01,4.7281081235122091e+00,3.9325830426169639e-01,8.5907170030661746e+00,4.9039633283239870e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "6s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:47:55 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  6347.87500222        1
[INPUT] 0    0    [1    /1   ]  822.019501375        1
[INPUT] 0    0    [1    /1   ]  171.790148572        1
[INPUT] 0    0    [1    /1   ]  44.8776413655        1
[INPUT] 0    0    [1    /1   ]  4.7516838403         1
[INPUT] 0    0    [1    /1   ]  0.392021754183       1
[INPUT] 1    0    [1    /1   ]  8.5960522116         1
[INPUT] 1    0    [1    /1   ]  0.490546908541       1

nuclear repulsion = 0
number of shells = 8
number of NR pGTOs = 12
number of NR cGTOs = 12
basis = {'Ar': [[0, [6347.875002217681, 1.0]], [0, [822.0195013753162, 1.0]], [0, [171.7901485719303, 1.0]], [0, [44.87764136549987, 1.0]], [0, [4.751683840297456, 1.0]], [0, [0.39202175418335905, 1.0]], [1, [8.596052211603075, 1.0]], [1, [0.4905469085414775, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [6347.87500222]
bas 1, expnt(s) = [822.01950138]
bas 2, expnt(s) = [171.79014857]
bas 3, expnt(s) = [44.87764137]
bas 4, expnt(s) = [4.75168384]
bas 5, expnt(s) = [0.39202175]
bas 6, expnt(s) = [8.59605221]
bas 7, expnt(s) = [0.49054691]
CPU time:       144.12
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  1  1  1  0 36 37  0]
 [ 0  1  1  1  0 38 39  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 6.34787500e+03 1.79674440e+03 8.22019501e+02 3.87861448e+02
 1.71790149e+02 1.19884688e+02 4.48776414e+01 4.38063977e+01
 4.75168384e+00 8.13112573e+00 3.92021754e-01 1.25169250e+00
 8.59605221e+00 4.29396202e+01 4.90546909e-01 1.19766421e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319329501135847
cond(S) = 20.473940816796734
E1 = -688.763061860801  E_coul = 184.9152786175393
init E= -503.847783243262
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.68133319575336  LUMO = 126.037699467499
  mo_energy =
[-1.21474778e+02 -1.32741576e+01 -7.62057156e+00 -7.62057156e+00
 -7.62057156e+00 -1.65136724e+00 -6.81333196e-01 -6.81333196e-01
 -6.81333196e-01  1.26037699e+02  1.18324430e+03  1.02427570e+04]
E1 = -706.2288213109857  E_coul = 198.95796858796697
cycle= 1 E= -507.270852723019  delta_E= -3.42  |g|= 0.288  |ddm|= 0.299
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.333005
diis-c [-0.11089265  1.        ]
  HOMO = -0.236163127730781  LUMO = 127.404509681994
  mo_energy =
[-1.20090365e+02 -1.22438111e+01 -6.65033648e+00 -6.65033648e+00
 -6.65033648e+00 -1.16288102e+00 -2.36163128e-01 -2.36163128e-01
 -2.36163128e-01  1.27404510e+02  1.18458447e+03  1.02439020e+04]
E1 = -706.2113237055099  E_coul = 198.9402403440325
cycle= 2 E= -507.271083361477  delta_E= -0.000231  |g|= 0.00334  |ddm|= 0.00747
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00349037
diis-c [-1.14940747e-05 -2.49833940e-03  1.00249834e+00]
  HOMO = -0.236249533336902  LUMO = 127.401975273576
  mo_energy =
[-1.20095545e+02 -1.22444190e+01 -6.65127251e+00 -6.65127251e+00
 -6.65127251e+00 -1.16291372e+00 -2.36249533e-01 -2.36249533e-01
 -2.36249533e-01  1.27401975e+02  1.18457641e+03  1.02438898e+04]
E1 = -706.2111382114399  E_coul = 198.94005481158132
cycle= 3 E= -507.271083399859  delta_E= -3.84e-08  |g|= 4.76e-05  |ddm|= 8.44e-05
    CPU time for cycle= 3      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=6.31326e-05
diis-c [-9.07576953e-11  4.50238643e-05 -1.87978097e-02  1.01875279e+00]
  HOMO = -0.23625020961156  LUMO = 127.401959343708
  mo_energy =
[-1.20095583e+02 -1.22444240e+01 -6.65128131e+00 -6.65128131e+00
 -6.65128131e+00 -1.16291390e+00 -2.36250210e-01 -2.36250210e-01
 -2.36250210e-01  1.27401959e+02  1.18457637e+03  1.02438898e+04]
E1 = -706.211136283438  E_coul = 198.9400528835725
cycle= 4 E= -507.271083399866  delta_E= -6.93e-12  |g|= 1.12e-07  |ddm|= 9.92e-07
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.211136283438  E_coul = 198.9400528835725
  HOMO = -0.236250206295006  LUMO = 127.401959470299
  mo_energy =
[-1.20095583e+02 -1.22444240e+01 -6.65128128e+00 -6.65128128e+00
 -6.65128128e+00 -1.16291390e+00 -2.36250206e-01 -2.36250206e-01
 -2.36250206e-01  1.27401959e+02  1.18457637e+03  1.02438898e+04]
E1 = -706.2111362906537  E_coul = 198.94005289078788
Extra cycle  E= -507.271083399866  delta_E= -2.84e-13  |g|= 1.45e-09  |ddm|= 2.86e-09
    CPU time for scf_cycle      0.09 sec, wall time      0.10 sec
exp = [6.34787500e+03 8.22019501e+02 1.71790149e+02 4.48776414e+01
 4.75168384e+00 3.92021754e-01 8.59605221e+00 4.90546909e-01]
E = -507.2710833998658
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((8, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([1.5735952963858392e+03,2.3761303919145971e+02,5.2332977870138201e+01,4.7281081235122091e+00,3.9325830426169639e-01,8.5907170030661746e+00,4.9039633283239870e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "6s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:47:56 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  6347.87500222        1
[INPUT] 0    0    [1    /1   ]  822.019501375        1
[INPUT] 0    0    [1    /1   ]  171.790148572        1
[INPUT] 0    0    [1    /1   ]  44.8776413655        1
[INPUT] 0    0    [1    /1   ]  4.7516838403         1
[INPUT] 0    0    [1    /1   ]  0.392021754183       1
[INPUT] 1    0    [1    /1   ]  8.5960522116         1
[INPUT] 1    0    [1    /1   ]  0.490546908541       1

nuclear repulsion = 0
number of shells = 8
number of NR pGTOs = 12
number of NR cGTOs = 12
basis = {'Ar': [[0, [6347.875002217681, 1.0]], [0, [822.0195013753162, 1.0]], [0, [171.7901485719303, 1.0]], [0, [44.87764136549987, 1.0]], [0, [4.751683840297456, 1.0]], [0, [0.39202175418335905, 1.0]], [1, [8.596052211603075, 1.0]], [1, [0.4905469085414775, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [6347.87500222]
bas 1, expnt(s) = [822.01950138]
bas 2, expnt(s) = [171.79014857]
bas 3, expnt(s) = [44.87764137]
bas 4, expnt(s) = [4.75168384]
bas 5, expnt(s) = [0.39202175]
bas 6, expnt(s) = [8.59605221]
bas 7, expnt(s) = [0.49054691]
CPU time:       144.77
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  1  1  1  0 36 37  0]
 [ 0  1  1  1  0 38 39  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 6.34787500e+03 1.79674440e+03 8.22019501e+02 3.87861448e+02
 1.71790149e+02 1.19884688e+02 4.48776414e+01 4.38063977e+01
 4.75168384e+00 8.13112573e+00 3.92021754e-01 1.25169250e+00
 8.59605221e+00 4.29396202e+01 4.90546909e-01 1.19766421e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319329501135847
cond(S) = 20.473940816796734
E1 = -688.763061860801  E_coul = 184.9152786175393
init E= -503.847783243262
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.68133319575336  LUMO = 126.037699467499
  mo_energy =
[-1.21474778e+02 -1.32741576e+01 -7.62057156e+00 -7.62057156e+00
 -7.62057156e+00 -1.65136724e+00 -6.81333196e-01 -6.81333196e-01
 -6.81333196e-01  1.26037699e+02  1.18324430e+03  1.02427570e+04]
E1 = -706.2288213109857  E_coul = 198.95796858796697
cycle= 1 E= -507.270852723019  delta_E= -3.42  |g|= 0.288  |ddm|= 0.299
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.333005
diis-c [-0.11089265  1.        ]
  HOMO = -0.236163127730781  LUMO = 127.404509681994
  mo_energy =
[-1.20090365e+02 -1.22438111e+01 -6.65033648e+00 -6.65033648e+00
 -6.65033648e+00 -1.16288102e+00 -2.36163128e-01 -2.36163128e-01
 -2.36163128e-01  1.27404510e+02  1.18458447e+03  1.02439020e+04]
E1 = -706.2113237055099  E_coul = 198.9402403440325
cycle= 2 E= -507.271083361477  delta_E= -0.000231  |g|= 0.00334  |ddm|= 0.00747
    CPU time for cycle= 2      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.00349037
diis-c [-1.14940747e-05 -2.49833940e-03  1.00249834e+00]
  HOMO = -0.236249533336902  LUMO = 127.401975273576
  mo_energy =
[-1.20095545e+02 -1.22444190e+01 -6.65127251e+00 -6.65127251e+00
 -6.65127251e+00 -1.16291372e+00 -2.36249533e-01 -2.36249533e-01
 -2.36249533e-01  1.27401975e+02  1.18457641e+03  1.02438898e+04]
E1 = -706.2111382114399  E_coul = 198.94005481158132
cycle= 3 E= -507.271083399859  delta_E= -3.84e-08  |g|= 4.76e-05  |ddm|= 8.44e-05
    CPU time for cycle= 3      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=6.31326e-05
diis-c [-9.07576953e-11  4.50238643e-05 -1.87978097e-02  1.01875279e+00]
  HOMO = -0.23625020961156  LUMO = 127.401959343708
  mo_energy =
[-1.20095583e+02 -1.22444240e+01 -6.65128131e+00 -6.65128131e+00
 -6.65128131e+00 -1.16291390e+00 -2.36250210e-01 -2.36250210e-01
 -2.36250210e-01  1.27401959e+02  1.18457637e+03  1.02438898e+04]
E1 = -706.211136283438  E_coul = 198.9400528835725
cycle= 4 E= -507.271083399866  delta_E= -6.93e-12  |g|= 1.12e-07  |ddm|= 9.92e-07
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.211136283438  E_coul = 198.9400528835725
  HOMO = -0.236250206295006  LUMO = 127.401959470299
  mo_energy =
[-1.20095583e+02 -1.22444240e+01 -6.65128128e+00 -6.65128128e+00
 -6.65128128e+00 -1.16291390e+00 -2.36250206e-01 -2.36250206e-01
 -2.36250206e-01  1.27401959e+02  1.18457637e+03  1.02438898e+04]
E1 = -706.2111362906537  E_coul = 198.94005289078788
Extra cycle  E= -507.271083399866  delta_E= -2.84e-13  |g|= 1.45e-09  |ddm|= 2.86e-09
    CPU time for scf_cycle      0.09 sec, wall time      0.10 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 20.473940816796734
E1 = -706.2111362906537  E_coul = 198.94005289078788
init E= -507.271083399866
    CPU time for initialize scf      0.05 sec, wall time      0.06 sec
  HOMO = -0.23625020626492  LUMO = 127.401959471408
  mo_energy =
[-1.20095583e+02 -1.22444240e+01 -6.65128128e+00 -6.65128128e+00
 -6.65128128e+00 -1.16291390e+00 -2.36250206e-01 -2.36250206e-01
 -2.36250206e-01  1.27401959e+02  1.18457637e+03  1.02438898e+04]
E1 = -706.211136290734  E_coul = 198.94005289086837
cycle= 1 E= -507.271083399866  delta_E= 2.27e-13  |g|= 2.22e-11  |ddm|= 3.47e-11
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -706.211136290734  E_coul = 198.94005289086837
  HOMO = -0.236250206264585  LUMO = 127.401959471419
  mo_energy =
[-1.20095583e+02 -1.22444240e+01 -6.65128128e+00 -6.65128128e+00
 -6.65128128e+00 -1.16291390e+00 -2.36250206e-01 -2.36250206e-01
 -2.36250206e-01  1.27401959e+02  1.18457637e+03  1.02438898e+04]
E1 = -706.2111362907352  E_coul = 198.94005289086948
Extra cycle  E= -507.271083399866  delta_E= -1.71e-13  |g|= 1.89e-12  |ddm|= 4.84e-13
    CPU time for scf_cycle      0.13 sec, wall time      0.14 sec
exp = [6.34787500e+03 8.22019501e+02 1.71790149e+02 4.48776414e+01
 4.75168384e+00 3.92021754e-01 8.59605221e+00 4.90546909e-01]
grad_E = [ 3.54051672e-05  6.48154388e-06 -1.41259851e-05 -4.72985131e-04
  4.07909595e-04 -4.72917128e-04  1.17411134e-04 -3.27644395e-03]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((8, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([1.5735952963858392e+03,2.3761303919145971e+02,5.2332977870138201e+01,4.7281081235122091e+00,3.9325830426169639e-01,8.5907170030661746e+00,4.9039633283239870e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "6s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:47:59 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  6347.80901539        1
[INPUT] 0    0    [1    /1   ]  822.930491385        1
[INPUT] 0    0    [1    /1   ]  172.122145796        1
[INPUT] 0    0    [1    /1   ]  44.9571634969        1
[INPUT] 0    0    [1    /1   ]  4.75184183439        1
[INPUT] 0    0    [1    /1   ]  0.392052409214       1
[INPUT] 1    0    [1    /1   ]  8.59610646661        1
[INPUT] 1    0    [1    /1   ]  0.490564996542       1

nuclear repulsion = 0
number of shells = 8
number of NR pGTOs = 12
number of NR cGTOs = 12
basis = {'Ar': [[0, [6347.809015388052, 1.0]], [0, [822.9304913848506, 1.0]], [0, [172.12214579607095, 1.0]], [0, [44.95716349691253, 1.0]], [0, [4.751841834390738, 1.0]], [0, [0.3920524092137279, 1.0]], [1, [8.596106466610136, 1.0]], [1, [0.4905649965419707, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [6347.80901539]
bas 1, expnt(s) = [822.93049138]
bas 2, expnt(s) = [172.1221458]
bas 3, expnt(s) = [44.9571635]
bas 4, expnt(s) = [4.75184183]
bas 5, expnt(s) = [0.39205241]
bas 6, expnt(s) = [8.59610647]
bas 7, expnt(s) = [0.490565]
CPU time:       148.03
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  1  1  1  0 36 37  0]
 [ 0  1  1  1  0 38 39  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 6.34780902e+03 1.79673039e+03 8.22930491e+02 3.88183785e+02
 1.72122146e+02 1.20058410e+02 4.49571635e+01 4.38646028e+01
 4.75184183e+00 8.13132850e+00 3.92052409e-01 1.25176591e+00
 8.59610647e+00 4.29399589e+01 4.90564997e-01 1.19771941e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319288839944008
cond(S) = 20.481982673862365
E1 = -688.764740435326  E_coul = 184.91752188550515
init E= -503.847218549821
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.681298974647502  LUMO = 126.406096987667
  mo_energy =
[-1.21474129e+02 -1.32743445e+01 -7.62039163e+00 -7.62039163e+00
 -7.62039163e+00 -1.65139296e+00 -6.81298975e-01 -6.81298975e-01
 -6.81298975e-01  1.26406097e+02  1.18539964e+03  1.02469534e+04]
E1 = -706.2337153535259  E_coul = 198.9628401734354
cycle= 1 E= -507.27087518009  delta_E= -3.42  |g|= 0.288  |ddm|= 0.298
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.333108
diis-c [-0.11096102  1.        ]
  HOMO = -0.236087871455979  LUMO = 127.773538644829
  mo_energy =
[-1.20089088e+02 -1.22438579e+01 -6.65002171e+00 -6.65002171e+00
 -6.65002171e+00 -1.16285620e+00 -2.36087871e-01 -2.36087871e-01
 -2.36087871e-01  1.27773539e+02  1.18674101e+03  1.02481003e+04]
E1 = -706.2163075859957  E_coul = 198.94520302545908
cycle= 2 E= -507.271104560537  delta_E= -0.000229  |g|= 0.00333  |ddm|= 0.00744
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.00348053
diis-c [-1.14177629e-05 -2.51153469e-03  1.00251153e+00]
  HOMO = -0.236173794238058  LUMO = 127.771013907972
  mo_energy =
[-1.20094243e+02 -1.22444625e+01 -6.65095248e+00 -6.65095248e+00
 -6.65095248e+00 -1.16288872e+00 -2.36173794e-01 -2.36173794e-01
 -2.36173794e-01  1.27771014e+02  1.18673298e+03  1.02480881e+04]
E1 = -706.216123400014  E_coul = 198.94501880142647
cycle= 3 E= -507.271104598587  delta_E= -3.81e-08  |g|= 4.73e-05  |ddm|= 8.39e-05
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=6.27849e-05
diis-c [-8.97326618e-11  4.50911363e-05 -1.87560292e-02  1.01871094e+00]
  HOMO = -0.236174464091899  LUMO = 127.770998136015
  mo_energy =
[-1.20094281e+02 -1.22444675e+01 -6.65096119e+00 -6.65096119e+00
 -6.65096119e+00 -1.16288891e+00 -2.36174464e-01 -2.36174464e-01
 -2.36174464e-01  1.27770998e+02  1.18673294e+03  1.02480881e+04]
E1 = -706.2161214929876  E_coul = 198.94501689439295
cycle= 4 E= -507.271104598595  delta_E= -7.11e-12  |g|= 1.1e-07  |ddm|= 9.82e-07
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.2161214929876  E_coul = 198.94501689439295
  HOMO = -0.236174460817855  LUMO = 127.77099826148
  mo_energy =
[-1.20094281e+02 -1.22444674e+01 -6.65096116e+00 -6.65096116e+00
 -6.65096116e+00 -1.16288891e+00 -2.36174461e-01 -2.36174461e-01
 -2.36174461e-01  1.27770998e+02  1.18673294e+03  1.02480881e+04]
E1 = -706.2161215001111  E_coul = 198.9450169015164
Extra cycle  E= -507.271104598595  delta_E= -5.68e-14  |g|= 1.43e-09  |ddm|= 2.83e-09
    CPU time for scf_cycle      0.09 sec, wall time      0.10 sec
exp = [6.34780902e+03 8.22930491e+02 1.72122146e+02 4.49571635e+01
 4.75184183e+00 3.92052409e-01 8.59610647e+00 4.90564997e-01]
E = -507.27110459859466
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((8, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([1.5735952963858392e+03,2.3761303919145971e+02,5.2332977870138201e+01,4.7281081235122091e+00,3.9325830426169639e-01,8.5907170030661746e+00,4.9039633283239870e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "6s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:48:00 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  6347.80901539        1
[INPUT] 0    0    [1    /1   ]  822.930491385        1
[INPUT] 0    0    [1    /1   ]  172.122145796        1
[INPUT] 0    0    [1    /1   ]  44.9571634969        1
[INPUT] 0    0    [1    /1   ]  4.75184183439        1
[INPUT] 0    0    [1    /1   ]  0.392052409214       1
[INPUT] 1    0    [1    /1   ]  8.59610646661        1
[INPUT] 1    0    [1    /1   ]  0.490564996542       1

nuclear repulsion = 0
number of shells = 8
number of NR pGTOs = 12
number of NR cGTOs = 12
basis = {'Ar': [[0, [6347.809015388052, 1.0]], [0, [822.9304913848506, 1.0]], [0, [172.12214579607095, 1.0]], [0, [44.95716349691253, 1.0]], [0, [4.751841834390738, 1.0]], [0, [0.3920524092137279, 1.0]], [1, [8.596106466610136, 1.0]], [1, [0.4905649965419707, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [6347.80901539]
bas 1, expnt(s) = [822.93049138]
bas 2, expnt(s) = [172.1221458]
bas 3, expnt(s) = [44.9571635]
bas 4, expnt(s) = [4.75184183]
bas 5, expnt(s) = [0.39205241]
bas 6, expnt(s) = [8.59610647]
bas 7, expnt(s) = [0.490565]
CPU time:       148.68
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  1  1  1  0 36 37  0]
 [ 0  1  1  1  0 38 39  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 6.34780902e+03 1.79673039e+03 8.22930491e+02 3.88183785e+02
 1.72122146e+02 1.20058410e+02 4.49571635e+01 4.38646028e+01
 4.75184183e+00 8.13132850e+00 3.92052409e-01 1.25176591e+00
 8.59610647e+00 4.29399589e+01 4.90564997e-01 1.19771941e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319288839944008
cond(S) = 20.481982673862365
E1 = -688.764740435326  E_coul = 184.91752188550515
init E= -503.847218549821
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.681298974647502  LUMO = 126.406096987667
  mo_energy =
[-1.21474129e+02 -1.32743445e+01 -7.62039163e+00 -7.62039163e+00
 -7.62039163e+00 -1.65139296e+00 -6.81298975e-01 -6.81298975e-01
 -6.81298975e-01  1.26406097e+02  1.18539964e+03  1.02469534e+04]
E1 = -706.2337153535259  E_coul = 198.9628401734354
cycle= 1 E= -507.27087518009  delta_E= -3.42  |g|= 0.288  |ddm|= 0.298
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.333108
diis-c [-0.11096102  1.        ]
  HOMO = -0.236087871455979  LUMO = 127.773538644829
  mo_energy =
[-1.20089088e+02 -1.22438579e+01 -6.65002171e+00 -6.65002171e+00
 -6.65002171e+00 -1.16285620e+00 -2.36087871e-01 -2.36087871e-01
 -2.36087871e-01  1.27773539e+02  1.18674101e+03  1.02481003e+04]
E1 = -706.2163075859957  E_coul = 198.94520302545908
cycle= 2 E= -507.271104560537  delta_E= -0.000229  |g|= 0.00333  |ddm|= 0.00744
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00348053
diis-c [-1.14177629e-05 -2.51153469e-03  1.00251153e+00]
  HOMO = -0.236173794238058  LUMO = 127.771013907972
  mo_energy =
[-1.20094243e+02 -1.22444625e+01 -6.65095248e+00 -6.65095248e+00
 -6.65095248e+00 -1.16288872e+00 -2.36173794e-01 -2.36173794e-01
 -2.36173794e-01  1.27771014e+02  1.18673298e+03  1.02480881e+04]
E1 = -706.216123400014  E_coul = 198.94501880142647
cycle= 3 E= -507.271104598587  delta_E= -3.81e-08  |g|= 4.73e-05  |ddm|= 8.39e-05
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=6.27849e-05
diis-c [-8.97326618e-11  4.50911363e-05 -1.87560292e-02  1.01871094e+00]
  HOMO = -0.236174464091899  LUMO = 127.770998136015
  mo_energy =
[-1.20094281e+02 -1.22444675e+01 -6.65096119e+00 -6.65096119e+00
 -6.65096119e+00 -1.16288891e+00 -2.36174464e-01 -2.36174464e-01
 -2.36174464e-01  1.27770998e+02  1.18673294e+03  1.02480881e+04]
E1 = -706.2161214929876  E_coul = 198.94501689439295
cycle= 4 E= -507.271104598595  delta_E= -7.11e-12  |g|= 1.1e-07  |ddm|= 9.82e-07
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.2161214929876  E_coul = 198.94501689439295
  HOMO = -0.236174460817855  LUMO = 127.77099826148
  mo_energy =
[-1.20094281e+02 -1.22444674e+01 -6.65096116e+00 -6.65096116e+00
 -6.65096116e+00 -1.16288891e+00 -2.36174461e-01 -2.36174461e-01
 -2.36174461e-01  1.27770998e+02  1.18673294e+03  1.02480881e+04]
E1 = -706.2161215001111  E_coul = 198.9450169015164
Extra cycle  E= -507.271104598595  delta_E= -5.68e-14  |g|= 1.43e-09  |ddm|= 2.83e-09
    CPU time for scf_cycle      0.10 sec, wall time      0.10 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 20.481982673862365
E1 = -706.2161215001111  E_coul = 198.9450169015164
init E= -507.271104598595
    CPU time for initialize scf      0.05 sec, wall time      0.05 sec
  HOMO = -0.236174460788193  LUMO = 127.770998262576
  mo_energy =
[-1.20094281e+02 -1.22444674e+01 -6.65096116e+00 -6.65096116e+00
 -6.65096116e+00 -1.16288891e+00 -2.36174461e-01 -2.36174461e-01
 -2.36174461e-01  1.27770998e+02  1.18673294e+03  1.02480881e+04]
E1 = -706.2161215001902  E_coul = 198.94501690159552
cycle= 1 E= -507.271104598595  delta_E=    0  |g|= 2.19e-11  |ddm|= 3.42e-11
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -706.2161215001902  E_coul = 198.94501690159552
  HOMO = -0.236174460787868  LUMO = 127.770998262586
  mo_energy =
[-1.20094281e+02 -1.22444674e+01 -6.65096116e+00 -6.65096116e+00
 -6.65096116e+00 -1.16288891e+00 -2.36174461e-01 -2.36174461e-01
 -2.36174461e-01  1.27770998e+02  1.18673294e+03  1.02480881e+04]
E1 = -706.2161215001911  E_coul = 198.94501690159663
Extra cycle  E= -507.271104598594  delta_E= 2.27e-13  |g|= 1.36e-12  |ddm|= 4.84e-13
    CPU time for scf_cycle      0.12 sec, wall time      0.12 sec
exp = [6.34780902e+03 8.22930491e+02 1.72122146e+02 4.49571635e+01
 4.75184183e+00 3.92052409e-01 8.59610647e+00 4.90564997e-01]
grad_E = [ 3.51674338e-05  1.95707630e-06  3.47206013e-06 -5.45797347e-05
  7.26916742e-04 -3.73397358e-04  2.64622697e-04 -2.47724668e-03]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((8, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([1.5735952963858392e+03,2.3761303919145971e+02,5.2332977870138201e+01,4.7281081235122091e+00,3.9325830426169639e-01,8.5907170030661746e+00,4.9039633283239870e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "6s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:48:03 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  6347.79856914        1
[INPUT] 0    0    [1    /1   ]  823.075086775        1
[INPUT] 0    0    [1    /1   ]  172.161110653        1
[INPUT] 0    0    [1    /1   ]  44.9662806563        1
[INPUT] 0    0    [1    /1   ]  4.75116341017        1
[INPUT] 0    0    [1    /1   ]  0.392064522301       1
[INPUT] 1    0    [1    /1   ]  8.59594918158        1
[INPUT] 1    0    [1    /1   ]  0.490617640494       1

nuclear repulsion = 0
number of shells = 8
number of NR pGTOs = 12
number of NR cGTOs = 12
basis = {'Ar': [[0, [6347.798569137924, 1.0]], [0, [823.0750867753526, 1.0]], [0, [172.161110652702, 1.0]], [0, [44.9662806562854, 1.0]], [0, [4.751163410165485, 1.0]], [0, [0.39206452230125177, 1.0]], [1, [8.5959491815754, 1.0]], [1, [0.4906176404944461, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [6347.79856914]
bas 1, expnt(s) = [823.07508678]
bas 2, expnt(s) = [172.16111065]
bas 3, expnt(s) = [44.96628066]
bas 4, expnt(s) = [4.75116341]
bas 5, expnt(s) = [0.39206452]
bas 6, expnt(s) = [8.59594918]
bas 7, expnt(s) = [0.49061764]
CPU time:       151.92
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  1  1  1  0 36 37  0]
 [ 0  1  1  1  0 38 39  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 6.34779857e+03 1.79672817e+03 8.23075087e+02 3.88234939e+02
 1.72161111e+02 1.20078794e+02 4.49662807e+01 4.38712743e+01
 4.75116341e+00 8.13045780e+00 3.92064522e-01 1.25179491e+00
 8.59594918e+00 4.29389768e+01 4.90617640e-01 1.19788008e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319229703467677
cond(S) = 20.48152404967081
E1 = -688.7650445125827  E_coul = 184.91792330212232
init E= -503.84712121046
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.68123020888239  LUMO = 126.445523395449
  mo_energy =
[-1.21474192e+02 -1.32743326e+01 -7.62039878e+00 -7.62039878e+00
 -7.62039878e+00 -1.65133306e+00 -6.81230209e-01 -6.81230209e-01
 -6.81230209e-01  1.26445523e+02  1.18568524e+03  1.02475614e+04]
E1 = -706.2344561633631  E_coul = 198.9635803720037
cycle= 1 E= -507.270875791359  delta_E= -3.42  |g|= 0.288  |ddm|= 0.299
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.33311
diis-c [-0.11096232  1.        ]
  HOMO = -0.235973945383083  LUMO = 127.812989782013
  mo_energy =
[-1.20089201e+02 -1.22438241e+01 -6.65001478e+00 -6.65001478e+00
 -6.65001478e+00 -1.16277016e+00 -2.35973945e-01 -2.35973945e-01
 -2.35973945e-01  1.27812990e+02  1.18702656e+03  1.02487083e+04]
E1 = -706.2170535792166  E_coul = 198.94594839163926
cycle= 2 E= -507.271105187577  delta_E= -0.000229  |g|= 0.00333  |ddm|= 0.00744
    CPU time for cycle= 2      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.00348138
diis-c [-1.14211649e-05 -2.51597754e-03  1.00251598e+00]
  HOMO = -0.236059851036589  LUMO = 127.810465511402
  mo_energy =
[-1.20094354e+02 -1.22444285e+01 -6.65094526e+00 -6.65094526e+00
 -6.65094526e+00 -1.16280267e+00 -2.36059851e-01 -2.36059851e-01
 -2.36059851e-01  1.27810466e+02  1.18701853e+03  1.02486961e+04]
E1 = -706.2168694764874  E_coul = 198.9457642508626
cycle= 3 E= -507.271105225625  delta_E= -3.8e-08  |g|= 4.73e-05  |ddm|= 8.38e-05
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=6.27657e-05
diis-c [-8.96389308e-11  4.50953478e-05 -1.87473908e-02  1.01870230e+00]
  HOMO = -0.236060520277581  LUMO = 127.81044976022
  mo_energy =
[-1.20094392e+02 -1.22444334e+01 -6.65095397e+00 -6.65095397e+00
 -6.65095397e+00 -1.16280285e+00 -2.36060520e-01 -2.36060520e-01
 -2.36060520e-01  1.27810450e+02  1.18701849e+03  1.02486960e+04]
E1 = -706.216867571632  E_coul = 198.94576234599984
cycle= 4 E= -507.271105225632  delta_E= -7.28e-12  |g|= 1.1e-07  |ddm|= 9.81e-07
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.216867571632  E_coul = 198.94576234599984
  HOMO = -0.236060517007419  LUMO = 127.810449885582
  mo_energy =
[-1.20094392e+02 -1.22444334e+01 -6.65095394e+00 -6.65095394e+00
 -6.65095394e+00 -1.16280285e+00 -2.36060517e-01 -2.36060517e-01
 -2.36060517e-01  1.27810450e+02  1.18701850e+03  1.02486960e+04]
E1 = -706.2168675787464  E_coul = 198.94576235311416
Extra cycle  E= -507.271105225632  delta_E= -5.68e-14  |g|= 1.43e-09  |ddm|= 2.82e-09
    CPU time for scf_cycle      0.09 sec, wall time      0.10 sec
exp = [6.34779857e+03 8.23075087e+02 1.72161111e+02 4.49662807e+01
 4.75116341e+00 3.92064522e-01 8.59594918e+00 4.90617640e-01]
E = -507.2711052256322
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((8, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([1.5735952963858392e+03,2.3761303919145971e+02,5.2332977870138201e+01,4.7281081235122091e+00,3.9325830426169639e-01,8.5907170030661746e+00,4.9039633283239870e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "6s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:48:04 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  6347.79856914        1
[INPUT] 0    0    [1    /1   ]  823.075086775        1
[INPUT] 0    0    [1    /1   ]  172.161110653        1
[INPUT] 0    0    [1    /1   ]  44.9662806563        1
[INPUT] 0    0    [1    /1   ]  4.75116341017        1
[INPUT] 0    0    [1    /1   ]  0.392064522301       1
[INPUT] 1    0    [1    /1   ]  8.59594918158        1
[INPUT] 1    0    [1    /1   ]  0.490617640494       1

nuclear repulsion = 0
number of shells = 8
number of NR pGTOs = 12
number of NR cGTOs = 12
basis = {'Ar': [[0, [6347.798569137924, 1.0]], [0, [823.0750867753526, 1.0]], [0, [172.161110652702, 1.0]], [0, [44.9662806562854, 1.0]], [0, [4.751163410165485, 1.0]], [0, [0.39206452230125177, 1.0]], [1, [8.5959491815754, 1.0]], [1, [0.4906176404944461, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [6347.79856914]
bas 1, expnt(s) = [823.07508678]
bas 2, expnt(s) = [172.16111065]
bas 3, expnt(s) = [44.96628066]
bas 4, expnt(s) = [4.75116341]
bas 5, expnt(s) = [0.39206452]
bas 6, expnt(s) = [8.59594918]
bas 7, expnt(s) = [0.49061764]
CPU time:       152.58
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  1  1  1  0 36 37  0]
 [ 0  1  1  1  0 38 39  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 6.34779857e+03 1.79672817e+03 8.23075087e+02 3.88234939e+02
 1.72161111e+02 1.20078794e+02 4.49662807e+01 4.38712743e+01
 4.75116341e+00 8.13045780e+00 3.92064522e-01 1.25179491e+00
 8.59594918e+00 4.29389768e+01 4.90617640e-01 1.19788008e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319229703467677
cond(S) = 20.48152404967081
E1 = -688.7650445125827  E_coul = 184.91792330212232
init E= -503.84712121046
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.68123020888239  LUMO = 126.445523395449
  mo_energy =
[-1.21474192e+02 -1.32743326e+01 -7.62039878e+00 -7.62039878e+00
 -7.62039878e+00 -1.65133306e+00 -6.81230209e-01 -6.81230209e-01
 -6.81230209e-01  1.26445523e+02  1.18568524e+03  1.02475614e+04]
E1 = -706.2344561633631  E_coul = 198.9635803720037
cycle= 1 E= -507.270875791359  delta_E= -3.42  |g|= 0.288  |ddm|= 0.299
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.33311
diis-c [-0.11096232  1.        ]
  HOMO = -0.235973945383083  LUMO = 127.812989782013
  mo_energy =
[-1.20089201e+02 -1.22438241e+01 -6.65001478e+00 -6.65001478e+00
 -6.65001478e+00 -1.16277016e+00 -2.35973945e-01 -2.35973945e-01
 -2.35973945e-01  1.27812990e+02  1.18702656e+03  1.02487083e+04]
E1 = -706.2170535792166  E_coul = 198.94594839163926
cycle= 2 E= -507.271105187577  delta_E= -0.000229  |g|= 0.00333  |ddm|= 0.00744
    CPU time for cycle= 2      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.00348138
diis-c [-1.14211649e-05 -2.51597754e-03  1.00251598e+00]
  HOMO = -0.236059851036589  LUMO = 127.810465511402
  mo_energy =
[-1.20094354e+02 -1.22444285e+01 -6.65094526e+00 -6.65094526e+00
 -6.65094526e+00 -1.16280267e+00 -2.36059851e-01 -2.36059851e-01
 -2.36059851e-01  1.27810466e+02  1.18701853e+03  1.02486961e+04]
E1 = -706.2168694764874  E_coul = 198.9457642508626
cycle= 3 E= -507.271105225625  delta_E= -3.8e-08  |g|= 4.73e-05  |ddm|= 8.38e-05
    CPU time for cycle= 3      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=6.27657e-05
diis-c [-8.96389308e-11  4.50953478e-05 -1.87473908e-02  1.01870230e+00]
  HOMO = -0.236060520277581  LUMO = 127.81044976022
  mo_energy =
[-1.20094392e+02 -1.22444334e+01 -6.65095397e+00 -6.65095397e+00
 -6.65095397e+00 -1.16280285e+00 -2.36060520e-01 -2.36060520e-01
 -2.36060520e-01  1.27810450e+02  1.18701849e+03  1.02486960e+04]
E1 = -706.216867571632  E_coul = 198.94576234599984
cycle= 4 E= -507.271105225632  delta_E= -7.28e-12  |g|= 1.1e-07  |ddm|= 9.81e-07
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.216867571632  E_coul = 198.94576234599984
  HOMO = -0.236060517007419  LUMO = 127.810449885582
  mo_energy =
[-1.20094392e+02 -1.22444334e+01 -6.65095394e+00 -6.65095394e+00
 -6.65095394e+00 -1.16280285e+00 -2.36060517e-01 -2.36060517e-01
 -2.36060517e-01  1.27810450e+02  1.18701850e+03  1.02486960e+04]
E1 = -706.2168675787464  E_coul = 198.94576235311416
Extra cycle  E= -507.271105225632  delta_E= -5.68e-14  |g|= 1.43e-09  |ddm|= 2.82e-09
    CPU time for scf_cycle      0.09 sec, wall time      0.10 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 20.48152404967081
E1 = -706.2168675787464  E_coul = 198.94576235311416
init E= -507.271105225632
    CPU time for initialize scf      0.06 sec, wall time      0.06 sec
  HOMO = -0.236060516977796  LUMO = 127.810449886677
  mo_energy =
[-1.20094392e+02 -1.22444334e+01 -6.65095394e+00 -6.65095394e+00
 -6.65095394e+00 -1.16280285e+00 -2.36060517e-01 -2.36060517e-01
 -2.36060517e-01  1.27810450e+02  1.18701850e+03  1.02486960e+04]
E1 = -706.2168675788253  E_coul = 198.94576235319323
cycle= 1 E= -507.271105225632  delta_E= 1.71e-13  |g|= 2.15e-11  |ddm|= 3.41e-11
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -706.2168675788253  E_coul = 198.94576235319323
  HOMO = -0.236060516977468  LUMO = 127.810449886687
  mo_energy =
[-1.20094392e+02 -1.22444334e+01 -6.65095394e+00 -6.65095394e+00
 -6.65095394e+00 -1.16280285e+00 -2.36060517e-01 -2.36060517e-01
 -2.36060517e-01  1.27810450e+02  1.18701850e+03  1.02486960e+04]
E1 = -706.2168675788265  E_coul = 198.94576235319437
Extra cycle  E= -507.271105225632  delta_E= -1.14e-13  |g|= 1.99e-12  |ddm|= 4.83e-13
    CPU time for scf_cycle      0.12 sec, wall time      0.12 sec
exp = [6.34779857e+03 8.23075087e+02 1.72161111e+02 4.49662807e+01
 4.75116341e+00 3.92064522e-01 8.59594918e+00 4.90617640e-01]
grad_E = [ 3.51120824e-05  2.24442523e-06  1.87751939e-06 -4.54192035e-06
  1.40934822e-04 -6.30027660e-05  5.25023352e-05 -4.26524872e-04]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((8, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([1.5735952963858392e+03,2.3761303919145971e+02,5.2332977870138201e+01,4.7281081235122091e+00,3.9325830426169639e-01,8.5907170030661746e+00,4.9039633283239870e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "6s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:48:07 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  6347.79775302        1
[INPUT] 0    0    [1    /1   ]  823.085995295        1
[INPUT] 0    0    [1    /1   ]  172.161819731        1
[INPUT] 0    0    [1    /1   ]  44.9665674921        1
[INPUT] 0    0    [1    /1   ]  4.75100888358        1
[INPUT] 0    0    [1    /1   ]  0.392066407052       1
[INPUT] 1    0    [1    /1   ]  8.59591167028        1
[INPUT] 1    0    [1    /1   ]  0.490628418805       1

nuclear repulsion = 0
number of shells = 8
number of NR pGTOs = 12
number of NR cGTOs = 12
basis = {'Ar': [[0, [6347.797753019489, 1.0]], [0, [823.085995295048, 1.0]], [0, [172.16181973079478, 1.0]], [0, [44.966567492069366, 1.0]], [0, [4.751008883584197, 1.0]], [0, [0.3920664070522536, 1.0]], [1, [8.595911670280314, 1.0]], [1, [0.4906284188053757, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [6347.79775302]
bas 1, expnt(s) = [823.0859953]
bas 2, expnt(s) = [172.16181973]
bas 3, expnt(s) = [44.96656749]
bas 4, expnt(s) = [4.75100888]
bas 5, expnt(s) = [0.39206641]
bas 6, expnt(s) = [8.59591167]
bas 7, expnt(s) = [0.49062842]
CPU time:       155.81
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  1  1  1  0 36 37  0]
 [ 0  1  1  1  0 38 39  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 6.34779775e+03 1.79672800e+03 8.23085995e+02 3.88238798e+02
 1.72161820e+02 1.20079165e+02 4.49665675e+01 4.38714842e+01
 4.75100888e+00 8.13025947e+00 3.92066407e-01 1.25179943e+00
 8.59591167e+00 4.29387426e+01 4.90628419e-01 1.19791297e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319218141581743
cond(S) = 20.48129097274572
E1 = -688.7650519704887  E_coul = 184.91793825077644
init E= -503.847113719712
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.681216360997027  LUMO = 126.445858259624
  mo_energy =
[-1.21474222e+02 -1.32743287e+01 -7.62040589e+00 -7.62040589e+00
 -7.62040589e+00 -1.65131977e+00 -6.81216361e-01 -6.81216361e-01
 -6.81216361e-01  1.26445858e+02  1.18569827e+03  1.02475983e+04]
E1 = -706.2344820509998  E_coul = 198.96360627386005
cycle= 1 E= -507.27087577714  delta_E= -3.42  |g|= 0.288  |ddm|= 0.299
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.333109
diis-c [-0.11096186  1.        ]
  HOMO = -0.235951534278277  LUMO = 127.813316437779
  mo_energy =
[-1.20089255e+02 -1.22438189e+01 -6.65002223e+00 -6.65002223e+00
 -6.65002223e+00 -1.16275265e+00 -2.35951534e-01 -2.35951534e-01
 -2.35951534e-01  1.27813316e+02  1.18703955e+03  1.02487451e+04]
E1 = -706.2170786384756  E_coul = 198.94597343350134
cycle= 2 E= -507.271105204974  delta_E= -0.000229  |g|= 0.00333  |ddm|= 0.00744
    CPU time for cycle= 2      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.00348179
diis-c [-1.14236025e-05 -2.51672294e-03  1.00251672e+00]
  HOMO = -0.236037446799446  LUMO = 127.81079206832
  mo_energy =
[-1.20094409e+02 -1.22444234e+01 -6.65095277e+00 -6.65095277e+00
 -6.65095277e+00 -1.16278515e+00 -2.36037447e-01 -2.36037447e-01
 -2.36037447e-01  1.27810792e+02  1.18703152e+03  1.02487330e+04]
E1 = -706.2168945248769  E_coul = 198.94578928184768
cycle= 3 E= -507.271105243029  delta_E= -3.81e-08  |g|= 4.73e-05  |ddm|= 8.39e-05
    CPU time for cycle= 3      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=6.27691e-05
diis-c [-8.96389122e-11  4.50958520e-05 -1.87464162e-02  1.01870132e+00]
  HOMO = -0.236038116043661  LUMO = 127.810776318402
  mo_energy =
[-1.20094447e+02 -1.22444283e+01 -6.65096148e+00 -6.65096148e+00
 -6.65096148e+00 -1.16278534e+00 -2.36038116e-01 -2.36038116e-01
 -2.36038116e-01  1.27810776e+02  1.18703149e+03  1.02487329e+04]
E1 = -706.2168926200388  E_coul = 198.9457873770025
cycle= 4 E= -507.271105243036  delta_E= -7.11e-12  |g|= 1.1e-07  |ddm|= 9.81e-07
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.2168926200388  E_coul = 198.9457873770025
  HOMO = -0.236038112773454  LUMO = 127.810776443765
  mo_energy =
[-1.20094447e+02 -1.22444283e+01 -6.65096145e+00 -6.65096145e+00
 -6.65096145e+00 -1.16278534e+00 -2.36038113e-01 -2.36038113e-01
 -2.36038113e-01  1.27810776e+02  1.18703149e+03  1.02487329e+04]
E1 = -706.2168926271531  E_coul = 198.94578738411664
Extra cycle  E= -507.271105243036  delta_E= -1.14e-13  |g|= 1.43e-09  |ddm|= 2.82e-09
    CPU time for scf_cycle      0.09 sec, wall time      0.10 sec
exp = [6.34779775e+03 8.23085995e+02 1.72161820e+02 4.49665675e+01
 4.75100888e+00 3.92066407e-01 8.59591167e+00 4.90628419e-01]
E = -507.27110524303646
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((8, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([1.5735952963858392e+03,2.3761303919145971e+02,5.2332977870138201e+01,4.7281081235122091e+00,3.9325830426169639e-01,8.5907170030661746e+00,4.9039633283239870e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "6s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:48:08 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  6347.79775302        1
[INPUT] 0    0    [1    /1   ]  823.085995295        1
[INPUT] 0    0    [1    /1   ]  172.161819731        1
[INPUT] 0    0    [1    /1   ]  44.9665674921        1
[INPUT] 0    0    [1    /1   ]  4.75100888358        1
[INPUT] 0    0    [1    /1   ]  0.392066407052       1
[INPUT] 1    0    [1    /1   ]  8.59591167028        1
[INPUT] 1    0    [1    /1   ]  0.490628418805       1

nuclear repulsion = 0
number of shells = 8
number of NR pGTOs = 12
number of NR cGTOs = 12
basis = {'Ar': [[0, [6347.797753019489, 1.0]], [0, [823.085995295048, 1.0]], [0, [172.16181973079478, 1.0]], [0, [44.966567492069366, 1.0]], [0, [4.751008883584197, 1.0]], [0, [0.3920664070522536, 1.0]], [1, [8.595911670280314, 1.0]], [1, [0.4906284188053757, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [6347.79775302]
bas 1, expnt(s) = [823.0859953]
bas 2, expnt(s) = [172.16181973]
bas 3, expnt(s) = [44.96656749]
bas 4, expnt(s) = [4.75100888]
bas 5, expnt(s) = [0.39206641]
bas 6, expnt(s) = [8.59591167]
bas 7, expnt(s) = [0.49062842]
CPU time:       156.49
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  1  1  1  0 36 37  0]
 [ 0  1  1  1  0 38 39  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 6.34779775e+03 1.79672800e+03 8.23085995e+02 3.88238798e+02
 1.72161820e+02 1.20079165e+02 4.49665675e+01 4.38714842e+01
 4.75100888e+00 8.13025947e+00 3.92066407e-01 1.25179943e+00
 8.59591167e+00 4.29387426e+01 4.90628419e-01 1.19791297e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319218141581743
cond(S) = 20.48129097274572
E1 = -688.7650519704887  E_coul = 184.91793825077644
init E= -503.847113719712
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.681216360997027  LUMO = 126.445858259624
  mo_energy =
[-1.21474222e+02 -1.32743287e+01 -7.62040589e+00 -7.62040589e+00
 -7.62040589e+00 -1.65131977e+00 -6.81216361e-01 -6.81216361e-01
 -6.81216361e-01  1.26445858e+02  1.18569827e+03  1.02475983e+04]
E1 = -706.2344820509998  E_coul = 198.96360627386005
cycle= 1 E= -507.27087577714  delta_E= -3.42  |g|= 0.288  |ddm|= 0.299
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.333109
diis-c [-0.11096186  1.        ]
  HOMO = -0.235951534278277  LUMO = 127.813316437779
  mo_energy =
[-1.20089255e+02 -1.22438189e+01 -6.65002223e+00 -6.65002223e+00
 -6.65002223e+00 -1.16275265e+00 -2.35951534e-01 -2.35951534e-01
 -2.35951534e-01  1.27813316e+02  1.18703955e+03  1.02487451e+04]
E1 = -706.2170786384756  E_coul = 198.94597343350134
cycle= 2 E= -507.271105204974  delta_E= -0.000229  |g|= 0.00333  |ddm|= 0.00744
    CPU time for cycle= 2      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.00348179
diis-c [-1.14236025e-05 -2.51672294e-03  1.00251672e+00]
  HOMO = -0.236037446799446  LUMO = 127.81079206832
  mo_energy =
[-1.20094409e+02 -1.22444234e+01 -6.65095277e+00 -6.65095277e+00
 -6.65095277e+00 -1.16278515e+00 -2.36037447e-01 -2.36037447e-01
 -2.36037447e-01  1.27810792e+02  1.18703152e+03  1.02487330e+04]
E1 = -706.2168945248769  E_coul = 198.94578928184768
cycle= 3 E= -507.271105243029  delta_E= -3.81e-08  |g|= 4.73e-05  |ddm|= 8.39e-05
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=6.27691e-05
diis-c [-8.96389122e-11  4.50958520e-05 -1.87464162e-02  1.01870132e+00]
  HOMO = -0.236038116043661  LUMO = 127.810776318402
  mo_energy =
[-1.20094447e+02 -1.22444283e+01 -6.65096148e+00 -6.65096148e+00
 -6.65096148e+00 -1.16278534e+00 -2.36038116e-01 -2.36038116e-01
 -2.36038116e-01  1.27810776e+02  1.18703149e+03  1.02487329e+04]
E1 = -706.2168926200388  E_coul = 198.9457873770025
cycle= 4 E= -507.271105243036  delta_E= -7.11e-12  |g|= 1.1e-07  |ddm|= 9.81e-07
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.2168926200388  E_coul = 198.9457873770025
  HOMO = -0.236038112773454  LUMO = 127.810776443765
  mo_energy =
[-1.20094447e+02 -1.22444283e+01 -6.65096145e+00 -6.65096145e+00
 -6.65096145e+00 -1.16278534e+00 -2.36038113e-01 -2.36038113e-01
 -2.36038113e-01  1.27810776e+02  1.18703149e+03  1.02487329e+04]
E1 = -706.2168926271531  E_coul = 198.94578738411664
Extra cycle  E= -507.271105243036  delta_E= -1.14e-13  |g|= 1.43e-09  |ddm|= 2.82e-09
    CPU time for scf_cycle      0.09 sec, wall time      0.10 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 20.48129097274572
E1 = -706.2168926271531  E_coul = 198.94578738411664
init E= -507.271105243036
    CPU time for initialize scf      0.06 sec, wall time      0.06 sec
  HOMO = -0.236038112743835  LUMO = 127.810776444861
  mo_energy =
[-1.20094447e+02 -1.22444283e+01 -6.65096144e+00 -6.65096144e+00
 -6.65096144e+00 -1.16278534e+00 -2.36038113e-01 -2.36038113e-01
 -2.36038113e-01  1.27810776e+02  1.18703149e+03  1.02487329e+04]
E1 = -706.2168926272321  E_coul = 198.9457873841958
cycle= 1 E= -507.271105243036  delta_E= 1.14e-13  |g|= 2.18e-11  |ddm|= 3.41e-11
    CPU time for cycle= 1      0.02 sec, wall time      0.02 sec
E1 = -706.2168926272321  E_coul = 198.9457873841958
  HOMO = -0.236038112743507  LUMO = 127.810776444871
  mo_energy =
[-1.20094447e+02 -1.22444283e+01 -6.65096144e+00 -6.65096144e+00
 -6.65096144e+00 -1.16278534e+00 -2.36038113e-01 -2.36038113e-01
 -2.36038113e-01  1.27810776e+02  1.18703149e+03  1.02487329e+04]
E1 = -706.2168926272332  E_coul = 198.9457873841967
Extra cycle  E= -507.271105243036  delta_E= -1.14e-13  |g|= 2.42e-12  |ddm|= 4.8e-13
    CPU time for scf_cycle      0.13 sec, wall time      0.13 sec
exp = [6.34779775e+03 8.23085995e+02 1.72161820e+02 4.49665675e+01
 4.75100888e+00 3.92066407e-01 8.59591167e+00 4.90628419e-01]
grad_E = [ 3.51044998e-05  2.46824544e-06  3.26081712e-07  3.40063527e-08
  3.73567859e-06 -7.57891442e-07  1.71451260e-06 -6.87831044e-06]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((8, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([1.5735952963858392e+03,2.3761303919145971e+02,5.2332977870138201e+01,4.7281081235122091e+00,3.9325830426169639e-01,8.5907170030661746e+00,4.9039633283239870e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "6s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:48:11 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  6347.79776498        1
[INPUT] 0    0    [1    /1   ]  823.085294805        1
[INPUT] 0    0    [1    /1   ]  172.161376686        1
[INPUT] 0    0    [1    /1   ]  44.9664972871        1
[INPUT] 0    0    [1    /1   ]  4.75099766109        1
[INPUT] 0    0    [1    /1   ]  0.392066492539       1
[INPUT] 1    0    [1    /1   ]  8.5959085411         1
[INPUT] 1    0    [1    /1   ]  0.490629103914       1

nuclear repulsion = 0
number of shells = 8
number of NR pGTOs = 12
number of NR cGTOs = 12
basis = {'Ar': [[0, [6347.797764976945, 1.0]], [0, [823.0852948045302, 1.0]], [0, [172.16137668620178, 1.0]], [0, [44.96649728707285, 1.0]], [0, [4.750997661087711, 1.0]], [0, [0.3920664925390883, 1.0]], [1, [8.595908541103512, 1.0]], [1, [0.49062910391358505, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [6347.79776498]
bas 1, expnt(s) = [823.0852948]
bas 2, expnt(s) = [172.16137669]
bas 3, expnt(s) = [44.96649729]
bas 4, expnt(s) = [4.75099766]
bas 5, expnt(s) = [0.39206649]
bas 6, expnt(s) = [8.59590854]
bas 7, expnt(s) = [0.4906291]
CPU time:       159.71
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  1  1  1  0 36 37  0]
 [ 0  1  1  1  0 38 39  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 6.34779776e+03 1.79672800e+03 8.23085295e+02 3.88238550e+02
 1.72161377e+02 1.20078933e+02 4.49664973e+01 4.38714328e+01
 4.75099766e+00 8.13024507e+00 3.92066493e-01 1.25179963e+00
 8.59590854e+00 4.29387231e+01 4.90629104e-01 1.19791506e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319217447154504
cond(S) = 20.481276741232726
E1 = -688.7650467408155  E_coul = 184.9179328683922
init E= -503.847113872423
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.681215489852586  LUMO = 126.445402021419
  mo_energy =
[-1.21474226e+02 -1.32743286e+01 -7.62040686e+00 -7.62040686e+00
 -7.62040686e+00 -1.65131887e+00 -6.81215490e-01 -6.81215490e-01
 -6.81215490e-01  1.26445402e+02  1.18569598e+03  1.02475944e+04]
E1 = -706.234473667882  E_coul = 198.9635978931307
cycle= 1 E= -507.270875774751  delta_E= -3.42  |g|= 0.288  |ddm|= 0.299
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.333109
diis-c [-0.1109619  1.       ]
  HOMO = -0.235950170717959  LUMO = 127.812858920671
  mo_energy =
[-1.20089261e+02 -1.22438190e+01 -6.65002344e+00 -6.65002344e+00
 -6.65002344e+00 -1.16275156e+00 -2.35950171e-01 -2.35950171e-01
 -2.35950171e-01  1.27812859e+02  1.18703726e+03  1.02487412e+04]
E1 = -706.2170700902677  E_coul = 198.94596488389388
cycle= 2 E= -507.271105206374  delta_E= -0.000229  |g|= 0.00333  |ddm|= 0.00744
    CPU time for cycle= 2      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.00348183
diis-c [-1.14238662e-05 -2.51676682e-03  1.00251677e+00]
  HOMO = -0.236036084307894  LUMO = 127.81033453443
  mo_energy =
[-1.20094415e+02 -1.22444235e+01 -6.65095399e+00 -6.65095399e+00
 -6.65095399e+00 -1.16278407e+00 -2.36036084e-01 -2.36036084e-01
 -2.36036084e-01  1.27810335e+02  1.18702923e+03  1.02487290e+04]
E1 = -706.216885974263  E_coul = 198.94578072983361
cycle= 3 E= -507.271105244429  delta_E= -3.81e-08  |g|= 4.73e-05  |ddm|= 8.39e-05
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=6.27698e-05
diis-c [-8.96398983e-11  4.50959559e-05 -1.87464008e-02  1.01870130e+00]
  HOMO = -0.236036753559766  LUMO = 127.810318784431
  mo_energy =
[-1.20094453e+02 -1.22444284e+01 -6.65096270e+00 -6.65096270e+00
 -6.65096270e+00 -1.16278425e+00 -2.36036754e-01 -2.36036754e-01
 -2.36036754e-01  1.27810319e+02  1.18702919e+03  1.02487290e+04]
E1 = -706.2168840694007  E_coul = 198.9457788249642
cycle= 4 E= -507.271105244437  delta_E= -7.05e-12  |g|= 1.1e-07  |ddm|= 9.81e-07
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.2168840694007  E_coul = 198.9457788249642
  HOMO = -0.236036750289511  LUMO = 127.810318909795
  mo_energy =
[-1.20094452e+02 -1.22444284e+01 -6.65096266e+00 -6.65096266e+00
 -6.65096266e+00 -1.16278425e+00 -2.36036750e-01 -2.36036750e-01
 -2.36036750e-01  1.27810319e+02  1.18702919e+03  1.02487290e+04]
E1 = -706.2168840765149  E_coul = 198.94577883207836
Extra cycle  E= -507.271105244437  delta_E= -5.68e-14  |g|= 1.43e-09  |ddm|= 2.82e-09
    CPU time for scf_cycle      0.09 sec, wall time      0.10 sec
exp = [6.34779776e+03 8.23085295e+02 1.72161377e+02 4.49664973e+01
 4.75099766e+00 3.92066493e-01 8.59590854e+00 4.90629104e-01]
E = -507.27110524443657
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((8, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([1.5735952963858392e+03,2.3761303919145971e+02,5.2332977870138201e+01,4.7281081235122091e+00,3.9325830426169639e-01,8.5907170030661746e+00,4.9039633283239870e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "6s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:48:12 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  6347.79776498        1
[INPUT] 0    0    [1    /1   ]  823.085294805        1
[INPUT] 0    0    [1    /1   ]  172.161376686        1
[INPUT] 0    0    [1    /1   ]  44.9664972871        1
[INPUT] 0    0    [1    /1   ]  4.75099766109        1
[INPUT] 0    0    [1    /1   ]  0.392066492539       1
[INPUT] 1    0    [1    /1   ]  8.5959085411         1
[INPUT] 1    0    [1    /1   ]  0.490629103914       1

nuclear repulsion = 0
number of shells = 8
number of NR pGTOs = 12
number of NR cGTOs = 12
basis = {'Ar': [[0, [6347.797764976945, 1.0]], [0, [823.0852948045302, 1.0]], [0, [172.16137668620178, 1.0]], [0, [44.96649728707285, 1.0]], [0, [4.750997661087711, 1.0]], [0, [0.3920664925390883, 1.0]], [1, [8.595908541103512, 1.0]], [1, [0.49062910391358505, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [6347.79776498]
bas 1, expnt(s) = [823.0852948]
bas 2, expnt(s) = [172.16137669]
bas 3, expnt(s) = [44.96649729]
bas 4, expnt(s) = [4.75099766]
bas 5, expnt(s) = [0.39206649]
bas 6, expnt(s) = [8.59590854]
bas 7, expnt(s) = [0.4906291]
CPU time:       160.40
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  1  1  1  0 36 37  0]
 [ 0  1  1  1  0 38 39  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 6.34779776e+03 1.79672800e+03 8.23085295e+02 3.88238550e+02
 1.72161377e+02 1.20078933e+02 4.49664973e+01 4.38714328e+01
 4.75099766e+00 8.13024507e+00 3.92066493e-01 1.25179963e+00
 8.59590854e+00 4.29387231e+01 4.90629104e-01 1.19791506e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319217447154504
cond(S) = 20.481276741232726
E1 = -688.7650467408155  E_coul = 184.9179328683922
init E= -503.847113872423
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.681215489852586  LUMO = 126.445402021419
  mo_energy =
[-1.21474226e+02 -1.32743286e+01 -7.62040686e+00 -7.62040686e+00
 -7.62040686e+00 -1.65131887e+00 -6.81215490e-01 -6.81215490e-01
 -6.81215490e-01  1.26445402e+02  1.18569598e+03  1.02475944e+04]
E1 = -706.234473667882  E_coul = 198.9635978931307
cycle= 1 E= -507.270875774751  delta_E= -3.42  |g|= 0.288  |ddm|= 0.299
    CPU time for cycle= 1      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.333109
diis-c [-0.1109619  1.       ]
  HOMO = -0.235950170717959  LUMO = 127.812858920671
  mo_energy =
[-1.20089261e+02 -1.22438190e+01 -6.65002344e+00 -6.65002344e+00
 -6.65002344e+00 -1.16275156e+00 -2.35950171e-01 -2.35950171e-01
 -2.35950171e-01  1.27812859e+02  1.18703726e+03  1.02487412e+04]
E1 = -706.2170700902677  E_coul = 198.94596488389388
cycle= 2 E= -507.271105206374  delta_E= -0.000229  |g|= 0.00333  |ddm|= 0.00744
    CPU time for cycle= 2      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.00348183
diis-c [-1.14238662e-05 -2.51676682e-03  1.00251677e+00]
  HOMO = -0.236036084307894  LUMO = 127.81033453443
  mo_energy =
[-1.20094415e+02 -1.22444235e+01 -6.65095399e+00 -6.65095399e+00
 -6.65095399e+00 -1.16278407e+00 -2.36036084e-01 -2.36036084e-01
 -2.36036084e-01  1.27810335e+02  1.18702923e+03  1.02487290e+04]
E1 = -706.216885974263  E_coul = 198.94578072983361
cycle= 3 E= -507.271105244429  delta_E= -3.81e-08  |g|= 4.73e-05  |ddm|= 8.39e-05
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=6.27698e-05
diis-c [-8.96398983e-11  4.50959559e-05 -1.87464008e-02  1.01870130e+00]
  HOMO = -0.236036753559766  LUMO = 127.810318784431
  mo_energy =
[-1.20094453e+02 -1.22444284e+01 -6.65096270e+00 -6.65096270e+00
 -6.65096270e+00 -1.16278425e+00 -2.36036754e-01 -2.36036754e-01
 -2.36036754e-01  1.27810319e+02  1.18702919e+03  1.02487290e+04]
E1 = -706.2168840694007  E_coul = 198.9457788249642
cycle= 4 E= -507.271105244437  delta_E= -7.05e-12  |g|= 1.1e-07  |ddm|= 9.81e-07
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.2168840694007  E_coul = 198.9457788249642
  HOMO = -0.236036750289511  LUMO = 127.810318909795
  mo_energy =
[-1.20094452e+02 -1.22444284e+01 -6.65096266e+00 -6.65096266e+00
 -6.65096266e+00 -1.16278425e+00 -2.36036750e-01 -2.36036750e-01
 -2.36036750e-01  1.27810319e+02  1.18702919e+03  1.02487290e+04]
E1 = -706.2168840765149  E_coul = 198.94577883207836
Extra cycle  E= -507.271105244437  delta_E= -5.68e-14  |g|= 1.43e-09  |ddm|= 2.82e-09
    CPU time for scf_cycle      0.10 sec, wall time      0.10 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 20.481276741232726
E1 = -706.2168840765149  E_coul = 198.94577883207836
init E= -507.271105244437
    CPU time for initialize scf      0.05 sec, wall time      0.06 sec
  HOMO = -0.236036750259896  LUMO = 127.81031891089
  mo_energy =
[-1.20094452e+02 -1.22444284e+01 -6.65096266e+00 -6.65096266e+00
 -6.65096266e+00 -1.16278425e+00 -2.36036750e-01 -2.36036750e-01
 -2.36036750e-01  1.27810319e+02  1.18702919e+03  1.02487290e+04]
E1 = -706.2168840765945  E_coul = 198.94577883215783
cycle= 1 E= -507.271105244437  delta_E= -1.14e-13  |g|= 2.16e-11  |ddm|= 3.41e-11
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -706.2168840765945  E_coul = 198.94577883215783
  HOMO = -0.236036750259557  LUMO = 127.8103189109
  mo_energy =
[-1.20094452e+02 -1.22444284e+01 -6.65096266e+00 -6.65096266e+00
 -6.65096266e+00 -1.16278425e+00 -2.36036750e-01 -2.36036750e-01
 -2.36036750e-01  1.27810319e+02  1.18702919e+03  1.02487290e+04]
E1 = -706.2168840765956  E_coul = 198.9457788321588
Extra cycle  E= -507.271105244437  delta_E= -1.71e-13  |g|= 6.13e-13  |ddm|= 4.79e-13
    CPU time for scf_cycle      0.12 sec, wall time      0.13 sec
exp = [6.34779776e+03 8.23085295e+02 1.72161377e+02 4.49664973e+01
 4.75099766e+00 3.92066493e-01 8.59590854e+00 4.90629104e-01]
grad_E = [ 3.51043136e-05  2.49457818e-06  8.81904474e-08  2.70084841e-07
 -6.39196786e-06  3.01705936e-06 -2.30887823e-06  2.01456139e-05]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((8, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([1.5735952963858392e+03,2.3761303919145971e+02,5.2332977870138201e+01,4.7281081235122091e+00,3.9325830426169639e-01,8.5907170030661746e+00,4.9039633283239870e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "6s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:48:15 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  6347.79765418        1
[INPUT] 0    0    [1    /1   ]  823.082786112        1
[INPUT] 0    0    [1    /1   ]  172.15997347         1
[INPUT] 0    0    [1    /1   ]  44.9662767118        1
[INPUT] 0    0    [1    /1   ]  4.75096628915        1
[INPUT] 0    0    [1    /1   ]  0.392066715284       1
[INPUT] 1    0    [1    /1   ]  8.59589942189        1
[INPUT] 1    0    [1    /1   ]  0.490630968753       1

nuclear repulsion = 0
number of shells = 8
number of NR pGTOs = 12
number of NR cGTOs = 12
basis = {'Ar': [[0, [6347.797654179746, 1.0]], [0, [823.0827861119047, 1.0]], [0, [172.15997346955535, 1.0]], [0, [44.96627671178999, 1.0]], [0, [4.750966289152612, 1.0]], [0, [0.39206671528442094, 1.0]], [1, [8.595899421885251, 1.0]], [1, [0.4906309687532371, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [6347.79765418]
bas 1, expnt(s) = [823.08278611]
bas 2, expnt(s) = [172.15997347]
bas 3, expnt(s) = [44.96627671]
bas 4, expnt(s) = [4.75096629]
bas 5, expnt(s) = [0.39206672]
bas 6, expnt(s) = [8.59589942]
bas 7, expnt(s) = [0.49063097]
CPU time:       163.65
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  1  1  1  0 36 37  0]
 [ 0  1  1  1  0 38 39  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 6.34779765e+03 1.79672798e+03 8.23082786e+02 3.88237662e+02
 1.72159973e+02 1.20078199e+02 4.49662767e+01 4.38712714e+01
 4.75096629e+00 8.13020480e+00 3.92066715e-01 1.25180017e+00
 8.59589942e+00 4.29386661e+01 4.90630969e-01 1.19792075e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319215576853942
cond(S) = 20.481241570586615
E1 = -688.7650285852549  E_coul = 184.91791413358547
init E= -503.847114451669
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.681213117784165  LUMO = 126.443981283517
  mo_energy =
[-1.21474236e+02 -1.32743287e+01 -7.62040980e+00 -7.62040980e+00
 -7.62040980e+00 -1.65131641e+00 -6.81213118e-01 -6.81213118e-01
 -6.81213118e-01  1.26443981e+02  1.18568846e+03  1.02475808e+04]
E1 = -706.234445100315  E_coul = 198.96356932740176
cycle= 1 E= -507.270875772913  delta_E= -3.42  |g|= 0.288  |ddm|= 0.299
    CPU time for cycle= 1      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.33311
diis-c [-0.11096208  1.        ]
  HOMO = -0.235946485718938  LUMO = 127.811434411699
  mo_energy =
[-1.20089277e+02 -1.22438196e+01 -6.65002715e+00 -6.65002715e+00
 -6.65002715e+00 -1.16274862e+00 -2.35946486e-01 -2.35946486e-01
 -2.35946486e-01  1.27811434e+02  1.18702974e+03  1.02487275e+04]
E1 = -706.2170410324129  E_coul = 198.94593581686888
cycle= 2 E= -507.271105215544  delta_E= -0.000229  |g|= 0.00333  |ddm|= 0.00744
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00348195
diis-c [-1.14246272e-05 -2.51688816e-03  1.00251689e+00]
  HOMO = -0.236032402452306  LUMO = 127.808909976373
  mo_energy =
[-1.20094431e+02 -1.22444241e+01 -6.65095773e+00 -6.65095773e+00
 -6.65095773e+00 -1.16278113e+00 -2.36032402e-01 -2.36032402e-01
 -2.36032402e-01  1.27808910e+02  1.18702170e+03  1.02487154e+04]
E1 = -706.2168569092149  E_coul = 198.94575165561272
cycle= 3 E= -507.271105253602  delta_E= -3.81e-08  |g|= 4.73e-05  |ddm|= 8.39e-05
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=6.27718e-05
diis-c [-8.96429502e-11  4.50962824e-05 -1.87463734e-02  1.01870128e+00]
  HOMO = -0.236033071727574  LUMO = 127.808894226104
  mo_energy =
[-1.20094469e+02 -1.22444290e+01 -6.65096644e+00 -6.65096644e+00
 -6.65096644e+00 -1.16278131e+00 -2.36033072e-01 -2.36033072e-01
 -2.36033072e-01  1.27808894e+02  1.18702167e+03  1.02487153e+04]
E1 = -706.2168550042775  E_coul = 198.9457497506681
cycle= 4 E= -507.271105253609  delta_E= -7.16e-12  |g|= 1.1e-07  |ddm|= 9.82e-07
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.2168550042775  E_coul = 198.9457497506681
  HOMO = -0.236033068457171  LUMO = 127.808894351471
  mo_energy =
[-1.20094469e+02 -1.22444290e+01 -6.65096641e+00 -6.65096641e+00
 -6.65096641e+00 -1.16278131e+00 -2.36033068e-01 -2.36033068e-01
 -2.36033068e-01  1.27808894e+02  1.18702167e+03  1.02487153e+04]
E1 = -706.2168550113918  E_coul = 198.94574975778272
Extra cycle  E= -507.271105253609  delta_E= 2.84e-13  |g|= 1.43e-09  |ddm|= 2.82e-09
    CPU time for scf_cycle      0.10 sec, wall time      0.10 sec
exp = [6.34779765e+03 8.23082786e+02 1.72159973e+02 4.49662767e+01
 4.75096629e+00 3.92066715e-01 8.59589942e+00 4.90630969e-01]
E = -507.27110525360905
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((8, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([1.5735952963858392e+03,2.3761303919145971e+02,5.2332977870138201e+01,4.7281081235122091e+00,3.9325830426169639e-01,8.5907170030661746e+00,4.9039633283239870e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "6s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:48:16 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  6347.79765418        1
[INPUT] 0    0    [1    /1   ]  823.082786112        1
[INPUT] 0    0    [1    /1   ]  172.15997347         1
[INPUT] 0    0    [1    /1   ]  44.9662767118        1
[INPUT] 0    0    [1    /1   ]  4.75096628915        1
[INPUT] 0    0    [1    /1   ]  0.392066715284       1
[INPUT] 1    0    [1    /1   ]  8.59589942189        1
[INPUT] 1    0    [1    /1   ]  0.490630968753       1

nuclear repulsion = 0
number of shells = 8
number of NR pGTOs = 12
number of NR cGTOs = 12
basis = {'Ar': [[0, [6347.797654179746, 1.0]], [0, [823.0827861119047, 1.0]], [0, [172.15997346955535, 1.0]], [0, [44.96627671178999, 1.0]], [0, [4.750966289152612, 1.0]], [0, [0.39206671528442094, 1.0]], [1, [8.595899421885251, 1.0]], [1, [0.4906309687532371, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [6347.79765418]
bas 1, expnt(s) = [823.08278611]
bas 2, expnt(s) = [172.15997347]
bas 3, expnt(s) = [44.96627671]
bas 4, expnt(s) = [4.75096629]
bas 5, expnt(s) = [0.39206672]
bas 6, expnt(s) = [8.59589942]
bas 7, expnt(s) = [0.49063097]
CPU time:       164.34
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  1  1  1  0 36 37  0]
 [ 0  1  1  1  0 38 39  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 6.34779765e+03 1.79672798e+03 8.23082786e+02 3.88237662e+02
 1.72159973e+02 1.20078199e+02 4.49662767e+01 4.38712714e+01
 4.75096629e+00 8.13020480e+00 3.92066715e-01 1.25180017e+00
 8.59589942e+00 4.29386661e+01 4.90630969e-01 1.19792075e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319215576853942
cond(S) = 20.481241570586615
E1 = -688.7650285852549  E_coul = 184.91791413358547
init E= -503.847114451669
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.681213117784165  LUMO = 126.443981283517
  mo_energy =
[-1.21474236e+02 -1.32743287e+01 -7.62040980e+00 -7.62040980e+00
 -7.62040980e+00 -1.65131641e+00 -6.81213118e-01 -6.81213118e-01
 -6.81213118e-01  1.26443981e+02  1.18568846e+03  1.02475808e+04]
E1 = -706.234445100315  E_coul = 198.96356932740176
cycle= 1 E= -507.270875772913  delta_E= -3.42  |g|= 0.288  |ddm|= 0.299
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.33311
diis-c [-0.11096208  1.        ]
  HOMO = -0.235946485718938  LUMO = 127.811434411699
  mo_energy =
[-1.20089277e+02 -1.22438196e+01 -6.65002715e+00 -6.65002715e+00
 -6.65002715e+00 -1.16274862e+00 -2.35946486e-01 -2.35946486e-01
 -2.35946486e-01  1.27811434e+02  1.18702974e+03  1.02487275e+04]
E1 = -706.2170410324129  E_coul = 198.94593581686888
cycle= 2 E= -507.271105215544  delta_E= -0.000229  |g|= 0.00333  |ddm|= 0.00744
    CPU time for cycle= 2      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.00348195
diis-c [-1.14246272e-05 -2.51688816e-03  1.00251689e+00]
  HOMO = -0.236032402452306  LUMO = 127.808909976373
  mo_energy =
[-1.20094431e+02 -1.22444241e+01 -6.65095773e+00 -6.65095773e+00
 -6.65095773e+00 -1.16278113e+00 -2.36032402e-01 -2.36032402e-01
 -2.36032402e-01  1.27808910e+02  1.18702170e+03  1.02487154e+04]
E1 = -706.2168569092149  E_coul = 198.94575165561272
cycle= 3 E= -507.271105253602  delta_E= -3.81e-08  |g|= 4.73e-05  |ddm|= 8.39e-05
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=6.27718e-05
diis-c [-8.96429502e-11  4.50962824e-05 -1.87463734e-02  1.01870128e+00]
  HOMO = -0.236033071727574  LUMO = 127.808894226104
  mo_energy =
[-1.20094469e+02 -1.22444290e+01 -6.65096644e+00 -6.65096644e+00
 -6.65096644e+00 -1.16278131e+00 -2.36033072e-01 -2.36033072e-01
 -2.36033072e-01  1.27808894e+02  1.18702167e+03  1.02487153e+04]
E1 = -706.2168550042775  E_coul = 198.9457497506681
cycle= 4 E= -507.271105253609  delta_E= -7.16e-12  |g|= 1.1e-07  |ddm|= 9.82e-07
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.2168550042775  E_coul = 198.9457497506681
  HOMO = -0.236033068457171  LUMO = 127.808894351471
  mo_energy =
[-1.20094469e+02 -1.22444290e+01 -6.65096641e+00 -6.65096641e+00
 -6.65096641e+00 -1.16278131e+00 -2.36033068e-01 -2.36033068e-01
 -2.36033068e-01  1.27808894e+02  1.18702167e+03  1.02487153e+04]
E1 = -706.2168550113918  E_coul = 198.94574975778272
Extra cycle  E= -507.271105253609  delta_E= 2.84e-13  |g|= 1.43e-09  |ddm|= 2.82e-09
    CPU time for scf_cycle      0.09 sec, wall time      0.10 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 20.481241570586615
E1 = -706.2168550113918  E_coul = 198.94574975778272
init E= -507.271105253609
    CPU time for initialize scf      0.05 sec, wall time      0.06 sec
  HOMO = -0.236033068427545  LUMO = 127.808894352566
  mo_energy =
[-1.20094469e+02 -1.22444290e+01 -6.65096641e+00 -6.65096641e+00
 -6.65096641e+00 -1.16278131e+00 -2.36033068e-01 -2.36033068e-01
 -2.36033068e-01  1.27808894e+02  1.18702167e+03  1.02487153e+04]
E1 = -706.2168550114711  E_coul = 198.945749757862
cycle= 1 E= -507.271105253609  delta_E= -5.68e-14  |g|= 2.17e-11  |ddm|= 3.41e-11
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -706.2168550114711  E_coul = 198.945749757862
  HOMO = -0.236033068427218  LUMO = 127.808894352577
  mo_energy =
[-1.20094469e+02 -1.22444290e+01 -6.65096641e+00 -6.65096641e+00
 -6.65096641e+00 -1.16278131e+00 -2.36033068e-01 -2.36033068e-01
 -2.36033068e-01  1.27808894e+02  1.18702167e+03  1.02487153e+04]
E1 = -706.2168550114724  E_coul = 198.94574975786307
Extra cycle  E= -507.271105253609  delta_E= -2.27e-13  |g|= 1.37e-12  |ddm|= 4.82e-13
    CPU time for scf_cycle      0.12 sec, wall time      0.12 sec
exp = [6.34779765e+03 8.23082786e+02 1.72159973e+02 4.49662767e+01
 4.75096629e+00 3.92066715e-01 8.59589942e+00 4.90630969e-01]
grad_E = [ 3.51039270e-05  2.57186878e-06 -6.37462564e-07  1.00816031e-06
 -3.47466265e-05  1.32068898e-05 -1.38340253e-05  9.41158549e-05]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((8, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([1.5735952963858392e+03,2.3761303919145971e+02,5.2332977870138201e+01,4.7281081235122091e+00,3.9325830426169639e-01,8.5907170030661746e+00,4.9039633283239870e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "6s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:48:19 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  6347.79635781        1
[INPUT] 0    0    [1    /1   ]  823.073311557        1
[INPUT] 0    0    [1    /1   ]  172.154749078        1
[INPUT] 0    0    [1    /1   ]  44.9654578785        1
[INPUT] 0    0    [1    /1   ]  4.75085072474        1
[INPUT] 0    0    [1    /1   ]  0.392067531714       1
[INPUT] 1    0    [1    /1   ]  8.59586553849        1
[INPUT] 1    0    [1    /1   ]  0.490637813086       1

nuclear repulsion = 0
number of shells = 8
number of NR pGTOs = 12
number of NR cGTOs = 12
basis = {'Ar': [[0, [6347.7963578057015, 1.0]], [0, [823.0733115570417, 1.0]], [0, [172.1547490780582, 1.0]], [0, [44.96545787848001, 1.0]], [0, [4.750850724739632, 1.0]], [0, [0.3920675317137236, 1.0]], [1, [8.595865538491486, 1.0]], [1, [0.49063781308632054, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [6347.79635781]
bas 1, expnt(s) = [823.07331156]
bas 2, expnt(s) = [172.15474908]
bas 3, expnt(s) = [44.96545788]
bas 4, expnt(s) = [4.75085072]
bas 5, expnt(s) = [0.39206753]
bas 6, expnt(s) = [8.59586554]
bas 7, expnt(s) = [0.49063781]
CPU time:       167.66
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  1  1  1  0 36 37  0]
 [ 0  1  1  1  0 38 39  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 6.34779636e+03 1.79672770e+03 8.23073312e+02 3.88234311e+02
 1.72154749e+02 1.20075466e+02 4.49654579e+01 4.38706723e+01
 4.75085072e+00 8.13005648e+00 3.92067532e-01 1.25180212e+00
 8.59586554e+00 4.29384546e+01 4.90637813e-01 1.19794164e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319208720847612
cond(S) = 20.481115859780388
E1 = -688.7649595304135  E_coul = 184.91784290474186
init E= -503.847116625672
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.681204408835148  LUMO = 126.438703395343
  mo_energy =
[-1.21474273e+02 -1.32743293e+01 -7.62042078e+00 -7.62042078e+00
 -7.62042078e+00 -1.65130735e+00 -6.81204409e-01 -6.81204409e-01
 -6.81204409e-01  1.26438703e+02  1.18566037e+03  1.02475285e+04]
E1 = -706.2343370218124  E_coul = 198.96346123960217
cycle= 1 E= -507.27087578221  delta_E= -3.42  |g|= 0.288  |ddm|= 0.299
    CPU time for cycle= 1      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.333111
diis-c [-0.11096274  1.        ]
  HOMO = -0.235932971686002  LUMO = 127.806142565238
  mo_energy =
[-1.20089339e+02 -1.22438220e+01 -6.65004103e+00 -6.65004103e+00
 -6.65004103e+00 -1.16273785e+00 -2.35932972e-01 -2.35932972e-01
 -2.35932972e-01  1.27806143e+02  1.18700161e+03  1.02486752e+04]
E1 = -706.2169311401175  E_coul = 198.94582587461255
cycle= 2 E= -507.271105265505  delta_E= -0.000229  |g|= 0.00333  |ddm|= 0.00744
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00348239
diis-c [-1.14274373e-05 -2.51733537e-03  1.00251734e+00]
  HOMO = -0.236018900038989  LUMO = 127.803617948684
  mo_energy =
[-1.20094493e+02 -1.22444265e+01 -6.65097172e+00 -6.65097172e+00
 -6.65097172e+00 -1.16277036e+00 -2.36018900e-01 -2.36018900e-01
 -2.36018900e-01  1.27803618e+02  1.18699358e+03  1.02486630e+04]
E1 = -706.2167469902862  E_coul = 198.945641686713
cycle= 3 E= -507.271105303573  delta_E= -3.81e-08  |g|= 4.73e-05  |ddm|= 8.39e-05
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=6.27791e-05
diis-c [-8.96541287e-11  4.50974776e-05 -1.87462754e-02  1.01870118e+00]
  HOMO = -0.236019569400935  LUMO = 127.803602197409
  mo_energy =
[-1.20094531e+02 -1.22444315e+01 -6.65098043e+00 -6.65098043e+00
 -6.65098043e+00 -1.16277055e+00 -2.36019569e-01 -2.36019569e-01
 -2.36019569e-01  1.27803602e+02  1.18699354e+03  1.02486630e+04]
E1 = -706.2167450850694  E_coul = 198.94563978148926
cycle= 4 E= -507.27110530358  delta_E= -6.93e-12  |g|= 1.1e-07  |ddm|= 9.82e-07
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.2167450850694  E_coul = 198.94563978148926
  HOMO = -0.236019566129977  LUMO = 127.803602322789
  mo_energy =
[-1.20094531e+02 -1.22444314e+01 -6.65098040e+00 -6.65098040e+00
 -6.65098040e+00 -1.16277055e+00 -2.36019566e-01 -2.36019566e-01
 -2.36019566e-01  1.27803602e+02  1.18699354e+03  1.02486630e+04]
E1 = -706.2167450921853  E_coul = 198.9456397886051
Extra cycle  E= -507.27110530358  delta_E= -5.68e-14  |g|= 1.43e-09  |ddm|= 2.82e-09
    CPU time for scf_cycle      0.10 sec, wall time      0.10 sec
exp = [6.34779636e+03 8.23073312e+02 1.72154749e+02 4.49654579e+01
 4.75085072e+00 3.92067532e-01 8.59586554e+00 4.90637813e-01]
E = -507.2711053035802
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((8, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([1.5735952963858392e+03,2.3761303919145971e+02,5.2332977870138201e+01,4.7281081235122091e+00,3.9325830426169639e-01,8.5907170030661746e+00,4.9039633283239870e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "6s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:48:20 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  6347.79635781        1
[INPUT] 0    0    [1    /1   ]  823.073311557        1
[INPUT] 0    0    [1    /1   ]  172.154749078        1
[INPUT] 0    0    [1    /1   ]  44.9654578785        1
[INPUT] 0    0    [1    /1   ]  4.75085072474        1
[INPUT] 0    0    [1    /1   ]  0.392067531714       1
[INPUT] 1    0    [1    /1   ]  8.59586553849        1
[INPUT] 1    0    [1    /1   ]  0.490637813086       1

nuclear repulsion = 0
number of shells = 8
number of NR pGTOs = 12
number of NR cGTOs = 12
basis = {'Ar': [[0, [6347.7963578057015, 1.0]], [0, [823.0733115570417, 1.0]], [0, [172.1547490780582, 1.0]], [0, [44.96545787848001, 1.0]], [0, [4.750850724739632, 1.0]], [0, [0.3920675317137236, 1.0]], [1, [8.595865538491486, 1.0]], [1, [0.49063781308632054, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [6347.79635781]
bas 1, expnt(s) = [823.07331156]
bas 2, expnt(s) = [172.15474908]
bas 3, expnt(s) = [44.96545788]
bas 4, expnt(s) = [4.75085072]
bas 5, expnt(s) = [0.39206753]
bas 6, expnt(s) = [8.59586554]
bas 7, expnt(s) = [0.49063781]
CPU time:       168.38
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  1  1  1  0 36 37  0]
 [ 0  1  1  1  0 38 39  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 6.34779636e+03 1.79672770e+03 8.23073312e+02 3.88234311e+02
 1.72154749e+02 1.20075466e+02 4.49654579e+01 4.38706723e+01
 4.75085072e+00 8.13005648e+00 3.92067532e-01 1.25180212e+00
 8.59586554e+00 4.29384546e+01 4.90637813e-01 1.19794164e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319208720847612
cond(S) = 20.481115859780388
E1 = -688.7649595304135  E_coul = 184.91784290474186
init E= -503.847116625672
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.681204408835148  LUMO = 126.438703395343
  mo_energy =
[-1.21474273e+02 -1.32743293e+01 -7.62042078e+00 -7.62042078e+00
 -7.62042078e+00 -1.65130735e+00 -6.81204409e-01 -6.81204409e-01
 -6.81204409e-01  1.26438703e+02  1.18566037e+03  1.02475285e+04]
E1 = -706.2343370218124  E_coul = 198.96346123960217
cycle= 1 E= -507.27087578221  delta_E= -3.42  |g|= 0.288  |ddm|= 0.299
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.333111
diis-c [-0.11096274  1.        ]
  HOMO = -0.235932971686002  LUMO = 127.806142565238
  mo_energy =
[-1.20089339e+02 -1.22438220e+01 -6.65004103e+00 -6.65004103e+00
 -6.65004103e+00 -1.16273785e+00 -2.35932972e-01 -2.35932972e-01
 -2.35932972e-01  1.27806143e+02  1.18700161e+03  1.02486752e+04]
E1 = -706.2169311401175  E_coul = 198.94582587461255
cycle= 2 E= -507.271105265505  delta_E= -0.000229  |g|= 0.00333  |ddm|= 0.00744
    CPU time for cycle= 2      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.00348239
diis-c [-1.14274373e-05 -2.51733537e-03  1.00251734e+00]
  HOMO = -0.236018900038989  LUMO = 127.803617948684
  mo_energy =
[-1.20094493e+02 -1.22444265e+01 -6.65097172e+00 -6.65097172e+00
 -6.65097172e+00 -1.16277036e+00 -2.36018900e-01 -2.36018900e-01
 -2.36018900e-01  1.27803618e+02  1.18699358e+03  1.02486630e+04]
E1 = -706.2167469902862  E_coul = 198.945641686713
cycle= 3 E= -507.271105303573  delta_E= -3.81e-08  |g|= 4.73e-05  |ddm|= 8.39e-05
    CPU time for cycle= 3      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=6.27791e-05
diis-c [-8.96541287e-11  4.50974776e-05 -1.87462754e-02  1.01870118e+00]
  HOMO = -0.236019569400935  LUMO = 127.803602197409
  mo_energy =
[-1.20094531e+02 -1.22444315e+01 -6.65098043e+00 -6.65098043e+00
 -6.65098043e+00 -1.16277055e+00 -2.36019569e-01 -2.36019569e-01
 -2.36019569e-01  1.27803602e+02  1.18699354e+03  1.02486630e+04]
E1 = -706.2167450850694  E_coul = 198.94563978148926
cycle= 4 E= -507.27110530358  delta_E= -6.93e-12  |g|= 1.1e-07  |ddm|= 9.82e-07
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.2167450850694  E_coul = 198.94563978148926
  HOMO = -0.236019566129977  LUMO = 127.803602322789
  mo_energy =
[-1.20094531e+02 -1.22444314e+01 -6.65098040e+00 -6.65098040e+00
 -6.65098040e+00 -1.16277055e+00 -2.36019566e-01 -2.36019566e-01
 -2.36019566e-01  1.27803602e+02  1.18699354e+03  1.02486630e+04]
E1 = -706.2167450921853  E_coul = 198.9456397886051
Extra cycle  E= -507.27110530358  delta_E= -5.68e-14  |g|= 1.43e-09  |ddm|= 2.82e-09
    CPU time for scf_cycle      0.09 sec, wall time      0.10 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 20.481115859780388
E1 = -706.2167450921853  E_coul = 198.9456397886051
init E= -507.27110530358
    CPU time for initialize scf      0.06 sec, wall time      0.06 sec
  HOMO = -0.236019566100343  LUMO = 127.803602323884
  mo_energy =
[-1.20094531e+02 -1.22444314e+01 -6.65098040e+00 -6.65098040e+00
 -6.65098040e+00 -1.16277055e+00 -2.36019566e-01 -2.36019566e-01
 -2.36019566e-01  1.27803602e+02  1.18699354e+03  1.02486630e+04]
E1 = -706.2167450922645  E_coul = 198.94563978868416
cycle= 1 E= -507.27110530358  delta_E= -1.71e-13  |g|= 2.16e-11  |ddm|= 3.41e-11
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -706.2167450922645  E_coul = 198.94563978868416
  HOMO = -0.23601956610002  LUMO = 127.803602323895
  mo_energy =
[-1.20094531e+02 -1.22444314e+01 -6.65098040e+00 -6.65098040e+00
 -6.65098040e+00 -1.16277055e+00 -2.36019566e-01 -2.36019566e-01
 -2.36019566e-01  1.27803602e+02  1.18699354e+03  1.02486630e+04]
E1 = -706.2167450922649  E_coul = 198.945639788685
Extra cycle  E= -507.27110530358  delta_E= 5.12e-13  |g|= 1.36e-12  |ddm|= 4.73e-13
    CPU time for scf_cycle      0.12 sec, wall time      0.13 sec
exp = [6.34779636e+03 8.23073312e+02 1.72154749e+02 4.49654579e+01
 4.75085072e+00 3.92067532e-01 8.59586554e+00 4.90637813e-01]
grad_E = [ 3.51025403e-05  2.85780225e-06 -3.33451458e-06  3.78294070e-06
 -1.39215825e-04  5.05854406e-05 -5.65100574e-05  3.65927863e-04]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((8, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([1.5735952963858392e+03,2.3761303919145971e+02,5.2332977870138201e+01,4.7281081235122091e+00,3.9325830426169639e-01,8.5907170030661746e+00,4.9039633283239870e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "6s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:48:23 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  6347.79208763        1
[INPUT] 0    0    [1    /1   ]  823.058566309        1
[INPUT] 0    0    [1    /1   ]  172.146692776        1
[INPUT] 0    0    [1    /1   ]  44.9641962393        1
[INPUT] 0    0    [1    /1   ]  4.75067306445        1
[INPUT] 0    0    [1    /1   ]  0.392068786445       1
[INPUT] 1    0    [1    /1   ]  8.59581333203        1
[INPUT] 1    0    [1    /1   ]  0.490648328023       1

nuclear repulsion = 0
number of shells = 8
number of NR pGTOs = 12
number of NR cGTOs = 12
basis = {'Ar': [[0, [6347.792087632998, 1.0]], [0, [823.0585663091338, 1.0]], [0, [172.14669277565028, 1.0]], [0, [44.96419623933566, 1.0]], [0, [4.7506730644511155, 1.0]], [0, [0.39206878644538457, 1.0]], [1, [8.595813332029165, 1.0]], [1, [0.49064832802314723, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [6347.79208763]
bas 1, expnt(s) = [823.05856631]
bas 2, expnt(s) = [172.14669278]
bas 3, expnt(s) = [44.96419624]
bas 4, expnt(s) = [4.75067306]
bas 5, expnt(s) = [0.39206879]
bas 6, expnt(s) = [8.59581333]
bas 7, expnt(s) = [0.49064833]
CPU time:       171.70
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  1  1  1  0 36 37  0]
 [ 0  1  1  1  0 38 39  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 6.34779209e+03 1.79672679e+03 8.23058566e+02 3.88229094e+02
 1.72146693e+02 1.20071251e+02 4.49641962e+01 4.38697491e+01
 4.75067306e+00 8.12982846e+00 3.92068786e-01 1.25180513e+00
 8.59581333e+00 4.29381286e+01 4.90648328e-01 1.19797374e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319198187982078
cond(S) = 20.480927030542574
E1 = -688.7648526275522  E_coul = 184.9177325895035
init E= -503.847120038049
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.681191028802963  LUMO = 126.430569843614
  mo_energy =
[-1.21474330e+02 -1.32743302e+01 -7.62043772e+00 -7.62043772e+00
 -7.62043772e+00 -1.65129343e+00 -6.81191029e-01 -6.81191029e-01
 -6.81191029e-01  1.26430570e+02  1.18561694e+03  1.02474446e+04]
E1 = -706.2341699141283  E_coul = 198.9632940851631
cycle= 1 E= -507.270875828965  delta_E= -3.42  |g|= 0.288  |ddm|= 0.299
    CPU time for cycle= 1      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.333112
diis-c [-0.11096376  1.        ]
  HOMO = -0.235912212626919  LUMO = 127.79798753209
  mo_energy =
[-1.20089433e+02 -1.22438258e+01 -6.65006242e+00 -6.65006242e+00
 -6.65006242e+00 -1.16272131e+00 -2.35912213e-01 -2.35912213e-01
 -2.35912213e-01  1.27797988e+02  1.18695812e+03  1.02485913e+04]
E1 = -706.2167612400023  E_coul = 198.94565586516404
cycle= 2 E= -507.271105374838  delta_E= -0.00023  |g|= 0.00333  |ddm|= 0.00744
    CPU time for cycle= 2      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.00348306
diis-c [-1.14317614e-05 -2.51802308e-03  1.00251802e+00]
  HOMO = -0.235998158865823  LUMO = 127.795462636656
  mo_energy =
[-1.20094588e+02 -1.22444304e+01 -6.65099330e+00 -6.65099330e+00
 -6.65099330e+00 -1.16275383e+00 -2.35998159e-01 -2.35998159e-01
 -2.35998159e-01  1.27795463e+02  1.18695009e+03  1.02485791e+04]
E1 = -706.2165770491579  E_coul = 198.9454716362358
cycle= 3 E= -507.271105412922  delta_E= -3.81e-08  |g|= 4.73e-05  |ddm|= 8.39e-05
    CPU time for cycle= 3      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=6.27904e-05
diis-c [-8.96712718e-11  4.50993187e-05 -1.87461261e-02  1.01870103e+00]
  HOMO = -0.235998828361263  LUMO = 127.795446883832
  mo_energy =
[-1.20094626e+02 -1.22444353e+01 -6.65100201e+00 -6.65100201e+00
 -6.65100201e+00 -1.16275401e+00 -2.35998828e-01 -2.35998828e-01
 -2.35998828e-01  1.27795447e+02  1.18695005e+03  1.02485791e+04]
E1 = -706.2165751435107  E_coul = 198.945469730582
cycle= 4 E= -507.271105412929  delta_E= -6.59e-12  |g|= 1.1e-07  |ddm|= 9.82e-07
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.2165751435107  E_coul = 198.945469730582
  HOMO = -0.235998825089452  LUMO = 127.79544700923
  mo_energy =
[-1.20094626e+02 -1.22444353e+01 -6.65100197e+00 -6.65100197e+00
 -6.65100197e+00 -1.16275401e+00 -2.35998825e-01 -2.35998825e-01
 -2.35998825e-01  1.27795447e+02  1.18695005e+03  1.02485791e+04]
E1 = -706.2165751506282  E_coul = 198.9454697376993
Extra cycle  E= -507.271105412929  delta_E= -1.14e-13  |g|= 1.43e-09  |ddm|= 2.82e-09
    CPU time for scf_cycle      0.09 sec, wall time      0.10 sec
exp = [6.34779209e+03 8.23058566e+02 1.72146693e+02 4.49641962e+01
 4.75067306e+00 3.92068786e-01 8.59581333e+00 4.90648328e-01]
E = -507.2711054129288
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((8, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([1.5735952963858392e+03,2.3761303919145971e+02,5.2332977870138201e+01,4.7281081235122091e+00,3.9325830426169639e-01,8.5907170030661746e+00,4.9039633283239870e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "6s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:48:24 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  6347.79208763        1
[INPUT] 0    0    [1    /1   ]  823.058566309        1
[INPUT] 0    0    [1    /1   ]  172.146692776        1
[INPUT] 0    0    [1    /1   ]  44.9641962393        1
[INPUT] 0    0    [1    /1   ]  4.75067306445        1
[INPUT] 0    0    [1    /1   ]  0.392068786445       1
[INPUT] 1    0    [1    /1   ]  8.59581333203        1
[INPUT] 1    0    [1    /1   ]  0.490648328023       1

nuclear repulsion = 0
number of shells = 8
number of NR pGTOs = 12
number of NR cGTOs = 12
basis = {'Ar': [[0, [6347.792087632998, 1.0]], [0, [823.0585663091338, 1.0]], [0, [172.14669277565028, 1.0]], [0, [44.96419623933566, 1.0]], [0, [4.7506730644511155, 1.0]], [0, [0.39206878644538457, 1.0]], [1, [8.595813332029165, 1.0]], [1, [0.49064832802314723, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [6347.79208763]
bas 1, expnt(s) = [823.05856631]
bas 2, expnt(s) = [172.14669278]
bas 3, expnt(s) = [44.96419624]
bas 4, expnt(s) = [4.75067306]
bas 5, expnt(s) = [0.39206879]
bas 6, expnt(s) = [8.59581333]
bas 7, expnt(s) = [0.49064833]
CPU time:       172.41
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  1  1  1  0 36 37  0]
 [ 0  1  1  1  0 38 39  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 6.34779209e+03 1.79672679e+03 8.23058566e+02 3.88229094e+02
 1.72146693e+02 1.20071251e+02 4.49641962e+01 4.38697491e+01
 4.75067306e+00 8.12982846e+00 3.92068786e-01 1.25180513e+00
 8.59581333e+00 4.29381286e+01 4.90648328e-01 1.19797374e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319198187982078
cond(S) = 20.480927030542574
E1 = -688.7648526275522  E_coul = 184.9177325895035
init E= -503.847120038049
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.681191028802963  LUMO = 126.430569843614
  mo_energy =
[-1.21474330e+02 -1.32743302e+01 -7.62043772e+00 -7.62043772e+00
 -7.62043772e+00 -1.65129343e+00 -6.81191029e-01 -6.81191029e-01
 -6.81191029e-01  1.26430570e+02  1.18561694e+03  1.02474446e+04]
E1 = -706.2341699141283  E_coul = 198.9632940851631
cycle= 1 E= -507.270875828965  delta_E= -3.42  |g|= 0.288  |ddm|= 0.299
    CPU time for cycle= 1      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.333112
diis-c [-0.11096376  1.        ]
  HOMO = -0.235912212626919  LUMO = 127.79798753209
  mo_energy =
[-1.20089433e+02 -1.22438258e+01 -6.65006242e+00 -6.65006242e+00
 -6.65006242e+00 -1.16272131e+00 -2.35912213e-01 -2.35912213e-01
 -2.35912213e-01  1.27797988e+02  1.18695812e+03  1.02485913e+04]
E1 = -706.2167612400023  E_coul = 198.94565586516404
cycle= 2 E= -507.271105374838  delta_E= -0.00023  |g|= 0.00333  |ddm|= 0.00744
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00348306
diis-c [-1.14317614e-05 -2.51802308e-03  1.00251802e+00]
  HOMO = -0.235998158865823  LUMO = 127.795462636656
  mo_energy =
[-1.20094588e+02 -1.22444304e+01 -6.65099330e+00 -6.65099330e+00
 -6.65099330e+00 -1.16275383e+00 -2.35998159e-01 -2.35998159e-01
 -2.35998159e-01  1.27795463e+02  1.18695009e+03  1.02485791e+04]
E1 = -706.2165770491579  E_coul = 198.9454716362358
cycle= 3 E= -507.271105412922  delta_E= -3.81e-08  |g|= 4.73e-05  |ddm|= 8.39e-05
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=6.27904e-05
diis-c [-8.96712718e-11  4.50993187e-05 -1.87461261e-02  1.01870103e+00]
  HOMO = -0.235998828361263  LUMO = 127.795446883832
  mo_energy =
[-1.20094626e+02 -1.22444353e+01 -6.65100201e+00 -6.65100201e+00
 -6.65100201e+00 -1.16275401e+00 -2.35998828e-01 -2.35998828e-01
 -2.35998828e-01  1.27795447e+02  1.18695005e+03  1.02485791e+04]
E1 = -706.2165751435107  E_coul = 198.945469730582
cycle= 4 E= -507.271105412929  delta_E= -6.59e-12  |g|= 1.1e-07  |ddm|= 9.82e-07
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.2165751435107  E_coul = 198.945469730582
  HOMO = -0.235998825089452  LUMO = 127.79544700923
  mo_energy =
[-1.20094626e+02 -1.22444353e+01 -6.65100197e+00 -6.65100197e+00
 -6.65100197e+00 -1.16275401e+00 -2.35998825e-01 -2.35998825e-01
 -2.35998825e-01  1.27795447e+02  1.18695005e+03  1.02485791e+04]
E1 = -706.2165751506282  E_coul = 198.9454697376993
Extra cycle  E= -507.271105412929  delta_E= -1.14e-13  |g|= 1.43e-09  |ddm|= 2.82e-09
    CPU time for scf_cycle      0.10 sec, wall time      0.10 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 20.480927030542574
E1 = -706.2165751506282  E_coul = 198.9454697376993
init E= -507.271105412929
    CPU time for initialize scf      0.06 sec, wall time      0.06 sec
  HOMO = -0.23599882505982  LUMO = 127.795447010326
  mo_energy =
[-1.20094626e+02 -1.22444353e+01 -6.65100197e+00 -6.65100197e+00
 -6.65100197e+00 -1.16275401e+00 -2.35998825e-01 -2.35998825e-01
 -2.35998825e-01  1.27795447e+02  1.18695005e+03  1.02485791e+04]
E1 = -706.2165751507077  E_coul = 198.94546973777867
cycle= 1 E= -507.271105412929  delta_E= -2.27e-13  |g|= 2.17e-11  |ddm|= 3.41e-11
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -706.2165751507077  E_coul = 198.94546973777867
  HOMO = -0.235998825059487  LUMO = 127.795447010337
  mo_energy =
[-1.20094626e+02 -1.22444353e+01 -6.65100197e+00 -6.65100197e+00
 -6.65100197e+00 -1.16275401e+00 -2.35998825e-01 -2.35998825e-01
 -2.35998825e-01  1.27795447e+02  1.18695005e+03  1.02485791e+04]
E1 = -706.2165751507085  E_coul = 198.94546973777977
Extra cycle  E= -507.271105412929  delta_E= 2.84e-13  |g|= 1.96e-12  |ddm|= 4.75e-13
    CPU time for scf_cycle      0.12 sec, wall time      0.13 sec
exp = [6.34779209e+03 8.23058566e+02 1.72146693e+02 4.49641962e+01
 4.75067306e+00 3.92068786e-01 8.59581333e+00 4.90648328e-01]
grad_E = [ 3.51003973e-05  3.29764103e-06 -7.48599423e-06  8.06281075e-06
 -2.99832402e-04  1.08009869e-04 -1.22209789e-04  7.83631975e-04]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((8, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([1.5735952963858392e+03,2.3761303919145971e+02,5.2332977870138201e+01,4.7281081235122091e+00,3.9325830426169639e-01,8.5907170030661746e+00,4.9039633283239870e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "6s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:48:27 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  6347.7807371         1
[INPUT] 0    0    [1    /1   ]  823.037780692        1
[INPUT] 0    0    [1    /1   ]  172.135492326        1
[INPUT] 0    0    [1    /1   ]  44.962443401         1
[INPUT] 0    0    [1    /1   ]  4.75042694322        1
[INPUT] 0    0    [1    /1   ]  0.392070524922       1
[INPUT] 1    0    [1    /1   ]  8.59574096345        1
[INPUT] 1    0    [1    /1   ]  0.490662894081       1

nuclear repulsion = 0
number of shells = 8
number of NR pGTOs = 12
number of NR cGTOs = 12
basis = {'Ar': [[0, [6347.7807370996825, 1.0]], [0, [823.0377806915294, 1.0]], [0, [172.13549232578782, 1.0]], [0, [44.9624434010032, 1.0]], [0, [4.750426943219302, 1.0]], [0, [0.392070524921673, 1.0]], [1, [8.595740963451307, 1.0]], [1, [0.49066289408093866, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [6347.7807371]
bas 1, expnt(s) = [823.03778069]
bas 2, expnt(s) = [172.13549233]
bas 3, expnt(s) = [44.9624434]
bas 4, expnt(s) = [4.75042694]
bas 5, expnt(s) = [0.39207052]
bas 6, expnt(s) = [8.59574096]
bas 7, expnt(s) = [0.49066289]
CPU time:       175.71
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  1  1  1  0 36 37  0]
 [ 0  1  1  1  0 38 39  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 6.34778074e+03 1.79672439e+03 8.23037781e+02 3.88221741e+02
 1.72135492e+02 1.20065392e+02 4.49624434e+01 4.38684664e+01
 4.75042694e+00 8.12951257e+00 3.92070525e-01 1.25180929e+00
 8.59574096e+00 4.29376767e+01 4.90662894e-01 1.19801819e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.31918359259207
cond(S) = 20.48067485457127
E1 = -688.7647044203584  E_coul = 184.9175794275295
init E= -503.847124992829
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.681172495431686  LUMO = 126.419269352347
  mo_energy =
[-1.21474409e+02 -1.32743315e+01 -7.62046122e+00 -7.62046122e+00
 -7.62046122e+00 -1.65127416e+00 -6.81172495e-01 -6.81172495e-01
 -6.81172495e-01  1.26419269e+02  1.18555628e+03  1.02473204e+04]
E1 = -706.233938162052  E_coul = 198.96306217258848
cycle= 1 E= -507.270875989464  delta_E= -3.42  |g|= 0.288  |ddm|= 0.299
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.333114
diis-c [-0.11096515  1.        ]
  HOMO = -0.235883455829182  LUMO = 127.786657262127
  mo_energy =
[-1.20089564e+02 -1.22438310e+01 -6.65009209e+00 -6.65009209e+00
 -6.65009209e+00 -1.16269839e+00 -2.35883456e-01 -2.35883456e-01
 -2.35883456e-01  1.27786657e+02  1.18689739e+03  1.02484670e+04]
E1 = -706.2165256117399  E_coul = 198.94541998958806
cycle= 2 E= -507.271105622152  delta_E= -0.00023  |g|= 0.00333  |ddm|= 0.00744
    CPU time for cycle= 2      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.003484
diis-c [-1.14377601e-05 -2.51897610e-03  1.00251898e+00]
  HOMO = -0.235969426892881  LUMO = 127.784131979719
  mo_energy =
[-1.20094721e+02 -1.22444357e+01 -6.65102321e+00 -6.65102321e+00
 -6.65102321e+00 -1.16273091e+00 -2.35969427e-01 -2.35969427e-01
 -2.35969427e-01  1.27784132e+02  1.18688936e+03  1.02484548e+04]
E1 = -706.216341363953  E_coul = 198.9452357036956
cycle= 3 E= -507.271105660257  delta_E= -3.81e-08  |g|= 4.73e-05  |ddm|= 8.39e-05
    CPU time for cycle= 3      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=6.28061e-05
diis-c [-8.96952367e-11  4.51018718e-05 -1.87459229e-02  1.01870082e+00]
  HOMO = -0.235970096573747  LUMO = 127.784116224737
  mo_energy =
[-1.20094759e+02 -1.22444406e+01 -6.65103192e+00 -6.65103192e+00
 -6.65103192e+00 -1.16273110e+00 -2.35970097e-01 -2.35970097e-01
 -2.35970097e-01  1.27784116e+02  1.18688932e+03  1.02484547e+04]
E1 = -706.2163394577087  E_coul = 198.94523379744408
cycle= 4 E= -507.271105660265  delta_E= -7.28e-12  |g|= 1.1e-07  |ddm|= 9.82e-07
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.2163394577087  E_coul = 198.94523379744408
  HOMO = -0.235970093300749  LUMO = 127.784116350162
  mo_energy =
[-1.20094758e+02 -1.22444406e+01 -6.65103189e+00 -6.65103189e+00
 -6.65103189e+00 -1.16273110e+00 -2.35970093e-01 -2.35970093e-01
 -2.35970093e-01  1.27784116e+02  1.18688932e+03  1.02484547e+04]
E1 = -706.2163394648288  E_coul = 198.94523380456405
Extra cycle  E= -507.271105660265  delta_E= -1.14e-13  |g|= 1.43e-09  |ddm|= 2.82e-09
    CPU time for scf_cycle      0.09 sec, wall time      0.10 sec
exp = [6.34778074e+03 8.23037781e+02 1.72135492e+02 4.49624434e+01
 4.75042694e+00 3.92070525e-01 8.59574096e+00 4.90662894e-01]
E = -507.27110566026477
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((8, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([1.5735952963858392e+03,2.3761303919145971e+02,5.2332977870138201e+01,4.7281081235122091e+00,3.9325830426169639e-01,8.5907170030661746e+00,4.9039633283239870e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "6s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:48:28 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  6347.7807371         1
[INPUT] 0    0    [1    /1   ]  823.037780692        1
[INPUT] 0    0    [1    /1   ]  172.135492326        1
[INPUT] 0    0    [1    /1   ]  44.962443401         1
[INPUT] 0    0    [1    /1   ]  4.75042694322        1
[INPUT] 0    0    [1    /1   ]  0.392070524922       1
[INPUT] 1    0    [1    /1   ]  8.59574096345        1
[INPUT] 1    0    [1    /1   ]  0.490662894081       1

nuclear repulsion = 0
number of shells = 8
number of NR pGTOs = 12
number of NR cGTOs = 12
basis = {'Ar': [[0, [6347.7807370996825, 1.0]], [0, [823.0377806915294, 1.0]], [0, [172.13549232578782, 1.0]], [0, [44.9624434010032, 1.0]], [0, [4.750426943219302, 1.0]], [0, [0.392070524921673, 1.0]], [1, [8.595740963451307, 1.0]], [1, [0.49066289408093866, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [6347.7807371]
bas 1, expnt(s) = [823.03778069]
bas 2, expnt(s) = [172.13549233]
bas 3, expnt(s) = [44.9624434]
bas 4, expnt(s) = [4.75042694]
bas 5, expnt(s) = [0.39207052]
bas 6, expnt(s) = [8.59574096]
bas 7, expnt(s) = [0.49066289]
CPU time:       176.43
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  1  1  1  0 36 37  0]
 [ 0  1  1  1  0 38 39  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 6.34778074e+03 1.79672439e+03 8.23037781e+02 3.88221741e+02
 1.72135492e+02 1.20065392e+02 4.49624434e+01 4.38684664e+01
 4.75042694e+00 8.12951257e+00 3.92070525e-01 1.25180929e+00
 8.59574096e+00 4.29376767e+01 4.90662894e-01 1.19801819e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.31918359259207
cond(S) = 20.48067485457127
E1 = -688.7647044203584  E_coul = 184.9175794275295
init E= -503.847124992829
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.681172495431686  LUMO = 126.419269352347
  mo_energy =
[-1.21474409e+02 -1.32743315e+01 -7.62046122e+00 -7.62046122e+00
 -7.62046122e+00 -1.65127416e+00 -6.81172495e-01 -6.81172495e-01
 -6.81172495e-01  1.26419269e+02  1.18555628e+03  1.02473204e+04]
E1 = -706.233938162052  E_coul = 198.96306217258848
cycle= 1 E= -507.270875989464  delta_E= -3.42  |g|= 0.288  |ddm|= 0.299
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.333114
diis-c [-0.11096515  1.        ]
  HOMO = -0.235883455829182  LUMO = 127.786657262127
  mo_energy =
[-1.20089564e+02 -1.22438310e+01 -6.65009209e+00 -6.65009209e+00
 -6.65009209e+00 -1.16269839e+00 -2.35883456e-01 -2.35883456e-01
 -2.35883456e-01  1.27786657e+02  1.18689739e+03  1.02484670e+04]
E1 = -706.2165256117399  E_coul = 198.94541998958806
cycle= 2 E= -507.271105622152  delta_E= -0.00023  |g|= 0.00333  |ddm|= 0.00744
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.003484
diis-c [-1.14377601e-05 -2.51897610e-03  1.00251898e+00]
  HOMO = -0.235969426892881  LUMO = 127.784131979719
  mo_energy =
[-1.20094721e+02 -1.22444357e+01 -6.65102321e+00 -6.65102321e+00
 -6.65102321e+00 -1.16273091e+00 -2.35969427e-01 -2.35969427e-01
 -2.35969427e-01  1.27784132e+02  1.18688936e+03  1.02484548e+04]
E1 = -706.216341363953  E_coul = 198.9452357036956
cycle= 3 E= -507.271105660257  delta_E= -3.81e-08  |g|= 4.73e-05  |ddm|= 8.39e-05
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=6.28061e-05
diis-c [-8.96952367e-11  4.51018718e-05 -1.87459229e-02  1.01870082e+00]
  HOMO = -0.235970096573747  LUMO = 127.784116224737
  mo_energy =
[-1.20094759e+02 -1.22444406e+01 -6.65103192e+00 -6.65103192e+00
 -6.65103192e+00 -1.16273110e+00 -2.35970097e-01 -2.35970097e-01
 -2.35970097e-01  1.27784116e+02  1.18688932e+03  1.02484547e+04]
E1 = -706.2163394577087  E_coul = 198.94523379744408
cycle= 4 E= -507.271105660265  delta_E= -7.28e-12  |g|= 1.1e-07  |ddm|= 9.82e-07
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.2163394577087  E_coul = 198.94523379744408
  HOMO = -0.235970093300749  LUMO = 127.784116350162
  mo_energy =
[-1.20094758e+02 -1.22444406e+01 -6.65103189e+00 -6.65103189e+00
 -6.65103189e+00 -1.16273110e+00 -2.35970093e-01 -2.35970093e-01
 -2.35970093e-01  1.27784116e+02  1.18688932e+03  1.02484547e+04]
E1 = -706.2163394648288  E_coul = 198.94523380456405
Extra cycle  E= -507.271105660265  delta_E= -1.14e-13  |g|= 1.43e-09  |ddm|= 2.82e-09
    CPU time for scf_cycle      0.10 sec, wall time      0.10 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 20.48067485457127
E1 = -706.2163394648288  E_coul = 198.94523380456405
init E= -507.271105660265
    CPU time for initialize scf      0.06 sec, wall time      0.06 sec
  HOMO = -0.235970093271097  LUMO = 127.784116351257
  mo_energy =
[-1.20094758e+02 -1.22444406e+01 -6.65103189e+00 -6.65103189e+00
 -6.65103189e+00 -1.16273110e+00 -2.35970093e-01 -2.35970093e-01
 -2.35970093e-01  1.27784116e+02  1.18688932e+03  1.02484547e+04]
E1 = -706.2163394649076  E_coul = 198.94523380464315
cycle= 1 E= -507.271105660264  delta_E= 3.41e-13  |g|= 2.22e-11  |ddm|= 3.42e-11
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -706.2163394649076  E_coul = 198.94523380464315
  HOMO = -0.235970093270771  LUMO = 127.784116351268
  mo_energy =
[-1.20094758e+02 -1.22444406e+01 -6.65103189e+00 -6.65103189e+00
 -6.65103189e+00 -1.16273110e+00 -2.35970093e-01 -2.35970093e-01
 -2.35970093e-01  1.27784116e+02  1.18688932e+03  1.02484547e+04]
E1 = -706.2163394649086  E_coul = 198.94523380464415
Extra cycle  E= -507.271105660264  delta_E= -5.68e-14  |g|= 2.27e-12  |ddm|= 4.67e-13
    CPU time for scf_cycle      0.13 sec, wall time      0.13 sec
exp = [6.34778074e+03 8.23037781e+02 1.72135492e+02 4.49624434e+01
 4.75042694e+00 3.92070525e-01 8.59574096e+00 4.90662894e-01]
grad_E = [ 3.50973848e-05  3.90702748e-06 -1.32383283e-05  1.39946785e-05
 -5.22358632e-04  1.87560539e-04 -2.13267631e-04  1.36229286e-03]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((8, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([1.5735952963858392e+03,2.3761303919145971e+02,5.2332977870138201e+01,4.7281081235122091e+00,3.9325830426169639e-01,8.5907170030661746e+00,4.9039633283239870e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "6s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:48:31 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  6347.74639939        1
[INPUT] 0    0    [1    /1   ]  823.001028876        1
[INPUT] 0    0    [1    /1   ]  172.116101563        1
[INPUT] 0    0    [1    /1   ]  44.9594117097        1
[INPUT] 0    0    [1    /1   ]  4.75000315152        1
[INPUT] 0    0    [1    /1   ]  0.392073518438       1
[INPUT] 1    0    [1    /1   ]  8.59561633447        1
[INPUT] 1    0    [1    /1   ]  0.49068797816        1

nuclear repulsion = 0
number of shells = 8
number of NR pGTOs = 12
number of NR cGTOs = 12
basis = {'Ar': [[0, [6347.746399390377, 1.0]], [0, [823.0010288757309, 1.0]], [0, [172.11610156328564, 1.0]], [0, [44.95941170971074, 1.0]], [0, [4.750003151524789, 1.0]], [0, [0.3920735184379365, 1.0]], [1, [8.595616334472318, 1.0]], [1, [0.4906879781597155, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [6347.74639939]
bas 1, expnt(s) = [823.00102888]
bas 2, expnt(s) = [172.11610156]
bas 3, expnt(s) = [44.95941171]
bas 4, expnt(s) = [4.75000315]
bas 5, expnt(s) = [0.39207352]
bas 6, expnt(s) = [8.59561633]
bas 7, expnt(s) = [0.49068798]
CPU time:       179.77
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  1  1  1  0 36 37  0]
 [ 0  1  1  1  0 38 39  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 6.34774640e+03 1.79671710e+03 8.23001029e+02 3.88208739e+02
 1.72116102e+02 1.20055248e+02 4.49594117e+01 4.38662480e+01
 4.75000315e+00 8.12896863e+00 3.92073518e-01 1.25181646e+00
 8.59561633e+00 4.29368985e+01 4.90687978e-01 1.19809475e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.31915844403825
cond(S) = 20.48026600015962
E1 = -688.7644495547607  E_coul = 184.91731539804803
init E= -503.847134156713
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.681140585519869  LUMO = 126.399724364984
  mo_energy =
[-1.21474546e+02 -1.32743336e+01 -7.62050169e+00 -7.62050169e+00
 -7.62050169e+00 -1.65124096e+00 -6.81140586e-01 -6.81140586e-01
 -6.81140586e-01  1.26399724e+02  1.18545055e+03  1.02470847e+04]
E1 = -706.2335391998246  E_coul = 198.96266267345453
cycle= 1 E= -507.27087652637  delta_E= -3.42  |g|= 0.288  |ddm|= 0.299
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.333118
diis-c [-0.1109675  1.       ]
  HOMO = -0.235833933021833  LUMO = 127.767060959845
  mo_energy =
[-1.20089790e+02 -1.22438399e+01 -6.65014319e+00 -6.65014319e+00
 -6.65014319e+00 -1.16265892e+00 -2.35833933e-01 -2.35833933e-01
 -2.35833933e-01  1.27767061e+02  1.18679153e+03  1.02482310e+04]
E1 = -706.216119954247  E_coul = 198.94501364536757
cycle= 2 E= -507.271106308879  delta_E= -0.00023  |g|= 0.00334  |ddm|= 0.00744
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00348562
diis-c [-1.14481116e-05 -2.52061777e-03  1.00252062e+00]
  HOMO = -0.235919946959255  LUMO = 127.764535009356
  mo_energy =
[-1.20094948e+02 -1.22444449e+01 -6.65107473e+00 -6.65107473e+00
 -6.65107473e+00 -1.16269146e+00 -2.35919947e-01 -2.35919947e-01
 -2.35919947e-01  1.27764535e+02  1.18678350e+03  1.02482188e+04]
E1 = -706.215935608073  E_coul = 198.9448292610512
cycle= 3 E= -507.271106347022  delta_E= -3.81e-08  |g|= 4.74e-05  |ddm|= 8.4e-05
    CPU time for cycle= 3      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=6.28331e-05
diis-c [-8.97366286e-11  4.51063146e-05 -1.87455817e-02  1.01870048e+00]
  HOMO = -0.235920616960722  LUMO = 127.76451925063
  mo_energy =
[-1.20094986e+02 -1.22444498e+01 -6.65108345e+00 -6.65108345e+00
 -6.65108345e+00 -1.16269164e+00 -2.35920617e-01 -2.35920617e-01
 -2.35920617e-01  1.27764519e+02  1.18678346e+03  1.02482188e+04]
E1 = -706.2159337007954  E_coul = 198.94482735376639
cycle= 4 E= -507.271106347029  delta_E= -7.22e-12  |g|= 1.1e-07  |ddm|= 9.83e-07
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.2159337007954  E_coul = 198.94482735376639
  HOMO = -0.235920613685673  LUMO = 127.764519376099
  mo_energy =
[-1.20094986e+02 -1.22444497e+01 -6.65108341e+00 -6.65108341e+00
 -6.65108341e+00 -1.16269164e+00 -2.35920614e-01 -2.35920614e-01
 -2.35920614e-01  1.27764519e+02  1.18678346e+03  1.02482188e+04]
E1 = -706.2159337079194  E_coul = 198.9448273608904
Extra cycle  E= -507.271106347029  delta_E=    0  |g|= 1.43e-09  |ddm|= 2.83e-09
    CPU time for scf_cycle      0.10 sec, wall time      0.10 sec
exp = [6.34774640e+03 8.23001029e+02 1.72116102e+02 4.49594117e+01
 4.75000315e+00 3.92073518e-01 8.59561633e+00 4.90687978e-01]
E = -507.271106347029
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((8, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([1.5735952963858392e+03,2.3761303919145971e+02,5.2332977870138201e+01,4.7281081235122091e+00,3.9325830426169639e-01,8.5907170030661746e+00,4.9039633283239870e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "6s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:48:32 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  6347.74639939        1
[INPUT] 0    0    [1    /1   ]  823.001028876        1
[INPUT] 0    0    [1    /1   ]  172.116101563        1
[INPUT] 0    0    [1    /1   ]  44.9594117097        1
[INPUT] 0    0    [1    /1   ]  4.75000315152        1
[INPUT] 0    0    [1    /1   ]  0.392073518438       1
[INPUT] 1    0    [1    /1   ]  8.59561633447        1
[INPUT] 1    0    [1    /1   ]  0.49068797816        1

nuclear repulsion = 0
number of shells = 8
number of NR pGTOs = 12
number of NR cGTOs = 12
basis = {'Ar': [[0, [6347.746399390377, 1.0]], [0, [823.0010288757309, 1.0]], [0, [172.11610156328564, 1.0]], [0, [44.95941170971074, 1.0]], [0, [4.750003151524789, 1.0]], [0, [0.3920735184379365, 1.0]], [1, [8.595616334472318, 1.0]], [1, [0.4906879781597155, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [6347.74639939]
bas 1, expnt(s) = [823.00102888]
bas 2, expnt(s) = [172.11610156]
bas 3, expnt(s) = [44.95941171]
bas 4, expnt(s) = [4.75000315]
bas 5, expnt(s) = [0.39207352]
bas 6, expnt(s) = [8.59561633]
bas 7, expnt(s) = [0.49068798]
CPU time:       180.49
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  1  1  1  0 36 37  0]
 [ 0  1  1  1  0 38 39  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 6.34774640e+03 1.79671710e+03 8.23001029e+02 3.88208739e+02
 1.72116102e+02 1.20055248e+02 4.49594117e+01 4.38662480e+01
 4.75000315e+00 8.12896863e+00 3.92073518e-01 1.25181646e+00
 8.59561633e+00 4.29368985e+01 4.90687978e-01 1.19809475e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.31915844403825
cond(S) = 20.48026600015962
E1 = -688.7644495547607  E_coul = 184.91731539804803
init E= -503.847134156713
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.681140585519869  LUMO = 126.399724364984
  mo_energy =
[-1.21474546e+02 -1.32743336e+01 -7.62050169e+00 -7.62050169e+00
 -7.62050169e+00 -1.65124096e+00 -6.81140586e-01 -6.81140586e-01
 -6.81140586e-01  1.26399724e+02  1.18545055e+03  1.02470847e+04]
E1 = -706.2335391998246  E_coul = 198.96266267345453
cycle= 1 E= -507.27087652637  delta_E= -3.42  |g|= 0.288  |ddm|= 0.299
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.333118
diis-c [-0.1109675  1.       ]
  HOMO = -0.235833933021833  LUMO = 127.767060959845
  mo_energy =
[-1.20089790e+02 -1.22438399e+01 -6.65014319e+00 -6.65014319e+00
 -6.65014319e+00 -1.16265892e+00 -2.35833933e-01 -2.35833933e-01
 -2.35833933e-01  1.27767061e+02  1.18679153e+03  1.02482310e+04]
E1 = -706.216119954247  E_coul = 198.94501364536757
cycle= 2 E= -507.271106308879  delta_E= -0.00023  |g|= 0.00334  |ddm|= 0.00744
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00348562
diis-c [-1.14481116e-05 -2.52061777e-03  1.00252062e+00]
  HOMO = -0.235919946959255  LUMO = 127.764535009356
  mo_energy =
[-1.20094948e+02 -1.22444449e+01 -6.65107473e+00 -6.65107473e+00
 -6.65107473e+00 -1.16269146e+00 -2.35919947e-01 -2.35919947e-01
 -2.35919947e-01  1.27764535e+02  1.18678350e+03  1.02482188e+04]
E1 = -706.215935608073  E_coul = 198.9448292610512
cycle= 3 E= -507.271106347022  delta_E= -3.81e-08  |g|= 4.74e-05  |ddm|= 8.4e-05
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=6.28331e-05
diis-c [-8.97366286e-11  4.51063146e-05 -1.87455817e-02  1.01870048e+00]
  HOMO = -0.235920616960722  LUMO = 127.76451925063
  mo_energy =
[-1.20094986e+02 -1.22444498e+01 -6.65108345e+00 -6.65108345e+00
 -6.65108345e+00 -1.16269164e+00 -2.35920617e-01 -2.35920617e-01
 -2.35920617e-01  1.27764519e+02  1.18678346e+03  1.02482188e+04]
E1 = -706.2159337007954  E_coul = 198.94482735376639
cycle= 4 E= -507.271106347029  delta_E= -7.22e-12  |g|= 1.1e-07  |ddm|= 9.83e-07
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.2159337007954  E_coul = 198.94482735376639
  HOMO = -0.235920613685673  LUMO = 127.764519376099
  mo_energy =
[-1.20094986e+02 -1.22444497e+01 -6.65108341e+00 -6.65108341e+00
 -6.65108341e+00 -1.16269164e+00 -2.35920614e-01 -2.35920614e-01
 -2.35920614e-01  1.27764519e+02  1.18678346e+03  1.02482188e+04]
E1 = -706.2159337079194  E_coul = 198.9448273608904
Extra cycle  E= -507.271106347029  delta_E=    0  |g|= 1.43e-09  |ddm|= 2.83e-09
    CPU time for scf_cycle      0.10 sec, wall time      0.10 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 20.48026600015962
E1 = -706.2159337079194  E_coul = 198.9448273608904
init E= -507.271106347029
    CPU time for initialize scf      0.06 sec, wall time      0.06 sec
  HOMO = -0.235920613656003  LUMO = 127.764519377196
  mo_energy =
[-1.20094986e+02 -1.22444497e+01 -6.65108341e+00 -6.65108341e+00
 -6.65108341e+00 -1.16269164e+00 -2.35920614e-01 -2.35920614e-01
 -2.35920614e-01  1.27764519e+02  1.18678346e+03  1.02482188e+04]
E1 = -706.2159337079987  E_coul = 198.9448273609698
cycle= 1 E= -507.271106347029  delta_E= 1.14e-13  |g|= 2.16e-11  |ddm|= 3.42e-11
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -706.2159337079987  E_coul = 198.9448273609698
  HOMO = -0.235920613655665  LUMO = 127.764519377206
  mo_energy =
[-1.20094986e+02 -1.22444497e+01 -6.65108341e+00 -6.65108341e+00
 -6.65108341e+00 -1.16269164e+00 -2.35920614e-01 -2.35920614e-01
 -2.35920614e-01  1.27764519e+02  1.18678346e+03  1.02482188e+04]
E1 = -706.2159337079995  E_coul = 198.94482736097066
Extra cycle  E= -507.271106347029  delta_E=    0  |g|= 1.35e-12  |ddm|= 4.85e-13
    CPU time for scf_cycle      0.12 sec, wall time      0.13 sec
exp = [6.34774640e+03 8.23001029e+02 1.72116102e+02 4.49594117e+01
 4.75000315e+00 3.92073518e-01 8.59561633e+00 4.90687978e-01]
grad_E = [ 3.50920740e-05  4.95642962e-06 -2.31443742e-05  2.42103066e-05
 -9.05561103e-04  3.24547081e-04 -3.70089008e-04  2.35875866e-03]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((8, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([1.5735952963858392e+03,2.3761303919145971e+02,5.2332977870138201e+01,4.7281081235122091e+00,3.9325830426169639e-01,8.5907170030661746e+00,4.9039633283239870e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "6s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:48:35 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  6347.65393909        1
[INPUT] 0    0    [1    /1   ]  822.940452101        1
[INPUT] 0    0    [1    /1   ]  172.085178591        1
[INPUT] 0    0    [1    /1   ]  44.9545843869        1
[INPUT] 0    0    [1    /1   ]  4.74933322205        1
[INPUT] 0    0    [1    /1   ]  0.39207825064        1
[INPUT] 1    0    [1    /1   ]  8.59541931428        1
[INPUT] 1    0    [1    /1   ]  0.49072764101        1

nuclear repulsion = 0
number of shells = 8
number of NR pGTOs = 12
number of NR cGTOs = 12
basis = {'Ar': [[0, [6347.653939085084, 1.0]], [0, [822.9404521009822, 1.0]], [0, [172.0851785908641, 1.0]], [0, [44.95458438691734, 1.0]], [0, [4.749333222052734, 1.0]], [0, [0.3920782506399079, 1.0]], [1, [8.595419314279784, 1.0]], [1, [0.49072764100973126, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [6347.65393909]
bas 1, expnt(s) = [822.9404521]
bas 2, expnt(s) = [172.08517859]
bas 3, expnt(s) = [44.95458439]
bas 4, expnt(s) = [4.74933322]
bas 5, expnt(s) = [0.39207825]
bas 6, expnt(s) = [8.59541931]
bas 7, expnt(s) = [0.49072764]
CPU time:       183.80
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  1  1  1  0 36 37  0]
 [ 0  1  1  1  0 38 39  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 6.34765394e+03 1.79669747e+03 8.22940452e+02 3.88187309e+02
 1.72085179e+02 1.20039071e+02 4.49545844e+01 4.38627154e+01
 4.74933322e+00 8.12810875e+00 3.92078251e-01 1.25182779e+00
 8.59541931e+00 4.29356683e+01 4.90727641e-01 1.19821580e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319118642481207
cond(S) = 20.47968509770443
E1 = -688.7640477725286  E_coul = 184.91689749394038
init E= -503.847150278588
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.681090146474675  LUMO = 126.368603994342
  mo_energy =
[-1.21474763e+02 -1.32743368e+01 -7.62056572e+00 -7.62056572e+00
 -7.62056572e+00 -1.65118849e+00 -6.81090146e-01 -6.81090146e-01
 -6.81090146e-01  1.26368604e+02  1.18528011e+03  1.02466556e+04]
E1 = -706.2329090654196  E_coul = 198.9620310178519
cycle= 1 E= -507.270878047568  delta_E= -3.42  |g|= 0.288  |ddm|= 0.299
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.333123
diis-c [-0.11097106  1.        ]
  HOMO = -0.235755624548117  LUMO = 127.735859374451
  mo_energy =
[-1.20090148e+02 -1.22438538e+01 -6.65022398e+00 -6.65022398e+00
 -6.65022398e+00 -1.16259650e+00 -2.35755625e-01 -2.35755625e-01
 -2.35755625e-01  1.27735859e+02  1.18662089e+03  1.02478016e+04]
E1 = -706.2154791818347  E_coul = 198.94437111405674
cycle= 2 E= -507.271108067778  delta_E= -0.00023  |g|= 0.00334  |ddm|= 0.00745
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00348818
diis-c [-1.14645336e-05 -2.52321468e-03  1.00252321e+00]
  HOMO = -0.235841706593112  LUMO = 127.733332363302
  mo_energy =
[-1.20095309e+02 -1.22444591e+01 -6.65115619e+00 -6.65115619e+00
 -6.65115619e+00 -1.16262905e+00 -2.35841707e-01 -2.35841707e-01
 -2.35841707e-01  1.27733332e+02  1.18661285e+03  1.02477894e+04]
E1 = -706.2152946792594  E_coul = 198.94418657328018
cycle= 3 E= -507.271108105979  delta_E= -3.82e-08  |g|= 4.74e-05  |ddm|= 8.4e-05
    CPU time for cycle= 3      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=6.28761e-05
diis-c [-8.98025550e-11  4.51134063e-05 -1.87450634e-02  1.01869995e+00]
  HOMO = -0.235842377104809  LUMO = 127.733316598588
  mo_energy =
[-1.20095347e+02 -1.22444640e+01 -6.65116491e+00 -6.65116491e+00
 -6.65116491e+00 -1.16262923e+00 -2.35842377e-01 -2.35842377e-01
 -2.35842377e-01  1.27733317e+02  1.18661281e+03  1.02477894e+04]
E1 = -706.2152927703348  E_coul = 198.94418466434917
cycle= 4 E= -507.271108105986  delta_E= -6.42e-12  |g|= 1.11e-07  |ddm|= 9.84e-07
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.2152927703348  E_coul = 198.94418466434917
  HOMO = -0.235842373826499  LUMO = 127.733316724128
  mo_energy =
[-1.20095347e+02 -1.22444640e+01 -6.65116488e+00 -6.65116488e+00
 -6.65116488e+00 -1.16262923e+00 -2.35842374e-01 -2.35842374e-01
 -2.35842374e-01  1.27733317e+02  1.18661282e+03  1.02477894e+04]
E1 = -706.2152927774663  E_coul = 198.94418467147992
Extra cycle  E= -507.271108105986  delta_E= -7.39e-13  |g|= 1.43e-09  |ddm|= 2.83e-09
    CPU time for scf_cycle      0.09 sec, wall time      0.10 sec
exp = [6.34765394e+03 8.22940452e+02 1.72085179e+02 4.49545844e+01
 4.74933322e+00 3.92078251e-01 8.59541931e+00 4.90727641e-01]
E = -507.2711081059864
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((8, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([1.5735952963858392e+03,2.3761303919145971e+02,5.2332977870138201e+01,4.7281081235122091e+00,3.9325830426169639e-01,8.5907170030661746e+00,4.9039633283239870e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "6s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:48:36 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  6347.65393909        1
[INPUT] 0    0    [1    /1   ]  822.940452101        1
[INPUT] 0    0    [1    /1   ]  172.085178591        1
[INPUT] 0    0    [1    /1   ]  44.9545843869        1
[INPUT] 0    0    [1    /1   ]  4.74933322205        1
[INPUT] 0    0    [1    /1   ]  0.39207825064        1
[INPUT] 1    0    [1    /1   ]  8.59541931428        1
[INPUT] 1    0    [1    /1   ]  0.49072764101        1

nuclear repulsion = 0
number of shells = 8
number of NR pGTOs = 12
number of NR cGTOs = 12
basis = {'Ar': [[0, [6347.653939085084, 1.0]], [0, [822.9404521009822, 1.0]], [0, [172.0851785908641, 1.0]], [0, [44.95458438691734, 1.0]], [0, [4.749333222052734, 1.0]], [0, [0.3920782506399079, 1.0]], [1, [8.595419314279784, 1.0]], [1, [0.49072764100973126, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [6347.65393909]
bas 1, expnt(s) = [822.9404521]
bas 2, expnt(s) = [172.08517859]
bas 3, expnt(s) = [44.95458439]
bas 4, expnt(s) = [4.74933322]
bas 5, expnt(s) = [0.39207825]
bas 6, expnt(s) = [8.59541931]
bas 7, expnt(s) = [0.49072764]
CPU time:       184.54
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  1  1  1  0 36 37  0]
 [ 0  1  1  1  0 38 39  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 6.34765394e+03 1.79669747e+03 8.22940452e+02 3.88187309e+02
 1.72085179e+02 1.20039071e+02 4.49545844e+01 4.38627154e+01
 4.74933322e+00 8.12810875e+00 3.92078251e-01 1.25182779e+00
 8.59541931e+00 4.29356683e+01 4.90727641e-01 1.19821580e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319118642481207
cond(S) = 20.47968509770443
E1 = -688.7640477725286  E_coul = 184.91689749394038
init E= -503.847150278588
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.681090146474675  LUMO = 126.368603994342
  mo_energy =
[-1.21474763e+02 -1.32743368e+01 -7.62056572e+00 -7.62056572e+00
 -7.62056572e+00 -1.65118849e+00 -6.81090146e-01 -6.81090146e-01
 -6.81090146e-01  1.26368604e+02  1.18528011e+03  1.02466556e+04]
E1 = -706.2329090654196  E_coul = 198.9620310178519
cycle= 1 E= -507.270878047568  delta_E= -3.42  |g|= 0.288  |ddm|= 0.299
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.333123
diis-c [-0.11097106  1.        ]
  HOMO = -0.235755624548117  LUMO = 127.735859374451
  mo_energy =
[-1.20090148e+02 -1.22438538e+01 -6.65022398e+00 -6.65022398e+00
 -6.65022398e+00 -1.16259650e+00 -2.35755625e-01 -2.35755625e-01
 -2.35755625e-01  1.27735859e+02  1.18662089e+03  1.02478016e+04]
E1 = -706.2154791818347  E_coul = 198.94437111405674
cycle= 2 E= -507.271108067778  delta_E= -0.00023  |g|= 0.00334  |ddm|= 0.00745
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00348818
diis-c [-1.14645336e-05 -2.52321468e-03  1.00252321e+00]
  HOMO = -0.235841706593112  LUMO = 127.733332363302
  mo_energy =
[-1.20095309e+02 -1.22444591e+01 -6.65115619e+00 -6.65115619e+00
 -6.65115619e+00 -1.16262905e+00 -2.35841707e-01 -2.35841707e-01
 -2.35841707e-01  1.27733332e+02  1.18661285e+03  1.02477894e+04]
E1 = -706.2152946792594  E_coul = 198.94418657328018
cycle= 3 E= -507.271108105979  delta_E= -3.82e-08  |g|= 4.74e-05  |ddm|= 8.4e-05
    CPU time for cycle= 3      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=6.28761e-05
diis-c [-8.98025550e-11  4.51134063e-05 -1.87450634e-02  1.01869995e+00]
  HOMO = -0.235842377104809  LUMO = 127.733316598588
  mo_energy =
[-1.20095347e+02 -1.22444640e+01 -6.65116491e+00 -6.65116491e+00
 -6.65116491e+00 -1.16262923e+00 -2.35842377e-01 -2.35842377e-01
 -2.35842377e-01  1.27733317e+02  1.18661281e+03  1.02477894e+04]
E1 = -706.2152927703348  E_coul = 198.94418466434917
cycle= 4 E= -507.271108105986  delta_E= -6.42e-12  |g|= 1.11e-07  |ddm|= 9.84e-07
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.2152927703348  E_coul = 198.94418466434917
  HOMO = -0.235842373826499  LUMO = 127.733316724128
  mo_energy =
[-1.20095347e+02 -1.22444640e+01 -6.65116488e+00 -6.65116488e+00
 -6.65116488e+00 -1.16262923e+00 -2.35842374e-01 -2.35842374e-01
 -2.35842374e-01  1.27733317e+02  1.18661282e+03  1.02477894e+04]
E1 = -706.2152927774663  E_coul = 198.94418467147992
Extra cycle  E= -507.271108105986  delta_E= -7.39e-13  |g|= 1.43e-09  |ddm|= 2.83e-09
    CPU time for scf_cycle      0.10 sec, wall time      0.11 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 20.47968509770443
E1 = -706.2152927774663  E_coul = 198.94418467147992
init E= -507.271108105986
    CPU time for initialize scf      0.06 sec, wall time      0.06 sec
  HOMO = -0.235842373796787  LUMO = 127.733316725225
  mo_energy =
[-1.20095347e+02 -1.22444640e+01 -6.65116488e+00 -6.65116488e+00
 -6.65116488e+00 -1.16262923e+00 -2.35842374e-01 -2.35842374e-01
 -2.35842374e-01  1.27733317e+02  1.18661282e+03  1.02477894e+04]
E1 = -706.2152927775452  E_coul = 198.94418467155936
cycle= 1 E= -507.271108105986  delta_E= 5.68e-13  |g|= 2.21e-11  |ddm|= 3.42e-11
    CPU time for cycle= 1      0.02 sec, wall time      0.02 sec
E1 = -706.2152927775452  E_coul = 198.94418467155936
  HOMO = -0.235842373796463  LUMO = 127.733316725236
  mo_energy =
[-1.20095347e+02 -1.22444640e+01 -6.65116488e+00 -6.65116488e+00
 -6.65116488e+00 -1.16262923e+00 -2.35842374e-01 -2.35842374e-01
 -2.35842374e-01  1.27733317e+02  1.18661282e+03  1.02477894e+04]
E1 = -706.2152927775462  E_coul = 198.94418467156044
Extra cycle  E= -507.271108105986  delta_E= 5.68e-14  |g|= 1.16e-12  |ddm|= 4.8e-13
    CPU time for scf_cycle      0.14 sec, wall time      0.14 sec
exp = [6.34765394e+03 8.22940452e+02 1.72085179e+02 4.49545844e+01
 4.74933322e+00 3.92078251e-01 8.59541931e+00 4.90727641e-01]
grad_E = [ 3.50833593e-05  6.61557724e-06 -3.88064301e-05  4.03620725e-05
 -1.51142365e-03  5.41128173e-04 -6.18037705e-04  3.93421493e-03]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((8, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([1.5735952963858392e+03,2.3761303919145971e+02,5.2332977870138201e+01,4.7281081235122091e+00,3.9325830426169639e-01,8.5907170030661746e+00,4.9039633283239870e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "6s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:48:39 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  6347.40246999        1
[INPUT] 0    0    [1    /1   ]  822.83502345         1
[INPUT] 0    0    [1    /1   ]  172.03398193         1
[INPUT] 0    0    [1    /1   ]  44.9466114514        1
[INPUT] 0    0    [1    /1   ]  4.7482394813         1
[INPUT] 0    0    [1    /1   ]  0.392085976608       1
[INPUT] 1    0    [1    /1   ]  8.59509765473        1
[INPUT] 1    0    [1    /1   ]  0.490792422424       1

nuclear repulsion = 0
number of shells = 8
number of NR pGTOs = 12
number of NR cGTOs = 12
basis = {'Ar': [[0, [6347.402469994325, 1.0]], [0, [822.8350234498977, 1.0]], [0, [172.0339819303731, 1.0]], [0, [44.94661145137246, 1.0]], [0, [4.748239481297159, 1.0]], [0, [0.39208597660758715, 1.0]], [1, [8.59509765472804, 1.0]], [1, [0.4907924224237641, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [6347.40246999]
bas 1, expnt(s) = [822.83502345]
bas 2, expnt(s) = [172.03398193]
bas 3, expnt(s) = [44.94661145]
bas 4, expnt(s) = [4.74823948]
bas 5, expnt(s) = [0.39208598]
bas 6, expnt(s) = [8.59509765]
bas 7, expnt(s) = [0.49079242]
CPU time:       187.90
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  1  1  1  0 36 37  0]
 [ 0  1  1  1  0 38 39  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 6.34740247e+03 1.79664408e+03 8.22835023e+02 3.88150009e+02
 1.72033982e+02 1.20012285e+02 4.49466115e+01 4.38568809e+01
 4.74823948e+00 8.12670482e+00 3.92085977e-01 1.25184629e+00
 8.59509765e+00 4.29336599e+01 4.90792422e-01 1.19841353e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319053537412515
cond(S) = 20.478908912326965
E1 = -688.763394844053  E_coul = 184.9162139391172
init E= -503.847180904936
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.681007808746669  LUMO = 126.317207357783
  mo_energy =
[-1.21475118e+02 -1.32743415e+01 -7.62067036e+00 -7.62067036e+00
 -7.62067036e+00 -1.65110280e+00 -6.81007809e-01 -6.81007809e-01
 -6.81007809e-01  1.26317207e+02  1.18499313e+03  1.02458065e+04]
E1 = -706.2318818647534  E_coul = 198.96099956311537
cycle= 1 E= -507.270882301638  delta_E= -3.42  |g|= 0.288  |ddm|= 0.299
    CPU time for cycle= 1      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.333131
diis-c [-0.11097649  1.        ]
  HOMO = -0.235627714460378  LUMO = 127.684329894262
  mo_energy =
[-1.20090734e+02 -1.22438759e+01 -6.65035590e+00 -6.65035590e+00
 -6.65035590e+00 -1.16249450e+00 -2.35627714e-01 -2.35627714e-01
 -2.35627714e-01  1.27684330e+02  1.18633358e+03  1.02469521e+04]
E1 = -706.214434470404  E_coul = 198.9433217581955
cycle= 2 E= -507.271112712208  delta_E= -0.00023  |g|= 0.00334  |ddm|= 0.00746
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00349239
diis-c [-1.14914987e-05 -2.52745905e-03  1.00252746e+00]
  HOMO = -0.235713908578607  LUMO = 127.681801139429
  mo_energy =
[-1.20095899e+02 -1.22444819e+01 -6.65128922e+00 -6.65128922e+00
 -6.65128922e+00 -1.16252708e+00 -2.35713909e-01 -2.35713909e-01
 -2.35713909e-01  1.27681801e+02  1.18632554e+03  1.02469399e+04]
E1 = -706.2142497101801  E_coul = 198.94313695967358
cycle= 3 E= -507.271112750507  delta_E= -3.83e-08  |g|= 4.75e-05  |ddm|= 8.42e-05
    CPU time for cycle= 3      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=6.29468e-05
diis-c [-8.99114069e-11  4.51251169e-05 -1.87442700e-02  1.01869914e+00]
  HOMO = -0.235714579932357  LUMO = 127.681785364748
  mo_energy =
[-1.20095938e+02 -1.22444868e+01 -6.65129796e+00 -6.65129796e+00
 -6.65129796e+00 -1.16252726e+00 -2.35714580e-01 -2.35714580e-01
 -2.35714580e-01  1.27681785e+02  1.18632550e+03  1.02469398e+04]
E1 = -706.2142477985369  E_coul = 198.94313504802398
cycle= 4 E= -507.271112750513  delta_E= -6.42e-12  |g|= 1.11e-07  |ddm|= 9.85e-07
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.2142477985369  E_coul = 198.94313504802398
  HOMO = -0.235714576648644  LUMO = 127.681785490408
  mo_energy =
[-1.20095937e+02 -1.22444868e+01 -6.65129792e+00 -6.65129792e+00
 -6.65129792e+00 -1.16252726e+00 -2.35714577e-01 -2.35714577e-01
 -2.35714577e-01  1.27681785e+02  1.18632550e+03  1.02469398e+04]
E1 = -706.2142478056785  E_coul = 198.9431350551655
Extra cycle  E= -507.271112750513  delta_E= -5.68e-14  |g|= 1.44e-09  |ddm|= 2.83e-09
    CPU time for scf_cycle      0.10 sec, wall time      0.10 sec
exp = [6.34740247e+03 8.22835023e+02 1.72033982e+02 4.49466115e+01
 4.74823948e+00 3.92085977e-01 8.59509765e+00 4.90792422e-01]
E = -507.271112750513
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((8, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([1.5735952963858392e+03,2.3761303919145971e+02,5.2332977870138201e+01,4.7281081235122091e+00,3.9325830426169639e-01,8.5907170030661746e+00,4.9039633283239870e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "6s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:48:40 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  6347.40246999        1
[INPUT] 0    0    [1    /1   ]  822.83502345         1
[INPUT] 0    0    [1    /1   ]  172.03398193         1
[INPUT] 0    0    [1    /1   ]  44.9466114514        1
[INPUT] 0    0    [1    /1   ]  4.7482394813         1
[INPUT] 0    0    [1    /1   ]  0.392085976608       1
[INPUT] 1    0    [1    /1   ]  8.59509765473        1
[INPUT] 1    0    [1    /1   ]  0.490792422424       1

nuclear repulsion = 0
number of shells = 8
number of NR pGTOs = 12
number of NR cGTOs = 12
basis = {'Ar': [[0, [6347.402469994325, 1.0]], [0, [822.8350234498977, 1.0]], [0, [172.0339819303731, 1.0]], [0, [44.94661145137246, 1.0]], [0, [4.748239481297159, 1.0]], [0, [0.39208597660758715, 1.0]], [1, [8.59509765472804, 1.0]], [1, [0.4907924224237641, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [6347.40246999]
bas 1, expnt(s) = [822.83502345]
bas 2, expnt(s) = [172.03398193]
bas 3, expnt(s) = [44.94661145]
bas 4, expnt(s) = [4.74823948]
bas 5, expnt(s) = [0.39208598]
bas 6, expnt(s) = [8.59509765]
bas 7, expnt(s) = [0.49079242]
CPU time:       188.65
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  1  1  1  0 36 37  0]
 [ 0  1  1  1  0 38 39  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 6.34740247e+03 1.79664408e+03 8.22835023e+02 3.88150009e+02
 1.72033982e+02 1.20012285e+02 4.49466115e+01 4.38568809e+01
 4.74823948e+00 8.12670482e+00 3.92085977e-01 1.25184629e+00
 8.59509765e+00 4.29336599e+01 4.90792422e-01 1.19841353e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319053537412515
cond(S) = 20.478908912326965
E1 = -688.763394844053  E_coul = 184.9162139391172
init E= -503.847180904936
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.681007808746669  LUMO = 126.317207357783
  mo_energy =
[-1.21475118e+02 -1.32743415e+01 -7.62067036e+00 -7.62067036e+00
 -7.62067036e+00 -1.65110280e+00 -6.81007809e-01 -6.81007809e-01
 -6.81007809e-01  1.26317207e+02  1.18499313e+03  1.02458065e+04]
E1 = -706.2318818647534  E_coul = 198.96099956311537
cycle= 1 E= -507.270882301638  delta_E= -3.42  |g|= 0.288  |ddm|= 0.299
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.333131
diis-c [-0.11097649  1.        ]
  HOMO = -0.235627714460378  LUMO = 127.684329894262
  mo_energy =
[-1.20090734e+02 -1.22438759e+01 -6.65035590e+00 -6.65035590e+00
 -6.65035590e+00 -1.16249450e+00 -2.35627714e-01 -2.35627714e-01
 -2.35627714e-01  1.27684330e+02  1.18633358e+03  1.02469521e+04]
E1 = -706.214434470404  E_coul = 198.9433217581955
cycle= 2 E= -507.271112712208  delta_E= -0.00023  |g|= 0.00334  |ddm|= 0.00746
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00349239
diis-c [-1.14914987e-05 -2.52745905e-03  1.00252746e+00]
  HOMO = -0.235713908578607  LUMO = 127.681801139429
  mo_energy =
[-1.20095899e+02 -1.22444819e+01 -6.65128922e+00 -6.65128922e+00
 -6.65128922e+00 -1.16252708e+00 -2.35713909e-01 -2.35713909e-01
 -2.35713909e-01  1.27681801e+02  1.18632554e+03  1.02469399e+04]
E1 = -706.2142497101801  E_coul = 198.94313695967358
cycle= 3 E= -507.271112750507  delta_E= -3.83e-08  |g|= 4.75e-05  |ddm|= 8.42e-05
    CPU time for cycle= 3      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=6.29468e-05
diis-c [-8.99114069e-11  4.51251169e-05 -1.87442700e-02  1.01869914e+00]
  HOMO = -0.235714579932357  LUMO = 127.681785364748
  mo_energy =
[-1.20095938e+02 -1.22444868e+01 -6.65129796e+00 -6.65129796e+00
 -6.65129796e+00 -1.16252726e+00 -2.35714580e-01 -2.35714580e-01
 -2.35714580e-01  1.27681785e+02  1.18632550e+03  1.02469398e+04]
E1 = -706.2142477985369  E_coul = 198.94313504802398
cycle= 4 E= -507.271112750513  delta_E= -6.42e-12  |g|= 1.11e-07  |ddm|= 9.85e-07
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.2142477985369  E_coul = 198.94313504802398
  HOMO = -0.235714576648644  LUMO = 127.681785490408
  mo_energy =
[-1.20095937e+02 -1.22444868e+01 -6.65129792e+00 -6.65129792e+00
 -6.65129792e+00 -1.16252726e+00 -2.35714577e-01 -2.35714577e-01
 -2.35714577e-01  1.27681785e+02  1.18632550e+03  1.02469398e+04]
E1 = -706.2142478056785  E_coul = 198.9431350551655
Extra cycle  E= -507.271112750513  delta_E= -5.68e-14  |g|= 1.44e-09  |ddm|= 2.83e-09
    CPU time for scf_cycle      0.10 sec, wall time      0.10 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 20.478908912326965
E1 = -706.2142478056785  E_coul = 198.9431350551655
init E= -507.271112750513
    CPU time for initialize scf      0.06 sec, wall time      0.06 sec
  HOMO = -0.235714576618881  LUMO = 127.681785491507
  mo_energy =
[-1.20095937e+02 -1.22444868e+01 -6.65129792e+00 -6.65129792e+00
 -6.65129792e+00 -1.16252726e+00 -2.35714577e-01 -2.35714577e-01
 -2.35714577e-01  1.27681785e+02  1.18632550e+03  1.02469398e+04]
E1 = -706.2142478057584  E_coul = 198.94313505524528
cycle= 1 E= -507.271112750513  delta_E= -1.14e-13  |g|= 2.13e-11  |ddm|= 3.43e-11
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -706.2142478057584  E_coul = 198.94313505524528
  HOMO = -0.235714576618544  LUMO = 127.681785491517
  mo_energy =
[-1.20095937e+02 -1.22444868e+01 -6.65129792e+00 -6.65129792e+00
 -6.65129792e+00 -1.16252726e+00 -2.35714577e-01 -2.35714577e-01
 -2.35714577e-01  1.27681785e+02  1.18632550e+03  1.02469398e+04]
E1 = -706.2142478057588  E_coul = 198.94313505524605
Extra cycle  E= -507.271112750513  delta_E= 3.98e-13  |g|= 1.12e-12  |ddm|= 4.85e-13
    CPU time for scf_cycle      0.13 sec, wall time      0.13 sec
exp = [6.34740247e+03 8.22835023e+02 1.72033982e+02 4.49466115e+01
 4.74823948e+00 3.92085977e-01 8.59509765e+00 4.90792422e-01]
grad_E = [ 3.50682908e-05  9.32500710e-06 -6.43833370e-05  6.67394390e-05
 -2.50081852e-03  8.94811921e-04 -1.02294966e-03  6.50699220e-03]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((8, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([1.5735952963858392e+03,2.3761303919145971e+02,5.2332977870138201e+01,4.7281081235122091e+00,3.9325830426169639e-01,8.5907170030661746e+00,4.9039633283239870e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "6s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:48:44 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  6346.73438029        1
[INPUT] 0    0    [1    /1   ]  822.647960159        1
[INPUT] 0    0    [1    /1   ]  171.949573259        1
[INPUT] 0    0    [1    /1   ]  44.9335159267        1
[INPUT] 0    0    [1    /1   ]  4.74647594376        1
[INPUT] 0    0    [1    /1   ]  0.392098434023       1
[INPUT] 1    0    [1    /1   ]  8.59457902151        1
[INPUT] 1    0    [1    /1   ]  0.490896946095       1

nuclear repulsion = 0
number of shells = 8
number of NR pGTOs = 12
number of NR cGTOs = 12
basis = {'Ar': [[0, [6346.734380290553, 1.0]], [0, [822.6479601588242, 1.0]], [0, [171.94957325934885, 1.0]], [0, [44.933515926737925, 1.0]], [0, [4.7464759437572, 1.0]], [0, [0.3920984340228744, 1.0]], [1, [8.5945790215142, 1.0]], [1, [0.4908969460953497, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [6346.73438029]
bas 1, expnt(s) = [822.64796016]
bas 2, expnt(s) = [171.94957326]
bas 3, expnt(s) = [44.93351593]
bas 4, expnt(s) = [4.74647594]
bas 5, expnt(s) = [0.39209843]
bas 6, expnt(s) = [8.59457902]
bas 7, expnt(s) = [0.49089695]
CPU time:       191.96
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  1  1  1  0 36 37  0]
 [ 0  1  1  1  0 38 39  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 6.34673438e+03 1.79650225e+03 8.22647960e+02 3.88083826e+02
 1.71949573e+02 1.19968119e+02 4.49335159e+01 4.38472970e+01
 4.74647594e+00 8.12444097e+00 3.92098434e-01 1.25187612e+00
 8.59457902e+00 4.29304216e+01 4.90896946e-01 1.19873257e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.318948237580663
cond(S) = 20.47810737594519
E1 = -688.7623500446374  E_coul = 184.9151085181596
init E= -503.847241526478
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.680875074503142  LUMO = 126.232796553141
  mo_energy =
[-1.21475696e+02 -1.32743481e+01 -7.62083937e+00 -7.62083937e+00
 -7.62083937e+00 -1.65096462e+00 -6.80875075e-01 -6.80875075e-01
 -6.80875075e-01  1.26232797e+02  1.18450764e+03  1.02440493e+04]
E1 = -706.2302297924833  E_coul = 198.9593360052029
cycle= 1 E= -507.27089378728  delta_E= -3.42  |g|= 0.289  |ddm|= 0.299
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.333143
diis-c [-0.11098428  1.        ]
  HOMO = -0.235421310896112  LUMO = 127.599704239685
  mo_energy =
[-1.20091683e+02 -1.22439105e+01 -6.65056868e+00 -6.65056868e+00
 -6.65056868e+00 -1.16232983e+00 -2.35421311e-01 -2.35421311e-01
 -2.35421311e-01  1.27599704e+02  1.18584755e+03  1.02451940e+04]
E1 = -706.2127537888293  E_coul = 198.94162895556437
cycle= 2 E= -507.271124833265  delta_E= -0.000231  |g|= 0.00335  |ddm|= 0.00747
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00349922
diis-c [-1.15353818e-05 -2.53431488e-03  1.00253431e+00]
  HOMO = -0.235507688029433  LUMO = 127.597172641788
  mo_energy =
[-1.20096856e+02 -1.22445174e+01 -6.65150381e+00 -6.65150381e+00
 -6.65150381e+00 -1.16236246e+00 -2.35507688e-01 -2.35507688e-01
 -2.35507688e-01  1.27597173e+02  1.18583950e+03  1.02451818e+04]
E1 = -706.2125686071215  E_coul = 198.94144373540115
cycle= 3 E= -507.27112487172  delta_E= -3.85e-08  |g|= 4.75e-05  |ddm|= 8.43e-05
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=6.30622e-05
diis-c [-9.00905963e-11  4.51443948e-05 -1.87431335e-02  1.01869799e+00]
  HOMO = -0.23550836076465  LUMO = 127.59715685054
  mo_energy =
[-1.20096894e+02 -1.22445224e+01 -6.65151256e+00 -6.65151256e+00
 -6.65151256e+00 -1.16236264e+00 -2.35508361e-01 -2.35508361e-01
 -2.35508361e-01  1.27597157e+02  1.18583946e+03  1.02451818e+04]
E1 = -706.2125666910122  E_coul = 198.94144181928482
cycle= 4 E= -507.271124871727  delta_E= -6.99e-12  |g|= 1.11e-07  |ddm|= 9.87e-07
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.2125666910122  E_coul = 198.94144181928482
  HOMO = -0.235508357472058  LUMO = 127.597156976394
  mo_energy =
[-1.20096894e+02 -1.22445224e+01 -6.65151253e+00 -6.65151253e+00
 -6.65151253e+00 -1.16236264e+00 -2.35508357e-01 -2.35508357e-01
 -2.35508357e-01  1.27597157e+02  1.18583946e+03  1.02451818e+04]
E1 = -706.212566698172  E_coul = 198.94144182644467
Extra cycle  E= -507.271124871727  delta_E=    0  |g|= 1.44e-09  |ddm|= 2.84e-09
    CPU time for scf_cycle      0.10 sec, wall time      0.10 sec
exp = [6.34673438e+03 8.22647960e+02 1.71949573e+02 4.49335159e+01
 4.74647594e+00 3.92098434e-01 8.59457902e+00 4.90896946e-01]
E = -507.27112487172735
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((8, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([1.5735952963858392e+03,2.3761303919145971e+02,5.2332977870138201e+01,4.7281081235122091e+00,3.9325830426169639e-01,8.5907170030661746e+00,4.9039633283239870e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "6s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:48:44 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  6346.73438029        1
[INPUT] 0    0    [1    /1   ]  822.647960159        1
[INPUT] 0    0    [1    /1   ]  171.949573259        1
[INPUT] 0    0    [1    /1   ]  44.9335159267        1
[INPUT] 0    0    [1    /1   ]  4.74647594376        1
[INPUT] 0    0    [1    /1   ]  0.392098434023       1
[INPUT] 1    0    [1    /1   ]  8.59457902151        1
[INPUT] 1    0    [1    /1   ]  0.490896946095       1

nuclear repulsion = 0
number of shells = 8
number of NR pGTOs = 12
number of NR cGTOs = 12
basis = {'Ar': [[0, [6346.734380290553, 1.0]], [0, [822.6479601588242, 1.0]], [0, [171.94957325934885, 1.0]], [0, [44.933515926737925, 1.0]], [0, [4.7464759437572, 1.0]], [0, [0.3920984340228744, 1.0]], [1, [8.5945790215142, 1.0]], [1, [0.4908969460953497, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [6346.73438029]
bas 1, expnt(s) = [822.64796016]
bas 2, expnt(s) = [171.94957326]
bas 3, expnt(s) = [44.93351593]
bas 4, expnt(s) = [4.74647594]
bas 5, expnt(s) = [0.39209843]
bas 6, expnt(s) = [8.59457902]
bas 7, expnt(s) = [0.49089695]
CPU time:       192.72
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  1  1  1  0 36 37  0]
 [ 0  1  1  1  0 38 39  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 6.34673438e+03 1.79650225e+03 8.22647960e+02 3.88083826e+02
 1.71949573e+02 1.19968119e+02 4.49335159e+01 4.38472970e+01
 4.74647594e+00 8.12444097e+00 3.92098434e-01 1.25187612e+00
 8.59457902e+00 4.29304216e+01 4.90896946e-01 1.19873257e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.318948237580663
cond(S) = 20.47810737594519
E1 = -688.7623500446374  E_coul = 184.9151085181596
init E= -503.847241526478
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.680875074503142  LUMO = 126.232796553141
  mo_energy =
[-1.21475696e+02 -1.32743481e+01 -7.62083937e+00 -7.62083937e+00
 -7.62083937e+00 -1.65096462e+00 -6.80875075e-01 -6.80875075e-01
 -6.80875075e-01  1.26232797e+02  1.18450764e+03  1.02440493e+04]
E1 = -706.2302297924833  E_coul = 198.9593360052029
cycle= 1 E= -507.27089378728  delta_E= -3.42  |g|= 0.289  |ddm|= 0.299
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.333143
diis-c [-0.11098428  1.        ]
  HOMO = -0.235421310896112  LUMO = 127.599704239685
  mo_energy =
[-1.20091683e+02 -1.22439105e+01 -6.65056868e+00 -6.65056868e+00
 -6.65056868e+00 -1.16232983e+00 -2.35421311e-01 -2.35421311e-01
 -2.35421311e-01  1.27599704e+02  1.18584755e+03  1.02451940e+04]
E1 = -706.2127537888293  E_coul = 198.94162895556437
cycle= 2 E= -507.271124833265  delta_E= -0.000231  |g|= 0.00335  |ddm|= 0.00747
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00349922
diis-c [-1.15353818e-05 -2.53431488e-03  1.00253431e+00]
  HOMO = -0.235507688029433  LUMO = 127.597172641788
  mo_energy =
[-1.20096856e+02 -1.22445174e+01 -6.65150381e+00 -6.65150381e+00
 -6.65150381e+00 -1.16236246e+00 -2.35507688e-01 -2.35507688e-01
 -2.35507688e-01  1.27597173e+02  1.18583950e+03  1.02451818e+04]
E1 = -706.2125686071215  E_coul = 198.94144373540115
cycle= 3 E= -507.27112487172  delta_E= -3.85e-08  |g|= 4.75e-05  |ddm|= 8.43e-05
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=6.30622e-05
diis-c [-9.00905963e-11  4.51443948e-05 -1.87431335e-02  1.01869799e+00]
  HOMO = -0.23550836076465  LUMO = 127.59715685054
  mo_energy =
[-1.20096894e+02 -1.22445224e+01 -6.65151256e+00 -6.65151256e+00
 -6.65151256e+00 -1.16236264e+00 -2.35508361e-01 -2.35508361e-01
 -2.35508361e-01  1.27597157e+02  1.18583946e+03  1.02451818e+04]
E1 = -706.2125666910122  E_coul = 198.94144181928482
cycle= 4 E= -507.271124871727  delta_E= -6.99e-12  |g|= 1.11e-07  |ddm|= 9.87e-07
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.2125666910122  E_coul = 198.94144181928482
  HOMO = -0.235508357472058  LUMO = 127.597156976394
  mo_energy =
[-1.20096894e+02 -1.22445224e+01 -6.65151253e+00 -6.65151253e+00
 -6.65151253e+00 -1.16236264e+00 -2.35508357e-01 -2.35508357e-01
 -2.35508357e-01  1.27597157e+02  1.18583946e+03  1.02451818e+04]
E1 = -706.212566698172  E_coul = 198.94144182644467
Extra cycle  E= -507.271124871727  delta_E=    0  |g|= 1.44e-09  |ddm|= 2.84e-09
    CPU time for scf_cycle      0.10 sec, wall time      0.10 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 20.47810737594519
E1 = -706.212566698172  E_coul = 198.94144182644467
init E= -507.271124871727
    CPU time for initialize scf      0.06 sec, wall time      0.06 sec
  HOMO = -0.235508357442197  LUMO = 127.597156977496
  mo_energy =
[-1.20096894e+02 -1.22445224e+01 -6.65151252e+00 -6.65151252e+00
 -6.65151252e+00 -1.16236264e+00 -2.35508357e-01 -2.35508357e-01
 -2.35508357e-01  1.27597157e+02  1.18583946e+03  1.02451818e+04]
E1 = -706.2125666982516  E_coul = 198.94144182652437
cycle= 1 E= -507.271124871727  delta_E= 1.14e-13  |g|= 2.18e-11  |ddm|= 3.44e-11
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -706.2125666982516  E_coul = 198.94144182652437
  HOMO = -0.235508357441865  LUMO = 127.597156977507
  mo_energy =
[-1.20096894e+02 -1.22445224e+01 -6.65151252e+00 -6.65151252e+00
 -6.65151252e+00 -1.16236264e+00 -2.35508357e-01 -2.35508357e-01
 -2.35508357e-01  1.27597157e+02  1.18583946e+03  1.02451818e+04]
E1 = -706.2125666982529  E_coul = 198.94144182652542
Extra cycle  E= -507.271124871727  delta_E= -2.27e-13  |g|= 3.38e-12  |ddm|= 4.79e-13
    CPU time for scf_cycle      0.12 sec, wall time      0.13 sec
exp = [6.34673438e+03 8.22647960e+02 1.71949573e+02 4.49335159e+01
 4.74647594e+00 3.92098434e-01 8.59457902e+00 4.90896946e-01]
grad_E = [ 3.50417988e-05  1.36954694e-05 -1.05640917e-04  1.09291302e-04
 -4.09675802e-03  1.46531922e-03 -1.67609439e-03  1.06570204e-02]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((8, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([1.5735952963858392e+03,2.3761303919145971e+02,5.2332977870138201e+01,4.7281081235122091e+00,3.9325830426169639e-01,8.5907170030661746e+00,4.9039633283239870e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "6s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:48:48 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  6344.96415803        1
[INPUT] 0    0    [1    /1   ]  822.300215043        1
[INPUT] 0    0    [1    /1   ]  171.807986971        1
[INPUT] 0    0    [1    /1   ]  44.9116763134        1
[INPUT] 0    0    [1    /1   ]  4.74361976772        1
[INPUT] 0    0    [1    /1   ]  0.392118609859       1
[INPUT] 1    0    [1    /1   ]  8.59373908634        1
[INPUT] 1    0    [1    /1   ]  0.491066414162       1

nuclear repulsion = 0
number of shells = 8
number of NR pGTOs = 12
number of NR cGTOs = 12
basis = {'Ar': [[0, [6344.964158027073, 1.0]], [0, [822.3002150431196, 1.0]], [0, [171.80798697129205, 1.0]], [0, [44.91167631339697, 1.0]], [0, [4.7436197677160825, 1.0]], [0, [0.39211860985900826, 1.0]], [1, [8.593739086341074, 1.0]], [1, [0.49106641416237606, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [6344.96415803]
bas 1, expnt(s) = [822.30021504]
bas 2, expnt(s) = [171.80798697]
bas 3, expnt(s) = [44.91167631]
bas 4, expnt(s) = [4.74361977]
bas 5, expnt(s) = [0.39211861]
bas 6, expnt(s) = [8.59373909]
bas 7, expnt(s) = [0.49106641]
CPU time:       196.05
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  1  1  1  0 36 37  0]
 [ 0  1  1  1  0 38 39  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 6.34496416e+03 1.79612643e+03 8.22300215e+02 3.87960783e+02
 1.71807987e+02 1.19894024e+02 4.49116763e+01 4.38313123e+01
 4.74361977e+00 8.12077405e+00 3.92118610e-01 1.25192443e+00
 8.59373909e+00 4.29251773e+01 4.91066414e-01 1.19924988e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.318776845347998
cond(S) = 20.477988904623174
E1 = -688.7606789269217  E_coul = 184.9133097971965
init E= -503.847369129725
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.6806601718035  LUMO = 126.09204956213
  mo_energy =
[-1.21476642e+02 -1.32743558e+01 -7.62111380e+00 -7.62111380e+00
 -7.62111380e+00 -1.65074074e+00 -6.80660172e-01 -6.80660172e-01
 -6.80660172e-01  1.26092050e+02  1.18366159e+03  1.02401860e+04]
E1 = -706.2275652009808  E_coul = 198.95664068682692
cycle= 1 E= -507.270924514154  delta_E= -3.42  |g|= 0.289  |ddm|=  0.3
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.333158
diis-c [-0.1109943  1.       ]
  HOMO = -0.235086600980696  LUMO = 127.458607569427
  mo_energy =
[-1.20093231e+02 -1.22439631e+01 -6.65091346e+00 -6.65091346e+00
 -6.65091346e+00 -1.16206258e+00 -2.35086601e-01 -2.35086601e-01
 -2.35086601e-01  1.27458608e+02  1.18500064e+03  1.02413295e+04]
E1 = -706.210041872362  E_coul = 198.93888526726695
cycle= 2 E= -507.271156605095  delta_E= -0.000232  |g|= 0.00336  |ddm|= 0.00749
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00351041
diis-c [-1.16075252e-05 -2.54545103e-03  1.00254545e+00]
  HOMO = -0.235173280621212  LUMO = 127.456071283671
  mo_energy =
[-1.20098417e+02 -1.22445718e+01 -6.65185158e+00 -6.65185158e+00
 -6.65185158e+00 -1.16209528e+00 -2.35173281e-01 -2.35173281e-01
 -2.35173281e-01  1.27456071e+02  1.18499258e+03  1.02413172e+04]
E1 = -706.2098559920292  E_coul = 198.93869934821797
cycle= 3 E= -507.271156643811  delta_E= -3.87e-08  |g|= 4.77e-05  |ddm|= 8.47e-05
    CPU time for cycle= 3      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=6.32528e-05
diis-c [-9.03899690e-11  4.51766505e-05 -1.87416651e-02  1.01869649e+00]
  HOMO = -0.235173955656529  LUMO = 127.456055464285
  mo_energy =
[-1.20098455e+02 -1.22445767e+01 -6.65186036e+00 -6.65186036e+00
 -6.65186036e+00 -1.16209546e+00 -2.35173956e-01 -2.35173956e-01
 -2.35173956e-01  1.27456055e+02  1.18499254e+03  1.02413172e+04]
E1 = -706.2098540684647  E_coul = 198.93869742464656
cycle= 4 E= -507.271156643818  delta_E= -6.82e-12  |g|= 1.11e-07  |ddm|= 9.91e-07
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.2098540684647  E_coul = 198.93869742464656
  HOMO = -0.235173952349112  LUMO = 127.456055590464
  mo_energy =
[-1.20098455e+02 -1.22445767e+01 -6.65186032e+00 -6.65186032e+00
 -6.65186032e+00 -1.16209546e+00 -2.35173952e-01 -2.35173952e-01
 -2.35173952e-01  1.27456056e+02  1.18499254e+03  1.02413172e+04]
E1 = -706.2098540756546  E_coul = 198.93869743183672
Extra cycle  E= -507.271156643818  delta_E= 2.84e-13  |g|= 1.44e-09  |ddm|= 2.85e-09
    CPU time for scf_cycle      0.10 sec, wall time      0.10 sec
exp = [6.34496416e+03 8.22300215e+02 1.71807987e+02 4.49116763e+01
 4.74361977e+00 3.92118610e-01 8.59373909e+00 4.91066414e-01]
E = -507.27115664381785
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((8, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([1.5735952963858392e+03,2.3761303919145971e+02,5.2332977870138201e+01,4.7281081235122091e+00,3.9325830426169639e-01,8.5907170030661746e+00,4.9039633283239870e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "6s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:48:48 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  6344.96415803        1
[INPUT] 0    0    [1    /1   ]  822.300215043        1
[INPUT] 0    0    [1    /1   ]  171.807986971        1
[INPUT] 0    0    [1    /1   ]  44.9116763134        1
[INPUT] 0    0    [1    /1   ]  4.74361976772        1
[INPUT] 0    0    [1    /1   ]  0.392118609859       1
[INPUT] 1    0    [1    /1   ]  8.59373908634        1
[INPUT] 1    0    [1    /1   ]  0.491066414162       1

nuclear repulsion = 0
number of shells = 8
number of NR pGTOs = 12
number of NR cGTOs = 12
basis = {'Ar': [[0, [6344.964158027073, 1.0]], [0, [822.3002150431196, 1.0]], [0, [171.80798697129205, 1.0]], [0, [44.91167631339697, 1.0]], [0, [4.7436197677160825, 1.0]], [0, [0.39211860985900826, 1.0]], [1, [8.593739086341074, 1.0]], [1, [0.49106641416237606, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [6344.96415803]
bas 1, expnt(s) = [822.30021504]
bas 2, expnt(s) = [171.80798697]
bas 3, expnt(s) = [44.91167631]
bas 4, expnt(s) = [4.74361977]
bas 5, expnt(s) = [0.39211861]
bas 6, expnt(s) = [8.59373909]
bas 7, expnt(s) = [0.49106641]
CPU time:       196.82
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  1  1  1  0 36 37  0]
 [ 0  1  1  1  0 38 39  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 6.34496416e+03 1.79612643e+03 8.22300215e+02 3.87960783e+02
 1.71807987e+02 1.19894024e+02 4.49116763e+01 4.38313123e+01
 4.74361977e+00 8.12077405e+00 3.92118610e-01 1.25192443e+00
 8.59373909e+00 4.29251773e+01 4.91066414e-01 1.19924988e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.318776845347998
cond(S) = 20.477988904623174
E1 = -688.7606789269217  E_coul = 184.9133097971965
init E= -503.847369129725
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.6806601718035  LUMO = 126.09204956213
  mo_energy =
[-1.21476642e+02 -1.32743558e+01 -7.62111380e+00 -7.62111380e+00
 -7.62111380e+00 -1.65074074e+00 -6.80660172e-01 -6.80660172e-01
 -6.80660172e-01  1.26092050e+02  1.18366159e+03  1.02401860e+04]
E1 = -706.2275652009808  E_coul = 198.95664068682692
cycle= 1 E= -507.270924514154  delta_E= -3.42  |g|= 0.289  |ddm|=  0.3
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.333158
diis-c [-0.1109943  1.       ]
  HOMO = -0.235086600980696  LUMO = 127.458607569427
  mo_energy =
[-1.20093231e+02 -1.22439631e+01 -6.65091346e+00 -6.65091346e+00
 -6.65091346e+00 -1.16206258e+00 -2.35086601e-01 -2.35086601e-01
 -2.35086601e-01  1.27458608e+02  1.18500064e+03  1.02413295e+04]
E1 = -706.210041872362  E_coul = 198.93888526726695
cycle= 2 E= -507.271156605095  delta_E= -0.000232  |g|= 0.00336  |ddm|= 0.00749
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00351041
diis-c [-1.16075252e-05 -2.54545103e-03  1.00254545e+00]
  HOMO = -0.235173280621212  LUMO = 127.456071283671
  mo_energy =
[-1.20098417e+02 -1.22445718e+01 -6.65185158e+00 -6.65185158e+00
 -6.65185158e+00 -1.16209528e+00 -2.35173281e-01 -2.35173281e-01
 -2.35173281e-01  1.27456071e+02  1.18499258e+03  1.02413172e+04]
E1 = -706.2098559920292  E_coul = 198.93869934821797
cycle= 3 E= -507.271156643811  delta_E= -3.87e-08  |g|= 4.77e-05  |ddm|= 8.47e-05
    CPU time for cycle= 3      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=6.32528e-05
diis-c [-9.03899690e-11  4.51766505e-05 -1.87416651e-02  1.01869649e+00]
  HOMO = -0.235173955656529  LUMO = 127.456055464285
  mo_energy =
[-1.20098455e+02 -1.22445767e+01 -6.65186036e+00 -6.65186036e+00
 -6.65186036e+00 -1.16209546e+00 -2.35173956e-01 -2.35173956e-01
 -2.35173956e-01  1.27456055e+02  1.18499254e+03  1.02413172e+04]
E1 = -706.2098540684647  E_coul = 198.93869742464656
cycle= 4 E= -507.271156643818  delta_E= -6.82e-12  |g|= 1.11e-07  |ddm|= 9.91e-07
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.2098540684647  E_coul = 198.93869742464656
  HOMO = -0.235173952349112  LUMO = 127.456055590464
  mo_energy =
[-1.20098455e+02 -1.22445767e+01 -6.65186032e+00 -6.65186032e+00
 -6.65186032e+00 -1.16209546e+00 -2.35173952e-01 -2.35173952e-01
 -2.35173952e-01  1.27456056e+02  1.18499254e+03  1.02413172e+04]
E1 = -706.2098540756546  E_coul = 198.93869743183672
Extra cycle  E= -507.271156643818  delta_E= 2.84e-13  |g|= 1.44e-09  |ddm|= 2.85e-09
    CPU time for scf_cycle      0.09 sec, wall time      0.10 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 20.477988904623174
E1 = -706.2098540756546  E_coul = 198.93869743183672
init E= -507.271156643818
    CPU time for initialize scf      0.06 sec, wall time      0.06 sec
  HOMO = -0.235173952319092  LUMO = 127.456055591569
  mo_energy =
[-1.20098455e+02 -1.22445767e+01 -6.65186032e+00 -6.65186032e+00
 -6.65186032e+00 -1.16209546e+00 -2.35173952e-01 -2.35173952e-01
 -2.35173952e-01  1.27456056e+02  1.18499254e+03  1.02413172e+04]
E1 = -706.2098540757347  E_coul = 198.9386974319169
cycle= 1 E= -507.271156643818  delta_E= 5.68e-14  |g|= 2.25e-11  |ddm|= 3.46e-11
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -706.2098540757347  E_coul = 198.9386974319169
  HOMO = -0.23517395231876  LUMO = 127.456055591579
  mo_energy =
[-1.20098455e+02 -1.22445767e+01 -6.65186032e+00 -6.65186032e+00
 -6.65186032e+00 -1.16209546e+00 -2.35173952e-01 -2.35173952e-01
 -2.35173952e-01  1.27456056e+02  1.18499254e+03  1.02413172e+04]
E1 = -706.2098540757362  E_coul = 198.93869743191803
Extra cycle  E= -507.271156643818  delta_E= -3.41e-13  |g|= 1.8e-12  |ddm|= 4.89e-13
    CPU time for scf_cycle      0.13 sec, wall time      0.13 sec
exp = [6.34496416e+03 8.22300215e+02 1.71807987e+02 4.49116763e+01
 4.74361977e+00 3.92118610e-01 8.59373909e+00 4.91066414e-01]
grad_E = [ 3.49931349e-05  2.07787200e-05 -1.72507169e-04  1.78268426e-04
 -6.68316351e-03  2.38989095e-03 -2.73460080e-03  1.73827180e-02]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((8, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([1.5735952963858392e+03,2.3761303919145971e+02,5.2332977870138201e+01,4.7281081235122091e+00,3.9325830426169639e-01,8.5907170030661746e+00,4.9039633283239870e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "6s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:48:52 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  6340.3031743         1
[INPUT] 0    0    [1    /1   ]  821.621050022        1
[INPUT] 0    0    [1    /1   ]  171.566472693        1
[INPUT] 0    0    [1    /1   ]  44.8747416298        1
[INPUT] 0    0    [1    /1   ]  4.73900616266        1
[INPUT] 0    0    [1    /1   ]  0.392151199442       1
[INPUT] 1    0    [1    /1   ]  8.59238243254        1
[INPUT] 1    0    [1    /1   ]  0.491340635881       1

nuclear repulsion = 0
number of shells = 8
number of NR pGTOs = 12
number of NR cGTOs = 12
basis = {'Ar': [[0, [6340.303174298119, 1.0]], [0, [821.6210500223013, 1.0]], [0, [171.5664726929147, 1.0]], [0, [44.87474162976026, 1.0]], [0, [4.739006162664024, 1.0]], [0, [0.39215119944193, 1.0]], [1, [8.592382432536528, 1.0]], [1, [0.4913406358811808, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [6340.3031743]
bas 1, expnt(s) = [821.62105002]
bas 2, expnt(s) = [171.56647269]
bas 3, expnt(s) = [44.87474163]
bas 4, expnt(s) = [4.73900616]
bas 5, expnt(s) = [0.3921512]
bas 6, expnt(s) = [8.59238243]
bas 7, expnt(s) = [0.49134064]
CPU time:       200.14
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  1  1  1  0 36 37  0]
 [ 0  1  1  1  0 38 39  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 6.34030317e+03 1.79513677e+03 8.21621050e+02 3.87720436e+02
 1.71566473e+02 1.19767598e+02 4.48747416e+01 4.38042748e+01
 4.73900616e+00 8.11484968e+00 3.92151199e-01 1.25200247e+00
 8.59238243e+00 4.29167070e+01 4.91340636e-01 1.20008704e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.318497768452474
cond(S) = 20.480889961108687
E1 = -688.7580350513732  E_coul = 184.91038285258492
init E= -503.847652198788
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.68031322441637  LUMO = 125.854112157807
  mo_energy =
[-1.21478200e+02 -1.32743605e+01 -7.62155895e+00 -7.62155895e+00
 -7.62155895e+00 -1.65037891e+00 -6.80313224e-01 -6.80313224e-01
 -6.80313224e-01  1.25854112e+02  1.18213829e+03  1.02312818e+04]
E1 = -706.2232904154085  E_coul = 198.95228452437874
cycle= 1 E= -507.27100589103  delta_E= -3.42  |g|= 0.29  |ddm|=  0.3
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.333172
diis-c [-0.11100371  1.        ]
  HOMO = -0.234544837777709  LUMO = 127.220100829495
  mo_energy =
[-1.20095760e+02 -1.22440396e+01 -6.65147080e+00 -6.65147080e+00
 -6.65147080e+00 -1.16162944e+00 -2.34544838e-01 -2.34544838e-01
 -2.34544838e-01  1.27220101e+02  1.18347595e+03  1.02324232e+04]
E1 = -706.2056880191874  E_coul = 198.93444830720566
cycle= 2 E= -507.271239711982  delta_E= -0.000234  |g|= 0.00337  |ddm|= 0.00753
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00352882
diis-c [-1.17269082e-05 -2.56352683e-03  1.00256353e+00]
  HOMO = -0.23463202224772  LUMO = 127.217556750768
  mo_energy =
[-1.20100968e+02 -1.22446510e+01 -6.65241392e+00 -6.65241392e+00
 -6.65241392e+00 -1.16166227e+00 -2.34632022e-01 -2.34632022e-01
 -2.34632022e-01  1.27217557e+02  1.18346786e+03  1.02324110e+04]
E1 = -706.205500967851  E_coul = 198.9342612167198
cycle= 3 E= -507.271239751131  delta_E= -3.91e-08  |g|= 4.79e-05  |ddm|= 8.52e-05
    CPU time for cycle= 3      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=6.35704e-05
diis-c [-9.08984224e-11  4.52315048e-05 -1.87402748e-02  1.01869504e+00]
  HOMO = -0.234632701164823  LUMO = 127.21754088246
  mo_energy =
[-1.20101006e+02 -1.22446560e+01 -6.65242274e+00 -6.65242274e+00
 -6.65242274e+00 -1.16166245e+00 -2.34632701e-01 -2.34632701e-01
 -2.34632701e-01  1.27217541e+02  1.18346783e+03  1.02324109e+04]
E1 = -706.2054990316586  E_coul = 198.93425928052045
cycle= 4 E= -507.271239751138  delta_E= -6.99e-12  |g|= 1.12e-07  |ddm|= 9.98e-07
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.2054990316586  E_coul = 198.93425928052045
  HOMO = -0.234632697832277  LUMO = 127.217541009186
  mo_energy =
[-1.20101006e+02 -1.22446559e+01 -6.65242271e+00 -6.65242271e+00
 -6.65242271e+00 -1.16166245e+00 -2.34632698e-01 -2.34632698e-01
 -2.34632698e-01  1.27217541e+02  1.18346783e+03  1.02324109e+04]
E1 = -706.2054990389004  E_coul = 198.93425928776213
Extra cycle  E= -507.271239751138  delta_E= -5.68e-14  |g|= 1.45e-09  |ddm|= 2.87e-09
    CPU time for scf_cycle      0.10 sec, wall time      0.10 sec
exp = [6.34030317e+03 8.21621050e+02 1.71566473e+02 4.48747416e+01
 4.73900616e+00 3.92151199e-01 8.59238243e+00 4.91340636e-01]
E = -507.27123975113824
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((8, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([1.5735952963858392e+03,2.3761303919145971e+02,5.2332977870138201e+01,4.7281081235122091e+00,3.9325830426169639e-01,8.5907170030661746e+00,4.9039633283239870e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "6s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:48:53 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  6340.3031743         1
[INPUT] 0    0    [1    /1   ]  821.621050022        1
[INPUT] 0    0    [1    /1   ]  171.566472693        1
[INPUT] 0    0    [1    /1   ]  44.8747416298        1
[INPUT] 0    0    [1    /1   ]  4.73900616266        1
[INPUT] 0    0    [1    /1   ]  0.392151199442       1
[INPUT] 1    0    [1    /1   ]  8.59238243254        1
[INPUT] 1    0    [1    /1   ]  0.491340635881       1

nuclear repulsion = 0
number of shells = 8
number of NR pGTOs = 12
number of NR cGTOs = 12
basis = {'Ar': [[0, [6340.303174298119, 1.0]], [0, [821.6210500223013, 1.0]], [0, [171.5664726929147, 1.0]], [0, [44.87474162976026, 1.0]], [0, [4.739006162664024, 1.0]], [0, [0.39215119944193, 1.0]], [1, [8.592382432536528, 1.0]], [1, [0.4913406358811808, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [6340.3031743]
bas 1, expnt(s) = [821.62105002]
bas 2, expnt(s) = [171.56647269]
bas 3, expnt(s) = [44.87474163]
bas 4, expnt(s) = [4.73900616]
bas 5, expnt(s) = [0.3921512]
bas 6, expnt(s) = [8.59238243]
bas 7, expnt(s) = [0.49134064]
CPU time:       200.91
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  1  1  1  0 36 37  0]
 [ 0  1  1  1  0 38 39  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 6.34030317e+03 1.79513677e+03 8.21621050e+02 3.87720436e+02
 1.71566473e+02 1.19767598e+02 4.48747416e+01 4.38042748e+01
 4.73900616e+00 8.11484968e+00 3.92151199e-01 1.25200247e+00
 8.59238243e+00 4.29167070e+01 4.91340636e-01 1.20008704e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.318497768452474
cond(S) = 20.480889961108687
E1 = -688.7580350513732  E_coul = 184.91038285258492
init E= -503.847652198788
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.68031322441637  LUMO = 125.854112157807
  mo_energy =
[-1.21478200e+02 -1.32743605e+01 -7.62155895e+00 -7.62155895e+00
 -7.62155895e+00 -1.65037891e+00 -6.80313224e-01 -6.80313224e-01
 -6.80313224e-01  1.25854112e+02  1.18213829e+03  1.02312818e+04]
E1 = -706.2232904154085  E_coul = 198.95228452437874
cycle= 1 E= -507.27100589103  delta_E= -3.42  |g|= 0.29  |ddm|=  0.3
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.333172
diis-c [-0.11100371  1.        ]
  HOMO = -0.234544837777709  LUMO = 127.220100829495
  mo_energy =
[-1.20095760e+02 -1.22440396e+01 -6.65147080e+00 -6.65147080e+00
 -6.65147080e+00 -1.16162944e+00 -2.34544838e-01 -2.34544838e-01
 -2.34544838e-01  1.27220101e+02  1.18347595e+03  1.02324232e+04]
E1 = -706.2056880191874  E_coul = 198.93444830720566
cycle= 2 E= -507.271239711982  delta_E= -0.000234  |g|= 0.00337  |ddm|= 0.00753
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00352882
diis-c [-1.17269082e-05 -2.56352683e-03  1.00256353e+00]
  HOMO = -0.23463202224772  LUMO = 127.217556750768
  mo_energy =
[-1.20100968e+02 -1.22446510e+01 -6.65241392e+00 -6.65241392e+00
 -6.65241392e+00 -1.16166227e+00 -2.34632022e-01 -2.34632022e-01
 -2.34632022e-01  1.27217557e+02  1.18346786e+03  1.02324110e+04]
E1 = -706.205500967851  E_coul = 198.9342612167198
cycle= 3 E= -507.271239751131  delta_E= -3.91e-08  |g|= 4.79e-05  |ddm|= 8.52e-05
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=6.35704e-05
diis-c [-9.08984224e-11  4.52315048e-05 -1.87402748e-02  1.01869504e+00]
  HOMO = -0.234632701164823  LUMO = 127.21754088246
  mo_energy =
[-1.20101006e+02 -1.22446560e+01 -6.65242274e+00 -6.65242274e+00
 -6.65242274e+00 -1.16166245e+00 -2.34632701e-01 -2.34632701e-01
 -2.34632701e-01  1.27217541e+02  1.18346783e+03  1.02324109e+04]
E1 = -706.2054990316586  E_coul = 198.93425928052045
cycle= 4 E= -507.271239751138  delta_E= -6.99e-12  |g|= 1.12e-07  |ddm|= 9.98e-07
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.2054990316586  E_coul = 198.93425928052045
  HOMO = -0.234632697832277  LUMO = 127.217541009186
  mo_energy =
[-1.20101006e+02 -1.22446559e+01 -6.65242271e+00 -6.65242271e+00
 -6.65242271e+00 -1.16166245e+00 -2.34632698e-01 -2.34632698e-01
 -2.34632698e-01  1.27217541e+02  1.18346783e+03  1.02324109e+04]
E1 = -706.2054990389004  E_coul = 198.93425928776213
Extra cycle  E= -507.271239751138  delta_E= -5.68e-14  |g|= 1.45e-09  |ddm|= 2.87e-09
    CPU time for scf_cycle      0.10 sec, wall time      0.10 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 20.480889961108687
E1 = -706.2054990389004  E_coul = 198.93425928776213
init E= -507.271239751138
    CPU time for initialize scf      0.06 sec, wall time      0.06 sec
  HOMO = -0.234632697801995  LUMO = 127.217541010298
  mo_energy =
[-1.20101006e+02 -1.22446559e+01 -6.65242271e+00 -6.65242271e+00
 -6.65242271e+00 -1.16166245e+00 -2.34632698e-01 -2.34632698e-01
 -2.34632698e-01  1.27217541e+02  1.18346783e+03  1.02324109e+04]
E1 = -706.2054990389811  E_coul = 198.9342592878431
cycle= 1 E= -507.271239751138  delta_E= 2.84e-13  |g|= 2.22e-11  |ddm|= 3.49e-11
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -706.2054990389811  E_coul = 198.9342592878431
  HOMO = -0.234632697801657  LUMO = 127.217541010308
  mo_energy =
[-1.20101006e+02 -1.22446559e+01 -6.65242271e+00 -6.65242271e+00
 -6.65242271e+00 -1.16166245e+00 -2.34632698e-01 -2.34632698e-01
 -2.34632698e-01  1.27217541e+02  1.18346783e+03  1.02324109e+04]
E1 = -706.205499038982  E_coul = 198.93425928784401
Extra cycle  E= -507.271239751138  delta_E=    0  |g|= 7.97e-13  |ddm|= 4.96e-13
    CPU time for scf_cycle      0.12 sec, wall time      0.13 sec
exp = [6.34030317e+03 8.21621050e+02 1.71566473e+02 4.48747416e+01
 4.73900616e+00 3.92151199e-01 8.59238243e+00 4.91340636e-01]
grad_E = [ 3.48993920e-05  3.22345844e-05 -2.80640642e-04  2.89872448e-04
 -1.08652256e-02  3.88486819e-03 -4.44618215e-03  2.82581960e-02]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((8, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([1.5735952963858392e+03,2.3761303919145971e+02,5.2332977870138201e+01,4.7281081235122091e+00,3.9325830426169639e-01,8.5907170030661746e+00,4.9039633283239870e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "6s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:48:56 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  6328.0682816         1
[INPUT] 0    0    [1    /1   ]  820.217126468        1
[INPUT] 0    0    [1    /1   ]  171.143283636        1
[INPUT] 0    0    [1    /1   ]  44.8108079229        1
[INPUT] 0    0    [1    /1   ]  4.73156594455        1
[INPUT] 0    0    [1    /1   ]  0.392203748297       1
[INPUT] 1    0    [1    /1   ]  8.59019497074        1
[INPUT] 1    0    [1    /1   ]  0.491784098465       1

nuclear repulsion = 0
number of shells = 8
number of NR pGTOs = 12
number of NR cGTOs = 12
basis = {'Ar': [[0, [6328.0682815958435, 1.0]], [0, [820.2171264676059, 1.0]], [0, [171.1432836355472, 1.0]], [0, [44.8108079228668, 1.0]], [0, [4.731565944547707, 1.0]], [0, [0.39220374829678994, 1.0]], [1, [8.590194970735547, 1.0]], [1, [0.49178409846545035, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [6328.0682816]
bas 1, expnt(s) = [820.21712647]
bas 2, expnt(s) = [171.14328364]
bas 3, expnt(s) = [44.81080792]
bas 4, expnt(s) = [4.73156594]
bas 5, expnt(s) = [0.39220375]
bas 6, expnt(s) = [8.59019497]
bas 7, expnt(s) = [0.4917841]
CPU time:       204.29
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  1  1  1  0 36 37  0]
 [ 0  1  1  1  0 38 39  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 6.32806828e+03 1.79253809e+03 8.20217126e+02 3.87223449e+02
 1.71143284e+02 1.19545964e+02 4.48108079e+01 4.37574600e+01
 4.73156594e+00 8.10529260e+00 3.92203748e-01 1.25212829e+00
 8.59019497e+00 4.29030501e+01 4.91784098e-01 1.20144113e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.318041912156396
cond(S) = 20.49370104426969
E1 = -688.7539195086106  E_coul = 184.90560911118396
init E= -503.848310397427
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.679754212341636  LUMO = 125.442577069554
  mo_energy =
[-1.21480787e+02 -1.32743479e+01 -7.62228146e+00 -7.62228146e+00
 -7.62228146e+00 -1.64979492e+00 -6.79754212e-01 -6.79754212e-01
 -6.79754212e-01  1.25442577e+02  1.17927004e+03  1.02099426e+04]
E1 = -706.2164751945533  E_coul = 198.94525494011194
cycle= 1 E= -507.271220254441  delta_E= -3.42  |g|= 0.291  |ddm|= 0.301
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.333168
diis-c [-0.11100101  1.        ]
  HOMO = -0.233668300042349  LUMO = 126.807635744586
  mo_energy =
[-1.20099915e+02 -1.22441404e+01 -6.65237059e+00 -6.65237059e+00
 -6.65237059e+00 -1.16092717e+00 -2.33668300e-01 -2.33668300e-01
 -2.33668300e-01  1.26807636e+02  1.18060548e+03  1.02110808e+04]
E1 = -706.1987382792687  E_coul = 198.92728130123774
cycle= 2 E= -507.271456978031  delta_E= -0.000237  |g|= 0.0034  |ddm|= 0.00759
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00355941
diis-c [-1.19270855e-05 -2.59291523e-03  1.00259292e+00]
  HOMO = -0.233756341985927  LUMO = 126.805078509361
  mo_energy =
[-1.20105159e+02 -1.22447566e+01 -6.65332220e+00 -6.65332220e+00
 -6.65332220e+00 -1.16096022e+00 -2.33756342e-01 -2.33756342e-01
 -2.33756342e-01  1.26805079e+02  1.18059735e+03  1.02110685e+04]
E1 = -706.198549225421  E_coul = 198.9270922075075
cycle= 3 E= -507.271457017913  delta_E= -3.99e-08  |g|= 4.83e-05  |ddm|= 8.61e-05
    CPU time for cycle= 3      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=6.41084e-05
diis-c [-9.17858470e-11  4.53269860e-05 -1.87406123e-02  1.01869529e+00]
  HOMO = -0.233757027609058  LUMO = 126.805062552883
  mo_energy =
[-1.20105197e+02 -1.22447616e+01 -6.65333111e+00 -6.65333111e+00
 -6.65333111e+00 -1.16096041e+00 -2.33757028e-01 -2.33757028e-01
 -2.33757028e-01  1.26805063e+02  1.18059732e+03  1.02110684e+04]
E1 = -706.19854726729  E_coul = 198.92709024936937
cycle= 4 E= -507.271457017921  delta_E= -7.16e-12  |g|= 1.13e-07  |ddm|= 1.01e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.19854726729  E_coul = 198.92709024936937
  HOMO = -0.233757024232755  LUMO = 126.805062680557
  mo_energy =
[-1.20105197e+02 -1.22447616e+01 -6.65333107e+00 -6.65333107e+00
 -6.65333107e+00 -1.16096041e+00 -2.33757024e-01 -2.33757024e-01
 -2.33757024e-01  1.26805063e+02  1.18059732e+03  1.02110684e+04]
E1 = -706.1985472746218  E_coul = 198.92709025670135
Extra cycle  E= -507.27145701792  delta_E= 2.27e-13  |g|= 1.47e-09  |ddm|= 2.91e-09
    CPU time for scf_cycle      0.10 sec, wall time      0.10 sec
exp = [6.32806828e+03 8.20217126e+02 1.71143284e+02 4.48108079e+01
 4.73156594e+00 3.92203748e-01 8.59019497e+00 4.91784098e-01]
E = -507.2714570179204
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((8, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([1.5735952963858392e+03,2.3761303919145971e+02,5.2332977870138201e+01,4.7281081235122091e+00,3.9325830426169639e-01,8.5907170030661746e+00,4.9039633283239870e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "6s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:48:57 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  6328.0682816         1
[INPUT] 0    0    [1    /1   ]  820.217126468        1
[INPUT] 0    0    [1    /1   ]  171.143283636        1
[INPUT] 0    0    [1    /1   ]  44.8108079229        1
[INPUT] 0    0    [1    /1   ]  4.73156594455        1
[INPUT] 0    0    [1    /1   ]  0.392203748297       1
[INPUT] 1    0    [1    /1   ]  8.59019497074        1
[INPUT] 1    0    [1    /1   ]  0.491784098465       1

nuclear repulsion = 0
number of shells = 8
number of NR pGTOs = 12
number of NR cGTOs = 12
basis = {'Ar': [[0, [6328.0682815958435, 1.0]], [0, [820.2171264676059, 1.0]], [0, [171.1432836355472, 1.0]], [0, [44.8108079228668, 1.0]], [0, [4.731565944547707, 1.0]], [0, [0.39220374829678994, 1.0]], [1, [8.590194970735547, 1.0]], [1, [0.49178409846545035, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [6328.0682816]
bas 1, expnt(s) = [820.21712647]
bas 2, expnt(s) = [171.14328364]
bas 3, expnt(s) = [44.81080792]
bas 4, expnt(s) = [4.73156594]
bas 5, expnt(s) = [0.39220375]
bas 6, expnt(s) = [8.59019497]
bas 7, expnt(s) = [0.4917841]
CPU time:       205.07
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  1  1  1  0 36 37  0]
 [ 0  1  1  1  0 38 39  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 6.32806828e+03 1.79253809e+03 8.20217126e+02 3.87223449e+02
 1.71143284e+02 1.19545964e+02 4.48108079e+01 4.37574600e+01
 4.73156594e+00 8.10529260e+00 3.92203748e-01 1.25212829e+00
 8.59019497e+00 4.29030501e+01 4.91784098e-01 1.20144113e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.318041912156396
cond(S) = 20.49370104426969
E1 = -688.7539195086106  E_coul = 184.90560911118396
init E= -503.848310397427
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.679754212341636  LUMO = 125.442577069554
  mo_energy =
[-1.21480787e+02 -1.32743479e+01 -7.62228146e+00 -7.62228146e+00
 -7.62228146e+00 -1.64979492e+00 -6.79754212e-01 -6.79754212e-01
 -6.79754212e-01  1.25442577e+02  1.17927004e+03  1.02099426e+04]
E1 = -706.2164751945533  E_coul = 198.94525494011194
cycle= 1 E= -507.271220254441  delta_E= -3.42  |g|= 0.291  |ddm|= 0.301
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.333168
diis-c [-0.11100101  1.        ]
  HOMO = -0.233668300042349  LUMO = 126.807635744586
  mo_energy =
[-1.20099915e+02 -1.22441404e+01 -6.65237059e+00 -6.65237059e+00
 -6.65237059e+00 -1.16092717e+00 -2.33668300e-01 -2.33668300e-01
 -2.33668300e-01  1.26807636e+02  1.18060548e+03  1.02110808e+04]
E1 = -706.1987382792687  E_coul = 198.92728130123774
cycle= 2 E= -507.271456978031  delta_E= -0.000237  |g|= 0.0034  |ddm|= 0.00759
    CPU time for cycle= 2      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.00355941
diis-c [-1.19270855e-05 -2.59291523e-03  1.00259292e+00]
  HOMO = -0.233756341985927  LUMO = 126.805078509361
  mo_energy =
[-1.20105159e+02 -1.22447566e+01 -6.65332220e+00 -6.65332220e+00
 -6.65332220e+00 -1.16096022e+00 -2.33756342e-01 -2.33756342e-01
 -2.33756342e-01  1.26805079e+02  1.18059735e+03  1.02110685e+04]
E1 = -706.198549225421  E_coul = 198.9270922075075
cycle= 3 E= -507.271457017913  delta_E= -3.99e-08  |g|= 4.83e-05  |ddm|= 8.61e-05
    CPU time for cycle= 3      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=6.41084e-05
diis-c [-9.17858470e-11  4.53269860e-05 -1.87406123e-02  1.01869529e+00]
  HOMO = -0.233757027609058  LUMO = 126.805062552883
  mo_energy =
[-1.20105197e+02 -1.22447616e+01 -6.65333111e+00 -6.65333111e+00
 -6.65333111e+00 -1.16096041e+00 -2.33757028e-01 -2.33757028e-01
 -2.33757028e-01  1.26805063e+02  1.18059732e+03  1.02110684e+04]
E1 = -706.19854726729  E_coul = 198.92709024936937
cycle= 4 E= -507.271457017921  delta_E= -7.16e-12  |g|= 1.13e-07  |ddm|= 1.01e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.19854726729  E_coul = 198.92709024936937
  HOMO = -0.233757024232755  LUMO = 126.805062680557
  mo_energy =
[-1.20105197e+02 -1.22447616e+01 -6.65333107e+00 -6.65333107e+00
 -6.65333107e+00 -1.16096041e+00 -2.33757024e-01 -2.33757024e-01
 -2.33757024e-01  1.26805063e+02  1.18059732e+03  1.02110684e+04]
E1 = -706.1985472746218  E_coul = 198.92709025670135
Extra cycle  E= -507.27145701792  delta_E= 2.27e-13  |g|= 1.47e-09  |ddm|= 2.91e-09
    CPU time for scf_cycle      0.10 sec, wall time      0.10 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 20.49370104426969
E1 = -706.1985472746218  E_coul = 198.92709025670135
init E= -507.27145701792
    CPU time for initialize scf      0.05 sec, wall time      0.05 sec
  HOMO = -0.233757024202009  LUMO = 126.805062681679
  mo_energy =
[-1.20105197e+02 -1.22447616e+01 -6.65333107e+00 -6.65333107e+00
 -6.65333107e+00 -1.16096041e+00 -2.33757024e-01 -2.33757024e-01
 -2.33757024e-01  1.26805063e+02  1.18059732e+03  1.02110684e+04]
E1 = -706.1985472747043  E_coul = 198.9270902567837
cycle= 1 E= -507.271457017921  delta_E= -2.27e-13  |g|= 2.23e-11  |ddm|= 3.54e-11
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -706.1985472747043  E_coul = 198.9270902567837
  HOMO = -0.23375702420166  LUMO = 126.805062681689
  mo_energy =
[-1.20105197e+02 -1.22447616e+01 -6.65333107e+00 -6.65333107e+00
 -6.65333107e+00 -1.16096041e+00 -2.33757024e-01 -2.33757024e-01
 -2.33757024e-01  1.26805063e+02  1.18059732e+03  1.02110684e+04]
E1 = -706.1985472747057  E_coul = 198.92709025678477
Extra cycle  E= -507.271457017921  delta_E= -2.84e-13  |g|= 2.06e-12  |ddm|= 5.01e-13
    CPU time for scf_cycle      0.12 sec, wall time      0.12 sec
exp = [6.32806828e+03 8.20217126e+02 1.71143284e+02 4.48108079e+01
 4.73156594e+00 3.92203748e-01 8.59019497e+00 4.91784098e-01]
grad_E = [ 3.47080053e-05  5.07525819e-05 -4.55353853e-04  4.70439973e-04
 -1.76199076e-02  6.29953900e-03 -7.21083561e-03  4.58257978e-02]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((8, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([1.5735952963858392e+03,2.3761303919145971e+02,5.2332977870138201e+01,4.7281081235122091e+00,3.9325830426169639e-01,8.5907170030661746e+00,4.9039633283239870e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "6s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:49:00 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  6296.11225491        1
[INPUT] 0    0    [1    /1   ]  817.154540186        1
[INPUT] 0    0    [1    /1   ]  170.376270491        1
[INPUT] 0    0    [1    /1   ]  44.6967946336        1
[INPUT] 0    0    [1    /1   ]  4.71964689745        1
[INPUT] 0    0    [1    /1   ]  0.392287876789       1
[INPUT] 1    0    [1    /1   ]  8.58669217836        1
[INPUT] 1    0    [1    /1   ]  0.492497655115       1

nuclear repulsion = 0
number of shells = 8
number of NR pGTOs = 12
number of NR cGTOs = 12
basis = {'Ar': [[0, [6296.112254912197, 1.0]], [0, [817.1545401864141, 1.0]], [0, [170.37627049085, 1.0]], [0, [44.69679463359147, 1.0]], [0, [4.719646897454998, 1.0]], [0, [0.3922878767894629, 1.0]], [1, [8.586692178356959, 1.0]], [1, [0.4924976551149059, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [6296.11225491]
bas 1, expnt(s) = [817.15454019]
bas 2, expnt(s) = [170.37627049]
bas 3, expnt(s) = [44.69679463]
bas 4, expnt(s) = [4.7196469]
bas 5, expnt(s) = [0.39228788]
bas 6, expnt(s) = [8.58669218]
bas 7, expnt(s) = [0.49249766]
CPU time:       208.49
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  1  1  1  0 36 37  0]
 [ 0  1  1  1  0 38 39  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 6.29611225e+03 1.78574471e+03 8.17154540e+02 3.86138560e+02
 1.70376270e+02 1.19143912e+02 4.46967946e+01 4.36739335e+01
 4.71964690e+00 8.08997455e+00 3.92287877e-01 1.25232973e+00
 8.58669218e+00 4.28811832e+01 4.92497655e-01 1.20362057e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.317296699477268
cond(S) = 20.535766162694223
E1 = -688.747731355661  E_coul = 184.89783449200624
init E= -503.849896863655
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.678860003155263  LUMO = 124.709966424038
  mo_energy =
[-1.21485122e+02 -1.32742749e+01 -7.62344999e+00 -7.62344999e+00
 -7.62344999e+00 -1.64885819e+00 -6.78860003e-01 -6.78860003e-01
 -6.78860003e-01  1.24709966e+02  1.17359052e+03  1.01574673e+04]
E1 = -706.20577072841  E_coul = 198.93398957046327
cycle= 1 E= -507.271781157947  delta_E= -3.42  |g|= 0.293  |ddm|= 0.303
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.33309
diis-c [-0.11094912  1.        ]
  HOMO = -0.232256821090633  LUMO = 126.073503681127
  mo_energy =
[-1.20106766e+02 -1.22442437e+01 -6.65381410e+00 -6.65381410e+00
 -6.65381410e+00 -1.15979255e+00 -2.32256821e-01 -2.32256821e-01
 -2.32256821e-01  1.26073504e+02  1.17492245e+03  1.01586004e+04]
E1 = -706.1877993309331  E_coul = 198.91577649341068
cycle= 2 E= -507.272022837522  delta_E= -0.000242  |g|= 0.00345  |ddm|= 0.00769
    CPU time for cycle= 2      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.00361084
diis-c [-1.22686379e-05 -2.64065059e-03  1.00264065e+00]
  HOMO = -0.232346354523359  LUMO = 126.070923777357
  mo_energy =
[-1.20112072e+02 -1.22448682e+01 -6.65478051e+00 -6.65478051e+00
 -6.65478051e+00 -1.15982600e+00 -2.32346355e-01 -2.32346355e-01
 -2.32346355e-01  1.26070924e+02  1.17491426e+03  1.01585880e+04]
E1 = -706.1876067579528  E_coul = 198.9155838792788
cycle= 3 E= -507.272022878674  delta_E= -4.12e-08  |g|= 4.9e-05  |ddm|= 8.78e-05
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=6.50401e-05
diis-c [-9.33938946e-11  4.54984526e-05 -1.87480012e-02  1.01870250e+00]
  HOMO = -0.232347052104399  LUMO = 126.070907654449
  mo_energy =
[-1.20112112e+02 -1.22448733e+01 -6.65478957e+00 -6.65478957e+00
 -6.65478957e+00 -1.15982618e+00 -2.32347052e-01 -2.32347052e-01
 -2.32347052e-01  1.26070908e+02  1.17491422e+03  1.01585880e+04]
E1 = -706.1876047603712  E_coul = 198.91558188168986
cycle= 4 E= -507.272022878681  delta_E= -7.33e-12  |g|= 1.15e-07  |ddm|= 1.03e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.1876047603712  E_coul = 198.91558188168986
  HOMO = -0.232347048649124  LUMO = 126.070907783809
  mo_energy =
[-1.20112111e+02 -1.22448733e+01 -6.65478953e+00 -6.65478953e+00
 -6.65478953e+00 -1.15982618e+00 -2.32347049e-01 -2.32347049e-01
 -2.32347049e-01  1.26070908e+02  1.17491422e+03  1.01585880e+04]
E1 = -706.1876047678672  E_coul = 198.9155818891856
Extra cycle  E= -507.272022878682  delta_E= -2.84e-13  |g|= 1.5e-09  |ddm|= 2.98e-09
    CPU time for scf_cycle      0.10 sec, wall time      0.10 sec
exp = [6.29611225e+03 8.17154540e+02 1.70376270e+02 4.46967946e+01
 4.71964690e+00 3.92287877e-01 8.58669218e+00 4.92497655e-01]
E = -507.27202287868164
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((8, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([1.5735952963858392e+03,2.3761303919145971e+02,5.2332977870138201e+01,4.7281081235122091e+00,3.9325830426169639e-01,8.5907170030661746e+00,4.9039633283239870e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "6s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:49:01 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  6296.11225491        1
[INPUT] 0    0    [1    /1   ]  817.154540186        1
[INPUT] 0    0    [1    /1   ]  170.376270491        1
[INPUT] 0    0    [1    /1   ]  44.6967946336        1
[INPUT] 0    0    [1    /1   ]  4.71964689745        1
[INPUT] 0    0    [1    /1   ]  0.392287876789       1
[INPUT] 1    0    [1    /1   ]  8.58669217836        1
[INPUT] 1    0    [1    /1   ]  0.492497655115       1

nuclear repulsion = 0
number of shells = 8
number of NR pGTOs = 12
number of NR cGTOs = 12
basis = {'Ar': [[0, [6296.112254912197, 1.0]], [0, [817.1545401864141, 1.0]], [0, [170.37627049085, 1.0]], [0, [44.69679463359147, 1.0]], [0, [4.719646897454998, 1.0]], [0, [0.3922878767894629, 1.0]], [1, [8.586692178356959, 1.0]], [1, [0.4924976551149059, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [6296.11225491]
bas 1, expnt(s) = [817.15454019]
bas 2, expnt(s) = [170.37627049]
bas 3, expnt(s) = [44.69679463]
bas 4, expnt(s) = [4.7196469]
bas 5, expnt(s) = [0.39228788]
bas 6, expnt(s) = [8.58669218]
bas 7, expnt(s) = [0.49249766]
CPU time:       209.28
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  1  1  1  0 36 37  0]
 [ 0  1  1  1  0 38 39  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 6.29611225e+03 1.78574471e+03 8.17154540e+02 3.86138560e+02
 1.70376270e+02 1.19143912e+02 4.46967946e+01 4.36739335e+01
 4.71964690e+00 8.08997455e+00 3.92287877e-01 1.25232973e+00
 8.58669218e+00 4.28811832e+01 4.92497655e-01 1.20362057e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.317296699477268
cond(S) = 20.535766162694223
E1 = -688.747731355661  E_coul = 184.89783449200624
init E= -503.849896863655
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.678860003155263  LUMO = 124.709966424038
  mo_energy =
[-1.21485122e+02 -1.32742749e+01 -7.62344999e+00 -7.62344999e+00
 -7.62344999e+00 -1.64885819e+00 -6.78860003e-01 -6.78860003e-01
 -6.78860003e-01  1.24709966e+02  1.17359052e+03  1.01574673e+04]
E1 = -706.20577072841  E_coul = 198.93398957046327
cycle= 1 E= -507.271781157947  delta_E= -3.42  |g|= 0.293  |ddm|= 0.303
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.33309
diis-c [-0.11094912  1.        ]
  HOMO = -0.232256821090633  LUMO = 126.073503681127
  mo_energy =
[-1.20106766e+02 -1.22442437e+01 -6.65381410e+00 -6.65381410e+00
 -6.65381410e+00 -1.15979255e+00 -2.32256821e-01 -2.32256821e-01
 -2.32256821e-01  1.26073504e+02  1.17492245e+03  1.01586004e+04]
E1 = -706.1877993309331  E_coul = 198.91577649341068
cycle= 2 E= -507.272022837522  delta_E= -0.000242  |g|= 0.00345  |ddm|= 0.00769
    CPU time for cycle= 2      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.00361084
diis-c [-1.22686379e-05 -2.64065059e-03  1.00264065e+00]
  HOMO = -0.232346354523359  LUMO = 126.070923777357
  mo_energy =
[-1.20112072e+02 -1.22448682e+01 -6.65478051e+00 -6.65478051e+00
 -6.65478051e+00 -1.15982600e+00 -2.32346355e-01 -2.32346355e-01
 -2.32346355e-01  1.26070924e+02  1.17491426e+03  1.01585880e+04]
E1 = -706.1876067579528  E_coul = 198.9155838792788
cycle= 3 E= -507.272022878674  delta_E= -4.12e-08  |g|= 4.9e-05  |ddm|= 8.78e-05
    CPU time for cycle= 3      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=6.50401e-05
diis-c [-9.33938946e-11  4.54984526e-05 -1.87480012e-02  1.01870250e+00]
  HOMO = -0.232347052104399  LUMO = 126.070907654449
  mo_energy =
[-1.20112112e+02 -1.22448733e+01 -6.65478957e+00 -6.65478957e+00
 -6.65478957e+00 -1.15982618e+00 -2.32347052e-01 -2.32347052e-01
 -2.32347052e-01  1.26070908e+02  1.17491422e+03  1.01585880e+04]
E1 = -706.1876047603712  E_coul = 198.91558188168986
cycle= 4 E= -507.272022878681  delta_E= -7.33e-12  |g|= 1.15e-07  |ddm|= 1.03e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.1876047603712  E_coul = 198.91558188168986
  HOMO = -0.232347048649124  LUMO = 126.070907783809
  mo_energy =
[-1.20112111e+02 -1.22448733e+01 -6.65478953e+00 -6.65478953e+00
 -6.65478953e+00 -1.15982618e+00 -2.32347049e-01 -2.32347049e-01
 -2.32347049e-01  1.26070908e+02  1.17491422e+03  1.01585880e+04]
E1 = -706.1876047678672  E_coul = 198.9155818891856
Extra cycle  E= -507.272022878682  delta_E= -2.84e-13  |g|= 1.5e-09  |ddm|= 2.98e-09
    CPU time for scf_cycle      0.09 sec, wall time      0.10 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 20.535766162694223
E1 = -706.1876047678672  E_coul = 198.9155818891856
init E= -507.272022878682
    CPU time for initialize scf      0.05 sec, wall time      0.05 sec
  HOMO = -0.232347048617538  LUMO = 126.070907784951
  mo_energy =
[-1.20112111e+02 -1.22448733e+01 -6.65478953e+00 -6.65478953e+00
 -6.65478953e+00 -1.15982618e+00 -2.32347049e-01 -2.32347049e-01
 -2.32347049e-01  1.26070908e+02  1.17491422e+03  1.01585880e+04]
E1 = -706.187604767952  E_coul = 198.91558188927007
cycle= 1 E= -507.272022878682  delta_E= -3.41e-13  |g|= 2.35e-11  |ddm|= 3.63e-11
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -706.187604767952  E_coul = 198.91558188927007
  HOMO = -0.232347048617179  LUMO = 126.070907784963
  mo_energy =
[-1.20112111e+02 -1.22448733e+01 -6.65478953e+00 -6.65478953e+00
 -6.65478953e+00 -1.15982618e+00 -2.32347049e-01 -2.32347049e-01
 -2.32347049e-01  1.26070908e+02  1.17491422e+03  1.01585880e+04]
E1 = -706.1876047679524  E_coul = 198.915581889271
Extra cycle  E= -507.272022878681  delta_E= 6.25e-13  |g|= 1.98e-12  |ddm|= 5.03e-13
    CPU time for scf_cycle      0.12 sec, wall time      0.12 sec
exp = [6.29611225e+03 8.17154540e+02 1.70376270e+02 4.46967946e+01
 4.71964690e+00 3.92287877e-01 8.58669218e+00 4.92497655e-01]
grad_E = [ 3.42915909e-05  8.05648733e-05 -7.36107485e-04  7.61677929e-04
 -2.84649123e-02  1.01769606e-02 -1.16504997e-02  7.40412856e-02]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((8, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([1.5735952963858392e+03,2.3761303919145971e+02,5.2332977870138201e+01,4.7281081235122091e+00,3.9325830426169639e-01,8.5907170030661746e+00,4.9039633283239870e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "6s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:49:04 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  6213.45454087        1
[INPUT] 0    0    [1    /1   ]  810.176031128        1
[INPUT] 0    0    [1    /1   ]  168.931434256        1
[INPUT] 0    0    [1    /1   ]  44.4862230349        1
[INPUT] 0    0    [1    /1   ]  4.70088612755        1
[INPUT] 0    0    [1    /1   ]  0.392419944375       1
[INPUT] 1    0    [1    /1   ]  8.58118489873        1
[INPUT] 1    0    [1    /1   ]  0.493628598904       1

nuclear repulsion = 0
number of shells = 8
number of NR pGTOs = 12
number of NR cGTOs = 12
basis = {'Ar': [[0, [6213.454540867597, 1.0]], [0, [810.176031128019, 1.0]], [0, [168.93143425620642, 1.0]], [0, [44.4862230348907, 1.0]], [0, [4.700886127547568, 1.0]], [0, [0.39241994437547995, 1.0]], [1, [8.581184898725228, 1.0]], [1, [0.4936285989039538, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [6213.45454087]
bas 1, expnt(s) = [810.17603113]
bas 2, expnt(s) = [168.93143426]
bas 3, expnt(s) = [44.48622303]
bas 4, expnt(s) = [4.70088613]
bas 5, expnt(s) = [0.39241994]
bas 6, expnt(s) = [8.5811849]
bas 7, expnt(s) = [0.4936286]
CPU time:       212.65
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  1  1  1  0 36 37  0]
 [ 0  1  1  1  0 38 39  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 6.21345454e+03 1.76813275e+03 8.10176031e+02 3.83662690e+02
 1.68931434e+02 1.18385326e+02 4.44862230e+01 4.35195279e+01
 4.70088613e+00 8.06584408e+00 3.92419944e-01 1.25264592e+00
 8.58118490e+00 4.28468074e+01 4.93628599e-01 1.20707647e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.31608634767268
cond(S) = 20.66012862078917
E1 = -688.7391554896752  E_coul = 184.88533091018243
init E= -503.853824579493
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.677455728746648  LUMO = 123.362030118807
  mo_energy =
[-1.21492426e+02 -1.32740250e+01 -7.62531316e+00 -7.62531316e+00
 -7.62531316e+00 -1.64738079e+00 -6.77455729e-01 -6.77455729e-01
 -6.77455729e-01  1.23362030e+02  1.16177584e+03  1.00269187e+04]
E1 = -706.1895131531661  E_coul = 198.9162817663547
cycle= 1 E= -507.273231386811  delta_E= -3.42  |g|= 0.295  |ddm|= 0.306
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.332773
diis-c [-0.11073769  1.        ]
  HOMO = -0.230017011577516  LUMO = 124.72308573896
  mo_energy =
[-1.20118038e+02 -1.22442582e+01 -6.65608950e+00 -6.65608950e+00
 -6.65608950e+00 -1.15798270e+00 -2.30017012e-01 -2.30017012e-01
 -2.30017012e-01  1.24723086e+02  1.16310239e+03  1.00280442e+04]
E1 = -706.1711200260654  E_coul = 198.89763830939114
cycle= 2 E= -507.273481716674  delta_E= -0.00025  |g|= 0.00352  |ddm|= 0.00788
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00369836
diis-c [-1.28645699e-05 -2.71760598e-03  1.00271761e+00]
  HOMO = -0.230109221101838  LUMO = 124.720465760933
  mo_energy =
[-1.20123457e+02 -1.22448979e+01 -6.65708252e+00 -6.65708252e+00
 -6.65708252e+00 -1.15801688e+00 -2.30109221e-01 -2.30109221e-01
 -2.30109221e-01  1.24720466e+02  1.16309408e+03  1.00280317e+04]
E1 = -706.1709210411814  E_coul = 198.89743928108888
cycle= 3 E= -507.273481760093  delta_E= -4.34e-08  |g|= 5.03e-05  |ddm|= 9.07e-05
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=6.66997e-05
diis-c [-9.64613926e-11  4.58173327e-05 -1.87780874e-02  1.01873227e+00]
  HOMO = -0.23010994091442  LUMO = 124.720449305744
  mo_energy =
[-1.20123497e+02 -1.22449031e+01 -6.65709184e+00 -6.65709184e+00
 -6.65709184e+00 -1.15801707e+00 -2.30109941e-01 -2.30109941e-01
 -2.30109941e-01  1.24720449e+02  1.16309404e+03  1.00280316e+04]
E1 = -706.1709189693418  E_coul = 198.89743720924108
cycle= 4 E= -507.273481760101  delta_E= -8.19e-12  |g|= 1.18e-07  |ddm|= 1.07e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.1709189693418  E_coul = 198.89743720924108
  HOMO = -0.230109937309543  LUMO = 124.720449438248
  mo_energy =
[-1.20123497e+02 -1.22449031e+01 -6.65709180e+00 -6.65709180e+00
 -6.65709180e+00 -1.15801707e+00 -2.30109937e-01 -2.30109937e-01
 -2.30109937e-01  1.24720449e+02  1.16309404e+03  1.00280316e+04]
E1 = -706.17091897715  E_coul = 198.8974372170492
Extra cycle  E= -507.273481760101  delta_E= -1.14e-13  |g|= 1.56e-09  |ddm|= 3.11e-09
    CPU time for scf_cycle      0.10 sec, wall time      0.10 sec
exp = [6.21345454e+03 8.10176031e+02 1.68931434e+02 4.44862230e+01
 4.70088613e+00 3.92419944e-01 8.58118490e+00 4.93628599e-01]
E = -507.2734817601008
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((8, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([1.5735952963858392e+03,2.3761303919145971e+02,5.2332977870138201e+01,4.7281081235122091e+00,3.9325830426169639e-01,8.5907170030661746e+00,4.9039633283239870e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "6s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:49:05 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  6213.45454087        1
[INPUT] 0    0    [1    /1   ]  810.176031128        1
[INPUT] 0    0    [1    /1   ]  168.931434256        1
[INPUT] 0    0    [1    /1   ]  44.4862230349        1
[INPUT] 0    0    [1    /1   ]  4.70088612755        1
[INPUT] 0    0    [1    /1   ]  0.392419944375       1
[INPUT] 1    0    [1    /1   ]  8.58118489873        1
[INPUT] 1    0    [1    /1   ]  0.493628598904       1

nuclear repulsion = 0
number of shells = 8
number of NR pGTOs = 12
number of NR cGTOs = 12
basis = {'Ar': [[0, [6213.454540867597, 1.0]], [0, [810.176031128019, 1.0]], [0, [168.93143425620642, 1.0]], [0, [44.4862230348907, 1.0]], [0, [4.700886127547568, 1.0]], [0, [0.39241994437547995, 1.0]], [1, [8.581184898725228, 1.0]], [1, [0.4936285989039538, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [6213.45454087]
bas 1, expnt(s) = [810.17603113]
bas 2, expnt(s) = [168.93143426]
bas 3, expnt(s) = [44.48622303]
bas 4, expnt(s) = [4.70088613]
bas 5, expnt(s) = [0.39241994]
bas 6, expnt(s) = [8.5811849]
bas 7, expnt(s) = [0.4936286]
CPU time:       213.46
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  1  1  1  0 36 37  0]
 [ 0  1  1  1  0 38 39  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 6.21345454e+03 1.76813275e+03 8.10176031e+02 3.83662690e+02
 1.68931434e+02 1.18385326e+02 4.44862230e+01 4.35195279e+01
 4.70088613e+00 8.06584408e+00 3.92419944e-01 1.25264592e+00
 8.58118490e+00 4.28468074e+01 4.93628599e-01 1.20707647e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.31608634767268
cond(S) = 20.66012862078917
E1 = -688.7391554896752  E_coul = 184.88533091018243
init E= -503.853824579493
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.677455728746648  LUMO = 123.362030118807
  mo_energy =
[-1.21492426e+02 -1.32740250e+01 -7.62531316e+00 -7.62531316e+00
 -7.62531316e+00 -1.64738079e+00 -6.77455729e-01 -6.77455729e-01
 -6.77455729e-01  1.23362030e+02  1.16177584e+03  1.00269187e+04]
E1 = -706.1895131531661  E_coul = 198.9162817663547
cycle= 1 E= -507.273231386811  delta_E= -3.42  |g|= 0.295  |ddm|= 0.306
    CPU time for cycle= 1      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.332773
diis-c [-0.11073769  1.        ]
  HOMO = -0.230017011577516  LUMO = 124.72308573896
  mo_energy =
[-1.20118038e+02 -1.22442582e+01 -6.65608950e+00 -6.65608950e+00
 -6.65608950e+00 -1.15798270e+00 -2.30017012e-01 -2.30017012e-01
 -2.30017012e-01  1.24723086e+02  1.16310239e+03  1.00280442e+04]
E1 = -706.1711200260654  E_coul = 198.89763830939114
cycle= 2 E= -507.273481716674  delta_E= -0.00025  |g|= 0.00352  |ddm|= 0.00788
    CPU time for cycle= 2      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.00369836
diis-c [-1.28645699e-05 -2.71760598e-03  1.00271761e+00]
  HOMO = -0.230109221101838  LUMO = 124.720465760933
  mo_energy =
[-1.20123457e+02 -1.22448979e+01 -6.65708252e+00 -6.65708252e+00
 -6.65708252e+00 -1.15801688e+00 -2.30109221e-01 -2.30109221e-01
 -2.30109221e-01  1.24720466e+02  1.16309408e+03  1.00280317e+04]
E1 = -706.1709210411814  E_coul = 198.89743928108888
cycle= 3 E= -507.273481760093  delta_E= -4.34e-08  |g|= 5.03e-05  |ddm|= 9.07e-05
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=6.66997e-05
diis-c [-9.64613926e-11  4.58173327e-05 -1.87780874e-02  1.01873227e+00]
  HOMO = -0.23010994091442  LUMO = 124.720449305744
  mo_energy =
[-1.20123497e+02 -1.22449031e+01 -6.65709184e+00 -6.65709184e+00
 -6.65709184e+00 -1.15801707e+00 -2.30109941e-01 -2.30109941e-01
 -2.30109941e-01  1.24720449e+02  1.16309404e+03  1.00280316e+04]
E1 = -706.1709189693418  E_coul = 198.89743720924108
cycle= 4 E= -507.273481760101  delta_E= -8.19e-12  |g|= 1.18e-07  |ddm|= 1.07e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.1709189693418  E_coul = 198.89743720924108
  HOMO = -0.230109937309543  LUMO = 124.720449438248
  mo_energy =
[-1.20123497e+02 -1.22449031e+01 -6.65709180e+00 -6.65709180e+00
 -6.65709180e+00 -1.15801707e+00 -2.30109937e-01 -2.30109937e-01
 -2.30109937e-01  1.24720449e+02  1.16309404e+03  1.00280316e+04]
E1 = -706.17091897715  E_coul = 198.8974372170492
Extra cycle  E= -507.273481760101  delta_E= -1.14e-13  |g|= 1.56e-09  |ddm|= 3.11e-09
    CPU time for scf_cycle      0.10 sec, wall time      0.10 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 20.66012862078917
E1 = -706.17091897715  E_coul = 198.8974372170492
init E= -507.273481760101
    CPU time for initialize scf      0.06 sec, wall time      0.06 sec
  HOMO = -0.230109937276351  LUMO = 124.720449439428
  mo_energy =
[-1.20123497e+02 -1.22449031e+01 -6.65709180e+00 -6.65709180e+00
 -6.65709180e+00 -1.15801707e+00 -2.30109937e-01 -2.30109937e-01
 -2.30109937e-01  1.24720449e+02  1.16309404e+03  1.00280316e+04]
E1 = -706.1709189772382  E_coul = 198.8974372171378
cycle= 1 E= -507.2734817601  delta_E= 3.98e-13  |g|= 2.42e-11  |ddm|= 3.82e-11
    CPU time for cycle= 1      0.02 sec, wall time      0.02 sec
E1 = -706.1709189772382  E_coul = 198.8974372171378
  HOMO = -0.230109937275973  LUMO = 124.720449439439
  mo_energy =
[-1.20123497e+02 -1.22449031e+01 -6.65709180e+00 -6.65709180e+00
 -6.65709180e+00 -1.15801707e+00 -2.30109937e-01 -2.30109937e-01
 -2.30109937e-01  1.24720449e+02  1.16309404e+03  1.00280316e+04]
E1 = -706.1709189772396  E_coul = 198.89743721713904
Extra cycle  E= -507.273481760101  delta_E= -1.14e-13  |g|= 3.34e-12  |ddm|= 5.46e-13
    CPU time for scf_cycle      0.14 sec, wall time      0.14 sec
exp = [6.21345454e+03 8.10176031e+02 1.68931434e+02 4.44862230e+01
 4.70088613e+00 3.92419944e-01 8.58118490e+00 4.93628599e-01]
grad_E = [ 3.33148364e-05  1.28055393e-04 -1.18014903e-03  1.22699425e-03
 -4.55834867e-02  1.63019312e-02 -1.86626609e-02  1.18628231e-01]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((8, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([1.5735952963858392e+03,2.3761303919145971e+02,5.2332977870138201e+01,4.7281081235122091e+00,3.9325830426169639e-01,8.5907170030661746e+00,4.9039633283239870e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "6s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:49:09 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  6005.29358687        1
[INPUT] 0    0    [1    /1   ]  793.954315252        1
[INPUT] 0    0    [1    /1   ]  166.127776491        1
[INPUT] 0    0    [1    /1   ]  44.0862648806        1
[INPUT] 0    0    [1    /1   ]  4.6728621019         1
[INPUT] 0    0    [1    /1   ]  0.392614956519       1
[INPUT] 1    0    [1    /1   ]  8.57298581476        1
[INPUT] 1    0    [1    /1   ]  0.495336237223       1

nuclear repulsion = 0
number of shells = 8
number of NR pGTOs = 12
number of NR cGTOs = 12
basis = {'Ar': [[0, [6005.293586873387, 1.0]], [0, [793.9543152517001, 1.0]], [0, [166.12777649090415, 1.0]], [0, [44.08626488059606, 1.0]], [0, [4.672862101903018, 1.0]], [0, [0.3926149565188019, 1.0]], [1, [8.572985814759548, 1.0]], [1, [0.4953362372226141, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [6005.29358687]
bas 1, expnt(s) = [793.95431525]
bas 2, expnt(s) = [166.12777649]
bas 3, expnt(s) = [44.08626488]
bas 4, expnt(s) = [4.6728621]
bas 5, expnt(s) = [0.39261496]
bas 6, expnt(s) = [8.57298581]
bas 7, expnt(s) = [0.49533624]
CPU time:       217.00
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  1  1  1  0 36 37  0]
 [ 0  1  1  1  0 38 39  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 6.00529359e+03 1.72351754e+03 7.93954315e+02 3.77886746e+02
 1.66127776e+02 1.16908668e+02 4.40862649e+01 4.32257466e+01
 4.67286210e+00 8.02975414e+00 3.92614957e-01 1.25311277e+00
 8.57298581e+00 4.27956398e+01 4.95336237e-01 1.21229836e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.314192912940687
cond(S) = 21.010064892230425
E1 = -688.7300304446427  E_coul = 184.86630725956522
init E= -503.863723185077
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.675363961661417  LUMO = 120.822619567532
  mo_energy =
[-1.21504464e+02 -1.32733217e+01 -7.62813216e+00 -7.62813216e+00
 -7.62813216e+00 -1.64516516e+00 -6.75363962e-01 -6.75363962e-01
 -6.75363962e-01  1.20822620e+02  1.13641393e+03  9.70618693e+03]
E1 = -706.166904059344  E_coul = 198.89004579779422
cycle= 1 E= -507.27685826155  delta_E= -3.41  |g|=  0.3  |ddm|= 0.311
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.331738
diis-c [-0.11004989  1.        ]
  HOMO = -0.226629168130435  LUMO = 122.179710416318
  mo_energy =
[-1.20136037e+02 -1.22439269e+01 -6.65948766e+00 -6.65948766e+00
 -6.65948766e+00 -1.15522359e+00 -2.26629168e-01 -2.26629168e-01
 -2.26629168e-01  1.22179710e+02  1.13773285e+03  9.70730240e+03]
E1 = -706.1477294371134  E_coul = 198.87060549358182
cycle= 2 E= -507.277123943532  delta_E= -0.000266  |g|= 0.00366  |ddm|= 0.00824
    CPU time for cycle= 2      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.00384759
diis-c [-1.39230499e-05 -2.83744057e-03  1.00283744e+00]
  HOMO = -0.226726326667035  LUMO = 122.177018072353
  mo_energy =
[-1.20141663e+02 -1.22445953e+01 -6.66052998e+00 -6.66052998e+00
 -6.66052998e+00 -1.15525918e+00 -2.26726327e-01 -2.26726327e-01
 -2.26726327e-01  1.22177018e+02  1.13772434e+03  9.70728956e+03]
E1 = -706.1475183184949  E_coul = 198.8703943273648
cycle= 3 E= -507.27712399113  delta_E= -4.76e-08  |g|= 5.25e-05  |ddm|= 9.63e-05
    CPU time for cycle= 3      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=6.97334e-05
diis-c [-1.02685604e-10  4.64271993e-05 -1.88745041e-02  1.01882808e+00]
  HOMO = -0.22672708974545  LUMO = 122.177000914892
  mo_energy =
[-1.20141705e+02 -1.22446008e+01 -6.66053984e+00 -6.66053984e+00
 -6.66053984e+00 -1.15525938e+00 -2.26727090e-01 -2.26727090e-01
 -2.26727090e-01  1.22177001e+02  1.13772430e+03  9.70728952e+03]
E1 = -706.1475160995216  E_coul = 198.87039210838282
cycle= 4 E= -507.277123991139  delta_E= -8.64e-12  |g|= 1.26e-07  |ddm|= 1.14e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.1475160995216  E_coul = 198.87039210838282
  HOMO = -0.226727085840833  LUMO = 122.177001053505
  mo_energy =
[-1.20141705e+02 -1.22446007e+01 -6.66053980e+00 -6.66053980e+00
 -6.66053980e+00 -1.15525938e+00 -2.26727086e-01 -2.26727086e-01
 -2.26727086e-01  1.22177001e+02  1.13772430e+03  9.70728952e+03]
E1 = -706.1475161079629  E_coul = 198.8703921168243
Extra cycle  E= -507.277123991139  delta_E= 1.14e-13  |g|= 1.68e-09  |ddm|= 3.37e-09
    CPU time for scf_cycle      0.09 sec, wall time      0.10 sec
exp = [6.00529359e+03 7.93954315e+02 1.66127776e+02 4.40862649e+01
 4.67286210e+00 3.92614957e-01 8.57298581e+00 4.95336237e-01]
E = -507.27712399113864
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((8, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([1.5735952963858392e+03,2.3761303919145971e+02,5.2332977870138201e+01,4.7281081235122091e+00,3.9325830426169639e-01,8.5907170030661746e+00,4.9039633283239870e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "6s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:49:10 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  6005.29358687        1
[INPUT] 0    0    [1    /1   ]  793.954315252        1
[INPUT] 0    0    [1    /1   ]  166.127776491        1
[INPUT] 0    0    [1    /1   ]  44.0862648806        1
[INPUT] 0    0    [1    /1   ]  4.6728621019         1
[INPUT] 0    0    [1    /1   ]  0.392614956519       1
[INPUT] 1    0    [1    /1   ]  8.57298581476        1
[INPUT] 1    0    [1    /1   ]  0.495336237223       1

nuclear repulsion = 0
number of shells = 8
number of NR pGTOs = 12
number of NR cGTOs = 12
basis = {'Ar': [[0, [6005.293586873387, 1.0]], [0, [793.9543152517001, 1.0]], [0, [166.12777649090415, 1.0]], [0, [44.08626488059606, 1.0]], [0, [4.672862101903018, 1.0]], [0, [0.3926149565188019, 1.0]], [1, [8.572985814759548, 1.0]], [1, [0.4953362372226141, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [6005.29358687]
bas 1, expnt(s) = [793.95431525]
bas 2, expnt(s) = [166.12777649]
bas 3, expnt(s) = [44.08626488]
bas 4, expnt(s) = [4.6728621]
bas 5, expnt(s) = [0.39261496]
bas 6, expnt(s) = [8.57298581]
bas 7, expnt(s) = [0.49533624]
CPU time:       217.79
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  1  1  1  0 36 37  0]
 [ 0  1  1  1  0 38 39  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 6.00529359e+03 1.72351754e+03 7.93954315e+02 3.77886746e+02
 1.66127776e+02 1.16908668e+02 4.40862649e+01 4.32257466e+01
 4.67286210e+00 8.02975414e+00 3.92614957e-01 1.25311277e+00
 8.57298581e+00 4.27956398e+01 4.95336237e-01 1.21229836e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.314192912940687
cond(S) = 21.010064892230425
E1 = -688.7300304446427  E_coul = 184.86630725956522
init E= -503.863723185077
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.675363961661417  LUMO = 120.822619567532
  mo_energy =
[-1.21504464e+02 -1.32733217e+01 -7.62813216e+00 -7.62813216e+00
 -7.62813216e+00 -1.64516516e+00 -6.75363962e-01 -6.75363962e-01
 -6.75363962e-01  1.20822620e+02  1.13641393e+03  9.70618693e+03]
E1 = -706.166904059344  E_coul = 198.89004579779422
cycle= 1 E= -507.27685826155  delta_E= -3.41  |g|=  0.3  |ddm|= 0.311
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.331738
diis-c [-0.11004989  1.        ]
  HOMO = -0.226629168130435  LUMO = 122.179710416318
  mo_energy =
[-1.20136037e+02 -1.22439269e+01 -6.65948766e+00 -6.65948766e+00
 -6.65948766e+00 -1.15522359e+00 -2.26629168e-01 -2.26629168e-01
 -2.26629168e-01  1.22179710e+02  1.13773285e+03  9.70730240e+03]
E1 = -706.1477294371134  E_coul = 198.87060549358182
cycle= 2 E= -507.277123943532  delta_E= -0.000266  |g|= 0.00366  |ddm|= 0.00824
    CPU time for cycle= 2      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.00384759
diis-c [-1.39230499e-05 -2.83744057e-03  1.00283744e+00]
  HOMO = -0.226726326667035  LUMO = 122.177018072353
  mo_energy =
[-1.20141663e+02 -1.22445953e+01 -6.66052998e+00 -6.66052998e+00
 -6.66052998e+00 -1.15525918e+00 -2.26726327e-01 -2.26726327e-01
 -2.26726327e-01  1.22177018e+02  1.13772434e+03  9.70728956e+03]
E1 = -706.1475183184949  E_coul = 198.8703943273648
cycle= 3 E= -507.27712399113  delta_E= -4.76e-08  |g|= 5.25e-05  |ddm|= 9.63e-05
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=6.97334e-05
diis-c [-1.02685604e-10  4.64271993e-05 -1.88745041e-02  1.01882808e+00]
  HOMO = -0.22672708974545  LUMO = 122.177000914892
  mo_energy =
[-1.20141705e+02 -1.22446008e+01 -6.66053984e+00 -6.66053984e+00
 -6.66053984e+00 -1.15525938e+00 -2.26727090e-01 -2.26727090e-01
 -2.26727090e-01  1.22177001e+02  1.13772430e+03  9.70728952e+03]
E1 = -706.1475160995216  E_coul = 198.87039210838282
cycle= 4 E= -507.277123991139  delta_E= -8.64e-12  |g|= 1.26e-07  |ddm|= 1.14e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.1475160995216  E_coul = 198.87039210838282
  HOMO = -0.226727085840833  LUMO = 122.177001053505
  mo_energy =
[-1.20141705e+02 -1.22446007e+01 -6.66053980e+00 -6.66053980e+00
 -6.66053980e+00 -1.15525938e+00 -2.26727086e-01 -2.26727086e-01
 -2.26727086e-01  1.22177001e+02  1.13772430e+03  9.70728952e+03]
E1 = -706.1475161079629  E_coul = 198.8703921168243
Extra cycle  E= -507.277123991139  delta_E= 1.14e-13  |g|= 1.68e-09  |ddm|= 3.37e-09
    CPU time for scf_cycle      0.09 sec, wall time      0.10 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 21.010064892230425
E1 = -706.1475161079629  E_coul = 198.8703921168243
init E= -507.277123991139
    CPU time for initialize scf      0.06 sec, wall time      0.06 sec
  HOMO = -0.226727085804386  LUMO = 122.177001054761
  mo_energy =
[-1.20141705e+02 -1.22446007e+01 -6.66053980e+00 -6.66053980e+00
 -6.66053980e+00 -1.15525938e+00 -2.26727086e-01 -2.26727086e-01
 -2.26727086e-01  1.22177001e+02  1.13772430e+03  9.70728952e+03]
E1 = -706.14751610806  E_coul = 198.87039211692135
cycle= 1 E= -507.277123991139  delta_E=    0  |g|= 2.66e-11  |ddm|= 4.2e-11
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -706.14751610806  E_coul = 198.87039211692135
  HOMO = -0.22672708580397  LUMO = 122.177001054773
  mo_energy =
[-1.20141705e+02 -1.22446007e+01 -6.66053980e+00 -6.66053980e+00
 -6.66053980e+00 -1.15525938e+00 -2.26727086e-01 -2.26727086e-01
 -2.26727086e-01  1.22177001e+02  1.13772430e+03  9.70728952e+03]
E1 = -706.1475161080616  E_coul = 198.87039211692274
Extra cycle  E= -507.277123991139  delta_E= -2.27e-13  |g|= 1.28e-12  |ddm|= 6.14e-13
    CPU time for scf_cycle      0.12 sec, wall time      0.13 sec
exp = [6.00529359e+03 7.93954315e+02 1.66127776e+02 4.40862649e+01
 4.67286210e+00 3.92614957e-01 8.57298581e+00 4.95336237e-01]
grad_E = [ 3.07702267e-05  2.01442451e-04 -1.84704400e-03  1.94560291e-03
 -7.12068094e-02  2.55050291e-02 -2.91803012e-02  1.85626021e-01]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((8, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([1.5735952963858392e+03,2.3761303919145971e+02,5.2332977870138201e+01,4.7281081235122091e+00,3.9325830426169639e-01,8.5907170030661746e+00,4.9039633283239870e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "6s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:49:13 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  5526.1351712         1
[INPUT] 0    0    [1    /1   ]  757.891682939        1
[INPUT] 0    0    [1    /1   ]  160.832889686        1
[INPUT] 0    0    [1    /1   ]  43.3459005054        1
[INPUT] 0    0    [1    /1   ]  4.63806456879        1
[INPUT] 0    0    [1    /1   ]  0.392842824285       1
[INPUT] 1    0    [1    /1   ]  8.56293121774        1
[INPUT] 1    0    [1    /1   ]  0.49749385263        1

nuclear repulsion = 0
number of shells = 8
number of NR pGTOs = 12
number of NR cGTOs = 12
basis = {'Ar': [[0, [5526.135171199407, 1.0]], [0, [757.8916829386386, 1.0]], [0, [160.8328896864838, 1.0]], [0, [43.345900505387235, 1.0]], [0, [4.63806456879168, 1.0]], [0, [0.3928428242847026, 1.0]], [1, [8.56293121774495, 1.0]], [1, [0.4974938526304879, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [5526.1351712]
bas 1, expnt(s) = [757.89168294]
bas 2, expnt(s) = [160.83288969]
bas 3, expnt(s) = [43.34590051]
bas 4, expnt(s) = [4.63806457]
bas 5, expnt(s) = [0.39284282]
bas 6, expnt(s) = [8.56293122]
bas 7, expnt(s) = [0.49749385]
CPU time:       221.21
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  1  1  1  0 36 37  0]
 [ 0  1  1  1  0 38 39  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 5.52613517e+03 1.61931430e+03 7.57891683e+02 3.64939086e+02
 1.60832890e+02 1.14102766e+02 4.33459005e+01 4.26801608e+01
 4.63806457e+00 7.98486572e+00 3.92842824e-01 1.25365819e+00
 8.56293122e+00 4.27329094e+01 4.97493853e-01 1.21890271e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.311699432718218
cond(S) = 21.947777209819915
E1 = -688.7317304429688  E_coul = 184.84346147082042
init E= -503.888268972148
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.672762396187639  LUMO = 116.202135043873
  mo_energy =
[-1.21521642e+02 -1.32717494e+01 -7.63160114e+00 -7.63160114e+00
 -7.63160114e+00 -1.64237726e+00 -6.72762396e-01 -6.72762396e-01
 -6.72762396e-01  1.16202135e+02  1.08377018e+03  8.97919418e+03]
E1 = -706.1434072778214  E_coul = 198.85851429418545
cycle= 1 E= -507.284892983636  delta_E= -3.4  |g|= 0.306  |ddm|= 0.318
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.328723
diis-c [-0.10805865  1.        ]
  HOMO = -0.222342696301974  LUMO = 117.553421481148
  mo_energy =
[-1.20160762e+02 -1.22428238e+01 -6.66367603e+00 -6.66367603e+00
 -6.66367603e+00 -1.15169129e+00 -2.22342696e-01 -2.22342696e-01
 -2.22342696e-01  1.17553421e+02  1.08508084e+03  8.98030077e+03]
E1 = -706.1228083741725  E_coul = 198.8376235492099
cycle= 2 E= -507.285184824963  delta_E= -0.000292  |g|= 0.00387  |ddm|= 0.00889
    CPU time for cycle= 2      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.00408612
diis-c [-1.57321231e-05 -2.99641527e-03  1.00299642e+00]
  HOMO = -0.222448863651042  LUMO = 117.550602630397
  mo_energy =
[-1.20166765e+02 -1.22435456e+01 -6.66480837e+00 -6.66480837e+00
 -6.66480837e+00 -1.15172961e+00 -2.22448864e-01 -2.22448864e-01
 -2.22448864e-01  1.17550603e+02  1.08507198e+03  8.98028742e+03]
E1 = -706.1225743648215  E_coul = 198.83738948466117
cycle= 3 E= -507.28518488016  delta_E= -5.52e-08  |g|= 5.66e-05  |ddm|= 0.000107
    CPU time for cycle= 3      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=7.51772e-05
diis-c [-1.15821928e-10  4.75693809e-05 -1.91476581e-02  1.01910009e+00]
  HOMO = -0.222449712081866  LUMO = 117.550583958065
  mo_energy =
[-1.20166811e+02 -1.22435517e+01 -6.66481927e+00 -6.66481927e+00
 -6.66481927e+00 -1.15172983e+00 -2.22449712e-01 -2.22449712e-01
 -2.22449712e-01  1.17550584e+02  1.08507194e+03  8.98028738e+03]
E1 = -706.122571848241  E_coul = 198.8373869680701
cycle= 4 E= -507.285184880171  delta_E= -1.06e-11  |g|= 1.4e-07  |ddm|= 1.28e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.122571848241  E_coul = 198.8373869680701
  HOMO = -0.222449707560964  LUMO = 117.550584108605
  mo_energy =
[-1.20166811e+02 -1.22435517e+01 -6.66481922e+00 -6.66481922e+00
 -6.66481922e+00 -1.15172983e+00 -2.22449708e-01 -2.22449708e-01
 -2.22449708e-01  1.17550584e+02  1.08507194e+03  8.98028738e+03]
E1 = -706.1225718580025  E_coul = 198.83738697783113
Extra cycle  E= -507.285184880171  delta_E= -4.55e-13  |g|= 1.92e-09  |ddm|= 3.93e-09
    CPU time for scf_cycle      0.09 sec, wall time      0.10 sec
exp = [5.52613517e+03 7.57891683e+02 1.60832890e+02 4.33459005e+01
 4.63806457e+00 3.92842824e-01 8.56293122e+00 4.97493853e-01]
E = -507.2851848801714
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((8, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([1.5735952963858392e+03,2.3761303919145971e+02,5.2332977870138201e+01,4.7281081235122091e+00,3.9325830426169639e-01,8.5907170030661746e+00,4.9039633283239870e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "6s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:49:14 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  5526.1351712         1
[INPUT] 0    0    [1    /1   ]  757.891682939        1
[INPUT] 0    0    [1    /1   ]  160.832889686        1
[INPUT] 0    0    [1    /1   ]  43.3459005054        1
[INPUT] 0    0    [1    /1   ]  4.63806456879        1
[INPUT] 0    0    [1    /1   ]  0.392842824285       1
[INPUT] 1    0    [1    /1   ]  8.56293121774        1
[INPUT] 1    0    [1    /1   ]  0.49749385263        1

nuclear repulsion = 0
number of shells = 8
number of NR pGTOs = 12
number of NR cGTOs = 12
basis = {'Ar': [[0, [5526.135171199407, 1.0]], [0, [757.8916829386386, 1.0]], [0, [160.8328896864838, 1.0]], [0, [43.345900505387235, 1.0]], [0, [4.63806456879168, 1.0]], [0, [0.3928428242847026, 1.0]], [1, [8.56293121774495, 1.0]], [1, [0.4974938526304879, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [5526.1351712]
bas 1, expnt(s) = [757.89168294]
bas 2, expnt(s) = [160.83288969]
bas 3, expnt(s) = [43.34590051]
bas 4, expnt(s) = [4.63806457]
bas 5, expnt(s) = [0.39284282]
bas 6, expnt(s) = [8.56293122]
bas 7, expnt(s) = [0.49749385]
CPU time:       222.03
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  1  1  1  0 36 37  0]
 [ 0  1  1  1  0 38 39  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 5.52613517e+03 1.61931430e+03 7.57891683e+02 3.64939086e+02
 1.60832890e+02 1.14102766e+02 4.33459005e+01 4.26801608e+01
 4.63806457e+00 7.98486572e+00 3.92842824e-01 1.25365819e+00
 8.56293122e+00 4.27329094e+01 4.97493853e-01 1.21890271e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.311699432718218
cond(S) = 21.947777209819915
E1 = -688.7317304429688  E_coul = 184.84346147082042
init E= -503.888268972148
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.672762396187639  LUMO = 116.202135043873
  mo_energy =
[-1.21521642e+02 -1.32717494e+01 -7.63160114e+00 -7.63160114e+00
 -7.63160114e+00 -1.64237726e+00 -6.72762396e-01 -6.72762396e-01
 -6.72762396e-01  1.16202135e+02  1.08377018e+03  8.97919418e+03]
E1 = -706.1434072778214  E_coul = 198.85851429418545
cycle= 1 E= -507.284892983636  delta_E= -3.4  |g|= 0.306  |ddm|= 0.318
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.328723
diis-c [-0.10805865  1.        ]
  HOMO = -0.222342696301974  LUMO = 117.553421481148
  mo_energy =
[-1.20160762e+02 -1.22428238e+01 -6.66367603e+00 -6.66367603e+00
 -6.66367603e+00 -1.15169129e+00 -2.22342696e-01 -2.22342696e-01
 -2.22342696e-01  1.17553421e+02  1.08508084e+03  8.98030077e+03]
E1 = -706.1228083741725  E_coul = 198.8376235492099
cycle= 2 E= -507.285184824963  delta_E= -0.000292  |g|= 0.00387  |ddm|= 0.00889
    CPU time for cycle= 2      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.00408612
diis-c [-1.57321231e-05 -2.99641527e-03  1.00299642e+00]
  HOMO = -0.222448863651042  LUMO = 117.550602630397
  mo_energy =
[-1.20166765e+02 -1.22435456e+01 -6.66480837e+00 -6.66480837e+00
 -6.66480837e+00 -1.15172961e+00 -2.22448864e-01 -2.22448864e-01
 -2.22448864e-01  1.17550603e+02  1.08507198e+03  8.98028742e+03]
E1 = -706.1225743648215  E_coul = 198.83738948466117
cycle= 3 E= -507.28518488016  delta_E= -5.52e-08  |g|= 5.66e-05  |ddm|= 0.000107
    CPU time for cycle= 3      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=7.51772e-05
diis-c [-1.15821928e-10  4.75693809e-05 -1.91476581e-02  1.01910009e+00]
  HOMO = -0.222449712081866  LUMO = 117.550583958065
  mo_energy =
[-1.20166811e+02 -1.22435517e+01 -6.66481927e+00 -6.66481927e+00
 -6.66481927e+00 -1.15172983e+00 -2.22449712e-01 -2.22449712e-01
 -2.22449712e-01  1.17550584e+02  1.08507194e+03  8.98028738e+03]
E1 = -706.122571848241  E_coul = 198.8373869680701
cycle= 4 E= -507.285184880171  delta_E= -1.06e-11  |g|= 1.4e-07  |ddm|= 1.28e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.122571848241  E_coul = 198.8373869680701
  HOMO = -0.222449707560964  LUMO = 117.550584108605
  mo_energy =
[-1.20166811e+02 -1.22435517e+01 -6.66481922e+00 -6.66481922e+00
 -6.66481922e+00 -1.15172983e+00 -2.22449708e-01 -2.22449708e-01
 -2.22449708e-01  1.17550584e+02  1.08507194e+03  8.98028738e+03]
E1 = -706.1225718580025  E_coul = 198.83738697783113
Extra cycle  E= -507.285184880171  delta_E= -4.55e-13  |g|= 1.92e-09  |ddm|= 3.93e-09
    CPU time for scf_cycle      0.09 sec, wall time      0.09 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 21.947777209819915
E1 = -706.1225718580025  E_coul = 198.83738697783113
init E= -507.285184880171
    CPU time for initialize scf      0.05 sec, wall time      0.05 sec
  HOMO = -0.222449707517693  LUMO = 117.550584110012
  mo_energy =
[-1.20166811e+02 -1.22435517e+01 -6.66481922e+00 -6.66481922e+00
 -6.66481922e+00 -1.15172983e+00 -2.22449708e-01 -2.22449708e-01
 -2.22449708e-01  1.17550584e+02  1.08507194e+03  8.98028738e+03]
E1 = -706.1225718581185  E_coul = 198.83738697794738
cycle= 1 E= -507.285184880171  delta_E= 3.41e-13  |g|= 3.14e-11  |ddm|= 5.02e-11
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -706.1225718581185  E_coul = 198.83738697794738
  HOMO = -0.22244970751718  LUMO = 117.550584110026
  mo_energy =
[-1.20166811e+02 -1.22435517e+01 -6.66481922e+00 -6.66481922e+00
 -6.66481922e+00 -1.15172983e+00 -2.22449708e-01 -2.22449708e-01
 -2.22449708e-01  1.17550584e+02  1.08507194e+03  8.98028738e+03]
E1 = -706.1225718581205  E_coul = 198.8373869779488
Extra cycle  E= -507.285184880172  delta_E= -6.82e-13  |g|= 1.87e-12  |ddm|= 7.45e-13
    CPU time for scf_cycle      0.12 sec, wall time      0.12 sec
exp = [5.52613517e+03 7.57891683e+02 1.60832890e+02 4.33459005e+01
 4.63806457e+00 3.92842824e-01 8.56293122e+00 4.97493853e-01]
grad_E = [ 2.31326110e-05  3.02955960e-04 -2.66511433e-03  2.89675583e-03
 -1.02818217e-01  3.71077669e-02 -4.22633772e-02  2.69588586e-01]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((8, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([1.5735952963858392e+03,2.3761303919145971e+02,5.2332977870138201e+01,4.7281081235122091e+00,3.9325830426169639e-01,8.5907170030661746e+00,4.9039633283239870e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "6s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:49:17 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  4767.41287717        1
[INPUT] 0    0    [1    /1   ]  699.041999291        1
[INPUT] 0    0    [1    /1   ]  153.46389677         1
[INPUT] 0    0    [1    /1   ]  42.3326651013        1
[INPUT] 0    0    [1    /1   ]  4.62410137414        1
[INPUT] 0    0    [1    /1   ]  0.392855040094       1
[INPUT] 1    0    [1    /1   ]  8.55943559809        1
[INPUT] 1    0    [1    /1   ]  0.498413185233       1

nuclear repulsion = 0
number of shells = 8
number of NR pGTOs = 12
number of NR cGTOs = 12
basis = {'Ar': [[0, [4767.412877173297, 1.0]], [0, [699.0419992912911, 1.0]], [0, [153.46389677001739, 1.0]], [0, [42.332665101346024, 1.0]], [0, [4.624101374144919, 1.0]], [0, [0.39285504009373723, 1.0]], [1, [8.55943559809207, 1.0]], [1, [0.4984131852329113, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [4767.41287717]
bas 1, expnt(s) = [699.04199929]
bas 2, expnt(s) = [153.46389677]
bas 3, expnt(s) = [42.3326651]
bas 4, expnt(s) = [4.62410137]
bas 5, expnt(s) = [0.39285504]
bas 6, expnt(s) = [8.5594356]
bas 7, expnt(s) = [0.49841319]
CPU time:       225.47
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  1  1  1  0 36 37  0]
 [ 0  1  1  1  0 38 39  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 4.76741288e+03 1.44952963e+03 6.99041999e+02 3.43472900e+02
 1.53463897e+02 1.10158925e+02 4.23326651e+01 4.19296978e+01
 4.62410137e+00 7.96682971e+00 3.92855040e-01 1.25368743e+00
 8.55943560e+00 4.27111046e+01 4.98413185e-01 1.22171891e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.310675374630407
cond(S) = 23.88640087637451
E1 = -688.7752575739573  E_coul = 184.84020379140975
init E= -503.935053782548
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.671642397295351  LUMO = 110.091612083461
  mo_energy =
[-1.21532116e+02 -1.32699085e+01 -7.63263957e+00 -7.63263957e+00
 -7.63263957e+00 -1.64107759e+00 -6.71642397e-01 -6.71642397e-01
 -6.71642397e-01  1.10091612e+02  1.00339648e+03  7.83516761e+03]
E1 = -706.1432624895857  E_coul = 198.8473134980273
cycle= 1 E= -507.295948991558  delta_E= -3.36  |g|= 0.311  |ddm|= 0.322
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.322687
diis-c [-0.10412687  1.        ]
  HOMO = -0.220561017233628  LUMO = 111.437277259106
  mo_energy =
[-1.20175075e+02 -1.22414886e+01 -6.66536069e+00 -6.66536069e+00
 -6.66536069e+00 -1.15014780e+00 -2.20561017e-01 -2.20561017e-01
 -2.20561017e-01  1.11437277e+02  1.00470634e+03  7.83627963e+03]
E1 = -706.1207854708073  E_coul = 198.8245148574248
cycle= 2 E= -507.296270613382  delta_E= -0.000322  |g|= 0.0041  |ddm|= 0.00976
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.00433042
diis-c [-1.77897137e-05 -3.05042818e-03  1.00305043e+00]
  HOMO = -0.220678951342673  LUMO = 111.434304219671
  mo_energy =
[-1.20181566e+02 -1.22422841e+01 -6.66661201e+00 -6.66661201e+00
 -6.66661201e+00 -1.15019003e+00 -2.20678951e-01 -2.20678951e-01
 -2.20678951e-01  1.11434304e+02  1.00469707e+03  7.83626567e+03]
E1 = -706.1205196411353  E_coul = 198.8242489629131
cycle= 3 E= -507.296270678222  delta_E= -6.48e-08  |g|= 6.18e-05  |ddm|= 0.000121
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=8.23766e-05
diis-c [-1.38169357e-10  4.90383784e-05 -1.97427361e-02  1.01969370e+00]
  HOMO = -0.220679932208036  LUMO = 111.434282930966
  mo_energy =
[-1.20181618e+02 -1.22422911e+01 -6.66662454e+00 -6.66662454e+00
 -6.66662454e+00 -1.15019028e+00 -2.20679932e-01 -2.20679932e-01
 -2.20679932e-01  1.11434283e+02  1.00469702e+03  7.83626562e+03]
E1 = -706.120516651338  E_coul = 198.82424597310242
cycle= 4 E= -507.296270678236  delta_E= -1.34e-11  |g|= 1.62e-07  |ddm|= 1.5e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.120516651338  E_coul = 198.82424597310242
  HOMO = -0.220679926697377  LUMO = 111.43428309938
  mo_energy =
[-1.20181618e+02 -1.22422910e+01 -6.66662448e+00 -6.66662448e+00
 -6.66662448e+00 -1.15019028e+00 -2.20679927e-01 -2.20679927e-01
 -2.20679927e-01  1.11434283e+02  1.00469702e+03  7.83626562e+03]
E1 = -706.1205166632734  E_coul = 198.82424598503775
Extra cycle  E= -507.296270678236  delta_E= -5.68e-14  |g|= 2.3e-09  |ddm|= 4.87e-09
    CPU time for scf_cycle      0.10 sec, wall time      0.10 sec
exp = [4.76741288e+03 6.99041999e+02 1.53463897e+02 4.23326651e+01
 4.62410137e+00 3.92855040e-01 8.55943560e+00 4.98413185e-01]
E = -507.29627067823566
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((8, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([1.5735952963858392e+03,2.3761303919145971e+02,5.2332977870138201e+01,4.7281081235122091e+00,3.9325830426169639e-01,8.5907170030661746e+00,4.9039633283239870e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "6s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:49:18 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  4767.41287717        1
[INPUT] 0    0    [1    /1   ]  699.041999291        1
[INPUT] 0    0    [1    /1   ]  153.46389677         1
[INPUT] 0    0    [1    /1   ]  42.3326651013        1
[INPUT] 0    0    [1    /1   ]  4.62410137414        1
[INPUT] 0    0    [1    /1   ]  0.392855040094       1
[INPUT] 1    0    [1    /1   ]  8.55943559809        1
[INPUT] 1    0    [1    /1   ]  0.498413185233       1

nuclear repulsion = 0
number of shells = 8
number of NR pGTOs = 12
number of NR cGTOs = 12
basis = {'Ar': [[0, [4767.412877173297, 1.0]], [0, [699.0419992912911, 1.0]], [0, [153.46389677001739, 1.0]], [0, [42.332665101346024, 1.0]], [0, [4.624101374144919, 1.0]], [0, [0.39285504009373723, 1.0]], [1, [8.55943559809207, 1.0]], [1, [0.4984131852329113, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [4767.41287717]
bas 1, expnt(s) = [699.04199929]
bas 2, expnt(s) = [153.46389677]
bas 3, expnt(s) = [42.3326651]
bas 4, expnt(s) = [4.62410137]
bas 5, expnt(s) = [0.39285504]
bas 6, expnt(s) = [8.5594356]
bas 7, expnt(s) = [0.49841319]
CPU time:       226.30
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  1  1  1  0 36 37  0]
 [ 0  1  1  1  0 38 39  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 4.76741288e+03 1.44952963e+03 6.99041999e+02 3.43472900e+02
 1.53463897e+02 1.10158925e+02 4.23326651e+01 4.19296978e+01
 4.62410137e+00 7.96682971e+00 3.92855040e-01 1.25368743e+00
 8.55943560e+00 4.27111046e+01 4.98413185e-01 1.22171891e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.310675374630407
cond(S) = 23.88640087637451
E1 = -688.7752575739573  E_coul = 184.84020379140975
init E= -503.935053782548
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.671642397295351  LUMO = 110.091612083461
  mo_energy =
[-1.21532116e+02 -1.32699085e+01 -7.63263957e+00 -7.63263957e+00
 -7.63263957e+00 -1.64107759e+00 -6.71642397e-01 -6.71642397e-01
 -6.71642397e-01  1.10091612e+02  1.00339648e+03  7.83516761e+03]
E1 = -706.1432624895857  E_coul = 198.8473134980273
cycle= 1 E= -507.295948991558  delta_E= -3.36  |g|= 0.311  |ddm|= 0.322
    CPU time for cycle= 1      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.322687
diis-c [-0.10412687  1.        ]
  HOMO = -0.220561017233628  LUMO = 111.437277259106
  mo_energy =
[-1.20175075e+02 -1.22414886e+01 -6.66536069e+00 -6.66536069e+00
 -6.66536069e+00 -1.15014780e+00 -2.20561017e-01 -2.20561017e-01
 -2.20561017e-01  1.11437277e+02  1.00470634e+03  7.83627963e+03]
E1 = -706.1207854708073  E_coul = 198.8245148574248
cycle= 2 E= -507.296270613382  delta_E= -0.000322  |g|= 0.0041  |ddm|= 0.00976
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00433042
diis-c [-1.77897137e-05 -3.05042818e-03  1.00305043e+00]
  HOMO = -0.220678951342673  LUMO = 111.434304219671
  mo_energy =
[-1.20181566e+02 -1.22422841e+01 -6.66661201e+00 -6.66661201e+00
 -6.66661201e+00 -1.15019003e+00 -2.20678951e-01 -2.20678951e-01
 -2.20678951e-01  1.11434304e+02  1.00469707e+03  7.83626567e+03]
E1 = -706.1205196411353  E_coul = 198.8242489629131
cycle= 3 E= -507.296270678222  delta_E= -6.48e-08  |g|= 6.18e-05  |ddm|= 0.000121
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=8.23766e-05
diis-c [-1.38169357e-10  4.90383784e-05 -1.97427361e-02  1.01969370e+00]
  HOMO = -0.220679932208036  LUMO = 111.434282930966
  mo_energy =
[-1.20181618e+02 -1.22422911e+01 -6.66662454e+00 -6.66662454e+00
 -6.66662454e+00 -1.15019028e+00 -2.20679932e-01 -2.20679932e-01
 -2.20679932e-01  1.11434283e+02  1.00469702e+03  7.83626562e+03]
E1 = -706.120516651338  E_coul = 198.82424597310242
cycle= 4 E= -507.296270678236  delta_E= -1.34e-11  |g|= 1.62e-07  |ddm|= 1.5e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.120516651338  E_coul = 198.82424597310242
  HOMO = -0.220679926697377  LUMO = 111.43428309938
  mo_energy =
[-1.20181618e+02 -1.22422910e+01 -6.66662448e+00 -6.66662448e+00
 -6.66662448e+00 -1.15019028e+00 -2.20679927e-01 -2.20679927e-01
 -2.20679927e-01  1.11434283e+02  1.00469702e+03  7.83626562e+03]
E1 = -706.1205166632734  E_coul = 198.82424598503775
Extra cycle  E= -507.296270678236  delta_E= -5.68e-14  |g|= 2.3e-09  |ddm|= 4.87e-09
    CPU time for scf_cycle      0.10 sec, wall time      0.11 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 23.88640087637451
E1 = -706.1205166632734  E_coul = 198.82424598503775
init E= -507.296270678236
    CPU time for initialize scf      0.06 sec, wall time      0.06 sec
  HOMO = -0.2206799266428  LUMO = 111.434283101028
  mo_energy =
[-1.20181618e+02 -1.22422910e+01 -6.66662448e+00 -6.66662448e+00
 -6.66662448e+00 -1.15019028e+00 -2.20679927e-01 -2.20679927e-01
 -2.20679927e-01  1.11434283e+02  1.00469702e+03  7.83626562e+03]
E1 = -706.1205166634209  E_coul = 198.82424598518566
cycle= 1 E= -507.296270678235  delta_E= 4.55e-13  |g|= 3.83e-11  |ddm|= 6.43e-11
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -706.1205166634209  E_coul = 198.82424598518566
  HOMO = -0.220679926642137  LUMO = 111.434283101046
  mo_energy =
[-1.20181618e+02 -1.22422910e+01 -6.66662448e+00 -6.66662448e+00
 -6.66662448e+00 -1.15019028e+00 -2.20679927e-01 -2.20679927e-01
 -2.20679927e-01  1.11434283e+02  1.00469702e+03  7.83626562e+03]
E1 = -706.1205166634235  E_coul = 198.82424598518784
Extra cycle  E= -507.296270678236  delta_E= -3.98e-13  |g|= 2.06e-12  |ddm|= 9.84e-13
    CPU time for scf_cycle      0.12 sec, wall time      0.13 sec
exp = [4.76741288e+03 6.99041999e+02 1.53463897e+02 4.23326651e+01
 4.62410137e+00 3.92855040e-01 8.55943560e+00 4.98413185e-01]
grad_E = [ 3.43571745e-06  3.57813687e-04 -2.84676932e-03  3.20877581e-03
 -1.14209546e-01  4.24968615e-02 -4.73268248e-02  3.04191059e-01]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((8, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([1.5735952963858392e+03,2.3761303919145971e+02,5.2332977870138201e+01,4.7281081235122091e+00,3.9325830426169639e-01,8.5907170030661746e+00,4.9039633283239870e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "6s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:49:22 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  4472.85261099        1
[INPUT] 0    0    [1    /1   ]  670.113522142        1
[INPUT] 0    0    [1    /1   ]  151.009389523        1
[INPUT] 0    0    [1    /1   ]  42.010362938         1
[INPUT] 0    0    [1    /1   ]  4.66777928139        1
[INPUT] 0    0    [1    /1   ]  0.392356565679       1
[INPUT] 1    0    [1    /1   ]  8.57319475873        1
[INPUT] 1    0    [1    /1   ]  0.495716426684       1

nuclear repulsion = 0
number of shells = 8
number of NR pGTOs = 12
number of NR cGTOs = 12
basis = {'Ar': [[0, [4472.852610991102, 1.0]], [0, [670.1135221419183, 1.0]], [0, [151.0093895231435, 1.0]], [0, [42.01036293803508, 1.0]], [0, [4.66777928139444, 1.0]], [0, [0.392356565679028, 1.0]], [1, [8.573194758730981, 1.0]], [1, [0.49571642668396004, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [4472.85261099]
bas 1, expnt(s) = [670.11352214]
bas 2, expnt(s) = [151.00938952]
bas 3, expnt(s) = [42.01036294]
bas 4, expnt(s) = [4.66777928]
bas 5, expnt(s) = [0.39235657]
bas 6, expnt(s) = [8.57319476]
bas 7, expnt(s) = [0.49571643]
CPU time:       229.74
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  1  1  1  0 36 37  0]
 [ 0  1  1  1  0 38 39  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 4.47285261e+03 1.38182633e+03 6.70113522e+02 3.32756318e+02
 1.51009390e+02 1.08834851e+02 4.20103629e+01 4.16900436e+01
 4.66777928e+00 8.02320259e+00 3.92356566e-01 1.25249418e+00
 8.57319476e+00 4.27969436e+01 4.95716427e-01 1.21346158e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.31401255057684
cond(S) = 25.04491855117487
E1 = -688.8388339291047  E_coul = 184.87240170135732
init E= -503.966432227747
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.674888657033128  LUMO = 108.374234172668
  mo_energy =
[-1.21520257e+02 -1.32702066e+01 -7.62819713e+00 -7.62819713e+00
 -7.62819713e+00 -1.64424833e+00 -6.74888657e-01 -6.74888657e-01
 -6.74888657e-01  1.08374234e+02  9.68585434e+02  7.37667601e+03]
E1 = -706.1829396058649  E_coul = 198.87847127222255
cycle= 1 E= -507.304468333642  delta_E= -3.34  |g|= 0.307  |ddm|= 0.314
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.321066
diis-c [-0.10308314  1.        ]
  HOMO = -0.226109661852511  LUMO = 109.720876785703
  mo_energy =
[-1.20155833e+02 -1.22420114e+01 -6.66081169e+00 -6.66081169e+00
 -6.66081169e+00 -1.15454627e+00 -2.26109662e-01 -2.26109662e-01
 -2.26109662e-01  1.09720877e+02  9.69907458e+02  7.37780862e+03]
E1 = -706.160230491577  E_coul = 198.85544485128236
cycle= 2 E= -507.304785640295  delta_E= -0.000317  |g|= 0.00405  |ddm|= 0.00988
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00426481
diis-c [-1.74144229e-05 -2.74824004e-03  1.00274824e+00]
  HOMO = -0.226228481641961  LUMO = 109.717899347922
  mo_energy =
[-1.20162378e+02 -1.22428197e+01 -6.66207655e+00 -6.66207655e+00
 -6.66207655e+00 -1.15458940e+00 -2.26228482e-01 -2.26228482e-01
 -2.26228482e-01  1.09717899e+02  9.69898190e+02  7.37779461e+03]
E1 = -706.1599596962471  E_coul = 198.8551739915875
cycle= 3 E= -507.30478570466  delta_E= -6.44e-08  |g|= 6.28e-05  |ddm|= 0.000123
    CPU time for cycle= 3      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=8.36701e-05
diis-c [-1.47255681e-10  4.86588920e-05 -2.02811780e-02  1.02023252e+00]
  HOMO = -0.226229513327539  LUMO = 109.717876606062
  mo_energy =
[-1.20162434e+02 -1.22428271e+01 -6.66208971e+00 -6.66208971e+00
 -6.66208971e+00 -1.15458968e+00 -2.26229513e-01 -2.26229513e-01
 -2.26229513e-01  1.09717877e+02  9.69898136e+02  7.37779455e+03]
E1 = -706.1599565301033  E_coul = 198.85517082542964
cycle= 4 E= -507.304785704674  delta_E= -1.4e-11  |g|= 1.71e-07  |ddm|= 1.58e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.1599565301033  E_coul = 198.85517082542964
  HOMO = -0.226229507469561  LUMO = 109.717876781096
  mo_energy =
[-1.20162433e+02 -1.22428271e+01 -6.66208965e+00 -6.66208965e+00
 -6.66208965e+00 -1.15458968e+00 -2.26229507e-01 -2.26229507e-01
 -2.26229507e-01  1.09717877e+02  9.69898137e+02  7.37779455e+03]
E1 = -706.1599565428777  E_coul = 198.855170838204
Extra cycle  E= -507.304785704674  delta_E= -5.68e-14  |g|= 2.45e-09  |ddm|= 5.25e-09
    CPU time for scf_cycle      0.10 sec, wall time      0.10 sec
exp = [4.47285261e+03 6.70113522e+02 1.51009390e+02 4.20103629e+01
 4.66777928e+00 3.92356566e-01 8.57319476e+00 4.95716427e-01]
E = -507.3047857046737
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((8, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([1.5735952963858392e+03,2.3761303919145971e+02,5.2332977870138201e+01,4.7281081235122091e+00,3.9325830426169639e-01,8.5907170030661746e+00,4.9039633283239870e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "6s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:49:22 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  4472.85261099        1
[INPUT] 0    0    [1    /1   ]  670.113522142        1
[INPUT] 0    0    [1    /1   ]  151.009389523        1
[INPUT] 0    0    [1    /1   ]  42.010362938         1
[INPUT] 0    0    [1    /1   ]  4.66777928139        1
[INPUT] 0    0    [1    /1   ]  0.392356565679       1
[INPUT] 1    0    [1    /1   ]  8.57319475873        1
[INPUT] 1    0    [1    /1   ]  0.495716426684       1

nuclear repulsion = 0
number of shells = 8
number of NR pGTOs = 12
number of NR cGTOs = 12
basis = {'Ar': [[0, [4472.852610991102, 1.0]], [0, [670.1135221419183, 1.0]], [0, [151.0093895231435, 1.0]], [0, [42.01036293803508, 1.0]], [0, [4.66777928139444, 1.0]], [0, [0.392356565679028, 1.0]], [1, [8.573194758730981, 1.0]], [1, [0.49571642668396004, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [4472.85261099]
bas 1, expnt(s) = [670.11352214]
bas 2, expnt(s) = [151.00938952]
bas 3, expnt(s) = [42.01036294]
bas 4, expnt(s) = [4.66777928]
bas 5, expnt(s) = [0.39235657]
bas 6, expnt(s) = [8.57319476]
bas 7, expnt(s) = [0.49571643]
CPU time:       230.58
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  1  1  1  0 36 37  0]
 [ 0  1  1  1  0 38 39  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 4.47285261e+03 1.38182633e+03 6.70113522e+02 3.32756318e+02
 1.51009390e+02 1.08834851e+02 4.20103629e+01 4.16900436e+01
 4.66777928e+00 8.02320259e+00 3.92356566e-01 1.25249418e+00
 8.57319476e+00 4.27969436e+01 4.95716427e-01 1.21346158e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.31401255057684
cond(S) = 25.04491855117487
E1 = -688.8388339291047  E_coul = 184.87240170135732
init E= -503.966432227747
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.674888657033128  LUMO = 108.374234172668
  mo_energy =
[-1.21520257e+02 -1.32702066e+01 -7.62819713e+00 -7.62819713e+00
 -7.62819713e+00 -1.64424833e+00 -6.74888657e-01 -6.74888657e-01
 -6.74888657e-01  1.08374234e+02  9.68585434e+02  7.37667601e+03]
E1 = -706.1829396058649  E_coul = 198.87847127222255
cycle= 1 E= -507.304468333642  delta_E= -3.34  |g|= 0.307  |ddm|= 0.314
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.321066
diis-c [-0.10308314  1.        ]
  HOMO = -0.226109661852511  LUMO = 109.720876785703
  mo_energy =
[-1.20155833e+02 -1.22420114e+01 -6.66081169e+00 -6.66081169e+00
 -6.66081169e+00 -1.15454627e+00 -2.26109662e-01 -2.26109662e-01
 -2.26109662e-01  1.09720877e+02  9.69907458e+02  7.37780862e+03]
E1 = -706.160230491577  E_coul = 198.85544485128236
cycle= 2 E= -507.304785640295  delta_E= -0.000317  |g|= 0.00405  |ddm|= 0.00988
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00426481
diis-c [-1.74144229e-05 -2.74824004e-03  1.00274824e+00]
  HOMO = -0.226228481641961  LUMO = 109.717899347922
  mo_energy =
[-1.20162378e+02 -1.22428197e+01 -6.66207655e+00 -6.66207655e+00
 -6.66207655e+00 -1.15458940e+00 -2.26228482e-01 -2.26228482e-01
 -2.26228482e-01  1.09717899e+02  9.69898190e+02  7.37779461e+03]
E1 = -706.1599596962471  E_coul = 198.8551739915875
cycle= 3 E= -507.30478570466  delta_E= -6.44e-08  |g|= 6.28e-05  |ddm|= 0.000123
    CPU time for cycle= 3      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=8.36701e-05
diis-c [-1.47255681e-10  4.86588920e-05 -2.02811780e-02  1.02023252e+00]
  HOMO = -0.226229513327539  LUMO = 109.717876606062
  mo_energy =
[-1.20162434e+02 -1.22428271e+01 -6.66208971e+00 -6.66208971e+00
 -6.66208971e+00 -1.15458968e+00 -2.26229513e-01 -2.26229513e-01
 -2.26229513e-01  1.09717877e+02  9.69898136e+02  7.37779455e+03]
E1 = -706.1599565301033  E_coul = 198.85517082542964
cycle= 4 E= -507.304785704674  delta_E= -1.4e-11  |g|= 1.71e-07  |ddm|= 1.58e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.1599565301033  E_coul = 198.85517082542964
  HOMO = -0.226229507469561  LUMO = 109.717876781096
  mo_energy =
[-1.20162433e+02 -1.22428271e+01 -6.66208965e+00 -6.66208965e+00
 -6.66208965e+00 -1.15458968e+00 -2.26229507e-01 -2.26229507e-01
 -2.26229507e-01  1.09717877e+02  9.69898137e+02  7.37779455e+03]
E1 = -706.1599565428777  E_coul = 198.855170838204
Extra cycle  E= -507.304785704674  delta_E= -5.68e-14  |g|= 2.45e-09  |ddm|= 5.25e-09
    CPU time for scf_cycle      0.10 sec, wall time      0.10 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 25.04491855117487
E1 = -706.1599565428777  E_coul = 198.855170838204
init E= -507.304785704674
    CPU time for initialize scf      0.05 sec, wall time      0.05 sec
  HOMO = -0.226229507411  LUMO = 109.717876782835
  mo_energy =
[-1.20162433e+02 -1.22428271e+01 -6.66208965e+00 -6.66208965e+00
 -6.66208965e+00 -1.15458968e+00 -2.26229507e-01 -2.26229507e-01
 -2.26229507e-01  1.09717877e+02  9.69898137e+02  7.37779455e+03]
E1 = -706.159956543038  E_coul = 198.85517083836442
cycle= 1 E= -507.304785704674  delta_E= 1.14e-13  |g|= 4.11e-11  |ddm|= 7e-11
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -706.159956543038  E_coul = 198.85517083836442
  HOMO = -0.226229507410283  LUMO = 109.717876782855
  mo_energy =
[-1.20162433e+02 -1.22428271e+01 -6.66208965e+00 -6.66208965e+00
 -6.66208965e+00 -1.15458968e+00 -2.26229507e-01 -2.26229507e-01
 -2.26229507e-01  1.09717877e+02  9.69898137e+02  7.37779455e+03]
E1 = -706.1599565430402  E_coul = 198.8551708383668
Extra cycle  E= -507.304785704673  delta_E= 2.27e-13  |g|= 1.15e-12  |ddm|= 1.07e-12
    CPU time for scf_cycle      0.12 sec, wall time      0.12 sec
exp = [4.47285261e+03 6.70113522e+02 1.51009390e+02 4.20103629e+01
 4.66777928e+00 3.92356566e-01 8.57319476e+00 4.95716427e-01]
grad_E = [ 3.88951924e-07  1.35034800e-04 -1.48989546e-03  1.40516472e-03
 -7.36266101e-02  2.85950315e-02 -3.05558241e-02  1.97205476e-01]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((8, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([1.5735952963858392e+03,2.3761303919145971e+02,5.2332977870138201e+01,4.7281081235122091e+00,3.9325830426169639e-01,8.5907170030661746e+00,4.9039633283239870e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "6s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:49:26 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  4539.32083093        1
[INPUT] 0    0    [1    /1   ]  681.826368044        1
[INPUT] 0    0    [1    /1   ]  154.254344708        1
[INPUT] 0    0    [1    /1   ]  42.4925791032        1
[INPUT] 0    0    [1    /1   ]  4.74922956395        1
[INPUT] 0    0    [1    /1   ]  0.391527621563       1
[INPUT] 1    0    [1    /1   ]  8.5977920027         1
[INPUT] 1    0    [1    /1   ]  0.490591576223       1

nuclear repulsion = 0
number of shells = 8
number of NR pGTOs = 12
number of NR cGTOs = 12
basis = {'Ar': [[0, [4539.320830930844, 1.0]], [0, [681.8263680444552, 1.0]], [0, [154.25434470799027, 1.0]], [0, [42.49257910322928, 1.0]], [0, [4.74922956395182, 1.0]], [0, [0.3915276215632604, 1.0]], [1, [8.59779200269567, 1.0]], [1, [0.49059157622317534, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [4539.32083093]
bas 1, expnt(s) = [681.82636804]
bas 2, expnt(s) = [154.25434471]
bas 3, expnt(s) = [42.4925791]
bas 4, expnt(s) = [4.74922956]
bas 5, expnt(s) = [0.39152762]
bas 6, expnt(s) = [8.597792]
bas 7, expnt(s) = [0.49059158]
CPU time:       234.03
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  1  1  1  0 36 37  0]
 [ 0  1  1  1  0 38 39  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 4.53932083e+03 1.39719873e+03 6.81826368e+02 3.37109017e+02
 1.54254345e+02 1.10584199e+02 4.24925791e+01 4.20484356e+01
 4.74922956e+00 8.12797569e+00 3.91527622e-01 1.25050902e+00
 8.59779200e+00 4.29504838e+01 4.90591576e-01 1.19780053e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.31967685473837
cond(S) = 24.873517758334398
E1 = -688.889573150301  E_coul = 184.90993196870858
init E= -503.979641181592
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.68137221163768  LUMO = 111.460275360473
  mo_energy =
[-1.21497263e+02 -1.32717318e+01 -7.62137303e+00 -7.62137303e+00
 -7.62137303e+00 -1.65072425e+00 -6.81372212e-01 -6.81372212e-01
 -6.81372212e-01  1.11460275e+02  9.90875349e+02  7.50727388e+03]
E1 = -706.2401800124712  E_coul = 198.93017389567052
cycle= 1 E= -507.310006116801  delta_E= -3.33  |g|= 0.295  |ddm|=  0.3
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.320664
diis-c [-0.10282515  1.        ]
  HOMO = -0.236538834741653  LUMO = 112.815201715295
  mo_energy =
[-1.20116810e+02 -1.22429979e+01 -6.65258875e+00 -6.65258875e+00
 -6.65258875e+00 -1.16286488e+00 -2.36538835e-01 -2.36538835e-01
 -2.36538835e-01  1.12815202e+02  9.92218177e+02  7.50843627e+03]
E1 = -706.2190021778093  E_coul = 198.90871347815033
cycle= 2 E= -507.310288699659  delta_E= -0.000283  |g|= 0.00376  |ddm|= 0.00918
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00393461
diis-c [-1.49012630e-05 -2.38057106e-03  1.00238057e+00]
  HOMO = -0.236647307044124  LUMO = 112.812372381869
  mo_energy =
[-1.20122948e+02 -1.22437516e+01 -6.65375529e+00 -6.65375529e+00
 -6.65375529e+00 -1.16290544e+00 -2.36647307e-01 -2.36647307e-01
 -2.36647307e-01  1.12812372e+02  9.92209322e+02  7.50842281e+03]
E1 = -706.2187560448543  E_coul = 198.9084672907603
cycle= 3 E= -507.310288754094  delta_E= -5.44e-08  |g|= 5.86e-05  |ddm|= 0.000112
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=7.797e-05
diis-c [-1.32317398e-10  4.84187209e-05 -2.04330610e-02  1.02038464e+00]
  HOMO = -0.236648259036872  LUMO = 112.812350612329
  mo_energy =
[-1.20123001e+02 -1.22437586e+01 -6.65376753e+00 -6.65376753e+00
 -6.65376753e+00 -1.16290570e+00 -2.36648259e-01 -2.36648259e-01
 -2.36648259e-01  1.12812351e+02  9.92209269e+02  7.50842276e+03]
E1 = -706.2187531525975  E_coul = 198.9084643984918
cycle= 4 E= -507.310288754106  delta_E= -1.17e-11  |g|= 1.56e-07  |ddm|= 1.44e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.2187531525975  E_coul = 198.9084643984918
  HOMO = -0.236648253846081  LUMO = 112.812350775048
  mo_energy =
[-1.20123001e+02 -1.22437585e+01 -6.65376747e+00 -6.65376747e+00
 -6.65376747e+00 -1.16290570e+00 -2.36648254e-01 -2.36648254e-01
 -2.36648254e-01  1.12812351e+02  9.92209270e+02  7.50842276e+03]
E1 = -706.2187531640166  E_coul = 198.90846440991078
Extra cycle  E= -507.310288754106  delta_E= -5.68e-14  |g|= 2.21e-09  |ddm|= 4.68e-09
    CPU time for scf_cycle      0.10 sec, wall time      0.10 sec
exp = [4.53932083e+03 6.81826368e+02 1.54254345e+02 4.24925791e+01
 4.74922956e+00 3.91527622e-01 8.59779200e+00 4.90591576e-01]
E = -507.3102887541058
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((8, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([1.5735952963858392e+03,2.3761303919145971e+02,5.2332977870138201e+01,4.7281081235122091e+00,3.9325830426169639e-01,8.5907170030661746e+00,4.9039633283239870e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "6s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:49:27 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  4539.32083093        1
[INPUT] 0    0    [1    /1   ]  681.826368044        1
[INPUT] 0    0    [1    /1   ]  154.254344708        1
[INPUT] 0    0    [1    /1   ]  42.4925791032        1
[INPUT] 0    0    [1    /1   ]  4.74922956395        1
[INPUT] 0    0    [1    /1   ]  0.391527621563       1
[INPUT] 1    0    [1    /1   ]  8.5977920027         1
[INPUT] 1    0    [1    /1   ]  0.490591576223       1

nuclear repulsion = 0
number of shells = 8
number of NR pGTOs = 12
number of NR cGTOs = 12
basis = {'Ar': [[0, [4539.320830930844, 1.0]], [0, [681.8263680444552, 1.0]], [0, [154.25434470799027, 1.0]], [0, [42.49257910322928, 1.0]], [0, [4.74922956395182, 1.0]], [0, [0.3915276215632604, 1.0]], [1, [8.59779200269567, 1.0]], [1, [0.49059157622317534, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [4539.32083093]
bas 1, expnt(s) = [681.82636804]
bas 2, expnt(s) = [154.25434471]
bas 3, expnt(s) = [42.4925791]
bas 4, expnt(s) = [4.74922956]
bas 5, expnt(s) = [0.39152762]
bas 6, expnt(s) = [8.597792]
bas 7, expnt(s) = [0.49059158]
CPU time:       234.88
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  1  1  1  0 36 37  0]
 [ 0  1  1  1  0 38 39  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 4.53932083e+03 1.39719873e+03 6.81826368e+02 3.37109017e+02
 1.54254345e+02 1.10584199e+02 4.24925791e+01 4.20484356e+01
 4.74922956e+00 8.12797569e+00 3.91527622e-01 1.25050902e+00
 8.59779200e+00 4.29504838e+01 4.90591576e-01 1.19780053e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.31967685473837
cond(S) = 24.873517758334398
E1 = -688.889573150301  E_coul = 184.90993196870858
init E= -503.979641181592
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.68137221163768  LUMO = 111.460275360473
  mo_energy =
[-1.21497263e+02 -1.32717318e+01 -7.62137303e+00 -7.62137303e+00
 -7.62137303e+00 -1.65072425e+00 -6.81372212e-01 -6.81372212e-01
 -6.81372212e-01  1.11460275e+02  9.90875349e+02  7.50727388e+03]
E1 = -706.2401800124712  E_coul = 198.93017389567052
cycle= 1 E= -507.310006116801  delta_E= -3.33  |g|= 0.295  |ddm|=  0.3
    CPU time for cycle= 1      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.320664
diis-c [-0.10282515  1.        ]
  HOMO = -0.236538834741653  LUMO = 112.815201715295
  mo_energy =
[-1.20116810e+02 -1.22429979e+01 -6.65258875e+00 -6.65258875e+00
 -6.65258875e+00 -1.16286488e+00 -2.36538835e-01 -2.36538835e-01
 -2.36538835e-01  1.12815202e+02  9.92218177e+02  7.50843627e+03]
E1 = -706.2190021778093  E_coul = 198.90871347815033
cycle= 2 E= -507.310288699659  delta_E= -0.000283  |g|= 0.00376  |ddm|= 0.00918
    CPU time for cycle= 2      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.00393461
diis-c [-1.49012630e-05 -2.38057106e-03  1.00238057e+00]
  HOMO = -0.236647307044124  LUMO = 112.812372381869
  mo_energy =
[-1.20122948e+02 -1.22437516e+01 -6.65375529e+00 -6.65375529e+00
 -6.65375529e+00 -1.16290544e+00 -2.36647307e-01 -2.36647307e-01
 -2.36647307e-01  1.12812372e+02  9.92209322e+02  7.50842281e+03]
E1 = -706.2187560448543  E_coul = 198.9084672907603
cycle= 3 E= -507.310288754094  delta_E= -5.44e-08  |g|= 5.86e-05  |ddm|= 0.000112
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=7.797e-05
diis-c [-1.32317398e-10  4.84187209e-05 -2.04330610e-02  1.02038464e+00]
  HOMO = -0.236648259036872  LUMO = 112.812350612329
  mo_energy =
[-1.20123001e+02 -1.22437586e+01 -6.65376753e+00 -6.65376753e+00
 -6.65376753e+00 -1.16290570e+00 -2.36648259e-01 -2.36648259e-01
 -2.36648259e-01  1.12812351e+02  9.92209269e+02  7.50842276e+03]
E1 = -706.2187531525975  E_coul = 198.9084643984918
cycle= 4 E= -507.310288754106  delta_E= -1.17e-11  |g|= 1.56e-07  |ddm|= 1.44e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.2187531525975  E_coul = 198.9084643984918
  HOMO = -0.236648253846081  LUMO = 112.812350775048
  mo_energy =
[-1.20123001e+02 -1.22437585e+01 -6.65376747e+00 -6.65376747e+00
 -6.65376747e+00 -1.16290570e+00 -2.36648254e-01 -2.36648254e-01
 -2.36648254e-01  1.12812351e+02  9.92209270e+02  7.50842276e+03]
E1 = -706.2187531640166  E_coul = 198.90846440991078
Extra cycle  E= -507.310288754106  delta_E= -5.68e-14  |g|= 2.21e-09  |ddm|= 4.68e-09
    CPU time for scf_cycle      0.10 sec, wall time      0.10 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 24.873517758334398
E1 = -706.2187531640166  E_coul = 198.90846440991078
init E= -507.310288754106
    CPU time for initialize scf      0.06 sec, wall time      0.06 sec
  HOMO = -0.236648253795115  LUMO = 112.812350776631
  mo_energy =
[-1.20123001e+02 -1.22437585e+01 -6.65376747e+00 -6.65376747e+00
 -6.65376747e+00 -1.16290570e+00 -2.36648254e-01 -2.36648254e-01
 -2.36648254e-01  1.12812351e+02  9.92209270e+02  7.50842276e+03]
E1 = -706.2187531641572  E_coul = 198.90846441005166
cycle= 1 E= -507.310288754105  delta_E= 2.84e-13  |g|= 3.71e-11  |ddm|= 6.15e-11
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -706.2187531641572  E_coul = 198.90846441005166
  HOMO = -0.236648253794501  LUMO = 112.812350776648
  mo_energy =
[-1.20123001e+02 -1.22437585e+01 -6.65376747e+00 -6.65376747e+00
 -6.65376747e+00 -1.16290570e+00 -2.36648254e-01 -2.36648254e-01
 -2.36648254e-01  1.12812351e+02  9.92209270e+02  7.50842276e+03]
E1 = -706.2187531641597  E_coul = 198.9084644100538
Extra cycle  E= -507.310288754106  delta_E= -3.98e-13  |g|= 4.28e-12  |ddm|= 9.29e-13
    CPU time for scf_cycle      0.12 sec, wall time      0.12 sec
exp = [4.53932083e+03 6.81826368e+02 1.54254345e+02 4.24925791e+01
 4.74922956e+00 3.91527622e-01 8.59779200e+00 4.90591576e-01]
grad_E = [ 1.85599704e-06  1.01487059e-05 -2.26464860e-04 -2.84410016e-04
 -1.37626046e-03 -9.19840772e-04  1.75396959e-04 -6.03164775e-03]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((8, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([1.5735952963858392e+03,2.3761303919145971e+02,5.2332977870138201e+01,4.7281081235122091e+00,3.9325830426169639e-01,8.5907170030661746e+00,4.9039633283239870e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "6s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:49:30 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  4537.78697268        1
[INPUT] 0    0    [1    /1   ]  685.633965274        1
[INPUT] 0    0    [1    /1   ]  155.346810505        1
[INPUT] 0    0    [1    /1   ]  42.6932438152        1
[INPUT] 0    0    [1    /1   ]  4.75140820555        1
[INPUT] 0    0    [1    /1   ]  0.391599391626       1
[INPUT] 1    0    [1    /1   ]  8.59782308847        1
[INPUT] 1    0    [1    /1   ]  0.490659506872       1

nuclear repulsion = 0
number of shells = 8
number of NR pGTOs = 12
number of NR cGTOs = 12
basis = {'Ar': [[0, [4537.786972682232, 1.0]], [0, [685.6339652744921, 1.0]], [0, [155.3468105054984, 1.0]], [0, [42.69324381516296, 1.0]], [0, [4.751408205551433, 1.0]], [0, [0.3915993916257796, 1.0]], [1, [8.597823088469518, 1.0]], [1, [0.49065950687173626, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [4537.78697268]
bas 1, expnt(s) = [685.63396527]
bas 2, expnt(s) = [155.34681051]
bas 3, expnt(s) = [42.69324382]
bas 4, expnt(s) = [4.75140821]
bas 5, expnt(s) = [0.39159939]
bas 6, expnt(s) = [8.59782309]
bas 7, expnt(s) = [0.49065951]
CPU time:       238.49
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  1  1  1  0 36 37  0]
 [ 0  1  1  1  0 38 39  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 4.53778697e+03 1.39684463e+03 6.85633965e+02 3.38519949e+02
 1.55346811e+02 1.11171069e+02 4.26932438e+01 4.21972734e+01
 4.75140821e+00 8.13077198e+00 3.91599392e-01 1.25068094e+00
 8.59782309e+00 4.29506780e+01 4.90659507e-01 1.19800785e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.31952606811934
cond(S) = 24.852259907352774
E1 = -688.8970120508866  E_coul = 184.91711914931244
init E= -503.979892901574
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.681254922959374  LUMO = 112.471929335598
  mo_energy =
[-1.21495982e+02 -1.32716676e+01 -7.62078240e+00 -7.62078240e+00
 -7.62078240e+00 -1.65077241e+00 -6.81254923e-01 -6.81254923e-01
 -6.81254923e-01  1.12471929e+02  9.98303114e+02  7.52195284e+03]
E1 = -706.2540332484199  E_coul = 198.94387718293382
cycle= 1 E= -507.310156065486  delta_E= -3.33  |g|= 0.294  |ddm|=  0.3
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.320155
diis-c [-0.10249922  1.        ]
  HOMO = -0.236279285961268  LUMO = 113.828305326916
  mo_energy =
[-1.20114325e+02 -1.22425381e+01 -6.65161497e+00 -6.65161497e+00
 -6.65161497e+00 -1.16273115e+00 -2.36279286e-01 -2.36279286e-01
 -2.36279286e-01  1.13828305e+02  9.99647575e+02  7.52311835e+03]
E1 = -706.2331664003808  E_coul = 198.92273248070657
cycle= 2 E= -507.310433919674  delta_E= -0.000278  |g|= 0.00372  |ddm|= 0.00904
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.003899
diis-c [-1.46114413e-05 -2.40673774e-03  1.00240674e+00]
  HOMO = -0.236385938691595  LUMO = 113.825502525577
  mo_energy =
[-1.20120382e+02 -1.22432797e+01 -6.65276191e+00 -6.65276191e+00
 -6.65276191e+00 -1.16277107e+00 -2.36385939e-01 -2.36385939e-01
 -2.36385939e-01  1.13825503e+02  9.99638809e+02  7.52310504e+03]
E1 = -706.2329254435083  E_coul = 198.92249147088938
cycle= 3 E= -507.310433972619  delta_E= -5.29e-08  |g|= 5.76e-05  |ddm|= 0.000109
    CPU time for cycle= 3      0.02 sec, wall time      0.04 sec
diis-norm(errvec)=7.67366e-05
diis-c [-1.28236526e-10  4.84500844e-05 -2.03059796e-02  1.02025753e+00]
  HOMO = -0.236386865188261  LUMO = 113.825481286867
  mo_energy =
[-1.20120433e+02 -1.22432864e+01 -6.65277382e+00 -6.65277382e+00
 -6.65277382e+00 -1.16277132e+00 -2.36386865e-01 -2.36386865e-01
 -2.36386865e-01  1.13825481e+02  9.99638758e+02  7.52310499e+03]
E1 = -706.2329226405874  E_coul = 198.9224886679573
cycle= 4 E= -507.31043397263  delta_E= -1.12e-11  |g|= 1.52e-07  |ddm|= 1.4e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.2329226405874  E_coul = 198.9224886679573
  HOMO = -0.236386860178584  LUMO = 113.825481445982
  mo_energy =
[-1.20120433e+02 -1.22432864e+01 -6.65277377e+00 -6.65277377e+00
 -6.65277377e+00 -1.16277132e+00 -2.36386860e-01 -2.36386860e-01
 -2.36386860e-01  1.13825481e+02  9.99638759e+02  7.52310499e+03]
E1 = -706.2329226516014  E_coul = 198.9224886789713
Extra cycle  E= -507.31043397263  delta_E=    0  |g|= 2.14e-09  |ddm|= 4.51e-09
    CPU time for scf_cycle      0.11 sec, wall time      0.14 sec
exp = [4.53778697e+03 6.85633965e+02 1.55346811e+02 4.26932438e+01
 4.75140821e+00 3.91599392e-01 8.59782309e+00 4.90659507e-01]
E = -507.3104339726301
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((8, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([1.5735952963858392e+03,2.3761303919145971e+02,5.2332977870138201e+01,4.7281081235122091e+00,3.9325830426169639e-01,8.5907170030661746e+00,4.9039633283239870e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "6s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:49:31 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  4537.78697268        1
[INPUT] 0    0    [1    /1   ]  685.633965274        1
[INPUT] 0    0    [1    /1   ]  155.346810505        1
[INPUT] 0    0    [1    /1   ]  42.6932438152        1
[INPUT] 0    0    [1    /1   ]  4.75140820555        1
[INPUT] 0    0    [1    /1   ]  0.391599391626       1
[INPUT] 1    0    [1    /1   ]  8.59782308847        1
[INPUT] 1    0    [1    /1   ]  0.490659506872       1

nuclear repulsion = 0
number of shells = 8
number of NR pGTOs = 12
number of NR cGTOs = 12
basis = {'Ar': [[0, [4537.786972682232, 1.0]], [0, [685.6339652744921, 1.0]], [0, [155.3468105054984, 1.0]], [0, [42.69324381516296, 1.0]], [0, [4.751408205551433, 1.0]], [0, [0.3915993916257796, 1.0]], [1, [8.597823088469518, 1.0]], [1, [0.49065950687173626, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [4537.78697268]
bas 1, expnt(s) = [685.63396527]
bas 2, expnt(s) = [155.34681051]
bas 3, expnt(s) = [42.69324382]
bas 4, expnt(s) = [4.75140821]
bas 5, expnt(s) = [0.39159939]
bas 6, expnt(s) = [8.59782309]
bas 7, expnt(s) = [0.49065951]
CPU time:       239.37
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  1  1  1  0 36 37  0]
 [ 0  1  1  1  0 38 39  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 4.53778697e+03 1.39684463e+03 6.85633965e+02 3.38519949e+02
 1.55346811e+02 1.11171069e+02 4.26932438e+01 4.21972734e+01
 4.75140821e+00 8.13077198e+00 3.91599392e-01 1.25068094e+00
 8.59782309e+00 4.29506780e+01 4.90659507e-01 1.19800785e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.31952606811934
cond(S) = 24.852259907352774
E1 = -688.8970120508866  E_coul = 184.91711914931244
init E= -503.979892901574
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.681254922959374  LUMO = 112.471929335598
  mo_energy =
[-1.21495982e+02 -1.32716676e+01 -7.62078240e+00 -7.62078240e+00
 -7.62078240e+00 -1.65077241e+00 -6.81254923e-01 -6.81254923e-01
 -6.81254923e-01  1.12471929e+02  9.98303114e+02  7.52195284e+03]
E1 = -706.2540332484199  E_coul = 198.94387718293382
cycle= 1 E= -507.310156065486  delta_E= -3.33  |g|= 0.294  |ddm|=  0.3
    CPU time for cycle= 1      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.320155
diis-c [-0.10249922  1.        ]
  HOMO = -0.236279285961268  LUMO = 113.828305326916
  mo_energy =
[-1.20114325e+02 -1.22425381e+01 -6.65161497e+00 -6.65161497e+00
 -6.65161497e+00 -1.16273115e+00 -2.36279286e-01 -2.36279286e-01
 -2.36279286e-01  1.13828305e+02  9.99647575e+02  7.52311835e+03]
E1 = -706.2331664003808  E_coul = 198.92273248070657
cycle= 2 E= -507.310433919674  delta_E= -0.000278  |g|= 0.00372  |ddm|= 0.00904
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.003899
diis-c [-1.46114413e-05 -2.40673774e-03  1.00240674e+00]
  HOMO = -0.236385938691595  LUMO = 113.825502525577
  mo_energy =
[-1.20120382e+02 -1.22432797e+01 -6.65276191e+00 -6.65276191e+00
 -6.65276191e+00 -1.16277107e+00 -2.36385939e-01 -2.36385939e-01
 -2.36385939e-01  1.13825503e+02  9.99638809e+02  7.52310504e+03]
E1 = -706.2329254435083  E_coul = 198.92249147088938
cycle= 3 E= -507.310433972619  delta_E= -5.29e-08  |g|= 5.76e-05  |ddm|= 0.000109
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=7.67366e-05
diis-c [-1.28236526e-10  4.84500844e-05 -2.03059796e-02  1.02025753e+00]
  HOMO = -0.236386865188261  LUMO = 113.825481286867
  mo_energy =
[-1.20120433e+02 -1.22432864e+01 -6.65277382e+00 -6.65277382e+00
 -6.65277382e+00 -1.16277132e+00 -2.36386865e-01 -2.36386865e-01
 -2.36386865e-01  1.13825481e+02  9.99638758e+02  7.52310499e+03]
E1 = -706.2329226405874  E_coul = 198.9224886679573
cycle= 4 E= -507.31043397263  delta_E= -1.12e-11  |g|= 1.52e-07  |ddm|= 1.4e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.2329226405874  E_coul = 198.9224886679573
  HOMO = -0.236386860178584  LUMO = 113.825481445982
  mo_energy =
[-1.20120433e+02 -1.22432864e+01 -6.65277377e+00 -6.65277377e+00
 -6.65277377e+00 -1.16277132e+00 -2.36386860e-01 -2.36386860e-01
 -2.36386860e-01  1.13825481e+02  9.99638759e+02  7.52310499e+03]
E1 = -706.2329226516014  E_coul = 198.9224886789713
Extra cycle  E= -507.31043397263  delta_E=    0  |g|= 2.14e-09  |ddm|= 4.51e-09
    CPU time for scf_cycle      0.10 sec, wall time      0.11 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 24.852259907352774
E1 = -706.2329226516014  E_coul = 198.9224886789713
init E= -507.31043397263
    CPU time for initialize scf      0.06 sec, wall time      0.06 sec
  HOMO = -0.236386860129653  LUMO = 113.825481447519
  mo_energy =
[-1.20120433e+02 -1.22432864e+01 -6.65277377e+00 -6.65277377e+00
 -6.65277377e+00 -1.16277132e+00 -2.36386860e-01 -2.36386860e-01
 -2.36386860e-01  1.13825481e+02  9.99638759e+02  7.52310499e+03]
E1 = -706.2329226517368  E_coul = 198.92248867910638
cycle= 1 E= -507.31043397263  delta_E= -2.84e-13  |g|= 3.55e-11  |ddm|= 5.89e-11
    CPU time for cycle= 1      0.01 sec, wall time      0.02 sec
E1 = -706.2329226517368  E_coul = 198.92248867910638
  HOMO = -0.236386860129063  LUMO = 113.825481447536
  mo_energy =
[-1.20120433e+02 -1.22432864e+01 -6.65277377e+00 -6.65277377e+00
 -6.65277377e+00 -1.16277132e+00 -2.36386860e-01 -2.36386860e-01
 -2.36386860e-01  1.13825481e+02  9.99638759e+02  7.52310499e+03]
E1 = -706.2329226517385  E_coul = 198.9224886791082
Extra cycle  E= -507.31043397263  delta_E= 1.14e-13  |g|= 3.66e-12  |ddm|= 8.98e-13
    CPU time for scf_cycle      0.14 sec, wall time      0.14 sec
exp = [4.53778697e+03 6.85633965e+02 1.55346811e+02 4.26932438e+01
 4.75140821e+00 3.91599392e-01 8.59782309e+00 4.90659507e-01]
grad_E = [-8.25207001e-07  1.21859143e-05 -3.08779157e-05 -1.70045799e-04
  6.54505928e-04 -3.41285147e-04  4.01011741e-04 -2.88738181e-03]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((8, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([1.5735952963858392e+03,2.3761303919145971e+02,5.2332977870138201e+01,4.7281081235122091e+00,3.9325830426169639e-01,8.5907170030661746e+00,4.9039633283239870e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "6s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:49:35 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  4553.0351542         1
[INPUT] 0    0    [1    /1   ]  686.527959769        1
[INPUT] 0    0    [1    /1   ]  155.615789537        1
[INPUT] 0    0    [1    /1   ]  42.7520472381        1
[INPUT] 0    0    [1    /1   ]  4.75067414425        1
[INPUT] 0    0    [1    /1   ]  0.391627765204       1
[INPUT] 1    0    [1    /1   ]  8.59742068547        1
[INPUT] 1    0    [1    /1   ]  0.490744171501       1

nuclear repulsion = 0
number of shells = 8
number of NR pGTOs = 12
number of NR cGTOs = 12
basis = {'Ar': [[0, [4553.0351541962555, 1.0]], [0, [686.5279597693924, 1.0]], [0, [155.61578953715718, 1.0]], [0, [42.752047238059184, 1.0]], [0, [4.750674144249864, 1.0]], [0, [0.391627765203864, 1.0]], [1, [8.597420685467805, 1.0]], [1, [0.4907441715005667, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [4553.0351542]
bas 1, expnt(s) = [686.52795977]
bas 2, expnt(s) = [155.61578954]
bas 3, expnt(s) = [42.75204724]
bas 4, expnt(s) = [4.75067414]
bas 5, expnt(s) = [0.39162777]
bas 6, expnt(s) = [8.59742069]
bas 7, expnt(s) = [0.49074417]
CPU time:       242.93
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  1  1  1  0 36 37  0]
 [ 0  1  1  1  0 38 39  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 4.55303515e+03 1.40036348e+03 6.86527960e+02 3.38850941e+02
 1.55615790e+02 1.11315405e+02 4.27520472e+01 4.22408561e+01
 4.75067414e+00 8.12982985e+00 3.91627765e-01 1.25074890e+00
 8.59742069e+00 4.29481652e+01 4.90744172e-01 1.19826626e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319420117531493
cond(S) = 24.828743893935965
E1 = -688.8960090140323  E_coul = 184.91799965620189
init E= -503.97800935783
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.681137840720097  LUMO = 112.742973134892
  mo_energy =
[-1.21495992e+02 -1.32717398e+01 -7.62075757e+00 -7.62075757e+00
 -7.62075757e+00 -1.65070015e+00 -6.81137841e-01 -6.81137841e-01
 -6.81137841e-01  1.12742973e+02  1.00013281e+03  7.54435778e+03]
E1 = -706.2562796316963  E_coul = 198.9461166236463
cycle= 1 E= -507.31016300805  delta_E= -3.33  |g|= 0.294  |ddm|=  0.3
    CPU time for cycle= 1      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.32052
diis-c [-0.10273336  1.        ]
  HOMO = -0.236079590754246  LUMO = 114.099640970274
  mo_energy =
[-1.20114225e+02 -1.22425247e+01 -6.65152490e+00 -6.65152490e+00
 -6.65152490e+00 -1.16259639e+00 -2.36079591e-01 -2.36079591e-01
 -2.36079591e-01  1.14099641e+02  1.00147749e+03  7.54552356e+03]
E1 = -706.2354872665206  E_coul = 198.92504736334337
cycle= 2 E= -507.310439903177  delta_E= -0.000277  |g|= 0.00372  |ddm|= 0.00901
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00389231
diis-c [-1.45543124e-05 -2.41406926e-03  1.00241407e+00]
  HOMO = -0.236185822063458  LUMO = 114.096844391608
  mo_energy =
[-1.20120263e+02 -1.22432633e+01 -6.65266720e+00 -6.65266720e+00
 -6.65266720e+00 -1.16263614e+00 -2.36185822e-01 -2.36185822e-01
 -2.36185822e-01  1.14096844e+02  1.00146874e+03  7.54551028e+03]
E1 = -706.2352475536346  E_coul = 198.9248075978304
cycle= 3 E= -507.310439955804  delta_E= -5.26e-08  |g|= 5.74e-05  |ddm|= 0.000109
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=7.64445e-05
diis-c [-1.27416792e-10  4.83442552e-05 -2.02672635e-02  1.02021892e+00]
  HOMO = -0.236186742499982  LUMO = 114.096823284628
  mo_energy =
[-1.20120314e+02 -1.22432700e+01 -6.65267903e+00 -6.65267903e+00
 -6.65267903e+00 -1.16263639e+00 -2.36186742e-01 -2.36186742e-01
 -2.36186742e-01  1.14096823e+02  1.00146869e+03  7.54551023e+03]
E1 = -706.2352447726549  E_coul = 198.92480481683972
cycle= 4 E= -507.310439955815  delta_E= -1.1e-11  |g|= 1.52e-07  |ddm|= 1.39e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.2352447726549  E_coul = 198.92480481683972
  HOMO = -0.236186737527823  LUMO = 114.09682344305
  mo_energy =
[-1.20120314e+02 -1.22432700e+01 -6.65267898e+00 -6.65267898e+00
 -6.65267898e+00 -1.16263639e+00 -2.36186738e-01 -2.36186738e-01
 -2.36186738e-01  1.14096823e+02  1.00146869e+03  7.54551023e+03]
E1 = -706.2352447835829  E_coul = 198.9248048277672
Extra cycle  E= -507.310439955816  delta_E= -4.55e-13  |g|= 2.12e-09  |ddm|= 4.47e-09
    CPU time for scf_cycle      0.10 sec, wall time      0.11 sec
exp = [4.55303515e+03 6.86527960e+02 1.55615790e+02 4.27520472e+01
 4.75067414e+00 3.91627765e-01 8.59742069e+00 4.90744172e-01]
E = -507.3104399558157
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((8, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([1.5735952963858392e+03,2.3761303919145971e+02,5.2332977870138201e+01,4.7281081235122091e+00,3.9325830426169639e-01,8.5907170030661746e+00,4.9039633283239870e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "6s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:49:36 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  4553.0351542         1
[INPUT] 0    0    [1    /1   ]  686.527959769        1
[INPUT] 0    0    [1    /1   ]  155.615789537        1
[INPUT] 0    0    [1    /1   ]  42.7520472381        1
[INPUT] 0    0    [1    /1   ]  4.75067414425        1
[INPUT] 0    0    [1    /1   ]  0.391627765204       1
[INPUT] 1    0    [1    /1   ]  8.59742068547        1
[INPUT] 1    0    [1    /1   ]  0.490744171501       1

nuclear repulsion = 0
number of shells = 8
number of NR pGTOs = 12
number of NR cGTOs = 12
basis = {'Ar': [[0, [4553.0351541962555, 1.0]], [0, [686.5279597693924, 1.0]], [0, [155.61578953715718, 1.0]], [0, [42.752047238059184, 1.0]], [0, [4.750674144249864, 1.0]], [0, [0.391627765203864, 1.0]], [1, [8.597420685467805, 1.0]], [1, [0.4907441715005667, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [4553.0351542]
bas 1, expnt(s) = [686.52795977]
bas 2, expnt(s) = [155.61578954]
bas 3, expnt(s) = [42.75204724]
bas 4, expnt(s) = [4.75067414]
bas 5, expnt(s) = [0.39162777]
bas 6, expnt(s) = [8.59742069]
bas 7, expnt(s) = [0.49074417]
CPU time:       243.77
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  1  1  1  0 36 37  0]
 [ 0  1  1  1  0 38 39  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 4.55303515e+03 1.40036348e+03 6.86527960e+02 3.38850941e+02
 1.55615790e+02 1.11315405e+02 4.27520472e+01 4.22408561e+01
 4.75067414e+00 8.12982985e+00 3.91627765e-01 1.25074890e+00
 8.59742069e+00 4.29481652e+01 4.90744172e-01 1.19826626e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319420117531493
cond(S) = 24.828743893935965
E1 = -688.8960090140323  E_coul = 184.91799965620189
init E= -503.97800935783
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.681137840720097  LUMO = 112.742973134892
  mo_energy =
[-1.21495992e+02 -1.32717398e+01 -7.62075757e+00 -7.62075757e+00
 -7.62075757e+00 -1.65070015e+00 -6.81137841e-01 -6.81137841e-01
 -6.81137841e-01  1.12742973e+02  1.00013281e+03  7.54435778e+03]
E1 = -706.2562796316963  E_coul = 198.9461166236463
cycle= 1 E= -507.31016300805  delta_E= -3.33  |g|= 0.294  |ddm|=  0.3
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.32052
diis-c [-0.10273336  1.        ]
  HOMO = -0.236079590754246  LUMO = 114.099640970274
  mo_energy =
[-1.20114225e+02 -1.22425247e+01 -6.65152490e+00 -6.65152490e+00
 -6.65152490e+00 -1.16259639e+00 -2.36079591e-01 -2.36079591e-01
 -2.36079591e-01  1.14099641e+02  1.00147749e+03  7.54552356e+03]
E1 = -706.2354872665206  E_coul = 198.92504736334337
cycle= 2 E= -507.310439903177  delta_E= -0.000277  |g|= 0.00372  |ddm|= 0.00901
    CPU time for cycle= 2      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.00389231
diis-c [-1.45543124e-05 -2.41406926e-03  1.00241407e+00]
  HOMO = -0.236185822063458  LUMO = 114.096844391608
  mo_energy =
[-1.20120263e+02 -1.22432633e+01 -6.65266720e+00 -6.65266720e+00
 -6.65266720e+00 -1.16263614e+00 -2.36185822e-01 -2.36185822e-01
 -2.36185822e-01  1.14096844e+02  1.00146874e+03  7.54551028e+03]
E1 = -706.2352475536346  E_coul = 198.9248075978304
cycle= 3 E= -507.310439955804  delta_E= -5.26e-08  |g|= 5.74e-05  |ddm|= 0.000109
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=7.64445e-05
diis-c [-1.27416792e-10  4.83442552e-05 -2.02672635e-02  1.02021892e+00]
  HOMO = -0.236186742499982  LUMO = 114.096823284628
  mo_energy =
[-1.20120314e+02 -1.22432700e+01 -6.65267903e+00 -6.65267903e+00
 -6.65267903e+00 -1.16263639e+00 -2.36186742e-01 -2.36186742e-01
 -2.36186742e-01  1.14096823e+02  1.00146869e+03  7.54551023e+03]
E1 = -706.2352447726549  E_coul = 198.92480481683972
cycle= 4 E= -507.310439955815  delta_E= -1.1e-11  |g|= 1.52e-07  |ddm|= 1.39e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.2352447726549  E_coul = 198.92480481683972
  HOMO = -0.236186737527823  LUMO = 114.09682344305
  mo_energy =
[-1.20120314e+02 -1.22432700e+01 -6.65267898e+00 -6.65267898e+00
 -6.65267898e+00 -1.16263639e+00 -2.36186738e-01 -2.36186738e-01
 -2.36186738e-01  1.14096823e+02  1.00146869e+03  7.54551023e+03]
E1 = -706.2352447835829  E_coul = 198.9248048277672
Extra cycle  E= -507.310439955816  delta_E= -4.55e-13  |g|= 2.12e-09  |ddm|= 4.47e-09
    CPU time for scf_cycle      0.10 sec, wall time      0.10 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 24.828743893935965
E1 = -706.2352447835829  E_coul = 198.9248048277672
init E= -507.310439955816
    CPU time for initialize scf      0.06 sec, wall time      0.06 sec
  HOMO = -0.236186737479323  LUMO = 114.096823444578
  mo_energy =
[-1.20120314e+02 -1.22432700e+01 -6.65267898e+00 -6.65267898e+00
 -6.65267898e+00 -1.16263639e+00 -2.36186737e-01 -2.36186737e-01
 -2.36186737e-01  1.14096823e+02  1.00146869e+03  7.54551023e+03]
E1 = -706.2352447837166  E_coul = 198.92480482790094
cycle= 1 E= -507.310439955816  delta_E= 1.14e-13  |g|= 3.48e-11  |ddm|= 5.84e-11
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -706.2352447837166  E_coul = 198.92480482790094
  HOMO = -0.23618673747874  LUMO = 114.096823444595
  mo_energy =
[-1.20120314e+02 -1.22432700e+01 -6.65267898e+00 -6.65267898e+00
 -6.65267898e+00 -1.16263639e+00 -2.36186737e-01 -2.36186737e-01
 -2.36186737e-01  1.14096823e+02  1.00146869e+03  7.54551023e+03]
E1 = -706.2352447837181  E_coul = 198.9248048279028
Extra cycle  E= -507.310439955815  delta_E= 2.27e-13  |g|= 1.93e-12  |ddm|= 8.66e-13
    CPU time for scf_cycle      0.13 sec, wall time      0.13 sec
exp = [4.55303515e+03 6.86527960e+02 1.55615790e+02 4.27520472e+01
 4.75067414e+00 3.91627765e-01 8.59742069e+00 4.90744172e-01]
grad_E = [ 5.92300866e-07 -9.06389545e-06  4.70062111e-05 -8.00620569e-05
  7.42601832e-05  1.28203142e-04 -1.46694190e-05  6.58714913e-04]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((8, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([1.5735952963858392e+03,2.3761303919145971e+02,5.2332977870138201e+01,4.7281081235122091e+00,3.9325830426169639e-01,8.5907170030661746e+00,4.9039633283239870e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "6s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:49:39 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  4547.76598103        1
[INPUT] 0    0    [1    /1   ]  686.335968095        1
[INPUT] 0    0    [1    /1   ]  155.555635034        1
[INPUT] 0    0    [1    /1   ]  42.7431953681        1
[INPUT] 0    0    [1    /1   ]  4.75058677155        1
[INPUT] 0    0    [1    /1   ]  0.391622995315       1
[INPUT] 1    0    [1    /1   ]  8.59742174164        1
[INPUT] 1    0    [1    /1   ]  0.490729477721       1

nuclear repulsion = 0
number of shells = 8
number of NR pGTOs = 12
number of NR cGTOs = 12
basis = {'Ar': [[0, [4547.765981025315, 1.0]], [0, [686.335968094879, 1.0]], [0, [155.55563503414052, 1.0]], [0, [42.74319536810824, 1.0]], [0, [4.750586771547069, 1.0]], [0, [0.39162299531516315, 1.0]], [1, [8.597421741641744, 1.0]], [1, [0.4907294777212075, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [4547.76598103]
bas 1, expnt(s) = [686.33596809]
bas 2, expnt(s) = [155.55563503]
bas 3, expnt(s) = [42.74319537]
bas 4, expnt(s) = [4.75058677]
bas 5, expnt(s) = [0.391623]
bas 6, expnt(s) = [8.59742174]
bas 7, expnt(s) = [0.49072948]
CPU time:       247.21
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  1  1  1  0 36 37  0]
 [ 0  1  1  1  0 38 39  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 4.54776598e+03 1.39914784e+03 6.86335968e+02 3.38779867e+02
 1.55555635e+02 1.11283131e+02 4.27431954e+01 4.22342964e+01
 4.75058677e+00 8.12971771e+00 3.91622995e-01 1.25073748e+00
 8.59742174e+00 4.29481718e+01 4.90729478e-01 1.19822141e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319441822035245
cond(S) = 24.83884434022646
E1 = -688.8959108982801  E_coul = 184.91731466951032
init E= -503.97859622877
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.681157873348861  LUMO = 112.690568808075
  mo_energy =
[-1.21496060e+02 -1.32717965e+01 -7.62080453e+00 -7.62080453e+00
 -7.62080453e+00 -1.65071138e+00 -6.81157873e-01 -6.81157873e-01
 -6.81157873e-01  1.12690569e+02  9.99744814e+02  7.53713601e+03]
E1 = -706.2552268028409  E_coul = 198.94506223423863
cycle= 1 E= -507.310164568602  delta_E= -3.33  |g|= 0.294  |ddm|=  0.3
    CPU time for cycle= 1      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.320413
diis-c [-0.10266463  1.        ]
  HOMO = -0.236117774997525  LUMO = 114.047185917474
  mo_energy =
[-1.20114317e+02 -1.22426078e+01 -6.65159511e+00 -6.65159511e+00
 -6.65159511e+00 -1.16262478e+00 -2.36117775e-01 -2.36117775e-01
 -2.36117775e-01  1.14047186e+02  1.00108949e+03  7.53830180e+03]
E1 = -706.2344204913768  E_coul = 198.92397880641832
cycle= 2 E= -507.310441684959  delta_E= -0.000277  |g|= 0.00372  |ddm|= 0.00902
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00389416
diis-c [-1.45679055e-05 -2.41652582e-03  1.00241653e+00]
  HOMO = -0.23622408997418  LUMO = 114.044388448077
  mo_energy =
[-1.20120358e+02 -1.22433469e+01 -6.65273834e+00 -6.65273834e+00
 -6.65273834e+00 -1.16266456e+00 -2.36224090e-01 -2.36224090e-01
 -2.36224090e-01  1.14044388e+02  1.00108074e+03  7.53828851e+03]
E1 = -706.2341805284526  E_coul = 198.92373879079037
cycle= 3 E= -507.310441737662  delta_E= -5.27e-08  |g|= 5.74e-05  |ddm|= 0.000109
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=7.64981e-05
diis-c [-1.27453649e-10  4.84139963e-05 -2.02724278e-02  1.02022401e+00]
  HOMO = -0.236225011247749  LUMO = 114.044367327694
  mo_energy =
[-1.20120409e+02 -1.22433536e+01 -6.65275018e+00 -6.65275018e+00
 -6.65275018e+00 -1.16266482e+00 -2.36225011e-01 -2.36225011e-01
 -2.36225011e-01  1.14044367e+02  1.00108069e+03  7.53828846e+03]
E1 = -706.2341777439169  E_coul = 198.92373600624322
cycle= 4 E= -507.310441737674  delta_E= -1.15e-11  |g|= 1.52e-07  |ddm|= 1.39e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.2341777439169  E_coul = 198.92373600624322
  HOMO = -0.236225006271738  LUMO = 114.044367486133
  mo_energy =
[-1.20120409e+02 -1.22433536e+01 -6.65275013e+00 -6.65275013e+00
 -6.65275013e+00 -1.16266481e+00 -2.36225006e-01 -2.36225006e-01
 -2.36225006e-01  1.14044367e+02  1.00108069e+03  7.53828846e+03]
E1 = -706.2341777548544  E_coul = 198.92373601718063
Extra cycle  E= -507.310441737674  delta_E=    0  |g|= 2.12e-09  |ddm|= 4.48e-09
    CPU time for scf_cycle      0.11 sec, wall time      0.11 sec
exp = [4.54776598e+03 6.86335968e+02 1.55555635e+02 4.27431954e+01
 4.75058677e+00 3.91622995e-01 8.59742174e+00 4.90729478e-01]
E = -507.3104417376737
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((8, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([1.5735952963858392e+03,2.3761303919145971e+02,5.2332977870138201e+01,4.7281081235122091e+00,3.9325830426169639e-01,8.5907170030661746e+00,4.9039633283239870e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "6s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:49:40 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  4547.76598103        1
[INPUT] 0    0    [1    /1   ]  686.335968095        1
[INPUT] 0    0    [1    /1   ]  155.555635034        1
[INPUT] 0    0    [1    /1   ]  42.7431953681        1
[INPUT] 0    0    [1    /1   ]  4.75058677155        1
[INPUT] 0    0    [1    /1   ]  0.391622995315       1
[INPUT] 1    0    [1    /1   ]  8.59742174164        1
[INPUT] 1    0    [1    /1   ]  0.490729477721       1

nuclear repulsion = 0
number of shells = 8
number of NR pGTOs = 12
number of NR cGTOs = 12
basis = {'Ar': [[0, [4547.765981025315, 1.0]], [0, [686.335968094879, 1.0]], [0, [155.55563503414052, 1.0]], [0, [42.74319536810824, 1.0]], [0, [4.750586771547069, 1.0]], [0, [0.39162299531516315, 1.0]], [1, [8.597421741641744, 1.0]], [1, [0.4907294777212075, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [4547.76598103]
bas 1, expnt(s) = [686.33596809]
bas 2, expnt(s) = [155.55563503]
bas 3, expnt(s) = [42.74319537]
bas 4, expnt(s) = [4.75058677]
bas 5, expnt(s) = [0.391623]
bas 6, expnt(s) = [8.59742174]
bas 7, expnt(s) = [0.49072948]
CPU time:       248.08
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  1  1  1  0 36 37  0]
 [ 0  1  1  1  0 38 39  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 4.54776598e+03 1.39914784e+03 6.86335968e+02 3.38779867e+02
 1.55555635e+02 1.11283131e+02 4.27431954e+01 4.22342964e+01
 4.75058677e+00 8.12971771e+00 3.91622995e-01 1.25073748e+00
 8.59742174e+00 4.29481718e+01 4.90729478e-01 1.19822141e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319441822035245
cond(S) = 24.83884434022646
E1 = -688.8959108982801  E_coul = 184.91731466951032
init E= -503.97859622877
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.681157873348861  LUMO = 112.690568808075
  mo_energy =
[-1.21496060e+02 -1.32717965e+01 -7.62080453e+00 -7.62080453e+00
 -7.62080453e+00 -1.65071138e+00 -6.81157873e-01 -6.81157873e-01
 -6.81157873e-01  1.12690569e+02  9.99744814e+02  7.53713601e+03]
E1 = -706.2552268028409  E_coul = 198.94506223423863
cycle= 1 E= -507.310164568602  delta_E= -3.33  |g|= 0.294  |ddm|=  0.3
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.320413
diis-c [-0.10266463  1.        ]
  HOMO = -0.236117774997525  LUMO = 114.047185917474
  mo_energy =
[-1.20114317e+02 -1.22426078e+01 -6.65159511e+00 -6.65159511e+00
 -6.65159511e+00 -1.16262478e+00 -2.36117775e-01 -2.36117775e-01
 -2.36117775e-01  1.14047186e+02  1.00108949e+03  7.53830180e+03]
E1 = -706.2344204913768  E_coul = 198.92397880641832
cycle= 2 E= -507.310441684959  delta_E= -0.000277  |g|= 0.00372  |ddm|= 0.00902
    CPU time for cycle= 2      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.00389416
diis-c [-1.45679055e-05 -2.41652582e-03  1.00241653e+00]
  HOMO = -0.23622408997418  LUMO = 114.044388448077
  mo_energy =
[-1.20120358e+02 -1.22433469e+01 -6.65273834e+00 -6.65273834e+00
 -6.65273834e+00 -1.16266456e+00 -2.36224090e-01 -2.36224090e-01
 -2.36224090e-01  1.14044388e+02  1.00108074e+03  7.53828851e+03]
E1 = -706.2341805284526  E_coul = 198.92373879079037
cycle= 3 E= -507.310441737662  delta_E= -5.27e-08  |g|= 5.74e-05  |ddm|= 0.000109
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=7.64981e-05
diis-c [-1.27453649e-10  4.84139963e-05 -2.02724278e-02  1.02022401e+00]
  HOMO = -0.236225011247749  LUMO = 114.044367327694
  mo_energy =
[-1.20120409e+02 -1.22433536e+01 -6.65275018e+00 -6.65275018e+00
 -6.65275018e+00 -1.16266482e+00 -2.36225011e-01 -2.36225011e-01
 -2.36225011e-01  1.14044367e+02  1.00108069e+03  7.53828846e+03]
E1 = -706.2341777439169  E_coul = 198.92373600624322
cycle= 4 E= -507.310441737674  delta_E= -1.15e-11  |g|= 1.52e-07  |ddm|= 1.39e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.2341777439169  E_coul = 198.92373600624322
  HOMO = -0.236225006271738  LUMO = 114.044367486133
  mo_energy =
[-1.20120409e+02 -1.22433536e+01 -6.65275013e+00 -6.65275013e+00
 -6.65275013e+00 -1.16266481e+00 -2.36225006e-01 -2.36225006e-01
 -2.36225006e-01  1.14044367e+02  1.00108069e+03  7.53828846e+03]
E1 = -706.2341777548544  E_coul = 198.92373601718063
Extra cycle  E= -507.310441737674  delta_E=    0  |g|= 2.12e-09  |ddm|= 4.48e-09
    CPU time for scf_cycle      0.10 sec, wall time      0.10 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 24.83884434022646
E1 = -706.2341777548544  E_coul = 198.92373601718063
init E= -507.310441737674
    CPU time for initialize scf      0.06 sec, wall time      0.06 sec
  HOMO = -0.236225006223187  LUMO = 114.044367487662
  mo_energy =
[-1.20120409e+02 -1.22433536e+01 -6.65275013e+00 -6.65275013e+00
 -6.65275013e+00 -1.16266481e+00 -2.36225006e-01 -2.36225006e-01
 -2.36225006e-01  1.14044367e+02  1.00108069e+03  7.53828846e+03]
E1 = -706.2341777549879  E_coul = 198.92373601731435
cycle= 1 E= -507.310441737674  delta_E= 2.27e-13  |g|= 3.5e-11  |ddm|= 5.84e-11
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -706.2341777549879  E_coul = 198.92373601731435
  HOMO = -0.236225006222603  LUMO = 114.044367487679
  mo_energy =
[-1.20120409e+02 -1.22433536e+01 -6.65275013e+00 -6.65275013e+00
 -6.65275013e+00 -1.16266481e+00 -2.36225006e-01 -2.36225006e-01
 -2.36225006e-01  1.14044367e+02  1.00108069e+03  7.53828846e+03]
E1 = -706.2341777549899  E_coul = 198.9237360173162
Extra cycle  E= -507.310441737674  delta_E= -2.27e-13  |g|= 7.43e-13  |ddm|= 8.9e-13
    CPU time for scf_cycle      0.13 sec, wall time      0.13 sec
exp = [4.54776598e+03 6.86335968e+02 1.55555635e+02 4.27431954e+01
 4.75058677e+00 3.91622995e-01 8.59742174e+00 4.90729478e-01]
grad_E = [-4.72294045e-09 -7.85100796e-08  2.87897587e-06 -1.02059022e-05
  5.05623124e-06  2.33304213e-05 -3.56488848e-06  8.18265007e-05]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((8, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([1.5735952963858392e+03,2.3761303919145971e+02,5.2332977870138201e+01,4.7281081235122091e+00,3.9325830426169639e-01,8.5907170030661746e+00,4.9039633283239870e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "6s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:49:44 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  4547.62533983        1
[INPUT] 0    0    [1    /1   ]  686.307857988        1
[INPUT] 0    0    [1    /1   ]  155.550242302        1
[INPUT] 0    0    [1    /1   ]  42.7428158968        1
[INPUT] 0    0    [1    /1   ]  4.75057841698        1
[INPUT] 0    0    [1    /1   ]  0.391622043942       1
[INPUT] 1    0    [1    /1   ]  8.59742304264        1
[INPUT] 1    0    [1    /1   ]  0.490727561242       1

nuclear repulsion = 0
number of shells = 8
number of NR pGTOs = 12
number of NR cGTOs = 12
basis = {'Ar': [[0, [4547.625339832202, 1.0]], [0, [686.3078579884716, 1.0]], [0, [155.55024230205126, 1.0]], [0, [42.74281589680277, 1.0]], [0, [4.750578416978302, 1.0]], [0, [0.3916220439417775, 1.0]], [1, [8.597423042636196, 1.0]], [1, [0.4907275612417722, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [4547.62533983]
bas 1, expnt(s) = [686.30785799]
bas 2, expnt(s) = [155.5502423]
bas 3, expnt(s) = [42.7428159]
bas 4, expnt(s) = [4.75057842]
bas 5, expnt(s) = [0.39162204]
bas 6, expnt(s) = [8.59742304]
bas 7, expnt(s) = [0.49072756]
CPU time:       251.54
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  1  1  1  0 36 37  0]
 [ 0  1  1  1  0 38 39  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 4.54762534e+03 1.39911539e+03 6.86307858e+02 3.38769461e+02
 1.55550242e+02 1.11280237e+02 4.27428159e+01 4.22340152e+01
 4.75057842e+00 8.12970698e+00 3.91622044e-01 1.25073520e+00
 8.59742304e+00 4.29481799e+01 4.90727561e-01 1.19821556e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319444560860667
cond(S) = 24.83979334253083
E1 = -688.8958321042778  E_coul = 184.91723550748523
init E= -503.978596596793
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.681160652080248  LUMO = 112.686999429373
  mo_energy =
[-1.21496064e+02 -1.32718054e+01 -7.62080976e+00 -7.62080976e+00
 -7.62080976e+00 -1.65071318e+00 -6.81160652e-01 -6.81160652e-01
 -6.81160652e-01  1.12686999e+02  9.99701791e+02  7.53685651e+03]
E1 = -706.2551129423281  E_coul = 198.94494838287522
cycle= 1 E= -507.310164559453  delta_E= -3.33  |g|= 0.294  |ddm|=  0.3
    CPU time for cycle= 1      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.320418
diis-c [-0.10266744  1.        ]
  HOMO = -0.236122785577574  LUMO = 114.043613744459
  mo_energy =
[-1.20114321e+02 -1.22426193e+01 -6.65160269e+00 -6.65160269e+00
 -6.65160269e+00 -1.16262873e+00 -2.36122786e-01 -2.36122786e-01
 -2.36122786e-01  1.14043614e+02  1.00104647e+03  7.53802230e+03]
E1 = -706.2343057752408  E_coul = 198.92386408532815
cycle= 2 E= -507.310441689913  delta_E= -0.000277  |g|= 0.00372  |ddm|= 0.00902
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00389426
diis-c [-1.45686616e-05 -2.41663560e-03  1.00241664e+00]
  HOMO = -0.236229105714422  LUMO = 114.040816240938
  mo_energy =
[-1.20120362e+02 -1.22433585e+01 -6.65274598e+00 -6.65274598e+00
 -6.65274598e+00 -1.16266851e+00 -2.36229106e-01 -2.36229106e-01
 -2.36229106e-01  1.14040816e+02  1.00103772e+03  7.53800902e+03]
E1 = -706.2340657957023  E_coul = 198.9236240530806
cycle= 3 E= -507.310441742622  delta_E= -5.27e-08  |g|= 5.74e-05  |ddm|= 0.000109
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=7.65016e-05
diis-c [-1.27458311e-10  4.84174064e-05 -2.02728308e-02  1.02022441e+00]
  HOMO = -0.236230027048325  LUMO = 114.040795119553
  mo_energy =
[-1.20120413e+02 -1.22433652e+01 -6.65275783e+00 -6.65275783e+00
 -6.65275783e+00 -1.16266877e+00 -2.36230027e-01 -2.36230027e-01
 -2.36230027e-01  1.14040795e+02  1.00103767e+03  7.53800897e+03]
E1 = -706.2340630109093  E_coul = 198.92362126827598
cycle= 4 E= -507.310441742633  delta_E= -1.16e-11  |g|= 1.52e-07  |ddm|= 1.39e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.2340630109093  E_coul = 198.92362126827598
  HOMO = -0.236230022071948  LUMO = 114.040795277995
  mo_energy =
[-1.20120413e+02 -1.22433652e+01 -6.65275777e+00 -6.65275777e+00
 -6.65275777e+00 -1.16266877e+00 -2.36230022e-01 -2.36230022e-01
 -2.36230022e-01  1.14040795e+02  1.00103768e+03  7.53800897e+03]
E1 = -706.2340630218484  E_coul = 198.9236212792148
Extra cycle  E= -507.310441742634  delta_E= -3.41e-13  |g|= 2.12e-09  |ddm|= 4.48e-09
    CPU time for scf_cycle      0.10 sec, wall time      0.11 sec
exp = [4.54762534e+03 6.86307858e+02 1.55550242e+02 4.27428159e+01
 4.75057842e+00 3.91622044e-01 8.59742304e+00 4.90727561e-01]
E = -507.31044174263366
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((8, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([1.5735952963858392e+03,2.3761303919145971e+02,5.2332977870138201e+01,4.7281081235122091e+00,3.9325830426169639e-01,8.5907170030661746e+00,4.9039633283239870e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "6s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:49:44 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  4547.62533983        1
[INPUT] 0    0    [1    /1   ]  686.307857988        1
[INPUT] 0    0    [1    /1   ]  155.550242302        1
[INPUT] 0    0    [1    /1   ]  42.7428158968        1
[INPUT] 0    0    [1    /1   ]  4.75057841698        1
[INPUT] 0    0    [1    /1   ]  0.391622043942       1
[INPUT] 1    0    [1    /1   ]  8.59742304264        1
[INPUT] 1    0    [1    /1   ]  0.490727561242       1

nuclear repulsion = 0
number of shells = 8
number of NR pGTOs = 12
number of NR cGTOs = 12
basis = {'Ar': [[0, [4547.625339832202, 1.0]], [0, [686.3078579884716, 1.0]], [0, [155.55024230205126, 1.0]], [0, [42.74281589680277, 1.0]], [0, [4.750578416978302, 1.0]], [0, [0.3916220439417775, 1.0]], [1, [8.597423042636196, 1.0]], [1, [0.4907275612417722, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [4547.62533983]
bas 1, expnt(s) = [686.30785799]
bas 2, expnt(s) = [155.5502423]
bas 3, expnt(s) = [42.7428159]
bas 4, expnt(s) = [4.75057842]
bas 5, expnt(s) = [0.39162204]
bas 6, expnt(s) = [8.59742304]
bas 7, expnt(s) = [0.49072756]
CPU time:       252.41
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  1  1  1  0 36 37  0]
 [ 0  1  1  1  0 38 39  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 4.54762534e+03 1.39911539e+03 6.86307858e+02 3.38769461e+02
 1.55550242e+02 1.11280237e+02 4.27428159e+01 4.22340152e+01
 4.75057842e+00 8.12970698e+00 3.91622044e-01 1.25073520e+00
 8.59742304e+00 4.29481799e+01 4.90727561e-01 1.19821556e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319444560860667
cond(S) = 24.83979334253083
E1 = -688.8958321042778  E_coul = 184.91723550748523
init E= -503.978596596793
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.681160652080248  LUMO = 112.686999429373
  mo_energy =
[-1.21496064e+02 -1.32718054e+01 -7.62080976e+00 -7.62080976e+00
 -7.62080976e+00 -1.65071318e+00 -6.81160652e-01 -6.81160652e-01
 -6.81160652e-01  1.12686999e+02  9.99701791e+02  7.53685651e+03]
E1 = -706.2551129423281  E_coul = 198.94494838287522
cycle= 1 E= -507.310164559453  delta_E= -3.33  |g|= 0.294  |ddm|=  0.3
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.320418
diis-c [-0.10266744  1.        ]
  HOMO = -0.236122785577574  LUMO = 114.043613744459
  mo_energy =
[-1.20114321e+02 -1.22426193e+01 -6.65160269e+00 -6.65160269e+00
 -6.65160269e+00 -1.16262873e+00 -2.36122786e-01 -2.36122786e-01
 -2.36122786e-01  1.14043614e+02  1.00104647e+03  7.53802230e+03]
E1 = -706.2343057752408  E_coul = 198.92386408532815
cycle= 2 E= -507.310441689913  delta_E= -0.000277  |g|= 0.00372  |ddm|= 0.00902
    CPU time for cycle= 2      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.00389426
diis-c [-1.45686616e-05 -2.41663560e-03  1.00241664e+00]
  HOMO = -0.236229105714422  LUMO = 114.040816240938
  mo_energy =
[-1.20120362e+02 -1.22433585e+01 -6.65274598e+00 -6.65274598e+00
 -6.65274598e+00 -1.16266851e+00 -2.36229106e-01 -2.36229106e-01
 -2.36229106e-01  1.14040816e+02  1.00103772e+03  7.53800902e+03]
E1 = -706.2340657957023  E_coul = 198.9236240530806
cycle= 3 E= -507.310441742622  delta_E= -5.27e-08  |g|= 5.74e-05  |ddm|= 0.000109
    CPU time for cycle= 3      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=7.65016e-05
diis-c [-1.27458311e-10  4.84174064e-05 -2.02728308e-02  1.02022441e+00]
  HOMO = -0.236230027048325  LUMO = 114.040795119553
  mo_energy =
[-1.20120413e+02 -1.22433652e+01 -6.65275783e+00 -6.65275783e+00
 -6.65275783e+00 -1.16266877e+00 -2.36230027e-01 -2.36230027e-01
 -2.36230027e-01  1.14040795e+02  1.00103767e+03  7.53800897e+03]
E1 = -706.2340630109093  E_coul = 198.92362126827598
cycle= 4 E= -507.310441742633  delta_E= -1.16e-11  |g|= 1.52e-07  |ddm|= 1.39e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.2340630109093  E_coul = 198.92362126827598
  HOMO = -0.236230022071948  LUMO = 114.040795277995
  mo_energy =
[-1.20120413e+02 -1.22433652e+01 -6.65275777e+00 -6.65275777e+00
 -6.65275777e+00 -1.16266877e+00 -2.36230022e-01 -2.36230022e-01
 -2.36230022e-01  1.14040795e+02  1.00103768e+03  7.53800897e+03]
E1 = -706.2340630218484  E_coul = 198.9236212792148
Extra cycle  E= -507.310441742634  delta_E= -3.41e-13  |g|= 2.12e-09  |ddm|= 4.48e-09
    CPU time for scf_cycle      0.09 sec, wall time      0.10 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 24.83979334253083
E1 = -706.2340630218484  E_coul = 198.9236212792148
init E= -507.310441742634
    CPU time for initialize scf      0.05 sec, wall time      0.06 sec
  HOMO = -0.236230022023383  LUMO = 114.040795279525
  mo_energy =
[-1.20120413e+02 -1.22433652e+01 -6.65275777e+00 -6.65275777e+00
 -6.65275777e+00 -1.16266877e+00 -2.36230022e-01 -2.36230022e-01
 -2.36230022e-01  1.14040795e+02  1.00103768e+03  7.53800897e+03]
E1 = -706.2340630219821  E_coul = 198.92362127934865
cycle= 1 E= -507.310441742633  delta_E= 1.71e-13  |g|= 3.47e-11  |ddm|= 5.84e-11
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -706.2340630219821  E_coul = 198.92362127934865
  HOMO = -0.2362300220228  LUMO = 114.040795279541
  mo_energy =
[-1.20120413e+02 -1.22433652e+01 -6.65275777e+00 -6.65275777e+00
 -6.65275777e+00 -1.16266877e+00 -2.36230022e-01 -2.36230022e-01
 -2.36230022e-01  1.14040795e+02  1.00103768e+03  7.53800897e+03]
E1 = -706.2340630219843  E_coul = 198.92362127935047
Extra cycle  E= -507.310441742634  delta_E= -3.41e-13  |g|= 4.2e-12  |ddm|= 8.83e-13
    CPU time for scf_cycle      0.12 sec, wall time      0.12 sec
exp = [4.54762534e+03 6.86307858e+02 1.55550242e+02 4.27428159e+01
 4.75057842e+00 3.91622044e-01 8.59742304e+00 4.90727561e-01]
grad_E = [-1.07847379e-09 -6.66289127e-09  3.37294226e-07 -1.53647438e-06
  3.25159862e-07  1.33184919e-06 -3.74867632e-07  5.44997010e-06]
 message: Optimization terminated successfully
 success: True
  status: 0
     fun: -507.31044174263366
       x: [ 4.548e+03  6.863e+02  1.556e+02  4.274e+01  4.751e+00
            3.916e-01  8.597e+00  4.907e-01]
     nit: 66
     jac: [-1.078e-09 -6.663e-09  3.373e-07 -1.536e-06  3.252e-07
            1.332e-06 -3.749e-07  5.450e-06]
    nfev: 72
    njev: 66
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((8, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([1.5735952963858392e+03,2.3761303919145971e+02,5.2332977870138201e+01,4.7281081235122091e+00,3.9325830426169639e-01,8.5907170030661746e+00,4.9039633283239870e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "6s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:49:48 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  4547.62533983        1
[INPUT] 0    0    [1    /1   ]  686.307857988        1
[INPUT] 0    0    [1    /1   ]  155.550242302        1
[INPUT] 0    0    [1    /1   ]  42.7428158968        1
[INPUT] 0    0    [1    /1   ]  4.75057841698        1
[INPUT] 0    0    [1    /1   ]  0.391622043942       1
[INPUT] 1    0    [1    /1   ]  8.59742304264        1
[INPUT] 1    0    [1    /1   ]  0.490727561242       1

nuclear repulsion = 0
number of shells = 8
number of NR pGTOs = 12
number of NR cGTOs = 12
basis = {'Ar': [[0, [4547.625339832202, 1.0]], [0, [686.3078579884716, 1.0]], [0, [155.55024230205126, 1.0]], [0, [42.74281589680277, 1.0]], [0, [4.750578416978302, 1.0]], [0, [0.3916220439417775, 1.0]], [1, [8.597423042636196, 1.0]], [1, [0.4907275612417722, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [4547.62533983]
bas 1, expnt(s) = [686.30785799]
bas 2, expnt(s) = [155.5502423]
bas 3, expnt(s) = [42.7428159]
bas 4, expnt(s) = [4.75057842]
bas 5, expnt(s) = [0.39162204]
bas 6, expnt(s) = [8.59742304]
bas 7, expnt(s) = [0.49072756]
CPU time:       255.86
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  1  1  1  0 36 37  0]
 [ 0  1  1  1  0 38 39  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 4.54762534e+03 1.39911539e+03 6.86307858e+02 3.38769461e+02
 1.55550242e+02 1.11280237e+02 4.27428159e+01 4.22340152e+01
 4.75057842e+00 8.12970698e+00 3.91622044e-01 1.25073520e+00
 8.59742304e+00 4.29481799e+01 4.90727561e-01 1.19821556e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319444560860667
cond(S) = 24.83979334253083
E1 = -688.8958321042778  E_coul = 184.91723550748523
init E= -503.978596596793
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.681160652080248  LUMO = 112.686999429373
  mo_energy =
[-1.21496064e+02 -1.32718054e+01 -7.62080976e+00 -7.62080976e+00
 -7.62080976e+00 -1.65071318e+00 -6.81160652e-01 -6.81160652e-01
 -6.81160652e-01  1.12686999e+02  9.99701791e+02  7.53685651e+03]
E1 = -706.2551129423281  E_coul = 198.94494838287522
cycle= 1 E= -507.310164559453  delta_E= -3.33  |g|= 0.294  |ddm|=  0.3
    CPU time for cycle= 1      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.320418
diis-c [-0.10266744  1.        ]
  HOMO = -0.236122785577574  LUMO = 114.043613744459
  mo_energy =
[-1.20114321e+02 -1.22426193e+01 -6.65160269e+00 -6.65160269e+00
 -6.65160269e+00 -1.16262873e+00 -2.36122786e-01 -2.36122786e-01
 -2.36122786e-01  1.14043614e+02  1.00104647e+03  7.53802230e+03]
E1 = -706.2343057752408  E_coul = 198.92386408532815
cycle= 2 E= -507.310441689913  delta_E= -0.000277  |g|= 0.00372  |ddm|= 0.00902
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00389426
diis-c [-1.45686616e-05 -2.41663560e-03  1.00241664e+00]
  HOMO = -0.236229105714422  LUMO = 114.040816240938
  mo_energy =
[-1.20120362e+02 -1.22433585e+01 -6.65274598e+00 -6.65274598e+00
 -6.65274598e+00 -1.16266851e+00 -2.36229106e-01 -2.36229106e-01
 -2.36229106e-01  1.14040816e+02  1.00103772e+03  7.53800902e+03]
E1 = -706.2340657957023  E_coul = 198.9236240530806
cycle= 3 E= -507.310441742622  delta_E= -5.27e-08  |g|= 5.74e-05  |ddm|= 0.000109
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=7.65016e-05
diis-c [-1.27458311e-10  4.84174064e-05 -2.02728308e-02  1.02022441e+00]
  HOMO = -0.236230027048325  LUMO = 114.040795119553
  mo_energy =
[-1.20120413e+02 -1.22433652e+01 -6.65275783e+00 -6.65275783e+00
 -6.65275783e+00 -1.16266877e+00 -2.36230027e-01 -2.36230027e-01
 -2.36230027e-01  1.14040795e+02  1.00103767e+03  7.53800897e+03]
E1 = -706.2340630109093  E_coul = 198.92362126827598
cycle= 4 E= -507.310441742633  delta_E= -1.16e-11  |g|= 1.52e-07  |ddm|= 1.39e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.2340630109093  E_coul = 198.92362126827598
  HOMO = -0.236230022071948  LUMO = 114.040795277995
  mo_energy =
[-1.20120413e+02 -1.22433652e+01 -6.65275777e+00 -6.65275777e+00
 -6.65275777e+00 -1.16266877e+00 -2.36230022e-01 -2.36230022e-01
 -2.36230022e-01  1.14040795e+02  1.00103768e+03  7.53800897e+03]
E1 = -706.2340630218484  E_coul = 198.9236212792148
Extra cycle  E= -507.310441742634  delta_E= -3.41e-13  |g|= 2.12e-09  |ddm|= 4.48e-09
    CPU time for scf_cycle      0.09 sec, wall time      0.10 sec
exp = [4.54762534e+03 6.86307858e+02 1.55550242e+02 4.27428159e+01
 4.75057842e+00 3.91622044e-01 8.59742304e+00 4.90727561e-01]
E = -507.31044174263366
E = -507.31044174263366
exp = [4.5476253398322024e+03,6.8630785798847160e+02,1.5555024230205126e+02,4.2742815896802767e+01,4.7505784169783016e+00,3.9162204394177752e-01,8.5974230426361959e+00,4.9072756124177219e-01]
